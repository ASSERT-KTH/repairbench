diff --git a/tmp/7c9a0f13-6143-4ce2-aeac-073e4de78962_buggy.java b/tmp/8d299309-77d8-4ca1-a991-4f4be5259d94_fixed.java
index d6a560a..252f5d9 100644
--- a/tmp/7c9a0f13-6143-4ce2-aeac-073e4de78962_buggy.java
+++ b/tmp/8d299309-77d8-4ca1-a991-4f4be5259d94_fixed.java
@@ -1,33 +1,42 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+  // Check for cycles before resolving (early detection)
+  if (detectImplicitPrototypeCycle()) {
+    handleTypeCycle(t);
+  }
+
+  // Try resolving via registry first
   boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
 
   if (resolved) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
+    // Check for cycles again after resolution
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t);
+    }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
 
+  // If not resolved via registry, try resolving via properties
   resolveViaProperties(t, enclosing);
+  // Check for cycles again after property resolution
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
   }
 
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
     finishPropertyContinuations();
+    // Final cycle check
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t);
+    }
   }
   return registry.isLastGeneration() ?
       getReferencedType() : this;
 }
\ No newline at end of file
