diff --git a/tmp/12f2ae4c-d25f-4fbd-811c-abbbe3e5074e_buggy.java b/tmp/1092a208-a573-430f-a56d-c326d4e7fa5d_fixed.java
index d6a560a..57e210b 100644
--- a/tmp/12f2ae4c-d25f-4fbd-811c-abbbe3e5074e_buggy.java
+++ b/tmp/1092a208-a573-430f-a56d-c326d4e7fa5d_fixed.java
@@ -1,33 +1,36 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // First check for cycles before attempting resolution
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t);
+      return this; // Return early to avoid infinite recursion
+    }
+
+    // Try resolving via registry first
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return this; // Return early if cycle detected after registry resolution
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
+    // Try resolving via properties
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return this; // Return early if cycle detected after property resolution
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
