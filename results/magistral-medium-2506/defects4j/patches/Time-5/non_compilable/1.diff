diff --git a/tmp/78027e3a-db72-4060-8401-cec9cfa7350b_buggy.java b/tmp/e42ed8f1-cdd8-42ad-a811-a10597414116_fixed.java
index dbda381..540db14 100644
--- a/tmp/78027e3a-db72-4060-8401-cec9cfa7350b_buggy.java
+++ b/tmp/e42ed8f1-cdd8-42ad-a811-a10597414116_fixed.java
@@ -1,54 +1,71 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
+    // Check if the period type supports years and months if they are present
+    if ((getYears() != 0 || getMonths() != 0) &&
+        (type.getYearsDurationType() == null || type.getMonthsDurationType() == null)) {
+        throw new UnsupportedOperationException("Field is not supported");
+    }
+
     long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
     millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
     millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
     millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
     millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
     millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
+    // Handle years and months separately if they're supported
+    if (type.getYearsDurationType() != null || type.getMonthsDurationType() != null) {
+        // Create a period with just time fields first
+        Period timePeriod = new Period(millis, type, ISOChronology.getInstanceUTC());
+
         int years = getYears();
         int months = getMonths();
-        if (years != 0 || months != 0) {
+
+        // If the period type doesn't support years or months, we'll add them to months
+        if (type.getYearsDurationType() == null) {
+            months += years * 12;
+            years = 0;
+        }
+        if (type.getMonthsDurationType() == null) {
+            // But if months aren't supported either, we have to throw
+            // (since we already checked years/months aren't present)
+            throw new IllegalStateException(); // Shouldn't happen due to earlier check
+        }
+
+        // Normalize years and months
         years = FieldUtils.safeAdd(years, months / 12);
         months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+
+        // Create new period with just the normalized time fields
+        Period resultTime = new Period(0, 0, 0, timePeriod.getDays(), timePeriod.getHours(),
+                                      timePeriod.getMinutes(), timePeriod.getSeconds(),
+                                      timePeriod.getMillis(), type);
+
+        // Add years and months if supported
+        if (type.getYearsDurationType() != null && years != 0) {
+            resultTime = resultTime.withYears(years);
         }
-            if (months != 0) {
-                result = result.withMonths(months);
+        if (type.getMonthsDurationType() != null && (months != 0 || years != 0)) {
+            // Add both the normalized months and any leftover from years
+            int totalMonths = months + (years != 0 && type.getYearsDurationType() == null ? (years * 12) : 0);
+            resultTime = resultTime.withMonths(FieldUtils.safeAdd(resultTime.getMonths(), totalMonths));
+        } else if (months != 0 || years != 0) {
+            // If months aren't supported but we have time to add, convert to days
+            // (This is a last resort - not ideal but preserves the time)
+            long daysFromMonths = (long)(months + years * 12) * 30L; // Approximate - not perfect but maintains the time
+            millis += daysFromMonths * DateTimeConstants.MILLIS_PER_DAY;
+            return new Period(millis, type, ISOChronology.getInstanceUTC());
         }
+
+        return resultTime;
+    } else {
+        // If period type doesn't support years or months at all
+        if (getYears() != 0 || getMonths() != 0) {
+            // Convert years and months to approximate days and add to millis
+            long daysFromYears = (long)getYears() * 365L;
+            long daysFromMonths = (long)getMonths() * 30L; // Approximate
+            millis += (daysFromYears + daysFromMonths) * DateTimeConstants.MILLIS_PER_DAY;
+        }
+        return new Period(millis, type, ISOChronology.getInstanceUTC());
     }
-        return result;
 }
\ No newline at end of file
