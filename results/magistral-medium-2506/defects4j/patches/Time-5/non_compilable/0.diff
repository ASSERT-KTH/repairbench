diff --git a/tmp/5159bf41-40b8-4885-96f8-9f7a0175724d_buggy.java b/tmp/fc36427b-9286-42ae-81cd-7e07a0ded130_fixed.java
index dbda381..429087f 100644
--- a/tmp/5159bf41-40b8-4885-96f8-9f7a0175724d_buggy.java
+++ b/tmp/fc36427b-9286-42ae-81cd-7e07a0ded130_fixed.java
@@ -1,54 +1,69 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
+        // Handle years and months first if they're present in the input period
         int years = getYears();
         int months = getMonths();
-        if (years != 0 || months != 0) {
+        // Check if the target type supports years and months if they exist in the input
+        if ((years != 0 || months != 0) &&
+            (type.getYearsDurationType() == null || type.getMonthsDurationType() == null)) {
+            // Calculate total months including years
+            int totalMonths = (Math.abs(years) * 12) + Math.abs(months);
+            if (years < 0 || months < 0) {
+                totalMonths = -totalMonths;
+            }
+            months = totalMonths;
+            years = 0;
+        } else {
+            // Normalize years and months
             years = FieldUtils.safeAdd(years, months / 12);
             months = months % 12;
-            if (years != 0) {
+        }
+
+        long millis = 0L;
+        // Only add time fields if they are supported by the target type
+        if (type.getDaysDurationType() != null) {
+            millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
+        }
+        if (type.getWeeksDurationType() != null) {
+            millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
+        }
+        if (type.getHoursDurationType() != null) {
+            millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
+        }
+        if (type.getMinutesDurationType() != null) {
+            millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
+        }
+        if (type.getSecondsDurationType() != null) {
+            millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
+        }
+        millis += getMillis();
+
+        Period result = new Period(0L, type);
+        if (type.getYearsDurationType() != null && years != 0) {
             result = result.withYears(years);
         }
-            if (months != 0) {
+        if (type.getMonthsDurationType() != null && months != 0) {
             result = result.withMonths(months);
         }
+        if (type.getWeeksDurationType() != null && getWeeks() != 0) {
+            result = result.plusWeeks(getWeeks());
         }
+        if (type.getDaysDurationType() != null && getDays() != 0) {
+            result = result.plusDays(getDays());
+        }
+        if (type.getHoursDurationType() != null && getHours() != 0) {
+            result = result.plusHours(getHours());
+        }
+        if (type.getMinutesDurationType() != null && getMinutes() != 0) {
+            result = result.plusMinutes(getMinutes());
+        }
+        if (type.getSecondsDurationType() != null && getSeconds() != 0) {
+            result = result.plusSeconds(getSeconds());
+        }
+        if (millis != 0L) {
+            result = result.plus(millis);
+        }
+
         return result;
     }
\ No newline at end of file
