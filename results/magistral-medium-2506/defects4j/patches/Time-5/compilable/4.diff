diff --git a/tmp/11abd014-1217-40bb-9028-29125fead1c9_buggy.java b/tmp/c2b71c6b-d8dd-4dae-bf60-3b9adedd98ba_fixed.java
index dbda381..3187ae4 100644
--- a/tmp/11abd014-1217-40bb-9028-29125fead1c9_buggy.java
+++ b/tmp/c2b71c6b-d8dd-4dae-bf60-3b9adedd98ba_fixed.java
@@ -1,54 +1,48 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
         long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
+        // Create a new Period with just the millis to handle the time components
+        Period timeResult = new Period(millis, type, ISOChronology.getInstanceUTC());
+
+        // Handle years and months separately, since they can't be represented in millis
         int years = getYears();
         int months = getMonths();
+
         if (years != 0 || months != 0) {
+            // Check if the period type supports years and months
+            if (!type.isSupported(DurationFieldType.years()) && years != 0) {
+                throw new UnsupportedOperationException("Field is not supported");
+            }
+            if (!type.isSupported(DurationFieldType.months()) && months != 0) {
+                throw new UnsupportedOperationException("Field is not supported");
+            }
+
             years = FieldUtils.safeAdd(years, months / 12);
             months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
-            }
-            if (months != 0) {
-                result = result.withMonths(months);
-            }
-        }
+
+            // Create a new period with just years and months
+            Period dateResult = new Period(0, years, months, 0, 0, 0, 0, 0, type);
+
+            // Combine the timeResult and dateResult
+            Period result = new Period(
+                timeResult.getYears() + dateResult.getYears(),
+                timeResult.getMonths() + dateResult.getMonths(),
+                timeResult.getWeeks() + dateResult.getWeeks(),
+                timeResult.getDays() + dateResult.getDays(),
+                timeResult.getHours() + dateResult.getHours(),
+                timeResult.getMinutes() + dateResult.getMinutes(),
+                timeResult.getSeconds() + dateResult.getSeconds(),
+                timeResult.getMillis() + dateResult.getMillis(),
+                type
+            );
             return result;
         }
+
+        return timeResult;
+    }
\ No newline at end of file
