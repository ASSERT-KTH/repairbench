diff --git a/tmp/d6852ebc-76ac-4b1a-8700-84cf6b6392a5_buggy.java b/tmp/627cc9b4-bce9-4e4d-8f0c-badde6191f68_fixed.java
index dbda381..6533f4a 100644
--- a/tmp/d6852ebc-76ac-4b1a-8700-84cf6b6392a5_buggy.java
+++ b/tmp/627cc9b4-bce9-4e4d-8f0c-badde6191f68_fixed.java
@@ -1,54 +1,62 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
+        // If the period has years or months but the type doesn't support them, throw exception
+        if ((getYears() != 0 || getMonths() != 0) && (type == PeriodType.days() || type == PeriodType.hours() ||
+                type == PeriodType.minutes() || type == PeriodType.seconds() || type == PeriodType.millis() ||
+                type == PeriodType.weeks() || (!type.isSupported(DurationFieldType.years()) && getYears() != 0) ||
+                (!type.isSupported(DurationFieldType.months()) && getMonths() != 0))) {
+            throw new UnsupportedOperationException("Field is not supported");
+        }
+
         long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
+
         Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
+        // Only process years and months if the result type supports them
+        boolean supportsYears = type.isSupported(DurationFieldType.years());
+        boolean supportsMonths = type.isSupported(DurationFieldType.months());
+
         int years = getYears();
         int months = getMonths();
-        if (years != 0 || months != 0) {
+
+        if (supportsYears || supportsMonths) {
+            // Normalize years and months
             years = FieldUtils.safeAdd(years, months / 12);
             months = months % 12;
-            if (years != 0) {
+
+            if (supportsYears && years != 0) {
                 result = result.withYears(years);
             }
-            if (months != 0) {
+            if (supportsMonths && months != 0) {
                 result = result.withMonths(months);
             }
         }
+
+        // For fields not processed above (like weeks), we need to transfer them from original to result
+        // if the type supports them but they weren't part of the millisecond conversion
+        if (type.isSupported(DurationFieldType.weeks())) {
+            result = result.withWeeks(getWeeks());
+        }
+        if (type.isSupported(DurationFieldType.days())) {
+            result = result.withDays(getDays());
+        }
+        if (type.isSupported(DurationFieldType.hours())) {
+            result = result.withHours(getHours());
+        }
+        if (type.isSupported(DurationFieldType.minutes())) {
+            result = result.withMinutes(getMinutes());
+        }
+        if (type.isSupported(DurationFieldType.seconds())) {
+            result = result.withSeconds(getSeconds());
+        }
+        if (type.isSupported(DurationFieldType.millis())) {
+            result = result.withMillis(getMillis());
+        }
+
         return result;
     }
\ No newline at end of file
