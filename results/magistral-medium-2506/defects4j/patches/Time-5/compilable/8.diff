diff --git a/tmp/6e99fe0f-f82c-4cf9-bd3f-939ff11d8ff8_buggy.java b/tmp/fa145759-6697-4ccb-8de7-0364fdf14f54_fixed.java
index dbda381..f1c9e07 100644
--- a/tmp/6e99fe0f-f82c-4cf9-bd3f-939ff11d8ff8_buggy.java
+++ b/tmp/fa145759-6697-4ccb-8de7-0364fdf14f54_fixed.java
@@ -1,54 +1,47 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
         long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
         Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
         int years = getYears();
         int months = getMonths();
-        if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
+
+        // Check if the type supports years and months before processing them
+        boolean supportsYears = type.isSupported(DurationFieldType.years());
+        boolean supportsMonths = type.isSupported(DurationFieldType.months());
+
+        // Only process years and months if the type supports them
+        if ((years != 0 || months != 0) &&
+            (supportsYears || supportsMonths)) {
+            if (!supportsYears && !supportsMonths) {
+                throw new UnsupportedOperationException("Field is not supported");
+            }
+            // If years are supported, add them; otherwise add to months
+            if (supportsYears) {
                 if (years != 0) {
                     result = result.withYears(years);
                 }
+            } else {
+                months += years * 12;
+            }
+            // If months are supported, add them
+            if (supportsMonths) {
+                months += years * 12;  // add years as months if months are supported
+                years = 0;
+                months = FieldUtils.safeAdd(months, 0);  // just to check overflow
                 if (months != 0) {
                     result = result.withMonths(months);
                 }
             }
+        } else if (years != 0 || months != 0) {
+            if (!(supportsYears || supportsMonths)) {
+                throw new UnsupportedOperationException("Field is not supported");
+            }
+        }
+
         return result;
     }
\ No newline at end of file
