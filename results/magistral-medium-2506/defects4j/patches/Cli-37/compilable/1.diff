diff --git a/tmp/6e7fc283-cc3a-4707-bb01-1f0189cbcc69_buggy.java b/tmp/7ae9b9ec-cebb-445e-95f7-e5685efcf2e3_fixed.java
index a7e6997..1bfddff 100644
--- a/tmp/6e7fc283-cc3a-4707-bb01-1f0189cbcc69_buggy.java
+++ b/tmp/7ae9b9ec-cebb-445e-95f7-e5685efcf2e3_fixed.java
@@ -1,12 +1,37 @@
     /**
      * Tells if the token looks like a short option.
      *
      * @param token
      */
     private boolean isShortOption(String token)
     {
         // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        return token.startsWith("-") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));
+        if (!token.startsWith("-") || token.length() < 2) {
+            return false;
+        }
+
+        // Check if the token is a valid short option
+        String potentialOptions = token.substring(1).split("=")[0];
+        if (potentialOptions.isEmpty()) {
+            return false;
+        }
+
+        // Check if at least the first character is a valid short option
+        boolean firstCharValid = options.hasShortOption(potentialOptions.substring(0, 1));
+
+        // If the potential options string is longer than 1, we need to check
+        // if it's a clustered short option (like -ab) or if it's a value following the option (like -o value)
+        if (potentialOptions.length() > 1) {
+            // Check if the entire remaining part is a valid short option (clustered)
+            boolean allValid = true;
+            for (int i = 0; i < potentialOptions.length(); i++) {
+                if (!options.hasShortOption(potentialOptions.substring(i, i+1))) {
+                    allValid = false;
+                    break;
+                }
+            }
+            return firstCharValid && allValid;
+        }
 
-        // remove leading "-" and "=value"
+        return firstCharValid;
     }
\ No newline at end of file
