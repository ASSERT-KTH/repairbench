diff --git a/tmp/588cb2ca-6dab-445f-8e90-b712e6dc358e_buggy.java b/tmp/0f11100f-1358-4dd0-afed-dfc1b60cf94a_fixed.java
index a7e6997..6d7e9eb 100644
--- a/tmp/588cb2ca-6dab-445f-8e90-b712e6dc358e_buggy.java
+++ b/tmp/0f11100f-1358-4dd0-afed-dfc1b60cf94a_fixed.java
@@ -1,12 +1,38 @@
     /**
      * Tells if the token looks like a short option.
      *
      * @param token
      */
     private boolean isShortOption(String token)
     {
         // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        return token.startsWith("-") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));
+        // check if it starts with - and has at least 2 characters
+        if (!token.startsWith("-") || token.length() < 2) {
+            return false;
+        }
+
+        // extract the option part (before any '=' if present)
+        String optionPart;
+        int equalSignPos = token.indexOf('=');
+        if (equalSignPos != -1) {
+            optionPart = token.substring(1, equalSignPos);
+        } else {
+            optionPart = token.substring(1);
+        }
 
-        // remove leading "-" and "=value"
+        // check if the option part matches any short option or is a combination of short options
+        // first check if it's a single short option
+        if (optionPart.length() == 1) {
+            return options.hasShortOption(optionPart);
+        }
+
+        // for longer option parts, check if they consist entirely of short options
+        // (each character should be a valid short option)
+        for (int i = 0; i < optionPart.length(); i++) {
+            String c = optionPart.substring(i, i + 1);
+            if (!options.hasShortOption(c)) {
+                return false;
+            }
+        }
+        return true;
     }
\ No newline at end of file
