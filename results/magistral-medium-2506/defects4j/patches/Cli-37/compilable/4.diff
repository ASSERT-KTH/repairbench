diff --git a/tmp/8027d4c3-48cb-4d97-9d70-75e08591edc4_buggy.java b/tmp/a39f76d8-dfe2-41bd-abcd-d9f434123af6_fixed.java
index a7e6997..953cf14 100644
--- a/tmp/8027d4c3-48cb-4d97-9d70-75e08591edc4_buggy.java
+++ b/tmp/a39f76d8-dfe2-41bd-abcd-d9f434123af6_fixed.java
@@ -1,12 +1,29 @@
     /**
      * Tells if the token looks like a short option.
      *
      * @param token
      */
     private boolean isShortOption(String token)
     {
         // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        return token.startsWith("-") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));
-
-        // remove leading "-" and "=value"
+        if (token.startsWith("-") && token.length() >= 2) {
+            // Check if the first character after "-" is a valid short option
+            String optionPart = token.substring(1);
+            // Check if the first character is a valid short option
+            if (options.hasShortOption(optionPart.substring(0, 1))) {
+                return true;
+            }
+            // Check if there's a potential clustered option
+            int equalsPos = optionPart.indexOf('=');
+            String optionsStr = equalsPos != -1 ? optionPart.substring(0, equalsPos) : optionPart;
+            // If the entire remaining part consists of valid short options
+            for (int i = 0; i < optionsStr.length(); i++) {
+                String c = optionsStr.substring(i, i + 1);
+                if (!options.hasShortOption(c)) {
+                    return false;
+                }
+            }
+            return true;
+        }
+        return false;
     }
\ No newline at end of file
