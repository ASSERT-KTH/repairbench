diff --git a/tmp/689b7fd7-d86a-4d54-9886-2dfcf75f22a6_buggy.java b/tmp/cb855e06-891d-49a7-a164-9f728e692e1e_fixed.java
index a7e6997..fe33e87 100644
--- a/tmp/689b7fd7-d86a-4d54-9886-2dfcf75f22a6_buggy.java
+++ b/tmp/cb855e06-891d-49a7-a164-9f728e692e1e_fixed.java
@@ -1,12 +1,43 @@
     /**
      * Tells if the token looks like a short option.
      *
      * @param token
      */
     private boolean isShortOption(String token)
     {
         // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        return token.startsWith("-") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));
+        if (!token.startsWith("-") || token.length() < 2) {
+            return false;
+        }
+
+        // Check if the first character after '-' is a valid short option
+        String possibleOption = token.substring(1, 2);
+        if (!options.hasShortOption(possibleOption)) {
+            return false;
+        }
 
-        // remove leading "-" and "=value"
+        // Handle combined short options like -xyz
+        if (token.length() > 2) {
+            // If there's an equals sign, check if what comes before it are all valid short options
+            int equalsPos = token.indexOf('=');
+            if (equalsPos > 0) {
+                String prefix = token.substring(1, equalsPos);
+                for (int i = 0; i < prefix.length(); i++) {
+                    if (!options.hasShortOption(prefix.substring(i, i+1))) {
+                        return false;
+                    }
+                }
+                return true;
+            } else {
+                // Check all characters after '-' are valid short options
+                String rest = token.substring(1);
+                for (int i = 0; i < rest.length(); i++) {
+                    if (!options.hasShortOption(rest.substring(i, i+1))) {
+                        return false;
+                    }
+                }
+                return true;
+            }
+        }
+        return true;
     }
\ No newline at end of file
