diff --git a/tmp/1b2f37a9-3f5d-4ea8-8a86-c5313bd57b25_buggy.java b/tmp/81669adf-7944-49d1-a9de-c791ee5428c3_fixed.java
index a7e6997..939f741 100644
--- a/tmp/1b2f37a9-3f5d-4ea8-8a86-c5313bd57b25_buggy.java
+++ b/tmp/81669adf-7944-49d1-a9de-c791ee5428c3_fixed.java
@@ -1,12 +1,27 @@
     /**
      * Tells if the token looks like a short option.
      *
      * @param token
      */
     private boolean isShortOption(String token)
     {
         // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        return token.startsWith("-") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));
-
-        // remove leading "-" and "=value"
+        if (!token.startsWith("-") || token.length() < 2) {
+            return false;
+        }
+        // Check if the first character after '-' is a valid short option
+        boolean isValid = options.hasShortOption(token.substring(1, 2).charAt(0));
+        // If it's not a valid single-char short option, check if the entire string after '-' is a valid option
+        if (!isValid && token.length() > 2) {
+            // Check if the first part (before any '=' or the rest) is a valid option
+            String optionPart = token.substring(1);
+            int equalIndex = optionPart.indexOf('=');
+            if (equalIndex >= 0) {
+                optionPart = optionPart.substring(0, equalIndex);
+            }
+            // Check if the option part is a valid short option (all characters should be options)
+            // This is simplified - actual implementation might need to check multiple short options concatenated
+            return options.hasShortOption(optionPart.substring(0, 1));
+        }
+        return isValid;
     }
\ No newline at end of file
