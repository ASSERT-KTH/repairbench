diff --git a/tmp/c4a6e319-9685-4fc2-9eb5-5925b9d27bf7_buggy.java b/tmp/80a952cd-c603-481a-b3f1-b1f34f1f5d34_fixed.java
index a7e6997..f1c1399 100644
--- a/tmp/c4a6e319-9685-4fc2-9eb5-5925b9d27bf7_buggy.java
+++ b/tmp/80a952cd-c603-481a-b3f1-b1f34f1f5d34_fixed.java
@@ -1,12 +1,69 @@
 /**
  * Tells if the token looks like a short option.
  *
  * @param token
  */
-    private boolean isShortOption(String token)
-    {
+private boolean isShortOption(String token) {
     // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        return token.startsWith("-") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));
+    if (!token.startsWith("-") || token.length() < 2) {
+        return false;
+    }
+
+    // Check if the token after "-" is a valid short option
+    // The option might be followed by another short option or a value
+    String optionPart = token.substring(1);
+    int equalsPos = optionPart.indexOf('=');
 
-        // remove leading "-" and "=value"
+    if (equalsPos != -1) {
+        // For options with =value (e.g., -S=V), check if the part before = is a short option
+        String optionName = optionPart.substring(0, equalsPos);
+        if (!optionName.isEmpty()) {
+            boolean isValid = true;
+            // Check that each character in the optionName is a valid short option
+            for (int i = 0; i < optionName.length(); i++) {
+                if (!options.hasShortOption(String.valueOf(optionName.charAt(i)))) {
+                    isValid = false;
+                    break;
+                }
+            }
+            if (isValid) {
+                return true;
+            }
+        }
+    } else {
+        // For cases without = (e.g., -t1 or -last)
+        // Check if the entire token (after -) or the first few characters are valid options
+        // The rule is that if the entire remaining string is invalid as a single option,
+        // it might be a value, but we need to check if it could be grouped options
+        boolean isValid = false;
+        String optionStr = token.substring(1);
+        // First check if the entire remaining string is a valid option (e.g., "-last")
+        if (options.hasShortOption(optionStr)) {
+            return true;
+        }
+        // Check if the first character is a valid option and the rest could be a value or more options
+        if (optionStr.length() >= 1) {
+            String firstChar = optionStr.substring(0, 1);
+            if (options.hasShortOption(firstChar)) {
+                // If the rest starts with a digit (e.g., "t1" in "-t1"), it's likely a value
+                // But if it starts with a letter, it could be another short option (e.g., "tlast" in "-tlast")
+                if (optionStr.length() > 1) {
+                    String remaining = optionStr.substring(1);
+                    boolean allOptions = true;
+                    for (int i = 0; i < remaining.length(); i++) {
+                        if (!options.hasShortOption(String.valueOf(remaining.charAt(i)))) {
+                            allOptions = false;
+                            break;
+                        }
+                    }
+                    if (allOptions || options.hasOption(remaining)) {
+                        return true;
+                    }
+                } else {
+                    return true; // single short option
+                }
+            }
+        }
+    }
+    return false;
 }
\ No newline at end of file
