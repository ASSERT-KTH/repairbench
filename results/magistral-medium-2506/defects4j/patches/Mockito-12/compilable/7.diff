diff --git a/tmp/07ff5c6f-39e7-4dbb-abc2-e9698d90ee63_buggy.java b/tmp/942b1e7c-191a-42d0-884c-52b550a41da8_fixed.java
index bada2b6..c61526c 100644
--- a/tmp/07ff5c6f-39e7-4dbb-abc2-e9698d90ee63_buggy.java
+++ b/tmp/942b1e7c-191a-42d0-884c-52b550a41da8_fixed.java
@@ -1,16 +1,24 @@
 /**
  * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.
  *
  * @param field
  * @return
  */
-    public Class getGenericType(Field field) {        
+public Class<?> getGenericType(Field field) {
     Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+    if (generic instanceof ParameterizedType) {
+        ParameterizedType parameterizedType = (ParameterizedType) generic;
+        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+        if (actualTypeArguments.length > 0) {
+            Type actual = actualTypeArguments[0];
+            if (actual instanceof Class) {
+                return (Class<?>) actual;
+            } else if (actual instanceof ParameterizedType) {
+                return (Class<?>) ((ParameterizedType) actual).getRawType();
+            }
+        }
+    } else if (generic instanceof Class) {
+        return (Class<?>) generic;
     }
-        
     return Object.class;
 }
\ No newline at end of file
