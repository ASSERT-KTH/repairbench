diff --git a/tmp/e5f2b3ae-e585-43cf-a742-db1896d0fd07_buggy.java b/tmp/e8c2e823-ecc5-4b45-9393-e4fbf109a29a_fixed.java
index 39c4220..815dedc 100644
--- a/tmp/e5f2b3ae-e585-43cf-a742-db1896d0fd07_buggy.java
+++ b/tmp/e8c2e823-ecc5-4b45-9393-e4fbf109a29a_fixed.java
@@ -1,21 +1,35 @@
     private final static int _parseIndex(String str) {
         final int len = str.length();
         // [Issue#133]: beware of super long indexes; assume we never
         // have arrays over 2 billion entries so ints are fine.
         if (len == 0 || len > 10) {
             return -1;
         }
+        // First validate the string contains valid number characters
+        // (digits, '.', '-', 'e'/'E', '+' as possible parts of scientific notation)
         for (int i = 0; i < len; ++i) {
-            char c = str.charAt(i++);
-            if (c > '9' || c < '0') {
+            char c = str.charAt(i);
+            if (!(Character.isDigit(c) ||
+                  (i == 0 && c == '-') || // leading minus sign
+                  c == '.' ||            // decimal point
+                  c == 'e' || c == 'E' || // scientific notation
+                  (c == '+' && i > 0 &&   // '+' in scientific notation
+                   (str.charAt(i-1) == 'e' || str.charAt(i-1) == 'E')))) {
                 return -1;
             }
         }
+
+        // Also validate that the string is a valid format that parseInt can handle
+        try {
+            // First check if it might be a long value that's too big
             if (len == 10) {
-            long l = NumberInput.parseLong(str);
+                long l = Long.parseLong(str);
                 if (l > Integer.MAX_VALUE) {
                     return -1;
                 }
             }
-        return NumberInput.parseInt(str);
+            return Integer.parseInt(str);
+        } catch (NumberFormatException e) {
+            return -1;
+        }
     }
\ No newline at end of file
