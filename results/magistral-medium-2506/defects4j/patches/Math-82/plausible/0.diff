diff --git a/tmp/4f87c228-b7b3-40d6-874b-5200cb508365_buggy.java b/tmp/2cd300d6-49dd-438a-a5ca-6899feaa53a7_fixed.java
index 220820e..d6668d4 100644
--- a/tmp/4f87c228-b7b3-40d6-874b-5200cb508365_buggy.java
+++ b/tmp/2cd300d6-49dd-438a-a5ca-6899feaa53a7_fixed.java
@@ -1,22 +1,37 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(final int col, final SimplexTableau tableau) {
         double minRatio = Double.MAX_VALUE;
         Integer minRatioPos = null;
+        // Start from the first constraint row instead of getNumObjectiveFunctions()
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
+            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {  // Changed from >= to > to ensure positive denominator
+                final double ratio = rhs / entry;
+                if (ratio >= 0 && ratio < minRatio) {  // Added check for non-negative ratio
+                    minRatio = ratio;
+                    minRatioPos = i;
+                }
+            }
+        }
+        // If no valid row found with positive ratio, look for negative ratios (for unbounded problems)
+        if (minRatioPos == null) {
+            for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
+                final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
+                final double entry = tableau.getEntry(i, col);
+                if (MathUtils.compareTo(entry, 0, epsilon) > 0) {
                     final double ratio = rhs / entry;
                     if (ratio < minRatio) {
                         minRatio = ratio;
                         minRatioPos = i;
                     }
                 }
             }
+        }
         return minRatioPos;
     }
\ No newline at end of file
