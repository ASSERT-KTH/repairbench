diff --git a/tmp/db46c023-0114-46bc-bb2f-e4c4386d5e9f_buggy.java b/tmp/11c489db-74c2-467e-9247-16539a4d8b7f_fixed.java
index 658036e..3477772 100644
--- a/tmp/db46c023-0114-46bc-bb2f-e4c4386d5e9f_buggy.java
+++ b/tmp/11c489db-74c2-467e-9247-16539a4d8b7f_fixed.java
@@ -1,29 +1,35 @@
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
         // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
             if (tb != null) {
                 tb.writeEndObject();
                 p = tb.asParser(p);
                 // must move to point to the first token:
                 p.nextToken();
             }
             return deser.deserialize(p, ctxt);
         }
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
         if (p.getCurrentToken() == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
+        // [databind#1533]: if we have empty string and ACCEPT_EMPTY_STRING_AS_NULL_OBJECT is enabled,
+        // treat it as null
+        if (p.getCurrentToken() == JsonToken.VALUE_STRING && p.getText().isEmpty()
+                && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+            return null;
+        }
         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                 "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
         return null;
     }
\ No newline at end of file
