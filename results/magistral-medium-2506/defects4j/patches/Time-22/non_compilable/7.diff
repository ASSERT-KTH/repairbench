diff --git a/tmp/fbd60979-9b2c-4775-ab29-724132b7d3a0_buggy.java b/tmp/1a29bcd9-ec5c-447d-82a6-42da14e98242_fixed.java
index 5b8a4d2..704e9c1 100644
--- a/tmp/fbd60979-9b2c-4775-ab29-724132b7d3a0_buggy.java
+++ b/tmp/1a29bcd9-ec5c-447d-82a6-42da14e98242_fixed.java
@@ -1,12 +1,25 @@
     /**
      * Creates a period from the given millisecond duration with the standard period type
      * and ISO rules, ensuring that the calculation is performed with the time-only period type.
      * <p>
      * The calculation uses the hour, minute, second and millisecond fields.
      *
      * @param duration  the duration, in milliseconds
      */
     protected BasePeriod(long duration) {
         this(duration, null, null);
-        // bug [3264409]
+        // Ensure we only use time fields (hours, minutes, seconds, millis)
+        // and ignore any date components that might have been calculated
+        if (getPeriodType() == null || getPeriodType().isSupported(DurationFieldType.years())) {
+            // Convert the millisecond duration to time fields only
+            long hours = duration / DateTimeConstants.MILLIS_PER_HOUR;
+            long remainder = duration % DateTimeConstants.MILLIS_PER_HOUR;
+            long minutes = remainder / DateTimeConstants.MILLIS_PER_MINUTE;
+            remainder %= DateTimeConstants.MILLIS_PER_MINUTE;
+            long seconds = remainder / DateTimeConstants.MILLIS_PER_SECOND;
+            long millis = remainder % DateTimeConstants.MILLIS_PER_SECOND;
+
+            // Update the internal state to use only time fields
+            setPeriod(0, 0, 0, 0, (int)hours, (int)minutes, (int)seconds, (int)millis);
+        }
     }
\ No newline at end of file
