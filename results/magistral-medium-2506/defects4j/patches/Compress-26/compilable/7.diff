diff --git a/tmp/8b7b287b-8f3f-4c25-910b-dd25f25dc301_buggy.java b/tmp/4ad2aabd-5073-4773-903b-e4ac014ebed6_fixed.java
index 4b163f6..2b92482 100644
--- a/tmp/8b7b287b-8f3f-4c25-910b-dd25f25dc301_buggy.java
+++ b/tmp/4ad2aabd-5073-4773-903b-e4ac014ebed6_fixed.java
@@ -1,28 +1,26 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
     public static long skip(InputStream input, long numToSkip) throws IOException {
         long available = numToSkip;
         while (numToSkip > 0) {
             long skipped = input.skip(numToSkip);
             if (skipped == 0) {
+                // Fall back to reading one byte at a time
+                long bytesRead = 0;
+                byte[] buffer = new byte[1];
+                while (bytesRead < numToSkip) {
+                    int read = input.read(buffer);
+                    if (read == -1) {
+                        break;  // end of stream
+                    }
+                    bytesRead++;
+                }
+                if (bytesRead > 0) {
+                    numToSkip -= bytesRead;
+                } else {
                     break;
                 }
+            } else {
                 numToSkip -= skipped;
             }
-            
+        }
         return available - numToSkip;
     }
\ No newline at end of file
