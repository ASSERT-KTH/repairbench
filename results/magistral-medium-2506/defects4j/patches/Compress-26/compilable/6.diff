diff --git a/tmp/5e045cef-058f-41c5-ac00-ef3ebcc795ef_buggy.java b/tmp/3893e5fd-b724-4be8-8c86-73bc9c323a4a_fixed.java
index 4b163f6..4d70b34 100644
--- a/tmp/5e045cef-058f-41c5-ac00-ef3ebcc795ef_buggy.java
+++ b/tmp/3893e5fd-b724-4be8-8c86-73bc9c323a4a_fixed.java
@@ -1,28 +1,37 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
  * the requested number of bytes has been skip this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
  * bytes if the end of the input stream has been reached.</p>
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
  * @throws IOException
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
+    long skippedTotal = 0;
+    long remaining = numToSkip;
+    while (remaining > 0) {
+        long skipped = input.skip(remaining);
         if (skipped == 0) {
-                break;
+            // Fall back to read if skip returns 0
+            int read = input.read();
+            if (read == -1) {
+                break; // EOF reached
             }
-            numToSkip -= skipped;
+            skipped = 1; // we read one byte
+            skippedTotal++;
+            remaining--;
+        } else {
+            skippedTotal += skipped;
+            remaining -= skipped;
         }
-            
-        return available - numToSkip;
+    }
+    return skippedTotal;
 }
\ No newline at end of file
