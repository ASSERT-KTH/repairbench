diff --git a/tmp/a724fd53-b101-4f5f-8ef4-efb8a5b680a3_buggy.java b/tmp/5a83904c-8757-402e-b3b9-99f0f3ac8476_fixed.java
index 4a05f03..a2d0475 100644
--- a/tmp/a724fd53-b101-4f5f-8ef4-efb8a5b680a3_buggy.java
+++ b/tmp/5a83904c-8757-402e-b3b9-99f0f3ac8476_fixed.java
@@ -1,170 +1,159 @@
-    /**
-     * <p>Turns a string value into a java.lang.Number.</p>
-     *
-     * <p>First, the value is examined for a type qualifier on the end
-     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts 
-     * trying to create successively larger types from the type specified
-     * until one is found that can hold the value.</p>
-     *
-     * <p>If a type specifier is not found, it will check for a decimal point
-     * and then try successively larger types from <code>Integer</code> to
-     * <code>BigInteger</code> and from <code>Float</code> to
-     * <code>BigDecimal</code>.</p>
-     *
-     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
-     * will be interpreted as a hexadecimal integer.  Values with leading
-     * <code>0</code>'s will not be interpreted as octal.</p>
-     *
-     * @param val String containing a number
-     * @return Number created from the string
-     * @throws NumberFormatException if the value cannot be converted
-     */
     public static Number createNumber(String val) throws NumberFormatException {
         if (val == null) {
             return null;
         }
         if (val.length() == 0) {
             throw new NumberFormatException("\"\" is not a valid number.");
         }
         if (val.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear
             // to be in specification of class. OS X Java parses it to
             // a wrong value.
             return null;
         }
         if (val.startsWith("0x") || val.startsWith("-0x")) {
             return createInteger(val);
         }
+        // Handle single character type qualifiers
+        if (val.length() == 1) {
+            char c = val.charAt(0);
+            if (c == 'L' || c == 'l' || c == 'F' || c == 'f' || c == 'D' || c == 'd') {
+                throw new NumberFormatException(val + " is not a valid number.");
+            }
+        }
         char lastChar = val.charAt(val.length() - 1);
         String mant;
         String dec;
         String exp;
         int decPos = val.indexOf('.');
-        int expPos = val.indexOf('e') + val.indexOf('E') + 1;
+        int expPos = Math.max(val.indexOf('e'), val.indexOf('E'));
+        if (expPos == -1) {
+            expPos = val.length() + 1; // Set to a value that won't interfere with decPos comparison
+        } else {
+            expPos++; // Convert to index after 'e' or 'E'
+        }
 
         if (decPos > -1) {
-
             if (expPos > -1) {
                 if (expPos < decPos) {
                     throw new NumberFormatException(val + " is not a valid number.");
                 }
-                dec = val.substring(decPos + 1, expPos);
+                dec = val.substring(decPos + 1, expPos - 1);
             } else {
                 dec = val.substring(decPos + 1);
             }
             mant = val.substring(0, decPos);
         } else {
-            if (expPos > -1) {
-                mant = val.substring(0, expPos);
+            if (expPos > -1 && expPos < val.length()) {
+                mant = val.substring(0, expPos - 1);
             } else {
                 mant = val;
             }
             dec = null;
         }
         if (!Character.isDigit(lastChar)) {
-            if (expPos > -1 && expPos < val.length() - 1) {
-                exp = val.substring(expPos + 1, val.length() - 1);
+            if (expPos > -1 && expPos < val.length()) {
+                exp = val.substring(expPos, val.length() - 1);
             } else {
                 exp = null;
             }
+            //Handle cases where the entire string is just a type marker
+            if (val.length() - 1 == 0) {
+                throw new NumberFormatException(val + " is not a valid number.");
+            }
             //Requesting a specific type..
             String numeric = val.substring(0, val.length() - 1);
             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
                     if (dec == null
                         && exp == null
                         && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                         try {
                             return createLong(numeric);
                         } catch (NumberFormatException nfe) {
                             //Too big for a long
                         }
                         return createBigInteger(numeric);
-
                     }
                     throw new NumberFormatException(val + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
                         Float f = NumberUtils.createFloat(numeric);
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                             //If it's too big for a float or the float value = 0 and the string
                             //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
-
                     } catch (NumberFormatException e) {
                         // ignore the bad number
                     }
                     //Fall through
                 case 'd' :
                 case 'D' :
                     try {
                         Double d = NumberUtils.createDouble(numeric);
                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                             return d;
                         }
                     } catch (NumberFormatException nfe) {
                         // empty catch
                     }
                     try {
                         return createBigDecimal(numeric);
                     } catch (NumberFormatException e) {
                         // empty catch
                     }
                     //Fall through
                 default :
                     throw new NumberFormatException(val + " is not a valid number.");
-
             }
         } else {
             //User doesn't have a preference on the return type, so let's start
             //small and go from there...
-            if (expPos > -1 && expPos < val.length() - 1) {
-                exp = val.substring(expPos + 1, val.length());
+            if (expPos > -1 && expPos < val.length()) {
+                exp = val.substring(expPos);
             } else {
                 exp = null;
             }
             if (dec == null && exp == null) {
                 //Must be an int,long,bigint
                 try {
                     return createInteger(val);
                 } catch (NumberFormatException nfe) {
                     // empty catch
                 }
                 try {
                     return createLong(val);
                 } catch (NumberFormatException nfe) {
                     // empty catch
                 }
                 return createBigInteger(val);
-
             } else {
                 //Must be a float,double,BigDec
                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
                 try {
                     Float f = createFloat(val);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
                 } catch (NumberFormatException nfe) {
                     // empty catch
                 }
                 try {
                     Double d = createDouble(val);
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (NumberFormatException nfe) {
                     // empty catch
                 }
 
                 return createBigDecimal(val);
 
             }
-
         }
     }
\ No newline at end of file
