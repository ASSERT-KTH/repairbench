diff --git a/tmp/cc1bf4b4-d470-4496-a1e9-32478088bf7d_buggy.java b/tmp/c7e5c715-b88c-47fe-a84d-bfb05f8028a0_fixed.java
index d666a67..a5dda89 100644
--- a/tmp/cc1bf4b4-d470-4496-a1e9-32478088bf7d_buggy.java
+++ b/tmp/c7e5c715-b88c-47fe-a84d-bfb05f8028a0_fixed.java
@@ -1,36 +1,36 @@
     /**
      * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
      * <p />
      * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
      * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
      * some more duplicates.
      */
     private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
         // limit (no cache):
-        if (count > maxStringCacheLen)
+        if (count > maxStringCacheLen || count <= 0) // added check for count <= 0
             return new String(charBuf, start, count);
 
         // calculate hash:
         int hash = 0;
         int offset = start;
         for (int i = 0; i < count; i++) {
             hash = 31 * hash + charBuf[offset++];
         }
 
         // get from cache
-        final int index = hash & stringCache.length - 1;
+        final int index = hash & (stringCache.length - 1); // added parentheses
         String cached = stringCache[index];
 
         if (cached == null) { // miss, add
             cached = new String(charBuf, start, count);
             stringCache[index] = cached;
         } else { // hashcode hit, check equality
             if (rangeEquals(charBuf, start, count, cached)) { // hit
                 return cached;
             } else { // hashcode conflict
                 cached = new String(charBuf, start, count);
                 stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
             }
         }
         return cached;
     }
\ No newline at end of file
