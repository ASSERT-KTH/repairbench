diff --git a/tmp/3b076fde-7b37-453b-b6b2-6fa3af7179e2_buggy.java b/tmp/45032048-609b-421a-b41c-07e574cc0d75_fixed.java
index e69de29..f510c89 100644
--- a/tmp/3b076fde-7b37-453b-b6b2-6fa3af7179e2_buggy.java
+++ b/tmp/45032048-609b-421a-b41c-07e574cc0d75_fixed.java
@@ -0,0 +1,36 @@
+public JavaType constructType(Type type, JavaType epistemicBase)
+{
+    // First try to find from cache, if we have one
+    if (_typeCache != null) {
+        JavaType result = _typeCache.get(type);
+        if (result != null) {
+            return result;
+        }
+    }
+
+    // then try from type modifier?
+    if (type instanceof JavaType) {
+        // already constructed, just return as is
+        @SuppressWarnings("unchecked")
+        JavaType t = (JavaType) type;
+        return t;
+    }
+    // Also, if we have already constructed full type
+    if (type == null) {
+        throw new IllegalArgumentException("Cannot construct JavaType from null Type");
+    }
+
+    // Implementation that properly handles supertype/subtype relationships
+
+    // [1] First convert to basic JavaType, fully generic
+    JavaType result = _constructType(type, null);
+
+    // for Java types we can usually handle binding of more specific types
+    if (result.getClass() == SimpleType.class) {
+        // 27-Feb-2021, tatu: This kills use of generic return type of a supertype method,
+        //    to be precise, one with generic signature like `:T extends Sub<T>`
+        return result;
+    }
+    // work out actual type bindings if any are missing
+    return result.refine(type, _typeModifier, null, impls);
+}
\ No newline at end of file
