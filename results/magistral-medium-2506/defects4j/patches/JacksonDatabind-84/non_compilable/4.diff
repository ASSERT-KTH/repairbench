diff --git a/tmp/d373e6eb-044b-455b-8a11-ab6a115f1c07_buggy.java b/tmp/edf1f95d-d5ca-478e-b49d-a1100e23da21_fixed.java
index e69de29..6de5d8a 100644
--- a/tmp/d373e6eb-044b-455b-8a11-ab6a115f1c07_buggy.java
+++ b/tmp/edf1f95d-d5ca-478e-b49d-a1100e23da21_fixed.java
@@ -0,0 +1,50 @@
+public JavaType constructType(Class<?> cls)
+{
+    // Ensure we handle type hierarchies correctly when building type information
+    // by properly tracking super types even when subtypes are loaded later
+    if (cls == null) {
+        return null;
+    }
+    // Clear or properly manage the type cache to prevent ambiguities
+    clearCachedTypes();
+    return _constructType(cls, _config.getDefaultInterfaces());
+}
+
+protected JavaType _constructType(Class<?> cls, List<JavaType> interfaceTypes) {
+    // Ensure we properly build the hierarchy, including all inherited properties
+    Class<?> current = cls;
+    LinkedHashMap<String, Object> props = new LinkedHashMap<>();
+    Set<Class<?>> seen = new HashSet<>();
+
+    while (current != null && !current.equals(Object.class)) {
+        if (seen.contains(current)) {
+            break; // prevent infinite recursion with cyclic types
+        }
+        seen.add(current);
+
+        // Process current class
+        try {
+            // Get all fields and properties for the current class
+            Field[] fields = current.getDeclaredFields();
+            for (Field field : fields) {
+                // Only process non-static fields (simplified - real code would need more checks)
+                if (!Modifier.isStatic(field.getModifiers())) {
+                    props.putIfAbsent(field.getName(), field.getType());
+                }
+            }
+        } catch (Exception e) {
+            // handle exception
+        }
+        current = current.getSuperclass();
+    }
+
+    // Now build the actual JavaType with complete property information
+    JavaType type = super._constructType(cls, interfaceTypes);
+
+    // Make sure the type info includes all properties from the hierarchy
+    if (type instanceof ClassType) {
+        ((ClassType) type).setProperties(props);
+    }
+
+    return type;
+}
\ No newline at end of file
