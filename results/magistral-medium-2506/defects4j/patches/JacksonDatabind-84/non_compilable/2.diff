diff --git a/tmp/311c708d-445c-457b-9920-89f76f841a08_buggy.java b/tmp/1e73d5ef-b01a-4c8a-bd6f-7638dae0394c_fixed.java
index e69de29..5d7fe5e 100644
--- a/tmp/311c708d-445c-457b-9920-89f76f841a08_buggy.java
+++ b/tmp/1e73d5ef-b01a-4c8a-bd6f-7638dae0394c_fixed.java
@@ -0,0 +1,33 @@
+// Fixed version of TypeFactory.constructType() or related logic
+
+public JavaType constructType(Class<?> clazz) {
+    // First check if we already have the type in cache
+    JavaType type = _typeCache.get(clazz);
+    if (type != null) {
+        return type;
+    }
+    // If not, create it properly, ensuring base types are handled first
+    if (clazz.getSuperclass() != null && !clazz.getSuperclass().equals(Object.class)) {
+        // Make sure base type is processed first
+        JavaType superType = constructType(clazz.getSuperclass());
+    }
+    // Then build this type's information
+    type = _constructSimple(clazz);
+    return type;
+}
+
+protected JavaType _constructSimple(Class<?> clazz) {
+    // Implementation that creates type without considering hierarchy yet
+    JavaType type = _fromClass(null, clazz);
+    // Important: must register in cache before doing anything else
+    // to prevent infinite recursion if the same type is encountered
+    _typeCache.put(clazz, type);
+
+    // Also ensure any supertypes are properly included
+    if (clazz.getSuperclass() != null && !clazz.getSuperclass().equals(Object.class)) {
+        JavaType superType = _fromClass(null, clazz.getSuperclass());
+        // Link the supertype properly
+        type.setSuperClass(superType);
+    }
+    return type;
+}
\ No newline at end of file
