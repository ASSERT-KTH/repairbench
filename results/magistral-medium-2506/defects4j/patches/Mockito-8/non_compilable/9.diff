diff --git a/tmp/4a35a180-7e2f-4390-b9da-63d681e8e952_buggy.java b/tmp/83142ffe-3de4-48c5-bb92-c9e8ea2b4178_fixed.java
index 42b58d0..d48a59b 100644
--- a/tmp/4a35a180-7e2f-4390-b9da-63d681e8e952_buggy.java
+++ b/tmp/83142ffe-3de4-48c5-bb92-c9e8ea2b4178_fixed.java
@@ -1,19 +1,45 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    Type rawType = parameterizedType.getRawType();
+
+    // Check if the raw type is already in the process of being resolved to prevent stack overflow
+    if (!(rawType instanceof Class) || resolvedClassTypes.contains(rawType)) {
+        return;
+    }
+
+    // Mark this class as being resolved
+    if (rawType instanceof Class) {
+        resolvedClassTypes.add(rawType);
+    }
+
+    try {
+        TypeVariable[] typeParameters = ((Class<?>) rawType).getTypeParameters();
         Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
         for (int i = 0; i < actualTypeArguments.length; i++) {
             TypeVariable typeParameter = typeParameters[i];
             Type actualTypeArgument = actualTypeArguments[i];
 
             if (actualTypeArgument instanceof WildcardType) {
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
+            } else if (actualTypeArgument instanceof TypeVariable) {
+                // Handle case where actual type argument is another type variable
+                // This prevents infinite recursion in self-referential cases
+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
+            } else if (actualTypeArgument instanceof ParameterizedType) {
+                // Recursively process nested parameterized types
+                registerTypeVariablesOn(actualTypeArgument);
+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             } else {
                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
+        }
+    } finally {
+        // Remove the class from being resolved when done
+        if (rawType instanceof Class) {
+            resolvedClassTypes.remove(rawType);
+        }
     }
 }
\ No newline at end of file
