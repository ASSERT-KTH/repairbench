diff --git a/tmp/2e435b60-30b3-460b-8e49-75d5c14b3b87_buggy.java b/tmp/270eafbe-89af-4e3d-bb57-6889c5c64660_fixed.java
index 42b58d0..4fab3b6 100644
--- a/tmp/2e435b60-30b3-460b-8e49-75d5c14b3b87_buggy.java
+++ b/tmp/270eafbe-89af-4e3d-bb57-6889c5c64660_fixed.java
@@ -1,19 +1,30 @@
     protected void registerTypeVariablesOn(Type classType) {
         if (!(classType instanceof ParameterizedType)) {
             return;
         }
         ParameterizedType parameterizedType = (ParameterizedType) classType;
+        // Prevent infinite recursion in case of self-referential types
+        if (contextualActualTypeParameters.containsKey(parameterizedType)) {
+            return;
+        }
+        try {
+            // Mark as processing to detect cycles
+            contextualActualTypeParameters.put(parameterizedType, null);
+
             TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
             Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
             for (int i = 0; i < actualTypeArguments.length; i++) {
                 TypeVariable typeParameter = typeParameters[i];
                 Type actualTypeArgument = actualTypeArguments[i];
 
                 if (actualTypeArgument instanceof WildcardType) {
                     contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
                 } else {
                     contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
                 }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
+            }
+        } finally {
+            // Clean up to allow future processing
+            contextualActualTypeParameters.remove(parameterizedType);
         }
     }
\ No newline at end of file
