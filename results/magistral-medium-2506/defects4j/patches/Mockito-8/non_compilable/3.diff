diff --git a/tmp/68a520a6-d261-4214-86d5-105e7a382354_buggy.java b/tmp/2e3ecefe-8233-456d-9ee7-f7776b73ee0b_fixed.java
index 42b58d0..0007118 100644
--- a/tmp/68a520a6-d261-4214-86d5-105e7a382354_buggy.java
+++ b/tmp/2e3ecefe-8233-456d-9ee7-f7776b73ee0b_fixed.java
@@ -1,19 +1,56 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
+
+    // Check for potential cyclical references
+    if (visitingTypes.contains(classType)) {
+        return;
+    }
+    visitingTypes.add(classType);
+
+    try {
         ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+        Type rawType = parameterizedType.getRawType();
+        if (!(rawType instanceof Class)) {
+            return;
+        }
+        TypeVariable[] typeParameters = ((Class<?>) rawType).getTypeParameters();
         Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+
         for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+            if (i >= typeParameters.length) {
+                continue; // in case getTypeParameters() returns fewer than actualTypeArguments
+            }
+            TypeVariable<?> typeParameter = typeParameters[i];
             Type actualTypeArgument = actualTypeArguments[i];
 
             if (actualTypeArgument instanceof WildcardType) {
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
+            } else if (actualTypeArgument != typeParameter) { // prevent self-references
+                if (actualTypeArgument instanceof TypeVariable) {
+                    // handle type variables by possibly resolving them
+                    TypeVariable<?> typeVar = (TypeVariable<?>) actualTypeArgument;
+                    Type resolvedType = contextualActualTypeParameters.get(typeVar);
+                    if (resolvedType != null) {
+                        contextualActualTypeParameters.put(typeParameter, resolvedType);
                     } else {
+                        // if not resolved yet, store the direct mapping
                         contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
                     }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
+                } else {
+                    contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
+                }
+                // Recursively process nested types
+                if (actualTypeArgument instanceof ParameterizedType) {
+                    registerTypeVariablesOn(actualTypeArgument);
+                }
+            }
+        }
+    } finally {
+        visitingTypes.remove(classType);
     }
 }
+
+// Add this field to the class
+private Set<Type> visitingTypes = new HashSet<>();
\ No newline at end of file
