diff --git a/tmp/8f892c69-980f-4194-beb9-f819533dab21_buggy.java b/tmp/a6d0d6eb-b177-4f27-b9c6-1cb87d8745bb_fixed.java
index 42b58d0..beea611 100644
--- a/tmp/8f892c69-980f-4194-beb9-f819533dab21_buggy.java
+++ b/tmp/a6d0d6eb-b177-4f27-b9c6-1cb87d8745bb_fixed.java
@@ -1,19 +1,33 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+
+    // Check if we've already processed this type to prevent infinite recursion
+    if (contextualActualTypeParameters.containsKey(parameterizedType.getRawType())) {
+        return;
+    }
+
+    TypeVariable<?>[] typeParameters;
+    try {
+        typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    } catch (ClassCastException e) {
+        // Handle case where getRawType() doesn't return a Class<?> (rare cases)
+        return;
+    }
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
     for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+        if (i >= typeParameters.length) {
+            break;  // Safety check in case parameters and arguments don't match
+        }
+        TypeVariable<?> typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
