diff --git a/tmp/2da9b395-f7ce-4f01-96e3-7f9997748a8b_buggy.java b/tmp/2865d7d0-a152-4189-990c-87b08c7f82c0_fixed.java
index d27c40c..2a759ba 100644
--- a/tmp/2da9b395-f7ce-4f01-96e3-7f9997748a8b_buggy.java
+++ b/tmp/2865d7d0-a152-4189-990c-87b08c7f82c0_fixed.java
@@ -1,49 +1,82 @@
     /** Compute two arguments arc tangent of a derivative structure.
      * @param y array holding the first operand
      * @param yOffset offset of the first operand in its array
-     * @param x array holding the second operand
+     * @param x array holding the second operand in its array
      * @param xOffset offset of the second operand in its array
      * @param result array where result must be stored (for
      * two arguments arc tangent the result array <em>cannot</em>
      * be the input array)
      * @param resultOffset offset of the result in its array
      */
     public void atan2(final double[] y, final int yOffset,
                       final double[] x, final int xOffset,
                       final double[] result, final int resultOffset) {
 
+        // Handle special cases
+        if (Double.isNaN(y[yOffset]) || Double.isNaN(x[xOffset])) {
+            // NaN in input -> result is NaN
+            Arrays.fill(result, resultOffset, resultOffset + getSize(), Double.NaN);
+            return;
+        }
+
+        if (y[yOffset] == 0 && x[xOffset] == 0) {
+            // y=0 and x=0 case
+            if (x[xOffset] == 0 && y[yOffset] == 0) {
+                if (Double.doubleToRawLongBits(x[xOffset]) == 0 &&
+                    Double.doubleToRawLongBits(y[yOffset]) == 0) {
+                    // both are +0.0
+                    Arrays.fill(result, resultOffset, resultOffset + getSize(), 0.0);
+                    return;
+                } else if (Double.doubleToRawLongBits(x[xOffset]) == Double.doubleToLongBits(-0.0) &&
+                           Double.doubleToRawLongBits(y[yOffset]) == Double.doubleToLongBits(-0.0)) {
+                    // both are -0.0
+                    result[resultOffset] = -FastMath.PI;
+                    Arrays.fill(result, resultOffset + 1, resultOffset + getSize(), 0.0);
+                    return;
+                } else if (Double.doubleToRawLongBits(x[xOffset]) == Double.doubleToLongBits(+0.0) &&
+                           Double.doubleToRawLongBits(y[yOffset]) == Double.doubleToLongBits(-0.0)) {
+                    // y is -0.0 and x is +0.0
+                    Arrays.fill(result, resultOffset, resultOffset + getSize(), -0.0);
+                    return;
+                } else if (Double.doubleToRawLongBits(x[xOffset]) == Double.doubleToLongBits(-0.0) &&
+                           Double.doubleToRawLongBits(y[yOffset]) == Double.doubleToLongBits(+0.0)) {
+                    // y is +0.0 and x is -0.0
+                    result[resultOffset] = FastMath.PI;
+                    Arrays.fill(result, resultOffset + 1, resultOffset + getSize(), 0.0);
+                    return;
+                }
+            }
+        }
+
         // compute r = sqrt(x^2+y^2)
         double[] tmp1 = new double[getSize()];
         multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
         double[] tmp2 = new double[getSize()];
         multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
         add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
         rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
         if (x[xOffset] >= 0) {
 
             // compute atan2(y, x) = 2 atan(y / (r + x))
             add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
             for (int i = 0; i < tmp2.length; ++i) {
                 result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
             }
 
         } else {
 
             // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
             subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
             result[resultOffset] =
                     ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
             for (int i = 1; i < tmp2.length; ++i) {
                 result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
             }
 
         }
-
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
     }
\ No newline at end of file
