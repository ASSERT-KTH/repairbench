diff --git a/tmp/ef905c78-6df8-4a3f-a37f-1215c34b62e2_buggy.java b/tmp/95cdb602-6db2-4a79-8ab2-42710cacc82f_fixed.java
index 63641d0..a681ef9 100644
--- a/tmp/ef905c78-6df8-4a3f-a37f-1215c34b62e2_buggy.java
+++ b/tmp/95cdb602-6db2-4a79-8ab2-42710cacc82f_fixed.java
@@ -1,33 +1,51 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // We need to check if inference was successful for required types
+    boolean hasUnknownInferences = false;
+    for (TemplateType key : keys) {
+      if (!inferred.containsKey(key)) {
+        hasUnknownInferences = true;
+        break;
+      }
+    }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+    if (hasUnknownInferences) {
+      // Handle cases where inference is incomplete
+      for (TemplateType key : keys) {
+        if (!inferred.containsKey(key)) {
+          inferred.put(key, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
+        }
+      }
+    }
+
+    // Replace all template types
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
+    if (replacementFnType == null) {
+      return false;
+    }
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
