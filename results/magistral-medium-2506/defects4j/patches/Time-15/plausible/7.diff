diff --git a/tmp/10c6b4c0-d7bb-4064-a148-8dba47754ca3_buggy.java b/tmp/79e24a5c-f330-4955-b749-cdd59ab39446_fixed.java
index a9a5e27..bc7f24d 100644
--- a/tmp/10c6b4c0-d7bb-4064-a148-8dba47754ca3_buggy.java
+++ b/tmp/79e24a5c-f330-4955-b749-cdd59ab39446_fixed.java
@@ -1,24 +1,50 @@
     /**
      * Multiply two values throwing an exception if overflow occurs.
      *
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
     public static long safeMultiply(long val1, int val2) {
-        switch (val2) {
-            case -1:
+        // Handle edge cases where multiplication would overflow
+        if (val2 == -1) {
+            if (val1 == Long.MIN_VALUE) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
             return -val1;
-            case 0:
+        }
+        if (val2 == 0) {
             return 0L;
-            case 1:
+        }
+        if (val2 == 1) {
             return val1;
         }
-        long total = val1 * val2;
-        if (total / val2 != val1) {
+
+        // Check for potential overflow before multiplying
+        if (val1 > 0) {  // val1 is positive
+            if (val2 > 0) {  // both positive
+                if (val1 > (Long.MAX_VALUE / val2)) {
                     throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
                 }
-        return total;
+            } else {  // val1 positive, val2 negative
+                if (val2 < 0 && val1 > (Long.MIN_VALUE / val2)) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
+            }
+        } else {  // val1 is negative or zero
+            if (val1 < 0) {
+                if (val2 > 0) {  // val1 negative, val2 positive
+                    if (val1 < (Long.MIN_VALUE / val2)) {
+                        throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                    }
+                } else {  // both negative (or val2 negative)
+                    if (val2 < 0 && val1 < (Long.MAX_VALUE / val2)) {
+                        throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                    }
+                }
+            }
+        }
+        return val1 * val2;
     }
\ No newline at end of file
