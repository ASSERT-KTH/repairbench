diff --git a/tmp/72f4d84d-0226-4b5c-aace-400e612039c5_buggy.java b/tmp/5ed6b461-3975-4750-ad31-5fcea9c3eaf9_fixed.java
index a9a5e27..743a6ba 100644
--- a/tmp/72f4d84d-0226-4b5c-aace-400e612039c5_buggy.java
+++ b/tmp/5ed6b461-3975-4750-ad31-5fcea9c3eaf9_fixed.java
@@ -1,24 +1,90 @@
     /**
      * Multiply two values throwing an exception if overflow occurs.
      *
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
     public static long safeMultiply(long val1, int val2) {
         switch (val2) {
             case -1:
+                if (val1 == Long.MIN_VALUE) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
                 return -val1;
             case 0:
                 return 0L;
             case 1:
                 return val1;
         }
-        long total = val1 * val2;
-        if (total / val2 != val1) {
+
+        // Handle Integer.MIN_VALUE case separately because of sign flip
+        if (val2 == Integer.MIN_VALUE) {
+            if (val1 != 0 && val1 != -1) {
                 throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
             }
+            return val1 * (long)val2;
+        }
+
+        long total;
+        if (val2 < 0) {
+            long absVal2 = -(long)val2;
+            if (val1 > 0) {
+                long absTotal = safeMultiplyAbs(val1, absVal2);
+                if (absTotal > Long.MAX_VALUE) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
+                total = -absTotal;
+            } else if (val1 < 0) {
+                long absVal1 = -val1;
+                long absTotal = safeMultiplyAbs(absVal1, absVal2);
+                if (absTotal > Long.MAX_VALUE) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
+                total = absTotal;
+            } else {
+                total = 0;
+            }
+        } else {
+            if (val1 > 0) {
+                long absTotal = safeMultiplyAbs(val1, val2);
+                if (absTotal < 0) { // overflow
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
+                total = absTotal;
+            } else if (val1 < 0) {
+                long absVal1 = -val1;
+                long absTotal = safeMultiplyAbs(absVal1, val2);
+                if (absTotal < 0) { // overflow
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
+                total = -absTotal;
+            } else {
+                total = 0;
+            }
+        }
+
+        // Additional check for Long.MIN_VALUE cases
+        if (val1 == Long.MIN_VALUE) {
+            if (val2 != 0 && val2 != 1 && val2 != -1) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
+        }
+
         return total;
     }
+
+    private static long safeMultiplyAbs(long a, long b) {
+        // Check for overflow before multiplying
+        if (a == 0 || b == 0) {
+            return 0;
+        }
+
+        long absTotal = Math.multiplyExact(a, b);
+        if (absTotal < 0) { // overflow happened (since inputs were positive)
+            return Long.MAX_VALUE + 1; // indicate overflow
+        }
+        return absTotal;
+    }
\ No newline at end of file
