diff --git a/tmp/ee776686-ade4-4984-a219-1fcdaa9b3257_buggy.java b/tmp/f98155d6-f633-483d-b37c-7feb7d264dd7_fixed.java
index c4b260c..b575eb7 100644
--- a/tmp/ee776686-ade4-4984-a219-1fcdaa9b3257_buggy.java
+++ b/tmp/f98155d6-f633-483d-b37c-7feb7d264dd7_fixed.java
@@ -1,51 +1,80 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                     if (foundCharset == null && meta.hasAttr("charset")) {
                         try {
                             if (Charset.isSupported(meta.attr("charset"))) {
                                 foundCharset = meta.attr("charset");
                             }
                         } catch (IllegalCharsetNameException e) {
                             foundCharset = null;
                         }
                     }
                 } else {
                     foundCharset = meta.attr("charset");
                 }
 
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
+
+        // Check for BOM before parsing if doc is null (we hadn't parsed yet)
+        if (doc == null) {
+            // Check for UTF-8 BOM indicator before parsing
+            byteData.rewind();
+            byte[] bom = new byte[3];
+            byteData.get(bom);
+            byteData.rewind();
+            boolean hasBom = (bom[0] == (byte)0xEF && bom[1] == (byte)0xBB && bom[2] == (byte)0xBF);
+
+            if (hasBom) {
+                if (charsetName == null) {
+                    charsetName = defaultCharset;
+                }
+                docData = Charset.forName(charsetName).decode(byteData).toString();
+                // Remove BOM character if present in the string (though decode might have handled it)
+                if (docData.length() > 0 && docData.charAt(0) == 0xFEFF) {
+                    docData = docData.substring(1);
+                }
+            } else {
+                // Original BOM check for the case where the BOM wasn't handled by the byte array check
                 if (docData.length() > 0 && docData.charAt(0) == 65279) {
                     byteData.rewind();
                     docData = Charset.forName(defaultCharset).decode(byteData).toString();
                     docData = docData.substring(1);
                     charsetName = defaultCharset;
                 }
+            }
+        }
+
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+            doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
         }
+
+        // Handle BOM in the parsed text (in case it wasn't caught earlier)
+        if (docData.length() > 0 && docData.charAt(0) == 0xFEFF) {
+            doc = parser.parseInput(docData.substring(1), baseUri);
+            doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
+        }
+
         return doc;
     }
\ No newline at end of file
