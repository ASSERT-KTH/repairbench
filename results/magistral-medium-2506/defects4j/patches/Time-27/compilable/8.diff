diff --git a/tmp/8182071a-4bc4-48ed-b4d3-6c5e4a543b46_buggy.java b/tmp/3baea66e-9f5b-4408-9d75-c977f7126b73_fixed.java
index ec6c9ee..cb19c35 100644
--- a/tmp/8182071a-4bc4-48ed-b4d3-6c5e4a543b46_buggy.java
+++ b/tmp/3baea66e-9f5b-4408-9d75-c977f7126b73_fixed.java
@@ -1,21 +1,33 @@
     //-----------------------------------------------------------------------
     private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
         if (notPrinter && notParser) {
             throw new IllegalStateException("Builder has created neither a printer nor a parser");
         }
         int size = elementPairs.size();
         if (size >= 2 && elementPairs.get(0) instanceof Separator) {
             Separator sep = (Separator) elementPairs.get(0);
             PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
-                sep = sep.finish(f.getPrinter(), f.getParser());
+            // Fixed: Only create printer/parser if needed
+            PeriodPrinter printer = notPrinter ? null : f.getPrinter();
+            PeriodParser parser = notParser ? null : f.getParser();
+            sep = sep.finish(printer, parser);
+            if (notPrinter && notParser) {
+                return new PeriodFormatter(null, null);
+            }
+            if (notPrinter) {
+                return new PeriodFormatter(null, sep);
+            }
+            if (notParser) {
+                return new PeriodFormatter(sep, null);
+            }
             return new PeriodFormatter(sep, sep);
         }
         Object[] comp = createComposite(elementPairs);
         if (notPrinter) {
             return new PeriodFormatter(null, (PeriodParser) comp[1]);
         } else if (notParser) {
             return new PeriodFormatter((PeriodPrinter) comp[0], null);
         } else {
             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
         }
     }
\ No newline at end of file
