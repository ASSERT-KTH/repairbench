diff --git a/tmp/d6943561-bf69-4fe5-98b4-27e822305f0f_buggy.java b/tmp/ca780100-6ac5-4aab-8727-0cdffd14e74c_fixed.java
index b9f1241..50d4876 100644
--- a/tmp/d6943561-bf69-4fe5-98b4-27e822305f0f_buggy.java
+++ b/tmp/ca780100-6ac5-4aab-8727-0cdffd14e74c_fixed.java
@@ -1,60 +1,84 @@
-    /**
-     * Parses a datetime from the given text, at the given position, saving the
-     * result into the fields of the given ReadWritableInstant. If the parse
-     * succeeds, the return value is the new text position. Note that the parse
-     * may succeed without fully reading the text and in this case those fields
-     * that were read will be set.
-     * <p>
-     * Only those fields present in the string will be changed in the specified
-     * instant. All other fields will remain unaltered. Thus if the string only
-     * contains a year and a month, then the day and time will be retained from
-     * the input instant. If this is not the behaviour you want, then reset the
-     * fields before calling this method, or use {@link #parseDateTime(String)}
-     * or {@link #parseMutableDateTime(String)}.
-     * <p>
-     * If it fails, the return value is negative, but the instant may still be
-     * modified. To determine the position where the parse failed, apply the
-     * one's complement operator (~) on the return value.
-     * <p>
-     * This parse method ignores the {@link #getDefaultYear() default year} and
-     * parses using the year from the supplied instant as the default.
-     * <p>
-     * The parse will use the chronology of the instant.
-     *
-     * @param instant  an instant that will be modified, not null
-     * @param text  the text to parse
-     * @param position  position to start parsing from
-     * @return new position, negative value means parse failed -
-     *  apply complement operator (~) to get position of failure
-     * @throws UnsupportedOperationException if parsing is not supported
-     * @throws IllegalArgumentException if the instant is null
-     * @throws IllegalArgumentException if any field is out of range
-     */
 public int parseInto(ReadWritableInstant instant, String text, int position) {
     DateTimeParser parser = requireParser();
     if (instant == null) {
         throw new IllegalArgumentException("Instant must not be null");
     }
 
     long instantMillis = instant.getMillis();
     Chronology chrono = instant.getChronology();
     long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
     chrono = selectChronology(chrono);
 
     DateTimeParserBucket bucket = new DateTimeParserBucket(
         instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);
     int newPos = parser.parseInto(bucket, text, position);
-        instant.setMillis(bucket.computeMillis(false, text));
+    if (newPos >= 0) {
+        // Get the original fields to preserve values that weren't parsed
+        long originalInstant = instant.getMillis();
+        Chronology originalChrono = instant.getChronology();
+
+        // Compute new millis with parsed fields
+        long newInstant = bucket.computeMillis(false, text);
+
+        // Blend the original instant with the parsed fields, preserving unparsed fields
+        // by converting both to LocalDateTime then combining them
+        long blendedInstant;
+        if (bucket.isParsed(DateTimeFieldType.year())) {
+            blendedInstant = newInstant;
+        } else {
+            // If year wasn't parsed, preserve original year (and higher fields if needed)
+            DateTime originalDatetime = new Instant(originalInstant, originalChrono).toDateTime();
+            DateTime parsedDatetime = new Instant(newInstant, chrono).toDateTime();
+
+            // Field types to copy from original
+            int[] preservedFields = {
+                DateTimeFieldType.era(),
+                DateTimeFieldType.centuryOfEra(),
+                DateTimeFieldType.yearOfCentury(),
+                DateTimeFieldType.yearOfEra(),
+                DateTimeFieldType.year()
+            };
+
+            DateTime blendedDatetime = new DateTime(
+                originalInstant,
+                chrono.withZone(originalChrono.getZone())
+            );
+
+            // Copy parsed fields to the blended datetime
+            for (DateTimeFieldType type : DateTimeFieldType.values()) {
+                if (bucket.isParsed(type)) {
+                    blendedDatetime = blendedDatetime.withField(type, parsedDatetime.get(type));
+                } else if (!containsType(preservedFields, type)) {
+                    // For unparsed non-year fields, keep original values
+                    blendedDatetime = blendedDatetime.withField(type, originalDatetime.get(type));
+                }
+            }
+
+            blendedInstant = blendedDatetime.getMillis();
+        }
+
+        instant.setMillis(blendedInstant);
+    }
+
     if (iOffsetParsed && bucket.getOffsetInteger() != null) {
         int parsedOffset = bucket.getOffsetInteger();
         DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
         chrono = chrono.withZone(parsedZone);
     } else if (bucket.getZone() != null) {
         chrono = chrono.withZone(bucket.getZone());
     }
     instant.setChronology(chrono);
     if (iZone != null) {
         instant.setZone(iZone);
     }
     return newPos;
 }
+
+private boolean containsType(int[] types, DateTimeFieldType type) {
+    for (int t : types) {
+        if (DateTimeFieldType.constants().get(t).equals(type)) {
+            return true;
+        }
+    }
+    return false;
+}
\ No newline at end of file
