diff --git a/tmp/b3e159d1-e1ab-4d9f-b579-8b5ff8840054_buggy.java b/tmp/d11dc363-aea2-4eba-8352-a34bd079c1d3_fixed.java
index 14b51f9..d173b66 100644
--- a/tmp/b3e159d1-e1ab-4d9f-b579-8b5ff8840054_buggy.java
+++ b/tmp/d11dc363-aea2-4eba-8352-a34bd079c1d3_fixed.java
@@ -1,124 +1,144 @@
     /** {@inheritDoc} */
     protected final double doSolve() {
         // Get initial solution
         double x0 = getMin();
         double x1 = getMax();
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
         // regardless of the allowed solutions.
         if (f0 == 0.0) {
             return x0;
         }
         if (f1 == 0.0) {
             return x1;
         }
 
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
         // Keep track of inverted intervals, meaning that the left bound is
         // larger than the right bound.
         boolean inverted = false;
 
+        // Keep track of the previous interval size to detect stalling
+        double previousIntervalSize = FastMath.abs(x1 - x0);
+        int stallCount = 0;
+        final int maxStallCount = 5;
+
         // Keep finding better approximations.
         while (true) {
             // Calculate the next approximation.
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
             final double fx = computeObjectiveValue(x);
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
             // we can return it regardless of the allowed solutions.
             if (fx == 0.0) {
                 return x;
             }
 
             // Update the bounds with the new approximation.
             if (f1 * fx < 0) {
                 // The value of x1 has switched to the other bound, thus inverting
                 // the interval.
                 x0 = x1;
                 f0 = f1;
                 inverted = !inverted;
             } else {
                 switch (method) {
                 case ILLINOIS:
                     f0 *= 0.5;
                     break;
                 case PEGASUS:
                     f0 *= f1 / (f1 + fx);
                     break;
                 case REGULA_FALSI:
                     // Detect early that algorithm is stuck, instead of waiting
                     // for the maximum number of iterations to be exceeded.
                     break;
                 default:
                     // Should never happen.
                     throw new MathInternalError();
                 }
             }
             // Update from [x0, x1] to [x0, x].
             x1 = x;
             f1 = fx;
 
+            // Check for stalling (interval size not decreasing significantly)
+            double currentIntervalSize = FastMath.abs(x1 - x0);
+            if (currentIntervalSize >= previousIntervalSize) {
+                stallCount++;
+                if (stallCount >= maxStallCount) {
+                    // Throw convergence exception if the interval isn't shrinking
+                    if (FastMath.abs(f1) > ftol) {
+                        throw new ConvergenceException();
+                    }
+                }
+            } else {
+                stallCount = 0;
+            }
+            previousIntervalSize = currentIntervalSize;
+
             // If the function value of the last approximation is too small,
             // given the function value accuracy, then we can't get closer to
             // the root than we already are.
             if (FastMath.abs(f1) <= ftol) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     if (inverted) {
                         return x1;
                     }
                     break;
                 case RIGHT_SIDE:
                     if (!inverted) {
                         return x1;
                     }
                     break;
                 case BELOW_SIDE:
                     if (f1 <= 0) {
                         return x1;
                     }
                     break;
                 case ABOVE_SIDE:
                     if (f1 >= 0) {
                         return x1;
                     }
                     break;
                 default:
                     throw new MathInternalError();
                 }
             }
 
             // If the current interval is within the given accuracies, we
             // are satisfied with the current approximation.
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                      atol)) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
                     return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
                     return (f1 >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
                 }
             }
         }
     }
\ No newline at end of file
