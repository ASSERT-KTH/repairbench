diff --git a/tmp/7338c1cd-4afe-4bf5-8c01-adb7ad381b22_buggy.java b/tmp/4842d952-8f46-47a7-a1da-547eb5451cf3_fixed.java
index 1c875ad..51c94c5 100644
--- a/tmp/7338c1cd-4afe-4bf5-8c01-adb7ad381b22_buggy.java
+++ b/tmp/4842d952-8f46-47a7-a1da-547eb5451cf3_fixed.java
@@ -1,31 +1,24 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
+        int varargsPosition = matchers.size() - 1;
+        if (varargsPosition >= 0) {
+            Matcher m = matchers.get(varargsPosition);
+            if (m instanceof CapturesArguments) {
+                Object varargsArray = invocation.getRawArguments()[varargsPosition];
+                if (varargsArray != null) {
+                    int length = Array.getLength(varargsArray);
+                    for (int i = 0; i < length; i++) {
+                        ((CapturesArguments) m).captureFrom(Array.get(varargsArray, i));
+                    }
+                }
+            }
+        }
     } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+            if (m instanceof CapturesArguments && position < invocation.getRawArguments().length) {
+                ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
             }
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
