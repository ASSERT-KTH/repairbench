diff --git a/tmp/37c03ae6-2047-4d8d-9995-63e0b699c2d4_buggy.java b/tmp/45be44f4-0fa9-42ac-9b6a-31293dc83e9c_fixed.java
index 1c875ad..cae260d 100644
--- a/tmp/37c03ae6-2047-4d8d-9995-63e0b699c2d4_buggy.java
+++ b/tmp/45be44f4-0fa9-42ac-9b6a-31293dc83e9c_fixed.java
@@ -1,31 +1,34 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
+        // Get the vararg index (last argument position)
         int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
 
+        // Find matchers that are vararg captors
+        for (int position = 0; position < matchers.size(); position++) {
+            Matcher m = matchers.get(position);
+            if (m instanceof CapturesArguments) {
+                // For non-vararg positions, capture as usual
+                if (position < indexOfVararg) {
+                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+                }
+                // For vararg position, handle array elements
+                else if (position == indexOfVararg) {
+                    Object varargArray = invocation.getArgumentAt(position, Object.class);
+                    if (varargArray != null && varargArray.getClass().isArray()) {
+                        int length = Array.getLength(varargArray);
+                        for (int i = 0; i < length; i++) {
+                            ((CapturesArguments) m).captureFrom(Array.get(varargArray, i));
+                        }
+                    }
+                }
+            }
+        }
     } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
