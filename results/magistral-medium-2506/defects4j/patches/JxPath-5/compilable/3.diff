diff --git a/tmp/cef7fd1c-8749-460f-a7de-413ef066f18d_buggy.java b/tmp/c4b21e4a-d2ce-4e1e-a7ee-f24c7f6b4a60_fixed.java
index 5f8ac1a..305f07c 100644
--- a/tmp/cef7fd1c-8749-460f-a7de-413ef066f18d_buggy.java
+++ b/tmp/c4b21e4a-d2ce-4e1e-a7ee-f24c7f6b4a60_fixed.java
@@ -1,34 +1,54 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2)
 {
     if (depth1 < depth2) {
+        if (p2.parent == null) {
+            return -1;
+        }
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
+        if (p1.parent == null) {
+            return 1;
+        }
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
     if (p1 == null && p2 == null) {
         return 0;
     }
 
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
 
     if (depth1 == 1) {
+        if (p1 == null || p2 == null) {
             throw new JXPathException(
                     "Cannot compare pointers that do not belong to the same tree: '"
                             + p1 + "' and '" + p2 + "'");
         }
+        if (!p1.getRootNode().equals(p2.getRootNode())) {
+            throw new JXPathException(
+                    "Cannot compare pointers that do not belong to the same tree: '"
+                            + p1 + "' and '" + p2 + "'");
+        }
+    }
+
+    if (p1 == null || p1.parent == null || p2 == null || p2.parent == null) {
+        throw new JXPathException(
+                "Cannot compare pointers that do not belong to the same tree: '"
+                        + p1 + "' and '" + p2 + "'");
+    }
+
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
