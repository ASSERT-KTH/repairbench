diff --git a/tmp/77e4610c-d0c3-463b-8f42-016f0ea7e6a5_buggy.java b/tmp/692d8198-4d7a-4845-bd48-57bae027bbb7_fixed.java
index 5f8ac1a..d68b95c 100644
--- a/tmp/77e4610c-d0c3-463b-8f42-016f0ea7e6a5_buggy.java
+++ b/tmp/692d8198-4d7a-4845-bd48-57bae027bbb7_fixed.java
@@ -1,34 +1,56 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
-        int depth2) 
-    {
+    int depth2) {
+    // First handle the case where one pointer is null and the other isn't
+    if (p1 == null && p2 == null) {
+        return 0;
+    }
+    if (p1 == null) {
+        return -1;
+    }
+    if (p2 == null) {
+        return 1;
+    }
+
+    // Then handle depth differences
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
 
-        if (p1 != null && p1.equals(p2)) {
+    // Check if pointers are equal at this level
+    if (p1.equals(p2)) {
         return 0;
     }
 
+    // If we've reached root level (depth == 1) and they're not equal,
+    // they belong to different trees
     if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        // Check if either pointer is a variable pointer (special case)
+        if ((p1 instanceof VariablePointer) || (p2 instanceof VariablePointer)) {
+            // Variables are considered less than node pointers
+            if (p1 instanceof VariablePointer && !(p2 instanceof VariablePointer)) {
+                return -1;
             }
+            if (p2 instanceof VariablePointer && !(p1 instanceof VariablePointer)) {
+                return 1;
+            }
+        }
+        return 0; // Let them be considered equal if both are variables or other special cases
+    }
+
+    // Recursively compare parent nodes
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
+    // If parents are equal, compare child positions
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
