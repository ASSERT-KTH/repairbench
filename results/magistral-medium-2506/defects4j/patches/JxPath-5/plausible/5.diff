diff --git a/tmp/540f81e8-9ddd-417b-bbcd-a6db4a62e113_buggy.java b/tmp/9deddf3c-e7ba-4985-bf57-6b71b9fa9867_fixed.java
index 5f8ac1a..25e16c8 100644
--- a/tmp/540f81e8-9ddd-417b-bbcd-a6db4a62e113_buggy.java
+++ b/tmp/9deddf3c-e7ba-4985-bf57-6b71b9fa9867_fixed.java
@@ -1,34 +1,43 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2)
     {
+        if (p1 == null || p2 == null) {
+            // Handle null cases first
+            if (p1 == p2) {
+                return 0;
+            }
+            return p1 == null ? -1 : 1;
+        }
+
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
             return r == 0 ? 1 : r;
         }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
 
-        if (p1 != null && p1.equals(p2)) {
+        if (p1.equals(p2)) {
             return 0;
         }
 
         if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+            // Don't throw exception, just treat as unequal
+            return p1.hashCode() - p2.hashCode();
         }
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
             return r;
         }
 
+        // If we get here and parents are different trees, just compare as unequal
+        if (p1.parent == null || p2.parent == null || !p1.parent.equals(p2.parent)) {
+            return p1.hashCode() - p2.hashCode();
+        }
+
         return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
