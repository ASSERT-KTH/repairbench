diff --git a/tmp/aee35dfb-c0ab-4d80-9d9e-ec2e3cd7a9eb_buggy.java b/tmp/3552a38a-e4f3-4462-85b0-47d980a25552_fixed.java
index d9d2789..7090f7b 100644
--- a/tmp/aee35dfb-c0ab-4d80-9d9e-ec2e3cd7a9eb_buggy.java
+++ b/tmp/3552a38a-e4f3-4462-85b0-47d980a25552_fixed.java
@@ -1,73 +1,76 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
         // Trim all trailing NULs and spaces.
         // The ustar and POSIX tar specs require a trailing NUL or
         // space but some implementations use the extra digit for big
         // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
+        while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {
             end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
         }
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
+        end++; // adjust for the while loop stopping one before
+
+        if (end < start) {
+            return 0L; // all NULs or spaces
+        }
+
+        boolean foundTerminator = false;
+        // Check if the last character is a valid terminator
+        if (buffer[end - 1] == 0 || buffer[end - 1] == ' ') {
+            foundTerminator = true;
         }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
+        if (!foundTerminator) {
+            // Look for the first trailing space or NUL
+            int lastValid = start;
+            for (int i = start; i < end; i++) {
+                final byte b = buffer[i];
+                if (b == 0 || b == ' ') {
+                    end = i;
+                    foundTerminator = true;
+                    break;
+                }
+                if (b >= '0' && b <= '7') {
+                    lastValid = i + 1;
+                }
+            }
+            if (!foundTerminator && lastValid < end) {
+                end = lastValid;
+            }
+        }
+
+        for (int i = start; i < end; i++) {
+            final byte currentByte = buffer[i];
+            if (currentByte == 0 || currentByte == ' ') {
+                continue; // skip internal spaces/NULs if any
+            }
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
+            result = (result << 3) + (currentByte - '0');
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
\ No newline at end of file
