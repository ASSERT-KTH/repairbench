diff --git a/tmp/b78580e3-7729-4ee7-bc72-4e4e251fb5d6_buggy.java b/tmp/fdd49701-54d5-4d39-86ab-3a7c87ae6028_fixed.java
index 800e6e1..7fe2546 100644
--- a/tmp/b78580e3-7729-4ee7-bc72-4e4e251fb5d6_buggy.java
+++ b/tmp/fdd49701-54d5-4d39-86ab-3a7c87ae6028_fixed.java
@@ -1,32 +1,42 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
+            // Handle function expressions in object properties
+            if (parent.getParent() != null && parent.getParent().getType() == Token.OBJECTLIT) {
+              defineFunctionInObject(parent, n);
+            } else {
               return;
             }
+          }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.GETPROP: // Handle cases like goog.foo
+          if (NodeUtil.isGet(parent, n)) {
+            definePropertyFromJSDoc(n, parent);
+          }
+          break;
       }
     }
\ No newline at end of file
