diff --git a/tmp/5685449e-e5f5-4f2b-9884-5779cc1d1989_buggy.java b/tmp/fa11ea83-faaa-4f07-b725-dfb3d2dbdc97_fixed.java
index 939f49b..41cb79d 100644
--- a/tmp/5685449e-e5f5-4f2b-9884-5779cc1d1989_buggy.java
+++ b/tmp/fa11ea83-faaa-4f07-b725-dfb3d2dbdc97_fixed.java
@@ -1,21 +1,27 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+      && n.getType() == Token.GETPROP) {
     // We want to exclude the assignment itself from the usage list
     boolean isChainedProperty =
         n.getFirstChild().getType() == Token.GETPROP;
 
     if (isChainedProperty) {
       Node child = n.getFirstChild().getFirstChild().getNext();
 
       if (child.getType() == Token.STRING &&
           child.getString().equals("prototype")) {
         return true;
       }
     }
+
+    // Additional check for cases where the property is directly on prototype
+    if (n.getFirstChild().getType() == Token.GETPROP &&
+        n.getFirstChild().getFirstChild().getType() == Token.NAME &&
+        "prototype".equals(n.getFirstChild().getFirstChild().getString())) {
+      return true;
+    }
   }
 
   return false;
 }
\ No newline at end of file
