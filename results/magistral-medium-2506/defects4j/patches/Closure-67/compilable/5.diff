diff --git a/tmp/b681ca0e-e525-47eb-af95-182456e15fbc_buggy.java b/tmp/d70d33d9-159a-4590-82e5-93ca08b993cd_fixed.java
index 939f49b..0c23e06 100644
--- a/tmp/b681ca0e-e525-47eb-af95-182456e15fbc_buggy.java
+++ b/tmp/d70d33d9-159a-4590-82e5-93ca08b993cd_fixed.java
@@ -1,21 +1,43 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+          && (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)) {
         // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+        boolean isChainedProperty;
+        if (n.getType() == Token.GETPROP) {
+          isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;
+        } else { // Token.GETELEM
+          isChainedProperty = n.getFirstChild().getType() == Token.GETELEM;
+        }
 
         if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+          Node child;
+          if (n.getFirstChild().getType() == Token.GETPROP) {
+            child = n.getFirstChild().getFirstChild().getNext();
+          } else { // GETELEM
+            child = n.getFirstChild().getLastChild();
+          }
 
           if (child.getType() == Token.STRING &&
               child.getString().equals("prototype")) {
             return true;
           }
+        } else { // Check for simple case like o.prototype = ...
+          Node nameNode = n.getFirstChild();
+          if (nameNode.getType() == Token.GETPROP) {
+            Node propertyName = nameNode.getLastChild();
+            if (propertyName.getType() == Token.STRING &&
+                propertyName.getString().equals("prototype")) {
+              return true;
+            }
+          } else if (nameNode.getType() == Token.GETELEM) {
+            Node propertyName = nameNode.getLastChild();
+            if (propertyName.getType() == Token.STRING &&
+                propertyName.getString().equals("prototype")) {
+              return true;
+            }
+          }
         }
       }
-
       return false;
     }
\ No newline at end of file
