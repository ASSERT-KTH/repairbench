diff --git a/tmp/88789def-ecb0-4e03-b7bb-445cc19fdf51_buggy.java b/tmp/f69b7cc7-261b-4719-9909-a696f81ab272_fixed.java
index 939f49b..3600815 100644
--- a/tmp/88789def-ecb0-4e03-b7bb-445cc19fdf51_buggy.java
+++ b/tmp/f69b7cc7-261b-4719-9909-a696f81ab272_fixed.java
@@ -1,21 +1,35 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+          && n.getType() == Token.GETPROP) {
         // We want to exclude the assignment itself from the usage list
         boolean isChainedProperty =
             n.getFirstChild().getType() == Token.GETPROP;
 
         if (isChainedProperty) {
           Node child = n.getFirstChild().getFirstChild().getNext();
 
+          // Add check for Token.STRING or Token.GETPROP for cases like prototype['alias1']
+          while (child != null) {
+            if (child.getType() == Token.STRING &&
+                child.getString().equals("prototype")) {
+              return true;
+            }
+            // Check if it's a computed property access
+            if (child.getType() == Token.GETPROP &&
+                child.getLastChild().getString().equals("prototype")) {
+              return true;
+            }
+            child = child.getNext();
+          }
+        } else {
+          // Check for cases where prototype is accessed directly (not chained)
+          Node child = n.getFirstChild().getNext();
           if (child.getType() == Token.STRING &&
               child.getString().equals("prototype")) {
             return true;
           }
         }
       }
-
       return false;
     }
\ No newline at end of file
