diff --git a/tmp/148aa7b9-faff-436d-a0a5-e05d540d593d_buggy.java b/tmp/34116c1e-78bd-4fe8-a5d5-d17ebd226349_fixed.java
index 939f49b..f9f4014 100644
--- a/tmp/148aa7b9-faff-436d-a0a5-e05d540d593d_buggy.java
+++ b/tmp/34116c1e-78bd-4fe8-a5d5-d17ebd226349_fixed.java
@@ -1,21 +1,39 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
+          && n.getType() == Token.GETPROP) {
+
+        // Check if it's a chained property like foo.prototype.bar
         boolean isChainedProperty =
             n.getFirstChild().getType() == Token.GETPROP;
 
         if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+          Node child = n.getFirstChild();
+          while (child.getNext() != null) {
+            child = child.getNext();
+          }
 
           if (child.getType() == Token.STRING &&
               child.getString().equals("prototype")) {
             return true;
           }
+        } else {
+          // Check direct prototype assignment like foo.prototype = ...
+          Node parent = n.getFirstChild();
+          if (parent.getType() == Token.GETELEM ||
+              parent.getType() == Token.GETPROP) {
+            Node grandparent = parent.getFirstChild();
+            while (grandparent.getNext() != null) {
+              grandparent = grandparent.getNext();
+            }
+
+            if (grandparent.getType() == Token.STRING &&
+                grandparent.getString().equals("prototype")) {
+              return true;
+            }
+          }
         }
       }
 
       return false;
     }
\ No newline at end of file
