diff --git a/tmp/7cdae3a5-cc10-4a7e-b968-c5462088a647_buggy.java b/tmp/4324dfb3-85b3-4e3e-8af3-0c775090fb15_fixed.java
index 939f49b..604d6ee 100644
--- a/tmp/7cdae3a5-cc10-4a7e-b968-c5462088a647_buggy.java
+++ b/tmp/4324dfb3-85b3-4e3e-8af3-0c775090fb15_fixed.java
@@ -1,21 +1,30 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+          && n.getType() == Token.GETPROP) {
         // We want to exclude the assignment itself from the usage list
         boolean isChainedProperty =
             n.getFirstChild().getType() == Token.GETPROP;
 
         if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+          Node current = n.getFirstChild();
+          while (current != null && current.getType() == Token.GETPROP) {
+            Node propName = current.getFirstChild().getNext();
+            if (propName.getType() == Token.STRING &&
+                "prototype".equals(propName.getString())) {
+              return true;
+            }
+            current = current.getFirstChild();
+          }
+        }
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+        // Check for direct prototype property assignment
+        Node propName = n.getFirstChild().getNext();
+        if (propName.getType() == Token.STRING &&
+            "prototype".equals(propName.getString())) {
           return true;
         }
       }
-      }
 
       return false;
     }
\ No newline at end of file
