diff --git a/tmp/7ef532ed-5b14-4693-9ded-d9760c3ac11a_buggy.java b/tmp/0e4d29c6-507e-4179-a5f1-56f87e31e9a7_fixed.java
index e4d90e7..ef64d55 100644
--- a/tmp/7ef532ed-5b14-4693-9ded-d9760c3ac11a_buggy.java
+++ b/tmp/0e4d29c6-507e-4179-a5f1-56f87e31e9a7_fixed.java
@@ -1,45 +1,43 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
-    } else if (prettyPrint) {
-      // Don't pretty print recursively.
-      prettyPrint = false;
-
+    } else if (prettyPrint || forAnnotations) {
       // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+           current != null && !current.isNativeObjectType();
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
+        if (isPropertyTypeInteresting(property) || forAnnotations) {
+          sb.append(getPropertyType(property).toString(forAnnotations));
+        } else {
           sb.append(getPropertyType(property).toString());
+        }
 
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+        if (!forAnnotations && ++i == MAX_PRETTY_PRINTED_PROPERTIES && propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {
           sb.append(", ...");
           break;
         }
+        i++;
       }
 
       sb.append("}");
-
-      prettyPrint = true;
       return sb.toString();
     } else {
       return "{...}";
     }
   }
\ No newline at end of file
