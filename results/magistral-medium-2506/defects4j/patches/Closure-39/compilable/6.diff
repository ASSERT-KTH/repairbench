diff --git a/tmp/133ce970-a210-4789-b800-5a6fa7113937_buggy.java b/tmp/8e0feb30-4ceb-4ec4-a9bf-f28439d28ff5_fixed.java
index e4d90e7..e9a3174 100644
--- a/tmp/133ce970-a210-4789-b800-5a6fa7113937_buggy.java
+++ b/tmp/8e0feb30-4ceb-4ec4-a9bf-f28439d28ff5_fixed.java
@@ -1,45 +1,52 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
+
   } else if (prettyPrint) {
     // Don't pretty print recursively.
     prettyPrint = false;
 
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this;
          current != null && !current.isNativeObjectType() &&
              propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
+    boolean truncated = false;
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
 
       sb.append(property);
       sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+      // Use toStringHelper with same forAnnotations flag when pretty printing
+      // For annotation strings, we might want different behavior
+      sb.append(getPropertyType(property).toStringHelper(forAnnotations));
 
       ++i;
       if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+        if (!forAnnotations) {
           sb.append(", ...");
+          truncated = true;
           break;
         }
       }
+    }
 
     sb.append("}");
 
     prettyPrint = true;
     return sb.toString();
   } else {
     return "{...}";
   }
 }
\ No newline at end of file
