diff --git a/tmp/ab1c5633-ea4c-47e7-af62-bf60955de806_buggy.java b/tmp/2e2ba00c-f425-4d86-ba80-c93d90a3f82c_fixed.java
index e0ecec8..702e652 100644
--- a/tmp/ab1c5633-ea4c-47e7-af62-bf60955de806_buggy.java
+++ b/tmp/2e2ba00c-f425-4d86-ba80-c93d90a3f82c_fixed.java
@@ -1,35 +1,46 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+    while (arguments.hasNext()) {
+      boolean hasNextParameter = parameters.hasNext();
+
+      if (hasNextParameter) {
         parameter = parameters.next();
+      } else if (functionType.getMaxArguments() != Integer.MAX_VALUE) {
+        // No more parameters, but we have more arguments and it's not var_args
+        break;
+      }
+
       argument = arguments.next();
       ordinal++;
 
+      if (hasNextParameter) {
         validator.expectArgumentMatchesParameter(t, argument,
             getJSType(argument), getJSType(parameter), call, ordinal);
+      } else {
+        // Handle var_args case
+        validator.expectArgumentMatchesVarArgs(t, argument,
+            functionType.getVarArgsType(), call, ordinal);
+      }
     }
 
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
