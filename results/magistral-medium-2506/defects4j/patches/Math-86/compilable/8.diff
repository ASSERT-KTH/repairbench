diff --git a/tmp/69d4d796-ea18-4d64-acd6-2857039a3e66_buggy.java b/tmp/4f84a1f9-9a49-46b7-8bc8-eae89db33246_fixed.java
index 0eef537..f2f9d7a 100644
--- a/tmp/69d4d796-ea18-4d64-acd6-2857039a3e66_buggy.java
+++ b/tmp/4f84a1f9-9a49-46b7-8bc8-eae89db33246_fixed.java
@@ -1,74 +1,84 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
-        lTData   = matrix.getData();
+        lTData = new double[order][order];
+        for (int i = 0; i < order; i++) {
+            System.arraycopy(matrix.getData()[i], 0, lTData[i], 0, order);
+        }
         cachedL  = null;
         cachedLT = null;
 
         // check the matrix before transformation
         for (int i = 0; i < order; ++i) {
-
             final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
+            if (lI[i] <= absolutePositivityThreshold) {
                 throw new NotPositiveDefiniteMatrixException();
             }
             // check off-diagonal elements (and reset them to 0)
             for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];
                 final double lIJ = lI[j];
                 final double lJI = lJ[i];
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
                 lJ[i] = 0;
             }
         }
 
         // transform the matrix
         for (int i = 0; i < order; ++i) {
-
             final double[] ltI = lTData[i];
 
-            // check diagonal element
-
-            ltI[i] = Math.sqrt(ltI[i]);
-            final double inverse = 1.0 / ltI[i];
-
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
+            // Compute the ith row of L
+            for (int j = 0; j < i; ++j) {
+                double sum = 0.0;
+                for (int k = 0; k < j; ++k) {
+                    sum += ltI[k] * ltI[k];
                 }
+                ltI[j] = (ltI[j] - sum) / ltI[j];
             }
 
+            // Compute L[i][i]
+            double sum = 0.0;
+            for (int k = 0; k < i; ++k) {
+                sum += ltI[k] * ltI[k];
+            }
+            double diagonal = ltI[i] - sum;
+            if (diagonal <= absolutePositivityThreshold) {
+                throw new NotPositiveDefiniteMatrixException();
             }
+            ltI[i] = Math.sqrt(diagonal);
 
+            // Clear upper triangular elements
+            for (int j = i + 1; j < order; ++j) {
+                lTData[j][i] = 0.0;
+            }
+        }
     }
\ No newline at end of file
