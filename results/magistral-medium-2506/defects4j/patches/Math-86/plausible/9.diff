diff --git a/tmp/2026b8ba-ef6e-4231-8eef-6c6a138d5b7f_buggy.java b/tmp/46b267cb-29ee-4e05-a42b-c7f897b012fe_fixed.java
index 0eef537..b98443f 100644
--- a/tmp/2026b8ba-ef6e-4231-8eef-6c6a138d5b7f_buggy.java
+++ b/tmp/46b267cb-29ee-4e05-a42b-c7f897b012fe_fixed.java
@@ -1,74 +1,65 @@
-    /**
-     * Calculates the Cholesky decomposition of the given matrix.
-     * @param matrix the matrix to decompose
-     * @param relativeSymmetryThreshold threshold above which off-diagonal
-     * elements are considered too different and matrix not symmetric
-     * @param absolutePositivityThreshold threshold below which diagonal
-     * elements are considered null and matrix not positive definite
-     * @exception NonSquareMatrixException if matrix is not square
-     * @exception NotSymmetricMatrixException if matrix is not symmetric
-     * @exception NotPositiveDefiniteMatrixException if the matrix is not
-     * strictly positive definite
-     * @see #CholeskyDecompositionImpl(RealMatrix)
-     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
-     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
-     */
 public CholeskyDecompositionImpl(final RealMatrix matrix,
                                  final double relativeSymmetryThreshold,
                                  final double absolutePositivityThreshold)
     throws NonSquareMatrixException,
            NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
     if (!matrix.isSquare()) {
         throw new NonSquareMatrixException(matrix.getRowDimension(),
                                            matrix.getColumnDimension());
     }
 
     final int order = matrix.getRowDimension();
     lTData   = matrix.getData();
     cachedL  = null;
     cachedLT = null;
 
-        // check the matrix before transformation
+    // First, check if the matrix is positive definite and symmetric
+    // before performing any transformations
     for (int i = 0; i < order; ++i) {
-
-            final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
+        double[] lI = lTData[i];
+        // Check diagonal element for positivity
+        if (lI[i] <= absolutePositivityThreshold) {
             throw new NotPositiveDefiniteMatrixException();
         }
-            // check off-diagonal elements (and reset them to 0)
+        // Check off-diagonal elements for symmetry (and reset them to 0)
         for (int j = i + 1; j < order; ++j) {
-                final double[] lJ = lTData[j];
-                final double lIJ = lI[j];
-                final double lJI = lJ[i];
-                final double maxDelta =
-                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
+            double[] lJ = lTData[j];
+            double lIJ = lI[j];
+            double lJI = lJ[i];
+            double maxDelta = relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
             if (Math.abs(lIJ - lJI) > maxDelta) {
                 throw new NotSymmetricMatrixException();
             }
-                lJ[i] = 0;
+            lJ[i] = 0; // Reset to 0 for the decomposition
         }
     }
 
-        // transform the matrix
+    // Now perform the Cholesky decomposition
     for (int i = 0; i < order; ++i) {
-
         final double[] ltI = lTData[i];
 
-            // check diagonal element
+        // Process the diagonal element
+        for (int j = 0; j < i; ++j) {
+            final double[] ltJ = lTData[j];
+            ltI[i] -= ltJ[i] * ltJ[i];
+        }
+
+        // Check if the diagonal element is positive after processing
+        if (ltI[i] <= absolutePositivityThreshold) {
+            throw new NotPositiveDefiniteMatrixException();
+        }
 
         ltI[i] = Math.sqrt(ltI[i]);
         final double inverse = 1.0 / ltI[i];
 
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
+        for (int p = i + 1; p < order; ++p) {
+            double[] ltP = lTData[p];
+            for (int j = 0; j < i; ++j) {
+                final double[] ltJ = lTData[j];
+                ltI[p] -= ltJ[i] * ltJ[p];
             }
+            ltI[p] *= inverse;
         }
-
     }
-
 }
\ No newline at end of file
