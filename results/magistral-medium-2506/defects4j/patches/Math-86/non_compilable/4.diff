diff --git a/tmp/5c0c2ec5-ee97-422d-ba5a-fc58bae61e6a_buggy.java b/tmp/f020dfdb-dd14-4c07-b266-4abc2251a29b_fixed.java
index 0eef537..5cd0f37 100644
--- a/tmp/5c0c2ec5-ee97-422d-ba5a-fc58bae61e6a_buggy.java
+++ b/tmp/f020dfdb-dd14-4c07-b266-4abc2251a29b_fixed.java
@@ -1,74 +1,91 @@
 /**
  * Calculates the Cholesky decomposition of the given matrix.
  * @param matrix the matrix to decompose
  * @param relativeSymmetryThreshold threshold above which off-diagonal
  * elements are considered too different and matrix not symmetric
  * @param absolutePositivityThreshold threshold below which diagonal
  * elements are considered null and matrix not positive definite
  * @exception NonSquareMatrixException if matrix is not square
  * @exception NotSymmetricMatrixException if matrix is not symmetric
  * @exception NotPositiveDefiniteMatrixException if the matrix is not
  * strictly positive definite
  * @see #CholeskyDecompositionImpl(RealMatrix)
  * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
  * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
  */
 public CholeskyDecompositionImpl(final RealMatrix matrix,
                                  final double relativeSymmetryThreshold,
                                  final double absolutePositivityThreshold)
     throws NonSquareMatrixException,
            NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
     if (!matrix.isSquare()) {
         throw new NonSquareMatrixException(matrix.getRowDimension(),
                                            matrix.getColumnDimension());
     }
 
     final int order = matrix.getRowDimension();
     lTData = matrix.getData();
     cachedL = null;
     cachedLT = null;
 
-        // check the matrix before transformation
+    // Check symmetry
     for (int i = 0; i < order; ++i) {
-
-            final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
-            // check off-diagonal elements (and reset them to 0)
+        final double[] rowI = lTData[i];
         for (int j = i + 1; j < order; ++j) {
-                final double[] lJ = lTData[j];
-                final double lIJ = lI[j];
-                final double lJI = lJ[i];
-                final double maxDelta =
-                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
-                if (Math.abs(lIJ - lJI) > maxDelta) {
+            final double[] rowJ = lTData[j];
+            final double rij = rowI[j];
+            final double rji = rowJ[i];
+            final double maxDelta = relativeSymmetryThreshold *
+                Math.max(Math.abs(rij), Math.abs(rji));
+            if (Math.abs(rij - rji) > maxDelta) {
                 throw new NotSymmetricMatrixException();
             }
-                lJ[i] = 0;
         }
     }
 
-        // transform the matrix
+    // Make a copy to avoid modifying the original matrix during checks
+    double[][] matrixData = matrix.getDataRef();
+    double[][] a = new double[order][order];
     for (int i = 0; i < order; ++i) {
+        a[i] = matrixData[i].clone();
+    }
 
-            final double[] ltI = lTData[i];
+    // Perform Cholesky decomposition with checks
+    for (int i = 0; i < order; ++i) {
+        // Check diagonal element before processing
+        if (a[i][i] < absolutePositivityThreshold) {
+            throw new NotPositiveDefiniteMatrixException();
+        }
+
+        // Process diagonal element
+        double sum = a[i][i];
+        for (int k = 0; k < i; ++k) {
+            sum -= a[i][k] * a[i][k];
+        }
 
-            // check diagonal element
+        if (sum <= absolutePositivityThreshold) {
+            throw new NotPositiveDefiniteMatrixException();
+        }
 
-            ltI[i] = Math.sqrt(ltI[i]);
-            final double inverse = 1.0 / ltI[i];
+        a[i][i] = Math.sqrt(sum);
+        double inverse = 1.0 / a[i][i];
 
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
+        // Process row elements
+        for (int j = i + 1; j < order; ++j) {
+            sum = a[i][j];
+            for (int k = 0; k < i; ++k) {
+                sum -= a[i][k] * a[j][k];
             }
+            a[i][j] = sum * inverse;
         }
-
     }
 
+    // Copy back the lower triangular part (upper triangular is zero)
+    for (int i = 0; i < order; ++i) {
+        System.arraycopy(a[i], 0, lTData[i], 0, i + 1);
+        for (int j = i + 1; j < order; ++j) {
+            lTData[j][i] = 0; // Ensure lower matrix is zeroed
+        }
+    }
 }
\ No newline at end of file
