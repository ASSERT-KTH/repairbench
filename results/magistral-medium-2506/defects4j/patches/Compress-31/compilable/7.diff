diff --git a/tmp/b9b949e4-f9ff-4cde-8cc1-27c6ed7e1da7_buggy.java b/tmp/6b42d321-2c92-4eb2-b84b-29d8f4706871_fixed.java
index b91f7de..7e5e283 100644
--- a/tmp/b9b949e4-f9ff-4cde-8cc1-27c6ed7e1da7_buggy.java
+++ b/tmp/6b42d321-2c92-4eb2-b84b-29d8f4706871_fixed.java
@@ -1,69 +1,72 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
         // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
         byte trailer = buffer[end - 1];
         while (start < end && (trailer == 0 || trailer == ' ')) {
             end--;
+            if (end > start) {
                 trailer = buffer[end - 1];
             }
+        }
 
+        boolean digitFound = false;
         for (; start < end; start++) {
             final byte currentByte = buffer[start];
             if (currentByte == 0) {
+                // If we already encountered digits and now find a NUL, it's an error
+                if (digitFound) {
+                    throw new IllegalArgumentException(
+                            exceptionMessage(buffer, offset, length, start, currentByte));
+                }
+                // We allow leading NULs (but already handled at the start), otherwise break
+                break;
+            }
+            if (currentByte == ' ') {
+                // If we already encountered digits and now find a space, it's an error
+                if (digitFound) {
+                    throw new IllegalArgumentException(
+                            exceptionMessage(buffer, offset, length, start, currentByte));
+                }
+                // We'll treat spaces like we do leading spaces, break the loop
                 break;
             }
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
+            digitFound = true;
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
+        // Check if we have trailing NUL or space exactly once
+        if (start < end) {
+            byte b = buffer[start];
+            if ((b != 0 && b != ' ') || start + 1 < end) {
+                throw new IllegalArgumentException("Trailing character missing");
+            }
+        }
+
         return result;
     }
\ No newline at end of file
