diff --git a/tmp/612bb571-3e14-4972-ae3d-d83fb4a502b1_buggy.java b/tmp/bf66835d-3324-44c9-b4c1-0a52331f1378_fixed.java
index b91f7de..cfcca3d 100644
--- a/tmp/612bb571-3e14-4972-ae3d-d83fb4a502b1_buggy.java
+++ b/tmp/bf66835d-3324-44c9-b4c1-0a52331f1378_fixed.java
@@ -1,69 +1,93 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long    result = 0;
     int     end = offset + length;
     int     start = offset;
 
     if (length < 2){
         throw new IllegalArgumentException("Length "+length+" must be at least 2");
     }
 
-        if (buffer[start] == 0) {
+    if (length == 0) {
+        return 0L;
+    }
+
+    // Check if first byte is NUL (special case)
+    if (length > 0 && buffer[start] == 0) {
         return 0L;
     }
 
     // Skip leading spaces
     while (start < end) {
-            if (buffer[start] == ' '){
+        if (buffer[start] == ' ' || buffer[start] == 0) {
+            // If we encounter a NUL during skipping spaces, it's invalid
+            if (buffer[start] == 0) {
+                throw new IllegalArgumentException("Invalid octal string (embedded NUL)");
+            }
             start++;
         } else {
             break;
         }
     }
 
     // Trim all trailing NULs and spaces.
     // The ustar and POSIX tar specs require a trailing NUL or
     // space but some implementations use the extra digit for big
     // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
+    while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {
         end--;
-            trailer = buffer[end - 1];
     }
 
+    // Check if the remaining range is empty (all spaces/NULs)
+    if (start >= end) {
+        return 0L;
+    }
+
+    // Verify we have a trailing space or NUL by checking the original buffer
+    // (since we modified end to exclude trailing spaces/NULs)
+    int originalEnd = offset + length;
+    if (originalEnd > buffer.length) {
+        originalEnd = buffer.length;
+    }
+    boolean hasTrailer = false;
+    for (int i = end; i < originalEnd; i++) {
+        if (buffer[i] == ' ' || buffer[i] == 0) {
+            hasTrailer = true;
+            break;
+        }
+    }
+    if (!hasTrailer && end == originalEnd) {
+        // If we consumed all characters and didn't find a trailer
+        // but length was exactly 2, that's acceptable (special case)
+        if (originalEnd - offset != 2) {
+            throw new IllegalArgumentException("Trailing space or NUL is missing");
+        }
+    }
+
+    // Now parse the octal digits
+    boolean hasDigits = false;
     for (; start < end; start++) {
         final byte currentByte = buffer[start];
+
+        // Any NUL byte in the middle is invalid
         if (currentByte == 0) {
-                break;
+            throw new IllegalArgumentException("Invalid octal string (embedded NUL)");
         }
+
         // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                 exceptionMessage(buffer, offset, length, start, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
         // CheckStyle:MagicNumber ON
+
+        result = (result << 3) + (currentByte - '0'); // convert from ASCII
+        hasDigits = true;
+    }
+
+    // If we only saw spaces/NULs, return 0
+    if (!hasDigits) {
+        return 0L;
     }
 
     return result;
 }
\ No newline at end of file
