diff --git a/tmp/204c6aee-b3bf-4a6c-bea6-d82cdb251383_buggy.java b/tmp/d9217e10-934c-4712-b8e0-ac4e43e422b3_fixed.java
index b91f7de..39978d6 100644
--- a/tmp/204c6aee-b3bf-4a6c-bea6-d82cdb251383_buggy.java
+++ b/tmp/d9217e10-934c-4712-b8e0-ac4e43e422b3_fixed.java
@@ -1,69 +1,123 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Check for empty buffer (all NULs)
+        boolean allNulls = true;
+        for (int i = offset; i < end; i++) {
+            if (buffer[i] != 0) {
+                allNulls = false;
+                break;
+            }
+        }
+        if (allNulls) {
+            return 0L;
+        }
+
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end) {
             if (buffer[start] == ' ') {
                 start++;
             } else {
                 break;
             }
         }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
+        // If we have empty data after skipping spaces (but not all NULs)
+        if (start >= end) {
+            return 0L;
+        }
+
+        // Check for embedded NULs and invalid characters
+        for (int i = start; i < end; i++) {
+            if (buffer[i] == 0 && i < end - 1) {
+                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, buffer[i]));
+            }
+        }
+
+        // Trim trailing NULs and spaces
+        byte trailer;
+        int originalEnd = end;
+        if (end > offset) {
+            trailer = buffer[end - 1];
+            while (end > start && (trailer == 0 || trailer == ' ')) {
                 end--;
+                if (end > offset) {
                     trailer = buffer[end - 1];
                 }
+            }
+        }
 
+        // Check if we have any valid digits left
+        if (end <= start) {
+            // If we had only spaces and NULs, check if the last character was valid
+            if (originalEnd > offset && (buffer[originalEnd-1] == ' ' || buffer[originalEnd-1] == 0)) {
+                return 0L;
+            }
+            throw new IllegalArgumentException("Missing trailing space/NUL");
+        }
+
+        // Now parse the actual number
         for (; start < end; start++) {
             final byte currentByte = buffer[start];
             if (currentByte == 0) {
                 break;
             }
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
+            result = (result << 3) + (currentByte - '0');
             // CheckStyle:MagicNumber ON
         }
 
+        // Verify that after the number there's either trailing space/NUL or we're at the end
+        if (start < originalEnd) {
+            boolean validTrailer = false;
+            while (start < originalEnd) {
+                if (buffer[start] == ' ' || buffer[start] == 0) {
+                    validTrailer = true;
+                    start++;
+                } else {
+                    throw new IllegalArgumentException(
+                            exceptionMessage(buffer, offset, length, start, buffer[start]));
+                }
+            }
+            if (!validTrailer) {
+                throw new IllegalArgumentException("Missing trailing space/NUL");
+            }
+        }
+
         return result;
     }
\ No newline at end of file
