diff --git a/tmp/c8a9d05b-968b-4333-a50c-ef5c187b4a89_buggy.java b/tmp/30a9a51c-6f45-40b6-88d2-b91803b7ad08_fixed.java
index b91f7de..c46288c 100644
--- a/tmp/c8a9d05b-968b-4333-a50c-ef5c187b4a89_buggy.java
+++ b/tmp/30a9a51c-6f45-40b6-88d2-b91803b7ad08_fixed.java
@@ -1,69 +1,67 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
-        if (buffer[start] == 0) {
+        if (start < buffer.length && buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
+        // Check for empty buffer after skipping spaces
+        if (start >= end) {
+            return 0L;
+        }
+
+        // Trim all trailing NULs and spaces
+        int originalEnd = end;
+        while (end > start) {
             byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
+            if (trailer == 0 || trailer == ' ') {
                 end--;
-            trailer = buffer[end - 1];
+            } else {
+                break;
+            }
+        }
+
+        // If we've removed all characters (e.g., buffer was all spaces/NULs)
+        if (start >= end) {
+            return 0L;
+        }
+
+        // Check if we've removed too much (trailing bytes are required)
+        if (end < originalEnd - 1) { // At least one trailing NUL/space should remain
+            throw new IllegalArgumentException("Missing trailing space/NUL");
         }
 
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
-            if (currentByte == 0) {
-                break;
+            if (currentByte == 0 || currentByte == ' ') {
+                break; // Stop at embedded NULs or spaces
             }
-            // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        }
+
+        // Check that we actually parsed something
+        if (start == offset) { // No digits found (excluding leading spaces)
+            return 0L;
         }
 
         return result;
     }
\ No newline at end of file
