diff --git a/tmp/d74f5abd-ba07-4227-aabd-8416081d6365_buggy.java b/tmp/d93b7ce6-11f2-48c7-b36f-7f90a3d47617_fixed.java
index b91f7de..02970fe 100644
--- a/tmp/d74f5abd-ba07-4227-aabd-8416081d6365_buggy.java
+++ b/tmp/d93b7ce6-11f2-48c7-b36f-7f90a3d47617_fixed.java
@@ -1,69 +1,66 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end) {
             if (buffer[start] == ' ') {
                 start++;
             } else {
                 break;
             }
         }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
+        // Find the real end of content, trimming trailing NULs and spaces
+        int contentEnd = end;
+        while (contentEnd > start && (buffer[contentEnd-1] == 0 || buffer[contentEnd-1] == ' ')) {
+            contentEnd--;
         }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            if (currentByte == 0) {
-                break;
+        // Now validate that there's exactly one trailing space/NUL
+        // and that there are no embedded NULs or spaces
+        boolean foundTrailing = false;
+        for (int i = start; i < end; i++) {
+            if (i >= contentEnd) {
+                if (!foundTrailing && (buffer[i] == ' ' || buffer[i] == 0)) {
+                    foundTrailing = true;
+                    continue;
                 }
-            // CheckStyle:MagicNumber OFF
+                // If we get here, we have more than one trailing space/NUL
+                // which is invalid per the specs
+                throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, i, buffer[i]));
+            }
+            if (buffer[i] == 0 || buffer[i] == ' ') {
+                throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, i, buffer[i]));
+            }
+        }
+
+        // If we didn't find any trailing space/NUL, the format is invalid
+        if (!foundTrailing && contentEnd > start) {
+            throw new IllegalArgumentException(
+                "Missing trailing space/NUL in octal input");
+        }
+
+        // Now parse the octal value
+        for (int i = start; i < contentEnd; i++) {
+            final byte currentByte = buffer[i];
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            result = (result << 3) + (currentByte - '0');
         }
 
         return result;
     }
\ No newline at end of file
