diff --git a/tmp/3e5b0531-51fc-426c-a8e4-d131030e8598_buggy.java b/tmp/f7e176ff-51de-4763-8cf6-d4a7578cbe25_fixed.java
index ae1f3a6..9ab5de5 100644
--- a/tmp/3e5b0531-51fc-426c-a8e4-d131030e8598_buggy.java
+++ b/tmp/f7e176ff-51de-4763-8cf6-d4a7578cbe25_fixed.java
@@ -1,34 +1,33 @@
 protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
 {
     /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
      *    check if any generics info is added; and only then ask factory
      *    to do translation when necessary
      */
     TypeFactory tf = ctxt.getTypeFactory();
+    JavaType t;
     if (id.indexOf('<') > 0) {
-            // note: may want to try combining with specialization (esp for EnumMap)?
-            // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
-            //    compatibility -- needed later anyway, and not doing so may open
-            //    security issues.
-            JavaType t = tf.constructFromCanonical(id);
-                // Probably cleaner to have a method in `TypeFactory` but can't add in patch
-            return t;
-        }
+        t = tf.constructFromCanonical(id);
+    } else {
         Class<?> cls;
         try {
             cls = tf.findClass(id);
         } catch (ClassNotFoundException e) {
             // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
             //   DeserializationContext, just playing it safe
             if (ctxt instanceof DeserializationContext) {
                 DeserializationContext dctxt = (DeserializationContext) ctxt;
-                // First: we may have problem handlers that can deal with it?
                 return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
             }
-            // ... meaning that we really should never get here.
             return null;
         } catch (Exception e) {
             throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
         }
-        return tf.constructSpecializedType(_baseType, cls);
+        t = tf.constructSpecializedType(_baseType, cls);
+    }
+    // Verify type compatibility
+    if (t != null && !t.isTypeOrSubTypeOf(_baseType.getRawClass())) {
+        throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): not subtype of "+_baseType);
+    }
+    return t;
 }
\ No newline at end of file
