diff --git a/tmp/81d5aad8-9050-42a1-89a6-ba03e8020fde_buggy.java b/tmp/02e38f50-3a12-449a-a1ce-d2a40003432c_fixed.java
index 39981f0..5d7598b 100644
--- a/tmp/81d5aad8-9050-42a1-89a6-ba03e8020fde_buggy.java
+++ b/tmp/02e38f50-3a12-449a-a1ce-d2a40003432c_fixed.java
@@ -1,65 +1,72 @@
-  /**
-   * Given a node, get a human-readable name for the type of that node so
-   * that will be easy for the programmer to find the original declaration.
-   *
-   * For example, if SubFoo's property "bar" might have the human-readable
-   * name "Foo.prototype.bar".
-   *
-   * @param n The node.
-   * @param dereference If true, the type of the node will be dereferenced
-   *     to an Object type, if possible.
-   */
   String getReadableJSTypeName(Node n, boolean dereference) {
-
     // The best type name is the actual type name.
 
     // If we're analyzing a GETPROP, the property may be inherited by the
     // prototype chain. So climb the prototype chain and find out where
     // the property was originally defined.
     if (n.isGetProp()) {
+      Nodeжд
+      if (n.getFirstChild().isGetProp()) {
+        // Handle nested property access by looking at the base type
+        return getReadableJSTypeName(n.getLastChild(), dereference);
+      }
+
       ObjectType objectType = getJSType(n.getFirstChild()).dereference();
       if (objectType != null) {
         String propName = n.getLastChild().getString();
         if (objectType.getConstructor() != null &&
             objectType.getConstructor().isInterface()) {
           objectType = FunctionType.getTopDefiningInterface(
               objectType, propName);
         } else {
           // classes
           while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
+            ObjectType next = objectType.getImplicitPrototype();
+            if (next == null || next.equals(objectType)) {
+              break; // prevent infinite loops
+            }
+            objectType = next;
           }
         }
 
         // Don't show complex function names or anonymous types.
         // Instead, try to get a human-readable type name.
         if (objectType != null &&
             (objectType.getConstructor() != null ||
              objectType.isFunctionPrototypeType())) {
           return objectType.toString() + "." + propName;
         }
       }
     }
 
     JSType type = getJSType(n);
     if (dereference) {
       ObjectType dereferenced = type.dereference();
       if (dereferenced != null) {
         type = dereferenced;
       }
     }
+
+    if (type.isUnknownType()) {
+      // Try to get a qualified name for unknown types
+      if (n.getParent() != null && n.getParent().isGetProp()) {
+        return getReadableJSTypeName(n.getParent(), dereference) + "." + n.getString();
+      }
+      return n.getQualifiedName();
+    }
+
     if (type.isFunctionPrototypeType() ||
         (type.toObjectType() != null &&
          type.toObjectType().getConstructor() != null)) {
       return type.toString();
     }
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
     } else if (type.isFunctionType()) {
       // Don't show complex function names.
       return "function";
     } else {
       return type.toString();
     }
   }
\ No newline at end of file
