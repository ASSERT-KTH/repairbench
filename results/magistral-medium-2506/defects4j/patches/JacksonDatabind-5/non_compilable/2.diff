diff --git a/tmp/b2a4fd8c-4a37-45dc-95db-f115e1a4202f_buggy.java b/tmp/2a0cf6bf-7e36-458f-9463-f7a31153c5b7_fixed.java
index b2db1d6..787cb5b 100644
--- a/tmp/b2a4fd8c-4a37-45dc-95db-f115e1a4202f_buggy.java
+++ b/tmp/2a0cf6bf-7e36-458f-9463-f7a31153c5b7_fixed.java
@@ -1,29 +1,40 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
+
+        // Process parent classes first (superclasses before subclasses)
+        Collections.reverse(parents);
+
         for (Class<?> mixin : parents) {
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
                 AnnotatedMethod am = methods.find(m);
                 /* Do we already have a method to augment (from sub-class
                  * that will mask this mixIn)? If so, add if visible
                  * without masking (no such annotation)
                  */
                 if (am != null) {
                     _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
                 } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                    // Check if we already have this mixin method (from different mixin)
+                    // or its parent class version
+                    boolean alreadyExists = false;
+                    for (AnnotatedMethod existing : mixIns) {
+                        if (existing.getAnnotated().getName().equals(m.getName())
+                                && _isOverridden(m, existing.getAnnotated())) {
+                            alreadyExists = true;
+                            break;
+                        }
+                    }
+                    if (!alreadyExists) {
                         mixIns.add(_constructMethod(m));
                     }
                 }
             }
         }
+    }
\ No newline at end of file
