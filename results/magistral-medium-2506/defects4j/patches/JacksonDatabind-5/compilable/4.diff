diff --git a/tmp/e376bb7d-3d3d-4d26-9ac5-a523a15d07fc_buggy.java b/tmp/6b9b04cb-f3da-4bb4-bfa2-9d5470438753_fixed.java
index b2db1d6..9665f23 100644
--- a/tmp/e376bb7d-3d3d-4d26-9ac5-a523a15d07fc_buggy.java
+++ b/tmp/6b9b04cb-f3da-4bb4-bfa2-9d5470438753_fixed.java
@@ -1,29 +1,29 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
-        List<Class<?>> parents = new ArrayList<Class<?>>();
-        parents.add(mixInCls);
-        ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
+    // Need to collect all super types, including interfaces
+    List<Class<?>> parents = ClassUtil.findSuperTypes(mixInCls, targetClass, new ArrayList<Class<?>>());
+    Collections.reverse(parents); // process from most specific to least specific
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
             /* Do we already have a method to augment (from sub-class
              * that will mask this mixIn)? If so, add if visible
              * without masking (no such annotation)
              */
             if (am != null) {
                 _addMixUnders(m, am);
                 /* Otherwise will have precedence, but must wait
                  * until we find the real method (mixIn methods are
                  * just placeholder, can't be called)
                  */
             } else {
                 // Well, or, as per [Issue#515], multi-level merge within mixins...
                 mixIns.add(_constructMethod(m));
             }
         }
     }
 }
\ No newline at end of file
