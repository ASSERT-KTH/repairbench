diff --git a/tmp/29cbd17c-667b-4c65-b7f3-32d906e1db99_buggy.java b/tmp/250f97e5-2f56-4de1-b162-5676e53e4224_fixed.java
index 388771b..dbf6689 100644
--- a/tmp/29cbd17c-667b-4c65-b7f3-32d906e1db99_buggy.java
+++ b/tmp/250f97e5-2f56-4de1-b162-5676e53e4224_fixed.java
@@ -1,37 +1,66 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
+        if (end >= this.data.size()) {
+            throw new IllegalArgumentException("End index must be less than the size of the series.");
+        }
+
         TimeSeries copy = (TimeSeries) super.clone();
         copy.data = new java.util.ArrayList();
+
         if (this.data.size() > 0) {
+            // Initialize min and max to proper values
+            double minY = Double.MAX_VALUE;
+            double maxY = -Double.MAX_VALUE;
+            Range range = null;
+
             for (int index = start; index <= end; index++) {
                 TimeSeriesDataItem item
                         = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                 try {
                     copy.add(clone);
+
+                    // Update min and max values
+                    double yValue = clone.getValue().doubleValue();
+                    if (yValue < minY) {
+                        minY = yValue;
+                    }
+                    if (yValue > maxY) {
+                        maxY = yValue;
+                    }
                 }
                 catch (SeriesException e) {
                     e.printStackTrace();
                 }
             }
+
+            // Update range if we have data
+            if (copy.data.size() > 0) {
+                copy.minY = minY;
+                copy.maxY = maxY;
+                // Note: we should also update the time period range if needed
+            } else {
+                copy.minY = Double.NaN;
+                copy.maxY = Double.NaN;
+            }
         }
         return copy;
     }
\ No newline at end of file
