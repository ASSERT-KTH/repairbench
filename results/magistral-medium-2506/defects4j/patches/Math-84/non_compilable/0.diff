diff --git a/tmp/2c3534f8-fb4c-4572-965a-8ea6d460af4e_buggy.java b/tmp/08b8f55c-956e-4e22-9bdc-4540ed75f9fb_fixed.java
index 5f1dcf2..4b58ddb 100644
--- a/tmp/2c3534f8-fb4c-4572-965a-8ea6d460af4e_buggy.java
+++ b/tmp/08b8f55c-956e-4e22-9bdc-4540ed75f9fb_fixed.java
@@ -1,41 +1,58 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
+            // Check if max iterations have been exceeded
+            if (getIterations() >= getMaxIterations()) {
+                throw new OptimizationException(
+                    new MaxIterationsExceededException(getMaxIterations()));
+            }
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
 
+                // Check for convergence before returning
+                if (isConverged()) {
                     return;
+                }
+                continue;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = evaluateNewSimplex(original, gamma, comparator);
 
-            // check convergence
+                // Check for convergence
+                if (isConverged()) {
                     return;
                 }
+                continue;
+            }
 
+            // Check for convergence in all cases before continuing the loop
+            if (isConverged()) {
+                return;
+            }
         }
 
     }
\ No newline at end of file
