diff --git a/tmp/608036b3-35e9-4e9f-987c-4076c94c3b09_buggy.java b/tmp/0913c7cc-3bb3-4f1a-9e98-66f2ac0c8b62_fixed.java
index 5f1dcf2..9a6f737 100644
--- a/tmp/608036b3-35e9-4e9f-987c-4076c94c3b09_buggy.java
+++ b/tmp/0913c7cc-3bb3-4f1a-9e98-66f2ac0c8b62_fixed.java
@@ -1,41 +1,66 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
+    final int maxUltra = getMaxUltraEvaluations();
+    final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();
+    final int maxEvaluations = getMaxEvaluations();
+
+    // Initialize iterations counter
+    resetIterationsCounter();
+    resetEvaluationsCounter();
+
     while (true) {
+        // Check convergence first
+        if (checker != null) {
+            if (checker.converged(getIterations(), simplex)) {
+                return;
+            }
+        }
+
+        // Check evaluations limit
+        if (getEvaluations() >= maxEvaluations) {
+            throw new OptimizationException(
+                new MaxEvaluationsExceededException(maxEvaluations));
+        }
+
+        // Check iterations limit
+        if (getIterations() >= getMaxIterations()) {
+            throw new OptimizationException(
+                new MaxIterationsExceededException(getMaxIterations()));
+        }
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
-
             return;
-
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
-
             // check convergence
+            if (checker != null && checker.converged(getIterations(), simplex)) {
                 return;
             }
-
         }
 
+        // Perform a shrink operation if none of the above worked
+        simplex = shrinkSimplex(original, comparator);
+    }
 }
\ No newline at end of file
