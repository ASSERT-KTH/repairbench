diff --git a/tmp/ebfa66a9-f986-47a6-b255-0b8f95415eef_buggy.java b/tmp/a1b73025-7d36-49e2-84dd-e459f59b5b84_fixed.java
index 5f1dcf2..fbec0cf 100644
--- a/tmp/ebfa66a9-f986-47a6-b255-0b8f95415eef_buggy.java
+++ b/tmp/a1b73025-7d36-49e2-84dd-e459f59b5b84_fixed.java
@@ -1,41 +1,76 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
+            } else {
+                // accept the expanded simplex
+                simplex = buildSimplex(reflectedSimplex.length,
+                    new MultivariateRealFunction() {
+                        public double value(double[] v)
+                        throws FunctionEvaluationException {
+                            // rebuild simplex by dilated reflection expansion
+                            ArrayRealVector x = new ArrayRealVector(original[1]
+                                .getPoint(), false);
+                            return function.value(x.mapAdd(reflected.getPoint())
+                                .mapMultiply(1 + khi).getDataRef());
+                        }
+                    });
             }
-
             return;
-
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
-
-            // check convergence
+            simplex = buildSimplex(simplex.length,
+                new MultivariateRealFunction() {
+                    public double value(double[] v)
+                    throws FunctionEvaluationException {
+                        // rebuild simplex by contraction
+                        ArrayRealVector x = new ArrayRealVector(original[1]
+                            .getPoint(), false);
+                        return function.value(x.mapAdd(reflected.getPoint())
+                            .mapMultiply(gamma).getDataRef());
+                    }
+                });
             return;
         }
 
+        // perform a reduction step
+        simplex = buildSimplex(simplex.length,
+            new MultivariateRealFunction() {
+                public double value(double[] v)
+                throws FunctionEvaluationException {
+                    // rebuild simplex by reduction
+                    ArrayRealVector x = new ArrayRealVector(reflected.getPoint());
+                    ArrayRealVector o = new ArrayRealVector(simplex[0].getPoint());
+                    return function.value(x.mapAdd(o.scalarMultiply(-0.5)).getDataRef());
                 }
+            });
 
+        if (getConvergenceChecker().converged(getIterationsCounter(),
+            simplex[0], simplex[simplex.length - 1])) {
+            return;
+        }
+    }
 }
\ No newline at end of file
