diff --git a/tmp/6f1930bd-611d-4b0a-8c7f-c16ff7858c96_buggy.java b/tmp/ff38d309-c06e-49cf-8a72-21f9a271e040_fixed.java
index 5f1dcf2..e3a139b 100644
--- a/tmp/6f1930bd-611d-4b0a-8c7f-c16ff7858c96_buggy.java
+++ b/tmp/ff38d309-c06e-49cf-8a72-21f9a271e040_fixed.java
@@ -1,41 +1,60 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    boolean converged = false;
+    while (!converged && getIterations() < getMaxIterations()) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
+            } else {
+                // accept the expanded simplex
+                simplex = newSimplex(original, reflected, expanded);
             }
-
+            converged = convergenceChecker.converged(getIterations(), simplex);
+            if (converged) {
                 return;
+            }
+            continue;
 
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            simplex = newSimplex(original, contracted);
+            converged = convergenceChecker.converged(getIterations(), simplex);
+            if (converged) {
+                return;
+            }
+            continue;
+        }
+
+        // perform a reduction step if neither reflection nor contraction helped
+        performReduction();
 
         // check convergence
-                return;
+        converged = convergenceChecker.converged(getIterations(), simplex);
     }
 
+    if (!converged) {
+        throw new OptimizationException(
+                new MaxIterationsExceededException(getMaxIterations()));
     }
-
 }
\ No newline at end of file
