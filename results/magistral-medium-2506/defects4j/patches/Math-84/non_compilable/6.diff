diff --git a/tmp/8abf4519-e6aa-4965-8014-b527fd27adf4_buggy.java b/tmp/eb7eb02d-6366-400f-9d46-0dcda3cdc70a_fixed.java
index 5f1dcf2..cfe4e4a 100644
--- a/tmp/8abf4519-e6aa-4965-8014-b527fd27adf4_buggy.java
+++ b/tmp/eb7eb02d-6366-400f-9d46-0dcda3cdc70a_fixed.java
@@ -1,41 +1,59 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    while (getIterations() < getMaxIterations()) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
+            } else {
+                simplex = reflectedSimplex;
             }
 
+            if (checkConvergence()) {
                 return;
-
+            }
+            continue;
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            simplex = evaluateNewSimplex(original, gamma, comparator).getPointRef();
+        } else {
+            // perform a shrink step
+            simplex = evaluateNewSimplex(original, sigma, comparator).getPointRef();
+        }
 
         // check convergence
+        if (checkConvergence()) {
             return;
         }
+    }
 
+    throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
 }
 
+private boolean checkConvergence() throws OptimizationException {
+    // Check if the termination criteria are satisfied
+    if (getConvergenceChecker() != null) {
+        return getConvergenceChecker().converged(getIterations(), getPrevious(), getCurrent());
+    }
+    return false;
 }
\ No newline at end of file
