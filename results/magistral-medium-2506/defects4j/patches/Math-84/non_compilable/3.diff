diff --git a/tmp/2265da15-97d1-4d68-a7ec-c7d882f2a3f5_buggy.java b/tmp/a0d9ffaa-068d-4878-9b58-b5cd4d806f9e_fixed.java
index 5f1dcf2..85561ad 100644
--- a/tmp/2265da15-97d1-4d68-a7ec-c7d882f2a3f5_buggy.java
+++ b/tmp/a0d9ffaa-068d-4878-9b58-b5cd4d806f9e_fixed.java
@@ -1,41 +1,54 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        while (!convergenceChecker.converged(getIterations(), previous, current)) {
+            if (getIterations() >= maxIterations) {
+                throw new MaxIterationsExceededException(maxIterations);
+            }
 
             incrementIterationsCounter();
 
             // save the original vertex
-            final RealPointValuePair[] original = simplex;
+            final RealPointValuePair[] original = simplex.clone();
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
-
                 // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+                final RealPointValuePair[] reflectedSimplex = simplex.clone();
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    simplex = new RealPointValuePair[] { expanded };
                 }
-
                 return;
-
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
-            // check convergence
+                simplex = new RealPointValuePair[] { contracted };
                 return;
             }
 
+            // perform a reduction step
+            final RealPointValuePair[] reducedSimplex = new RealPointValuePair[simplex.length];
+            for (int i = 0; i < reducedSimplex.length; i++) {
+                double[] reducedPoint = new double[simplex[i].getPoint().length];
+                for (int j = 0; j < reducedPoint.length; j++) {
+                    reducedPoint[j] = (simplex[i].getPoint()[j] + original[0].getPoint()[j]) * 0.5;
+                }
+                reducedSimplex[i] = new RealPointValuePair(reducedPoint,
+                                                           Double.NaN, false);
+            }
+            evaluateSimplex(reducedSimplex, comparator);
+            simplex = reducedSimplex;
         }
 
     }
\ No newline at end of file
