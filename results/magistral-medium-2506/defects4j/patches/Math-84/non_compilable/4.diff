diff --git a/tmp/95158d70-32d4-4565-a0d0-9375fb171bc0_buggy.java b/tmp/b3869139-4cab-47fb-ae2b-1b724f16fc52_fixed.java
index 5f1dcf2..77a0f9d 100644
--- a/tmp/95158d70-32d4-4565-a0d0-9375fb171bc0_buggy.java
+++ b/tmp/b3869139-4cab-47fb-ae2b-1b724f16fc52_fixed.java
@@ -1,41 +1,53 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
+        // check if we test max evaluation
+        if (getEvaluations() >= this.getMaxEvaluations()) {
+            throw new OptimizationException(new MaxEvaluationsExceededException(getMaxEvaluations()));
+        }
+
+        // check if we test max iterations
+        if (getIterations() >= this.getMaxIterations()) {
+            throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
+        }
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
 
             return;
 
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            simplex = Arrays.copyOf(original, original.length);
+            simplex[simplex.length-1] = contracted;
+        }
 
         // check convergence
+        if (convergenceChecker != null &&
+            convergenceChecker.converged(getIterations(), simplex)) {
             return;
         }
-
     }
-
 }
\ No newline at end of file
