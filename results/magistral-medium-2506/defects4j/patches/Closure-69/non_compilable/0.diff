diff --git a/tmp/463cc2f5-7531-4831-aa33-82051fd18a9a_buggy.java b/tmp/a88b634c-1481-4103-8811-81d38d95df48_fixed.java
index bf9c086..c483d45 100644
--- a/tmp/463cc2f5-7531-4831-aa33-82051fd18a9a_buggy.java
+++ b/tmp/a88b634c-1481-4103-8811-81d38d95df48_fixed.java
@@ -1,54 +1,90 @@
   /**
    * Visits a CALL node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    */
   private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
     if (!childType.canBeCalled()) {
       report(t, n, NOT_CALLABLE, childType.toString());
       ensureTyped(t, n);
       return;
     }
 
     // A couple of types can be called as if they were functions.
     // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
       FunctionType functionType = (FunctionType) childType;
 
       boolean isExtern = false;
       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
       if(functionJSDocInfo != null) {
         String sourceName = functionJSDocInfo.getSourceName();
         CompilerInput functionSource = compiler.getInput(sourceName);
         isExtern = functionSource.isExtern();
       }
 
       // Non-native constructors should not be called directly
       // unless they specify a return type and are defined
       // in an extern.
       if (functionType.isConstructor() &&
           !functionType.isNativeObjectType() &&
           (functionType.getReturnType().isUnknownType() ||
            functionType.getReturnType().isVoidType() ||
            !isExtern)) {
         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
       }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
+      // Functions with explicit 'this' types must be called in a GETPROP
       // or GETELEM.
+      if (functionType.hasInstanceThisType() &&
+          !isDotAccess(t, child)) {
+        report(t, n, THIS_TYPE_FUNCTION_CALLED,
+            functionType.getSignature().toString());
+      }
 
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {
       ensureTyped(t, n);
     }
 
     // TODO: Add something to check for calls of RegExp objects, which is not
     // supported by IE. Either say something about the return type or warn
     // about the non-portability of the call or both.
   }
+
+  /**
+   * Checks whether the given node is accessed via dot notation (GETPROP)
+   * or bracket notation (GETELEM).
+   */
+  private boolean isDotAccess(NodeTraversal t, Node child) {
+    Node parent = child.getParent();
+    if (parent == null) {
+      return false;
+    }
+
+    // Check if the parent is a GETPROP (a.b) or GETELEM (a[b])
+    switch (parent.getType()) {
+      case Token.GETPROP:
+      case Token.GETELEM:
+        return true;
+      case Token.CALL:
+        // The parent is already the CALL node, so check its parent
+        Node grandParent = parent.getParent();
+        if (grandParent != null) {
+          switch (grandParent.getType()) {
+            case Token.GETPROP:
+            case Token.GETELEM:
+              return true;
+          }
+        }
+        return false;
+      default:
+        return false;
+    }
+  }
\ No newline at end of file
