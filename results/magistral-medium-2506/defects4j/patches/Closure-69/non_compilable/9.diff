diff --git a/tmp/8d4559bf-2a30-497b-abef-0d7c9c2667d2_buggy.java b/tmp/d5cf3d6e-1113-4cac-ba98-f6d7c70dd832_fixed.java
index bf9c086..eac2d71 100644
--- a/tmp/8d4559bf-2a30-497b-abef-0d7c9c2667d2_buggy.java
+++ b/tmp/d5cf3d6e-1113-4cac-ba98-f6d7c70dd832_fixed.java
@@ -1,54 +1,53 @@
-  /**
-   * Visits a CALL node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   */
   private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
     if (!childType.canBeCalled()) {
       report(t, n, NOT_CALLABLE, childType.toString());
       ensureTyped(t, n);
       return;
     }
 
     // A couple of types can be called as if they were functions.
     // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
       FunctionType functionType = (FunctionType) childType;
 
       boolean isExtern = false;
       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
       if(functionJSDocInfo != null) {
         String sourceName = functionJSDocInfo.getSourceName();
         CompilerInput functionSource = compiler.getInput(sourceName);
         isExtern = functionSource.isExtern();
       }
 
       // Non-native constructors should not be called directly
       // unless they specify a return type and are defined
       // in an extern.
       if (functionType.isConstructor() &&
           !functionType.isNativeObjectType() &&
           (functionType.getReturnType().isUnknownType() ||
            functionType.getReturnType().isVoidType() ||
            !isExtern)) {
         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
       }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
+      // Check if the function has an explicit 'this' type but isn't called as a method
+      if (functionType.getTypeOfThis() != null) {
+        if (!(n.getParent() instanceof Node) || (
+            !n.getParent().isGetProp() &&
+            !n.getParent().isGetElem())) {
+          report(t, n, FUNC_THIS_BASED, childType.toString());
+        }
+      }
 
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {
       ensureTyped(t, n);
     }
 
     // TODO: Add something to check for calls of RegExp objects, which is not
     // supported by IE.  Either say something about the return type or warn
     // about the non-portability of the call or both.
   }
\ No newline at end of file
