diff --git a/tmp/e31ab31e-6f05-437f-a786-92543d01e19f_buggy.java b/tmp/3854c402-466a-476c-a4fb-4413cd829308_fixed.java
index dc93be3..a4c247d 100644
--- a/tmp/e31ab31e-6f05-437f-a786-92543d01e19f_buggy.java
+++ b/tmp/3854c402-466a-476c-a4fb-4413cd829308_fixed.java
@@ -1,14 +1,23 @@
     Element insert(Token.StartTag startTag) {
         // handle empty unknown tags
         // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
-        if (startTag.isSelfClosing()) {
+        Tag tag = Tag.valueOf(startTag.name());
+        boolean isSelfClosingV = startTag.isSelfClosing(); // original self-closing flag
+
+        // Only treat as truly self-closing if it's a known void element or an unknown tag
+        boolean trulySelfClosing = isSelfClosingV &&
+                (tag.isSelfClosing() || !tag.isKnownTag());
+
+        if (trulySelfClosing) {
             Element el = insertEmpty(startTag);
             stack.add(el);
+            if (!tag.isSelfClosing() && tag.isKnownTag()) { // for known but not void elements, ensure proper closing
                 tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            }
             return el;
         }
 
         Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
         insert(el);
         return el;
     }
\ No newline at end of file
