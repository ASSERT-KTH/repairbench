diff --git a/tmp/f39703c1-8306-4e03-9abf-6a0611be337f_buggy.java b/tmp/36cc85a0-b16e-4c0a-89b0-7e15fe6aefef_fixed.java
index de9af32..fd0a778 100644
--- a/tmp/f39703c1-8306-4e03-9abf-6a0611be337f_buggy.java
+++ b/tmp/36cc85a0-b16e-4c0a-89b0-7e15fe6aefef_fixed.java
@@ -1,18 +1,46 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
       Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+      if (child.getType() == Token.NAME || child.getType() == Token.GETPROP) {
+        String functionName = getFunctionName(child);
+        if (functionName != null) {
+          changed.add(functionName);
+        }
       }
     }
 
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
+
+  private String getFunctionName(Node node) {
+    if (node.getType() == Token.NAME) {
+      return node.getString();
+    } else if (node.getType() == Token.GETPROP) {
+      // For property access calls like x.y() or x.y.z()
+      StringBuilder name = new StringBuilder();
+      Node current = node;
+      while (current != null && current.getType() == Token.GETPROP) {
+        if (name.length() > 0) {
+          name.insert(0, ".");
+        }
+        name.insert(0, current.getLastChild().getString());
+        current = current.getFirstChild();
+      }
+      if (current != null && current.getType() == Token.NAME) {
+        if (name.length() > 0) {
+          name.insert(0, ".");
+        }
+        name.insert(0, current.getString());
+      }
+      return name.length() > 0 ? name.toString() : null;
+    }
+    return null;
+  }
\ No newline at end of file
