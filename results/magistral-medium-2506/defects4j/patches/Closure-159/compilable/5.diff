diff --git a/tmp/88476d31-5451-44cb-bab8-3b1156d707a1_buggy.java b/tmp/66f3e844-a6a8-4bac-b3e3-7a8a5ed7f689_fixed.java
index de9af32..846e9ea 100644
--- a/tmp/88476d31-5451-44cb-bab8-3b1156d707a1_buggy.java
+++ b/tmp/66f3e844-a6a8-4bac-b3e3-7a8a5ed7f689_fixed.java
@@ -1,18 +1,24 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+      Node target = node.getFirstChild();
+      // Handle cases like "foo.call" where the function is accessed through a property
+      if (target.getType() == Token.GETPROP || target.getType() == Token.NAME) {
+        Node functionNode = target;
+        // For GETPROP (like x.y), we want the property name (y)
+        if (target.getType() == Token.GETPROP) {
+          functionNode = target.getLastChild();
+        }
+        changed.add(functionNode.getString());
       }
     }
 
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
\ No newline at end of file
