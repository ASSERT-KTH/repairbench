diff --git a/tmp/0c7344d2-54ce-47ef-a985-5ebc31ac0ad5_buggy.java b/tmp/e766b50f-acdd-47b7-b2b6-0c5c6b5fc71c_fixed.java
index 98d89dc..e2f1bbd 100644
--- a/tmp/0c7344d2-54ce-47ef-a985-5ebc31ac0ad5_buggy.java
+++ b/tmp/e766b50f-acdd-47b7-b2b6-0c5c6b5fc71c_fixed.java
@@ -1,23 +1,36 @@
     private boolean compute(Object left, Object right) {
         left = reduce(left);
         right = reduce(right);
 
         if (left instanceof InitialContext) {
             ((InitialContext) left).reset();
         }
         if (right instanceof InitialContext) {
             ((InitialContext) right).reset();
         }
         if (left instanceof Iterator && right instanceof Iterator) {
             return findMatch((Iterator) left, (Iterator) right);
         }
         if (left instanceof Iterator) {
             return containsMatch((Iterator) left, right);
         }
         if (right instanceof Iterator) {
             return containsMatch((Iterator) right, left);
         }
         double ld = InfoSetUtil.doubleValue(left);
         double rd = InfoSetUtil.doubleValue(right);
+
+        // Special handling for NaN values
+        if (Double.isNaN(ld) && Double.isNaN(rd)) {
+            return evaluateCompare(0); // Treat NaN == NaN as true
+        }
+        if (Double.isNaN(ld) || Double.isNaN(rd)) {
+            // For other NaN comparisons, return false (except equality which is checked above)
+            if (this instanceof CoreOperationEqual) { // Assuming we're dealing with equality operator
+                return evaluateCompare(Double.compare(ld, rd));
+            }
+            // For inequality operators, NaN should return false
+            return evaluateCompare(Double.compare(ld, rd));
+        }
         return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
     }
\ No newline at end of file
