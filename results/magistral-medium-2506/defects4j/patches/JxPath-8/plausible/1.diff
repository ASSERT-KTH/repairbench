diff --git a/tmp/3b4962e8-0ee0-404a-a1fe-0dbb949e5697_buggy.java b/tmp/9f49020f-1e73-43ee-8480-0eea171ad295_fixed.java
index 98d89dc..dcc155b 100644
--- a/tmp/3b4962e8-0ee0-404a-a1fe-0dbb949e5697_buggy.java
+++ b/tmp/9f49020f-1e73-43ee-8480-0eea171ad295_fixed.java
@@ -1,23 +1,41 @@
     private boolean compute(Object left, Object right) {
         left = reduce(left);
         right = reduce(right);
 
         if (left instanceof InitialContext) {
             ((InitialContext) left).reset();
         }
         if (right instanceof InitialContext) {
             ((InitialContext) right).reset();
         }
         if (left instanceof Iterator && right instanceof Iterator) {
             return findMatch((Iterator) left, (Iterator) right);
         }
         if (left instanceof Iterator) {
             return containsMatch((Iterator) left, right);
         }
         if (right instanceof Iterator) {
             return containsMatch((Iterator) right, left);
         }
         double ld = InfoSetUtil.doubleValue(left);
         double rd = InfoSetUtil.doubleValue(right);
+
+        // Handle NaN equality case explicitly
+        if (Double.isNaN(ld) && Double.isNaN(rd)) {
+            return evaluateCompare(0); // Consider NaN equal to itself
+        }
+
+        // For any other case involving NaN, consider it false (but in Java's normal behavior)
+        // However, according to the test case, we need to return false for comparisons when either is NaN
+        // except for equality which is handled above
+        if (Double.isNaN(ld) || Double.isNaN(rd)) {
+            // For relational comparisons (>, <), return false
+            // For equality, we already handled the NaN==NaN case above
+            if (ld == rd) {
+                return true; // but this case was already handled by the first check
+            }
+            return false;
+        }
+
         return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
     }
\ No newline at end of file
