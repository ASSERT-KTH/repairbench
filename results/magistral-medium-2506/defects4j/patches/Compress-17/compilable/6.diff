diff --git a/tmp/6204a564-2273-4bb2-b569-fd101ec16fc6_buggy.java b/tmp/a48d0560-6cd2-4be9-91d6-cd4137212e9f_fixed.java
index 3b9a3c0..8da5d0a 100644
--- a/tmp/6204a564-2273-4bb2-b569-fd101ec16fc6_buggy.java
+++ b/tmp/a48d0560-6cd2-4be9-91d6-cd4137212e9f_fixed.java
@@ -1,71 +1,62 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
+        // Must have at least one trailing NUL or space
+        if (start >= end) {
+            return 0L; // All spaces or empty buffer
+        }
+
+        // Check trailing bytes
+        int lastNonTrailer = end;
+        while (end > start) {
+            byte trailer = buffer[end - 1];
             if (trailer == 0 || trailer == ' ') {
                 end--;
             } else {
+                break;
+            }
+        }
+
+        if (start >= end) {
+            return 0L; // Only had spaces/NULs
+        }
+
+        // The trailing character before any spaces/NULs must be a valid octal digit or space/NUL
+        byte lastChar = buffer[end - 1];
+        if (lastChar != 0 && lastChar != ' ') {
+            if (lastChar < '0' || lastChar > '7') {
                 throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+                        exceptionMessage(buffer, offset, length, end - 1, lastChar));
             }
-        // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
         }
 
         for (; start < end; start++) {
             final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            result = (result << 3) + (currentByte - '0');
         }
 
         return result;
     }
\ No newline at end of file
