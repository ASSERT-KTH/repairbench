diff --git a/tmp/6dfb7434-84f1-458e-8a32-fa9827136d52_buggy.java b/tmp/3d970058-678b-43f5-87a6-e0854174c4c8_fixed.java
index 5f96616..619f0a4 100644
--- a/tmp/6dfb7434-84f1-458e-8a32-fa9827136d52_buggy.java
+++ b/tmp/3d970058-678b-43f5-87a6-e0854174c4c8_fixed.java
@@ -1,20 +1,32 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraint.isRecordType()) {
+      ObjectType recordConstraint = constraint.toObjectType();
+      if (isRecordType()) {
+        // If this is also a record, merge properties
+        ObjectType thisType = toObjectType();
+        for (String prop : recordConstraint.getPropertyTypes().getPropertyNames()) {
+          JSType propType = recordConstraint.getPropertyTypes().getType(prop);
+          // Update the property type in this record
+          thisType.defineProperty(prop, propType);
+        }
+      } else {
+        // If not a record, convert to one that matches the constraint
+        ObjectType newType = getNativeTypeRegistry().createObjectType();
+        for (String prop : recordConstraint.getPropertyTypes().getPropertyNames()) {
+          JSType propType = recordConstraint.getPropertyTypes().getType(prop);
+          newType.defineProperty(prop, propType);
+        }
+        becomeType(newType);
+      }
+    } else {
+      // Handle non-record constraints
       matchRecordTypeConstraint(constraint.toObjectType());
     }
   }
\ No newline at end of file
