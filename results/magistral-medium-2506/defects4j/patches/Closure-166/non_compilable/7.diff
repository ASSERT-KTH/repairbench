diff --git a/tmp/7be5db33-bb41-4232-b5b4-c08f5a7b9df8_buggy.java b/tmp/0eccb772-1db9-4a37-b9ee-173fdc43ba10_fixed.java
index 5f96616..80b3c1c 100644
--- a/tmp/7be5db33-bb41-4232-b5b4-c08f5a7b9df8_buggy.java
+++ b/tmp/0eccb772-1db9-4a37-b9ee-173fdc43ba10_fixed.java
@@ -1,20 +1,36 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraint.isRecordType()) {
+      matchRecordTypeConstraint(constraint.toMaybeObjectType());
+    } else if (constraint.isUnionType()) {
+      // Handle union types by trying to match each alternative
+      JSType constr = constraint.restrictByNotNullOrUndefined();
+      if (constr.isUnionType()) {
+        UnionType union = (UnionType) constr;
+        for (JSType alternative : union.getAlternates()) {
+          matchConstraint(alternate);
+        }
+      }
+    }
+  }
+
+  private void matchRecordTypeConstraint(JSType constraint) {
+    if (constraint == null || !constraint.isRecordType()) {
+      return;
+    }
     matchRecordTypeConstraint(constraint.toObjectType());
   }
\ No newline at end of file
-  }
