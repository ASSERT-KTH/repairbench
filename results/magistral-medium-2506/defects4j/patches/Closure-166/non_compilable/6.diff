diff --git a/tmp/3db7187d-a382-4a47-ad64-e92684084b31_buggy.java b/tmp/793b6cf7-29c7-415b-a399-15ee0573c280_fixed.java
index 5f96616..83def6a 100644
--- a/tmp/3db7187d-a382-4a47-ad64-e92684084b31_buggy.java
+++ b/tmp/793b6cf7-29c7-415b-a399-15ee0573c280_fixed.java
@@ -1,20 +1,29 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+      ObjectType recordType = constraint.toObjectType();
+      if (isRecordType() || isUnknownType()) {
+        // If we're a record or unknown, take the union of all properties
+        for (String prop : recordType.getOwnPropertyNames()) {
+          JSType propType = recordType.getPropertyType(prop);
+          defineProperty(prop, propType, false);
+        }
+      }
+      // Also handle the case where we're an empty object and need to match the record
+      if (isEmptyRecord()) {
+        matchRecordTypeConstraint(recordType);
+      } else {
+        // Try to match properties from our type to the record constraint
+        matchRecordTypeConstraint(recordType);
+      }
+    } else {
+      // For non-record types, just do regular matching
+      super.matchConstraint(constraint);
     }
   }
\ No newline at end of file
