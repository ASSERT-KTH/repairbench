diff --git a/tmp/8622870f-2882-4ff5-875c-787db802c9ad_buggy.java b/tmp/8bde0575-3f25-42a5-8eeb-64e2ffacdc39_fixed.java
index 5f96616..128d904 100644
--- a/tmp/8622870f-2882-4ff5-875c-787db802c9ad_buggy.java
+++ b/tmp/8bde0575-3f25-42a5-8eeb-64e2ffacdc39_fixed.java
@@ -1,20 +1,35 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraint {{prop: (number|undefined)}}
   // function f(constraint) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
-    if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+  if (constraint.isRecordType() || constraint.isUnionType()) {
+    JSType recordType = constraint.isRecordType() ?
+        constraint.toObjectType() :
+        findRecordTypeInUnion(constraint.toMaybeUnionType());
+    if (recordType != null) {
+      matchRecordTypeConstraint(recordType.toObjectType());
     }
   }
+}
+
+// Helper method to find record types in union types
+private JSType findRecordTypeInUnion(UnionType constraint) {
+  for (JSType alternative : constraint.getAlternates()) {
+    if (alternative.isRecordType()) {
+      return alternative.toObjectType();
+    }
+  }
+  return null;
+}
\ No newline at end of file
