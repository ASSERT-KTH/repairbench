diff --git a/tmp/98907676-e9f7-4c4e-a9fa-5f60a76113f2_buggy.java b/tmp/f8bb90ca-bd89-4d46-888f-4b7eef28613f_fixed.java
index 5f96616..4c1e522 100644
--- a/tmp/98907676-e9f7-4c4e-a9fa-5f60a76113f2_buggy.java
+++ b/tmp/f8bb90ca-bd89-4d46-888f-4b7eef28613f_fixed.java
@@ -1,20 +1,22 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+    // Handle the case where the constraint object is a record type or contains record types in unions.
     if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
+    } else if (constraint.isUnionType()) {
+      // Handle union types that contain record types
+      UnionType unionConstraint = constraint.toMaybeUnionType();
+      if (unionConstraint != null) {
+        for (JSType alternative : unionConstraint.getAlternates()) {
+          if (alternative.isRecordType()) {
+            matchRecordTypeConstraint(alternative.toObjectType());
+          }
+        }
+      }
     }
   }
\ No newline at end of file
