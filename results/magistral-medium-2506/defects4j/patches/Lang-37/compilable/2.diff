diff --git a/tmp/a00534dc-ae61-4ea4-a930-0749e13c1e3e_buggy.java b/tmp/fe98c199-c149-4e03-9e9e-c029cf344011_fixed.java
index d5b1b52..03152da 100644
--- a/tmp/a00534dc-ae61-4ea4-a930-0749e13c1e3e_buggy.java
+++ b/tmp/fe98c199-c149-4e03-9e9e-c029cf344011_fixed.java
@@ -1,36 +1,62 @@
-    /**
-     * <p>Adds all the elements of the given arrays into a new array.</p>
-     * <p>The new array contains all of the element of <code>array1</code> followed
-     * by all of the elements <code>array2</code>. When an array is returned, it is always
-     * a new array.</p>
-     *
-     * <pre>
-     * ArrayUtils.addAll(null, null)     = null
-     * ArrayUtils.addAll(array1, null)   = cloned copy of array1
-     * ArrayUtils.addAll(null, array2)   = cloned copy of array2
-     * ArrayUtils.addAll([], [])         = []
-     * ArrayUtils.addAll([null], [null]) = [null, null]
-     * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
-     * </pre>
-     *
-     * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
-     * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
-     * @return The new array, <code>null</code> if both arrays are <code>null</code>.
-     *      The type of the new array is the type of the first array,
-     *      unless the first array is null, in which case the type is the same as the second array.
-     * @since 2.1
-     */
 @SuppressWarnings("unchecked")
 public static <T> T[] addAll(T[] array1, T... array2) {
     if (array1 == null) {
         return clone(array2);
     } else if (array2 == null) {
         return clone(array1);
+    } else if (array1.length == 0) {
+        return clone(array2);
+    } else if (array2.length == 0) {
+        return clone(array1);
     }
     final Class<?> type1 = array1.getClass().getComponentType();
+    final Class<?> type2 = array2.getClass().getComponentType();
+
+    if (type1.isAssignableFrom(type2)) {
+        // type1 can hold elements of type2
         T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
         System.arraycopy(array1, 0, joinedArray, 0, array1.length);
         System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
         return joinedArray;
+    } else if (type2.isAssignableFrom(type1)) {
+        // type2 can hold elements of type1 (we'll copy to type2 array)
+        T[] joinedArray = (T[]) Array.newInstance(type2, array1.length + array2.length);
+        System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
+        return joinedArray;
+    } else {
+        // Need to find a common supertype
+        Class<?> componentType = findCommonComponentType(type1, type2);
+        T[] joinedArray = (T[]) Array.newInstance(componentType, array1.length + array2.length);
+        System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+        // Copy second array element by element to avoid ArrayStoreException
+        try {
+            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
+        } catch (ArrayStoreException e) {
+            // Fallback to individual copying if arraycopy fails
+            for (int i = 0; i < array2.length; i++) {
+                joinedArray[array1.length + i] = array2[i];
+            }
+        }
+        return joinedArray;
+    }
+}
+
+private static Class<?> findCommonComponentType(Class<?> type1, Class<?> type2) {
+    if (type1.isAssignableFrom(type2)) {
+        return type1;
+    }
+    if (type2.isAssignableFrom(type1)) {
+        return type2;
+    }
+    // Find common superclass
+    Class<?> superType = type1;
+    while (superType != null) {
+        if (superType.isAssignableFrom(type2)) {
+            return superType;
+        }
+        superType = superType.getSuperclass();
+    }
+    // If no common superclass found, use Object
+    return Object.class;
 }
\ No newline at end of file
