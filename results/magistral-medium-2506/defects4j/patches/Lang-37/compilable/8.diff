diff --git a/tmp/e8b62a0e-8685-4609-85c4-8973edf97764_buggy.java b/tmp/dd2f0e76-0d4b-492c-a4c1-88b038645e9f_fixed.java
index d5b1b52..4c61d6b 100644
--- a/tmp/e8b62a0e-8685-4609-85c4-8973edf97764_buggy.java
+++ b/tmp/dd2f0e76-0d4b-492c-a4c1-88b038645e9f_fixed.java
@@ -1,36 +1,55 @@
-    /**
-     * <p>Adds all the elements of the given arrays into a new array.</p>
-     * <p>The new array contains all of the element of <code>array1</code> followed
-     * by all of the elements <code>array2</code>. When an array is returned, it is always
-     * a new array.</p>
-     *
-     * <pre>
-     * ArrayUtils.addAll(null, null)     = null
-     * ArrayUtils.addAll(array1, null)   = cloned copy of array1
-     * ArrayUtils.addAll(null, array2)   = cloned copy of array2
-     * ArrayUtils.addAll([], [])         = []
-     * ArrayUtils.addAll([null], [null]) = [null, null]
-     * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
-     * </pre>
-     *
-     * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
-     * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
-     * @return The new array, <code>null</code> if both arrays are <code>null</code>.
-     *      The type of the new array is the type of the first array,
-     *      unless the first array is null, in which case the type is the same as the second array.
-     * @since 2.1
-     */
     @SuppressWarnings("unchecked")
     public static <T> T[] addAll(T[] array1, T... array2) {
         if (array1 == null) {
             return clone(array2);
         } else if (array2 == null) {
             return clone(array1);
         }
+
+        // If array1 is empty, just clone array2
+        if (array1.length == 0) {
+            return clone(array2);
+        }
+
+        // Get the component type of array1
         final Class<?> type1 = array1.getClass().getComponentType();
-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
+        // Make sure we have a common type to store both arrays' elements
+        Class<?> newArrayType = type1;
+
+        // If array2 is not empty, check if we need a more general type
+        if (array2.length > 0) {
+            // If both arrays have elements, we need to find a common superclass
+            final Class<?> type2 = array2.getClass().getComponentType();
+            if (type2 != null) {
+                // Check if type1 can store type2 elements
+                if (!type1.isAssignableFrom(type2)) {
+                    // If not, we'll use Object.class if neither type is a superclass of the other
+                    // Otherwise, use the more general type
+                    if (type2.isAssignableFrom(type1)) {
+                        newArrayType = type2;
+                    } else {
+                        // Find common superclass
+                        Class<?> commonType = type1;
+                        while (commonType != null && !commonType.isAssignableFrom(type2)) {
+                            commonType = commonType.getSuperclass();
+                        }
+                        if (commonType == null) {
+                            commonType = Object.class; // fallback to Object if no common ancestor found
+                        }
+                        newArrayType = commonType;
+                    }
+                }
+            }
+        }
+
+        // Create new array of the most appropriate type
+        final T[] joinedArray = (T[]) Array.newInstance(newArrayType, array1.length + array2.length);
         System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+        try {
             System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
+        } catch (ArrayStoreException e) {
+            // This should never happen if our type checking is correct
+            throw new IllegalArgumentException("Cannot store " + array2.getClass().getComponentType() + " in an array of " + newArrayType);
+        }
         return joinedArray;
     }
\ No newline at end of file
