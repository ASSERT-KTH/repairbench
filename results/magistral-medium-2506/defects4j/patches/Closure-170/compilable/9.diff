diff --git a/tmp/5b9305b1-d706-4157-a8f4-97e7ee49c0e7_buggy.java b/tmp/164445f7-1cf4-4467-80ff-af13fd80a12e_fixed.java
index 5abdeb5..19c53e3 100644
--- a/tmp/5b9305b1-d706-4157-a8f4-97e7ee49c0e7_buggy.java
+++ b/tmp/164445f7-1cf4-4467-80ff-af13fd80a12e_fixed.java
@@ -1,29 +1,37 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
               // We make a special exception when the entire cfgNode is a chain
               // of assignments, since in that case the assignment statements
               // will happen after the inlining of the right hand side.
               // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
               //   and remove this special case.
               !(parent.isAssign() &&
                 (parent.getFirstChild() == n))) {
               // Don't count lhs of top-level assignment chain
               numUsesWithinCfgNode++;
           }
+          if (n.isAssign()) {
+            // Check if the variable is being assigned in this node
+            Node lhs = n.getFirstChild();
+            if (lhs.isName() && lhs.getString().equals(varName)) {
+              // Found an assignment to our variable, count this as a use of previous value
+              numUsesWithinCfgNode++;
+            }
+          }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
