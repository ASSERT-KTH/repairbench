diff --git a/tmp/957e9179-91e6-4f8c-90a7-88fb366c516d_buggy.java b/tmp/09b79400-76d8-4e77-a5cd-d76770709147_fixed.java
index 5abdeb5..233048a 100644
--- a/tmp/957e9179-91e6-4f8c-90a7-88fb366c516d_buggy.java
+++ b/tmp/09b79400-76d8-4e77-a5cd-d76770709147_fixed.java
@@ -1,29 +1,53 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
-
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
-
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
               // We make a special exception when the entire cfgNode is a chain
               // of assignments, since in that case the assignment statements
               // will happen after the inlining of the right hand side.
               // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
               //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+              !(parent.isAssign() && parent.getFirstChild() == n) &&
+              // Don't count LHS of assignment even if it's not the first child
+              // (to handle cases like ternary operators that might contain assignments)
+              !(isAssignmentLikeParent(parent) && isLhsOfAssignment(n, parent))) {
             numUsesWithinCfgNode++;
           }
         }
 
+        private boolean isAssignmentLikeParent(Node parent) {
+          return parent.isAssign() ||
+                 (parent.isHook() && isAssignmentParent(parent));
+        }
+
+        private boolean isAssignmentParent(Node parent) {
+          if (!parent.isHook()) return false;
+          // Check if either the consequent or alternative is an assignment
+          Node consequent = parent.getChildAt(1);
+          Node alternative = parent.getChildAt(2);
+          return (consequent.isAssign() && consequent.getFirstChild() == varName) ||
+                 (alternative.isAssign() && alternative.getFirstChild() == varName);
+        }
+
+        private boolean isLhsOfAssignment(Node n, Node parent) {
+          if (parent.isAssign()) {
+            return parent.getFirstChild() == n;
+          } else if (parent.isHook()) {
+            // For ternary operators, check if we're in an assignment branch
+            Node consequent = parent.getChildAt(1);
+            Node alternative = parent.getChildAt(2);
+            return (consequent.isAssign() && consequent.getFirstChild() == n) ||
+                   (alternative.isAssign() && alternative.getFirstChild() == n);
+          }
+          return false;
+        }
       };
-
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
