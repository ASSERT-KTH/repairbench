diff --git a/tmp/157ae374-554f-4564-8ec7-18e568a1a7b6_buggy.java b/tmp/73e7bc32-c075-4c6e-9841-e4fdf1e76303_fixed.java
index 5abdeb5..4be872a 100644
--- a/tmp/157ae374-554f-4564-8ec7-18e568a1a7b6_buggy.java
+++ b/tmp/73e7bc32-c075-4c6e-9841-e4fdf1e76303_fixed.java
@@ -1,29 +1,36 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+              // We make a special exception when the node is on the LHS of an assignment
+              !isLhsOfAssignment(n, parent)) {
               numUsesWithinCfgNode++;
           }
         }
 
+        private boolean isLhsOfAssignment(Node n, Node parent) {
+          // Check if the node is the left-hand side of an assignment
+          if (parent != null && parent.isAssign()) {
+            // Get the left-hand side of the assignment
+            Node lhs = parent.getFirstChild();
+            // If the current node is the LHS itself or contained within it
+            return n == lhs ||
+                   (lhs != null && lhs.hasChildren() &&
+                    NodeUtil.isImmediatelyEnclosedBy(n, lhs));
+          }
+          return false;
+        }
+
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
