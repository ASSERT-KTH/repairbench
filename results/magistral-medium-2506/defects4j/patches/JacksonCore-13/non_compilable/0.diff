diff --git a/tmp/5e5b395f-7495-4eed-8cf9-41cec8d1e09f_buggy.java b/tmp/73ded081-e429-4f7a-a14b-7c966ad5ec4e_fixed.java
index e69de29..11d6203 100644
--- a/tmp/5e5b395f-7495-4eed-8cf9-41cec8d1e09f_buggy.java
+++ b/tmp/73ded081-e429-4f7a-a14b-7c966ad5ec4e_fixed.java
@@ -0,0 +1,25 @@
+private void _testFieldNameQuotingEnabled(JsonFactory f, boolean enableQuoting, boolean expectQuotes,
+        String expected) throws IOException {
+    StringWriter sw = new StringWriter();
+    JsonGenerator g = f.createGenerator(sw);
+    if (enableQuoting) {
+        g.enable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);
+    } else {
+        g.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);
+    }
+    g.writeStartObject();
+    g.writeNumberField("foo", 1);
+    g.writeEndObject();
+    g.close();
+    String result = sw.toString();
+    if (expectQuotes) {
+        // If we expect quotes, the field name should be quoted regardless of the enableQuoting parameter
+        // because the feature might be overridden by the generator's settings
+        assertEquals(expected, result);
+    } else {
+        // If we don't expect quotes, verify that's the case
+        // But the test expects "{foo:1}" for no quotes, but actual may differ
+        // Since the test is failing with both being {foo:1}, perhaps we need to properly handle quoting
+        assertEquals(expected, result);
+    }
+}
\ No newline at end of file
