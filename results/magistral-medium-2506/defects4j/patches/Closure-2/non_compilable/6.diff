diff --git a/tmp/baa6907a-087b-4bf9-88a4-24764851c8f1_buggy.java b/tmp/a13a7998-51b5-4963-94f0-afe02d498e68_fixed.java
index 8ff679b..3bc2390 100644
--- a/tmp/baa6907a-087b-4bf9-88a4-24764851c8f1_buggy.java
+++ b/tmp/a13a7998-51b5-4963-94f0-afe02d498e68_fixed.java
@@ -1,39 +1,54 @@
   /**
    * Check whether there's any property conflict for for a particular super
    * interface
    * @param t The node traversal object that supplies context
    * @param n The node being visited
    * @param functionName The function name being checked
    * @param properties The property names in the super interfaces that have
    * been visited
    * @param currentProperties The property names in the super interface
    * that have been visited
    * @param interfaceType The super interface that is being visited
    */
   private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
+    if (interfaceType == null) {
+      return;
+    }
+
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
+    Set<String> currentPropertyNames = null;
+    if (implicitProto != null) {
       currentPropertyNames = implicitProto.getOwnPropertyNames();
+    }
+
+    if (currentPropertyNames != null) {
       for (String name : currentPropertyNames) {
         ObjectType oType = properties.get(name);
         if (oType != null) {
-        if (!interfaceType.getPropertyType(name).isEquivalentTo(
-            oType.getPropertyType(name))) {
+          ObjectType interfacePropertyType = interfaceType.getPropertyType(name);
+          if (interfacePropertyType != null) {
+            ObjectType propertyType = oType.getPropertyType(name);
+            if (propertyType != null && !interfacePropertyType.isEquivalentTo(propertyType)) {
               compiler.report(
                   t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                       functionName, name, oType.toString(),
                       interfaceType.toString()));
             }
           }
+        }
+        if (interfaceType != null) {
           currentProperties.put(name, interfaceType);
         }
+      }
+    }
+
+    if (interfaceType != null) {
       for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
         checkInterfaceConflictProperties(t, n, functionName, properties,
             currentProperties, iType);
       }
     }
+  }
\ No newline at end of file
