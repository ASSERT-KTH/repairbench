diff --git a/tmp/a03b0c60-46b3-4c3b-a2d0-f5f263fe13ac_buggy.java b/tmp/997d903f-0e21-4ae7-a0df-a20f1b83b7c6_fixed.java
index cd412d2..d9eb987 100644
--- a/tmp/a03b0c60-46b3-4c3b-a2d0-f5f263fe13ac_buggy.java
+++ b/tmp/997d903f-0e21-4ae7-a0df-a20f1b83b7c6_fixed.java
@@ -1,76 +1,141 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
     /* 21-May-2009, tatu: DateFormat has very strict handling of
      * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
      */
 
     /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
      * quite simple because we already set date format timezone to be
      * GMT, and hence can just strip out 'Z' altogether
      */
     int len = dateStr.length();
+    if (len == 0) {
+        return null;
+    }
     char c = dateStr.charAt(len-1);
-        DateFormat df;
+    DateFormat df = null;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
+        int colonPos = dateStr.lastIndexOf(':');
+        int tPos = dateStr.lastIndexOf('T');
+        if (colonPos > tPos && colonPos == len-5) {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            // Handle timezone offset cases
+            int colonPos = dateStr.lastIndexOf(':');
+            int tPos = dateStr.lastIndexOf('T');
+
+            // Handle timezone formats like "+01:00" or "-05:00"
+            if (colonPos > tPos && colonPos == len-3) { // case where we have timezone like +01:00
+                // Check if seconds are missing (format like "HH:mm+zz:zz")
+                if (dateStr.length() == len) { // this condition was not needed, but we'll keep it
+                    String timePart = dateStr.substring(tPos+1, len-6);
+                    String[] timeParts = timePart.split(":");
+                    if (timeParts.length == 2) { // only hours:minutes
                         StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
+                        sb.insert(len-6, ":00");
                         dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+                    }
+                }
+            } else if (len >= 3 && (dateStr.charAt(len-3) == '+' || dateStr.charAt(len-3) == '-')) {
+                // Handle case like "+0100" by inserting colon
                 StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                sb.insert(len-2, ":");
                 dateStr = sb.toString();
             }
+
+            // Handle milliseconds - look for fractional seconds
+            boolean hasMilliseconds = false;
+            int dotPos = dateStr.lastIndexOf('.');
+            if (dotPos > tPos) {
+                // Pad milliseconds to 3 digits if needed
+                int millisecondsLen = len - dotPos - 1;
+                if (millisecondsLen > 3) {
+                    millisecondLen = 3; // if more than 3 digits, we'll just take first 3
+                } else if (millisecondsLen < 3) {
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    while (millisecondsLen < 3) {
+                        sb.insert(len, "0");
+                        millisecondsLen++;
+                    }
+                    dateStr = sb.toString();
+                }
+            } else {
+                // If no milliseconds, see if we should add .000
+                // Find the seconds position (if any)
+                int lastColon = dateStr.lastIndexOf(':');
+                if (lastColon > tPos) {
+                    String timePart = dateStr.substring(tPos+1);
+                    if (timePart.length() <= 5) { // HH:mm
+                        // Add seconds and milliseconds
+                        StringBuilder sb = new StringBuilder(dateStr);
+                        sb.insert(lastColon+1, ":00.000");
+                        dateStr = sb.toString();
+                    } else if (timePart.length() <= 8) { // HH:mm:ss
+                        // Add milliseconds
+                        StringBuilder sb = new StringBuilder(dateStr);
+                        sb.insert(len-(len-lastColon-1-6), ".000"); // -6 accounts for timezone part
+                        dateStr = sb.toString();
+                    }
+                }
+            }
+
+            // Handle regular ISO8601 with timezone
             df = _formatISO8601;
-                if (_formatISO8601 == null) {
+            if (df == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
             // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+            int tPos = dateStr.lastIndexOf('T');
+            if (tPos >= 0) {
+                int timeLen = len - tPos - 1;
+                if (timeLen <= 2) { // just hour
+                    sb.append(":00:00.000");
+                } else if (timeLen <= 5) { // hour:minute
+                    sb.append(":00.000");
+                } else if (timeLen <= 8) { // hour:minute:second
                     sb.append(".000");
                 }
+            } else {
+                // no time part at all, add default time
+                sb.append("T00:00:00.000");
+            }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
+
+    // If we still don't have a date format, use plain format as fallback
+    if (df == null) {
+        df = _formatPlain;
+        if (df == null) {
+            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
+        }
+    }
+
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
