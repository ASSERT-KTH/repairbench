diff --git a/tmp/b5aa65b4-f1da-44a7-a7e5-2bf696a82502_buggy.java b/tmp/b3c0c6a7-afd8-4f78-ab74-10dc0a0a3979_fixed.java
index cd412d2..1041763 100644
--- a/tmp/b5aa65b4-f1da-44a7-a7e5-2bf696a82502_buggy.java
+++ b/tmp/b3c0c6a7-afd8-4f78-ab74-10dc0a0a3979_fixed.java
@@ -1,76 +1,114 @@
     protected Date parseAsISO8601(String dateStr, ParsePosition pos)
     {
         /* 21-May-2009, tatu: DateFormat has very strict handling of
          * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
          */
 
         /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
          * quite simple because we already set date format timezone to be
          * GMT, and hence can just strip out 'Z' altogether
          */
         int len = dateStr.length();
         char c = dateStr.charAt(len-1);
         DateFormat df;
 
         // [JACKSON-200]: need to support "plain" date...
         if (len <= 10 && Character.isDigit(c)) {
             df = _formatPlain;
             if (df == null) {
                 df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
             }
         } else if (c == 'Z') {
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
             }
             // [JACKSON-334]: may be missing milliseconds... if so, add
             if (dateStr.charAt(len-4) == ':') {
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.insert(len-1, ".000");
                 dateStr = sb.toString();
             }
         } else {
             // Let's see if we have timezone indicator or not...
             if (hasTimeZone(dateStr)) {
                 c = dateStr.charAt(len-3);
                 if (c == ':') { // remove optional colon
                     // remove colon
                     StringBuilder sb = new StringBuilder(dateStr);
                     sb.delete(len-3, len-2);
                     dateStr = sb.toString();
                 } else if (c == '+' || c == '-') { // missing minutes
                     // let's just append '00'
                     dateStr += "00";
                 }
-                // Milliseconds partial or missing; and even seconds are optional
+                // Handle milliseconds and timezone properly
                 len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+                boolean hasMilliseconds = false;
+                int timezoneOffset = dateStr.lastIndexOf('+');
+                if (timezoneOffset < 0) {
+                    timezoneOffset = dateStr.lastIndexOf('-');
+                }
+                if (timezoneOffset > 0 && timezoneOffset < len) {
+                    String timePart = dateStr.substring(0, timezoneOffset);
+                    if (timePart.contains(".")) {
+                        hasMilliseconds = true;
+                    }
+                }
+
+                if (!hasMilliseconds) {
+                    int timeLen = dateStr.length() - dateStr.lastIndexOf('T') - 1;
+                    if (timeLen < 12) { // less than SS.fffZ
                         StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                        int timePartLength = sb.lastIndexOf("+");
+                        if (timePartLength < 0) {
+                            timePartLength = sb.lastIndexOf("-");
+                        }
+                        int insertPos = timePartLength - 1; // before timezone
+                        if (insertPos > sb.lastIndexOf('T') && sb.charAt(insertPos) != '.') {
+                            // Check if there's a seconds part (.ss would come before timezone)
+                            int secondsPos = sb.lastIndexOf(":") + 3; // +HH:MM:SS part
+                            if (insertPos < secondsPos) {
+                                insertPos = secondsPos; // after seconds
+                            }
+                            if (insertPos <= sb.length() && sb.charAt(insertPos-1) == ':') {
+                                insertPos--; // position after SS
+                            }
+                            // Check if milliseconds are already present (partial)
+                            boolean hasDot = false;
+                            for (int i = sb.lastIndexOf('T'); i < insertPos; i++) {
+                                if (sb.charAt(i) == '.') {
+                                    hasDot = true;
+                                    break;
+                                }
+                            }
+                            if (!hasDot) {
+                                sb.insert(insertPos, ".000");
                                 dateStr = sb.toString();
                             }
+                        }
+                    }
+                }
                 df = _formatISO8601;
                 if (_formatISO8601 == null) {
                     df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
                 }
             } else {
                 // If not, plain date. Easiest to just patch 'Z' in the end?
                 StringBuilder sb = new StringBuilder(dateStr);
                 // And possible also millisecond part if missing
                 int timeLen = len - dateStr.lastIndexOf('T') - 1;
                 if (timeLen <= 8) {
                         sb.append(".000");
                 }
                 sb.append('Z');
                 dateStr = sb.toString();
                 df = _formatISO8601_z;
                 if (df == null) {
                     df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                             _timezone, _locale);
                 }
             }
         }
         return df.parse(dateStr, pos);
     }
\ No newline at end of file
