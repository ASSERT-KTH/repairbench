diff --git a/tmp/f3ea6834-7a6d-4522-8720-1ef0ccc51416_buggy.java b/tmp/edf2a4a8-6186-404d-a5b7-6a495377b491_fixed.java
index cd412d2..1197a49 100644
--- a/tmp/f3ea6834-7a6d-4522-8720-1ef0ccc51416_buggy.java
+++ b/tmp/edf2a4a8-6186-404d-a5b7-6a495377b491_fixed.java
@@ -1,76 +1,108 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
     /* 21-May-2009, tatu: DateFormat has very strict handling of
      * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
      */
 
     /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
      * quite simple because we already set date format timezone to be
      * GMT, and hence can just strip out 'Z' altogether
      */
     int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
+    char c = dateStr.length() > 0 ? dateStr.charAt(len-1) : '\0';
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            // Remove optional colon in timezone
+            int colonPos = dateStr.lastIndexOf(':');
+            if (colonPos > 0 && colonPos == dateStr.length() - 3) {
                 StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
+                sb.deleteCharAt(colonPos);
                 dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+
+            // Check for timezone format (e.g. +0000 or +00:00)
+            boolean hasZoneWithColon = dateStr.contains(":");
+            if (hasZoneWithColon && dateStr.length() > 6) {
+                // Check if timezone is in format like +00:00
+                int zoneStart = dateStr.length() - 6;
+                if (dateStr.charAt(zoneStart) == '+' || dateStr.charAt(zoneStart) == '-') {
+                    // Check if seconds are missing (format like 19:20+01:00)
+                    int tPos = dateStr.indexOf('T');
+                    if (tPos != -1) {
+                        String timePart = dateStr.substring(tPos + 1, zoneStart);
+                        if (timePart.length() <= 5) { // format is HH:mm or HH:mm:ss
+                            // Add missing seconds if not present
+                            if (timePart.length() == 5) { // HH:mm
                                 StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                                sb.insert(tPos + 6, ":00");
                                 dateStr = sb.toString();
                             }
+                        }
+                    }
+                }
+            }
+
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
             // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
             if (timeLen <= 8) {
+                // Add missing milliseconds
+                String timePart = dateStr.substring(dateStr.lastIndexOf('T') + 1);
+                if (!timePart.contains(".")) {
+                    // Check if we have seconds (format like HH:mm:ss)
+                    if (timePart.length() == 8) { // HH:mm:ss
+                        sb.insert(len - 3, ".000");
+                    } else if (timePart.length() == 5) { // HH:mm
+                        sb.append(":00.000");
+                    } else {
                         sb.append(".000");
                     }
+                } else {
+                    // We already have milliseconds, but they might be partial
+                    int dotPos = timePart.indexOf('.');
+                    int millisLength = timePart.length() - dotPos - 1;
+                    if (millisLength < 3) { // pad with zeros if needed
+                        while (millisLength < 3) {
+                            sb.append('0');
+                            millisLength++;
+                        }
+                    }
+                }
+            }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
