diff --git a/tmp/09a71af3-e654-45b3-ad52-824de40cf06e_buggy.java b/tmp/5e4f0a1c-c30c-479a-b64a-fd9ce91ea3a7_fixed.java
index cd412d2..53136fd 100644
--- a/tmp/09a71af3-e654-45b3-ad52-824de40cf06e_buggy.java
+++ b/tmp/5e4f0a1c-c30c-479a-b64a-fd9ce91ea3a7_fixed.java
@@ -1,76 +1,108 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
     /* 21-May-2009, tatu: DateFormat has very strict handling of
      * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
      */
 
     /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
      * quite simple because we already set date format timezone to be
      * GMT, and hence can just strip out 'Z' altogether
      */
     int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
+    char c = len > 0 ? dateStr.charAt(len-1) : ' ';
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
             c = dateStr.charAt(len-3);
             if (c == ':') { // remove optional colon
                 // remove colon
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len-3, len-2);
                 dateStr = sb.toString();
             } else if (c == '+' || c == '-') { // missing minutes
                 // let's just append '00'
                 dateStr += "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+            // Handle case where seconds are missing
+            int tIndex = dateStr.indexOf('T');
+            if (tIndex >= 0) {
+                int colonCount = 0;
+                for (int i = tIndex; i < dateStr.length(); i++) {
+                    if (dateStr.charAt(i) == ':') {
+                        colonCount++;
+                    }
+                }
+                // If there's only one colon (meaning minutes exist but not seconds)
+                if (colonCount == 1) {
                     StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                    // Find where to insert seconds and milliseconds
+                    int insertPos = dateStr.lastIndexOf(':') + 3;
+                    if (insertPos < dateStr.length()) {
+                        // Check if there's a '.' already (partial milliseconds)
+                        int dotPos = dateStr.indexOf('.', tIndex);
+                        if (dotPos == -1) {
+                            sb.insert(insertPos, ":00.000");
+                        } else {
+                            // If milliseconds are partial (like .6), pad them to 3 digits
+                            int secondsEnd = dateStr.lastIndexOf(':') + 3;
+                            if (dotPos < secondsEnd) {
+                                // Missing seconds, add them before milliseconds
+                                sb.insert(insertPos, ":00");
+                            }
+                            // Pad milliseconds to 3 digits
+                            int millisStart = dotPos + 1;
+                            int millisLength = dateStr.length() - millisStart;
+                            if (millisLength < 3) {
+                                // Pad with zeros
+                                while (millisLength < 3) {
+                                    sb.append('0');
+                                    millisLength++;
+                                }
+                            }
+                        }
                         dateStr = sb.toString();
                     }
+                }
+            }
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
             // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
             if (timeLen <= 8) {
                     sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
