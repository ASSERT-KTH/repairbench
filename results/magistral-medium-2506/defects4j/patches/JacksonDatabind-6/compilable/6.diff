diff --git a/tmp/87eb97a5-1fb0-48c6-9736-d6dff067f6ff_buggy.java b/tmp/c955b9f8-207f-49b3-a1bb-d4c95eaf6356_fixed.java
index cd412d2..06b7b96 100644
--- a/tmp/87eb97a5-1fb0-48c6-9736-d6dff067f6ff_buggy.java
+++ b/tmp/c955b9f8-207f-49b3-a1bb-d4c95eaf6356_fixed.java
@@ -1,76 +1,124 @@
     protected Date parseAsISO8601(String dateStr, ParsePosition pos)
     {
         /* 21-May-2009, tatu: DateFormat has very strict handling of
          * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
          */
 
         /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
          * quite simple because we already set date format timezone to be
          * GMT, and hence can just strip out 'Z' altogether
          */
         int len = dateStr.length();
         char c = dateStr.charAt(len-1);
         DateFormat df;
 
         // [JACKSON-200]: need to support "plain" date...
         if (len <= 10 && Character.isDigit(c)) {
             df = _formatPlain;
             if (df == null) {
                 df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
             }
         } else if (c == 'Z') {
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
             }
             // [JACKSON-334]: may be missing milliseconds... if so, add
             if (dateStr.charAt(len-4) == ':') {
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.insert(len-1, ".000");
                 dateStr = sb.toString();
             }
         } else {
             // Let's see if we have timezone indicator or not...
             if (hasTimeZone(dateStr)) {
                 c = dateStr.charAt(len-3);
                 if (c == ':') { // remove optional colon
                     // remove colon
                     StringBuilder sb = new StringBuilder(dateStr);
                     sb.delete(len-3, len-2);
                     dateStr = sb.toString();
                 } else if (c == '+' || c == '-') { // missing minutes
                     // let's just append '00'
                     dateStr += "00";
                 }
                 // Milliseconds partial or missing; and even seconds are optional
                 len = dateStr.length();
                 // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+
+                // Find the position of T
+                int tPos = dateStr.indexOf('T');
+                if (tPos >= 0) {
+                    int timeLen = len - tPos - 1;
+
+                    // Check if we have time part without seconds (e.g., "HH:mm+ZZZZ")
+                    if (timeLen <= 5) { // "HH:mm" is 5 chars
                         StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                        // Insert ":00" if seconds are missing
+                        if (timeLen == 5) { // "HH:mm"
+                            sb.insert(tPos + 6, ":00");
                             dateStr = sb.toString();
+                            len = dateStr.length();
+                        }
+                    }
+
+                    // Handle milliseconds (which can be partial like ".123" or missing)
+                    boolean hasMilliseconds = false;
+                    int dotPos = dateStr.indexOf('.', tPos);
+                    if (dotPos > 0) {
+                        hasMilliseconds = true;
+                        int nextPos = dotPos + 1;
+                        while (nextPos < len && Character.isDigit(dateStr.charAt(nextPos))) {
+                            nextPos++;
+                        }
+                        int msDigits = nextPos - dotPos - 1;
+                        if (msDigits < 3) {
+                            // Pad with zeros if we have partial milliseconds
+                            StringBuilder sb = new StringBuilder(dateStr);
+                            while (msDigits < 3) {
+                                sb.insert(dotPos + 1 + msDigits, '0');
+                                msDigits++;
+                            }
+                            dateStr = sb.toString();
+                            len = dateStr.length();
+                        }
+                    } else {
+                        // If there's no milliseconds part and we have time (seconds present)
+                        // Insert .000 after seconds (which are at tPos+6 to tPos+7 for ":ss")
+                        if (timeLen >= 8) { // "HH:mm:ss" is 8 chars
+                            StringBuilder sb = new StringBuilder(dateStr);
+                            sb.insert(tPos + 9, ".000"); // after "HH:mm:ss"
+                            dateStr = sb.toString();
+                            len = dateStr.length();
+                        }
+                    }
                 }
                 df = _formatISO8601;
                 if (_formatISO8601 == null) {
                     df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
                 }
             } else {
                 // If not, plain date. Easiest to just patch 'Z' in the end?
                 StringBuilder sb = new StringBuilder(dateStr);
                 // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
+                int tPos = dateStr.indexOf('T');
+                if (tPos >= 0) {
+                    int timeLen = len - tPos - 1;
                     if (timeLen <= 8) {
                         sb.append(".000");
                     }
+                } else {
+                    // If there's no time component at all, add default time
+                    sb.append("T00:00:00");
+                }
                 sb.append('Z');
                 dateStr = sb.toString();
                 df = _formatISO8601_z;
                 if (df == null) {
                     df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                             _timezone, _locale);
                 }
             }
         }
         return df.parse(dateStr, pos);
     }
\ No newline at end of file
