diff --git a/tmp/f955ca6b-35d6-4b34-9a45-4d71fbac2c01_buggy.java b/tmp/e4b8df7a-2011-45e3-905e-e9310880b5fa_fixed.java
index cd412d2..8d557e5 100644
--- a/tmp/f955ca6b-35d6-4b34-9a45-4d71fbac2c01_buggy.java
+++ b/tmp/e4b8df7a-2011-45e3-905e-e9310880b5fa_fixed.java
@@ -1,76 +1,141 @@
     protected Date parseAsISO8601(String dateStr, ParsePosition pos)
     {
         /* 21-May-2009, tatu: DateFormat has very strict handling of
          * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
          */
 
         /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
          * quite simple because we already set date format timezone to be
          * GMT, and hence can just strip out 'Z' altogether
          */
         int len = dateStr.length();
         char c = dateStr.charAt(len-1);
         DateFormat df;
 
         // [JACKSON-200]: need to support "plain" date...
         if (len <= 10 && Character.isDigit(c)) {
             df = _formatPlain;
             if (df == null) {
                 df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
             }
         } else if (c == 'Z') {
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
             }
             // [JACKSON-334]: may be missing milliseconds... if so, add
             if (dateStr.charAt(len-4) == ':') {
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.insert(len-1, ".000");
                 dateStr = sb.toString();
             }
         } else {
             // Let's see if we have timezone indicator or not...
             if (hasTimeZone(dateStr)) {
                 c = dateStr.charAt(len-3);
                 if (c == ':') { // remove optional colon
                     // remove colon
                     StringBuilder sb = new StringBuilder(dateStr);
                     sb.delete(len-3, len-2);
                     dateStr = sb.toString();
                 } else if (c == '+' || c == '-') { // missing minutes
                     // let's just append '00'
                     dateStr += "00";
                 }
+                // Handle case where seconds are missing but timezone exists
+                int tIndex = dateStr.lastIndexOf('T');
+                if (tIndex > -1) {
+                    // Check if we have time part after 'T'
+                    int timePartLength = len - tIndex - 1;
+                    // Format is expected to be HH:mm or HH:mm:ss
+                    if (timePartLength == 5) { // HH:mm case (missing :ss)
+                        StringBuilder sb = new StringBuilder(dateStr);
+                        sb.insert(tIndex + 6, ":00"); // Insert seconds
+                        dateStr = sb.toString();
+                    }
+                    // If we have milliseconds but not all 3 digits (.sss or .ss or .s)
+                    int dotIndex = dateStr.indexOf('.', tIndex);
+                    if (dotIndex > -1) {
+                        int millisLength = dateFormatWithMillis(dotIndex, tIndex, dateStr);
+                        if (millisLength > 0 && millisLength < 3) {
+                            StringBuilder sb = new StringBuilder(dateStr);
+                            while (millisLength < 3) {
+                                sb.insert(dotIndex + millisLength + 1, '0');
+                                millisLength++;
+                            }
+                            dateStr = sb.toString();
+                        }
+                    } else {
+                        // Check if we might need to add milliseconds
+                        boolean hasSeconds = (dateStr.indexOf(':', tIndex + 3) != -1);
+                        if (hasSeconds) {
+                            // Check position of timezone marker
+                            int tzIndex = findTimezoneMarkers(dateStr);
+                            if (tzIndex > 0) {
+                                int dotInsertPos = tzIndex; // usually before timezone
+                                while (dotInsertPos > tIndex && Character.isDigit(dateStr.charAt(dotInsertPos-1))) {
+                                    dotInsertPos--;
+                                }
+                                if (dotInsertPos > tIndex && dateStr.charAt(dotInsertPos) != '.') {
+                                    StringBuilder sb = new StringBuilder(dateStr);
+                                    sb.insert(dotInsertPos, ".000");
+                                    dateStr = sb.toString();
+                                }
+                            }
+                        }
+                    }
+                }
                 // Milliseconds partial or missing; and even seconds are optional
                 len = dateStr.length();
                 // remove 'T', '+'/'-' and 4-digit timezone-offset
                 c = dateStr.charAt(len-9);
                 if (Character.isDigit(c)) {
                     StringBuilder sb = new StringBuilder(dateStr);
                     sb.insert(len-5, ".000");
                     dateStr = sb.toString();
                 }
                 df = _formatISO8601;
                 if (_formatISO8601 == null) {
                     df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
                 }
             } else {
                 // If not, plain date. Easiest to just patch 'Z' in the end?
                 StringBuilder sb = new StringBuilder(dateStr);
                 // And possible also millisecond part if missing
                 int timeLen = len - dateStr.lastIndexOf('T') - 1;
                 if (timeLen <= 8) {
                         sb.append(".000");
                 }
                 sb.append('Z');
                 dateStr = sb.toString();
                 df = _formatISO8601_z;
                 if (df == null) {
                     df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                             _timezone, _locale);
                 }
             }
         }
         return df.parse(dateStr, pos);
     }
+
+    // Helper method to find timezone markers (+ or -)
+    private static int findTimezoneMarkers(String dateStr) {
+        int plus = dateStr.lastIndexOf('+');
+        int minus = dateStr.lastIndexOf('-');
+        if (plus > minus) {
+            return plus;
+        }
+        return minus;
+    }
+
+    // Helper method to check length of milliseconds
+    private static int dateFormatWithMillis(int dotIndex, int tIndex, String dateStr) {
+        // Check if there are any digits after dot
+        int endIndex = Math.min(dotIndex + 3, dateStr.length());
+        for (int i = dotIndex + 1; i < endIndex; i++) {
+            if (!Character.isDigit(dateStr.charAt(i))) {
+                return i - dotIndex - 1;
+            }
+        }
+        return endIndex - dotIndex - 1;
+    }
\ No newline at end of file
