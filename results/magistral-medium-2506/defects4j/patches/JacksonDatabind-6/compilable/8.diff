diff --git a/tmp/2bd9b1d4-8084-43d4-a651-644724eba0bd_buggy.java b/tmp/c743783b-1a7b-4a20-a448-290c6bb4978f_fixed.java
index cd412d2..7c4905b 100644
--- a/tmp/2bd9b1d4-8084-43d4-a651-644724eba0bd_buggy.java
+++ b/tmp/c743783b-1a7b-4a20-a448-290c6bb4978f_fixed.java
@@ -1,76 +1,118 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
     /* 21-May-2009, tatu: DateFormat has very strict handling of
      * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
      */
 
     /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
      * quite simple because we already set date format timezone to be
      * GMT, and hence can just strip out 'Z' altogether
      */
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
             c = dateStr.charAt(len-3);
             if (c == ':') { // remove optional colon
                 // remove colon
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len-3, len-2);
                 dateStr = sb.toString();
             } else if (c == '+' || c == '-') { // missing minutes
                 // let's just append '00'
                 dateStr += "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
+
+            // Handle missing seconds or partial milliseconds
+            int tIndex = dateStr.indexOf('T');
+            if (tIndex != -1) {
+                String timePart = dateStr.substring(tIndex + 1);
+                if (timePart.indexOf(':') >= 0) {
+                    // Check if we have seconds
+                    String[] timeParts = timePart.split(":", 3);
+                    if (timeParts.length == 2) {
+                        // Only hour and minute present, add seconds and milliseconds
+                        StringBuilder sb = new StringBuilder(dateStr);
+                        int insertPos = tIndex + 1 + timeParts[0].length() + 1 + timeParts[1].length() + 1;
+                        sb.insert(insertPos, "00.000");
+                        dateStr = sb.toString();
+                    } else if (timeParts.length == 3 && !timeParts[2].contains(".")) {
+                        // Has seconds but no milliseconds
+                        int dotPos = tIndex + 1 + timeParts[0].length() + 1 + timeParts[1].length() + 1 + timeParts[2].length();
+                        if (dotPos < dateStr.length() && Character.isDigit(dateStr.charAt(dotPos))) {
+                            // If there's a partial millisecond (like ".6"), we need to make sure it has 3 digits
+                            int millisecondPos = dateStr.indexOf('.', tIndex);
+                            if (millisecondPos != -1) {
+                                StringBuilder sb = new StringBuilder(dateStr);
+                                int millisecondLength = 0;
+                                for (int i = millisecondPos + 1; i < dateStr.length() && Character.isDigit(dateStr.charAt(i)); i++) {
+                                    millisecondLength++;
+                                }
+                                if (millisecondLength < 3) {
+                                    // Pad with zeros to make it 3 digits
+                                    for (int i = millisecondLength; i < 3; i++) {
+                                        sb.insert(millisecondPos + 1 + millisecondLength, '0');
+                                    }
+                                    dateStr = sb.toString();
+                                }
+                            }
+                        } else {
+                            // No milliseconds at all, add .000
+                            int endOfSeconds = tIndex + 1 + timeParts[0].length() + 1 + timeParts[1].length() + 1 + timeParts[2].length();
+                            if (dateStr.length() > endOfSeconds && (dateStr.charAt(endOfSeconds) == '+' || dateStr.charAt(endOfSeconds) == '-')) {
+                                // Timezone starts right after seconds
+                                StringBuilder sb = new StringBuilder(dateStr);
+                                sb.insert(endOfSeconds, ".000");
+                                dateStr = sb.toString();
+                            }
+                        }
+                    }
+                }
+            }
+
+            // Get length after potential modifications
             len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
-                }
+
             df = _formatISO8601;
-                if (_formatISO8601 == null) {
+            if (df == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
             // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
             if (timeLen <= 8) {
                     sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
