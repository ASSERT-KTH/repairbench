diff --git a/tmp/a9b29ea3-4cfc-4a60-8244-32396073df62_buggy.java b/tmp/f422873e-3a41-493c-b996-fd354c971ff9_fixed.java
index cd412d2..d3074db 100644
--- a/tmp/a9b29ea3-4cfc-4a60-8244-32396073df62_buggy.java
+++ b/tmp/f422873e-3a41-493c-b996-fd354c971ff9_fixed.java
@@ -1,76 +1,115 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
     /* 21-May-2009, tatu: DateFormat has very strict handling of
      * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
      */
 
     /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
      * quite simple because we already set date format timezone to be
      * GMT, and hence can just strip out 'Z' altogether
      */
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
             c = dateStr.charAt(len-3);
             if (c == ':') { // remove optional colon
                 // remove colon
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len-3, len-2);
                 dateStr = sb.toString();
+                len = dateStr.length(); // update length after modification
             } else if (c == '+' || c == '-') { // missing minutes
                 // let's just append '00'
                 dateStr += "00";
+                len = dateStr.length(); // update length after modification
             }
-                // Milliseconds partial or missing; and even seconds are optional
+
+            // Handle partial milliseconds (e.g., .6, .61)
+            boolean hasMillis = false;
+            int millisStart = dateStr.indexOf('.');
+            if (millisStart > 0) {
+                int millisEnd = Math.max(dateStr.indexOf('+', millisStart),
+                                         dateStr.indexOf('-', millisStart));
+                if (millisEnd == -1) millisEnd = len;
+                int millisLength = millisEnd - millisStart - 1;
+                if (millisLength > 0 && millisLength < 3) {
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    while (millisLength < 3) {
+                        sb.insert(millisEnd, '0');
+                        millisLength++;
+                    }
+                    dateStr = sb.toString();
                     len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+                }
+                hasMillis = true;
+            } else {
+                // Add missing milliseconds if needed
+                int timeLen = len - Math.max(dateStr.lastIndexOf('T'), 0) - 1;
+                if (timeLen <= 8) {
                     StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                    int tIndex = dateStr.lastIndexOf('T');
+                    if (tIndex >= 0) {
+                        // Check if we have time but missing milliseconds
+                        int colonCount = 0;
+                        for (int i = tIndex; i < len; i++) {
+                            if (dateStr.charAt(i) == ':') colonCount++;
+                        }
+                        if (colonCount > 0 && !hasMillis) {
+                            // Insert milliseconds before timezone
+                            int insertPos = len - 5; // position before timezone (e.g., +00:00)
+                            if (insertPos < tIndex + 6) { // 6 = "HH:mm:"
+                                insertPos = tIndex + 6; // after seconds if they exist
+                            }
+                            if (insertPos >= tIndex) {
+                                sb.insert(insertPos, ".000");
                                 dateStr = sb.toString();
+                                len = dateStr.length();
+                            }
+                        }
+                    }
+                }
             }
+
             df = _formatISO8601;
-                if (_formatISO8601 == null) {
+            if (df == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
             // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
             if (timeLen <= 8) {
                     sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
