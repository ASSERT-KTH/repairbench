diff --git a/tmp/029e7d2a-fa71-4874-9e9c-a5f459bbd87d_buggy.java b/tmp/886fb19b-1d41-4bba-9357-3f991e71b8cc_fixed.java
index cd412d2..818be6d 100644
--- a/tmp/029e7d2a-fa71-4874-9e9c-a5f459bbd87d_buggy.java
+++ b/tmp/886fb19b-1d41-4bba-9357-3f991e71b8cc_fixed.java
@@ -1,76 +1,142 @@
     protected Date parseAsISO8601(String dateStr, ParsePosition pos)
     {
         /* 21-May-2009, tatu: DateFormat has very strict handling of
          * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
          */
 
         /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
          * quite simple because we already set date format timezone to be
          * GMT, and hence can just strip out 'Z' altogether
          */
         int len = dateStr.length();
         char c = dateStr.charAt(len-1);
         DateFormat df;
 
         // [JACKSON-200]: need to support "plain" date...
         if (len <= 10 && Character.isDigit(c)) {
             df = _formatPlain;
             if (df == null) {
                 df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
             }
         } else if (c == 'Z') {
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
             }
             // [JACKSON-334]: may be missing milliseconds... if so, add
             if (dateStr.charAt(len-4) == ':') {
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.insert(len-1, ".000");
                 dateStr = sb.toString();
             }
         } else {
             // Let's see if we have timezone indicator or not...
             if (hasTimeZone(dateStr)) {
                 c = dateStr.charAt(len-3);
                 if (c == ':') { // remove optional colon
                     // remove colon
                     StringBuilder sb = new StringBuilder(dateStr);
                     sb.delete(len-3, len-2);
                     dateStr = sb.toString();
                 } else if (c == '+' || c == '-') { // missing minutes
                     // let's just append '00'
                     dateStr += "00";
                 }
                 // Milliseconds partial or missing; and even seconds are optional
                 len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+                // First check if we need to add milliseconds
+                boolean hasMilliseconds = false;
+                int tIndex = dateStr.indexOf('T');
+                if (tIndex >= 0) {
+                    int timePartLen = len - tIndex - 1;
+                    if (timePartLen >= 9 && timePartLen <= 12) {
+                        // Check if milliseconds already exist
+                        int dotIndex = dateStr.indexOf('.', tIndex);
+                        if (dotIndex >= 0) {
+                            // We have milliseconds, but might need to pad them
+                            int msDigits = dateStr.length() - dotIndex - 1;
+                            if (msDigits == 1) { // like .6 (needs to become .600)
                                 StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                                sb.insert(dotIndex + 2, "00");
                                 dateStr = sb.toString();
+                            } else if (msDigits == 2) { // like .61 (needs to become .610)
+                                StringBuilder sb = new StringBuilder(dateStr);
+                                sb.insert(dotIndex + 3, "0");
+                                dateStr = sb.toString();
+                            }
+                            // If msDigits is 3 or more, we don't need to modify
+                        } else {
+                            // No milliseconds at all, we need to add .000 before timezone
+                            int timezoneStart = -1;
+                            // Find where timezone starts (looking for + or -)
+                            for (int i = tIndex; i < dateStr.length(); i++) {
+                                if (dateStr.charAt(i) == '+' || dateStr.charAt(i) == '-') {
+                                    timezoneStart = i;
+                                    break;
+                                }
+                            }
+                            if (timezoneStart > 0) {
+                                StringBuilder sb = new StringBuilder(dateStr);
+                                sb.insert(timezoneStart, ".000");
+                                dateStr = sb.toString();
+                            }
+                        }
+                    }
                 }
                 df = _formatISO8601;
                 if (_formatISO8601 == null) {
                     df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
                 }
             } else {
                 // If not, plain date. Easiest to just patch 'Z' in the end?
                 StringBuilder sb = new StringBuilder(dateStr);
                 // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+                int tIndex = dateStr.indexOf('T');
+                if (tIndex >= 0) {
+                    int timeLen = dateStr.length() - tIndex - 1;
+                    if (timeLen > 0 && timeLen <= 8) {
+                        // We have time but maybe missing seconds or milliseconds
+                        boolean hasColon = false;
+                        for (int i = tIndex; i < dateStr.length(); i++) {
+                            if (dateStr.charAt(i) == ':') {
+                                hasColon = true;
+                                break;
+                            }
+                        }
+                        // If we have colons but length is <= 8, we're missing seconds and/or milliseconds
+                        if (hasColon) {
+                            int secondsIndex = dateStr.lastIndexOf(':');
+                            if (secondsIndex >= 0) {
+                                // Check if we have seconds (char after colon is digit)
+                                if (secondsIndex + 1 < dateStr.length() &&
+                                    Character.isDigit(dateStr.charAt(secondsIndex + 1))) {
+                                    // We have seconds but maybe missing milliseconds
+                                    sb.insert(dateStr.length(), ".000");
+                                } else {
+                                    // Missing seconds entirely, add ":00.000"
+                                    sb.insert(secondsIndex + 1, "00.000");
+                                }
+                            }
+                        } else {
+                            // No colons means we have just hours (maybe minutes)
+                            sb.append(":00:00.000");
+                        }
+                    } else if (timeLen == 0) {
+                        // Just date without time, add time part
+                        sb.append("T00:00:00.000");
+                    } else if (dateStr.charAt(dateStr.length()-1) != '.') {
+                        // Might be missing milliseconds (but has seconds)
                         sb.append(".000");
                     }
+                }
                 sb.append('Z');
                 dateStr = sb.toString();
                 df = _formatISO8601_z;
                 if (df == null) {
                     df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                             _timezone, _locale);
                 }
             }
         }
         return df.parse(dateStr, pos);
     }
\ No newline at end of file
