diff --git a/tmp/f90d3d54-0050-458f-a065-a8c5f2cf627a_buggy.java b/tmp/e50f8e47-08c4-4951-a434-f79a9b138df3_fixed.java
index be2af16..7514f14 100644
--- a/tmp/f90d3d54-0050-458f-a065-a8c5f2cf627a_buggy.java
+++ b/tmp/e50f8e47-08c4-4951-a434-f79a9b138df3_fixed.java
@@ -1,29 +1,56 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
+        // First try Gregorian chronology
+        try {
+            long instant = iGregorianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            if (instant >= iCutoverMillis) {
+                return instant;  // Valid Gregorian date
+            }
+        } catch (IllegalFieldValueException ex) {
+            // Gregorian validation failed, try Julian chronology
+        }
+
+        // If Gregorian validation failed or date is before cutover, try Julian
+        try {
+            long instant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
             if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+                return instant;  // Valid Julian date
+            }
+        } catch (IllegalFieldValueException ex) {
+            // Julian validation failed, try Gregorian validation again
+        }
+
+        // Both chronologies failed validation or we're in the gap period
+        // Try Gregorian again to ensure we're not in the gap period
+        long instant = iGregorianChronology.getDateTimeMillis
+            (year, monthOfYear, dayOfMonth,
+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        if (instant >= iCutoverMillis) {
+            return instant;  // It's actually a valid Gregorian date after cutover
+        }
+
+        // Now try Julian to ensure we're not in the gap period from the other side
         instant = iJulianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+        if (instant < iCutoverMillis) {
+            return instant;  // It's actually a valid Julian date before cutover
+        }
+
+        // Okay, it's in the illegal cutover gap or invalid in both chronologies
         throw new IllegalArgumentException("Specified date does not exist");
     }
\ No newline at end of file
-        }
-        return instant;
-    }
