diff --git a/tmp/303769ed-e7ed-4669-8c34-040d4e5d8098_buggy.java b/tmp/cd613d4b-4eeb-4537-abf7-2c985d4463ae_fixed.java
index be2af16..02bf766 100644
--- a/tmp/303769ed-e7ed-4669-8c34-040d4e5d8098_buggy.java
+++ b/tmp/cd613d4b-4eeb-4537-abf7-2c985d4463ae_fixed.java
@@ -1,29 +1,41 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
+    // First try Gregorian, which is more restrictive
+    try {
+        long instant = iGregorianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
+            // It might be a Julian date that Gregorian rejects
+            long julianInstant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+            if (julianInstant >= iCutoverMillis) {
+                // Illegal cutover gap
                 throw new IllegalArgumentException("Specified date does not exist");
             }
+            return julianInstant;
         }
         return instant;
+    } catch (IllegalArgumentException e) {
+        // Try with Julian calendar if Gregorian fails
+        long julianInstant = iJulianChronology.getDateTimeMillis
+            (year, monthOfYear, dayOfMonth,
+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        if (julianInstant < iCutoverMillis) {
+            return julianInstant;
+        }
+        // If Julian gives a date after cutover, it's invalid
+        throw new IllegalArgumentException("Specified date does not exist");
+    }
 }
\ No newline at end of file
