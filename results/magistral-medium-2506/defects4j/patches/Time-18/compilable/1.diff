diff --git a/tmp/f31a5b18-addb-4f80-81a9-213634828d10_buggy.java b/tmp/4e7b63de-fe96-488b-8a51-033cee1cdd90_fixed.java
index be2af16..1dbd34f 100644
--- a/tmp/f31a5b18-addb-4f80-81a9-213634828d10_buggy.java
+++ b/tmp/4e7b63de-fe96-488b-8a51-033cee1cdd90_fixed.java
@@ -1,29 +1,52 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
+        // First try Gregorian (default assumption)
+        try {
+            long instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+
+            // If the instant is before cutover, try Julian
             if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
+                long julianInstant = iJulianChronology.getDateTimeMillis
                     (year, monthOfYear, dayOfMonth,
                      hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
-                throw new IllegalArgumentException("Specified date does not exist");
+
+                // If it's a valid Julian date before cutover, use it
+                if (julianInstant < iCutoverMillis) {
+                    return julianInstant;
                 }
             }
             return instant;
+        } catch (IllegalArgumentException e) {
+            // Try Julian calendar if Gregorian fails
+            try {
+                long julianInstant = iJulianChronology.getDateTimeMillis
+                    (year, monthOfYear, dayOfMonth,
+                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+
+                // Only use Julian date if it's before cutover
+                if (julianInstant < iCutoverMillis) {
+                    return julianInstant;
+                }
+            } catch (IllegalArgumentException ex) {
+                // If both fail, rethrow the original exception
+                throw e;
+            }
+        }
+
+        // If we got here, it means:
+        // 1. The date is valid in Julian calendar but after cutover (invalid)
+        // 2. Or some other edge case we haven't handled
+        throw new IllegalArgumentException("Specified date does not exist");
     }
\ No newline at end of file
