diff --git a/tmp/e76b5f73-ad6f-437a-9fdf-69ab1f9710c5_buggy.java b/tmp/8713a1ef-b334-4565-8536-324041f8b940_fixed.java
index be2af16..ff87357 100644
--- a/tmp/e76b5f73-ad6f-437a-9fdf-69ab1f9710c5_buggy.java
+++ b/tmp/8713a1ef-b334-4565-8536-324041f8b940_fixed.java
@@ -1,29 +1,40 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
+        // First try Gregorian calendar
+        try {
+            long instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
             if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+                return instant;
+            }
+        } catch (IllegalArgumentException e) {
+            // If Gregorian fails, try Julian
+        }
+
+        // Next try Julian calendar
+        try {
+            long instant = iJulianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            if (instant < iCutoverMillis) {
+                return instant;
+            }
+        } catch (IllegalArgumentException e) {
+            // If Julian fails too, throw the exception
+            throw new IllegalArgumentException(e.getMessage());
+        }
+
+        // If we get here, the date might be in the illegal cutover gap
         throw new IllegalArgumentException("Specified date does not exist");
     }
\ No newline at end of file
-        }
-        return instant;
-    }
