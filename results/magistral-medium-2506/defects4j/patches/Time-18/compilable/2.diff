diff --git a/tmp/040864f5-5bdc-40b4-9771-495c43f52cb6_buggy.java b/tmp/9216aeed-0fae-4bf1-b3b1-f9d1a1dce61c_fixed.java
index be2af16..5f3687a 100644
--- a/tmp/040864f5-5bdc-40b4-9771-495c43f52cb6_buggy.java
+++ b/tmp/9216aeed-0fae-4bf1-b3b1-f9d1a1dce61c_fixed.java
@@ -1,29 +1,44 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
+    // Try Gregorian first
     long instant;
+    try {
         instant = iGregorianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+    } catch (IllegalArgumentException ex) {
+        // If Gregorian fails, try Julian
         instant = iJulianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+            // If Julian date is after cutover but Gregorian failed, this is invalid
             throw new IllegalArgumentException("Specified date does not exist");
         }
+        return instant;
+    }
+
+    if (instant < iCutoverMillis) {
+        // Try Julian if before cutover (Gregorian is invalid in this range)
+        long julianInstant = iJulianChronology.getDateTimeMillis
+            (year, monthOfYear, dayOfMonth,
+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        if (julianInstant < iCutoverMillis) {
+            return julianInstant;
+        } else if (instant >= iCutoverMillis) {
+            // Valid in both, prefer Gregorian
+            return instant;
+        }
     }
     return instant;
 }
\ No newline at end of file
