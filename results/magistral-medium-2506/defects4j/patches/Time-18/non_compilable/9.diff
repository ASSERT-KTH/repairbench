diff --git a/tmp/470672db-bb00-46fb-8426-2a3a30e48afc_buggy.java b/tmp/9941eeff-e182-4ea6-b13f-c657c1a880b7_fixed.java
index be2af16..d878eac 100644
--- a/tmp/470672db-bb00-46fb-8426-2a3a30e48afc_buggy.java
+++ b/tmp/9941eeff-e182-4ea6-b13f-c657c1a880b7_fixed.java
@@ -1,29 +1,50 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
         // Assume date is Gregorian.
-        long instant;
+        long instant = 0;
+        try {
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
+        } catch (IllegalFieldValueException ex) {
+            // Gregorian date might not exist in Julian (or vice versa)
+            // Let's try Julian if Gregorian failed
+        }
+
+        if (instant == 0 || instant < iCutoverMillis) {
+            // Maybe it's Julian or we need to check both
+            try {
+                long julianInstant = iJulianChronology.getDateTimeMillis
                     (year, monthOfYear, dayOfMonth,
                      hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+                // Check if the Julian date is after cutover (invalid gap)
+                if (julianInstant >= iCutoverMillis) {
                     throw new IllegalArgumentException("Specified date does not exist");
                 }
+                // If we got a valid Julian instant, return it if it's before cutover
+                if (julianInstant < iCutoverMillis) {
+                    return julianInstant;
                 }
+            } catch (IllegalFieldValueException ex) {
+                // Date doesn't exist in either calendar
+                throw new IllegalFieldValueException(ex.getMessage());
+            }
+        }
+
+        // If Gregorian date is valid and not in the gap
+        if (instant > 0) {
             return instant;
         }
+
+        throw new IllegalFieldValueException("Specified date does not exist");
+    }
\ No newline at end of file
