diff --git a/tmp/40e3a13e-a286-42d1-a63c-4e5e4179ea0b_buggy.java b/tmp/747abf95-de0d-462f-ad71-adcfdbd23ad1_fixed.java
index 227a4ef..8318cd5 100644
--- a/tmp/40e3a13e-a286-42d1-a63c-4e5e4179ea0b_buggy.java
+++ b/tmp/747abf95-de0d-462f-ad71-adcfdbd23ad1_fixed.java
@@ -1,48 +1,41 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space
     // characters
     final String padding = createPadding(nextLineTabStop);
 
+    text = padding + text.substring(pos).trim();
+
+    // loop until all text is processed
     while (true)
     {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
         }
-
+        // check if we're making progress
+        if (pos <= padding.length()) {
+            // if the wrap position is within the padding itself, it means we can't make progress
+            // so we just append the whole line and exit
+            sb.append(rtrim(text));
+            return sb;
+        }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        text = padding + text.substring(pos).trim();
     }
 }
\ No newline at end of file
