diff --git a/tmp/bba6956f-7204-4f91-8ec0-31eac3517c56_buggy.java b/tmp/68a20d93-98ac-459d-bc92-66eabc6f6d0e_fixed.java
index 227a4ef..33af665 100644
--- a/tmp/bba6956f-7204-4f91-8ec0-31eac3517c56_buggy.java
+++ b/tmp/68a20d93-98ac-459d-bc92-66eabc6f6d0e_fixed.java
@@ -1,48 +1,145 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
-        int pos = findWrapPos(text, width, 0);
+        if (text == null || text.isEmpty()) {
+            return sb;
+        }
+
+        int pos = findNextWrapPos(text, width, 0, nextLineTabStop);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
+
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         // all following lines must be padded with nextLineTabStop space
         // characters
         final String padding = createPadding(nextLineTabStop);
+        String remainingText = text.substring(pos).trim();
 
-        while (true)
+        while (!remainingText.isEmpty())
         {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            if (padding.length() + remainingText.length() <= width) {
+                sb.append(padding).append(remainingText);
+                break;
+            }
 
-            if (pos == -1)
-            {
-                sb.append(text);
+            pos = findNextWrapPos(padding + remainingText, width, 0, nextLineTabStop);
+            if (pos == -1) {
+                sb.append(padding).append(remainingText);
+                break;
+            }
+
+            // Adjust position to remove padding length (since we're adding it back)
+            int relativePos = pos - padding.length();
+            if (relativePos <= 0) {
+                // If we can't even fit the padding + first word, force a break
+                relativePos = findFirstSpace(remainingText);
+                if (relativePos == -1) {
+                    // No spaces found, force a break at width minus padding
+                    relativePos = width - padding.length();
+                    if (relativePos <= 0) {
+                        relativePos = 1; // Minimum break position
+                    }
+                }
+            }
+
+            pos = padding.length() + relativePos;
+
+            // Ensure we don't get stuck in an infinite loop
+            if (pos <= padding.length()) {
+                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + remainingText);
+            }
+
+            String lineToAdd = padding + rtrim(remainingText.substring(0, relativePos));
+            sb.append(lineToAdd).append(defaultNewLine);
+            remainingText = remainingText.substring(relativePos).trim();
+        }
 
         return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
     }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+    // Helper method to find wrap position with improved logic
+    private int findNextWrapPos(String text, int width, int startPos, int nextLineTabStop) {
+        if (startPos >= text.length()) {
+            return -1;
         }
+
+        int lastSpace = -1;
+        int pos = startPos;
+        int maxPos = Math.min(startPos + width, text.length());
+
+        // Handle case where the padding itself might be longer than width
+        int effectiveWidth = width - nextLineTabStop;
+        if (effectiveWidth <= 0) {
+            effectiveWidth = width; // best effort if padding is too large
+        }
+
+        // If this is a continuation line with padding, we need to account for it
+        boolean hasPadding = text.startsWith(createPadding(nextLineTabStop));
+        int adjustedWidth = hasPadding ? width : effectiveWidth;
+
+        int currentLineStart = hasPadding ? nextLineTabStop : 0;
+
+        // Find the best wrap position within our adjusted width
+        while (pos < maxPos) {
+            char c = text.charAt(pos);
+            if (Character.isWhitespace(c)) {
+                lastSpace = pos;
+            }
+            pos++;
+        }
+
+        // If we found a space within our target width, use it
+        if (lastSpace != -1 && lastSpace < maxPos) {
+            return lastSpace + 1; // +1 to include the space in the previous line
+        }
+
+        // If we didn't find a space within width, try to find one soon after
+        if (lastSpace == -1 && maxPos < text.length()) {
+            // Look for the next space after our max position
+            while (pos < text.length()) {
+                char c = text.charAt(pos);
+                if (Character.isWhitespace(c)) {
+                    return pos + 1;
+                }
+                pos++;
+
+                // Don't search too far beyond our width limit
+                if (pos > maxPos + 20) {
+                    break;
+                }
+            }
+        }
+
+        // If no space found at all, return the max position (force a break)
+        if (maxPos < text.length()) {
+            return maxPos;
+        }
+
+        return -1;
+    }
+
+    // Helper method to find first space
+    private int findFirstSpace(String text) {
+        for (int i = 0; i < text.length(); i++) {
+            if (Character.isWhitespace(text.charAt(i))) {
+                return i;
+            }
+        }
+        return -1;
     }
\ No newline at end of file
