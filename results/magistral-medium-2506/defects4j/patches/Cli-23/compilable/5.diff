diff --git a/tmp/21b636a6-a718-491e-968d-79e5b9ec7659_buggy.java b/tmp/ccb4fc84-9522-4534-b95b-6dca2b4bf2d0_fixed.java
index 227a4ef..8407789 100644
--- a/tmp/21b636a6-a718-491e-968d-79e5b9ec7659_buggy.java
+++ b/tmp/ccb4fc84-9522-4534-b95b-6dca2b4bf2d0_fixed.java
@@ -1,48 +1,88 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space
     // characters
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
+    String remainingText = text.substring(pos).trim();
+    while (!remainingText.isEmpty())
     {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        String line = padding + remainingText;
+        pos = findWrapPos(line, width, padding.length());
 
         if (pos == -1)
         {
-                sb.append(text);
+            sb.append(line);
+            break;
+        }
+
+        // If we're not making progress (pos <= padding length),
+        // it means the remaining text is too long to fit even after padding
+        if (pos <= padding.length())
+        {
+            // Append as much as we can (width characters minus padding)
+            int availableWidth = width - padding.length();
+            if (availableWidth <= 0)
+            {
+                // If padding is longer than width, append padding and take width=0
+                sb.append(padding);
+                // Then take as much as we can (width characters at a time)
+                while (remainingText.length() > 0)
+                {
+                    int chunkSize = Math.min(width, remainingText.length());
+                    sb.append(remainingText.substring(0, chunkSize)).append(defaultNewLine);
+                    remainingText = remainingText.substring(chunkSize);
+                    if (!remainingText.isEmpty())
+                    {
+                        sb.append(padding);
+                    }
+                }
+                break;
+            }
+
+            // Take as much as fits in the remaining space
+            int takeLength = Math.min(availableWidth, remainingText.length());
+            sb.append(padding).append(remainingText.substring(0, takeLength)).append(defaultNewLine);
+            remainingText = remainingText.substring(takeLength).trim();
+            continue;
+        }
+
+        if (pos == padding.length() && remainingText.length() > width - padding.length())
+        {
+            // Special case where we have a very long word that can't be broken
+            int maxLength = width - padding.length();
+            if (maxLength > 0)
+            {
+                sb.append(padding);
+                // Split the remaining text into chunks of maxLength
+                int start = 0;
+                while (start < remainingText.length())
+                {
+                    int end = Math.min(start + maxLength, remainingText.length());
+                    sb.append(remainingText.substring(start, end));
+                    if (end < remainingText.length())
+                    {
+                        sb.append(defaultNewLine).append(padding);
+                    }
+                    start = end;
+                }
+                break;
+            }
+        }
+
+        sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);
+        remainingText = line.substring(pos).trim();
+    }
 
     return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
 }
\ No newline at end of file
