diff --git a/tmp/851ba425-ee2a-4c57-b8c4-bc8c3d144bc8_buggy.java b/tmp/dd6ff764-e5a8-49f2-950c-abcb2fc4397a_fixed.java
index 822447c..a6693a1 100644
--- a/tmp/851ba425-ee2a-4c57-b8c4-bc8c3d144bc8_buggy.java
+++ b/tmp/dd6ff764-e5a8-49f2-950c-abcb2fc4397a_fixed.java
@@ -1,37 +1,51 @@
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      *
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      *
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
         for (int i = 0; i < len; i++) {
             char c = str.charAt(i);
+            // Check if this is a high surrogate (start of a surrogate pair)
+            if (c >= '\uD800' && c <= '\uDBFF' && i + 1 < len) {
+                char nextChar = str.charAt(i + 1);
+                if (nextChar >= '\uDC00' && nextChar <= '\uDFFF') {
+                    // It's a surrogate pair - combine to get the real code point
+                    int codePoint = (c - '\uD800') * 0x400 + (nextChar - '\uDC00') + 0x10000;
+                    writer.write("&#");
+                    writer.write(Integer.toString(codePoint));
+                    writer.write(';');
+                    i++; // skip the next character as we've processed it
+                    continue;
+                }
+            }
+
             String entityName = this.entityName(c);
             if (entityName == null) {
                 if (c > 0x7F) {
                     writer.write("&#");
                     writer.write(Integer.toString(c, 10));
                     writer.write(';');
                 } else {
                     writer.write(c);
                 }
             } else {
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
             }
         }
     }
\ No newline at end of file
