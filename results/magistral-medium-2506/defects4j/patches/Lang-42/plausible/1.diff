diff --git a/tmp/28ddeec2-2acf-4ef5-abc3-494ca0fe6107_buggy.java b/tmp/56de40ce-47d6-4715-8918-205d895cc0b0_fixed.java
index 822447c..10833e4 100644
--- a/tmp/28ddeec2-2acf-4ef5-abc3-494ca0fe6107_buggy.java
+++ b/tmp/56de40ce-47d6-4715-8918-205d895cc0b0_fixed.java
@@ -1,37 +1,33 @@
-    /**
-     * <p>
-     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
-     * passed.
-     * </p>
-     * 
-     * @param writer
-     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
-     * @param str
-     *            The <code>String</code> to escape. Assumed to be a non-null value.
-     * @throws IOException
-     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
-     *             methods.
-     * 
-     * @see #escape(String)
-     * @see Writer
-     */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
         for (int i = 0; i < len; i++) {
             char c = str.charAt(i);
             String entityName = this.entityName(c);
             if (entityName == null) {
+                // Handle surrogate pairs (high Unicode codepoints)
+                if (Character.isHighSurrogate(c) && i + 1 < len) {
+                    char next = str.charAt(i + 1);
+                    if (Character.isLowSurrogate(next)) {
+                        // Combine surrogate pair into a single codepoint
+                        int codepoint = Character.toCodePoint(c, next);
+                        writer.write("&#");
+                        writer.write(Integer.toString(codepoint));
+                        writer.write(';');
+                        i++; // Skip the low surrogate since we've processed it
+                        continue;
+                    }
+                }
                 if (c > 0x7F) {
                     writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                    writer.write(Integer.toString(c));
                     writer.write(';');
                 } else {
                     writer.write(c);
                 }
             } else {
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
             }
         }
     }
\ No newline at end of file
