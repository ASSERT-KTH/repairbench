diff --git a/tmp/2c31fe75-d2ab-4673-9d3a-65b0a751a216_buggy.java b/tmp/f89e9a38-a631-412b-8ccf-7a0d8361a12a_fixed.java
index eea9e73..87ae3b4 100644
--- a/tmp/2c31fe75-d2ab-4673-9d3a-65b0a751a216_buggy.java
+++ b/tmp/f89e9a38-a631-412b-8ccf-7a0d8361a12a_fixed.java
@@ -1,41 +1,43 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
     public static boolean containsAny(CharSequence cs, char[] searchChars) {
         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
             return false;
         }
         int csLength = cs.length();
         int searchLength = searchChars.length;
         for (int i = 0; i < csLength; i++) {
             char ch = cs.charAt(i);
+            // Check if character is a high surrogate (start of supplementary character)
+            if (Character.isHighSurrogate(ch) && i + 1 < csLength) {
+                char lowSurrogate = cs.charAt(i + 1);
+                if (Character.isLowSurrogate(lowSurrogate)) {
+                    // This is a supplementary character (two chars)
+                    int codePoint = Character.toCodePoint(ch, lowSurrogate);
+                    for (int j = 0; j < searchLength; j++) {
+                        // Check if search char is also part of a surrogate pair
+                        if (Character.isHighSurrogate(searchChars[j]) && j + 1 < searchLength) {
+                            char searchLowSurrogate = searchChars[j + 1];
+                            if (Character.isLowSurrogate(searchLowSurrogate)) {
+                                int searchCodePoint = Character.toCodePoint(searchChars[j], searchLowSurrogate);
+                                if (codePoint == searchCodePoint) {
+                                    return true;
+                                }
+                                j++; // skip next low surrogate in search array
+                            }
+                        }
+                        // Compare as normal characters if not surrogate pair
+                        if (searchChars[j] == ch || searchChars[j] == lowSurrogate) {
+                            return true;
+                        }
+                    }
+                    i++; // skip next low surrogate in input string
+                    continue;
+                }
+            }
             for (int j = 0; j < searchLength; j++) {
                 if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
                     return true;
                 }
             }
         }
         return false;
     }
\ No newline at end of file
