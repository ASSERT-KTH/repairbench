diff --git a/tmp/7ce326c4-267e-4666-b9ab-51cdb525cba0_buggy.java b/tmp/b822bdc7-efa2-41c4-b3c1-e12385094352_fixed.java
index eea9e73..ba525f7 100644
--- a/tmp/7ce326c4-267e-4666-b9ab-51cdb525cba0_buggy.java
+++ b/tmp/b822bdc7-efa2-41c4-b3c1-e12385094352_fixed.java
@@ -1,41 +1,42 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
     int csLength = cs.length();
     int searchLength = searchChars.length;
     for (int i = 0; i < csLength; i++) {
         char ch = cs.charAt(i);
         for (int j = 0; j < searchLength; j++) {
             if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+                // For supplementary characters, we need to check if it's part of a surrogate pair
+                if (Character.isHighSurrogate(ch)) {
+                    // Check if we have a following low surrogate in the input
+                    if (i + 1 < csLength && Character.isLowSurrogate(cs.charAt(i + 1))) {
+                        // It's a supplementary character, so we need to check both chars together
+                        String csChar = cs.subSequence(i, i + 2).toString();
+                        for (int k = 0; k < searchLength; k++) {
+                            // If searchChars contains a surrogate pair at k and k+1 that matches
+                            if (k + 1 < searchLength &&
+                                Character.isHighSurrogate(searchChars[k]) &&
+                                Character.isLowSurrogate(searchChars[k + 1])) {
+                                String searchChar = new String(new char[]{searchChars[k], searchChars[k + 1]});
+                                if (csChar.equals(searchChar)) {
                                     return true;
                                 }
                             }
                         }
+                        i++; // skip the next char since we've processed this surrogate pair
+                    }
+                }
+                else if (Character.isLowSurrogate(ch)) {
+                    // Skip low surrogates that are processed with their high surrogates
+                    continue;
+                }
+                else {
+                    return true;
+                }
+            }
+        }
+    }
     return false;
 }
\ No newline at end of file
