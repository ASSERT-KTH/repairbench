diff --git a/tmp/9c19d66e-21f4-4a71-80d1-9e35a22ec22b_buggy.java b/tmp/9a238b85-0604-4b5a-92f0-51fc3d107aac_fixed.java
index eea9e73..23a0ec4 100644
--- a/tmp/9c19d66e-21f4-4a71-80d1-9e35a22ec22b_buggy.java
+++ b/tmp/9a238b85-0604-4b5a-92f0-51fc3d107aac_fixed.java
@@ -1,41 +1,62 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
     public static boolean containsAny(CharSequence cs, char[] searchChars) {
         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
             return false;
         }
         int csLength = cs.length();
         int searchLength = searchChars.length;
         for (int i = 0; i < csLength; i++) {
             char ch = cs.charAt(i);
+            // Check if this is the first of a surrogate pair
+            if (Character.isHighSurrogate(ch) && i < csLength - 1) {
+                char nextChar = cs.charAt(i + 1);
+                if (Character.isLowSurrogate(nextChar)) {
+                    // This is a surrogate pair representing a supplementary character
+                    // Convert to code point
+                    int codePoint = Character.toCodePoint(ch, nextChar);
+                    // Check against all search characters
                     for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+                        char searchChar = searchChars[j];
+                        if (Character.isHighSurrogate(searchChar) && j < searchLength - 1) {
+                            char nextSearchChar = searchChars[j + 1];
+                            if (Character.isLowSurrogate(nextSearchChar)) {
+                                int searchCodePoint = Character.toCodePoint(searchChar, nextSearchChar);
+                                if (codePoint == searchCodePoint) {
+                                    return true;
+                                }
+                                // Skip the next character as we've already processed it as part of the surrogate pair
+                                j++;
+                            }
+                        } else if (ch == searchChar) {
+                            return true;
+                        }
+                    }
+                    i++; // Skip the next character as we've already processed it as part of the surrogate pair
+                    continue;
+                }
+            }
+            // Regular character comparison
+            for (int j = 0; j < searchLength; j++) {
+                char searchChar = searchChars[j];
+                if (Character.isHighSurrogate(searchChar) && j < searchLength - 1) {
+                    char nextSearchChar = searchChars[j + 1];
+                    if (Character.isLowSurrogate(nextSearchChar)) {
+                        int searchCodePoint = Character.toCodePoint(searchChar, nextSearchChar);
+                        int csCodePoint;
+                        if (Character.isHighSurrogate(ch) && i < csLength - 1) {
+                            char nextCsChar = cs.charAt(i + 1);
+                            if (Character.isLowSurrogate(nextCsChar)) {
+                                csCodePoint = Character.toCodePoint(ch, nextCsChar);
+                                if (searchCodePoint == csCodePoint) {
+                                    return true;
+                                }
+                            }
+                        }
+                        j++;
+                    }
+                } else if (ch == searchChar) {
                     return true;
                 }
             }
         }
         return false;
     }
\ No newline at end of file
