diff --git a/tmp/f536fa1a-aec2-4ebf-a0c9-99d6646a8f9c_buggy.java b/tmp/6b4857ce-e404-4484-ba37-3aeadda43357_fixed.java
index eea9e73..9d96eb0 100644
--- a/tmp/f536fa1a-aec2-4ebf-a0c9-99d6646a8f9c_buggy.java
+++ b/tmp/6b4857ce-e404-4484-ba37-3aeadda43357_fixed.java
@@ -1,41 +1,44 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
     int csLength = cs.length();
     int searchLength = searchChars.length;
     for (int i = 0; i < csLength; i++) {
         char ch = cs.charAt(i);
+        // Check if this char and the next form a supplementary character
+        if (i + 1 < csLength && Character.isSurrogatePair(cs.charAt(i), cs.charAt(i + 1))) {
+            // This is part of a surrogate pair, so we'll handle it specially
+            int codePoint = Character.toCodePoint(cs.charAt(i), cs.charAt(i + 1));
             for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+                // Check if searchChars[j] is the first part of a surrogate pair
+                if (j + 1 < searchLength && Character.isSurrogatePair(searchChars[j], searchChars[j + 1])) {
+                    int searchCodePoint = Character.toCodePoint(searchChars[j], searchChars[j + 1]);
+                    if (codePoint == searchCodePoint) {
                         return true;
                     }
+                    j++; // skip the next char as we've processed it
+                } else {
+                    // Compare with single character
+                    if (searchChars[j] == ch || searchChars[j] == cs.charAt(i + 1)) {
+                        // Only return true if it's not part of a surrogate pair match
+                        // (though this case would have been caught above)
+                        continue; // we need to check both parts of the surrogate pair
+                    }
+                }
+            }
+            i++; // skip the next char as we've processed both parts of the surrogate pair
+        } else {
+            // Regular character (BMP character)
+            for (int j = 0; j < searchLength; j++) {
+                // Check if searchChars[j] is part of a surrogate pair
+                if (j + 1 < searchLength && Character.isSurrogatePair(searchChars[j], searchChars[j + 1])) {
+                    j++; // skip the surrogate pair as we can't match half of it
+                } else if (searchChars[j] == ch) {
+                    return true;
+                }
+            }
         }
     }
     return false;
 }
\ No newline at end of file
