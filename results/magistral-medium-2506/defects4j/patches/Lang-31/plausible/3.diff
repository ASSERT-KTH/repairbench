diff --git a/tmp/63aa9bb6-7de7-4940-8cba-1a5801ac7c87_buggy.java b/tmp/fea0e558-ad14-439e-beb9-8994e1d45db8_fixed.java
index eea9e73..c61d592 100644
--- a/tmp/63aa9bb6-7de7-4940-8cba-1a5801ac7c87_buggy.java
+++ b/tmp/fea0e558-ad14-439e-beb9-8994e1d45db8_fixed.java
@@ -1,41 +1,52 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
     public static boolean containsAny(CharSequence cs, char[] searchChars) {
         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
             return false;
         }
         int csLength = cs.length();
         int searchLength = searchChars.length;
         for (int i = 0; i < csLength; i++) {
             char ch = cs.charAt(i);
+            if (Character.isHighSurrogate(ch)) {
+                // handle supplementary characters: combine surrogate pair
+                if (i + 1 < csLength) {
+                    char nextChar = cs.charAt(i + 1);
+                    if (Character.isLowSurrogate(nextChar)) {
+                        // form the supplementary character
+                        String supplementaryChar = String.valueOf(new char[]{ch, nextChar});
+                        for (int j = 0; j < searchLength; j++) {
+                            // check if searchChars has a surrogate pair that matches
+                            if (j + 1 < searchLength &&
+                                Character.isHighSurrogate(searchChars[j]) &&
+                                Character.isLowSurrogate(searchChars[j + 1])) {
+                                String supplementaryCharInSearch = String.valueOf(new char[]{searchChars[j], searchChars[j + 1]});
+                                if (supplementaryChar.equals(supplementaryCharInSearch)) {
+                                    return true;
+                                }
+                            }
+                        }
+                        i++; // skip the low surrogate
+                        continue;
+                    }
+                }
+            }
+            // handle regular BMP characters
             for (int j = 0; j < searchLength; j++) {
                 if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
                     return true;
                 }
+                // check if current search char is part of a surrogate pair that matches
+                if (Character.isHighSurrogate(searchChars[j]) &&
+                    j + 1 < searchLength &&
+                    Character.isLowSurrogate(searchChars[j + 1])) {
+                    String supplementaryCharInSearch = String.valueOf(new char[]{searchChars[j], searchChars[j + 1]});
+                    if (supplementaryCharInSearch.length() == 2 &&
+                        ch == supplementaryCharInSearch.charAt(0) &&
+                        i + 1 < csLength &&
+                        cs.charAt(i + 1) == supplementaryCharInSearch.charAt(1)) {
+                        return true;
+                    }
+                }
             }
         }
         return false;
     }
\ No newline at end of file
