diff --git a/tmp/d1b92230-d3b6-4419-8011-5ac8595dcb45_buggy.java b/tmp/5e464608-19cb-40e4-a5a9-385ee2d84fba_fixed.java
index eea9e73..ea31cbf 100644
--- a/tmp/d1b92230-d3b6-4419-8011-5ac8595dcb45_buggy.java
+++ b/tmp/5e464608-19cb-40e4-a5a9-385ee2d84fba_fixed.java
@@ -1,41 +1,67 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
     int csLength = cs.length();
     int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
+    for (int i = 0; i < csLength; ) {
         char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+        for (int j = 0; j < searchLength; ) {
+            char searchChar = searchChars[j];
+            if (ch == searchChar) {
                 return true;
             }
+            // handle supplementary characters in the search array
+            if (Character.isHighSurrogate(searchChar) && j + 1 < searchLength) {
+                char nextChar = searchChars[j + 1];
+                if (Character.isLowSurrogate(nextChar)) {
+                    int codePoint = Character.toCodePoint(searchChar, nextChar);
+                    int currentCodePoint;
+                    if (Character.isHighSurrogate(ch) && i + 1 < csLength) {
+                        char nextCh = cs.charAt(i + 1);
+                        if (Character.isLowSurrogate(nextCh)) {
+                            currentCodePoint = Character.toCodePoint(ch, nextCh);
+                            if (currentCodePoint == codePoint) {
+                                return true;
+                            }
+                        }
+                    }
+                    j += 2; // skip low surrogate
+                    continue;
+                }
+            }
+            // handle supplementary characters in the CharSequence
+            if (Character.isHighSurrogate(ch) && i + 1 < csLength) {
+                char nextCh = cs.charAt(i + 1);
+                if (Character.isLowSurrogate(nextCh)) {
+                    int currentCodePoint = Character.toCodePoint(ch, nextCh);
+                    // check against BMP characters in search array
+                    for (int k = 0; k < searchLength; k++) {
+                        if (!Character.isHighSurrogate(searchChars[k])) {
+                            if (currentCodePoint == searchChars[k]) {
+                                return true;
+                            }
+                        }
+                    }
+                    i += 2; // skip low surrogate
+                    ch = '\0'; // prevent normal char check below
+                }
+            }
+            // normal case
+            if (ch != '\0' && ch == searchChars[j]) {
+                return true;
+            }
+            if (Character.isHighSurrogate(searchChar) && j + 1 < searchLength && Character.isLowSurrogate(searchChars[j + 1])) {
+                j += 2;
+            } else {
+                j++;
+            }
+        }
+        if (Character.isHighSurrogate(ch) && i + 1 < csLength && Character.isLowSurrogate(cs.charAt(i + 1))) {
+            i += 2;
+        } else {
+            i++;
         }
     }
     return false;
 }
\ No newline at end of file
