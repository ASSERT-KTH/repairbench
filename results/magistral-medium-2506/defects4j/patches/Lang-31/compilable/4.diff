diff --git a/tmp/5812e434-2c78-4ff2-8048-efb21c9d66aa_buggy.java b/tmp/3294b0c4-299d-4072-8a1a-56f7959c89b8_fixed.java
index eea9e73..d57379b 100644
--- a/tmp/5812e434-2c78-4ff2-8048-efb21c9d66aa_buggy.java
+++ b/tmp/3294b0c4-299d-4072-8a1a-56f7959c89b8_fixed.java
@@ -1,41 +1,48 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
     int csLength = cs.length();
     int searchLength = searchChars.length;
     for (int i = 0; i < csLength; i++) {
         char ch = cs.charAt(i);
         for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+            if (ch == searchChars[j]) {
+                // If both are in BMP, we have a match
                 return true;
             }
+            // Check if we're dealing with supplementary characters
+            if (Character.isHighSurrogate(ch)) {
+                // Get the full code point for the current character
+                if (i + 1 < csLength) {
+                    char nextCh = cs.charAt(i + 1);
+                    if (Character.isLowSurrogate(nextCh)) {
+                        int codePoint = Character.toCodePoint(ch, nextCh);
+                        // Check if the search character is also a surrogate pair
+                        if (j + 1 < searchLength &&
+                            Character.isHighSurrogate(searchChars[j]) &&
+                            Character.isLowSurrogate(searchChars[j + 1])) {
+                            int searchCodePoint = Character.toCodePoint(searchChars[j], searchChars[j + 1]);
+                            if (codePoint == searchCodePoint) {
+                                return true;
+                            }
+                        }
+                    }
+                }
+            } else if (Character.isHighSurrogate(searchChars[j])) {
+                // Check if the search character is a surrogate pair
+                if (j + 1 < searchLength && Character.isLowSurrogate(searchChars[j + 1])) {
+                    int searchCodePoint = Character.toCodePoint(searchChars[j], searchChars[j + 1]);
+                    // Check if the current character is part of a surrogate pair that matches
+                    if (i + 1 < csLength && Character.isLowSurrogate(cs.charAt(i + 1))) {
+                        int codePoint = Character.toCodePoint(ch, cs.charAt(i + 1));
+                        if (codePoint == searchCodePoint) {
+                            return true;
+                        }
+                    }
+                }
+            }
         }
     }
     return false;
 }
\ No newline at end of file
