diff --git a/tmp/c4cb8c02-ba4c-4a78-b5b3-5ddb5ec58adc_buggy.java b/tmp/8bb198ca-175d-4396-b7ad-1f47e397b990_fixed.java
index 032fa8e..80cec58 100644
--- a/tmp/c4cb8c02-ba4c-4a78-b5b3-5ddb5ec58adc_buggy.java
+++ b/tmp/8bb198ca-175d-4396-b7ad-1f47e397b990_fixed.java
@@ -1,108 +1,141 @@
-    /** Evaluate the impact of the proposed step on the event handler.
-     * @param interpolator step interpolator for the proposed step
-     * @return true if the event handler triggers an event before
-     * the end of the proposed step (this implies the step should be
-     * rejected)
-     * @exception DerivativeException if the interpolator fails to
-     * compute the switching function somewhere within the step
-     * @exception EventException if the switching function
-     * cannot be evaluated
-     * @exception ConvergenceException if an event cannot be located
-     */
     public boolean evaluateStep(final StepInterpolator interpolator)
         throws DerivativeException, EventException, ConvergenceException {
 
         try {
 
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
                 if (g0Positive ^ (gb >= 0)) {
                     // there is a sign change: an event is expected during this step
 
-                        // this is a corner case:
-                        // - there was an event near ta,
-                        // - there is another event between ta and tb
-                        // - when ta was computed, convergence was reached on the "wrong side" of the interval
-                        // this implies that the real sign of ga is the same as gb, so we need to slightly
-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain
-                        // about bracketing
-                            // this should never happen
+                    // handle the corner case where events are very close
+                    if (Math.abs(ga) < convergence && Math.abs(gb) < convergence) {
+                        // both endpoints are very close to zero - this might indicate a double event
+                        // we'll take the midpoint as the event time
+                        pendingEventTime = 0.5 * (ta + tb);
+                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+                            // we were already waiting for this event which was
+                            // found during a previous call for a step that was
+                            // rejected, this step must now be accepted since it
+                            // properly ends exactly at the event occurrence
+                            return false;
+                        }
+                        pendingEvent = true;
+                        return true;
+                    }
 
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
                                 throw new FunctionEvaluationException(e, t);
                             }
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+
+                    // ensure we have proper bracketing
+                    if (Math.signum(ga) == Math.signum(gb)) {
+                        // if signs are the same, we might have missed the zero crossing
+                        // try with points shifted by convergence to ensure different signs
+                        double shiftedTa = ta < tb ? ta + convergence : ta - convergence;
+                        double shiftedTb = ta < tb ? tb - convergence : tb + convergence;
+
+                        // but we must ensure the shifted points are within the interval
+                        shiftedTa = Math.min(Math.max(shiftedTa, ta < tb ? ta : tb),
+                                           ta < tb ? tb : ta);
+                        shiftedTb = shiftedTa; // just take a point near the original endpoints
+
+                        // evaluate at shifted points
+                        interpolator.setInterpolatedTime(shiftedTa);
+                        double shiftedGa = handler.g(shiftedTa, interpolator.getInterpolatedState());
+                        interpolator.setInterpolatedTime(shiftedTb);
+                        double shiftedGb = handler.g(shiftedTb, interpolator.getInterpolatedState());
+
+                        // if we now have opposite signs, use these points instead
+                        if (Math.signum(shiftedGa) != Math.signum(shiftedGb)) {
+                            ta = shiftedTa;
+                            tb = shiftedTb;
+                            ga = shiftedGa;
+                            gb = shiftedGb;
+                        } else {
+                            // this is a problematic case where we cannot find a bracketing interval
+                            // we'll treat it as if there was an event at the midpoint
+                            pendingEventTime = 0.5 * (ta + tb);
+                            if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+                                return false;
+                            }
+                            pendingEvent = true;
+                            return true;
+                        }
+                    }
+
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
                         ga = gb;
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                             // we were already waiting for this event which was
                             // found during a previous call for a step that was
                             // rejected, this step must now be accepted since it
                             // properly ends exactly at the event occurrence
                             return false;
                         }
                         // either we were not waiting for the event or it has
                         // moved in such a way the step cannot be accepted
                         pendingEvent = true;
                         return true;
                     }
 
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
             final Throwable cause = e.getCause();
             if ((cause != null) && (cause instanceof DerivativeException)) {
                 throw (DerivativeException) cause;
             } else if ((cause != null) && (cause instanceof EventException)) {
                 throw (EventException) cause;
             }
             throw new EventException(e);
         }
 
     }
\ No newline at end of file
