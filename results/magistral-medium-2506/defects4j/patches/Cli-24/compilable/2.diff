diff --git a/tmp/3b12d8a8-4912-42cc-b0d6-999ccac30b31_buggy.java b/tmp/ead5bbb2-6b79-40ba-ae31-c38e63a191a2_fixed.java
index 229b3e7..8ee6be1 100644
--- a/tmp/3b12d8a8-4912-42cc-b0d6-999ccac30b31_buggy.java
+++ b/tmp/ead5bbb2-6b79-40ba-ae31-c38e63a191a2_fixed.java
@@ -1,55 +1,69 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
+        // First handle the case where all text fits in one line without wrapping
+        if (text.length() <= width) {
+            sb.append(rtrim(text));
+            return sb;
+        }
+
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         if (nextLineTabStop >= width)
         {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
+            // If padding would leave no room for content, we'll start at position 0
+            nextLineTabStop = 0;
         }
 
-        // all following lines must be padded with nextLineTabStop space 
+        // All following lines must be padded with nextLineTabStop space
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            String remainingText = text.substring(pos).trim();
+            String paddedText = padding + remainingText;
+
+            if (paddedText.length() <= width) {
+                sb.append(paddedText);
+                return sb;
+            }
+
+            pos = findWrapPos(paddedText, width, 0);
 
             if (pos == -1)
             {
-                sb.append(text);
-
+                sb.append(paddedText);
                 return sb;
             }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+            // If we're in a situation where padding takes most of the space
+            // and we're not making progress, just allow more text to be included
+            if (paddedText.length() > width && pos <= padding.length())
             {
-                pos = width;
+                pos = Math.min(width, paddedText.length());
             }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            sb.append(rtrim(paddedText.substring(0, pos))).append(defaultNewLine);
+            text = remainingText; // Continue with the remaining text (without padding yet)
         }
     }
\ No newline at end of file
