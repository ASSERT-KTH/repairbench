diff --git a/tmp/afd09ae6-c695-4ead-9d86-d8b498437031_buggy.java b/tmp/582666c0-a2e5-4f8d-8d20-2e28af0b9d7e_fixed.java
index 229b3e7..1235733 100644
--- a/tmp/afd09ae6-c695-4ead-9d86-d8b498437031_buggy.java
+++ b/tmp/582666c0-a2e5-4f8d-8d20-2e28af0b9d7e_fixed.java
@@ -1,55 +1,68 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
+    // Modified condition: check if there's actually room for text after padding
+    if (nextLineTabStop >= width && width > 0)  // added width > 0 check
     {
         // stops infinite loop happening
         throw new IllegalStateException("Total width is less than the width of the argument and indent " +
                                         "- no room for the description");
     }
 
     // all following lines must be padded with nextLineTabStop space
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
-            text = padding + text.substring(pos).trim();
+        String remainingText = text.substring(pos).trim();
+        text = padding + remainingText;
+
+        // If the remaining text is empty, break out of the loop
+        if (remainingText.isEmpty()) {
+            break;
+        }
+
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
+        // Ensure we don't get stuck when width <= nextLineTabStop
+        if (nextLineTabStop < width && pos == nextLineTabStop && text.length() > width) {
             pos = width;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+
+        // If we've consumed all the text but still in loop, break
+        if (pos >= text.length()) {
+            break;
         }
     }
+
+    return sb;
+}
\ No newline at end of file
