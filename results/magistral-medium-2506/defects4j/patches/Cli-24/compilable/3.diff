diff --git a/tmp/26addc3f-0cdf-40d0-b714-715c1ec97b2c_buggy.java b/tmp/e4583aee-fbc4-4b18-ae02-f0b2dde635af_fixed.java
index 229b3e7..4c1c9c2 100644
--- a/tmp/26addc3f-0cdf-40d0-b714-715c1ec97b2c_buggy.java
+++ b/tmp/e4583aee-fbc4-4b18-ae02-f0b2dde635af_fixed.java
@@ -1,55 +1,55 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     if (nextLineTabStop >= width)
     {
         // stops infinite loop happening
         throw new IllegalStateException("Total width is less than the width of the argument and indent " +
                                         "- no room for the description");
     }
 
     // all following lines must be padded with nextLineTabStop space
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        // Calculate available width for content after accounting for padding
+        int availableWidth = width - nextLineTabStop;
+        pos = findWrapPos(text, width, nextLineTabStop) + nextLineTabStop;
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+        // If we're about to split at a position that's just the padding, force a split at width
+        if ( (text.length() > width) && (pos == nextLineTabStop) )  // Changed from pos == nextLineTabStop - 1
         {
-                pos = width;
+            pos = width + nextLineTabStop;  // This might need adjustment
+        }
+        else if (pos <= nextLineTabStop) {
+            // Make sure we don't get stuck in an infinite loop
+            pos = width + nextLineTabStop;  // This will effectively take the first width characters after padding
+        }
+
+        // Ensure pos is within bounds
+        if (pos > text.length()) {
+            pos = text.length();
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
