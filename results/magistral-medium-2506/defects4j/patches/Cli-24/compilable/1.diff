diff --git a/tmp/1d3a387c-c81a-4104-93cf-0066ef52f2ff_buggy.java b/tmp/5c669199-6d97-45ab-9fe1-6b05b9ac7d74_fixed.java
index 229b3e7..ef91b6a 100644
--- a/tmp/1d3a387c-c81a-4104-93cf-0066ef52f2ff_buggy.java
+++ b/tmp/5c669199-6d97-45ab-9fe1-6b05b9ac7d74_fixed.java
@@ -1,55 +1,45 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
+    // Modified check to account for cases where nextLineTabStop would make remaining width < 1
+    if (nextLineTabStop >= width - 1)
     {
         // stops infinite loop happening
         throw new IllegalStateException("Total width is less than the width of the argument and indent " +
                                         "- no room for the description");
     }
 
     // all following lines must be padded with nextLineTabStop space
     // characters
     final String padding = createPadding(nextLineTabStop);
+    int remainingWidth = width - nextLineTabStop;
 
     while (true)
     {
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        pos = findWrapPos(text, width, nextLineTabStop);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+        if ( (text.length() > width) && (pos == nextLineTabStop + remainingWidth - 1) )
         {
             pos = width;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
