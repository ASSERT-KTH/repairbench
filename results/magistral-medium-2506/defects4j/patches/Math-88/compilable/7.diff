diff --git a/tmp/0fa751dd-fab5-4e3b-872e-eca102dfa7d9_buggy.java b/tmp/a8a9fb5c-1d9c-4077-bba8-e29c1ed06466_fixed.java
index 544303b..96716a8 100644
--- a/tmp/0fa751dd-fab5-4e3b-872e-eca102dfa7d9_buggy.java
+++ b/tmp/a8a9fb5c-1d9c-4077-bba8-e29c1ed06466_fixed.java
@@ -1,29 +1,38 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
         Integer basicRow =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
         for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+            int var_i = getNumObjectiveFunctions() + i;
+            basicRow = getBasicRow(var_i);
             if (basicRow != null) {
+                // Variable i is basic
+                coefficients[i] = getEntry(basicRow, getRhsOffset()) -
+                                 (restrictToNonNegative ? 0 : mostNegative);
+
+                // Check if this variable should be set to 0 due to non-uniqueness
+                boolean shouldSetToZero = false;
                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                     if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
+                        shouldSetToZero = true;
+                        break;
+                    }
                 }
+                if (shouldSetToZero) {
+                    coefficients[i] = 0;
                 }
+            } else {
+                // Variable i is non-basic
+                coefficients[i] = 0;
             }
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
