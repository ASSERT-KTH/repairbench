diff --git a/tmp/d561e2b9-3ba8-4cf3-ab74-abd9513aab7a_buggy.java b/tmp/8796c2bd-910e-4d53-8f84-dd7de076a4d1_fixed.java
index 544303b..41df63f 100644
--- a/tmp/d561e2b9-3ba8-4cf3-ab74-abd9513aab7a_buggy.java
+++ b/tmp/8796c2bd-910e-4d53-8f84-dd7de076a4d1_fixed.java
@@ -1,29 +1,35 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
         Integer basicRow =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
         for (int i = 0; i < coefficients.length; i++) {
             basicRow = getBasicRow(getNumObjectiveFunctions() + i);
             // if multiple variables can take a given value
             // then we choose the first and set the rest equal to 0
             coefficients[i] =
                 (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                 (restrictToNonNegative ? 0 : mostNegative);
             if (basicRow != null) {
                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                     if (tableau.getEntry(basicRow, j) == 1) {
                         coefficients[i] = 0;
                     }
                 }
             }
         }
+        // Ensure non-negativity constraints are respected
+        for (int i = 0; i < coefficients.length; i++) {
+            if (coefficients[i] < 0) {
+                coefficients[i] = 0;
+            }
+        }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
