diff --git a/tmp/7ffd73c3-90bf-46d7-ab6b-8819623f8c63_buggy.java b/tmp/5add7f1d-a617-44ae-80f6-b4577df4c5b2_fixed.java
index a7d0787..d32550c 100644
--- a/tmp/7ffd73c3-90bf-46d7-ab6b-8819623f8c63_buggy.java
+++ b/tmp/5add7f1d-a617-44ae-80f6-b4577df4c5b2_fixed.java
@@ -1,54 +1,102 @@
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
+        else if (clazz == Integer.class || clazz == int.class)
+        {
+            try {
+                return (T) Integer.valueOf(str);
+            } catch (NumberFormatException e) {
+                throw new ParseException("Unable to parse integer: " + str);
+            }
+        }
+        else if (clazz == Long.class || clazz == long.class)
+        {
+            try {
+                return (T) Long.valueOf(str);
+            } catch (NumberFormatException e) {
+                throw new ParseException("Unable to parse long: " + str);
+            }
+        }
+        else if (clazz == Double.class || clazz == double.class)
+        {
+            try {
+                return (T) Double.valueOf(str);
+            } catch (NumberFormatException e) {
+                throw new ParseException("Unable to parse double: " + str);
+            }
+        }
+        else if (clazz == Float.class || clazz == float.class)
+        {
+            try {
+                return (T) Float.valueOf(str);
+            } catch (NumberFormatException e) {
+                throw new ParseException("Unable to parse float: " + str);
+            }
+        }
+        else if (clazz == Short.class || clazz == short.class)
+        {
+            try {
+                return (T) Short.valueOf(str);
+            } catch (NumberFormatException e) {
+                throw new ParseException("Unable to parse short: " + str);
+            }
+        }
+        else if (clazz == Byte.class || clazz == byte.class)
+        {
+            try {
+                return (T) Byte.valueOf(str);
+            } catch (NumberFormatException e) {
+                throw new ParseException("Unable to parse byte: " + str);
+            }
+        }
         else
         {
-            return null;
+            throw new ParseException("Unable to parse: " + str + " to type: " + clazz.getName());
         }
     }
\ No newline at end of file
