diff --git a/tmp/4f9d4d7b-2dae-4068-87dc-9291836cbf8b_buggy.java b/tmp/11d2634e-9895-4608-b279-b5c5b95dfa72_fixed.java
index a7d0787..755a113 100644
--- a/tmp/4f9d4d7b-2dae-4068-87dc-9291836cbf8b_buggy.java
+++ b/tmp/11d2634e-9895-4608-b279-b5c5b95dfa72_fixed.java
@@ -1,54 +1,63 @@
 /**
  * Returns the <code>Object</code> of type <code>clazz</code>
  * with the value of <code>str</code>.
  *
  * @param str the command line value
  * @param clazz the type of argument
  * @return The instance of <code>clazz</code> initialised with
  * the value of <code>str</code>.
  * @throws ParseException if the value creation for the given class failed
  */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
     if (PatternOptionBuilder.STRING_VALUE == clazz)
     {
         return (T) str;
     }
     else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
     {
         return (T) createObject(str);
     }
     else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
     {
         return (T) createNumber(str);
     }
     else if (PatternOptionBuilder.DATE_VALUE == clazz)
     {
         return (T) createDate(str);
     }
     else if (PatternOptionBuilder.CLASS_VALUE == clazz)
     {
         return (T) createClass(str);
     }
     else if (PatternOptionBuilder.FILE_VALUE == clazz)
     {
         return (T) createFile(str);
     }
     else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
     {
         return (T) openFile(str);
     }
     else if (PatternOptionBuilder.FILES_VALUE == clazz)
     {
         return (T) createFiles(str);
     }
     else if (PatternOptionBuilder.URL_VALUE == clazz)
     {
         return (T) createURL(str);
     }
     else
     {
+        // Handle Integer.class and other standard types
+        try {
+            if (clazz == Integer.class) {
+                return (T) Integer.valueOf(str);
+            }
+            // Add other standard type handlers here if needed
+        } catch (NumberFormatException e) {
+            throw new ParseException("Unable to parse " + str + " as " + clazz.getName());
+        }
         return null;
     }
 }
\ No newline at end of file
