diff --git a/tmp/673f4d2c-965f-4b40-a49e-a27c1bbb5574_buggy.java b/tmp/23eedb81-d071-4334-ae7a-9ec4fbbb9baf_fixed.java
index a7d0787..0ece782 100644
--- a/tmp/673f4d2c-965f-4b40-a49e-a27c1bbb5574_buggy.java
+++ b/tmp/23eedb81-d071-4334-ae7a-9ec4fbbb9baf_fixed.java
@@ -1,54 +1,63 @@
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
         else
         {
-            return null;
+            // Handle primitive and wrapper types, including Integer
+            if (clazz == Integer.class || clazz == int.class) {
+                try {
+                    return (T) Integer.valueOf(str);
+                } catch (NumberFormatException e) {
+                    throw new ParseException("Unable to parse '" + str + "' as " + clazz.getName());
+                }
+            }
+            // Add similar handling for other primitive/wrapper types as needed
+            throw new ParseException("Unable to create value of type " + clazz.getName() + " from '" + str + "'");
         }
     }
\ No newline at end of file
