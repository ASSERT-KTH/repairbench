diff --git a/tmp/4130df1e-ca7a-41f1-ad1e-e1c373956f9b_buggy.java b/tmp/6a2ce734-5f84-4f04-92e7-7cd6cec118f7_fixed.java
index b529d33..7de9c5f 100644
--- a/tmp/4130df1e-ca7a-41f1-ad1e-e1c373956f9b_buggy.java
+++ b/tmp/6a2ce734-5f84-4f04-92e7-7cd6cec118f7_fixed.java
@@ -1,29 +1,38 @@
     /**
      * Used internally by the Soundex algorithm.
      *
      * Consonants from the same code group separated by W or H are treated as one.
      *
      * @param str
      *                  the cleaned working string to encode (in upper case).
      * @param index
      *                  the character position to encode
      * @return Mapping code for a particular character
      * @throws IllegalArgumentException
      *                  if the character is not mapped
      */
     private char getMappingCode(final String str, final int index) {
         // map() throws IllegalArgumentException
         final char mappedChar = this.map(str.charAt(index));
         // HW rule check
-        if (index > 1 && mappedChar != '0') {
+        if (index > 0 && mappedChar != '0') {
+            // Check if previous character is H or W
+            if (index > 0) {
                 final char hwChar = str.charAt(index - 1);
                 if ('H' == hwChar || 'W' == hwChar) {
+                    // Get the character before the H/W if it exists
+                    if (index > 1) {
                         final char preHWChar = str.charAt(index - 2);
                         final char firstCode = this.map(preHWChar);
                         if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
                             return 0;
                         }
                     }
+                    // If there's no character before H/W (index == 1), or if the above condition wasn't met,
+                    // we still need to check if the current character and the one after H/W are the same
+                    // But since we're only looking at the character before, this might need more consideration
+                }
+            }
         }
         return mappedChar;
     }
\ No newline at end of file
