diff --git a/tmp/51ea2b63-34bb-4265-a55c-b8f993b8ac15_buggy.java b/tmp/219f0ba0-9416-4777-92ed-76d61c9f9179_fixed.java
index c18eb8b..078e55d 100644
--- a/tmp/51ea2b63-34bb-4265-a55c-b8f993b8ac15_buggy.java
+++ b/tmp/219f0ba0-9416-4777-92ed-76d61c9f9179_fixed.java
@@ -1,30 +1,17 @@
-    /**
-     * <p>Compares two CharSequences, returning {@code true} if they represent
-     * equal sequences of characters.</p>
-     *
-     * <p>{@code null}s are handled without exceptions. Two {@code null}
-     * references are considered to be equal. The comparison is case sensitive.</p>
-     *
-     * <pre>
-     * StringUtils.equals(null, null)   = true
-     * StringUtils.equals(null, "abc")  = false
-     * StringUtils.equals("abc", null)  = false
-     * StringUtils.equals("abc", "abc") = true
-     * StringUtils.equals("abc", "ABC") = false
-     * </pre>
-     *
-     * @see java.lang.CharSequence#equals(Object)
-     * @param cs1  the first CharSequence, may be {@code null}
-     * @param cs2  the second CharSequence, may be {@code null}
-     * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}
-     * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)
-     */
     public static boolean equals(CharSequence cs1, CharSequence cs2) {
         if (cs1 == cs2) {
             return true;
         }
         if (cs1 == null || cs2 == null) {
             return false;
         }
-            return cs1.equals(cs2);
+        if (cs1.length() != cs2.length()) {
+            return false;
+        }
+        for (int i = 0; i < cs1.length(); i++) {
+            if (cs1.charAt(i) != cs2.charAt(i)) {
+                return false;
+            }
+        }
+        return true;
     }
\ No newline at end of file
