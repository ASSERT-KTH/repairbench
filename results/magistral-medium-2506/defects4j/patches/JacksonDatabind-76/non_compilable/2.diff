diff --git a/tmp/ed34903e-212a-4ec7-a80b-d9b36ea9ba14_buggy.java b/tmp/6ff3bd8c-0075-4e99-9b4f-dc87984235d0_fixed.java
index 3effef5..810fcd6 100644
--- a/tmp/ed34903e-212a-4ec7-a80b-d9b36ea9ba14_buggy.java
+++ b/tmp/6ff3bd8c-0075-4e99-9b4f-dc87984235d0_fixed.java
@@ -1,73 +1,93 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
     DeserializationContext ctxt)
     throws IOException, JsonProcessingException
 {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
+    boolean beanCreated = false;
+    Object bean = null;
+
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
         p.nextToken(); // to point to value
         // creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
             if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
                 t = p.nextToken();
-                    Object bean;
                 try {
                     bean = creator.build(ctxt, buffer);
-                    } catch (Exception e) {
-                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
-                    }
+                    beanCreated = true;
+                    // After building the bean, we need to process remaining properties
                     while (t == JsonToken.FIELD_NAME) {
+                        String remainingPropName = p.getCurrentName();
                         p.nextToken();
+                        // Check if it's a buffered property
+                        SettableBeanProperty prop = _beanProperties.find(remainingPropName);
+                        if (prop != null) {
+                            tokens.writeFieldName(remainingPropName);
                             tokens.copyCurrentStructure(p);
+                            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
+                        } else if (buffer.hasProperty(remainingPropName)) {
+                            // skip already processed properties
+                        } else {
+                            tokens.writeFieldName(remainingPropName);
+                            tokens.copyCurrentStructure(p);
+                            if (_anySetter != null) {
+                                buffer.bufferAnyProperty(_anySetter, remainingPropName,
+                                    _anySetter.deserialize(p, ctxt));
+                            }
+                        }
                         t = p.nextToken();
                     }
                     tokens.writeEndObject();
                     if (bean.getClass() != _beanType.getRawClass()) {
                         ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                         return null;
                     }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+                    break; // exit main loop since we've processed all properties
+                } catch (Exception e) {
+                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+                    continue;
+                }
             }
             continue;
         }
         // Object Id property?
         if (buffer.readIdProperty(propName)) {
             continue;
         }
         // regular property? needs buffering
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
             buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
             continue;
         }
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
         tokens.writeFieldName(propName);
         tokens.copyCurrentStructure(p);
         // "any property"?
         if (_anySetter != null) {
             buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
         }
     }
 
-        // We hit END_OBJECT, so:
-        Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
+    if (!beanCreated) {
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }
+    }
+
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
