diff --git a/tmp/819e6f4c-1ea2-49b5-b4fc-c30d9f5cb5c9_buggy.java b/tmp/7b4f5336-44e9-4a77-aa45-166a8142f2a2_fixed.java
index 3effef5..acfc470 100644
--- a/tmp/819e6f4c-1ea2-49b5-b4fc-c30d9f5cb5c9_buggy.java
+++ b/tmp/7b4f5336-44e9-4a77-aa45-166a8142f2a2_fixed.java
@@ -1,73 +1,97 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
     		DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
 
         JsonToken t = p.getCurrentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
                 if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
                     t = p.nextToken();
                     Object bean;
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                         continue;
                     }
                     while (t == JsonToken.FIELD_NAME) {
+                        String nextPropName = p.getCurrentName();
                         p.nextToken();
+                        // Check if this property belongs to the unwrapped object
+                        if (buffer.hasParameter(creatorProp)) {
+                            // If we've already built the bean, any remaining properties should go to the unwrapped object
+                            SettableBeanProperty prop = _beanProperties.find(nextPropName);
+                            if (prop != null) {
+                                // Regular property that needs to be set on the bean (not creator property)
+                                try {
+                                    prop.deserializeAndSet(p, ctxt, bean);
+                                } catch (Exception e) {
+                                    wrapAndThrow(e, bean.getClass(), nextPropName, ctxt);
+                                }
+                            } else if (_anySetter != null) {
+                                _anySetter.deserializeAndSet(p, ctxt, bean, nextPropName);
+                            } else {
+                                tokens.writeFieldName(nextPropName);
                                 tokens.copyCurrentStructure(p);
+                            }
                             t = p.nextToken();
+                        } else {
+                            tokens.writeFieldName(nextPropName);
+                            tokens.copyCurrentStructure(p);
+                            t = p.nextToken();
+                        }
                     }
                     tokens.writeEndObject();
                     if (bean.getClass() != _beanType.getRawClass()) {
                         ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                         return null;
                     }
                     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
                 }
                 continue;
             }
             // Object Id property?
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
             // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                 continue;
             }
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
             tokens.writeFieldName(propName);
             tokens.copyCurrentStructure(p);
             // "any property"?
             if (_anySetter != null) {
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
             }
         }
 
         // We hit END_OBJECT, so:
         Object bean;
         // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }
+        // Need to process all remaining properties for unwrapped case
+        p.nextToken(); // move past END_OBJECT if not already
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
\ No newline at end of file
