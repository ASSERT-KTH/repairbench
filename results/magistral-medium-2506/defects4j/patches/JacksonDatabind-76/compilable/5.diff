diff --git a/tmp/71022108-21a7-4d9c-8b8f-7858b1d10d6e_buggy.java b/tmp/f12a14fd-e06d-445e-b099-82b6509132fb_fixed.java
index 3effef5..0620fc7 100644
--- a/tmp/71022108-21a7-4d9c-8b8f-7858b1d10d6e_buggy.java
+++ b/tmp/f12a14fd-e06d-445e-b099-82b6509132fb_fixed.java
@@ -1,73 +1,113 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
         DeserializationContext ctxt)
     throws IOException, JsonProcessingException
 {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
+    // Flag to indicate whether we've built the bean but still have properties to parse
+    Object bean = null;
     JsonToken t = p.getCurrentToken();
-        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
+
+    while (true) {
+        if (t != JsonToken.FIELD_NAME) {
+            break;
+        }
+
         String propName = p.getCurrentName();
         p.nextToken(); // to point to value
         // creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
             if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
                 t = p.nextToken();
-                    Object bean;
+                boolean success = false;
                 try {
+                    if (bean == null) {
                         bean = creator.build(ctxt, buffer);
+                    }
+                    success = true;
                 } catch (Exception e) {
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+                    // If we failed to build the bean, keep trying to process properties
                     continue;
                 }
-                    while (t == JsonToken.FIELD_NAME) {
+
+                // If we successfully built the bean, start collecting remaining properties
+                if (success) {
+                    if (t == JsonToken.FIELD_NAME) {
+                        // Copy remaining properties to the token buffer
+                        do {
+                            tokens.writeFieldName(p.getCurrentName());
                             p.nextToken();
                             tokens.copyCurrentStructure(p);
                             t = p.nextToken();
+                        } while (t == JsonToken.FIELD_NAME);
                     }
-                    tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
-                        return null;
+                    break; // Exit loop after processing creator properties, continue with remaining logic
                 }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
             }
+            t = p.nextToken(); // Move to next token if we didn't build the bean
             continue;
         }
         // Object Id property?
         if (buffer.readIdProperty(propName)) {
+            t = p.nextToken();
             continue;
         }
         // regular property? needs buffering
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
+            // For unwrapped properties, write to token buffer if bean is not yet created
+            if (bean == null || !prop.getClass().getSimpleName().contains("UnwrappedPropertyHandler")) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
+            } else {
+                tokens.writeFieldName(propName);
+                tokens.copyCurrentStructure(p);
+            }
+            t = p.nextToken();
             continue;
         }
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
+            t = p.nextToken();
             continue;
         }
         tokens.writeFieldName(propName);
         tokens.copyCurrentStructure(p);
         // "any property"?
         if (_anySetter != null) {
             buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
         }
+        t = p.nextToken();
     }
 
-        // We hit END_OBJECT, so:
-        Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
+    // If we didn't build the bean yet, do it now
+    if (bean == null) {
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }
+    }
+
+    // Handle remaining tokens
+    while (t == JsonToken.FIELD_NAME) {
+        // Add remaining fields to tokens buffer
+        tokens.writeFieldName(p.getCurrentName());
+        p.nextToken();
+        tokens.copyCurrentStructure(p);
+        t = p.nextToken();
+    }
+    tokens.writeEndObject();
+
+    if (bean.getClass() != _beanType.getRawClass()) {
+        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
+        return null;
+    }
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
