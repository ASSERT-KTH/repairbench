diff --git a/tmp/45cc66ab-24a8-4968-9ddf-d17b0fa9405e_buggy.java b/tmp/b8370f3e-4212-4b7e-b4e8-67b332faa99c_fixed.java
index f9a9b5b..c5dee8c 100644
--- a/tmp/45cc66ab-24a8-4968-9ddf-d17b0fa9405e_buggy.java
+++ b/tmp/b8370f3e-4212-4b7e-b4e8-67b332faa99c_fixed.java
@@ -1,30 +1,70 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        // Handle special cases for inner classes and abstract classes
+        if (settings.getTypeToMock().isMemberClass() && !Modifier.isStatic(settings.getTypeToMock().getModifiers())) {
+            // For non-static inner classes, we need to provide the outer instance
+            Object outerInstance = settings.getOuterInstance();
+            if (outerInstance == null) {
+                throw new MockitoException("Unable to create mock instance of type '" +
+                    settings.getTypeToMock().getSimpleName() +
+                    "' because it's an inner class and outer instance is not provided");
+            }
+            mockInstance = classInstantiator.instantiate(mockedProxyType, outerInstance);
+        } else if (settings.requiresConstructor()) {
+            // Handle constructor initialization for concrete classes and abstract classes with constructors
+            Object[] constructorArgs = settings.getConstructorArgs();
+            if (settings.getTypeToMock().isMemberClass() && !Modifier.isStatic(settings.getTypeToMock().getModifiers())) {
+                // Add outer instance as first argument for member classes
+                Object outerInstance = settings.getOuterInstance();
+                if (outerInstance == null) {
+                    throw new MockitoException("Unable to create mock instance of type '" +
+                        settings.getTypeToMock().getSimpleName() +
+                        "' because outer instance is required but not provided");
+                }
+                Object[] argsWithOuter = new Object[constructorArgs != null ? constructorArgs.length + 1 : 1];
+                argsWithOuter[0] = outerInstance;
+                if (constructorArgs != null) {
+                    System.arraycopy(constructorArgs, 0, argsWithOuter, 1, constructorArgs.length);
+                }
+                mockInstance = classInstantiator.instantiateWithArgs(mockedProxyType, argsWithOuter);
+            } else {
+                // Regular constructor case
+                mockInstance = constructorArgs != null && constructorArgs.length > 0
+                    ? classInstantiator.instantiateWithArgs(mockedProxyType, constructorArgs)
+                    : classInstantiator.instantiate(mockedProxyType);
+            }
+        } else {
+            // Default case - simple instantiation
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
+
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ),cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
         throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+    } catch (Exception e) {
+        // Handle any other instantiation exceptions
+        throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'", e);
     }
 }
\ No newline at end of file
