diff --git a/tmp/5e179bc7-c177-49aa-bba3-e5061b4360bb_buggy.java b/tmp/53ffd2ab-1546-4e61-8cd6-c9478f2e0036_fixed.java
index f9a9b5b..704a5aa 100644
--- a/tmp/5e179bc7-c177-49aa-bba3-e5061b4360bb_buggy.java
+++ b/tmp/53ffd2ab-1546-4e61-8cd6-c9478f2e0036_fixed.java
@@ -1,30 +1,53 @@
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
             throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
         }
         Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
         T mockInstance = null;
         try {
             mockInstance = classInstantiator.instantiate(mockedProxyType);
             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
+            // Initialize the mock instance if it's a spy or has a constructor to invoke
+            if (settings.getMockedType() != null) {
+                Constructor<?> constructor = settings.getMockedType().getDeclaredConstructors()[0];
+                if (constructor.getParameterCount() > 0) {
+                    Object outerInstance = settings.getOuterInstance();
+                    if (outerInstance != null || settings.isSpy()) {
+                        // Try to initialize with constructor
+                        constructor.setAccessible(true);
+                        if (settings.isSpy()) {
+                            // For spies, we need to copy the state from the original instance
+                            Object originalInstance = ((SpyAnnotationHandler) handler).getSpy();
+                            mockInstance = (T) constructor.newInstance(originalInstance);
+                        } else if (outerInstance != null) {
+                            mockInstance = (T) constructor.newInstance(outerInstance);
+                        } else {
+                            mockInstance = (T) constructor.newInstance();
+                        }
+                    }
+                }
+            }
+
             return ensureMockIsAssignableToMockedType(settings, mockInstance);
         } catch (ClassCastException cce) {
             throw new MockitoException(join(
                     "ClassCastException occurred while creating the mockito mock :",
                     "  class to mock : " + describeClass(mockedProxyType),
                     "  created class : " + describeClass(settings.getTypeToMock()),
                     "  proxy instance class : " + describeClass(mockInstance),
                     "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                     "",
                     "You might experience classloading issues, please ask the mockito mailing-list.",
                     ""
             ),cce);
         } catch (org.mockito.internal.creation.instance.InstantiationException e) {
             throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        } catch (Exception e) {
+            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'", e);
         }
     }
\ No newline at end of file
