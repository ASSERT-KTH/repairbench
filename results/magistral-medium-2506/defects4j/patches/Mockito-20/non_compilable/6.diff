diff --git a/tmp/5f24c45a-8b6a-4e5e-9b40-f770bec1621b_buggy.java b/tmp/781a2cf6-8dcb-46ab-91f5-bdb26eeb92c3_fixed.java
index f9a9b5b..28a5df8 100644
--- a/tmp/5f24c45a-8b6a-4e5e-9b40-f770bec1621b_buggy.java
+++ b/tmp/781a2cf6-8dcb-46ab-91f5-bdb26eeb92c3_fixed.java
@@ -1,30 +1,71 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        // Handle constructor instantiation if required
+        if (settings.isUsingConstructor()) {
+            Object[] constructorArgs = null;
+            Object outerInstance = null;
+
+            if (settings.getOuterInstance() != null) {
+                constructorArgs = new Object[]{settings.getOuterInstance()};
+                outerInstance = settings.getOuterInstance();
+            }
+
+            try {
+                Constructor<?> constructor = mockedProxyType.getDeclaredConstructors()[0];
+                if (constructor.getParameterCount() == 0) {
+                    mockInstance = (T) constructor.newInstance();
+                } else if (constructor.getParameterCount() == 1 &&
+                         innerClassNeedsOuterInstance(constructor.getParameterTypes()[0])) {
+                    if (outerInstance == null) {
+                        throw new InstantiationException(
+                            "Outer instance is required to instantiate inner class "
+                            + mockedProxyType.getName()
+                        );
+                    }
+                    mockInstance = (T) constructor.newInstance(outerInstance);
+                }
+            } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {
+                throw new org.mockito.internal.creation.instance.InstantiationException(
+                    "Unable to instantiate " + mockedProxyType.getName(), e);
+            }
+        } else {
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
+
+        if (mockInstance == null) {
+            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getName() + "'");
+        }
+
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ),cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'", e);
+    } catch (Exception e) {
+        throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'", e);
     }
 }
+
+private boolean innerClassNeedsOuterInstance(Class<?> outerInstanceType) {
+    return !outerInstanceType.isPrimitive() && !outerInstanceType.equals(String.class);
+}
\ No newline at end of file
