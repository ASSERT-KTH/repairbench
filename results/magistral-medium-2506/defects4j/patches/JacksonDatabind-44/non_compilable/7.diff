diff --git a/tmp/6178efce-9392-433e-950a-84d895fe7456_buggy.java b/tmp/c48024e2-2c36-4380-a246-8abfbc6c3a85_fixed.java
index 1a63a66..294ad2b 100644
--- a/tmp/6178efce-9392-433e-950a-84d895fe7456_buggy.java
+++ b/tmp/c48024e2-2c36-4380-a246-8abfbc6c3a85_fixed.java
@@ -1,21 +1,25 @@
 @Override
 @Deprecated
 protected JavaType _narrow(Class<?> subclass)
 {
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
-        // TODO: fix in 2.8
-            /*
+
+    // Verify subclass relationship (with special handling for placeholder classes)
+    if (!isAssignableFrom(subclass)) {
         throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                 +_class.getName());
-                    */
+    }
+
     return new SimpleType(subclass, _bindings, this, _superInterfaces,
             _valueHandler, _typeHandler, _asStatic);
-        // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
-        // should not get here but...
+}
+
+private boolean isAssignableFrom(Class<?> subclass) {
+    // Special handling for Void and NoClass (placeholder types)
+    if (_class == Void.class || _class == ClassUtils.NoClass.class) {
+        return true; // Assume compatibility for placeholder types
+    }
+    return _class.isAssignableFrom(subclass);
 }
\ No newline at end of file
