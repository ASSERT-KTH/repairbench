diff --git a/tmp/81bd97ce-6e06-4e2e-bc32-b79f1d255508_buggy.java b/tmp/d175057c-2f19-48be-81db-bfad68d5cefe_fixed.java
index d95d5a8..0726885 100644
--- a/tmp/81bd97ce-6e06-4e2e-bc32-b79f1d255508_buggy.java
+++ b/tmp/d175057c-2f19-48be-81db-bfad68d5cefe_fixed.java
@@ -1,177 +1,183 @@
-    /**
-     * <p>Turns a string value into a java.lang.Number.</p>
-     *
-     * <p>First, the value is examined for a type qualifier on the end
-     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts 
-     * trying to create successively larger types from the type specified
-     * until one is found that can represent the value.</p>
-     *
-     * <p>If a type specifier is not found, it will check for a decimal point
-     * and then try successively larger types from <code>Integer</code> to
-     * <code>BigInteger</code> and from <code>Float</code> to
-     * <code>BigDecimal</code>.</p>
-     *
-     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it
-     * will be interpreted as a hexadecimal integer.  Values with leading
-     * <code>0</code>'s will not be interpreted as octal.</p>
-     *
-     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
-     *
-     * <p>This method does not trim the input string, i.e., strings with leading
-     * or trailing spaces will generate NumberFormatExceptions.</p>
-     *
-     * @param str  String containing a number, may be null
-     * @return Number created from the string (or null if the input is null)
-     * @throws NumberFormatException if the value cannot be converted
-     */
     public static Number createNumber(String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         if (str.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear
             // to be in specification of class. OS X Java parses it to
             // a wrong value.
             return null;
         }
-        if (str.startsWith("0x") || str.startsWith("-0x")) {
+        if (str.startsWith("0x") || str.startsWith("0X") ||
+           str.startsWith("-0x") || str.startsWith("-0X")) {
             return createInteger(str);
         }
+        // Modified expPos calculation to properly handle both 'e' and 'E'
+        int decPos = str.indexOf('.');
+        int expPos = -1;
+        int expPosE = str.indexOf('e');
+        int expPosE2 = str.indexOf('E');
+        if (expPosE > -1 && expPosE2 > -1) {
+            expPos = Math.min(expPosE, expPosE2);
+        } else if (expPosE > -1) {
+            expPos = expPosE;
+        } else if (expPosE2 > -1) {
+            expPos = expPosE2;
+        }
+        // Rest of the expPos handling
+        if (expPos > -1 && expPos < str.length() - 1) {
+            // Check if 'e' or 'E' is followed by digits or sign
+            char nextChar = str.charAt(expPos + 1);
+            if (!Character.isDigit(nextChar) && nextChar != '+' && nextChar != '-') {
+                expPos = -1;
+            }
+        }
+
+        if (expPos == -1) {
+            expPos = str.length() + 1; // signal that there's no exponent
+        }
+
         char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
-        int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
 
         if (decPos > -1) {
-
             if (expPos > -1) {
-                if (expPos < decPos || expPos > str.length()) {
+                if (expPos < decPos) {
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
             } else {
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
         } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) {
-                    throw new NumberFormatException(str + " is not a valid number.");
-                }
+            if (expPos > -1 && expPos < str.length()) {
                 mant = str.substring(0, expPos);
             } else {
                 mant = str;
             }
             dec = null;
         }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
+
+        // Handle exponential part if present
+        if (expPos > -1 && expPos < str.length() - 1) {
+            exp = str.substring(expPos + 1);
+            // Verify the exponent part is valid
+            boolean expValid = false;
+            try {
+                Long.parseLong(exp); // This will throw if the exponent is invalid
+                expValid = true;
+            } catch (NumberFormatException nfe) {
+                // Check if first character is sign
+                if (exp.length() > 1) {
+                    if ((exp.charAt(0) == '+' || exp.charAt(0) == '-') &&
+                        isDigits(exp.substring(1))) {
+                        expValid = true;
+                    }
+                }
+            }
+            if (!expValid) {
+                expPos = -1;
+                exp = null;
+            }
+        } else {
+            exp = null;
+        }
+
+        if (!Character.isDigit(lastChar) && lastChar != '.' && lastChar != 'e' && lastChar != 'E') {
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
                 exp = null;
             }
-            //Requesting a specific type..
+            // Requesting a specific type
             String numeric = str.substring(0, str.length() - 1);
             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
-            switch (lastChar) {
+            switch (Character.toLowerCase(lastChar)) {
                 case 'l':
-                case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                         try {
                             return createLong(numeric);
-                        } catch (NumberFormatException nfe) { // NOPMD
+                        } catch (NumberFormatException nfe) {
                             // Too big for a long
                         }
                         return createBigInteger(numeric);
-
                     }
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f':
-                case 'F' :
                     try {
                         Float f = NumberUtils.createFloat(numeric);
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
-
-                    } catch (NumberFormatException nfe) { // NOPMD
+                    } catch (NumberFormatException nfe) {
                         // ignore the bad number
                     }
-                    //$FALL-THROUGH$
+                    // fall through
                 case 'd':
-                case 'D' :
                     try {
                         Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                             return d;
                         }
-                    } catch (NumberFormatException nfe) { // NOPMD
+                    } catch (NumberFormatException nfe) {
                         // ignore the bad number
                     }
                     try {
                         return createBigDecimal(numeric);
-                    } catch (NumberFormatException e) { // NOPMD
+                    } catch (NumberFormatException e) {
                         // ignore the bad number
                     }
-                    //$FALL-THROUGH$
+                    // fall through
                 default:
                     throw new NumberFormatException(str + " is not a valid number.");
-
             }
         } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
+            // User doesn't have a preference on the return type
             if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
+                exp = str.substring(expPos + 1);
             } else {
                 exp = null;
             }
             if (dec == null && exp == null) {
                 // Must be an int,long,bigint
                 try {
                     return createInteger(str);
-                } catch (NumberFormatException nfe) { // NOPMD
+                } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
                 try {
                     return createLong(str);
-                } catch (NumberFormatException nfe) { // NOPMD
+                } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
                 return createBigInteger(str);
-
             } else {
                 // Must be a float,double,BigDec
                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
                 try {
                     Float f = createFloat(str);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
-                } catch (NumberFormatException nfe) { // NOPMD
+                } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
                 try {
                     Double d = createDouble(str);
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
-                } catch (NumberFormatException nfe) { // NOPMD
+                } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
-
                 return createBigDecimal(str);
-
             }
         }
     }
\ No newline at end of file
