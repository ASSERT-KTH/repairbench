diff --git a/tmp/af7b1b7d-4fe7-47d8-8b85-8997512b0314_buggy.java b/tmp/95627633-387d-4d95-bb31-286d00c09a78_fixed.java
index 0b7c52e..3906a44 100644
--- a/tmp/af7b1b7d-4fe7-47d8-8b85-8997512b0314_buggy.java
+++ b/tmp/95627633-387d-4d95-bb31-286d00c09a78_fixed.java
@@ -1,27 +1,36 @@
 /**
  * Processes a OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
   for (Node child = n.getFirstChild();
       child != null;
       child = child.getNext()) {
     // Maybe STRING, GET, SET
 
+    // Handle both string literals and computed property names
+    String name;
+    if (child.isString()) {
+      name = child.getString();
+    } else if (child.isGetProp() || child.isSetProp()) {
+      name = child.getFirstChild().getString();
+    } else {
+      continue; // Skip non-property nodes
+    }
+
     // We should never see a mix of numbers and strings.
-        String name = child.getString();
     T type = typeSystem.getType(getScope(), n, name);
 
     Property prop = getProperty(name);
     if (!prop.scheduleRenaming(child,
                                processProperty(t, prop, type, null))) {
       // TODO(user): It doesn't look like the user can do much in this
       // case right now.
       if (propertiesToErrorFor.containsKey(name)) {
         compiler.report(JSError.make(
             t.getSourceName(), child, propertiesToErrorFor.get(name),
             Warnings.INVALIDATION, name,
             (type == null ? "null" : type.toString()), n.toString(), ""));
       }
     }
   }
 }
\ No newline at end of file
