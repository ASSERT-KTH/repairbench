diff --git a/tmp/f7c4d46a-62d2-4322-90a9-a364b58bff4c_buggy.java b/tmp/cf6d56b9-0b35-4572-9318-a367b9d21ce6_fixed.java
index b36b2a9..b5ba978 100644
--- a/tmp/f7c4d46a-62d2-4322-90a9-a364b58bff4c_buggy.java
+++ b/tmp/cf6d56b9-0b35-4572-9318-a367b9d21ce6_fixed.java
@@ -1,26 +1,35 @@
 JSType meet(JSType that) {
     UnionTypeBuilder builder = new UnionTypeBuilder(registry);
+    boolean foundMatch = false;
+
+    // Check alternates of this union type
     for (JSType alternate : alternates) {
       if (alternate.isSubtype(that)) {
         builder.addAlternate(alternate);
+        foundMatch = true;
       }
     }
 
+    // Check if the 'that' type is a union
     if (that instanceof UnionType) {
-      for (JSType otherAlternate : ((UnionType) that).alternates) {
-        if (otherAlternate.isSubtype(this)) {
+      UnionType thatUnion = (UnionType) that;
+      for (JSType otherAlternate : thatUnion.alternates) {
+        if (otherAlternate.isSubtype(this) || this.isSubtype(otherAlternate)) {
           builder.addAlternate(otherAlternate);
+          foundMatch = true;
         }
       }
-    } else if (that.isSubtype(this)) {
+    } else if (that.isSubtype(this) || this.isSubtype(that)) {
       builder.addAlternate(that);
+      foundMatch = true;
     }
+
     JSType result = builder.build();
     if (result != null) {
       return result;
     } else if (this.isObject() && that.isObject()) {
       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
     } else {
       return getNativeType(JSTypeNative.NO_TYPE);
     }
 }
\ No newline at end of file
