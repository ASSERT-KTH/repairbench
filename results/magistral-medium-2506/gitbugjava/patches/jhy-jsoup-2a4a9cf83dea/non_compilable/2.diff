diff --git a/tmp/d064a890-fd83-488c-95e8-a67b3cdbe636_buggy.java b/tmp/2debe718-8494-4c16-b643-480809e8837a_fixed.java
index c9c2b44..a33a56d 100644
--- a/tmp/d064a890-fd83-488c-95e8-a67b3cdbe636_buggy.java
+++ b/tmp/2debe718-8494-4c16-b643-480809e8837a_fixed.java
@@ -1,13 +1,33 @@
 @Override
 public boolean matches(Element root, Element element) {
     // evaluate from last to first
     for (int i = evaluators.size() -1; i >= 0; --i) {
         if (element == null)
             return false;
         Evaluator eval = evaluators.get(i);
         if (!eval.matches(root, element))
             return false;
+        // For descendant combinators, we need to check all ancestors, not just immediate parent
+        if (i > 0 && evaluators.get(i-1).isAncestorCombinator()) {
+            // For descendant combinator (" "), find any ancestor that matches
+            element = findMatchingAncestor(root, element, i-1);
+            if (element == null) return false;
+        } else {
+            // For other combinators (like ">"), just use parent
             element = element.parent();
         }
+    }
     return true;
 }
+
+private Element findMatchingAncestor(Element root, Element start, int evalIndex) {
+    Element element = start.parent();
+    while (element != null) {
+        Evaluator eval = evaluators.get(evalIndex);
+        if (eval.matches(root, element)) {
+            return element;
+        }
+        element = element.parent();
+    }
+    return null;
+}
\ No newline at end of file
