diff --git a/tmp/d5e66ac2-531f-4475-81fc-06cfd8de1de9_buggy.java b/tmp/f7583dae-3500-4a3f-b248-d00c9caa6715_fixed.java
index 0583946..061a8bd 100644
--- a/tmp/d5e66ac2-531f-4475-81fc-06cfd8de1de9_buggy.java
+++ b/tmp/f7583dae-3500-4a3f-b248-d00c9caa6715_fixed.java
@@ -1,30 +1,51 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
             trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             boolean isBlank = isBlank();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
             if (couldSkip && isBlank) return;
 
             Node prev = previousSibling();
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                 (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
         }
 
+        if (isBlank() && normaliseWhite) {
+            // Skip empty text nodes that are between elements or at edges, unless they
+            // have meaning (like in pre) or would negatively impact formatting
+            boolean prevTagBlocks = prev instanceof Element && ((Element) prev).tag().isBlock();
+            boolean nextTagBlocks = next instanceof Element && ((Element) next).tag().isBlock();
+            boolean prevTagBr = prev instanceof Element && ((Element) prev).normalName().equals("br");
+
+            // Don't skip if there's a br before, or if surrounded by block tags (could have formatting meaning)
+            if (!prevTagBr && !(prevTagBlocks && nextTagBlocks)) {
+                // Check if we're between an Element and end of container
+                boolean prevEl = prev instanceof Element;
+                boolean nextNullOrEl = next == null || next instanceof Element;
+                boolean atEnd = (next == null && parent != null) || (next instanceof Element && ((Element) next).tag().isBlock());
+
+                if ((prevEl && nextNullOrEl) || atEnd) {
+                    // Skip non-meaningful blank text nodes
+                    return;
+                }
+            }
+        }
+
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
