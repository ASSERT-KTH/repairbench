diff --git a/tmp/2899cdd2-351f-4aa2-9967-fe1e9c76c238_buggy.java b/tmp/7708200b-3fb7-4046-b199-1f7429299def_fixed.java
index f591bc6..056bc0c 100644
--- a/tmp/2899cdd2-351f-4aa2-9967-fe1e9c76c238_buggy.java
+++ b/tmp/7708200b-3fb7-4046-b199-1f7429299def_fixed.java
@@ -1,74 +1,107 @@
 protected Object decodeAvrmc(
         String sentence, Channel channel, SocketAddress remoteAddress) {
 
     Parser parser = new Parser(PATTERN_AVRMC, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     DeviceSession deviceSession =
         getDeviceSession(channel, remoteAddress, parser.next());
     if (deviceSession == null) {
         return null;
     }
 
     String deviceModel = null;
     Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
     if (device != null) {
         deviceModel = device.getModel();
     }
 
     Position position = new Position(getProtocolName());
 
     position.setDeviceId(deviceSession.getDeviceId());
     DateBuilder dateBuilder = new DateBuilder()
             .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
 
     String status = parser.next();
     String upperCaseStatus = status.toUpperCase();
     position.setValid(upperCaseStatus.equals("A") || upperCaseStatus.equals("R") || upperCaseStatus.equals("P"));
     position.set(Position.KEY_STATUS, status);
 
     position.setLatitude(parser.nextCoordinate());
     position.setLongitude(parser.nextCoordinate());
     position.setSpeed(parser.nextDouble(0));
     position.setCourse(parser.nextDouble(0));
 
     dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
     position.setTime(dateBuilder.getDate());
 
     String event = parser.next();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));
-        position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
+
+    // Check if next value is a battery level or another parameter
+    if (parser.hasNext()) {
+        String nextValue = parser.next();
+        if (nextValue != null && !nextValue.isEmpty()) {
+            try {
+                position.set(Position.KEY_BATTERY, Double.parseDouble(nextValue.replaceAll("\\.", "")) * 0.001);
+            } catch (NumberFormatException e) {
+                // Handle case where nextValue isn't a battery level
+                position.set(Position.KEY_EVENT, nextValue); // or other handling
+            }
+        }
+    }
+
+    if (parser.hasNext()) {
         position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
-        position.set(Position.KEY_GPS, parser.nextInt());
+    }
+
+    if (parser.hasNext()) {
+        String gpsValue = parser.next();
+        try {
+            position.set(Position.KEY_GPS, Integer.parseInt(gpsValue));
+        } catch (NumberFormatException e) {
+            // Handle case where gpsValue isn't a number
+            position.set(Position.KEY_EVENT, gpsValue); // or other handling
+        }
+    }
+
+    if (parser.hasNext()) {
         position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);
+    }
 
-        if ("AVL110".equals(deviceModel) || "AVL120".equals(deviceModel)) {
+    if (parser.hasNext() && ("AVL110".equals(deviceModel) || "AVL120".equals(deviceModel))) {
         position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);
     }
 
-        Integer lac = parser.nextHexInt();
-        Integer cid = parser.nextHexInt();
-        Integer mcc = parser.nextInt();
-        Integer mnc = parser.nextInt();
+    Integer lac = parser.hasNext() ? parser.nextHexInt() : null;
+    Integer cid = parser.hasNext() ? parser.nextHexInt() : null;
+    Integer mcc = parser.hasNext() ? parser.nextInt() : null;
+    Integer mnc = parser.hasNext() ? parser.nextInt() : null;
+
     if (lac != null && cid != null && mcc != null && mnc != null) {
         position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));
     }
 
-        parser.next(); // unused
+    // Skip unused field if present
+    if (parser.hasNext()) {
+        parser.next();
+    }
 
+    // Handle checksum if present
+    if (parser.hasNext()) {
         String checksum = parser.next();
 
         if (channel != null) {
-
             sendAcknowledge(status, event, checksum, channel, remoteAddress);
 
             String devicePassword = AttributeUtil.getDevicePassword(
                     getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);
             sendEventResponse(event, devicePassword, channel, remoteAddress);
         }
+    }
 
     return position;
 }
\ No newline at end of file
