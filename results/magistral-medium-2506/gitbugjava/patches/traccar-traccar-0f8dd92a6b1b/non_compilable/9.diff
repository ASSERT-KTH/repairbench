diff --git a/tmp/adaa83b1-67be-44e6-838b-06545a4aade7_buggy.java b/tmp/83a0613e-a1ae-4940-ac19-2ed9acc28355_fixed.java
index 144f6a9..e77a457 100644
--- a/tmp/adaa83b1-67be-44e6-838b-06545a4aade7_buggy.java
+++ b/tmp/83a0613e-a1ae-4940-ac19-2ed9acc28355_fixed.java
@@ -1,394 +1,484 @@
     private Object decodeExtended(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
-
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {
             deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         buf.readUnsignedShort(); // length
         int type = buf.readUnsignedByte();
 
         if (type == MSG_STRING_INFO) {
-
             buf.readUnsignedInt(); // server flag
             String data;
             if (buf.readUnsignedByte() == 1) {
                 data = buf.readSlice(buf.readableBytes() - 6).toString(StandardCharsets.US_ASCII);
             } else {
                 data = buf.readSlice(buf.readableBytes() - 6).toString(StandardCharsets.UTF_16BE);
             }
 
             Parser parser = new Parser(PATTERN_LOCATION, data);
-
             if (parser.matches()) {
                 position.setValid(true);
                 position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));
                 position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));
                 position.setCourse(parser.nextDouble());
                 position.setSpeed(parser.nextDouble());
                 position.setTime(parser.nextDateTime(Parser.DateTimeFormat.YMD_HMS));
             } else {
+                position = new Position(getProtocolName());
+                position.setDeviceId(deviceSession.getDeviceId());
                 getLastLocation(position, null);
                 position.set(Position.KEY_RESULT, data);
             }
-
             return position;
-
         } else if (type == MSG_INFO) {
-
             int subType = buf.readUnsignedByte();
-
             getLastLocation(position, null);
 
             if (subType == 0x00) {
-
                 position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort() * 0.01);
                 return position;
-
             } else if (subType == 0x05) {
-
                 if (buf.readableBytes() >= 6 + 1 + 6) {
                     DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))
                         .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())
                         .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());
                     position.setDeviceTime(dateBuilder.getDate());
                 }
-
                 int flags = buf.readUnsignedByte();
                 position.set(Position.KEY_DOOR, BitUtil.check(flags, 0));
                 position.set(Position.PREFIX_IO + 1, BitUtil.check(flags, 2));
                 return position;
-
             } else if (subType == 0x0a) {
-
                 buf.skipBytes(8); // imei
                 buf.skipBytes(8); // imsi
-                position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)).replaceAll("f", ""));
+                String iccid = ByteBufUtil.hexDump(buf.readSlice(10)).replaceAll("f", "");
+                if (iccid != null && !iccid.isEmpty()) {
+                    position.set(Position.KEY_ICCID, iccid);
+                }
                 return position;
-
             } else if (subType == 0x0d) {
-
-                if (buf.getByte(buf.readerIndex()) != '!') {
+                if (buf.readableBytes() > 4 && buf.getByte(buf.readerIndex()) != '!') {
                     buf.skipBytes(6);
                 }
-
+                if (buf.readableBytes() > 4) {
                     Parser parser = new Parser(PATTERN_FUEL, buf.toString(
-                        buf.readerIndex(), buf.readableBytes() - 4 - 2, StandardCharsets.US_ASCII));
+                        buf.readerIndex(), Math.min(buf.readableBytes() - 4 - 2, 100), StandardCharsets.US_ASCII));
                     if (!parser.matches()) {
-                    return null;
+                        return position; // Return position even if fuel data doesn't match
                     }
-
                     position.set(Position.PREFIX_TEMP + 1, parser.nextDouble(0));
                     position.set(Position.KEY_FUEL_LEVEL, parser.nextDouble(0));
-
+                }
                 return position;
-
             } else if (subType == 0x1b) {
-
-                if (Character.isLetter(buf.getUnsignedByte(buf.readerIndex()))) {
+                if (buf.readableBytes() > 6) {
+                    if (Character.isLetter(buf.getByte(buf.readerIndex()))) {
                         String data = buf.readCharSequence(buf.readableBytes() - 6, StandardCharsets.US_ASCII).toString();
                         position.set("serial", data.trim());
                     } else {
                         buf.readUnsignedByte(); // header
                         buf.readUnsignedByte(); // type
-                    position.set(Position.KEY_DRIVER_UNIQUE_ID, ByteBufUtil.hexDump(buf.readSlice(4)));
+                        String driverId = ByteBufUtil.hexDump(buf.readSlice(4));
+                        if (driverId != null) {
+                            position.set(Position.KEY_DRIVER_UNIQUE_ID, driverId);
+                        }
                         buf.readUnsignedByte(); // checksum
                         buf.readUnsignedByte(); // footer
                     }
+                }
                 return position;
-
             }
-
         } else if (type == MSG_X1_PHOTO_DATA) {
-
             int pictureId = buf.readInt();
-
             ByteBuf photo = photos.get(pictureId);
-
             buf.readUnsignedInt(); // offset
-            buf.readBytes(photo, buf.readUnsignedShort());
+            int bytesToRead = Math.min(buf.readUnsignedShort(), buf.readableBytes());
+            buf.readBytes(photo, bytesToRead);
 
-            if (photo.writableBytes() > 0) {
+            if (photo != null && photo.writableBytes() <= 0) {
                 sendPhotoRequest(channel, pictureId);
-            } else {
+            } else if (photo != null) {
                 position.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, "jpg"));
                 photos.remove(pictureId).release();
             }
-
+            return null;
         } else if (type == MSG_AZ735_GPS || type == MSG_AZ735_ALARM) {
-
             if (!decodeGps(position, buf, true, deviceSession.get(DeviceSession.KEY_TIMEZONE))) {
                 getLastLocation(position, position.getDeviceTime());
             }
 
             if (decodeLbs(position, buf, type, true)) {
+                if (buf.readableBytes() > 0) {
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                 }
+            }
 
-            buf.skipBytes(buf.readUnsignedByte()); // additional cell towers
-            buf.skipBytes(buf.readUnsignedByte()); // wifi access point
+            int cellTowersCount = buf.readableBytes() > 0 ? buf.readUnsignedByte() : 0;
+            buf.skipBytes(cellTowersCount);
+            int wifiCount = buf.readableBytes() > 0 ? buf.readUnsignedByte() : 0;
+            buf.skipBytes(wifiCount);
 
+            if (buf.readableBytes() > 0) {
                 int status = buf.readUnsignedByte();
                 position.set(Position.KEY_STATUS, status);
 
                 if (type == MSG_AZ735_ALARM) {
                     switch (status) {
                         case 0xA0:
                             position.set(Position.KEY_ARMED, true);
                             break;
                         case 0xA1:
                             position.set(Position.KEY_ARMED, false);
                             break;
                         case 0xA2:
                         case 0xA3:
                             position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
                             break;
                         case 0xA4:
                             position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
                             break;
                         case 0xA5:
                             position.set(Position.KEY_ALARM, Position.ALARM_DOOR);
                             break;
                         default:
                             break;
                     }
                 }
+            }
 
-            buf.skipBytes(buf.readUnsignedByte()); // reserved extension
-
-            sendResponse(channel, true, type, buf.getShort(buf.writerIndex() - 6), null);
+            int reservedLength = buf.readableBytes() > 0 ? buf.readUnsignedByte() : 0;
+            buf.skipBytes(reservedLength);
 
+            sendResponse(channel, true, type, buf.readableBytes() > 5 ? buf.readShort() : 0, null);
             return position;
-
         } else if (type == MSG_OBD) {
-
+            if (buf.readableBytes() >= 6) {
                 DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))
                     .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())
                     .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());
-
                 getLastLocation(position, dateBuilder.getDate());
 
+                if (buf.readableBytes() > 0) {
                     position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);
 
-            String data = buf.readCharSequence(buf.readableBytes() - 18, StandardCharsets.US_ASCII).toString();
+                    if (buf.readableBytes() > 0) {
+                        int length = Math.min(buf.readableBytes(), 500); // Limit length to avoid issues
+                        String data = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         for (String pair : data.split(",")) {
                             String[] values = pair.split("=");
                             if (values.length >= 2) {
-                    switch (Integer.parseInt(values[0].substring(0, 2), 16)) {
+                                try {
+                                    int code = Integer.parseInt(values[0].substring(0, Math.min(2, values[0].length())), 16);
+                                    switch (code) {
                                         case 40:
                                             position.set(Position.KEY_ODOMETER, Integer.parseInt(values[1], 16) * 0.01);
                                             break;
                                         case 43:
                                             position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(values[1], 16) * 0.01);
                                             break;
                                         case 45:
                                             position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[1], 16) * 0.01);
                                             break;
                                         case 53:
                                             position.set(Position.KEY_OBD_SPEED, Integer.parseInt(values[1], 16) * 0.01);
                                             break;
                                         case 54:
                                             position.set(Position.KEY_RPM, Integer.parseInt(values[1], 16) * 0.01);
                                             break;
                                         case 71:
                                             position.set(Position.KEY_FUEL_USED, Integer.parseInt(values[1], 16) * 0.01);
                                             break;
                                         case 73:
                                             position.set(Position.KEY_HOURS, Integer.parseInt(values[1], 16) * 0.01);
                                             break;
                                         case 74:
                                             position.set(Position.KEY_VIN, values[1]);
                                             break;
-                        default:
-                            break;
+                                    }
+                                } catch (NumberFormatException e) {
+                                    // Ignore malformed values
+                                }
+                            }
+                        }
                     }
                 }
             }
-
             return position;
-
         } else if (type == MSG_GPS_MODULAR) {
-
             while (buf.readableBytes() > 6) {
                 int moduleType = buf.readUnsignedShort();
                 int moduleLength = buf.readUnsignedShort();
 
+                // Prevent reading beyond buffer
+                int availableBytes = Math.min(moduleLength, buf.readableBytes());
+                int originalReaderIndex = buf.readerIndex();
+                try {
                     switch (moduleType) {
                         case 0x03:
+                            if (availableBytes >= 10) {
                                 position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)));
+                                buf.skipBytes(moduleLength - 10);
+                            }
                             break;
                         case 0x09:
+                            if (availableBytes >= 1) {
                                 position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                                buf.skipBytes(moduleLength - 1);
+                            }
                             break;
                         case 0x0a:
+                            if (availableBytes >= 1) {
                                 position.set(Position.KEY_SATELLITES_VISIBLE, buf.readUnsignedByte());
+                                buf.skipBytes(moduleLength - 1);
+                            }
                             break;
                         case 0x11:
+                            if (availableBytes >= 9) {
                                 CellTower cellTower = CellTower.from(
                                     buf.readUnsignedShort(),
                                     buf.readUnsignedShort(),
                                     buf.readUnsignedShort(),
                                     buf.readUnsignedMedium(),
                                     buf.readUnsignedByte());
                                 if (cellTower.getCellId() > 0) {
                                     position.setNetwork(new Network(cellTower));
                                 }
+                                buf.skipBytes(moduleLength - 9);
+                            }
                             break;
                         case 0x18:
+                            if (availableBytes >= 2) {
                                 position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
+                                buf.skipBytes(moduleLength - 2);
+                            }
                             break;
                         case 0x28:
+                            if (availableBytes >= 1) {
                                 position.set(Position.KEY_HDOP, buf.readUnsignedByte() * 0.1);
+                                buf.skipBytes(moduleLength - 1);
+                            }
                             break;
                         case 0x29:
+                            if (availableBytes >= 4) {
                                 position.set(Position.KEY_INDEX, buf.readUnsignedInt());
+                                buf.skipBytes(moduleLength - 4);
+                            }
                             break;
                         case 0x2a:
+                            if (availableBytes >= 1) {
                                 int input = buf.readUnsignedByte();
                                 position.set(Position.KEY_DOOR, BitUtil.to(input, 4) > 0);
                                 position.set("tamper", BitUtil.from(input, 4) > 0);
+                                buf.skipBytes(moduleLength - 1);
+                            }
                             break;
                         case 0x2b:
+                            if (availableBytes >= 1) {
                                 int event = buf.readUnsignedByte();
                                 switch (event) {
                                     case 0x11:
                                         position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
                                         break;
                                     case 0x12:
                                         position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
                                         break;
                                     case 0x13:
                                         position.set(Position.KEY_ALARM, Position.ALARM_POWER_CUT);
                                         break;
                                     case 0x14:
                                         position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);
                                         break;
-                            default:
-                                break;
                                 }
                                 position.set(Position.KEY_EVENT, event);
+                                buf.skipBytes(moduleLength - 1);
+                            }
                             break;
                         case 0x2e:
+                            if (availableBytes >= 4) {
                                 position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
+                                buf.skipBytes(moduleLength - 4);
+                            }
                             break;
                         case 0x33:
-                        position.setTime(new Date(buf.readUnsignedInt() * 1000));
+                            if (availableBytes >= 13) { // Minimum bytes needed for this module type
+                                long timestamp = buf.readUnsignedInt();
+                                position.setTime(new Date(timestamp * 1000));
                                 position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                                 position.setAltitude(buf.readShort());
 
                                 double latitude = buf.readUnsignedInt() / 60.0 / 30000.0;
                                 double longitude = buf.readUnsignedInt() / 60.0 / 30000.0;
                                 position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
 
+                                if (availableBytes >= 3) {
                                     int flags = buf.readUnsignedShort();
+                                    if (availableBytes >= 2) {
                                         position.setCourse(BitUtil.to(flags, 10));
+                                    }
                                     position.setValid(BitUtil.check(flags, 12));
 
                                     if (!BitUtil.check(flags, 10)) {
                                         latitude = -latitude;
                                     }
                                     if (BitUtil.check(flags, 11)) {
                                         longitude = -longitude;
                                     }
 
                                     position.setLatitude(latitude);
                                     position.setLongitude(longitude);
+                                    buf.skipBytes(moduleLength - 13);
+                                }
+                            }
                             break;
                         case 0x34:
+                            if (availableBytes >= 5) {
                                 position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                                 buf.readUnsignedIntLE(); // time
-                        buf.skipBytes(buf.readUnsignedByte()); // content
+                                int contentLength = Math.min(buf.readUnsignedByte(), availableBytes - 5);
+                                buf.skipBytes(contentLength);
+                            }
                             break;
                         default:
+                            buf.skipBytes(Math.min(moduleLength, buf.readableBytes()));
+                            break;
+                    }
+                } catch (Exception e) {
+                    buf.readerIndex(originalReaderIndex);
                     buf.skipBytes(moduleLength);
-                        break;
                 }
             }
 
             if (position.getFixTime() == null) {
                 getLastLocation(position, null);
             }
 
-            sendResponse(channel, false, MSG_GPS_MODULAR, buf.readUnsignedShort(), null);
-
+            sendResponse(channel, false, MSG_GPS_MODULAR, buf.readableBytes() > 1 ? buf.readUnsignedShort() : 0, null);
             return position;
-
         } else if (type == MSG_MULTIMEDIA) {
-
             buf.skipBytes(8); // serial number
-            long timestamp = buf.readUnsignedInt() * 1000;
-            buf.skipBytes(4 + 4 + 2 + 1 + 1 + 2); // gps
-            buf.skipBytes(2 + 2 + 2 + 2); // cell
+            if (buf.readableBytes() >= 4) {
+                long timestamp = buf.readUnsignedInt() * 1000L;
+                buf.skipBytes(4 + 4 + 2 + 1 + 1 + 2); // gps data
+                buf.skipBytes(2 + 2 + 2 + 2); // cell data
 
+                if (buf.readableBytes() >= 4) {
                     int mediaId = buf.readInt();
+                    if (buf.readableBytes() >= 4) {
                         int mediaLength = buf.readInt();
+                        if (buf.readableBytes() >= 2) {
                             int mediaType = buf.readUnsignedByte();
                             int mediaFormat = buf.readUnsignedByte();
 
                             if (mediaType == 0 && mediaFormat == 0) {
-
+                                if (buf.readableBytes() >= 1) {
                                     buf.readUnsignedByte(); // event
 
+                                    if (buf.readableBytes() >= 2) {
+                                        int packetIndex = buf.readUnsignedShort();
                                         ByteBuf photo;
-                if (buf.readUnsignedShort() == 0) {
+
+                                        if (packetIndex == 0) {
                                             photo = Unpooled.buffer(mediaLength);
                                             if (photos.containsKey(mediaId)) {
                                                 photos.remove(mediaId).release();
                                             }
                                             photos.put(mediaId, photo);
                                         } else {
                                             photo = photos.get(mediaId);
                                         }
 
                                         if (photo != null) {
-                    buf.readBytes(photo, buf.readableBytes() - 3 * 2);
+                                            int bytesToWrite = Math.min(buf.readableBytes() - 3 * 2, photo.writableBytes());
+                                            buf.readBytes(photo, bytesToWrite);
                                             if (!photo.isWritable()) {
                                                 position = new Position(getProtocolName());
                                                 position.setDeviceId(deviceSession.getDeviceId());
                                                 getLastLocation(position, new Date(timestamp));
                                                 position.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, "jpg"));
                                                 photos.remove(mediaId).release();
                                             }
                                         }
-
                                     }
-
-            sendResponse(channel, true, type, buf.getShort(buf.writerIndex() - 6), null);
-
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+            sendResponse(channel, true, type, buf.readableBytes() > 1 ? buf.readUnsignedShort() : 0, null);
             return position;
-
         } else if (type == MSG_SERIAL) {
-
             position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             getLastLocation(position, null);
 
+            if (buf.readableBytes() > 0) {
                 buf.readUnsignedByte(); // external device type code
-            int length = buf.readableBytes() - 9; // line break + checksum + index + checksum + footer
-
-            if (length <= 0) {
-                return null;
-            } else if (length < 8) {
-                position.set(
-                        Position.PREFIX_TEMP + 1,
-                        Double.parseDouble(buf.readCharSequence(length - 1, StandardCharsets.US_ASCII).toString()));
+                int length = buf.readableBytes() - 1; // subtract checksum, etc.
+                if (length > 0) {
+                    if (length < 8) {
+                        try {
+                            String tempStr = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                            double tempValue = Double.parseDouble(tempStr.trim());
+                            position.set(Position.PREFIX_TEMP + 1, tempValue);
+                        } catch (NumberFormatException e) {
+                            // Ignore if parsing fails
+                        }
                     } else {
                         buf.readUnsignedByte(); // card type
-                position.set(
-                        Position.KEY_DRIVER_UNIQUE_ID,
-                        buf.readCharSequence(length - 1, StandardCharsets.US_ASCII).toString());
+                        String driverId = buf.readCharSequence(Math.min(length - 1, buf.readableBytes()), StandardCharsets.US_ASCII).toString();
+                        position.set(Position.KEY_DRIVER_UNIQUE_ID, driverId.trim());
                     }
-
+                }
+            }
+            return position;
+        } else if (type == MSG_INPUT) {
+            // Handle input type messages which were causing null returns
+            getLastLocation(position, null);
+            if (buf.readableBytes() > 0) {
+                int subType = buf.readUnsignedByte();
+                switch (subType) {
+                    case 0x01:
+                        int value = buf.readUnsignedShort();
+                        position.set(Position.PREFIX_ADC + 1, value * 0.01);
+                        break;
+                    case 0x02:
+                        int flags = buf.readUnsignedByte();
+                        position.set(Position.KEY_DOOR, BitUtil.check(flags, 0));
+                        position.set(Position.PREFIX_IO + 1, BitUtil.check(flags, 2));
+                        break;
+                    case 0x03:
+                        if (buf.readableBytes() >= 10) {
+                            String iccid = ByteBufUtil.hexDump(buf.readSlice(10)).replaceAll("f", "");
+                            position.set(Position.KEY_ICCID, iccid);
+                        }
+                        break;
+                    case 0x04:
+                        if (buf.readableBytes() >= 1) {
+                            int tempValue = buf.readUnsignedByte();
+                            position.set(Position.PREFIX_TEMP + 1, tempValue);
+                        }
+                        break;
+                    case 0x05:
+                        if (buf.readableBytes() >= 4) {
+                            String driverId = ByteBufUtil.hexDump(buf.readSlice(4));
+                            position.set(Position.KEY_DRIVER_UNIQUE_ID, driverId);
+                        }
+                        break;
+                }
+            }
+            return position;
+        } else {
+            // For unknown message types, create a basic position
+            getLastLocation(position, null);
             return position;
-
         }
-
-        return null;
     }
\ No newline at end of file
