diff --git a/tmp/b2d59c1b-0490-4a08-a0fe-15b06c8cf3ae_buggy.java b/tmp/cf73cd06-16e8-42cd-abf6-b658d989d6c5_fixed.java
index 855afa5..e8e28f0 100644
--- a/tmp/b2d59c1b-0490-4a08-a0fe-15b06c8cf3ae_buggy.java
+++ b/tmp/cf73cd06-16e8-42cd-abf6-b658d989d6c5_fixed.java
@@ -1,13 +1,61 @@
     static URL encodeUrl(URL u) {
 	    u = punyUrl(u);
         try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
-        } catch (URISyntaxException | MalformedURLException e) {
+            // properly encode the URL by breaking it into parts and encoding each component
+            String protocol = u.getProtocol();
+            String authority = u.getAuthority();
+            String path = u.getPath();
+            String query = u.getQuery();
+            String fragment = u.getRef();
+
+            // encode path segments (but not slashes)
+            String encodedPath = path != null ?
+                Arrays.stream(path.split("/"))
+                    .mapsegment -> {
+                        if (segment.isEmpty()) return segment;
+                        try {
+                            return URLEncoder.encode(segment, "UTF-8")
+                                .replace("+", "%20") // URLEncoder uses + for space but we want %20
+                                .replace("%2F", "/"); // don't encode slashes
+                        } catch (UnsupportedEncodingException e) {
+                            return segment; // fallback
+                        }
+                    })
+                    .collect(Collectors.joining("/")) : "";
+
+            // encode query parameters
+            String encodedQuery = query != null ?
+                Arrays.stream(query.split("&"))
+                    .map(param -> {
+                        String[] parts = param.split("=");
+                        try {
+                            String key = parts.length > 0 ? URLEncoder.encode(parts[0], "UTF-8").replace("+", "%20") : "";
+                            String value = parts.length > 1 ? URLEncoder.encode(parts[1], "UTF-8").replace("+", "%20") : "";
+                            return key + (value.isEmpty() ? "" : "=" + value);
+                        } catch (UnsupportedEncodingException e) {
+                            return param;
+                        }
+                    })
+                    .collect(Collectors.joining("&")) : null;
+
+            // encode fragment
+            String encodedFragment = fragment != null ?
+                URLEncoder.encode(fragment, "UTF-8")
+                    .replace("+", "%20")
+                    .replace("%23", "#") : null;
+
+            // reconstruct the URL
+            String reconstructedUrl = String.format("%s://%s%s%s%s%s",
+                protocol,
+                authority,
+                path != null && !path.isEmpty() ? "/" + (encodedPath.startsWith("/") ? encodedPath.substring(1) : encodedPath) : "",
+                path != null && path.endsWith("/") ? "/" : "",
+                encodedQuery != null ? "?" + encodedQuery : "",
+                encodedFragment != null ? "#" + encodedFragment : "");
+
+            return new URL(reconstructedUrl);
+        } catch (Exception e) {
             // give up and return the original input
             return u;
         }
     }
\ No newline at end of file
