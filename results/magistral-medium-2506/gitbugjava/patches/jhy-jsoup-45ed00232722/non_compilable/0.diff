diff --git a/tmp/c288d3ef-c10e-4ce1-b178-c714f6109641_buggy.java b/tmp/820da848-0a11-43f0-9b98-5ee3a03cbe8a_fixed.java
index 855afa5..c71dbb7 100644
--- a/tmp/c288d3ef-c10e-4ce1-b178-c714f6109641_buggy.java
+++ b/tmp/820da848-0a11-43f0-9b98-5ee3a03cbe8a_fixed.java
@@ -1,13 +1,81 @@
     static URL encodeUrl(URL u) {
         u = punyUrl(u);
         try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
-        } catch (URISyntaxException | MalformedURLException e) {
+            // properly encode the URL components
+            String protocol = u.getProtocol();
+            String authority = u.getAuthority();
+            String path = u.getPath();
+            String query = u.getQuery();
+            String fragment = u.getFragment();
+
+            // Encode path components
+            path = encodePath(path);
+            // Encode query components if present
+            if (query != null) {
+                query = encodeQuery(query);
+            }
+
+            // Reconstruct the URL string
+            StringBuilder urlS = new StringBuilder();
+            urlS.append(protocol).append("://").append(authority);
+            if (path != null) {
+                urlS.append(path);
+            }
+            if (query != null) {
+                urlS.append("?").append(query);
+            }
+            if (fragment != null) {
+                urlS.append("#").append(fragment);
+            }
+
+            return new URL(urlS.toString());
+        } catch (MalformedURLException e) {
             // give up and return the original input
             return u;
         }
     }
+
+    private static String encodePath(String path) {
+        if (path == null) return null;
+        try {
+            String[] segments = path.split("/");
+            StringBuilder encodedPath = new StringBuilder();
+            for (String segment : segments) {
+                if (!segment.isEmpty()) {
+                    encodedPath.append("/")
+                            .append(URLEncoder.encode(segment, "UTF-8")
+                                    .replace("+", "%20")
+                                    .replace("%3A", ":")
+                                    .replace("%5B", "[")
+                                    .replace("%5D", "]"));
+                } else if (encodedPath.length() == 0 || !encodedPath.toString().endsWith("/")) {
+                    encodedPath.append("/");
+                }
+            }
+            return encodedPath.length() == 0 ? "/": encodedPath.toString();
+        } catch (UnsupportedEncodingException e) {
+            return path; // fall back to original if encoding fails
+        }
+    }
+
+    private static String encodeQuery(String query) {
+        if (query == null) return null;
+        try {
+            String[] pairs = query.split("&");
+            StringBuilder encodedQuery = new StringBuilder();
+            for (int i = 0; i < pairs.length; i++) {
+                String[] keyValue = pairs[i].split("=");
+                if (keyValue.length > 0) {
+                    String key = keyValue[0];
+                    String value = keyValue.length > 1 ? keyValue[1] : "";
+                    if (i > 0) encodedQuery.append("&");
+                    encodedQuery.append(URLEncoder.encode(key, "UTF-8"))
+                               .append("=")
+                               .append(URLEncoder.encode(value, "UTF-8"));
+                }
+            }
+            return encodedQuery.toString();
+        } catch (UnsupportedEncodingException e) {
+            return query; // fall back to original if encoding fails
+        }
+    }
\ No newline at end of file
