diff --git a/tmp/ded1bc0e-d34a-462f-b464-c0b7a2999275_buggy.java b/tmp/31c09aa6-11ba-4252-bd5c-f7da587ff0ce_fixed.java
index ad77f15..19de82d 100644
--- a/tmp/ded1bc0e-d34a-462f-b464-c0b7a2999275_buggy.java
+++ b/tmp/31c09aa6-11ba-4252-bd5c-f7da587ff0ce_fixed.java
@@ -1,112 +1,191 @@
     private void decodeFragment(Position position, String fragment) {
 
         int dataIndex = fragment.indexOf(':');
+        if (dataIndex == -1) {
+            return; // skip malformed fragments
+        }
+
         int index = 0;
         String[] values;
-        if (fragment.length() == dataIndex + 1) {
+        if (dataIndex == fragment.length() - 1) {
             values = new String[0];
         } else {
-            values = fragment.substring(dataIndex + 1).split(";");
+            String dataPart = fragment.length() > dataIndex + 1 ?
+                fragment.substring(dataIndex + 1) : "";
+            values = dataPart.split(";");
         }
 
-        switch (fragment.substring(0, dataIndex)) {
+        String type = dataIndex < fragment.length() ?
+            fragment.substring(0, dataIndex) : "";
+
+        switch (type) {
             case "GPS":
-                position.setValid(values[index++].equals("A"));
+                if (values.length == 0) break;
+                position.setValid(values[index].equals("A"));
+                if (values.length <= index) break;
+                index++;
+                if (values.length <= index) break;
                 position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+
+                if (values.length <= index) break;
+                String latitudeStr = values[index].length() > 1 ?
+                    values[index].substring(1) : "";
+                double latitude = latitudeStr.isEmpty() ? 0 :
+                    Double.parseDouble(latitudeStr);
+                position.setLatitude(latitude);
+                if (values[index].length() > 0 && values[index].charAt(0) == 'S') {
                     position.setLatitude(-position.getLatitude());
                 }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                index++;
+
+                if (values.length <= index) break;
+                String longitudeStr = values[index].length() > 1 ?
+                    values[index].substring(1) : "";
+                double longitude = longitudeStr.isEmpty() ? 0 :
+                    Double.parseDouble(longitudeStr);
+                position.setLongitude(longitude);
+                if (values[index].length() > 0 && values[index].charAt(0) == 'W') {
                     position.setLongitude(-position.getLongitude());
                 }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                index++;
+
+                if (values.length > index) {
+                    String speedStr = values[index];
+                    if (!speedStr.isEmpty()) {
+                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedStr)));
                     }
+                    index++;
+                }
+
+                if (values.length > index) {
                     position.setCourse(Integer.parseInt(values[index++]));
+                }
                 if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                    if (!values[index].isEmpty()) {
+                        position.setAltitude(Integer.parseInt(values[index]));
+                    }
+                    index++;
                 }
                 if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                    if (!values[index].isEmpty()) {
+                        position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));
+                    }
+                    index++;
                 }
                 if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                    if (!values[index].isEmpty()) {
+                        position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));
+                    }
+                    index++;
                 }
                 break;
             case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
+                index += 2; // skip registration status and signal strength if not enough values
+                if (values.length >= index + 5) {
                     position.setNetwork(new Network(CellTower.from(
                             Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
                             Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
                             Integer.parseInt(values[index++]))));
+                }
                 break;
             case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));
                 }
-                if (index < values.length) {
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
                     String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                    long hourValue = 0;
+                    if (hours.length > 0) {
+                        hourValue += Integer.parseInt(hours[0]) * 3600L;
+                    }
+                    if (hours.length > 1) {
+                        hourValue += Integer.parseInt(hours[1]) * 60L;
+                    }
+                    if (hours.length > 2) {
+                        hourValue += Integer.parseInt(hours[2]);
+                    }
+                    position.set(Position.KEY_HOURS, hourValue * 1000);
                 }
                 break;
             case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set(Position.KEY_POWER, Double.parseDouble(values[index]));
                 }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));
                 }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));
+                }
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));
                 }
                 break;
             case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));
+                }
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                    int io = Integer.parseInt(values[index], 16);
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                 }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                    String geofence = values[index++];
+                    if (index < values.length) {
+                        geofence += values[index++];
+                    }
+                    position.set(Position.KEY_GEOFENCE, geofence);
+                }
+                if (index < values.length) {
                     position.set("eventStatus", values[index++]);
+                }
                 if (index < values.length) {
                     position.set("packetType", values[index++]);
                 }
                 break;
             case "ETD":
-                position.set("eventData", values[index++]);
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set("eventData", values[index]);
+                }
                 break;
             case "OBD":
-                position.set("obd", values[index++]);
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set("obd", values[index]);
+                }
                 break;
             case "TAG":
-                position.set("tagData", values[index++]);
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set("tagData", values[index]);
+                }
                 break;
             case "IWD":
-                while (index < values.length) {
+                while (index < values.length && values.length >= index + 2) {
                     int sensorIndex = Integer.parseInt(values[index++]);
                     int dataType = Integer.parseInt(values[index++]);
-                    if (dataType == 0) {
+                    if (dataType == 0 && index < values.length) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
-                    } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
+                    } else if (dataType == 1 && index < values.length) {
+                        index += 1; // skip temperature sensor serial number
+                        if (index < values.length) {
                             position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
                         }
                     }
+                }
                 break;
             default:
                 break;
         }
     }
\ No newline at end of file
