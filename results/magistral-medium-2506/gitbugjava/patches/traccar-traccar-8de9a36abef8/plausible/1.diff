diff --git a/tmp/284f78d6-8c31-4490-b038-5144ee73b217_buggy.java b/tmp/33c0ed62-376c-4563-a757-a074c6c005f1_fixed.java
index ad77f15..350562e 100644
--- a/tmp/284f78d6-8c31-4490-b038-5144ee73b217_buggy.java
+++ b/tmp/33c0ed62-376c-4563-a757-a074c6c005f1_fixed.java
@@ -1,112 +1,202 @@
     private void decodeFragment(Position position, String fragment) {
-
         int dataIndex = fragment.indexOf(':');
+        if (dataIndex < 0) {
+            return; // No data part, skip processing
+        }
+
         int index = 0;
         String[] values;
         if (fragment.length() == dataIndex + 1) {
             values = new String[0];
         } else {
-            values = fragment.substring(dataIndex + 1).split(";");
+            String substring = fragment.substring(dataIndex + 1);
+            if (substring.isEmpty()) {
+                values = new String[0];
+            } else {
+                values = substring.split(";");
+            }
+        }
+
+        String type = "";
+        if (dataIndex >= 0) {
+            type = fragment.substring(0, dataIndex);
         }
 
-        switch (fragment.substring(0, dataIndex)) {
+        switch (type) {
             case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+                if (values.length == 0 || index >= values.length) break;
+                position.setValid(values[index].equals("A"));
+                index++;
+
+                if (index >= values.length) break;
+                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));
+                index++;
+
+                if (index >= values.length) break;
                 position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+                if (values[index].charAt(0) == 'S') {
                     position.setLatitude(-position.getLatitude());
                 }
+                index++;
+
+                if (index >= values.length) break;
                 position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                if (values[index].charAt(0) == 'W') {
                     position.setLongitude(-position.getLongitude());
                 }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                index++;
+
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));
                 }
-                position.setCourse(Integer.parseInt(values[index++]));
+                index++;
+
                 if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                    position.setCourse(Integer.parseInt(values[index]));
+                    index++;
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.setAltitude(Integer.parseInt(values[index]));
+                    index++;
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));
+                    index++;
+                }
+
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));
+                    index++;
                 }
                 break;
             case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
+                if (values.length >= 2) {
+                    index += 2; // registration status and signal strength
+                }
+                if (index + 5 <= values.length) {
                     position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                            Integer.parseInt(values[index]), Integer.parseInt(values[index + 1]),
+                            Integer.parseInt(values[index + 2], 16), Integer.parseInt(values[index + 3], 16),
+                            Integer.parseInt(values[index + 4]))));
+                    index += 5;
+                }
                 break;
             case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));
+                    index++;
                 }
-                if (index < values.length) {
+                if (index < values.length && !values[index].isEmpty()) {
                     String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                    long total = 0;
+                    if (hours.length > 0 && !hours[0].isEmpty()) {
+                        total += Integer.parseInt(hours[0]) * 3600;
+                    }
+                    if (hours.length > 1 && !hours[1].isEmpty()) {
+                        total += Integer.parseInt(hours[1]) * 60;
+                    }
+                    if (hours.length > 2 && !hours[2].isEmpty()) {
+                        total += Integer.parseInt(hours[2]);
+                    }
+                    position.set(Position.KEY_HOURS, total * 1000);
+                    index++;
                 }
                 break;
             case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                while (index < values.length) {
+                    if (values[index].isEmpty()) {
+                        index++;
+                        continue;
                     }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                    if (index == 0) {
+                        position.set(Position.KEY_POWER, Double.parseDouble(values[index]));
+                    } else if (index == 1) {
+                        position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));
+                    } else {
+                        position.set(Position.PREFIX_ADC + (index - 1), Double.parseDouble(values[index]));
                     }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                    index++;
                 }
                 break;
             case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                if (values.length > index && !values[index].isEmpty()) {
+                    position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));
+                    index++;
+                }
+                if (values.length > index && !values[index].isEmpty()) {
+                    int io = Integer.parseInt(values[index], 16);
+                    index++;
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                 }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+                if (index < values.length && values[index] != null) {
+                    position.set(Position.KEY_GEOFENCE, values[index++] + (index < values.length ? values[index++] : ""));
+                }
+                if (index < values.length) {
                     position.set("eventStatus", values[index++]);
+                }
                 if (index < values.length) {
                     position.set("packetType", values[index++]);
                 }
                 break;
             case "ETD":
+                if (index < values.length) {
                     position.set("eventData", values[index++]);
+                }
                 break;
             case "OBD":
+                if (index < values.length) {
                     position.set("obd", values[index++]);
+                }
                 break;
             case "TAG":
+                if (index < values.length) {
                     position.set("tagData", values[index++]);
+                }
                 break;
             case "IWD":
                 while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+                    if (values[index].isEmpty()) {
+                        index++;
+                        continue;
+                    }
+                    int sensorIndex;
+                    try {
+                        sensorIndex = Integer.parseInt(values[index++]);
+                    } catch (NumberFormatException e) {
+                        break;
+                    }
+                    if (index >= values.length) break;
+
+                    int dataType;
+                    try {
+                        dataType = Integer.parseInt(values[index++]);
+                    } catch (NumberFormatException e) {
+                        break;
+                    }
                     if (dataType == 0) {
+                        if (index < values.length) {
                             position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                        }
                     } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
+                        if (index < values.length) {
+                            index++; // skip temperature sensor serial number
+                        }
+                        if (index < values.length) {
                             position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
                         }
                     }
+                }
                 break;
             default:
                 break;
         }
     }
\ No newline at end of file
