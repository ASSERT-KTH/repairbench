diff --git a/tmp/e5c881e4-d5d8-4b9e-9123-e1d32edb20f7_buggy.java b/tmp/3b9ea33c-a9c8-47f9-bc00-89e5c7bebc0d_fixed.java
index 6d50be3..dbba6d1 100644
--- a/tmp/e5c881e4-d5d8-4b9e-9123-e1d32edb20f7_buggy.java
+++ b/tmp/3b9ea33c-a9c8-47f9-bc00-89e5c7bebc0d_fixed.java
@@ -1,194 +1,228 @@
 private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
     List<Position> positions = new LinkedList<>();
 
     buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
     String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
     buf.skipBytes(1 + 3 + 1);
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
     buf.readUnsignedIntLE(); // remaining cache
     int count = buf.readUnsignedShortLE();
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         buf.readUnsignedShortLE(); // length
         buf.readUnsignedShortLE(); // index
 
         int paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             switch (id) {
                 case 0x01:
                     position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                     break;
                 case 0x05:
                     position.setValid(buf.readUnsignedByte() > 0);
                     break;
                 case 0x06:
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
                 case 0x07:
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     break;
                 case 0x14:
                     position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                     break;
                 case 0x15:
                     position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                     break;
                 case 0x47:
                     int lockState = buf.readUnsignedByte();
                     if (lockState > 0) {
                         position.set(Position.KEY_LOCK, lockState == 2);
                     }
                     break;
                 case 0x97:
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                     break;
                 case 0x9D:
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                     break;
                 case 0xFE69:
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     break;
                 default:
                     buf.readUnsignedByte();
                     break;
             }
         }
 
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             switch (id) {
                 case 0x08:
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                     break;
                 case 0x09:
                     position.setCourse(buf.readUnsignedShortLE());
                     break;
                 case 0x0A:
                     position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
                     break;
                 case 0x0B:
                     position.setAltitude(buf.readShortLE());
                     break;
                 case 0x16:
                     position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x19:
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x1A:
                     position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x40:
                     position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
                     break;
                 case 0x91:
                 case 0x92:
                     position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
                     break;
                 case 0x98:
                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
                     break;
                 case 0x99:
                     position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                     break;
                 case 0x9C:
                     position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
                     break;
                 case 0x9F:
                     position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
                     break;
                 case 0xC9:
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
                     break;
                 default:
                     buf.readUnsignedShortLE();
                     break;
             }
         }
 
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             switch (id) {
                 case 0x02:
                     position.setLatitude(buf.readIntLE() * 0.000001);
                     break;
                 case 0x03:
                     position.setLongitude(buf.readIntLE() * 0.000001);
                     break;
                 case 0x04:
                     position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
                     break;
                 case 0x0C:
                 case 0x9B:
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                     break;
                 case 0x0D:
                     position.set("runtime", buf.readUnsignedIntLE());
                     break;
                 case 0x25:
                     position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
                     break;
                 case 0xA0:
                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
                     break;
                 case 0xA2:
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
                     break;
                 default:
                     buf.readUnsignedIntLE();
                     break;
             }
         }
 
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
-                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
-                int length = buf.readUnsignedByte();
+            // First read the length before reading the ID
+            int startIndex = buf.readerIndex();
+            boolean extension = buf.getUnsignedByte(startIndex) == 0xFE;
+            int idSize = extension ? 2 : 1;
+            int id = extension ? buf.getUnsignedShort(startIndex + 1) : buf.getUnsignedByte(startIndex);
+
+            // Get the length byte that comes right after the ID
+            int lengthPos = startIndex + idSize;
+            int length = buf.getUnsignedByte(lengthPos);
+
+            // Skip ID and length bytes
+            buf.skipBytes(idSize + 1);
+
             switch (id) {
                 case 0x2A:
                 case 0x2B:
                 case 0x2C:
                 case 0x2D:
                 case 0x2E:
                 case 0x2F:
                 case 0x30:
                 case 0x31:
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // label
+                    }
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                    }
+                    // Skip remaining bytes if any
+                    length -= 3; // id size (1 or 2) + length byte (1) + label (1) + short (2)
+                    if (length > 0) {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0xFE31:
+                    if (buf.readableBytes() >= 2) {
                         buf.readUnsignedByte(); // alarm protocol
                         buf.readUnsignedByte(); // alarm type
-                        buf.skipBytes(length - 2);
+                    }
+                    length -= 3; // id size (2) + length byte (1) + 2 data bytes
+                    if (length > 0) {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0xFEA8:
+                    if (buf.readableBytes() >= 3) {
                         buf.readUnsignedByte(); // battery status
+                        if (buf.readableBytes() >= 1) {
                             position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                        }
+                        if (buf.readableBytes() >= 1) {
                             buf.readUnsignedByte(); // battery alert
+                        }
+                    }
+                    length -= 4; // id size (2) + length byte (1) + 3 data bytes
+                    if (length > 0) {
+                        buf.skipBytes(length);
+                    }
                     break;
                 default:
-                        buf.skipBytes(length);
+                    buf.skipBytes(Math.min(length, buf.readableBytes()));
                     break;
             }
         }
 
         positions.add(position);
     }
 
     return positions;
 }
\ No newline at end of file
