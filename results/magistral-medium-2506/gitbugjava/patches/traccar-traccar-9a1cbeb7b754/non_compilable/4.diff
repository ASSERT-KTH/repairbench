diff --git a/tmp/3b61e070-5c76-4198-9794-3ddd2bf8aefe_buggy.java b/tmp/1ea2a474-22df-4dc7-9c41-2acfaeed9c4b_fixed.java
index 6d50be3..9b5c832 100644
--- a/tmp/3b61e070-5c76-4198-9794-3ddd2bf8aefe_buggy.java
+++ b/tmp/1ea2a474-22df-4dc7-9c41-2acfaeed9c4b_fixed.java
@@ -1,194 +1,228 @@
 private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
     List<Position> positions = new LinkedList<>();
 
-        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
+    if (buf.readableBytes() < 1) {
+        return null; // Not enough data in the buffer
+    }
+
+    // Find comma position safely
+    int commaIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+    if (commaIndex == -1 || buf.readableBytes() < commaIndex + 1 + 15) {
+        return null; // No comma found or not enough data after comma
+    }
+
+    buf.readerIndex(commaIndex + 1);
+    if (buf.readableBytes() < 15) {
+        return null; // Not enough bytes for IMEI
+    }
     String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
+
+    if (buf.readableBytes() < 1 + 3 + 1) {
+        return null; // Not enough bytes after IMEI
+    }
     buf.skipBytes(1 + 3 + 1);
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
+    // Read remaining cache and count
+    if (buf.readableBytes() < 4 + 2) { // unsignedIntLE(4) + unsignedShortLE(2)
+        return null;
+    }
     buf.readUnsignedIntLE(); // remaining cache
     int count = buf.readUnsignedShortLE();
 
+    // Check if we have enough data for all positions
+    // This is a conservative estimate - individual position decoding will handle its own bounds
+    if (buf.readableBytes() < count * 20) { // Minimum bytes per position estimate
+        return null;
+    }
+
     for (int i = 0; i < count; i++) {
+        // Check if we have enough bytes for basic position structure
+        if (buf.readableBytes() < 2 + 2 + 1) { // length(2) + index(2) + paramCount(1)
+            break;
+        }
+
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         buf.readUnsignedShortLE(); // length
         buf.readUnsignedShortLE(); // index
 
+        // First param block
+        if (buf.readableBytes() < 1) break; // paramCount
         int paramCount = buf.readUnsignedByte();
+        if (buf.readableBytes() < paramCount * 4) { // Estimate of space needed (conservative)
+            break;
+        }
         for (int j = 0; j < paramCount; j++) {
+            if (buf.readableBytes() < 1) break;
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
+            int bytesNeeded = extension ? 3 : 2; // 0xFE marker + 2 bytes for short, or 1 byte for id + 1 byte for value
+            if (buf.readableBytes() < bytesNeeded) break;
+
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             switch (id) {
                 case 0x01:
+                    if (buf.readableBytes() < 1) break;
                     position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                     break;
                 case 0x05:
+                    if (buf.readableBytes() < 1) break;
                     position.setValid(buf.readUnsignedByte() > 0);
                     break;
                 case 0x06:
+                    if (buf.readableBytes() < 1) break;
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
                 case 0x07:
+                    if (buf.readableBytes() < 1) break;
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     break;
                 case 0x14:
+                    if (buf.readableBytes() < 1) break;
                     position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                     break;
                 case 0x15:
+                    if (buf.readableBytes() < 1) break;
                     position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                     break;
                 case 0x47:
+                    if (buf.readableBytes() < 1) break;
                     int lockState = buf.readUnsignedByte();
                     if (lockState > 0) {
                         position.set(Position.KEY_LOCK, lockState == 2);
                     }
                     break;
                 case 0x97:
+                    if (buf.readableBytes() < 1) break;
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                     break;
                 case 0x9D:
+                    if (buf.readableBytes() < 1) break;
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                     break;
                 case 0xFE69:
+                    if (buf.readableBytes() < 1) break;
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     break;
                 default:
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte();
+                    }
                     break;
             }
         }
 
+        // Second param block
+        if (buf.readableBytes() < 1) break;
         paramCount = buf.readUnsignedByte();
+        if (buf.readableBytes() < paramCount * 5) { // Estimate
+            break;
+        }
         for (int j = 0; j < paramCount; j++) {
+            if (buf.readableBytes() < 1) break;
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
+            int bytesNeeded = extension ? 3 : 2; // 0xFE marker + 2 bytes for short
+            if (buf.readableBytes() < bytesNeeded) break;
+
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             switch (id) {
                 case 0x08:
+                    if (buf.readableBytes() < 2) break;
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                     break;
                 case 0x09:
+                    if (buf.readableBytes() < 2) break;
                     position.setCourse(buf.readUnsignedShortLE());
                     break;
                 case 0x0A:
+                    if (buf.readableBytes() < 2) break;
                     position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
                     break;
                 case 0x0B:
+                    if (buf.readableBytes() < 2) break;
                     position.setAltitude(buf.readShortLE());
                     break;
                 case 0x16:
+                    if (buf.readableBytes() < 2) break;
                     position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x19:
+                    if (buf.readableBytes() < 2) break;
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x1A:
+                    if (buf.readableBytes() < 2) break;
                     position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x40:
+                    if (buf.readableBytes() < 2) break;
                     position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
                     break;
                 case 0x91:
                 case 0x92:
+                    if (buf.readableBytes() < 2) break;
                     position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
                     break;
                 case 0x98:
+                    if (buf.readableBytes() < 2) break;
                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
                     break;
                 case 0x99:
+                    if (buf.readableBytes() < 2) break;
                     position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                     break;
                 case 0x9C:
+                    if (buf.readableBytes() < 2) break;
                     position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
                     break;
                 case 0x9F:
+                    if (buf.readableBytes() < 2) break;
                     position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
                     break;
                 case 0xC9:
+                    if (buf.readableBytes() < 2) break;
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
                     break;
                 default:
+                    if (buf.readableBytes() >= 2) {
                         buf.readUnsignedShortLE();
+                    }
                     break;
             }
         }
 
+        // Third param block
+        if (buf.readableBytes() < 1) break;
         paramCount = buf.readUnsignedByte();
+        if (buf.readableBytes() < paramCount * 8) { // Estimate
+            break;
+        }
         for (int j = 0; j < paramCount; j++) {
+            if (buf.readableBytes() < 1) break;
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
+            int bytesNeeded = extension ? 3 : 2; // For ID reading
+            if (buf.readableBytes() < bytesNeeded) break;
+
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             switch (id) {
                 case 0x02:
+                    if (buf.readableBytes() < 4) break;
                     position.setLatitude(buf.readIntLE() * 0.000001);
                     break;
                 case 0x03:
+                    if (buf.readableBytes() < 4) break;
                     position.setLongitude(buf.readIntLE() * 0.000001);
                     break;
                 case 0x04:
+                    if (buf.readableBytes() < 4) break;
                     position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
                     break;
                 case 0x0C:
                 case 0x9B:
-                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
-                        break;
-                    case 0x0D:
-                        position.set("runtime", buf.readUnsignedIntLE());
-                        break;
-                    case 0x25:
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
-                        break;
-                    case 0xA0:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
-                        break;
-                    case 0xA2:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
-                        break;
-                    default:
-                        buf.readUnsignedIntLE();
-                        break;
-                }
-            }
-
-            paramCount = buf.readUnsignedByte();
-            for (int j = 0; j < paramCount; j++) {
-                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
-                int length = buf.readUnsignedByte();
-                switch (id) {
-                    case 0x2A:
-                    case 0x2B:
-                    case 0x2C:
-                    case 0x2D:
-                    case 0x2E:
-                    case 0x2F:
-                    case 0x30:
-                    case 0x31:
-                        buf.readUnsignedByte(); // label
-                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
-                        break;
-                    case 0xFE31:
-                        buf.readUnsignedByte(); // alarm protocol
-                        buf.readUnsignedByte(); // alarm type
-                        buf.skipBytes(length - 2);
-                        break;
-                    case 0xFEA8:
-                        buf.readUnsignedByte(); // battery status
-                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                        buf.readUnsignedByte(); // battery alert
-                        break;
-                    default:
-                        buf.skipBytes(length);
-                        break;
-                }
-            }
-
-            positions.add(position);
-        }
-
-        return positions;
-    }
+                    if (buf.readableBytes() < 4) break;
+                    position.set(Position.KEY_ODOMETER, buf.readUns
\ No newline at end of file
