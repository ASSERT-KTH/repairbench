diff --git a/tmp/72460c0e-67d0-4225-b047-820ff60dc7e5_buggy.java b/tmp/3e2c21bb-1965-4c38-acc1-d2b4b0822cac_fixed.java
index c84c989..8e6a6b4 100644
--- a/tmp/72460c0e-67d0-4225-b047-820ff60dc7e5_buggy.java
+++ b/tmp/3e2c21bb-1965-4c38-acc1-d2b4b0822cac_fixed.java
@@ -1,27 +1,59 @@
 private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
     buf.readUnsignedShortLE(); // length
 
     buf.skipBytes(3); // identification header
     buf.readUnsignedIntLE(); // index
 
     DeviceSession deviceSession = getDeviceSession(
             channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     buf.readUnsignedByte(); // session status
     buf.skipBytes(4); // reserved
-        buf.readUnsignedIntLE(); // date and time
 
-        buf.skipBytes(23); // coordinates block
+    // Read and process timestamp
+    long timestamp = buf.readUnsignedIntLE(); // date and time
+
+    // Process coordinates block (23 bytes)
+    long longitude = buf.readUnsignedIntLE();
+    long latitude = buf.readUnsignedIntLE();
+    buf.readUnsignedShortLE(); // altitude
+    buf.readUnsignedByte(); // position status
+    buf.skipBytes(3); // speed reserve
+    int speed = buf.readUnsignedByte(); // speed
+    buf.readUnsignedShortLE(); // heading
+    buf.skipBytes(6); // reserved
+
+    position.setTime(new Date(timestamp * 1000L)); // Convert to milliseconds
+    position.setLongitude(convertCoordinate(longitude));
+    position.setLatitude(convertCoordinate(latitude));
+    position.setSpeed(speed / 10.0);
 
     buf.skipBytes(3); // data tag header
     decodeMinimalDataSet(position, buf);
 
     return position;
 }
+
+private double convertCoordinate(long value) {
+    // Convert Iridium coordinate format to decimal degrees
+    if (value == 0) {
+        return 0;
+    }
+
+    boolean negative = (value & 0xFFFFFFFF00000000L) != 0; // Check sign bit
+    value = value & 0xFFFFFFFFL;
+
+    long degrees = value / 1000000;
+    long minutes = (value % 1000000) / 10000;
+    double seconds = (value % 10000) / 100.0;
+
+    double result = degrees + minutes / 60.0 + seconds / 3600.0;
+    return negative ? -result : result;
+}
\ No newline at end of file
