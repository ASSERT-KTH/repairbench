diff --git a/tmp/eb5e4969-34fb-4abf-a8c5-8997f8954c6f_buggy.java b/tmp/0170f83d-84c2-48be-a7bc-c3ce024d4c7f_fixed.java
index 23f078d..53c09c4 100644
--- a/tmp/eb5e4969-34fb-4abf-a8c5-8997f8954c6f_buggy.java
+++ b/tmp/0170f83d-84c2-48be-a7bc-c3ce024d4c7f_fixed.java
@@ -1,14 +1,19 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+    int i = 0;
+    while (i < s.length()) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            // Handle supplementary characters properly by getting both char parts
+            char[] chars = Character.toChars(c);
+            String encoded = URLEncoder.encode(new String(chars), UTF_8.name());
+            sb.append(encoded);
+            i += chars.length - 1; // skip the second char of a surrogate pair
         } else {
             sb.append((char) c);
         }
+        i++;
     }
 }
\ No newline at end of file
