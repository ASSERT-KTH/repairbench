diff --git a/tmp/52a7f2ee-4dc8-408c-a6c9-ddb4e4479534_buggy.java b/tmp/8facb996-55f8-4803-a7a8-512059c0638a_fixed.java
index c6164f1..2097501 100644
--- a/tmp/52a7f2ee-4dc8-408c-a6c9-ddb4e4479534_buggy.java
+++ b/tmp/8facb996-55f8-4803-a7a8-512059c0638a_fixed.java
@@ -1,116 +1,194 @@
     private Position decodePosition(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
+        // Add check to ensure there are enough bytes to read the status and event fields
+        if (buf.readableBytes() < 4) {
+            return null;
+        }
+
         int status = buf.readUnsignedShort();
 
         position.setValid(BitUtil.check(status, 15));
 
         position.set(Position.KEY_STATUS, status);
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
         int event = buf.readUnsignedShort();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, event);
 
+        // Ensure enough bytes for date string (12 bytes)
+        if (buf.readableBytes() < 12) {
+            return null;
+        }
+
         String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
+        // Add input validation for the time string
+        if (time.length() != 12) {
+            return null;
+        }
+
+        try {
             DateBuilder dateBuilder = new DateBuilder()
                     .setYear(Integer.parseInt(time.substring(0, 2)))
                     .setMonth(Integer.parseInt(time.substring(2, 4)))
                     .setDay(Integer.parseInt(time.substring(4, 6)))
                     .setHour(Integer.parseInt(time.substring(6, 8)))
                     .setMinute(Integer.parseInt(time.substring(8, 10)))
                     .setSecond(Integer.parseInt(time.substring(10, 12)));
             position.setTime(dateBuilder.getDate());
+        } catch (NumberFormatException | StringIndexOutOfBoundsException e) {
+            return null;
+        }
+
+        // Ensure enough bytes for latitude and longitude (2 integers = 4 bytes each)
+        if (buf.readableBytes() < 8) {
+            return null;
+        }
 
         position.setLongitude(buf.readInt() * 0.00001);
         position.setLatitude(buf.readInt() * 0.00001);
 
+        // Ensure enough bytes for speed, course, altitude (3 unsigned shorts = 6 bytes)
+        if (buf.readableBytes() < 6) {
+            return null;
+        }
+
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
         position.setCourse(buf.readUnsignedShort());
         position.setAltitude(buf.readUnsignedShort());
 
+        // Ensure enough bytes for odometer (1 unsigned short = 2 bytes)
+        if (buf.readableBytes() < 2) {
+            return null;
+        }
+
         position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
         Network network = new Network();
 
         while (buf.readableBytes() > 4) {
+            // Ensure we have enough bytes to read subtype and length (4 bytes)
+            if (buf.readableBytes() < 4) {
+                break;
+            }
+
             int subtype = buf.readUnsignedShort();
             int length = buf.readUnsignedShort() - 4;
+
+            // Ensure we have enough bytes for the content of this subtype
+            if (length < 0 || buf.readableBytes() < length) {
+                break;
+            }
+
             switch (subtype) {
                 case 0x0001:
+                    if (length < 1) break; // Check minimum length needed for this case
                     int coolantTemperature = buf.readUnsignedByte() - 40;
                     if (coolantTemperature <= 215) {
                         position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                     }
+                    if (length < 3) break;
                     int rpm = buf.readUnsignedShort();
                     if (rpm <= 65535) {
                         position.set(Position.KEY_RPM, rpm);
                     }
+                    if (length < 4) break;
                     position.set("averageSpeed", buf.readUnsignedByte());
+                    if (length < 6) break;
                     buf.readUnsignedShort(); // interval fuel consumption
+                    if (length < 8) break;
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
+                    if (length < 10) break;
                     position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
+                    if (length < 12) break;
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
+                    if (length < 13) break;
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
+                    if (length < 17) break;
                     buf.readUnsignedInt(); // trip id
                     break;
                 case 0x0005:
+                    if (length < 1) break;
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                    if (length < 2) break;
                     position.set(Position.KEY_HDOP, buf.readUnsignedByte());
+                    if (length < 6) break;
                     buf.readUnsignedInt(); // run time
                     break;
                 case 0x0009:
+                    if (length < 1) break;
                     position.set(
                             Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
                     break;
                 case 0x0011:
+                    if (length < 4) break;
                     position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
                     break;
                 case 0x0014:
+                    if (length < 1) break;
                     position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
+                    if (length < 2) break;
                     position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
+                    if (length < 3) break;
                     position.set("airTemp", buf.readUnsignedByte() - 40);
+                    if (length < 5) break;
                     position.set("airFlow", buf.readUnsignedShort() * 0.01);
+                    if (length < 6) break;
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
                     break;
                 case 0x0020:
+                    if (length < 1) break;
+                    try {
                         String[] cells = buf.readCharSequence(
                                 length, StandardCharsets.US_ASCII).toString().split("\\+");
                         for (String cell : cells) {
                             String[] values = cell.split("@");
+                            if (values.length >= 4) {
                                 network.addCellTower(CellTower.from(
                                         Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                         Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
                             }
+                        }
+                    } catch (Exception e) {
+                        // Skip invalid cell data
+                    }
                     break;
                 case 0x0021:
+                    if (length < 1) break;
+                    try {
                         String[] points = buf.readCharSequence(
                                 length, StandardCharsets.US_ASCII).toString().split("\\+");
                         for (String point : points) {
                             String[] values = point.split("@");
+                            if (values.length >= 2) {
                                 network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
                             }
+                        }
+                    } catch (Exception e) {
+                        // Skip invalid wifi data
+                    }
                     break;
                 default:
-                    buf.skipBytes(length);
+                    buf.skipBytes(Math.min(length, buf.readableBytes()));
                     break;
             }
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         sendResponse(channel, MSG_POSITION_RSP, index, null);
 
         return position;
     }
\ No newline at end of file
