diff --git a/tmp/96a9c6a0-ee59-4403-9c47-0ac868e3448d_buggy.java b/tmp/7043a9ac-a0ad-40f8-add9-3ce664f4e548_fixed.java
index c6164f1..09e3758 100644
--- a/tmp/96a9c6a0-ee59-4403-9c47-0ac868e3448d_buggy.java
+++ b/tmp/7043a9ac-a0ad-40f8-add9-3ce664f4e548_fixed.java
@@ -1,116 +1,196 @@
 private Position decodePosition(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
+    // Check if we have enough bytes to read the status
+    if (buf.readableBytes() < 2) {
+        return null;
+    }
     int status = buf.readUnsignedShort();
 
     position.setValid(BitUtil.check(status, 15));
 
     position.set(Position.KEY_STATUS, status);
     position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
+    // Check if we have enough bytes to read the event
+    if (buf.readableBytes() < 2) {
+        return null;
+    }
     int event = buf.readUnsignedShort();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, event);
 
+    // Check if we have enough bytes to read the time string
+    if (buf.readableBytes() < 12) {
+        return null;
+    }
     String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
     DateBuilder dateBuilder = new DateBuilder()
             .setYear(Integer.parseInt(time.substring(0, 2)))
             .setMonth(Integer.parseInt(time.substring(2, 4)))
             .setDay(Integer.parseInt(time.substring(4, 6)))
             .setHour(Integer.parseInt(time.substring(6, 8)))
             .setMinute(Integer.parseInt(time.substring(8, 10)))
             .setSecond(Integer.parseInt(time.substring(10, 12)));
     position.setTime(dateBuilder.getDate());
 
+    // Check if we have enough bytes to read longitude and latitude
+    if (buf.readableBytes() < 8) {
+        return null;
+    }
     position.setLongitude(buf.readInt() * 0.00001);
     position.setLatitude(buf.readInt() * 0.00001);
 
+    // Check if we have enough bytes to read speed, course, altitude, and odometer
+    if (buf.readableBytes() < 10) {
+        return null;
+    }
     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
     position.setCourse(buf.readUnsignedShort());
     position.setAltitude(buf.readUnsignedShort());
 
     position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
     Network network = new Network();
 
-        while (buf.readableBytes() > 4) {
+    // Read the remaining bytes in chunks of at least 4 bytes (for subtype and length)
+    while (buf.readableBytes() >= 4) {
+        int startIndex = buf.readerIndex();
+        try {
             int subtype = buf.readUnsignedShort();
+            if (buf.readableBytes() < 2) {
+                buf.readerIndex(startIndex);
+                break;
+            }
             int length = buf.readUnsignedShort() - 4;
+
+            // Ensure we have enough bytes to read the entire packet
+            if (buf.readableBytes() < length) {
+                buf.readerIndex(startIndex);
+                break;
+            }
+
             switch (subtype) {
                 case 0x0001:
+                    if (buf.readableBytes() < 16) {
+                        buf.skipBytes(length);
+                        break;
+                    }
                     int coolantTemperature = buf.readUnsignedByte() - 40;
                     if (coolantTemperature <= 215) {
                         position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                     }
                     int rpm = buf.readUnsignedShort();
                     if (rpm <= 65535) {
                         position.set(Position.KEY_RPM, rpm);
                     }
                     position.set("averageSpeed", buf.readUnsignedByte());
                     buf.readUnsignedShort(); // interval fuel consumption
+                    if (buf.readableBytes() >= 6) { // 2 + 2 + 1 bytes remaining for this case
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                         buf.readUnsignedInt(); // trip id
+                    } else {
+                        buf.skipBytes(length - (buf.readerIndex() - startIndex - 4));
+                    }
                     break;
                 case 0x0005:
+                    if (buf.readableBytes() >= 6) { // Enough for 1 byte + 1 byte + 4 bytes
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                         buf.readUnsignedInt(); // run time
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x0009:
+                    if (buf.readableBytes() >= length) {
                         position.set(
                                 Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x0011:
+                    if (buf.readableBytes() >= 4) {
                         position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x0014:
+                    if (buf.readableBytes() >= 7) { // Enough for 1 + 1 + 2 + 1 bytes
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                         position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                         position.set("airTemp", buf.readUnsignedByte() - 40);
                         position.set("airFlow", buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x0020:
+                    if (buf.readableBytes() >= length) {
                         String[] cells = buf.readCharSequence(
                                 length, StandardCharsets.US_ASCII).toString().split("\\+");
                         for (String cell : cells) {
+                            try {
                                 String[] values = cell.split("@");
+                                if (values.length >= 4) {
                                     network.addCellTower(CellTower.from(
                                             Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                             Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
                                 }
+                            } catch (Exception ignored) {
+                            }
+                        }
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x0021:
+                    if (buf.readableBytes() >= length) {
                         String[] points = buf.readCharSequence(
                                 length, StandardCharsets.US_ASCII).toString().split("\\+");
                         for (String point : points) {
+                            try {
                                 String[] values = point.split("@");
+                                if (values.length >= 2) {
                                     network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
                                 }
+                            } catch (Exception ignored) {
+                            }
+                        }
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 default:
                     buf.skipBytes(length);
                     break;
             }
+        } catch (Exception e) {
+            buf.readerIndex(startIndex + 4); // skip subtype and length if any error occurs
+            break;
+        }
     }
 
     if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
         position.setNetwork(network);
     }
 
     sendResponse(channel, MSG_POSITION_RSP, index, null);
 
     return position;
 }
\ No newline at end of file
