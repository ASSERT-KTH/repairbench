diff --git a/tmp/69d0228d-a5f7-4de8-a3bc-4c3e96848e76_buggy.java b/tmp/0a89a5ed-9038-4f65-adeb-d2f734e290e6_fixed.java
index 3da904d..e93355c 100644
--- a/tmp/69d0228d-a5f7-4de8-a3bc-4c3e96848e76_buggy.java
+++ b/tmp/0a89a5ed-9038-4f65-adeb-d2f734e290e6_fixed.java
@@ -1,73 +1,130 @@
 private Position decodePosition(DeviceSession deviceSession, String data) {
-
     Parser parser = new Parser(PATTERN_POSITION, data);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
     position.setCourse(parser.nextDouble(0));
     position.setAltitude(parser.nextDouble(0));
 
     position.set(Position.KEY_SATELLITES, parser.nextInt(0));
     position.set(Position.KEY_RSSI, parser.nextInt(0));
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
     position.set(Position.KEY_STEPS, parser.nextInt(0));
 
     int status = parser.nextHexInt(0);
     position.set(Position.KEY_ALARM, decodeAlarm(status));
     if (BitUtil.check(status, 4)) {
         position.set(Position.KEY_MOTION, true);
     }
 
     String[] values = parser.next().split(",");
     int index = 0;
 
     Network network = new Network();
 
-        int cellCount = Integer.parseInt(values[index++]);
+    int cellCount = 0;
+    try {
+        if (index < values.length && !values[index].isEmpty()) {
+            cellCount = Integer.parseInt(values[index++]);
+        }
+    } catch (NumberFormatException e) {
+        // Skip if can't parse cellCount
+    }
+
+    try {
         if (cellCount > 0) {
             index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+            int mcc = 0;
+            int mnc = 0;
+            if (index < values.length && !values[index].isEmpty()) {
+                mcc = Integer.parseInt(values[index++]);
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                mnc = Integer.parseInt(values[index++]);
+            }
 
-            for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
-                String rssi = values[index++];
+            for (int i = 0; i < cellCount && index + 3 <= values.length; i++) {
+                try {
+                    int lac = 0;
+                    int cid = 0;
+                    String rssi = "";
+
+                    if (!values[index].isEmpty()) {
+                        lac = Integer.parseInt(values[index++]);
+                    } else {
+                        index++;
+                        continue;
+                    }
+
+                    if (!values[index].isEmpty()) {
+                        cid = Integer.parseInt(values[index++]);
+                    } else {
+                        index++;
+                        continue;
+                    }
+
+                    rssi = values[index++];
                     if (!rssi.isEmpty()) {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+                        try {
+                            int rssiValue = Integer.parseInt(rssi);
+                            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssiValue));
+                        } catch (NumberFormatException e) {
+                            network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
+                        }
                     } else {
                         network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                     }
+                } catch (Exception e) {
+                    // Skip this cell if parsing fails
+                    index += 3;
                 }
             }
+        }
+    } catch (Exception e) {
+        // Ignore cell parsing errors
+    }
 
     if (index < values.length && !values[index].isEmpty()) {
+        try {
             int wifiCount = Integer.parseInt(values[index++]);
 
-            for (int i = 0; i < wifiCount; i++) {
+            for (int i = 0; i < wifiCount && index + 3 <= values.length; i++) {
+                try {
                     index += 1; // wifi name
                     String macAddress = values[index++];
                     String rssi = values[index++];
                     if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
-                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+                        try {
+                            int rssiValue = Integer.parseInt(rssi);
+                            network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, rssiValue));
+                        } catch (NumberFormatException e) {
+                            // Skip if rssi is not a valid number
                         }
                     }
+                } catch (Exception e) {
+                    // Skip this wifi entry if parsing fails
+                    index += 3;
+                }
+            }
+        } catch (NumberFormatException e) {
+            // Skip if wifiCount parsing fails
+        }
     }
 
     if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
         position.setNetwork(network);
     }
 
     return position;
 }
\ No newline at end of file
