diff --git a/tmp/1f7a97ce-8314-4d0b-a4c8-a2e2e5c6e67a_buggy.java b/tmp/23ee970b-22be-4764-a368-e84b7b6a4816_fixed.java
index 3da904d..bb34544 100644
--- a/tmp/1f7a97ce-8314-4d0b-a4c8-a2e2e5c6e67a_buggy.java
+++ b/tmp/23ee970b-22be-4764-a368-e84b7b6a4816_fixed.java
@@ -1,73 +1,95 @@
 private Position decodePosition(DeviceSession deviceSession, String data) {
 
     Parser parser = new Parser(PATTERN_POSITION, data);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
     position.setCourse(parser.nextDouble(0));
     position.setAltitude(parser.nextDouble(0));
 
     position.set(Position.KEY_SATELLITES, parser.nextInt(0));
     position.set(Position.KEY_RSSI, parser.nextInt(0));
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
     position.set(Position.KEY_STEPS, parser.nextInt(0));
 
     int status = parser.nextHexInt(0);
     position.set(Position.KEY_ALARM, decodeAlarm(status));
     if (BitUtil.check(status, 4)) {
         position.set(Position.KEY_MOTION, true);
     }
 
     String[] values = parser.next().split(",");
     int index = 0;
 
     Network network = new Network();
 
+    if (index < values.length && !values[index].isEmpty()) {
+        try {
             int cellCount = Integer.parseInt(values[index++]);
             if (cellCount > 0) {
                 index += 1; // timing advance
+                if (index < values.length) {
                     int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
                     int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
 
-            for (int i = 0; i < cellCount; i++) {
+                    for (int i = 0; i < cellCount && index < values.length; i++) {
+                        if (index + 3 > values.length) break; // not enough values left
                         int lac = Integer.parseInt(values[index++]);
                         int cid = Integer.parseInt(values[index++]);
                         String rssi = values[index++];
-                if (!rssi.isEmpty()) {
+                        if (!rssi.isEmpty() && !rssi.equals("FFFF")) {
+                            try {
                                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+                            } catch (NumberFormatException e) {
+                                // Skip invalid RSSI values
+                            }
                         } else {
                             network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                         }
                     }
                 }
+            }
+        } catch (NumberFormatException e) {
+            // Skip cell tower parsing if format is invalid
+        }
+    }
 
     if (index < values.length && !values[index].isEmpty()) {
+        try {
             int wifiCount = Integer.parseInt(values[index++]);
 
-            for (int i = 0; i < wifiCount; i++) {
+            for (int i = 0; i < wifiCount && index < values.length; i++) {
+                if (index + 3 > values.length) break; // not enough values left
                 index += 1; // wifi name
                 String macAddress = values[index++];
                 String rssi = values[index++];
                 if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
+                    try {
                         network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+                    } catch (NumberFormatException e) {
+                        // Skip invalid RSSI values
                     }
                 }
             }
+        } catch (NumberFormatException e) {
+            // Skip wifi parsing if format is invalid
+        }
+    }
 
     if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
         position.setNetwork(network);
     }
 
     return position;
 }
\ No newline at end of file
