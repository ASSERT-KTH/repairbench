diff --git a/tmp/6c3dc55d-8110-4f69-b269-d8c56c02230f_buggy.java b/tmp/4d5ec7a1-258a-4368-bb63-8fef8ae60cdd_fixed.java
index 3da904d..0e73a64 100644
--- a/tmp/6c3dc55d-8110-4f69-b269-d8c56c02230f_buggy.java
+++ b/tmp/4d5ec7a1-258a-4368-bb63-8fef8ae60cdd_fixed.java
@@ -1,73 +1,93 @@
 private Position decodePosition(DeviceSession deviceSession, String data) {
-
     Parser parser = new Parser(PATTERN_POSITION, data);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
     position.setCourse(parser.nextDouble(0));
     position.setAltitude(parser.nextDouble(0));
 
     position.set(Position.KEY_SATELLITES, parser.nextInt(0));
     position.set(Position.KEY_RSSI, parser.nextInt(0));
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
     position.set(Position.KEY_STEPS, parser.nextInt(0));
 
     int status = parser.nextHexInt(0);
     position.set(Position.KEY_ALARM, decodeAlarm(status));
     if (BitUtil.check(status, 4)) {
         position.set(Position.KEY_MOTION, true);
     }
 
     String[] values = parser.next().split(",");
     int index = 0;
 
     Network network = new Network();
 
+    try {
         int cellCount = Integer.parseInt(values[index++]);
         if (cellCount > 0) {
             index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+            int mcc = !values[index].isEmpty() && !values[index].equals("FFFF") ? Integer.parseInt(values[index++]) : 0;
+            int mnc = !values[index].isEmpty() && !values[index].equals("FFFF") ? Integer.parseInt(values[index++]) : 0;
 
             for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
+                if (index >= values.length) break; // prevent ArrayIndexOutOfBoundsException
+                String lacStr = values[index++];
+                if (lacStr.isEmpty() || lacStr.equals("FFFF")) continue;
+
+                String cidStr = values[index++];
+                if (cidStr.isEmpty() || cidStr.equals("FFFF")) continue;
+
                 String rssi = values[index++];
-                if (!rssi.isEmpty()) {
+                int lac = Integer.parseInt(lacStr);
+                int cid = Integer.parseInt(cidStr);
+
+                if (!rssi.isEmpty() && !rssi.equals("FFFF")) {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
                 } else {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                 }
             }
         }
+    } catch (NumberFormatException e) {
+        // Handle invalid number format (like "FFFF") by skipping or using default values
+    }
 
     if (index < values.length && !values[index].isEmpty()) {
+        try {
             int wifiCount = Integer.parseInt(values[index++]);
 
             for (int i = 0; i < wifiCount; i++) {
+                if (index >= values.length) break; // prevent ArrayIndexOutOfBoundsException
                 index += 1; // wifi name
+                if (index >= values.length) break;
+
                 String macAddress = values[index++];
+                if (index >= values.length) break;
+
                 String rssi = values[index++];
-                if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
+                if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty() && !rssi.equals("FFFF")) {
                     network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
                 }
             }
+        } catch (NumberFormatException e) {
+            // Handle invalid number format similarly
+        }
     }
 
     if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
         position.setNetwork(network);
     }
 
     return position;
 }
\ No newline at end of file
