diff --git a/tmp/bfe73bf3-b62f-4d0e-a572-73c4bd54192f_buggy.java b/tmp/ce4ac083-85f2-49d7-a9ef-b46b2be0bfff_fixed.java
index 3da904d..8550815 100644
--- a/tmp/bfe73bf3-b62f-4d0e-a572-73c4bd54192f_buggy.java
+++ b/tmp/ce4ac083-85f2-49d7-a9ef-b46b2be0bfff_fixed.java
@@ -1,73 +1,102 @@
     private Position decodePosition(DeviceSession deviceSession, String data) {
 
         Parser parser = new Parser(PATTERN_POSITION, data);
         if (!parser.matches()) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
         position.setValid(parser.next().equals("A"));
         position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
         position.setCourse(parser.nextDouble(0));
         position.setAltitude(parser.nextDouble(0));
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_RSSI, parser.nextInt(0));
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
         position.set(Position.KEY_STEPS, parser.nextInt(0));
 
         int status = parser.nextHexInt(0);
         position.set(Position.KEY_ALARM, decodeAlarm(status));
         if (BitUtil.check(status, 4)) {
             position.set(Position.KEY_MOTION, true);
         }
 
         String[] values = parser.next().split(",");
         int index = 0;
 
         Network network = new Network();
 
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
                 int cellCount = Integer.parseInt(values[index++]);
                 if (cellCount > 0) {
                     index += 1; // timing advance
                     int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
                     int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
 
                     for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
+                        if (index >= values.length) break; // added safety check
+                        // Handle case where values[index] might be "FFFF" or similar
+                        int lac;
+                        try {
+                            lac = Integer.parseInt(values[index++]);
+                        } catch (NumberFormatException e) {
+                            // If parsing fails (like with "FFFF"), skip this cell tower
+                            index += 3; // skip cid and rssi as well
+                            continue;
+                        }
+
                         int cid = Integer.parseInt(values[index++]);
                         String rssi = values[index++];
                         if (!rssi.isEmpty()) {
+                            try {
                                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+                            } catch (NumberFormatException e) {
+                                network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
+                            }
                         } else {
                             network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                         }
                     }
                 }
+            } catch (NumberFormatException e) {
+                // Skip cell information if parsing fails
+            }
+        }
 
         if (index < values.length && !values[index].isEmpty()) {
+            try {
                 int wifiCount = Integer.parseInt(values[index++]);
 
                 for (int i = 0; i < wifiCount; i++) {
+                    if (index >= values.length) break; // added safety check
                     index += 1; // wifi name
                     String macAddress = values[index++];
                     String rssi = values[index++];
                     if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
+                        try {
                             network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+                        } catch (NumberFormatException e) {
+                            // Skip invalid RSSI values
                         }
                     }
                 }
+            } catch (NumberFormatException e) {
+                // Skip wifi information if parsing fails
+            }
+        }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         return position;
     }
\ No newline at end of file
