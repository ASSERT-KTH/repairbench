diff --git a/tmp/4ed8cd4e-f31f-4519-b1f1-4960c8cb7079_buggy.java b/tmp/6f11329a-e20c-4de0-886f-c05539a8e264_fixed.java
index 47a8941..11fc762 100644
--- a/tmp/4ed8cd4e-f31f-4519-b1f1-4960c8cb7079_buggy.java
+++ b/tmp/6f11329a-e20c-4de0-886f-c05539a8e264_fixed.java
@@ -1,53 +1,60 @@
 /**
  * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
     // Modify the container so it now refers the class. Container can be a class or package.
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
     JClassContainer grandParent = parent.parentContainer();
     // Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
     // FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
         // Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
         classes = getPrivateField(grandParentClass, "classes");
     }
     else {
         JPackage grandParentPackage = (JPackage) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
         classes = getPrivateField(grandParentPackage, "classes");
 
         // In this scenario class should have "static" modifier reset otherwise it won't compile:
+        if ((clazz.mods().getValue() & JMod.STATIC) != 0) {
             setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
+        }
+    }
 
+    // First remove the class from its current parent's collection
+    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+    if (parentClasses != null) {
+        parentClasses.remove(clazz.name());
+    }
+
+    // Handle potential name collision
+    String newName = clazz.name();
+    if (classes.containsKey(newName)) {
+        String originalName = newName;
+        newName = parent.name() + "_" + originalName;
+        writeSummary("\tRenaming class " + clazz.fullName() + " to class " + newName);
+        setPrivateField(clazz, "name", newName);
+    }
+
+    classes.put(newName, clazz);
+
+    // Finally modify the class so that it refers back the container:
+    setPrivateField(clazz, "outer", grandParent);
+
+    // Also update the class in the outline if it exists there
     for (ClassOutline classOutline : outline.getClasses()) {
         if (classOutline.implClass == clazz) {
-					XSComponent sc = classOutline.target.getSchemaComponent();
-
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
-					setPrivateField(sc, "anonymous", Boolean.FALSE);
-
+            classOutline.implClass = clazz; // Force update of any cached references
             break;
         }
     }
 }
\ No newline at end of file
-
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
-		}
-
-		classes.put(clazz.name(), clazz);
-
-		// Finally modify the class so that it refers back the container:
-		setPrivateField(clazz, "outer", grandParent);
-	}
