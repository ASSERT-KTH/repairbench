diff --git a/tmp/b31ddfe4-ec7d-404f-ac1f-bd0bc9ed5590_buggy.java b/tmp/a9d11994-fc5d-42fc-943a-b4189096237b_fixed.java
index 47a8941..017f542 100644
--- a/tmp/b31ddfe4-ec7d-404f-ac1f-bd0bc9ed5590_buggy.java
+++ b/tmp/a9d11994-fc5d-42fc-943a-b4189096237b_fixed.java
@@ -1,53 +1,55 @@
-	/**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
-	 */
 	private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
 		// Modify the container so it now refers the class. Container can be a class or package.
 		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
 		JClassContainer grandParent = parent.parentContainer();
 		// Allows to track class name collisions:
 		Map<String, JDefinedClass> classes;
 
 		// FIXME: Pending https://java.net/jira/browse/JAXB-957
 		if (grandParent.isClass()) {
 			// Element class should be added as its container child:
 			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
 			classes = getPrivateField(grandParentClass, "classes");
 		}
 		else {
 			JPackage grandParentPackage = (JPackage) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
 			classes = getPrivateField(grandParentPackage, "classes");
 
 			// In this scenario class should have "static" modifier reset otherwise it won't compile:
 			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
 			for (ClassOutline classOutline : outline.getClasses()) {
 				if (classOutline.implClass == clazz) {
 					XSComponent sc = classOutline.target.getSchemaComponent();
 
 					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+					if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {
 						setPrivateField(sc, "anonymous", Boolean.FALSE);
-
+					}
 					break;
 				}
 			}
 		}
 
-		if (classes.containsKey(clazz.name())) {
+		if (parent.parentContainer() == grandParent && classes.containsKey(clazz.name())) {
 			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
 			setPrivateField(clazz, "name", parent.name() + clazz.name());
 		}
 
 		classes.put(clazz.name(), clazz);
 
 		// Finally modify the class so that it refers back the container:
 		setPrivateField(clazz, "outer", grandParent);
+
+		// Remove the class from its original parent container
+		Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+		if (parentClasses != null) {
+			parentClasses.remove(clazz.name());
+		}
 	}
\ No newline at end of file
