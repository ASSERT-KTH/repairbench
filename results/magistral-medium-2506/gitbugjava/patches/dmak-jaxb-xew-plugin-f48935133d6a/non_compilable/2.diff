diff --git a/tmp/99cd1ead-1f28-4ac9-ac29-be64c90bb726_buggy.java b/tmp/fc2b4dd5-3dd3-4f90-ad55-e94944a1e1a9_fixed.java
index 47a8941..3e7957b 100644
--- a/tmp/99cd1ead-1f28-4ac9-ac29-be64c90bb726_buggy.java
+++ b/tmp/fc2b4dd5-3dd3-4f90-ad55-e94944a1e1a9_fixed.java
@@ -1,53 +1,52 @@
 /**
  * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
     // Modify the container so it now refers the class. Container can be a class or package.
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
     JClassContainer grandParent = parent.parentContainer();
     // Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
     // FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
         // Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
         classes = getPrivateField(grandParentClass, "classes");
     }
     else {
         JPackage grandParentPackage = (JPackage) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
         classes = getPrivateField(grandParentPackage, "classes");
 
         // In this scenario class should have "static" modifier reset otherwise it won't compile:
+        if (clazz.isStatic()) {
             setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
-
-			for (ClassOutline classOutline : outline.getClasses()) {
-				if (classOutline.implClass == clazz) {
-					XSComponent sc = classOutline.target.getSchemaComponent();
-
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
-					setPrivateField(sc, "anonymous", Boolean.FALSE);
-
-					break;
-				}
         }
     }
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+    // First remove the class from its current parent if it exists
+    if (parent != null) {
+        Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+        parentClasses.remove(clazz.name());
     }
 
-		classes.put(clazz.name(), clazz);
+    String originalName = clazz.name();
+    if (classes.containsKey(originalName)) {
+        writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + originalName);
+        String newName = parent.name() + originalName;
+        setPrivateField(clazz, "name", newName);
+        // Update the map key manually if the name was changed
+        classes.put(newName, classes.remove(originalName));
+    } else {
+        classes.put(originalName, clazz);
+    }
 
     // Finally modify the class so that it refers back the container:
     setPrivateField(clazz, "outer", grandParent);
 }
\ No newline at end of file
