diff --git a/tmp/2ff2ebe5-fa69-46ed-b973-60d9727c0711_buggy.java b/tmp/3d94de1d-220f-4d3f-bdba-71f1a13e8628_fixed.java
index a4ebaaa..54c88e2 100644
--- a/tmp/2ff2ebe5-fa69-46ed-b973-60d9727c0711_buggy.java
+++ b/tmp/3d94de1d-220f-4d3f-bdba-71f1a13e8628_fixed.java
@@ -1,63 +1,88 @@
 private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
-
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
     position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
+    if (buf.readableBytes() > 0) {  // Added check to prevent empty buffer access
         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+    }
+    if (buf.readableBytes() > 0) {
         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+    }
+    if (buf.readableBytes() > 0) {
         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
+    }
 
+    if (buf.readableBytes() > 0) {
         int battery = buf.readUnsignedByte();
         if (battery <= 100) {
             position.set(Position.KEY_BATTERY_LEVEL, battery);
         } else if (battery == 0xAA) {
             position.set(Position.KEY_CHARGE, true);
         }
+    }
 
+    if (buf.readableBytes() >= 6) {  // Need 6 bytes for cell tower info
         position.setNetwork(new Network(CellTower.fromCidLac(
                 getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
+    }
 
+    if (buf.readableBytes() >= 1) {  // Need at least 1 byte for product
         int product = buf.readUnsignedByte();
+        if (buf.readableBytes() >= 2) {  // Need 2 bytes for status
             int status = buf.readUnsignedShort();
+            if (buf.readableBytes() >= 2) {  // Need 2 bytes for alarm
                 int alarm = buf.readUnsignedShort();
 
                 if (product == 1 || product == 2) {
                     if (BitUtil.check(alarm, 0)) {
                         position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
                     }
                 } else if (product == 3) {
                     position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
                     if (BitUtil.check(alarm, 1)) {
                         position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
                     }
                     if (BitUtil.check(alarm, 2)) {
                         position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
                     }
                     if (BitUtil.check(alarm, 3)) {
                         position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
                     }
                 }
 
                 position.set(Position.KEY_STATUS, status);
 
                 while (buf.readableBytes() > 2) {
                     int id = buf.readUnsignedByte();
                     int length = buf.readUnsignedByte();
+                    if (buf.readableBytes() >= length) {  // Check if enough bytes are available
                         switch (id) {
                             case 0x02:
+                                if (buf.readableBytes() >= 2) {  // Need 2 bytes for short
                                     position.setAltitude(buf.readShort());
+                                }
                                 break;
                             case 0x0C:
+                                if (buf.readableBytes() >= 6) {  // Need 6 bytes for slice
                                     position.set("gyro", ByteBufUtil.hexDump(buf.readSlice(6)));
+                                }
                                 break;
                             default:
+                                if (buf.readableBytes() >= length) {
                                     buf.skipBytes(length);
+                                }
                                 break;
                         }
+                    } else {
+                        break;  // Exit loop if not enough bytes left
+                    }
+                }
+            }
+        }
     }
 
     return position;
 }
\ No newline at end of file
