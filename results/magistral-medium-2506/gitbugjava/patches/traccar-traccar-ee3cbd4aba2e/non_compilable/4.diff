diff --git a/tmp/d4f3fdfd-caca-40bc-a48d-468fb21fe429_buggy.java b/tmp/e9463d30-c149-46a1-9014-e14417550e56_fixed.java
index a4ebaaa..853522c 100644
--- a/tmp/d4f3fdfd-caca-40bc-a48d-468fb21fe429_buggy.java
+++ b/tmp/e9463d30-c149-46a1-9014-e14417550e56_fixed.java
@@ -1,63 +1,79 @@
 private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
-
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
     position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
+    // Fix: Check if buffer has enough bytes before reading
+    if (buf.readableBytes() >= 3) { // 1 byte for RSSI + 1 byte for satellites + 4 bytes for odometer?
         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
 
         int battery = buf.readUnsignedByte();
         if (battery <= 100) {
             position.set(Position.KEY_BATTERY_LEVEL, battery);
         } else if (battery == 0xAA) {
             position.set(Position.KEY_CHARGE, true);
         }
 
+        if (buf.readableBytes() >= 6) { // Check if there are enough bytes for cell tower info
             position.setNetwork(new Network(CellTower.fromCidLac(
                     getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
+        }
 
+        if (buf.readableBytes() >= 5) { // Check for product, status, and alarm (2 + 2 + 1 bytes)
             int product = buf.readUnsignedByte();
             int status = buf.readUnsignedShort();
             int alarm = buf.readUnsignedShort();
 
             if (product == 1 || product == 2) {
                 if (BitUtil.check(alarm, 0)) {
                     position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
                 }
             } else if (product == 3) {
                 position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
                 if (BitUtil.check(alarm, 1)) {
                     position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
                 }
                 if (BitUtil.check(alarm, 2)) {
                     position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
                 }
                 if (BitUtil.check(alarm, 3)) {
                     position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
                 }
             }
-
             position.set(Position.KEY_STATUS, status);
+        }
 
         while (buf.readableBytes() > 2) {
             int id = buf.readUnsignedByte();
             int length = buf.readUnsignedByte();
+            if (buf.readableBytes() < length) {
+                break; // Not enough bytes left for this attribute
+            }
             switch (id) {
                 case 0x02:
+                    if (length >= 2) {
                         position.setAltitude(buf.readShort());
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x0C:
+                    if (length >= 6) {
                         position.set("gyro", ByteBufUtil.hexDump(buf.readSlice(6)));
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 default:
                     buf.skipBytes(length);
                     break;
             }
         }
+    }
 
     return position;
 }
\ No newline at end of file
