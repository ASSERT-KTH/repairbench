diff --git a/tmp/50502bd4-ec24-4f1b-b93b-ea5de8ce294a_buggy.java b/tmp/427b672a-fd26-448b-b664-8e4b6372f1ca_fixed.java
index 2a0dceb..cbb9059 100644
--- a/tmp/50502bd4-ec24-4f1b-b93b-ea5de8ce294a_buggy.java
+++ b/tmp/427b672a-fd26-448b-b664-8e4b6372f1ca_fixed.java
@@ -1,68 +1,115 @@
 private Position decode4(
         Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
     int index = 0;
 
+    if (values.length < index + 1) return null;
     String type = values[index++].substring(5);
 
     if (!type.equals("STT") && !type.equals("ALT")) {
         return null;
     }
 
+    if (values.length < index + 1) return null;
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_TYPE, type);
 
+    if (values.length < index + 1) return null;
     position.set(Position.KEY_VERSION_FW, values[index++]);
     index += 1; // model
 
     Network network = new Network();
 
+    try {
         for (int i = 0; i < 7; i++) {
+            if (values.length <= index + 3) break; // Not enough data for cell tower info
+
             int cid = Integer.parseInt(values[index++]);
             int mcc = Integer.parseInt(values[index++]);
             int mnc = Integer.parseInt(values[index++]);
             int lac, rssi;
             if (i == 0) {
+                if (values.length <= index + 1) break;
                 rssi = Integer.parseInt(values[index++]);
+                if (values.length <= index) break;
                 lac = Integer.parseInt(values[index++]);
             } else {
+                if (values.length <= index + 1) break;
                 lac = Integer.parseInt(values[index++]);
+                if (values.length <= index) break;
                 rssi = Integer.parseInt(values[index++]);
             }
+            if (values.length > index) {
                 index += 1; // timing advance
+            }
             if (cid > 0) {
                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
             }
         }
+    } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
+        // Skip network info if invalid
+    }
 
     position.setNetwork(network);
 
+    try {
+        if (values.length >= index + 1) {
             position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+        }
+        if (values.length >= index + 1) {
             position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
+        }
+        if (values.length >= index + 1) {
             position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
+        }
+        if (values.length >= index + 1) {
             position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
+        }
 
-        if (values[index].length() == 3) {
+        if (values.length >= index + 1 && values[index].length() == 3) {
             index += 1; // collaborative network
         }
 
+        if (values.length >= index + 2) {
+            try {
                 DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
                 dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
+                String datePart = values[index];
+                String timePart = values[index + 1];
+                if (datePart != null && timePart != null && !datePart.isEmpty() && !timePart.isEmpty()) {
+                    position.setTime(dateFormat.parse(datePart + timePart));
+                } else {
+                    position.setTime(new Date(0));
+                }
+                index += 2;
+            } catch (ParseException e) {
+                position.setTime(new Date(0));
+                index += 2;
+            }
+        }
 
+        if (values.length >= index + 4) {
             position.setLatitude(Double.parseDouble(values[index++]));
             position.setLongitude(Double.parseDouble(values[index++]));
             position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
             position.setCourse(Double.parseDouble(values[index++]));
 
+            if (values.length >= index + 1) {
                 position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+            }
 
+            if (values.length >= index + 1) {
                 position.setValid(values[index++].equals("1"));
+            }
+        }
+    } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
+        // Handle parsing errors gracefully
+    }
 
     return position;
 }
\ No newline at end of file
