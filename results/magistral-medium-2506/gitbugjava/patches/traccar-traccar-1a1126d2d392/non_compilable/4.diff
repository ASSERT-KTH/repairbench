diff --git a/tmp/c3abb75a-7542-4a93-9dc0-20bea63de2fb_buggy.java b/tmp/ef5e73b1-4248-40c6-8c78-39530e0335bd_fixed.java
index 2a0dceb..c669188 100644
--- a/tmp/c3abb75a-7542-4a93-9dc0-20bea63de2fb_buggy.java
+++ b/tmp/ef5e73b1-4248-40c6-8c78-39530e0335bd_fixed.java
@@ -1,68 +1,92 @@
     private Position decode4(
             Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
         int index = 0;
 
         String type = values[index++].substring(5);
 
         if (!type.equals("STT") && !type.equals("ALT")) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
         position.set(Position.KEY_TYPE, type);
 
         position.set(Position.KEY_VERSION_FW, values[index++]);
         index += 1; // model
 
         Network network = new Network();
 
         for (int i = 0; i < 7; i++) {
             int cid = Integer.parseInt(values[index++]);
             int mcc = Integer.parseInt(values[index++]);
             int mnc = Integer.parseInt(values[index++]);
             int lac, rssi;
             if (i == 0) {
                 rssi = Integer.parseInt(values[index++]);
                 lac = Integer.parseInt(values[index++]);
             } else {
                 lac = Integer.parseInt(values[index++]);
                 rssi = Integer.parseInt(values[index++]);
             }
             index += 1; // timing advance
             if (cid > 0) {
                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
             }
         }
 
         position.setNetwork(network);
 
         position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
         position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
         position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
         position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
 
         if (values[index].length() == 3) {
             index += 1; // collaborative network
         }
 
+        // Check if we have enough values for date/time
+        if (index + 1 >= values.length) {
+            return null; // or handle error appropriately
+        }
+
+        String dateStr = values[index++];
+        String timeStr = values[index++];
+
+        if (dateStr.isEmpty() || timeStr.isEmpty()) {
+            return null; // or handle error appropriately
+        }
+
+        // Ensure date is 8 chars and time is 8 chars (including colons)
+        if (dateStr.length() != 8 || !timeStr.contains(":")) {
+            return null; // or handle error appropriately
+        }
+
+        // If time is missing colons, assume it's HHmmss format
+        if (!timeStr.contains(":")) {
+            if (timeStr.length() == 6) {
+                timeStr = timeStr.substring(0, 2) + ":" + timeStr.substring(2, 4) + ":" + timeStr.substring(4);
+            }
+        }
+
         DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
+        position.setTime(dateFormat.parse(dateStr + timeStr.substring(timeStr.indexOf(':') - 2)));
 
         position.setLatitude(Double.parseDouble(values[index++]));
         position.setLongitude(Double.parseDouble(values[index++]));
         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
         position.setCourse(Double.parseDouble(values[index++]));
 
         position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
 
         position.setValid(values[index++].equals("1"));
 
         return position;
     }
\ No newline at end of file
