diff --git a/tmp/1aa8337c-16e4-4862-bac8-16cd245fc63b_buggy.java b/tmp/e5790e59-a2df-4ab9-b4e7-563ab8b6b565_fixed.java
index 2a0dceb..be8e802 100644
--- a/tmp/1aa8337c-16e4-4862-bac8-16cd245fc63b_buggy.java
+++ b/tmp/e5790e59-a2df-4ab9-b4e7-563ab8b6b565_fixed.java
@@ -1,68 +1,94 @@
     private Position decode4(
             Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
         int index = 0;
 
         String type = values[index++].substring(5);
 
         if (!type.equals("STT") && !type.equals("ALT")) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
         position.set(Position.KEY_TYPE, type);
 
         position.set(Position.KEY_VERSION_FW, values[index++]);
         index += 1; // model
 
         Network network = new Network();
 
         for (int i = 0; i < 7; i++) {
             int cid = Integer.parseInt(values[index++]);
             int mcc = Integer.parseInt(values[index++]);
             int mnc = Integer.parseInt(values[index++]);
             int lac, rssi;
             if (i == 0) {
                 rssi = Integer.parseInt(values[index++]);
                 lac = Integer.parseInt(values[index++]);
             } else {
                 lac = Integer.parseInt(values[index++]);
                 rssi = Integer.parseInt(values[index++]);
             }
             index += 1; // timing advance
             if (cid > 0) {
                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
             }
         }
 
         position.setNetwork(network);
 
         position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
         position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
         position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
         position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
 
         if (values[index].length() == 3) {
             index += 1; // collaborative network
         }
 
+        if (index >= values.length) {
+            return null; // Not enough data for position
+        }
+
+        String dateStr = values[index++];
+        String timeStr = "";
+        if (index < values.length) {
+            timeStr = values[index++];
+        }
+
+        // Combine date and time with a space in between
+        String dateTimeStr = dateStr + " " + timeStr;
+
+        // Check if dateTimeStr is empty or invalid before parsing
+        if (dateTimeStr.trim().isEmpty()) {
+            return null;
+        }
+
         DateFormat dateFormat = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
+        try {
+            position.setTime(dateFormat.parse(dateTimeStr));
+        } catch (ParseException e) {
+            return null; // Failed to parse date/time
+        }
+
+        if (index >= values.length) {
+            return null; // Not enough data for position
+        }
 
         position.setLatitude(Double.parseDouble(values[index++]));
         position.setLongitude(Double.parseDouble(values[index++]));
         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
         position.setCourse(Double.parseDouble(values[index++]));
 
         position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
 
         position.setValid(values[index++].equals("1"));
 
         return position;
     }
\ No newline at end of file
