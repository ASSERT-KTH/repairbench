diff --git a/tmp/90dae1f0-3a20-40cf-be6d-49642773c3aa_buggy.java b/tmp/d7745ebf-63fa-488f-8ab4-8afa6778e2b7_fixed.java
index 30eba92..739528f 100644
--- a/tmp/90dae1f0-3a20-40cf-be6d-49642773c3aa_buggy.java
+++ b/tmp/d7745ebf-63fa-488f-8ab4-8afa6778e2b7_fixed.java
@@ -1,113 +1,178 @@
     private Object decodePosition(
             Channel channel, SocketAddress remoteAddress, String sentence, String id) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
         if (deviceSession == null) {
             return null;
         }
 
         List<Position> positions = new LinkedList<>();
         Position position = null;
         DateBuilder dateBuilder = null;
 
         for (String pair : sentence.split(",")) {
             String[] data = pair.split("[=:]");
+            if (data.length < 2) continue;
             int key;
             try {
                 key = Integer.parseInt(data[0], 16);
             } catch (NumberFormatException e) {
                 continue;
             }
             String value = data[1];
             if (key == 0x0) {
                 if (position != null) {
                     position.setTime(dateBuilder.getDate());
                     positions.add(position);
                 }
                 position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
                 dateBuilder = new DateBuilder(new Date());
             } else if (position != null) {
                 switch (key) {
                     case 0x11:
                         value = ("000000" + value).substring(value.length());
                         dateBuilder.setDateReverse(
                                 Integer.parseInt(value.substring(0, 2)),
                                 Integer.parseInt(value.substring(2, 4)),
                                 Integer.parseInt(value.substring(4)));
                         break;
                     case 0x10:
                         value = ("00000000" + value).substring(value.length());
                         dateBuilder.setTime(
                                 Integer.parseInt(value.substring(0, 2)),
                                 Integer.parseInt(value.substring(2, 4)),
                                 Integer.parseInt(value.substring(4, 6)),
                                 Integer.parseInt(value.substring(6)) * 10);
                         break;
                     case 0xA:
                         position.setValid(true);
+                        try {
                             position.setLatitude(Double.parseDouble(value));
+                        } catch (NumberFormatException e) {
+                            position.setValid(false);
+                        }
                         break;
                     case 0xB:
                         position.setValid(true);
+                        try {
                             position.setLongitude(Double.parseDouble(value));
+                        } catch (NumberFormatException e) {
+                            position.setValid(false);
+                        }
                         break;
                     case 0xC:
+                        try {
                             position.setAltitude(Double.parseDouble(value));
+                        } catch (NumberFormatException e) {
+                            // ignore if parsing fails
+                        }
                         break;
                     case 0xD:
+                        try {
                             position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
+                        } catch (NumberFormatException e) {
+                            // ignore if parsing fails
+                        }
                         break;
                     case 0xE:
+                        try {
                             position.setCourse(Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // ignore if parsing fails
+                        }
                         break;
                     case 0xF:
+                        try {
                             position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // ignore if parsing fails
+                        }
                         break;
                     case 0x12:
+                        try {
                             position.set(Position.KEY_HDOP, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // ignore if parsing fails
+                        }
                         break;
                     case 0x20:
+                        try {
                             position.set(Position.KEY_ACCELERATION, value);
+                        } catch (Exception e) {
+                            // ignore if there's an issue setting the value
+                        }
                         break;
                     case 0x24:
+                        try {
                             position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);
+                        } catch (NumberFormatException e) {
+                            // ignore if parsing fails
+                        }
                         break;
                     case 0x81:
+                        try {
                             position.set(Position.KEY_RSSI, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // ignore if parsing fails
+                        }
                         break;
                     case 0x82:
+                        try {
                             position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
+                        } catch (NumberFormatException e) {
+                            // ignore if parsing fails
+                        }
                         break;
                     case 0x104:
+                        try {
                             position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // ignore if parsing fails
+                        }
                         break;
                     case 0x105:
+                        try {
                             position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // ignore if parsing fails
+                        }
                         break;
                     case 0x10c:
+                        try {
                             position.set(Position.KEY_RPM, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // ignore if parsing fails
+                        }
                         break;
                     case 0x10d:
+                        try {
                             position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                        } catch (NumberFormatException e) {
+                            // ignore if parsing fails
+                        }
                         break;
                     case 0x111:
+                        try {
                             position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // ignore if parsing fails
+                        }
                         break;
                     default:
                         position.set(Position.PREFIX_IO + key, value);
                         break;
                 }
             }
         }
 
         if (position != null) {
             if (!position.getValid()) {
                 getLastLocation(position, null);
             }
             position.setTime(dateBuilder.getDate());
             positions.add(position);
         }
 
         return positions.isEmpty() ? null : positions;
     }
\ No newline at end of file
