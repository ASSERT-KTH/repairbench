diff --git a/tmp/9925d531-9a42-41f2-8f56-7b732c630200_buggy.java b/tmp/175769c0-16ea-4996-bff6-37f7fd689c32_fixed.java
index 0583946..f019dc2 100644
--- a/tmp/9925d531-9a42-41f2-8f56-7b732c630200_buggy.java
+++ b/tmp/175769c0-16ea-4996-bff6-37f7fd689c32_fixed.java
@@ -1,30 +1,35 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
             trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             boolean isBlank = isBlank();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
             if (couldSkip && isBlank) return;
 
             Node prev = previousSibling();
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                 (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+            ) {
                 indent(accum, depth, out);
+            } else if (parent != null && parent.tag().formatAsBlock()) {
+                // make sure we add a newline if this text node is after a block element, and we're pretty printing
+                if (accum.length() > 0 && accum.charAt(accum.length()-1) != '\n')
+                    accum.append('\n');
+            }
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
