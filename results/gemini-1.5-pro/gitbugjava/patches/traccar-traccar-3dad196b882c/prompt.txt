You are an automatic program repair tool. Your task is to fix the provided buggy code.

The following code contains a buggy function:
```java
    private Position decodePosition(
            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {

        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
        if (deviceSession == null) {
            return null;
        }

        Position position = new Position(getProtocolName());
        position.setDeviceId(deviceSession.getDeviceId());

        int status = buf.readUnsignedShort();

        position.setValid(BitUtil.check(status, 15));

        position.set(Position.KEY_STATUS, status);
        position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));

        int event = buf.readUnsignedShort();
        position.set(Position.KEY_ALARM, decodeAlarm(event));
        position.set(Position.KEY_EVENT, event);

        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();

        DateBuilder dateBuilder = new DateBuilder()
                .setYear(Integer.parseInt(time.substring(0, 2)))
                .setMonth(Integer.parseInt(time.substring(2, 4)))
                .setDay(Integer.parseInt(time.substring(4, 6)))
                .setHour(Integer.parseInt(time.substring(6, 8)))
                .setMinute(Integer.parseInt(time.substring(8, 10)))
                .setSecond(Integer.parseInt(time.substring(10, 12)));
        position.setTime(dateBuilder.getDate());

        position.setLongitude(buf.readInt() * 0.00001);
        position.setLatitude(buf.readInt() * 0.00001);

        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
        position.setCourse(buf.readUnsignedShort());
        position.setAltitude(buf.readUnsignedShort());

        position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);

        Network network = new Network();

        while (buf.readableBytes() > 4) {
            int subtype = buf.readUnsignedShort();
            int length = buf.readUnsignedShort() - 4;
            switch (subtype) {
                case 0x0001:
                    int coolantTemperature = buf.readUnsignedByte() - 40;
                    if (coolantTemperature <= 215) {
                        position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                    }
                    int rpm = buf.readUnsignedShort();
                    if (rpm <= 65535) {
                        position.set(Position.KEY_RPM, rpm);
                    }
                    position.set("averageSpeed", buf.readUnsignedByte());
                    buf.readUnsignedShort(); // interval fuel consumption
                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                    position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                    buf.readUnsignedInt(); // trip id
                    break;
                case 0x0005:
                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                    position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                    buf.readUnsignedInt(); // run time
                    break;
                case 0x0009:
                    position.set(
                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
                    break;
                case 0x0011:
                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
                    break;
                case 0x0014:
                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                    position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                    position.set("airTemp", buf.readUnsignedByte() - 40);
                    position.set("airFlow", buf.readUnsignedShort() * 0.01);
                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
                    break;
                case 0x0020:
                    String[] cells = buf.readCharSequence(
                            length, StandardCharsets.US_ASCII).toString().split("\\+");
                    for (String cell : cells) {
                        String[] values = cell.split("@");
                        network.addCellTower(CellTower.from(
                                Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
                    }
                    break;
                case 0x0021:
                    String[] points = buf.readCharSequence(
                            length, StandardCharsets.US_ASCII).toString().split("\\+");
                    for (String point : points) {
                        String[] values = point.split("@");
                        network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
                    }
                    break;
                default:
                    buf.skipBytes(length);
                    break;
            }
        }

        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
            position.setNetwork(network);
        }

        sendResponse(channel, MSG_POSITION_RSP, index, null);

        return position;
    }

```

The code fails the following tests.

Test `org.traccar.protocol.HuaShengProtocolDecoderTest::testDecode`:
```java
    @Test
    public void testDecode() throws Exception {

        var decoder = inject(new HuaShengProtocolDecoder(null));

        verifyNull(decoder, binary(
                "c00000007eaa000000000000cb8000000032313130313030393238323800e9abafffd615d2000000000008000000010015ffffff0000000000000004e7ffffffffff0005000a10080001d5ab000900154b4e4142323531324d4b54353638363630000f00133335343434343131353130333138380014000b00000000000000c0"));

        verifyNull(decoder, binary(
                "c0010c003c0002000000000044020010a0014f42445f3347315f56322e320013a0043335353835353035313032303536360006a08700000006a0a105c9c0"));

        verifyNull(decoder, binary(
                "c000000077aa0200000000000e000100143347315f48312e315f56312e30372e54000300133335353835353035303434303635380004000b3531323030303000050005010006000400070004000800050000090018383936313032353431343533333239313833360d000a000f796573696e7465726e6574c0"));

        verifyNotNull(decoder, binary(
                "c0000000b9aa00000000000013c800001132333035303431343537323600186bc30045e5b8002a008b0077002d000100187f0c4b2600d906ec000005938800000000000e0000040009110000000e0005000a1d0400000079000900154646464646464646464646464646464646000f00133836323230353035353339313733360010000c302e30303030303000110008000000000014000bf81b204901b52a001500060000002000153231394030324030403130343438393139c0"));

        verifyAttribute(decoder, binary(
                "C00000001CAA120000000000020001001001000200030043008200C100C0"),
                Position.KEY_DTCS, "P0100 P0200 P0300 C0300 B0200 U0100");

        verifyAttribute(decoder, binary(
                "c000000049aa0000000000028e8800000032303038323630373534323800e1d47fffcd163d0000000000f30000000100157703f8000046000000000aade0ffffffff0011000800000496c0"),
                Position.KEY_HOURS, 58.7);

        verifyNotNull(decoder, binary(
                "c000000077aa00000000000070020000003230303132373035313635330000000000000000000000000000000000010015ffffffff000000000000019dffffffffff0005000a1f00000e455a00200019313238354031406666666540386233663930634030000f0013333536373236313038313335343530c0"));

        verifyPosition(decoder, binary(
                "c000000060aa000000000000fa8000000031393037303431363434323700e9900affd61c1b00000000003a000000010015ffffff0000000000000004c2ffffffffff0005000a0d080000ca6a000900155741555a5a5a344730454e313133373233c0"));

        verifyPosition(decoder, binary(
                "c00000004baa0000000000000f8000000031363130323030373236333600e6d4f9ffcc78c700000022003600000001001500000000000000000000059bffffffffff0005000a040300000253c0"));

        verifyPosition(decoder, binary(
                "c00000004baa000000000000098000000031363130303732323236343700e6d4efffcc789f000000000026000000010015000000000000000000000488ffffffffff0005000a10060000008dc0"));

        verifyPosition(decoder, binary(
                "c00000004baa000000000000098000000031363130303732323236343700e6d4efffcc789f000000000026000000010015000000000000000000000488ffffffffff0005000a10060000008dc0"));

        verifyPosition(decoder, binary(
                "c00000004baa00000000000005c400000131363037303630323537303800e6c82effcc7cb0003900a30089000000010015000000000000000000f20559ff577ce3980005000a060500000087c0"));

        verifyNull(decoder, binary(
                "c0010c003e0002000000000010020012a0014f42445f3347315f56312e302e330013a0043335353835353035303434303635380006a08701000006a0a1035fc0"));

        verifyNull(decoder, binary(
                "c0010c00120060000000000004000600010100c0"));

        verifyNull(decoder, binary(
                "C00000007EAA020000000000010001001047315F48312E305F56312E3000030013383632393530303238353334333036000400144C342D56374C673979497A7A2D724A6D0005000501000600084341524400070008434152440008000500000900183839383630303530313931343436313130393134000A0009434D4E4554C0"));

        verifyPosition(decoder, binary(
                "C000000041AA00000000000030C000000031353035323630373538323800ADDCC100226AEF0000000000120005000100151206EF0504E99975002903EB80556492CEC0"));

    }

```
Test `org.traccar.protocol.HuaShengProtocolDecoderTest::testDecode` error:
```
java.lang.IllegalArgumentException: minimumReadableBytes : -4 (expected: >= 0)
```


Please provide a fixed version of the buggy function, and only that function, inside a code block.
