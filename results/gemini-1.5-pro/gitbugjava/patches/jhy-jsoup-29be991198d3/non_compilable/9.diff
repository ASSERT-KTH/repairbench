diff --git a/tmp/5324b542-63b3-47e3-a307-0ee96cd8da61_buggy.java b/tmp/d7828f46-8398-4fb3-92c4-a9be6b2520af_fixed.java
index 862c60c..196d4c6 100644
--- a/tmp/5324b542-63b3-47e3-a307-0ee96cd8da61_buggy.java
+++ b/tmp/d7828f46-8398-4fb3-92c4-a9be6b2520af_fixed.java
@@ -1,25 +1,25 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
             trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = this.nextSibling();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+                || (next instanceof TextNode && (((TextNode) next).isBlank() && next.nextSibling() != null)); // next is blank text, from re-parenting, and not last
             if (couldSkip && isBlank()) return;
 
             if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank()))
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
