diff --git a/tmp/271dae93-df07-451a-8729-e99ca8dd4e74_buggy.java b/tmp/6a409d6a-d492-49eb-9b5e-1d3b7ef03004_fixed.java
index e883360..f6a2546 100644
--- a/tmp/271dae93-df07-451a-8729-e99ca8dd4e74_buggy.java
+++ b/tmp/6a409d6a-d492-49eb-9b5e-1d3b7ef03004_fixed.java
@@ -1,196 +1,196 @@
     private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {
         Position position = new Position(getProtocolName());
 
         int index = 0;
         String[] values = sentence.split(",");
 
         index += 1; // header
         index += 1; // protocol version
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
         position.setDeviceId(deviceSession.getDeviceId());
 
         index += 1; // device name
         index += 1; // report type
         index += 1; // canbus state
         long reportMask = Long.parseLong(values[index++], 16);
         long reportMaskExt = 0;
 
-        if (BitUtil.check(reportMask, 0)) {
-            position.set(Position.KEY_VIN, values[index++]);
+        if (BitUtil.check(reportMask, 0) && !values[index++].isEmpty()) {
+            position.set(Position.KEY_VIN, values[index - 1]);
         }
-        if (BitUtil.check(reportMask, 1)) {
-            position.set(Position.KEY_IGNITION, Integer.parseInt(values[index++]) > 0);
+        if (BitUtil.check(reportMask, 1) && !values[index++].isEmpty()) {
+            position.set(Position.KEY_IGNITION, Integer.parseInt(values[index - 1]) > 0);
         }
-        if (BitUtil.check(reportMask, 2)) {
-            position.set(Position.KEY_OBD_ODOMETER, values[index++]);
+        if (BitUtil.check(reportMask, 2) && !values[index++].isEmpty()) {
+            position.set(Position.KEY_OBD_ODOMETER, values[index - 1]);
         }
         if (BitUtil.check(reportMask, 3) && !values[index++].isEmpty()) {
             position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index - 1]));
         }
         if (BitUtil.check(reportMask, 5) && !values[index++].isEmpty()) {
             position.set(Position.KEY_RPM, Integer.parseInt(values[index - 1]));
         }
         if (BitUtil.check(reportMask, 4) && !values[index++].isEmpty()) {
             position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
         }
         if (BitUtil.check(reportMask, 6) && !values[index++].isEmpty()) {
             position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index - 1]));
         }
         if (BitUtil.check(reportMask, 7) && !values[index++].isEmpty()) {
             position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index - 1].substring(1)));
         }
         if (BitUtil.check(reportMask, 8) && !values[index++].isEmpty()) {
             position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index - 1].substring(1)));
         }
         if (BitUtil.check(reportMask, 9) && !values[index++].isEmpty()) {
             position.set("range", Long.parseLong(values[index - 1]) * 100);
         }
         if (BitUtil.check(reportMask, 10) && !values[index++].isEmpty()) {
             position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index - 1]));
         }
         if (BitUtil.check(reportMask, 11) && !values[index++].isEmpty()) {
             position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index - 1])));
         }
-        if (BitUtil.check(reportMask, 12)) {
-            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index++]));
+        if (BitUtil.check(reportMask, 12) && !values[index++].isEmpty()) {
+            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index - 1]));
         }
-        if (BitUtil.check(reportMask, 13)) {
-            position.set("idleHours", Double.parseDouble(values[index++]));
+        if (BitUtil.check(reportMask, 13) && !values[index++].isEmpty()) {
+            position.set("idleHours", Double.parseDouble(values[index - 1]));
         }
         if (BitUtil.check(reportMask, 14) && !values[index++].isEmpty()) {
             position.set("idleFuelConsumption", Double.parseDouble(values[index - 1]));
         }
         if (BitUtil.check(reportMask, 15) && !values[index++].isEmpty()) {
             position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index - 1]));
         }
         if (BitUtil.check(reportMask, 16) && !values[index++].isEmpty()) {
             position.set("tachographInfo", Integer.parseInt(values[index - 1], 16));
         }
         if (BitUtil.check(reportMask, 17) && !values[index++].isEmpty()) {
             position.set("indicators", Integer.parseInt(values[index - 1], 16));
         }
         if (BitUtil.check(reportMask, 18) && !values[index++].isEmpty()) {
             position.set("lights", Integer.parseInt(values[index - 1], 16));
         }
         if (BitUtil.check(reportMask, 19) && !values[index++].isEmpty()) {
             position.set("doors", Integer.parseInt(values[index - 1], 16));
         }
         if (BitUtil.check(reportMask, 20) && !values[index++].isEmpty()) {
             position.set("vehicleOverspeed", Double.parseDouble(values[index - 1]));
         }
         if (BitUtil.check(reportMask, 21) && !values[index++].isEmpty()) {
             position.set("engineOverspeed", Double.parseDouble(values[index - 1]));
         }
-        if (BitUtil.check(reportMask, 29)) {
-            reportMaskExt = Long.parseLong(values[index++], 16);
+        if (BitUtil.check(reportMask, 29) && !values[index++].isEmpty()) {
+            reportMaskExt = Long.parseLong(values[index - 1], 16);
         }
         if (BitUtil.check(reportMaskExt, 0) && !values[index++].isEmpty()) {
             position.set("adBlueLevel", Integer.parseInt(values[index - 1]));
         }
         if (BitUtil.check(reportMaskExt, 1) && !values[index++].isEmpty()) {
             position.set("axleWeight1", Integer.parseInt(values[index - 1]));
         }
         if (BitUtil.check(reportMaskExt, 2) && !values[index++].isEmpty()) {
             position.set("axleWeight3", Integer.parseInt(values[index - 1]));
         }
         if (BitUtil.check(reportMaskExt, 3) && !values[index++].isEmpty()) {
             position.set("axleWeight4", Integer.parseInt(values[index - 1]));
         }
-        if (BitUtil.check(reportMaskExt, 4)) {
+        if (BitUtil.check(reportMaskExt, 4) && !values[index++].isEmpty()) {
             index += 1; // tachograph overspeed
         }
-        if (BitUtil.check(reportMaskExt, 5)) {
+        if (BitUtil.check(reportMaskExt, 5) && !values[index++].isEmpty()) {
             index += 1; // tachograph motion
         }
-        if (BitUtil.check(reportMaskExt, 6)) {
+        if (BitUtil.check(reportMaskExt, 6) && !values[index++].isEmpty()) {
             index += 1; // tachograph direction
         }
         if (BitUtil.check(reportMaskExt, 7) && !values[index++].isEmpty()) {
             position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index - 1]) * 0.001);
         }
-        if (BitUtil.check(reportMaskExt, 8)) {
+        if (BitUtil.check(reportMaskExt, 8) && !values[index++].isEmpty()) {
             index += 1; // pedal breaking factor
         }
-        if (BitUtil.check(reportMaskExt, 9)) {
+        if (BitUtil.check(reportMaskExt, 9) && !values[index++].isEmpty()) {
             index += 1; // engine breaking factor
         }
-        if (BitUtil.check(reportMaskExt, 10)) {
+        if (BitUtil.check(reportMaskExt, 10) && !values[index++].isEmpty()) {
             index += 1; // total accelerator kick-downs
         }
-        if (BitUtil.check(reportMaskExt, 11)) {
+        if (BitUtil.check(reportMaskExt, 11) && !values[index++].isEmpty()) {
             index += 1; // total effective engine speed
         }
-        if (BitUtil.check(reportMaskExt, 12)) {
+        if (BitUtil.check(reportMaskExt, 12) && !values[index++].isEmpty()) {
             index += 1; // total cruise control time
         }
-        if (BitUtil.check(reportMaskExt, 13)) {
+        if (BitUtil.check(reportMaskExt, 13) && !values[index++].isEmpty()) {
             index += 1; // total accelerator kick-down time
         }
-        if (BitUtil.check(reportMaskExt, 14)) {
+        if (BitUtil.check(reportMaskExt, 14) && !values[index++].isEmpty()) {
             index += 1; // total brake application
         }
         if (BitUtil.check(reportMaskExt, 15) && !values[index++].isEmpty()) {
             position.set("driver1Card", values[index - 1]);
         }
         if (BitUtil.check(reportMaskExt, 16) && !values[index++].isEmpty()) {
             position.set("driver2Card", values[index - 1]);
         }
         if (BitUtil.check(reportMaskExt, 17) && !values[index++].isEmpty()) {
             position.set("driver1Name", values[index - 1]);
         }
         if (BitUtil.check(reportMaskExt, 18) && !values[index++].isEmpty()) {
             position.set("driver2Name", values[index - 1]);
         }
         if (BitUtil.check(reportMaskExt, 19) && !values[index++].isEmpty()) {
             position.set("registration", values[index - 1]);
         }
-        if (BitUtil.check(reportMaskExt, 20)) {
+        if (BitUtil.check(reportMaskExt, 20) && !values[index++].isEmpty()) {
             index += 1; // expansion information
         }
-        if (BitUtil.check(reportMaskExt, 21)) {
+        if (BitUtil.check(reportMaskExt, 21) && !values[index++].isEmpty()) {
             index += 1; // rapid brakings
         }
-        if (BitUtil.check(reportMaskExt, 22)) {
+        if (BitUtil.check(reportMaskExt, 22) && !values[index++].isEmpty()) {
             index += 1; // rapid accelerations
         }
-        if (BitUtil.check(reportMaskExt, 23)) {
+        if (BitUtil.check(reportMaskExt, 23) && !values[index++].isEmpty()) {
             index += 1; // engine torque
         }
 
         DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
 
         if (BitUtil.check(reportMask, 30)) {
             while (values[index].isEmpty()) {
                 index += 1;
             }
             position.setValid(Integer.parseInt(values[index++]) > 0);
-            if (!values[index].isEmpty()) {
+            if (values.length > index + 5 && !values[index].isEmpty()) {
                 position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
                 position.setCourse(Integer.parseInt(values[index++]));
                 position.setAltitude(Double.parseDouble(values[index++]));
                 position.setLongitude(Double.parseDouble(values[index++]));
                 position.setLatitude(Double.parseDouble(values[index++]));
                 position.setTime(dateFormat.parse(values[index++]));
             } else {
                 index += 6; // no location
                 getLastLocation(position, null);
             }
         } else {
             getLastLocation(position, null);
         }
 
         if (BitUtil.check(reportMask, 31)) {
             index += 4; // cell
             index += 1; // reserved
         }
 
-        if (ignoreFixTime) {
+        if (ignoreFixTime && values.length > index) {
             position.setTime(dateFormat.parse(values[index]));
-        } else {
+        } else if (values.length > index) {
             position.setDeviceTime(dateFormat.parse(values[index]));
         }
 
         return position;
     }
\ No newline at end of file
