diff --git a/tmp/e12ab68c-89b4-41b3-89fb-06e716448bbd_buggy.java b/tmp/3122992c-7e92-41c0-b63f-67395c869441_fixed.java
index 7374e5f..0388547 100644
--- a/tmp/e12ab68c-89b4-41b3-89fb-06e716448bbd_buggy.java
+++ b/tmp/3122992c-7e92-41c0-b63f-67395c869441_fixed.java
@@ -1,61 +1,63 @@
     private Object decodeLocationNew(
             Channel channel, SocketAddress remoteAddress, String sentence) {
 
         Parser parser = new Parser(PATTERN_NEW, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         String imei = parser.next();
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         String index = parser.next();
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
 
         position.setDeviceTime(parser.nextDateTime());
 
         Network network = new Network();
         network.addCellTower(CellTower.from(
                 parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
 
         position.set(Position.KEY_BATTERY, parser.nextDouble());
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
         position.set(Position.KEY_STATUS, parser.nextHexInt());
 
         if (parser.hasNext(5)) {
 
             position.setValid(parser.next().equals("A"));
             position.setFixTime(position.getDeviceTime());
             position.set(Position.KEY_SATELLITES, parser.nextInt());
             position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
             position.setLatitude(parser.nextDouble());
             position.setLongitude(parser.nextDouble());
 
-        } else {
+        } else if (parser.hasNext()) { // Check if there are more tokens
 
             String[] points = parser.next().split("\\|");
             for (String point : points) {
                 String[] wifi = point.split(":");
+                if (wifi.length >= 2) { // Check if the wifi array has at least two elements
                     String mac = wifi[0].replaceAll("(..)", "$1:");
                     network.addWifiAccessPoint(WifiAccessPoint.from(
                             mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
                 }
+            }
 
         }
 
         position.setNetwork(network);
 
         DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
         String response = index + ",A03," + dateFormat.format(new Date());
         sendResponse(channel, remoteAddress, imei, response);
 
         return position;
     }
