diff --git a/tmp/4d2d983a-dc92-45f8-aa1f-967b53bdde0c_buggy.java b/tmp/c808710f-d634-4f9d-b906-2ac311a6ca4c_fixed.java
index 4f21a3a..03efd6a 100644
--- a/tmp/4d2d983a-dc92-45f8-aa1f-967b53bdde0c_buggy.java
+++ b/tmp/c808710f-d634-4f9d-b906-2ac311a6ca4c_fixed.java
@@ -1,14 +1,25 @@
     /**
      * Helper method used by standard deserializer.
      * 
      * @since 2.3
      */
     public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
     {
+        if (jp.getCurrentToken() == null) { // will be the case for START_OBJECT
+            // 28-Oct-2014, tatu: As per #592, need to support a special case
+            //   of starting from FIELD_NAME, which is taken to mean that we
+            //   are missing START_OBJECT, but need to assume one did exist.
             copyCurrentStructure(jp);
-        /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from
-         *    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need
-         *    to assume one did exist.
-         */
+        } else {
+            // otherwise, copy until end of current thing
+            JsonToken t = jp.getCurrentToken();
+            if (t == JsonToken.START_OBJECT || t == JsonToken.START_ARRAY) {
+                writeStartArray();
+            }
+            copyCurrentStructure(jp);
+            if (t == JsonToken.START_OBJECT || t == JsonToken.START_ARRAY) {
+                writeEndArray();
+            }
+        }
         return this;
     }
