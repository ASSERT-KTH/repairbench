diff --git a/tmp/d6376304-1082-44c7-9a92-bc53d36daf60_buggy.java b/tmp/371ae934-ef92-49c0-abf3-d9ffbaa2914a_fixed.java
index 6e45f80..7719216 100644
--- a/tmp/d6376304-1082-44c7-9a92-bc53d36daf60_buggy.java
+++ b/tmp/371ae934-ef92-49c0-abf3-d9ffbaa2914a_fixed.java
@@ -1,21 +1,28 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
+        return (TypeAdapter<T2>) new TypeAdapter<T2>() {
+          @Override public void write(JsonWriter out, T2 value) throws IOException {
+            typeAdapter.write(out, (T1) value);
+          }
+          @Override public T2 read(JsonReader in) throws IOException {
+            return (T2) typeAdapter.read(in);
+          }
+        };
 
       }
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
