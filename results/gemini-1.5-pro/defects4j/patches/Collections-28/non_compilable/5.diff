diff --git a/tmp/d1b1cb13-0e70-48ce-97d1-c6d9ff4d4f7e_buggy.java b/tmp/ddd6662b-20f9-4a95-b098-5267d20e02ec_fixed.java
index e69de29..a98356b 100644
--- a/tmp/d1b1cb13-0e70-48ce-97d1-c6d9ff4d4f7e_buggy.java
+++ b/tmp/ddd6662b-20f9-4a95-b098-5267d20e02ec_fixed.java
@@ -0,0 +1,202 @@
+package org.apache.commons.collections4.trie;
+
+import java.util.Collection;
+import java.util.Map;
+import java.util.Set;
+
+import org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry;
+
+/**
+ * 
+ * @since 4.0
+ * @version $Id$
+ * @param <K> the type of the keys in this map
+ * @param <V> the type of the values in this map
+ */
+class PrefixTrieMap<K, V> extends AbstractPatriciaTrie.PrefixTrie<K, V> {
+
+    private static final long serialVersionUID = 5800947562115306935L;
+
+    protected final Trie<K, V> delegate;
+    protected final K prefix;
+    protected final int offset;
+    protected final int length;
+
+    public PrefixTrieMap(final Trie<K, V> delegate, final K prefix) {
+        super(delegate.getKeyAnalyzer());
+        this.delegate = delegate;
+        this.prefix = prefix;
+        final int offset = delegate.getKeyAnalyzer().lengthInBits(prefix);
+        this.offset = offset;
+        this.length = offset == 0 ? 0 : getKeyAnalyzer().lengthInBits(prefix) - offset;
+    }
+
+    private AbstractPatriciaTrie<K, V>.TrieEntry<K, V> cast(final Map.Entry<?, ?> o) {
+        return (AbstractPatriciaTrie<K, V>.TrieEntry<K, V>) o;
+    }
+
+    @Override
+    public void clear() {
+        final int offset = this.offset;
+        final int length = this.length;
+        if (length == 0) {
+            delegate.clear();
+        } else {
+            final K prefix = this.prefix;
+            final Trie<K, V>.TrieEntry<K, V> entry = delegate.getEntry(prefix);
+            if (entry != null) {
+                ((AbstractPatriciaTrie<K, V>.TrieEntry<K, V>) entry).removeAll();
+            }
+        }
+    }
+
+    @Override
+    public boolean containsKey(final Object k) {
+        final int offset = this.offset;
+        if (k != null && offset > 0) {
+            final String key = getKeyAnalyzer().toString(k);
+            final String prefix = getKeyAnalyzer().toString(this.prefix);
+            if (key.startsWith(prefix)) {
+                return delegate.containsKey(getKeyAnalyzer().toComparable(key.substring(prefix.length())));
+            }
+        }
+        return offset == 0 && delegate.containsKey(k);
+    }
+
+    @Override
+    public boolean containsValue(final Object value) {
+        if (value == null) {
+            return super.containsValue(value);
+        }
+        final Collection<TrieEntry<K, V>> entries = super.entrySet();
+        for (final TrieEntry<K, V> entry : entries) {
+            if (entry.getValue().equals(value)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private K prefix(final K k) {
+        final String str = getKeyAnalyzer().toString(k);
+        return getKeyAnalyzer().toComparable(str.substring(getKeyAnalyzer().toString(prefix).length()));
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public Set<java.util.Map.Entry<K, V>> entrySet() {
+        return (Set<java.util.Map.Entry<K, V>>) super.entrySet();
+    }
+
+    @Override
+    public V get(final Object k) {
+        final K key = getKeyAnalyzer().toComparable(k);
+        final int offset = this.offset;
+        if (key != null && offset > 0) {
+            final String skey = getKeyAnalyzer().toString(key);
+            final String sprefix = getKeyAnalyzer().toString(this.prefix);
+            if (skey.startsWith(sprefix)) {
+                return delegate.get(getKeyAnalyzer().toComparable(skey.substring(sprefix.length())));
+            }
+            return null;
+        }
+        return delegate.get(key);
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return super.isEmpty();
+    }
+
+    @Override
+    public Set<K> keySet() {
+        return super.keySet();
+    }
+
+    @Override
+    public V put(final K key, final V value) {
+        final int offset = this.offset;
+        if (offset > 0) {
+            return delegate.put(getKeyAnalyzer().toComparable(getKeyAnalyzer().toString(prefix)
+                + getKeyAnalyzer().toString(key)), value);
+        }
+        return delegate.put(key, value);
+    }
+
+    @Override
+    public void putAll(final Map<? extends K, ? extends V> m) {
+        if (m.size() == 0) {
+            return;
+        }
+        final int offset = this.offset;
+        if (offset > 0) {
+            for (final Map.Entry<? extends K, ? extends V> entry : m.entrySet()) {
+                final K key = entry.getKey();
+                delegate.put(getKeyAnalyzer().toComparable(getKeyAnalyzer().toString(prefix)
+                    + getKeyAnalyzer().toString(key)), entry.getValue());
+            }
+            return;
+        }
+        delegate.putAll(m);
+    }
+
+    @Override
+    public V remove(final Object key) {
+        final int offset = this.offset;
+        if (key != null && offset > 0) {
+            final String skey = getKeyAnalyzer().toString(key);
+            final String sprefix = getKeyAnalyzer().toString(this.prefix);
+            if (skey.startsWith(sprefix)) {
+                return delegate.remove(getKeyAnalyzer().toComparable(skey.substring(sprefix.length())));
+            }
+            return null;
+        }
+        return delegate.remove(key);
+    }
+
+    @Override
+    public int size() {
+        return super.size();
+    }
+
+    @Override
+    public Collection<V> values() {
+        return super.values();
+    }
+
+    @Override
+    protected TrieEntry<K, V> getClosestEntryForKey(final K key, final int length) {
+        final TrieEntry<K, V> entry = delegate.getClosestEntryForKey(getKeyAnalyzer().toComparable(
+            getKeyAnalyzer().toString(prefix) + getKeyAnalyzer().toString(key)), length);
+        if (entry != null && getKeyAnalyzer().isPrefix(prefix, entry.getKey())) {
+            return entry;
+        }
+        return null;
+    }
+
+    @Override
+    protected TrieEntry<K, V> getLongestPrefixEntry(final K key, final int length) {
+        final TrieEntry<K, V> entry = delegate.getLongestPrefixEntry(getKeyAnalyzer().toComparable(
+            getKeyAnalyzer().toString(prefix) + getKeyAnalyzer().toString(key)), length);
+        if (entry != null && getKeyAnalyzer().isPrefix(prefix, entry.getKey())) {
+            return entry;
+        }
+        return null;
+    }
+
+    @Override
+    protected K getKey(final K key) {
+        final String sKey = getKeyAnalyzer().toString(key);
+        return getKeyAnalyzer().toComparable(sKey.substring(this.offset, sKey.length()));
+    }
+
+    @Override
+    protected TrieEntry<K, V> root() {
+        return delegate.getEntry(prefix);
+    }
+
+    @Override
+    protected void removeAll(final TrieEntry<K, V> entry) {
+        ((AbstractPatriciaTrie<K, V>.TrieEntry<K, V>) entry).removeAll();
+    }
+}
\ No newline at end of file
