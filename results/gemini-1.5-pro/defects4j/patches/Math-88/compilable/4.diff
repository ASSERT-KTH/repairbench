diff --git a/tmp/4466b26a-087d-4303-8792-b46b635145f6_buggy.java b/tmp/ee029d60-ca69-4783-8c2d-f01f7472dfef_fixed.java
index 544303b..0b7bd48 100644
--- a/tmp/4466b26a-087d-4303-8792-b46b635145f6_buggy.java
+++ b/tmp/ee029d60-ca69-4783-8c2d-f01f7472dfef_fixed.java
@@ -1,29 +1,31 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
         Integer basicRow =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
         for (int i = 0; i < coefficients.length; i++) {
             basicRow = getBasicRow(getNumObjectiveFunctions() + i);
             // if multiple variables can take a given value 
             // then we choose the first and set the rest equal to 0
             coefficients[i] =
                 (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                 (restrictToNonNegative ? 0 : mostNegative);
             if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+                //The previous loop set a coefficient to a possibly incorrect value.
+                //This loop is intended to act as a cleanup if the coefficient is incorrect.
+                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + coefficients.length; j++) {
+                    if (tableau.getEntry(basicRow, j) == 1 && tableau.getColumn(j)[getNumObjectiveFunctions()] == i + getNumObjectiveFunctions()) {
                          coefficients[i] = 0;
                     }
                 }
             }
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
