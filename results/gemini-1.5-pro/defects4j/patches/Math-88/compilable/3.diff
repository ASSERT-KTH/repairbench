diff --git a/tmp/5bda6fcc-ca32-4ad4-8ac7-98ad2e4c475c_buggy.java b/tmp/e4f8b101-a31d-4303-8903-c20569837781_fixed.java
index 544303b..3480d19 100644
--- a/tmp/5bda6fcc-ca32-4ad4-8ac7-98ad2e4c475c_buggy.java
+++ b/tmp/e4f8b101-a31d-4303-8903-c20569837781_fixed.java
@@ -1,29 +1,32 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
         Integer basicRow =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
         for (int i = 0; i < coefficients.length; i++) {
             basicRow = getBasicRow(getNumObjectiveFunctions() + i);
             // if multiple variables can take a given value 
             // then we choose the first and set the rest equal to 0
             coefficients[i] =
                 (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                 (restrictToNonNegative ? 0 : mostNegative);
             if (basicRow != null) {
+                // if multiple variables can take a given value
+                // then we choose the first and set the rest equal to 0
                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                     if (tableau.getEntry(basicRow, j) == 1) {
                         coefficients[i] = 0;
+                        break;
                     }
                 }
             }
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
