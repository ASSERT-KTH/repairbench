diff --git a/tmp/0e4f2170-218f-4beb-8144-ae46d8624093_buggy.java b/tmp/91627bfa-fa8e-4ac5-b5f0-db4613e9a5c9_fixed.java
index 7116384..3c094fa 100644
--- a/tmp/0e4f2170-218f-4beb-8144-ae46d8624093_buggy.java
+++ b/tmp/91627bfa-fa8e-4ac5-b5f0-db4613e9a5c9_fixed.java
@@ -1,39 +1,43 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
         while (bitsCachedSize < count) {
             final long nextByte = in.read();
             if (nextByte < 0) {
-                return nextByte;
+                if (bitsCachedSize == 0) {
+                  return -1;
+                }
+                return (byteOrder == ByteOrder.LITTLE_ENDIAN) ? bitsCached & MASKS[bitsCachedSize] : bitsCached >> (MAXIMUM_CACHE_SIZE - bitsCachedSize);
             }
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
                 bitsCached |= (nextByte << bitsCachedSize);
             } else {
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
             }
             bitsCachedSize += 8;
         }
         // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
 
         final long bitsOut;
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
                 bitsOut = (bitsCached & MASKS[count]);
                 bitsCached >>>= count;
             } else {
                 bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+                bitsCached &= MASKS[bitsCachedSize - count];
             }
             bitsCachedSize -= count;
         return bitsOut;
     }
\ No newline at end of file
