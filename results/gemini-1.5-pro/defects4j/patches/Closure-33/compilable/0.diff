diff --git a/tmp/dfb0da17-8bbe-47db-bf26-cd6a08a7943c_buggy.java b/tmp/e7bf6637-bcae-408c-af74-76e5d39ac865_fixed.java
index fb2b020..f53ab81 100644
--- a/tmp/dfb0da17-8bbe-47db-bf26-cd6a08a7943c_buggy.java
+++ b/tmp/e7bf6637-bcae-408c-af74-76e5d39ac865_fixed.java
@@ -1,27 +1,29 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
+          if (hasProperty(prop)) {
+            typeToInfer = getPropertyType(prop).getLeastSupertype(propType);
+          } else {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
           }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
