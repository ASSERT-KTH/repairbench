diff --git a/tmp/5c99a9d5-3354-4124-8202-df8e91116f33_buggy.java b/tmp/e024a556-49e2-42a0-b3e1-4c9fb10b263c_fixed.java
index e69de29..ca2af95 100644
--- a/tmp/5c99a9d5-3354-4124-8202-df8e91116f33_buggy.java
+++ b/tmp/e024a556-49e2-42a0-b3e1-4c9fb10b263c_fixed.java
@@ -0,0 +1,169 @@
+import java.util.ArrayList;
+import java.util.List;
+
+import org.jsoup.Connection;
+import org.jsoup.nodes.Element;
+import org.jsoup.select.Elements;
+
+/**
+ * A HTML Form Element provides ready access to the form's data elements.
+ */
+public class FormElement extends Element {
+    private static final String _encType = "enctype";
+
+    /**
+     * Create a new, empty form element.
+     * @param tag form element tag
+     * @param baseUri the base URI
+     */
+    public FormElement(Tag tag, String baseUri) {
+        super(tag, baseUri);
+    }
+
+    /**
+     * Create a new form element from an existing element.
+     * @param element the existing element to wrap
+     */
+    public FormElement(Element element) {
+        super(element.tag(), element.baseUri(), element.attributes());
+        this.childNodes = element.childNodes;
+        this.parentNode = element.parentNode;
+    }
+
+    /**
+     * Get the form's absolute action URI, after any relative URLs from the base URI have been resolved.
+     * @return absolute action URI
+     */
+    public String absoluteAction() {
+        return absUrl("action");
+    }
+
+    /**
+     * Set the form's action attribute. The attribute value will be normalized ("/foo")
+     * @param action the action attribute
+     * @return this form, for chaining
+     */
+    public FormElement action(String action) {
+        attr("action", action);
+        return this;
+    }
+
+    /**
+     * Get the form's method
+     * @return form method
+     */
+    public Method method() {
+        return Method.valueOf(attr("method").toUpperCase());
+    }
+
+    /**
+     * Set the form's method
+     * @param method form method
+     * @return this form, for chaining
+     */
+    public FormElement method(Method method) {
+        attr("method", method.name().toLowerCase());
+        return this;
+    }
+
+    /**
+     * Get the form's encoding type, if specified.
+     * @return the form's encoding type, or null if not set (and therefore HTML default "application/x-www-form-urlencoded").
+     * @see #encType()
+     */
+    public String encoding() {
+        return hasAttr(_encType) ? attr(_encType).toLowerCase() : null;
+    }
+
+    /**
+     * Get the form's encoding type, if specified.
+     * @return the form's encoding type, or null if not set (and therefore HTML default "application/x-www-form-urlencoded").
+     */
+    public String encType() {
+        return encoding();
+    }
+
+    /**
+     * Set the form's encoding type. The encoding type will be normalized to lower-case.
+     * @param encType the encoding type
+     * @return this form, for chaining
+     */
+    public FormElement encoding(String encType) {
+        attr(_encType, encType);
+        return this;
+    }
+
+    /**
+     * Set the form's encoding type.
+     * @param encType the encoding type
+     * @return this form, for chaining
+     */
+    public FormElement encType(String encType) {
+        return encoding(encType);
+    }
+
+    /**
+     * Get all the form element's input fields
+     * @return collection of input elements
+     */
+    public Elements elements() {
+        return select("input[type!=submit], textarea, select");
+    }
+
+    /**
+     * Create a key-val representation of this form, for input with this {code Connection}.
+     * @param connect connection to use the form with
+     * @return a connection, with key-vals from the form.
+     */
+    public Connection data(Connection connect) {
+        for (KeyVal keyVal : formData()) {
+            connect.data(keyVal.key(), keyVal.value());
+        }
+        return connect;
+    }
+
+    /**
+     * Get the data that this form submits. This is effectively a set of key value pairs.
+     * @return a list of key vals
+     */
+    public List<Connection.KeyVal> formData() {
+        ArrayList<Connection.KeyVal> data = new ArrayList<Connection.KeyVal>();
+
+        // iterate the form control elements to extract their values.
+        for (Element el : elements()) {
+            if (!el.hasAttr("name"))
+                continue; // only submit controls that have a name
+
+            String name = el.attr("name");
+            String type = el.attr("type");
+
+            if ("button".equalsIgnoreCase(type) || "f".equalsIgnoreCase(type) || "reset".equalsIgnoreCase(type)
+                    || "submit".equalsIgnoreCase(type)) {
+                // ignore buttons, file, reset and submit inputs
+                continue;
+            } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type))  {
+                // only add checkbox or radio if they have the checked attribute
+                if (el.hasAttr("checked")) {
+                    final String val = el.val();
+                    data.add(new Connection.KeyVal(name, val == null ? "" : val));
+                }
+            } else if ("select".equals(el.tagName())) {
+                Elements options = el.select("option[selected]");
+                boolean set = false;
+                for (Element opt : options) {
+                    data.add(new Connection.KeyVal(name, opt.val()));
+                    set = true;
+                }
+                if (!set) { // set the first one if none are set.
+                    Element opt = el.select("option").first();
+                    if (opt != null)
+                        data.add(new Connection.KeyVal(name, opt.val()));
+                }
+            } else {
+                // everything else, we add
+                data.add(new Connection.KeyVal(name, el.val()));
+            }
+        }
+        return data;
+    }
+}
\ No newline at end of file
