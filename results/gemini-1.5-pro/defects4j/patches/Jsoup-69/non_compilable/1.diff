diff --git a/tmp/f1f5ed6a-175f-4895-9f33-3f6d6f556d51_buggy.java b/tmp/1f784638-3dcf-47e5-b73d-ef6a71139bb8_fixed.java
index e69de29..ca78491 100644
--- a/tmp/f1f5ed6a-175f-4895-9f33-3f6d6f556d51_buggy.java
+++ b/tmp/1f784638-3dcf-47e5-b73d-ef6a71139bb8_fixed.java
@@ -0,0 +1,107 @@
+import java.util.ArrayList;
+import java.util.List;
+
+import org.jsoup.Connection;
+import org.jsoup.nodes.Element;
+import org.jsoup.select.Elements;
+
+/**
+ * A HTML Form Element provides ready access to the form's elements and values.
+ *
+ * @author Jonathan Hedley, jonathan@hedley.net
+ */
+public class FormElement extends Element {
+    private final Element element;
+
+    /**
+     * Create a new FormElement from a form element.
+     * @param element form element
+     */
+    public FormElement(Element element) {
+        super(Tag.valueOf(element.tagName()), element.baseUri(), element.attributes());
+        this.element = element;
+    }
+
+    /**
+     * Get the number of elements found in this form.
+     * @return number of elements inside form
+     */
+    public int elementSize() {
+        return element.select("input, textarea, select").size();
+    }
+
+    /**
+     * Get the form element's absolute URL.
+     * @return absolute URL of form.
+     */
+    public String absoluteAction() {
+        return element.absUrl("action");
+    }
+
+    /**
+     * Get the form element's method.
+     * @return form method
+     */
+    public String method() {
+        return hasAttr("method") ? attr("method").toUpperCase() : "GET";
+    }
+
+    /**
+     * Get or set the form element's method.
+     * @param method method to use. If null or empty, sets to "GET"
+     * @return current method
+     */
+    public FormElement method(String method) {
+        if (method == null || method.isEmpty())
+            method = "GET";
+        attr("method", method.toUpperCase());
+        return this;
+    }
+
+    /**
+     * Get the list of key-value form submission pairs.
+     * @return list of key vals
+     */
+    public List<Connection.KeyVal> formData() {
+        ArrayList<Connection.KeyVal> data = new ArrayList<>();
+
+        // iterate the form control children
+        for (Element el : element.select("input[type!=submit], textarea, select")) {
+            if (!el.hasAttr("name"))
+                continue; // only add elements with a name
+
+            String name = el.attr("name");
+            String type = el.attr("type");
+
+            if ("button".equalsIgnoreCase(type) || "image".equalsIgnoreCase(type) || "reset".equalsIgnoreCase(type)
+                    || "submit".equalsIgnoreCase(type)) {
+                // ignore buttons.
+            } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
+                // only add checkbox or radio if they have the checked attribute
+                if (el.hasAttr("checked")) {
+                    final String val = el.hasAttr("value") ? el.attr("value") : "on";
+                    data.add(new Connection.KeyVal(name, val));
+                }
+            } else if ("select".equals(el.tagName())) {
+                Elements options = el.select("option[selected]");
+                boolean set = false;
+                for (Element option : options) {
+                    data.add(new Connection.KeyVal(name, option.val()));
+                    set = true;
+                }
+                if (!set) { // value not explicitly set from checked ones, so use first, or default option
+                    Element option = el.select("option").first();
+                    if (option == null) {
+                        data.add(new Connection.KeyVal(name, ""));
+                    } else {
+                        data.add(new Connection.KeyVal(name, option.hasAttr("value") ? option.attr("value") : option.text()));
+                    }
+                }
+            } else {
+                // input, textarea
+                data.add(new Connection.KeyVal(name, el.val()));
+            }
+        }
+        return data;
+    }
+}
\ No newline at end of file
