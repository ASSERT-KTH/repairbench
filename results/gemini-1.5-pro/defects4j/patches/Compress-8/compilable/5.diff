diff --git a/tmp/b586e104-2917-4668-8d63-8174ce5e38c0_buggy.java b/tmp/fe7fbc81-6762-497c-ade7-2a3bb98414f4_fixed.java
index e087f95..88f0fd3 100644
--- a/tmp/b586e104-2917-4668-8d63-8174ce5e38c0_buggy.java
+++ b/tmp/fe7fbc81-6762-497c-ade7-2a3bb98414f4_fixed.java
@@ -1,53 +1,60 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         boolean stillPadding = true;
         int     end = offset + length;
-        int     start = offset;
 
-        for (int i = start; i < end; i++){
+        if (length < 2) {
+            throw new IllegalArgumentException("Length " + length + " < 2");
+        }
+
+        int i = offset;
+        while (i < end) {
             final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+            // Skip leading spaces and NULs
+            if (stillPadding && (currentByte == (byte) ' ' || currentByte == 0)) {
+                i++;
                 continue;
             }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
             stillPadding = false;
+
+            if (currentByte == 0 || currentByte == (byte) ' ') {
+                // Check for trailing space/NUL
+                i++;
+                // Trailing NUL or space may be followed by additional NUL or space
+                while (i < end) {
+                    if (buffer[i] != 0 && buffer[i] != (byte) ' ') {
+                        throw new IllegalArgumentException(
+                                exceptionMessage(buffer, offset, length, i, currentByte));
+                    }
+                    i++;
+                }
+                break;
+            }
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
+            result = (result << 3) + (currentByte - '0'); // convert from ASCII
+            i++;
         }
 
         return result;
     }
\ No newline at end of file
