diff --git a/tmp/32c6b87a-f580-4c8b-9e20-783efa27d037_buggy.java b/tmp/1bd94be4-1e2c-4f33-b77b-985a93411313_fixed.java
index b36b2a9..f3e4506 100644
--- a/tmp/32c6b87a-f580-4c8b-9e20-783efa27d037_buggy.java
+++ b/tmp/1bd94be4-1e2c-4f33-b77b-985a93411313_fixed.java
@@ -1,26 +1,28 @@
   JSType meet(JSType that) {
     UnionTypeBuilder builder = new UnionTypeBuilder(registry);
     for (JSType alternate : alternates) {
       if (alternate.isSubtype(that)) {
         builder.addAlternate(alternate);
       }
     }
 
     if (that instanceof UnionType) {
       for (JSType otherAlternate : ((UnionType) that).alternates) {
         if (otherAlternate.isSubtype(this)) {
           builder.addAlternate(otherAlternate);
         }
       }
     } else if (that.isSubtype(this)) {
       builder.addAlternate(that);
     }
     JSType result = builder.build();
     if (result != null) {
       return result;
-    } else if (this.isObject() && that.isObject()) {
-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
     } else {
+      // If we get here, either one of the union types is empty
+      // (e.g. !this.isObject() || !that.isObject()) or their
+      // object types don't overlap (e.g.
+      // this = Function, that = String). Return the bottom type.
       return getNativeType(JSTypeNative.NO_TYPE);
     }
   }
