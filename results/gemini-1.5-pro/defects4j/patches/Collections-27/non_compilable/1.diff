diff --git a/tmp/b8f45822-af21-4233-ba20-bd5d4be72d57_buggy.java b/tmp/59d17025-3ce3-46e8-b500-b83bf68bc809_fixed.java
index e69de29..76de38a 100644
--- a/tmp/b8f45822-af21-4233-ba20-bd5d4be72d57_buggy.java
+++ b/tmp/59d17025-3ce3-46e8-b500-b83bf68bc809_fixed.java
@@ -0,0 +1,226 @@
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Map;
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.collections4.Factory;
+import org.apache.commons.collections4.FunctorException;
+import org.apache.commons.collections4.MultiSet;
+import org.apache.commons.collections4.Transformer;
+import org.apache.commons.collections4.multiset.UnmodifiableMultiSet;
+
+/**
+ * Implements <code>Map</code>, supporting multiple values per key.
+ * <p>
+ * The map interface is defined as accepting objects as keys and values.
+ * However, this implementation assumes that all keys are objects with
+ * sensible implementations of <code>equals(Object)</code> and
+ * <code>hashCode()</code>, which returns the same value for all objects
+ * that compare equal. In particular, numeric keys should not be used as they
+ * may lead to unexpected behaviour.
+ * </p>
+ * <p>
+ * This map uses a light-weight implementation, not suitable for many map entries.
+ * Keys are stored in a <code>HashMap</code>, and values in a <code>ArrayList</code>.
+ * </p>
+ *
+ * @since 3.0
+ * @version $Id: MultiValueMap.java 1686855 2015-06-22 13:00:29Z tn $
+ */
+public class MultiValueMap<K, V> extends AbstractMultiValuedMap<K, V> {
+
+    /** Serialisation version */
+    private static final long serialVersionUID = -2210955749735604426L;
+
+    /** The factory to use to create value collections */
+    private final Factory<? extends Collection<V>> collectionFactory;
+
+    /**
+     * Constructor that uses an <code>ArrayList</code> as the collection
+     * to store multiple values in.
+     *
+     * @param map  the map to decorate, must not be null
+     * @throws NullPointerException if map is null
+     */
+    public MultiValueMap(final Map<K, ? extends Collection<V>> map) {
+        this(map, ArrayList.class);
+    }
+
+    /**
+     * Constructor that uses the supplied <code>Factory</code> to create
+     * the collections to store multiple values in. The factory must
+     * return a new, empty <code>Collection</code>.
+     *
+     * @param map  the map to decorate, must not be null
+     * @param factory  the factory to use, must not be null
+     * @throws NullPointerException if map or factory is null
+     */
+    public MultiValueMap(final Map<K, ? extends Collection<V>> map, final Factory<? extends Collection<V>> factory) {
+        super(map);
+        if (factory == null) {
+            throw new NullPointerException("factory must not be null");
+        }
+        this.collectionFactory = factory;
+    }
+
+    /**
+     * Constructor that uses the supplied <code>Class</code> to instantiate
+     * the collections to store multiple values in. The class must have a
+     * default constructor.
+     *
+     * @param map  the map to decorate, must not be null
+     * @param clazz  the type of the collection (e.g. ArrayList.class)
+     * @throws NullPointerException if map or clazz is null
+     * @throws ClassCastException if the class is invalid
+     */
+    public MultiValueMap(final Map<K, ? extends Collection<V>> map, final Class<? extends Collection<V>> clazz) {
+        super(map);
+        if (clazz == null) {
+            throw new NullPointerException("clazz must not be null");
+        }
+        this.collectionFactory = new Factory<Collection<V>>() {
+            @Override
+            public Collection<V> create() {
+                try {
+                    return clazz.newInstance();
+                } catch (final InstantiationException ex) {
+                    throw new FunctorException(ex);
+                } catch (final IllegalAccessException ex) {
+                    throw new FunctorException(ex);
+                }
+            }
+        };
+    }
+
+    /**
+     * A constructor that wraps the specified map and uses the supplied
+     * <code>Factory</code> to create the collections to store multiple
+     * values in.
+     *
+     * @param map  the map to wrap, must not be null
+     * @param collectionFactory  the factory to use, must not be null
+     * @throws NullPointerException if map or factory is null
+     */
+    protected MultiValueMap(final Map<K, Collection<V>> map,
+                            final Factory<? extends Collection<V>> collectionFactory) {
+        super(map);
+        if (collectionFactory == null) {
+            throw new NullPointerException("collectionFactory must not be null");
+        }
+        this.collectionFactory = collectionFactory;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Factory method to create a MultiValueMap using an <code>ArrayList</code>
+     * as the collection to store multiple values in.
+     *
+     * @param <K>  the key type
+     * @param <V>  the value to store
+     * @return a new MultiValueMap
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap() {
+        return new MultiValueMap<K, V>(new HashMap<K, Collection<V>>());
+    }
+
+    /**
+     * Factory method to create a MultiValueMap using an <code>ArrayList</code>
+     * as the collection to store multiple values in.
+     *
+     * @param <K>  the key type
+     * @param <V>  the value to store
+     * @param map  the map to decorate, must not be null
+     * @return a new MultiValueMap
+     * @throws NullPointerException if map is null
+     * @since 4.0
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? extends Collection<V>> map) {
+        return new MultiValueMap<K, V>(map);
+    }
+
+    /**
+     * Factory method to create a MultiValueMap that uses the supplied factory
+     * to create the collections to store multiple values in. The factory must
+     * return a new, empty <code>Collection</code>.
+     *
+     * @param <K>  the key type
+     * @param <V>  the value to store
+     * @param map  the map to decorate, must not be null
+     * @param factory  the factory to use, must not be null
+     * @return a new MultiValueMap
+     * @throws NullPointerException if map or factory is null
+     * @since 4.0
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? extends Collection<V>> map,
+                                                            final Factory<? extends Collection<V>> factory) {
+        return new MultiValueMap<K, V>(map, factory);
+    }
+
+    /**
+     * Factory method to create a MultiValueMap that uses the supplied
+     * class to instantiate the collections to store multiple values
+     * in.
+     *
+     * @param <K>  the key type
+     * @param <V>  the value to store
+     * @param map  the map to decorate, must not be null
+     * @param clazz  the type of the collection (e.g. ArrayList.class)
+     * @return a new MultiValueMap
+     * @throws NullPointerException if map or clazz is null
+     * @throws ClassCastException if the class is invalid
+     * @since 4.0
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? extends Collection<V>> map,
+                                                            final Class<? extends Collection<V>> clazz) {
+        return new MultiValueMap<K, V>(map, clazz);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Creates a new instance of the map value Collection.
+     *
+     * @return a new instance of the map value Collection
+     */
+    @Override
+    protected Collection<V> createCollection() {
+        return this.collectionFactory.create();
+    }
+
+    /**
+     * Write the map out using a custom routine.
+     *
+     * @param out  the output stream
+     * @throws IOException if an error occurs while writing to the collection's
+     * serialized form
+     */
+    private void writeObject(final ObjectOutputStream out) throws IOException {
+        out.defaultWriteObject();
+        out.writeObject(map);
+    }
+
+    /**
+     * Read the map in using a custom routine.
+     *
+     * @param in the input stream
+     * @throws IOException if an error occurs while reading from the collection's
+     * serialized form
+     * @throws ClassNotFoundException if the class of a serialized object can not be found
+     */
+    @SuppressWarnings("unchecked") // (cast) map entrySet - needed
+    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
+        in.defaultReadObject();
+        this.map = (Map<K, Collection<V>>) in.readObject();
+        if (collectionFactory == null) {
+            this.collectionFactory = new Factory<Collection<V>>() {
+                @Override
+                public Collection<V> create() {
+                    return new ArrayList<V>();
+                }
+            };
+        }
+    }
+
+}
\ No newline at end of file
