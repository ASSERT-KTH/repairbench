diff --git a/tmp/b8bc976c-7805-4ef5-8e81-833213109abb_buggy.java b/tmp/ae75769e-02da-475c-967c-903f2d724456_fixed.java
index e69de29..5bb2636 100644
--- a/tmp/b8bc976c-7805-4ef5-8e81-833213109abb_buggy.java
+++ b/tmp/ae75769e-02da-475c-967c-903f2d724456_fixed.java
@@ -0,0 +1,68 @@
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.collections4.Factory;
+import org.apache.commons.collections4.FunctorException;
+import org.apache.commons.collections4.MultiSet;
+import org.apache.commons.collections4.MultiValuedMap;
+import org.apache.commons.collections4.multiset.AbstractMultiSetDecorator;
+
+public class MultiValueMap<K, V> extends AbstractMultiSetDecorator<K> implements MultiValuedMap<K, V> {
+    // deliberately not serializing this field
+    private transient Map<K, Collection<V>> map;
+    private final Factory<? extends Collection<V>> collectionFactory;
+
+    /**
+     * Reads the state of the map from the stream.  It expects to be able
+     * to find the map in the stream.  The order in which the elements are
+     * restored for the multivalued offense/defense map is unimportant, as the
+     * iterators are guaranteed to traverse the map in no particular order.
+     *
+     * @param stream  the stream to read from
+     * @throws IOException if the stream raises it
+     * @throws ClassNotFoundException if the stream raises it
+     */
+    private void readObject(final ObjectInputStream stream)
+        throws IOException, ClassNotFoundException {
+
+        stream.defaultReadObject();
+        this.map = new HashMap<>();
+
+        final int size = stream.readInt();
+        for (int i = 0; i < size; i++) {
+            @SuppressWarnings("unchecked")
+            final K key = (K) stream.readObject();
+            @SuppressWarnings("unchecked")
+            final Collection<V> coll = (Collection<V>) stream.readObject();
+            if (coll != null) {
+                this.map.put(key, coll);
+            }
+        }
+    }
+
+    /**
+     * Writes the map data out to the stream.  This method can safely be
+     * overridden if the subclass needs to write out any additional data.
+     * The subclass must call this method to ensure the map data is written.
+     * <p>
+     * This implementation iterates over the map's
+     * entries and saves the key and value.  Subclasses can forget about the
+     * entries if they wish (although they shouldn't bother).  
+     *
+     * @param stream  the stream to write to
+     * @throws IOException if the stream raises it
+     */
+    private void writeObject(final ObjectOutputStream stream) throws IOException {
+        stream.defaultWriteObject();
+        stream.writeInt(map.size());
+        for (final Map.Entry<K, Collection<V>> entry : map.entrySet()) {
+            stream.writeObject(entry.getKey());
+            stream.writeObject(entry.getValue());
+        }
+    }
+}
\ No newline at end of file
