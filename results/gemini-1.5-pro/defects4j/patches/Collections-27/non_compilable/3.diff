diff --git a/tmp/da1392e1-0bfb-43ee-8ae4-eae1efd0b903_buggy.java b/tmp/10176f73-732c-4635-a36c-261d3044d834_fixed.java
index e69de29..da39780 100644
--- a/tmp/da1392e1-0bfb-43ee-8ae4-eae1efd0b903_buggy.java
+++ b/tmp/10176f73-732c-4635-a36c-261d3044d834_fixed.java
@@ -0,0 +1,304 @@
+import java.util.Collection;
+import java.util.Map;
+
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.Serializable;
+
+/**
+ * @author Matt Hall, John Watkinson, Stephen Colebourne
+ */
+public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Collection<V>>
+        implements MultiValuedMap<K, V>, Serializable, Cloneable {
+
+    /** Serialization version */
+    private static final long serialVersionUID = -2210278786587386284L;
+
+    //-----------------------------------------------------------------------
+    /**
+     * Factory method to create a MultiValueMap using the supplied map to hold the values.
+     * <p>
+     * If the map is null, a HashMap is used.
+     *
+     * @param <K>  the key type
+     * @param <V>  the value type
+     * @param map  the map to use
+     * @return a new multi value map
+     * @since 4.0
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map) {
+        return multiValueMap(map, ArrayList.class);
+    }
+
+    /**
+     * Factory method to create a MultiValueMap using the supplied map to hold the values, and the specified
+     * collection class to use.
+     * <p>
+     * If the map is null, a HashMap is used.
+     *
+     * @param <K>  the key type
+     * @param <V>  the value type
+     * @param map  the map to use
+     * @param collectionClass  the collection class
+     * @return a new multi value map
+     * @throws NullPointerException if collectionClass is null
+     * @since 4.0
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map, final Class<? extends Collection<V>> collectionClass) {
+        if (collectionClass == null) {
+            throw new NullPointerException("collectionClass must not be null");
+        }
+        if (map == null) {
+            return new MultiValueMap<>(new HashMap<K, Collection<V>>(), collectionClass);
+        }
+        return new MultiValueMap<>(map, collectionClass);
+    }
+
+    //-----------------------------------------------------------------------
+    /** The factory to create empty collection instances. */
+    private final transient Class<? extends Collection<V>> collectionClass;
+
+    /**
+     * Constructor that wraps (not copies).
+     *
+     * @param map  the map to decorate, must not be null
+     * @param collectionClass  the collection class to use, must not be null
+     * @throws NullPointerException if map is null
+     */
+    protected MultiValueMap(final Map<K, ? super Collection<V>> map, final Class<? extends Collection<V>> collectionClass) {
+        super(map);
+        if (collectionClass == null) {
+            throw new NullPointerException("collectionClass must not be null");
+        }
+        this.collectionClass = collectionClass;
+    }
+
+    /**
+     * Constructor that wraps (not copies).
+     *
+     * @param map  the map to decorate, must not be null
+     * @throws NullPointerException if map is null
+     */
+    protected MultiValueMap(final Map<K, ? super Collection<V>> map) {
+        super(map);
+        this.collectionClass = ArrayList.class;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Write the map out using a custom routine.
+     *
+     * @param out  the output stream
+     * @throws IOException if an error occurs
+     */
+    private void writeObject(final ObjectOutputStream out) throws IOException {
+        out.defaultWriteObject();
+        out.writeObject(map);
+    }
+
+    /**
+     * Read the map in using a custom routine.
+     *
+     * @param in the input stream
+     * @throws IOException if an error occurs
+     * @throws ClassNotFoundException if an error occurs
+     */
+    @SuppressWarnings("unchecked") // (1) should only fail if collectionClass is incorrect
+    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
+        in.defaultReadObject();
+        map = (Map<K, Collection<V>>) in.readObject();
+        if (!(collectionClass.isAssignableFrom(ArrayList.class) || collectionClass.isAssignableFrom(HashSet.class) ||
+              collectionClass.isAssignableFrom(LinkedList.class) || collectionClass.isAssignableFrom(TreeSet.class))) {
+            // (1)
+            throw new UnsupportedOperationException("Unexpected collection class: " + collectionClass.getName());
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    @Override
+    public boolean containsValue(final Object value) {
+        for (final Collection<V> collection : decorated().values()) {
+            if (collection.contains(value)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    @Override
+    public Collection<V> get(final Object key) {
+        Collection<V> collection = decorated().get(key);
+        if (collection == null) {
+            collection = createCollection(1);
+            decorated().put((K) key, collection); // decorated() ensures cast is not useless
+        }
+        return collection;
+    }
+
+    /**
+     * Removes all values associated with the specified key.
+     * <p>
+     * This implementation returns {@code null}. If the collection is a
+     * {@code List}, then the {@link List#clear()} method is called.
+     *
+     * @param key  the key to remove values from
+     * @return null, the previous value associated with the key
+     */
+    @Override
+    public Collection<V> remove(final Object key) {
+        final Collection<V> values = decorated().remove(key);
+        if (values != null) {
+            values.clear();
+        }
+        return values;
+    }
+
+    //-----------------------------------------------------------------------
+    @Override
+    public boolean putAll(final Map<? extends K, ? extends V> mapToCopy) {
+        boolean changed = false;
+        for (final Map.Entry<? extends K, ? extends V> entry : mapToCopy.entrySet()) {
+            changed |= put(entry.getKey(), entry.getValue());
+        }
+        return changed;
+    }
+
+    @Override
+    public Collection<V> values() {
+        final Collection<V> allValues = createCollection(size());
+        for (final Collection<V> values : decorated().values()) {
+            allValues.addAll(values);
+        }
+        return allValues;
+    }
+
+    /**
+     * Gets the total size of the collection, which is the number of values.
+     *
+     * @return the total size of the collection
+     */
+    @Override
+    public int size() {
+        int total = 0;
+        for (final Collection<V> collection : decorated().values()) {
+            total += collection.size();
+        }
+        return total;
+    }
+
+    /**
+     * Clears the map, removing all entries.
+     */
+    @Override
+    public void clear() {
+        // For speed, only clear the values of the map if necessary
+        if (isEmpty() == false) {
+            for (final Collection<V> collection : decorated().values()) {
+                collection.clear();
+            }
+        }
+        decorated().clear();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Adds the value to the collection associated with the specified key.
+     * <p>
+     * Unlike a normal map, this method returns {@code true} if the value
+     * was added, not if the entry was changed.
+     *
+     * @param key  the key to store to
+     * @param value  the value to store
+     * @return true if the collection changed
+     */
+    @Override
+    public boolean put(final K key, final V value) {
+        Collection<V> values = get(key);
+        return values.add(value);
+    }
+
+    /**
+     * Adds a collection of values to the collection associated with the specified key.
+     *
+     * @param key  the key to store to
+     * @param values  the values to store, may be null
+     * @return true if the collection changed
+     */
+    @Override
+    public boolean putAll(final K key, final Collection<V> values) {
+        if (values == null || values.size() == 0) {
+            return false;
+        }
+        final Collection<V> coll = get(key);
+        return coll.addAll(values);
+    }
+
+    @Override
+    public boolean remove(final Object key, final Object value) {
+        final Collection<V> values = decorated().get(key);
+        if (values == null) {
+            return false;
+        }
+        final boolean result = values.remove(value);
+        if (values.isEmpty()) {
+            decorated().remove(key);
+        }
+        return result;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Creates a new instance of the collection this multi-value map will use.
+     *
+     * @param size  the collection size
+     * @return a new empty collection instance
+     */
+    protected Collection<V> createCollection(final int size) {
+        if (size <= 0) {
+            return createCollection();
+        }
+        try {
+            final Constructor<? extends Collection<V>> constructor = collectionClass.getDeclaredConstructor(Integer.TYPE);
+            return constructor.newInstance(size);
+        } catch (final NoSuchMethodException ex) {
+            // ignore
+        } catch (final IllegalAccessException ex) {
+            // ignore
+        } catch (final InstantiationException ex) {
+            // ignore
+        } catch (final InvocationTargetException ex) {
+            // ignore
+        }
+        // Failed to create with size, return default
+        return createCollection();
+    }
+
+    /**
+     * Creates a new instance of the collection this multi-value map will use.
+     *
+     * @return a new empty collection instance
+     */
+    protected Collection<V> createCollection() {
+        try {
+            return collectionClass.newInstance();
+        } catch (final IllegalAccessException ex) {
+            throw new IllegalArgumentException("The collection class " + collectionClass.getName() +
+                " must have a public no-arg constructor", ex);
+        } catch (final InstantiationException ex) {
+            throw new IllegalArgumentException("The collection class " + collectionClass.getName() +
+                " must not be abstract", ex);
+        }
+    }
+
+    /**
+     * Clones the map giving a shallow copy.
+     *
+     * @return a shallow copy
+     */
+    @Override
+    public Object clone() {
+        return new MultiValueMap<>(this);
+    }
+
+}
\ No newline at end of file
