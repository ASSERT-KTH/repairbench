diff --git a/tmp/4fe7be94-39c2-43f5-9450-dae860eadced_buggy.java b/tmp/8fb80ad5-25ad-4d7b-8970-c8328756dd96_fixed.java
index e69de29..cd534a9 100644
--- a/tmp/4fe7be94-39c2-43f5-9450-dae860eadced_buggy.java
+++ b/tmp/8fb80ad5-25ad-4d7b-8970-c8328756dd96_fixed.java
@@ -0,0 +1,96 @@
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Map;
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.Serializable;
+
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.collections4.Factory;
+import org.apache.commons.collections4.FunctorException;
+import org.apache.commons.collections4.MultiSet;
+import org.apache.commons.collections4.multiset.AbstractMapMultiSet;
+
+/**
+ * Implements {@code MultiSet} using a {@code Map} to store the data.
+ * <p>
+ * This is the standard implementation of a multiset.
+ * </p>
+ * @param <E> the element type
+ * @since 4.1
+ */
+public class MultiValueMap<K, V> extends AbstractMapMultiSet<K, V> implements Serializable {
+
+    /** Serialisation version */
+    private static final long serialVersionUID = 20151118L;
+
+    /** The factory to use for creating the value collections. */
+    private final Factory<? extends Collection<V>> collectionFactory;
+
+    /**
+     * Constructor.
+     *
+     * @param map  the map to decorate
+     * @param collectionFactory  the factory to use to create value collections
+     */
+    public MultiValueMap(final Map<K, ? super Collection<V>> map, final Factory<? extends Collection<V>> collectionFactory) {
+        super(map);
+        if (collectionFactory == null) {
+            throw new IllegalArgumentException("The factory must not be null");
+        }
+        this.collectionFactory = collectionFactory;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Write the map out using a custom routine.
+     *
+     * @param out  the output stream
+     * @throws IOException if an error occurs while writing to the collection's underlying storage
+     */
+    private void writeObject(final ObjectOutputStream out) throws IOException {
+        out.defaultWriteObject();
+        out.writeObject(getMap());
+    }
+
+    /**
+     * Read the map in using a custom routine.
+     *
+     * @param in  the input stream
+     * @throws IOException if an error occurs while reading from the collection's underlying storage
+     * @throws ClassNotFoundException if the class of a serialized object can not be found
+     */
+    @SuppressWarnings("unchecked") // (1) should only fail if factory is incorrect
+    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
+        in.defaultReadObject();
+        setMap((Map<K, ? super Collection<V>>) in.readObject());
+    }
+
+    //-----------------------------------------------------------------------
+    @Override
+    protected Collection<V> createCollection() {
+        try {
+            return collectionFactory.create();
+        } catch (final RuntimeException ex) {
+            throw ex;
+        } catch (final Exception ex) {
+            throw new FunctorException(ex);
+        }
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public boolean equals(final Object object) {
+        if (object == this) {
+            return true;
+        }
+        if (!(object instanceof MultiValueMap)) {
+            return false;
+        }
+        final MultiValueMap<?, ?> that = (MultiValueMap<?, ?>) object;
+        return super.equals(object) &&
+               CollectionUtils.isEqualCollection(entrySet(), that.entrySet());
+    }
+
+}
\ No newline at end of file
