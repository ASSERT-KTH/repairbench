diff --git a/tmp/e4532e84-7689-43ed-8394-d429d45d1e86_buggy.java b/tmp/aa1de9d1-2a93-4f27-aae8-719f62c85e6f_fixed.java
index e69de29..4a35b80 100644
--- a/tmp/e4532e84-7689-43ed-8394-d429d45d1e86_buggy.java
+++ b/tmp/aa1de9d1-2a93-4f27-aae8-719f62c85e6f_fixed.java
@@ -0,0 +1,67 @@
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Map;
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.collections4.Factory;
+import org.apache.commons.collections4.MapIterator;
+import org.apache.commons.collections4.MultiSet;
+import org.apache.commons.collections4.Transformer;
+import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
+import org.apache.commons.collections4.keyvalue.AbstractKeyValueDecorator;
+import org.apache.commons.collections4.map.AbstractMapDecorator;
+import org.apache.commons.collections4.multiset.AbstractMultiSetDecorator;
+
+public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Collection<V>> {
+    // NOTE: This class is not really thread-safe; it should only be used internally
+
+    /** The factory to use to create value collections. */
+    private final Factory<? extends Collection<V>> collectionFactory;
+
+    /**
+     * Create a MultiValueMap backed by the given map.
+     *
+     * @param map  a map to decorate
+     * @param collectionFactory  the factory to use to create value collections, must not be null
+     * @throws NullPointerException if map is null
+     * @throws NullPointerException if collectionFactory is null
+     * @since 4.1
+     */
+    public MultiValueMap(final Map<K, ? super Collection<V>> map, final Factory<? extends Collection<V>> collectionFactory) {
+        super(map);
+        if (collectionFactory == null) {
+            throw new NullPointerException("collectionFactory must not be null");
+        }
+        this.collectionFactory = collectionFactory;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Write the map out using a custom routine.
+     * @param out the output stream
+     * @throws IOException
+     */
+    private void writeObject(final ObjectOutputStream out) throws IOException {
+        out.defaultWriteObject();
+        out.writeObject(map);
+    }
+
+    /**
+     * Read the map in using a custom routine.
+     * @param in the input stream
+     * @throws IOException
+     * @throws ClassNotFoundException
+     */
+    @SuppressWarnings("unchecked")
+    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
+        in.defaultReadObject();
+        map = (Map<K, Collection<V>>) in.readObject();
+        if (collectionFactory.getClass() != ArrayList.class) {
+            throw new UnsupportedOperationException("Unexpected collection class " + collectionFactory.getClass());
+        }
+    }
+
+}
\ No newline at end of file
