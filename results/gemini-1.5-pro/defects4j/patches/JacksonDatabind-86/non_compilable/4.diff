diff --git a/tmp/10ab3b2c-2434-4afe-8f30-1c0bc2d6ff7b_buggy.java b/tmp/53ffba75-2631-48b8-83e1-d54e3912be6b_fixed.java
index e69de29..4c4db98 100644
--- a/tmp/10ab3b2c-2434-4afe-8f30-1c0bc2d6ff7b_buggy.java
+++ b/tmp/53ffba75-2631-48b8-83e1-d54e3912be6b_fixed.java
@@ -0,0 +1,416 @@
+package com.fasterxml.jackson.databind.type;
+
+import java.lang.reflect.TypeVariable;
+import java.util.*;
+
+import com.fasterxml.jackson.databind.JavaType;
+
+/**
+ * Specialized {@link TypeBase} implementation that handles cases where type
+ * information includes type parameters that may recursively reference
+ * type itself. Due to this, resolution of type metadata may have to be
+ * deferred until full structure is known.
+ */
+public class RecursiveType extends TypeBase
+{
+    private static final long serialVersionUID = 1L;
+
+    /**
+     * Placeholder used before actual resolved type is known.
+     */
+    protected JavaType _placeholder;
+
+    /*
+    /**********************************************************
+    /* Life cycle
+    /**********************************************************
+     */
+
+    public RecursiveType(Class<?> erasedType, TypeBindings bindings)
+    {
+        super(erasedType, bindings, null, null, 0, null, null, false);
+        _placeholder = null;
+    }
+
+    /**
+     * Method that needs to be called once we know what concrete
+     * type instance this recursive type represents
+     */
+    public void setReference(JavaType ref)
+    {
+        // sanity check (should never happen)
+        if (ref == null) {
+            throw new IllegalArgumentException("Can not pass null argument");
+        }
+        if (_placeholder != null) {
+            throw new IllegalArgumentException("Trying to re-set self reference; old value:"+_placeholder+", new:"+ref);
+        }
+        // And then update with recursive information
+        _placeholder = ref;
+        // And since it's now resolved, can also convert type bounds
+        if (_bindings == null) {
+            _bindings = TypeBindings.emptyBindings();
+        } else {
+            _bindings = _bindings.withHandlers(this);
+        }
+        // 21-Mar-2016, tatu: Should we try to eagerly update handlers of contained
+        //   types too? For now, don't...
+    }
+
+    @Override
+    public JavaType withContentType(JavaType contentType) {
+        throw new IllegalArgumentException("Can not set content-type on a recursive type");
+    }
+
+    @Override
+    public JavaType withTypeHandler(Object h) {
+        if (_placeholder != null) {
+            return _placeholder.withTypeHandler(h);
+        }
+        return cloneAsAbstractType(this)._narrow(h);
+    }
+
+    @Override
+    public JavaType withContentTypeHandler(Object h) {
+        if (_placeholder != null) {
+            return _placeholder.withContentTypeHandler(h);
+        }
+        return cloneAsAbstractType(this)._narrowContent(h);
+    }
+
+    @Override
+    public JavaType withValueHandler(Object h) {
+        if (_placeholder != null) {
+            return _placeholder.withValueHandler(h);
+        }
+        return cloneAsAbstractType(this)._narrowValue(h);
+    }
+
+    @Override
+    public JavaType withContentValueHandler(Object h) {
+        if (_placeholder != null) {
+            return _placeholder.withContentValueHandler(h);
+        }
+        return cloneAsAbstractType(this)._narrowContentValue(h);
+    }
+
+    @Override
+    protected JavaType _narrow(Object toReturn) {
+        // almost same as super-class, but need to clear placeholder
+        // to avoid tripping infinite loops
+        return new SimpleType(_class, _bindings, _superClass, _interfaces,
+                _valueHandler, _typeHandler, _asStatic, _hashCode)
+            .withContentValueHandler(_contentValueHandler);
+    }
+
+    /**
+     * Method that is to create a new instance of this type, but with
+     * different {@link JavaType} for value handler.
+     */
+    protected abstract JavaType cloneAsAbstractType(RecursiveType base);
+
+    /*
+    /**********************************************************
+    /* Methods for resolving concrete type
+    /**********************************************************
+     */
+
+    @Override
+    public boolean isFullyKnown() { return (_placeholder == null); }
+
+    /**
+     * Method that must be called to check whether this type
+     * is referring to the type being constructed (via type parameters).
+     * This is basically done to detect infinite recursion; problem is that
+     * this is not easy, and since it is possible to construct self-linked
+     * types...
+     */
+    public boolean isReferencing(Class<?> type)
+    {
+        return (_class == type);
+    }
+
+    /**
+     * Method that can be used to check whether this type
+     * has a variable name that suggests that it might make use of
+     * recursive type (denoted by type variable name being same
+     * as type variable name of at least one of its bounds).
+     * Note, however, that a positive return does NOT guarantee
+     * that such resolution is possible, just that it might be.
+     */
+    public boolean mayBeRecursive()
+    {
+        // First: we can only be recursive if we actually have type vars...
+        if (_bindings == null) {
+            return false;
+        }
+        // And from there on, we can delegate the work
+        return _bindings.mayBeRecursive();
+    }
+    
+    /*
+    /**********************************************************
+    /* Accessor methods for ASKING resolution of subtypes
+    /**********************************************************
+     */
+
+    @Override
+    public JavaType refine(Class<?> rawType, TypeBindings bindings,
+            JavaType superClass, JavaType[] superInterfaces)
+    {
+        if (!isFullyResolved()) {
+            throw new IllegalArgumentException("Can not refine RecursiveType that is not yet resolved");
+        }
+        // But can delegate to resolved instance...
+        return _placeholder.refine(rawType, bindings, superClass, superInterfaces);
+    }
+
+    @Override
+    public JavaType forcedNarrowBy(Class<?> subclass)
+    {
+        // If so, we can do type refinement:
+        if (isFullyResolved()) {
+            // If so, we can do type refinement:
+            return _placeholder.forcedNarrowBy(subclass);
+        }
+        // Otherwise, need to Create bogus Placeholder matching new subtype
+        return _placeholder.narrow(subclass);
+    }
+
+    /**
+     * This method is overridden to return effective (recursive) type
+     * to use: this is done since in most cases methods are implemented
+     * on concrete 'bottom' type, even if declared in an interface or
+     * such.
+     */
+    @Override
+    public JavaType getSuperClass() {
+        if (isFullyResolved()) {
+            return _placeholder.getSuperClass();
+        }
+        return super.getSuperClass();
+    }
+
+    @Override
+    public TypeBindings getBindings()
+    {
+        if (_placeholder != null) {
+            return _placeholder.getBindings();
+        }
+        if (_bindings == null) {
+            _bindings = TypeBindings.emptyBindings();
+        }
+        return _bindings;
+    }
+    
+    @Override
+    public JavaType findSuperType(Class<?> rawTarget) {
+        if (isFullyResolved()) {
+            return _placeholder.findSuperType(rawTarget);
+        }
+        // But may still be found from partially resolved type
+        return super.findSuperType(rawTarget);
+    }
+
+    @Override
+    public Class<?> getParameterSource() {
+        /* 10-Nov-2015, tatu: Not sure whether this should return null
+         *   or not; likely should point to the original erased class
+         *   in case it's ever used.
+         */
+        return _class; 
+    }
+    
+    @Override
+    protected JavaType _narrow(Class<?> subclass, TypeBindings newBindings,
+            JavaType newSuperClass, JavaType[] newSuperInterfaces)
+    {
+        // Can not do much, since placeholder may not yet be assigned...
+        return this;
+    }
+
+    /*
+    /**********************************************************
+    /* Accessors
+    /**********************************************************
+     */
+
+    @Override
+    public boolean isContainerType() {
+        if (_placeholder != null) {
+            return _placeholder.isContainerType();
+        }
+        return false;
+    }
+
+    @Override
+    public boolean hasRawClass(Class<?> clz) {
+        if (isFullyResolved()) {
+            return _placeholder.hasRawClass(clz);
+        }
+        // Type may be resolved later; but if not, calling super is fine
+        return super.hasRawClass(clz);
+    }
+
+    @Override
+    public boolean isTypeOrSubTypeOf(Class<?> clz) {
+        if (isFullyResolved()) {
+            return _placeholder.isTypeOrSubTypeOf(clz);
+        }
+        // Type may be resolved later; but if not, calling super is fine
+        return super.isTypeOrSubTypeOf(clz);
+    }
+
+    @Override
+    public String toCanonical()
+    {
+        if (_placeholder != null) {
+            return _placeholder.toCanonical();
+        }
+        return super.toCanonical();
+    }
+
+    @Override
+    public String toString()
+    {
+        /* Note: do NOT try to get textual representation if the type itself
+         * may be recursively defined; this can lead to infinite loops
+         */
+        if (_placeholder != null) {
+            return _placeholder.toString();
+        }
+        StringBuilder sb = new StringBuilder(40).append("[recursive type; ");
+        if (_class != null) {
+            sb = sb.append(TypeFactory.classForTyping(_class).getName());
+        } else {
+            sb = sb.append('?');
+        }
+        sb.append(']');
+        return sb.toString();
+    }
+
+    @Override
+    public boolean equals(Object o)
+    {
+        if (o == this) return true;
+        if (o == null) return false;
+        if (o.getClass() != getClass()) return false;
+
+        RecursiveType other = (RecursiveType) o;
+        if (_placeholder != null) {
+            return _placeholder.equals(other._placeholder);
+        }
+        // Otherwise, worry about placeholder...
+        return (_class == other._class);
+    }
+
+    @Override
+    public JavaType getContentType() {
+        if (_placeholder != null) {
+            return _placeholder.getContentType();
+        }
+        return null;
+    }
+
+    @Override
+    public JavaType getReferencedType() {
+        return (_placeholder != null) ? _placeholder : this;
+    }
+
+    /*
+    /**********************************************************
+    /* Internal methods
+    /**********************************************************
+     */
+
+    @Override
+    protected JavaType _migrate(Class<?> newRawClass, TypeBindings newBindings,
+            JavaType newSuperClass, JavaType[] newInterfaces) {
+        if (_placeholder != null) {
+            return _placeholder._migrate(newRawClass, newBindings,
+                    newSuperClass, newInterfaces);
+        }
+        throw new IllegalArgumentException("Illegal to migrate on non-resolved RecursiveType ("+getClass().getName()+")");
+    }
+
+    /**
+     * Helper method we need for handling contained types: since
+     * this class can not be mutated, method is just to ensure
+     * that method signature is compatible with {@link TypeBase}
+     */
+    protected RecursiveType _uncheckedNarrow(Class<?> subclass) {
+        // We'll assume it works as expected; not much we can do here...
+        // This does mean that the 'this' reference is only updated once,
+        // but seems like it should work ok
+        _class = subclass;
+        _hashCode = subclass.getName().hashCode();
+        return this;
+    }
+
+    /*
+    /**********************************************************
+    /* Extended API for relationship to resolved concrete type
+    /**********************************************************
+     */
+
+    /**
+     * Method that can be used to get actual fully resolved type, if
+     * that is possible. This means that call is only legal to make
+     * if caller knows that type has been completely resolved.
+     * 
+     * @return Resolved type if resolution complete; null otherwise
+     */
+    public JavaType getSelfReferencedType() { return _placeholder; }
+
+    /*
+    /**********************************************************
+    /* Helper class(es)
+    /**********************************************************
+     */
+
+    /**
+     * This helper class is used to "hide" recursive relationships,
+     * mostly for benefit of {@link TypeBindings}
+     */
+    public static class RecursiveTypeHandler
+        implements java.io.Serializable
+    {
+        private static final long serialVersionUID = 1L;
+
+        private final Class<?> _erasedType;
+        /**
+         * Name of type variable within {@link #_erasedType}
+         */
+        private final String _typeVariableName;
+
+        protected JavaType _referencedType;
+
+        public RecursiveTypeHandler(Class<?> erasedType, String tvName)
+        {
+            _erasedType = erasedType;
+            _typeVariableName = tvName;
+        }
+
+        public void setReference(JavaType type) {
+            if (_referencedType != null) {
+                throw new IllegalStateException("Trying to reset 'reference' from "+_referencedType+" to "+type);
+            }
+            _referencedType = type;
+        }
+
+        public JavaType getSelfReference(JavaType type, TypeBindings typeBindings)
+        {
+            if (_referencedType != null) {
+                return _referencedType;
+            }
+            if (typeBindings == null) {
+                return JavaType.unknownType();
+            }
+            // Is this recursive reference?
+            return typeBindings.findBoundType(_typeVariableName);
+        }
+
+        @Override
+        public String toString() { return _erasedType.getName()+"#"+_typeVariableName; }
+    }
+}
\ No newline at end of file
