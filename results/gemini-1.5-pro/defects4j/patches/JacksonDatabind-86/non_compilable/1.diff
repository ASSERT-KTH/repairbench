diff --git a/tmp/4bdcd964-77e0-4f59-ae1c-8c83388f0638_buggy.java b/tmp/e7a900d6-c9d0-481d-b089-45c4cc73b819_fixed.java
index e69de29..325c37b 100644
--- a/tmp/4bdcd964-77e0-4f59-ae1c-8c83388f0638_buggy.java
+++ b/tmp/e7a900d6-c9d0-481d-b089-45c4cc73b819_fixed.java
@@ -0,0 +1,416 @@
+package com.fasterxml.jackson.databind.type;
+
+import java.lang.reflect.TypeVariable;
+import java.util.*;
+
+import com.fasterxml.jackson.databind.JavaType;
+
+/**
+ * We need a custom variant of {@link TypeBase} to handle
+ * caching properly, during recursive resolution.
+ */
+public abstract class RecursiveType extends TypeBase
+{
+    /**
+     * Actual fully resolved type; assigned only at the end of
+     * resolution if/when resolution succeeds.
+     */
+    protected JavaType _resolvedType;
+
+    /*
+    /**********************************************************
+    /* Life-cycle
+    /**********************************************************
+     */
+
+    public RecursiveType(Class<?> cls, TypeBindings bindings,
+            JavaType superClass, JavaType[] superInts,
+            Object valueHandler, Object typeHandler, boolean asStatic)
+    {
+        super(cls, bindings, superClass, superInts, 0, valueHandler, typeHandler, asStatic);
+    }
+
+    @Override
+    public RecursiveType withTypeHandler(Object h) {
+        if (h == _typeHandler) {
+            return this;
+        }
+        // sanity check to avoid infinite loops...
+        if (_resolvedType != null) {
+            return (RecursiveType) _resolvedType.withTypeHandler(h);
+        }
+        return (RecursiveType) _narrow(h);
+    }
+
+    @Override
+    public JavaType withContentTypeHandler(Object h)
+    {
+        // sanity check to avoid infinite loops...
+        if (_resolvedType != null) {
+            return _resolvedType.withContentTypeHandler(h);
+        }
+        return this;
+    }
+    
+    @Override
+    public RecursiveType withValueHandler(Object h) {
+        if (h == _valueHandler) {
+            return this;
+        }
+        // sanity check to avoid infinite loops...
+        if (_resolvedType != null) {
+            return (RecursiveType) _resolvedType.withValueHandler(h);
+        }
+        return (RecursiveType) _narrow(h);
+    }
+
+    @Override
+    public JavaType withContentValueHandler(Object h) {
+        // sanity check to avoid infinite loops...
+        if (_resolvedType != null) {
+            return _resolvedType.withContentValueHandler(h);
+        }
+        return this;
+    }
+
+    @Override
+    public JavaType withStaticTyping() {
+        if (_asStatic) {
+            return this;
+        }
+        // sanity check to avoid infinite loops...
+        if (_resolvedType != null) {
+            return _resolvedType.withStaticTyping();
+        }
+        return _narrow(_valueHandler, _typeHandler, true);
+    }
+
+    public void setResolvedType(JavaType t) {
+        _resolvedType = t;
+    }
+
+    /*
+    /**********************************************************
+    /* Methods for RP resolution
+    /**********************************************************
+     */
+
+    /**
+     * Method that must be called for the type to refine itself,
+     * given the actual full type information now known.
+     * Operation may fail if type cannot be self-resolved, in
+     * which case {@link #getSelfReferencedType()} can be used
+     * to detect and possibly work around such resolution problem.
+     * 
+     * @param context Access to resolved types in case unresolved
+     *    type requires resolution; as well as factory to use
+     *    for resolving still missing types.
+     *
+     * @return This type, if resolution succeeds; or 
+     *   {@link #getSelfReferencedType()} if it fails
+     */
+    public abstract JavaType refine(TypeBindingsBindings context);
+
+    /**
+     * Method that can be used to check whether call to
+     * {@link #refine} is likely to succeed or not: if it returns
+     * a non-null value, it will fail (and return value is this type);
+     * if it returns null, it will succeed.
+     * Note, however, that it is still possible that resolution
+     * fails, as it may depend on contents of the whole graph.
+     */
+    public abstract JavaType getSelfReferencedType();
+
+    /*
+    /**********************************************************
+    /* Overridden methods
+    /**********************************************************
+     */
+
+    @Override
+    public boolean isContainerType() { return false; }
+
+    @Override
+    public String toCanonical() {
+        if (_resolvedType != null) {
+            return _resolvedType.toCanonical();
+        }
+        StringBuilder sb = new StringBuilder();
+        _class.getName();
+        if (_bindings != null) {
+            sb.append('<');
+            int i = 0;
+            for (JavaType type : _bindings.getTypeParameters()) {
+                if (i > 0) {
+                    sb.append(',');
+                }
+                sb.append(type.toCanonical());
+                ++i;
+            }
+            sb.append('>');
+        }
+        return sb.toString();
+    }
+
+    @Override
+    public String toString()
+    {
+        if (_resolvedType != null) {
+            return _resolvedType.toString();
+        }
+        StringBuilder sb = new StringBuilder(40);
+        sb.append("[recursive type; ");
+        if (_resolvedType != null) {
+            sb.append("resolved to ").append(_resolvedType.getRawClass().getName());
+        } else {
+            sb.append("unresolved");
+        }
+        sb.append(']');
+        return sb.toString();
+    }
+
+    @Override
+    public boolean equals(Object o)
+    {
+        if (o == this) return true;
+        if (o == null || o.getClass() != getClass()) return false;
+        RecursiveType other = (RecursiveType) o;
+        if (_resolvedType != null) {
+            return _resolvedType.equals(other._resolvedType);
+        }
+        // Otherwise, worry about raw type and type parameters
+        return (_class == other._class)
+            && (_bindings != null)
+            && (_bindings.equals(other._bindings))
+            ;
+    }
+
+    @Override
+    public JavaType getSuperClass() {
+        // 30-Jul-2019, tatu: Need to override for this specific case;
+        //   otherwise we get infinite loop
+        if (_resolvedType != null) {
+            return _resolvedType.getSuperClass();
+        }
+        return super.getSuperClass();
+    }
+
+    protected abstract JavaType _narrow(Object valueHandler, Object typeHandler, boolean asStatic);
+
+    /**
+     * Overridable method that subtype implementations may use to
+     * try to find "better" type to return if there is recursion.
+     * It is often not possible, or desirable, to eagerly resolve
+     * type during construction, but this method is a work-around
+     * that can be used to alleviate problems from recursion.
+     */
+    protected JavaType _concrete(TypeBindingsBindings context, TypeBindings typeBindings) {
+        if (typeBindings != null) {
+            return context.resolveAndBind(typeBindings);
+        }
+        return TypeFactory.unknownType();
+    }
+    
+    /*
+    /**********************************************************
+    /* Helper classes
+    /**********************************************************
+     */
+
+    /**
+     * As a full type resolution may require multiple resolution
+     * steps, we may need to use temporary placeholders.
+     */
+    public static class PlaceholderForType extends RecursiveType
+    {
+        protected final TypeBindings _actual;
+
+        public PlaceholderForType(Class<?> cls, TypeBindings tparams)
+        {
+            super(cls, tparams, null, null, null, null, false);
+            _actual = tparams;
+        }
+
+        @Override
+        public JavaType getSelfReferencedType() {
+            return this;
+        }
+
+        @Override
+        public JavaType refine(TypeBindingsBindings context) {
+            JavaType t = _concrete(context, _actual);
+            _resolvedType = t;
+            return t;
+        }
+
+        @Override
+        protected JavaType _narrow(Object valueHandler, Object typeHandler, boolean asStatic) {
+            // should never get called
+            throw new IllegalStateException("Should never try to adjust placeholder type");
+        }
+    }
+
+    /**
+     * We actually need somewhat complex representation here, to allow for
+     * type variables to be properly resolved.
+     */
+    public static class TypeBindingsBindings
+    {
+        private final TypeBindingsBindings _parent;
+
+        private final Map<String,JavaType> _types;
+
+        private List<UnresolvedRecursiveType> _unresolvedTypes;
+
+        public TypeBindingsBindings(TypeBindingsBindings parent, TypeVariable<?>[] vars,
+                JavaType[] types)
+        {
+            _parent = parent;
+            if ((vars == null) || (vars.length == 0)) {
+                _types = Collections.emptyMap();
+            } else {
+                int len = vars.length;
+                Map<String,JavaType> m = new HashMap<String,JavaType>(len);
+                for (int i = 0; i < len; ++i) {
+                    m.put(vars[i].getName(), types[i]);
+                }
+                _types = m;
+            }
+        }
+
+        /**
+         * Alternate constructor used for cases where we get a Map of types directly,
+         * not via type parameters
+         *
+         * @since 2.9
+         */
+        public TypeBindingsBindings(TypeBindingsBindings parent,
+                Map<String,JavaType> types)
+        {
+            _parent = parent;
+            _types = types;
+        }
+        
+        public JavaType findType(String name)
+        {
+            if (_types.containsKey(name)) {
+                return _types.get(name);
+            }
+            if (_parent != null) {
+                return _parent.findType(name);
+            }
+            return null;
+        }
+
+        /**
+         * @since 2.7
+         */
+        public void addUnresolvedType(UnresolvedRecursiveType type) {
+            if (_unresolvedTypes == null) {
+                _unresolvedTypes = new ArrayList<UnresolvedRecursiveType>();
+            }
+            _unresolvedTypes.add(type);
+        }
+
+        /**
+         * @since 2.7
+         */
+        public boolean hasUnresolvedTypes() {
+            return _unresolvedTypes != null && !_unresolvedTypes.isEmpty();
+        }
+
+        /**
+         * Method called to resolve types that have self-references (direct
+         * or indirect)
+         * 
+         * @since 2.7
+         */
+        public List<JavaType> resolve() {
+            if (_unresolvedTypes == null) {
+                return Collections.emptyList();
+            }
+            int count = _unresolvedTypes.size();
+            List<JavaType> resolvedTypes = new ArrayList<JavaType>(count);
+            for (int i = 0; i < count; ++i) {
+                resolvedTypes.add(null);
+            }
+            int i = 0;
+            for (UnresolvedRecursiveType unresolved : _unresolvedTypes) {
+                JavaType resolved = unresolved.resolve();
+                // 28-Jun-2016, tatu: Not sure why, but this is necessary...
+                if (resolved instanceof RecursiveType) {
+                    ((RecursiveType) resolved).refine(this);
+                }
+                resolvedTypes.set(i, resolved);
+                ++i;
+            }
+            return resolvedTypes;
+        }
+
+        /**
+         * @since 2.9
+         */
+        public JavaType resolveAndBind(TypeBindings typeBindings) {
+            // First, basic resolution of type parameters:
+            int len = typeBindings.size();
+            JavaType[] typeParams;
+            if (len == 0) {
+                typeParams = NO_TYPES;
+            } else {
+                typeParams = new JavaType[len];
+                for (int i = 0; i < len; ++i) {
+                    JavaType t = typeBindings.getBoundType(i);
+                    if (t instanceof PlaceholderForType) {
+                        // Self-reference; needs re-processing later
+                        t = _resolveTypePlaceholder(this, (PlaceholderForType) t);
+                    } else {
+                        t = _resolveType(this, t);
+                    }
+                    typeParams[i] = t;
+                }
+            }
+            // And then either use resolved parameters, create placeholder, or fail:
+            JavaType realType = typeBindings.getType();
+            if (realType instanceof UnresolvedRecursiveType) {
+                realType = _resolveTypePlaceholder(this, (UnresolvedRecursiveType) realType);
+            } else {
+                realType = _resolveType(this, realType);
+            }
+            if (realType.isTypeOrSubTypeOf(typeBindings.getType().getRawClass())) {
+                return realType.refine(this, typeBindings, typeParams);
+            }
+            // If not, it's good as is, already:
+            return realType;
+        }
+
+        protected JavaType _resolveTypePlaceholder(TypeBindingsBindings context,
+                PlaceholderForType placeholderType) {
+            // Self-reference; needs re-processing later
+            JavaType t = placeholderType.refine(context);
+            // 17-Feb-2017, tatu: Not 100% sure why we need this check but:
+            if (t instanceof PlaceholderForType) {
+                t = _resolveTypePlaceholder(context, (PlaceholderForType) t);
+            }
+            return t;
+        }
+
+        protected JavaType _resolveTypePlaceholder(TypeBindingsBindings context,
+                UnresolvedRecursiveType unresolvedType)
+        {
+            // Self-reference; needs re-processing later
+            addUnresolvedType(unresolvedType);
+            return unresolvedType.getPlaceholder();
+        }
+
+        protected JavaType _resolveType(TypeBindingsBindings context, JavaType t) {
+            if (t instanceof RecursiveType) {
+                // A placeholder?
+                if (t instanceof PlaceholderForType) {
+                    return _resolveTypePlaceholder(context, (PlaceholderForType) t);
+                }
+                return ((RecursiveType) t).refine(context);
+            }
+            return t;
+        }
+    }
+}
\ No newline at end of file
