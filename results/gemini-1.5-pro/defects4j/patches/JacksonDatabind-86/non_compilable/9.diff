diff --git a/tmp/574b51f0-a8f4-4c41-977b-11f6af8a7d22_buggy.java b/tmp/9dfe57ee-62d9-4dd5-a0be-79b76e684de5_fixed.java
index e69de29..c36ec33 100644
--- a/tmp/574b51f0-a8f4-4c41-977b-11f6af8a7d22_buggy.java
+++ b/tmp/9dfe57ee-62d9-4dd5-a0be-79b76e684de5_fixed.java
@@ -0,0 +1,205 @@
+import java.util.HashMap;
+import java.util.Map;
+
+import com.fasterxml.jackson.databind.JavaType;
+import com.fasterxml.jackson.databind.type.TypeBindings;
+import com.fasterxml.jackson.databind.type.TypeFactory;
+
+public class RecursiveType extends JavaType {
+    private static final long serialVersionUID = 1L;
+
+    /**
+     * Placeholder used before actual type is resolved.
+     */
+    protected final Class<?> _placeholder;
+
+    protected JavaType _referencedType;
+
+    protected final JavaType _superClass;
+    protected final JavaType[] _interfaceTypes;
+
+    public RecursiveType(Class<?> erasedType, JavaType selfReference) {
+        super(erasedType, 0, selfReference, null, null,
+                false, null, null);
+        _placeholder = erasedType;
+        _referencedType = null;
+        _superClass = null;
+        _interfaceTypes = null;
+    }
+
+    /**
+     * "Copy-constructor" used for creating resolved, fluent-copy.
+     */
+    private RecursiveType(JavaType type, Class<?> erasedType, JavaType selfReference,
+            JavaType superClass, JavaType[] interfaces)
+    {
+        super(erasedType, type.hashCode(), selfReference, type.getBindings(), type._typeHandler,
+                type._asStatic, type._valueHandler, type._typeAnnotations);
+        _placeholder = null;
+        _referencedType = selfReference;
+        _superClass = superClass;
+        _interfaceTypes = interfaces;
+    }
+
+    @Override
+    public JavaType withContentType(JavaType contentType) {
+        throw new IllegalArgumentException("Cannot override content type of " + this.getClass().getName());
+    }
+
+    @Override
+    public JavaType withTypeHandler(Object h) {
+        return new RecursiveType(this, _rawClass, _referencedType, _superClass, _interfaceTypes);
+    }
+
+    @Override
+    public JavaType withContentTypeHandler(Object h) {
+        return new RecursiveType(this, _rawClass, _referencedType, _superClass, _interfaceTypes);
+    }
+
+    @Override
+    public JavaType withValueHandler(Object h) {
+        return new RecursiveType(this, _rawClass, _referencedType, _superClass, _interfaceTypes);
+    }
+
+    @Override
+    public JavaType withContentValueHandler(Object h) {
+        return new RecursiveType(this, _rawClass, _referencedType, _superClass, _interfaceTypes);
+    }
+
+    @Override
+    public JavaType withStaticTyping() {
+        if (_asStatic) {
+            return this;
+        }
+        return new RecursiveType(this, _rawClass, _referencedType, _superClass, _interfaceTypes);
+    }
+
+    @Override
+    public JavaType refine(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces) {
+        throw new IllegalArgumentException("Cannot refine " + this.getClass().getName());
+    }
+
+    @Override
+    protected JavaType _narrow(Class<?> subclass) {
+        return new RecursiveType(this, subclass, _referencedType, _superClass, _interfaceTypes);
+    }
+
+    @Override
+    public boolean isContainerType() {
+        return false;
+    }
+
+    @Override
+    public boolean hasRawClass(Class<?> clz) {
+        // usually we might want to return (this == clz), but for lazy eval
+        // need to be careful
+        if (_rawClass == clz) {
+            return true;
+        }
+        if (_referencedType != null) {
+            return _referencedType.hasRawClass(clz);
+        }
+        return false;
+    }
+
+    @Override
+    public boolean isTypeOrSubTypeOf(Class<?> clz) {
+        if (_rawClass == clz) {
+            return true;
+        }
+        if (_referencedType != null) {
+            return _referencedType.isTypeOrSubTypeOf(clz);
+        }
+        return false;
+    }
+
+    @Override
+    public String toString() {
+        if (_referencedType != null) {
+            return _referencedType.toString();
+        }
+        // this should never happen, but
+        return "RecursiveType(unresolved)";
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o == this) return true;
+        if (o == null) return false;
+        if (o.getClass() != getClass()) return false;
+
+        RecursiveType other = (RecursiveType) o;
+
+        if (_referencedType == null) {
+            return other._referencedType == null;
+        }
+        return _referencedType.equals(other._referencedType);
+    }
+
+    public boolean _isCircular() {
+        if (_referencedType == null) return false;
+        Map<Class<?>, Boolean> seen = new HashMap<>();
+        seen.put(_rawClass, true);
+        return _isCircular(_referencedType, seen);
+    }
+
+    private boolean _isCircular(JavaType type, Map<Class<?>, Boolean> seen) {
+        if (type instanceof RecursiveType) {
+            RecursiveType rt = (RecursiveType) type;
+            if (rt._referencedType != null) {
+                Class<?> refRaw = rt._referencedType.getRawClass();
+                if (seen.containsKey(refRaw)) {
+                    return true;
+                }
+                seen.put(refRaw, Boolean.TRUE);
+                return _isCircular(rt._referencedType, seen);
+            }
+            return false;
+        }
+        return false;
+    }
+
+    /**
+     * Method that is called if the reference is available to resolve
+     * recursive self-reference.
+     */
+    public JavaType selfReferencedType(JavaType ref)
+    {
+        if (_referencedType != null) {
+            return this;
+        }
+        // and otherwise, need to re-create the whole type thing...
+        return new RecursiveType(this, _rawClass, ref.copy(),
+                _superClass, _interfaceTypes);
+    }
+
+    @Override
+    public JavaType getSuperClass() {
+        return _superClass;
+    }
+
+    @Override
+    public JavaType getContentType() {
+        return null;
+    }
+
+    @Override
+    public int containedTypeCount() {
+        return 0;
+    }
+
+    @Override
+    public JavaType containedType(int index) {
+        return null;
+    }
+
+    @Override
+    public String containedTypeName(int index) {
+        return null;
+    }
+
+    @Override
+    public Class<?> getParameterSource() {
+        return null;
+    }
+}
\ No newline at end of file
