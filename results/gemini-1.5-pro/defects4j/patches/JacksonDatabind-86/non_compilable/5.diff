diff --git a/tmp/b8c95612-772e-46c8-b74c-e5d65d542fec_buggy.java b/tmp/4109c305-68b2-4449-b3db-1a3cd1a2f3f8_fixed.java
index e69de29..e685e3b 100644
--- a/tmp/b8c95612-772e-46c8-b74c-e5d65d542fec_buggy.java
+++ b/tmp/4109c305-68b2-4449-b3db-1a3cd1a2f3f8_fixed.java
@@ -0,0 +1,211 @@
+package com.fasterxml.jackson.databind.type;
+
+import java.lang.reflect.TypeVariable;
+import java.util.*;
+
+import com.fasterxml.jackson.databind.JavaType;
+
+/**
+ * We need a custom variant of {@link TypeBindings} which is aware
+ * of recursive types.
+ */
+public class RecursiveTypeBinding extends TypeBindings
+{
+    private static final long serialVersionUID = 1L;
+
+    private final JavaType _target;
+    private List<TypeBinding> _extraBindings;
+
+    public RecursiveTypeBinding(JavaType target) {
+        super(NO_STRINGS, NO_TYPES);
+        _target = target;
+        _extraBindings = new ArrayList<TypeBinding>(1);
+    }
+
+    @Override
+    public JavaType findBoundType(int index) {
+        if (index < _bindings.length) {
+            return _bindings[index];
+        }
+        int idx = index - _bindings.length;
+        if (idx < _extraBindings.size()) {
+            return _extraBindings.get(idx).getBoundType(0);
+        }
+        return null;
+    }
+
+    @Override
+    public int getBindingCount() {
+        return _bindings.length + _extraBindings.size();
+    }
+
+    @Override
+    public JavaType getBoundType(int index)
+    {
+        // First, regular bindings
+        if (index < _bindings.length) {
+            return _bindings[index];
+        }
+        int idx = index - _bindings.length;
+        // and if beyond, loop through extra bindings
+        if (idx < _extraBindings.size()) {
+            return _extraBindings.get(idx).getBoundType(0);
+        }
+        return null;
+    }
+
+    @Override
+    public List<JavaType> getTypeParameters() {
+        if (!_extraBindings.isEmpty()) {
+            List<JavaType> types = new ArrayList<JavaType>(getBindingCount());
+            types.addAll(Arrays.asList(_bindings));
+            for (TypeBinding b : _extraBindings) {
+                types.add(b.getBoundType(0));
+            }
+            return Collections.unmodifiableList(types);
+        }
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return (_extraBindings.isEmpty() && (_bindings.length == 0));
+    }
+
+    @Override
+    public String toString() {
+        if (_bindings.length == 0) {
+            StringBuilder sb = new StringBuilder("[empty]");
+            if (!_extraBindings.isEmpty()) {
+                sb.append('(').append(_extraBindings).append(')');
+            }
+            return sb.toString();
+        }
+        StringBuilder sb = new StringBuilder();
+        sb.append('[');
+        for (int i = 0, len = getBindingCount(); i < len; ++i) {
+            if (i > 0) {
+                sb.append(',');
+            }
+            sb.append(getBoundType(i).toString());
+        }
+        sb.append(']');
+        return sb.toString();
+    }
+    
+    @Override
+    public TypeBindings withUnboundVariable(String name)
+    {
+        // not supported by recursive entries (should it?)
+        return this;
+    }
+
+    public TypeBindings withBinding(TypeVariable<?> variable, JavaType type)
+    {
+        // First: if we already have bindings, delegate to resolve()
+        if (_bindings.length > 0) {
+            return resolve(variable, type);
+        }
+        // if not, slight shortcut:
+        String varName = variable.getName();
+        int i = _extraBindings.size();
+        while (i-- > 0) {
+            TypeBinding binding = _extraBindings.get(i);
+            if (binding.hasVariable(varName)) {
+                _extraBindings.set(i, binding.withSubstitutedVariable(varName, type));
+                return this;
+            }
+        }
+        _extraBindings.add(TypeBinding.create(variable, type));
+        return this;
+    }
+    
+    @Override
+    protected String getBoundName(int index)
+    {
+        if (index >= _bindings.length) {
+            int ix = index - _bindings.length;
+            if (ix < _extraBindings.size()) {
+                return _extraBindings.get(ix)._variableStrs[0];
+            }
+        }
+        return super.getBoundName(index);
+    }
+
+    @Override
+    public JavaType resolveType(JavaType contextType, TypeBindings parentBindings,
+            TypeFactory tf, TypeVariable<?> variable)
+    {
+        // First: if we already have bindings, delegate to resolve()
+        if (_bindings.length > 0) {
+            return resolve(variable, tf.unknownType());
+        }
+        // if not, slight shortcut:
+        String varName = variable.getName();
+        int i = _extraBindings.size();
+        while (i-- > 0) {
+            TypeBinding binding = _extraBindings.get(i);
+            if (binding.hasVariable(varName)) {
+                // If so, we have the fully resolved value; return:
+                return binding.getBoundType(0);
+            }
+        }
+        // Otherwise, need to create a placeholder to eventually be resolved, if at all:
+        JavaType type = _target.withTypeHandler(_target.getTypeHandler());
+        _extraBindings.add(TypeBinding.create(varName, type));
+        return type;
+    }
+
+    @Override
+    public boolean hasUnbound(String name) {
+        // first: only empty one is unbound
+        if (_bindings.length == 0) {
+            // and all extra ones are unbound
+            return true;
+        }
+        // but if bound, may have dynamically resolved answer
+        for (int i = _bindings.length;  (--i) >= 0; ) {
+            if (name.equals(_variableStrs[i])) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    @Override
+    public Object asKey(TypeFactory tf) {
+        return _target.getRawClass().getName();
+    }
+
+    private TypeBindings resolve(TypeVariable<?> variable, JavaType type)
+    {
+        // First: we may have it as one of regular bindings...
+        TypeBindings tb = bind(variable, type);
+        if (tb.size() > 0) {
+            return tb;
+        }
+        // or, recursively via one of extra bindings
+        String varName = variable.getName();
+        int i = _extraBindings.size();
+        while (i-- > 0) {
+            TypeBinding binding = _extraBindings.get(i);
+            if (binding.hasVariable(varName)) {
+                _extraBindings.set(i, binding.withSubstitutedVariable(varName, type));
+                // this is bit messy, but we may have 'gone recursive', and have
+                // more bindings to apply at this point
+                if (_bindings.length > 0) {
+                    return TypeBindings.create(variable.getGenericDeclaration(), _bindings);
+                }
+                return TypeBindings.emptyBindings();
+            }
+        }
+        // if not, queue for later resolution
+        _extraBindings.add(TypeBinding.create(variable, type));
+        // this is bit messy, but we may have 'gone recursive', and have
+        // more bindings to apply at this point
+        if (_bindings.length > 0) {
+            return TypeBindings.create(variable.getGenericDeclaration(), _bindings);
+        }
+        return TypeBindings.emptyBindings();
+    }
+}
\ No newline at end of file
