diff --git a/tmp/d73c844e-b1f9-402f-90ac-9f36c440d730_buggy.java b/tmp/cff1d2c7-582f-4286-adae-4731b2d10f58_fixed.java
index f843d29..2393f23 100644
--- a/tmp/d73c844e-b1f9-402f-90ac-9f36c440d730_buggy.java
+++ b/tmp/cff1d2c7-582f-4286-adae-4731b2d10f58_fixed.java
@@ -1,68 +1,91 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
         if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         final char ch0 = str.charAt(0);
         final char ch1 = str.charAt(1);
         if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
+            if (ch0 != '_' || len < 3 || !Character.isUpperCase(ch1) || (len > 3 && str.charAt(2) != '_')) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
+            if (len == 3) {
+                return new Locale("", str.substring(1));
+            }
+            if (len < 5) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            final char ch3 = str.charAt(3);
+            final char ch4 = str.charAt(4);
+            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (len == 5) {
+                return new Locale("", str.substring(1, 3), str.substring(4));
+            }
+            if (len < 7) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (str.charAt(5) != '_') {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            return new Locale("", str.substring(1, 3), str.substring(4, len));
+        }
         if (len == 2) {
             return new Locale(str);
         }
         if (len < 5) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         if (str.charAt(2) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         final char ch3 = str.charAt(3);
         if (ch3 == '_') {
             return new Locale(str.substring(0, 2), "", str.substring(4));
         }
         final char ch4 = str.charAt(4);
         if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         if (len == 5) {
             return new Locale(str.substring(0, 2), str.substring(3, 5));
         }
         if (len < 7) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         if (str.charAt(5) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
     }
\ No newline at end of file
