diff --git a/tmp/4149539b-b1c7-451b-960c-1aed8c473617_buggy.java b/tmp/7efd92d5-22ca-481d-ad09-3b8716eb9d79_fixed.java
index 10616db..e2c5af0 100644
--- a/tmp/4149539b-b1c7-451b-960c-1aed8c473617_buggy.java
+++ b/tmp/7efd92d5-22ca-481d-ad09-3b8716eb9d79_fixed.java
@@ -1,19 +1,27 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
             // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+            Chronology chrono = iChronology;
+            // need to normalize day of month to avoid
+            // feb-29 problems
+            int month = chrono.get(instant, DateTimeFieldType.monthOfYear());
+            int year = chrono.get(instant, DateTimeFieldType.year());
+            int day = Math.min(chrono.dayOfMonth().getMaximumValue(chrono.yearMonth().set(instant, month)),
+                    chrono.get(instant, DateTimeFieldType.dayOfMonth()));
+            instant = chrono.yearMonthDay().set(instant, year * 10000 + month * 100 + day);
+            return chrono.get(partial, instant);
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
