diff --git a/tmp/681a922b-0dfb-415a-a82f-1e3a1a6a3702_buggy.java b/tmp/c90e4346-9248-40e7-aaca-004ca962d71f_fixed.java
index e69de29..16f73e4 100644
--- a/tmp/681a922b-0dfb-415a-a82f-1e3a1a6a3702_buggy.java
+++ b/tmp/c90e4346-9248-40e7-aaca-004ca962d71f_fixed.java
@@ -0,0 +1,61 @@
+package com.fasterxml.jackson.core.json;
+
+import java.io.IOException;
+
+import com.fasterxml.jackson.core.*;
+
+public class TestJsonGeneratorFeatures
+    extends com.fasterxml.jackson.core.BaseTest
+{
+    private final JsonFactory JSON_F = new JsonFactory();
+
+    public void testFieldNameQuotingEnabled() throws IOException
+    {
+        // // First, test with default factory, with quoting enabled by default
+        
+        // First, default, with quotes
+        _testFieldNameQuotingEnabled(JSON_F, true, true, "{\"foo\":1}");
+        _testFieldNameQuotingEnabled(JSON_F, false, true, "{\"foo\":1}");
+
+        // then without quotes
+        _testFieldNameQuotingEnabled(JSON_F, true, false, "{foo:1}");
+        _testFieldNameQuotingEnabled(JSON_F, false, false, "{foo:1}");
+
+        // // Then with alternatively configured factory
+
+        JsonFactory JF2 = new JsonFactory();
+        JF2.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);
+
+        _testFieldNameQuotingEnabled(JF2, true, true, "{foo:1}");
+        _testFieldNameQuotingEnabled(JF2, false, true, "{foo:1}");
+
+        // then without quotes
+        _testFieldNameQuotingEnabled(JF2, true, false, "{foo:1}");
+        _testFieldNameQuotingEnabled(JF2, false, false, "{foo:1}");
+    }
+
+    private void _testFieldNameQuotingEnabled(JsonFactory f, boolean useBytes,
+            boolean useQuotes, String exp)
+        throws IOException
+    {
+        JsonGenerator gen;
+        ByteArrayBuilder bb = useBytes ? new ByteArrayBuilder(100) : null;
+        StringWriter sw = useBytes ? null : new StringWriter();
+        if (useBytes) {
+            gen = f.createGenerator(bb);
+        } else {
+            gen = f.createGenerator(sw);
+        }
+        gen.writeStartObject();
+        if (useQuotes) {
+            gen.writeFieldName("foo");
+        } else {
+            gen.writeFieldName(new SerializedString("foo"));
+        }
+        gen.writeNumber(1);
+        gen.writeEndObject();
+        gen.close();
+        String json = useBytes ? bb.toString("UTF-8") : sw.toString();
+        assertEquals(exp, json);
+    }
+}
\ No newline at end of file
