diff --git a/tmp/6fa94460-b721-47b7-b9a0-172d52fb4104_buggy.java b/tmp/e883b331-fc0b-4abd-980a-c02d75a1f57f_fixed.java
index 1c875ad..0288357 100644
--- a/tmp/6fa94460-b721-47b7-b9a0-172d52fb4104_buggy.java
+++ b/tmp/e883b331-fc0b-4abd-980a-c02d75a1f57f_fixed.java
@@ -1,31 +1,22 @@
     public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
-            for (int position = 0; position < matchers.size(); position++) {
-                Matcher m = matchers.get(position);
+        int argumentPosition = 0;
+        for (Matcher m : matchers) {
             if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+                if (invocation.getMethod().isVarArgs() && invocation.getRawArguments().length > argumentPosition) {
+                    if (isLastArgumentPosition(invocation, argumentPosition) && isVarargMatcher(m)) {
+                        Object array = invocation.getRawArguments()[argumentPosition];
+                        for (int i = 0; i < Array.getLength(array); i++) {
+                            ((CapturesArguments) m).captureFrom(Array.get(array, i));
                         }
+                        //since we've captured all varargs already, it does not make sense to process other matchers.
+                        return;
+                    } else {
+                        ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[argumentPosition]);
                     }
+                } else {
+                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(argumentPosition, Object.class));
+                }
+            }
+            argumentPosition++;
         }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
     }
