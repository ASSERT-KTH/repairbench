diff --git a/tmp/045c8864-3c49-48ce-957b-3e1b4553adce_buggy.java b/tmp/6514c8d4-7e4e-4d25-9e10-ae14f80d4e78_fixed.java
index e69de29..38a417c 100644
--- a/tmp/045c8864-3c49-48ce-957b-3e1b4553adce_buggy.java
+++ b/tmp/6514c8d4-7e4e-4d25-9e10-ae14f80d4e78_fixed.java
@@ -0,0 +1,34 @@
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer;
+import com.fasterxml.jackson.databind.type.LogicalType;
+
+import java.io.IOException;
+
+public abstract class FixEmptyToNullCoercionForPrimitives extends StdScalarDeserializer<Object> {
+    private static final long serialVersionUID = 1L;
+
+    protected FixEmptyToNullCoercionForPrimitives(Class<?> vc) {
+        super(vc);
+    }
+
+    @Override
+    public Object getNullValue(DeserializationContext ctxt) throws IOException {
+        return getEmptyValue(ctxt);
+    }
+
+    @Override
+    public LogicalType getEmptyAsNullType(DeserializationContext ctxt) {
+        return LogicalType.OtherScalar;
+    }
+
+    protected Object _parseEmptyString(JsonParser p, DeserializationContext ctxt) throws IOException {
+        // 04-Jan-2018, tatu: Need to double-check to prevent infinite recursion for
+        //    cases where we have same coercions at databind level...
+        if (ctxt.getParser().hasToken(JsonParser.Token.VALUE_STRING)
+                && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+            return getEmptyValue(ctxt);
+        }
+        return null;
+    }
+}
\ No newline at end of file
