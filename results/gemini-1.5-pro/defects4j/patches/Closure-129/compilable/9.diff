diff --git a/tmp/f2c0f6be-9935-4ffe-90f5-6f23817c1c55_buggy.java b/tmp/abd9ee6f-a16b-49dd-92fd-7bfa030d7861_fixed.java
index e8705ac..7359985 100644
--- a/tmp/f2c0f6be-9935-4ffe-90f5-6f23817c1c55_buggy.java
+++ b/tmp/abd9ee6f-a16b-49dd-92fd-7bfa030d7861_fixed.java
@@ -1,24 +1,23 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
       // Keep track of of the "this" context of a call.  A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
 
       // ignore cast nodes.
-
       if (!NodeUtil.isGet(first)) {
         n.putBooleanProp(Node.FREE_CALL, true);
+      } else {
+        // For direct calls to gets, we look at the second child.
+        Node target = first.getFirstChild();
+        if (target.isName() &&
+            "eval".equals(target.getString())) {
+          target.putBooleanProp(Node.DIRECT_EVAL, true);
         }
-
-      // Keep track of the context in which eval is called. It is important
-      // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
