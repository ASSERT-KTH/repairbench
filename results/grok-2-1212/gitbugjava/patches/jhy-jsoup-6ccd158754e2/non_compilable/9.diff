diff --git a/tmp/3f8a526f-80fb-4ed6-a80b-ca0bca2db9e1_buggy.java b/tmp/32e5f444-dae6-4fec-a22c-7e166f0f519c_fixed.java
index 23f078d..17fb68a 100644
--- a/tmp/3f8a526f-80fb-4ed6-a80b-ca0bca2db9e1_buggy.java
+++ b/tmp/32e5f444-dae6-4fec-a22c-7e166f0f519c_fixed.java
@@ -1,14 +1,25 @@
-    private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
+private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
     for (int i = 0; i < s.length(); i++) {
         int c = s.codePointAt(i);
-            if (c == ' ') {
+        if (Character.isSupplementaryCodePoint(c)) {
+            // Handle supplementary characters
+            sb.append(String.format("%%%02X%%%02X%%%02X%%%02X", 
+                (0xF0 | ((c >> 18) & 0x07)),
+                (0x80 | ((c >> 12) & 0x3F)),
+                (0x80 | ((c >> 6) & 0x3F)),
+                (0x80 | (c & 0x3F))
+            ));
+            i++; // Skip the next char as it's part of the surrogate pair
+        } else if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            sb.append(String.format("%%%02X%%%02X", 
+                (0xC0 | (c >> 6)),
+                (0x80 | (c & 0x3F))
+            ));
         } else {
             sb.append((char) c);
         }
     }
 }
\ No newline at end of file
