diff --git a/tmp/de904543-f482-4495-9433-d5ee3526045c_buggy.java b/tmp/ea13ca35-658e-472c-aaec-2ca5dc12296d_fixed.java
index 23f078d..067bc9a 100644
--- a/tmp/de904543-f482-4495-9433-d5ee3526045c_buggy.java
+++ b/tmp/ea13ca35-658e-472c-aaec-2ca5dc12296d_fixed.java
@@ -1,14 +1,22 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
     for (int i = 0; i < s.length(); i++) {
         int c = s.codePointAt(i);
+        if (Character.isBmpCodePoint(c)) {
+            // Handle single code point characters
             if (c == ' ') {
                 sb.append(spaceAsPlus ? '+' : "%20");
             } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+                sb.append(URLEncoder.encode(Character.toString((char) c), "UTF-8"));
             } else {
                 sb.append((char) c);
             }
+            i += Character.charCount(c) - 1; // Move past any trailing surrogate
+        } else {
+            // Handle supplementary characters (non-BMP)
+            String charString = new String(Character.toChars(c));
+            sb.append(URLEncoder.encode(charString, "UTF-8"));
+            i += Character.charCount(c) - 1; // Move past the surrogate pair
+        }
     }
 }
\ No newline at end of file
