diff --git a/tmp/6c0bd45b-14f9-428d-b609-ba0beddf312b_buggy.java b/tmp/baf494fc-06bd-4783-b274-cd361f4bc1be_fixed.java
index 23f078d..00fa492 100644
--- a/tmp/6c0bd45b-14f9-428d-b609-ba0beddf312b_buggy.java
+++ b/tmp/baf494fc-06bd-4783-b274-cd361f4bc1be_fixed.java
@@ -1,14 +1,23 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
     for (int i = 0; i < s.length(); i++) {
         int c = s.codePointAt(i);
+        if (Character.isHighSurrogate((char) c)) {
+            // Handle supplementary characters
+            if (i + 1 < s.length()) {
+                int supplementary = Character.toCodePoint((char) c, s.charAt(i + 1));
+                sb.append(URLEncoder.encode(new String(Character.toChars(supplementary)), "UTF-8"));
+                i++; // Skip the low surrogate
+                continue;
+            }
+        }
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
+            sb.append(URLEncoder.encode(new String(Character.toChars(c)), "UTF-8"));
             // ^^ is a bit heavy-handed - if perf critical, we could optimize
         } else {
             sb.append((char) c);
         }
     }
 }
\ No newline at end of file
