diff --git a/tmp/991393c7-8c9c-4645-a875-2cddf47d7b58_buggy.java b/tmp/ab5605d0-1cfe-4883-9fce-e1b199b57944_fixed.java
index 23f078d..91e1933 100644
--- a/tmp/991393c7-8c9c-4645-a875-2cddf47d7b58_buggy.java
+++ b/tmp/ab5605d0-1cfe-4883-9fce-e1b199b57944_fixed.java
@@ -1,14 +1,25 @@
     private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
         // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+        int i = 0;
+        while (i < s.length()) {
             int c = s.codePointAt(i);
-            if (c == ' ') {
+            if (Character.isSupplementaryCodePoint(c)) {
+                // Handle supplementary characters (4-byte UTF-8 encoding)
+                sb.append(String.format("%%%02X%%%02X%%%02X%%%02X",
+                    (c >> 18) & 0x7,
+                    (c >> 12) & 0x3F,
+                    (c >> 6) & 0x3F,
+                    c & 0x3F));
+                i += 2; // Supplementary characters use two code units
+            } else if (c == ' ') {
                 sb.append(spaceAsPlus ? '+' : "%20");
-            } else if (c > 127) { // out of ascii range
+                i++;
+            } else if (c > 127) { // out of ascii range, but not supplementary
                 sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+                i++;
             } else {
                 sb.append((char) c);
+                i++;
             }
         }
     }
\ No newline at end of file
