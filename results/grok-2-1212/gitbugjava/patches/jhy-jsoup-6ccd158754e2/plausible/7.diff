diff --git a/tmp/a3590a37-518e-4a8b-9c12-af231c0840dc_buggy.java b/tmp/3f1a1bc3-6871-48a5-a6e7-b53cdd179826_fixed.java
index 23f078d..190239c 100644
--- a/tmp/a3590a37-518e-4a8b-9c12-af231c0840dc_buggy.java
+++ b/tmp/3f1a1bc3-6871-48a5-a6e7-b53cdd179826_fixed.java
@@ -1,14 +1,22 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
     for (int i = 0; i < s.length(); i++) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            if (c <= 0xFFFF) { // BMP (Basic Multilingual Plane) character
+                sb.append(String.format("%%%02X", c));
+            } else { // supplementary character
+                char[] chars = Character.toChars(c);
+                byte[] bytes = new String(chars).getBytes(UTF_8);
+                for (byte b : bytes) {
+                    sb.append(String.format("%%%02X", b & 0xFF));
+                }
+                i++; // Skip the next char as it's part of the surrogate pair
+            }
         } else {
             sb.append((char) c);
         }
     }
 }
\ No newline at end of file
