diff --git a/tmp/e86110ed-c1e1-42b1-a4c4-b1aa6074cd77_buggy.java b/tmp/1c04966e-9972-4082-9eb6-bb7f11ce878b_fixed.java
index d87dd79..dcb6ded 100644
--- a/tmp/e86110ed-c1e1-42b1-a4c4-b1aa6074cd77_buggy.java
+++ b/tmp/1c04966e-9972-4082-9eb6-bb7f11ce878b_fixed.java
@@ -1,47 +1,65 @@
 @Override
 protected Object decode(
         ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
 
+    List<ByteBuf> frames = new ArrayList<>();
+
+    while (buf.isReadable()) {
         int endIndex = -1;
         for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
             if (buf.getByte(i) == ']') {
                 endIndex = i + 1;
                 break;
             }
         }
 
         if (endIndex > 0) {
             ByteBuf frame = Unpooled.buffer();
+            int startIndex = buf.readerIndex();
             while (buf.readerIndex() < endIndex) {
                 byte b1 = buf.readByte();
                 if (b1 == '}') {
                     byte b2 = buf.readByte();
                     switch (b2) {
                         case 0x01:
                             frame.writeByte('}');
                             break;
                         case 0x02:
                             frame.writeByte('[');
                             break;
                         case 0x03:
                             frame.writeByte(']');
                             break;
                         case 0x04:
                             frame.writeByte(',');
                             break;
                         case 0x05:
                             frame.writeByte('*');
                             break;
                         default:
                             throw new IllegalArgumentException(String.format(
                                     "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
                     }
                 } else {
                     frame.writeByte(b1);
                 }
             }
-            return frame;
+            frames.add(frame);
+
+            // Discard bytes up to and including the current frame's end
+            buf.readerIndex(endIndex);
+        } else {
+            // Not enough data to form a complete frame, reset readerIndex and return null
+            buf.readerIndex(startIndex);
+            break;
+        }
     }
 
+    if (frames.isEmpty()) {
         return null;
+    } else if (frames.size() == 1) {
+        return frames.get(0);
+    } else {
+        return frames;
+    }
 }
\ No newline at end of file
