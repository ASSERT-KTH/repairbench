diff --git a/tmp/6b81c492-e6c9-48d5-9c8c-a090bcb60565_buggy.java b/tmp/d1415799-c461-4f2e-92db-6cc07bc0c962_fixed.java
index 855afa5..22ef9e6 100644
--- a/tmp/6b81c492-e6c9-48d5-9c8c-a090bcb60565_buggy.java
+++ b/tmp/d1415799-c461-4f2e-92db-6cc07bc0c962_fixed.java
@@ -1,13 +1,29 @@
     static URL encodeUrl(URL u) {
         u = punyUrl(u);
         try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
+            String urlS = u.toExternalForm();
+            URI uri = new URI("http", urlS, null); // Use a dummy scheme to handle relative paths
+            String encodedPath = uri.getRawPath();
+            String encodedQuery = uri.getRawQuery();
+            String encodedFragment = uri.getRawFragment();
+
+            String encodedUrl = u.getProtocol() + "://" + u.getHost();
+            if (u.getPort() != -1) {
+                encodedUrl += ":" + u.getPort();
+            }
+            if (encodedPath != null) {
+                encodedUrl += encodedPath;
+            }
+            if (encodedQuery != null) {
+                encodedUrl += "?" + encodedQuery;
+            }
+            if (encodedFragment != null) {
+                encodedUrl += "#" + encodedFragment;
+            }
+
+            return new URL(encodedUrl);
         } catch (URISyntaxException | MalformedURLException e) {
             // give up and return the original input
             return u;
         }
     }
\ No newline at end of file
