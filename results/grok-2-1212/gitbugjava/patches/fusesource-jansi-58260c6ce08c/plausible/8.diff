diff --git a/tmp/3cb8e331-b114-4049-b1a5-514303e32b3a_buggy.java b/tmp/8e9bbd41-c94c-47d0-8a5e-613a9c8005f7_fixed.java
index 712f277..ef388e5 100644
--- a/tmp/3cb8e331-b114-4049-b1a5-514303e32b3a_buggy.java
+++ b/tmp/8e9bbd41-c94c-47d0-8a5e-613a9c8005f7_fixed.java
@@ -1,48 +1,52 @@
 /**
  * Renders the given input to the target Appendable.
  *
  * @param input
  *            source to render
  * @param target
  *            render onto this target Appendable.
  * @return the given Appendable
  * @throws IOException
  *             If an I/O error occurs
  */
 public static Appendable render(final String input, Appendable target) throws IOException {
 
     int i = 0;
     int j, k;
 
-        while (true) {
+    while (i < input.length()) {
         j = input.indexOf(BEGIN_TOKEN, i);
         if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
-                }
             target.append(input.substring(i));
             return target;
         }
         target.append(input.substring(i, j));
         k = input.indexOf(END_TOKEN, j);
 
         if (k == -1) {
-                target.append(input);
+            // If end token is not found, append the rest of the input
+            target.append(input.substring(j));
             return target;
         }
+
+        if (k < j + BEGIN_TOKEN_LEN) {
+            // If end token appears before or at the start of the begin token, throw an exception
+            throw new IllegalArgumentException("Invalid token order: end token before or at start of begin token");
+        }
+
         j += BEGIN_TOKEN_LEN;
         String spec = input.substring(j, k);
 
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
         if (items.length == 1) {
-                target.append(input);
-                return target;
-            }
+            // If split doesn't result in two items, append the original spec
+            target.append(input.substring(j - BEGIN_TOKEN_LEN, k + END_TOKEN_LEN));
+        } else {
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
             target.append(replacement);
+        }
 
         i = k + END_TOKEN_LEN;
     }
+    return target;
 }
\ No newline at end of file
