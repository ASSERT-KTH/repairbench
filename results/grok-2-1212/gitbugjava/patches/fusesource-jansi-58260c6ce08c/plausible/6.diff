diff --git a/tmp/d93d7504-0c39-43cd-83ed-c2739c92d9d9_buggy.java b/tmp/bb5110c6-ffde-4afb-9aee-28b7d4738c61_fixed.java
index 712f277..d8eae8e 100644
--- a/tmp/d93d7504-0c39-43cd-83ed-c2739c92d9d9_buggy.java
+++ b/tmp/bb5110c6-ffde-4afb-9aee-28b7d4738c61_fixed.java
@@ -1,48 +1,48 @@
     /**
      * Renders the given input to the target Appendable.
      *
      * @param input
      *            source to render
      * @param target
      *            render onto this target Appendable.
      * @return the given Appendable
      * @throws IOException
      *             If an I/O error occurs
+     * @throws IllegalArgumentException
+     *             If the input contains invalid formatting
      */
-    public static Appendable render(final String input, Appendable target) throws IOException {
+    public static Appendable render(final String input, Appendable target) throws IOException, IllegalArgumentException {
 
         int i = 0;
         int j, k;
 
-        while (true) {
+        while (i < input.length()) {
             j = input.indexOf(BEGIN_TOKEN, i);
             if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
-                }
                 target.append(input.substring(i));
                 return target;
             }
             target.append(input.substring(i, j));
             k = input.indexOf(END_TOKEN, j);
 
             if (k == -1) {
-                target.append(input);
-                return target;
+                throw new IllegalArgumentException("Unmatched start token: " + input.substring(j));
+            }
+            if (k < j + BEGIN_TOKEN_LEN) {
+                throw new IllegalArgumentException("End token before start token: " + input.substring(j, k + END_TOKEN_LEN));
             }
             j += BEGIN_TOKEN_LEN;
             String spec = input.substring(j, k);
 
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
             if (items.length == 1) {
-                target.append(input);
-                return target;
+                throw new IllegalArgumentException("Invalid spec format: " + spec);
             }
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
             target.append(replacement);
 
             i = k + END_TOKEN_LEN;
         }
+        return target;
     }
\ No newline at end of file
