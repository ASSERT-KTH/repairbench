diff --git a/tmp/c75e2736-26f1-46d5-8eee-b71515d6228d_buggy.java b/tmp/8c4093e1-408d-4f7b-8e31-ecf14a313523_fixed.java
index 712f277..bcd74fa 100644
--- a/tmp/c75e2736-26f1-46d5-8eee-b71515d6228d_buggy.java
+++ b/tmp/8c4093e1-408d-4f7b-8e31-ecf14a313523_fixed.java
@@ -1,48 +1,54 @@
 /**
  * Renders the given input to the target Appendable.
  *
  * @param input
  *            source to render
  * @param target
  *            render onto this target Appendable.
  * @return the given Appendable
  * @throws IOException
  *             If an I/O error occurs
+ * @throws IllegalArgumentException
+ *             If the input contains invalid token placement
  */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
     int i = 0;
     int j, k;
 
-        while (true) {
+    while (i < input.length()) {
         j = input.indexOf(BEGIN_TOKEN, i);
         if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
-                }
             target.append(input.substring(i));
             return target;
         }
+
+        // Check for invalid end token before start token
+        k = input.indexOf(END_TOKEN, i);
+        if (k != -1 && k < j) {
+            throw new IllegalArgumentException("Invalid token placement: end token found before start token");
+        }
+
         target.append(input.substring(i, j));
         k = input.indexOf(END_TOKEN, j);
 
         if (k == -1) {
-                target.append(input);
-                return target;
+            throw new IllegalArgumentException("Missing end token");
         }
+
         j += BEGIN_TOKEN_LEN;
         String spec = input.substring(j, k);
 
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+        if (items.length != 2) {
+            throw new IllegalArgumentException("Invalid specification format");
         }
+
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
         target.append(replacement);
 
         i = k + END_TOKEN_LEN;
     }
+
+    return target;
 }
\ No newline at end of file
