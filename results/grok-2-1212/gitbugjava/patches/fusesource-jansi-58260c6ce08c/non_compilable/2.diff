diff --git a/tmp/c2cec2c8-ba56-40a5-be87-8f5477148db4_buggy.java b/tmp/2d30c8ef-3ba0-4588-8bcf-ab15f68ac76e_fixed.java
index 712f277..ce0c040 100644
--- a/tmp/c2cec2c8-ba56-40a5-be87-8f5477148db4_buggy.java
+++ b/tmp/2d30c8ef-3ba0-4588-8bcf-ab15f68ac76e_fixed.java
@@ -1,48 +1,50 @@
 /**
  * Renders the given input to the target Appendable.
  *
  * @param input
  *            source to render
  * @param target
  *            render onto this target Appendable.
  * @return the given Appendable
  * @throws IOException
  *             If an I/O error occurs
+ * @throws IllegalArgumentException
+ *             If the input contains invalid token sequences
  */
-    public static Appendable render(final String input, Appendable target) throws IOException {
+public static Appendable render(final String input, Appendable target) throws IOException, IllegalArgumentException {
 
     int i = 0;
     int j, k;
 
-        while (true) {
+    while (i < input.length()) {
         j = input.indexOf(BEGIN_TOKEN, i);
         if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
-                }
             target.append(input.substring(i));
             return target;
         }
         target.append(input.substring(i, j));
         k = input.indexOf(END_TOKEN, j);
 
         if (k == -1) {
-                target.append(input);
-                return target;
+            throw new IllegalArgumentException("Unmatched begin token at position " + j);
         }
+        if (k < j + BEGIN_TOKEN_LEN) {
+            throw new IllegalArgumentException("End token before begin token at position " + k);
+        }
+
         j += BEGIN_TOKEN_LEN;
         String spec = input.substring(j, k);
 
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
-            }
+        if (items.length != 2) {
+            target.append(input.substring(j, k));
+        } else {
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
             target.append(replacement);
+        }
 
         i = k + END_TOKEN_LEN;
     }
+
+    return target;
 }
\ No newline at end of file
