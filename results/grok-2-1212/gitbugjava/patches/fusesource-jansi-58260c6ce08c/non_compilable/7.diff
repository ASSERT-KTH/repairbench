diff --git a/tmp/ee96edd0-8bd1-4516-a5c6-69bbeee52cd6_buggy.java b/tmp/86cafc8a-55c7-4d61-853f-dc97e9f594bf_fixed.java
index 712f277..a038094 100644
--- a/tmp/ee96edd0-8bd1-4516-a5c6-69bbeee52cd6_buggy.java
+++ b/tmp/86cafc8a-55c7-4d61-853f-dc97e9f594bf_fixed.java
@@ -1,48 +1,47 @@
     /**
      * Renders the given input to the target Appendable.
      *
      * @param input
      *            source to render
      * @param target
      *            render onto this target Appendable.
      * @return the given Appendable
      * @throws IOException
      *             If an I/O error occurs
      */
     public static Appendable render(final String input, Appendable target) throws IOException {
 
         int i = 0;
         int j, k;
 
-        while (true) {
+        while (i < input.length()) {
             j = input.indexOf(BEGIN_TOKEN, i);
             if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
-                }
                 target.append(input.substring(i));
                 return target;
             }
             target.append(input.substring(i, j));
             k = input.indexOf(END_TOKEN, j);
 
             if (k == -1) {
-                target.append(input);
+                target.append(input.substring(j));
                 return target;
             }
+            if (k < j + BEGIN_TOKEN_LEN) {
+                throw new IllegalArgumentException("Invalid token placement: end token before start token");
+            }
             j += BEGIN_TOKEN_LEN;
             String spec = input.substring(j, k);
 
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
-            }
+            if (items.length != 2) {
+                target.append(input.substring(j, k));
+            } else {
                 String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
                 target.append(replacement);
+            }
 
             i = k + END_TOKEN_LEN;
         }
+        return target;
     }
\ No newline at end of file
