diff --git a/tmp/547a70ec-faab-4159-bb0c-86bea44f223b_buggy.java b/tmp/fd615bf6-ec84-4c94-9165-43bd020e2a0a_fixed.java
index 47a8941..b1f454c 100644
--- a/tmp/547a70ec-faab-4159-bb0c-86bea44f223b_buggy.java
+++ b/tmp/fd615bf6-ec84-4c94-9165-43bd020e2a0a_fixed.java
@@ -1,53 +1,65 @@
 /**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+ * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
     // Modify the container so it now refers the class. Container can be a class or package.
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
     JClassContainer grandParent = parent.parentContainer();
     // Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
     // FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
         // Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
         classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+    } else {
         JPackage grandParentPackage = (JPackage) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
         classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
-			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
+        // In this scenario class should have "static" modifier removed, otherwise it won't compile:
+        int newMods = clazz.mods().getValue() & ~JMod.STATIC;
+        setPrivateField(clazz.mods(), "mods", Integer.valueOf(newMods));
 
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
 
                 // FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+                if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {
                     setPrivateField(sc, "anonymous", Boolean.FALSE);
+                }
 
                 break;
             }
         }
     }
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+    String newName = clazz.name();
+    if (classes.containsKey(newName)) {
+        // Generate a new unique name
+        int counter = 1;
+        while (classes.containsKey(newName + counter)) {
+            counter++;
+        }
+        newName = newName + counter;
+        writeSummary("\tRenaming class " + clazz.fullName() + " to class " + newName);
+        setPrivateField(clazz, "name", newName);
     }
 
-		classes.put(clazz.name(), clazz);
+    classes.put(newName, clazz);
 
     // Finally modify the class so that it refers back the container:
     setPrivateField(clazz, "outer", grandParent);
+
+    // Update the class's package if necessary
+    if (grandParent instanceof JPackage) {
+        setPrivateField(clazz, "_package", grandParent);
+    }
 }
\ No newline at end of file
