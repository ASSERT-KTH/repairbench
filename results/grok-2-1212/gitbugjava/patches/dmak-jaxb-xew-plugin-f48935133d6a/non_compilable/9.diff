diff --git a/tmp/a53906c8-c95e-4922-9370-db1a0bd07c6b_buggy.java b/tmp/eef8110c-29d3-4c9e-9d80-ec541698bb13_fixed.java
index 47a8941..9a9561f 100644
--- a/tmp/a53906c8-c95e-4922-9370-db1a0bd07c6b_buggy.java
+++ b/tmp/eef8110c-29d3-4c9e-9d80-ec541698bb13_fixed.java
@@ -1,53 +1,63 @@
 /**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+ * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+    // Modify the container so it now refers to the class. Container can be a class or package.
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
     JClassContainer grandParent = parent.parentContainer();
     // Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
     // FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
         // Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
         classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+    } else {
         JPackage grandParentPackage = (JPackage) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
         classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
+        // In this scenario, class should have "static" modifier reset; otherwise, it won't compile:
         setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
 
                 // FIXME: Inner class is always a local declaration.
                 assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
 
                 setPrivateField(sc, "anonymous", Boolean.FALSE);
 
                 break;
             }
         }
     }
 
+    // Remove the class from its current parent
+    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+    parentClasses.remove(clazz.name());
+
+    // Check for name collisions in the new container
     if (classes.containsKey(clazz.name())) {
         writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
         setPrivateField(clazz, "name", parent.name() + clazz.name());
     }
 
+    // Add the class to the new container
     classes.put(clazz.name(), clazz);
 
-		// Finally modify the class so that it refers back the container:
+    // Finally, modify the class so that it refers back to the new container:
     setPrivateField(clazz, "outer", grandParent);
+
+    // Update the class's package reference if necessary
+    if (grandParent instanceof JPackage) {
+        setPrivateField(clazz, "_package", grandParent);
+    }
 }
\ No newline at end of file
