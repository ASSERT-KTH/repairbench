diff --git a/tmp/194fa630-90c4-40c6-9119-3e6dd41c3a94_buggy.java b/tmp/3dae0840-43cb-4817-b253-c56a7d2678c9_fixed.java
index 47a8941..ef4bde6 100644
--- a/tmp/194fa630-90c4-40c6-9119-3e6dd41c3a94_buggy.java
+++ b/tmp/3dae0840-43cb-4817-b253-c56a7d2678c9_fixed.java
@@ -1,53 +1,73 @@
 /**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+ * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+    // Modify the container so it now refers to the class. The container can be a class or package.
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
     JClassContainer grandParent = parent.parentContainer();
+    
     // Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
     // FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
         // Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
         classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+    } else {
         JPackage grandParentPackage = (JPackage) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
         classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
-			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
+        // In this scenario, class should have "static" modifier removed if present, otherwise it won't compile:
+        JMods mods = clazz.mods();
+        int newModsValue = mods.getValue() & ~JMod.STATIC;
+        setPrivateField(mods, "mods", Integer.valueOf(newModsValue));
 
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
 
                 // FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+                if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {
                     setPrivateField(sc, "anonymous", Boolean.FALSE);
+                }
 
                 break;
             }
         }
     }
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+    String newName = clazz.name();
+    if (classes.containsKey(newName)) {
+        // Generate a unique name to avoid collisions
+        int counter = 1;
+        while (classes.containsKey(newName + counter)) {
+            counter++;
+        }
+        newName = newName + counter;
+        writeSummary("\tRenaming class " + clazz.fullName() + " to class " + newName);
+        setPrivateField(clazz, "name", newName);
     }
 
-		classes.put(clazz.name(), clazz);
+    classes.put(newName, clazz);
 
-		// Finally modify the class so that it refers back the container:
+    // Finally, modify the class so that it refers back to the container:
     setPrivateField(clazz, "outer", grandParent);
+
+    // Update the parent to remove the class
+    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+    parentClasses.remove(clazz.name());
+
+    // If the parent class is now empty, remove it
+    if (parentClasses.isEmpty() && parent.parentContainer() instanceof JDefinedClass) {
+        JDefinedClass grandGrandParent = (JDefinedClass) parent.parentContainer();
+        Map<String, JDefinedClass> grandGrandParentClasses = getPrivateField(grandGrandParent, "classes");
+        grandGrandParentClasses.remove(parent.name());
+    }
 }
\ No newline at end of file
