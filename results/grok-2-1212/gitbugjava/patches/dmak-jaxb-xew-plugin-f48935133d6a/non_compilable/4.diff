diff --git a/tmp/0767ebfd-8c5a-46a0-bd18-7b69ac1cf7d0_buggy.java b/tmp/4ca5e04a-ed6a-4e65-85fd-ca4ff1edc13c_fixed.java
index 47a8941..42073d1 100644
--- a/tmp/0767ebfd-8c5a-46a0-bd18-7b69ac1cf7d0_buggy.java
+++ b/tmp/4ca5e04a-ed6a-4e65-85fd-ca4ff1edc13c_fixed.java
@@ -1,53 +1,64 @@
 /**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+ * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+    // Modify the container so it now refers to the class. Container can be a class or package.
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
     JClassContainer grandParent = parent.parentContainer();
     // Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
     // FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
         // Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
         classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+    } else {
         JPackage grandParentPackage = (JPackage) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
         classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
+        // In this scenario, class should have "static" modifier reset, otherwise it won't compile:
         setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
 
                 // FIXME: Inner class is always a local declaration.
                 assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
 
                 setPrivateField(sc, "anonymous", Boolean.FALSE);
 
                 break;
             }
         }
     }
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+    // Check for name collision and rename if necessary
+    String newName = clazz.name();
+    int counter = 0;
+    while (classes.containsKey(newName)) {
+        counter++;
+        newName = clazz.name() + counter;
     }
     
-		classes.put(clazz.name(), clazz);
+    if (!newName.equals(clazz.name())) {
+        writeSummary("\tRenaming class " + clazz.fullName() + " to class " + newName);
+        setPrivateField(clazz, "name", newName);
+    }
+
+    classes.put(newName, clazz);
 
-		// Finally modify the class so that it refers back the container:
+    // Finally, modify the class so that it refers back to the container:
     setPrivateField(clazz, "outer", grandParent);
+    
+    // Ensure the parent class is updated to reflect the removal of the inner class
+    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+    parentClasses.remove(clazz.name());
 }
\ No newline at end of file
