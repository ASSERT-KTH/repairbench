diff --git a/tmp/0d2b9a17-4d8a-4f2a-baaf-691b8d58ce72_buggy.java b/tmp/7a074d47-a84f-4baa-a0ac-7b7bae7fbc22_fixed.java
index b8e3fa3..be34da2 100644
--- a/tmp/0d2b9a17-4d8a-4f2a-baaf-691b8d58ce72_buggy.java
+++ b/tmp/7a074d47-a84f-4baa-a0ac-7b7bae7fbc22_fixed.java
@@ -1,65 +1,72 @@
 /**
  * Builds the {@link BackOffPolicy} with the given parameters.
  * @return the {@link BackOffPolicy} instance
  */
 public BackOffPolicy build() {
     if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {
         ExponentialBackOffPolicy policy;
         if (Boolean.TRUE.equals(this.random)) {
             policy = new ExponentialRandomBackOffPolicy();
-			}
-			else {
+        } else {
             policy = new ExponentialBackOffPolicy();
         }
         if (this.delay != null) {
             policy.setInitialInterval(this.delay);
         }
         if (this.delaySupplier != null) {
             policy.initialIntervalSupplier(this.delaySupplier);
         }
         if (this.multiplier != null) {
             policy.setMultiplier(this.multiplier);
         }
         if (this.multiplierSupplier != null) {
             policy.multiplierSupplier(this.multiplierSupplier);
         }
         if (this.maxDelay != null && this.delay != null) {
             policy.setMaxInterval(
                     this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
         }
         if (this.maxDelaySupplier != null) {
             policy.maxIntervalSupplier(this.maxDelaySupplier);
         }
         if (this.sleeper != null) {
             policy.setSleeper(this.sleeper);
         }
         return policy;
     }
     if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
         UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
         if (this.delay != null) {
             policy.setMinBackOffPeriod(this.delay);
         }
         if (this.delaySupplier != null) {
             policy.minBackOffPeriodSupplier(this.delaySupplier);
         }
         if (this.maxDelay != null) {
             policy.setMaxBackOffPeriod(this.maxDelay);
         }
         if (this.maxDelaySupplier != null) {
             policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
         }
         if (this.sleeper != null) {
             policy.setSleeper(this.sleeper);
         }
         return policy;
     }
+    // Handle the case where neither exponential nor uniform random backoff is applicable
+    if (this.delay != null || this.delaySupplier != null) {
         FixedBackOffPolicy policy = new FixedBackOffPolicy();
         if (this.delay != null) {
             policy.setBackOffPeriod(this.delay);
         }
+        if (this.delaySupplier != null) {
+            policy.backOffPeriodSupplier(this.delaySupplier);
+        }
         if (this.sleeper != null) {
             policy.setSleeper(this.sleeper);
         }
         return policy;
     }
+    // If no valid backoff policy can be created, throw an exception
+    throw new IllegalStateException("Unable to create a valid BackOffPolicy with the given parameters");
+}
\ No newline at end of file
