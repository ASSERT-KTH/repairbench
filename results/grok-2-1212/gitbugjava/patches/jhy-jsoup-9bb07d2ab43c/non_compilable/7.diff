diff --git a/tmp/cdac858b-716f-4d46-ae3f-c4a3fceabf92_buggy.java b/tmp/3aac6fbe-ac8a-4150-b023-e18fee63abcd_fixed.java
index dcc36a4..5fa2759 100644
--- a/tmp/cdac858b-716f-4d46-ae3f-c4a3fceabf92_buggy.java
+++ b/tmp/3aac6fbe-ac8a-4150-b023-e18fee63abcd_fixed.java
@@ -1,12 +1,39 @@
 protected void replaceChild(Node out, Node in) {
     Validate.isTrue(out.parentNode == this);
     Validate.notNull(in);
-        if (in.parentNode != null)
+    if (in.parentNode != null && in != out)
         in.parentNode.removeChild(in);
 
     final int index = out.siblingIndex;
     ensureChildNodes().set(index, in);
     in.parentNode = this;
     in.setSiblingIndex(index);
+    if (in != out) {
         out.parentNode = null;
+        // Update siblings
+        if (index > 0) {
+            Node prev = ensureChildNodes().get(index - 1);
+            prev.nextSibling = in;
+            in.prevSibling = prev;
+        } else {
+            in.prevSibling = null;
+        }
+        if (index < childNodeSize() - 1) {
+            Node next = ensureChildNodes().get(index + 1);
+            next.prevSibling = in;
+            in.nextSibling = next;
+        } else {
+            in.nextSibling = null;
+        }
+    } else {
+        // If out == in, we need to update the siblings around it
+        if (index > 0) {
+            Node prev = ensureChildNodes().get(index - 1);
+            prev.nextSibling = in;
+        }
+        if (index < childNodeSize() - 1) {
+            Node next = ensureChildNodes().get(index + 1);
+            next.prevSibling = in;
+        }
+    }
 }
\ No newline at end of file
