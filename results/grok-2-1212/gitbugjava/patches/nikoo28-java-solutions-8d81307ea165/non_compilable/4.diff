diff --git a/tmp/b94a5f92-0fc8-4f05-99fa-85c9d9e425ae_buggy.java b/tmp/3bc6d11c-8235-46f8-aca6-fbccca022b52_fixed.java
index 9739964..4c29381 100644
--- a/tmp/b94a5f92-0fc8-4f05-99fa-85c9d9e425ae_buggy.java
+++ b/tmp/3bc6d11c-8235-46f8-aca6-fbccca022b52_fixed.java
@@ -1,27 +1,28 @@
 public int[] calculateSpans(int[] prices) {
 
     int[] spans = new int[prices.length];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
-      while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
-        indexStack.pop();
+        int span = 1; // Initialize span to 1 for the current element
+        while (!indexStack.isEmpty() && prices[indexStack.peek()] <= prices[i]) {
+            span += spans[indexStack.pop()] - 1; // Add the span of the popped element minus 1
+        }
 
         // If index stack is empty, the price at index 'i'
         // is greater than all previous values
         if (indexStack.isEmpty())
-        spans[i] = i + 1;
+            spans[i] = span;
         else
-        spans[i] = i - indexStack.peek();
+            spans[i] = span;
 
         indexStack.push(i);
     }
 
     return spans;
 }
\ No newline at end of file
