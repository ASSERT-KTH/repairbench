diff --git a/tmp/d806da0b-d007-4c26-866b-e8d677ffb7f0_buggy.java b/tmp/205c5f3d-a285-4d77-bdc0-d1e5477d8206_fixed.java
index 27f2719..d2df005 100644
--- a/tmp/d806da0b-d007-4c26-866b-e8d677ffb7f0_buggy.java
+++ b/tmp/205c5f3d-a285-4d77-bdc0-d1e5477d8206_fixed.java
@@ -1,90 +1,111 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
 
     if (sentence.startsWith("!1,")) {
         int index = sentence.indexOf(',', 3);
         if (index < 0) {
             index = sentence.length();
         }
-            getDeviceSession(channel, remoteAddress, sentence.substring(3, index));
+        // Ensure getDeviceSession doesn't return null
+        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, sentence.substring(3, index));
+        if (deviceSession == null) {
+            return null;
+        }
         return null;
     }
 
+    // Ensure getDeviceSession doesn't return null
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
     if (deviceSession == null || !sentence.matches("![35A-D],.*")) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     String type = sentence.substring(1, 2);
     position.set(Position.KEY_TYPE, type);
 
     if (type.equals("3")) {
+        // Use an empty string if sentence length is less than 3
+        position.set(Position.KEY_RESULT, sentence.length() > 3 ? sentence.substring(3) : "");
 
-            getLastLocation(position, null);
-
-            position.set(Position.KEY_RESULT, sentence.substring(3));
+        // Use current time if getLastLocation returns null
+        Date lastLocationTime = getLastLocation(position, null);
+        if (lastLocationTime == null) {
+            position.setTime(new Date());
+        }
 
         return position;
 
     } else if (type.equals("5")) {
-
         String[] values = sentence.split(",");
 
-            getLastLocation(position, null);
+        // Use current time if getLastLocation returns null
+        Date lastLocationTime = getLastLocation(position, null);
+        if (lastLocationTime == null) {
+            position.setTime(new Date());
+        }
 
+        if (values.length > 1) {
+            try {
                 position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));
+            } catch (NumberFormatException e) {
+                // Handle invalid RSSI value
+                position.set(Position.KEY_RSSI, 0);
+            }
+        }
         if (values.length >= 4) {
+            try {
                 position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
+            } catch (NumberFormatException e) {
+                // Handle invalid battery level value
+                position.set(Position.KEY_BATTERY_LEVEL, 0);
+            }
         }
 
         return position;
 
     } else if (type.equals("B") || type.equals("D")) {
-
         Parser parser = new Parser(PATTERN_BD, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
+        // Use 0 if nextInt or nextDouble fails
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));
         position.set(Position.KEY_HDOP, parser.nextDouble(0));
 
         return position;
 
     } else if (type.equals("C")) {
-
         Parser parser = new Parser(PATTERN_C, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
         return position;
 
     } else if (type.equals("A")) {
-
         Parser parser = new Parser(PATTERN_A, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
 
         return position;
-
     }
 
     return null;
 }
\ No newline at end of file
