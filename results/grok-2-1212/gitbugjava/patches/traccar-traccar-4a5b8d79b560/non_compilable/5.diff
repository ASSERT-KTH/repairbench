diff --git a/tmp/16559c39-f2c9-4198-b52c-143d6a3194be_buggy.java b/tmp/cc6096b2-213b-4069-aee2-d99ed6f2996d_fixed.java
index 1c732f4..365ddba 100644
--- a/tmp/16559c39-f2c9-4198-b52c-143d6a3194be_buggy.java
+++ b/tmp/cc6096b2-213b-4069-aee2-d99ed6f2996d_fixed.java
@@ -1,88 +1,100 @@
 @Override
-    protected Object decode(
-            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
-
+protected Object decode(Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
     String sentence = (String) msg;
-        sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
+    
+    // Ensure the sentence starts and ends with '|'
+    if (!sentence.startsWith("|") || !sentence.endsWith("|")) {
+        return null; // Invalid format, return null
+    }
+    
+    // Extract the content between the first and last '|'
+    sentence = sentence.substring(1, sentence.length() - 1);
 
     Position position = new Position();
     position.setProtocol(getProtocolName());
 
     for (String entry : sentence.split(",")) {
         int delimiter = entry.indexOf('=');
-            String key = entry.substring(0, delimiter);
-            String value = entry.substring(delimiter + 1);
+        if (delimiter == -1) {
+            continue; // Skip entries without '=' separator
+        }
+        String key = entry.substring(0, delimiter).trim();
+        String value = entry.substring(delimiter + 1).trim();
+        
         switch (key) {
             case "unit":
                 DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
                 if (deviceSession != null) {
                     position.setDeviceId(deviceSession.getDeviceId());
                 }
                 break;
             case "gps_valid":
                 position.setValid(Integer.parseInt(value) != 0);
                 break;
             case "datetime_actual":
                 position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
                 break;
             case "latitude":
                 position.setLatitude(Double.parseDouble(value));
                 break;
             case "longitude":
                 position.setLongitude(Double.parseDouble(value));
                 break;
             case "altitude":
                 position.setAltitude(Double.parseDouble(value));
                 break;
             case "velocity":
                 position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
                 break;
             case "heading":
                 position.setCourse(Integer.parseInt(value));
                 break;
             case "eventid":
                 position.set(Position.KEY_EVENT, Integer.parseInt(value));
                 break;
             case "mileage":
                 position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
                 break;
             case "satellites":
                 position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                 break;
             case "ignition":
                 position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
                 break;
             case "door":
                 position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
                 break;
             case "arm":
                 position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
                 break;
             case "fuel":
                 position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
                 break;
             case "rpm":
                 position.set(Position.KEY_RPM, Integer.parseInt(value));
                 break;
             case "main_voltage":
                 position.set(Position.KEY_POWER, Double.parseDouble(value));
                 break;
             case "backup_voltage":
                 position.set(Position.KEY_BATTERY, Double.parseDouble(value));
                 break;
             case "analog1":
             case "analog2":
             case "analog3":
                 position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
                 break;
             case "extra1":
             case "extra2":
             case "extra3":
+                position.set(key, value);
+                break;
             default:
+                // Handle unknown keys
                 position.set(key, value);
                 break;
         }
     }
 
     return position;
 }
\ No newline at end of file
