diff --git a/tmp/94b4b92a-fb83-40a6-a0cf-c5c2dbdf6e11_buggy.java b/tmp/459b2ead-e780-4e64-bc46-ff5a1fe2deb7_fixed.java
index f506479..bad96b9 100644
--- a/tmp/94b4b92a-fb83-40a6-a0cf-c5c2dbdf6e11_buggy.java
+++ b/tmp/459b2ead-e780-4e64-bc46-ff5a1fe2deb7_fixed.java
@@ -1,64 +1,78 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
     argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
+    Map<String, List<String>> valuesByName = new HashMap<>();
+    DslArg currentArg = null;
+    List<String> currentValues = null;
+
     while (!arguments.isEmpty())
     {
         final NameValuePair argument = arguments.peekFirst();
         if (argument == NameValuePair.NULL)
         {
             arguments.pollFirst();
             continue;
         }
 
         if (argument.name == null)
         {
             throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
         }
 
         final DslArg arg = argsByName.get(argument.name.toLowerCase());
         if (arg == null)
         {
             break;
         }
 
-                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
-                if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
+        if (arg != currentArg)
         {
-                    break;
+            if (currentArg != null)
+            {
+                valuesByName.put(currentArg.getName(), currentValues);
+            }
+            currentArg = arg;
+            currentValues = new ArrayList<>();
         }
 
         checkValidValue(arg, argument.value);
-                argValues.add(argument.value);
+        currentValues.add(argument.value);
         arguments.pollFirst();
     }
 
-            // TODO: this whole thing here is a bit hacky!
-            final Map<String, List<String>> valuesByName = new HashMap<>();
-            for (final SimpleDslArg simpleDslArg : argsByName.values())
+    if (currentArg != null)
     {
-                final SimpleDslParam param = processor.collect(simpleDslArg);
-                if (param.hasValue())
-                {
-                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
-                }
+        valuesByName.put(currentArg.getName(), currentValues);
     }
 
     final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
     dslArgs[0] = groupArg.getIdentity();
     System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
-            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
+
+    // Process all collected values
+    Map<DslArg, List<String>> collectedValues = new HashMap<>();
+    for (Map.Entry<String, List<String>> entry : valuesByName.entrySet())
+    {
+        DslArg arg = argsByName.get(entry.getKey());
+        if (arg != null)
+        {
+            collectedValues.put(arg, entry.getValue());
+        }
+    }
+
+    groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, collectedValues));
 }
\ No newline at end of file
