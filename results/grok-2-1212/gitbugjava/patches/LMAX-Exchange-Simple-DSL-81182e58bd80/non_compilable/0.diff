diff --git a/tmp/ce41c463-00fd-4333-8282-ac8f6966425f_buggy.java b/tmp/357881d2-2825-46cb-80ca-628379c64942_fixed.java
index f506479..aad4c66 100644
--- a/tmp/ce41c463-00fd-4333-8282-ac8f6966425f_buggy.java
+++ b/tmp/357881d2-2825-46cb-80ca-628379c64942_fixed.java
@@ -1,64 +1,86 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
     argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
+    Map<String, List<String>> valuesByName = new HashMap<>();
+    String currentGroupValue = null;
+
     while (!arguments.isEmpty())
     {
         final NameValuePair argument = arguments.peekFirst();
         if (argument == NameValuePair.NULL)
         {
             arguments.pollFirst();
             continue;
         }
 
         if (argument.name == null)
         {
             throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
         }
 
         final DslArg arg = argsByName.get(argument.name.toLowerCase());
         if (arg == null)
         {
             break;
         }
 
         final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
+        if (arg == groupArg.getIdentity())
+        {
             if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
             {
                 break;
             }
-
             checkValidValue(arg, argument.value);
             argValues.add(argument.value);
+            currentGroupValue = argument.value;
+
+            // Clear values for other args in the group when we start a new group
+            valuesByName.clear();
+        }
+        else
+        {
+            List<String> values = valuesByName.computeIfAbsent(argument.name.toLowerCase(), k -> new ArrayList<>());
+            String[] splitValues = argument.value.split(",");
+            for (String value : splitValues)
+            {
+                values.add(value.trim());
+            }
+        }
+
         arguments.pollFirst();
     }
 
-            // TODO: this whole thing here is a bit hacky!
-            final Map<String, List<String>> valuesByName = new HashMap<>();
-            for (final SimpleDslArg simpleDslArg : argsByName.values())
-            {
-                final SimpleDslParam param = processor.collect(simpleDslArg);
-                if (param.hasValue())
-                {
-                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
-                }
-            }
-
+    // Process collected values
     final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
     dslArgs[0] = groupArg.getIdentity();
     System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
+
+    List<String> identityValues = valuesByArg.get(groupArg.getIdentity());
+    if (identityValues != null)
+    {
+        for (String identityValue : identityValues)
+        {
+            Map<String, List<String>> groupValues = new HashMap<>(valuesByName);
+            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, groupValues));
+        }
+    }
+    else
+    {
         groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
     }
+}
\ No newline at end of file
