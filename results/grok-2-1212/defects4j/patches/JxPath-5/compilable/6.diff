diff --git a/tmp/d92149b3-5c4d-49b0-b857-d65bbbfead8d_buggy.java b/tmp/c7647e4f-d6e7-49fe-aacd-61609d995558_fixed.java
index 5f8ac1a..e3efee0 100644
--- a/tmp/d92149b3-5c4d-49b0-b857-d65bbbfead8d_buggy.java
+++ b/tmp/c7647e4f-d6e7-49fe-aacd-61609d995558_fixed.java
@@ -1,34 +1,46 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
     if (p1 == null && p2 == null) {
         return 0;
     }
 
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
 
+    // Check if either pointer is not part of the node tree (could be a variable)
+    if (p1 != null && !p1.isNode()) {
+        return -1;
+    }
+    if (p2 != null && !p2.isNode()) {
+        return 1;
+    }
+
     if (depth1 == 1) {
+        // If both pointers are part of the node tree, they should belong to the same tree
+        if (p1 != null && p2 != null && p1.getRootNode() != p2.getRootNode()) {
             throw new JXPathException(
                     "Cannot compare pointers that do not belong to the same tree: '"
                             + p1 + "' and '" + p2 + "'");
         }
+        return 0; // If we reach here, either both are null or they belong to the same tree
+    }
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
