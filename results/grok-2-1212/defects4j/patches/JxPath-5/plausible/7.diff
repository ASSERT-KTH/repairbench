diff --git a/tmp/109420a1-c1e9-48d6-b329-b750efa5e6c5_buggy.java b/tmp/4d92edaa-47da-4ddb-a1e8-25f5f8219c8e_fixed.java
index 5f8ac1a..367e4f1 100644
--- a/tmp/109420a1-c1e9-48d6-b329-b750efa5e6c5_buggy.java
+++ b/tmp/4d92edaa-47da-4ddb-a1e8-25f5f8219c8e_fixed.java
@@ -1,34 +1,43 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
     if (p1 == null && p2 == null) {
         return 0;
     }
 
-        if (p1 != null && p1.equals(p2)) {
+    if (p1 != null && p2 != null && p1.equals(p2)) {
         return 0;
     }
 
+    // Handle the case when pointers are from different trees or contexts
+    if (p1 == null || p2 == null || p1.getImmediateParentPointer() == null || p2.getImmediateParentPointer() == null) {
+        // Compare the string representations if the nodes are not comparable
+        String p1Str = p1 != null ? p1.asPath() : "";
+        String p2Str = p2 != null ? p2.asPath() : "";
+        return p1Str.compareTo(p2Str);
+    }
+
     if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        // Instead of throwing an exception, compare the nodes using their string representations
+        String p1Str = p1.asPath();
+        String p2Str = p2.asPath();
+        return p1Str.compareTo(p2Str);
     }
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
