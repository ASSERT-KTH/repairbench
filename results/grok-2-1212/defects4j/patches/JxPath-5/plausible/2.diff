diff --git a/tmp/a257d88f-2943-4b2f-9e90-2d2ba3c4d465_buggy.java b/tmp/75640f0e-9325-4753-98d1-8cadfc35f089_fixed.java
index 5f8ac1a..55d650b 100644
--- a/tmp/a257d88f-2943-4b2f-9e90-2d2ba3c4d465_buggy.java
+++ b/tmp/75640f0e-9325-4753-98d1-8cadfc35f089_fixed.java
@@ -1,34 +1,42 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
     if (p1 == null && p2 == null) {
         return 0;
     }
 
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
 
     if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        // Instead of throwing an exception, return a special value to indicate that the pointers are not comparable
+        if (p1 == null || p2 == null || p1.getRootNode() != p2.getRootNode()) {
+            return Integer.MIN_VALUE; // Use Integer.MIN_VALUE as a special value to indicate incomparability
+        }
+        // If we reach here, p1 and p2 are both non-null and from the same tree
+        int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
+        if (r != 0) {
+            return r;
+        }
+
+        return p1.parent.compareChildNodePointers(p1, p2);
     }
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
