diff --git a/tmp/149c354a-d74b-433e-b87e-39a0c105f78a_buggy.java b/tmp/69680e41-cb06-4045-ada4-6b9195526881_fixed.java
index 5f8ac1a..68fc46b 100644
--- a/tmp/149c354a-d74b-433e-b87e-39a0c105f78a_buggy.java
+++ b/tmp/69680e41-cb06-4045-ada4-6b9195526881_fixed.java
@@ -1,34 +1,37 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
     if (p1 == null && p2 == null) {
         return 0;
     }
 
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
 
     if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        // Instead of throwing an exception, we return a value that treats different trees as different
+        if (p1 == null || p2 == null) {
+            return p1 == null ? -1 : 1;
+        }
+        // If both are non-null, but from different trees, return a consistent comparison result
+        return p1.hashCode() < p2.hashCode() ? -1 : 1;
     }
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
