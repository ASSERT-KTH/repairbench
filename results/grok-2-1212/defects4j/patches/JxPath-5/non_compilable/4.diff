diff --git a/tmp/df94b43a-a717-4be5-95fe-5f12cfcbfbed_buggy.java b/tmp/b492ee5d-a259-4c5e-bc53-7ec08e404ec6_fixed.java
index 5f8ac1a..2f374ab 100644
--- a/tmp/df94b43a-a717-4be5-95fe-5f12cfcbfbed_buggy.java
+++ b/tmp/b492ee5d-a259-4c5e-bc53-7ec08e404ec6_fixed.java
@@ -1,34 +1,39 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
     if (p1 == null && p2 == null) {
         return 0;
     }
 
-        if (p1 != null && p1.equals(p2)) {
+    if (p1 != null && p2 != null && p1.equals(p2)) {
         return 0;
     }
 
+    // Check if pointers are from different trees
+    if (p1 != null && p2 != null && !p1.isDescendant(p2) && !p2.isDescendant(p1)) {
+        // Compare using a consistent order for different tree pointers
+        return p1.toString().compareTo(p2.toString());
+    }
+
     if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        // If we're at the root and haven't returned yet, the pointers are from different trees
+        return p1.toString().compareTo(p2.toString());
     }
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
