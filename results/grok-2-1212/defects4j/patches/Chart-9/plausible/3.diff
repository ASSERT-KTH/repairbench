diff --git a/tmp/0354e2c5-2aac-4977-b474-22e0d936872b_buggy.java b/tmp/a9517ff9-3916-4eba-b195-3fbb0217ca47_fixed.java
index b4af58a..530c008 100644
--- a/tmp/0354e2c5-2aac-4977-b474-22e0d936872b_buggy.java
+++ b/tmp/a9517ff9-3916-4eba-b195-3fbb0217ca47_fixed.java
@@ -1,53 +1,57 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the first time period to copy (<code>null</code> not
      *         permitted).
      * @param end  the last time period to copy (<code>null</code> not
      *         permitted).
      *
      * @return A time series containing a copy of this time series from start
      *         until end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)
         throws CloneNotSupportedException {
 
         if (start == null) {
             throw new IllegalArgumentException("Null 'start' argument.");
         }
         if (end == null) {
             throw new IllegalArgumentException("Null 'end' argument.");
         }
-        if (start.compareTo(end) > 0) {
-            throw new IllegalArgumentException(
-                    "Requires start on or before end.");
-        }
+
         boolean emptyRange = false;
         int startIndex = getIndex(start);
         if (startIndex < 0) {
             startIndex = -(startIndex + 1);
-            if (startIndex == this.data.size()) {
+            if (startIndex >= this.data.size()) {
                 emptyRange = true;  // start is after last data item
             }
         }
         int endIndex = getIndex(end);
         if (endIndex < 0) {             // end period is not in original series
             endIndex = -(endIndex + 1); // this is first item AFTER end period
             endIndex = endIndex - 1;    // so this is last item BEFORE end
         }
         if (endIndex < 0) {
             emptyRange = true;
         }
+
+        // Adjust the start and end indices to ensure start index does not exceed end index
+        if (startIndex > endIndex) {
+            emptyRange = true;
+        }
+
         if (emptyRange) {
             TimeSeries copy = (TimeSeries) super.clone();
             copy.data = new java.util.ArrayList();
             return copy;
-        }
-        else {
+        } else {
+            // Ensure startIndex is not greater than endIndex before calling createCopy
+            startIndex = Math.max(0, Math.min(startIndex, this.data.size() - 1));
+            endIndex = Math.max(0, Math.min(endIndex, this.data.size() - 1));
             return createCopy(startIndex, endIndex);
         }
-
     }
\ No newline at end of file
