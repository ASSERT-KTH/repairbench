diff --git a/tmp/8f812538-73c5-4ab8-b5f8-1d08add5a396_buggy.java b/tmp/92ae992a-12a0-48bc-9e85-82801e56f809_fixed.java
index 39981f0..4bec4b9 100644
--- a/tmp/8f812538-73c5-4ab8-b5f8-1d08add5a396_buggy.java
+++ b/tmp/92ae992a-12a0-48bc-9e85-82801e56f809_fixed.java
@@ -1,65 +1,72 @@
 /**
  * Given a node, get a human-readable name for the type of that node so
  * that will be easy for the programmer to find the original declaration.
  *
  * For example, if SubFoo's property "bar" might have the human-readable
  * name "Foo.prototype.bar".
  *
  * @param n The node.
  * @param dereference If true, the type of the node will be dereferenced
  *     to an Object type, if possible.
  */
 String getReadableJSTypeName(Node n, boolean dereference) {
 
     // The best type name is the actual type name.
 
     // If we're analyzing a GETPROP, the property may be inherited by the
     // prototype chain. So climb the prototype chain and find out where
     // the property was originally defined.
     if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
+        Node objectNode = n.getFirstChild();
+        ObjectType objectType = getJSType(objectNode).dereference();
         if (objectType != null) {
             String propName = n.getLastChild().getString();
             if (objectType.getConstructor() != null &&
                 objectType.getConstructor().isInterface()) {
                 objectType = FunctionType.getTopDefiningInterface(
                     objectType, propName);
             } else {
                 // classes
                 while (objectType != null && !objectType.hasOwnProperty(propName)) {
                     objectType = objectType.getImplicitPrototype();
                 }
             }
 
             // Don't show complex function names or anonymous types.
             // Instead, try to get a human-readable type name.
             if (objectType != null &&
                 (objectType.getConstructor() != null ||
                  objectType.isFunctionPrototypeType())) {
+                // Check if the object is accessed through a member variable
+                String objectName = getReadableJSTypeName(objectNode, false);
+                if (objectName != null && !objectName.equals(objectType.toString())) {
+                    return objectName + "." + propName;
+                } else {
                     return objectType.toString() + "." + propName;
                 }
             }
         }
+    }
 
     JSType type = getJSType(n);
     if (dereference) {
         ObjectType dereferenced = type.dereference();
         if (dereferenced != null) {
             type = dereferenced;
         }
     }
     if (type.isFunctionPrototypeType() ||
         (type.toObjectType() != null &&
          type.toObjectType().getConstructor() != null)) {
         return type.toString();
     }
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
         return qualifiedName;
     } else if (type.isFunctionType()) {
         // Don't show complex function names.
         return "function";
     } else {
         return type.toString();
     }
 }
\ No newline at end of file
