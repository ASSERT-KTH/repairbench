diff --git a/tmp/031e0c85-cc7f-42e1-aeb7-e610064c179f_buggy.java b/tmp/29326024-8d0b-4938-8f9a-2942b99ccf27_fixed.java
index 6e45f80..bae25f2 100644
--- a/tmp/031e0c85-cc7f-42e1-aeb7-e610064c179f_buggy.java
+++ b/tmp/29326024-8d0b-4938-8f9a-2942b99ccf27_fixed.java
@@ -1,21 +1,32 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
+        return new TypeAdapter<T2>() {
+          @Override
+          public void write(JsonWriter out, T2 value) throws IOException {
+            typeAdapter.write(out, clazz.cast(value));
+          }
 
+          @Override
+          public T2 read(JsonReader in) throws IOException {
+            T1 result = typeAdapter.read(in);
+            return (T2) result; // Safe cast because we check the assignability in the create method
+          }
+        };
       }
+
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
\ No newline at end of file
