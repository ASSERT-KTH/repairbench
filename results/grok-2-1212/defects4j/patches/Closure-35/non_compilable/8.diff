diff --git a/tmp/8ed71d27-8219-4979-8428-4533356edfd8_buggy.java b/tmp/ec0c55c9-95d3-437f-b00f-d6263a2bb01b_fixed.java
index d57736b..2e813f8 100644
--- a/tmp/8ed71d27-8219-4979-8428-4533356edfd8_buggy.java
+++ b/tmp/ec0c55c9-95d3-437f-b00f-d6263a2bb01b_fixed.java
@@ -1,39 +1,35 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
-  private void inferPropertyTypesToMatchConstraint(
-      JSType type, JSType constraint) {
+private void inferPropertyTypesToMatchConstraint(JSType type, JSType constraint) {
     if (type == null || constraint == null) {
         return;
     }
 
-    ObjectType constraintObj =
-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());
+    ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
         ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
         if (objType != null) {
             for (String prop : constraintObj.getOwnPropertyNames()) {
                 JSType propType = constraintObj.getPropertyType(prop);
                 if (!objType.isPropertyTypeDeclared(prop)) {
                     JSType typeToInfer = propType;
                     if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+                        typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
                     }
                     objType.defineInferredProperty(prop, typeToInfer, null);
                 }
             }
         }
+    } else if (constraintObj != null) {
+        // Handle cases where constraint is not a record type
+        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
+        if (objType != null) {
+            for (String prop : objType.getOwnPropertyNames()) {
+                JSType propType = objType.getPropertyType(prop);
+                JSType constraintPropType = constraint.getPropertyType(prop);
+                if (constraintPropType != null && !propType.isSubtype(constraintPropType)) {
+                    JSType widenedType = propType.getLeastSupertype(constraintPropType);
+                    objType.defineInferredProperty(prop, widenedType, null);
+                }
+            }
+        }
     }
 }
\ No newline at end of file
