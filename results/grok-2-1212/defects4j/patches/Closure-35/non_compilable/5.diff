diff --git a/tmp/059b21ec-b2e9-4031-bf7c-2514c7690324_buggy.java b/tmp/bcbf55c2-bbb7-4e1a-af53-cbafe78c76eb_fixed.java
index d57736b..5f1195e 100644
--- a/tmp/059b21ec-b2e9-4031-bf7c-2514c7690324_buggy.java
+++ b/tmp/bcbf55c2-bbb7-4e1a-af53-cbafe78c76eb_fixed.java
@@ -1,39 +1,41 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
   if (constraintObj != null && constraintObj.isRecordType()) {
     ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
     if (objType != null) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!objType.isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!objType.hasProperty(prop)) {
             typeToInfer =
                 getNativeType(VOID_TYPE).getLeastSupertype(propType);
+          } else {
+            // If the property exists but its type is not declared,
+            // we need to widen it to match the constraint.
+            JSType existingType = objType.getPropertyType(prop);
+            typeToInfer = existingType.getLeastSupertype(propType);
           }
           objType.defineInferredProperty(prop, typeToInfer, null);
         }
       }
+    } else if (type.isObjectType()) {
+      // If objType is null, but type is still an ObjectType,
+      // we need to create a new ObjectType with inferred properties.
+      ObjectType newObjType = registry.createObjectType(type);
+      for (String prop : constraintObj.getOwnPropertyNames()) {
+        JSType propType = constraintObj.getPropertyType(prop);
+        JSType typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
+        newObjType.defineInferredProperty(prop, typeToInfer, null);
+      }
+      // Replace the original type with the new one with inferred properties
+      type.replaceType(newObjType);
     }
   }
 }
\ No newline at end of file
