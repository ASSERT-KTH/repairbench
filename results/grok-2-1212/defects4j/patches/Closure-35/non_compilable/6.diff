diff --git a/tmp/556619f1-98d4-45a3-bc01-4c0aedb53bee_buggy.java b/tmp/69cb0ab4-34cb-43ab-a943-42bd6608f90a_fixed.java
index d57736b..d1ec367 100644
--- a/tmp/556619f1-98d4-45a3-bc01-4c0aedb53bee_buggy.java
+++ b/tmp/69cb0ab4-34cb-43ab-a943-42bd6608f90a_fixed.java
@@ -1,39 +1,38 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
-  private void inferPropertyTypesToMatchConstraint(
-      JSType type, JSType constraint) {
+private void inferPropertyTypesToMatchConstraint(JSType type, JSType constraint) {
     if (type == null || constraint == null) {
         return;
     }
 
-    ObjectType constraintObj =
-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());
+    ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
         ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
         if (objType != null) {
             for (String prop : constraintObj.getOwnPropertyNames()) {
                 JSType propType = constraintObj.getPropertyType(prop);
                 if (!objType.isPropertyTypeDeclared(prop)) {
                     JSType typeToInfer = propType;
                     if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+                        typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
                     }
                     objType.defineInferredProperty(prop, typeToInfer, null);
                 }
             }
         }
     }
+
+    // Additional logic to handle cases where properties are assigned later
+    if (type.isUnionType()) {
+        UnionType unionType = (UnionType) type;
+        for (JSType alt : unionType.getAlternates()) {
+            ObjectType altObj = ObjectType.cast(alt.restrictByNotNullOrUndefined());
+            if (altObj != null) {
+                for (String prop : altObj.getOwnPropertyNames()) {
+                    if (!altObj.isPropertyTypeDeclared(prop)) {
+                        JSType propType = altObj.getPropertyType(prop);
+                        altObj.defineInferredProperty(prop, propType, null);
+                    }
+                }
+            }
+        }
+    }
 }
\ No newline at end of file
