diff --git a/tmp/cc3ad7f0-9cad-4a00-970c-351341b6dcf1_buggy.java b/tmp/31400382-9479-4585-b7a5-9c8a65a997a0_fixed.java
index d57736b..34eeaf5 100644
--- a/tmp/cc3ad7f0-9cad-4a00-970c-351341b6dcf1_buggy.java
+++ b/tmp/31400382-9479-4585-b7a5-9c8a65a997a0_fixed.java
@@ -1,39 +1,59 @@
 /**
  * Suppose X is an object with inferred properties.
  * Suppose also that X is used in a way where it would only type-check
  * correctly if some of those properties are widened.
  * Then we should be polite and automatically widen X's properties for him.
  *
  * For a concrete example, consider:
  * param x {{prop: (number|undefined)}}
  * function f(x) {}
  * f({});
  *
  * If we give the anonymous object an inferred property of (number|undefined),
  * then this code will type-check appropriately.
  */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
-    if (constraintObj != null && constraintObj.isRecordType()) {
+  if (constraintObj != null) {
     ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
     if (objType != null) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!objType.isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!objType.hasProperty(prop)) {
             typeToInfer =
                 getNativeType(VOID_TYPE).getLeastSupertype(propType);
           }
           objType.defineInferredProperty(prop, typeToInfer, null);
         }
       }
+      
+      // Handle cases where the constraint is a union type
+      if (constraint.isUnionType()) {
+        for (JSType alt : constraint.toMaybeUnionType().getAlternates()) {
+          ObjectType altObj = ObjectType.cast(alt.restrictByNotNullOrUndefined());
+          if (altObj != null) {
+            for (String prop : altObj.getOwnPropertyNames()) {
+              JSType propType = altObj.getPropertyType(prop);
+              if (!objType.isPropertyTypeDeclared(prop)) {
+                JSType typeToInfer = propType;
+                if (!objType.hasProperty(prop)) {
+                  typeToInfer =
+                      getNativeType(VOID_TYPE).getLeastSupertype(propType);
+                }
+                objType.defineInferredProperty(prop, typeToInfer, null);
+              }
+            }
+          }
+        }
+      }
     }
   }
 }
\ No newline at end of file
