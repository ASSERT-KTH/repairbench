diff --git a/tmp/5c587c38-7d9d-438c-a8d3-459ba65d6808_buggy.java b/tmp/ebc33cf9-4be7-4123-8d72-6f5bb7ead198_fixed.java
index e087f95..828a3f1 100644
--- a/tmp/5c587c38-7d9d-438c-a8d3-459ba65d6808_buggy.java
+++ b/tmp/ebc33cf9-4be7-4123-8d72-6f5bb7ead198_fixed.java
@@ -1,53 +1,85 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if the trailing space/NUL is missing, if a invalid byte is detected,
+ *                                  or if the input parameters are invalid.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    // Check input parameters
+    if (buffer == null) {
+        throw new IllegalArgumentException("Buffer is null");
+    }
+    if (offset < 0 || length < 2 || offset + length > buffer.length) {
+        throw new IllegalArgumentException("Invalid offset or length");
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
 
+    // Check if the buffer contains all NULs
+    boolean allNuls = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
+        return 0L;
+    }
+
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
+        if (currentByte == 0 || currentByte == ' ') {
+            // Check for valid end of number
+            if (!stillPadding) {
+                // Skip trailing spaces or NULs
+                while (i + 1 < end && (buffer[i + 1] == 0 || buffer[i + 1] == ' ')) {
+                    i++;
+                }
+                // Ensure we've reached the end of the specified length
+                if (i == end - 1) {
+                    return result;
+                } else {
+                    throw new IllegalArgumentException(
+                            exceptionMessage(buffer, offset, length, start, currentByte));
+                }
             }
-
             // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+            if (currentByte == ' ') {
                 continue;
             }
-                if (currentByte == (byte) ' ') {
+            // If we encounter a NUL while still padding, we're done
+            if (currentByte == 0) {
                 break;
             }
         }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+        // Check for valid octal digit
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
+
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
-        return result;
+    // If we've reached this point, we didn't find a valid end to the number
+    throw new IllegalArgumentException(
+            exceptionMessage(buffer, offset, length, start, buffer[end - 1]));
 }
\ No newline at end of file
