diff --git a/tmp/bc7b1748-aab8-4ea7-a9f9-b6c8a5f45b18_buggy.java b/tmp/9e43ea88-924e-47d7-aed4-36bc06284219_fixed.java
index e087f95..d042f14 100644
--- a/tmp/bc7b1748-aab8-4ea7-a9f9-b6c8a5f45b18_buggy.java
+++ b/tmp/9e43ea88-924e-47d7-aed4-36bc06284219_fixed.java
@@ -1,53 +1,80 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if the trailing space/NUL is missing, if a invalid byte is detected, or if the length is less than 2 bytes.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    // Check if length is at least 2 bytes
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes");
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
 
+    // Check if the buffer contains all NULs
+    boolean allNULs = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNULs = false;
+            break;
+        }
+    }
+    if (allNULs) {
+        return 0L;
+    }
+
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+        if (currentByte == 0 || currentByte == ' ') {
+            // Check for trailing space or NUL
+            if (i == start) {
+                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));
+            }
+            // Check for valid trailing characters
+            if (i < end - 1 && buffer[i + 1] != 0 && buffer[i + 1] != ' ') {
+                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, buffer[i + 1]));
+            }
             break;
         }
 
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+        if (currentByte == ' ') {
+            if (!stillPadding) {
+                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));
+            }
+            continue;
+        }
+
+        // Skip leading zeros
+        if (currentByte == '0') {
             if (stillPadding) {
                 continue;
             }
-                if (currentByte == (byte) ' ') {
-                break;
         }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+        // Check for valid octal digit
         if (currentByte < '0' || currentByte > '7') {
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));
         }
+
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
