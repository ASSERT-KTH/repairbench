diff --git a/tmp/97dc7a8a-619c-48dd-abb0-13c86638bc5a_buggy.java b/tmp/1c0238b4-dd3b-42d8-8208-8134b6b291f8_fixed.java
index e087f95..1f75da3 100644
--- a/tmp/97dc7a8a-619c-48dd-abb0-13c86638bc5a_buggy.java
+++ b/tmp/1c0238b4-dd3b-42d8-8208-8134b6b291f8_fixed.java
@@ -1,53 +1,80 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if the trailing space/NUL is missing or if an invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (buffer == null) {
+        throw new IllegalArgumentException("Buffer cannot be null");
+    }
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2");
+    }
+    if (offset < 0 || offset + length > buffer.length) {
+        throw new IllegalArgumentException("Invalid offset or length");
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
 
+    boolean foundNonZero = false;
+    boolean foundTerminator = false;
+
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
         if (stillPadding) {
+            if (currentByte == ' ') {
                 continue;
             }
-                if (currentByte == (byte) ' ') {
-                break;
+            if (currentByte == '0') {
+                if (!foundNonZero) {
+                    continue;
                 }
             }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+        }
+
+        if (currentByte == 0 || currentByte == ' ') {
+            if (foundTerminator) {
+                // Second terminator found, we're done
+                break;
+            }
+            foundTerminator = true;
+            continue;
+        }
+
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
+
+        if (foundTerminator) {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, start, currentByte));
+        }
+
+        foundNonZero = true;
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    }
+
+    if (!foundTerminator && length > 0) {
+        throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, start, (byte)0));
     }
 
     return result;
 }
\ No newline at end of file
