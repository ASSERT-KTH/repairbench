diff --git a/tmp/0c3f3704-9fc4-4131-b3ad-93308f7649df_buggy.java b/tmp/faecd442-e727-43da-a68a-05f66c0b575f_fixed.java
index e087f95..7f9b387 100644
--- a/tmp/0c3f3704-9fc4-4131-b3ad-93308f7649df_buggy.java
+++ b/tmp/faecd442-e727-43da-a68a-05f66c0b575f_fixed.java
@@ -1,53 +1,95 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if the trailing space/NUL is missing, if length is less than 2, 
+ *                                  or if an invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    // Check if length is at least 2
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes");
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
+    boolean foundValidDigit = false;
+
+    // Check if buffer contains all NULs
+    boolean allNULs = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNULs = false;
+            break;
+        }
+    }
+    if (allNULs) {
+        return 0L;
+    }
 
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+
+        // Check for trailing space or NUL
+        if (currentByte == 0 || currentByte == ' ') {
+            if (foundValidDigit) {
+                // Check for additional trailing space or NUL
+                if (i + 1 < end && (buffer[i + 1] == 0 || buffer[i + 1] == ' ')) {
+                    i++; // Skip the additional trailing space or NUL
+                }
                 break;
+            } else if (currentByte == ' ') {
+                // If we encounter a space before any valid digit, it's invalid
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, start, currentByte));
+            }
+            continue;
         }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+        // Skip leading spaces and zeros
+        if (currentByte == '0') {
             if (stillPadding) {
                 continue;
             }
-                if (currentByte == (byte) ' ') {
-                break;
+        } else if (currentByte == ' ') {
+            if (stillPadding) {
+                continue;
+            } else {
+                // Space after padding is invalid
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, start, currentByte));
             }
         }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+        // Check for valid octal digit
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
+
+        foundValidDigit = true;
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    }
+
+    // Check for missing trailing space or NUL
+    if (!foundValidDigit) {
+        throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, start, buffer[end - 1]));
     }
 
     return result;
 }
\ No newline at end of file
