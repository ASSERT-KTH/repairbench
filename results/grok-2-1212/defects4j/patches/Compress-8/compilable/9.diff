diff --git a/tmp/67d35ed5-70e7-4b24-a08d-ff1e0caf5301_buggy.java b/tmp/bef6a644-034d-4c06-a2c5-3d7460f38846_fixed.java
index e087f95..d5a63e0 100644
--- a/tmp/67d35ed5-70e7-4b24-a08d-ff1e0caf5301_buggy.java
+++ b/tmp/bef6a644-034d-4c06-a2c5-3d7460f38846_fixed.java
@@ -1,53 +1,84 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
  * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes");
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
 
+    boolean foundNonZero = false;
+    boolean foundSpace = false;
+
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
         
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+        if (currentByte == 0 || currentByte == ' ') {
+            if (!foundNonZero && !foundSpace) {
+                // All NULs or spaces at the beginning
                 continue;
             }
-                if (currentByte == (byte) ' ') {
+            if (currentByte == ' ') {
+                foundSpace = true;
+            }
+            if (i == end - 1 || buffer[i + 1] == 0 || buffer[i + 1] == ' ') {
+                // Valid end of octal string
                 break;
             }
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, start, currentByte));
         }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
+
+        if (stillPadding && currentByte == '0') {
+            start++;
+            continue;
+        }
+
+        stillPadding = false;
+        foundNonZero = true;
+
+        // Check for embedded spaces or NULs
+        if (foundSpace || foundNonZero && (currentByte == ' ' || currentByte == 0)) {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, start, currentByte));
+        }
+
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    }
+
+    // Check if we found any valid octal digits
+    if (!foundNonZero && !foundSpace) {
+        // All NULs or spaces
+        return 0L;
+    }
+
+    // Check for trailing space or NUL
+    if (end > start && buffer[end - 1] != 0 && buffer[end - 1] != ' ') {
+        throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, start, buffer[end - 1]));
     }
 
     return result;
 }
\ No newline at end of file
