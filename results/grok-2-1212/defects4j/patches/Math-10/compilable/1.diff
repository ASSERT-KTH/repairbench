diff --git a/tmp/e7420574-d073-49e8-810b-405f6cee2772_buggy.java b/tmp/8f667b94-0797-4f39-9b39-1800c83121bd_fixed.java
index d27c40c..c77d1ce 100644
--- a/tmp/e7420574-d073-49e8-810b-405f6cee2772_buggy.java
+++ b/tmp/8f667b94-0797-4f39-9b39-1800c83121bd_fixed.java
@@ -1,49 +1,61 @@
-    /** Compute two arguments arc tangent of a derivative structure.
-     * @param y array holding the first operand
-     * @param yOffset offset of the first operand in its array
-     * @param x array holding the second operand
-     * @param xOffset offset of the second operand in its array
-     * @param result array where result must be stored (for
-     * two arguments arc tangent the result array <em>cannot</em>
-     * be the input array)
-     * @param resultOffset offset of the result in its array
-     */
 public void atan2(final double[] y, final int yOffset,
                   final double[] x, final int xOffset,
                   final double[] result, final int resultOffset) {
 
-        // compute r = sqrt(x^2+y^2)
+    double yValue = y[yOffset];
+    double xValue = x[xOffset];
+
+    // Handle special cases first
+    if (Double.isInfinite(yValue) || Double.isInfinite(xValue)) {
+        if (Double.isInfinite(yValue)) {
+            if (Double.isInfinite(xValue)) {
+                result[resultOffset] = (yValue > 0) ? (xValue > 0 ? FastMath.PI / 4 : 3 * FastMath.PI / 4) :
+                                                      (xValue > 0 ? -FastMath.PI / 4 : -3 * FastMath.PI / 4);
+            } else {
+                result[resultOffset] = (yValue > 0) ? FastMath.PI / 2 : -FastMath.PI / 2;
+            }
+        } else {
+            result[resultOffset] = (xValue > 0) ? 0 : FastMath.PI;
+        }
+        for (int i = 1; i < result.length; ++i) {
+            result[resultOffset + i] = 0;
+        }
+        return;
+    }
+
+    if (yValue == 0 && xValue == 0) {
+        result[resultOffset] = (Double.doubleToRawLongBits(yValue) & Double.doubleToRawLongBits(xValue) & 1L) == 0 ? 0 : FastMath.PI;
+        result[resultOffset] = (Double.doubleToRawLongBits(yValue) & 1L) != 0 ? -result[resultOffset] : result[resultOffset];
+        for (int i = 1; i < result.length; ++i) {
+            result[resultOffset + i] = 0;
+        }
+        return;
+    }
+
+    // Compute r = sqrt(x^2 + y^2)
     double[] tmp1 = new double[getSize()];
     multiply(x, xOffset, x, xOffset, tmp1, 0);  // x^2
     double[] tmp2 = new double[getSize()];
     multiply(y, yOffset, y, yOffset, tmp2, 0);  // y^2
     add(tmp1, 0, tmp2, 0, tmp2, 0);             // x^2 + y^2
     rootN(tmp2, 0, 2, tmp1, 0);                 // r = sqrt(x^2 + y^2)
 
-        if (x[xOffset] >= 0) {
-
-            // compute atan2(y, x) = 2 atan(y / (r + x))
+    if (xValue >= 0) {
+        // Compute atan2(y, x) = 2 atan(y / (r + x))
         add(tmp1, 0, x, xOffset, tmp2, 0);      // r + x
         divide(y, yOffset, tmp2, 0, tmp1, 0);   // y /(r + x)
         atan(tmp1, 0, tmp2, 0);                 // atan(y / (r + x))
         for (int i = 0; i < tmp2.length; ++i) {
             result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
         }
-
     } else {
-
-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
+        // Compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
         subtract(tmp1, 0, x, xOffset, tmp2, 0); // r - x
         divide(y, yOffset, tmp2, 0, tmp1, 0);   // y /(r - x)
         atan(tmp1, 0, tmp2, 0);                 // atan(y / (r - x))
-            result[resultOffset] =
-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
+        result[resultOffset] = ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
         for (int i = 1; i < tmp2.length; ++i) {
-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
+            result[resultOffset + i] = -2 * tmp2[i]; // -2 * atan(y / (r - x))
         }
-
     }
-
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
 }
\ No newline at end of file
