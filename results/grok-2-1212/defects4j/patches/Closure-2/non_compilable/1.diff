diff --git a/tmp/d41976b3-7421-4f9d-9d04-e0c6906c3194_buggy.java b/tmp/9fe11eb4-8e11-4ec1-8c5f-aa3bcc801d44_fixed.java
index 8ff679b..7668d0f 100644
--- a/tmp/d41976b3-7421-4f9d-9d04-e0c6906c3194_buggy.java
+++ b/tmp/9fe11eb4-8e11-4ec1-8c5f-aa3bcc801d44_fixed.java
@@ -1,39 +1,54 @@
 /**
-   * Check whether there's any property conflict for for a particular super
+ * Check whether there's any property conflict for a particular super
  * interface
  * @param t The node traversal object that supplies context
  * @param n The node being visited
  * @param functionName The function name being checked
  * @param properties The property names in the super interfaces that have
  * been visited
  * @param currentProperties The property names in the super interface
  * that have been visited
  * @param interfaceType The super interface that is being visited
  */
 private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
     String functionName, HashMap<String, ObjectType> properties,
     HashMap<String, ObjectType> currentProperties,
     ObjectType interfaceType) {
+  // Check if interfaceType is valid before proceeding
+  if (interfaceType == null || interfaceType.isUnknownType()) {
+    return;
+  }
+
   ObjectType implicitProto = interfaceType.getImplicitPrototype();
   Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
+
+  // Safely handle cases where implicitProto might be null
+  if (implicitProto != null) {
     currentPropertyNames = implicitProto.getOwnPropertyNames();
+  } else {
+    // If implicitProto is null, use an empty set to avoid NPE
+    currentPropertyNames = new HashSet<>();
+  }
+
   for (String name : currentPropertyNames) {
     ObjectType oType = properties.get(name);
     if (oType != null) {
       if (!interfaceType.getPropertyType(name).isEquivalentTo(
           oType.getPropertyType(name))) {
         compiler.report(
             t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                 functionName, name, oType.toString(),
                 interfaceType.toString()));
       }
     }
     currentProperties.put(name, interfaceType);
   }
+
+  // Safely iterate over extended interfaces
   for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
+    if (iType != null) {
       checkInterfaceConflictProperties(t, n, functionName, properties,
           currentProperties, iType);
     }
   }
+}
\ No newline at end of file
