diff --git a/tmp/e1beed25-bca1-4ffe-bc10-1825fe9bf6d3_buggy.java b/tmp/bb089d9e-1e02-464a-b571-515351ee5f12_fixed.java
index 5f1dcf2..ad2c93d 100644
--- a/tmp/e1beed25-bca1-4ffe-bc10-1825fe9bf6d3_buggy.java
+++ b/tmp/bb089d9e-1e02-464a-b571-515351ee5f12_fixed.java
@@ -1,41 +1,55 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+            if (comparator.compare(expanded, reflected) < 0) {
+                // accept the expanded simplex
+                simplex = replaceWorstPoint(expanded, comparator);
+            } else {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = replaceWorstPoint(reflected, comparator);
             }
 
-                return;
-
-            }
-
-            // compute the contracted simplex
+        } else if (comparator.compare(reflected, original[simplex.length - 1]) < 0) {
+            // perform a contraction step
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
+            if (comparator.compare(contracted, reflected) <= 0) {
                 // accept the contracted simplex
+                simplex = replaceWorstPoint(contracted, comparator);
+            } else {
+                // perform a shrink step
+                simplex = shrinkSimplex(original, comparator);
+            }
+        } else {
+            // perform a shrink step
+            simplex = shrinkSimplex(original, comparator);
+        }
 
-            // check convergence
+        // Check for convergence
+        if (isConverged()) {
             return;
         }
 
+        // Check for maximum iterations
+        if (getIterations() >= getMaxIterations()) {
+            throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
+        }
+
     }
 
 }
\ No newline at end of file
