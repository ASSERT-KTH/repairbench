diff --git a/tmp/faedf80e-1342-4c5c-8522-0d39bce68347_buggy.java b/tmp/c7ba9bf1-ca53-4456-8db5-1198d10fc269_fixed.java
index 5f1dcf2..c5b6818 100644
--- a/tmp/faedf80e-1342-4c5c-8522-0d39bce68347_buggy.java
+++ b/tmp/c7ba9bf1-ca53-4456-8db5-1198d10fc269_fixed.java
@@ -1,41 +1,47 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
-
         incrementIterationsCounter();
 
-            // save the original vertex
+        // Save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
-            // perform a reflection step
+        // Perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+            // Compute the expanded simplex
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                // Accept the reflected simplex
+                simplex = evaluateNewSimplex(original, 1.0, comparator);
+            } else if (comparator.compare(expanded, best) < 0) {
+                // Accept the expanded simplex
+                simplex = evaluateNewSimplex(original, khi, comparator);
             }
-
-                return;
-
-            }
-
-            // compute the contracted simplex
+        } else {
+            // Compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
+                // Accept the contracted simplex
+                simplex = evaluateNewSimplex(original, gamma, comparator);
+            } else {
+                // Perform a shrink step
+                simplex = evaluateNewSimplex(original, 0.5, comparator);
+            }
         }
 
+        // Check convergence
+        if (isConverged()) {
+            break;
         }
 
+        // Check if maximum iterations reached
+        if (getIterations() >= getMaxIterations()) {
+            throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
+        }
+    }
 }
\ No newline at end of file
