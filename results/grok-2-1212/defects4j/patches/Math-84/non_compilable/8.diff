diff --git a/tmp/b44ae153-9e13-4b27-bffa-d9fa745bf6a6_buggy.java b/tmp/fc817614-7cd4-43e2-a7ed-742a70039210_fixed.java
index 5f1dcf2..15b3389 100644
--- a/tmp/b44ae153-9e13-4b27-bffa-d9fa745bf6a6_buggy.java
+++ b/tmp/fc817614-7cd4-43e2-a7ed-742a70039210_fixed.java
@@ -1,41 +1,82 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
-            if (comparator.compare(reflected, best) < 0) {
+        if (comparator.compare(reflected, best) < 0 && comparator.compare(reflected, original[simplex.length - 1]) < 0) {
+            // accept the reflected point
+            simplex = replaceWorstPoint(reflected, original);
 
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+            // attempt an expansion
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
-                    simplex = reflectedSimplex;
+            if (comparator.compare(expanded, reflected) < 0) {
+                // accept the expanded point
+                simplex = replaceWorstPoint(expanded, original);
+            }
+            return;
         }
 
+        // attempt a contraction
+        if (comparator.compare(reflected, original[simplex.length - 1]) < 0) {
+            // outside contraction
+            final RealPointValuePair outsideContracted = evaluateNewSimplex(original, gamma, comparator);
+            if (comparator.compare(outsideContracted, reflected) <= 0) {
+                // accept the contracted point
+                simplex = replaceWorstPoint(outsideContracted, original);
+                return;
+            }
+        } else {
+            // inside contraction
+            final RealPointValuePair insideContracted = evaluateNewSimplex(original, -gamma, comparator);
+            if (comparator.compare(insideContracted, original[simplex.length - 1]) < 0) {
+                // accept the contracted point
+                simplex = replaceWorstPoint(insideContracted, original);
                 return;
+            }
+        }
 
+        // perform a shrink step
+        boolean shrunk = false;
+        for (int i = 1; i < simplex.length; i++) {
+            simplex[i] = evaluateNewSimplex(original, 0.5, comparator, i);
+            shrunk = true;
         }
 
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
+        if (shrunk) {
+            return;
+        }
 
-            // check convergence
+        // Check convergence
+        if (getConvergenceChecker() != null && getConvergenceChecker().converged(getIterations(), simplex)) {
             return;
         }
 
+        if (getIterations() >= getMaxIterations()) {
+            throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
+        }
+    }
+}
+
+private RealPointValuePair[] replaceWorstPoint(RealPointValuePair point, RealPointValuePair[] original) {
+    RealPointValuePair[] newSimplex = new RealPointValuePair[simplex.length];
+    System.arraycopy(original, 0, newSimplex, 0, simplex.length - 1);
+    newSimplex[simplex.length - 1] = point;
+    return newSimplex;
 }
 
+private RealPointValuePair evaluateNewSimplex(RealPointValuePair[] original, double coeff, Comparator<RealPointValuePair> comparator, int... fixedIndices) throws FunctionEvaluationException {
+    // Implementation of evaluateNewSimplex method (not provided in original code)
+    // This method should create and evaluate a new simplex based on the given coefficient and fixed indices
+    // Return the new point to be considered for inclusion in the simplex
+    // ...
 }
\ No newline at end of file
