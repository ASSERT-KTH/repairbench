diff --git a/tmp/a55e2059-d81c-47f4-b575-784ed2cfcfc0_buggy.java b/tmp/2f7ba5ab-2e25-41ea-8642-b3bc83f9f15d_fixed.java
index 5f1dcf2..657c565 100644
--- a/tmp/a55e2059-d81c-47f4-b575-784ed2cfcfc0_buggy.java
+++ b/tmp/2f7ba5ab-2e25-41ea-8642-b3bc83f9f15d_fixed.java
@@ -1,41 +1,44 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
-
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+            if (comparator.compare(expanded, reflected) < 0) {
+                // accept the expanded simplex
+                simplex = replaceWorstPoint(expanded, comparator);
+            } else {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = replaceWorstPoint(reflected, comparator);
             }
-
             return;
-
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            simplex = replaceWorstPoint(contracted, comparator);
+            return;
+        }
 
         // check convergence
+        if (isConverged()) {
             return;
         }
 
+        // perform a shrink step if no other step is accepted
+        simplex = shrinkSimplex(comparator);
     }
-
 }
\ No newline at end of file
