diff --git a/tmp/81302cfd-ff5f-4388-8736-40e74bf343b9_buggy.java b/tmp/d0bd2608-8354-4c6a-b7ab-ae6899c2250c_fixed.java
index 5f1dcf2..a22e6c9 100644
--- a/tmp/81302cfd-ff5f-4388-8736-40e74bf343b9_buggy.java
+++ b/tmp/d0bd2608-8354-4c6a-b7ab-ae6899c2250c_fixed.java
@@ -1,41 +1,48 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
-
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+            if (comparator.compare(expanded, reflected) < 0) {
+                // accept the expanded simplex
+                simplex = evaluateNewSimplex(original, khi, comparator, true);
+            } else {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = evaluateNewSimplex(original, 1.0, comparator, true);
             }
-
             return;
-
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            simplex = evaluateNewSimplex(original, gamma, comparator, true);
+            return;
+        }
+
+        // perform a shrinkage step
+        simplex = evaluateNewSimplex(original, 0.5, comparator, true);
 
         // check convergence
+        if (isConverged()) {
             return;
         }
 
+        if (getIterations() >= getMaxIterations()) {
+            throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
+        }
     }
-
 }
\ No newline at end of file
