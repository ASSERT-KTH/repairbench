diff --git a/tmp/a7cdc9f6-3e6f-407d-bbd3-8dad807656ba_buggy.java b/tmp/44ee8253-3177-499d-8207-5b41b521201e_fixed.java
index 5f1dcf2..b117c8a 100644
--- a/tmp/a7cdc9f6-3e6f-407d-bbd3-8dad807656ba_buggy.java
+++ b/tmp/44ee8253-3177-499d-8207-5b41b521201e_fixed.java
@@ -1,41 +1,58 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+            if (comparator.compare(expanded, reflected) < 0) {
+                // accept the expanded simplex
+                simplex = evaluateNewSimplex(original, khi, comparator, true);
+                return;
+            }
+
             // accept the reflected simplex
-                    simplex = reflectedSimplex;
-                }
-
+            simplex = evaluateNewSimplex(original, 1.0, comparator, true);
             return;
 
         }
 
-            // compute the contracted simplex
+        // perform a contraction step
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            simplex = evaluateNewSimplex(original, gamma, comparator, true);
+            return;
+        }
+
+        // perform a shrink step
+        simplex = evaluateNewSimplex(original, 0.5, comparator, true);
 
         // check convergence
+        if (convergenceChecker != null) {
+            final RealPointValuePair[] previous = original;
+            if (convergenceChecker.converged(getIterations(), previous, simplex)) {
                 return;
             }
+        }
+
+        // Check if maximum iterations reached
+        if (getIterations() >= getMaxIterations()) {
+            throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
+        }
 
     }
 
 }
\ No newline at end of file
