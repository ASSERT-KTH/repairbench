diff --git a/tmp/6aaa70f6-5795-4a09-a4b7-095c9572ab21_buggy.java b/tmp/50553120-a8f3-4cd1-b55a-90ea6d49b205_fixed.java
index 5f1dcf2..0cc6d9b 100644
--- a/tmp/6aaa70f6-5795-4a09-a4b7-095c9572ab21_buggy.java
+++ b/tmp/50553120-a8f3-4cd1-b55a-90ea6d49b205_fixed.java
@@ -1,41 +1,89 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    boolean convergenceReached = false;
+    while (!convergenceReached && (getIterations() < getMaxIterations())) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
-                }
-
-                return;
-
+                simplex = replaceWorstPoint(reflected, comparator);
+            } else {
+                // accept the expanded simplex
+                simplex = replaceWorstPoint(expanded, comparator);
             }
 
+        } else {
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = replaceWorstPoint(contracted, comparator);
+            } else {
+                // perform a shrink step
+                simplex = shrinkSimplex(original, comparator);
+            }
+        }
 
         // check convergence
-                return;
+        convergenceReached = checkConvergence();
     }
 
+    if (!convergenceReached) {
+        throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
+    }
+}
+
+// Helper methods (to be added to the class if not already present)
+
+private boolean checkConvergence() {
+    // Implement convergence checking logic here
+    // For example:
+    double maxRelativeError = 0;
+    for (int i = 1; i < simplex.length; ++i) {
+        double error = Math.abs(simplex[i].getValue() - simplex[0].getValue()) /
+                       Math.max(Math.abs(simplex[i].getValue()), Math.abs(simplex[0].getValue()));
+        maxRelativeError = Math.max(maxRelativeError, error);
+    }
+    return maxRelativeError <= getRelativeThreshold();
+}
+
+private RealPointValuePair[] replaceWorstPoint(RealPointValuePair p, Comparator<RealPointValuePair> comparator) {
+    RealPointValuePair[] newSimplex = simplex.clone();
+    int worstIndex = findWorstPointIndex(comparator);
+    newSimplex[worstIndex] = p;
+    return newSimplex;
+}
+
+private RealPointValuePair[] shrinkSimplex(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) 
+    throws FunctionEvaluationException {
+    RealPointValuePair[] newSimplex = new RealPointValuePair[simplex.length];
+    newSimplex[0] = simplex[0]; // Keep the best point
+    for (int i = 1; i < simplex.length; ++i) {
+        newSimplex[i] = evaluateNewSimplex(original, 0.5, comparator, i);
+    }
+    return newSimplex;
 }
 
+private int findWorstPointIndex(Comparator<RealPointValuePair> comparator) {
+    int worstIndex = 1;
+    for (int i = 2; i < simplex.length; ++i) {
+        if (comparator.compare(simplex[i], simplex[worstIndex]) > 0) {
+            worstIndex = i;
+        }
+    }
+    return worstIndex;
 }
\ No newline at end of file
