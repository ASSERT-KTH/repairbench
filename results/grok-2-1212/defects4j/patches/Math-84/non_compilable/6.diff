diff --git a/tmp/8869f077-2ba8-4552-9138-74c364081d17_buggy.java b/tmp/aaaa34fe-5e2d-4dfc-b537-1f5b753e57fb_fixed.java
index 5f1dcf2..a851d9b 100644
--- a/tmp/8869f077-2ba8-4552-9138-74c364081d17_buggy.java
+++ b/tmp/aaaa34fe-5e2d-4dfc-b537-1f5b753e57fb_fixed.java
@@ -1,41 +1,55 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
-
         incrementIterationsCounter();
 
-            // save the original vertex
+        // Save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
-            // perform a reflection step
+        // Perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+            // Compute the expanded simplex
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
-                    simplex = reflectedSimplex;
-                }
-
+            if (comparator.compare(expanded, reflected) < 0) {
+                // Accept the expanded simplex
+                simplex = evaluateNewSimplex(original, khi, comparator).getPointRef();
                 return;
-
+            } else {
+                // Accept the reflected simplex
+                simplex = evaluateNewSimplex(original, 1.0, comparator).getPointRef();
+                return;
+            }
         }
 
-            // compute the contracted simplex
+        // Compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
+            // Accept the contracted simplex
+            simplex = evaluateNewSimplex(original, gamma, comparator).getPointRef();
             return;
         }
 
+        // Perform a shrink step
+        final RealPointValuePair[] shrunk = new RealPointValuePair[simplex.length];
+        shrunk[0] = original[0];
+        for (int i = 1; i < simplex.length; ++i) {
+            shrunk[i] = evaluateNewSimplex(new RealPointValuePair[] {original[0], original[i]}, 0.5, comparator);
+        }
+        simplex = shrunk;
+
+        // Check for convergence
+        if (hasConverged()) {
+            return;
         }
 
+        // Check for maximum iterations
+        if (getIterations() >= getMaxIterations()) {
+            throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
+        }
+    }
 }
\ No newline at end of file
