diff --git a/tmp/61fa5a48-e690-47f3-9437-c314becf26f9_buggy.java b/tmp/5c4e07ca-9b1a-4fd5-974f-d7b2a0956a55_fixed.java
index 5f1dcf2..039e964 100644
--- a/tmp/61fa5a48-e690-47f3-9437-c314becf26f9_buggy.java
+++ b/tmp/5c4e07ca-9b1a-4fd5-974f-d7b2a0956a55_fixed.java
@@ -1,41 +1,87 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
-
         incrementIterationsCounter();
 
         // save the original vertex
-            final RealPointValuePair[] original = simplex;
+        final RealPointValuePair[] original = simplex.clone();
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+            if (comparator.compare(expanded, reflected) < 0) {
+                // accept the expanded simplex
+                simplex = buildSimplex(expanded, original);
+                return;
+            } else {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = buildSimplex(reflected, original);
+                return;
+            }
         }
 
+        // check if reflection is better than the second worst point
+        if (comparator.compare(reflected, original[original.length - 2]) < 0) {
+            // accept the reflected simplex
+            simplex = buildSimplex(reflected, original);
             return;
-
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            simplex = buildSimplex(contracted, original);
+            return;
+        }
+
+        // perform a shrink step
+        simplex = shrinkSimplex(original, comparator);
 
         // check convergence
+        if (isConverged()) {
             return;
         }
 
+        // Check if maximum iterations have been reached
+        if (getIterations() >= getMaxIterations()) {
+            throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
+        }
+    }
+}
+
+// Helper method to build a new simplex
+private RealPointValuePair[] buildSimplex(RealPointValuePair newPoint, RealPointValuePair[] original) {
+    RealPointValuePair[] newSimplex = new RealPointValuePair[original.length];
+    newSimplex[0] = newPoint;
+    System.arraycopy(original, 1, newSimplex, 1, original.length - 1);
+    return newSimplex;
 }
 
+// Helper method to perform simplex shrinking
+private RealPointValuePair[] shrinkSimplex(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator)
+    throws FunctionEvaluationException {
+    RealPointValuePair[] newSimplex = new RealPointValuePair[original.length];
+    newSimplex[0] = original[0];
+    for (int i = 1; i < original.length; ++i) {
+        newSimplex[i] = evaluateNewSimplex(original, sigma * (i + 1), comparator);
+    }
+    return newSimplex;
+}
+
+// Method to check convergence
+private boolean isConverged() {
+    double maxRelativeError = 0;
+    for (int i = 1; i < simplex.length; ++i) {
+        double error = Math.abs(simplex[0].getValue() - simplex[i].getValue()) / 
+                       Math.max(Math.abs(simplex[0].getValue()), Math.abs(simplex[i].getValue()));
+        maxRelativeError = Math.max(maxRelativeError, error);
+    }
+    return maxRelativeError < getRelativeThreshold();
 }
\ No newline at end of file
