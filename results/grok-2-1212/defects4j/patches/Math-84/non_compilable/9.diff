diff --git a/tmp/df5dd858-f5bd-4cdf-bbaf-460d02211caa_buggy.java b/tmp/a1b86b88-f362-4750-bd5a-cb92647f6dca_fixed.java
index 5f1dcf2..2699a2e 100644
--- a/tmp/df5dd858-f5bd-4cdf-bbaf-460d02211caa_buggy.java
+++ b/tmp/a1b86b88-f362-4750-bd5a-cb92647f6dca_fixed.java
@@ -1,41 +1,48 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
     incrementIterationsCounter();
 
     // save the original vertex
     final RealPointValuePair[] original = simplex;
     final RealPointValuePair best = original[0];
 
     // perform a reflection step
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
     if (comparator.compare(reflected, best) < 0) {
-
         // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
         if (comparator.compare(reflected, expanded) <= 0) {
             // accept the reflected simplex
-                    simplex = reflectedSimplex;
+            simplex = evaluateNewFullSimplex(original, 1.0, comparator);
+        } else if (comparator.compare(expanded, best) < 0) {
+            // accept the expanded simplex
+            simplex = evaluateNewFullSimplex(original, khi, comparator);
+        } else {
+            // accept the reflected simplex
+            simplex = evaluateNewFullSimplex(original, 1.0, comparator);
         }
-
-                return;
-
-            }
-
+    } else {
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            simplex = evaluateNewFullSimplex(original, gamma, comparator);
+        } else {
+            // perform a shrink step
+            simplex = evaluateNewFullSimplex(original, 0.5, comparator);
+        }
+    }
 
-            // check convergence
+    // Check for convergence
+    if (isConverged()) {
         return;
     }
 
+    // Check for maximum iterations
+    if (getIterations() >= getMaxIterations()) {
+        throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
     }
-
 }
\ No newline at end of file
