diff --git a/tmp/4137b6c6-8bbb-4b44-a214-a32205da1939_buggy.java b/tmp/24337f6c-b654-4241-9e03-b06eb61ce205_fixed.java
index 5f96616..026efc9 100644
--- a/tmp/4137b6c6-8bbb-4b44-a214-a32205da1939_buggy.java
+++ b/tmp/24337f6c-b654-4241-9e03-b06eb61ce205_fixed.java
@@ -1,20 +1,25 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+    // Handle the case where the constraint object is a union type or a record type.
+    if (constraint.isUnionType()) {
+        for (JSType alt : constraint.toMaybeUnionType().getAlternates()) {
+            if (alt.isObjectType()) {
+                matchObjectTypeConstraint(alt.toObjectType());
+            }
+        }
+    } else if (constraint.isObjectType()) {
+        matchObjectTypeConstraint(constraint.toObjectType());
+    }
+}
+
+private void matchObjectTypeConstraint(ObjectType objectType) {
+    for (String propName : objectType.getOwnPropertyNames()) {
+        JSType propType = objectType.getPropertyType(propName);
+        defineProperty(propName, propType, true);
     }
 }
\ No newline at end of file
