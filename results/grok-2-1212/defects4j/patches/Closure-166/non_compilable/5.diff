diff --git a/tmp/fd5e4b0f-a29e-4008-9067-bac73fc25fd2_buggy.java b/tmp/0530ddd8-36e9-434d-9013-98e113e49897_fixed.java
index 5f96616..ab3ea96 100644
--- a/tmp/fd5e4b0f-a29e-4008-9067-bac73fc25fd2_buggy.java
+++ b/tmp/0530ddd8-36e9-434d-9013-98e113e49897_fixed.java
@@ -1,20 +1,30 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+    // Handle the case where the constraint object is a record type or a union type.
+    if (constraint.isUnionType()) {
+        for (JSType alt : constraint.toMaybeUnionType().getAlternates()) {
+            matchConstraint(alt);
+        }
+    } else if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
+    } else if (constraint.isObjectType()) {
+        // Handle object types that are not necessarily record types
+        JSType objectType = constraint.toObjectType();
+        if (objectType.isRecordType()) {
+            matchRecordTypeConstraint(objectType);
+        } else {
+            // For non-record object types, we should still try to match their properties
+            for (String prop : objectType.getOwnPropertyNames()) {
+                JSType propType = objectType.getPropertyType(prop);
+                if (propType != null) {
+                    this.setPropertyType(prop, propType);
+                }
+            }
+        }
     }
 }
\ No newline at end of file
