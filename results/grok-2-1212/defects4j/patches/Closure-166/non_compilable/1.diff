diff --git a/tmp/724cb7dc-aa17-4496-8f71-9df01f581d45_buggy.java b/tmp/d0455383-98a8-4e4f-9ce9-0507ec9def7c_fixed.java
index 5f96616..a4fb019 100644
--- a/tmp/724cb7dc-aa17-4496-8f71-9df01f581d45_buggy.java
+++ b/tmp/d0455383-98a8-4e4f-9ce9-0507ec9def7c_fixed.java
@@ -1,20 +1,25 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+    // Handle the case where the constraint object is a record type or a union type.
+    if (constraint.isUnionType()) {
+        for (JSType alt : constraint.toMaybeUnionType().getAlternates()) {
+            matchConstraint(alt);
+        }
+    } else if (constraint.isObject()) {
+        JSType objectType = constraint.toMaybeObjectType();
+        if (objectType.isRecordType()) {
+            matchRecordTypeConstraint(objectType.toObjectType());
+        } else {
+            // If it's an object but not a record type, we still want to match its properties
+            for (String propertyName : objectType.getPropertyNames()) {
+                JSType propertyType = objectType.getPropertyType(propertyName);
+                setPropertyType(propertyName, propertyType);
+            }
+        }
     }
 }
\ No newline at end of file
