diff --git a/tmp/7ea8b7a7-d141-48ae-a0cb-7d6f1f03648b_buggy.java b/tmp/098fe580-5a8d-443a-86a1-35269a353c3f_fixed.java
index 5f96616..f407418 100644
--- a/tmp/7ea8b7a7-d141-48ae-a0cb-7d6f1f03648b_buggy.java
+++ b/tmp/098fe580-5a8d-443a-86a1-35269a353c3f_fixed.java
@@ -1,20 +1,23 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+    // Handle the case where the constraint object is a record type or a union of record types.
     if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
+    } else if (constraint.isUnionType()) {
+        for (JSType alt : constraint.toMaybeUnionType().getAlternates()) {
+            if (alt.isRecordType()) {
+                matchRecordTypeConstraint(alt.toObjectType());
+            }
+        }
+    } else if (constraint.isObjectType()) {
+        JSType objectType = constraint.toObjectType();
+        if (objectType.isRecordType()) {
+            matchRecordTypeConstraint(objectType);
+        }
     }
 }
\ No newline at end of file
