diff --git a/tmp/ea01619d-93f8-424a-a26c-c9c4b48ddee8_buggy.java b/tmp/367712f4-853a-49e6-8180-6ca69a40d917_fixed.java
index 5f96616..af46ea2 100644
--- a/tmp/ea01619d-93f8-424a-a26c-c9c4b48ddee8_buggy.java
+++ b/tmp/367712f4-853a-49e6-8180-6ca69a40d917_fixed.java
@@ -1,20 +1,18 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+    // Handle the case where the constraint object is a record type or a union type containing a record type.
+    if (constraint.isUnionType()) {
+        for (JSType alt : constraint.toMaybeUnionType().getAlternates()) {
+            if (alt.isRecordType()) {
+                matchRecordTypeConstraint(alt.toObjectType());
+            }
+        }
+    } else if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
     }
 }
\ No newline at end of file
