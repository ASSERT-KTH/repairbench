diff --git a/tmp/9db562f8-cef3-4147-a2e9-a4a76e11567e_buggy.java b/tmp/78912c76-04cf-4b5e-9d2a-bf17d70e5eeb_fixed.java
index 5f96616..910a1ca 100644
--- a/tmp/9db562f8-cef3-4147-a2e9-a4a76e11567e_buggy.java
+++ b/tmp/78912c76-04cf-4b5e-9d2a-bf17d70e5eeb_fixed.java
@@ -1,20 +1,18 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+    // Handle the case where the constraint object is a record type or a union type that includes a record type.
+    if (constraint.isUnionType()) {
+        for (JSType alt : constraint.toMaybeUnionType().getAlternates()) {
+            if (alt.isRecordType()) {
+                matchRecordTypeConstraint(alt.toObjectType());
+            }
+        }
+    } else if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
     }
 }
\ No newline at end of file
