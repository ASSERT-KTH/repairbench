diff --git a/tmp/16be6381-6751-4036-954c-d44266768e32_buggy.java b/tmp/fcdd2444-0aed-46b8-bd6d-e4af397f8c32_fixed.java
index e4d90e7..48c047d 100644
--- a/tmp/16be6381-6751-4036-954c-d44266768e32_buggy.java
+++ b/tmp/fcdd2444-0aed-46b8-bd6d-e4af397f8c32_fixed.java
@@ -1,45 +1,50 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
         return getReferenceName();
     } else if (prettyPrint) {
         // Don't pretty print recursively.
         prettyPrint = false;
 
         // Use a tree set so that the properties are sorted.
         Set<String> propertyNames = Sets.newTreeSet();
         for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+             current != null && !current.isNativeObjectType();
              current = current.getImplicitPrototype()) {
             propertyNames.addAll(current.getOwnPropertyNames());
         }
 
         StringBuilder sb = new StringBuilder();
         sb.append("{");
 
         int i = 0;
         for (String property : propertyNames) {
             if (i > 0) {
                 sb.append(", ");
             }
 
             sb.append(property);
             sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+
+            // For recursive types, use {...} in toString, but show actual type in toAnnotationString
+            if (getPropertyType(property) == this && !forAnnotations) {
+                sb.append("{...}");
+            } else {
+                sb.append(getPropertyType(property).toStringHelper(forAnnotations));
+            }
 
             ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+            if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
                 sb.append(", ...");
                 break;
             }
         }
 
         sb.append("}");
 
         prettyPrint = true;
         return sb.toString();
     } else {
         return "{...}";
     }
 }
\ No newline at end of file
