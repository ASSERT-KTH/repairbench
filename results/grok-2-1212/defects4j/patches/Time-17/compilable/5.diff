diff --git a/tmp/e6123fa9-f90f-48fe-b7cb-4a40ced25b58_buggy.java b/tmp/93b57726-4757-48bc-87de-0e5d2752416e_fixed.java
index 03b03d7..6b4d006 100644
--- a/tmp/e6123fa9-f90f-48fe-b7cb-4a40ced25b58_buggy.java
+++ b/tmp/93b57726-4757-48bc-87de-0e5d2752416e_fixed.java
@@ -1,25 +1,28 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
-        // evaluate 3 hours before and after to work out if anything is happening
+    // Evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
+    
     if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+        return instant;  // Not an overlap (less than is a gap, equal is normal case)
     }
     
-        // work out range of instants that have duplicate local times
+    // Check if we're in an overlap situation
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+    long earlierUTC = convertLocalToUTC(local, false, instantBefore);
+    long laterUTC = convertLocalToUTC(local, false, instantAfter);
     
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    if (earlierUTC == laterUTC) {
+        return instant;  // Not actually an overlap, just a normal transition
+    }
+    
+    // We are in an overlap, choose the appropriate offset
+    return earlierOrLater ? laterUTC : earlierUTC;
 }
\ No newline at end of file
