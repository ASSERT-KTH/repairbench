diff --git a/tmp/c7481b83-03b8-48c3-ab3d-6dee19da1faa_buggy.java b/tmp/ca5d0e80-8471-4847-8484-a55664d6cb2f_fixed.java
index 658036e..094677f 100644
--- a/tmp/c7481b83-03b8-48c3-ab3d-6dee19da1faa_buggy.java
+++ b/tmp/ca5d0e80-8471-4847-8484-a55664d6cb2f_fixed.java
@@ -1,29 +1,45 @@
-    // off-lined to keep main method lean and mean...
 @SuppressWarnings("resource")
 protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
         TokenBuffer tb) throws IOException
 {
     // As per [JACKSON-614], may have default implementation to use
     JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
     if (deser != null) {
         if (tb != null) {
             tb.writeEndObject();
             p = tb.asParser(p);
             // must move to point to the first token:
             p.nextToken();
         }
         return deser.deserialize(p, ctxt);
     }
     // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
     Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
     if (result != null) {
         return result;
     }
+    // Handle empty string as null object if the feature is enabled
+    if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT) 
+        && p.getCurrentToken() == JsonToken.VALUE_STRING 
+        && p.getText().isEmpty()) {
+        return null;
+    }
     // or, something for which "as-property" won't work, changed into "wrapper-array" type:
     if (p.getCurrentToken() == JsonToken.START_ARRAY) {
         return super.deserializeTypedFromAny(p, ctxt);
     }
+    // Check if we're at the start of an object
+    if (p.getCurrentToken() == JsonToken.START_OBJECT) {
+        p.nextToken(); // Move to the first field
+        if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
+            String fieldName = p.getCurrentName();
+            if (fieldName.equals(_typePropertyName)) {
+                p.nextToken(); // Move to the type value
+                return super.deserializeTypedFromObject(p, ctxt);
+            }
+        }
+    }
     ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
             "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
     return null;
 }
\ No newline at end of file
