diff --git a/tmp/fd2b60de-1779-4276-96b3-579ad047caef_buggy.java b/tmp/010d8450-a127-45f2-8397-7ef34a3c730d_fixed.java
index e8705ac..935b7a3 100644
--- a/tmp/fd2b60de-1779-4276-96b3-579ad047caef_buggy.java
+++ b/tmp/010d8450-a127-45f2-8397-7ef34a3c730d_fixed.java
@@ -1,24 +1,31 @@
 /**
  * There are two types of calls we are interested in calls without explicit
  * "this" values (what we are call "free" calls) and direct call to eval.
  */
 private void annotateCalls(Node n) {
     Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
+    // Keep track of the "this" context of a call.  A call without an
     // explicit "this" is a free call.
     Node first = n.getFirstChild();
 
-      // ignore cast nodes.
+    // Skip cast nodes.
+    if (first.isCast()) {
+        first = first.getFirstChild();
+    }
 
-      if (!NodeUtil.isGet(first)) {
+    // Check if the call is a method call or a property access.
+    if (NodeUtil.isGet(first) || NodeUtil.isGetProp(first)) {
+        // If it's a method call or property access, it's not a free call.
+        n.putBooleanProp(Node.FREE_CALL, false);
+    } else {
+        // Otherwise, it's a free call.
         n.putBooleanProp(Node.FREE_CALL, true);
     }
 
     // Keep track of the context in which eval is called. It is important
     // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
+    if (first.isName() && "eval".equals(first.getString())) {
         first.putBooleanProp(Node.DIRECT_EVAL, true);
     }
 }
\ No newline at end of file
