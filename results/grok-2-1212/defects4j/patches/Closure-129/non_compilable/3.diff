diff --git a/tmp/bf4f80f6-8399-4899-9d32-18134b97d1f9_buggy.java b/tmp/4b067058-dbfe-43e5-a397-67ce39ecfc27_fixed.java
index e8705ac..6c6a80a 100644
--- a/tmp/bf4f80f6-8399-4899-9d32-18134b97d1f9_buggy.java
+++ b/tmp/4b067058-dbfe-43e5-a397-67ce39ecfc27_fixed.java
@@ -1,24 +1,38 @@
 /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
+ * There are two types of calls we are interested in: calls without explicit
+ * "this" values (what we call "free" calls) and direct calls to eval.
  */
 private void annotateCalls(Node n) {
   Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
+  // Keep track of the "this" context of a call. A call without an
   // explicit "this" is a free call.
   Node first = n.getFirstChild();
 
   // ignore cast nodes.
 
   if (!NodeUtil.isGet(first)) {
+    // If the first child is not a GET, and it's not a function name either,
+    // then it's a free call.
+    if (!first.isName() || !first.getString().equals("eval")) {
       n.putBooleanProp(Node.FREE_CALL, true);
     }
+  } else {
+    // If it's a GET, we need to check if it's a property access on an object
+    Node object = first.getFirstChild();
+    if (object != null && object.isNew()) {
+      // If the object is a NEW expression, it's not a free call
+      n.putBooleanProp(Node.FREE_CALL, false);
+    } else if (!NodeUtil.isGetProp(first)) {
+      // If it's not a property access, it's a free call
+      n.putBooleanProp(Node.FREE_CALL, true);
+    }
+  }
 
   // Keep track of the context in which eval is called. It is important
   // to distinguish between "(0, eval)()" and "eval()".
   if (first.isName() &&
       "eval".equals(first.getString())) {
     first.putBooleanProp(Node.DIRECT_EVAL, true);
   }
 }
\ No newline at end of file
