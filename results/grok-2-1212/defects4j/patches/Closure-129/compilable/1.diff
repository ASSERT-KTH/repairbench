diff --git a/tmp/182a27ff-2b09-4a37-bcf5-054f403b7ec4_buggy.java b/tmp/8e0ffe41-781e-4cde-932b-2c758216ae1d_fixed.java
index e8705ac..a853287 100644
--- a/tmp/182a27ff-2b09-4a37-bcf5-054f403b7ec4_buggy.java
+++ b/tmp/8e0ffe41-781e-4cde-932b-2c758216ae1d_fixed.java
@@ -1,24 +1,27 @@
 /**
  * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
+ * "this" values (what we call "free" calls) and direct call to eval.
  */
 private void annotateCalls(Node n) {
   Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
+  // Keep track of the "this" context of a call. A call without an
   // explicit "this" is a free call.
   Node first = n.getFirstChild();
 
-      // ignore cast nodes.
-
-      if (!NodeUtil.isGet(first)) {
+  // Handle property access calls
+  if (first.isGetProp() || first.isGetElem()) {
+    // If it's a property access, it's not a free call
+    n.putBooleanProp(Node.FREE_CALL, false);
+  } else if (!NodeUtil.isGet(first)) {
+    // For other cases, mark as free call if it's not a get
     n.putBooleanProp(Node.FREE_CALL, true);
   }
 
   // Keep track of the context in which eval is called. It is important
   // to distinguish between "(0, eval)()" and "eval()".
   if (first.isName() &&
       "eval".equals(first.getString())) {
     first.putBooleanProp(Node.DIRECT_EVAL, true);
   }
 }
\ No newline at end of file
