diff --git a/tmp/f72bfd16-69d0-420a-b71c-4ca1243fc40a_buggy.java b/tmp/1d2b037f-2ee6-422d-b9e4-9dc68a8cd49a_fixed.java
index e8705ac..d5473ca 100644
--- a/tmp/f72bfd16-69d0-420a-b71c-4ca1243fc40a_buggy.java
+++ b/tmp/1d2b037f-2ee6-422d-b9e4-9dc68a8cd49a_fixed.java
@@ -1,24 +1,32 @@
 /**
  * There are two types of calls we are interested in calls without explicit
  * "this" values (what we are call "free" calls) and direct call to eval.
  */
 private void annotateCalls(Node n) {
   Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
+  // Keep track of the "this" context of a call.  A call without an
   // explicit "this" is a free call.
   Node first = n.getFirstChild();
 
-      // ignore cast nodes.
+  // Handle property access and method calls
+  if (NodeUtil.isGet(first)) {
+    Node parent = first.getParent();
+    if (parent.isCall() && parent.getFirstChild() == first) {
+      n.putBooleanProp(Node.FREE_CALL, false);
+      return;
+    }
+  }
 
-      if (!NodeUtil.isGet(first)) {
+  // Mark as free call if it's not a property access or method call
+  if (!NodeUtil.isGet(first) && !first.isThis()) {
     n.putBooleanProp(Node.FREE_CALL, true);
   }
 
   // Keep track of the context in which eval is called. It is important
   // to distinguish between "(0, eval)()" and "eval()".
   if (first.isName() &&
       "eval".equals(first.getString())) {
     first.putBooleanProp(Node.DIRECT_EVAL, true);
   }
 }
\ No newline at end of file
