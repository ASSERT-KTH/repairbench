diff --git a/tmp/5d128dda-be61-4ad2-989d-ff3e6d61633d_buggy.java b/tmp/a45e69e4-fb85-4ab9-82db-a63417d8108b_fixed.java
index 71189c3..532e7cd 100644
--- a/tmp/5d128dda-be61-4ad2-989d-ff3e6d61633d_buggy.java
+++ b/tmp/a45e69e4-fb85-4ab9-82db-a63417d8108b_fixed.java
@@ -1,46 +1,81 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
         // needs validation?
         boolean validate = option.isRequired() || option instanceof Group;
         if (validate) {
+            Object value = commandLine.getValue(option);
+            if (value != null) {
+                if (value instanceof String[]) {
+                    option.validate(commandLine, (String[]) value);
+                } else if (value instanceof String) {
+                    option.validate(commandLine, (String) value);
+                } else {
+                    // If the value is not a String or String[], convert it to a string
+                    option.validate(commandLine, value.toString());
+                }
+            } else {
                 option.validate(commandLine);
             }
+        }
 
         // if the child option is present then validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
-
                 break;
             }
 
+            Object value = commandLine.getValue(option);
+            if (value != null) {
+                if (value instanceof String[]) {
+                    option.validate(commandLine, (String[]) value);
+                } else if (value instanceof String) {
+                    option.validate(commandLine, (String) value);
+                } else {
+                    // If the value is not a String or String[], convert it to a string
+                    option.validate(commandLine, value.toString());
+                }
+            } else {
                 option.validate(commandLine);
             }
         }
+    }
 
     // too many options
     if (unexpected != null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
     // too few option
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
+        Object value = commandLine.getValue(option);
+        if (value != null) {
+            if (value instanceof String[]) {
+                option.validate(commandLine, (String[]) value);
+            } else if (value instanceof String) {
+                option.validate(commandLine, (String) value);
+            } else {
+                // If the value is not a String or String[], convert it to a string
+                option.validate(commandLine, value.toString());
+            }
+        } else {
             option.validate(commandLine);
         }
     }
+}
\ No newline at end of file
