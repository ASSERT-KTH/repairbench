diff --git a/tmp/546a6f83-2a93-4f16-be3e-138cdd3de218_buggy.java b/tmp/2a714bc9-1df8-44ac-891f-a988743aa95a_fixed.java
index 71189c3..bb42b41 100644
--- a/tmp/546a6f83-2a93-4f16-be3e-138cdd3de218_buggy.java
+++ b/tmp/2a714bc9-1df8-44ac-891f-a988743aa95a_fixed.java
@@ -1,46 +1,65 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
         // needs validation?
         boolean validate = option.isRequired() || option instanceof Group;
         if (validate) {
-                option.validate(commandLine);
+            // Validate the option and get the validated value
+            Object validatedValue = option.validate(commandLine);
+
+            // If the option has an argument, set its value as a String
+            if (option.hasArgument()) {
+                if (validatedValue != null) {
+                    commandLine.setValue(option, validatedValue.toString());
+                } else if (commandLine.hasOption(option)) {
+                    // If no validated value but the option is present, use the existing value
+                    commandLine.setValue(option, commandLine.getValue(option).toString());
+                }
+            }
         }
 
         // if the child option is present then validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
-
                 break;
             }
-
-                option.validate(commandLine);
         }
     }
 
     // too many options
     if (unexpected != null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
-        // too few option
+    // too few options
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
-            option.validate(commandLine);
+        // Validate the anonymous option and get the validated value
+        Object validatedValue = option.validate(commandLine);
+
+        // If the anonymous option has an argument, set its value as a String
+        if (option.hasArgument()) {
+            if (validatedValue != null) {
+                commandLine.setValue(option, validatedValue.toString());
+            } else if (commandLine.hasOption(option)) {
+                // If no validated value but the option is present, use the existing value
+                commandLine.setValue(option, commandLine.getValue(option).toString());
+            }
+        }
     }
 }
\ No newline at end of file
