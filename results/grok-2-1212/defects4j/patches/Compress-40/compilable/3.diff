diff --git a/tmp/73b9a55a-022f-4201-9012-d13cecab2256_buggy.java b/tmp/f65f3301-b45b-4345-8ce8-3f1b007afdc1_fixed.java
index 7116384..bcb6522 100644
--- a/tmp/73b9a55a-022f-4201-9012-d13cecab2256_buggy.java
+++ b/tmp/f65f3301-b45b-4345-8ce8-3f1b007afdc1_fixed.java
@@ -1,39 +1,52 @@
 /**
  * Returns at most 63 bits read from the underlying stream.
  *
  * @param count the number of bits to read, must be a positive
  * number not bigger than 63.
  * @return the bits concatenated as a long using the stream's byte order.
  *         -1 if the end of the underlying stream has been reached before reading
  *         the requested number of bits
  * @throws IOException on error
  */
 public long readBits(final int count) throws IOException {
     if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
         throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
     }
     while (bitsCachedSize < count) {
         final long nextByte = in.read();
         if (nextByte < 0) {
+            if (bitsCachedSize == 0) {
                 return nextByte;
             }
+            break;
+        }
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+            if (bitsCachedSize + 8 > 63) {
+                bitsCached |= (nextByte & ((1L << (63 - bitsCachedSize)) - 1)) << bitsCachedSize;
+                bitsCachedSize = 63;
+            } else {
                 bitsCached |= (nextByte << bitsCachedSize);
-            } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
+                bitsCachedSize += 8;
             }
+        } else {
+            if (bitsCachedSize + 8 > 63) {
+                bitsCached = (bitsCached << (63 - bitsCachedSize)) | (nextByte & ((1L << (63 - bitsCachedSize)) - 1));
+                bitsCachedSize = 63;
+            } else {
+                bitsCached = (bitsCached << 8) | nextByte;
                 bitsCachedSize += 8;
             }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
+        }
+    }
 
     final long bitsOut;
     if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
         bitsOut = (bitsCached & MASKS[count]);
         bitsCached >>>= count;
     } else {
         bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+        bitsCached <<= count;
     }
     bitsCachedSize -= count;
     return bitsOut;
 }
\ No newline at end of file
