diff --git a/tmp/ccc580a0-e673-4b3f-80aa-5c754e83fa98_buggy.java b/tmp/3d655f09-3207-443f-bf8a-837e27d0fd54_fixed.java
index 7116384..104a8c5 100644
--- a/tmp/ccc580a0-e673-4b3f-80aa-5c754e83fa98_buggy.java
+++ b/tmp/3d655f09-3207-443f-bf8a-837e27d0fd54_fixed.java
@@ -1,39 +1,41 @@
-    /**
-     * Returns at most 63 bits read from the underlying stream.
-     *
-     * @param count the number of bits to read, must be a positive
-     * number not bigger than 63.
-     * @return the bits concatenated as a long using the stream's byte order.
-     *         -1 if the end of the underlying stream has been reached before reading
-     *         the requested number of bits
-     * @throws IOException on error
-     */
 public long readBits(final int count) throws IOException {
     if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
         throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
     }
-        while (bitsCachedSize < count) {
-            final long nextByte = in.read();
+    long bitsOut = 0;
+    int bitsRead = 0;
+
+    while (bitsRead < count) {
+        if (bitsCachedSize == 0) {
+            final int nextByte = in.read();
             if (nextByte < 0) {
-                return nextByte;
+                return -1; // End of stream
             }
+            bitsCached = nextByte;
+            bitsCachedSize = 8;
+        }
+
+        int bitsToRead = Math.min(count - bitsRead, bitsCachedSize);
+        long bits;
+
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
+            bits = bitsCached & MASKS[bitsToRead];
+            bitsCached >>>= bitsToRead;
         } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
-            }
-            bitsCachedSize += 8;
+            bits = (bitsCached >> (bitsCachedSize - bitsToRead)) & MASKS[bitsToRead];
+            bitsCached <<= bitsToRead;
+            bitsCached &= MASKS[bitsCachedSize - bitsToRead];
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
 
-        final long bitsOut;
+        bitsCachedSize -= bitsToRead;
+        bitsRead += bitsToRead;
+
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
+            bitsOut |= (bits << bitsRead - bitsToRead);
         } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+            bitsOut = (bitsOut << bitsToRead) | bits;
+        }
     }
-            bitsCachedSize -= count;
+
     return bitsOut;
 }
\ No newline at end of file
