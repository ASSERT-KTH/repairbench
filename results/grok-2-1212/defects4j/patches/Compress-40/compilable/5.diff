diff --git a/tmp/e12ddc77-8047-4176-8f6f-b9f28ac53232_buggy.java b/tmp/5565574e-d883-409e-8150-df2fbc03bba9_fixed.java
index 7116384..04aba3b 100644
--- a/tmp/e12ddc77-8047-4176-8f6f-b9f28ac53232_buggy.java
+++ b/tmp/5565574e-d883-409e-8150-df2fbc03bba9_fixed.java
@@ -1,39 +1,43 @@
 /**
  * Returns at most 63 bits read from the underlying stream.
  *
  * @param count the number of bits to read, must be a positive
  * number not bigger than 63.
  * @return the bits concatenated as a long using the stream's byte order.
  *         -1 if the end of the underlying stream has been reached before reading
  *         the requested number of bits
  * @throws IOException on error
  */
 public long readBits(final int count) throws IOException {
-        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
-            throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
+    if (count < 0 || count > 63) {
+        throw new IllegalArgumentException("count must not be negative or greater than 63");
     }
-        while (bitsCachedSize < count) {
+    long result = 0;
+    int remaining = count;
+    while (remaining > 0) {
+        if (bitsCachedSize == 0) {
             final long nextByte = in.read();
             if (nextByte < 0) {
-                return nextByte;
+                if (result == 0) {
+                    return -1;
                 }
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
-            } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
+                break;
             }
-            bitsCachedSize += 8;
+            bitsCached = nextByte;
+            bitsCachedSize = 8;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
-        final long bitsOut;
+        final int bitsToTake = Math.min(remaining, bitsCachedSize);
+        long bits;
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
+            bits = bitsCached & MASKS[bitsToTake];
+            bitsCached >>>= bitsToTake;
         } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+            bits = (bitsCached >>> (bitsCachedSize - bitsToTake)) & MASKS[bitsToTake];
+            bitsCached <<= bitsToTake;
+        }
+        result = (result << bitsToTake) | bits;
+        bitsCachedSize -= bitsToTake;
+        remaining -= bitsToTake;
     }
-            bitsCachedSize -= count;
-        return bitsOut;
+    return result;
 }
\ No newline at end of file
