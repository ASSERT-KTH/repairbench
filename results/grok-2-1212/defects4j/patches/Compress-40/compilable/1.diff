diff --git a/tmp/636857d4-aa9c-4fb7-8ffb-b7d131cdbc1f_buggy.java b/tmp/071b826e-de30-481c-946b-65fdd25d9583_fixed.java
index 7116384..ec33292 100644
--- a/tmp/636857d4-aa9c-4fb7-8ffb-b7d131cdbc1f_buggy.java
+++ b/tmp/071b826e-de30-481c-946b-65fdd25d9583_fixed.java
@@ -1,39 +1,60 @@
 /**
  * Returns at most 63 bits read from the underlying stream.
  *
  * @param count the number of bits to read, must be a positive
  * number not bigger than 63.
  * @return the bits concatenated as a long using the stream's byte order.
  *         -1 if the end of the underlying stream has been reached before reading
  *         the requested number of bits
  * @throws IOException on error
  */
 public long readBits(final int count) throws IOException {
     if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
         throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
     }
-        while (bitsCachedSize < count) {
+    
+    long bitsOut = 0;
+    int remaining = count;
+
+    while (remaining > 0) {
+        if (bitsCachedSize < remaining) {
+            if (bitsCachedSize > 0) {
+                // Extract the available bits
+                long extractedBits;
+                if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+                    extractedBits = bitsCached & MASKS[bitsCachedSize];
+                    bitsOut |= extractedBits << (remaining - bitsCachedSize);
+                } else {
+                    extractedBits = bitsCached >>> (64 - bitsCachedSize);
+                    bitsOut = (bitsOut << bitsCachedSize) | extractedBits;
+                }
+                remaining -= bitsCachedSize;
+                bitsCached = 0;
+                bitsCachedSize = 0;
+            }
+
+            // Read more bytes
             final long nextByte = in.read();
             if (nextByte < 0) {
                 return nextByte;
             }
+            bitsCached = nextByte;
+            bitsCachedSize = 8;
+        } else {
+            // Extract the required bits
+            long extractedBits;
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
+                extractedBits = bitsCached & MASKS[remaining];
+                bitsOut |= extractedBits;
+                bitsCached >>>= remaining;
             } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
+                extractedBits = bitsCached >>> (bitsCachedSize - remaining);
+                bitsOut = (bitsOut << remaining) | extractedBits;
+            }
+            bitsCachedSize -= remaining;
+            remaining = 0;
         }
-            bitsCachedSize += 8;
     }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
 
-        final long bitsOut;
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
-            } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
-            }
-            bitsCachedSize -= count;
     return bitsOut;
 }
\ No newline at end of file
