diff --git a/tmp/379548d1-80f5-44aa-9899-45c7f1cca7e4_buggy.java b/tmp/9433598d-85d6-463c-bbfe-781b579898c1_fixed.java
index 7116384..b6c7bbe 100644
--- a/tmp/379548d1-80f5-44aa-9899-45c7f1cca7e4_buggy.java
+++ b/tmp/9433598d-85d6-463c-bbfe-781b579898c1_fixed.java
@@ -1,39 +1,44 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
-        while (bitsCachedSize < count) {
-            final long nextByte = in.read();
+        long bitsOut = 0;
+        int bitsRead = 0;
+        while (bitsRead < count) {
+            if (bitsCachedSize == 0) {
+                final int nextByte = in.read();
                 if (nextByte < 0) {
                     return nextByte;
                 }
+                bitsCached = nextByte & 0xFF;
+                bitsCachedSize = 8;
+            }
+            final int bitsToRead = Math.min(count - bitsRead, bitsCachedSize);
+            long bits;
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
+                bits = bitsCached & MASKS[bitsToRead];
+                bitsCached >>>= bitsToRead;
             } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
-            }
-            bitsCachedSize += 8;
+                bits = (bitsCached >>> (bitsCachedSize - bitsToRead)) & MASKS[bitsToRead];
+                bitsCached <<= bitsToRead;
             }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
-        final long bitsOut;
+            bitsCachedSize -= bitsToRead;
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
+                bitsOut |= (bits << bitsRead);
             } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+                bitsOut = (bitsOut << bitsToRead) | bits;
+            }
+            bitsRead += bitsToRead;
         }
-            bitsCachedSize -= count;
         return bitsOut;
     }
\ No newline at end of file
