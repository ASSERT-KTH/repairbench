diff --git a/tmp/112add57-411b-4cda-bad9-23c75ddf0505_buggy.java b/tmp/9f384f6e-65a1-47e9-a26e-613420a47743_fixed.java
index fa6828a..fdb463d 100644
--- a/tmp/112add57-411b-4cda-bad9-23c75ddf0505_buggy.java
+++ b/tmp/9f384f6e-65a1-47e9-a26e-613420a47743_fixed.java
@@ -1,5 +1,45 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+    List<Field> fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);
+    Map<Field, List<Optional<Object>>> fieldToMockCandidates = new HashMap<>();
+
+    // Collect all potential mock candidates for each field
+    for (Field field : fields) {
+        List<Optional<Object>> candidates = mocks.stream()
+                .filter(mock -> field.getType().isAssignableFrom(mock.getClass()))
+                .sorted((m1, m2) -> {
+                    int d1 = distance(field.getType(), m1.getClass());
+                    int d2 = distance(field.getType(), m2.getClass());
+                    return Integer.compare(d1, d2);
+                })
+                .map(Optional::of)
+                .collect(Collectors.toList());
+
+        fieldToMockCandidates.put(field, candidates);
     }
+
+    // Inject the best matching mock for each field
+    for (Field field : fields) {
+        List<Optional<Object>> candidates = fieldToMockCandidates.get(field);
+        if (!candidates.isEmpty()) {
+            Optional<Object> bestCandidate = candidates.get(0);
+            bestCandidate.ifPresent(mock -> mockCandidateFilter.filterCandidate(Collections.singleton(mock), field, fieldInstance).thenInject());
+        }
+    }
+}
+
+// Helper method to calculate the distance between two classes
+private int distance(Class<?> target, Class<?> candidate) {
+    if (target.equals(candidate)) {
+        return 0;
+    }
+    if (target.isInterface()) {
+        return candidate.getInterfaces().length + 1;
+    }
+    int distance = 0;
+    Class<?> current = candidate;
+    while (current != null && !current.equals(target)) {
+        current = current.getSuperclass();
+        distance++;
+    }
+    return distance;
 }
\ No newline at end of file
