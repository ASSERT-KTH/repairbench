diff --git a/tmp/fc8ba80f-c2a8-4397-8183-c3700b33c1f7_buggy.java b/tmp/470cc74f-e7dc-4bfa-981d-35f6bb576615_fixed.java
index fa6828a..c4630d9 100644
--- a/tmp/fc8ba80f-c2a8-4397-8183-c3700b33c1f7_buggy.java
+++ b/tmp/470cc74f-e7dc-4bfa-981d-35f6bb576615_fixed.java
@@ -1,5 +1,28 @@
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+        List<Field> fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);
+        for(Field field : fields) {
+            List<Object> potentialMocks = new ArrayList<>(mocks);
+            // Sort potential mocks by type compatibility, with exact matches first
+            potentialMocks.sort((m1, m2) -> {
+                int m1Compat = typeCompatibility(field.getType(), m1.getClass());
+                int m2Compat = typeCompatibility(field.getType(), m2.getClass());
+                return Integer.compare(m1Compat, m2Compat);
+            });
+            
+            for (Object potentialMock : potentialMocks) {
+                if (mockCandidateFilter.filterCandidate(Collections.singleton(potentialMock), field, fieldInstance).inject()) {
+                    break; // Injection successful, move to next field
                 }
             }
+        }
+    }
+
+    private int typeCompatibility(Class<?> fieldType, Class<?> mockType) {
+        if (fieldType.equals(mockType)) {
+            return 0; // Exact match
+        }
+        if (fieldType.isAssignableFrom(mockType)) {
+            return 1; // Ancestor match
+        }
+        return Integer.MAX_VALUE; // No match
+    }
\ No newline at end of file
