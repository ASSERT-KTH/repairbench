diff --git a/tmp/f97a73bb-e0fd-4f4f-ba42-e674b56d04bf_buggy.java b/tmp/cf52a0dd-60a3-490f-a914-e0d9d9d3385b_fixed.java
index fa6828a..6d4cf14 100644
--- a/tmp/f97a73bb-e0fd-4f4f-ba42-e674b56d04bf_buggy.java
+++ b/tmp/cf52a0dd-60a3-490f-a914-e0d9d9d3385b_fixed.java
@@ -1,5 +1,39 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+    List<Field> fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);
+    for (Field field : fields) {
+        List<Object> matchingMocks = new ArrayList<>();
+        for (Object mock : mocks) {
+            if (field.getType().isAssignableFrom(mock.getClass())) {
+                matchingMocks.add(mock);
             }
         }
+        
+        if (!matchingMocks.isEmpty()) {
+            // Sort matching mocks by type specificity (more specific types first)
+            matchingMocks.sort((a, b) -> {
+                int depthA = getInheritanceDepth(a.getClass(), field.getType());
+                int depthB = getInheritanceDepth(b.getClass(), field.getType());
+                return Integer.compare(depthA, depthB);
+            });
+            
+            // Inject the most specific mock
+            try {
+                field.setAccessible(true);
+                field.set(fieldInstance, matchingMocks.get(0));
+            } catch (IllegalAccessException e) {
+                throw new RuntimeException("Failed to set field value", e);
+            }
+        }
+    }
+}
+
+// Helper method to calculate inheritance depth
+private int getInheritanceDepth(Class<?> from, Class<?> to) {
+    if (from == to) {
+        return 0;
+    }
+    if (from == null || from == Object.class) {
+        return Integer.MAX_VALUE;
+    }
+    return 1 + getInheritanceDepth(from.getSuperclass(), to);
+}
\ No newline at end of file
