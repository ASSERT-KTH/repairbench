diff --git a/tmp/ad7574da-1be2-42ad-84fd-7f792f80c226_buggy.java b/tmp/5eac67e3-f4d0-48ab-a2dc-549665b65e15_fixed.java
index c4b260c..e47cd71 100644
--- a/tmp/ad7574da-1be2-42ad-84fd-7f792f80c226_buggy.java
+++ b/tmp/5eac67e3-f4d0-48ab-a2dc-549665b65e15_fixed.java
@@ -1,51 +1,66 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    String usedCharset = null;
+
+    // Check for UTF-8 BOM at the beginning
+    byteData.mark();
+    if (byteData.remaining() >= 3 && byteData.get(0) == (byte)0xEF && byteData.get(1) == (byte)0xBB && byteData.get(2) == (byte)0xBF) {
+        byteData.position(3);
+        usedCharset = "UTF-8";
+    }
+    byteData.reset();
+
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
             } else {
                 foundCharset = meta.attr("charset");
             }
 
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
+                usedCharset = foundCharset;
             }
         }
+        if (usedCharset == null) {
+            usedCharset = defaultCharset;
+        }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
+        usedCharset = charsetName;
     }
+
     // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
     if (docData.length() > 0 && docData.charAt(0) == 65279) {
         byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        docData = Charset.forName(usedCharset).decode(byteData).toString();
         docData = docData.substring(1);
-            charsetName = defaultCharset;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(usedCharset);
     }
     return doc;
 }
\ No newline at end of file
