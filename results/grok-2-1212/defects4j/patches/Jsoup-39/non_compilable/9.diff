diff --git a/tmp/cf3ccd46-15f4-42fe-823f-154a7f809bd3_buggy.java b/tmp/f7d772b2-6eab-4bcd-b0c0-0d68f3510bc3_fixed.java
index c4b260c..0d90ae1 100644
--- a/tmp/cf3ccd46-15f4-42fe-823f-154a7f809bd3_buggy.java
+++ b/tmp/f7d772b2-6eab-4bcd-b0c0-0d68f3510bc3_fixed.java
@@ -1,51 +1,72 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+
+    // Check for BOM and handle it early
+    boolean hasBOM = false;
+    if (byteData.remaining() >= 3) {
+        int firstByte = byteData.get(0) & 0xFF;
+        int secondByte = byteData.get(1) & 0xFF;
+        int thirdByte = byteData.get(2) & 0xFF;
+        if (firstByte == 0xEF && secondByte == 0xBB && thirdByte == 0xBF) {
+            hasBOM = true;
+            byteData.position(3);
+        }
+    }
+
+    if (charsetName == null) {
+        // If no charset is specified, try to detect it from the content
+        byteData.mark();
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        byteData.reset();
+
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+        String foundCharset = null;
+
+        if (meta != null) {
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
+                    foundCharset = meta.attr("charset");
+                }
+            } else if (meta.hasAttr("charset")) {
+                foundCharset = meta.attr("charset");
+            }
+
+            if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {
                 try {
-                            if (Charset.isSupported(meta.attr("charset"))) {
-                                foundCharset = meta.attr("charset");
-                            }
-                        } catch (IllegalCharsetNameException e) {
-                            foundCharset = null;
-                        }
-                    }
-                } else {
-                    foundCharset = meta.attr("charset");
-                }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+                    Charset.forName(foundCharset);
+                    charsetName = foundCharset.trim().replaceAll("[\"']", "");
                     byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+                    if (hasBOM) {
+                        byteData.position(3);
+                    }
+                    docData = Charset.forName(charsetName).decode(byteData).toString();
                     doc = null;
+                } catch (UnsupportedCharsetException e) {
+                    // Keep the default charset if the found one is not supported
                 }
             }
-        } else { // specified by content type header (or by user on file load)
+        }
+    } else {
+        // Use the specified charset
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+
+    // Handle BOM if present
+    if (hasBOM) {
         docData = docData.substring(1);
+        if (charsetName == null) {
             charsetName = defaultCharset;
         }
+    }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
     }
+
     return doc;
 }
\ No newline at end of file
