diff --git a/tmp/98318936-f3b2-470d-90a0-28c94a694301_buggy.java b/tmp/5725cb57-175f-4395-b54e-23684ee701b7_fixed.java
index 1c53d31..b7b9a9d 100644
--- a/tmp/98318936-f3b2-470d-90a0-28c94a694301_buggy.java
+++ b/tmp/5725cb57-175f-4395-b54e-23684ee701b7_fixed.java
@@ -1,20 +1,31 @@
 @SuppressWarnings("unchecked") // Casts guarded by conditionals.
 static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
     TypeToken<?> fieldType, JsonAdapter annotation) {
   Class<?> value = annotation.value();
   TypeAdapter<?> typeAdapter;
   if (TypeAdapter.class.isAssignableFrom(value)) {
     Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
     typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
   } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
     Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
     typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
         .construct()
         .create(gson, fieldType);
   } else {
     throw new IllegalArgumentException(
         "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
   }
+
+  // Move the nullSafe() call inside the conditional blocks
+  if (TypeAdapter.class.isAssignableFrom(value)) {
     typeAdapter = typeAdapter.nullSafe();
+  } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
+    // For TypeAdapterFactory, we assume it already handles null safety
+    // If not, we might need to wrap it with a null-safe TypeAdapter
+    if (!(typeAdapter instanceof TypeAdapter)) {
+      typeAdapter = new TypeAdapterRuntimeTypeWrapper(gson, typeAdapter, fieldType).nullSafe();
+    }
+  }
+
   return typeAdapter;
 }
\ No newline at end of file
