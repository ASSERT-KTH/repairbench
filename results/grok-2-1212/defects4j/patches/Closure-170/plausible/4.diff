diff --git a/tmp/60f915c5-afaf-4420-9569-0bd3e86d1214_buggy.java b/tmp/87cd9272-e432-4565-9986-dd6c996fa2d8_fixed.java
index 5abdeb5..ec0d970 100644
--- a/tmp/60f915c5-afaf-4420-9569-0bd3e86d1214_buggy.java
+++ b/tmp/87cd9272-e432-4565-9986-dd6c996fa2d8_fixed.java
@@ -1,29 +1,30 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+      if (n.isName() && n.getString().equals(varName)) {
+        // Check if the node is part of an assignment
+        boolean isAssignmentLHS = parent.isAssign() && parent.getFirstChild() == n;
+        
+        // Allow counting if it's not the left-hand side of an assignment,
+        // or if it's part of a conditional expression (hook)
+        if (!isAssignmentLHS || 
+            (parent.isHook() || 
+             (parent.isAssign() && parent.getParent() != null && parent.getParent().isHook()))) {
           numUsesWithinCfgNode++;
         }
       }
+    }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
