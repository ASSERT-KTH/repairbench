diff --git a/tmp/9a9e06c7-2346-4285-9da8-97a34138f46d_buggy.java b/tmp/f858cc90-a1f1-4555-b607-d31d09d49ca6_fixed.java
index 5abdeb5..ec5213f 100644
--- a/tmp/9a9e06c7-2346-4285-9da8-97a34138f46d_buggy.java
+++ b/tmp/f858cc90-a1f1-4555-b607-d31d09d49ca6_fixed.java
@@ -1,29 +1,33 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+      if (n.isName() && n.getString().equals(varName)) {
+        // Check if the node is part of an assignment
+        if (parent.isAssign()) {
+          // Count the use if it's not the left-hand side of the assignment
+          if (parent.getFirstChild() != n) {
             numUsesWithinCfgNode++;
           }
+        } else if (parent.isHook()) {
+          // For the hook operator, count uses in both true and false branches
+          numUsesWithinCfgNode++;
+        } else {
+          // Count use for all other cases
+          numUsesWithinCfgNode++;
+        }
+      }
     }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
