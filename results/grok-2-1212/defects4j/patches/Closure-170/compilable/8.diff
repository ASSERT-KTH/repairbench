diff --git a/tmp/469fb64b-3c8b-4c16-8fdf-ae1a35543fa1_buggy.java b/tmp/3c648c39-c9bd-482e-9c32-9aa7ce5af0c5_fixed.java
index 5abdeb5..05f5398 100644
--- a/tmp/469fb64b-3c8b-4c16-8fdf-ae1a35543fa1_buggy.java
+++ b/tmp/3c648c39-c9bd-482e-9c32-9aa7ce5af0c5_fixed.java
@@ -1,29 +1,37 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName)) {
+            // Count as a use if it's not the left-hand side of an assignment,
+            // or if it's the left-hand side of the top-level assignment in the cfgNode
+            if (!parent.isAssign() || parent.getFirstChild() != n) {
               numUsesWithinCfgNode++;
+            } else {
+              // If it's the left-hand side of an assignment, check if it's used elsewhere in the cfgNode
+              Node current = cfgNode;
+              while (current != null) {
+                if (current.isAssign() && current.getFirstChild() == n) {
+                  // If it's the left-hand side of any assignment in the cfgNode, don't count it as a use
+                  return;
+                }
+                current = current.getNext();
+              }
+              // If we've reached here, it's the left-hand side of the top-level assignment
+              numUsesWithinCfgNode++;
+            }
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
