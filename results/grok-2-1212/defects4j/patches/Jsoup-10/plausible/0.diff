diff --git a/tmp/4234d976-58c0-4167-9f37-1a6d0f9c6ba1_buggy.java b/tmp/b37d2641-bdf6-4ee3-8dc3-f728e7508dd0_fixed.java
index b4e6f03..a53a015 100644
--- a/tmp/4234d976-58c0-4167-9f37-1a6d0f9c6ba1_buggy.java
+++ b/tmp/b37d2641-bdf6-4ee3-8dc3-f728e7508dd0_fixed.java
@@ -1,44 +1,56 @@
 /**
  * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
  * <code>&lt;img src></code>).
  * <p/>
  * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
  * <p/>
  * If the attribute value is already absolute (i.e. it starts with a protocol, like
  * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
  * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
  * absolute using that.
  * <p/>
  * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
  * <code>String absUrl = linkEl.attr("abs:href");</code>
  *
  * @param attributeKey The attribute key
  * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
  * could not be made successfully into a URL.
  * @see #attr
  * @see java.net.URL#URL(java.net.URL, String)
  */
 public String absUrl(String attributeKey) {
     Validate.notEmpty(attributeKey);
 
     String relUrl = attr(attributeKey);
     if (!hasAttr(attributeKey)) {
         return ""; // nothing to make absolute with
-        } else {
+    }
+
+    try {
         URL base;
-            try {
         try {
             base = new URL(baseUri);
         } catch (MalformedURLException e) {
             // the base is unsuitable, but the attribute may be abs on its own, so try that
             URL abs = new URL(relUrl);
             return abs.toExternalForm();
         }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
+
+        // Check if the relative URL starts with a '?' (query string)
+        if (relUrl.startsWith("?")) {
+            // If it's a query string, use the base URL's path
+            String baseUrlPath = base.getPath();
+            if (baseUrlPath.isEmpty()) {
+                baseUrlPath = "/";
+            }
+            URL abs = new URL(base.getProtocol(), base.getHost(), base.getPort(), baseUrlPath + relUrl);
+            return abs.toExternalForm();
+        } else {
+            // For non-query string relative URLs, use the standard URL constructor
             URL abs = new URL(base, relUrl);
             return abs.toExternalForm();
+        }
     } catch (MalformedURLException e) {
         return "";
     }
 }
\ No newline at end of file
-    }
