diff --git a/tmp/76e96396-b86c-4dff-8df2-e630cd5fb2b6_buggy.java b/tmp/8dbf4305-d506-4342-b399-3975fef8ecb2_fixed.java
index 111ba5e..dea9b44 100644
--- a/tmp/76e96396-b86c-4dff-8df2-e630cd5fb2b6_buggy.java
+++ b/tmp/8dbf4305-d506-4342-b399-3975fef8ecb2_fixed.java
@@ -1,9 +1,46 @@
+import java.util.Arrays;
+import java.lang.reflect.Array;
+
 public static boolean areEqual(Object o1, Object o2) {
+    if (o1 == o2) {
+        return true;
+    }
     if (o1 == null || o2 == null) {
-            return o1 == null && o2 == null;
-        } else if (isArray(o1)) {
-            return isArray(o2) && areArraysEqual(o1, o2);
+        return false;
+    }
+    if (o1.getClass().isArray() && o2.getClass().isArray()) {
+        Class<?> componentType1 = o1.getClass().getComponentType();
+        Class<?> componentType2 = o2.getClass().getComponentType();
+        if (componentType1.isPrimitive() && componentType2.isPrimitive()) {
+            return primitiveArraysEqual(o1, o2);
         } else {
+            return Arrays.deepEquals((Object[]) o1, (Object[]) o2);
+        }
+    }
+    if (o1 instanceof Number && o2 instanceof Number) {
+        return ((Number) o1).doubleValue() == ((Number) o2).doubleValue();
+    }
     return o1.equals(o2);
 }
+
+private static boolean primitiveArraysEqual(Object o1, Object o2) {
+    Class<?> type = o1.getClass().getComponentType();
+    if (boolean.class.equals(type)) {
+        return Arrays.equals((boolean[]) o1, (boolean[]) o2);
+    } else if (byte.class.equals(type)) {
+        return Arrays.equals((byte[]) o1, (byte[]) o2);
+    } else if (char.class.equals(type)) {
+        return Arrays.equals((char[]) o1, (char[]) o2);
+    } else if (double.class.equals(type)) {
+        return Arrays.equals((double[]) o1, (double[]) o2);
+    } else if (float.class.equals(type)) {
+        return Arrays.equals((float[]) o1, (float[]) o2);
+    } else if (int.class.equals(type)) {
+        return Arrays.equals((int[]) o1, (int[]) o2);
+    } else if (long.class.equals(type)) {
+        return Arrays.equals((long[]) o1, (long[]) o2);
+    } else if (short.class.equals(type)) {
+        return Arrays.equals((short[]) o1, (short[]) o2);
+    }
+    return false;
 }
\ No newline at end of file
