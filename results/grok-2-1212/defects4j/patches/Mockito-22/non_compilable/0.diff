diff --git a/tmp/2c68bc4c-c7d4-4933-a471-1cf8a638dc6d_buggy.java b/tmp/f958059f-2be7-41c7-b8be-51c147c6429a_fixed.java
index 111ba5e..66f3517 100644
--- a/tmp/2c68bc4c-c7d4-4933-a471-1cf8a638dc6d_buggy.java
+++ b/tmp/f958059f-2be7-41c7-b8be-51c147c6429a_fixed.java
@@ -1,9 +1,72 @@
 public static boolean areEqual(Object o1, Object o2) {
     if (o1 == null || o2 == null) {
         return o1 == null && o2 == null;
-        } else if (isArray(o1)) {
-            return isArray(o2) && areArraysEqual(o1, o2);
-        } else {
+    }
+    
+    if (o1.getClass().isArray() && o2.getClass().isArray()) {
+        return areArraysEqual(o1, o2);
+    }
+    
     return o1.equals(o2);
 }
+
+private static boolean areArraysEqual(Object o1, Object o2) {
+    if (o1 instanceof Object[] && o2 instanceof Object[]) {
+        return Arrays.deepEquals((Object[]) o1, (Object[]) o2);
+    }
+    
+    if (o1 instanceof boolean[] && o2 instanceof boolean[]) {
+        return Arrays.equals((boolean[]) o1, (boolean[]) o2);
+    }
+    
+    if (o1 instanceof byte[] && o2 instanceof byte[]) {
+        return Arrays.equals((byte[]) o1, (byte[]) o2);
+    }
+    
+    if (o1 instanceof char[] && o2 instanceof char[]) {
+        return Arrays.equals((char[]) o1, (char[]) o2);
+    }
+    
+    if (o1 instanceof double[] && o2 instanceof double[]) {
+        return Arrays.equals((double[]) o1, (double[]) o2);
+    }
+    
+    if (o1 instanceof float[] && o2 instanceof float[]) {
+        return Arrays.equals((float[]) o1, (float[]) o2);
+    }
+    
+    if (o1 instanceof int[] && o2 instanceof int[]) {
+        return Arrays.equals((int[]) o1, (int[]) o2);
+    }
+    
+    if (o1 instanceof long[] && o2 instanceof long[]) {
+        return Arrays.equals((long[]) o1, (long[]) o2);
+    }
+    
+    if (o1 instanceof short[] && o2 instanceof short[]) {
+        return Arrays.equals((short[]) o1, (short[]) o2);
+    }
+    
+    // Handle cases where one array is of primitive type and the other is of corresponding wrapper type
+    if (o1 instanceof Object[] && o2.getClass().isArray() && !o2.getClass().getComponentType().isPrimitive()) {
+        return Arrays.deepEquals((Object[]) o1, toObjectArray(o2));
+    }
+    
+    if (o2 instanceof Object[] && o1.getClass().isArray() && !o1.getClass().getComponentType().isPrimitive()) {
+        return Arrays.deepEquals((Object[]) o2, toObjectArray(o1));
+    }
+    
+    return false;
+}
+
+private static Object[] toObjectArray(Object array) {
+    Class<?> componentType = array.getClass().getComponentType();
+    int length = Array.getLength(array);
+    Object[] result = (Object[]) Array.newInstance(componentType, length);
+    
+    for (int i = 0; i < length; i++) {
+        result[i] = Array.get(array, i);
+    }
+    
+    return result;
 }
\ No newline at end of file
