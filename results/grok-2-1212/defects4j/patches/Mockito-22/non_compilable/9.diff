diff --git a/tmp/c1765f52-7e80-48bf-8b44-55fa3a61922c_buggy.java b/tmp/892228e9-b815-4306-9b2e-69614bc8252c_fixed.java
index 111ba5e..782e389 100644
--- a/tmp/c1765f52-7e80-48bf-8b44-55fa3a61922c_buggy.java
+++ b/tmp/892228e9-b815-4306-9b2e-69614bc8252c_fixed.java
@@ -1,9 +1,96 @@
 public static boolean areEqual(Object o1, Object o2) {
     if (o1 == null || o2 == null) {
         return o1 == null && o2 == null;
-        } else if (isArray(o1)) {
-            return isArray(o2) && areArraysEqual(o1, o2);
+    }
+
+    if (o1 instanceof Object[] && o2 instanceof Object[]) {
+        return Arrays.deepEquals((Object[]) o1, (Object[]) o2);
+    }
+
+    if (o1.getClass().isArray() && o2.getClass().isArray()) {
+        if (o1 instanceof int[] && o2 instanceof int[]) {
+            return Arrays.equals((int[]) o1, (int[]) o2);
+        } else if (o1 instanceof long[] && o2 instanceof long[]) {
+            return Arrays.equals((long[]) o1, (long[]) o2);
+        } else if (o1 instanceof short[] && o2 instanceof short[]) {
+            return Arrays.equals((short[]) o1, (short[]) o2);
+        } else if (o1 instanceof byte[] && o2 instanceof byte[]) {
+            return Arrays.equals((byte[]) o1, (byte[]) o2);
+        } else if (o1 instanceof char[] && o2 instanceof char[]) {
+            return Arrays.equals((char[]) o1, (char[]) o2);
+        } else if (o1 instanceof float[] && o2 instanceof float[]) {
+            return Arrays.equals((float[]) o1, (float[]) o2);
+        } else if (o1 instanceof double[] && o2 instanceof double[]) {
+            return Arrays.equals((double[]) o1, (double[]) o2);
+        } else if (o1 instanceof boolean[] && o2 instanceof boolean[]) {
+            return Arrays.equals((boolean[]) o1, (boolean[]) o2);
         } else {
+            // Handle cases where one array is of a primitive type and the other is the corresponding wrapper type
+            return Arrays.deepEquals(toObjectArray(o1), toObjectArray(o2));
+        }
+    }
+
     return o1.equals(o2);
 }
+
+// Helper method to convert primitive arrays to object arrays
+private static Object[] toObjectArray(Object array) {
+    if (array instanceof int[]) {
+        int[] intArray = (int[]) array;
+        Integer[] result = new Integer[intArray.length];
+        for (int i = 0; i < intArray.length; i++) {
+            result[i] = intArray[i];
+        }
+        return result;
+    } else if (array instanceof long[]) {
+        long[] longArray = (long[]) array;
+        Long[] result = new Long[longArray.length];
+        for (int i = 0; i < longArray.length; i++) {
+            result[i] = longArray[i];
+        }
+        return result;
+    } else if (array instanceof short[]) {
+        short[] shortArray = (short[]) array;
+        Short[] result = new Short[shortArray.length];
+        for (int i = 0; i < shortArray.length; i++) {
+            result[i] = shortArray[i];
+        }
+        return result;
+    } else if (array instanceof byte[]) {
+        byte[] byteArray = (byte[]) array;
+        Byte[] result = new Byte[byteArray.length];
+        for (int i = 0; i < byteArray.length; i++) {
+            result[i] = byteArray[i];
+        }
+        return result;
+    } else if (array instanceof char[]) {
+        char[] charArray = (char[]) array;
+        Character[] result = new Character[charArray.length];
+        for (int i = 0; i < charArray.length; i++) {
+            result[i] = charArray[i];
+        }
+        return result;
+    } else if (array instanceof float[]) {
+        float[] floatArray = (float[]) array;
+        Float[] result = new Float[floatArray.length];
+        for (int i = 0; i < floatArray.length; i++) {
+            result[i] = floatArray[i];
+        }
+        return result;
+    } else if (array instanceof double[]) {
+        double[] doubleArray = (double[]) array;
+        Double[] result = new Double[doubleArray.length];
+        for (int i = 0; i < doubleArray.length; i++) {
+            result[i] = doubleArray[i];
+        }
+        return result;
+    } else if (array instanceof boolean[]) {
+        boolean[] booleanArray = (boolean[]) array;
+        Boolean[] result = new Boolean[booleanArray.length];
+        for (int i = 0; i < booleanArray.length; i++) {
+            result[i] = booleanArray[i];
+        }
+        return result;
+    }
+    return (Object[]) array;
 }
\ No newline at end of file
