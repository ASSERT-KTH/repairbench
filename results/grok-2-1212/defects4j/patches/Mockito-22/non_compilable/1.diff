diff --git a/tmp/5e7eecba-1477-4230-b339-2b8d0d199076_buggy.java b/tmp/c36629c1-228f-483b-8922-939fc61b9d07_fixed.java
index 111ba5e..4968cf4 100644
--- a/tmp/5e7eecba-1477-4230-b339-2b8d0d199076_buggy.java
+++ b/tmp/c36629c1-228f-483b-8922-939fc61b9d07_fixed.java
@@ -1,9 +1,29 @@
+import java.util.Arrays;
+
 public static boolean areEqual(Object o1, Object o2) {
     if (o1 == null || o2 == null) {
         return o1 == null && o2 == null;
-        } else if (isArray(o1)) {
-            return isArray(o2) && areArraysEqual(o1, o2);
-        } else {
+    }
+    
+    if (o1.getClass().isArray() && o2.getClass().isArray()) {
+        Class<?> c1 = o1.getClass().getComponentType();
+        Class<?> c2 = o2.getClass().getComponentType();
+        
+        if (c1.isPrimitive() && c2.isPrimitive()) {
+            if (c1 == boolean.class) return Arrays.equals((boolean[]) o1, (boolean[]) o2);
+            if (c1 == byte.class) return Arrays.equals((byte[]) o1, (byte[]) o2);
+            if (c1 == char.class) return Arrays.equals((char[]) o1, (char[]) o2);
+            if (c1 == double.class) return Arrays.equals((double[]) o1, (double[]) o2);
+            if (c1 == float.class) return Arrays.equals((float[]) o1, (float[]) o2);
+            if (c1 == int.class) return Arrays.equals((int[]) o1, (int[]) o2);
+            if (c1 == long.class) return Arrays.equals((long[]) o1, (long[]) o2);
+            if (c1 == short.class) return Arrays.equals((short[]) o1, (short[]) o2);
+        } else if (!c1.isPrimitive() && !c2.isPrimitive()) {
+            return Arrays.deepEquals((Object[]) o1, (Object[]) o2);
+        }
+        
+        return false; // One is primitive, the other is not
+    }
+    
     return o1.equals(o2);
 }
\ No newline at end of file
-    }
