diff --git a/tmp/12033db6-fbf4-44fb-80d5-7c304f536acd_buggy.java b/tmp/e9f33717-c8cc-442e-a32d-93408989b5c1_fixed.java
index e69de29..0058bfa 100644
--- a/tmp/12033db6-fbf4-44fb-80d5-7c304f536acd_buggy.java
+++ b/tmp/e9f33717-c8cc-442e-a32d-93408989b5c1_fixed.java
@@ -0,0 +1,84 @@
+public class PatriciaTrie<K, V> extends AbstractTrie<K, V> {
+
+    // ... other existing code ...
+
+    @Override
+    public SortedMap<K, V> prefixMap(K prefix) {
+        return new PrefixMap(prefix);
+    }
+
+    private class PrefixMap extends AbstractMap<K, V> implements SortedMap<K, V> {
+
+        private final K prefix;
+
+        PrefixMap(K prefix) {
+            this.prefix = prefix;
+        }
+
+        @Override
+        public Comparator<? super K> comparator() {
+            return PatriciaTrie.this.comparator();
+        }
+
+        @Override
+        public SortedMap<K, V> subMap(K fromKey, K toKey) {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public SortedMap<K, V> headMap(K toKey) {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public SortedMap<K, V> tailMap(K fromKey) {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public K firstKey() {
+            Entry<K, V> entry = PatriciaTrie.this.selectors.ceilingEntry(prefix);
+            if (entry != null && PatriciaTrie.this.keyAnalyzer.isPrefix(prefix, entry.getKey())) {
+                return entry.getKey();
+            }
+            return null;
+        }
+
+        @Override
+        public K lastKey() {
+            Entry<K, V> entry = PatriciaTrie.this.selectors.floorEntry(prefix);
+            if (entry != null && PatriciaTrie.this.keyAnalyzer.isPrefix(prefix, entry.getKey())) {
+                return entry.getKey();
+            }
+            return null;
+        }
+
+        @Override
+        public Set<K> keySet() {
+            return new KeySet();
+        }
+
+        @Override
+        public Collection<V> values() {
+            return new Values();
+        }
+
+        @Override
+        public Set<Entry<K, V>> entrySet() {
+            return new EntrySet();
+        }
+
+        @Override
+        public void clear() {
+            Iterator<K> iterator = keySet().iterator();
+            while (iterator.hasNext()) {
+                iterator.next();
+                iterator.remove();
+            }
+        }
+
+        // ... other existing code ...
+    }
+
+    // ... other existing code ...
+}
\ No newline at end of file
