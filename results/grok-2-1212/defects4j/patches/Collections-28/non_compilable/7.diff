diff --git a/tmp/c3de5c6b-cd5a-4aae-b88c-6da0ecde04da_buggy.java b/tmp/ddd736cd-6895-4243-9872-f17b109105a3_fixed.java
index e69de29..5909314 100644
--- a/tmp/c3de5c6b-cd5a-4aae-b88c-6da0ecde04da_buggy.java
+++ b/tmp/ddd736cd-6895-4243-9872-f17b109105a3_fixed.java
@@ -0,0 +1,85 @@
+@Override
+public SortedMap<String, V> prefixMap(String key) {
+    return new PrefixMapView(key);
+}
+
+private class PrefixMapView extends AbstractMap<String, V> implements SortedMap<String, V> {
+    private final String prefix;
+
+    PrefixMapView(String prefix) {
+        this.prefix = prefix;
+    }
+
+    @Override
+    public Set<Entry<String, V>> entrySet() {
+        return new AbstractSet<Entry<String, V>>() {
+            @Override
+            public Iterator<Entry<String, V>> iterator() {
+                return new PrefixIterator(prefix);
+            }
+
+            @Override
+            public int size() {
+                int size = 0;
+                Iterator<Entry<String, V>> it = iterator();
+                while (it.hasNext()) {
+                    it.next();
+                    size++;
+                }
+                return size;
+            }
+        };
+    }
+
+    @Override
+    public void clear() {
+        Iterator<Entry<String, V>> it = entrySet().iterator();
+        while (it.hasNext()) {
+            it.next();
+            it.remove();
+        }
+    }
+
+    // Other required methods...
+
+    private class PrefixIterator implements Iterator<Entry<String, V>> {
+        private final Iterator<Entry<String, V>> trieIterator;
+        private Entry<String, V> nextEntry;
+
+        PrefixIterator(String prefix) {
+            trieIterator = PatriciaTrie.this.entrySet().iterator();
+            advanceToNext(prefix);
+        }
+
+        private void advanceToNext(String prefix) {
+            nextEntry = null;
+            while (trieIterator.hasNext()) {
+                Entry<String, V> entry = trieIterator.next();
+                if (entry.getKey().startsWith(prefix)) {
+                    nextEntry = entry;
+                    break;
+                }
+            }
+        }
+
+        @Override
+        public boolean hasNext() {
+            return nextEntry != null;
+        }
+
+        @Override
+        public Entry<String, V> next() {
+            if (nextEntry == null) {
+                throw new NoSuchElementException();
+            }
+            Entry<String, V> result = nextEntry;
+            advanceToNext(prefix);
+            return result;
+        }
+
+        @Override
+        public void remove() {
+            trieIterator.remove();
+        }
+    }
+}
\ No newline at end of file
