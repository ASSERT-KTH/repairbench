diff --git a/tmp/6eda11d8-43e8-4697-817c-f2f18fc5bf24_buggy.java b/tmp/f5ba7117-6737-4a9a-a8ba-0ac0e80f8b73_fixed.java
index 670114d..30b30ff 100644
--- a/tmp/6eda11d8-43e8-4697-817c-f2f18fc5bf24_buggy.java
+++ b/tmp/f5ba7117-6737-4a9a-a8ba-0ac0e80f8b73_fixed.java
@@ -1,48 +1,68 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
 
   // Record global variable and function declarations
   if (t.inGlobalScope()) {
     if (NodeUtil.isVarDeclaration(n)) {
       NameInformation ns = createNameInformation(t, n, parent);
       Preconditions.checkNotNull(ns);
       recordSet(ns.name, n);
     } else if (NodeUtil.isFunctionDeclaration(n)) {
       Node nameNode = n.getFirstChild();
       NameInformation ns = createNameInformation(t, nameNode, n);
       if (ns != null) {
         JsName nameInfo = getName(nameNode.getString(), true);
         recordSet(nameInfo.name, nameNode);
       }
     } else if (NodeUtil.isObjectLitKey(n, parent)) {
       NameInformation ns = createNameInformation(t, n, parent);
       if (ns != null) {
         recordSet(ns.name, n);
       }
     }
   }
 
   // Record assignments and call sites
   if (n.isAssign()) {
     Node nameNode = n.getFirstChild();
-
     NameInformation ns = createNameInformation(t, nameNode, n);
     if (ns != null) {
       if (ns.isPrototype) {
         recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
       } else {
         recordSet(ns.name, nameNode);
+        // Handle nested constructor assignments
+        if (ns.isConstructor && nameNode.hasChildren()) {
+          Node nestedConstructor = nameNode.getFirstChild();
+          NameInformation nestedNs = createNameInformation(t, nestedConstructor, nameNode);
+          if (nestedNs != null) {
+            recordSet(nestedNs.name, nestedConstructor);
+          }
+        }
       }
     }
   } else if (n.isCall()) {
     Node nameNode = n.getFirstChild();
     NameInformation ns = createNameInformation(t, nameNode, n);
-        if (ns != null && ns.onlyAffectsClassDef) {
+    if (ns != null) {
+      if (ns.onlyAffectsClassDef) {
         JsName name = getName(ns.name, false);
         if (name != null) {
-          refNodes.add(new ClassDefiningFunctionNode(
-              name, n, parent, parent.getParent()));
+          refNodes.add(new ClassDefiningFunctionNode(name, n, parent, parent.getParent()));
+        }
+      }
+      // Handle goog.inherits calls
+      if (nameNode.isGetProp() && nameNode.getQualifiedName().equals("goog.inherits")) {
+        Node subclassNode = n.getChildAtIndex(1);
+        Node superclassNode = n.getChildAtIndex(2);
+        NameInformation subclassNs = createNameInformation(t, subclassNode, n);
+        NameInformation superclassNs = createNameInformation(t, superclassNode, n);
+        if (subclassNs != null && superclassNs != null) {
+          recordPrototypeSet(subclassNs.name, "prototype", n);
+          recordPrototypeSet(subclassNs.name, "__proto__", n);
+          recordSet(superclassNs.name, superclassNode);
+        }
       }
     }
   }
 }
\ No newline at end of file
