diff --git a/tmp/200af6db-44c6-43fd-aafe-23b53768da37_buggy.java b/tmp/eccb3c6d-e3ed-4c6e-bc02-93e4b00a4027_fixed.java
index 3127f85..e38bac2 100644
--- a/tmp/200af6db-44c6-43fd-aafe-23b53768da37_buggy.java
+++ b/tmp/eccb3c6d-e3ed-4c6e-bc02-93e4b00a4027_fixed.java
@@ -1,24 +1,27 @@
 /**
  * For this distribution, {@code X}, this method returns {@code P(X < x)}.
  * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
  * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
  *
  * @param x Value at which the CDF is evaluated.
  * @return CDF evaluated at {@code x}.
  * @throws MathException if the algorithm fails to converge
  */
 public double cumulativeProbability(double x) throws MathException {
     final double dev = x - mean;
+    final double absDev = FastMath.abs(dev);
+    
+    if (absDev > 40 * standardDeviation) {
+        return dev > 0 ? 1 : 0;
+    }
+    
     try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+        return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
     } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
+        if (absDev > 20 * standardDeviation) {
+            return dev > 0 ? 1 : 0;
         } else {
             throw ex;
         }
     }
 }
\ No newline at end of file
