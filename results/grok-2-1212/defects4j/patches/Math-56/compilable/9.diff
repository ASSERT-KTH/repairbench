diff --git a/tmp/55ff57f7-ebce-46cb-b112-99759e3524c9_buggy.java b/tmp/caa9f468-8f0d-4521-b25b-52a62ada8e22_fixed.java
index 2608424..9a22088 100644
--- a/tmp/55ff57f7-ebce-46cb-b112-99759e3524c9_buggy.java
+++ b/tmp/caa9f468-8f0d-4521-b25b-52a62ada8e22_fixed.java
@@ -1,39 +1,42 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
-        if (index < 0 ||
-            index >= totalSize) {
+        if (index < 0 || index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
 
         int count = 0;
         for (int i = 0; i < last; i++) {
             int idx = 0;
             final int offset = uniCounterOffset[i];
             while (count <= index) {
+                if (count + offset > index) {
+                    break;
+                }
                 count += offset;
                 ++idx;
             }
-            --idx;
-            count -= offset;
             indices[i] = idx;
         }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
+        int idx = 0;
+        final int lastOffset = uniCounterOffset[last];
+        while (count <= index) {
+            if (count + lastOffset > index) {
+                break;
+            }
+            count += lastOffset;
             ++idx;
         }
-        --idx;
         indices[last] = idx;
 
         return indices;
     }
\ No newline at end of file
