diff --git a/tmp/d026ca88-bcd9-46ed-aac2-888dd2297c50_buggy.java b/tmp/3354f306-ed14-4b8d-a925-148ccd55545c_fixed.java
index 07b0792..44e2113 100644
--- a/tmp/d026ca88-bcd9-46ed-aac2-888dd2297c50_buggy.java
+++ b/tmp/3354f306-ed14-4b8d-a925-148ccd55545c_fixed.java
@@ -1,22 +1,50 @@
     /**
      * @return Whether the variable is only assigned a value once for its
      *     lifetime.
      */
     boolean isAssignedOnceInLifetime() {
       Reference ref = getOneAndOnlyAssignment();
       if (ref == null) {
         return false;
       }
 
-      // Make sure this assignment is not in a loop.
-      for (BasicBlock block = ref.getBasicBlock();
-           block != null; block = block.getParent()) {
+      Set<BasicBlock> visited = new HashSet<>();
+      Queue<BasicBlock> queue = new LinkedList<>();
+      queue.add(ref.getBasicBlock());
+
+      while (!queue.isEmpty()) {
+        BasicBlock block = queue.poll();
+        if (visited.contains(block)) {
+          continue;
+        }
+        visited.add(block);
+
         if (block.isFunction) {
-          break;
-        } else if (block.isLoop) {
-          return false;
+          // If we reach a function entry, no need to traverse further.
+          continue;
+        }
+
+        if (block.isLoop) {
+          // If we find a loop, check all assignments within the loop.
+          for (Reference loopRef : block.getAllReferences()) {
+            if (loopRef.getVariable() == ref.getVariable() && loopRef != ref) {
+              return false; // Variable reassigned in loop.
+            }
+          }
+        }
+
+        // Check for other assignments to the same variable.
+        for (Reference otherRef : block.getAllReferences()) {
+          if (otherRef.getVariable() == ref.getVariable() && otherRef != ref) {
+            return false; // Variable reassigned in the same basic block.
+          }
+        }
+
+        // Add successor blocks to the queue.
+        for (BasicBlock successor : block.getSuccessors()) {
+          queue.add(successor);
         }
       }
 
       return true;
     }
\ No newline at end of file
