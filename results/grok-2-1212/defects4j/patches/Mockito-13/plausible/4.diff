diff --git a/tmp/ade050d5-3595-4192-bac6-e733a26fd685_buggy.java b/tmp/3f957343-5fab-4fb5-9a77-ef5eab0357c9_fixed.java
index 5481b94..2a133ef 100644
--- a/tmp/ade050d5-3595-4192-bac6-e733a26fd685_buggy.java
+++ b/tmp/3f957343-5fab-4fb5-9a77-ef5eab0357c9_fixed.java
@@ -1,49 +1,53 @@
 public Object handle(Invocation invocation) throws Throwable {
     if (invocationContainerImpl.hasAnswersForStubbing()) {
         // stubbing voids with stubVoid() or doAnswer() style
         InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress
                         .getArgumentMatcherStorage(), invocation);
         invocationContainerImpl.setMethodForStubbing(invocationMatcher);
         return null;
     }
     VerificationMode verificationMode = mockingProgress.pullVerificationMode();
 
     InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),
                     invocation);
 
     mockingProgress.validateState();
 
     //if verificationMode is not null then someone is doing verify()        
     if (verificationMode != null) {
         //We need to check if verification was started on the correct mock 
         // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
-            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
+        if (verificationMode instanceof MockAwareVerificationMode) {
+            MockAwareVerificationMode mockAwareVerificationMode = (MockAwareVerificationMode) verificationMode;
+            if (mockAwareVerificationMode.getMock() == invocation.getMock()) {
                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            
                 verificationMode.verify(data);
                 return null;
-                // this means there is an invocation on a different mock. Re-adding verification mode 
-                // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
+            } else {
+                // Re-add the verification mode for the next invocation on the correct mock
+                mockingProgress.verificationStarted(verificationMode);
+            }
         }
     }
     
     invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
     OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
     mockingProgress.reportOngoingStubbing(ongoingStubbing);
 
     StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
 
     if (stubbedInvocation != null) {
         stubbedInvocation.captureArgumentsFrom(invocation);
         return stubbedInvocation.answer(invocation);
     } else {
         Object ret = mockSettings.getDefaultAnswer().answer(invocation);
 
         // redo setting invocation for potential stubbing in case of partial
         // mocks / spies.
         // Without it, the real method inside 'when' might have delegated
         // to other self method and overwrite the intended stubbed method
         // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
         invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
         return ret;
     }
 }
\ No newline at end of file
