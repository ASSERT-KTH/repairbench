You are an automatic program repair tool. Your task is to fix the provided buggy code.

The following code contains a buggy function:
```java
  /**
   * Check to see if the given block comment looks like it should be JSDoc.
   */
  private void handleBlockComment(Comment comment) {
    if (comment.getValue().indexOf("/* @") != -1 || comment.getValue().indexOf("\n * @") != -1) {
      errorReporter.warning(
          SUSPICIOUS_COMMENT_WARNING,
          sourceName,
          comment.getLineno(), "", 0);
    }
  }

```

The code fails the following tests.

Test `com.google.javascript.jscomp.parsing.ParserTest::testSuspiciousBlockCommentWarning3`:
```java
  public void testSuspiciousBlockCommentWarning3() {
    parse("/* \n *@type {number} */ var x = 3;", SUSPICIOUS_COMMENT_WARNING);
  }

```
Test `com.google.javascript.jscomp.parsing.ParserTest::testSuspiciousBlockCommentWarning3` error:
```
junit.framework.AssertionFailedError;com.google.javascript.jscomp.parsing.ParserTest::testSuspiciousBlockCommentWarning5
```

Test `com.google.javascript.jscomp.parsing.ParserTest::testSuspiciousBlockCommentWarning4`:
```java
  public void testSuspiciousBlockCommentWarning4() {
    parse(
        "  /*\n" +
        "   * @type {number}\n" +
        "   */\n" +
        "  var x = 3;",
        SUSPICIOUS_COMMENT_WARNING);
  }

```
Test `com.google.javascript.jscomp.parsing.ParserTest::testSuspiciousBlockCommentWarning4` error:
```
junit.framework.AssertionFailedError
```

Test `com.google.javascript.jscomp.parsing.ParserTest::testSuspiciousBlockCommentWarning5`:
```java
  public void testSuspiciousBlockCommentWarning5() {
    parse(
        "  /*\n" +
        "   * some random text here\n" +
        "   * @type {number}\n" +
        "   */\n" +
        "  var x = 3;",
        SUSPICIOUS_COMMENT_WARNING);
  }

```
Test `com.google.javascript.jscomp.parsing.ParserTest::testSuspiciousBlockCommentWarning5` error:
```
junit.framework.AssertionFailedError
```


Please provide a fixed version of the buggy function, and only that function, inside a code block.
