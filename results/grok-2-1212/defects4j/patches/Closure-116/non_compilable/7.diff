diff --git a/tmp/c9b8a58d-f920-4591-ba90-7a75ca10c6ac_buggy.java b/tmp/0d2332f6-5b62-4b5a-8f9a-e08dac2694c9_fixed.java
index 233a867..125b707 100644
--- a/tmp/c9b8a58d-f920-4591-ba90-7a75ca10c6ac_buggy.java
+++ b/tmp/0d2332f6-5b62-4b5a-8f9a-e08dac2694c9_fixed.java
@@ -1,73 +1,76 @@
 /**
  * Determines whether a function can be inlined at a particular call site.
  * There are several criteria that the function and reference must hold in
  * order for the functions to be inlined:
  * 1) If a call's arguments have side effects,
  * the corresponding argument in the function must only be referenced once.
  * For instance, this will not be inlined:
  * <pre>
  *     function foo(a) { return a + a }
  *     x = foo(i++);
  * </pre>
  */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
   Node block = fnNode.getLastChild();
 
-
   // CALL NODE: [ NAME, ARG1, ARG2, ... ]
   Node cArg = callNode.getFirstChild().getNext();
 
   // Functions called via 'call' and 'apply' have a this-object as
   // the first parameter, but this is not part of the called function's
   // parameter list.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
       // TODO(johnlenz): Support replace this with a value.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
       // ".apply" call should be filtered before this.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
   // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+  
+  // Traverse through call arguments and function parameters
   while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
     if (fnParam != null) {
       if (cArg != null) {
+        // Check for arguments that are evaluated more than once
+        if (NodeUtil.mayEffectMutableState(cArg, compiler) ||
+            NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+          // Check if the parameter is referenced more than once in the function body
+          if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
+            return CanInlineResult.NO;
+          }
           
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+          // Check if the parameter is used in a way that modifies its value
+          if (NodeUtil.isAssignmentTarget(fnParam) || 
+              NodeUtil.isLValue(fnParam)) {
             return CanInlineResult.NO;
           }
         }
+      }
       
-        // Move to the next name.
       fnParam = fnParam.getNext();
     }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
+    // Check for side-effects in call arguments, even if there isn't a named parameter to match
     if (cArg != null) {
       if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     }
   }
 
   return CanInlineResult.YES;
 }
\ No newline at end of file
