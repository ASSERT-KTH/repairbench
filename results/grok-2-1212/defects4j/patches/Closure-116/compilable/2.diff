diff --git a/tmp/6b072bb7-e59c-436c-bb3e-ae5e48ffb912_buggy.java b/tmp/63fb165a-0aa1-4172-8b25-75208f380bb2_fixed.java
index 233a867..d33b9e8 100644
--- a/tmp/6b072bb7-e59c-436c-bb3e-ae5e48ffb912_buggy.java
+++ b/tmp/63fb165a-0aa1-4172-8b25-75208f380bb2_fixed.java
@@ -1,73 +1,73 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
   Node block = fnNode.getLastChild();
 
-
   // CALL NODE: [ NAME, ARG1, ARG2, ... ]
   Node cArg = callNode.getFirstChild().getNext();
 
   // Functions called via 'call' and 'apply' have a this-object as
   // the first parameter, but this is not part of the called function's
   // parameter list.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
       // TODO(johnlenz): Support replace this with a value.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
       // ".apply" call should be filtered before this.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
   // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+  Node fnParams = NodeUtil.getFunctionParameters(fnNode);
+  Node fnParam = fnParams.getFirstChild();
+
   while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
-        if (cArg != null) {
+    // Check if we have more call arguments than function parameters
+    if (cArg == null && fnParam != null) {
+      return CanInlineResult.NO;
+    }
 
+    // Check if we have more function parameters than call arguments
+    if (fnParam == null && cArg != null) {
+      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+        return CanInlineResult.NO;
+      }
+      cArg = cArg.getNext();
+      continue;
+    }
+
+    // For each named parameter check if a mutable argument use more than once.
+    if (fnParam != null && cArg != null) {
       // Check for arguments that are evaluated more than once.
       // Note: Unlike block inlining, there it is not possible that a
       // parameter reference will be in a loop.
       if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+          || NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+        if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
           return CanInlineResult.NO;
         }
       }
 
-        // Move to the next name.
+      // Move to the next name and argument.
       fnParam = fnParam.getNext();
+      cArg = cArg.getNext();
+    }
   }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
-      if (cArg != null) {
-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+  // Check for side effects in the function body
+  for (Node child = block.getFirstChild(); child != null; child = child.getNext()) {
+    if (NodeUtil.mayHaveSideEffects(child, compiler)) {
       return CanInlineResult.NO;
     }
-        cArg = cArg.getNext();
-      }
   }
 
   return CanInlineResult.YES;
 }
\ No newline at end of file
