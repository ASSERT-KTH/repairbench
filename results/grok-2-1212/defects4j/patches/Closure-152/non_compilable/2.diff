diff --git a/tmp/f840c9b9-8b87-4c5a-aa1c-ba493862eeeb_buggy.java b/tmp/b1772849-2a8c-4203-b073-459e58a71759_fixed.java
index 58a1651..b93a6e0 100644
--- a/tmp/f840c9b9-8b87-4c5a-aa1c-ba493862eeeb_buggy.java
+++ b/tmp/b1772849-2a8c-4203-b073-459e58a71759_fixed.java
@@ -1,32 +1,56 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Handle typeOfThis to accommodate UnionType and ObjectType
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis.isUnionType()) {
+        UnionType unionType = (UnionType) resolvedTypeOfThis;
+        boolean hasObjectType = false;
+        for (JSType alt : unionType.getAlternates()) {
+            if (alt.isObjectType()) {
+                hasObjectType = true;
+                break;
+            }
+        }
+        if (hasObjectType) {
+            // If union contains an ObjectType, we'll keep the resolved type as is
+            typeOfThis = unionType;
+        } else {
+            // If no ObjectType in union, report a warning
+            t.warning("No ObjectType found in the union for @this type: " + unionType);
+            // Keep the original type if no ObjectType is found
+            typeOfThis = (ObjectType) this.typeOfThis;
+        }
+    } else if (resolvedTypeOfThis.isObjectType()) {
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else {
+        // If resolved type is neither UnionType nor ObjectType, report a warning
+        t.warning("@this type must be an object or a union containing an object type. Found: " + resolvedTypeOfThis);
+        // Keep the original type if it's not an ObjectType
+        typeOfThis = (ObjectType) this.typeOfThis;
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
