diff --git a/tmp/7298378b-6a0f-460b-86e7-0fa5648dc954_buggy.java b/tmp/3b6b874d-b67e-4417-982f-ad5bac3bf0f0_fixed.java
index 58a1651..c2e1996 100644
--- a/tmp/7298378b-6a0f-460b-86e7-0fa5648dc954_buggy.java
+++ b/tmp/3b6b874d-b67e-4417-982f-ad5bac3bf0f0_fixed.java
@@ -1,32 +1,58 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Handle typeOfThis resolution, including UnionType cases
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis.isUnionType()) {
+      UnionType unionType = (UnionType) resolvedTypeOfThis;
+      ObjectType objectType = null;
+      for (JSType alternate : unionType.getAlternates()) {
+        if (alternate.isObjectType()) {
+          if (objectType != null) {
+            // If multiple ObjectTypes are found, we'll use the first one
+            // and report a warning about ambiguous @this type
+            t.warning("Ambiguous @this type in union: multiple ObjectTypes found");
+            break;
+          }
+          objectType = (ObjectType) alternate;
+        }
+      }
+      if (objectType != null) {
+        typeOfThis = objectType;
+      } else {
+        // No ObjectType found in the union, report an error
+        t.error("No valid ObjectType found in @this union type");
+        typeOfThis = null; // Set to null or use a default ObjectType
+      }
+    } else if (resolvedTypeOfThis.isObjectType()) {
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else {
+      // Not a UnionType or ObjectType, report an error
+      t.error("Invalid @this type: expected ObjectType or UnionType containing ObjectType");
+      typeOfThis = null; // Set to null or use a default ObjectType
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
