diff --git a/tmp/ae6a535c-e1db-4323-ab0a-040e074826df_buggy.java b/tmp/58b98c73-8bad-4867-a884-c8eca06e2096_fixed.java
index 58a1651..95e08cc 100644
--- a/tmp/ae6a535c-e1db-4323-ab0a-040e074826df_buggy.java
+++ b/tmp/58b98c73-8bad-4867-a884-c8eca06e2096_fixed.java
@@ -1,32 +1,52 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Handle typeOfThis, allowing for UnionTypes and ensuring the type is an ObjectType.
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis.isUnionType()) {
+        UnionType unionType = (UnionType) resolvedTypeOfThis;
+        ObjectType objectType = null;
+        for (JSType alternate : unionType.getAlternateTypes()) {
+            if (alternate.isObjectType()) {
+                if (objectType == null) {
+                    objectType = (ObjectType) alternate;
+                } else {
+                    // If multiple ObjectTypes are found, choose the most specific one.
+                    // This logic can be adjusted based on the specific needs of your application.
+                    if (alternate.isSubtype(objectType)) {
+                        objectType = (ObjectType) alternate;
+                    }
+                }
+            }
+        }
+        typeOfThis = objectType; // If no ObjectType found, typeOfThis will be set to null.
+    } else if (resolvedTypeOfThis.isObjectType()) {
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else {
+        typeOfThis = null; // Or handle other cases as needed
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
