diff --git a/tmp/7c97688d-9dbe-4697-b57c-d484b55558b0_buggy.java b/tmp/b6805a56-3561-4d06-9a8c-1422b25300de_fixed.java
index 58a1651..243b92e 100644
--- a/tmp/7c97688d-9dbe-4697-b57c-d484b55558b0_buggy.java
+++ b/tmp/b6805a56-3561-4d06-9a8c-1422b25300de_fixed.java
@@ -1,32 +1,49 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Resolve typeOfThis, handling potential UnionType
+    JSType resolvedThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedThis instanceof UnionType) {
+        UnionType unionType = (UnionType) resolvedThis;
+        boolean foundValidThisType = false;
+        for (JSType alt : unionType.getAlternates()) {
+            if (alt.isObject() || alt.isUnknownType() || alt.isNullType()) {
+                foundValidThisType = true;
+                break;
+            }
+        }
+        if (!foundValidThisType) {
+            typeOfThis = getNativeType(JSTypeNative.UNKNOWN_TYPE);
+        } else {
+            typeOfThis = unionType;
+        }
+    } else if (resolvedThis.isObject() || resolvedThis.isUnknownType() || resolvedThis.isNullType()) {
+        typeOfThis = resolvedThis;
+    } else {
+        typeOfThis = getNativeType(JSTypeNative.UNKNOWN_TYPE);
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
