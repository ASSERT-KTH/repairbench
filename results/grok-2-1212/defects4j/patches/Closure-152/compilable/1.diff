diff --git a/tmp/eb79d325-ae15-42a3-8d39-45ad53c27f8d_buggy.java b/tmp/9ec97f61-d9c7-493d-82ba-1329bf82d09e_fixed.java
index 58a1651..d2e946f 100644
--- a/tmp/eb79d325-ae15-42a3-8d39-45ad53c27f8d_buggy.java
+++ b/tmp/9ec97f61-d9c7-493d-82ba-1329bf82d09e_fixed.java
@@ -1,32 +1,57 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Handle typeOfThis resolving to a UnionType or other types
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof UnionType) {
+        UnionType unionType = (UnionType) resolvedTypeOfThis;
+        JSType objectType = null;
+        for (JSType alt : unionType.getAlternates()) {
+            if (alt.isObject()) {
+                if (objectType == null) {
+                    objectType = alt;
+                } else {
+                    // If there are multiple object types in the union, we can't resolve to a single ObjectType
+                    objectType = null;
+                    break;
+                }
+            }
+        }
+        if (objectType != null && objectType.isObject()) {
+            typeOfThis = (ObjectType) objectType;
+        } else {
+            // If we can't find a single ObjectType, we need to handle this case appropriately
+            // For now, we'll set typeOfThis to null and let the upstream warning handle it
+            typeOfThis = null;
+        }
+    } else if (resolvedTypeOfThis instanceof ObjectType) {
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else {
+        // If it's not a UnionType or ObjectType, set to null and let the upstream warning handle it
+        typeOfThis = null;
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
