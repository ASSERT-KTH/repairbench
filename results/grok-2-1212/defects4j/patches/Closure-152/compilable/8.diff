diff --git a/tmp/00d83fda-18cf-441e-9351-abbc6423f946_buggy.java b/tmp/b0a1f5d1-1502-4e77-b083-0d8af2169b84_fixed.java
index 58a1651..d7e256c 100644
--- a/tmp/00d83fda-18cf-441e-9351-abbc6423f946_buggy.java
+++ b/tmp/b0a1f5d1-1502-4e77-b083-0d8af2169b84_fixed.java
@@ -1,32 +1,55 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Handle typeOfThis resolution correctly, including UnionType cases
+    JSType resolvedThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedThis instanceof UnionType) {
+      UnionType unionType = (UnionType) resolvedThis;
+      boolean hasObjectType = false;
+      JSType objectType = null;
+      for (JSType alt : unionType.getAlternates()) {
+        if (alt instanceof ObjectType) {
+          hasObjectType = true;
+          objectType = alt;
+          break;
+        }
+      }
+      if (hasObjectType) {
+        typeOfThis = (ObjectType) objectType;
+      } else {
+        // If no ObjectType is found in the union, we need to handle this case
+        // We can either leave typeOfThis as is or set it to null, depending on
+        // the desired behavior
+        typeOfThis = null;
+      }
+    } else if (resolvedThis instanceof ObjectType) {
+      typeOfThis = (ObjectType) resolvedThis;
+    } else {
+      // Handle non-ObjectType cases (e.g., primitive types)
+      typeOfThis = null;
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
