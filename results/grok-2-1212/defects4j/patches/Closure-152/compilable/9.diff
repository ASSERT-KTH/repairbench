diff --git a/tmp/eda97ee7-13ea-4f8a-a2ce-dc1e8d67d790_buggy.java b/tmp/f11df789-0ae3-4acd-8887-0e06d69d55e7_fixed.java
index 58a1651..2329952 100644
--- a/tmp/eda97ee7-13ea-4f8a-a2ce-dc1e8d67d790_buggy.java
+++ b/tmp/f11df789-0ae3-4acd-8887-0e06d69d55e7_fixed.java
@@ -1,32 +1,57 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof ObjectType) {
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else if (resolvedTypeOfThis instanceof UnionType) {
+      UnionType unionType = (UnionType) resolvedTypeOfThis;
+      ObjectType objectType = null;
+      for (JSType alt : unionType.getAlternates()) {
+        if (alt instanceof ObjectType) {
+          if (objectType != null) {
+            // If there are multiple ObjectTypes in the union, we need to decide which one to use or handle this case differently.
+            // For now, we'll pick the first one encountered.
+            break;
+          }
+          objectType = (ObjectType) alt;
+        }
+      }
+      if (objectType != null) {
+        typeOfThis = objectType;
+      } else {
+        // No ObjectType found in the union, handle this case appropriately (e.g., report an error, set to null, or use a default type)
+        typeOfThis = null; // Or handle this as per your error handling strategy
+      }
+    } else {
+      // Handle other types (e.g., null, void, etc.) as needed
+      typeOfThis = null; // Or handle this as per your error handling strategy
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
