diff --git a/tmp/0db742c9-91c4-4e3b-a3b9-197bf1ef88c8_buggy.java b/tmp/57004075-e824-45c9-8b33-52ab6eb1bfa4_fixed.java
index e0ecec8..36d8bc9 100644
--- a/tmp/0db742c9-91c4-4e3b-a3b9-197bf1ef88c8_buggy.java
+++ b/tmp/57004075-e824-45c9-8b33-52ab6eb1bfa4_fixed.java
@@ -1,35 +1,49 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+    boolean isVarArgs = functionType.isVarArgs();
+
+    while (arguments.hasNext()) {
       argument = arguments.next();
       ordinal++;
 
-      validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+      if (parameters.hasNext() || isVarArgs) {
+        if (parameters.hasNext()) {
+          parameter = parameters.next();
+        } else {
+          // For var_args, use the last parameter type
+          parameter = functionType.getLastParameter();
+        }
+
+        JSType argType = getJSType(argument);
+        JSType paramType = getJSType(parameter);
+
+        if (isVarArgs && !parameters.hasNext()) {
+          // For var_args, the type should be (paramType|undefined)
+          paramType = paramType.getLeastSupertype(JSTypeNative.VOID_TYPE);
+        }
+
+        validator.expectArgumentMatchesParameter(t, argument, argType, paramType, call, ordinal);
+      }
     }
 
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
