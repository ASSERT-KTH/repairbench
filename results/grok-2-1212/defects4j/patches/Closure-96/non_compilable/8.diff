diff --git a/tmp/4c8e2a8e-aa0c-49fe-affa-ac7aaacb046d_buggy.java b/tmp/6adb93e9-8e58-4552-8b5c-0ff89fceb35f_fixed.java
index e0ecec8..aac48d9 100644
--- a/tmp/4c8e2a8e-aa0c-49fe-affa-ac7aaacb046d_buggy.java
+++ b/tmp/6adb93e9-8e58-4552-8b5c-0ff89fceb35f_fixed.java
@@ -1,35 +1,53 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+
+  boolean isVarArgs = functionType.isVarArgs();
+  Node varArgsParameter = null;
+
+  while (arguments.hasNext()) {
     argument = arguments.next();
     ordinal++;
 
+    if (parameters.hasNext()) {
+      parameter = parameters.next();
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
+    } else if (isVarArgs) {
+      if (varArgsParameter == null) {
+        varArgsParameter = functionType.getParameters().get(functionType.getParameters().size() - 1);
+      }
+      JSType varArgsType = getJSType(varArgsParameter);
+      if (varArgsType.isArrayType()) {
+        varArgsType = varArgsType.getElementType();
+      }
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), varArgsType, call, ordinal);
+    } else {
+      // If we've run out of parameters and it's not a var_args function,
+      // the extra argument should be reported as an error.
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), null, call, ordinal);
+    }
   }
 
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
             validator.getReadableJSTypeName(call.getFirstChild(), false),
             String.valueOf(numArgs), String.valueOf(minArgs),
             maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
