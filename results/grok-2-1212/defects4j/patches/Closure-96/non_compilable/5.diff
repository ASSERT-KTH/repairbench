diff --git a/tmp/2a4f3797-ba9f-41aa-a9b6-7a3b73c39f3d_buggy.java b/tmp/377bea1c-64e6-47fe-9e24-1e8fa6d4e2b5_fixed.java
index e0ecec8..825d9b7 100644
--- a/tmp/2a4f3797-ba9f-41aa-a9b6-7a3b73c39f3d_buggy.java
+++ b/tmp/377bea1c-64e6-47fe-9e24-1e8fa6d4e2b5_fixed.java
@@ -1,35 +1,45 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+  boolean hasMoreParameters = true;
+
+  while (arguments.hasNext()) {
     argument = arguments.next();
     ordinal++;
 
+    if (hasMoreParameters && parameters.hasNext()) {
+      parameter = parameters.next();
+    } else if (functionType.isVarArgs()) {
+      // For var_args, use the last parameter type
+      parameter = functionType.getParameters().get(functionType.getParameters().size() - 1);
+    } else {
+      // No more parameters and not var_args, use undefined type
+      parameter = new Node(Token.NAME, "undefined");
+    }
+
     validator.expectArgumentMatchesParameter(t, argument,
         getJSType(argument), getJSType(parameter), call, ordinal);
+
+    hasMoreParameters = parameters.hasNext();
   }
 
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
             validator.getReadableJSTypeName(call.getFirstChild(), false),
             String.valueOf(numArgs), String.valueOf(minArgs),
             maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
