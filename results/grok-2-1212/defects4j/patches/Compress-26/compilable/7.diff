diff --git a/tmp/cbb73aae-052e-4e63-a135-123425a32236_buggy.java b/tmp/0a2bb277-bcb9-4d45-b85e-ac267ad672d8_fixed.java
index 4b163f6..7274b1c 100644
--- a/tmp/cbb73aae-052e-4e63-a135-123425a32236_buggy.java
+++ b/tmp/0a2bb277-bcb9-4d45-b85e-ac267ad672d8_fixed.java
@@ -1,28 +1,36 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
+ * the requested number of bytes has been skipped, this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
  * bytes if the end of the input stream has been reached.</p>
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
  * @throws IOException
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
+    long totalSkipped = 0;
+    byte[] buffer = new byte[1024];
+
+    while (totalSkipped < numToSkip) {
+        long skipped = input.skip(numToSkip - totalSkipped);
         if (skipped == 0) {
+            // skip() returned zero, try reading
+            int read = input.read(buffer, 0, (int) Math.min(buffer.length, numToSkip - totalSkipped));
+            if (read < 0) {
+                // EOF reached
                 break;
             }
-            numToSkip -= skipped;
+            skipped = read;
+        }
+        totalSkipped += skipped;
     }
 
-        return available - numToSkip;
+    return totalSkipped;
 }
\ No newline at end of file
