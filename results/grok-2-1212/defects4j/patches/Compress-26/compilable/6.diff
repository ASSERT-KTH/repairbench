diff --git a/tmp/92f2e104-040d-40ad-aa7a-f994343539a6_buggy.java b/tmp/9f5f3de8-63e2-4d93-91c6-0f767ef8f89e_fixed.java
index 4b163f6..809f60b 100644
--- a/tmp/92f2e104-040d-40ad-aa7a-f994343539a6_buggy.java
+++ b/tmp/9f5f3de8-63e2-4d93-91c6-0f767ef8f89e_fixed.java
@@ -1,28 +1,33 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
  * the requested number of bytes has been skip this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
  * bytes if the end of the input stream has been reached.</p>
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
  * @throws IOException
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
+    long totalSkipped = 0;
+    while (totalSkipped < numToSkip) {
+        long skipped = input.skip(numToSkip - totalSkipped);
         if (skipped == 0) {
+            // If skip returns 0, try reading a byte
+            int b = input.read();
+            if (b == -1) {
+                // End of stream reached
                 break;
             }
-            numToSkip -= skipped;
+            skipped = 1; // We successfully skipped 1 byte by reading it
         }
-            
-        return available - numToSkip;
+        totalSkipped += skipped;
+    }
+    return totalSkipped;
 }
\ No newline at end of file
