diff --git a/tmp/11ae93a1-4b39-4ca6-b2d6-2c7a9f436065_buggy.java b/tmp/42db4504-7efa-4b5d-b99b-cc56f7cc6534_fixed.java
index 66e3d01..5dc2a98 100644
--- a/tmp/11ae93a1-4b39-4ca6-b2d6-2c7a9f436065_buggy.java
+++ b/tmp/42db4504-7efa-4b5d-b99b-cc56f7cc6534_fixed.java
@@ -1,34 +1,44 @@
 /**
  * Determines whether the given value may be assigned to a define.
  *
  * @param val The value being assigned.
  * @param defines The list of names of existing defines.
  */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
         case Token.STRING:
         case Token.NUMBER:
         case Token.TRUE:
         case Token.FALSE:
             return true;
 
         // Binary operators are only valid if both children are valid.
         case Token.BITAND:
         case Token.BITNOT:
         case Token.BITOR:
         case Token.BITXOR:
+        case Token.ADD:
+            if (val.getChildCount() == 2) {
+                return isValidDefineValue(val.getFirstChild(), defines) &&
+                       isValidDefineValue(val.getLastChild(), defines);
+            }
+            return false;
 
-      // Uniary operators are valid if the child is valid.
+        // Unary operators are valid if the child is valid.
         case Token.NOT:
         case Token.NEG:
+            if (val.getChildCount() == 1) {
                 return isValidDefineValue(val.getFirstChild(), defines);
+            }
+            return false;
 
         // Names are valid if and only if they are defines themselves.
         case Token.NAME:
         case Token.GETPROP:
             if (val.isQualifiedName()) {
                 return defines.contains(val.getQualifiedName());
             }
+            return false;
     }
     return false;
 }
\ No newline at end of file
