diff --git a/tmp/3f8edb33-4300-4684-8f4a-6eada2075e66_buggy.java b/tmp/1fb0bc18-bfbb-41fa-b43e-fba67fb83349_fixed.java
index 66e3d01..e47585a 100644
--- a/tmp/3f8edb33-4300-4684-8f4a-6eada2075e66_buggy.java
+++ b/tmp/1fb0bc18-bfbb-41fa-b43e-fba67fb83349_fixed.java
@@ -1,34 +1,51 @@
 /**
  * Determines whether the given value may be assigned to a define.
  *
  * @param val The value being assigned.
  * @param defines The list of names of existing defines.
  */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
         case Token.STRING:
         case Token.NUMBER:
         case Token.TRUE:
         case Token.FALSE:
             return true;
 
         // Binary operators are only valid if both children are valid.
         case Token.BITAND:
         case Token.BITNOT:
         case Token.BITOR:
         case Token.BITXOR:
+            return isValidDefineValue(val.getFirstChild(), defines) &&
+                   isValidDefineValue(val.getLastChild(), defines);
 
-      // Uniary operators are valid if the child is valid.
+        // Unary operators are valid if the child is valid.
         case Token.NOT:
-      case Token.NEG:
             return isValidDefineValue(val.getFirstChild(), defines);
 
+        case Token.NEG:
+            // NEG is valid only if the child is a number
+            Node child = val.getFirstChild();
+            return child.getType() == Token.NUMBER && isValidDefineValue(child, defines);
+
+        // Addition is allowed for string concatenation
+        case Token.ADD:
+            return isValidDefineValue(val.getFirstChild(), defines) &&
+                   isValidDefineValue(val.getLastChild(), defines);
+
         // Names are valid if and only if they are defines themselves.
         case Token.NAME:
         case Token.GETPROP:
             if (val.isQualifiedName()) {
                 return defines.contains(val.getQualifiedName());
             }
+            break;
+
+        // Explicitly check for invalid values
+        case Token.NULL:
+        case Token.VOID: // void is used for undefined in some cases
+            return false;
     }
     return false;
 }
\ No newline at end of file
