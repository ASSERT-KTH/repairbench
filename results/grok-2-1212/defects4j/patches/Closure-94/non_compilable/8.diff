diff --git a/tmp/22ae1aa2-6a5b-45d4-9218-277a88feabc9_buggy.java b/tmp/57eb4189-72e6-4acf-b94b-c34c31274cf3_fixed.java
index 66e3d01..f9289c3 100644
--- a/tmp/22ae1aa2-6a5b-45d4-9218-277a88feabc9_buggy.java
+++ b/tmp/57eb4189-72e6-4acf-b94b-c34c31274cf3_fixed.java
@@ -1,34 +1,50 @@
 /**
  * Determines whether the given value may be assigned to a define.
  *
  * @param val The value being assigned.
  * @param defines The list of names of existing defines.
  */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
         case Token.STRING:
         case Token.NUMBER:
         case Token.TRUE:
         case Token.FALSE:
             return true;
 
+        // Unary operators are valid if the child is valid.
+        case Token.NOT:
+        case Token.NEG:
+        case Token.BITNOT:
+            return isValidDefineValue(val.getFirstChild(), defines);
+
         // Binary operators are only valid if both children are valid.
         case Token.BITAND:
-      case Token.BITNOT:
         case Token.BITOR:
         case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
-      case Token.NOT:
-      case Token.NEG:
-        return isValidDefineValue(val.getFirstChild(), defines);
+        case Token.ADD:
+            Node left = val.getFirstChild();
+            Node right = left.getNext();
+            return isValidDefineValue(left, defines) && isValidDefineValue(right, defines);
 
         // Names are valid if and only if they are defines themselves.
         case Token.NAME:
+            return defines.contains(val.getString());
+
+        // Property access is valid if the property name is a define.
         case Token.GETPROP:
-        if (val.isQualifiedName()) {
-          return defines.contains(val.getQualifiedName());
-        }
+            Node propName = val.getLastChild();
+            return propName.isString() && defines.contains(propName.getString());
+
+        // Allow string concatenation with constants
+        case Token.ADD:
+            if (val.getFirstChild().getType() == Token.STRING &&
+                val.getLastChild().getType() == Token.STRING) {
+                return true;
             }
+            // Fall through to default case if not string concatenation
+
+        default:
             return false;
     }
+}
\ No newline at end of file
