diff --git a/tmp/bf2fb70f-7477-40a4-a567-8025f55cab97_buggy.java b/tmp/c9c3bdaa-bf78-4fbe-836a-71f74cedbf2d_fixed.java
index 66e3d01..9b6024f 100644
--- a/tmp/bf2fb70f-7477-40a4-a567-8025f55cab97_buggy.java
+++ b/tmp/c9c3bdaa-bf78-4fbe-836a-71f74cedbf2d_fixed.java
@@ -1,34 +1,43 @@
 /**
  * Determines whether the given value may be assigned to a define.
  *
  * @param val The value being assigned.
  * @param defines The list of names of existing defines.
  */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
         case Token.STRING:
         case Token.NUMBER:
         case Token.TRUE:
         case Token.FALSE:
             return true;
 
-      // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
-      case Token.BITNOT:
-      case Token.BITOR:
-      case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
+        // Unary operators are valid if the child is valid.
         case Token.NOT:
         case Token.NEG:
+        case Token.BITNOT:
             return isValidDefineValue(val.getFirstChild(), defines);
 
+        // Binary operators are valid if both children are valid.
+        case Token.BITAND:
+        case Token.BITOR:
+        case Token.BITXOR:
+        case Token.ADD:
+            Node left = val.getFirstChild();
+            Node right = left.getNext();
+            return isValidDefineValue(left, defines) && isValidDefineValue(right, defines);
+
         // Names are valid if and only if they are defines themselves.
         case Token.NAME:
         case Token.GETPROP:
             if (val.isQualifiedName()) {
                 return defines.contains(val.getQualifiedName());
             }
+            break;
+
+        // Handle string concatenation as a special case
+        case Token.STRING_KEY:
+            return true;
     }
     return false;
 }
\ No newline at end of file
