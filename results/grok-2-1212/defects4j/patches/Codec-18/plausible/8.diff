diff --git a/tmp/20baed1c-c3f0-48b1-8926-e239abe2f66b_buggy.java b/tmp/2556786b-aa32-4526-ad53-0002c58b8920_fixed.java
index ae1bc64..e0c8762 100644
--- a/tmp/20baed1c-c3f0-48b1-8926-e239abe2f66b_buggy.java
+++ b/tmp/2556786b-aa32-4526-ad53-0002c58b8920_fixed.java
@@ -1,42 +1,36 @@
-    /**
-     * <p>
-     * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.
-     * </p>
-     *
-     * <p>
-     * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.
-     * The comparison is case sensitive.
-     * </p>
-     *
-     * <pre>
-     * StringUtils.equals(null, null)   = true
-     * StringUtils.equals(null, "abc")  = false
-     * StringUtils.equals("abc", null)  = false
-     * StringUtils.equals("abc", "abc") = true
-     * StringUtils.equals("abc", "ABC") = false
-     * </pre>
-     *
-     * <p>
-     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).
-     * </p>
-     *
-     * @see Object#equals(Object)
-     * @param cs1
-     *            the first CharSequence, may be <code>null</code>
-     * @param cs2
-     *            the second CharSequence, may be <code>null</code>
-     * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>
-     * @since 1.10
-     */
 public static boolean equals(final CharSequence cs1, final CharSequence cs2) {
     if (cs1 == cs2) {
         return true;
     }
     if (cs1 == null || cs2 == null) {
         return false;
     }
     if (cs1 instanceof String && cs2 instanceof String) {
         return cs1.equals(cs2);
     }
-        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
+    int length = Math.min(cs1.length(), cs2.length());
+    return regionMatches(cs1, false, 0, cs2, 0, length) && cs1.length() == cs2.length();
+}
+
+private static boolean regionMatches(final CharSequence cs1, final boolean ignoreCase, final int thisStart, final CharSequence cs2, final int start, final int length) {
+    if (cs1 instanceof String && cs2 instanceof String) {
+        return ((String) cs1).regionMatches(ignoreCase, thisStart, (String) cs2, start, length);
+    } else {
+        for (int i = 0; i < length; i++) {
+            char c1 = cs1.charAt(thisStart + i);
+            char c2 = cs2.charAt(start + i);
+            if (c1 != c2) {
+                if (!ignoreCase) {
+                    return false;
+                }
+                // If characters differ but case-insensitive comparison requested
+                char u1 = Character.toUpperCase(c1);
+                char u2 = Character.toUpperCase(c2);
+                if (u1 != u2 && Character.toLowerCase(u1) != Character.toLowerCase(u2)) {
+                    return false;
+                }
+            }
+        }
+        return true;
+    }
 }
\ No newline at end of file
