diff --git a/tmp/0b5d6de2-2032-4811-8f60-d44e847e221b_buggy.java b/tmp/5f1ee8e0-476f-4bb5-a62e-f3f6c005b004_fixed.java
index fecb896..8f45419 100644
--- a/tmp/0b5d6de2-2032-4811-8f60-d44e847e221b_buggy.java
+++ b/tmp/5f1ee8e0-476f-4bb5-a62e-f3f6c005b004_fixed.java
@@ -1,34 +1,53 @@
 /**
  * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
  * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
  * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
  * contains text strings; use unescape for that.
  * @param open opener
  * @param close closer
  * @return data matched from the queue
  */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
+    boolean inQuote = false;
+    char quoteChar = 0;
 
     do {
         if (isEmpty()) break;
         Character c = consume();
-            if (last == 0 || last != ESC) {
+        
+        if (inQuote) {
+            if (c == quoteChar && last != ESC) {
+                inQuote = false;
+            }
+        } else if (c == '\'' || c == '"') {
+            inQuote = true;
+            quoteChar = c;
+        } else if (last != ESC) {
             if (c.equals(open)) {
                 depth++;
-                    if (start == -1)
-                        start = pos;
+                if (start == -1) {
+                    start = pos - 1; // include the opening character
                 }
-                else if (c.equals(close))
+            } else if (c.equals(close)) {
                 depth--;
             }
+        }
+
+        if (depth == 0 && start != -1) {
+            end = pos;
+            break;
+        }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
         last = c;
     } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+
+    if (end > start) {
+        return queue.substring(start, end);
+    } else {
+        return "";
+    }
 }
\ No newline at end of file
