diff --git a/tmp/b0c2e1d3-de73-4f55-b17e-b4c43eeb852c_buggy.java b/tmp/3ece23b0-6140-45b7-9ff9-735bff4df5ea_fixed.java
index fecb896..343b599 100644
--- a/tmp/b0c2e1d3-de73-4f55-b17e-b4c43eeb852c_buggy.java
+++ b/tmp/3ece23b0-6140-45b7-9ff9-735bff4df5ea_fixed.java
@@ -1,34 +1,57 @@
 /**
  * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
  * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
  * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
  * contains text strings; use unescape for that.
  * @param open opener
  * @param close closer
  * @return data matched from the queue
  */
 public String chompBalanced(char open, char close) {
     int start = -1;
-        int end = -1;
+    StringBuilder accum = new StringBuilder();
     int depth = 0;
     char last = 0;
+    boolean inQuotes = false;
+    char quoteChar = 0;
 
     do {
         if (isEmpty()) break;
         Character c = consume();
+        
+        if (inQuotes) {
+            if (c == quoteChar && last != ESC) {
+                inQuotes = false;
+            }
+            accum.append(c);
+            last = c;
+            continue;
+        }
+
+        if ((c == '\'' || c == '"') && last != ESC) {
+            inQuotes = true;
+            quoteChar = c;
+            accum.append(c);
+            last = c;
+            continue;
+        }
+
         if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+            if (c == open) {
                 depth++;
-                    if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+                if (start == -1) start = pos - 1;
+            } else if (c == close) {
                 depth--;
             }
+        }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+        accum.append(c);
         last = c;
     } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+
+    if (depth == 0 && start >= 0) {
+        return accum.substring(start + 1, accum.length() - 1);
+    } else {
+        return "";
+    }
 }
\ No newline at end of file
