diff --git a/tmp/5f1cfb9f-fea6-4197-b93b-bf27e8b7764c_buggy.java b/tmp/57eab80c-2248-42b9-8742-0fe5b6081343_fixed.java
index 40f74f7..b3a9b3f 100644
--- a/tmp/5f1cfb9f-fea6-4197-b93b-bf27e8b7764c_buggy.java
+++ b/tmp/57eab80c-2248-42b9-8742-0fe5b6081343_fixed.java
@@ -1,50 +1,66 @@
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
         if (node.getNodeType() != Node.ELEMENT_NODE) {
             return false;
         }
 
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName testName = nodeNameTest.getNodeName();
         String namespaceURI = nodeNameTest.getNamespaceURI();
         boolean wildcard = nodeNameTest.isWildcard();
         String testPrefix = testName.getPrefix();
         if (wildcard && testPrefix == null) {
             return true;
         }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+        String localName = DOMNodePointer.getLocalName(node);
         String nodeNS = DOMNodePointer.getNamespaceURI(node);
+        
+        if (wildcard) {
+            // Handle wildcard with namespace
+            if (testPrefix != null) {
+                String nodePrefix = node.getPrefix();
+                if (nodePrefix == null || !nodePrefix.equals(testPrefix)) {
+                    return false;
+                }
+            }
+            return equalStrings(namespaceURI, nodeNS);
+        } else if (testName.getName().equals(localName)) {
+            // Handle specific name match
+            if (testPrefix != null) {
+                String nodePrefix = node.getPrefix();
+                if (nodePrefix == null || !nodePrefix.equals(testPrefix)) {
+                    return false;
+                }
+            }
             return equalStrings(namespaceURI, nodeNS);
         }
         return false;
     }
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
             case Compiler.NODE_TYPE_NODE :
                 return nodeType == Node.ELEMENT_NODE
                         || nodeType == Node.DOCUMENT_NODE;
             case Compiler.NODE_TYPE_TEXT :
                 return nodeType == Node.CDATA_SECTION_NODE
                     || nodeType == Node.TEXT_NODE;
             case Compiler.NODE_TYPE_COMMENT :
                 return nodeType == Node.COMMENT_NODE;
             case Compiler.NODE_TYPE_PI :
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
         return false;
     }
     if (test instanceof ProcessingInstructionTest) {
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
             return testPI.equals(nodePI);
         }
     }
     return false;
 }
\ No newline at end of file
