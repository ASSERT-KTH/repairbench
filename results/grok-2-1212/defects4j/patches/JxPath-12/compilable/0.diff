diff --git a/tmp/dbbba8c4-a592-49c6-92aa-3a7bb87b56ce_buggy.java b/tmp/2baf22d8-9d67-4b2b-afea-49fe66826fa7_fixed.java
index 40f74f7..96a4f24 100644
--- a/tmp/dbbba8c4-a592-49c6-92aa-3a7bb87b56ce_buggy.java
+++ b/tmp/2baf22d8-9d67-4b2b-afea-49fe66826fa7_fixed.java
@@ -1,50 +1,59 @@
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
         if (node.getNodeType() != Node.ELEMENT_NODE) {
             return false;
         }
 
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName testName = nodeNameTest.getNodeName();
         String namespaceURI = nodeNameTest.getNamespaceURI();
         boolean wildcard = nodeNameTest.isWildcard();
         String testPrefix = testName.getPrefix();
-            if (wildcard && testPrefix == null) {
-                return true;
-            }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+        String localName = DOMNodePointer.getLocalName(node);
         String nodeNS = DOMNodePointer.getNamespaceURI(node);
+
+        if (wildcard) {
+            if (testPrefix == null) {
+                // Match any element with the given namespace
                 return equalStrings(namespaceURI, nodeNS);
+            } else {
+                // Match any element with the given namespace and prefix
+                String nodePrefix = node.getPrefix();
+                return equalStrings(namespaceURI, nodeNS) && 
+                       (testPrefix.equals(nodePrefix) || 
+                        (nodePrefix == null && testPrefix.isEmpty()));
+            }
+        } else {
+            // Match element with exact name and namespace
+            return testName.getName().equals(localName) &&
+                   equalStrings(namespaceURI, nodeNS);
         }
-            return false;
     }
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
             case Compiler.NODE_TYPE_NODE :
                 return nodeType == Node.ELEMENT_NODE
                         || nodeType == Node.DOCUMENT_NODE;
             case Compiler.NODE_TYPE_TEXT :
                 return nodeType == Node.CDATA_SECTION_NODE
                     || nodeType == Node.TEXT_NODE;
             case Compiler.NODE_TYPE_COMMENT :
                 return nodeType == Node.COMMENT_NODE;
             case Compiler.NODE_TYPE_PI :
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
         return false;
     }
     if (test instanceof ProcessingInstructionTest) {
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
             return testPI.equals(nodePI);
         }
     }
     return false;
 }
\ No newline at end of file
