diff --git a/tmp/c1e20214-1b45-41d4-8bcf-6564e75fd1e2_buggy.java b/tmp/e95b8725-3e28-4500-9076-6781f30e7bff_fixed.java
index 757067a..eb6cf43 100644
--- a/tmp/c1e20214-1b45-41d4-8bcf-6564e75fd1e2_buggy.java
+++ b/tmp/e95b8725-3e28-4500-9076-6781f30e7bff_fixed.java
@@ -1,63 +1,74 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
+     * (even if it <em>is</em> a root), or if the interval does not properly
+     * bracket a root
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        // Evaluate function values
+        double yMin = f.value(min);
+        double yMax = f.value(max);
         double yInitial = f.value(initial);
+
+        // Check if the interval brackets a root
+        if (yMin * yMax > 0) {
+            throw new IllegalArgumentException("Interval does not bracket a root: " + min + " to " + max);
+        }
+
+        // Check if the initial guess and one endpoint bracket a root
+        if (yInitial * yMin > 0 && yInitial * yMax > 0) {
+            throw new IllegalArgumentException("Initial guess does not help bracket a root: " + initial);
+        }
+
+        // Return the initial guess if it is good enough
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
-        // return the first endpoint if it is good enough
-        double yMin = f.value(min);
+        // Return the first endpoint if it is good enough
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            setResult(min, 0);
+            return min;
         }
 
-        // reduce interval if min and initial bracket the root
+        // Return the second endpoint if it is good enough
+        if (Math.abs(yMax) <= functionValueAccuracy) {
+            setResult(max, 0);
+            return max;
+        }
+
+        // Reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
-        // return the second endpoint if it is good enough
-        double yMax = f.value(max);
-        if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
-        }
-
-        // reduce interval if initial and max bracket the root
+        // Reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
-
-        // full Brent algorithm starting with provided initial guess
+        // Full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);
-
     }
\ No newline at end of file
