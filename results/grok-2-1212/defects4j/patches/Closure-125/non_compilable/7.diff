diff --git a/tmp/5d31df3c-5b5e-4553-a90c-c9a3bac9b0ba_buggy.java b/tmp/d2053816-246c-4803-bd4b-3308f4f76948_fixed.java
index 7e43c1c..3f9ea03 100644
--- a/tmp/5d31df3c-5b5e-4553-a90c-c9a3bac9b0ba_buggy.java
+++ b/tmp/d2053816-246c-4803-bd4b-3308f4f76948_fixed.java
@@ -1,19 +1,34 @@
 /**
  * Visits a NEW node.
  */
 private void visitNew(NodeTraversal t, Node n) {
     Node constructor = n.getFirstChild();
     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
-    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
+    
+    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType() || type.isInterface()) {
         FunctionType fnType = type.toMaybeFunctionType();
         if (fnType != null) {
             visitParameterList(t, n, fnType);
-        ensureTyped(t, n, fnType.getInstanceType());
+            JSType instanceType = fnType.getInstanceType();
+            
+            // If the instance type is an interface, we need to check if it's implemented by a constructor
+            if (instanceType.isInterface()) {
+                // Check if there's any implementing class
+                for (ObjectType implementingType : instanceType.getImplicitPrototype().getAllImplementedInterfaces()) {
+                    FunctionType implementingFnType = implementingType.getConstructor();
+                    if (implementingFnType != null) {
+                        instanceType = implementingFnType.getInstanceType();
+                        break;
+                    }
+                }
+            }
+            
+            ensureTyped(t, n, instanceType);
         } else {
             ensureTyped(t, n);
         }
     } else {
         report(t, n, NOT_A_CONSTRUCTOR);
         ensureTyped(t, n);
     }
 }
\ No newline at end of file
