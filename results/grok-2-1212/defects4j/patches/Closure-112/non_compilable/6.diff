diff --git a/tmp/8f2a232a-e0f1-457f-bc5e-cc03494bcb86_buggy.java b/tmp/9c265203-1d4e-4186-8d4d-80eac1ad4058_fixed.java
index 63641d0..6bd3296 100644
--- a/tmp/8f2a232a-e0f1-457f-bc5e-cc03494bcb86_buggy.java
+++ b/tmp/9c265203-1d4e-4186-8d4d-80eac1ad4058_fixed.java
@@ -1,33 +1,49 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
-  private boolean inferTemplatedTypesForCall(
-      Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+private boolean inferTemplatedTypesForCall(Node n, FunctionType fnType) {
+    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap().getTemplateKeys();
     if (keys.isEmpty()) {
         return false;
     }
 
-    // Try to infer the template types
-    Map<TemplateType, JSType> inferred =
-        inferTemplateTypesFromParameters(fnType, n);
+    // Try to infer the template types from parameters and 'this' type
+    Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);
+    Map<TemplateType, JSType> inferredFromThis = inferTemplateTypesFromThis(fnType, n);
 
+    // Merge the inferred types
+    for (Map.Entry<TemplateType, JSType> entry : inferredFromThis.entrySet()) {
+        if (!inferred.containsKey(entry.getKey()) || inferred.get(entry.getKey()) == null) {
+            inferred.put(entry.getKey(), entry.getValue());
+        }
+    }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+    // Replace all template types. If we couldn't find a replacement, we replace it with UNKNOWN.
+    TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);
     Node callTarget = n.getFirstChild();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+    FunctionType replacementFnType = fnType.visit(replacer).toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
-    n.setJSType(replacementFnType.getReturnType());
+
+    // Update the return type of the call node
+    JSType returnType = replacementFnType.getReturnType();
+    if (returnType != null) {
+        n.setJSType(returnType);
+    } else {
+        n.setJSType(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
+    }
 
     return replacer.madeChanges;
 }
+
+// Add this new helper method to infer template types from 'this' type
+private Map<TemplateType, JSType> inferTemplateTypesFromThis(FunctionType fnType, Node n) {
+    Map<TemplateType, JSType> inferred = new HashMap<>();
+    Node thisNode = n.getSecondChild();
+    if (thisNode != null && thisNode.isThis()) {
+        JSType thisType = thisNode.getJSType();
+        if (thisType != null) {
+            inferred = fnType.getTemplateTypeMap().createInstantiatedTypesFromThisType(thisType);
+        }
+    }
+    return inferred;
+}
\ No newline at end of file
