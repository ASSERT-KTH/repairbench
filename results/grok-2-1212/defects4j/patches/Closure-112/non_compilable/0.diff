diff --git a/tmp/6ebf234c-f7ee-47bb-9442-87422e4c04ca_buggy.java b/tmp/98bda8c1-f101-4806-bfdb-93a25ff765b4_fixed.java
index 63641d0..0b6d9c4 100644
--- a/tmp/6ebf234c-f7ee-47bb-9442-87422e4c04ca_buggy.java
+++ b/tmp/98bda8c1-f101-4806-bfdb-93a25ff765b4_fixed.java
@@ -1,33 +1,37 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // Create a copy of the function type to avoid modifying the original
+    FunctionType newFnType = fnType.cloneWithoutTemplateKeys();
 
     // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+    // use the original template type instead of UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
-    Node callTarget = n.getFirstChild();
-
-    FunctionType replacementFnType = fnType.visit(replacer)
+        registry, inferred, true /* preserveUnknownTypes */);
+    FunctionType replacementFnType = newFnType.visit(replacer)
         .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
+    if (replacementFnType == null) {
+      // If the replacement fails, use the original function type
+      replacementFnType = fnType;
+    }
 
+    Node callTarget = n.getFirstChild();
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
