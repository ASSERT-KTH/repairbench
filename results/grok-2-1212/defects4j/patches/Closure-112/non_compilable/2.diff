diff --git a/tmp/6c865577-4526-4ee7-812c-0fd084f75538_buggy.java b/tmp/d35c3fa6-5cb1-4fac-948f-220352d563ce_fixed.java
index 63641d0..d8aa728 100644
--- a/tmp/6c865577-4526-4ee7-812c-0fd084f75538_buggy.java
+++ b/tmp/d35c3fa6-5cb1-4fac-948f-220352d563ce_fixed.java
@@ -1,33 +1,63 @@
 /**
  * For functions with function(this: T, ...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
  * the actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // Consider the 'this' type for inference
+  JSType thisType = n.getFirstChild().getJSType();
+  if (thisType != null) {
+    inferred = inferTemplateTypesFromThisType(fnType, thisType, inferred);
+  }
 
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
       registry, inferred);
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
       .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
+  if (replacementFnType == null) {
+    // If the replacement type is not a function, use the original function type
+    replacementFnType = fnType;
+  }
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
+
+/**
+ * Infers template types based on the 'this' type of the function call.
+ * 
+ * @param fnType The function type being called
+ * @param thisType The 'this' type of the function call
+ * @param initialInference The initial type inference from parameters
+ * @return A map of inferred template types
+ */
+private Map<TemplateType, JSType> inferTemplateTypesFromThisType(
+    FunctionType fnType, JSType thisType, Map<TemplateType, JSType> initialInference) {
+  Map<TemplateType, JSType> inferred = new HashMap<>(initialInference);
+  for (TemplateType key : fnType.getTemplateTypeMap().getTemplateKeys()) {
+    if (!inferred.containsKey(key)) {
+      JSType inferredType = thisType.getTemplateTypeIfUnique(key);
+      if (inferredType != null) {
+        inferred.put(key, inferredType);
+      }
+    }
+  }
+  return inferred;
+}
\ No newline at end of file
