diff --git a/tmp/8d3b560a-8b98-4212-ab92-090882de7323_buggy.java b/tmp/2fd58595-bdce-492a-8d3a-b18407d80049_fixed.java
index 63641d0..3d326ff 100644
--- a/tmp/8d3b560a-8b98-4212-ab92-090882de7323_buggy.java
+++ b/tmp/2fd58595-bdce-492a-8d3a-b18407d80049_fixed.java
@@ -1,33 +1,53 @@
 /**
  * For functions with function(this: T, ...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
  * the actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // Create a new map to store the final inferred types
+  Map<TemplateType, JSType> finalInferred = new HashMap<>(inferred);
+
+  // Iterate through the function's template types
+  for (TemplateType key : keys) {
+    JSType type = inferred.get(key);
+    if (type != null && type.isFunctionType()) {
+      // If the inferred type is a function type, recursively infer its template types
+      FunctionType funcType = type.toMaybeFunctionType();
+      if (funcType != null) {
+        Map<TemplateType, JSType> nestedInferred = inferTemplateTypesFromParameters(funcType, n);
+        for (Map.Entry<TemplateType, JSType> entry : nestedInferred.entrySet()) {
+          finalInferred.put(entry.getKey(), entry.getValue());
+        }
+      }
+    }
+  }
 
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+      registry, finalInferred);
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
       .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
+  if (replacementFnType == null) {
+    // If we couldn't create a function type, use the original type
+    replacementFnType = fnType;
+  }
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
