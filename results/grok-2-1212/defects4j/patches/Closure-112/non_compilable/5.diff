diff --git a/tmp/23fd36c5-77ed-488d-b5d6-78c4c75592e0_buggy.java b/tmp/b9689a21-f9cf-4967-aa5d-1859bf5f8b4a_fixed.java
index 63641d0..9d80e93 100644
--- a/tmp/23fd36c5-77ed-488d-b5d6-78c4c75592e0_buggy.java
+++ b/tmp/b9689a21-f9cf-4967-aa5d-1859bf5f8b4a_fixed.java
@@ -1,33 +1,44 @@
 /**
  * For functions with function(this: T, ...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
  * the actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // Handle self-referential types and multiple template types
+  Map<TemplateType, JSType> resolved = new HashMap<>(inferred);
+  for (TemplateType key : keys) {
+    if (!resolved.containsKey(key)) {
+      JSType defaultValue = key.isSelfReferential() ? 
+          fnType.getTypeOfThis() : 
+          registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
+      resolved.put(key, defaultValue);
+    }
+  }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+  // Replace all template types using the resolved map
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+      registry, resolved);
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
       .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
+  if (replacementFnType == null) {
+    replacementFnType = fnType;
+  }
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
