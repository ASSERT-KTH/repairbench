diff --git a/tmp/dd65ab54-be87-4729-85bd-f4cc8fad093e_buggy.java b/tmp/029f41eb-50d1-40e0-b69d-e4ecd321d8c3_fixed.java
index 63641d0..57b5c56 100644
--- a/tmp/dd65ab54-be87-4729-85bd-f4cc8fad093e_buggy.java
+++ b/tmp/029f41eb-50d1-40e0-b69d-e4ecd321d8c3_fixed.java
@@ -1,33 +1,43 @@
 /**
  * For functions with function(this: T, ...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
  * the actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
-
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
       registry, inferred);
   Node callTarget = n.getFirstChild();
 
+  // Create a new FunctionType with the inferred types
   FunctionType replacementFnType = fnType.visit(replacer)
       .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
+  if (replacementFnType == null) {
+    // If we can't create a new FunctionType, use the original one
+    replacementFnType = fnType;
+  }
 
   callTarget.setJSType(replacementFnType);
-    n.setJSType(replacementFnType.getReturnType());
+
+  // Set the return type of the node
+  JSType returnType = replacementFnType.getReturnType();
+  if (returnType == null || returnType.isUnknownType()) {
+    // If we can't determine the return type, use the original one
+    returnType = fnType.getReturnType();
+  }
+  n.setJSType(returnType);
 
   return replacer.madeChanges;
 }
\ No newline at end of file
