diff --git a/tmp/20e758f6-8bc2-40e8-b22a-6924f04369cc_buggy.java b/tmp/8086c0c9-9c58-4086-a87e-7729b93097fd_fixed.java
index 63641d0..8d08608 100644
--- a/tmp/20e758f6-8bc2-40e8-b22a-6924f04369cc_buggy.java
+++ b/tmp/8086c0c9-9c58-4086-a87e-7729b93097fd_fixed.java
@@ -1,33 +1,45 @@
 /**
  * For functions with function(this: T, ...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
  * the actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
-
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+  // Create a replacer that will replace all template types. If we couldn't 
+  // find a replacement, we replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
       registry, inferred);
-    Node callTarget = n.getFirstChild();
 
+  // Visit the function type with the replacer
   FunctionType replacementFnType = fnType.visit(replacer)
       .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
   
+  // If replacementFnType is null, it means that the template type inference 
+  // failed completely. In this case, we should not modify the call target 
+  // or return type.
+  if (replacementFnType == null) {
+    return replacer.madeChanges;
+  }
+
+  Node callTarget = n.getFirstChild();
   callTarget.setJSType(replacementFnType);
-    n.setJSType(replacementFnType.getReturnType());
+
+  // Set the return type of the call node
+  JSType returnType = replacementFnType.getReturnType();
+  if (returnType == null) {
+    returnType = registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
+  }
+  n.setJSType(returnType);
 
   return replacer.madeChanges;
 }
\ No newline at end of file
