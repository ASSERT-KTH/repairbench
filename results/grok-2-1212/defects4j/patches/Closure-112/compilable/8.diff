diff --git a/tmp/713890dc-f5c9-4bc7-87aa-cd2f643cc700_buggy.java b/tmp/48c34d60-f0a3-420b-9f21-f54a74f71082_fixed.java
index 63641d0..afb48a3 100644
--- a/tmp/713890dc-f5c9-4bc7-87aa-cd2f643cc700_buggy.java
+++ b/tmp/48c34d60-f0a3-420b-9f21-f54a74f71082_fixed.java
@@ -1,33 +1,45 @@
 /**
  * For functions with function(this: T, ...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
  * the actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // Handle 'this' type separately
+  JSType thisType = fnType.getTypeOfThis();
+  if (thisType.isTemplateType()) {
+    TemplateType thisTemplate = (TemplateType) thisType;
+    JSType actualThisType = n.getJSType();
+    if (actualThisType != null && !actualThisType.isUnknownType()) {
+      inferred.put(thisTemplate, actualThisType);
+    }
+  }
 
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
       registry, inferred);
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
       .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
+  if (replacementFnType == null) {
+    // If the replacement failed, return early without changes
+    return false;
+  }
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
