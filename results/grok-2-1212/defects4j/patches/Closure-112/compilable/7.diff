diff --git a/tmp/4fc8bf54-e31d-4182-9a8a-218faaa0352f_buggy.java b/tmp/9ecec068-9543-4ae5-adb1-79752a384031_fixed.java
index 63641d0..08473d7 100644
--- a/tmp/4fc8bf54-e31d-4182-9a8a-218faaa0352f_buggy.java
+++ b/tmp/9ecec068-9543-4ae5-adb1-79752a384031_fixed.java
@@ -1,33 +1,55 @@
 /**
  * For functions with function(this: T, ...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
  * the actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
-
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
       registry, inferred);
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
       .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
+  if (replacementFnType == null) {
+    // If the replacement failed, use the original function type
+    replacementFnType = fnType;
+  }
+
+  // Handle nested template types
+  for (TemplateType key : keys) {
+    JSType inferredType = inferred.get(key);
+    if (inferredType != null && inferredType.isTemplateType()) {
+      TemplateType nestedKey = (TemplateType) inferredType;
+      JSType nestedInferred = inferred.get(nestedKey);
+      if (nestedInferred != null) {
+        inferred.put(key, nestedInferred);
+      }
+    }
+  }
+
+  // Create a new replacer with the updated inferred types
+  replacer = new TemplateTypeReplacer(registry, inferred);
+  replacementFnType = replacementFnType.visit(replacer)
+      .toMaybeFunctionType();
+  if (replacementFnType == null) {
+    replacementFnType = fnType;
+  }
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
