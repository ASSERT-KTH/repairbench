diff --git a/tmp/ebcdce2e-606f-43bb-8965-97906f0b6559_buggy.java b/tmp/9126f51c-cd20-4292-a129-98b1d4f03cd7_fixed.java
index 1b07d98..105a55c 100644
--- a/tmp/ebcdce2e-606f-43bb-8965-97906f0b6559_buggy.java
+++ b/tmp/9126f51c-cd20-4292-a129-98b1d4f03cd7_fixed.java
@@ -1,76 +1,89 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
     // Note! Should not skip if `property` null since that'd skip check
     // for config overrides, in case of root value
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
     // Simple case first: serialize as numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
 
     // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
     // First: custom pattern will override things
     if (format.hasPattern()) {
         final Locale loc = format.hasLocale()
                         ? format.getLocale()
                         : serializers.getLocale();
         SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);
         TimeZone tz = format.hasTimeZone() ? format.getTimeZone()
                 : serializers.getTimeZone();
         df.setTimeZone(tz);
         return withFormat(Boolean.FALSE, df);
     }
 
     // Otherwise, need one of these changes:
     final boolean hasLocale = format.hasLocale();
     final boolean hasTZ = format.hasTimeZone();
     final boolean asString = (shape == JsonFormat.Shape.STRING);
 
     if (!hasLocale && !hasTZ && !asString) {
         return this;
     }
 
     DateFormat df0 = serializers.getConfig().getDateFormat();
     // Jackson's own `StdDateFormat` is quite easy to deal with...
     if (df0 instanceof StdDateFormat) {
         StdDateFormat std = (StdDateFormat) df0;
         if (format.hasLocale()) {
             std = std.withLocale(format.getLocale());
         }
         if (format.hasTimeZone()) {
             std = std.withTimeZone(format.getTimeZone());
         }
         return withFormat(Boolean.FALSE, std);
     }
 
     // 08-Jun-2017, tatu: Unfortunately there's no generally usable
     //    mechanism for changing `DateFormat` instances (or even clone()ing)
     //    So: require it be `SimpleDateFormat`; can't config other types
     if (!(df0 instanceof SimpleDateFormat)) {
         serializers.reportBadDefinition(handledType(), String.format(
 "Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`",
 df0.getClass().getName()));
     }
     SimpleDateFormat df = (SimpleDateFormat) df0;
     if (hasLocale) {
         // Ugh. No way to change `Locale`, create copy; must re-crete completely:
         df = new SimpleDateFormat(df.toPattern(), format.getLocale());
     } else {
         df = (SimpleDateFormat) df.clone();
     }
     TimeZone newTz = format.getTimeZone();
     boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());
     if (changeTZ) {
         df.setTimeZone(newTz);
     }
+
+    // Fix for java.sql.Date handling
+    if (java.sql.Date.class.isAssignableFrom(handledType())) {
+        SimpleDateFormat sqlDf = new SimpleDateFormat(format.hasPattern() ? format.getPattern() : "yyyy-MM-dd");
+        if (format.hasLocale()) {
+            sqlDf = new SimpleDateFormat(sqlDf.toPattern(), format.getLocale());
+        }
+        if (format.hasTimeZone()) {
+            sqlDf.setTimeZone(format.getTimeZone());
+        }
+        return withFormat(Boolean.FALSE, sqlDf);
+    }
+
     return withFormat(Boolean.FALSE, df);
 }
\ No newline at end of file
