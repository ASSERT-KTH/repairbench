diff --git a/tmp/90c9221e-8762-48a0-9d60-f7468bf1c752_buggy.java b/tmp/6c953f26-6c59-446c-9d0a-7dca9557f1ee_fixed.java
index 27e0871..110f209 100644
--- a/tmp/90c9221e-8762-48a0-9d60-f7468bf1c752_buggy.java
+++ b/tmp/6c953f26-6c59-446c-9d0a-7dca9557f1ee_fixed.java
@@ -1,86 +1,87 @@
 /**
  * Try to fold arithmetic binary operators
  */
 private Node performArithmeticOp(int opType, Node left, Node right) {
     // Unlike other operations, ADD operands are not always converted
     // to Number.
     if (opType == Token.ADD
         && (NodeUtil.mayBeString(left, false)
             || NodeUtil.mayBeString(right, false))) {
         return null;
     }
 
     double result;
 
     // TODO(johnlenz): Handle NaN with unknown value. BIT ops convert NaN
-    // to zero so this is a little akward here.
+    // to zero so this is a little awkward here.
 
     Double lValObj = NodeUtil.getNumberValue(left);
     if (lValObj == null) {
         return null;
     }
     Double rValObj = NodeUtil.getNumberValue(right);
     if (rValObj == null) {
         return null;
     }
 
     double lval = lValObj;
     double rval = rValObj;
 
     switch (opType) {
         case Token.BITAND:
             result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);
             break;
         case Token.BITOR:
             result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);
             break;
         case Token.BITXOR:
             result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);
             break;
         case Token.ADD:
             result = lval + rval;
             break;
         case Token.SUB:
             result = lval - rval;
             break;
         case Token.MUL:
             result = lval * rval;
             break;
         case Token.MOD:
             if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
-          return null;
+                // Return the original expression instead of throwing an error
+                return new Node(Token.MOD, left, right);
             }
             result = lval % rval;
             break;
         case Token.DIV:
             if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
-          return null;
+                // Return the original expression instead of throwing an error
+                return new Node(Token.DIV, left, right);
             }
             result = lval / rval;
             break;
         default:
             throw new Error("Unexpected arithmetic operator");
     }
 
     // TODO(johnlenz): consider removing the result length check.
     // length of the left and right value plus 1 byte for the operator.
     if (String.valueOf(result).length() <=
         String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&
 
         // Do not try to fold arithmetic for numbers > 2^53. After that
         // point, fixed-point math starts to break down and become inaccurate.
         Math.abs(result) <= MAX_FOLD_NUMBER) {
         Node newNumber = Node.newNumber(result);
         return newNumber;
     } else if (Double.isNaN(result)) {
         return Node.newString(Token.NAME, "NaN");
     } else if (result == Double.POSITIVE_INFINITY) {
         return Node.newString(Token.NAME, "Infinity");
     } else if (result == Double.NEGATIVE_INFINITY) {
         return new Node(Token.NEG, Node.newString(Token.NAME, "Infinity"));
     }
 
-    return null;
+    // If we reach here, the result couldn't be folded, so return the original expression
+    return new Node(opType, left, right);
 }
\ No newline at end of file
