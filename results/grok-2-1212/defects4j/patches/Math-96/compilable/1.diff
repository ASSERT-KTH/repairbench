diff --git a/tmp/564e0c6b-5a69-4fb2-98f1-bf11f4d00fb9_buggy.java b/tmp/27ff5826-73a5-4a20-bada-d0867ad7d805_fixed.java
index f674e52..0c91cc0 100644
--- a/tmp/564e0c6b-5a69-4fb2-98f1-bf11f4d00fb9_buggy.java
+++ b/tmp/27ff5826-73a5-4a20-bada-d0867ad7d805_fixed.java
@@ -1,41 +1,32 @@
     /**
      * Test for the equality of two Complex objects.
      * <p>
      * If both the real and imaginary parts of two Complex numbers
      * are exactly the same, and neither is <code>Double.NaN</code>, the two
      * Complex objects are considered to be equal.</p>
      * <p>
      * All <code>NaN</code> values are considered to be equal - i.e, if either
      * (or both) real and imaginary parts of the complex number are equal
      * to <code>Double.NaN</code>, the complex number is equal to 
      * <code>Complex.NaN</code>.</p>
      *
      * @param other Object to test for equality to this
      * @return true if two Complex objects are equal, false if
      *         object is null, not an instance of Complex, or
      *         not equal to this Complex instance
      * 
      */
     public boolean equals(Object other) {
-        boolean ret;
-        
         if (this == other) {
-            ret = true;
-        } else if (other == null) {
-            ret = false;
-        } else  {
-            try {
+            return true;
+        }
+        if (other == null || getClass() != other.getClass()) {
+            return false;
+        }
         Complex rhs = (Complex) other;
-                if (rhs.isNaN()) {
-                    ret = this.isNaN();
-                } else {
-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));
+        if (isNaN() || rhs.isNaN()) {
+            return isNaN() && rhs.isNaN();
         }
-            } catch (ClassCastException ex) {
-                // ignore exception
-                ret = false;
-            }
-        }
-      
-        return ret;
+        return Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal()) &&
+               Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary());
     }
\ No newline at end of file
