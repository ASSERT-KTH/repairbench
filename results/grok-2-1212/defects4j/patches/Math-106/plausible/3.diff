diff --git a/tmp/1d3f4f23-8bd0-40fb-a821-6ee11debe86a_buggy.java b/tmp/5ed6ec30-43bf-4f43-ba01-beba5b3efde6_fixed.java
index 42c5923..aac0d76 100644
--- a/tmp/1d3f4f23-8bd0-40fb-a821-6ee11debe86a_buggy.java
+++ b/tmp/5ed6ec30-43bf-4f43-ba01-beba5b3efde6_fixed.java
@@ -1,89 +1,89 @@
-    /**
-     * Parses a string to produce a {@link Fraction} object.  This method
-     * expects the string to be formatted as a proper fraction.
-     * <p>
-     * Minus signs are only allowed in the whole number part - i.e.,
-     * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
-     * will result in a <code>ParseException</code>.
-     * 
-     * @param source the string to parse
-     * @param pos input/ouput parsing parameter.
-     * @return the parsed {@link Fraction} object.
-     */
 public Fraction parse(String source, ParsePosition pos) {
     // try to parse improper fraction
     Fraction ret = super.parse(source, pos);
     if (ret != null) {
         return ret;
     }
     
     int initialIndex = pos.getIndex();
 
     // parse whitespace
     parseAndIgnoreWhitespace(source, pos);
 
     // parse whole
     Number whole = getWholeFormat().parse(source, pos);
     if (whole == null) {
         // invalid integer number
         // set index back to initial, error index should already be set
         // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
 
     // parse whitespace
     parseAndIgnoreWhitespace(source, pos);
     
     // parse numerator
+    int startIndex = pos.getIndex();
     Number num = getNumeratorFormat().parse(source, pos);
     if (num == null) {
         // invalid integer number
         // set index back to initial, error index should already be set
         // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
 
-            // minus signs should be leading, invalid expression
+    // Check for invalid minus sign in numerator
+    if (startIndex < pos.getIndex() && source.substring(startIndex, pos.getIndex()).contains("-")) {
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(startIndex);
+        return null;
+    }
     
     // parse '/'
-        int startIndex = pos.getIndex();
+    startIndex = pos.getIndex();
     char c = parseNextCharacter(source, pos);
     switch (c) {
     case 0 :
         // no '/'
         // return num as a fraction
         return new Fraction(num.intValue(), 1);
     case '/' :
         // found '/', continue parsing denominator
         break;
     default :
         // invalid '/'
         // set index back to initial, error index should be the last
         // character examined.
         pos.setIndex(initialIndex);
         pos.setErrorIndex(startIndex);
         return null;
     }
 
     // parse whitespace
     parseAndIgnoreWhitespace(source, pos);
 
     // parse denominator
+    startIndex = pos.getIndex();
     Number den = getDenominatorFormat().parse(source, pos);
     if (den == null) {
         // invalid integer number
         // set index back to initial, error index should already be set
         // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
 
-            // minus signs must be leading, invalid
+    // Check for invalid minus sign in denominator
+    if (startIndex < pos.getIndex() && source.substring(startIndex, pos.getIndex()).contains("-")) {
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(startIndex);
+        return null;
+    }
     
     int w = whole.intValue();
     int n = num.intValue();
     int d = den.intValue();
     return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
 }
\ No newline at end of file
