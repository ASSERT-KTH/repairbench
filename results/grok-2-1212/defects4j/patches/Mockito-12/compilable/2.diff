diff --git a/tmp/60c16917-b0d7-43d3-8442-b8238eafb193_buggy.java b/tmp/214650da-01a1-4de5-9b71-725971adf9b9_fixed.java
index bada2b6..6a57b4a 100644
--- a/tmp/60c16917-b0d7-43d3-8442-b8238eafb193_buggy.java
+++ b/tmp/214650da-01a1-4de5-9b71-725971adf9b9_fixed.java
@@ -1,16 +1,27 @@
 /**
-     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
+ * Finds the generic type (parametrized type) of the field. If the field is not generic, it returns Object.class.
  * 
-     * @param field
-     * @return
+ * @param field The field to analyze
+ * @return The generic type of the field, or Object.class if not generic
  */
 public Class getGenericType(Field field) {
     Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
+    
+    if (generic != null) {
+        if (generic instanceof ParameterizedType) {
             Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
+            if (actual instanceof Class) {
                 return (Class) actual;
-                //in case of nested generics we don't go deep
+            } else if (actual instanceof ParameterizedType) {
+                // Handle nested generics
+                return (Class) ((ParameterizedType) actual).getRawType();
+            }
+        } else if (generic instanceof Class) {
+            // If the generic type is a Class, return it directly
+            return (Class) generic;
+        }
     }
     
+    // If we can't determine the generic type, return Object.class
     return Object.class;
 }
\ No newline at end of file
