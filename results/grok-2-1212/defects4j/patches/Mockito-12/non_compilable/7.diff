diff --git a/tmp/229f3462-fe9c-4b70-aeba-6bd3255ab1b1_buggy.java b/tmp/cd492726-539c-4e74-a9b8-a454b35e4619_fixed.java
index bada2b6..85b8e38 100644
--- a/tmp/229f3462-fe9c-4b70-aeba-6bd3255ab1b1_buggy.java
+++ b/tmp/cd492726-539c-4e74-a9b8-a454b35e4619_fixed.java
@@ -1,16 +1,32 @@
 /**
  * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
  * 
  * @param field
  * @return
  */
 public Class getGenericType(Field field) {        
     Type generic = field.getGenericType();
     if (generic != null && generic instanceof ParameterizedType) {
         Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
+        if (actual instanceof Class) {
             return (Class) actual;
-                //in case of nested generics we don't go deep
+        } else if (actual instanceof ParameterizedType) {
+            // Handle nested generic types
+            return (Class) ((ParameterizedType) actual).getRawType();
+        } else if (actual instanceof WildcardType) {
+            // Handle wildcard types
+            Type[] upperBounds = ((WildcardType) actual).getUpperBounds();
+            if (upperBounds.length > 0 && upperBounds[0] instanceof Class) {
+                return (Class) upperBounds[0];
+            }
+        } else if (actual instanceof TypeVariable) {
+            // Handle type variables
+            Type[] bounds = ((TypeVariable) actual).getBounds();
+            if (bounds.length > 0 && bounds[0] instanceof Class) {
+                return (Class) bounds[0];
+            }
+        }
     }
     
     return Object.class;
 }
\ No newline at end of file
