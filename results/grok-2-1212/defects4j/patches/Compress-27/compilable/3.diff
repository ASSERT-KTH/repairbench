diff --git a/tmp/687576b4-a695-4715-ac9d-7bd0bf5cf0cc_buggy.java b/tmp/39ef6224-9ecc-4332-a87b-276da362039b_fixed.java
index 81872ca..05d4bd7 100644
--- a/tmp/687576b4-a695-4715-ac9d-7bd0bf5cf0cc_buggy.java
+++ b/tmp/39ef6224-9ecc-4332-a87b-276da362039b_fixed.java
@@ -1,70 +1,42 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
     if (buffer[start] == 0) {
         return 0L;
     }
 
-        // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+    // Skip leading spaces and NULs
+    while (start < end && (buffer[start] == ' ' || buffer[start] == 0)) {
         start++;
-            } else {
-                break;
-            }
     }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
-        }
+    // If all characters are spaces or NULs, return 0
     if (start == end) {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, start, trailer));
+        return 0L;
     }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+    // Find the end of the octal number
+    int numberEnd = start;
+    while (numberEnd < end && buffer[numberEnd] >= '0' && buffer[numberEnd] <= '7') {
+        numberEnd++;
     }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+
+    // Check for valid trailing characters
+    if (numberEnd == end || (numberEnd < end && (buffer[numberEnd] == 0 || buffer[numberEnd] == ' '))) {
+        // Valid trailing characters found
+        for (int i = start; i < numberEnd; i++) {
+            result = (result << 3) + (buffer[i] - '0'); // convert from ASCII
+        }
+    } else {
+        throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, numberEnd, buffer[numberEnd]));
     }
 
     return result;
 }
\ No newline at end of file
