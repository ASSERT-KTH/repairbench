diff --git a/tmp/ffd92b43-e10f-41ca-a8a6-bf48cf75039e_buggy.java b/tmp/272cfc68-80fd-4779-9f04-30f39dcdbcbf_fixed.java
index 81872ca..dda88ba 100644
--- a/tmp/ffd92b43-e10f-41ca-a8a6-bf48cf75039e_buggy.java
+++ b/tmp/272cfc68-80fd-4779-9f04-30f39dcdbcbf_fixed.java
@@ -1,70 +1,94 @@
 /**
  * Parse an octal string from a buffer.
  *
  * <p>Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.</p>
  *
  * <p>The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).</p>
  *
  * <p>To work-around some tar implementations that insert a
  * leading NUL this method returns 0 if it detects a leading NUL
  * since Commons Compress 1.4.</p>
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
  * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
     if (buffer[start] == 0) {
         return 0L;
     }
 
     // Skip leading spaces
     while (start < end) {
         if (buffer[start] == ' ') {
             start++;
         } else {
             break;
         }
     }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
+    // Trim all trailing NULs and spaces
+    while (start < end && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {
         end--;
-            trailer = buffer[end - 1];
     }
-        if (start == end) {
+
+    // Check if the string is empty after trimming
+    if (start == end || buffer[end - 1] < '0' || buffer[end - 1] > '7') {
         throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, start, trailer));
+                exceptionMessage(buffer, offset, length, start, end == start ? (byte) ' ' : buffer[end - 1]));
     }
 
     for (; start < end; start++) {
         final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
+
+// Helper method to create exception message
+private static String exceptionMessage(final byte[] buffer, final int offset, final int length, final int current, final byte currentByte) {
+    final StringBuilder sb = new StringBuilder();
+    sb.append("Invalid byte ").append((int) currentByte).append(" at offset ").append(current - offset);
+    sb.append(" in '");
+
+    final int end = Math.min(offset + length, buffer.length);
+    for (int i = offset; i < end; i++) {
+        if (i == current) {
+            sb.append("{");
+
+        }
+        if (i >= offset + length) {
+            sb.append("}");
+            break;
+        }
+        if (buffer[i] == 0) {
+            sb.append("{NUL}");
+        } else {
+            sb.append((char) buffer[i]);
+        }
+        if (i == current) {
+            sb.append("}");
+        }
+    }
+    sb.append("' len=").append(length);
+    return sb.toString();
+}
\ No newline at end of file
