diff --git a/tmp/8731d9e0-76cf-4896-9dc1-643255549c99_buggy.java b/tmp/fd96caa5-7aed-4861-82ca-c4719bdc7de1_fixed.java
index b4d4f38..abb279d 100644
--- a/tmp/8731d9e0-76cf-4896-9dc1-643255549c99_buggy.java
+++ b/tmp/fd96caa5-7aed-4861-82ca-c4719bdc7de1_fixed.java
@@ -1,123 +1,117 @@
-    /** Accept a step, triggering events and step handlers.
-     * @param interpolator step interpolator
-     * @param y state vector at step end time, must be reset if an event
-     * asks for resetting or if an events stops integration during the step
-     * @param yDot placeholder array where to put the time derivative of the state vector
-     * @param tEnd final integration time
-     * @return time at end of step
-     * @exception MaxCountExceededException if the interpolator throws one because
-     * the number of functions evaluations is exceeded
-     * @exception NoBracketingException if the location of an event cannot be bracketed
-     * @exception DimensionMismatchException if arrays dimensions do not match equations settings
-     * @since 2.2
-     */
 protected double acceptStep(final AbstractStepInterpolator interpolator,
                             final double[] y, final double[] yDot, final double tEnd)
     throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {
 
     double previousT = interpolator.getGlobalPreviousTime();
     final double currentT = interpolator.getGlobalCurrentTime();
 
-            // initialize the events states if needed
+    // Initialize the events states if needed
     if (!statesInitialized) {
         for (EventState state : eventsStates) {
             state.reinitializeBegin(interpolator);
         }
         statesInitialized = true;
     }
 
-            // search for next events that may occur during the step
+    // Search for next events that may occur during the step
     final int orderingSign = interpolator.isForward() ? +1 : -1;
     SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
-
-                /** {@inheritDoc} */
         public int compare(EventState es0, EventState es1) {
             return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
         }
-
     });
 
     for (final EventState state : eventsStates) {
         if (state.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
             occuringEvents.add(state);
         }
     }
 
+    double nextT = previousT;
+    double[] nextY = y.clone();
+    double[] nextYDot = yDot.clone();
+    boolean resetOccurred = false;
+
     while (!occuringEvents.isEmpty()) {
-
-                // handle the chronologically first event
+        // Handle the chronologically first event
         final Iterator<EventState> iterator = occuringEvents.iterator();
         final EventState currentEvent = iterator.next();
         iterator.remove();
 
-                // restrict the interpolator to the first part of the step, up to the event
+        // Restrict the interpolator to the first part of the step, up to the event
         final double eventT = currentEvent.getEventTime();
-                interpolator.setSoftPreviousTime(previousT);
+        interpolator.setSoftPreviousTime(nextT);
         interpolator.setSoftCurrentTime(eventT);
 
-                // get state at event time
+        // Get state at event time
         interpolator.setInterpolatedTime(eventT);
         final double[] eventY = interpolator.getInterpolatedState().clone();
 
-                // advance all event states to current time
+        // Advance all event states to current time
         currentEvent.stepAccepted(eventT, eventY);
         isLastStep = currentEvent.stop();
 
-                // handle the first part of the step, up to the event
+        // Handle the first part of the step, up to the event
         for (final StepHandler handler : stepHandlers) {
             handler.handleStep(interpolator, isLastStep);
         }
 
         if (isLastStep) {
-                    // the event asked to stop integration
+            // The event asked to stop integration
             System.arraycopy(eventY, 0, y, 0, y.length);
             for (final EventState remaining : occuringEvents) {
                 remaining.stepAccepted(eventT, eventY);
             }
             return eventT;
         }
 
         boolean needReset = currentEvent.reset(eventT, eventY);
         if (needReset) {
-                    // some event handler has triggered changes that
+            // Some event handler has triggered changes that
             // invalidate the derivatives, we need to recompute them
-                    System.arraycopy(eventY, 0, y, 0, y.length);
-                    computeDerivatives(eventT, y, yDot);
+            System.arraycopy(eventY, 0, nextY, 0, y.length);
+            computeDerivatives(eventT, nextY, nextYDot);
             resetOccurred = true;
-                    for (final EventState remaining : occuringEvents) {
-                        remaining.stepAccepted(eventT, eventY);
-                    }
-                    return eventT;
+        } else {
+            System.arraycopy(eventY, 0, nextY, 0, y.length);
+            System.arraycopy(yDot, 0, nextYDot, 0, yDot.length);
         }
 
-                // prepare handling of the remaining part of the step
-                previousT = eventT;
-                interpolator.setSoftPreviousTime(eventT);
-                interpolator.setSoftCurrentTime(currentT);
+        // Prepare handling of the remaining part of the step
+        nextT = eventT;
 
-                // check if the same event occurs again in the remaining part of the step
-                if (currentEvent.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
-                    occuringEvents.add(currentEvent);
+        // Re-evaluate all events for the remaining part of the step
+        occuringEvents.clear();
+        interpolator.setSoftPreviousTime(nextT);
+        interpolator.setSoftCurrentTime(currentT);
+        for (final EventState state : eventsStates) {
+            if (state.evaluateStep(interpolator)) {
+                occuringEvents.add(state);
+            }
         }
-
     }
 
-            // last part of the step, after the last event
+    // Last part of the step, after the last event
+    interpolator.setSoftPreviousTime(nextT);
+    interpolator.setSoftCurrentTime(currentT);
     interpolator.setInterpolatedTime(currentT);
     final double[] currentY = interpolator.getInterpolatedState();
+    System.arraycopy(currentY, 0, nextY, 0, y.length);
+
     for (final EventState state : eventsStates) {
-                state.stepAccepted(currentT, currentY);
+        state.stepAccepted(currentT, nextY);
         isLastStep = isLastStep || state.stop();
     }
     isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
-            // handle the remaining part of the step, after all events if any
+    // Handle the remaining part of the step, after all events if any
     for (StepHandler handler : stepHandlers) {
         handler.handleStep(interpolator, isLastStep);
     }
 
+    // Update y and yDot with the final values
+    System.arraycopy(nextY, 0, y, 0, y.length);
+    System.arraycopy(nextYDot, 0, yDot, 0, yDot.length);
+
     return currentT;
-
 }
\ No newline at end of file
