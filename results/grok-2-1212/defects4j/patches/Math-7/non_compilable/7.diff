diff --git a/tmp/6a2c43dd-e5bb-4b6e-a076-e7f365c6ba9a_buggy.java b/tmp/523c33c4-7e84-4357-84ca-2429e104db7c_fixed.java
index b4d4f38..9b12530 100644
--- a/tmp/6a2c43dd-e5bb-4b6e-a076-e7f365c6ba9a_buggy.java
+++ b/tmp/523c33c4-7e84-4357-84ca-2429e104db7c_fixed.java
@@ -1,123 +1,122 @@
-    /** Accept a step, triggering events and step handlers.
-     * @param interpolator step interpolator
-     * @param y state vector at step end time, must be reset if an event
-     * asks for resetting or if an events stops integration during the step
-     * @param yDot placeholder array where to put the time derivative of the state vector
-     * @param tEnd final integration time
-     * @return time at end of step
-     * @exception MaxCountExceededException if the interpolator throws one because
-     * the number of functions evaluations is exceeded
-     * @exception NoBracketingException if the location of an event cannot be bracketed
-     * @exception DimensionMismatchException if arrays dimensions do not match equations settings
-     * @since 2.2
-     */
 protected double acceptStep(final AbstractStepInterpolator interpolator,
                             final double[] y, final double[] yDot, final double tEnd)
     throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {
 
     double previousT = interpolator.getGlobalPreviousTime();
     final double currentT = interpolator.getGlobalCurrentTime();
 
-            // initialize the events states if needed
+    // Initialize the events states if needed
     if (!statesInitialized) {
         for (EventState state : eventsStates) {
             state.reinitializeBegin(interpolator);
         }
         statesInitialized = true;
     }
 
-            // search for next events that may occur during the step
+    // Search for next events that may occur during the step
     final int orderingSign = interpolator.isForward() ? +1 : -1;
-            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
-
-                /** {@inheritDoc} */
+    SortedSet<EventState> occurringEvents = new TreeSet<>(new Comparator<EventState>() {
         public int compare(EventState es0, EventState es1) {
-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
+            int cmp = orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
+            if (cmp == 0) {
+                // If events occur at the same time, maintain insertion order
+                return Integer.compare(eventsStates.indexOf(es0), eventsStates.indexOf(es1));
+            }
+            return cmp;
         }
-
     });
 
     for (final EventState state : eventsStates) {
         if (state.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
-                    occuringEvents.add(state);
+            occurringEvents.add(state);
         }
     }
 
-            while (!occuringEvents.isEmpty()) {
-
-                // handle the chronologically first event
-                final Iterator<EventState> iterator = occuringEvents.iterator();
+    double eventT = previousT;
+    boolean stop = false;
+    boolean resetOccurred = false;
+    while (!occurringEvents.isEmpty() && !stop) {
+        // Handle the chronologically first event
+        final Iterator<EventState> iterator = occurringEvents.iterator();
         final EventState currentEvent = iterator.next();
         iterator.remove();
 
-                // restrict the interpolator to the first part of the step, up to the event
-                final double eventT = currentEvent.getEventTime();
+        // Restrict the interpolator to the first part of the step, up to the event
+        eventT = currentEvent.getEventTime();
         interpolator.setSoftPreviousTime(previousT);
         interpolator.setSoftCurrentTime(eventT);
 
-                // get state at event time
+        // Get state at event time
         interpolator.setInterpolatedTime(eventT);
         final double[] eventY = interpolator.getInterpolatedState().clone();
 
-                // advance all event states to current time
-                currentEvent.stepAccepted(eventT, eventY);
-                isLastStep = currentEvent.stop();
+        // Advance all event states to current time
+        for (EventState state : eventsStates) {
+            state.stepAccepted(eventT, eventY);
+        }
 
-                // handle the first part of the step, up to the event
+        stop = currentEvent.stop();
+
+        // Handle the first part of the step, up to the event
         for (final StepHandler handler : stepHandlers) {
-                    handler.handleStep(interpolator, isLastStep);
+            handler.handleStep(interpolator, stop || Precision.equals(eventT, tEnd, 1));
         }
 
-                if (isLastStep) {
-                    // the event asked to stop integration
+        if (stop) {
+            // The event asked to stop integration
             System.arraycopy(eventY, 0, y, 0, y.length);
-                    for (final EventState remaining : occuringEvents) {
-                        remaining.stepAccepted(eventT, eventY);
-                    }
             return eventT;
         }
 
         boolean needReset = currentEvent.reset(eventT, eventY);
         if (needReset) {
-                    // some event handler has triggered changes that
-                    // invalidate the derivatives, we need to recompute them
+            // Some event handler has triggered changes that invalidate the derivatives
             System.arraycopy(eventY, 0, y, 0, y.length);
             computeDerivatives(eventT, y, yDot);
             resetOccurred = true;
-                    for (final EventState remaining : occuringEvents) {
-                        remaining.stepAccepted(eventT, eventY);
+            previousT = eventT;
+            interpolator.setSoftPreviousTime(eventT);
+            interpolator.setSoftCurrentTime(currentT);
+            interpolator.setInterpolatedTime(eventT);
+
+            // Re-evaluate all events after reset
+            occurringEvents.clear();
+            for (final EventState state : eventsStates) {
+                if (state.evaluateStep(interpolator)) {
+                    occurringEvents.add(state);
                 }
-                    return eventT;
             }
-
-                // prepare handling of the remaining part of the step
+        } else {
+            // Prepare handling of the remaining part of the step
             previousT = eventT;
             interpolator.setSoftPreviousTime(eventT);
             interpolator.setSoftCurrentTime(currentT);
 
-                // check if the same event occurs again in the remaining part of the step
+            // Check if the same event occurs again in the remaining part of the step
             if (currentEvent.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
-                    occuringEvents.add(currentEvent);
+                occurringEvents.add(currentEvent);
+            }
         }
-
     }
 
-            // last part of the step, after the last event
+    // Last part of the step, after the last event
     interpolator.setInterpolatedTime(currentT);
     final double[] currentY = interpolator.getInterpolatedState();
     for (final EventState state : eventsStates) {
         state.stepAccepted(currentT, currentY);
-                isLastStep = isLastStep || state.stop();
+        stop = stop || state.stop();
     }
-            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
+    stop = stop || Precision.equals(currentT, tEnd, 1);
 
-            // handle the remaining part of the step, after all events if any
+    // Handle the remaining part of the step, after all events if any
     for (StepHandler handler : stepHandlers) {
-                handler.handleStep(interpolator, isLastStep);
+        handler.handleStep(interpolator, stop);
+    }
+
+    if (resetOccurred) {
+        System.arraycopy(currentY, 0, y, 0, y.length);
+        computeDerivatives(currentT, y, yDot);
     }
 
     return currentT;
-
 }
\ No newline at end of file
