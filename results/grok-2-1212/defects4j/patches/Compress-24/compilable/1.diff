diff --git a/tmp/5d525e76-a4d5-4b97-b71a-880760591704_buggy.java b/tmp/a1e86abd-2bb7-4c34-a15f-5d50a8f95133_fixed.java
index d9d2789..82654be 100644
--- a/tmp/5d525e76-a4d5-4b97-b71a-880760591704_buggy.java
+++ b/tmp/a1e86abd-2bb7-4c34-a15f-5d50a8f95133_fixed.java
@@ -1,73 +1,53 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long result = 0;
         int end = offset + length;
         int start = offset;
 
         if (length < 2) {
             throw new IllegalArgumentException("Length " + length + " must be at least 2");
         }
 
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end) {
             if (buffer[start] == ' ') {
                 start++;
             } else {
                 break;
             }
         }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+        // Find the end of the octal number, ignoring trailing non-octal bytes up to the provided length
+        int octalEnd = start;
+        while (octalEnd < end) {
+            byte currentByte = buffer[octalEnd];
+            if (currentByte < '0' || currentByte > '7') {
+                break;
             }
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
+            octalEnd++;
         }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
+        // Parse the octal number
+        for (int i = start; i < octalEnd; i++) {
+            final byte currentByte = buffer[i];
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        }
+
+        // Check if there's a trailing space or NUL
+        if (octalEnd < end) {
+            byte trailer = buffer[octalEnd];
+            if (trailer != 0 && trailer != ' ') {
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, octalEnd, trailer));
+            }
         }
 
         return result;
     }
\ No newline at end of file
