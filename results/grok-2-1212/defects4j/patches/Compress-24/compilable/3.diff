diff --git a/tmp/f47d7354-6460-459a-a3fe-968d3d09ea9c_buggy.java b/tmp/3b0dfd3e-262d-4cbc-b69f-f87ecde0f6d5_fixed.java
index d9d2789..05e27f3 100644
--- a/tmp/f47d7354-6460-459a-a3fe-968d3d09ea9c_buggy.java
+++ b/tmp/3b0dfd3e-262d-4cbc-b69f-f87ecde0f6d5_fixed.java
@@ -1,73 +1,71 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long result = 0;
         int end = offset + length;
         int start = offset;
 
         if (length < 2) {
             throw new IllegalArgumentException("Length " + length + " must be at least 2");
         }
 
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end) {
             if (buffer[start] == ' ') {
                 start++;
             } else {
                 break;
             }
         }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
+        // Trim all trailing NULs and spaces
+        while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {
             end--;
-        } else {
+        }
+
+        // Check if there's a valid trailing character
+        if (end < buffer.length && end < offset + length) {
+            byte trailer = buffer[end];
+            if (trailer != 0 && trailer != ' ') {
                 throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+                        exceptionMessage(buffer, offset, length, end, trailer));
             }
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
+        } else if (end == start) {
+            // If all characters were spaces or NULs, return 0
+            return 0L;
         }
 
         for (; start < end; start++) {
             final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
\ No newline at end of file
