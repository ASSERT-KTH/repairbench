diff --git a/tmp/091ed0b7-7033-4d52-b5aa-bda3660b5e2e_buggy.java b/tmp/00829e93-889b-4856-b618-d32a45c2f999_fixed.java
index 4b7e1e4..d769017 100644
--- a/tmp/091ed0b7-7033-4d52-b5aa-bda3660b5e2e_buggy.java
+++ b/tmp/00829e93-889b-4856-b618-d32a45c2f999_fixed.java
@@ -1,52 +1,64 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
+    StringBuilder lengthBuilder = new StringBuilder();
     while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
+                try {
+                    len = Integer.parseInt(lengthBuilder.toString());
+                } catch (NumberFormatException e) {
+                    // Skip invalid length and continue parsing
+                    lengthBuilder.setLength(0);
+                    continue;
+                }
+                lengthBuilder.setLength(0);
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while ((ch = i.read()) != -1) {
                     read++;
                     if (ch == '=') { // end of keyword
                         final String keyword = coll.toString(CharsetNames.UTF_8);
                         // Get rest of entry
                         final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
-                            } else {
+                        if (restLen > 0) {
                             final byte[] rest = new byte[restLen];
                             final int got = IOUtils.readFully(i, rest);
                             if (got != restLen) {
                                 throw new IOException("Failed to read "
                                                       + "Paxheader. Expected "
                                                       + restLen
                                                       + " bytes, read "
                                                       + got);
                             }
                             // Drop trailing NL
                             final String value = new String(rest, 0,
                                                             restLen - 1, CharsetNames.UTF_8);
                             headers.put(keyword, value);
+                        } else if (restLen == 1) { // only NL
+                            headers.remove(keyword);
                         }
                         break;
                     }
                     coll.write((byte) ch);
                 }
                 break; // Processed single header
+            } else if (ch == '\n') {
+                // Skip blank lines
+                lengthBuilder.setLength(0);
+                continue;
             }
-                len *= 10;
-                len += ch - '0';
+            lengthBuilder.append((char) ch);
         }
         if (ch == -1) { // EOF
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
