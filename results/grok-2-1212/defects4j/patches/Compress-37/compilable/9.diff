diff --git a/tmp/024e826d-22c3-4df5-bf07-b5384836ddc2_buggy.java b/tmp/b36fe89b-9bce-48c1-9da1-8158cfa31aa4_fixed.java
index 4b7e1e4..1928313 100644
--- a/tmp/024e826d-22c3-4df5-bf07-b5384836ddc2_buggy.java
+++ b/tmp/b36fe89b-9bce-48c1-9da1-8158cfa31aa4_fixed.java
@@ -1,52 +1,57 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while ((ch = i.read()) != -1) {
                     read++;
                     if (ch == '=') { // end of keyword
                         final String keyword = coll.toString(CharsetNames.UTF_8);
                         // Get rest of entry
                         final int restLen = len - read;
+                        if (restLen > 0) { // only process if there's content to read
                             if (restLen == 1) { // only NL
                                 headers.remove(keyword);
                             } else {
                                 final byte[] rest = new byte[restLen];
                                 final int got = IOUtils.readFully(i, rest);
                                 if (got != restLen) {
                                     throw new IOException("Failed to read "
                                                           + "Paxheader. Expected "
                                                           + restLen
                                                           + " bytes, read "
                                                           + got);
                                 }
                                 // Drop trailing NL
                                 final String value = new String(rest, 0,
                                                           restLen - 1, CharsetNames.UTF_8);
                                 headers.put(keyword, value);
                             }
+                        }
                         break;
                     }
                     coll.write((byte) ch);
                 }
                 break; // Processed single header
             }
             len *= 10;
             len += ch - '0';
         }
         if (ch == -1) { // EOF
             break;
         }
+        if (len == 0) { // Handle blank lines or invalid entries
+            continue;
+        }
     }
     return headers;
 }
\ No newline at end of file
