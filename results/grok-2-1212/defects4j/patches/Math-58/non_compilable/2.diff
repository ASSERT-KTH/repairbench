diff --git a/tmp/4686d19d-645b-48bd-9529-e0b2a98474a8_buggy.java b/tmp/3bf0b18d-4d56-4f1f-8e34-27a34dd3fd86_fixed.java
index 3002587..a70f452 100644
--- a/tmp/4686d19d-645b-48bd-9529-e0b2a98474a8_buggy.java
+++ b/tmp/3bf0b18d-4d56-4f1f-8e34-27a34dd3fd86_fixed.java
@@ -1,10 +1,31 @@
     /**
      * Fits a Gaussian function to the observed points.
      *
      * @return the parameters of the Gaussian function that best fits the
      * observed points (in the same order as above).
      */
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+        final Gaussian.Parametric gaussian = new Gaussian.Parametric();
+        
+        // Define a custom optimizer that ensures sigma is positive
+        final LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer() {
+            @Override
+            protected void computeCostJacobian(double[] params, double[] costJacobian) {
+                // Ensure sigma is positive
+                params[2] = Math.abs(params[2]);
+                super.computeCostJacobian(params, costJacobian);
+            }
+            
+            @Override
+            protected void doOptimize() {
+                super.doOptimize();
+                // Ensure sigma is positive in the final result
+                double[] result = getPoint();
+                result[2] = Math.abs(result[2]);
+                setPoint(result);
+            }
+        };
+        
+        return fit(gaussian, guess, optimizer);
     }
\ No newline at end of file
