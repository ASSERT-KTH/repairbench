diff --git a/tmp/737bd564-d4c1-4e5d-b6f4-7ef62703e9c7_buggy.java b/tmp/805c2a5c-9e93-4326-9e7d-07339bb9c561_fixed.java
index e69de29..dd2f690 100644
--- a/tmp/737bd564-d4c1-4e5d-b6f4-7ef62703e9c7_buggy.java
+++ b/tmp/805c2a5c-9e93-4326-9e7d-07339bb9c561_fixed.java
@@ -0,0 +1,39 @@
+public class TypeFactory {
+    // ... other methods ...
+
+    public JavaType constructType(Class<?> cls) {
+        if (cls == null) {
+            throw new IllegalArgumentException("Class to construct type for cannot be null");
+        }
+        JavaType type = _fromClass(cls, null);
+        if (type == null) {
+            throw new IllegalArgumentException("Class " + cls.getName() + " not recognized as valid type");
+        }
+        return type;
+    }
+
+    protected JavaType _fromClass(Class<?> clz, TypeBindings bindings) {
+        if (clz == null) {
+            return null;
+        }
+        JavaType result = _constructType(clz, bindings);
+        if (result == null) {
+            // If the type is null, it might be because the class is not yet fully loaded.
+            // Try to force loading and retry.
+            try {
+                Class.forName(clz.getName(), true, clz.getClassLoader());
+            } catch (ClassNotFoundException e) {
+                // Ignore, we'll handle the null result
+            }
+            result = _constructType(clz, bindings);
+        }
+        return result;
+    }
+
+    protected JavaType _constructType(Class<?> rawType, TypeBindings bindings) {
+        // Implementation details for constructing the type
+        // ...
+    }
+
+    // ... other methods ...
+}
\ No newline at end of file
