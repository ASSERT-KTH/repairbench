diff --git a/tmp/79a8eb7c-1042-42fb-8ecd-4b6c5102cfbe_buggy.java b/tmp/e685b5b6-929e-412b-80e5-d182189174cd_fixed.java
index e69de29..07f56e4 100644
--- a/tmp/79a8eb7c-1042-42fb-8ecd-4b6c5102cfbe_buggy.java
+++ b/tmp/e685b5b6-929e-412b-80e5-d182189174cd_fixed.java
@@ -0,0 +1,43 @@
+public JavaType constructType(Class<?> cls) {
+    JavaType result = _fromClass(cls, null);
+    if (result == null) {
+        // If the type is not found, try to resolve it using the TypeResolverBuilder
+        TypeResolverBuilder<?> trb = getDefaultTyper();
+        if (trb != null) {
+            result = trb.buildType(cls, this);
+        }
+    }
+    if (result == null) {
+        // If still not found, create a new SimpleType
+        result = new SimpleType(cls);
+    }
+    // Ensure that the type hierarchy is properly resolved
+    _resolveType(result, new HashSet<JavaType>());
+    return result;
+}
+
+private JavaType _fromClass(Class<?> cls, TypeBindings bindings) {
+    // Existing implementation...
+}
+
+private void _resolveType(JavaType type, Set<JavaType> currentlyResolving) {
+    if (type.isArrayType()) {
+        _resolveType(type.getContentType(), currentlyResolving);
+    } else if (type.isContainerType()) {
+        _resolveType(type.getKeyType(), currentlyResolving);
+        _resolveType(type.getContentType(), currentlyResolving);
+    } else if (type.isReferenceType()) {
+        _resolveType(type.getReferencedType(), currentlyResolving);
+    }
+    JavaType superClass = type.getSuperClass();
+    if (superClass != null && currentlyResolving.add(superClass)) {
+        _resolveType(superClass, currentlyResolving);
+        currentlyResolving.remove(superClass);
+    }
+    for (JavaType intf : type.getInterfaces()) {
+        if (currentlyResolving.add(intf)) {
+            _resolveType(intf, currentlyResolving);
+            currentlyResolving.remove(intf);
+        }
+    }
+}
\ No newline at end of file
