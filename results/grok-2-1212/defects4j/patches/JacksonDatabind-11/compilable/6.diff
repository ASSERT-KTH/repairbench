diff --git a/tmp/2abefbb5-8fba-4632-8bd7-09d6cf358180_buggy.java b/tmp/9095a3d7-088d-4709-8117-d32c4059a3d4_fixed.java
index fe73b81..2b3040d 100644
--- a/tmp/2abefbb5-8fba-4632-8bd7-09d6cf358180_buggy.java
+++ b/tmp/9095a3d7-088d-4709-8117-d32c4059a3d4_fixed.java
@@ -1,42 +1,24 @@
 protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)
 {
     final String name = type.getName();
-        // 19-Mar-2015: Without context, all we can check are bounds.
     if (context == null) {
-            // And to prevent infinite loops, now need this:
-            return _unknownType();
+        // Without context, all we can check are bounds.
+        return _fromVariableBounds(type.getBounds());
     } else {
-            // Ok: here's where context might come in handy!
-            /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
-             *   unresolved type variables to handle some cases where bounds
-             *   are enough. Let's hope it does not hide real fail cases.
-             */
         JavaType actualType = context.findType(name);
         if (actualType != null) {
             return actualType;
         }
+        // If not found in context, try to resolve from bounds
+        return _fromVariableBounds(type.getBounds());
+    }
 }
 
-        /* 29-Jan-2010, tatu: We used to throw exception here, if type was
-         *   bound: but the problem is that this can occur for generic "base"
-         *   method, overridden by sub-class. If so, we will want to ignore
-         *   current type (for method) since it will be masked.
-         */
-        Type[] bounds = type.getBounds();
-
-        // With type variables we must use bound information.
-        // Theoretically this gets tricky, as there may be multiple
-        // bounds ("... extends A & B"); and optimally we might
-        // want to choose the best match. Also, bounds are optional;
-        // but here we are lucky in that implicit "Object" is
-        // added as bounds if so.
-        // Either way let's just use the first bound, for now, and
-        // worry about better match later on if there is need.
-
-        /* 29-Jan-2010, tatu: One more problem are recursive types
-         *   (T extends Comparable<T>). Need to add "placeholder"
-         *   for resolution to catch those.
-         */
-        context._addPlaceholder(name);
-        return _constructType(bounds[0], context);
+private JavaType _fromVariableBounds(Type[] bounds) {
+    if (bounds == null || bounds.length == 0) {
+        // If no bounds, use Object as the default
+        return _constructType(Object.class, null);
+    }
+    // Use the first bound if available
+    return _constructType(bounds[0], null);
 }
\ No newline at end of file
