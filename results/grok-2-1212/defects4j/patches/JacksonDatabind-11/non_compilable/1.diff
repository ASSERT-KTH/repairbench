diff --git a/tmp/921e62c5-5e27-469a-b4c6-805ec75e351e_buggy.java b/tmp/581bcae2-d1d1-42cc-94e7-2cb91eff3bd1_fixed.java
index fe73b81..a18ac71 100644
--- a/tmp/921e62c5-5e27-469a-b4c6-805ec75e351e_buggy.java
+++ b/tmp/581bcae2-d1d1-42cc-94e7-2cb91eff3bd1_fixed.java
@@ -1,42 +1,33 @@
 protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)
 {
     final String name = type.getName();
     // 19-Mar-2015: Without context, all we can check are bounds.
     if (context == null) {
         // And to prevent infinite loops, now need this:
         return _unknownType();
     } else {
         // Ok: here's where context might come in handy!
-            /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
-             *   unresolved type variables to handle some cases where bounds
-             *   are enough. Let's hope it does not hide real fail cases.
-             */
         JavaType actualType = context.findType(name);
         if (actualType != null) {
             return actualType;
         }
     }
 
-        /* 29-Jan-2010, tatu: We used to throw exception here, if type was
-         *   bound: but the problem is that this can occur for generic "base"
-         *   method, overridden by sub-class. If so, we will want to ignore
-         *   current type (for method) since it will be masked.
-         */
+    // If we can't find the type in the context, we need to use the bounds
     Type[] bounds = type.getBounds();
-
-        // With type variables we must use bound information.
-        // Theoretically this gets tricky, as there may be multiple
-        // bounds ("... extends A & B"); and optimally we might
-        // want to choose the best match. Also, bounds are optional;
-        // but here we are lucky in that implicit "Object" is
-        // added as bounds if so.
-        // Either way let's just use the first bound, for now, and
-        // worry about better match later on if there is need.
-
-        /* 29-Jan-2010, tatu: One more problem are recursive types
-         *   (T extends Comparable<T>). Need to add "placeholder"
-         *   for resolution to catch those.
-         */
+    if (bounds != null && bounds.length > 0) {
+        // Add a placeholder to prevent infinite recursion
         context._addPlaceholder(name);
-        return _constructType(bounds[0], context);
+        
+        // Use the first bound as the resolved type
+        JavaType resolvedType = _constructType(bounds[0], context);
+        
+        // Remove the placeholder after resolution
+        context._removePlaceholder(name);
+        
+        return resolvedType;
+    }
+
+    // If no bounds are available, use Object as a fallback
+    return _constructType(Object.class, context);
 }
\ No newline at end of file
