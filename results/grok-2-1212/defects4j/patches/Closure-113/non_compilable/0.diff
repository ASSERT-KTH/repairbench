diff --git a/tmp/26a7e125-e61f-4798-85a1-b1f901593a4a_buggy.java b/tmp/968541a9-cd51-4d9e-a7b7-0d6058f864b1_fixed.java
index 29a9d2f..20d032c 100644
--- a/tmp/26a7e125-e61f-4798-85a1-b1f901593a4a_buggy.java
+++ b/tmp/968541a9-cd51-4d9e-a7b7-0d6058f864b1_fixed.java
@@ -1,43 +1,47 @@
 /**
  * Handles a goog.require call.
  */
 private void processRequireCall(NodeTraversal t, Node n, Node parent) {
     Node left = n.getFirstChild();
     Node arg = left.getNext();
     if (verifyLastArgumentIsString(t, left, arg)) {
         String ns = arg.getString();
         ProvidedName provided = providedNames.get(ns);
         if (provided == null || !provided.isExplicitlyProvided()) {
+            // If the namespace is not provided, we should only add it to unrecognizedRequires
+            // if we're not in the Closure pass mode that allows undeclared variables.
+            if (!compiler.getOptions().isClosurePass()) {
                 unrecognizedRequires.add(
                     new UnrecognizedRequire(n, ns, t.getSourceName()));
+            }
         } else {
             JSModule providedModule = provided.explicitModule;
 
             // This must be non-null, because there was an explicit provide.
             Preconditions.checkNotNull(providedModule);
 
             JSModule module = t.getModule();
             if (moduleGraph != null &&
                 module != providedModule &&
                 !moduleGraph.dependsOn(module, providedModule)) {
                 compiler.report(
                     t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
                         providedModule.getName(),
                         module.getName()));
             }
         }
 
         maybeAddToSymbolTable(left);
         maybeAddStringNodeToSymbolTable(arg);
 
         // Requires should be removed before further processing.
         // Some clients run closure pass multiple times, first with
         // the checks for broken requires turned off. In these cases, we
         // allow broken requires to be preserved by the first run to
         // let them be caught in the subsequent run.
-      if (provided != null) {
+        if (provided != null || compiler.getOptions().isClosurePass()) {
             parent.detachFromParent();
             compiler.reportCodeChange();
         }
     }
 }
\ No newline at end of file
