diff --git a/tmp/ad12aa33-bb38-4153-aeb9-4db3a1c8aaac_buggy.java b/tmp/a5658cc8-7fad-4348-aa28-eb3a804ce59e_fixed.java
index 41ea16c..0c0587a 100644
--- a/tmp/ad12aa33-bb38-4153-aeb9-4db3a1c8aaac_buggy.java
+++ b/tmp/a5658cc8-7fad-4348-aa28-eb3a804ce59e_fixed.java
@@ -1,63 +1,54 @@
     /**
      * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
      * Note that the resulting expression will always evaluate to
      * true, as would the x = {...} expression.
      */
     private void replaceAssignmentExpression(Var v, Reference ref,
                                              Map<String, String> varmap) {
       // Compute all of the assignments necessary
       List<Node> nodes = Lists.newArrayList();
       Node val = ref.getAssignedValue();
       blacklistVarReferencesInTree(val, v.scope);
       Preconditions.checkState(val.getType() == Token.OBJECTLIT);
       Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
       for (Node key = val.getFirstChild(); key != null;
            key = key.getNext()) {
         String var = key.getString();
         Node value = key.removeFirstChild();
         // TODO(user): Copy type information.
         nodes.add(
           new Node(Token.ASSIGN,
                    Node.newString(Token.NAME, varmap.get(var)), value));
         all.remove(var);
       }
 
       // TODO(user): Better source information.
       for (String var : all) {
         nodes.add(
           new Node(Token.ASSIGN,
                    Node.newString(Token.NAME, varmap.get(var)),
                    NodeUtil.newUndefinedNode(null)));
       }
 
-      Node replacement;
       // All assignments evaluate to true, so make sure that the
       // expr statement evaluates to true in case it matters.
       nodes.add(new Node(Token.TRUE));
 
       // Join these using COMMA.  A COMMA node must have 2 children, so we
       // create a tree. In the tree the first child be the COMMA to match
       // the parser, otherwise tree equality tests fail.
-        nodes = Lists.reverse(nodes);
-        replacement = new Node(Token.COMMA);
-        Node cur = replacement;
-        int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
-          cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
+      Node replacement = nodes.get(0);
+      for (int i = 1; i < nodes.size(); i++) {
+        replacement = new Node(Token.COMMA, nodes.get(i), replacement);
       }
-        cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
 
-      Node replace = ref.getParent();
-      replacement.copyInformationFromForTree(replace);
+      Node parent = ref.getParent();
+      replacement.copyInformationFromForTree(parent);
 
-      if (replace.getType() == Token.VAR) {
-        replace.getParent().replaceChild(
-            replace, NodeUtil.newExpr(replacement));
+      if (parent.getType() == Token.VAR) {
+        parent.getParent().replaceChild(
+            parent, NodeUtil.newExpr(replacement));
       } else {
-        replace.getParent().replaceChild(replace, replacement);
+        parent.replaceChild(ref, replacement);
       }
     }
\ No newline at end of file
