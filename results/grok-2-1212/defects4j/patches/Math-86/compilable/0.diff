diff --git a/tmp/ea512fc0-ff1e-4ffa-9b79-09b6a3ac8243_buggy.java b/tmp/c8386a97-16b9-46f2-a863-b00e493ad385_fixed.java
index 0eef537..d547d5a 100644
--- a/tmp/ea512fc0-ff1e-4ffa-9b79-09b6a3ac8243_buggy.java
+++ b/tmp/c8386a97-16b9-46f2-a863-b00e493ad385_fixed.java
@@ -1,74 +1,84 @@
 /**
  * Calculates the Cholesky decomposition of the given matrix.
  * @param matrix the matrix to decompose
  * @param relativeSymmetryThreshold threshold above which off-diagonal
  * elements are considered too different and matrix not symmetric
  * @param absolutePositivityThreshold threshold below which diagonal
  * elements are considered null and matrix not positive definite
  * @exception NonSquareMatrixException if matrix is not square
  * @exception NotSymmetricMatrixException if matrix is not symmetric
  * @exception NotPositiveDefiniteMatrixException if the matrix is not
  * strictly positive definite
  * @see #CholeskyDecompositionImpl(RealMatrix)
  * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
  * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
  */
 public CholeskyDecompositionImpl(final RealMatrix matrix,
                                  final double relativeSymmetryThreshold,
                                  final double absolutePositivityThreshold)
     throws NonSquareMatrixException,
            NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
     if (!matrix.isSquare()) {
         throw new NonSquareMatrixException(matrix.getRowDimension(),
                                            matrix.getColumnDimension());
     }
 
     final int order = matrix.getRowDimension();
     lTData   = matrix.getData();
     cachedL  = null;
     cachedLT = null;
 
-        // check the matrix before transformation
+    // Check symmetry and positivity before transformation
     for (int i = 0; i < order; ++i) {
-
         final double[] lI = lTData[i];
 
-            if (lTData[i][i] < absolutePositivityThreshold) {
+        // Check diagonal element for positivity
+        if (lI[i] < absolutePositivityThreshold) {
             throw new NotPositiveDefiniteMatrixException();
         }
-            // check off-diagonal elements (and reset them to 0)
+
+        // Check off-diagonal elements for symmetry
         for (int j = i + 1; j < order; ++j) {
             final double[] lJ = lTData[j];
             final double lIJ = lI[j];
             final double lJI = lJ[i];
-                final double maxDelta =
-                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
+            final double maxDelta = relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
             if (Math.abs(lIJ - lJI) > maxDelta) {
                 throw new NotSymmetricMatrixException();
             }
-                lJ[i] = 0;
+            // Set upper triangular part to zero (we're going to use lower triangular part)
+            lI[j] = 0;
         }
     }
 
-        // transform the matrix
+    // Perform Cholesky decomposition
     for (int i = 0; i < order; ++i) {
-
         final double[] ltI = lTData[i];
 
-            // check diagonal element
-
+        // Compute diagonal element
+        for (int p = 0; p < i; ++p) {
+            final double[] ltP = lTData[p];
+            final double liP = ltI[p];
+            final double diag = ltP[p];
+            ltI[i] -= liP * liP * diag;
+        }
+        if (ltI[i] <= 0) {
+            throw new NotPositiveDefiniteMatrixException();
+        }
         ltI[i] = Math.sqrt(ltI[i]);
-            final double inverse = 1.0 / ltI[i];
 
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
+        // Compute off-diagonal elements
+        for (int j = i + 1; j < order; ++j) {
+            final double[] ltJ = lTData[j];
+            for (int p = 0; p < i; ++p) {
+                final double[] ltP = lTData[p];
+                final double liP = ltI[p];
+                final double ljP = ltJ[p];
+                final double diag = ltP[p];
+                ltJ[i] -= liP * ljP * diag;
             }
+            ltJ[i] /= ltI[i];
         }
-
     }
-
 }
\ No newline at end of file
