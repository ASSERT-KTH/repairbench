diff --git a/tmp/be19ca37-052f-4ff0-b554-07cb2814f695_buggy.java b/tmp/2e2a2e1b-e44f-4207-bc5a-2ceb94e6d89f_fixed.java
index 0eef537..26af462 100644
--- a/tmp/be19ca37-052f-4ff0-b554-07cb2814f695_buggy.java
+++ b/tmp/2e2a2e1b-e44f-4207-bc5a-2ceb94e6d89f_fixed.java
@@ -1,74 +1,77 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
         lTData   = matrix.getData();
         cachedL  = null;
         cachedLT = null;
 
-        // check the matrix before transformation
+        // Check the matrix for symmetry and positive definiteness
         for (int i = 0; i < order; ++i) {
-
             final double[] lI = lTData[i];
 
-            if (lTData[i][i] < absolutePositivityThreshold) {
+            // Check diagonal element for positive definiteness
+            if (i == 0 && lI[i] <= absolutePositivityThreshold) {
                 throw new NotPositiveDefiniteMatrixException();
             }
-            // check off-diagonal elements (and reset them to 0)
-            for (int j = i + 1; j < order; ++j) {
+
+            for (int j = i; j < order; ++j) {
                 final double[] lJ = lTData[j];
                 final double lIJ = lI[j];
-                final double lJI = lJ[i];
+                final double lJI = (i == j) ? lIJ : lJ[i];
+
+                // Check symmetry
+                if (i != j) {
                     final double maxDelta =
                         relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                     if (Math.abs(lIJ - lJI) > maxDelta) {
                         throw new NotSymmetricMatrixException();
                     }
-                lJ[i] = 0;
                 }
-        }
-
-        // transform the matrix
-        for (int i = 0; i < order; ++i) {
-
-            final double[] ltI = lTData[i];
-
-            // check diagonal element
-
-            ltI[i] = Math.sqrt(ltI[i]);
-            final double inverse = 1.0 / ltI[i];
 
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
+                // Check positive definiteness
+                if (j == i) {
+                    // Update diagonal element
+                    for (int k = 0; k < i; k++) {
+                        lI[i] -= lI[k] * lI[k];
+                    }
+                    if (lI[i] <= absolutePositivityThreshold) {
+                        throw new NotPositiveDefiniteMatrixException();
+                    }
+                    lI[i] = Math.sqrt(lI[i]);
+                } else if (j > i) {
+                    // Update off-diagonal element
+                    for (int k = 0; k < i; k++) {
+                        lJ[i] -= lI[k] * lJ[k];
+                    }
+                    lJ[i] /= lI[i];
+                    lI[j] = lJ[i];  // Ensure symmetry
                 }
             }
-
         }
 
+        // The matrix is now in Cholesky form
     }
\ No newline at end of file
