diff --git a/tmp/0d5c5037-3f94-4d82-aa8c-ae8c7269b0f4_buggy.java b/tmp/33f546bd-dee9-46f3-a0b6-7913ffebad57_fixed.java
index 46817a7..f180ac6 100644
--- a/tmp/0d5c5037-3f94-4d82-aa8c-ae8c7269b0f4_buggy.java
+++ b/tmp/33f546bd-dee9-46f3-a0b6-7913ffebad57_fixed.java
@@ -1,16 +1,40 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+    
+    RecordType otherRecord = that.toMaybeRecordType();
+    if (otherRecord == null) {
+        return super.getLeastSupertype(that);
+    }
+    
+    // Check if this record type is a subtype of the other record type
+    boolean isSubtype = true;
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+        if (!otherRecord.hasProperty(property) ||
+            !otherRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {
+            isSubtype = false;
+            break;
         }
     }
-    return builder.build();
+    
+    // Check if the other record type is a subtype of this record type
+    boolean isSupertype = true;
+    for (String property : otherRecord.getPropertyNames()) {
+        if (!hasProperty(property) ||
+            !getPropertyType(property).isEquivalentTo(otherRecord.getPropertyType(property))) {
+            isSupertype = false;
+            break;
+        }
+    }
+    
+    if (isSubtype) {
+        return otherRecord;
+    } else if (isSupertype) {
+        return this;
+    } else {
+        // If neither is a subtype of the other, create a union type
+        return registry.createUnionType(this, that);
+    }
 }
\ No newline at end of file
