diff --git a/tmp/f4bf625f-cedc-4eb0-997d-fcffadb29cf4_buggy.java b/tmp/25f44f16-55d7-42b8-bcee-08b330b98881_fixed.java
index 46817a7..d0fd2f7 100644
--- a/tmp/f4bf625f-cedc-4eb0-997d-fcffadb29cf4_buggy.java
+++ b/tmp/25f44f16-55d7-42b8-bcee-08b330b98881_fixed.java
@@ -1,16 +1,41 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
+    
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+    RecordType otherRecord = that.toMaybeRecordType();
+    
+    // Add all properties from this record
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+        if (otherRecord.hasProperty(property)) {
+            JSType thisType = getPropertyType(property);
+            JSType thatType = otherRecord.getPropertyType(property);
+            if (thisType.isEquivalentTo(thatType)) {
+                builder.addProperty(property, thisType, getPropertyNode(property));
+            } else {
+                builder.addProperty(property, registry.createUnionType(thisType, thatType), getPropertyNode(property));
             }
+        } else {
+            builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
         }
-    return builder.build();
+    }
+    
+    // Add properties from the other record that are not in this record
+    for (String property : otherRecord.getPropertyNames()) {
+        if (!properties.containsKey(property)) {
+            builder.addProperty(property, otherRecord.getPropertyType(property), otherRecord.getPropertyNode(property));
+        }
+    }
+    
+    JSType result = builder.build();
+    
+    // If the result is not equivalent to either of the original types, 
+    // we need to create a union type of both original types
+    if (!result.isEquivalentTo(this) && !result.isEquivalentTo(that)) {
+        return registry.createUnionType(this, that);
+    }
+    
+    return result;
 }
\ No newline at end of file
