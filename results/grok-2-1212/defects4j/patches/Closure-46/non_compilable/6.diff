diff --git a/tmp/e918726a-386d-4813-91c0-c6c0861c2663_buggy.java b/tmp/12bb492a-9556-4cb8-ae9a-53910e8301bb_fixed.java
index 46817a7..db47605 100644
--- a/tmp/e918726a-386d-4813-91c0-c6c0861c2663_buggy.java
+++ b/tmp/12bb492a-9556-4cb8-ae9a-53910e8301bb_fixed.java
@@ -1,16 +1,26 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    Set<String> allProperties = new HashSet<>(properties.keySet());
+    allProperties.addAll(that.toMaybeRecordType().getOwnPropertyNames());
+
+    for (String property : allProperties) {
+        if (properties.containsKey(property) && that.toMaybeRecordType().hasProperty(property)) {
+            // If both types have the property, we take the union of the property types
+            JSType thisType = getPropertyType(property);
+            JSType thatType = that.toMaybeRecordType().getPropertyType(property);
+            JSType unionType = registry.createUnionType(thisType, thatType);
+            builder.addProperty(property, unionType, getPropertyNode(property));
+        } else if (properties.containsKey(property)) {
+            // If only this type has the property, we add it as is
+            builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
+        } else {
+            // If only that type has the property, we add it as is
+            builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), null);
         }
     }
     return builder.build();
 }
\ No newline at end of file
