diff --git a/tmp/9fa3bd38-33b2-4156-9148-3d1573034416_buggy.java b/tmp/dd01bc2c-b1f8-4e35-962a-f03a302b54d8_fixed.java
index 46817a7..fbfe1ce 100644
--- a/tmp/9fa3bd38-33b2-4156-9148-3d1573034416_buggy.java
+++ b/tmp/dd01bc2c-b1f8-4e35-962a-f03a302b54d8_fixed.java
@@ -1,16 +1,22 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
+
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
-      }
+  Set<String> allProperties = new HashSet<>(properties.keySet());
+  allProperties.addAll(that.toMaybeRecordType().getOwnPropertyNames());
+
+  for (String property : allProperties) {
+    JSType thisPropertyType = hasProperty(property) ? getPropertyType(property) : getNativeType(JSTypeNative.VOID_TYPE);
+    JSType thatPropertyType = that.toMaybeRecordType().hasProperty(property) ? 
+        that.toMaybeRecordType().getPropertyType(property) : 
+        getNativeType(JSTypeNative.VOID_TYPE);
+
+    JSType unionType = registry.createUnionType(thisPropertyType, thatPropertyType);
+    builder.addProperty(property, unionType, null);
   }
+
   return builder.build();
 }
\ No newline at end of file
