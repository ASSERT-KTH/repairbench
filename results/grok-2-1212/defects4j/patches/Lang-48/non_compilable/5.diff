diff --git a/tmp/62107747-520d-4f78-982a-d6575daa57c9_buggy.java b/tmp/1cb30d53-5286-4c89-aa31-e02836fbc8bb_fixed.java
index 82bdfd4..71f4ef5 100644
--- a/tmp/62107747-520d-4f78-982a-d6575daa57c9_buggy.java
+++ b/tmp/1cb30d53-5286-4c89-aa31-e02836fbc8bb_fixed.java
@@ -1,51 +1,53 @@
 /**
  * <p>Test if two <code>Object</code>s are equal using their
  * <code>equals</code> method.</p>
  *
  * @param lhs  the left hand object
  * @param rhs  the right hand object
  * @return EqualsBuilder - used to chain calls.
  */
 public EqualsBuilder append(Object lhs, Object rhs) {
     if (isEquals == false) {
         return this;
     }
     if (lhs == rhs) {
         return this;
     }
     if (lhs == null || rhs == null) {
         this.setEquals(false);
         return this;
     }
     Class lhsClass = lhs.getClass();
     if (!lhsClass.isArray()) {
         // The simple case, not an array, just test the element
         isEquals = lhs.equals(rhs);
     } else if (lhs.getClass() != rhs.getClass()) {
         // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]
         this.setEquals(false);
-        }
-        // 'Switch' on type of array, to dispatch to the correct handler
-        // This handles multi dimensional arrays of the same depth
-        else if (lhs instanceof long[]) {
+    } else if (lhs instanceof long[]) {
         append((long[]) lhs, (long[]) rhs);
     } else if (lhs instanceof int[]) {
         append((int[]) lhs, (int[]) rhs);
     } else if (lhs instanceof short[]) {
         append((short[]) lhs, (short[]) rhs);
     } else if (lhs instanceof char[]) {
         append((char[]) lhs, (char[]) rhs);
     } else if (lhs instanceof byte[]) {
         append((byte[]) lhs, (byte[]) rhs);
     } else if (lhs instanceof double[]) {
         append((double[]) lhs, (double[]) rhs);
     } else if (lhs instanceof float[]) {
         append((float[]) lhs, (float[]) rhs);
     } else if (lhs instanceof boolean[]) {
         append((boolean[]) lhs, (boolean[]) rhs);
     } else {
         // Not an array of primitives
+        // Handle BigDecimal separately
+        if (lhs instanceof BigDecimal && rhs instanceof BigDecimal) {
+            isEquals = ((BigDecimal) lhs).compareTo((BigDecimal) rhs) == 0;
+        } else {
             append((Object[]) lhs, (Object[]) rhs);
         }
+    }
     return this;
 }
\ No newline at end of file
