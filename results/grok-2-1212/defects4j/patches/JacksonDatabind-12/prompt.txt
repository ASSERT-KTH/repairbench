You are an automatic program repair tool. Your task is to fix the provided buggy code.

The following code contains a buggy function:
```java
    /**
     * Turns out that these are expensive enough to create so that caching
     * does make sense.
     *<p>
     * IMPORTANT: but, note, that instances CAN NOT BE CACHED if there is
     * a value type deserializer; this caused an issue with 2.4.4 of
     * JAXB Annotations (failing a test).
     * It is also possible that some other settings could make deserializers
     * un-cacheable; but on the other hand, caching can make a big positive
     * difference with performance... so it's a hard choice.
     * 
     * @since 2.4.4
     */
    @Override
    public boolean isCachable() {
        /* As per [databind#735], existence of value or key deserializer (only passed
         * if annotated to use non-standard one) should also prevent caching.
         */
        return (_valueTypeDeserializer == null)
                && (_ignorableProperties == null);
    }

```

The code fails the following tests.

Test `com.fasterxml.jackson.databind.deser.TestCustomDeserializers::testCustomMapValueDeser735`:
```java
    // [databind#735]: erroneous application of custom deserializer
    public void testCustomMapValueDeser735() throws Exception {
        String json = "{\"map1\":{\"a\":1},\"map2\":{\"a\":1}}";
        TestMapBean735 bean = MAPPER.readValue(json, TestMapBean735.class);

        assertEquals(100, bean.map1.get("a").intValue());
        assertEquals(1, bean.map2.get("a").intValue());
    }

```
Test `com.fasterxml.jackson.databind.deser.TestCustomDeserializers::testCustomMapValueDeser735` error:
```
junit.framework.AssertionFailedError: expected:<1> but was:<100>
```


Please provide a fixed version of the buggy function, and only that function, inside a code block.
