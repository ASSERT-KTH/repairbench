diff --git a/tmp/d3f05ebe-4df6-45e9-8f71-ed1e79af0852_buggy.java b/tmp/24cf0207-e78e-483c-b9a0-09ce2d6aa4f9_fixed.java
index d4e6d48..ce03bde 100644
--- a/tmp/d3f05ebe-4df6-45e9-8f71-ed1e79af0852_buggy.java
+++ b/tmp/24cf0207-e78e-483c-b9a0-09ce2d6aa4f9_fixed.java
@@ -1,23 +1,29 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
         callTarget.getString().equals("String")) {
         // Fold String(a) to '' + (a) on immutable literals,
         // which allows further optimizations
         //
         // We can't do this in the general case, because String(a) has
         // slightly different semantics than '' + (a). See
         // http://code.google.com/p/closure-compiler/issues/detail?id=759
         Node value = callTarget.getNext();
-      if (value != null) {
+        if (value != null && value.getNext() == null) {  // Check for single argument
+            Node toCheck = value;
+            while (toCheck.isCast()) {
+                toCheck = toCheck.getFirstChild();
+            }
+            if (toCheck.isString() || toCheck.isNumber()) {  // Check if it's a primitive
                 Node addition = IR.add(
                     IR.string("").srcref(callTarget),
                     value.detachFromParent());
                 n.getParent().replaceChild(n, addition);
                 reportCodeChange();
                 return addition;
             }
         }
+    }
     return n;
 }
\ No newline at end of file
