diff --git a/tmp/41088875-5bb6-41df-a8fd-d6298e44d432_buggy.java b/tmp/b1e07c39-de11-4cf1-8037-bebbc51b6681_fixed.java
index d4e6d48..bc1e5a7 100644
--- a/tmp/41088875-5bb6-41df-a8fd-d6298e44d432_buggy.java
+++ b/tmp/b1e07c39-de11-4cf1-8037-bebbc51b6681_fixed.java
@@ -1,23 +1,38 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
             callTarget.getString().equals("String")) {
         // Fold String(a) to '' + (a) on immutable literals,
         // which allows further optimizations
         //
         // We can't do this in the general case, because String(a) has
         // slightly different semantics than '' + (a). See
         // http://code.google.com/p/closure-compiler/issues/detail?id=759
         Node value = callTarget.getNext();
-      if (value != null) {
+        if (value != null && value.getNext() == null) { // Check for exactly one argument
+            // Check if the argument is not an object with a valueOf method
+            if (!value.isObjectLit() && !mayHaveValueOfMethod(value)) {
                 Node addition = IR.add(
                     IR.string("").srcref(callTarget),
                     value.detachFromParent());
                 n.getParent().replaceChild(n, addition);
                 reportCodeChange();
                 return addition;
             }
         }
+    }
     return n;
 }
+
+// Helper method to check if a node may have a valueOf method
+private boolean mayHaveValueOfMethod(Node node) {
+    if (node.isObjectLit()) {
+        for (Node key = node.getFirstChild(); key != null; key = key.getNext()) {
+            if (key.isStringKey() && key.getString().equals("valueOf")) {
+                return true;
+            }
+        }
+    }
+    return false;
+}
\ No newline at end of file
