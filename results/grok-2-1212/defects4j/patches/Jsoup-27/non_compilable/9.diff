diff --git a/tmp/94c8d9a8-3c21-4f72-b36b-56ee1715e31d_buggy.java b/tmp/f4c0c496-ddbc-4262-a74a-b0e58a15c4dd_fixed.java
index 7fb120e..d98443f 100644
--- a/tmp/94c8d9a8-3c21-4f72-b36b-56ee1715e31d_buggy.java
+++ b/tmp/f4c0c496-ddbc-4262-a74a-b0e58a15c4dd_fixed.java
@@ -1,16 +1,33 @@
 /**
  * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
  * will kick in.)
-     * @param contentType e.g. "text/html; charset=EUC-JP"
-     * @return "EUC-JP", or null if not found. Charset is trimmed and uppercased.
+ * @param contentType e.g. "text/html; charset=EUC-JP" or "text/html; charset=\"EUC-JP\""
+ * @return "euc-jp", or null if not found. Charset is trimmed and lowercased.
  */
 static String getCharsetFromContentType(String contentType) {
     if (contentType == null) return null;
-        Matcher m = charsetPattern.matcher(contentType);
+    
+    // Use a regex pattern that matches both unquoted and quoted charset values
+    Matcher m = Pattern.compile("(?i)\\bcharset\\s*=\\s*([^\\s;]+|\"[^\"]+\")", Pattern.CASE_INSENSITIVE).matcher(contentType);
+    
     if (m.find()) {
         String charset = m.group(1).trim();
-            charset = charset.toUpperCase(Locale.ENGLISH);
+        
+        // Remove quotes if present
+        if (charset.startsWith("\"") && charset.endsWith("\"")) {
+            charset = charset.substring(1, charset.length() - 1);
+        }
+        
+        charset = charset.toLowerCase(Locale.ENGLISH);
+        
+        // Check if the charset is supported
+        try {
+            Charset.forName(charset);
             return charset;
+        } catch (UnsupportedCharsetException e) {
+            return null;
+        }
     }
+    
     return null;
 }
\ No newline at end of file
