diff --git a/tmp/6049eeb5-9922-468d-96b8-2079b58245c4_buggy.java b/tmp/8b266e81-bbb8-453a-a963-84ad242a3112_fixed.java
index 2c4ed06..9fdc5fa 100644
--- a/tmp/6049eeb5-9922-468d-96b8-2079b58245c4_buggy.java
+++ b/tmp/8b266e81-bbb8-453a-a963-84ad242a3112_fixed.java
@@ -1,111 +1,101 @@
-    /** Accept a step, triggering events and step handlers.
-     * @param interpolator step interpolator
-     * @param y state vector at step end time, must be reset if an event
-     * asks for resetting or if an events stops integration during the step
-     * @param yDot placeholder array where to put the time derivative of the state vector
-     * @param tEnd final integration time
-     * @return time at end of step
-     * @exception MathIllegalStateException if the value of one event state cannot be evaluated
-     * @since 2.2
-     */
 protected double acceptStep(final AbstractStepInterpolator interpolator,
                             final double[] y, final double[] yDot, final double tEnd)
     throws MathIllegalStateException {
 
     double previousT = interpolator.getGlobalPreviousTime();
     final double currentT = interpolator.getGlobalCurrentTime();
     resetOccurred = false;
 
-            // initialize the events states if needed
+    // Initialize the events states if needed
     if (!statesInitialized) {
         for (EventState state : eventsStates) {
             state.reinitializeBegin(interpolator);
         }
         statesInitialized = true;
     }
 
-            // search for next events that may occur during the step
+    // Search for next events that may occur during the step
     final int orderingSign = interpolator.isForward() ? +1 : -1;
-            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
-
-                /** {@inheritDoc} */
+    SortedSet<EventState> occurringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
         public int compare(EventState es0, EventState es1) {
             return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
         }
-
     });
 
     for (final EventState state : eventsStates) {
         if (state.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
-                    occuringEvents.add(state);
+            // The event occurs during the current step
+            occurringEvents.add(state);
         }
     }
 
-            while (!occuringEvents.isEmpty()) {
-
-                // handle the chronologically first event
-                final Iterator<EventState> iterator = occuringEvents.iterator();
+    double nextT = previousT;
+    while (!occurringEvents.isEmpty()) {
+        // Handle the chronologically first event
+        final Iterator<EventState> iterator = occurringEvents.iterator();
         final EventState currentEvent = iterator.next();
         iterator.remove();
 
-                // restrict the interpolator to the first part of the step, up to the event
+        // Restrict the interpolator to the first part of the step, up to the event
         final double eventT = currentEvent.getEventTime();
+        if ((eventT - nextT) * orderingSign < 0) {
+            // Event time is before the next expected time, which should not happen
+            throw new MathIllegalStateException(LocalizedODEFormats.EVENT_TIME_LOWER_THAN_NEXT_STEP_TIME, eventT, nextT);
+        }
+        nextT = eventT;
+
         interpolator.setSoftPreviousTime(previousT);
         interpolator.setSoftCurrentTime(eventT);
 
-                // trigger the event
+        // Trigger the event
         interpolator.setInterpolatedTime(eventT);
         final double[] eventY = interpolator.getInterpolatedState();
         currentEvent.stepAccepted(eventT, eventY);
         isLastStep = currentEvent.stop();
 
-                // handle the first part of the step, up to the event
+        // Handle the first part of the step, up to the event
         for (final StepHandler handler : stepHandlers) {
             handler.handleStep(interpolator, isLastStep);
         }
 
         if (isLastStep) {
-                    // the event asked to stop integration
+            // The event asked to stop integration
             System.arraycopy(eventY, 0, y, 0, y.length);
             return eventT;
         }
 
         if (currentEvent.reset(eventT, eventY)) {
-                    // some event handler has triggered changes that
-                    // invalidate the derivatives, we need to recompute them
+            // Some event handler has triggered changes that invalidate the derivatives, we need to recompute them
             System.arraycopy(eventY, 0, y, 0, y.length);
             computeDerivatives(eventT, y, yDot);
             resetOccurred = true;
             return eventT;
         }
 
-                // prepare handling of the remaining part of the step
+        // Prepare handling of the remaining part of the step
         previousT = eventT;
         interpolator.setSoftPreviousTime(eventT);
         interpolator.setSoftCurrentTime(currentT);
 
-                // check if the same event occurs again in the remaining part of the step
+        // Check if the same event occurs again in the remaining part of the step
         if (currentEvent.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
-                    occuringEvents.add(currentEvent);
+            // The event occurs during the current step
+            occurringEvents.add(currentEvent);
         }
-
     }
 
+    // Handle the remaining part of the step, after all events if any
     interpolator.setInterpolatedTime(currentT);
     final double[] currentY = interpolator.getInterpolatedState();
     for (final EventState state : eventsStates) {
         state.stepAccepted(currentT, currentY);
         isLastStep = isLastStep || state.stop();
     }
     isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
-            // handle the remaining part of the step, after all events if any
     for (StepHandler handler : stepHandlers) {
         handler.handleStep(interpolator, isLastStep);
     }
 
     return currentT;
-
 }
\ No newline at end of file
