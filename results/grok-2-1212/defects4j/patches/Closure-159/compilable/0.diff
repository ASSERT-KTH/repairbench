diff --git a/tmp/0f0b3e90-5931-45f4-9b0d-cc89121f297b_buggy.java b/tmp/a74b6d7f-ae5f-408b-857e-862c26b0b312_fixed.java
index de9af32..1e7fb0b 100644
--- a/tmp/0f0b3e90-5931-45f4-9b0d-cc89121f297b_buggy.java
+++ b/tmp/a74b6d7f-ae5f-408b-857e-862c26b0b312_fixed.java
@@ -1,18 +1,33 @@
 /**
  * @see #findCalledFunctions(Node)
  */
 private void findCalledFunctions(
     Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
+  
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+    Node callee = node.getFirstChild();
+    if (callee.getType() == Token.GETPROP) {
+      // Handle method calls (e.g., obj.method())
+      Node propertyName = callee.getLastChild();
+      if (propertyName.getType() == Token.STRING) {
+        changed.add(propertyName.getString());
+      }
+    } else if (callee.getType() == Token.NAME) {
+      // Handle direct function calls (e.g., func())
+      changed.add(callee.getString());
+    } else if (callee.getType() == Token.GETELEM) {
+      // Handle calls through array access (e.g., arr[0]())
+      Node arrayName = callee.getFirstChild();
+      if (arrayName.getType() == Token.NAME) {
+        changed.add(arrayName.getString());
+      }
     }
   }
 
+  // Recursively process child nodes
   for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
     findCalledFunctions(c, changed);
   }
 }
\ No newline at end of file
