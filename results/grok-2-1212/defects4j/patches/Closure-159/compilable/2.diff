diff --git a/tmp/ec15c3b9-632c-4d15-ab3e-ee6930ef6055_buggy.java b/tmp/2bc92b25-88b5-4173-87cb-86302dcd3384_fixed.java
index de9af32..68409d0 100644
--- a/tmp/ec15c3b9-632c-4d15-ab3e-ee6930ef6055_buggy.java
+++ b/tmp/2bc92b25-88b5-4173-87cb-86302dcd3384_fixed.java
@@ -1,18 +1,29 @@
 /**
  * @see #findCalledFunctions(Node)
  */
 private void findCalledFunctions(
     Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
+  
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
     Node child = node.getFirstChild();
     if (child.getType() == Token.NAME) {
       changed.add(child.getString());
+    } else if (child.getType() == Token.GETPROP) {
+      // Handle method calls like 'initialize.call(this, options)'
+      Node propAccess = child.getFirstChild();
+      if (propAccess != null && propAccess.getType() == Token.NAME && "call".equals(propAccess.getString())) {
+        Node functionName = propAccess.getNext();
+        if (functionName != null && functionName.getType() == Token.NAME) {
+          changed.add(functionName.getString());
+        }
+      }
     }
   }
 
+  // Recursively process child nodes
   for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
     findCalledFunctions(c, changed);
   }
 }
\ No newline at end of file
