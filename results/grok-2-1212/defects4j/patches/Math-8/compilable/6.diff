diff --git a/tmp/26ddb7f5-852b-4c51-b3f6-cffd24ba6b25_buggy.java b/tmp/9a92241d-7094-434c-89de-13d04d2e8a00_fixed.java
index bfa2423..82a5e17 100644
--- a/tmp/26ddb7f5-852b-4c51-b3f6-cffd24ba6b25_buggy.java
+++ b/tmp/9a92241d-7094-434c-89de-13d04d2e8a00_fixed.java
@@ -1,23 +1,29 @@
 /**
  * Generate a random sample from the distribution.
  *
  * @param sampleSize the number of random values to generate.
  * @return an array representing the random sample.
  * @throws NotStrictlyPositiveException if {@code sampleSize} is not
  * positive.
  */
 public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
     if (sampleSize <= 0) {
         throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                 sampleSize);
     }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+    // Use the class of the generic type T to create the array
+    final T[] out = (T[]) java.lang.reflect.Array.newInstance(getGenericType(), sampleSize);
 
     for (int i = 0; i < sampleSize; i++) {
         out[i] = sample();
     }
 
     return out;
+}
 
+// Helper method to get the class of the generic type T
+private Class<T> getGenericType() {
+    return (Class<T>) ((java.lang.reflect.ParameterizedType) getClass().getGenericSuperclass())
+            .getActualTypeArguments()[0];
 }
\ No newline at end of file
