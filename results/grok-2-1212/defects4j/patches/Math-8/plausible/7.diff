diff --git a/tmp/b87853ef-6b05-475c-a583-37a9d3f7ad9a_buggy.java b/tmp/3952c85f-0bab-401e-baec-38e6c0ecb3d6_fixed.java
index bfa2423..e080119 100644
--- a/tmp/b87853ef-6b05-475c-a583-37a9d3f7ad9a_buggy.java
+++ b/tmp/3952c85f-0bab-401e-baec-38e6c0ecb3d6_fixed.java
@@ -1,23 +1,37 @@
 /**
  * Generate a random sample from the distribution.
  *
  * @param sampleSize the number of random values to generate.
  * @return an array representing the random sample.
  * @throws NotStrictlyPositiveException if {@code sampleSize} is not
  * positive.
  */
 public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
     if (sampleSize <= 0) {
         throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                 sampleSize);
     }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+    @SuppressWarnings("unchecked")
+    final T[] out = (T[]) java.lang.reflect.Array.newInstance(getCommonElementType(), sampleSize);
 
     for (int i = 0; i < sampleSize; i++) {
         out[i] = sample();
     }
 
     return out;
+}
 
+// Helper method to determine the common element type
+private Class<?> getCommonElementType() {
+    if (singletons.isEmpty()) {
+        return Object.class; // Default to Object if no singletons
+    }
+    Class<?> commonType = singletons.get(0).getClass();
+    for (T element : singletons) {
+        if (!commonType.isAssignableFrom(element.getClass())) {
+            return Object.class; // Use Object if not all elements are of the same type or subtype
+        }
+    }
+    return commonType;
 }
\ No newline at end of file
