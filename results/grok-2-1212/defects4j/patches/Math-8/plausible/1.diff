diff --git a/tmp/55bd1504-361f-44bf-b0c1-a64ef0ffbee5_buggy.java b/tmp/4bf66796-47a1-4498-ba96-30c1b19d0d24_fixed.java
index bfa2423..daceb0a 100644
--- a/tmp/55bd1504-361f-44bf-b0c1-a64ef0ffbee5_buggy.java
+++ b/tmp/4bf66796-47a1-4498-ba96-30c1b19d0d24_fixed.java
@@ -1,23 +1,42 @@
     /**
      * Generate a random sample from the distribution.
      *
      * @param sampleSize the number of random values to generate.
      * @return an array representing the random sample.
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not
      * positive.
      */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+        @SuppressWarnings("unchecked")
+        final T[] out = (T[]) java.lang.reflect.Array.newInstance(getCommonElementType(), sampleSize);
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
         }
 
         return out;
+    }
 
+    /**
+     * Get the common element type of the distribution.
+     * 
+     * @return the common element type
+     */
+    private Class<?> getCommonElementType() {
+        if (singletons.isEmpty()) {
+            return Object.class;
+        }
+        Class<?> commonType = singletons.get(0).getClass();
+        for (T element : singletons) {
+            if (!commonType.isAssignableFrom(element.getClass())) {
+                commonType = Object.class;
+                break;
+            }
+        }
+        return commonType;
     }
\ No newline at end of file
