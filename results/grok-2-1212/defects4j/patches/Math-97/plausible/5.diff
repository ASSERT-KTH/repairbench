diff --git a/tmp/05353018-dc06-4c27-a70c-24891c11e092_buggy.java b/tmp/6c932d34-e5fd-4a1e-971f-e6e868b354b5_fixed.java
index 88647d1..18eeea9 100644
--- a/tmp/05353018-dc06-4c27-a70c-24891c11e092_buggy.java
+++ b/tmp/6c932d34-e5fd-4a1e-971f-e6e868b354b5_fixed.java
@@ -1,44 +1,46 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
-     * signs. An <code>IllegalArgumentException</code> is thrown if this is not
-     * the case.</p>
+     * signs or that one of the endpoints is a root. An <code>IllegalArgumentException</code> 
+     * is thrown if neither condition is met.</p>
      * 
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function 
-     * @throws IllegalArgumentException if min is not less than max or the
-     * signs of the values of the function at the endpoints are not opposites
+     * @throws IllegalArgumentException if min is not less than max or neither
+     * the signs of the values of the function at the endpoints are opposites
+     * nor is one of the endpoints a root
      */
     public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
         
         clearResult();
         verifyInterval(min, max);
         
-        double ret = Double.NaN;
-        
         double yMin = f.value(min);
         double yMax = f.value(max);
         
+        // Check if either endpoint is a root
+        if (Math.abs(yMin) < getAbsoluteAccuracy()) {
+            return min;
+        }
+        if (Math.abs(yMax) < getAbsoluteAccuracy()) {
+            return max;
+        }
+
         // Verify bracketing
         double sign = yMin * yMax;
         if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
             throw new IllegalArgumentException
-                ("Function values at endpoints do not have different signs." +
-                        "  Endpoints: [" + min + "," + max + "]" + 
+                ("Function values at endpoints do not have different signs and " +
+                 "neither endpoint is a root. Endpoints: [" + min + "," + max + "]" + 
                  " Values: [" + yMin + "," + yMax + "]");
-        } else {
-            // solve using only the first endpoint as initial guess
-            ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
         }
 
-        return ret;
+        // Solve using the Brent's method
+        return solve(min, yMin, max, yMax, min, yMin);
     }
\ No newline at end of file
