diff --git a/tmp/4ed3a318-c654-48a2-bfe7-6306ea4d1d97_buggy.java b/tmp/e11b3282-77c8-4c7f-a63f-2db371f9ee4b_fixed.java
index 88647d1..ce7a8c3 100644
--- a/tmp/4ed3a318-c654-48a2-bfe7-6306ea4d1d97_buggy.java
+++ b/tmp/e11b3282-77c8-4c7f-a63f-2db371f9ee4b_fixed.java
@@ -1,44 +1,53 @@
 /**
  * Find a zero in the given interval.
  * <p>
  * Requires that the values of the function at the endpoints have opposite
  * signs. An <code>IllegalArgumentException</code> is thrown if this is not
  * the case.</p>
  * 
  * @param min the lower bound for the interval.
  * @param max the upper bound for the interval.
  * @return the value where the function is zero
  * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
  * @throws FunctionEvaluationException if an error occurs evaluating the
  * function 
  * @throws IllegalArgumentException if min is not less than max or the
  * signs of the values of the function at the endpoints are not opposites
  */
 public double solve(double min, double max) throws MaxIterationsExceededException, 
     FunctionEvaluationException {
     
     clearResult();
     verifyInterval(min, max);
     
     double ret = Double.NaN;
     
     double yMin = f.value(min);
     double yMax = f.value(max);
     
     // Verify bracketing
     double sign = yMin * yMax;
-        if (sign >= 0) {
+    if (sign > 0) {
         // check if either value is close to a zero
+        if (Math.abs(yMin) <= getFunctionValueAccuracy()) {
+            ret = min;
+        } else if (Math.abs(yMax) <= getFunctionValueAccuracy()) {
+            ret = max;
+        } else {
             // neither value is close to zero and min and max do not bracket root.
             throw new IllegalArgumentException
             ("Function values at endpoints do not have different signs." +
                     "  Endpoints: [" + min + "," + max + "]" + 
                     "  Values: [" + yMin + "," + yMax + "]");
+        }
+    } else if (sign == 0) {
+        // One of the endpoints is a root
+        ret = (Math.abs(yMin) <= getFunctionValueAccuracy()) ? min : max;
     } else {
         // solve using only the first endpoint as initial guess
         ret = solve(min, yMin, max, yMax, min, yMin);
         // either min or max is a root
     }
 
     return ret;
 }
\ No newline at end of file
