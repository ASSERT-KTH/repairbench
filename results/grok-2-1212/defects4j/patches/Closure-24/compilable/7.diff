diff --git a/tmp/a09e8a1d-8d84-4767-ba7a-68b1e8d19647_buggy.java b/tmp/6fc602ba-c249-4528-bad1-351e34cb40e5_fixed.java
index 602226b..19a0eb5 100644
--- a/tmp/a09e8a1d-8d84-4767-ba7a-68b1e8d19647_buggy.java
+++ b/tmp/6fc602ba-c249-4528-bad1-351e34cb40e5_fixed.java
@@ -1,26 +1,24 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
     if (parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
         aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
         transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+      } else {
+        // Report non-alias local variables
+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+      }
     } else {
       // TODO(robbyw): Support using locals for private variables.
       report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
-    }
