diff --git a/tmp/ee7f0ad1-397c-440b-a335-344de1eb4885_buggy.java b/tmp/793c1ffe-7b59-4382-a67e-5def9bb3c44b_fixed.java
index 602226b..c4a772a 100644
--- a/tmp/ee7f0ad1-397c-440b-a335-344de1eb4885_buggy.java
+++ b/tmp/793c1ffe-7b59-4382-a67e-5def9bb3c44b_fixed.java
@@ -1,26 +1,27 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+    
+    boolean isAlias = false;
+    
+    if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {
       String name = n.getString();
       Var aliasVar = scope.getVar(name);
+      if (aliasVar != null) {
         aliases.put(name, aliasVar);
         
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
         transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
+        isAlias = true;
+      }
+    }
+    
+    if (!isAlias) {
+      // Report non-alias locals for all cases
       report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
-    }
