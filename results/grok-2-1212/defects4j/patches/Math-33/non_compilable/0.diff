diff --git a/tmp/550aac81-c7b9-46f9-a18e-5a1072d169f6_buggy.java b/tmp/5a08bfd4-462b-434f-a7d0-a84ea921e162_fixed.java
index 56b2d66..f79ba62 100644
--- a/tmp/550aac81-c7b9-46f9-a18e-5a1072d169f6_buggy.java
+++ b/tmp/5a08bfd4-462b-434f-a7d0-a84ea921e162_fixed.java
@@ -1,45 +1,54 @@
 /**
  * Removes the phase 1 objective function, positive cost non-artificial variables,
  * and the non-basic artificial variables from this tableau.
  */
 protected void dropPhase1Objective() {
     if (getNumObjectiveFunctions() == 1) {
         return;
     }
 
-        List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
+    List<Integer> columnsToDrop = new ArrayList<>();
+    columnsToDrop.add(0); // Always drop the first column (phase 1 objective)
 
     // positive cost non-artificial variables
     for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
         final double entry = tableau.getEntry(0, i);
         if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
             columnsToDrop.add(i);
         }
     }
 
     // non-basic artificial variables
     for (int i = 0; i < getNumArtificialVariables(); i++) {
         int col = i + getArtificialVariableOffset();
         if (getBasicRow(col) == null) {
             columnsToDrop.add(col);
         }
     }
 
-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
+    // Sort columns to drop in descending order
+    Collections.sort(columnsToDrop, Collections.reverseOrder());
+
+    // Create new matrix
+    int newHeight = getHeight() - 1; // Drop the first row (phase 1 objective)
+    int newWidth = getWidth() - columnsToDrop.size();
+    double[][] matrix = new double[newHeight][newWidth];
+
+    for (int i = 1; i < getHeight(); i++) { // Start from 1 to drop the first row
+        int colIndex = 0;
         for (int j = 0; j < getWidth(); j++) {
             if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+                matrix[i - 1][colIndex++] = tableau.getEntry(i, j);
             }
         }
     }
 
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+    // Update column labels
+    for (int col : columnsToDrop) {
+        columnLabels.remove(col);
     }
 
+    // Update tableau and numArtificialVariables
     this.tableau = new Array2DRowRealMatrix(matrix);
     this.numArtificialVariables = 0;
 }
\ No newline at end of file
