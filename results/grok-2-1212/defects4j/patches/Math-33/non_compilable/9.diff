diff --git a/tmp/26f9f069-1673-4b94-b39e-e6331170c42b_buggy.java b/tmp/1bbcec21-ab5a-44f9-8ff7-6879dcfc18b1_fixed.java
index 56b2d66..68acb6c 100644
--- a/tmp/26f9f069-1673-4b94-b39e-e6331170c42b_buggy.java
+++ b/tmp/1bbcec21-ab5a-44f9-8ff7-6879dcfc18b1_fixed.java
@@ -1,45 +1,62 @@
 /**
  * Removes the phase 1 objective function, positive cost non-artificial variables,
  * and the non-basic artificial variables from this tableau.
  */
 protected void dropPhase1Objective() {
     if (getNumObjectiveFunctions() == 1) {
         return;
     }
 
     List<Integer> columnsToDrop = new ArrayList<Integer>();
     columnsToDrop.add(0);
 
     // positive cost non-artificial variables
     for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
         final double entry = tableau.getEntry(0, i);
         if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
             columnsToDrop.add(i);
         }
     }
 
     // non-basic artificial variables
     for (int i = 0; i < getNumArtificialVariables(); i++) {
         int col = i + getArtificialVariableOffset();
         if (getBasicRow(col) == null) {
             columnsToDrop.add(col);
         }
     }
 
-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
+    // Sort columnsToDrop in descending order
+    Collections.sort(columnsToDrop, Collections.reverseOrder());
+
+    int newWidth = getWidth() - columnsToDrop.size();
+    int newHeight = getHeight() - 1;
+    double[][] matrix = new double[newHeight][newWidth];
+
+    int rowOffset = 1; // Skip the first row (phase 1 objective)
+    for (int i = 0; i < newHeight; i++) {
         int col = 0;
-          for (int j = 0; j < getWidth(); j++) {
-            if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+        int originalCol = 0;
+        while (col < newWidth) {
+            if (columnsToDrop.contains(originalCol)) {
+                originalCol++;
+                continue;
             }
+            matrix[i][col] = tableau.getEntry(i + rowOffset, originalCol);
+            col++;
+            originalCol++;
         }
     }
 
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+    // Update columnLabels
+    List<String> newColumnLabels = new ArrayList<String>();
+    for (int i = 0; i < columnLabels.size(); i++) {
+        if (!columnsToDrop.contains(i)) {
+            newColumnLabels.add(columnLabels.get(i));
         }
+    }
+    this.columnLabels = newColumnLabels;
 
     this.tableau = new Array2DRowRealMatrix(matrix);
     this.numArtificialVariables = 0;
 }
\ No newline at end of file
