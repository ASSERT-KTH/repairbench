diff --git a/tmp/c6ca1b38-37aa-40df-a1bd-9229dbfc53a2_buggy.java b/tmp/6227406d-1ebb-44ca-8f3c-8201e7903f61_fixed.java
index 3b9a3c0..f074d34 100644
--- a/tmp/c6ca1b38-37aa-40df-a1bd-9229dbfc53a2_buggy.java
+++ b/tmp/6227406d-1ebb-44ca-8f3c-8201e7903f61_fixed.java
@@ -1,71 +1,73 @@
 /**
  * Parse an octal string from a buffer.
  *
-     * <p>Leading spaces are ignored.
+ * <p>Leading spaces and zeros are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.</p>
  *
  * <p>The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).</p>
  *
  * <p>To work-around some tar implementations that insert a
  * leading NUL this method returns 0 if it detects a leading NUL
  * since Commons Compress 1.4.</p>
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
  * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
-        if (buffer[start] == 0) {
-            return 0L;
-        }
-
-        // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
-                start++;
-            } else {
+    // Check for all zeros
+    boolean allZeros = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allZeros = false;
             break;
         }
     }
+    if (allZeros) {
+        return 0L;
+    }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+    // Skip leading spaces and zeros
+    while (start < end && (buffer[start] == ' ' || buffer[start] == 0)) {
+        start++;
+    }
+
+    // Check for leading NUL
+    if (start < end && buffer[start] == 0) {
+        return 0L;
     }
-        // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
+
+    // Find the end of the octal number
+    int numberEnd = start;
+    while (numberEnd < end && buffer[numberEnd] >= '0' && buffer[numberEnd] <= '7') {
+        numberEnd++;
+    }
+
+    // Parse the octal number
+    for (int i = start; i < numberEnd; i++) {
+        result = (result << 3) + (buffer[i] - '0'); // convert from ASCII
     }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+    // Check for valid trailing characters
+    for (int i = numberEnd; i < end; i++) {
+        if (buffer[i] != 0 && buffer[i] != ' ') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, buffer[i]));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
