diff --git a/tmp/d053ed12-1b31-4996-b34a-d65a3cd3609e_buggy.java b/tmp/4be44910-6215-4cb4-95fa-86965d5e7315_fixed.java
index d6662c7..e0ef8fb 100644
--- a/tmp/d053ed12-1b31-4996-b34a-d65a3cd3609e_buggy.java
+++ b/tmp/4be44910-6215-4cb4-95fa-86965d5e7315_fixed.java
@@ -1,23 +1,27 @@
 /**
  * Parse an entry name from a buffer.
  * Parsing stops when a NUL is found
  * or the buffer length is reached.
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse.
  * @return The entry name.
  */
 public static String parseName(byte[] buffer, final int offset, final int length) {
-        StringBuffer result = new StringBuffer(length);
     int end = offset + length;
+    int stop = offset;
 
-        for (int i = offset; i < end; ++i) {
-            if (buffer[i] == 0) {
-                break;
-            }
-            result.append((char) buffer[i]);
+    // Find the end of the string (NUL character or end of buffer)
+    while (stop < end && buffer[stop] != 0) {
+        stop++;
     }
 
-        return result.toString();
+    // Use ISO-8859-1 encoding to correctly handle all byte values
+    try {
+        return new String(buffer, offset, stop - offset, "ISO-8859-1");
+    } catch (java.io.UnsupportedEncodingException e) {
+        // This should never happen as ISO-8859-1 is a standard encoding
+        throw new RuntimeException("ISO-8859-1 encoding not supported", e);
+    }
 }
\ No newline at end of file
