diff --git a/tmp/7972308b-e25d-4185-84fb-bf398ab2bd3b_buggy.java b/tmp/f4420725-4c16-458c-8bc1-eae8a5d9a8ba_fixed.java
index 9353941..e647854 100644
--- a/tmp/7972308b-e25d-4185-84fb-bf398ab2bd3b_buggy.java
+++ b/tmp/f4420725-4c16-458c-8bc1-eae8a5d9a8ba_fixed.java
@@ -1,30 +1,33 @@
 /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
+ * Given an expression and a variable, it returns READ if the first
+ * reference of that variable is a read. It returns KILL if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
+  VariableLiveness result = VariableLiveness.MAYBE_LIVE;
   for (Node child = n.getFirstChild();
       child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
-          return state;
+      if (state == VariableLiveness.READ) {
+        return VariableLiveness.READ;
+      } else if (state == VariableLiveness.KILL) {
+        result = VariableLiveness.KILL;
       }
     }
   }
-    return VariableLiveness.MAYBE_LIVE;
+  return result;
 }
\ No newline at end of file
