diff --git a/tmp/aa91799a-f336-41a5-9c49-b4bd317091fb_buggy.java b/tmp/d563d3a9-d6d2-4ef4-abcd-11f714ee3997_fixed.java
index 9353941..e07ed80 100644
--- a/tmp/aa91799a-f336-41a5-9c49-b4bd317091fb_buggy.java
+++ b/tmp/d563d3a9-d6d2-4ef4-abcd-11f714ee3997_fixed.java
@@ -1,30 +1,63 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
+  VariableLiveness result = VariableLiveness.MAYBE_LIVE;
   for (Node child = n.getFirstChild();
       child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
-          return state;
+      if (state == VariableLiveness.READ) {
+        return VariableLiveness.READ;
+      } else if (state == VariableLiveness.KILL) {
+        // We found a KILL. Now we need to check if there's a subsequent READ.
+        result = VariableLiveness.KILL;
+        VariableLiveness subsequentState = checkSubsequentRead(child.getNext(), variable);
+        if (subsequentState == VariableLiveness.READ) {
+          return VariableLiveness.READ;
         }
       }
     }
+  }
+  return result;
+}
+
+/**
+ * Check if there's a subsequent READ of the variable after a KILL.
+ */
+private VariableLiveness checkSubsequentRead(Node n, String variable) {
+  if (n == null) {
     return VariableLiveness.MAYBE_LIVE;
   }
+  
+  VariableLiveness state = isVariableReadBeforeKill(n, variable);
+  if (state == VariableLiveness.READ) {
+    return VariableLiveness.READ;
+  } else if (state == VariableLiveness.KILL) {
+    return checkSubsequentRead(n.getNext(), variable);
+  }
+  
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+    VariableLiveness childState = checkSubsequentRead(child, variable);
+    if (childState == VariableLiveness.READ) {
+      return VariableLiveness.READ;
+    }
+  }
+  
+  return checkSubsequentRead(n.getNext(), variable);
+}
\ No newline at end of file
