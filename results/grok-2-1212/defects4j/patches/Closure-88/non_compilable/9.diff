diff --git a/tmp/2703ca61-f664-40e5-9814-04577abb26ac_buggy.java b/tmp/0edd16bd-0e54-4964-907e-5e648f3c459d_fixed.java
index 9353941..9a81916 100644
--- a/tmp/2703ca61-f664-40e5-9814-04577abb26ac_buggy.java
+++ b/tmp/0edd16bd-0e54-4964-907e-5e648f3c459d_fixed.java
@@ -1,30 +1,53 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
+  VariableLiveness state = VariableLiveness.MAYBE_LIVE;
   for (Node child = n.getFirstChild();
       child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
-        VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
+      VariableLiveness childState = isVariableReadBeforeKill(child, variable);
+      if (childState == VariableLiveness.READ) {
+        return VariableLiveness.READ;
+      } else if (childState == VariableLiveness.KILL) {
+        state = VariableLiveness.KILL;
+      }
+    }
+  }
+
+  // Special handling for short-circuit operators (&& and ||)
+  if (n.isAnd() || n.isOr()) {
+    VariableLiveness leftState = isVariableReadBeforeKill(n.getFirstChild(), variable);
+    if (leftState == VariableLiveness.KILL) {
+      return VariableLiveness.KILL;
+    }
+    if (leftState == VariableLiveness.READ) {
+      return VariableLiveness.READ;
+    }
+    // If the left side is MAYBE_LIVE, we need to check the right side
+    VariableLiveness rightState = isVariableReadBeforeKill(n.getLastChild(), variable);
+    if (rightState == VariableLiveness.READ) {
+      return VariableLiveness.READ;
+    }
+    if (rightState == VariableLiveness.KILL) {
+      state = VariableLiveness.KILL;
+    }
+  }
+
   return state;
 }
\ No newline at end of file
-      }
-    }
-    return VariableLiveness.MAYBE_LIVE;
-  }
