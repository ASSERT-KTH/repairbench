diff --git a/tmp/c190def1-58a7-4937-852b-b818cf1b8ce1_buggy.java b/tmp/c887be2a-f8e3-4d5f-97bd-4fafab0a141b_fixed.java
index 9353941..7a895f9 100644
--- a/tmp/c190def1-58a7-4937-852b-b818cf1b8ce1_buggy.java
+++ b/tmp/c887be2a-f8e3-4d5f-97bd-4fafab0a141b_fixed.java
@@ -1,30 +1,54 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
+
+  // Additional check for assignment expressions within logical and arithmetic operations
+  if (n.isAssign()) {
+    VariableLiveness lhsState = isVariableReadBeforeKill(n.getFirstChild(), variable);
+    if (lhsState == VariableLiveness.READ) {
+      return VariableLiveness.READ;
+    }
+    VariableLiveness rhsState = isVariableReadBeforeKill(n.getLastChild(), variable);
+    if (rhsState != VariableLiveness.MAYBE_LIVE) {
+      return rhsState;
+    }
+  } else if (n.isAnd() || n.isOr() || n.isHook() || n.isAdd() || n.isSub()) {
+    // Check left side first
+    VariableLiveness leftState = isVariableReadBeforeKill(n.getFirstChild(), variable);
+    if (leftState != VariableLiveness.MAYBE_LIVE) {
+      return leftState;
+    }
+    // If left side is MAYBE_LIVE, check right side
+    VariableLiveness rightState = isVariableReadBeforeKill(n.getLastChild(), variable);
+    if (rightState != VariableLiveness.MAYBE_LIVE) {
+      return rightState;
+    }
+  }
+
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
