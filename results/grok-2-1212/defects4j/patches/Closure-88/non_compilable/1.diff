diff --git a/tmp/b6499fde-b01a-4d52-b7bd-b6117550ffbc_buggy.java b/tmp/ad30ed1f-729d-4c61-8138-8ccf58ae3122_fixed.java
index 9353941..e7e0f29 100644
--- a/tmp/b6499fde-b01a-4d52-b7bd-b6117550ffbc_buggy.java
+++ b/tmp/ad30ed1f-729d-4c61-8138-8ccf58ae3122_fixed.java
@@ -1,30 +1,52 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
+  // We need to handle short-circuited expressions correctly.
+  if (n.isAnd() || n.isOr()) {
+    VariableLiveness leftState = isVariableReadBeforeKill(n.getFirstChild(), variable);
+    if (leftState == VariableLiveness.READ) {
+      return VariableLiveness.READ;
+    }
+    if (leftState == VariableLiveness.KILL) {
+      // If the left side kills the variable, we need to check the right side for reads.
+      VariableLiveness rightState = isVariableReadBeforeKill(n.getLastChild(), variable);
+      if (rightState == VariableLiveness.READ) {
+        return VariableLiveness.READ;
+      }
+      return VariableLiveness.KILL;
+    }
+    // If the left side is MAY_LIVE, we need to check the right side.
+    VariableLiveness rightState = isVariableReadBeforeKill(n.getLastChild(), variable);
+    if (rightState != VariableLiveness.MAYBE_LIVE) {
+      return rightState;
+    }
+    return VariableLiveness.MAYBE_LIVE;
+  }
+
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
