diff --git a/tmp/0d2f0b53-e36d-46a6-a697-d27a83f69d4c_buggy.java b/tmp/033c35f1-c249-498f-a14b-9a7d40b9edbd_fixed.java
index be2af16..958dd21 100644
--- a/tmp/0d2f0b53-e36d-46a6-a697-d27a83f69d4c_buggy.java
+++ b/tmp/033c35f1-c249-498f-a14b-9a7d40b9edbd_fixed.java
@@ -1,29 +1,33 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
+    // First, try the Gregorian calendar
+    long instantGregorian = iGregorianChronology.getDateTimeMillis
         (year, monthOfYear, dayOfMonth,
          hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
+
+    if (instantGregorian >= iCutoverMillis) {
+        return instantGregorian;
+    }
+
+    // If Gregorian fails or is before the cutover, try the Julian calendar
+    long instantJulian = iJulianChronology.getDateTimeMillis
         (year, monthOfYear, dayOfMonth,
          hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+
+    if (instantJulian < iCutoverMillis) {
+        return instantJulian;
+    }
+
+    // If the Julian date is after or at the cutover, it's invalid because it falls in the gap
     throw new IllegalArgumentException("Specified date does not exist");
 }
\ No newline at end of file
-        }
-        return instant;
-    }
