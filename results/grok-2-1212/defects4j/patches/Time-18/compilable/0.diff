diff --git a/tmp/1c0eeb2e-14d9-4217-b756-74e04e6f9561_buggy.java b/tmp/454439bf-63e2-42cf-9b9e-3f3082e23415_fixed.java
index be2af16..17eb611 100644
--- a/tmp/1c0eeb2e-14d9-4217-b756-74e04e6f9561_buggy.java
+++ b/tmp/454439bf-63e2-42cf-9b9e-3f3082e23415_fixed.java
@@ -1,29 +1,31 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
+    // First try with Gregorian
+    long instant = iGregorianChronology.getDateTimeMillis
         (year, monthOfYear, dayOfMonth,
          hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+        return instant;
+    }
+
+    // If Gregorian fails, try with Julian
+    instant = iJulianChronology.getDateTimeMillis
+        (year, monthOfYear, dayOfMonth,
+         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    if (instant < iCutoverMillis) {
+        return instant;
+    }
+
+    // If both fail, it's in the cutover gap
     throw new IllegalArgumentException("Specified date does not exist");
 }
\ No newline at end of file
-        }
-        return instant;
-    }
