diff --git a/tmp/908f74d7-b8c4-4393-856a-fa7f1696a3d4_buggy.java b/tmp/59eb51d1-4095-4bc7-bbd3-430dd28bc712_fixed.java
index be2af16..9200791 100644
--- a/tmp/908f74d7-b8c4-4393-856a-fa7f1696a3d4_buggy.java
+++ b/tmp/59eb51d1-4095-4bc7-bbd3-430dd28bc712_fixed.java
@@ -1,29 +1,44 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                       hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    // First, try with Julian calendar
+    long instantJulian;
+    try {
+        instantJulian = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                                             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    } catch (IllegalArgumentException e) {
+        // If Julian fails, then it's not a valid date before cutover
+        throw e;
+    }
+
+    // Check if the Julian date is before or on the cutover
+    if (instantJulian < iCutoverMillis) {
+        return instantJulian; // It's a valid Julian date
+    }
+
+    // If we reach here, we know the date is on or after the cutover, so try with Gregorian
+    long instantGregorian;
+    try {
+        instantGregorian = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                                                   hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+    } catch (IllegalArgumentException e) {
+        // If Gregorian fails, then it's not a valid date after cutover
+        throw e;
+    }
+
+    // Check if the Gregorian date is on or after the cutover
+    if (instantGregorian >= iCutoverMillis) {
+        return instantGregorian;
+    }
+
+    // If we reach here, the date is in the gap between Julian and Gregorian at cutover
     throw new IllegalArgumentException("Specified date does not exist");
 }
\ No newline at end of file
-        }
-        return instant;
-    }
