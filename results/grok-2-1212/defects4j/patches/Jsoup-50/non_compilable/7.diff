diff --git a/tmp/83f549a4-f974-4d24-9cf1-2b4566be0a38_buggy.java b/tmp/212b615f-730b-466b-aebf-4c446d0e3f4e_fixed.java
index 25ca093..b4d6910 100644
--- a/tmp/83f549a4-f974-4d24-9cf1-2b4566be0a38_buggy.java
+++ b/tmp/212b615f-730b-466b-aebf-4c446d0e3f4e_fixed.java
@@ -1,52 +1,124 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    // Check for BOM and set charset accordingly
+    Charset charset = detectCharsetFromBOM(byteData);
+    if (charset != null) {
+        charsetName = charset.name();
+        byteData = removeBOM(byteData);
+    } else if (charsetName == null) {
+        // If no BOM, try to detect charset from meta tags
+        charsetName = defaultCharset;
+        docData = Charset.forName(charsetName).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+            if (foundCharset != null && !foundCharset.equals(charsetName)) {
+                charsetName = foundCharset.trim().replaceAll("[\"']", "");
                 byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+                charset = Charset.forName(charsetName);
+                docData = charset.decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
+        // Use provided charset
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
+        charset = Charset.forName(charsetName);
+        docData = charset.decode(byteData).toString();
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
+
     return doc;
 }
+
+// Helper method to detect charset from BOM
+private static Charset detectCharsetFromBOM(ByteBuffer buffer) {
+    if (buffer.remaining() < 2) return null;
+
+    int firstByte = buffer.get(0) & 0xFF;
+    int secondByte = buffer.get(1) & 0xFF;
+
+    if (firstByte == 0xFE && secondByte == 0xFF) {
+        return Charset.forName("UTF-16BE");
+    } else if (firstByte == 0xFF && secondByte == 0xFE) {
+        if (buffer.remaining() < 4) return null;
+        int thirdByte = buffer.get(2) & 0xFF;
+        int fourthByte = buffer.get(3) & 0xFF;
+        if (thirdByte == 0 && fourthByte == 0) {
+            return Charset.forName("UTF-32LE");
+        } else {
+            return Charset.forName("UTF-16LE");
+        }
+    } else if (firstByte == 0xEF && secondByte == 0xBB) {
+        if (buffer.remaining() < 3) return null;
+        int thirdByte = buffer.get(2) & 0xFF;
+        if (thirdByte == 0xBF) {
+            return Charset.forName("UTF-8");
+        }
+    } else if (firstByte == 0 && secondByte == 0) {
+        if (buffer.remaining() < 4) return null;
+        int thirdByte = buffer.get(2) & 0xFF;
+        int fourthByte = buffer.get(3) & 0xFF;
+        if (thirdByte == 0xFE && fourthByte == 0xFF) {
+            return Charset.forName("UTF-32BE");
+        }
+    }
+
+    return null;
+}
+
+// Helper method to remove BOM from ByteBuffer
+private static ByteBuffer removeBOM(ByteBuffer buffer) {
+    if (buffer.remaining() < 2) return buffer;
+
+    int firstByte = buffer.get(0) & 0xFF;
+    int secondByte = buffer.get(1) & 0xFF;
+
+    if (firstByte == 0xFE && secondByte == 0xFF) {
+        return buffer.slice(2, buffer.remaining() - 2);
+    } else if (firstByte == 0xFF && secondByte == 0xFE) {
+        if (buffer.remaining() < 4) return buffer.slice(2, buffer.remaining() - 2);
+        int thirdByte = buffer.get(2) & 0xFF;
+        int fourthByte = buffer.get(3) & 0xFF;
+        if (thirdByte == 0 && fourthByte == 0) {
+            return buffer.slice(4, buffer.remaining() - 4);
+        } else {
+            return buffer.slice(2, buffer.remaining() - 2);
+        }
+    } else if (firstByte == 0xEF && secondByte == 0xBB) {
+        if (buffer.remaining() < 3) return buffer;
+        int thirdByte = buffer.get(2) & 0xFF;
+        if (thirdByte == 0xBF) {
+            return buffer.slice(3, buffer.remaining() - 3);
+        }
+    } else if (firstByte == 0 && secondByte == 0) {
+        if (buffer.remaining() < 4) return buffer;
+        int thirdByte = buffer.get(2) & 0xFF;
+        int fourthByte = buffer.get(3) & 0xFF;
+        if (thirdByte == 0xFE && fourthByte == 0xFF) {
+            return buffer.slice(4, buffer.remaining() - 4);
+        }
+    }
+
+    return buffer;
+}
\ No newline at end of file
