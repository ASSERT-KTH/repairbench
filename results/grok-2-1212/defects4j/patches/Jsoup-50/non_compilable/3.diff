diff --git a/tmp/509d496f-85dc-4b30-a46c-ca9d3b5f6af7_buggy.java b/tmp/cd6db368-a408-4bdd-ba45-8080808cb823_fixed.java
index 25ca093..1bd86d9 100644
--- a/tmp/509d496f-85dc-4b30-a46c-ca9d3b5f6af7_buggy.java
+++ b/tmp/cd6db368-a408-4bdd-ba45-8080808cb823_fixed.java
@@ -1,52 +1,81 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    String detectedCharset = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM and determine charset
+    if (byteData.remaining() >= 2) {
+        byte[] bom = new byte[4];
+        byteData.mark();
+        byteData.get(bom, 0, Math.min(4, byteData.remaining()));
+        byteData.reset();
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        if (bom[0] == (byte)0xFE && bom[1] == (byte)0xFF) {
+            detectedCharset = "UTF-16BE";
+            byteData.position(2); // Skip BOM
+        } else if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE) {
+            if (byteData.remaining() >= 4 && bom[2] == 0 && bom[3] == 0) {
+                detectedCharset = "UTF-32LE";
+                byteData.position(4); // Skip BOM
+            } else {
+                detectedCharset = "UTF-16LE";
+                byteData.position(2); // Skip BOM
+            }
+        } else if (byteData.remaining() >= 4 && bom[0] == 0 && bom[1] == 0 && bom[2] == (byte)0xFE && bom[3] == (byte)0xFF) {
+            detectedCharset = "UTF-32BE";
+            byteData.position(4); // Skip BOM
+        } else if (bom[0] == (byte)0xEF && bom[1] == (byte)0xBB && bom[2] == (byte)0xBF) {
+            detectedCharset = "UTF-8";
+            byteData.position(3); // Skip BOM
+        }
+    }
+
+    // Use detected charset if available, otherwise use provided charset or default
+    String finalCharset = detectedCharset != null ? detectedCharset : 
+                          (charsetName != null ? charsetName : defaultCharset);
+
+    // Decode the byte data
+    docData = Charset.forName(finalCharset).decode(byteData).toString();
+
+    // Parse the document
     doc = parser.parseInput(docData, baseUri);
+
+    // Check for charset in meta tags
     Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+    if (meta != null) {
         String foundCharset = null;
         if (meta.hasAttr("http-equiv")) {
             foundCharset = getCharsetFromContentType(meta.attr("content"));
         }
         if (foundCharset == null && meta.hasAttr("charset")) {
             try {
                 if (Charset.isSupported(meta.attr("charset"))) {
                     foundCharset = meta.attr("charset");
                 }
             } catch (IllegalCharsetNameException e) {
                 foundCharset = null;
             }
         }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+        if (foundCharset != null && !foundCharset.equalsIgnoreCase(finalCharset)) {
+            // Re-parse with the new charset
+            finalCharset = foundCharset;
             byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+            if (detectedCharset != null) {
+                // Skip BOM again if it was present
+                switch (detectedCharset) {
+                    case "UTF-16BE": byteData.position(2); break;
+                    case "UTF-16LE": byteData.position(2); break;
+                    case "UTF-32BE": byteData.position(4); break;
+                    case "UTF-32LE": byteData.position(4); break;
+                    case "UTF-8": byteData.position(3); break;
                 }
             }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
-        if (doc == null) {
+            docData = Charset.forName(finalCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
         }
+    }
+
+    doc.outputSettings().charset(finalCharset);
     return doc;
 }
\ No newline at end of file
