diff --git a/tmp/14fcff50-41ea-4834-9a2f-c54f3fa4a149_buggy.java b/tmp/e5f56272-0622-4f3d-82c9-406de0ef758e_fixed.java
index 25ca093..1afc416 100644
--- a/tmp/14fcff50-41ea-4834-9a2f-c54f3fa4a149_buggy.java
+++ b/tmp/e5f56272-0622-4f3d-82c9-406de0ef758e_fixed.java
@@ -1,52 +1,73 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    String detectedCharset = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM and handle charset detection
+    if (byteData.remaining() >= 2) {
+        byte[] bom = new byte[4];
+        byteData.mark();
+        byteData.get(bom, 0, Math.min(4, byteData.remaining()));
+        byteData.reset();
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) { // UTF-16BE
+            detectedCharset = "UTF-16BE";
+            byteData.position(2);
+        } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) { // UTF-16LE
+            detectedCharset = "UTF-16LE";
+            byteData.position(2);
+            if (byteData.remaining() >= 2 && bom[2] == 0 && bom[3] == 0) { // UTF-32LE
+                detectedCharset = "UTF-32LE";
+                byteData.position(4);
+            }
+        } else if (bom[0] == 0 && bom[1] == 0 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) { // UTF-32BE
+            detectedCharset = "UTF-32BE";
+            byteData.position(4);
+        } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) { // UTF-8
+            detectedCharset = "UTF-8";
+            byteData.position(3);
+        }
+    }
+
+    // Use detected charset if available, otherwise use provided charset or default
+    String charsetToUse = detectedCharset != null ? detectedCharset : 
+                          (charsetName != null ? charsetName : defaultCharset);
+
+    // Decode the byte data
+    docData = Charset.forName(charsetToUse).decode(byteData).toString();
+
+    // Parse the document
     doc = parser.parseInput(docData, baseUri);
+
+    // Check for charset in meta tags
     Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+    if (meta != null) {
         String foundCharset = null;
         if (meta.hasAttr("http-equiv")) {
             foundCharset = getCharsetFromContentType(meta.attr("content"));
         }
         if (foundCharset == null && meta.hasAttr("charset")) {
             try {
                 if (Charset.isSupported(meta.attr("charset"))) {
                     foundCharset = meta.attr("charset");
                 }
             } catch (IllegalCharsetNameException e) {
                 foundCharset = null;
             }
         }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+        if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(charsetToUse)) {
+            // Need to re-parse with the new charset
             foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
             byteData.rewind();
             docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
-                }
-            }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
-        if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+            charsetToUse = foundCharset;
         }
+    }
+
+    // Set the output charset
+    doc.outputSettings().charset(charsetToUse);
+
     return doc;
 }
\ No newline at end of file
