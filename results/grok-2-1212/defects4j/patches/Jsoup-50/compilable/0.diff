diff --git a/tmp/e6b2e11c-9f70-4f08-b1c9-3397ac230608_buggy.java b/tmp/6d09690e-c41b-4a29-b574-81f1b8102794_fixed.java
index 25ca093..494a445 100644
--- a/tmp/e6b2e11c-9f70-4f08-b1c9-3397ac230608_buggy.java
+++ b/tmp/6d09690e-c41b-4a29-b574-81f1b8102794_fixed.java
@@ -1,52 +1,106 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM
+    BOM bom = detectBOM(byteData);
+    if (bom != null) {
+        charsetName = bom.getCharset();
+        byteData = skipBOM(byteData, bom);
+    }
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    if (charsetName == null) {
+        // Try to detect charset from meta tags
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+            if (foundCharset != null && !foundCharset.trim().isEmpty() && !foundCharset.equalsIgnoreCase(defaultCharset)) {
+                charsetName = foundCharset.trim().replaceAll("[\"']", "");
                 byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+                docData = Charset.forName(charsetName).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
+        // Use specified charset
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
+
     return doc;
 }
+
+private static BOM detectBOM(ByteBuffer byteData) {
+    byteData.mark();
+    if (byteData.remaining() >= 2) {
+        int firstByte = byteData.get() & 0xFF;
+        int secondByte = byteData.get() & 0xFF;
+        byteData.reset();
+
+        if (firstByte == 0xFE && secondByte == 0xFF) {
+            return BOM.UTF_16BE;
+        } else if (firstByte == 0xFF && secondByte == 0xFE) {
+            if (byteData.remaining() >= 4 && byteData.get(2) == 0 && byteData.get(3) == 0) {
+                return BOM.UTF_32LE;
+            }
+            return BOM.UTF_16LE;
+        } else if (byteData.remaining() >= 4) {
+            int thirdByte = byteData.get(2) & 0xFF;
+            int fourthByte = byteData.get(3) & 0xFF;
+            if (firstByte == 0 && secondByte == 0 && thirdByte == 0xFE && fourthByte == 0xFF) {
+                return BOM.UTF_32BE;
+            }
+        }
+    }
+    return null;
+}
+
+private static ByteBuffer skipBOM(ByteBuffer byteData, BOM bom) {
+    int bomLength = bom.getLength();
+    byte[] bomBytes = new byte[bomLength];
+    byteData.get(bomBytes);
+    return byteData.slice();
+}
+
+private enum BOM {
+    UTF_16BE("UTF-16BE", 2),
+    UTF_16LE("UTF-16LE", 2),
+    UTF_32BE("UTF-32BE", 4),
+    UTF_32LE("UTF-32LE", 4);
+
+    private final String charset;
+    private final int length;
+
+    BOM(String charset, int length) {
+        this.charset = charset;
+        this.length = length;
+    }
+
+    public String getCharset() {
+        return charset;
+    }
+
+    public int getLength() {
+        return length;
+    }
+}
\ No newline at end of file
