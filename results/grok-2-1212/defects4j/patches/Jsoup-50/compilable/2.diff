diff --git a/tmp/9cc03ad3-9bb2-420b-b064-711d32043b7a_buggy.java b/tmp/e8e910fe-4796-468e-98d9-cab6d10b2aed_fixed.java
index 25ca093..57836ba 100644
--- a/tmp/9cc03ad3-9bb2-420b-b064-711d32043b7a_buggy.java
+++ b/tmp/e8e910fe-4796-468e-98d9-cab6d10b2aed_fixed.java
@@ -1,52 +1,98 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    // Detect and handle BOM
+    Charset detectedCharset = detectBOM(byteData);
+    if (detectedCharset != null) {
+        charsetName = detectedCharset.name();
+    } else if (charsetName == null) {
+        // If no BOM and charsetName is null, try to determine from meta
+        charsetName = defaultCharset;
+        docData = Charset.forName(charsetName).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+            if (foundCharset != null && !foundCharset.trim().isEmpty() && !foundCharset.equalsIgnoreCase(charsetName)) {
+                charsetName = foundCharset.trim().replaceAll("[\"']", "");
                 byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+                docData = Charset.forName(charsetName).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
+        // Charset specified by content type header or by user
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
+
+    // Decode using the determined charset
     byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    docData = Charset.forName(charsetName).decode(byteData).toString();
+
+    // Handle BOM character if present
+    if (!docData.isEmpty() && docData.charAt(0) == UNICODE_BOM) {
         docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
+
     return doc;
 }
+
+// Helper method to detect BOM
+private static Charset detectBOM(ByteBuffer byteData) {
+    byteData.mark();
+    try {
+        if (byteData.remaining() >= 2) {
+            int firstByte = byteData.get() & 0xFF;
+            int secondByte = byteData.get() & 0xFF;
+            byteData.rewind();
+
+            if (firstByte == 0xFE && secondByte == 0xFF) {
+                return Charset.forName("UTF-16BE");
+            } else if (firstByte == 0xFF && secondByte == 0xFE) {
+                if (byteData.remaining() >= 4 && byteData.get(2) == 0 && byteData.get(3) == 0) {
+                    return Charset.forName("UTF-32LE");
+                }
+                return Charset.forName("UTF-16LE");
+            } else if (firstByte == 0xEF && secondByte == 0xBB) {
+                if (byteData.remaining() >= 3 && byteData.get(2) == 0xBF) {
+                    return Charset.forName("UTF-8");
+                }
+            }
+        }
+
+        if (byteData.remaining() >= 4) {
+            int firstByte = byteData.get() & 0xFF;
+            int secondByte = byteData.get() & 0xFF;
+            int thirdByte = byteData.get() & 0xFF;
+            int fourthByte = byteData.get() & 0xFF;
+            byteData.rewind();
+
+            if (firstByte == 0 && secondByte == 0 && thirdByte == 0xFE && fourthByte == 0xFF) {
+                return Charset.forName("UTF-32BE");
+            }
+        }
+    } finally {
+        byteData.reset();
+    }
+
+    return null;
+}
\ No newline at end of file
