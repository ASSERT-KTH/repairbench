diff --git a/tmp/82cb05af-a42f-4cc4-841d-2e5e32a81686_buggy.java b/tmp/46965830-423a-4913-8add-e9276d7fbea7_fixed.java
index 25ca093..ccac4c7 100644
--- a/tmp/82cb05af-a42f-4cc4-841d-2e5e32a81686_buggy.java
+++ b/tmp/46965830-423a-4913-8add-e9276d7fbea7_fixed.java
@@ -1,52 +1,74 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    byteData.mark(); // Mark the buffer so we can revert back to this position
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    // Check for BOM and adjust charsetName accordingly
+    if (byteData.remaining() >= 2) {
+        byte[] bom = new byte[Math.min(4, byteData.remaining())];
+        byteData.get(bom);
+        byteData.reset(); // Reset back to the original position
+
+        if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {
+            charsetName = "UTF-16BE";
+            byteData.position(2); // Skip BOM
+        } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {
+            if (bom.length > 2 && bom[2] == 0 && bom[3] == 0) {
+                charsetName = "UTF-32LE";
+                byteData.position(4); // Skip BOM
+            } else {
+                charsetName = "UTF-16LE";
+                byteData.position(2); // Skip BOM
+            }
+        } else if (bom[0] == 0 && bom[1] == 0 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {
+            charsetName = "UTF-32BE";
+            byteData.position(4); // Skip BOM
+        } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {
+            charsetName = "UTF-8";
+            byteData.position(3); // Skip BOM
+        }
+    }
+
+    // Determine charset and decode document data
+    if (charsetName == null) { // If no charset was determined from BOM
+        // Decode as UTF-8 (default charset for HTML5, safe guess)
+        charsetName = "UTF-8";
+        docData = Charset.forName(charsetName).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
+
+        // Check HTML meta tags for charset information
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+            if (foundCharset != null && !foundCharset.equals(charsetName)) {
+                charsetName = foundCharset.trim().replaceAll("[\"']", "");
                 byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+                docData = Charset.forName(charsetName).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+    } else {
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
+
     return doc;
 }
\ No newline at end of file
