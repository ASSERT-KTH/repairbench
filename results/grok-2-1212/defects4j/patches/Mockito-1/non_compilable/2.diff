diff --git a/tmp/e7d18fe9-e27e-41d8-8ddc-d70a85fb8f0f_buggy.java b/tmp/508ae9b5-69ec-42bb-bf8a-77e762f2326d_fixed.java
index 1c875ad..71581a5 100644
--- a/tmp/e7d18fe9-e27e-41d8-8ddc-d70a85fb8f0f_buggy.java
+++ b/tmp/508ae9b5-69ec-42bb-bf8a-77e762f2326d_fixed.java
@@ -1,31 +1,24 @@
 public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
+    Object[] args = invocation.getRawArguments();
     for (int position = 0; position < matchers.size(); position++) {
         Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+        if (m instanceof CapturesArguments && position < args.length) {
+            if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {
+                Object array = args[position];
+                for (int i = 0; i < Array.getLength(array); i++) {
+                    ((CapturesArguments) m).captureFrom(Array.get(array, i));
                 }
+            } else {
+                ((CapturesArguments) m).captureFrom(args[position]);
             }
         }
+    }
+}
+
+private boolean isVariableArgument(Invocation invocation, int position) {
+    return invocation.getMethod().isVarArgs() && position == invocation.getMethod().getParameterTypes().length - 1;
+}
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+private boolean isVarargMatcher(Matcher m) {
+    return m.getClass().getName().contains("Vararg");
 }
\ No newline at end of file
