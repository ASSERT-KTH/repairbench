diff --git a/tmp/7dd67887-28d7-4410-a6e2-7125832c45c6_buggy.java b/tmp/3aae43d2-e86f-4763-9820-35c30b1951fa_fixed.java
index 1c875ad..c3d8579 100644
--- a/tmp/7dd67887-28d7-4410-a6e2-7125832c45c6_buggy.java
+++ b/tmp/3aae43d2-e86f-4763-9820-35c30b1951fa_fixed.java
@@ -1,31 +1,36 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
         int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
+        Object array = invocation.getRawArguments()[indexOfVararg];
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
+                if (position == indexOfVararg && isVarargMatcher(m)) {
+                    for (int i = 0; i < Array.getLength(array); i++) {
+                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
+                    }
+                    // Since we've captured all varargs already, it doesn't make sense to process other matchers.
+                    return;
+                } else if (position < indexOfVararg || (position == indexOfVararg && Array.getLength(array) == 0)) {
+                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+                }
+            }
+        }
+    } else {
+        for (int position = 0; position < matchers.size(); position++) {
+            Matcher m = matchers.get(position);
+            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
+}
+
+// Helper methods
+private boolean isVarargMatcher(Matcher matcher) {
+    return matcher instanceof VarargMatcher;
+}
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+private boolean isVariableArgument(Invocation invocation, int position) {
+    return invocation.getMethod().isVarArgs() && position == invocation.getRawArguments().length - 1;
 }
\ No newline at end of file
