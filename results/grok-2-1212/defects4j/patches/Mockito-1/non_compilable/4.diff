diff --git a/tmp/d4310361-529c-4fc1-bb6f-48907979166f_buggy.java b/tmp/2d79babc-616b-4554-ac5b-5ae226b6f232_fixed.java
index 1c875ad..6e34481 100644
--- a/tmp/d4310361-529c-4fc1-bb6f-48907979166f_buggy.java
+++ b/tmp/2d79babc-616b-4554-ac5b-5ae226b6f232_fixed.java
@@ -1,31 +1,31 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        int varargIndex = invocation.getRawArguments().length - 1;
+        Object[] rawArguments = invocation.getRawArguments();
 
-        } else {
         for (int position = 0; position < matchers.size(); position++) {
+            Matcher m = matchers.get(position);
+            if (m instanceof CapturesArguments) {
+                if (position == varargIndex && isVarargMatcher(m)) {
+                    Object varargArray = rawArguments[position];
+                    for (int i = 0; i < Array.getLength(varargArray); i++) {
+                        ((CapturesArguments) m).captureFrom(Array.get(varargArray, i));
+                    }
+                } else if (position < rawArguments.length) {
+                    ((CapturesArguments) m).captureFrom(rawArguments[position]);
+                }
+            }
+        }
+    } else {
+        for (int position = 0; position < matchers.size() && position < invocation.getRawArguments().length; position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
+}
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+private boolean isVarargMatcher(Matcher m) {
+    return m.getClass().getName().endsWith("AnyVararg");
 }
\ No newline at end of file
