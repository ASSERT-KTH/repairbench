diff --git a/tmp/d4083fe1-92cc-43b7-bfcf-a5f947361f4e_buggy.java b/tmp/b4ee58c4-bd0c-4d3c-9069-6855d6043b72_fixed.java
index d5b1b52..ba5494f 100644
--- a/tmp/d4083fe1-92cc-43b7-bfcf-a5f947361f4e_buggy.java
+++ b/tmp/b4ee58c4-bd0c-4d3c-9069-6855d6043b72_fixed.java
@@ -1,36 +1,75 @@
 /**
  * <p>Adds all the elements of the given arrays into a new array.</p>
  * <p>The new array contains all of the element of <code>array1</code> followed
  * by all of the elements <code>array2</code>. When an array is returned, it is always
  * a new array.</p>
  *
  * <pre>
  * ArrayUtils.addAll(null, null)     = null
  * ArrayUtils.addAll(array1, null)   = cloned copy of array1
  * ArrayUtils.addAll(null, array2)   = cloned copy of array2
  * ArrayUtils.addAll([], [])         = []
  * ArrayUtils.addAll([null], [null]) = [null, null]
  * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
  * </pre>
  *
  * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
  * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
  * @return The new array, <code>null</code> if both arrays are <code>null</code>.
  *      The type of the new array is the type of the first array,
  *      unless the first array is null, in which case the type is the same as the second array.
+ * @throws IllegalArgumentException if the arrays cannot be combined due to type incompatibility
  * @since 2.1
  */
 @SuppressWarnings("unchecked")
 public static <T> T[] addAll(T[] array1, T... array2) {
+    if (array1 == null && array2 == null) {
+        return null;
+    }
     if (array1 == null) {
         return clone(array2);
-        } else if (array2 == null) {
+    }
+    if (array2 == null) {
         return clone(array1);
     }
-        final Class<?> type1 = array1.getClass().getComponentType();
-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
+
+    Class<?> type1 = array1.getClass().getComponentType();
+    Class<?> type2 = array2.getClass().getComponentType();
+    Class<?> commonType = findCommonSuperclass(type1, type2);
+
+    if (commonType == null) {
+        throw new IllegalArgumentException("Cannot combine arrays of incompatible types");
+    }
+
+    T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);
     System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+    try {
         System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
+    } catch (ArrayStoreException e) {
+        throw new IllegalArgumentException("Cannot combine arrays of incompatible types", e);
+    }
     return joinedArray;
 }
+
+private static Class<?> findCommonSuperclass(Class<?> type1, Class<?> type2) {
+    if (type1.isAssignableFrom(type2)) {
+        return type1;
+    }
+    if (type2.isAssignableFrom(type1)) {
+        return type2;
+    }
+    if (type1.isPrimitive() || type2.isPrimitive()) {
+        return null;
+    }
+    while (type1 != null) {
+        Class<?> super2 = type2;
+        while (super2 != null) {
+            if (type1 == super2) {
+                return type1;
+            }
+            super2 = super2.getSuperclass();
+        }
+        type1 = type1.getSuperclass();
+    }
+    return null;
+}
\ No newline at end of file
