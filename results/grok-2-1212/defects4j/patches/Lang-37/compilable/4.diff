diff --git a/tmp/0197089f-7571-487f-b3ef-f90b97d60236_buggy.java b/tmp/6bfc6c89-ab4a-4849-b209-f33d019c7351_fixed.java
index d5b1b52..c9f3b79 100644
--- a/tmp/0197089f-7571-487f-b3ef-f90b97d60236_buggy.java
+++ b/tmp/6bfc6c89-ab4a-4849-b209-f33d019c7351_fixed.java
@@ -1,36 +1,49 @@
 /**
  * <p>Adds all the elements of the given arrays into a new array.</p>
  * <p>The new array contains all of the element of <code>array1</code> followed
  * by all of the elements <code>array2</code>. When an array is returned, it is always
  * a new array.</p>
  *
  * <pre>
  * ArrayUtils.addAll(null, null)     = null
  * ArrayUtils.addAll(array1, null)   = cloned copy of array1
  * ArrayUtils.addAll(null, array2)   = cloned copy of array2
  * ArrayUtils.addAll([], [])         = []
  * ArrayUtils.addAll([null], [null]) = [null, null]
  * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
  * </pre>
  *
  * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
  * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
  * @return The new array, <code>null</code> if both arrays are <code>null</code>.
  *      The type of the new array is the type of the first array,
  *      unless the first array is null, in which case the type is the same as the second array.
+ * @throws IllegalArgumentException if the type of the elements of <code>array2</code> 
+ *      is not assignable to the type of <code>array1</code> when <code>array1</code> is not null.
  * @since 2.1
  */
 @SuppressWarnings("unchecked")
 public static <T> T[] addAll(T[] array1, T... array2) {
+    if (array1 == null && array2 == null) {
+        return null;
+    }
     if (array1 == null) {
         return clone(array2);
-        } else if (array2 == null) {
+    }
+    if (array2 == null) {
         return clone(array1);
     }
+    
     final Class<?> type1 = array1.getClass().getComponentType();
     T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
     System.arraycopy(array1, 0, joinedArray, 0, array1.length);
-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
+    
+    for (int i = 0; i < array2.length; i++) {
+        if (!type1.isInstance(array2[i])) {
+            throw new IllegalArgumentException("Cannot store " + array2[i].getClass().getName() + " in an array of " + type1.getName());
+        }
+        joinedArray[array1.length + i] = array2[i];
+    }
+    
     return joinedArray;
 }
\ No newline at end of file
