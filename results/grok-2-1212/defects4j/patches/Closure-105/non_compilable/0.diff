diff --git a/tmp/312a6252-8458-48e1-b37e-23c368914125_buggy.java b/tmp/108a2054-2da0-466f-9450-9a2f2ef9d49d_fixed.java
index ef65dd9..e8ec958 100644
--- a/tmp/312a6252-8458-48e1-b37e-23c368914125_buggy.java
+++ b/tmp/108a2054-2da0-466f-9450-9a2f2ef9d49d_fixed.java
@@ -1,92 +1,126 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                        Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
         return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
         return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
     // Merges adjacent String nodes.
     while (elem != null) {
         if (NodeUtil.isImmutableValue(elem)) {
             if (sb.length() > 0) {
                 sb.append(joinString);
             }
             sb.append(NodeUtil.getStringValue(elem));
         } else {
             if (sb.length() > 0) {
                 // + 2 for the quotes.
                 foldedSize += sb.length() + 2;
                 arrayFoldedChildren.add(Node.newString(sb.toString()));
                 sb = new StringBuilder();
             }
             foldedSize += InlineCostEstimator.getCost(elem);
             arrayFoldedChildren.add(elem);
         }
         elem = elem.getNext();
     }
 
     if (sb.length() > 0) {
         // + 2 for the quotes.
         foldedSize += sb.length() + 2;
         arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
     // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
         case 0:
             Node emptyStringNode = Node.newString("");
             parent.replaceChild(n, emptyStringNode);
             break;
 
         case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
+            Node foldedStringNode = arrayFoldedChildren.get(0);
             if (foldedSize > originalSize) {
                 return;
             }
             arrayNode.detachChildren();
             if (foldedStringNode.getType() != Token.STRING) {
                 // If the Node is not a string literal, ensure that
                 // it is coerced to a string.
                 Node replacement = new Node(Token.ADD,
                     Node.newString(""), foldedStringNode);
                 foldedStringNode = replacement;
             }
             parent.replaceChild(n, foldedStringNode);
             break;
 
         default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return;
+            // Handle non-string literals and optimize the join operation
+            boolean allImmutable = true;
+            StringBuilder combined = new StringBuilder();
+            for (Node node : arrayFoldedChildren) {
+                if (NodeUtil.isImmutableValue(node)) {
+                    if (combined.length() > 0) {
+                        combined.append(joinString);
+                    }
+                    combined.append(NodeUtil.getStringValue(node));
+                } else {
+                    allImmutable = false;
+                    break;
                 }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += InlineCostEstimator.getCost(right);
-        if (foldedSize > originalSize) {
-          return;
             }
-        arrayNode.detachChildren();
+
+            if (allImmutable) {
+                // All elements are immutable, so we can create a single string
+                Node newStringNode = Node.newString(combined.toString());
+                parent.replaceChild(n, newStringNode);
+            } else {
+                // Some elements are not immutable, create a new array
+                // with optimized string concatenation
+                Node newArray = new Node(Token.ARRAYLIT);
+                StringBuilder currentString = new StringBuilder();
                 for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
+                    if (NodeUtil.isImmutableValue(node)) {
+                        if (currentString.length() > 0) {
+                            currentString.append(joinString);
+                        }
+                        currentString.append(NodeUtil.getStringValue(node));
+                    } else {
+                        if (currentString.length() > 0) {
+                            newArray.addChildToBack(Node.newString(currentString.toString()));
+                            currentString = new StringBuilder();
+                        }
+                        newArray.addChildToBack(node);
+                    }
+                }
+                if (currentString.length() > 0) {
+                    newArray.addChildToBack(Node.newString(currentString.toString()));
+                }
+
+                // Recreate the join operation
+                Node newJoin = NodeUtil.newCallNode(
+                    NodeUtil.newGetProp(newArray, "join"),
+                    Node.newString(joinString));
+                parent.replaceChild(n, newJoin);
             }
             break;
     }
     t.getCompiler().reportCodeChange();
 }
\ No newline at end of file
