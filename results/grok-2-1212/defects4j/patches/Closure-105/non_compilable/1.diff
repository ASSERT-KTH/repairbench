diff --git a/tmp/c55f1f31-0952-4db0-8279-900b414756a3_buggy.java b/tmp/4c1556bf-6349-49a4-9b5f-f7bbbd6e4223_fixed.java
index ef65dd9..dcded8b 100644
--- a/tmp/c55f1f31-0952-4db0-8279-900b414756a3_buggy.java
+++ b/tmp/4c1556bf-6349-49a4-9b5f-f7bbbd6e4223_fixed.java
@@ -1,92 +1,131 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
+    if (joinString == null) {
+      joinString = "";
+    }
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
+
     // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
+        String elemValue = NodeUtil.getStringValue(elem);
+        if (elemValue == null) {
+          elemValue = String.valueOf(NodeUtil.getImmutableValue(elem));
+        }
         if (sb.length() > 0) {
           sb.append(joinString);
         }
-        sb.append(NodeUtil.getStringValue(elem));
+        sb.append(elemValue);
       } else {
         if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
+          foldedSize += sb.length();
           arrayFoldedChildren.add(Node.newString(sb.toString()));
           sb = new StringBuilder();
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       elem = elem.getNext();
     }
 
     if (sb.length() > 0) {
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
+      foldedSize += sb.length();
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
+
+    // one for each separator.
+    foldedSize += (arrayFoldedChildren.size() - 1) * joinString.length();
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         parent.replaceChild(n, emptyStringNode);
         break;
 
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
           // If the Node is not a string literal, ensure that
           // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString(""), foldedStringNode);
           foldedStringNode = replacement;
         }
         parent.replaceChild(n, foldedStringNode);
         break;
 
       default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return;
-        }
+        // Check if folding is beneficial
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
         foldedSize += InlineCostEstimator.getCost(right);
         if (foldedSize > originalSize) {
           return;
         }
+        
+        // Optimize empty string cases
+        List<Node> optimizedChildren = new ArrayList<>();
+        StringBuilder currentGroup = new StringBuilder();
+        boolean first = true;
+        
+        for (Node child : arrayFoldedChildren) {
+          if (child.isString() && child.getString().isEmpty()) {
+            if (currentGroup.length() > 0) {
+              currentGroup.append(joinString);
+            }
+          } else {
+            if (currentGroup.length() > 0) {
+              if (!first) {
+                currentGroup.insert(0, joinString);
+              }
+              optimizedChildren.add(Node.newString(currentGroup.toString()));
+              currentGroup = new StringBuilder();
+            }
+            optimizedChildren.add(child);
+            first = false;
+          }
+        }
+        
+        if (currentGroup.length() > 0) {
+          if (!first) {
+            currentGroup.insert(0, joinString);
+          }
+          optimizedChildren.add(Node.newString(currentGroup.toString()));
+        }
+        
+        if (optimizedChildren.size() == arrayFoldedChildren.size()) {
+          return; // No optimization occurred
+        }
+        
         arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
+        for (Node node : optimizedChildren) {
           arrayNode.addChildToBack(node);
         }
         break;
     }
     t.getCompiler().reportCodeChange();
   }
\ No newline at end of file
