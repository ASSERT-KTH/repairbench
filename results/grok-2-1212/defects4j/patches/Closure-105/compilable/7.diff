diff --git a/tmp/2e6e7498-7ec6-4ac4-9dbe-dd0e334ef9d7_buggy.java b/tmp/3f197b23-a084-449f-aa51-57deac974cf5_fixed.java
index ef65dd9..f75888d 100644
--- a/tmp/2e6e7498-7ec6-4ac4-9dbe-dd0e334ef9d7_buggy.java
+++ b/tmp/3f197b23-a084-449f-aa51-57deac974cf5_fixed.java
@@ -1,92 +1,121 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
-                         Node parent) {
+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
         return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
-    if ((arrayNode.getType() != Token.ARRAYLIT) ||
-        !functionName.getString().equals("join")) {
+    if (arrayNode.getType() != Token.ARRAYLIT || !functionName.getString().equals("join")) {
         return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
     // Merges adjacent String nodes.
     while (elem != null) {
         if (NodeUtil.isImmutableValue(elem)) {
             if (sb.length() > 0) {
                 sb.append(joinString);
             }
             sb.append(NodeUtil.getStringValue(elem));
         } else {
             if (sb.length() > 0) {
                 // + 2 for the quotes.
                 foldedSize += sb.length() + 2;
                 arrayFoldedChildren.add(Node.newString(sb.toString()));
                 sb = new StringBuilder();
             }
             foldedSize += InlineCostEstimator.getCost(elem);
             arrayFoldedChildren.add(elem);
         }
         elem = elem.getNext();
     }
 
     if (sb.length() > 0) {
         // + 2 for the quotes.
         foldedSize += sb.length() + 2;
         arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
     // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
+
+    // Handle cases with empty strings and multiple elements
+    if (joinString == null) {
+        joinString = "";
+    }
+
     switch (arrayFoldedChildren.size()) {
         case 0:
             Node emptyStringNode = Node.newString("");
             parent.replaceChild(n, emptyStringNode);
             break;
 
         case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
+            Node foldedStringNode = arrayFoldedChildren.get(0);
             if (foldedSize > originalSize) {
                 return;
             }
             arrayNode.detachChildren();
             if (foldedStringNode.getType() != Token.STRING) {
                 // If the Node is not a string literal, ensure that
                 // it is coerced to a string.
                 Node replacement = new Node(Token.ADD,
                     Node.newString(""), foldedStringNode);
                 foldedStringNode = replacement;
             }
             parent.replaceChild(n, foldedStringNode);
             break;
 
         default:
-        // No folding could actually be performed.
+            // Check if we can fully merge the array
+            boolean canMergeFully = true;
+            StringBuilder fullMerge = new StringBuilder();
+            for (int i = 0; i < arrayFoldedChildren.size(); i++) {
+                Node child = arrayFoldedChildren.get(i);
+                if (child.getType() != Token.STRING) {
+                    canMergeFully = false;
+                    break;
+                }
+                if (i > 0) {
+                    fullMerge.append(joinString);
+                }
+                fullMerge.append(NodeUtil.getStringValue(child));
+            }
+
+            if (canMergeFully) {
+                // Fully merged case
+                int fullMergeSize = fullMerge.length() + 2; // +2 for quotes
+                if (fullMergeSize <= originalSize) {
+                    Node mergedStringNode = Node.newString(fullMerge.toString());
+                    parent.replaceChild(n, mergedStringNode);
+                    break;
+                }
+            }
+
+            // Partial merge or no merge
             if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
                 return;
             }
             int kJoinOverhead = "[].join()".length();
             foldedSize += kJoinOverhead;
             foldedSize += InlineCostEstimator.getCost(right);
             if (foldedSize > originalSize) {
                 return;
             }
             arrayNode.detachChildren();
             for (Node node : arrayFoldedChildren) {
                 arrayNode.addChildToBack(node);
             }
             break;
     }
     t.getCompiler().reportCodeChange();
 }
\ No newline at end of file
