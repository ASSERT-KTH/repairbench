diff --git a/tmp/d2787233-3977-441f-9eb9-4cd2edabc344_buggy.java b/tmp/21563295-5973-453d-b3c1-9ce710989021_fixed.java
index f650982..f61fff2 100644
--- a/tmp/d2787233-3977-441f-9eb9-4cd2edabc344_buggy.java
+++ b/tmp/21563295-5973-453d-b3c1-9ce710989021_fixed.java
@@ -1,42 +1,53 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
-        if (l instanceof Collection) {
+    boolean lIsCollection = l instanceof Collection;
+    boolean rIsCollection = r instanceof Collection;
+
+    if (lIsCollection) {
         l = ((Collection) l).iterator();
     }
 
-        if (r instanceof Collection) {
+    if (rIsCollection) {
         r = ((Collection) r).iterator();
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
+    boolean lIsIterable = l instanceof Iterator;
+    boolean rIsIterable = r instanceof Iterator;
+
+    if (lIsIterable && !rIsIterable && !rIsCollection) {
         return contains((Iterator) l, r);
     }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
+    if (!lIsIterable && rIsIterable && !lIsCollection) {
         return contains((Iterator) r, l);
     }
-        if (l instanceof Iterator && r instanceof Iterator) {
+    if (lIsIterable && rIsIterable) {
         return findMatch((Iterator) l, (Iterator) r);
     }
+
+    // Handle case where one side is a collection and the other is a single value
+    if (lIsCollection && !rIsCollection && !rIsIterable) {
+        return ((Collection) left.compute(context)).contains(r);
+    }
+    if (rIsCollection && !lIsCollection && !lIsIterable) {
+        return ((Collection) right.compute(context)).contains(l);
+    }
+
     return equal(l, r);
 }
\ No newline at end of file
