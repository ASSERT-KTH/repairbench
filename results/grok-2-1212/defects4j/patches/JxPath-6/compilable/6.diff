diff --git a/tmp/7c7fe07d-09de-459b-a0bf-73a3487e968d_buggy.java b/tmp/b6e5ef62-bb57-440c-a9c2-2c34ba7ebf66_fixed.java
index f650982..f70ef16 100644
--- a/tmp/7c7fe07d-09de-459b-a0bf-73a3487e968d_buggy.java
+++ b/tmp/b6e5ef62-bb57-440c-a9c2-2c34ba7ebf66_fixed.java
@@ -1,42 +1,55 @@
-    /**
-     * Compares two values
-     */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
+    // Convert collections to iterators
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
+    // Handle cases where one or both operands are iterators
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        return containsAll((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        return containsAll((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
+
+    // If both operands are not iterators, perform direct comparison
     return equal(l, r);
 }
+
+// Helper method to check if an iterator contains all elements of a given object
+private boolean containsAll(Iterator<?> iter, Object obj) {
+    while (iter.hasNext()) {
+        Object item = iter.next();
+        if (equal(item, obj)) {
+            return true;
+        }
+    }
+    return false;
+}
+
+// Existing helper methods (assumed to be implemented elsewhere)
+// private boolean contains(Iterator<?> iter, Object obj) { ... }
+// private boolean findMatch(Iterator<?> iter1, Iterator<?> iter2) { ... }
+// private boolean equal(Object l, Object r) { ... }
\ No newline at end of file
