diff --git a/tmp/72ed801a-5f68-462b-9d93-a485c2c709a3_buggy.java b/tmp/d8735c41-11c2-4297-9d5d-3b7b3ffbcfef_fixed.java
index f650982..58bcca4 100644
--- a/tmp/72ed801a-5f68-462b-9d93-a485c2c709a3_buggy.java
+++ b/tmp/d8735c41-11c2-4297-9d5d-3b7b3ffbcfef_fixed.java
@@ -1,42 +1,44 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
+    // Convert collections to iterators
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
+    // Handle cases where one side is an iterator and the other is not
+    if (l instanceof Iterator && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+    if (!(l instanceof Iterator) && r instanceof Iterator) {
+        // Convert the non-iterator value to a single-element iterator
+        Iterator singleElementIterator = Collections.singleton(r).iterator();
+        return findMatch(singleElementIterator, (Iterator) r);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
+
+    // If neither side is an iterator, perform a direct comparison
     return equal(l, r);
 }
\ No newline at end of file
