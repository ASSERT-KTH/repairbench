diff --git a/tmp/7f1ef3b9-b0ab-448e-ae40-eb96907c16ff_buggy.java b/tmp/a38fb3bb-337f-4940-8fe6-8128cc9e827c_fixed.java
index f650982..fc3567c 100644
--- a/tmp/7f1ef3b9-b0ab-448e-ae40-eb96907c16ff_buggy.java
+++ b/tmp/a38fb3bb-337f-4940-8fe6-8128cc9e827c_fixed.java
@@ -1,42 +1,64 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null ? "null" : l.getClass().getName()) + " " +
 //            (r == null ? "null" : r.getClass().getName()));
 
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        // Check for null values
+        if (l == null && r == null) {
+            return true;
         }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        if (l == null || r == null) {
+            return false;
+        }
+
+        // Handle iterator comparisons
+        if (l instanceof Iterator || r instanceof Iterator) {
+            if (!(l instanceof Iterator)) {
+                l = new SingleElementIterator(l);
+            }
+            if (!(r instanceof Iterator)) {
+                r = new SingleElementIterator(r);
             }
-        if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
-        return equal(l, r);
+
+        // Handle other types of comparisons
+        if (l instanceof Number && r instanceof Number) {
+            return ((Number) l).doubleValue() == ((Number) r).doubleValue();
+        }
+        if (l instanceof Boolean && r instanceof Boolean) {
+            return ((Boolean) l).booleanValue() == ((Boolean) r).booleanValue();
+        }
+        if (l instanceof String && r instanceof String) {
+            return l.equals(r);
+        }
+
+        // For other types, use the default equals method
+        return l.equals(r);
     }
\ No newline at end of file
