diff --git a/tmp/00dad33e-f51c-4058-bb9e-a77e11db4262_buggy.java b/tmp/d734b17a-7c03-4cc9-9e8e-c25cef0b58e6_fixed.java
index f650982..e1f9351 100644
--- a/tmp/00dad33e-f51c-4058-bb9e-a77e11db4262_buggy.java
+++ b/tmp/d734b17a-7c03-4cc9-9e8e-c25cef0b58e6_fixed.java
@@ -1,42 +1,51 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
+    // Handle collections
     if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
-        }
-
         if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+            // Compare two collections
+            Iterator<?> iterL = ((Collection<?>) l).iterator();
+            Iterator<?> iterR = ((Collection<?>) r).iterator();
+            return findMatch(iterL, iterR);
+        } else {
+            // Compare collection to single value
+            Iterator<?> iterL = ((Collection<?>) l).iterator();
+            return contains(iterL, r);
+        }
+    } else if (r instanceof Collection) {
+        // Compare single value to collection
+        Iterator<?> iterR = ((Collection<?>) r).iterator();
+        return contains(iterR, l);
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
-        }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
-        }
+    // Handle iterators
     if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+        return findMatch((Iterator<?>) l, (Iterator<?>) r);
     }
-        return equal(l, r);
+    if (l instanceof Iterator) {
+        return contains((Iterator<?>) l, r);
+    }
+    if (r instanceof Iterator) {
+        return contains((Iterator<?>) r, l);
+    }
+
+    // Handle simple equality
+    return Objects.equals(l, r);
 }
\ No newline at end of file
