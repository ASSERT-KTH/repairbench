diff --git a/tmp/792a373a-7b52-4eed-9a34-f4a92264fced_buggy.java b/tmp/53371903-4b13-4773-aed3-bd09c25469d9_fixed.java
index b2db1d6..d795be6 100644
--- a/tmp/792a373a-7b52-4eed-9a34-f4a92264fced_buggy.java
+++ b/tmp/53371903-4b13-4773-aed3-bd09c25469d9_fixed.java
@@ -1,29 +1,42 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
             if (am != null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                // Check if the method already exists in mixIns
+                AnnotatedMethod existing = mixIns.find(m);
+                if (existing != null) {
+                    // Merge annotations if method already exists
+                    AnnotatedMethod merged = _constructMethod(m);
+                    merged = _mergeAnnotations(merged, existing);
+                    mixIns.add(merged);
+                } else {
+                    // Add the new method to mixIns
                     mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
+}
+
+// Helper method to merge annotations
+private AnnotatedMethod _mergeAnnotations(AnnotatedMethod target, AnnotatedMethod source) {
+    AnnotationMap targetAnnotations = target.getAnnotationMap();
+    AnnotationMap sourceAnnotations = source.getAnnotationMap();
+    for (Map.Entry<Class<? extends Annotation>, Annotation> entry : sourceAnnotations) {
+        if (!targetAnnotations.has(entry.getKey())) {
+            targetAnnotations.add(entry.getKey(), entry.getValue());
+        }
+    }
+    return new AnnotatedMethod(target.getAnnotated(), targetAnnotations);
+}
\ No newline at end of file
