diff --git a/tmp/9a447bda-15e8-4d65-8630-e51dcaf9e003_buggy.java b/tmp/88239527-5086-4ef0-9611-80b9668e9057_fixed.java
index b2db1d6..472824a 100644
--- a/tmp/9a447bda-15e8-4d65-8630-e51dcaf9e003_buggy.java
+++ b/tmp/88239527-5086-4ef0-9611-80b9668e9057_fixed.java
@@ -1,29 +1,30 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
             if (am != null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                // Check if we have a previous mix-in for this method
+                AnnotatedMethod prevMixIn = mixIns.find(m);
+                if (prevMixIn != null) {
+                    // If we have a previous mix-in, create a new one that includes both
+                    AnnotatedMethod newMixIn = _constructMethod(m);
+                    newMixIn.augmentWith(prevMixIn);
+                    mixIns.add(newMixIn);
+                } else {
+                    // If no previous mix-in, just add the new one
                     mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
+}
\ No newline at end of file
