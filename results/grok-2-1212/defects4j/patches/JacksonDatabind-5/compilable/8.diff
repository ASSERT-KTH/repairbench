diff --git a/tmp/48e9d9e7-bfd9-472f-ad49-cc13de82ff88_buggy.java b/tmp/6068058b-aad6-4a13-a998-d9b3f67270ab_fixed.java
index b2db1d6..854ad10 100644
--- a/tmp/48e9d9e7-bfd9-472f-ad49-cc13de82ff88_buggy.java
+++ b/tmp/6068058b-aad6-4a13-a998-d9b3f67270ab_fixed.java
@@ -1,29 +1,28 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
             /* Do we already have a method to augment (from sub-class
              * that will mask this mixIn)? If so, add if visible
              * without masking (no such annotation)
              */
             if (am != null) {
                 _addMixUnders(m, am);
                 /* Otherwise will have precedence, but must wait
                  * until we find the real method (mixIn methods are
                  * just placeholder, can't be called)
                  */
-                } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+            }
+            // Always add to mixIns, even if am is not null, to support multi-level merging
             mixIns.add(_constructMethod(m));
         }
     }
 }
\ No newline at end of file
-    }
