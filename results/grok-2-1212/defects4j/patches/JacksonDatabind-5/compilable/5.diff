diff --git a/tmp/1a3e978d-4da3-4da7-acf5-be784d57cf57_buggy.java b/tmp/ef54100a-48dd-4d30-b31a-6598867bbd1c_fixed.java
index b2db1d6..a05466d 100644
--- a/tmp/1a3e978d-4da3-4da7-acf5-be784d57cf57_buggy.java
+++ b/tmp/ef54100a-48dd-4d30-b31a-6598867bbd1c_fixed.java
@@ -1,29 +1,27 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
             /* Do we already have a method to augment (from sub-class
              * that will mask this mixIn)? If so, add if visible
              * without masking (no such annotation)
              */
             if (am != null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
+                // Add to mixIns as well to handle multi-level merging
+                mixIns.add(_constructMethod(m));
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                // Always add to mixIns to preserve multi-level merge
                 mixIns.add(_constructMethod(m));
             }
         }
     }
 }
\ No newline at end of file
