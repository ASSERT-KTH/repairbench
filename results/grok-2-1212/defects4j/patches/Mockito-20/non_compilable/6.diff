diff --git a/tmp/89708ed6-5535-4b88-8eb0-951835512d1f_buggy.java b/tmp/d1355339-90c2-4c5b-8056-0097d6d5d3bd_fixed.java
index f9a9b5b..e97bd4a 100644
--- a/tmp/89708ed6-5535-4b88-8eb0-951835512d1f_buggy.java
+++ b/tmp/d1355339-90c2-4c5b-8056-0097d6d5d3bd_fixed.java
@@ -1,30 +1,52 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
+
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
+
     T mockInstance = null;
     try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
+        mockInstance = classInstantiator.instantiate(mockedProxyType, settings.getConstructorArgs());
+        
+        if (mockInstance instanceof MockMethodInterceptor.MockAccess) {
             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
+        }
+
+        // Handling for abstract and inner classes
+        if (settings.getTypeToMock().isMemberClass() && !settings.getTypeToMock().isStatic()) {
+            // Handling inner non-static classes
+            Object outerInstance = settings.getOuterInstance();
+            if (outerInstance != null) {
+                Field this$0 = mockedProxyType.getField("this$0");
+                this$0.setAccessible(true);
+                this$0.set(mockInstance, outerInstance);
+            }
+        }
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
+    } catch (IllegalAccessException | NoSuchFieldException e) {
+        throw new MockitoException("Failed to set outer instance for non-static inner class", e);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        String typeName = mockedProxyType.getSimpleName();
+        if (mockedProxyType.isAnonymousClass()) {
+            typeName = "anonymous class of " + mockedProxyType.getSuperclass().getSimpleName();
+        }
+        throw new MockitoException("Unable to create mock instance of type '" + typeName + "'", e);
     }
 }
\ No newline at end of file
