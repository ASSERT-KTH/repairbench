diff --git a/tmp/a92425d2-f326-4042-a7d8-589b7c8cfd46_buggy.java b/tmp/9cbb5db5-d337-4dab-a75b-7400534444bc_fixed.java
index f9a9b5b..6fd311d 100644
--- a/tmp/a92425d2-f326-4042-a7d8-589b7c8cfd46_buggy.java
+++ b/tmp/9cbb5db5-d337-4dab-a75b-7400534444bc_fixed.java
@@ -1,30 +1,76 @@
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
             throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
         }
         Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
+        
         T mockInstance = null;
         try {
+            Constructor<?>[] constructors = mockedProxyType.getDeclaredConstructors();
+            Constructor<?> constructorToUse = null;
+            for (Constructor<?> constructor : constructors) {
+                if (constructor.getParameterTypes().length == 0) {
+                    constructorToUse = constructor;
+                    break;
+                }
+            }
+            if (constructorToUse != null) {
+                constructorToUse.setAccessible(true);
+                mockInstance = (T) constructorToUse.newInstance();
+            } else {
+                // If no default constructor, try instantiating with the classInstantiator
                 mockInstance = classInstantiator.instantiate(mockedProxyType);
+            }
+            
+            if (mockInstance instanceof MockMethodInterceptor.MockAccess) {
                 MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
                 mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
+            }
+
+            // Special handling for inner classes
+            if (settings.getTypeToMock().isMemberClass()) {
+                Class<?> outerClass = settings.getTypeToMock().getEnclosingClass();
+                if (outerClass != null && settings.getOuterInstance() != null) {
+                    Field outerThis = mockedProxyType.getDeclaredField("this$0");
+                    outerThis.setAccessible(true);
+                    outerThis.set(mockInstance, settings.getOuterInstance());
+                }
+            }
+
+            // Handle abstract classes and spying
+            if (settings.getTypeToMock().isInterface() || Modifier.isAbstract(settings.getTypeToMock().getModifiers())) {
+                if (settings.isSpy()) {
+                    // Spy on an instance provided by the user or created from a constructor
+                    T realInstance = settings.getSpiedInstance();
+                    if (realInstance == null && constructorToUse != null) {
+                        realInstance = (T) constructorToUse.newInstance();
+                    }
+                    if (realInstance != null) {
+                        mockInstance = realInstance;
+                        if (mockInstance instanceof MockMethodInterceptor.MockAccess) {
+                            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
+                            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
+                        }
+                    }
+                }
+            }
 
             return ensureMockIsAssignableToMockedType(settings, mockInstance);
         } catch (ClassCastException cce) {
             throw new MockitoException(join(
                     "ClassCastException occurred while creating the mockito mock :",
                     "  class to mock : " + describeClass(mockedProxyType),
                     "  created class : " + describeClass(settings.getTypeToMock()),
                     "  proxy instance class : " + describeClass(mockInstance),
                     "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                     "",
                     "You might experience classloading issues, please ask the mockito mailing-list.",
                     ""
             ), cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        } catch (Exception e) {
+            throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'", e);
         }
     }
\ No newline at end of file
