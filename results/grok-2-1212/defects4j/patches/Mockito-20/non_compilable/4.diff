diff --git a/tmp/c74d50f5-8456-462c-8888-de4a2dc971da_buggy.java b/tmp/ab167abd-f65f-4bdd-9223-7eb2da77c3ca_fixed.java
index f9a9b5b..1c059fb 100644
--- a/tmp/c74d50f5-8456-462c-8888-de4a2dc971da_buggy.java
+++ b/tmp/ab167abd-f65f-4bdd-9223-7eb2da77c3ca_fixed.java
@@ -1,30 +1,59 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
+
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
-        T mockInstance = null;
+
     try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
+        T mockInstance = classInstantiator.instantiate(mockedProxyType);
+
+        // Handle inner classes
+        if (settings.getTypeToMock().isMemberClass() && !Modifier.isStatic(settings.getTypeToMock().getModifiers())) {
+            Field outerThis = mockedProxyType.getDeclaredField("this$0");
+            outerThis.setAccessible(true);
+            outerThis.set(mockInstance, settings.getOuterInstance().orElse(null));
+        }
+
+        // Handle abstract classes and interfaces
+        if (settings.getTypeToMock().isInterface() || Modifier.isAbstract(settings.getTypeToMock().getModifiers())) {
+            Method[] methods = settings.getTypeToMock().getMethods();
+            for (Method method : methods) {
+                if (Modifier.isAbstract(method.getModifiers())) {
+                    MethodHandles.Lookup lookup = MethodHandles.lookup();
+                    MethodType methodType = MethodType.methodType(method.getReturnType(), method.getParameterTypes());
+                    MethodHandle fallback = MethodHandles.throwException(method.getReturnType(), AbstractMethodError.class);
+                    MethodHandle target = lookup.findVirtual(MockMethodInterceptor.class, "handle", methodType).bindTo(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
+                    MethodHandle guarded = MethodHandles.guardWithTest(
+                        MethodHandles.dropArguments(MethodHandles.constant(boolean.class, true), 0, method.getParameterTypes()),
+                        target,
+                        fallback
+                    );
+                    lookup.findConstructor(mockedProxyType, MethodType.methodType(void.class)).invoke(mockInstance);
+                    MethodHandles.lookup().findSpecial(mockedProxyType, method.getName(), methodType, mockedProxyType).bindTo(mockInstance).invokeWithArguments(guarded);
+                }
+            }
+        }
+
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+    } catch (org.mockito.internal.creation.instance.InstantiationException | NoSuchFieldException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {
+        throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'", e);
     }
 }
\ No newline at end of file
