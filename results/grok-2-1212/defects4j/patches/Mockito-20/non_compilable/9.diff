diff --git a/tmp/ac0ea3d0-1859-480a-9170-4cac1e6993d7_buggy.java b/tmp/a7cc095f-ddcd-4955-8e73-7b6479b93810_fixed.java
index f9a9b5b..fd64dd8 100644
--- a/tmp/ac0ea3d0-1859-480a-9170-4cac1e6993d7_buggy.java
+++ b/tmp/a7cc095f-ddcd-4955-8e73-7b6479b93810_fixed.java
@@ -1,30 +1,49 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
-                settings.getTypeToMock(),
-                settings.getExtraInterfaces()
-        );
+
+    Class<? extends T> mockedProxyType;
+    if (settings.isTypeToMockAbstractClass() || settings.isTypeToMockInterface()) {
+        mockedProxyType = cachingMockBytecodeGenerator.get(settings.getTypeToMock(), settings.getExtraInterfaces());
+    } else if (settings.isTypeToMockInnerClass()) {
+        mockedProxyType = cachingMockBytecodeGenerator.get(settings.getTypeToMock(), settings.getExtraInterfaces(), settings.getOuterClassInstance());
+    } else {
+        mockedProxyType = cachingMockBytecodeGenerator.get(settings.getTypeToMock(), settings.getExtraInterfaces());
+    }
+
     T mockInstance = null;
     try {
+        if (settings.getConstructorArgs() != null && settings.getConstructorArgs().length > 0) {
+            mockInstance = classInstantiator.instantiate(mockedProxyType, settings.getConstructorArgs());
+        } else {
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
+        
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        String msg = "Unable to create mock instance of type '";
+        if (settings.isTypeToMockAbstractClass()) {
+            msg += mockedProxyType.getSuperclass().getSimpleName() + "' - ensure a default constructor exists.";
+        } else if (settings.isTypeToMockInnerClass()) {
+            msg += mockedProxyType.getSimpleName() + "' - ensure the outer instance and a 0-arg constructor are correctly set.";
+        } else {
+            msg += mockedProxyType.getSimpleName() + "' - ensure a matching constructor exists.";
+        }
+        throw new MockitoException(msg, e);
     }
 }
\ No newline at end of file
