diff --git a/tmp/6e718b7f-5e45-4cc0-91db-6d3866b948e0_buggy.java b/tmp/708e32be-ff5b-49c7-957b-effd781d9503_fixed.java
index f9a9b5b..1c86b31 100644
--- a/tmp/6e718b7f-5e45-4cc0-91db-6d3866b948e0_buggy.java
+++ b/tmp/708e32be-ff5b-49c7-957b-effd781d9503_fixed.java
@@ -1,30 +1,50 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
+
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
+
     T mockInstance = null;
     try {
+        // Handle constructor usage
+        if (settings.hasConstructor()) {
+            mockInstance = classInstantiator.instantiate(mockedProxyType, settings.getConstructorArgs());
+        } else {
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
+
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
+        // Handle abstract classes and inner classes
+        if (settings.getTypeToMock().isAbstract() || settings.getTypeToMock().isMemberClass()) {
+            mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
+            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
+        }
+
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        String errorMessage = "Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'";
+        if (settings.hasConstructor()) {
+            errorMessage += ". Please ensure that the constructor arguments are correct.";
+        } else if (settings.getTypeToMock().isMemberClass()) {
+            errorMessage += ". Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.";
+        }
+        throw new MockitoException(errorMessage, e);
     }
 }
\ No newline at end of file
