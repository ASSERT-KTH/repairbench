diff --git a/tmp/db54955c-1342-43a8-b716-09f2dec73564_buggy.java b/tmp/0c4a8508-d5b9-47b2-a1b6-32aec14d20cb_fixed.java
index f9a9b5b..efd54c7 100644
--- a/tmp/db54955c-1342-43a8-b716-09f2dec73564_buggy.java
+++ b/tmp/0c4a8508-d5b9-47b2-a1b6-32aec14d20cb_fixed.java
@@ -1,30 +1,48 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
+    
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
+    
     T mockInstance = null;
     try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
+        mockInstance = classInstantiator.instantiate(mockedProxyType, settings.getConstructorArgs());
+        
+        if (mockInstance instanceof MockMethodInterceptor.MockAccess) {
             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
+        }
+        
+        if (settings.getTypeToMock().isMemberClass()) {
+            // For inner classes, set the outer instance
+            Field outerClassField = mockInstance.getClass().getDeclaredField("this$0");
+            outerClassField.setAccessible(true);
+            outerClassField.set(mockInstance, settings.getOuterClassInstance());
+        }
         
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+    } catch (org.mockito.internal.creation.instance.InstantiationException | IllegalAccessException | NoSuchFieldException e) {
+        String errorMessage = "Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'";
+        if (e instanceof org.mockito.internal.creation.instance.InstantiationException) {
+            errorMessage += ". Ensure the class has a 0-arg constructor or provide constructor arguments.";
+        } else if (e instanceof IllegalAccessException || e instanceof NoSuchFieldException) {
+            errorMessage += ". Issues with accessing or setting fields, particularly for inner classes.";
+        }
+        throw new MockitoException(errorMessage, e);
     }
 }
\ No newline at end of file
