diff --git a/tmp/dd6f39f6-5481-4585-970a-716a35603962_buggy.java b/tmp/3ca59e27-d829-4380-b081-118bab071a21_fixed.java
index f9a9b5b..a76f5a1 100644
--- a/tmp/dd6f39f6-5481-4585-970a-716a35603962_buggy.java
+++ b/tmp/3ca59e27-d829-4380-b081-118bab071a21_fixed.java
@@ -1,30 +1,78 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
+    
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
         settings.getTypeToMock(),
         settings.getExtraInterfaces()
     );
+
     T mockInstance = null;
     try {
         mockInstance = classInstantiator.instantiate(mockedProxyType);
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
+        // Ensure the mock instance is correctly initialized with any constructor arguments    
+        if (settings.getOuterClassInstance() != null) {
+            Field outerThis = getOuterThisField(mockedProxyType);
+            outerThis.setAccessible(true);
+            outerThis.set(mockInstance, settings.getOuterClassInstance());
+        }
+
+        // Call the constructor if necessary
+        Constructor<? extends T> constructor = findMatchingConstructor(mockedProxyType, settings.getConstructorArgs());
+        if (constructor != null) {
+            constructor.setAccessible(true);
+            constructor.newInstance(settings.getConstructorArgs());
+        }
+
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
             "ClassCastException occurred while creating the mockito mock :",
             "  class to mock : " + describeClass(mockedProxyType),
             "  created class : " + describeClass(settings.getTypeToMock()),
             "  proxy instance class : " + describeClass(mockInstance),
             "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
             "",
             "You might experience classloading issues, please ask the mockito mailing-list.",
             ""
         ), cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+    } catch (org.mockito.internal.creation.instance.InstantiationException | NoSuchFieldException | IllegalAccessException | NoSuchMethodException | InvocationTargetException | InstantiationException e) {
+        throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "': " + e.getMessage(), e);
     }
 }
+
+// Helper methods:
+
+private Field getOuterThisField(Class<?> clazz) throws NoSuchFieldException {
+    for (Field field : clazz.getDeclaredFields()) {
+        if (field.getName().startsWith("this$")) {
+            return field;
+        }
+    }
+    throw new NoSuchFieldException("No outer 'this' field found");
+}
+
+private Constructor<?> findMatchingConstructor(Class<?> clazz, Object[] args) {
+    for (Constructor<?> constructor : clazz.getDeclaredConstructors()) {
+        if (args == null && constructor.getParameterCount() == 0) {
+            return constructor;
+        }
+        if (args != null && constructor.getParameterCount() == args.length) {
+            boolean match = true;
+            for (int i = 0; i < args.length; i++) {
+                if (args[i] != null && !constructor.getParameterTypes()[i].isAssignableFrom(args[i].getClass())) {
+                    match = false;
+                    break;
+                }
+            }
+            if (match) {
+                return constructor;
+            }
+        }
+    }
+    return null;
+}
\ No newline at end of file
