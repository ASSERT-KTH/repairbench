diff --git a/tmp/6fe4b500-24a6-4be3-bbd9-c4d8cbe0b55b_buggy.java b/tmp/c7a60eeb-10be-4f75-95be-4f05853efe04_fixed.java
index f9a9b5b..37e4b5d 100644
--- a/tmp/6fe4b500-24a6-4be3-bbd9-c4d8cbe0b55b_buggy.java
+++ b/tmp/c7a60eeb-10be-4f75-95be-4f05853efe04_fixed.java
@@ -1,30 +1,81 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
+
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
+
     T mockInstance = null;
     try {
+        // Use the appropriate constructor, if specified
+        if (settings.getOuterClassInstance() != null) {
+            mockInstance = classInstantiator.instantiate(mockedProxyType, settings.getOuterClassInstance());
+        } else if (settings.getConstructorArgs() != null && settings.getConstructorArgs().length > 0) {
+            mockInstance = classInstantiator.instantiate(mockedProxyType, settings.getConstructorArgs());
+        } else {
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
+
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
+        // Initialize the mock instance if it's a spy and the type to mock is not an interface
+        if (settings.isSpy() && !settings.getTypeToMock().isInterface()) {
+            Class<?> typeToMock = settings.getTypeToMock();
+            if (typeToMock.isMemberClass() && !Modifier.isStatic(typeToMock.getModifiers())) {
+                Constructor<?> constructor = typeToMock.getDeclaredConstructors()[0];
+                constructor.setAccessible(true);
+                Object realInstance = constructor.newInstance(settings.getOuterClassInstance());
+                copyProperties(realInstance, mockInstance);
+            } else {
+                Constructor<?> constructor = typeToMock.getDeclaredConstructor();
+                constructor.setAccessible(true);
+                Object realInstance = constructor.newInstance();
+                copyProperties(realInstance, mockInstance);
+            }
+        }
+
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+    } catch (Exception e) {
+        // Handle various exceptions in a more specific way
+        if (e instanceof NoSuchMethodException) {
+            throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'. No default constructor found.", e);
+        } else if (e instanceof IllegalAccessException || e instanceof InvocationTargetException) {
+            throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'. Constructor is not accessible or threw an exception.", e);
+        } else if (e instanceof InstantiationException) {
+            throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'. Class cannot be instantiated.", e);
+        } else {
+            throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'", e);
+        }
+    }
+}
+
+// Helper method to copy properties from one object to another
+private void copyProperties(Object source, Object target) {
+    Class<?> sourceClass = source.getClass();
+    Class<?> targetClass = target.getClass();
+    for (Field field : sourceClass.getDeclaredFields()) {
+        try {
+            Field targetField = targetClass.getDeclaredField(field.getName());
+            field.setAccessible(true);
+            targetField.setAccessible(true);
+            targetField.set(target, field.get(source));
+        } catch (NoSuchFieldException | IllegalAccessException ignored) {
+            // Field not present in target or not accessible, ignore
+        }
     }
 }
\ No newline at end of file
