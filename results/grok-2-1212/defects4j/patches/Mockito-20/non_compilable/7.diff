diff --git a/tmp/16c62de1-57d3-44bf-b798-df61faf500ab_buggy.java b/tmp/ca440605-2bbd-4729-a12f-2c094adb0aad_fixed.java
index f9a9b5b..43d59ed 100644
--- a/tmp/16c62de1-57d3-44bf-b798-df61faf500ab_buggy.java
+++ b/tmp/ca440605-2bbd-4729-a12f-2c094adb0aad_fixed.java
@@ -1,30 +1,46 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
         mockInstance = classInstantiator.instantiate(mockedProxyType);
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
+        // For abstract classes and inner classes, we need to ensure the correct instantiation
+        if (settings.getTypeToMock().isMemberClass() || settings.getTypeToMock().isInterface() || Modifier.isAbstract(settings.getTypeToMock().getModifiers())) {
+            Constructor<?>[] constructors = settings.getTypeToMock().getDeclaredConstructors();
+            for (Constructor<?> constructor : constructors) {
+                if (constructor.getParameterCount() == 0) {
+                    constructor.setAccessible(true);
+                    Object instance = constructor.newInstance();
+                    if (instance instanceof MockMethodInterceptor.MockAccess) {
+                        ((MockMethodInterceptor.MockAccess) instance).setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
+                        mockInstance = (T) instance;
+                        break;
+                    }
+                }
+            }
+        }
+
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+    } catch (org.mockito.internal.creation.instance.InstantiationException | IllegalAccessException | InvocationTargetException | InstantiationException e) {
+        throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'", e);
     }
 }
\ No newline at end of file
