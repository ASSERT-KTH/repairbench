diff --git a/tmp/650695e9-2fb0-4fcf-b952-c7dc621b907f_buggy.java b/tmp/a7cd10d6-ed37-4445-baf4-f21bc27703b2_fixed.java
index 227a4ef..6a95b46 100644
--- a/tmp/650695e9-2fb0-4fcf-b952-c7dc621b907f_buggy.java
+++ b/tmp/a7cd10d6-ed37-4445-baf4-f21bc27703b2_fixed.java
@@ -1,48 +1,35 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
+    String remainingText = text.substring(pos).trim();
+    while (!remainingText.isEmpty())
     {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        remainingText = padding + remainingText;
+        pos = findWrapPos(remainingText, width, 0);
 
         if (pos == -1)
         {
-                sb.append(text);
+            // If we can't find a wrap position, force a break at the width
+            pos = width;
+        }
+
+        String line = rtrim(remainingText.substring(0, pos));
+        sb.append(line).append(defaultNewLine);
+        remainingText = remainingText.substring(pos).trim();
+    }
 
     return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
 }
\ No newline at end of file
