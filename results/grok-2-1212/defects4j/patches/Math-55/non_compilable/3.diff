diff --git a/tmp/b6c1892c-386a-477b-87c6-d15a6b495623_buggy.java b/tmp/f3db551e-57bb-4398-ae35-c7db231507c6_fixed.java
index 1478ee1..b060b32 100644
--- a/tmp/b6c1892c-386a-477b-87c6-d15a6b495623_buggy.java
+++ b/tmp/f3db551e-57bb-4398-ae35-c7db231507c6_fixed.java
@@ -1,24 +1,26 @@
 /** Compute the cross-product of two vectors.
  * @param v1 first vector
  * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
+ * @return the cross product v1 ^ v2 as a new Vector3D
  */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+    // Compute dot products
+    double v1DotV2 = v1.dotProduct(v2);
+    double v2DotV2 = v2.dotProduct(v2);
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+    // Compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    double rho = Double.longBitsToDouble(((long) Double.doubleToRawLongBits(v1DotV2 / v2DotV2)) & 0xFFFFFFFF00000000L);
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+    // Compute preconditioned vector v3 = v1 - rho v2
+    Vector3D v3 = v1.subtract(v2.scalarMultiply(rho));
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Compute cross product using v3 and v2
+    double c1 = v3.y * v2.z - v3.z * v2.y;
+    double c2 = v3.z * v2.x - v3.x * v2.z;
+    double c3 = v3.x * v2.y - v3.y * v2.x;
 
+    // Scale the result to compensate for the preconditioning
+    double scale = 1.0 / (1.0 - 2.0 * rho * v1DotV2 / v2DotV2 + rho * rho * v2DotV2);
+    return new Vector3D(scale * c1, scale * c2, scale * c3);
 }
\ No newline at end of file
