diff --git a/tmp/3d513566-4364-4f73-a417-a76e4b28d788_buggy.java b/tmp/fcc831ef-4749-49fa-94da-6cc025054d56_fixed.java
index 1478ee1..9d75df6 100644
--- a/tmp/3d513566-4364-4f73-a417-a76e4b28d788_buggy.java
+++ b/tmp/fcc831ef-4749-49fa-94da-6cc025054d56_fixed.java
@@ -1,24 +1,31 @@
 /** Compute the cross-product of two vectors.
  * @param v1 first vector
  * @param v2 second vector
  * @return the cross product v1 ^ v2 as a new Vector
  */
-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+public static Vector3D crossProduct(final Vector3D v1, final VectorD v2) {
+    // Compute rho as an 8-bit approximation of v1.v2 / v2.v2
+    double v1DotV2 = v1.dotProduct(v2);
+    double v2DotV2 = v2.dotProduct(v2);
+    double inv = 1.0 / v2DotV2;
+    double s = v1DotV2 * inv;
+    // Round s to 8 bits
+    int si = (int) (Double.doubleToLongBits(s) >> 52);
+    double rho = Double.longBitsToDouble(((long) si) << 52);
 
+    // Compute v3 = v1 - rho * v2
+    Vector3D v3 = v1.subtract(v2.scalarMultiply(rho));
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+    // Compute cross product from v3 and v2
+    double c1 = v3.y * v2.z - v3.z * v2.y;
+    double c2 = v3.z * v2.x - v3.x * v2.z;
+    double c3 = v3.x * v2.y - v3.y * v2.x;
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Normalize the result
+    double norm = Math.sqrt(c1 * c1 + c2 * c2 + c3 * c3);
+    if (norm == 0) {
+        return new Vector3D(0, 0, 0);
+    }
 
+    return new Vector3D(c1 / norm, c2 / norm, c3 / norm);
 }
\ No newline at end of file
