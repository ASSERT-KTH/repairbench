diff --git a/tmp/aaf37111-c0cf-4c39-8e6a-359b0f41ab5d_buggy.java b/tmp/b4adc91e-0cdd-4efc-9c5e-dbba6ad5414d_fixed.java
index 1478ee1..1fa7b0f 100644
--- a/tmp/aaf37111-c0cf-4c39-8e6a-359b0f41ab5d_buggy.java
+++ b/tmp/b4adc91e-0cdd-4efc-9c5e-dbba6ad5414d_fixed.java
@@ -1,24 +1,32 @@
 /** Compute the cross-product of two vectors.
  * @param v1 first vector
  * @param v2 second vector
  * @return the cross product v1 ^ v2 as a new Vector
  */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Compute rho as an 8-bit approximation of v1.v2 / v2.v2
+    double s = v2.getX();
+    double t = v2.getY();
+    double u = v2.getZ();
+    double sum = s * s + t * t + u * u;
+    double rho = 0.0;
+    if (sum > 0) {
+        int q = (int) ((v1.getX() * s + v1.getY() * t + v1.getZ() * u) / sum);
+        rho = q / 256.0;
+        if (q < 0 && q != -256) {
+            rho = (q + 1) / 256.0;
+        } else if (q > 0) {
+            rho = (q - 1) / 256.0;
+        }
+    }
 
+    // Compute v3 = v1 - rho * v2
+    Vector3D v3 = new Vector3D(1, v1, -rho, v2);
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    // Compute cross product using v3 and v2
+    return new Vector3D(
+        v3.getY() * v2.getZ() - v3.getZ() * v2.getY(),
+        v3.getZ() * v2.getX() - v3.getX() * v2.getZ(),
+        v3.getX() * v2.getY() - v3.getY() * v2.getX()
+    );
 }
\ No newline at end of file
