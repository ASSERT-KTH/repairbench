diff --git a/tmp/c829a6d4-247a-4dd6-9d49-f7899b7ef66e_buggy.java b/tmp/6d001df6-c4e5-4bf9-9533-68a3c0862edb_fixed.java
index 5b8a4d2..1b625af 100644
--- a/tmp/c829a6d4-247a-4dd6-9d49-f7899b7ef66e_buggy.java
+++ b/tmp/6d001df6-c4e5-4bf9-9533-68a3c0862edb_fixed.java
@@ -1,12 +1,127 @@
     /**
      * Creates a period from the given millisecond duration with the standard period type
      * and ISO rules, ensuring that the calculation is performed with the time-only period type.
      * <p>
      * The calculation uses the hour, minute, second and millisecond fields.
      *
      * @param duration  the duration, in milliseconds
      */
     protected BasePeriod(long duration) {
-        this(duration, null, null);
-        // bug [3264409]
+        super(PeriodType.time(), new Chronology() {
+            @Override
+            public DateTimeZone getZone() {
+                return DateTimeZone.UTC;
+            }
+
+            @Override
+            public Chronology withUTC() {
+                return this;
+            }
+
+            @Override
+            public Chronology withZone(DateTimeZone zone) {
+                return this;
+            }
+
+            // Implement other required methods of Chronology with minimal functionality
+            @Override
+            public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public long getDateTimeMillis(long instant, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public int[] get(int fieldIndex, long instant) {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public int getMinimumValue(int fieldIndex) {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public int getMaximumValue(int fieldIndex) {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public long roundFloor(long instant) {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public long roundCeiling(long instant) {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public long roundHalfFloor(long instant) {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public long roundHalfCeiling(long instant) {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public long roundHalfEven(long instant) {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public DurationField centuries() {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public DurationField years() {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public DurationField months() {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public DurationField weeks() {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public DurationField days() {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public DurationField hours() {
+                return DurationFieldType.hours().getField(this);
+            }
+
+            @Override
+            public DurationField minutes() {
+                return DurationFieldType.minutes().getField(this);
+            }
+
+            @Override
+            public DurationField seconds() {
+                return DurationFieldType.seconds().getField(this);
+            }
+
+            @Override
+            public DurationField millis() {
+                return DurationFieldType.millis().getField(this);
+            }
+        }, duration);
     }
\ No newline at end of file
