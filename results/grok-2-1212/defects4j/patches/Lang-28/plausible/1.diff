diff --git a/tmp/6fc6c3d1-3bb3-402f-88df-69b63bf8993b_buggy.java b/tmp/bd25a2b8-f5b8-4c71-b4ef-b1ec59a2e7ee_fixed.java
index 4bbd561..e6e4b25 100644
--- a/tmp/6fc6c3d1-3bb3-402f-88df-69b63bf8993b_buggy.java
+++ b/tmp/bd25a2b8-f5b8-4c71-b4ef-b1ec59a2e7ee_fixed.java
@@ -1,37 +1,46 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    if (input.length() > index + 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start < input.length()) {
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            while (end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            if (end < input.length() && input.charAt(end) == ';') {
                 int entityValue;
                 try {
                     if (isHex) {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                     } else {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                     }
                 } catch (NumberFormatException nfe) {
                     return 0;
                 }
 
+                if (entityValue > 0xFFFF) {
+                    // Supplementary character
+                    char[] surrogatePair = Character.toChars(entityValue);
+                    out.write(surrogatePair);
+                } else {
                     out.write(entityValue);
+                }
                 return 2 + (end - start) + (isHex ? 1 : 0) + 1;
             }
+        }
+    }
     return 0;
 }
\ No newline at end of file
