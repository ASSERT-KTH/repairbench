diff --git a/tmp/350a2d32-fbf4-4c45-8ff1-9794d652257c_buggy.java b/tmp/11529613-4fbd-41d0-ba28-f07e7659c7e7_fixed.java
index 4bbd561..e4e045d 100644
--- a/tmp/350a2d32-fbf4-4c45-8ff1-9794d652257c_buggy.java
+++ b/tmp/11529613-4fbd-41d0-ba28-f07e7659c7e7_fixed.java
@@ -1,37 +1,54 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        if (index < 0 || index >= input.length()) {
+            return 0;
+        }
+        if (input.charAt(index) == '&' && index + 1 < input.length() && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if (start >= input.length()) {
+                return 0;
+            }
+
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            while (end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            if (end >= input.length() || input.charAt(end) != ';') {
+                return 0;
+            }
+
             int entityValue;
             try {
                 if (isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
                 return 0;
             }
 
+            // Convert entityValue to a character or a surrogate pair and write it
+            if (entityValue > 0xFFFF) { // Supplementary character
+                char[] surrogatePair = Character.toChars(entityValue);
+                out.write(surrogatePair);
+            } else {
                 out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            }
+
+            return 2 + (end - start) + (isHex ? 1 : 0) + 1; // +1 for the semicolon
         }
         return 0;
     }
\ No newline at end of file
