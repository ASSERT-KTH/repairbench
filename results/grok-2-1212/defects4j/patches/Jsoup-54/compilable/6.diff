diff --git a/tmp/2db191fe-2858-45b7-8bda-1ed360ecea98_buggy.java b/tmp/953aec83-0fa0-455b-a6fa-299afa45657e_fixed.java
index d5b3da9..36193cd 100644
--- a/tmp/2db191fe-2858-45b7-8bda-1ed360ecea98_buggy.java
+++ b/tmp/953aec83-0fa0-455b-a6fa-299afa45657e_fixed.java
@@ -1,7 +1,48 @@
 private void copyAttributes(org.jsoup.nodes.Node source, Element el) {
     for (Attribute attribute : source.attributes()) {
-                // valid xml attribute names are: ^[a-zA-Z_:][-a-zA-Z0-9_:.]
-                String key = attribute.getKey().replaceAll("[^-a-zA-Z0-9_:.]", "");
+        String key = attribute.getKey();
+        if (isValidXmlName(key)) {
             el.setAttribute(key, attribute.getValue());
+        } else {
+            // Handle invalid attribute names according to HTML5 spec
+            String sanitizedKey = sanitizeAttributeName(key);
+            if (!sanitizedKey.isEmpty()) {
+                el.setAttribute(sanitizedKey, attribute.getValue());
             }
         }
+    }
+}
+
+private boolean isValidXmlName(String name) {
+    if (name.isEmpty()) return false;
+    char firstChar = name.charAt(0);
+    if (!((firstChar >= 'a' && firstChar <= 'z') ||
+          (firstChar >= 'A' && firstChar <= 'Z') ||
+          firstChar == '_' || firstChar == ':')) {
+        return false;
+    }
+    for (int i = 1; i < name.length(); i++) {
+        char c = name.charAt(i);
+        if (!((c >= 'a' && c <= 'z') ||
+              (c >= 'A' && c <= 'Z') ||
+              (c >= '0' && c <= '9') ||
+              c == '_' || c == '-' || c == ':' || c == '.')) {
+            return false;
+        }
+    }
+    return true;
+}
+
+private String sanitizeAttributeName(String name) {
+    StringBuilder sanitized = new StringBuilder();
+    for (int i = 0; i < name.length(); i++) {
+        char c = name.charAt(i);
+        if ((c >= 'a' && c <= 'z') ||
+            (c >= 'A' && c <= 'Z') ||
+            (c >= '0' && c <= '9') ||
+            c == '_' || c == '-' || c == ':' || c == '.') {
+            sanitized.append(c);
+        }
+    }
+    return sanitized.toString();
+}
\ No newline at end of file
