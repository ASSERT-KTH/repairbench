diff --git a/tmp/3b7498f7-230e-4201-9c34-2b3ecae1c90d_buggy.java b/tmp/e797e82a-f911-40cc-9400-18510cf12806_fixed.java
index 822447c..6c6c505 100644
--- a/tmp/3b7498f7-230e-4201-9c34-2b3ecae1c90d_buggy.java
+++ b/tmp/e797e82a-f911-40cc-9400-18510cf12806_fixed.java
@@ -1,37 +1,48 @@
 /**
  * <p>
  * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
  * passed.
  * </p>
  * 
  * @param writer
  *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
  * @param str
  *            The <code>String</code> to escape. Assumed to be a non-null value.
  * @throws IOException
  *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
  *             methods.
  * 
  * @see #escape(String)
  * @see Writer
  */
 public void escape(Writer writer, String str) throws IOException {
     int len = str.length();
     for (int i = 0; i < len; i++) {
         char c = str.charAt(i);
+        if (Character.isHighSurrogate(c) && i + 1 < len) {
+            char next = str.charAt(i + 1);
+            if (Character.isLowSurrogate(next)) {
+                int codePoint = Character.toCodePoint(c, next);
+                writer.write("&#");
+                writer.write(Integer.toString(codePoint, 10));
+                writer.write(';');
+                i++; // Skip the next character as it's part of this surrogate pair
+                continue;
+            }
+        }
         String entityName = this.entityName(c);
         if (entityName == null) {
             if (c > 0x7F) {
                 writer.write("&#");
                 writer.write(Integer.toString(c, 10));
                 writer.write(';');
             } else {
                 writer.write(c);
             }
         } else {
             writer.write('&');
             writer.write(entityName);
             writer.write(';');
         }
     }
 }
\ No newline at end of file
