diff --git a/tmp/794e67b4-75b1-4400-9ba1-b2adad9afe76_buggy.java b/tmp/8aa1c06d-f80d-498f-a2b9-d5f739c1d37c_fixed.java
index 61ffdbf..cb7ed9b 100644
--- a/tmp/794e67b4-75b1-4400-9ba1-b2adad9afe76_buggy.java
+++ b/tmp/8aa1c06d-f80d-498f-a2b9-d5f739c1d37c_fixed.java
@@ -1,44 +1,50 @@
   /**
    * Removes unreferenced arguments from a function declaration and when
    * possible the function's callSites.
    *
    * @param fnScope The scope inside the function
    */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
     // Notice that removing unreferenced function args breaks
     // Function.prototype.length. In advanced mode, we don't really care
     // about this: we consider "length" the equivalent of reflecting on
     // the function's lexical source.
     //
     // Rather than create a new option for this, we assume that if the user
     // is removing globals, then it's OK to remove unused function args.
     //
     // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
       // The parameters object literal setters can not be removed.
       return;
     }
 
     Node argList = getFunctionArgList(function);
     boolean modifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
+    
+    // Only remove unreferenced args in ADVANCED_OPTIMIZATIONS mode
+    // and when not in debug mode
+    if (compilationLevel == CompilationLevel.ADVANCED_OPTIMIZATIONS
+        && !compiler.getOptions().debug) {
       if (!modifyCallers) {
         // Strip unreferenced args off the end of the function declaration.
         Node lastArg;
         while ((lastArg = argList.getLastChild()) != null) {
           Var var = fnScope.getVar(lastArg.getString());
           if (!referenced.contains(var)) {
             argList.removeChild(lastArg);
             compiler.reportCodeChange();
           } else {
             break;
           }
         }
       } else {
         callSiteOptimizer.optimize(fnScope, referenced);
       }
     }
+  }
\ No newline at end of file
