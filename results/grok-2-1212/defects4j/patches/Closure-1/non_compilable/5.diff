diff --git a/tmp/94571c82-9b35-43ec-94be-4632df17d0b2_buggy.java b/tmp/6bded218-d5fb-431e-8757-4a4b6a9000df_fixed.java
index 61ffdbf..ea6b71d 100644
--- a/tmp/94571c82-9b35-43ec-94be-4632df17d0b2_buggy.java
+++ b/tmp/6bded218-d5fb-431e-8757-4a4b6a9000df_fixed.java
@@ -1,44 +1,45 @@
 /**
  * Removes unreferenced arguments from a function declaration and when
  * possible the function's callSites.
  *
  * @param fnScope The scope inside the function
  */
 private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
         // The parameters object literal setters can not be removed.
         return;
     }
 
     Node argList = getFunctionArgList(function);
+    
+    // Check if we're in SIMPLE_OPTIMIZATIONS mode or if debug flag is set
+    boolean isSimpleMode = compiler.getOptions().getCompilationLevel() == CompilationLevel.SIMPLE_OPTIMIZATIONS;
+    boolean isDebugEnabled = compiler.getOptions().debug;
+
+    if (isSimpleMode || isDebugEnabled) {
+        // In simple mode or with debug flag, don't remove unused function args
+        return;
+    }
+
     boolean modifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
+
     if (!modifyCallers) {
         // Strip unreferenced args off the end of the function declaration.
         Node lastArg;
         while ((lastArg = argList.getLastChild()) != null) {
             Var var = fnScope.getVar(lastArg.getString());
             if (!referenced.contains(var)) {
                 argList.removeChild(lastArg);
                 compiler.reportCodeChange();
             } else {
                 break;
             }
         }
     } else {
         callSiteOptimizer.optimize(fnScope, referenced);
     }
 }
\ No newline at end of file
