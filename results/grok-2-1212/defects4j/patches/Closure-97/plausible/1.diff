diff --git a/tmp/19efec56-7516-433c-b536-4b456ccde952_buggy.java b/tmp/b5e1fd1c-0feb-4bc9-86cb-1ac9780fc0a3_fixed.java
index 1126687..7eb2105 100644
--- a/tmp/19efec56-7516-433c-b536-4b456ccde952_buggy.java
+++ b/tmp/b5e1fd1c-0feb-4bc9-86cb-1ac9780fc0a3_fixed.java
@@ -1,65 +1,73 @@
 /**
  * Try to fold shift operations
  */
 private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
-      double result;
         double lval = left.getDouble();
         double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
+        // Check ranges. We do not do anything that would clip the double to
         // a 32-bit range, since the user likely does not intend that.
         if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
             error(BITWISE_OPERAND_OUT_OF_RANGE, left);
             return n;
         }
 
-      // only the lower 5 bits are used when shifting, so don't do anything
+        // Only the lower 5 bits are used when shifting, so don't do anything
         // if the shift amount is outside [0,32)
         if (!(rval >= 0 && rval < 32)) {
             error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
             return n;
         }
 
         // Convert the numbers to ints
         int lvalInt = (int) lval;
         if (lvalInt != lval) {
             error(FRACTIONAL_BITWISE_OPERAND, left);
             return n;
         }
 
         int rvalInt = (int) rval;
         if (rvalInt != rval) {
             error(FRACTIONAL_BITWISE_OPERAND, right);
             return n;
         }
 
+        long result;
         switch (n.getType()) {
             case Token.LSH:
                 result = lvalInt << rvalInt;
                 break;
             case Token.RSH:
                 result = lvalInt >> rvalInt;
                 break;
             case Token.URSH:
                 // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
+                // Java as a Java int can not represent the unsigned 32-bit number
                 // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+                result = lvalInt & 0xFFFFFFFFL;
+                result = result >>> rvalInt;
                 break;
             default:
                 throw new AssertionError("Unknown shift operator: " +
                     Node.tokenToName(n.getType()));
         }
 
-      Node newNumber = Node.newNumber(result);
+        // Convert result back to double to handle potential overflow
+        double doubleResult = result;
+        if (n.getType() == Token.URSH) {
+            // For unsigned right shift, handle overflow to match JavaScript behavior
+            doubleResult = result & 0xFFFFFFFFL;
+        }
+
+        Node newNumber = Node.newNumber(doubleResult);
         n.getParent().replaceChild(n, newNumber);
         reportCodeChange();
 
         return newNumber;
     }
 
     return n;
 }
\ No newline at end of file
