diff --git a/tmp/d97922e3-2a16-4032-94c6-4cf8aceb12b4_buggy.java b/tmp/eed63f6e-2606-484e-a22c-1e7d8b1342f9_fixed.java
index 1126687..5b07f7b 100644
--- a/tmp/d97922e3-2a16-4032-94c6-4cf8aceb12b4_buggy.java
+++ b/tmp/eed63f6e-2606-484e-a22c-1e7d8b1342f9_fixed.java
@@ -1,65 +1,62 @@
 /**
  * Try to fold shift operations
  */
 private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
-      double result;
-      double lval = left.getDouble();
-      double rval = right.getDouble();
+        double lvalD = left.getDouble();
+        double rvalD = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
+        // Check ranges for left operand
+        if (!(lvalD >= Integer.MIN_VALUE && lvalD <= Integer.MAX_VALUE)) {
             error(BITWISE_OPERAND_OUT_OF_RANGE, left);
             return n;
         }
 
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
-      if (!(rval >= 0 && rval < 32)) {
+        // Check ranges for right operand
+        if (!(rvalD >= 0 && rvalD < 32)) {
             error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
             return n;
         }
 
-      // Convert the numbers to ints
-      int lvalInt = (int) lval;
-      if (lvalInt != lval) {
+        // Convert to integers
+        int lvalInt = (int) lvalD;
+        if (lvalInt != lvalD) {
             error(FRACTIONAL_BITWISE_OPERAND, left);
             return n;
         }
 
-      int rvalInt = (int) rval;
-      if (rvalInt != rval) {
+        int rvalInt = (int) rvalD;
+        if (rvalInt != rvalD) {
             error(FRACTIONAL_BITWISE_OPERAND, right);
             return n;
         }
 
+        long result;
         switch (n.getType()) {
             case Token.LSH:
-          result = lvalInt << rvalInt;
+                result = (long) lvalInt << rvalInt;
                 break;
             case Token.RSH:
-          result = lvalInt >> rvalInt;
+                result = (long) lvalInt >> rvalInt;
                 break;
             case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+                // Use unsigned right shift
+                result = ((long) lvalInt) & 0xFFFFFFFFL >>> rvalInt;
                 break;
             default:
                 throw new AssertionError("Unknown shift operator: " +
                     Node.tokenToName(n.getType()));
         }
 
-      Node newNumber = Node.newNumber(result);
+        // Convert result back to double for Node.newNumber
+        Node newNumber = Node.newNumber((double) result);
         n.getParent().replaceChild(n, newNumber);
         reportCodeChange();
 
         return newNumber;
     }
 
     return n;
 }
\ No newline at end of file
