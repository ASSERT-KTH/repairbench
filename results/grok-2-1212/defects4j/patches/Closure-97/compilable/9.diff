diff --git a/tmp/19856bd6-e38c-4bf4-85b4-f12ed9772c3d_buggy.java b/tmp/0eb91c53-f0cd-4686-961e-b9d7bb0b61f6_fixed.java
index 1126687..12509c0 100644
--- a/tmp/19856bd6-e38c-4bf4-85b4-f12ed9772c3d_buggy.java
+++ b/tmp/0eb91c53-f0cd-4686-961e-b9d7bb0b61f6_fixed.java
@@ -1,65 +1,63 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
-    if (left.getType() == Token.NUMBER &&
-        right.getType() == Token.NUMBER) {
-
-      double result;
+    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {
       double lval = left.getDouble();
       double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
+      // Check range limits for the left operand
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
+      // Ensure right operand is within the valid shift range [0, 31]
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
-      // Convert the numbers to ints
       int lvalInt = (int) lval;
       if (lvalInt != lval) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
+      long result;
+
       switch (n.getType()) {
         case Token.LSH:
           result = lvalInt << rvalInt;
+          // JavaScript does a 32-bit unsigned operation for '<<', so use masking
+          result = result & 0xFFFFFFFFL;
           break;
         case Token.RSH:
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          // Convert to unsigned 32-bit integer first
+          result = lvalInt & 0xFFFFFFFFL;
+          result = result >>> rvalInt;
           break;
         default:
-          throw new AssertionError("Unknown shift operator: " +
-              Node.tokenToName(n.getType()));
+          throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType()));
       }
 
-      Node newNumber = Node.newNumber(result);
+      // Convert the result back to a double for JavaScript compatibility
+      double resultDouble = result;
+      Node newNumber = Node.newNumber(resultDouble);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
