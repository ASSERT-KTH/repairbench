diff --git a/tmp/51c5c45d-ccb5-4b63-a9ec-34a469816e66_buggy.java b/tmp/316c3489-a383-4660-88cb-76e513dd8fc1_fixed.java
index 21f64c6..b0ff050 100644
--- a/tmp/51c5c45d-ccb5-4b63-a9ec-34a469816e66_buggy.java
+++ b/tmp/316c3489-a383-4660-88cb-76e513dd8fc1_fixed.java
@@ -1,23 +1,34 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+    int start = pos;
+    int seqLen = seq.length();
+    if (seqLen == 0) return 0; // Empty sequence is always found at the start
+
     char startChar = seq.charAt(0);
+    outer:
     for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+        // Scan to first instance of startChar:
+        while (offset < length && startChar != input[offset]) {
+            offset++;
+        }
+        if (offset >= length) break; // Not found
+
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
-                    return offset - pos;
+        int last = i + seqLen - 1;
+        if (last > length) continue; // Not enough characters left to match
+
+        for (int j = 1; j < seqLen; j++, i++) {
+            if (i >= length || seq.charAt(j) != input[i]) {
+                continue outer; //Mismatch, continue searching
             }
         }
-        return -1;
+        // Found full sequence
+        return offset - start;
+    }
+    return -1; // Not found
 }
\ No newline at end of file
