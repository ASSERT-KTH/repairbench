diff --git a/tmp/f492af7c-6bc8-42d5-8453-fa1bd953c6b3_buggy.java b/tmp/aaaf1229-b6ec-44ea-8eb8-90e666dc4b15_fixed.java
index 21f64c6..622afe7 100644
--- a/tmp/f492af7c-6bc8-42d5-8453-fa1bd953c6b3_buggy.java
+++ b/tmp/aaaf1229-b6ec-44ea-8eb8-90e666dc4b15_fixed.java
@@ -1,23 +1,31 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
+    int seqLen = seq.length();
+    
+    for (int offset = pos; offset <= length - seqLen; offset++) {
+        // scan to first instance of startChar:
         if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            while (++offset <= length - seqLen && startChar != input[offset]);
+        
+        if (offset > length - seqLen) break; // not enough remaining chars to match seq
+
+        boolean match = true;
+        for (int i = 1; i < seqLen; i++) {
+            if (seq.charAt(i) != input[offset + i]) {
+                match = false;
+                break;
+            }
+        }
+        
+        if (match) {
             return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
