diff --git a/tmp/ca019b6d-500d-40ca-837b-da95b4296f9b_buggy.java b/tmp/c9a0b793-9a73-47b2-846f-f18f18046565_fixed.java
index 21f64c6..afb6707 100644
--- a/tmp/ca019b6d-500d-40ca-837b-da95b4296f9b_buggy.java
+++ b/tmp/c9a0b793-9a73-47b2-846f-f18f18046565_fixed.java
@@ -1,23 +1,25 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
-        char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+    int start = pos;
+    int remaining = length - start;
+    
+    if (remaining < seq.length()) {
+        return -1; // not enough characters to match the sequence
+    }
+
+    outer:
+    for (int offset = start; offset <= length - seq.length(); offset++) {
+        for (int i = 0; i < seq.length(); i++) {
+            if (seq.charAt(i) != input[offset + i]) {
+                continue outer;
+            }
+        }
         return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
