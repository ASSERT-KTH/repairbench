diff --git a/tmp/8de4266b-fa79-47c0-9397-1021fa84fc75_buggy.java b/tmp/56fc6f7b-5f2b-4f8a-95f1-910dcd8d6c53_fixed.java
index 21f64c6..c6d2c78 100644
--- a/tmp/8de4266b-fa79-47c0-9397-1021fa84fc75_buggy.java
+++ b/tmp/56fc6f7b-5f2b-4f8a-95f1-910dcd8d6c53_fixed.java
@@ -1,23 +1,30 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+    int start = pos;
+    int seqLen = seq.length();
+    if (seqLen == 0) return 0; // edge case: empty sequence
+
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+    for (int offset = pos; offset <= length - seqLen; offset++) {
         // scan to first instance of startchar:
         if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
-                    return offset - pos;
+            continue;
+
+        boolean found = true;
+        for (int j = 1; j < seqLen; j++) {
+            if (seq.charAt(j) != input[offset + j]) {
+                found = false;
+                break;
+            }
+        }
+        if (found) {
+            return offset - start;
         }
     }
     return -1;
 }
\ No newline at end of file
