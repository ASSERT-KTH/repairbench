diff --git a/tmp/6f16efa9-6edc-46dd-86b9-f1078f380034_buggy.java b/tmp/a594b124-129b-49c5-88cc-35825e1a53d9_fixed.java
index 57c40b2..6d7411b 100644
--- a/tmp/6f16efa9-6edc-46dd-86b9-f1078f380034_buggy.java
+++ b/tmp/a594b124-129b-49c5-88cc-35825e1a53d9_fixed.java
@@ -1,27 +1,38 @@
 /**
  * Visits a GETPROP node.
  *
  * @param t The node traversal object that supplies context, such as the
  * scope chain to use in name lookups as well as error reporting.
  * @param n The node being visited.
  * @param parent The parent of <code>n</code>
  */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
     if (childType.isDict()) {
         report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
     } else if (n.getJSType() != null && parent.isAssign()) {
         return;
+    } else if (childType.isNullable() || childType.isVoidable()) {
+        // Handle null or undefined cases
+        validator.expectNotNullOrUndefined(t, n, childType,
+            "No properties on this expression", getNativeType(OBJECT_TYPE));
     } else if (validator.expectNotNullOrUndefined(t, n, childType,
             "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+        // Check property access and report if property is undefined
+        JSType propertyType = getPropertyType(childType, property.getString());
+        if (propertyType == null) {
+            report(t, property, TypeValidator.UNDEFINED_PROPERTY,
+                property.getString(), childType.toString());
+        } else {
             checkPropertyAccess(childType, property.getString(), t, n);
         }
+    }
     ensureTyped(t, n);
 }
\ No newline at end of file
