diff --git a/tmp/5f6dc1df-770f-4533-a0e5-b7c128d6ebf7_buggy.java b/tmp/ce0b4963-b221-468c-9bc4-9ea3a89d9d59_fixed.java
index 57c40b2..c6f10dd 100644
--- a/tmp/5f6dc1df-770f-4533-a0e5-b7c128d6ebf7_buggy.java
+++ b/tmp/ce0b4963-b221-468c-9bc4-9ea3a89d9d59_fixed.java
@@ -1,27 +1,33 @@
 /**
  * Visits a GETPROP node.
  *
  * @param t The node traversal object that supplies context, such as the
  * scope chain to use in name lookups as well as error reporting.
  * @param n The node being visited.
  * @param parent The parent of <code>n</code>
  */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
     if (childType.isDict()) {
         report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
     } else if (n.getJSType() != null && parent.isAssign()) {
+        // Check for null or undefined on the left side of assignment
+        if (!validator.expectNotNullOrUndefined(t, objNode, childType,
+                "Cannot assign to properties on null or undefined", getNativeType(OBJECT_TYPE))) {
             return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
+        }
+    } else if (!validator.expectNotNullOrUndefined(t, n, childType,
             "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+        return;
+    } else {
         checkPropertyAccess(childType, property.getString(), t, n);
     }
     ensureTyped(t, n);
 }
\ No newline at end of file
