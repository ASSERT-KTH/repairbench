diff --git a/tmp/d893fd25-38a4-4d38-80f3-5bdc5373ad4b_buggy.java b/tmp/17a826cb-e250-4454-90a3-4e8e3f842c38_fixed.java
index 57c40b2..d66812f 100644
--- a/tmp/d893fd25-38a4-4d38-80f3-5bdc5373ad4b_buggy.java
+++ b/tmp/17a826cb-e250-4454-90a3-4e8e3f842c38_fixed.java
@@ -1,27 +1,33 @@
 /**
  * Visits a GETPROP node.
  *
  * @param t The node traversal object that supplies context, such as the
  * scope chain to use in name lookups as well as error reporting.
  * @param n The node being visited.
  * @param parent The parent of <code>n</code>
  */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
+    if (childType.isUnknownType() || childType.isNullType() || childType.isVoidType()) {
+        validator.expectNotNullOrUndefined(t, n, childType,
+            "No properties on this expression", getNativeType(OBJECT_TYPE));
+        return;
+    }
+
     if (childType.isDict()) {
         report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
     } else if (n.getJSType() != null && parent.isAssign()) {
         return;
     } else if (validator.expectNotNullOrUndefined(t, n, childType,
         "No properties on this expression", getNativeType(OBJECT_TYPE))) {
         checkPropertyAccess(childType, property.getString(), t, n);
     }
     ensureTyped(t, n);
 }
\ No newline at end of file
