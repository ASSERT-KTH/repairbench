diff --git a/tmp/731af58b-3bd4-44e6-8bd4-5175cc15c2d9_buggy.java b/tmp/2b4356cf-9ef1-4ba9-9aba-420e92e71b3f_fixed.java
index c9da1b7..081eed5 100644
--- a/tmp/731af58b-3bd4-44e6-8bd4-5175cc15c2d9_buggy.java
+++ b/tmp/2b4356cf-9ef1-4ba9-9aba-420e92e71b3f_fixed.java
@@ -1,33 +1,32 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
+
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+        if ((_explicitCreators & mask) != 0) {
             if (!explicit) {
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+            // Both explicit: verify
         }
 
-            // one more thing: ok to override in sub-class
+        // One more thing: ok to override in sub-class, but only if parameters are different
         if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+            if (!oldOne.getParameterTypes().equals(newOne.getParameterTypes())) {
+                // Different parameters, allow this
+                _creators[typeIndex] = _fixAccess(newOne);
+                return;
+            } else {
                 throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
                         + " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
             }
         }
+    }
+
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
