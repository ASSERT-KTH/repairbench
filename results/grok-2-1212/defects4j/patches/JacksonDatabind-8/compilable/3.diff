diff --git a/tmp/52b41765-7d76-4c47-92bf-a867aef948d9_buggy.java b/tmp/9da596a5-11d3-4961-a3f9-fec36322dcd0_fixed.java
index c9da1b7..b2ca20f 100644
--- a/tmp/52b41765-7d76-4c47-92bf-a867aef948d9_buggy.java
+++ b/tmp/9da596a5-11d3-4961-a3f9-fec36322dcd0_fixed.java
@@ -1,33 +1,51 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne != null) {
-
         if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
             // but skip, if new one not annotated
             if (!explicit) {
                 return;
             }
             // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+            if (explicit) {
+                // Check if the new one is the same as the old one
+                if (newOne.equals(oldOne)) {
+                    return; // Same constructor, no need to do anything
                 }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+                // Different explicit constructors - throw an error
                 throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                         +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+            }
+        } else {
+            // Neither explicitly annotated
+            if (!explicit) {
+                // Check if the new one is the same as the old one
+                if (newOne.equals(oldOne)) {
+                    return; // Same constructor, no need to do anything
+                }
+                // Different non-explicit constructors - keep the more specific one
+                if (oldOne.getClass() == newOne.getClass()) {
+                    // If they're of the same class, choose the one with more parameters
+                    if (newOne.getParameterCount() > oldOne.getParameterCount()) {
+                        _creators[typeIndex] = _fixAccess(newOne);
+                        return;
+                    }
+                } else {
+                    // Different classes, keep the more specific one
+                    if (oldOne.getDeclaringClass().isAssignableFrom(newOne.getDeclaringClass())) {
+                        _creators[typeIndex] = _fixAccess(newOne);
+                        return;
+                    }
+                }
+            }
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
