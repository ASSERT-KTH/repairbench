diff --git a/tmp/427a1412-c6ed-4762-a654-2b1476765897_buggy.java b/tmp/24c9403a-7f9f-40db-b865-780f2b3286d0_fixed.java
index c9da1b7..13f9e1e 100644
--- a/tmp/427a1412-c6ed-4762-a654-2b1476765897_buggy.java
+++ b/tmp/24c9403a-7f9f-40db-b865-780f2b3286d0_fixed.java
@@ -1,33 +1,41 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
-        if (oldOne != null) {
 
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
-                    return;
-                }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
-                    throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
-            }
-        }
+    // If there's no old creator, or if the new one is more specific, use the new one
+    if (oldOne == null || isMoreSpecific(newOne, oldOne)) {
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
+        return;
+    }
+
+    // If the old one is more specific, keep it
+    if (isMoreSpecific(oldOne, newOne)) {
+        return;
+    }
+
+    // If both are equally specific, choose based on explicitness
+    if (explicit && (_explicitCreators & mask) == 0) {
+        _explicitCreators |= mask;
+        _creators[typeIndex] = _fixAccess(newOne);
+    } else if (!explicit && (_explicitCreators & mask) != 0) {
+        // Keep the explicit one if the new one is not explicit
+        return;
+    } else {
+        // If both are explicit or both are non-explicit, throw an exception
+        throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
+                +" creators: already had " + (explicit ? "explicitly" : "implicitly") + " marked "+oldOne+", encountered "+newOne);
+    }
+}
+
+// Helper method to compare specificity of two AnnotatedWithParams
+private boolean isMoreSpecific(AnnotatedWithParams a1, AnnotatedWithParams a2) {
+    // Implementation depends on how specificity is defined in your context
+    // For example, you might compare the number of parameters or their types
+    // This is a placeholder implementation
+    return a1.getParameterCount() > a2.getParameterCount();
 }
\ No newline at end of file
