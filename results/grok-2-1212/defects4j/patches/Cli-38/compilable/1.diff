diff --git a/tmp/9582d28c-6e4e-4182-85f2-9224057c2223_buggy.java b/tmp/b4621d0f-710f-45ac-ada3-54e5b476f858_fixed.java
index 81a6e8b..61c0a88 100644
--- a/tmp/9582d28c-6e4e-4182-85f2-9224057c2223_buggy.java
+++ b/tmp/b4621d0f-710f-45ac-ada3-54e5b476f858_fixed.java
@@ -1,19 +1,31 @@
     /**
      * Tells if the token looks like a short option.
      * 
-     * @param token
+     * @param token The token to check.
+     * @return true if the token looks like a short option, false otherwise.
      */
     private boolean isShortOption(String token)
     {
         // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
         if (!token.startsWith("-") || token.length() == 1)
         {
             return false;
         }
 
-        // remove leading "-" and "=value"
-        int pos = token.indexOf("=");
-        String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);
-        return options.hasShortOption(optName);
-        // check for several concatenated short options
+        // Check each character after the "-" as a potential short option
+        for (int i = 1; i < token.length(); i++) {
+            char ch = token.charAt(i);
+            if (options.hasShortOption(String.valueOf(ch))) {
+                // If we find a short option, check if the next character is '=' or if it's the end of the string
+                if (i + 1 == token.length() || token.charAt(i + 1) == '=') {
+                    return true;
+                }
+            } else {
+                // If we encounter a character that is not a short option, the token does not represent a valid short option
+                return false;
+            }
+        }
+
+        // If we've made it through the loop, it's possibly a valid short option without a value
+        return true;
     }
\ No newline at end of file
