diff --git a/tmp/5d316af6-af51-480d-9912-69eb216cb695_buggy.java b/tmp/675cbe04-a3fa-422a-b9b8-3e5c126c871d_fixed.java
index 81a6e8b..c8bddf1 100644
--- a/tmp/5d316af6-af51-480d-9912-69eb216cb695_buggy.java
+++ b/tmp/675cbe04-a3fa-422a-b9b8-3e5c126c871d_fixed.java
@@ -1,19 +1,47 @@
     /**
      * Tells if the token looks like a short option.
      * 
      * @param token
      */
     private boolean isShortOption(String token)
     {
         // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
         if (!token.startsWith("-") || token.length() == 1)
         {
             return false;
         }
 
-        // remove leading "-" and "=value"
-        int pos = token.indexOf("=");
-        String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);
-        return options.hasShortOption(optName);
-        // check for several concatenated short options
+        // remove leading "-"
+        String optName = token.substring(1);
+
+        // Check for concatenated short options
+        for (int i = 0; i < optName.length(); i++) {
+            String shortOpt = optName.substring(i, i + 1);
+            if (options.hasShortOption(shortOpt)) {
+                // If it's the last character or followed by '=', it's a valid short option
+                if (i == optName.length() - 1 || optName.charAt(i + 1) == '=') {
+                    return true;
+                }
+                // If it's not the last character and not followed by '=', continue checking
+            } else {
+                // If the current character is not a valid short option, check if it starts a long option
+                if (i == 0 && optName.length() > 1 && optName.charAt(i + 1) != '=') {
+                    return false; // Not a short option if it doesn't start with a valid short option
+                }
+                // If we've reached here, it means we've found a valid short option followed by other characters
+                // We need to check if the rest of the token is a valid option value or another short option
+                int pos = optName.indexOf("=", i);
+                if (pos != -1) {
+                    // Check if the part before '=' is a valid short option
+                    String partBeforeEqual = optName.substring(i, pos);
+                    if (options.hasShortOption(partBeforeEqual)) {
+                        return true;
+                    }
+                }
+                // If we've reached here, it means we've found a valid short option followed by invalid characters
+                return false;
+            }
+        }
+
+        return false;
     }
\ No newline at end of file
