diff --git a/tmp/addf5c71-efbd-45f0-b13c-3e9f28c6259e_buggy.java b/tmp/a750c1a5-ed68-41f2-a4cb-02f998cd9dec_fixed.java
index 4ebe4f9..73395d3 100644
--- a/tmp/addf5c71-efbd-45f0-b13c-3e9f28c6259e_buggy.java
+++ b/tmp/a750c1a5-ed68-41f2-a4cb-02f998cd9dec_fixed.java
@@ -1,41 +1,42 @@
-    /*
-    /**********************************************************
-    /* Validation, post-processing
-    /**********************************************************
-     */
 @Override
 public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
     // May need to resolve types for delegate-based creators:
     JsonDeserializer<Object> delegate = null;
     if (_valueInstantiator != null) {
         // [databind#2324]: check both array-delegating and delegating
         AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();
         if (delegateCreator != null) {
             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
             delegate = findDeserializer(ctxt, delegateType, property);
         }
+        // Add check for array-delegating creator
+        AnnotatedWithParams arrayDelegateCreator = _valueInstantiator.getArrayDelegateCreator();
+        if (arrayDelegateCreator != null) {
+            JavaType arrayDelegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());
+            delegate = findDeserializer(ctxt, arrayDelegateType, property);
+        }
     }
     JsonDeserializer<?> valueDeser = _valueDeserializer;
     final JavaType valueType = _containerType.getContentType();
     if (valueDeser == null) {
         // [databind#125]: May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         if (valueDeser == null) {
             // And we may also need to get deserializer for String
             valueDeser = ctxt.findContextualValueDeserializer(valueType, property);
         }
     } else { // if directly assigned, probably not yet contextual, so:
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);
     }
     // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
     //   comes down to "List vs Collection" I suppose... for now, pass Collection
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
     NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);
     if (isDefaultDeserializer(valueDeser)) {
         valueDeser = null;
     }
     return withResolved(delegate, valueDeser, nuller, unwrapSingle);
 }
\ No newline at end of file
