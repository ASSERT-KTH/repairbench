diff --git a/tmp/3b769859-f47d-4bed-811b-a3777e67d79d_buggy.java b/tmp/95fa4e90-1562-4933-8ad3-03624d6e7d8e_fixed.java
index b98f0a7..2d6a60c 100644
--- a/tmp/3b769859-f47d-4bed-811b-a3777e67d79d_buggy.java
+++ b/tmp/95fa4e90-1562-4933-8ad3-03624d6e7d8e_fixed.java
@@ -1,29 +1,44 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+
+    // Process arguments and perform backward type inference
+    Node arg = constructor.getNext();
+    FunctionType constructorFunctionType = constructorType != null ? constructorType.toMaybeFunctionType() : null;
+    if (constructorFunctionType != null && constructorFunctionType.isConstructor()) {
+        NodeType nodeType = arg.getJSType();
+        JSType expectedType = constructorFunctionType.getParameterType(0);
+        if (nodeType != null && expectedType != null) {
+            JSType refinedType = nodeType.getGreatestSubtype(expectedType);
+            arg.setJSType(refinedType);
+        }
+    }
+
+    // Traverse remaining arguments
+    while (arg != null) {
         scope = traverse(arg, scope);
+        arg = arg.getNext();
     }
+
     return scope;
 }
\ No newline at end of file
