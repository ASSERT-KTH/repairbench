diff --git a/tmp/fadf07bb-e5ac-44b7-b1fe-8b80067f5ea5_buggy.java b/tmp/508ceb54-27bb-4792-bbc9-b0e12907078b_fixed.java
index b98f0a7..74efea9 100644
--- a/tmp/fadf07bb-e5ac-44b7-b1fe-8b80067f5ea5_buggy.java
+++ b/tmp/508ceb54-27bb-4792-bbc9-b0e12907078b_fixed.java
@@ -1,29 +1,44 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                
+                // Backward type inference for constructor arguments
+                Node arg = constructor.getNext();
+                for (int i = 0; arg != null && i < ct.getParametersCount(); i++, arg = arg.getNext()) {
+                    JSType paramType = ct.getParameterType(i);
+                    if (paramType != null) {
+                        arg.setJSType(paramType);
+                        scope.inferType(arg, paramType);
+                    }
+                    scope = traverse(arg, scope);
+                }
             }
         }
     }
     n.setJSType(type);
+    
+    // Process any remaining arguments not covered by the constructor parameters
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+        if (arg.getJSType() == null) {
             scope = traverse(arg, scope);
         }
+    }
+    
     return scope;
 }
\ No newline at end of file
