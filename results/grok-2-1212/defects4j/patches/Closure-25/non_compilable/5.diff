diff --git a/tmp/2a35f6b1-8dfc-4e57-ab3d-a31d900b6bb2_buggy.java b/tmp/997a0a4c-2bcf-4f9c-9d96-333f30d9f504_fixed.java
index b98f0a7..8b56309 100644
--- a/tmp/2a35f6b1-8dfc-4e57-ab3d-a31d900b6bb2_buggy.java
+++ b/tmp/997a0a4c-2bcf-4f9c-9d96-333f30d9f504_fixed.java
@@ -1,29 +1,42 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                
+                // Perform backward type inference for constructor arguments
+                Node arg = constructor.getNext();
+                for (int i = 0; arg != null && i < ct.getParametersCount(); i++, arg = arg.getNext()) {
+                    Parameter param = ct.getParameters().get(i);
+                    JSType expectedType = param.getJSType();
+                    if (expectedType != null) {
+                        scope.inferConstrainedType(arg, expectedType);
+                    }
+                    scope = traverse(arg, scope);
+                }
             }
         }
     }
     n.setJSType(type);
+    // Traverse remaining arguments (if any)
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+        if (!arg.wasTypeInferred()) {
             scope = traverse(arg, scope);
         }
+    }
     return scope;
 }
\ No newline at end of file
