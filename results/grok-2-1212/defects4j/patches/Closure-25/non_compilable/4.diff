diff --git a/tmp/b1bf68d6-f5b0-4c4b-a727-eb74c050f68c_buggy.java b/tmp/c3551c5d-60f0-498b-a6ff-aac5168802ab_fixed.java
index b98f0a7..61e30af 100644
--- a/tmp/b1bf68d6-f5b0-4c4b-a727-eb74c050f68c_buggy.java
+++ b/tmp/c3551c5d-60f0-498b-a6ff-aac5168802ab_fixed.java
@@ -1,29 +1,41 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
+
+    // Iterate through arguments and apply type inference
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
+        
+        // Apply backwards type inference for the argument
+        if (type instanceof FunctionType) {
+            FunctionType funcType = (FunctionType) type;
+            JSType paramType = funcType.getParameterType(arg.getIndex());
+            if (paramType != null) {
+                arg.setJSType(paramType);
+                scope.inferParamType(arg, paramType);
             }
+        }
+    }
+
     return scope;
 }
\ No newline at end of file
