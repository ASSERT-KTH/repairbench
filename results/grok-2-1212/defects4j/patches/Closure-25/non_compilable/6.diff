diff --git a/tmp/9558c125-3740-4bb2-b3f6-20e8b7bc67ee_buggy.java b/tmp/36025955-7bf2-4ea1-8b6f-4618328e1bb5_fixed.java
index b98f0a7..2cbbdf1 100644
--- a/tmp/9558c125-3740-4bb2-b3f6-20e8b7bc67ee_buggy.java
+++ b/tmp/36025955-7bf2-4ea1-8b6f-4618328e1bb5_fixed.java
@@ -1,29 +1,51 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                
+                // Implement backwards inference
+                Node arg = constructor.getNext();
+                for (int i = 0; arg != null && i < ct.getParametersCount(); i++, arg = arg.getNext()) {
+                    JSType paramType = ct.getParameterType(i);
+                    if (paramType != null) {
+                        scope = inferParameterType(scope, arg, paramType);
+                    }
+                }
             }
         }
     }
     n.setJSType(type);
+    // Traverse remaining arguments (if any) after the backwards inference
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
+
+// Helper method to infer parameter type
+private FlowScope inferParameterType(FlowScope scope, Node arg, JSType paramType) {
+    JSType argType = arg.getJSType();
+    if (argType == null || argType.isUnknownType()) {
+        arg.setJSType(paramType);
+        return scope;
+    }
+    
+    JSType inferredType = argType.getLeastSupertype(paramType);
+    arg.setJSType(inferredType);
+    return scope;
+}
\ No newline at end of file
