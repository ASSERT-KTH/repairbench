diff --git a/tmp/35071d07-4d7d-4fcb-874d-11edcf545fc5_buggy.java b/tmp/457c0ff5-943a-4ba6-8b3f-face45e430e0_fixed.java
index b98f0a7..cd08c56 100644
--- a/tmp/35071d07-4d7d-4fcb-874d-11edcf545fc5_buggy.java
+++ b/tmp/457c0ff5-943a-4ba6-8b3f-face45e430e0_fixed.java
@@ -1,29 +1,54 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+
+    // Traverse and update types for constructor arguments
+    Node arg = constructor.getNext();
+    FunctionType constructorFunctionType = constructorType != null ? constructorType.toMaybeFunctionType() : null;
+    if (constructorFunctionType != null) {
+        int paramIndex = 0;
+        while (arg != null) {
             scope = traverse(arg, scope);
+            
+            // Update the argument type based on the constructor's parameter type
+            if (paramIndex < constructorFunctionType.getParametersCount()) {
+                JSType paramType = constructorFunctionType.getParameterType(paramIndex);
+                if (paramType != null) {
+                    arg.setJSType(paramType);
+                    // Update the scope with the new type information
+                    scope = scope.inferConst(arg, paramType);
                 }
+            }
+            arg = arg.getNext();
+            paramIndex++;
+        }
+    } else {
+        // If the constructor type is not known, just traverse the arguments
+        while (arg != null) {
+            scope = traverse(arg, scope);
+            arg = arg.getNext();
+        }
+    }
+
     return scope;
 }
\ No newline at end of file
