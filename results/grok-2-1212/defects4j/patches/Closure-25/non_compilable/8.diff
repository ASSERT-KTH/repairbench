diff --git a/tmp/88fa9412-0288-4f11-8196-054736cba510_buggy.java b/tmp/20656f5e-1d28-48a5-88bb-c23e7436f8ea_fixed.java
index b98f0a7..07fb5dc 100644
--- a/tmp/88fa9412-0288-4f11-8196-054736cba510_buggy.java
+++ b/tmp/20656f5e-1d28-48a5-88bb-c23e7436f8ea_fixed.java
@@ -1,29 +1,51 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+
+    // Process constructor arguments
+    Node arg = constructor.getNext();
+    int paramIndex = 0;
+    while (arg != null) {
         scope = traverse(arg, scope);
+
+        // Perform backward type inference for the argument
+        if (constructorType instanceof FunctionType) {
+            FunctionType functionType = (FunctionType) constructorType;
+            NodeTypePair paramType = functionType.getParameterType(paramIndex);
+            if (paramType != null) {
+                JSType argType = arg.getJSType();
+                JSType inferredType = argType.getLeastSupertype(paramType.type);
+                arg.setJSType(inferredType);
+                
+                // Update the scope with the new type information
+                scope.inferUniqueType(arg, inferredType);
             }
+            paramIndex++;
+        }
+
+        arg = arg.getNext();
+    }
+
     return scope;
 }
\ No newline at end of file
