diff --git a/tmp/1c0d4197-8cf6-48f6-a7fb-e5ef921a8407_buggy.java b/tmp/28db0e48-25ab-4a47-af79-995cc607d6a8_fixed.java
index b5d94e0..8ac37ae 100644
--- a/tmp/1c0d4197-8cf6-48f6-a7fb-e5ef921a8407_buggy.java
+++ b/tmp/28db0e48-25ab-4a47-af79-995cc607d6a8_fixed.java
@@ -1,26 +1,34 @@
 private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
     if (!shouldVisit(node)) {
         return;
     }
 
-    int visits = 0;
-    do {
-      Node c = node.getFirstChild();
-      while(c != null) {
-        traverse(c);
-        Node next = c.getNext();
-        c = next;
+    boolean changed = true;
+    while (changed) {
+        changed = false;
+
+        // Traverse child nodes
+        Node child = node.getFirstChild();
+        while (child != null) {
+            Node next = child.getNext();
+            traverse(child);
+            child = next;
         }
 
-      visit(node);
-      visits++;
+        // Visit the current node
+        if (visit(node)) {
+            changed = true;
+        }
 
-      Preconditions.checkState(visits < 10000, "too many interations");
-    } while (shouldRetraverse(node));
+        // Check if we need to retraverse
+        if (shouldRetraverse(node)) {
+            changed = true;
+        }
+    }
 
     exitNode(node);
 }
\ No newline at end of file
