diff --git a/tmp/89a6c325-932f-4d14-98e0-6d227a11120f_buggy.java b/tmp/fb15511f-28e7-488b-81e8-dda666aedf66_fixed.java
index b5d94e0..1b580e8 100644
--- a/tmp/89a6c325-932f-4d14-98e0-6d227a11120f_buggy.java
+++ b/tmp/fb15511f-28e7-488b-81e8-dda666aedf66_fixed.java
@@ -1,26 +1,38 @@
 private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
     if (!shouldVisit(node)) {
         return;
     }
 
-    int visits = 0;
+    boolean changed;
     do {
+        changed = false;
         Node c = node.getFirstChild();
         while (c != null) {
-        traverse(c);
             Node next = c.getNext();
+            traverse(c);
             c = next;
         }
 
-      visit(node);
-      visits++;
+        if (visit(node)) {
+            changed = true;
+        }
+
+        c = node.getFirstChild();
+        while (c != null) {
+            Node next = c.getNext();
+            if (shouldRetraverse(c)) {
+                traverse(c);
+                changed = true;
+            }
+            c = next;
+        }
 
-      Preconditions.checkState(visits < 10000, "too many interations");
-    } while (shouldRetraverse(node));
+        Preconditions.checkState(changed || !shouldRetraverse(node), "Infinite loop detected in traverse");
+    } while (changed || shouldRetraverse(node));
 
     exitNode(node);
 }
\ No newline at end of file
