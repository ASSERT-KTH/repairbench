diff --git a/tmp/1d76baa0-c8c8-4bad-82f6-fb997f0d5a6a_buggy.java b/tmp/f06d2ebb-7134-46a7-97aa-1d97fc1263f3_fixed.java
index 4e21866..f18c972 100644
--- a/tmp/1d76baa0-c8c8-4bad-82f6-fb997f0d5a6a_buggy.java
+++ b/tmp/f06d2ebb-7134-46a7-97aa-1d97fc1263f3_fixed.java
@@ -1,10 +1,47 @@
 /**
  * Computes the square-root of the weight matrix.
  *
  * @param m Symmetric, positive-definite (weight) matrix.
  * @return the square-root of the weight matrix.
  */
 private RealMatrix squareRoot(RealMatrix m) {
-            final EigenDecomposition dec = new EigenDecomposition(m);
-            return dec.getSquareRoot();
+    // Compute Schur decomposition
+    SchurTransformer schur = new SchurTransformer(m);
+    
+    // Get the T matrix from Schur decomposition
+    RealMatrix T = schur.getT();
+    
+    // Compute the principal square root of T
+    RealMatrix sqrtT = computePrincipalSqrt(T);
+    
+    // Compute U matrix from Schur decomposition
+    RealMatrix U = schur.getU();
+    
+    // Compute the square root of the original matrix
+    return U.multiply(sqrtT).multiply(U.transpose());
+}
+
+/**
+ * Computes the principal square root of a triangular matrix.
+ *
+ * @param T Upper triangular matrix.
+ * @return The principal square root of T.
+ */
+private RealMatrix computePrincipalSqrt(RealMatrix T) {
+    int n = T.getRowDimension();
+    RealMatrix sqrtT = MatrixUtils.createRealMatrix(n, n);
+    
+    for (int j = n - 1; j >= 0; j--) {
+        sqrtT.setEntry(j, j, FastMath.sqrt(T.getEntry(j, j)));
+        
+        for (int i = j - 1; i >= 0; i--) {
+            double sum = 0.0;
+            for (int k = i + 1; k <= j; k++) {
+                sum += sqrtT.getEntry(i, k) * sqrtT.getEntry(k, j);
+            }
+            sqrtT.setEntry(i, j, (T.getEntry(i, j) - sum) / (sqrtT.getEntry(i, i) + sqrtT.getEntry(j, j)));
+        }
+    }
+    
+    return sqrtT;
 }
\ No newline at end of file
