diff --git a/tmp/f932499a-0860-4d3d-9d9e-438d87fc59d3_buggy.java b/tmp/28e19820-9da0-459a-bb6e-9bd6ff41cc50_fixed.java
index 4e21866..4343a1d 100644
--- a/tmp/f932499a-0860-4d3d-9d9e-438d87fc59d3_buggy.java
+++ b/tmp/28e19820-9da0-459a-bb6e-9bd6ff41cc50_fixed.java
@@ -1,10 +1,28 @@
 /**
-     * Computes the square-root of the weight matrix.
+ * Computes the square-root of the weight matrix using the Denman-Beavers algorithm.
  *
  * @param m Symmetric, positive-definite (weight) matrix.
  * @return the square-root of the weight matrix.
  */
 private RealMatrix squareRoot(RealMatrix m) {
-            final EigenDecomposition dec = new EigenDecomposition(m);
-            return dec.getSquareRoot();
+    final int maxIterations = 100;
+    final double epsilon = 1e-10;
+
+    RealMatrix y = m.copy();
+    RealMatrix z = RealMatrixFactory.createIdentityMatrix(m.getRowDimension());
+
+    for (int i = 0; i < maxIterations; i++) {
+        RealMatrix yNew = 0.5 * (y.add(z.inverse()));
+        RealMatrix zNew = 0.5 * (z.add(y.inverse()));
+
+        if (yNew.subtract(y).getNorm() < epsilon && zNew.subtract(z).getNorm() < epsilon) {
+            return yNew;
+        }
+
+        y = yNew;
+        z = zNew;
+    }
+
+    // If we reach here, the algorithm did not converge within the specified number of iterations
+    throw new ConvergenceException("Denman-Beavers algorithm did not converge");
 }
\ No newline at end of file
