diff --git a/tmp/2e067652-ced0-4b9f-8b20-27a9662aeb18_buggy.java b/tmp/a65b645d-2d1b-4f6d-87ee-15b503e1e33a_fixed.java
index 19fd63e..402e9ed 100644
--- a/tmp/2e067652-ced0-4b9f-8b20-27a9662aeb18_buggy.java
+++ b/tmp/a65b645d-2d1b-4f6d-87ee-15b503e1e33a_fixed.java
@@ -1,24 +1,25 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression, excluding cases with EXPR_RESULT for event handlers.
  */
 private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
         if (n.hasOneChild()) {
             Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
+            if (maybeExpr.getType() == Token.EXPR_RESULT) {
+                Node expr = maybeExpr.getFirstChild();
+                if (expr.getType() == Token.CALL) {
+                    Node callee = expr.getFirstChild();
+                    if (callee.getType() == Token.GETPROP) {
+                        Node prop = callee.getLastChild();
+                        if (prop.getString().equals("onchange")) {
+                            return false; // Don't fold onchange event handlers
+                        }
+                    }
+                }
+            }
             return NodeUtil.isExpressionNode(maybeExpr);
         }
     }
-
     return false;
 }
\ No newline at end of file
