diff --git a/tmp/14968cdf-7aa6-4997-992a-3eaaa1534197_buggy.java b/tmp/774fc7cd-f3d9-4e3f-8dcf-f96933e76b42_fixed.java
index 19fd63e..82e5489 100644
--- a/tmp/14968cdf-7aa6-4997-992a-3eaaa1534197_buggy.java
+++ b/tmp/774fc7cd-f3d9-4e3f-8dcf-f96933e76b42_fixed.java
@@ -1,24 +1,26 @@
 /**
  * @return Whether the node is a block with a single statement that is
  *     an expression.
  */
 private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
         if (n.hasOneChild()) {
             Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
+            // Check if the node is an EXPR_RESULT
+            if (maybeExpr.getType() == Token.EXPR_RESULT) {
+                Node child = maybeExpr.getFirstChild();
+                // Only allow folding if it's not a method call on an object
+                // This addresses the IE issue with event handlers
+                if (child.getType() != Token.CALL || 
+                    child.getFirstChild().getType() != Token.GETPROP) {
+                    return NodeUtil.isExpressionNode(child);
+                }
+            } else {
+                // If it's not an EXPR_RESULT, check as before
                 return NodeUtil.isExpressionNode(maybeExpr);
             }
         }
+    }
 
     return false;
 }
\ No newline at end of file
