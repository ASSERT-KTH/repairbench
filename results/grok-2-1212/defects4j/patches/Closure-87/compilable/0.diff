diff --git a/tmp/6c67f8ff-d404-481d-a08c-c61d84007f0c_buggy.java b/tmp/ad0ec58f-1bc8-4b9e-bbf4-cb4ff1c76290_fixed.java
index 19fd63e..6c0b996 100644
--- a/tmp/6c67f8ff-d404-481d-a08c-c61d84007f0c_buggy.java
+++ b/tmp/ad0ec58f-1bc8-4b9e-bbf4-cb4ff1c76290_fixed.java
@@ -1,24 +1,25 @@
 /**
  * @return Whether the node is a block with a single statement that is
  *     an expression.
  */
 private boolean isFoldableExpressBlock(Node n) {
   if (n.getType() == Token.BLOCK) {
     if (n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
+      if (maybeExpr.getType() == Token.EXPR_RESULT) {
+        Node expr = maybeExpr.getFirstChild();
+        if (expr.getType() == Token.CALL) {
+          Node callee = expr.getFirstChild();
+          if (callee.getType() == Token.GETPROP) {
+            String propName = callee.getLastChild().getString();
+            if (propName.equals("onchange")) {
+              return false;
+            }
+          }
+        }
+      }
       return NodeUtil.isExpressionNode(maybeExpr);
     }
   }
-
   return false;
 }
\ No newline at end of file
