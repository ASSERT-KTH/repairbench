diff --git a/tmp/61716fb5-624d-4fcc-9c01-501be4ad454a_buggy.java b/tmp/18aa291f-17c5-45d8-afb5-d690f2f7b902_fixed.java
index d6a560a..7d1da3a 100644
--- a/tmp/61716fb5-624d-4fcc-9c01-501be4ad454a_buggy.java
+++ b/tmp/18aa291f-17c5-45d8-afb5-d690f2f7b902_fixed.java
@@ -1,33 +1,53 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // First, attempt to resolve via the registry
     boolean resolved = resolveViaRegistry(t, enclosing);
+
+    // Detect and handle potential type cycles
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
     }
 
     if (resolved) {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+        return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
+    // If not resolved via registry, try resolving via properties
     resolveViaProperties(t, enclosing);
+
+    // Detect and handle potential type cycles again
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
     }
 
     super.resolveInternal(t, enclosing);
+
+    // Only finish property continuations if the type is resolved
     if (isResolved()) {
         finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+
+    // Add a cycle detection mechanism to prevent infinite loops
+    int cycleCount = 0;
+    JSType currentType = this;
+    Set<JSType> visitedTypes = new HashSet<>();
+
+    while (currentType != null && !visitedTypes.contains(currentType)) {
+        visitedTypes.add(currentType);
+        currentType = currentType.getReferencedType();
+        cycleCount++;
+
+        // If we've gone through too many iterations, we likely have a cycle
+        if (cycleCount > 100) {
+            t.warning("Potential infinite type resolution loop detected");
+            break;
+        }
+    }
+
+    return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
