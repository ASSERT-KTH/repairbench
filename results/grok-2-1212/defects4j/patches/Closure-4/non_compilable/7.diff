diff --git a/tmp/43281a6a-1db8-4b6f-bca0-65e23562dc6f_buggy.java b/tmp/23802e97-4cde-4d64-b59f-bda91b09c3d6_fixed.java
index d6a560a..7d021ba 100644
--- a/tmp/43281a6a-1db8-4b6f-bca0-65e23562dc6f_buggy.java
+++ b/tmp/23802e97-4cde-4d64-b59f-bda91b09c3d6_fixed.java
@@ -1,33 +1,35 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // First, attempt to resolve via the registry
     boolean resolved = resolveViaRegistry(t, enclosing);
+    
+    // Check for implicit prototype cycle
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return this; // Return early if a cycle is detected
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
+    // If registry resolution failed, try via properties
     resolveViaProperties(t, enclosing);
+
+    // Check for implicit prototype cycle again
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return this; // Return early if a cycle is detected
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
-      finishPropertyContinuations();
+      finishPropertyContinations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
\ No newline at end of file
