diff --git a/tmp/3f7de6cd-1303-4120-9b5e-924181e4d19a_buggy.java b/tmp/346c1c7a-7051-4a2f-9047-e8e8fca5fb36_fixed.java
index d6a560a..64e2262 100644
--- a/tmp/3f7de6cd-1303-4120-9b5e-924181e4d19a_buggy.java
+++ b/tmp/346c1c7a-7051-4a2f-9047-e8e8fca5fb36_fixed.java
@@ -1,33 +1,52 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
+    boolean resolved = false;
+    Set<JSType> visited = new HashSet<>();
 
-    if (resolved) {
-      super.resolveInternal(t, enclosing);
-      finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
-    }
+    while (!resolved) {
+        resolved = resolveViaRegistry(t, enclosing);
+        if (resolved) break;
 
-    resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
+        if (detectImplicitPrototypeCycle(visited)) {
             handleTypeCycle(t);
+            break;
+        }
+
+        resolved = resolveViaProperties(t, enclosing);
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
         finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+
+    return registry.isLastGeneration() ? getReferencedType() : this;
+}
+
+/**
+ * Detects an implicit prototype cycle.
+ * 
+ * @param visited A set of visited types to avoid infinite recursion.
+ * @return true if a cycle is detected, false otherwise.
+ */
+private boolean detectImplicitPrototypeCycle(Set<JSType> visited) {
+    if (visited.contains(this)) {
+        return true;
+    }
+    visited.add(this);
+
+    // Check for cycle in prototype chain
+    JSType prototype = getPrototype();
+    while (prototype != null) {
+        if (visited.contains(prototype)) {
+            return true;
+        }
+        visited.add(prototype);
+        prototype = prototype.getPrototype();
+    }
+
+    return false;
 }
\ No newline at end of file
