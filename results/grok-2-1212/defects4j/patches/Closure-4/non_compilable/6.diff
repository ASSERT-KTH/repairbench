diff --git a/tmp/958554b8-afd3-4492-975c-ee051f937d5f_buggy.java b/tmp/d0f52482-e015-4071-83c9-ca944b827db6_fixed.java
index d6a560a..7351e4c 100644
--- a/tmp/958554b8-afd3-4492-975c-ee051f937d5f_buggy.java
+++ b/tmp/d0f52482-e015-4071-83c9-ca944b827db6_fixed.java
@@ -1,33 +1,61 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Use a set to track visited types and detect cycles
+    Set<JSType> visited = new HashSet<>();
+    visited.add(this);
+
+    // Attempt to resolve via registry first
     boolean resolved = resolveViaRegistry(t, enclosing);
+
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
-    resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
+    // Resolve via properties, but check for cycles
+    if (!resolveViaPropertiesWithCycleCheck(t, enclosing, visited)) {
+      // Cycle detected, handle appropriately
+      t.warning("Parse error. Cycle detected in inheritance chain of type " + this.getReferenceName());
+      return this;
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
+
+  /**
+   * Resolve the type via properties, checking for cycles.
+   */
+  private boolean resolveViaPropertiesWithCycleCheck(ErrorReporter t, StaticScope<JSType> enclosing, Set<JSType> visited) {
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t);
+      return false;
+    }
+
+    resolveViaProperties(t, enclosing);
+
+    // Check for new cycles after resolving properties
+    for (JSType propertyType : getAllPropertyTypes()) {
+      if (propertyType instanceof NamedType && !visited.add(propertyType)) {
+        return false; // Cycle detected
+      }
+      if (propertyType instanceof NamedType && !((NamedType) propertyType).resolveInternal(t, enclosing).isResolved()) {
+        return false; // Unresolved type in the chain
+      }
+    }
+
+    return true; // No cycles detected and all types resolved
+  }
\ No newline at end of file
