diff --git a/tmp/9e671094-41d3-4681-bf2e-0fbc20f90f0e_buggy.java b/tmp/1f432478-b608-4341-b1c9-e7ad37be658a_fixed.java
index d6a560a..f7ac129 100644
--- a/tmp/9e671094-41d3-4681-bf2e-0fbc20f90f0e_buggy.java
+++ b/tmp/1f432478-b608-4341-b1c9-e7ad37be658a_fixed.java
@@ -1,33 +1,36 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
+    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);
+    boolean resolvedViaProperties = false;
+
+    if (resolvedViaRegistry) {
+      // Check for cycle after resolving via registry
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
       }
-
-    if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
-    resolveViaProperties(t, enclosing);
+    // Only attempt to resolve via properties if registry resolution failed
+    resolvedViaProperties = resolveViaProperties(t, enclosing);
+
+    // Check for cycle after resolving via properties
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     super.resolveInternal(t, enclosing);
-    if (isResolved()) {
+
+    if (resolvedViaProperties && isResolved()) {
       finishPropertyContinuations();
     }
+
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
