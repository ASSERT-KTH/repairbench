diff --git a/tmp/e3565ca9-12dc-4821-83c3-7a2eef71c7f3_buggy.java b/tmp/b1cb8e6b-95e2-46d1-8a57-66cd131aaa72_fixed.java
index d6a560a..b55e91c 100644
--- a/tmp/e3565ca9-12dc-4821-83c3-7a2eef71c7f3_buggy.java
+++ b/tmp/b1cb8e6b-95e2-46d1-8a57-66cd131aaa72_fixed.java
@@ -1,33 +1,42 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
+    // First, attempt to resolve via the registry
+    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);
+    
+    if (resolvedViaRegistry) {
         if (detectImplicitPrototypeCycle()) {
             handleTypeCycle(t);
         }
-
-    if (resolved) {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+        return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
-    resolveViaProperties(t, enclosing);
+    // If not resolved via registry, attempt to resolve via properties
+    boolean resolvedViaProperties = resolveViaProperties(t, enclosing);
+    
+    if (resolvedViaProperties) {
         if (detectImplicitPrototypeCycle()) {
             handleTypeCycle(t);
         }
-
         super.resolveInternal(t, enclosing);
+        finishPropertyContinuations();
+    }
+
+    // Check if the type is resolved after both attempts
     if (isResolved()) {
-      finishPropertyContinuations();
+        return registry.isLastGeneration() ? getReferencedType() : this;
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+
+    // If still not resolved, handle the case appropriately
+    if (detectImplicitPrototypeCycle()) {
+        handleTypeCycle(t);
+    } else {
+        t.warning("Unable to resolve type: " + this.getReferenceName());
+    }
+
+    return this;
 }
\ No newline at end of file
