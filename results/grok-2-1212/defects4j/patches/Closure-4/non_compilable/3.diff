diff --git a/tmp/8d5b2cdb-b483-4d9b-8218-20350aa2cfb9_buggy.java b/tmp/36a7d8ce-b752-49a3-aedb-fd18db6cbd8f_fixed.java
index d6a560a..aa3b670 100644
--- a/tmp/8d5b2cdb-b483-4d9b-8218-20350aa2cfb9_buggy.java
+++ b/tmp/36a7d8ce-b752-49a3-aedb-fd18db6cbd8f_fixed.java
@@ -1,33 +1,41 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
+    // Use a Set to keep track of visited types to detect cycles
+    Set<JSType> visited = new HashSet<>();
+
+    // Recursive helper function to resolve types and detect cycles
+    JSType resolveHelper(JSType type) {
+        if (type == null || visited.contains(type)) {
+            return type; // Cycle detected or type already resolved
+        }
+        visited.add(type);
+
+        boolean resolvedViaRegistry = type.resolveViaRegistry(t, enclosing);
+        if (resolvedViaRegistry) {
+            type.finishPropertyContinuations();
+            return registry.isLastGeneration() ? type.getReferencedType() : type;
+        }
+
+        type.resolveViaProperties(t, enclosing);
+        type.finishPropertyContinuations();
+        return registry.isLastGeneration() ? type.getReferencedType() : type;
     }
 
-    if (resolved) {
+    JSType resolvedType = resolveHelper(this);
+    if (resolvedType != null) {
         super.resolveInternal(t, enclosing);
-      finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+        return resolvedType;
     }
 
-    resolveViaProperties(t, enclosing);
+    // Handle type cycle
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
     }
 
+    // If still unresolved, try resolving super type
     super.resolveInternal(t, enclosing);
-    if (isResolved()) {
-      finishPropertyContinuations();
-    }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
