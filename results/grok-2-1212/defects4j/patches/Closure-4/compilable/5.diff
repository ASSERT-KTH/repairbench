diff --git a/tmp/a7d1bd8e-cd4f-4be2-a5e0-b68df1c5b716_buggy.java b/tmp/94e34298-688c-48ef-9fe2-bb99104f969f_fixed.java
index d6a560a..6a87660 100644
--- a/tmp/a7d1bd8e-cd4f-4be2-a5e0-b68df1c5b716_buggy.java
+++ b/tmp/94e34298-688c-48ef-9fe2-bb99104f969f_fixed.java
@@ -1,33 +1,35 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // First, attempt to resolve via registry
     boolean resolved = resolveViaRegistry(t, enclosing);
+
+    // Check for and handle type cycles after each resolution attempt
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        return this; // Return immediately after handling a cycle
     }
 
     if (resolved) {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+        return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
+    // If registry resolution fails, attempt to resolve via properties
     resolveViaProperties(t, enclosing);
+
+    // Check for cycles again after property resolution
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        return this; // Return immediately after handling a cycle
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
         finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
