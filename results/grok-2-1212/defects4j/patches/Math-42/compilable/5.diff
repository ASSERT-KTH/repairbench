diff --git a/tmp/e597b62b-8ef9-4e33-a617-5b60303ae29d_buggy.java b/tmp/7d8bf4be-0a08-4812-bb22-25903f842c0c_fixed.java
index efa499e..273af7d 100644
--- a/tmp/e597b62b-8ef9-4e33-a617-5b60303ae29d_buggy.java
+++ b/tmp/7d8bf4be-0a08-4812-bb22-25903f842c0c_fixed.java
@@ -1,35 +1,50 @@
 /**
  * Get the current solution.
  *
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
     Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
     double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
     Set<Integer> basicRows = new HashSet<Integer>();
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     for (int i = 0; i < coefficients.length; i++) {
         int colIndex = columnLabels.indexOf("x" + i);
         if (colIndex < 0) {
             coefficients[i] = 0;
             continue;
         }
         Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+        if (basicRow == null) {
+            // Variable is non-basic, set to 0
+            coefficients[i] = 0;
+        } else if (basicRows.contains(basicRow)) {
+            // If multiple variables can take a given value, choose the first and set the rest to 0
+            coefficients[i] = 0;
         } else {
             basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+            double value = getEntry(basicRow, getRhsOffset());
+            if (restrictToNonNegative && value < 0) {
+                // If we're restricting to non-negative and the value is negative, set to 0
+                coefficients[i] = 0;
+            } else {
+                coefficients[i] = value;
             }
         }
+    }
+
+    // Handle negative variables
+    if (negativeVarBasicRow != null && !restrictToNonNegative) {
+        double negativeValue = getEntry(negativeVarBasicRow, getRhsOffset());
+        for (int i = 0; i < coefficients.length; i++) {
+            int colIndex = columnLabels.indexOf("x" + i);
+            if (colIndex >= 0 && getBasicRow(colIndex) == negativeVarBasicRow) {
+                coefficients[i] -= negativeValue;
+            }
+        }
+    }
+
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
