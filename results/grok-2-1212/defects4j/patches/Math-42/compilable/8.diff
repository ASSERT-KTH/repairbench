diff --git a/tmp/549080d1-8cf8-4e78-b2b3-a6c52452cd14_buggy.java b/tmp/d1c43c2f-7c57-46cd-8789-1068b8d37357_fixed.java
index efa499e..0a94f97 100644
--- a/tmp/549080d1-8cf8-4e78-b2b3-a6c52452cd14_buggy.java
+++ b/tmp/d1c43c2f-7c57-46cd-8789-1068b8d37357_fixed.java
@@ -1,35 +1,33 @@
 /**
  * Get the current solution.
  *
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
     Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
     double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
     Set<Integer> basicRows = new HashSet<Integer>();
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     for (int i = 0; i < coefficients.length; i++) {
         int colIndex = columnLabels.indexOf("x" + i);
         if (colIndex < 0) {
             coefficients[i] = 0;
             continue;
         }
         Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+        if (basicRow == null) {
+            // Variable is non-basic
+            coefficients[i] = 0;
+        } else if (basicRows.contains(basicRow)) {
+            // Multiple variables can take this value, set to 0
+            coefficients[i] = 0;
         } else {
             basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+            double value = getEntry(basicRow, getRhsOffset());
+            coefficients[i] = value - (restrictToNonNegative ? 0 : mostNegative);
         }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
