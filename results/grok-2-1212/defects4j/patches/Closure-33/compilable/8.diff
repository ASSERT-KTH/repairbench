diff --git a/tmp/0d83849e-c578-4ce0-99f6-bc62a02c5dfc_buggy.java b/tmp/d8f0a945-3df9-437f-8468-39c7842e525e_fixed.java
index fb2b020..9b1098d 100644
--- a/tmp/0d83849e-c578-4ce0-99f6-bc62a02c5dfc_buggy.java
+++ b/tmp/d8f0a945-3df9-437f-8468-39c7842e525e_fixed.java
@@ -1,27 +1,24 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+                    // Use the constraint type directly instead of introducing VOID_TYPE
+                    typeToInfer = propType;
                 }
                 defineInferredProperty(prop, typeToInfer, null);
+            } else {
+                // If the property is already declared, we need to merge the types
+                JSType existingType = getPropertyType(prop);
+                JSType mergedType = existingType.getLeastSupertype(propType);
+                defineInferredProperty(prop, mergedType, null);
             }
         }
     }
 }
\ No newline at end of file
