diff --git a/tmp/a5a685d5-e9e8-4505-845f-9522acde4ee5_buggy.java b/tmp/833b8083-526a-4298-81a6-bf8043a7a6f0_fixed.java
index fb2b020..74a3b40 100644
--- a/tmp/a5a685d5-e9e8-4505-845f-9522acde4ee5_buggy.java
+++ b/tmp/833b8083-526a-4298-81a6-bf8043a7a6f0_fixed.java
@@ -1,27 +1,35 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
+    // taking each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+                    // If the property doesn't exist, we should use the constraint type directly
+                    typeToInfer = propType;
+                } else {
+                    // If the property exists but isn't declared, we get its least supertype
+                    typeToInfer = getPropertyType(prop).getLeastSupertype(propType);
                 }
                 defineInferredProperty(prop, typeToInfer, null);
+            } else {
+                // If the property is declared, we should still match it with the constraint
+                JSType existingType = getPropertyType(prop);
+                JSType matchedType = existingType.getLeastSupertype(propType);
+                defineInferredProperty(prop, matchedType, null);
             }
         }
     }
 }
\ No newline at end of file
