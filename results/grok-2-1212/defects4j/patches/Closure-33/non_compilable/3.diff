diff --git a/tmp/3b611259-a920-4e62-a2a6-6f5f78cf7c1d_buggy.java b/tmp/57354ebe-84a4-44a0-823d-3e4ee70121c5_fixed.java
index fb2b020..0891860 100644
--- a/tmp/3b611259-a920-4e62-a2a6-6f5f78cf7c1d_buggy.java
+++ b/tmp/57354ebe-84a4-44a0-823d-3e4ee70121c5_fixed.java
@@ -1,27 +1,35 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
+    // taking each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
                     typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                         .getLeastSupertype(propType);
                 }
                 defineInferredProperty(prop, typeToInfer, null);
+            } else if (propType.isObjectType() && hasProperty(prop)) {
+                // If the property is an object type and exists on this object,
+                // recursively match the constraint on the nested object.
+                ObjectType nestedConstraint = (ObjectType) propType;
+                ObjectType nestedObj = getPropertyType(prop).toObjectType();
+                if (nestedObj != null) {
+                    nestedObj.matchConstraint(nestedConstraint);
+                }
             }
         }
     }
 }
\ No newline at end of file
