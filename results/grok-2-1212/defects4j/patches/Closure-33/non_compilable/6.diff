diff --git a/tmp/7a41b020-edfa-4088-89d1-5a61f046ad42_buggy.java b/tmp/53b41c94-03f4-42cc-9c07-a898dce60092_fixed.java
index fb2b020..64a2bd5 100644
--- a/tmp/7a41b020-edfa-4088-89d1-5a61f046ad42_buggy.java
+++ b/tmp/53b41c94-03f4-42cc-9c07-a898dce60092_fixed.java
@@ -1,27 +1,26 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
+                    // For union types, we need to get the least supertype that includes VOID_TYPE
                     typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                         .getLeastSupertype(propType);
                 }
                 defineInferredProperty(prop, typeToInfer, null);
+            } else {
+                // If the property is already declared, we need to update its type
+                // to be the union of the existing type and the constraint type
+                JSType existingType = getPropertyType(prop);
+                JSType newType = existingType.getLeastSupertype(propType);
+                setPropertyType(prop, newType);
             }
         }
     }
 }
\ No newline at end of file
