diff --git a/tmp/32dd0ae4-379c-42a4-8e18-a1796db42761_buggy.java b/tmp/df99229d-6a98-48f3-bc27-682b2066368a_fixed.java
index fb2b020..8f195bf 100644
--- a/tmp/32dd0ae4-379c-42a4-8e18-a1796db42761_buggy.java
+++ b/tmp/df99229d-6a98-48f3-bc27-682b2066368a_fixed.java
@@ -1,27 +1,31 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
+            
+            // If the property is not declared, we need to infer its type
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
+                
+                // If the property doesn't exist, we need to handle it differently
                 if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+                    // For nested objects, we need to recursively apply the constraint
+                    if (propType.isObjectType()) {
+                        ObjectType nestedConstraint = (ObjectType) propType;
+                        defineInferredProperty(prop, getNativeType(JSTypeNative.OBJECT_TYPE), null);
+                        getPropertyType(prop).matchConstraint(nestedConstraint);
+                    } else {
+                        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);
                     }
+                }
+                
+                // Define the inferred property
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
 }
\ No newline at end of file
