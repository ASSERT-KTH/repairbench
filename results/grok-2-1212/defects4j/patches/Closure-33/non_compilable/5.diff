diff --git a/tmp/0efdcfa7-2828-4042-adec-8c05563f518a_buggy.java b/tmp/cf696280-c135-4e27-8336-75273f484390_fixed.java
index fb2b020..d20a1e1 100644
--- a/tmp/0efdcfa7-2828-4042-adec-8c05563f518a_buggy.java
+++ b/tmp/cf696280-c135-4e27-8336-75273f484390_fixed.java
@@ -1,27 +1,30 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
+            if (propType.isRecordType()) {
+                // If the property type itself is a record, recursively match it.
+                ObjectType nestedRecord = propType.toMaybeObjectType();
+                if (nestedRecord != null) {
+                    JSType nestedObj = getPropertyType(prop);
+                    if (nestedObj != null && nestedObj.isObject()) {
+                        nestedObj.toMaybeObjectType().matchConstraint(nestedRecord);
+                    }
+                }
+            } else {
                 if (!isPropertyTypeDeclared(prop)) {
                     JSType typeToInfer = propType;
                     if (!hasProperty(prop)) {
                         typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                                 .getLeastSupertype(propType);
                     }
                     defineInferredProperty(prop, typeToInfer, null);
                 }
             }
         }
     }
+}
\ No newline at end of file
