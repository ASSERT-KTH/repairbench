diff --git a/tmp/e3a2a2c0-1eaf-4fc6-b748-23edf3441b5b_buggy.java b/tmp/de4e7c08-7b5f-4156-b665-90cf405339f8_fixed.java
index fb2b020..9c6c812 100644
--- a/tmp/e3a2a2c0-1eaf-4fc6-b748-23edf3441b5b_buggy.java
+++ b/tmp/de4e7c08-7b5f-4156-b665-90cf405339f8_fixed.java
@@ -1,27 +1,35 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
+            
+            // Handle union types
+            if (propType.isUnionType()) {
+                propType = propType.getLeastSupertype(getNativeType(JSTypeNative.UNKNOWN_TYPE));
+            }
+
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
+                    // Handle nested object types
+                    if (propType.isObjectType()) {
+                        ObjectType nestedObjType = (ObjectType) propType;
+                        ObjectTypeBuilder builder = new ObjectTypeBuilder(registry);
+                        for (String nestedProp : nestedObjType.getOwnPropertyNames()) {
+                            builder.addProperty(nestedProp, nestedObjType.getPropertyType(nestedProp), null);
+                        }
+                        typeToInfer = builder.build();
+                    } else {
                         typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                             .getLeastSupertype(propType);
                     }
+                }
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
 }
\ No newline at end of file
