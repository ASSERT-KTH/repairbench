diff --git a/tmp/5a3f8e3f-589a-4663-b7ec-e5a6b6ed472d_buggy.java b/tmp/2ce81dc7-53c3-48e8-bc99-4ea178c40c5f_fixed.java
index fb2b020..e303dcd 100644
--- a/tmp/5a3f8e3f-589a-4663-b7ec-e5a6b6ed472d_buggy.java
+++ b/tmp/2ce81dc7-53c3-48e8-bc99-4ea178c40c5f_fixed.java
@@ -1,27 +1,63 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
+            
+            // Handle nested record types
+            if (propType.isRecordType()) {
+                ObjectType nestedRecord = (ObjectType) propType;
+                JSType nestedType = createAnonymousObjectType(nestedRecord);
+                if (!hasProperty(prop)) {
+                    defineInferredProperty(prop, nestedType, null);
+                } else {
+                    JSType existingType = getPropertyType(prop);
+                    if (existingType.isRecordType()) {
+                        ObjectType existingRecord = (ObjectType) existingType;
+                        matchNestedConstraints(existingRecord, nestedRecord);
+                    }
+                }
+            } else {
                 if (!isPropertyTypeDeclared(prop)) {
                     JSType typeToInfer = propType;
                     if (!hasProperty(prop)) {
                         typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                             .getLeastSupertype(propType);
                     }
                     defineInferredProperty(prop, typeToInfer, null);
                 }
             }
         }
     }
+}
+
+// Helper method to match nested constraints
+private void matchNestedConstraints(ObjectType existingRecord, ObjectType nestedRecord) {
+    for (String nestedProp : nestedRecord.getOwnPropertyNames()) {
+        if (existingRecord.hasProperty(nestedProp)) {
+            JSType existingPropType = existingRecord.getPropertyType(nestedProp);
+            JSType nestedPropType = nestedRecord.getPropertyType(nestedProp);
+            
+            if (existingPropType.isRecordType() && nestedPropType.isRecordType()) {
+                matchNestedConstraints((ObjectType) existingPropType, (ObjectType) nestedPropType);
+            } else if (!existingPropType.isEquivalentTo(nestedPropType)) {
+                JSType inferredType = existingPropType.getLeastSupertype(nestedPropType);
+                existingRecord.defineInferredProperty(nestedProp, inferredType, null);
+            }
+        } else {
+            existingRecord.defineInferredProperty(nestedProp, nestedRecord.getPropertyType(nestedProp), null);
+        }
+    }
+}
+
+// Helper method to create an anonymous object type
+private JSType createAnonymousObjectType(ObjectType record) {
+    ObjectTypeBuilder builder = registry.createObjectTypeBuilder();
+    for (String prop : record.getOwnPropertyNames()) {
+        builder.addProperty(prop, record.getPropertyType(prop), null);
+    }
+    return builder.build();
+}
\ No newline at end of file
