diff --git a/tmp/a3be385b-ff5b-430d-bbe9-fb954d7624d6_buggy.java b/tmp/96153984-4e4c-4377-9136-57552c359803_fixed.java
index 08093b4..df04373 100644
--- a/tmp/a3be385b-ff5b-430d-bbe9-fb954d7624d6_buggy.java
+++ b/tmp/96153984-4e4c-4377-9136-57552c359803_fixed.java
@@ -1,42 +1,48 @@
 /**
  * Writes a PAX extended header with the given map as contents.
  * @since 1.4
  */
 void writePaxHeaders(String entryName,
                      Map<String, String> headers) throws IOException {
     String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
     // TarEntry's constructor would think this is a directory
     // and not allow any data to be written
     if (name.length() >= TarConstants.NAMELEN) {
         name = name.substring(0, TarConstants.NAMELEN - 1);
     }
     TarArchiveEntry pex = new TarArchiveEntry(name,
                                               TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
+    if (!headers.isEmpty()) {
         StringWriter w = new StringWriter();
         for (Map.Entry<String, String> h : headers.entrySet()) {
             String key = h.getKey();
             String value = h.getValue();
             int len = key.length() + value.length()
                 + 3 /* blank, equals and newline */
                 + 2 /* guess 9 < actual length < 100 */;
             String line = len + " " + key + "=" + value + "\n";
             int actualLength = line.getBytes(CharsetNames.UTF_8).length;
             while (len != actualLength) {
                 // Adjust for cases where length < 10 or > 100
                 // or where UTF-8 encoding isn't a single octet
                 // per character.
                 // Must be in loop as size may go from 99 to 100 in
                 // first pass so we'd need a second.
                 len = actualLength;
                 line = len + " " + key + "=" + value + "\n";
                 actualLength = line.getBytes(CharsetNames.UTF_8).length;
             }
             w.write(line);
         }
         byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
         pex.setSize(data.length);
         putArchiveEntry(pex);
         write(data);
+    } else {
+        // If headers is empty, set size to 0
+        pex.setSize(0);
+        putArchiveEntry(pex);
+    }
     closeArchiveEntry();
 }
\ No newline at end of file
