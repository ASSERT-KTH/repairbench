diff --git a/tmp/9a8d1067-cc98-485d-aa45-5940db2f420f_buggy.java b/tmp/d62ebe6e-ad88-4a83-b637-eb9ff246e2ff_fixed.java
index 00914da..e898ca4 100644
--- a/tmp/9a8d1067-cc98-485d-aa45-5940db2f420f_buggy.java
+++ b/tmp/d62ebe6e-ad88-4a83-b637-eb9ff246e2ff_fixed.java
@@ -1,17 +1,39 @@
-    // does not recurse.
 private void normalise(Element element) {
-        List<Node> toMove = new ArrayList<Node>();
+    // Recursively normalize all child elements first
+    for (Node child : element.childNodes) {
+        if (child instanceof Element) {
+            normalise((Element) child);
+        }
+    }
+
+    List<Node> textNodes = new ArrayList<>();
     for (Node node : element.childNodes) {
         if (node instanceof TextNode) {
             TextNode tn = (TextNode) node;
-                if (!tn.isBlank())
-                    toMove.add(tn);
+            if (!tn.isBlank()) {
+                textNodes.add(tn);
             }
         }
+    }
+
+    if (!textNodes.isEmpty()) {
+        // Remove all non-blank text nodes from their current position
+        for (Node textNode : textNodes) {
+            element.removeChild(textNode);
+        }
+
+        // Insert a space at the beginning of the body
+        Element body = body();
+        body.prependChild(new TextNode(" ", ""));
 
-        for (Node node: toMove) {
-            element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+        // Insert all non-blank text nodes at the beginning of the body
+        for (int i = textNodes.size() - 1; i >= 0; i--) {
+            body.prependChild(textNodes.get(i));
+        }
+
+        // If we're not already in the body, add a space at the end of the current element
+        if (element != body) {
+            element.appendChild(new TextNode(" ", ""));
+        }
     }
 }
\ No newline at end of file
