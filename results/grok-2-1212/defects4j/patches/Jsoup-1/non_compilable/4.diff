diff --git a/tmp/325fe1ee-9b71-4be3-bc42-882d45570554_buggy.java b/tmp/5329deff-0def-4f9a-a557-98714ce11ddf_fixed.java
index 00914da..ccbcb27 100644
--- a/tmp/325fe1ee-9b71-4be3-bc42-882d45570554_buggy.java
+++ b/tmp/5329deff-0def-4f9a-a557-98714ce11ddf_fixed.java
@@ -1,17 +1,32 @@
-    // does not recurse.
 private void normalise(Element element) {
     List<Node> toMove = new ArrayList<Node>();
+    Node firstChild = element.childNodeSize() > 0 ? element.childNode(0) : null;
+
     for (Node node : element.childNodes) {
         if (node instanceof TextNode) {
             TextNode tn = (TextNode) node;
-                if (!tn.isBlank())
+            if (!tn.isBlank()) {
                 toMove.add(tn);
             }
+        } else if (node instanceof Element) {
+            normalise((Element) node); // Recurse into nested elements
+        }
     }
 
+    if (toMove.size() > 0) {
         for (Node node : toMove) {
             element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+        }
+        if (firstChild != null && firstChild instanceof Element) {
+            ((Element) firstChild).prependChild(new TextNode(" ", ""));
+            for (Node node : toMove) {
+                ((Element) firstChild).prependChild(node);
+            }
+        } else {
+            for (Node node : toMove) {
+                element.prependChild(node);
+            }
+            element.prependChild(new TextNode(" ", ""));
+        }
     }
 }
\ No newline at end of file
