diff --git a/tmp/6fc56ec7-2fb3-4f2e-a53b-638ae92f3d00_buggy.java b/tmp/4d7571a9-f0fb-4056-abae-6b7ccbb1702b_fixed.java
index 4c1ed27..8a1fe71 100644
--- a/tmp/6fc56ec7-2fb3-4f2e-a53b-638ae92f3d00_buggy.java
+++ b/tmp/4d7571a9-f0fb-4056-abae-6b7ccbb1702b_fixed.java
@@ -1,32 +1,38 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
                 out.write(c);
                 pos += c.length;
                 continue;
             }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
+            // Contract with translators is that they have to understand codepoints 
+            // and they just took care of a surrogate pair
+            int codepoint = Character.codePointAt(input, pos);
+            int charCount = Character.charCount(codepoint);
             for (int pt = 0; pt < consumed; pt++) {
+                if (pt == 0) {
+                    pos += charCount;
+                } else {
                     pos += Character.charCount(Character.codePointAt(input, pos));
                 }
             }
         }
+    }
\ No newline at end of file
