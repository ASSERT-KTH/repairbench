diff --git a/tmp/c7bce89b-ef8b-4a70-a582-fd88a5e92152_buggy.java b/tmp/92f56b1e-5f02-4c76-b297-682ffede98a2_fixed.java
index 91dc4ff..831c4bf 100644
--- a/tmp/c7bce89b-ef8b-4a70-a582-fd88a5e92152_buggy.java
+++ b/tmp/92f56b1e-5f02-4c76-b297-682ffede98a2_fixed.java
@@ -1,107 +1,121 @@
-    // the original object is needed so can check for Number
 private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
                            final Appendable out, final boolean newRecord) throws IOException {
     boolean quote = false;
     int start = offset;
     int pos = offset;
     final int end = offset + len;
 
     final char delimChar = getDelimiter();
     final char quoteChar = getQuoteCharacter().charValue();
+    final Character escapeChar = getEscapeCharacter();
 
     QuoteMode quoteModePolicy = getQuoteMode();
     if (quoteModePolicy == null) {
         quoteModePolicy = QuoteMode.MINIMAL;
     }
     switch (quoteModePolicy) {
         case ALL:
             quote = true;
             break;
         case NON_NUMERIC:
             quote = !(object instanceof Number);
             break;
         case NONE:
-            // Use the existing escaping code
-            printAndEscape(value, offset, len, out);
+            // For NONE mode, we do not quote, but still need to handle escaping.
+            printAndEscape(value, offset, len, out, escapeChar);
             return;
         case MINIMAL:
             if (len <= 0) {
-                // always quote an empty token that is the first
-                // on the line, as it may be the only thing on the
-                // line. If it were not quoted in that case,
-                // an empty line has no tokens.
+                // Quote empty tokens at the start of a new record.
                 if (newRecord) {
                     quote = true;
                 }
             } else {
                 char c = value.charAt(pos);
 
-                // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
-                if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
+                // Check if the first character requires quoting according to RFC4180.
+                if (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || c > 'z')) {
                     quote = true;
                 } else if (c <= COMMENT) {
-                    // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
                     quote = true;
                 } else {
                     while (pos < end) {
                         c = value.charAt(pos);
-                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {
+                        if (c == CR || c == LF || c == quoteChar || c == delimChar) {
                             quote = true;
                             break;
                         }
                         pos++;
                     }
 
                     if (!quote) {
                         pos = end - 1;
                         c = value.charAt(pos);
-                        // Some other chars at the end caused the parser to fail, so for now
-                        // encapsulate if we end in anything less than ' '
                         if (c <= SP) {
                             quote = true;
                         }
                     }
                 }
             }
 
             if (!quote) {
-                // no encapsulation needed - write out the original value
+                // If no quote needed, directly append the value without escaping.
                 out.append(value, start, end);
                 return;
             }
             break;
         default:
             throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
     }
 
     if (!quote) {
-            // no encapsulation needed - write out the original value
+        // No quote needed, directly append the value without escaping.
         out.append(value, start, end);
         return;
     }
 
-        // we hit something that needed encapsulation
+    // Encapsulate the value if quoting is required.
     out.append(quoteChar);
 
-        // Pick up where we left off: pos should be positioned on the first character that caused
-        // the need for encapsulation.
+    // Handle the encapsulated value, ensuring correct escaping inside quotes.
+    pos = offset; // Reset pos to start from the beginning again
     while (pos < end) {
         final char c = value.charAt(pos);
         if (c == quoteChar) {
-                // write out the chunk up until this point
+            // Double the quote character within the quoted field.
+            out.append(value, start, pos);
+            out.append(quoteChar); // Add the first quote
+            start = pos; // Set start to pos for next slice
+        } else if (c == CR || c == LF || (escapeChar != null && c == escapeChar.charValue())) {
+            // Handle special characters that need escaping.
+            out.append(value, start, pos);
+            if (escapeChar != null) {
+                out.append(escapeChar.charValue());
+            }
+            start = pos; // Set start to pos for next slice
+        }
+        pos++;
+    }
 
-                // add 1 to the length to write out the encapsulator also
-                out.append(value, start, pos + 1);
-                // put the next starting position on the encapsulator so we will
-                // write it out again with the next string (effectively doubling it)
+    // Append the last segment of the value.
+    out.append(value, start, pos);
+    out.append(quoteChar);
+}
+
+// Helper method to handle escaping without quoting
+private void printAndEscape(final CharSequence value, final int offset, final int len, 
+                            final Appendable out, final Character escapeChar) throws IOException {
+    int start = offset;
+    int end = offset + len;
+    for (int pos = offset; pos < end; pos++) {
+        char c = value.charAt(pos);
+        if (c == CR || c == LF || (escapeChar != null && c == escapeChar.charValue())) {
+            out.append(value, start, pos);
+            if (escapeChar != null) {
+                out.append(escapeChar.charValue());
+            }
             start = pos;
         }
-            pos++;
     }
-
-        // write the last segment
-        out.append(value, start, pos);
-        out.append(quoteChar);
+    out.append(value, start, end);
 }
\ No newline at end of file
