diff --git a/tmp/81fbbc99-69f3-4620-aa13-13d81cf816da_buggy.java b/tmp/a8b866a4-2b73-462d-8655-bebb51891055_fixed.java
index e69de29..03a5913 100644
--- a/tmp/81fbbc99-69f3-4620-aa13-13d81cf816da_buggy.java
+++ b/tmp/a8b866a4-2b73-462d-8655-bebb51891055_fixed.java
@@ -0,0 +1,40 @@
+public JavaType constructType(Type type, TypeBindings bindings) {
+    JavaType result = _fromClass(null, type, bindings);
+    if (result != null) {
+        // Check if it's a subtype and if the super type needs to be resolved recursively
+        if (result.getRawClass().getSuperclass() != null) {
+            JavaType superType = constructType(result.getRawClass().getSuperclass(), bindings);
+            if (superType instanceof ResolvedRecursiveType) {
+                ((ResolvedRecursiveType) superType).resolveSelfReference(result);
+            }
+            result = result.withSuperClass(superType);
+        }
+        // Ensure the type is properly cached
+        JavaType old = _typeCache.putIfAbsent(type, result);
+        if (old != null) {
+            result = old;
+        }
+    }
+    return result;
+}
+
+private JavaType _fromClass(ClassStack context, Type type, TypeBindings bindings) {
+    if (type instanceof Class<?>) {
+        Class<?> cls = (Class<?>) type;
+        if (cls == Object.class) {
+            return _constructType(cls, bindings);
+        }
+        if (context == null) {
+            context = new ClassStack(cls);
+        } else {
+            context = context.child(cls);
+        }
+        if (context.hasSeen(cls)) {
+            return new ResolvedRecursiveType(cls, bindings);
+        }
+        JavaType result = _constructType(cls, bindings);
+        context.resolveSelfReference(result);
+        return result;
+    }
+    return _constructType(type, bindings);
+}
\ No newline at end of file
