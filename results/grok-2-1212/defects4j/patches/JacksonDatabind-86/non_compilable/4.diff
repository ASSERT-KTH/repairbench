diff --git a/tmp/4e314147-4242-4218-989d-6d3bc94a305d_buggy.java b/tmp/f731f173-951a-4038-8b81-c08adb4bfd8d_fixed.java
index e69de29..0d5c599 100644
--- a/tmp/4e314147-4242-4218-989d-6d3bc94a305d_buggy.java
+++ b/tmp/f731f173-951a-4038-8b81-c08adb4bfd8d_fixed.java
@@ -0,0 +1,29 @@
+protected JavaType _constructType(Type type, TypeBindings bindings, JavaType parent, TypeFactory.Config config) {
+    JavaType result = super._constructType(type, bindings, parent, config);
+
+    // Handle recursive types
+    if (result instanceof ResolvedRecursiveType) {
+        ResolvedRecursiveType recType = (ResolvedRecursiveType) result;
+        if (recType.hasSelfReference()) {
+            JavaType selfRef = recType.getSelfReference();
+            if (selfRef instanceof ClassType && ((ClassType) selfRef).getRawClass() == type) {
+                // Reconstruct with proper superclass reference
+                recType.fixSelfRecursiveType(selfRef);
+            }
+        }
+    }
+
+    // Handle superclass
+    JavaType superClass = result.getSuperClass();
+    if (superClass != null && superClass instanceof ClassType) {
+        Class<?> raw = ((ClassType) superClass).getRawClass();
+        if (raw != Object.class) {
+            JavaType constructedSuper = _constructType(raw, bindings, result, config);
+            if (constructedSuper != superClass) {
+                result = result.withSuperClass(constructedSuper);
+            }
+        }
+    }
+
+    return result;
+}
\ No newline at end of file
