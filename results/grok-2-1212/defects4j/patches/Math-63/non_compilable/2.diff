diff --git a/tmp/c47e7369-551b-4a5d-87bb-c03635eb5c07_buggy.java b/tmp/1db070ae-2b3d-4289-bf90-a040f271b28f_fixed.java
index 9033e1c..9e8404d 100644
--- a/tmp/c47e7369-551b-4a5d-87bb-c03635eb5c07_buggy.java
+++ b/tmp/1db070ae-2b3d-4289-bf90-a040f271b28f_fixed.java
@@ -1,11 +1,37 @@
 /**
  * Returns true iff they are equal as defined by
  * {@link #equals(double,double,int) equals(x, y, 1)}.
  *
  * @param x first value
  * @param y second value
  * @return {@code true} if the values are equal.
  */
 public static boolean equals(double x, double y) {
-        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
+    return equals(x, y, 1);
+}
+
+/**
+ * Returns true if both numbers are equal to the given precision.
+ *
+ * @param x first value
+ * @param y second value
+ * @param maxUlps maximum number of ULPs (Units in the Last Place) between x and y
+ * @return {@code true} if there are less than {@code maxUlps} floating point values between x and y
+ */
+public static boolean equals(double x, double y, int maxUlps) {
+    if (Double.isNaN(x) && Double.isNaN(y)) {
+        return true;
+    }
+    if (Double.isInfinite(x) && Double.isInfinite(y) && (x > 0) == (y > 0)) {
+        return true;
+    }
+    long xInt = Double.doubleToRawLongBits(x);
+    long yInt = Double.doubleToRawLongBits(y);
+    if (xInt < 0) {
+        xInt = Long.MIN_VALUE - xInt;
+    }
+    if (yInt < 0) {
+        yInt = Long.MIN_VALUE - yInt;
+    }
+    return Math.abs(xInt - yInt) <= maxUlps;
 }
\ No newline at end of file
