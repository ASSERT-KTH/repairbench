diff --git a/tmp/23a9f5fe-272f-40a9-8ae5-fae53daafd01_buggy.java b/tmp/2652de46-d66b-49bf-ad5e-818215407184_fixed.java
index 9033e1c..ad7f1af 100644
--- a/tmp/23a9f5fe-272f-40a9-8ae5-fae53daafd01_buggy.java
+++ b/tmp/2652de46-d66b-49bf-ad5e-818215407184_fixed.java
@@ -1,11 +1,48 @@
 /**
  * Returns true iff they are equal as defined by
  * {@link #equals(double,double,int) equals(x, y, 1)}.
  *
  * @param x first value
  * @param y second value
  * @return {@code true} if the values are equal.
  */
 public static boolean equals(double x, double y) {
-        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
+    return equals(x, y, 1);
+}
+
+/**
+ * Returns true iff they are equal taking into account a specified tolerance.
+ *
+ * @param x first value
+ * @param y second value
+ * @param maxUlps maximum ulps (units in the last place)
+ * @return {@code true} if the values are equal according to the specified tolerance
+ */
+private static boolean equals(double x, double y, int maxUlps) {
+    // Handle NaN cases
+    if (Double.isNaN(x) && Double.isNaN(y)) {
+        return true;
+    }
+    
+    // Handle infinities
+    if (Double.isInfinite(x) || Double.isInfinite(y)) {
+        return x == y;
+    }
+    
+    // Calculate the difference in ulps
+    long xBits = Double.doubleToLongBits(x);
+    long yBits = Double.doubleToLongBits(y);
+    
+    // Handle zero cases specially
+    if (x == 0 || y == 0) {
+        if (x == y) { // Both zeros have the same sign
+            return true;
+        } else if (Math.abs(x - y) < Double.MIN_NORMAL) {
+            // Both are subnormal or one is subnormal and the other is zero
+            return Math.abs(xBits - yBits) <= maxUlps;
+        }
+    }
+    
+    // Compare the absolute difference in ulps
+    return Math.abs(xBits - yBits) <= maxUlps;
 }
\ No newline at end of file
