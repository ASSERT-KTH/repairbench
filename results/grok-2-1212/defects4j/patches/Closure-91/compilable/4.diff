diff --git a/tmp/473f8621-7bbe-4bc5-99c5-684bd80d2a04_buggy.java b/tmp/ca7e314f-9c14-48f7-a624-8d0582e8a029_fixed.java
index 30d7266..0941840 100644
--- a/tmp/473f8621-7bbe-4bc5-99c5-684bd80d2a04_buggy.java
+++ b/tmp/ca7e314f-9c14-48f7-a624-8d0582e8a029_fixed.java
@@ -1,69 +1,85 @@
 /**
  * Since this pass reports errors only when a global {@code this} keyword
  * is encountered, there is no reason to traverse non global contexts.
  */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
     if (n.getType() == Token.FUNCTION) {
         // Don't traverse functions that are constructors or have the @this
         // or @override annotation.
         JSDocInfo jsDoc = getFunctionJsDocInfo(n);
         if (jsDoc != null &&
             (jsDoc.isConstructor() ||
              jsDoc.isInterface() ||
              jsDoc.hasThisType() ||
              jsDoc.isOverride())) {
             return false;
         }
 
         // Don't traverse functions unless they would normally
         // be able to have a @this annotation associated with them. e.g.,
         // var a = function() { }; // or
         // function a() {} // or
         // a.x = function() {}; // or
         // var a = {x: function() {}};
         int pType = parent.getType();
         if (!(pType == Token.BLOCK ||
               pType == Token.SCRIPT ||
               pType == Token.NAME ||
               pType == Token.ASSIGN ||
 
               // object literal keys
               pType == Token.STRING ||
               pType == Token.NUMBER)) {
             return false;
         }
 
         // Don't traverse functions that are getting lent to a prototype.
+        if (parent != null && parent.getParent() != null &&
+            parent.getParent().getType() == Token.CALL &&
+            parent.getParent().getFirstChild() != null &&
+            parent.getParent().getFirstChild().getType() == Token.NAME &&
+            parent.getParent().getFirstChild().getString().equals("declare")) {
+            Node callNode = parent.getParent();
+            if (callNode.getChildCount() > 1) {
+                Node secondArg = callNode.getChildAtIndex(1);
+                if (secondArg.getType() == Token.OBJECTLIT) {
+                    JSDocInfo secondArgJsDoc = secondArg.getJSDocInfo();
+                    if (secondArgJsDoc != null && secondArgJsDoc.getLendsName() != null) {
+                        return false;
+                    }
+                }
+            }
+        }
     }
 
     if (parent != null && parent.getType() == Token.ASSIGN) {
         Node lhs = parent.getFirstChild();
         Node rhs = lhs.getNext();
 
         if (n == lhs) {
             // Always traverse the left side of the assignment. To handle
             // nested assignments properly (e.g., (a = this).property = c;),
             // assignLhsChild should not be overridden.
             if (assignLhsChild == null) {
                 assignLhsChild = lhs;
             }
         } else {
             // Only traverse the right side if it's not an assignment to a prototype
             // property or subproperty.
             if (NodeUtil.isGet(lhs)) {
                 if (lhs.getType() == Token.GETPROP &&
                     lhs.getLastChild().getString().equals("prototype")) {
                     return false;
                 }
                 Node llhs = lhs.getFirstChild();
                 if (llhs.getType() == Token.GETPROP &&
                     llhs.getLastChild().getString().equals("prototype")) {
                     return false;
                 }
             }
         }
     }
 
     return true;
 }
\ No newline at end of file
