diff --git a/tmp/8c8daac7-d25e-4d15-b81f-18b511e58e5b_buggy.java b/tmp/896a5618-494f-4373-bf56-6b221b66d98a_fixed.java
index 99d6a44..86a7d82 100644
--- a/tmp/8c8daac7-d25e-4d15-b81f-18b511e58e5b_buggy.java
+++ b/tmp/896a5618-494f-4373-bf56-6b221b66d98a_fixed.java
@@ -1,58 +1,88 @@
 /**
  * Computes the parsed datetime by setting the saved fields.
  * This method is idempotent, but it is not thread-safe.
  *
  * @param resetFields false by default, but when true, unsaved field values are cleared
  * @param text optional text being parsed, to be included in any error message
  * @return milliseconds since 1970-01-01T00:00:00Z
  * @throws IllegalArgumentException if any field is out of range
  * @since 1.3
  */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
+
+    // Handle weekyear if present
+    int weekyearIndex = -1;
+    for (int i = 0; i < count; i++) {
+        if (savedFields[i].iField.getType() == DateTimeFieldType.weekyear()) {
+            weekyearIndex = i;
+            break;
+        }
+    }
+
+    if (weekyearIndex >= 0) {
+        int weekyear = savedFields[weekyearIndex].iValue;
+        int weekOfWeekyear = -1;
+        int dayOfWeek = -1;
+
+        for (int i = 0; i < count; i++) {
+            if (savedFields[i].iField.getType() == DateTimeFieldType.weekOfWeekyear()) {
+                weekOfWeekyear = savedFields[i].iValue;
+            } else if (savedFields[i].iField.getType() == DateTimeFieldType.dayOfWeek()) {
+                dayOfWeek = savedFields[i].iValue;
+            }
+        }
+
+        if (weekOfWeekyear >= 0 && dayOfWeek >= 0) {
+            LocalDate date = new LocalDate(weekyear, 1, 4, iChrono); // First week of weekyear starts on the first Thursday
+            date = date.withWeekOfWeekyear(weekOfWeekyear).withDayOfWeek(dayOfWeek);
+            return date.toDateTimeAtStartOfDay().getMillis();
+        }
+    }
+
     if (count > 0) {
         // alter base year for parsing if first field is month or day
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days = DurationFieldType.days().getField(iChrono);
         DurationField first = savedFields[0].iField.getDurationField();
         if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
             saveField(DateTimeFieldType.year(), iDefaultYear);
             return computeMillis(resetFields, text);
         }
     }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
     
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
     
     return millis;
 }
\ No newline at end of file
