diff --git a/tmp/de15f893-4ae2-4092-864b-4cbaa4dd6500_buggy.java b/tmp/9c8d28d8-d09e-4dd4-aed4-428379ae4303_fixed.java
index 99d6a44..49e956e 100644
--- a/tmp/de15f893-4ae2-4092-864b-4cbaa4dd6500_buggy.java
+++ b/tmp/9c8d28d8-d09e-4dd4-aed4-428379ae4303_fixed.java
@@ -1,58 +1,127 @@
-    /**
-     * Computes the parsed datetime by setting the saved fields.
-     * This method is idempotent, but it is not thread-safe.
-     *
-     * @param resetFields false by default, but when true, unsaved field values are cleared
-     * @param text optional text being parsed, to be included in any error message
-     * @return milliseconds since 1970-01-01T00:00:00Z
-     * @throws IllegalArgumentException if any field is out of range
-     * @since 1.3
-     */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
     if (count > 0) {
         // alter base year for parsing if first field is month or day
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days = DurationFieldType.days().getField(iChrono);
         DurationField first = savedFields[0].iField.getDurationField();
         if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
             saveField(DateTimeFieldType.year(), iDefaultYear);
             return computeMillis(resetFields, text);
         }
+
+        // Handle weekyear parsing
+        boolean hasWeekyear = false;
+        int weekyearIndex = -1;
+        int weekOfWeekyearIndex = -1;
+        for (int i = 0; i < count; i++) {
+            if (savedFields[i].iField.getType() == DateTimeFieldType.weekyear()) {
+                hasWeekyear = true;
+                weekyearIndex = i;
+            } else if (savedFields[i].iField.getType() == DateTimeFieldType.weekOfWeekyear()) {
+                weekOfWeekyearIndex = i;
+            }
+        }
+
+        if (hasWeekyear && weekOfWeekyearIndex != -1) {
+            int weekyear = savedFields[weekyearIndex].iValue;
+            int weekOfWeekyear = savedFields[weekOfWeekyearIndex].iValue;
+            
+            YearWeek week = YearWeek.of(weekyear, weekOfWeekyear, iChrono);
+            
+            // Set the year and week of weekyear
+            saveField(DateTimeFieldType.year(), week.getYear());
+            saveField(DateTimeFieldType.weekOfWeekyear(), week.getWeekOfWeekyear());
+            
+            // Remove the original weekyear and week of weekyear fields
+            removeField(weekyearIndex);
+            removeField(weekOfWeekyearIndex);
+            
+            // Update the count and savedFields array
+            count -= 2;
+            SavedField[] newSavedFields = new SavedField[count];
+            System.arraycopy(savedFields, 0, newSavedFields, 0, weekyearIndex);
+            System.arraycopy(savedFields, weekyearIndex + 1, newSavedFields, weekyearIndex, count - weekyearIndex);
+            savedFields = newSavedFields;
+            
+            return computeMillis(resetFields, text);
+        }
     }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
     
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
     
     return millis;
 }
+
+// Additional helper methods
+
+private void removeField(int index) {
+    iSavedFields[index] = null;
+    for (int i = index; i < iSavedFieldsCount - 1; i++) {
+        iSavedFields[i] = iSavedFields[i + 1];
+    }
+    iSavedFieldsCount--;
+}
+
+private static class YearWeek {
+    private final int year;
+    private final int weekOfWeekyear;
+
+    public static YearWeek of(int weekyear, int weekOfWeekyear, Chronology chrono) {
+        // Adjust the weekyear if the first week of the given weekyear starts in the previous year
+        LocalDate date = new LocalDate(weekyear, 1, 4, chrono);
+        int firstWeek = date.getWeekOfWeekyear();
+        if (weekOfWeekyear < firstWeek) {
+            weekyear--;
+            weekOfWeekyear += date.weekOfWeekyear().getMaximumValue();
+        } else if (weekOfWeekyear > date.weekOfWeekyear().getMaximumValue()) {
+            weekyear++;
+            weekOfWeekyear -= date.weekOfWeekyear().getMaximumValue();
+        }
+        return new YearWeek(weekyear, weekOfWeekyear);
+    }
+
+    private YearWeek(int year, int weekOfWeekyear) {
+        this.year = year;
+        this.weekOfWeekyear = weekOfWeekyear;
+    }
+
+    public int getYear() {
+        return year;
+    }
+
+    public int getWeekOfWeekyear() {
+        return weekOfWeekyear;
+    }
+}
\ No newline at end of file
