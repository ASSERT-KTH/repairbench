diff --git a/tmp/be3e62cd-9fa3-40cb-8573-db145583f86e_buggy.java b/tmp/f064d034-ee79-48a3-b192-a056aba0697b_fixed.java
index 99d6a44..dedb7ed 100644
--- a/tmp/be3e62cd-9fa3-40cb-8573-db145583f86e_buggy.java
+++ b/tmp/f064d034-ee79-48a3-b192-a056aba0697b_fixed.java
@@ -1,58 +1,139 @@
 /**
  * Computes the parsed datetime by setting the saved fields.
  * This method is idempotent, but it is not thread-safe.
  *
  * @param resetFields false by default, but when true, unsaved field values are cleared
  * @param text optional text being parsed, to be included in any error message
  * @return milliseconds since 1970-01-01T00:00:00Z
  * @throws IllegalArgumentException if any field is out of range
  * @since 1.3
  */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
+
+    // Handle week-based years
+    int weekyearIndex = -1;
+    int weekOfWeekyearIndex = -1;
+    int dayOfWeekIndex = -1;
+
+    for (int i = 0; i < count; i++) {
+        DateTimeFieldType type = savedFields[i].iField.getType();
+        if (type == DateTimeFieldType.weekyear()) {
+            weekyearIndex = i;
+        } else if (type == DateTimeFieldType.weekOfWeekyear()) {
+            weekOfWeekyearIndex = i;
+        } else if (type == DateTimeFieldType.dayOfWeek()) {
+            dayOfWeekIndex = i;
+        }
+    }
+
+    if (weekyearIndex >= 0 && weekOfWeekyearIndex >= 0) {
+        int weekyear = savedFields[weekyearIndex].iValue;
+        int weekOfWeekyear = savedFields[weekOfWeekyearIndex].iValue;
+        int dayOfWeek = (dayOfWeekIndex >= 0) ? savedFields[dayOfWeekIndex].iValue : 1;
+
+        // Find the first day of the weekyear
+        LocalDate firstDayOfYear = new LocalDate(weekyear, 1, 4, iChrono);
+        int firstDayOfWeek = firstDayOfYear.getDayOfWeek();
+        int offset = (firstDayOfWeek <= 4) ? 1 - firstDayOfWeek : 8 - firstDayOfWeek;
+
+        LocalDate firstDayOfWeekyear = firstDayOfYear.plusDays(offset);
+
+        // Calculate the target date
+        LocalDate targetDate = firstDayOfWeekyear.plusWeeks(weekOfWeekyear - 1).plusDays(dayOfWeek - 1);
+
+        // If the target date is in the previous year, adjust the weekyear
+        if (targetDate.getYear() < weekyear) {
+            weekyear--;
+            firstDayOfYear = new LocalDate(weekyear, 1, 4, iChrono);
+            firstDayOfWeek = firstDayOfYear.getDayOfWeek();
+            offset = (firstDayOfWeek <= 4) ? 1 - firstDayOfWeek : 8 - firstDayOfWeek;
+            firstDayOfWeekyear = firstDayOfYear.plusDays(offset);
+            targetDate = firstDayOfWeekyear.plusWeeks(weekOfWeekyear - 1).plusDays(dayOfWeek - 1);
+        } else if (targetDate.getYear() > weekyear) {
+            weekyear++;
+            firstDayOfYear = new LocalDate(weekyear, 1, 4, iChrono);
+            firstDayOfWeek = firstDayOfYear.getDayOfWeek();
+            offset = (firstDayOfWeek <= 4) ? 1 - firstDayOfWeek : 8 - firstDayOfWeek;
+            firstDayOfWeekyear = firstDayOfYear.plusDays(offset);
+            targetDate = firstDayOfWeekyear.plusWeeks(weekOfWeekyear - 1).plusDays(dayOfWeek - 1);
+        }
+
+        // Set the year, month, and day of month fields
+        saveField(DateTimeFieldType.year(), targetDate.getYear());
+        saveField(DateTimeFieldType.monthOfYear(), targetDate.getMonthOfYear());
+        saveField(DateTimeFieldType.dayOfMonth(), targetDate.getDayOfMonth());
+
+        // Remove week-based fields
+        if (weekyearIndex >= 0) {
+            savedFields[weekyearIndex] = null;
+        }
+        if (weekOfWeekyearIndex >= 0) {
+            savedFields[weekOfWeekyearIndex] = null;
+        }
+        if (dayOfWeekIndex >= 0) {
+            savedFields[dayOfWeekIndex] = null;
+        }
+
+        // Compact the array
+        int newCount = 0;
+        for (int i = 0; i < count; i++) {
+            if (savedFields[i] != null) {
+                savedFields[newCount++] = savedFields[i];
+            }
+        }
+        count = newCount;
+    }
+
+    // If week-based fields were present, recompute
+    if (weekyearIndex >= 0 && weekOfWeekyearIndex >= 0) {
+        return computeMillis(resetFields, text);
+    }
+
+    // Proceed with the original logic
     if (count > 0) {
         // alter base year for parsing if first field is month or day
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days = DurationFieldType.days().getField(iChrono);
         DurationField first = savedFields[0].iField.getDurationField();
         if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
             saveField(DateTimeFieldType.year(), iDefaultYear);
             return computeMillis(resetFields, text);
         }
     }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
     
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
     
     return millis;
 }
\ No newline at end of file
