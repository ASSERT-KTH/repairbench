diff --git a/tmp/f32d09a1-b235-4867-a7ec-c833a3ed8f8f_buggy.java b/tmp/15811ce5-0fc7-4c4e-93e2-749c1369ae50_fixed.java
index 99d6a44..271b8af 100644
--- a/tmp/f32d09a1-b235-4867-a7ec-c833a3ed8f8f_buggy.java
+++ b/tmp/15811ce5-0fc7-4c4e-93e2-749c1369ae50_fixed.java
@@ -1,58 +1,101 @@
-    /**
-     * Computes the parsed datetime by setting the saved fields.
-     * This method is idempotent, but it is not thread-safe.
-     *
-     * @param resetFields false by default, but when true, unsaved field values are cleared
-     * @param text optional text being parsed, to be included in any error message
-     * @return milliseconds since 1970-01-01T00:00:00Z
-     * @throws IllegalArgumentException if any field is out of range
-     * @since 1.3
-     */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
+
     if (count > 0) {
+        // Check if we have a weekyear field
+        boolean hasWeekYear = false;
+        boolean hasWeekOfWeekyear = false;
+        boolean hasMonthOfYear = false;
+        
+        for (int i = 0; i < count; i++) {
+            DateTimeFieldType fieldType = savedFields[i].iField.getType();
+            if (fieldType == DateTimeFieldType.weekyear()) {
+                hasWeekYear = true;
+            } else if (fieldType == DateTimeFieldType.weekOfWeekyear()) {
+                hasWeekOfWeekyear = true;
+            } else if (fieldType == DateTimeFieldType.monthOfYear()) {
+                hasMonthOfYear = true;
+            }
+        }
+
+        if (hasWeekYear && hasWeekOfWeekyear && hasMonthOfYear) {
+            // If we have weekyear, week of weekyear, and month of year, we need to adjust the year
+            for (int i = 0; i < count; i++) {
+                if (savedFields[i].iField.getType() == DateTimeFieldType.weekyear()) {
+                    int weekYear = savedFields[i].iValue;
+                    int weekOfWeekyear = 1;  // Default to week 1 if not specified
+                    int monthOfYear = 1;     // Default to January if not specified
+
+                    // Find the actual week of weekyear and month of year if specified
+                    for (int j = 0; j < count; j++) {
+                        if (savedFields[j].iField.getType() == DateTimeFieldType.weekOfWeekyear()) {
+                            weekOfWeekyear = savedFields[j].iValue;
+                        } else if (savedFields[j].iField.getType() == DateTimeFieldType.monthOfYear()) {
+                            monthOfYear = savedFields[j].iValue;
+                        }
+                    }
+
+                    // Calculate the correct year based on weekyear, week of weekyear, and month of year
+                    LocalDate baseDate = new LocalDate(weekYear, 1, 4, iChrono);  // First week of weekyear
+                    int year = baseDate.year().get();
+                    int weeksInYear = iChrono.weekOfWeekyear().getMaximumValue(new LocalDate(year, 12, 31, iChrono));
+
+                    if (weekOfWeekyear > weeksInYear) {
+                        year++;
+                        weekOfWeekyear = 1;
+                    } else if (weekOfWeekyear == 1 && monthOfYear > 1) {
+                        year--;
+                    }
+
+                    // Replace the weekyear field with the calculated year
+                    savedFields[i] = new SavedField(DateTimeFieldType.year(), year, savedFields[i].iText, savedFields[i].iField);
+                    break;
+                }
+            }
+        } else {
             // alter base year for parsing if first field is month or day
             DurationField months = DurationFieldType.months().getField(iChrono);
             DurationField days = DurationFieldType.days().getField(iChrono);
             DurationField first = savedFields[0].iField.getDurationField();
             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
                 saveField(DateTimeFieldType.year(), iDefaultYear);
                 return computeMillis(resetFields, text);
             }
         }
+    }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
     
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
     
     return millis;
 }
\ No newline at end of file
