diff --git a/tmp/d5e8467f-2cfe-4c64-b022-7e399585c7a8_buggy.java b/tmp/582005fe-1fd8-43ed-bf0a-cb9b26bc8e5c_fixed.java
index 99d6a44..8a517fa 100644
--- a/tmp/d5e8467f-2cfe-4c64-b022-7e399585c7a8_buggy.java
+++ b/tmp/582005fe-1fd8-43ed-bf0a-cb9b26bc8e5c_fixed.java
@@ -1,58 +1,73 @@
 /**
  * Computes the parsed datetime by setting the saved fields.
  * This method is idempotent, but it is not thread-safe.
  *
  * @param resetFields false by default, but when true, unsaved field values are cleared
  * @param text optional text being parsed, to be included in any error message
  * @return milliseconds since 1970-01-01T00:00:00Z
  * @throws IllegalArgumentException if any field is out of range
  * @since 1.3
  */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
-        if (count > 0) {
-            // alter base year for parsing if first field is month or day
-            DurationField months = DurationFieldType.months().getField(iChrono);
-            DurationField days = DurationFieldType.days().getField(iChrono);
-            DurationField first = savedFields[0].iField.getDurationField();
-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
-                saveField(DateTimeFieldType.year(), iDefaultYear);
-                return computeMillis(resetFields, text);
-            }
-        }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
-                millis = savedFields[i].set(millis, resetFields);
+            SavedField field = savedFields[i];
+            if (field.iField.getType() == DateTimeFieldType.weekyear()) {
+                // Handle week-based year separately
+                int weekyear = field.iValue;
+                int weekOfWeekyear = -1;
+                int dayOfWeek = -1;
+                
+                // Find week of weekyear and day of week
+                for (int j = i + 1; j < count; j++) {
+                    if (savedFields[j].iField.getType() == DateTimeFieldType.weekOfWeekyear()) {
+                        weekOfWeekyear = savedFields[j].iValue;
+                    } else if (savedFields[j].iField.getType() == DateTimeFieldType.dayOfWeek()) {
+                        dayOfWeek = savedFields[j].iValue;
+                    }
+                }
+                
+                if (weekOfWeekyear > 0 && dayOfWeek > 0) {
+                    Chronology chrono = iChrono.withUTC();
+                    millis = chrono.weekyear().set(millis, weekyear);
+                    millis = chrono.weekOfWeekyear().set(millis, weekOfWeekyear);
+                    millis = chrono.dayOfWeek().set(millis, dayOfWeek);
+                    i = count; // Skip remaining fields as weekyear, week, and day are set
+                    break;
+                }
+            }
+            millis = field.set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
     
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
     
     return millis;
 }
\ No newline at end of file
