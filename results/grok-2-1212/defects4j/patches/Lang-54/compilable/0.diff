diff --git a/tmp/f5af0589-2287-4b6c-8e22-8eff68e16fea_buggy.java b/tmp/e47f4c97-d9e4-4034-9865-2dfe33df1c08_fixed.java
index 90fe130..cb20a59 100644
--- a/tmp/f5af0589-2287-4b6c-8e22-8eff68e16fea_buggy.java
+++ b/tmp/e47f4c97-d9e4-4034-9865-2dfe33df1c08_fixed.java
@@ -1,61 +1,100 @@
 /**
  * <p>Converts a String to a Locale.</p>
  *
  * <p>This method takes the string format of a locale and creates the
  * locale object from it.</p>
  *
  * <pre>
  *   LocaleUtils.toLocale("en")         = new Locale("en", "")
  *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+ *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")
+ *   LocaleUtils.toLocale("fr__POSIX")  = new Locale("fr", "", "POSIX")
  * </pre>
  *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
  * <p>This method validates the input strictly.
  * The language code must be lowercase.
  * The country code must be uppercase.
  * The separator must be an underscore.
  * The length must be correct.
  * </p>
  *
  * @param str  the locale String to convert, null returns null
  * @return a Locale, null if null input
  * @throws IllegalArgumentException if the string is an invalid format
  */
 public static Locale toLocale(String str) {
     if (str == null) {
         return null;
     }
     int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+    if (len < 2) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     char ch0 = str.charAt(0);
     char ch1 = str.charAt(1);
     if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     if (len == 2) {
         return new Locale(str, "");
+    }
+    
+    String language = str.substring(0, 2);
+    String country = "";
+    String variant = "";
+    
+    int underscoreCount = 0;
+    int firstUnderscore = -1;
+    int secondUnderscore = -1;
+    
+    for (int i = 2; i < len; i++) {
+        if (str.charAt(i) == '_') {
+            underscoreCount++;
+            if (underscoreCount == 1) {
+                firstUnderscore = i;
+            } else if (underscoreCount == 2) {
+                secondUnderscore = i;
+                break;
+            }
+        }
+    }
+    
+    if (underscoreCount > 0) {
+        if (firstUnderscore + 1 < len) {
+            if (underscoreCount == 1) {
+                String potentialCountry = str.substring(firstUnderscore + 1);
+                if (potentialCountry.length() == 2) {
+                    char ch3 = potentialCountry.charAt(0);
+                    char ch4 = potentialCountry.charAt(1);
+                    if (ch3 >= 'A' && ch3 <= 'Z' && ch4 >= 'A' && ch4 <= 'Z') {
+                        country = potentialCountry;
                     } else {
-            if (str.charAt(2) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+                        variant = potentialCountry;
+                    }
+                } else {
+                    variant = potentialCountry;
                 }
-            char ch3 = str.charAt(3);
-            char ch4 = str.charAt(4);
-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
+            } else if (underscoreCount == 2) {
+                String potentialCountry = str.substring(firstUnderscore + 1, secondUnderscore);
+                if (potentialCountry.length() == 2) {
+                    char ch3 = potentialCountry.charAt(0);
+                    char ch4 = potentialCountry.charAt(1);
+                    if (ch3 >= 'A' && ch3 <= 'Z' && ch4 >= 'A' && ch4 <= 'Z') {
+                        country = potentialCountry;
+                        variant = str.substring(secondUnderscore + 1);
+                    } else {
                         throw new IllegalArgumentException("Invalid locale format: " + str);
                     }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
                 } else {
-                if (str.charAt(5) != '_') {
                     throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
             }
+        } else {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+    } else {
+        throw new IllegalArgumentException("Invalid locale format: " + str);
     }
+
+    return new Locale(language, country, variant);
 }
\ No newline at end of file
