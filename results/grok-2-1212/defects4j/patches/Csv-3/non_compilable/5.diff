diff --git a/tmp/b6b5555e-03e4-4d2f-9645-fcd017ffa8ee_buggy.java b/tmp/816cb91d-01e8-4341-ba16-2de91ee817c3_fixed.java
index 1ad070d..e1868ad 100644
--- a/tmp/b6b5555e-03e4-4d2f-9645-fcd017ffa8ee_buggy.java
+++ b/tmp/816cb91d-01e8-4341-ba16-2de91ee817c3_fixed.java
@@ -1,38 +1,50 @@
 /**
  * Handle an escape sequence.
  * The current character must be the escape character.
  * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
  * on the input stream.
  * 
  * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
  * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
+ * the escape character is not allowed at end of stream
  */
 int readEscape() throws IOException {
     // the escape char has just been read (normally a backslash)
     final int c = in.read();
     switch (c) {
     case 'r':
         return CR;
     case 'n':
         return LF;
     case 't':
         return TAB;
     case 'b':
         return BACKSPACE;
     case 'f':
         return FF;
+    case 'N':  // Handle MySQL null value escape sequence
+        final int nextChar = in.read();
+        if (nextChar == ' ') {
+            in.unread(nextChar);  // Put back the space if it follows \N
+            return 'N';
+        } else {
+            in.unread(nextChar);  // Put back the next character
+            return c;
+        }
     case CR:
     case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
+    case FF:
+    case TAB:
+    case BACKSPACE:
         return c;
     case END_OF_STREAM:
         throw new IOException("EOF whilst processing escape sequence");
     default:
-            // Now check for meta-characters
+        // For any other character, return the escape character followed by the next character
+        final int nextChar = in.read();
+        if (nextChar != END_OF_STREAM) {
+            in.unread(nextChar);  // Put back the next character
+        }
         return c;
-            // indicate unexpected char - available from in.getLastChar()
     }
 }
\ No newline at end of file
