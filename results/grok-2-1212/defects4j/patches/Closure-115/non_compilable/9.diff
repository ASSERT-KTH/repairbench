diff --git a/tmp/e2426f30-cb7e-403e-a6a9-1b1a491db9aa_buggy.java b/tmp/3dd3cf7c-7d9b-496d-9ccb-698233356b8f_fixed.java
index 3075782..7fcbf76 100644
--- a/tmp/e2426f30-cb7e-403e-a6a9-1b1a491db9aa_buggy.java
+++ b/tmp/3dd3cf7c-7d9b-496d-9ccb-698233356b8f_fixed.java
@@ -1,82 +1,64 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
-  private CanInlineResult canInlineReferenceDirectly(
-      Node callNode, Node fnNode) {
+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
         return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
-
     boolean hasSideEffects = false;
+
     if (block.hasChildren()) {
-      Preconditions.checkState(block.hasOneChild());
-      Node stmt = block.getFirstChild();
+        for (Node stmt = block.getFirstChild(); stmt != null; stmt = stmt.getNext()) {
             if (stmt.isReturn()) {
                 hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
+            } else if (NodeUtil.mayHaveSideEffects(stmt, compiler)) {
+                return CanInlineResult.NO;
             }
         }
-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
+    }
+
     Node cArg = callNode.getFirstChild().getNext();
 
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
     if (!callNode.getFirstChild().isName()) {
         if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
             if (cArg == null || !cArg.isThis()) {
                 return CanInlineResult.NO;
             }
             cArg = cArg.getNext();
         } else {
-        // ".apply" call should be filtered before this.
             Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
         }
     }
 
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+    Map<String, Integer> paramReferenceCount = new HashMap<>();
+
     while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
         if (fnParam != null) {
+            String paramName = fnParam.getString();
+            paramReferenceCount.put(paramName, NodeUtil.getNameReferenceCount(block, paramName));
+
             if (cArg != null) {
                 if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
                     return CanInlineResult.NO;
                 }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+                if (NodeUtil.mayEffectMutableState(cArg, compiler) && paramReferenceCount.get(paramName) > 1) {
+                    return CanInlineResult.NO;
+                }
+                if (NodeUtil.mayMutateArguments(cArg, compiler)) {
                     return CanInlineResult.NO;
                 }
             }
 
-        // Move to the next name.
             fnParam = fnParam.getNext();
         }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
         if (cArg != null) {
             if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
                 return CanInlineResult.NO;
             }
             cArg = cArg.getNext();
         }
     }
 
     return CanInlineResult.YES;
 }
\ No newline at end of file
