diff --git a/tmp/be407e13-335e-49a1-bebe-9e30fb24b67b_buggy.java b/tmp/a415d840-c10c-4fa5-959a-24c3019cc37c_fixed.java
index 3075782..3ca043b 100644
--- a/tmp/be407e13-335e-49a1-bebe-9e30fb24b67b_buggy.java
+++ b/tmp/a415d840-c10c-4fa5-959a-24c3019cc37c_fixed.java
@@ -1,82 +1,85 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
   Node block = fnNode.getLastChild();
 
-    boolean hasSideEffects = false;
+  // Check if the function body has side effects
+  boolean bodyHasSideEffects = false;
   if (block.hasChildren()) {
-      Preconditions.checkState(block.hasOneChild());
-      Node stmt = block.getFirstChild();
-      if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
+    for (Node stmt = block.getFirstChild(); stmt != null; stmt = stmt.getNext()) {
+      if (NodeUtil.mayHaveSideEffects(stmt, compiler)) {
+        bodyHasSideEffects = true;
+        break;
       }
     }
+  }
+
   // CALL NODE: [ NAME, ARG1, ARG2, ... ]
   Node cArg = callNode.getFirstChild().getNext();
 
   // Functions called via 'call' and 'apply' have a this-object as
   // the first parameter, but this is not part of the called function's
   // parameter list.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
       // TODO(johnlenz): Support replace this with a value.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
       // ".apply" call should be filtered before this.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
   // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+  Set<String> usedParams = new HashSet<>();
+
   while (cArg != null || fnParam != null) {
     // For each named parameter check if a mutable argument use more than one.
     if (fnParam != null) {
+      String paramName = fnParam.getString();
+      usedParams.add(paramName);
+
       if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
+        // Check for arguments that are evaluated more than once or have side effects
+        if (NodeUtil.mayEffectMutableState(cArg, compiler) ||
+            NodeUtil.canBeSideEffected(cArg)) {
+          if (bodyHasSideEffects || 
+              NodeUtil.getNameReferenceCount(block, paramName) > 1) {
             return CanInlineResult.NO;
           }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
-            return CanInlineResult.NO;
         }
       }
 
-        // Move to the next name.
       fnParam = fnParam.getNext();
     }
 
     // For every call argument check for side-effects, even if there
     // isn't a named parameter to match.
     if (cArg != null) {
       if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     }
   }
 
+  // Check for any parameter modifications or side effects within the function body
+  if (bodyHasSideEffects) {
+    for (Node stmt = block.getFirstChild(); stmt != null; stmt = stmt.getNext()) {
+      for (String param : usedParams) {
+        if (NodeUtil.referencesThisBefore(stmt, param, compiler)) {
+          return CanInlineResult.NO;
+        }
+      }
+    }
+  }
+
   return CanInlineResult.YES;
 }
\ No newline at end of file
