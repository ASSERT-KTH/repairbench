diff --git a/tmp/1ce4edc3-47c4-4afc-8bd0-ed1a65266315_buggy.java b/tmp/231c36f4-cc60-495b-a124-68dcdf56d307_fixed.java
index 2573d30..e61eac2 100644
--- a/tmp/1ce4edc3-47c4-4afc-8bd0-ed1a65266315_buggy.java
+++ b/tmp/231c36f4-cc60-495b-a124-68dcdf56d307_fixed.java
@@ -1,20 +1,33 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // Traverse up the property chain
+    Node current = node;
+    while (current.isGetProp()) {
+      Node propName = current.getLastChild();
+      current = current.getFirstChild();
+      if (current.isName() && isNameAssignedTo(current.getString(), replacement)) {
+        return false;
+      }
+      // Check if the property itself has been reassigned
+      if (isNameAssignedTo(propName.getString(), replacement)) {
+        return false;
+      }
+    }
+
+    // If we reach here and current is a name, check it as well
+    if (current.isName() && isNameAssignedTo(current.getString(), replacement)) {
       return false;
     }
 
     return true;
   }
