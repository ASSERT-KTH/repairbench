diff --git a/tmp/f7682c37-1749-4b33-ba78-af8010452a97_buggy.java b/tmp/0a74bf81-e7d2-4a2a-8fa0-93a058afc876_fixed.java
index 72a422c..679a6ab 100644
--- a/tmp/f7682c37-1749-4b33-ba78-af8010452a97_buggy.java
+++ b/tmp/0a74bf81-e7d2-4a2a-8fa0-93a058afc876_fixed.java
@@ -1,51 +1,49 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
-            char firstChar = input.charAt(start);
+        char firstChar = start < seqEnd ? input.charAt(start) : '\0';
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
-
-                // Check there's more than just an x after the &#
         }
 
         int end = start;
         // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        while (end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
 
+        // If we've reached the end of the input without finding a ';', use the end of the input
+        if (end == seqEnd) {
+            end--;
+        }
+
         int entityValue;
         try {
             if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                entityValue = Integer.parseInt(input.subSequence(start, end + 1).toString(), 16);
             } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                entityValue = Integer.parseInt(input.subSequence(start, end + 1).toString(), 10);
             }
         } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            System.err.println("FAIL: " + input.subSequence(start, end + 1) + "[" + start + "][" + (end + 1) + "]");
             return 0;
         }
 
         if (entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        return 2 + (end - start + 1) + (isHex ? 1 : 0);
     }
     return 0;
 }
\ No newline at end of file
