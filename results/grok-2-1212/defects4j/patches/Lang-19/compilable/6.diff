diff --git a/tmp/b1b4d44d-441f-446c-8902-e9752fde6bd3_buggy.java b/tmp/b7ad4172-7efa-4e2f-958c-654f0abde1f1_fixed.java
index 72a422c..f20cf00 100644
--- a/tmp/b1b4d44d-441f-446c-8902-e9752fde6bd3_buggy.java
+++ b/tmp/b7ad4172-7efa-4e2f-958c-654f0abde1f1_fixed.java
@@ -1,51 +1,57 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start < seqEnd) {
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
-
-                // Check there's more than just an x after the &#
+            }
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        while (end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
 
+        if (end == start) {
+            // No valid entity found, return 0
+            return 0;
+        }
+
         int entityValue;
         try {
             if (isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch (NumberFormatException nfe) {
             System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "][" + end + "]");
             return 0;
         }
 
         if (entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // Calculate the length of the consumed input
+        int consumed = 2 + (end - start) + (isHex ? 1 : 0);
+        if (end < seqEnd && input.charAt(end) == ';') {
+            consumed++;
+        }
+        return consumed;
     }
     return 0;
 }
\ No newline at end of file
