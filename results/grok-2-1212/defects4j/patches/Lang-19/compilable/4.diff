diff --git a/tmp/051f38df-7323-45e0-8db2-259f825a139e_buggy.java b/tmp/9610e747-7fe4-4708-9b35-c3d40997e44a_fixed.java
index 72a422c..49a14a1 100644
--- a/tmp/051f38df-7323-45e0-8db2-259f825a139e_buggy.java
+++ b/tmp/9610e747-7fe4-4708-9b35-c3d40997e44a_fixed.java
@@ -1,51 +1,53 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
         // Uses -2 to ensure there is something after the &#
         if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
-            char firstChar = input.charAt(start);
+            char firstChar = start < seqEnd ? input.charAt(start) : 0;
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
-
-                // Check there's more than just an x after the &#
+                firstChar = start < seqEnd ? input.charAt(start) : 0;
             }
 
             int end = start;
             // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            while (end < seqEnd && input.charAt(end) != ';') {
                 end++;
             }
 
+            // If we reach the end of the sequence without finding a ';', treat it as an unfinished entity
+            if (end == seqEnd) {
+                end--; // Go back to the last valid character
+            }
+
             int entityValue;
             try {
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(input.subSequence(start, end + 1).toString(), 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(input.subSequence(start, end + 1).toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+                System.err.println("FAIL: " + input.subSequence(start, end + 1) + "[" + start + "][" + end + "]");
                 return 0;
             }
 
             if (entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            return 2 + (end - start + 1) + (isHex ? 1 : 0);
         }
         return 0;
     }
\ No newline at end of file
