diff --git a/tmp/e3bd1daf-9b99-485d-9ef4-e7ec8e20ff3b_buggy.java b/tmp/d0150293-3690-4e3d-b25f-c847c2c5e42b_fixed.java
index 0ef85f2..3e7bc88 100644
--- a/tmp/e3bd1daf-9b99-485d-9ef4-e7ec8e20ff3b_buggy.java
+++ b/tmp/d0150293-3690-4e3d-b25f-c847c2c5e42b_fixed.java
@@ -1,50 +1,50 @@
 /**
  * Gets the source line for the indicated line number.
  *
  * @param lineNumber the line number, 1 being the first line of the file.
  * @return The line indicated. Does not include the newline at the end
  *     of the file. Returns {@code null} if it does not exist,
  *     or if there was an IO exception.
  */
 public String getLine(int lineNumber) {
     String js = "";
     try {
-      // NOTE(nicksantos): Right now, this is optimized for few warnings.
-      // This is probably the right trade-off, but will be slow if there
-      // are lots of warnings in one file.
         js = getCode();
     } catch (IOException e) {
         return null;
     }
 
     int pos = 0;
     int startLine = 1;
 
-    // If we've saved a previous offset and it's for a line less than the
-    // one we're searching for, then start at that point.
     if (lineNumber >= lastLine) {
         pos = lastOffset;
         startLine = lastLine;
     }
 
     for (int n = startLine; n < lineNumber; n++) {
         int nextpos = js.indexOf('\n', pos);
         if (nextpos == -1) {
             return null;
         }
         pos = nextpos + 1;
     }
 
-    // Remember this offset for the next search we do.
     lastOffset = pos;
     lastLine = lineNumber;
 
-    if (js.indexOf('\n', pos) == -1) {
-      // If next new line cannot be found, there are two cases
-      // 1. pos already reaches the end of file, then null should be returned
-      // 2. otherwise, return the contents between pos and the end of file.
+    int nextNewLine = js.indexOf('\n', pos);
+    if (nextNewLine == -1) {
+        // If no more newlines are found, we're at the last line
+        if (pos < js.length()) {
+            // Return the remaining content if it exists
+            return js.substring(pos);
+        } else {
+            // If pos is at the end of the string, return null
             return null;
+        }
     } else {
-      return js.substring(pos, js.indexOf('\n', pos));
+        // Return the line up to the next newline
+        return js.substring(pos, nextNewLine);
     }
 }
\ No newline at end of file
