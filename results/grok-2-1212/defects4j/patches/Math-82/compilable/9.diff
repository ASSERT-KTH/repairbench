diff --git a/tmp/b5bb1d03-4d5a-4b9d-bdd8-8c04ce565754_buggy.java b/tmp/843b3433-a8dd-4669-82ff-aba0aa17434c_fixed.java
index 220820e..93f564f 100644
--- a/tmp/b5bb1d03-4d5a-4b9d-bdd8-8c04ce565754_buggy.java
+++ b/tmp/843b3433-a8dd-4669-82ff-aba0aa17434c_fixed.java
@@ -1,22 +1,29 @@
 /**
  * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
  * @param tableau simple tableau for the problem
  * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
  * @return row with the minimum ratio
  */
 private Integer getPivotRow(final int col, final SimplexTableau tableau) {
     double minRatio = Double.MAX_VALUE;
     Integer minRatioPos = null;
     for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
         final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
         final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
+        if (MathUtils.compareTo(entry, 0, epsilon) > 0) {
             final double ratio = rhs / entry;
             if (ratio < minRatio) {
                 minRatio = ratio;
                 minRatioPos = i; 
             }
+        } else if (MathUtils.compareTo(entry, 0, epsilon) < 0) {
+            // If the entry is negative, we need to consider the negative ratio
+            final double ratio = -rhs / entry;
+            if (ratio < minRatio) {
+                minRatio = ratio;
+                minRatioPos = i; 
+            }
         }
     }
     return minRatioPos;
 }
\ No newline at end of file
