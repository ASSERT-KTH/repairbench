diff --git a/tmp/b53bca35-8335-4fd3-9db5-bae7e2254d2b_buggy.java b/tmp/9da263fd-ba3d-4073-95f2-aff85c55ed55_fixed.java
index 220820e..68c4cc3 100644
--- a/tmp/b53bca35-8335-4fd3-9db5-bae7e2254d2b_buggy.java
+++ b/tmp/9da263fd-ba3d-4073-95f2-aff85c55ed55_fixed.java
@@ -1,22 +1,25 @@
 /**
  * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
  * @param tableau simple tableau for the problem
  * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
  * @return row with the minimum ratio
  */
 private Integer getPivotRow(final int col, final SimplexTableau tableau) {
     double minRatio = Double.MAX_VALUE;
     Integer minRatioPos = null;
     for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
         final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
         final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
+        if (MathUtils.compareTo(entry, 0, epsilon) > 0) {
             final double ratio = rhs / entry;
             if (ratio < minRatio) {
                 minRatio = ratio;
                 minRatioPos = i; 
             }
+        } else if (MathUtils.compareTo(entry, 0, epsilon) == 0 && MathUtils.compareTo(rhs, 0, epsilon) < 0) {
+            // If entry is zero and rhs is negative, we cannot use this row as a pivot
+            return null; // or handle this case according to your requirements
         }
     }
     return minRatioPos;
 }
\ No newline at end of file
