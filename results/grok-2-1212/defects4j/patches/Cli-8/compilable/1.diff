diff --git a/tmp/ba5f4944-ea37-4c87-9283-86834a962ffd_buggy.java b/tmp/25addbfd-11f8-4e82-b10a-94568b545f9f_fixed.java
index 8e93a5e..8908043 100644
--- a/tmp/ba5f4944-ea37-4c87-9283-86834a962ffd_buggy.java
+++ b/tmp/25addbfd-11f8-4e82-b10a-94568b545f9f_fixed.java
@@ -1,43 +1,62 @@
 /**
  * <p>Render the specified text and return the rendered Options
  * in a StringBuffer.</p>
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
+    int nextStart = 0;
+    boolean firstLine = true;
 
-        if (pos == -1)
+    while (pos != -1)
     {
-            sb.append(rtrim(text));
+        // Append the text from nextStart to pos
+        sb.append(rtrim(text.substring(nextStart, pos)));
 
-            return sb;
+        // If not the first line, or if nextLineTabStop is non-zero, append a new line
+        if (!firstLine || nextLineTabStop > 0)
+        {
+            sb.append(defaultNewLine);
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+        nextStart = pos;
+        firstLine = false;
 
-        while (true)
+        // Calculate the next line's starting position
+        if (nextLineTabStop > 0)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
-
-            if (pos == -1)
+            sb.append(createPadding(nextLineTabStop));
+            pos = findWrapPos(text, width - nextLineTabStop, nextStart + nextLineTabStop);
+            nextStart += nextLineTabStop;
+        }
+        else
         {
-                sb.append(text);
-
-                return sb;
+            pos = findWrapPos(text, width, nextStart);
+        }
     }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+    // Append the remaining text
+    String remaining = text.substring(nextStart).trim();
+    if (!firstLine || nextLineTabStop > 0)
+    {
+        if (nextLineTabStop > 0)
+        {
+            sb.append(createPadding(nextLineTabStop));
         }
+        sb.append(remaining);
+    }
+    else
+    {
+        sb.append(rtrim(remaining));
+    }
+
+    return sb;
 }
\ No newline at end of file
