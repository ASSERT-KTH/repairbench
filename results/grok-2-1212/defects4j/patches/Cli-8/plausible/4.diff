diff --git a/tmp/6b81dc0a-8094-42aa-ab1b-5376d1329e26_buggy.java b/tmp/efc9d2fb-cd7b-4221-bdad-1282e1a58dc8_fixed.java
index 8e93a5e..3398099 100644
--- a/tmp/6b81dc0a-8094-42aa-ab1b-5376d1329e26_buggy.java
+++ b/tmp/efc9d2fb-cd7b-4221-bdad-1282e1a58dc8_fixed.java
@@ -1,43 +1,53 @@
 /**
  * <p>Render the specified text and return the rendered Options
  * in a StringBuffer.</p>
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
+
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
     
+    String remainingText = text.substring(pos).trim();
+    
     while (true)
     {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+        if (remainingText.contains(defaultNewLine))
+        {
+            String[] lines = remainingText.split(defaultNewLine, 2);
+            sb.append(padding).append(lines[0]).append(defaultNewLine);
+            remainingText = lines[1].trim();
+        }
+        else
+        {
+            pos = findWrapPos(remainingText, width - nextLineTabStop, 0);
             
             if (pos == -1)
             {
-                sb.append(text);
-
+                sb.append(padding).append(remainingText);
                 return sb;
             }
             
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            sb.append(padding).append(rtrim(remainingText.substring(0, pos))).append(defaultNewLine);
+            remainingText = remainingText.substring(pos).trim();
+        }
     }
 }
\ No newline at end of file
