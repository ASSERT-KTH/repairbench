diff --git a/tmp/80f2f7f3-7d2b-435f-8308-4996d721096b_buggy.java b/tmp/4dd82957-e596-4b4b-87a8-748abd81cc90_fixed.java
index bf9c086..c1731ab 100644
--- a/tmp/80f2f7f3-7d2b-435f-8308-4996d721096b_buggy.java
+++ b/tmp/4dd82957-e596-4b4b-87a8-748abd81cc90_fixed.java
@@ -1,54 +1,68 @@
 /**
  * Visits a CALL node.
  *
  * @param t The node traversal object that supplies context, such as the
  * scope chain to use in name lookups as well as error reporting.
  * @param n The node being visited.
  */
 private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
     if (!childType.canBeCalled()) {
         report(t, n, NOT_CALLABLE, childType.toString());
         ensureTyped(t, n);
         return;
     }
 
     // A couple of types can be called as if they were functions.
     // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
         FunctionType functionType = (FunctionType) childType;
 
         boolean isExtern = false;
         JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
         if(functionJSDocInfo != null) {
             String sourceName = functionJSDocInfo.getSourceName();
             CompilerInput functionSource = compiler.getInput(sourceName);
             isExtern = functionSource.isExtern();
         }
 
         // Non-native constructors should not be called directly
         // unless they specify a return type and are defined
         // in an extern.
         if (functionType.isConstructor() &&
             !functionType.isNativeObjectType() &&
             (functionType.getReturnType().isUnknownType() ||
              functionType.getReturnType().isVoidType() ||
              !isExtern)) {
             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
         }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
-
+        // Check for functions with explicit 'this' types
+        if (functionType.hasThisType()) {
+            // The function has an explicit 'this' type, ensure it's called with a proper 'this' context
+            Node parent = n.getParent();
+            if (parent.isGetProp() || parent.isGetElem()) {
+                // It's called as a method, which is fine
                 visitParameterList(t, n, functionType);
                 ensureTyped(t, n, functionType.getReturnType());
+            } else {
+                // It's called directly, which is not allowed
+                report(t, n, THIS_TYPE_NOT_CALLABLE, functionType.toString());
+                ensureTyped(t, n);
+                return;
+            }
+        } else {
+            // Regular function call without 'this' type
+            visitParameterList(t, n, functionType);
+            ensureTyped(t, n, functionType.getReturnType());
+        }
     } else {
         ensureTyped(t, n);
     }
 
     // TODO: Add something to check for calls of RegExp objects, which is not
     // supported by IE.  Either say something about the return type or warn
     // about the non-portability of the call or both.
 }
\ No newline at end of file
