diff --git a/tmp/77bce3cb-2da2-4039-9582-51b4e6110415_buggy.java b/tmp/edde0d56-b3f1-4c65-be51-01a4d6848c5b_fixed.java
index f47d784..47a3778 100644
--- a/tmp/77bce3cb-2da2-4039-9582-51b4e6110415_buggy.java
+++ b/tmp/edde0d56-b3f1-4c65-be51-01a4d6848c5b_fixed.java
@@ -1,12 +1,27 @@
 @Override
 public void process(Node externs, Node root) {
     NodeTraversal.traverse(compiler, root, this);
     if (MAKE_LOCAL_NAMES_UNIQUE) {
         MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
         NodeTraversal t = new NodeTraversal(compiler, renamer);
         t.traverseRoots(externs, root);
     }
     removeDuplicateDeclarations(root);
     new PropogateConstantAnnotations(compiler, assertOnChange)
         .process(externs, root);
+    
+    // Add this line to preserve the 'var' keyword for 'arguments'
+    preserveVarKeywordForArguments(root);
+}
+
+// Add this new method to the class
+private void preserveVarKeywordForArguments(Node root) {
+    NodeTraversal.traverse(compiler, root, new NodeTraversal.AbstractPostOrderCallback() {
+        @Override
+        public void visit(NodeTraversal t, Node n, Node parent) {
+            if (n.isVar() && n.getFirstChild() != null && n.getFirstChild().getString().equals("arguments")) {
+                n.getFirstChild().putBooleanProp(Node.IS_CONSTANT_NAME, true);
+            }
+        }
+    });
 }
\ No newline at end of file
