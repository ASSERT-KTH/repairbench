diff --git a/tmp/c139689a-0165-4243-b132-d167b750e958_buggy.java b/tmp/ef2c1f0c-e323-419e-8a83-2307ca71ff2c_fixed.java
index a3709ee..26c1015 100644
--- a/tmp/c139689a-0165-4243-b132-d167b750e958_buggy.java
+++ b/tmp/ef2c1f0c-e323-419e-8a83-2307ca71ff2c_fixed.java
@@ -1,71 +1,77 @@
 /**
  * @param locals A predicate to apply to unknown local values.
  * @return Whether the node is known to be a value that is not a reference
  *     outside the expression scope.
  */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
         case Token.ASSIGN:
             // A result that is aliased by a non-local name, is the effectively the
             // same as returning a non-local name, but this doesn't matter if the
             // value is immutable.
             return NodeUtil.isImmutableValue(value.getLastChild())
                 || (locals.apply(value)
                     && evaluatesToLocalValue(value.getLastChild(), locals));
         case Token.COMMA:
             return evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.AND:
         case Token.OR:
             return evaluatesToLocalValue(value.getFirstChild(), locals)
                 && evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.HOOK:
             return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
                 && evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.INC:
         case Token.DEC:
             if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                 return evaluatesToLocalValue(value.getFirstChild(), locals);
             } else {
                 return true;
             }
         case Token.THIS:
             return locals.apply(value);
         case Token.NAME:
             return isImmutableValue(value) || locals.apply(value);
         case Token.GETELEM:
         case Token.GETPROP:
             // There is no information about the locality of object properties.
-        return locals.apply(value);
+            return false; // Changed from locals.apply(value) to false
         case Token.CALL:
             return callHasLocalResult(value)
                 || isToStringMethodCall(value)
-            || locals.apply(value);
+                || (locals.apply(value) && evaluatesToLocalValue(value.getFirstChild(), locals));
         case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+            // Check if the constructor is local and has no global side effects
+            return locals.apply(value) && !hasGlobalSideEffects(value.getFirstChild());
         case Token.FUNCTION:
         case Token.REGEXP:
         case Token.ARRAYLIT:
         case Token.OBJECTLIT:
             // Literals objects with non-literal children are allowed.
             return true;
         case Token.IN:
             // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
             return true;
         default:
             // Other op force a local value:
             //  x = '' + g (x is now an local string)
             //  x -= g (x is now an local number)
             if (isAssignmentOp(value)
                 || isSimpleOperator(value)
                 || isImmutableValue(value)) {
                 return true;
             }
 
             throw new IllegalStateException(
                 "Unexpected expression node" + value +
                 "\n parent:" + value.getParent());
     }
 }
+
+// Additional helper method to check for global side effects
+private static boolean hasGlobalSideEffects(Node functionNode) {
+    // This is a simplified check. A more robust implementation would be needed
+    // in a real-world scenario.
+    return functionNode != null && functionNode.hasChildren()
+        && functionNode.getFirstChild().hasSideEffects();
+}
\ No newline at end of file
