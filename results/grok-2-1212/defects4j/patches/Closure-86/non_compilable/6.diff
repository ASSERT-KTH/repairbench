diff --git a/tmp/d375533d-1115-4513-b738-64fa6e18a960_buggy.java b/tmp/b8634870-e556-422c-a8d2-0ba87679aea5_fixed.java
index a3709ee..393f6a6 100644
--- a/tmp/d375533d-1115-4513-b738-64fa6e18a960_buggy.java
+++ b/tmp/b8634870-e556-422c-a8d2-0ba87679aea5_fixed.java
@@ -1,71 +1,76 @@
-  /**
-   * @param locals A predicate to apply to unknown local values.
-   * @return Whether the node is known to be a value that is not a reference
-   *     outside the expression scope.
-   */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
         case Token.ASSIGN:
             // A result that is aliased by a non-local name, is the effectively the
             // same as returning a non-local name, but this doesn't matter if the
             // value is immutable.
-        return NodeUtil.isImmutableValue(value.getLastChild())
+            Node rightChild = value.getLastChild();
+            return NodeUtil.isImmutableValue(rightChild)
                 || (locals.apply(value)
-                && evaluatesToLocalValue(value.getLastChild(), locals));
+                    && evaluatesToLocalValue(rightChild, locals));
         case Token.COMMA:
             return evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.AND:
         case Token.OR:
             return evaluatesToLocalValue(value.getFirstChild(), locals)
                 && evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.HOOK:
             return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
                 && evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.INC:
         case Token.DEC:
             if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                 return evaluatesToLocalValue(value.getFirstChild(), locals);
             } else {
-          return true;
+                return NodeUtil.isImmutableValue(value.getFirstChild());
             }
         case Token.THIS:
             return locals.apply(value);
         case Token.NAME:
             return isImmutableValue(value) || locals.apply(value);
         case Token.GETELEM:
         case Token.GETPROP:
             // There is no information about the locality of object properties.
-        return locals.apply(value);
+            return false;
         case Token.CALL:
             return callHasLocalResult(value)
                 || isToStringMethodCall(value)
-            || locals.apply(value);
+                || (locals.apply(value) && evaluatesToLocalValue(value.getFirstChild(), locals));
         case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+            // We can't assume new objects are local unless we know
+            // they don't alias themselves.
+            return false;
         case Token.FUNCTION:
         case Token.REGEXP:
         case Token.ARRAYLIT:
         case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
-        return true;
+            // Literals objects with non-literal children are not necessarily local.
+            return !hasNonLiteralChildren(value);
         case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+            // IN operator should be treated as a simple operator
             return true;
         default:
             // Other op force a local value:
             //  x = '' + g (x is now an local string)
             //  x -= g (x is now an local number)
             if (isAssignmentOp(value)
                 || isSimpleOperator(value)
                 || isImmutableValue(value)) {
                 return true;
             }
 
             throw new IllegalStateException(
                 "Unexpected expression node" + value +
                 "\n parent:" + value.getParent());
     }
 }
+
+// Helper method to check if a node has non-literal children
+static boolean hasNonLiteralChildren(Node node) {
+    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {
+        if (!NodeUtil.isLiteralValue(child)) {
+            return true;
+        }
+    }
+    return false;
+}
\ No newline at end of file
