diff --git a/tmp/5b703333-45ee-46cb-9507-df73bf7826f9_buggy.java b/tmp/6f9e4e48-1204-4561-92ba-dfa3ca6bb64d_fixed.java
index e69de29..8ef977d 100644
--- a/tmp/5b703333-45ee-46cb-9507-df73bf7826f9_buggy.java
+++ b/tmp/6f9e4e48-1204-4561-92ba-dfa3ca6bb64d_fixed.java
@@ -0,0 +1,33 @@
+private void _testEmptyToNullCoercion(Class<?> type, Object expectedValue) throws Exception {
+    ObjectMapper mapper = new ObjectMapper();
+    mapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);
+    mapper.configure(JsonDeserializer.Feature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, false);
+
+    String json = "{}";
+    JsonNode tree = mapper.readTree(json);
+
+    JsonNode valueNode = tree.get("value");
+    if (valueNode == null || valueNode.isNull()) {
+        if (type.isPrimitive()) {
+            assertEquals(expectedValue, mapper.treeToValue(tree, type));
+        } else {
+            assertNull(mapper.treeToValue(tree, type));
+        }
+    } else {
+        fail("Expected null or missing value, but got: " + valueNode);
+    }
+
+    // Test with empty string
+    json = "{\"value\":\"\"}";
+    tree = mapper.readTree(json);
+    valueNode = tree.get("value");
+    if (valueNode != null && valueNode.isTextual() && valueNode.asText().isEmpty()) {
+        if (type.isPrimitive()) {
+            assertEquals(expectedValue, mapper.treeToValue(tree, type));
+        } else {
+            assertNull(mapper.treeToValue(tree, type));
+        }
+    } else {
+        fail("Expected empty string, but got: " + valueNode);
+    }
+}
\ No newline at end of file
