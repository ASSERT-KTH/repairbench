diff --git a/tmp/7ce37ed2-4e90-4c66-a6b8-02a3966b72d1_buggy.java b/tmp/709290f4-8eec-4493-a26b-41d7abd1df90_fixed.java
index 2955e62..5614bf2 100644
--- a/tmp/7ce37ed2-4e90-4c66-a6b8-02a3966b72d1_buggy.java
+++ b/tmp/709290f4-8eec-4493-a26b-41d7abd1df90_fixed.java
@@ -1,66 +1,139 @@
 /**
  * @return true if the provided reference and declaration can be safely
  *         inlined according to our criteria
  */
 private boolean canInline(
     Reference declaration,
     Reference initialization,
     Reference reference) {
   if (!isValidDeclaration(declaration)
       || !isValidInitialization(initialization)
       || !isValidReference(reference)) {
     return false;
   }
 
   // If the value is read more than once, skip it.
   // VAR declarations and EXPR_RESULT don't need the value, but other
   // ASSIGN expressions parents do.
   if (declaration != initialization &&
       !initialization.getGrandparent().isExprResult()) {
     return false;
   }
 
   // Be very conservative and do no cross control structures or
   // scope boundaries
   if (declaration.getBasicBlock() != initialization.getBasicBlock()
       || declaration.getBasicBlock() != reference.getBasicBlock()) {
     return false;
   }
 
   // Do not inline into a call node. This would change
   // the context in which it was being called. For example,
   //   var a = b.c;
   //   a();
   // should not be inlined, because it calls a in the context of b
   // rather than the context of the window.
   //   var a = b.c;
   //   f(a)
   // is ok.
   Node value = initialization.getAssignedValue();
   Preconditions.checkState(value != null);
   if (value.isGetProp()
       && reference.getParent().isCall()
       && reference.getParent().getFirstChild() == reference.getNode()) {
     return false;
   }
 
   if (value.isFunction()) {
     Node callNode = reference.getParent();
     if (reference.getParent().isCall()) {
       CodingConvention convention = compiler.getCodingConvention();
       // Bug 2388531: Don't inline subclass definitions into class defining
       // calls as this confused class removing logic.
       SubclassRelationship relationship =
           convention.getClassesDefinedByCall(callNode);
       if (relationship != null) {
         return false;
       }
 
-          // issue 668: Don't inline singleton getter methods
-          // calls as this confused class removing logic.
+      // Issue 668: Don't inline singleton getter methods
+      // into calls as this confused class removing logic.
+      if (isSingletonGetterMethod(value)) {
+        return false;
+      }
     }
   }
 
   return canMoveAggressively(value) ||
       canMoveModerately(initialization, reference);
 }
+
+private boolean isSingletonGetterMethod(Node functionNode) {
+  if (!functionNode.isFunction()) {
+    return false;
+  }
+  
+  Node body = functionNode.getLastChild();
+  if (body == null || !body.isBlock()) {
+    return false;
+  }
+  
+  Node firstStatement = body.getFirstChild();
+  if (firstStatement == null || !firstStatement.isReturn()) {
+    return false;
+  }
+  
+  Node returnExpr = firstStatement.getFirstChild();
+  if (returnExpr == null || !returnExpr.isOr()) {
+    return false;
+  }
+  
+  Node left = returnExpr.getFirstChild();
+  Node right = returnExpr.getLastChild();
+  
+  if (left == null || right == null) {
+    return false;
+  }
+  
+  if (!left.isGetProp()) {
+    return false;
+  }
+  
+  Node leftObject = left.getFirstChild();
+  Node leftProperty = left.getLastChild();
+  
+  if (leftObject == null || leftProperty == null || 
+      !leftProperty.isString() || !leftProperty.getString().equals("instance_")) {
+    return false;
+  }
+  
+  if (!right.isAssign()) {
+    return false;
+  }
+  
+  Node assignLeft = right.getFirstChild();
+  Node assignRight = right.getLastChild();
+  
+  if (assignLeft == null || assignRight == null || !assignLeft.isGetProp()) {
+    return false;
+  }
+  
+  Node assignLeftObject = assignLeft.getFirstChild();
+  Node assignLeftProperty = assignLeft.getLastChild();
+  
+  if (assignLeftObject == null || assignLeftProperty == null || 
+      !assignLeftProperty.isString() || !assignLeftProperty.getString().equals("instance_")) {
+    return false;
+  }
+  
+  if (!assignRight.isNew()) {
+    return false;
+  }
+  
+  Node newCall = assignRight.getFirstChild();
+  if (newCall == null || !newCall.isName()) {
+    return false;
+  }
+  
+  return newCall.getString().equals(functionNode.getFirstChild().getString());
+}
\ No newline at end of file
