diff --git a/tmp/15d6be87-9538-4a8f-906a-a5033dc66f98_buggy.java b/tmp/aefac43a-95bf-4582-9595-26f7e5b31d37_fixed.java
index 98d89dc..09dde9a 100644
--- a/tmp/15d6be87-9538-4a8f-906a-a5033dc66f98_buggy.java
+++ b/tmp/aefac43a-95bf-4582-9595-26f7e5b31d37_fixed.java
@@ -1,23 +1,43 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+    
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
-        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+    
+    // Check for NaN
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // NaN is not equal to anything, including itself
+        if (operator.equals("=")) {
+            return false;
+        }
+        // NaN is neither greater than nor less than any value, including itself
+        if (operator.equals(">") || operator.equals("<")) {
+            return false;
+        }
+        // For !=, NaN is considered not equal to everything
+        if (operator.equals("!=")) {
+            return true;
+        }
+    }
+    
+    // If not NaN, proceed with regular comparison
+    int comparison = Double.compare(ld, rd);
+    return evaluateCompare(comparison == 0 ? 0 : comparison < 0 ? -1 : 1);
 }
\ No newline at end of file
