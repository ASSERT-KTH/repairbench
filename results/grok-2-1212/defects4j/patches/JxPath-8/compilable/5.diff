diff --git a/tmp/e6101332-d75b-45da-b507-2dafe256c6d2_buggy.java b/tmp/aa7ba71e-f6b1-4a40-a64d-91cb6b033fc2_fixed.java
index 98d89dc..8e0c18d 100644
--- a/tmp/e6101332-d75b-45da-b507-2dafe256c6d2_buggy.java
+++ b/tmp/aa7ba71e-f6b1-4a40-a64d-91cb6b033fc2_fixed.java
@@ -1,23 +1,36 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // Handle NaN values
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // NaN is not equal to anything, including itself
+        if (Double.isNaN(ld) && Double.isNaN(rd)) {
+            return evaluateCompare(0); // For equality comparison
+        } else {
+            // NaN is not less than or greater than any number
+            return evaluateCompare(Double.compare(ld, rd));
+        }
+    }
+
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
