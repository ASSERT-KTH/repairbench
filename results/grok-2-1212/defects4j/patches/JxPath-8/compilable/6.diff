diff --git a/tmp/7de9952e-d6f4-4255-9a1e-57df60ff9377_buggy.java b/tmp/65b6d49a-d837-4a4f-a89a-7daaf8e888b2_fixed.java
index 98d89dc..7993fe1 100644
--- a/tmp/7de9952e-d6f4-4255-9a1e-57df60ff9377_buggy.java
+++ b/tmp/65b6d49a-d837-4a4f-a89a-7daaf8e888b2_fixed.java
@@ -1,23 +1,35 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+
+    // Handle NaN cases
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+    
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // NaN is not equal to anything, including another NaN
+        if (Double.isNaN(ld) && Double.isNaN(rd)) {
+            return evaluateCompare(0); // Special case: NaN = NaN should return true
+        }
+        // Any comparison involving NaN (except NaN = NaN) should return false
+        return evaluateCompare(Double.isNaN(ld) ? -1 : 1);
+    }
+
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
