diff --git a/tmp/d3619571-d4d4-4ed3-901b-bad3dd6764f4_buggy.java b/tmp/c6a2d92a-3006-4801-838e-8193b9cdb473_fixed.java
index 6c9090f..52f1da3 100644
--- a/tmp/d3619571-d4d4-4ed3-901b-bad3dd6764f4_buggy.java
+++ b/tmp/c6a2d92a-3006-4801-838e-8193b9cdb473_fixed.java
@@ -1,45 +1,86 @@
     /**
      * Method called to finalize setup of this deserializer,
      * when it is known for which property deserializer is needed
      * for.
      */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
         // May need to resolve types for delegate-based creators:
         JsonDeserializer<Object> delegateDeser = null;
         if (_valueInstantiator != null) {
             if (_valueInstantiator.canCreateUsingDelegate()) {
                 JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
                 if (delegateType == null) {
                     throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                             +": value instantiator ("+_valueInstantiator.getClass().getName()
                             +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
                 }
                 delegateDeser = findDeserializer(ctxt, delegateType, property);
             }
         }
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
         // also, often value deserializer is resolved here:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
             valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
+
+        // Handle unmodifiable collections
+        if (_valueInstantiator == null && isUnmodifiableCollection(_collectionType)) {
+            // Use a special deserializer for unmodifiable collections
+            valueDeser = new UnmodifiableCollectionDeserializer(valueDeser, vt);
+        }
+
         return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
     }
+
+    // Helper method to check if a type is an unmodifiable collection
+    protected boolean isUnmodifiableCollection(JavaType type) {
+        Class<?> rawClass = type.getRawClass();
+        return rawClass.getName().startsWith("java.util.Collections$Unmodifiable");
+    }
+
+    // Inner class to handle deserialization of unmodifiable collections
+    protected static class UnmodifiableCollectionDeserializer extends JsonDeserializer<Object> {
+        protected final JsonDeserializer<?> delegate;
+        protected final JavaType contentType;
+
+        public UnmodifiableCollectionDeserializer(JsonDeserializer<?> delegate, JavaType contentType) {
+            this.delegate = delegate;
+            this.contentType = contentType;
+        }
+
+        @Override
+        public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
+            Collection<Object> result = new ArrayList<>();
+            if (p.isExpectedStartArrayToken()) {
+                while (p.nextToken() != JsonToken.END_ARRAY) {
+                    Object value = delegate.deserialize(p, ctxt);
+                    result.add(value);
+                }
+            } else {
+                Object value = delegate.deserialize(p, ctxt);
+                if (value != null) {
+                    result.add(value);
+                }
+            }
+            return Collections.unmodifiableCollection(result);
+        }
+    }
\ No newline at end of file
