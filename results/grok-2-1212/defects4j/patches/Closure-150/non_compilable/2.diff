diff --git a/tmp/871c670b-1b4a-4dd6-be02-a14be74c928b_buggy.java b/tmp/75d4e25e-f4ed-42d7-a30c-cb27f0450a39_fixed.java
index 800e6e1..8c4ad68 100644
--- a/tmp/871c670b-1b4a-4dd6-be02-a14be74c928b_buggy.java
+++ b/tmp/75d4e25e-f4ed-42d7-a30c-cb27f0450a39_fixed.java
@@ -1,32 +1,50 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.GETPROP:
+          // Handle function stubs
+          if (n.getFirstChild().getType() == Token.NAME && n.hasJSDoc()) {
+            String fullName = n.getQualifiedName();
+            if (fullName != null) {
+              Node nameNode = n.getFirstChild();
+              String namespace = nameNode.getString();
+              String propertyName = n.getLastChild().getString();
+              
+              JSType type = n.getJSDocInfo().getType();
+              if (type != null) {
+                scope.declare(namespace, nameNode, type, null, null);
+                ObjectType objType = (ObjectType) scope.getVar(namespace).getType();
+                objType.defineDeclaredProperty(propertyName, type, n);
+              }
+            }
+          }
+          break;
       }
     }
\ No newline at end of file
