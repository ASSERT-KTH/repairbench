diff --git a/tmp/b094ca12-4d1c-40fa-ab40-ec22443ccd95_buggy.java b/tmp/1a191fad-8fc2-45c5-bb30-f41c50cb2a65_fixed.java
index 800e6e1..1363469 100644
--- a/tmp/b094ca12-4d1c-40fa-ab40-ec22443ccd95_buggy.java
+++ b/tmp/1a191fad-8fc2-45c5-bb30-f41c50cb2a65_fixed.java
@@ -1,32 +1,78 @@
 /**
  * Visit a node in a local scope, and add any local variables or catch
  * parameters into the local symbol table.
  *
  * @param t The node traversal.
  * @param n The node being visited.
  * @param parent The parent of n
  */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
+        handleFunctionStub(n, parent);
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
+    case Token.ASSIGN:
+      if (n.getFirstChild().getType() == Token.GETPROP) {
+        handlePropertyAssignment(n);
+      }
+      break;
+  }
+}
+
+/**
+ * Handle function stubs with type annotations.
+ */
+private void handleFunctionStub(Node n, Node parent) {
+  Node nameNode = parent;
+  String functionName = nameNode.getString();
+  Node typeAnnotation = n.getJSDocInfo() != null ? n.getJSDocInfo().getType() : null;
+
+  if (typeAnnotation != null) {
+    String typeName = typeAnnotation.toString();
+    scope.declare(functionName, n, new FunctionType(scope, typeName));
+  } else {
+    scope.declare(functionName, n, new FunctionType(scope));
+  }
+}
+
+/**
+ * Handle property assignments with type annotations.
+ */
+private void handlePropertyAssignment(Node n) {
+  Node lhs = n.getFirstChild();
+  Node rhs = lhs.getNext();
+  
+  if (rhs.isQualifiedName() && rhs.getJSDocInfo() != null) {
+    Node typeAnnotation = rhs.getJSDocInfo().getType();
+    if (typeAnnotation != null) {
+      String propertyName = lhs.getLastChild().getString();
+      String typeName = typeAnnotation.toString();
+      
+      Node objNode = lhs.getFirstChild();
+      String objName = objNode.isName() ? objNode.getString() : null;
+      
+      if (objName != null) {
+        ObjectType objType = (ObjectType) scope.getVar(objName).getType();
+        objType.defineDeclaredProperty(propertyName, JSType.fromString(scope, typeName), n);
+      }
+    }
   }
 }
\ No newline at end of file
