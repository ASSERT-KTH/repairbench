diff --git a/tmp/6dfd905e-20cb-4136-a397-e66014288bb4_buggy.java b/tmp/c6a5c9c9-ef55-4a75-a02c-8fff67261313_fixed.java
index 800e6e1..77edb8a 100644
--- a/tmp/6dfd905e-20cb-4136-a397-e66014288bb4_buggy.java
+++ b/tmp/c6a5c9c9-ef55-4a75-a02c-8fff67261313_fixed.java
@@ -1,32 +1,63 @@
 /**
  * Visit a node in a local scope, and add any local variables or catch
  * parameters into the local symbol table.
  *
  * @param t The node traversal.
  * @param n The node being visited.
  * @param parent The parent of n
  */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
+    case Token.ASSIGN:
+      if (n.getFirstChild().getType() == Token.GETPROP) {
+        Node propName = n.getFirstChild().getSecondChild();
+        if (propName.isString()) {
+          defineStubProperty(n.getFirstChild().getFirstChild(), propName.getString(), n);
+        }
+      }
+      break;
+    case Token.EXPR_RESULT:
+      if (n.getFirstChild().getType() == Token.GETPROP) {
+        Node propName = n.getFirstChild().getSecondChild();
+        if (propName.isString()) {
+          defineStubProperty(n.getFirstChild().getFirstChild(), propName.getString(), n);
+        }
+      }
+      break;
+  }
+}
+
+/**
+ * Defines a stub property on an object.
+ *
+ * @param objNode The node representing the object.
+ * @param propName The name of the property.
+ * @param n The node containing the stub declaration.
+ */
+private void defineStubProperty(Node objNode, String propName, Node n) {
+  Node propType = n.getJSTypeExpression();
+  if (propType != null) {
+    JSTypeExpression typeExpr = new JSTypeExpression(propType, n.getSourceFileName());
+    scope.declareProperty(propName, typeExpr, objNode);
   }
 }
\ No newline at end of file
