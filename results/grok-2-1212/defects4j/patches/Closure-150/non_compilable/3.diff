diff --git a/tmp/b9226537-a566-491d-be95-d94e8d762bac_buggy.java b/tmp/08543962-8a98-42e4-a1de-f96ce5b057de_fixed.java
index 800e6e1..0abc5a5 100644
--- a/tmp/b9226537-a566-491d-be95-d94e8d762bac_buggy.java
+++ b/tmp/08543962-8a98-42e4-a1de-f96ce5b057de_fixed.java
@@ -1,32 +1,46 @@
 /**
  * Visit a node in a local scope, and add any local variables or catch
  * parameters into the local symbol table.
  *
  * @param t The node traversal.
  * @param n The node being visited.
  * @param parent The parent of n
  */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
+        // Handle function stubs (namespaced and collected)
+        if (n.isFunction() && n.getFirstChild() == null) {
+          defineFunctionStub(n, parent);
+        } else {
           return;
         }
+      }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
+    case Token.ASSIGN:
+      // Handle property assignment for function stubs
+      if (n.getFirstChild().isGetProp()) {
+        Node lhs = n.getFirstChild();
+        if (lhs.getFirstChild().isName() && lhs.getSecondChild().isString()) {
+          definePropertyStub(lhs.getFirstChild().getString(), lhs.getSecondChild().getString(), n.getSecondChild());
+        }
+      }
+      break;
   }
 }
