diff --git a/tmp/8a375c43-8c67-423d-b02d-6edc8afa2efa_buggy.java b/tmp/ccf718c2-fdae-4bac-a9e5-034ed9704a94_fixed.java
index 6cfa79b..4fcaad1 100644
--- a/tmp/8a375c43-8c67-423d-b02d-6edc8afa2efa_buggy.java
+++ b/tmp/ccf718c2-fdae-4bac-a9e5-034ed9704a94_fixed.java
@@ -1,12 +1,23 @@
 /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+ * For this distribution, X, this method returns P(X < <code>x</code>).
  * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
+ * @return CDF evaluated at <code>x</code>. 
  * @throws MathException if the algorithm fails to converge; unless
  * x is more than 20 standard deviations from the mean, in which case the
  * convergence exception is caught and 0 or 1 is returned.
  */
 public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+    try {
+        double z = (x - mean) / (standardDeviation * Math.sqrt(2.0));
+        if (Math.abs(z) > 20) {
+            return z > 0 ? 1.0 : 0.0;
+        }
+        return 0.5 * (1.0 + Erf.erf(z));
+    } catch (MaxIterationsExceededException e) {
+        double z = (x - mean) / (standardDeviation * Math.sqrt(2.0));
+        if (Math.abs(z) > 20) {
+            return z > 0 ? 1.0 : 0.0;
+        }
+        throw e;
+    }
 }
\ No newline at end of file
