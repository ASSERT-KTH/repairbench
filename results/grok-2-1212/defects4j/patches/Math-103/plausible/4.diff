diff --git a/tmp/9bd715f0-f264-44e4-9fa3-11a35c2d6c79_buggy.java b/tmp/b448c080-39e9-4f25-88e4-9c9f6abb2643_fixed.java
index 6cfa79b..27aca8c 100644
--- a/tmp/9bd715f0-f264-44e4-9fa3-11a35c2d6c79_buggy.java
+++ b/tmp/b448c080-39e9-4f25-88e4-9c9f6abb2643_fixed.java
@@ -1,12 +1,22 @@
 /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+ * For this distribution, X, this method returns P(X < <code>x</code>).
  * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
-     * @throws MathException if the algorithm fails to converge; unless
-     * x is more than 20 standard deviations from the mean, in which case the
-     * convergence exception is caught and 0 or 1 is returned.
+ * @return CDF evaluated at <code>x</code>. 
+ * @throws MathException if the algorithm fails to converge for values within
+ * 20 standard deviations from the mean.
  */
 public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+    try {
+        double z = (x - mean) / (standardDeviation * Math.sqrt(2.0));
+        if (Math.abs(z) > 20) {
+            return z < 0 ? 0.0 : 1.0;
+        }
+        return 0.5 * (1.0 + Erf.erf(z));
+    } catch (MathException e) {
+        double z = (x - mean) / standardDeviation;
+        if (Math.abs(z) > 20) {
+            return z < 0 ? 0.0 : 1.0;
+        }
+        throw e;
+    }
 }
\ No newline at end of file
