diff --git a/tmp/69d465df-e0bc-4b3f-b1c5-564d3d92a728_buggy.java b/tmp/8f597291-6c1b-45bf-992b-844ceedf0192_fixed.java
index 6cfa79b..83a921d 100644
--- a/tmp/69d465df-e0bc-4b3f-b1c5-564d3d92a728_buggy.java
+++ b/tmp/8f597291-6c1b-45bf-992b-844ceedf0192_fixed.java
@@ -1,12 +1,20 @@
 /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+ * For this distribution, X, this method returns P(X < <code>x</code>).
  * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
+ * @return CDF evaluated at <code>x</code>. 
  * @throws MathException if the algorithm fails to converge; unless
  * x is more than 20 standard deviations from the mean, in which case the
  * convergence exception is caught and 0 or 1 is returned.
  */
 public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+    try {
+        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));
+    } catch (MathException e) {
+        double z = Math.abs((x - mean) / standardDeviation);
+        if (z > 20) {
+            return x < mean ? 0.0 : 1.0;
+        } else {
+            throw e;
+        }
+    }
 }
\ No newline at end of file
