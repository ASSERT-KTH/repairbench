diff --git a/tmp/bc7b08e7-5cf8-4d8a-8e86-91ef01fb0caf_buggy.java b/tmp/c8969e8d-c387-4769-ba5c-18cd84760908_fixed.java
index 6cfa79b..3e8c521 100644
--- a/tmp/bc7b08e7-5cf8-4d8a-8e86-91ef01fb0caf_buggy.java
+++ b/tmp/c8969e8d-c387-4769-ba5c-18cd84760908_fixed.java
@@ -1,12 +1,22 @@
 /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+ * For this distribution, X, this method returns P(X < <code>x</code>).
  * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
+ * @return CDF evaluated at <code>x</code>. 
  * @throws MathException if the algorithm fails to converge; unless
  * x is more than 20 standard deviations from the mean, in which case the
  * convergence exception is caught and 0 or 1 is returned.
  */
 public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+    try {
+        double result = 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));
+        return result;
+    } catch (MaxIterationsExceededException e) {
+        // Check if x is more than 20 standard deviations from the mean
+        double z = Math.abs((x - mean) / standardDeviation);
+        if (z > 20) {
+            return x < mean ? 0.0 : 1.0;
+        } else {
+            throw e;
+        }
+    }
 }
\ No newline at end of file
