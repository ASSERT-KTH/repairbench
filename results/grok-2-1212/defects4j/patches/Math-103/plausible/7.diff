diff --git a/tmp/cb70ed72-1b7e-4854-a1ca-9ac34d7b05d7_buggy.java b/tmp/f7c9df30-53d8-416a-89c5-7a4d1c896685_fixed.java
index 6cfa79b..f11e187 100644
--- a/tmp/cb70ed72-1b7e-4854-a1ca-9ac34d7b05d7_buggy.java
+++ b/tmp/f7c9df30-53d8-416a-89c5-7a4d1c896685_fixed.java
@@ -1,12 +1,36 @@
 /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+ * For this distribution, X, this method returns P(X < <code>x</code>).
  * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
+ * @return CDF evaluated at <code>x</code>. 
  * @throws MathException if the algorithm fails to converge; unless
  * x is more than 20 standard deviations from the mean, in which case the
  * convergence exception is caught and 0 or 1 is returned.
  */
 public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+    try {
+        // Calculate the number of standard deviations from the mean
+        double z = (x - mean) / standardDeviation;
+        
+        // If z is more than 20 standard deviations from the mean, return 0 or 1
+        if (z < -20.0) {
+            return 0.0;
+        } else if (z > 20.0) {
+            return 1.0;
+        }
+        
+        // Otherwise, calculate the CDF using the error function
+        return 0.5 * (1.0 + Erf.erf(z / Math.sqrt(2.0)));
+    } catch (MathException e) {
+        // If the algorithm fails to converge and z is more than 20 standard deviations from the mean,
+        // return 0 or 1 instead of throwing the exception
+        double z = (x - mean) / standardDeviation;
+        if (z < -20.0) {
+            return 0.0;
+        } else if (z > 20.0) {
+            return 1.0;
+        } else {
+            // If z is within 20 standard deviations, re-throw the exception
+            throw e;
+        }
+    }
 }
\ No newline at end of file
