diff --git a/tmp/dfc8da9e-6eb7-42b1-8dba-00fd7b390eec_buggy.java b/tmp/3af62ce9-68b0-419c-a728-22fcc79600da_fixed.java
index 3effef5..17fc7bc 100644
--- a/tmp/dfc8da9e-6eb7-42b1-8dba-00fd7b390eec_buggy.java
+++ b/tmp/3af62ce9-68b0-419c-a728-22fcc79600da_fixed.java
@@ -1,73 +1,74 @@
 @SuppressWarnings("resource")
-    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
-    		DeserializationContext ctxt)
+protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)
         throws IOException, JsonProcessingException
 {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
         p.nextToken(); // to point to value
+        
         // creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
             if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
-                    Object bean;
                 try {
-                        bean = creator.build(ctxt, buffer);
-                    } catch (Exception e) {
-                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
-                    }
+                    Object bean = creator.build(ctxt, buffer);
                     while (t == JsonToken.FIELD_NAME) {
                         p.nextToken();
                         tokens.copyCurrentStructure(p);
                         t = p.nextToken();
                     }
                     tokens.writeEndObject();
                     if (bean.getClass() != _beanType.getRawClass()) {
                         ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                         return null;
                     }
                     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+                } catch (Exception e) {
+                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+                    continue;
+                }
             }
             continue;
         }
+        
         // Object Id property?
         if (buffer.readIdProperty(propName)) {
             continue;
         }
+        
         // regular property? needs buffering
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
             buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
             continue;
         }
+        
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
+        
         tokens.writeFieldName(propName);
         tokens.copyCurrentStructure(p);
+        
         // "any property"?
         if (_anySetter != null) {
             buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
         }
     }
 
     // We hit END_OBJECT, so:
-        Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
     try {
-            bean = creator.build(ctxt, buffer);
+        Object bean = creator.build(ctxt, buffer);
+        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     } catch (Exception e) {
         return wrapInstantiationProblem(e, ctxt);
     }
-        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
