diff --git a/tmp/0faba2c6-3aa9-4ebf-b429-7fd0b7c18ce7_buggy.java b/tmp/b96e6b77-0b30-4a69-9ae5-730749c5431a_fixed.java
index 3effef5..b031480 100644
--- a/tmp/0faba2c6-3aa9-4ebf-b429-7fd0b7c18ce7_buggy.java
+++ b/tmp/b96e6b77-0b30-4a69-9ae5-730749c5431a_fixed.java
@@ -1,73 +1,82 @@
 @SuppressWarnings("resource")
-    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
-    		DeserializationContext ctxt)
+protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)
     throws IOException, JsonProcessingException
 {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
+    boolean foundCreatorProperty = false;
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
         p.nextToken(); // to point to value
+
         // creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
             if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
+                foundCreatorProperty = true;
                 t = p.nextToken();
-                    Object bean;
-                    try {
-                        bean = creator.build(ctxt, buffer);
-                    } catch (Exception e) {
-                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
-                    }
-                    while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
-                    }
-                    tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
-                        return null;
-                    }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
             }
             continue;
         }
+
         // Object Id property?
         if (buffer.readIdProperty(propName)) {
             continue;
         }
+
         // regular property? needs buffering
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
             buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
             continue;
         }
+
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
+
         tokens.writeFieldName(propName);
         tokens.copyCurrentStructure(p);
+
         // "any property"?
         if (_anySetter != null) {
             buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
         }
     }
 
     // We hit END_OBJECT, so:
     Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
+    if (foundCreatorProperty) {
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }
+        if (bean != null) {
+            // Process any buffered properties
+            _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+            return bean;
+        }
+    }
+
+    // If we didn't find a creator property, try to build from buffered properties
+    try {
+        bean = creator.build(ctxt, buffer);
+    } catch (Exception e) {
+        return wrapInstantiationProblem(e, ctxt);
+    }
+
+    if (bean != null) {
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
+
+    // If we still couldn't create a bean, report an error
+    ctxt.reportMappingException("Unable to create instance of %s, no suitable constructor found", _beanType.getRawClass().getName());
+    return null;
+}
\ No newline at end of file
