diff --git a/tmp/0baec73a-4fce-4433-8015-1e453feae533_buggy.java b/tmp/efb71e7a-3066-453f-9ca9-67af1f9d5b73_fixed.java
index 3effef5..a02349f 100644
--- a/tmp/0baec73a-4fce-4433-8015-1e453feae533_buggy.java
+++ b/tmp/efb71e7a-3066-453f-9ca9-67af1f9d5b73_fixed.java
@@ -1,73 +1,82 @@
 @SuppressWarnings("resource")
-    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
-    		DeserializationContext ctxt)
-        throws IOException, JsonProcessingException
-    {
+protected Object deserializeUsingProperty-BasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)
+        throws IOException, JsonProcessingException {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
         p.nextToken(); // to point to value
         // creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
             if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
                 Object bean;
                 try {
                     bean = creator.build(ctxt, buffer);
                 } catch (Exception e) {
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                     continue;
                 }
+                tokens = new TokenBuffer(p, ctxt);
+                tokens.writeStartObject();
+                // Continue processing remaining properties
                 while (t == JsonToken.FIELD_NAME) {
+                    String remainingPropName = p.getCurrentName();
                     p.nextToken();
-                        tokens.copyCurrentStructure(p);
+                    handleRemainingProperty(p, ctxt, tokens, buffer, bean, remainingPropName);
                     t = p.nextToken();
                 }
                 tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
-                        return null;
-                    }
                 return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
             }
             continue;
         }
         // Object Id property?
         if (buffer.readIdProperty(propName)) {
             continue;
         }
         // regular property? needs buffering
+        tokens.writeFieldName(propName);
+        tokens.copyCurrentStructure(p);
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
             buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
             continue;
         }
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
-            tokens.writeFieldName(propName);
-            tokens.copyCurrentStructure(p);
         // "any property"?
         if (_anySetter != null) {
             buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
         }
     }
 
     // We hit END_OBJECT, so:
     Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
     try {
         bean = creator.build(ctxt, buffer);
     } catch (Exception e) {
         return wrapInstantiationProblem(e, ctxt);
     }
+    tokens.writeEndObject();
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
+
+private void handleRemainingProperty(JsonParser p, DeserializationContext ctxt, TokenBuffer tokens, 
+        PropertyValueBuffer buffer, Object bean, String propName) throws IOException {
+    tokens.writeFieldName(propName);
+    tokens.copyCurrentStructure(p);
+    SettableBeanProperty prop = _beanProperties.find(propName);
+    if (prop != null) {
+        prop.set(bean, prop.deserialize(p, ctxt));
+    } else if (_anySetter != null) {
+        _anySetter.set(bean, propName, _anySetter.deserialize(p, ctxt));
+    }
+}
\ No newline at end of file
