diff --git a/tmp/6213c1ef-2417-46ad-9c8e-52633bf78244_buggy.java b/tmp/b1917756-5106-4173-9b54-6589193ba553_fixed.java
index 10616db..4db3e2e 100644
--- a/tmp/6213c1ef-2417-46ad-9c8e-52633bf78244_buggy.java
+++ b/tmp/b1917756-5106-4173-9b54-6589193ba553_fixed.java
@@ -1,19 +1,48 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
+
         // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
-            instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+            
+            // Adjust the instant based on the field being modified
+            if (fieldIndex == 0) { // Month field
+                int monthsToAdd = valueToAdd;
+                int yearsToAdd = 0;
+                
+                // Calculate years and remaining months
+                if (monthsToAdd >= 12 || monthsToAdd <= -12) {
+                    yearsToAdd = monthsToAdd / 12;
+                    monthsToAdd = monthsToAdd % 12;
+                }
+                
+                // First add years, then months
+                instant = iChronology.years().add(instant, yearsToAdd);
+                instant = iChronology.months().add(instant, monthsToAdd);
+            } else { // Day field
+                instant = iChronology.days().add(instant, valueToAdd);
+            }
+
+            // Ensure the result is valid for MonthDay
+            int[] newValues = iChronology.get(partial, instant);
+            int dayOfMonth = newValues[1];
+            int monthOfYear = newValues[0];
+            
+            // If the result is February 29th but the new year is not a leap year, adjust to February 28th
+            if (monthOfYear == 2 && dayOfMonth == 29 && !iChronology.year().isLeap(instant)) {
+                newValues[1] = 28;
+            }
+
+            return newValues;
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
