diff --git a/tmp/9d8ede48-f5ad-4f31-ae6e-813aed8c0ee3_buggy.java b/tmp/443d3098-5250-4215-b037-7dd41944f02b_fixed.java
index 10616db..973269f 100644
--- a/tmp/9d8ede48-f5ad-4f31-ae6e-813aed8c0ee3_buggy.java
+++ b/tmp/443d3098-5250-4215-b037-7dd41944f02b_fixed.java
@@ -1,19 +1,33 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
         // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+            int[] newValues = iChronology.get(partial, instant);
+            
+            // Adjust for end of month, especially for leap years
+            if (partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && 
+                partial.getFieldType(1).equals(DateTimeFieldType.dayOfMonth())) {
+                int month = newValues[0];
+                int day = newValues[1];
+                YearMonth yearMonth = new YearMonth(2000, month); // Using year 2000 as a reference year
+                int maxDaysInMonth = yearMonth.toLocalDate(29).dayOfMonth().getMaximumValue();
+                if (day > maxDaysInMonth) {
+                    newValues[1] = maxDaysInMonth;
+                }
+            }
+            
+            return newValues;
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
