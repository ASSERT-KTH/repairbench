diff --git a/tmp/9b8a5938-097b-4fa8-b27e-e1ffb74fd825_buggy.java b/tmp/6078c0d5-5dac-4287-8737-07d12e7522ee_fixed.java
index 10616db..76df4a4 100644
--- a/tmp/9b8a5938-097b-4fa8-b27e-e1ffb74fd825_buggy.java
+++ b/tmp/6078c0d5-5dac-4287-8737-07d12e7522ee_fixed.java
@@ -1,19 +1,36 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
-            instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+        long newInstant = add(instant, valueToAdd);
+        
+        // Create a new array to hold the adjusted values
+        int[] newValues = new int[values.length];
+        
+        // Adjust the month and day values
+        for (int i = 0, isize = partial.size(); i < isize; i++) {
+            DateTimeField field = partial.getFieldType(i).getField(iChronology);
+            if (field.getType() == DateTimeFieldType.monthOfYear()) {
+                newValues[i] = field.get(newInstant);
+            } else if (field.getType() == DateTimeFieldType.dayOfMonth()) {
+                int maxDay = iChronology.dayOfMonth().getMaximumValue(newInstant);
+                newValues[i] = Math.min(field.get(newInstant), maxDay);
+            } else {
+                newValues[i] = field.get(newInstant);
+            }
+        }
+        
+        return newValues;
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
