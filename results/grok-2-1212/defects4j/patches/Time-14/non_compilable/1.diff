diff --git a/tmp/d2bd4927-f5d8-44d5-a974-f22c8f60bcc3_buggy.java b/tmp/2f55d993-9201-49cf-ab98-7fe90c294ce5_fixed.java
index 10616db..4e017d4 100644
--- a/tmp/d2bd4927-f5d8-44d5-a974-f22c8f60bcc3_buggy.java
+++ b/tmp/2f55d993-9201-49cf-ab98-7fe90c294ce5_fixed.java
@@ -1,19 +1,38 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
+    
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
-            instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+        
+        // Calculate the new instant
+        long newInstant = add(instant, valueToAdd);
+        
+        // Get the new values from the new instant
+        int[] newValues = iChronology.get(partial, newInstant);
+        
+        // Handle the case of February 29th and end of month
+        if (partial.getFieldType(0).getType().equals(DateTimeFieldType.monthOfYear())) {
+            int month = newValues[0];
+            int day = newValues[1];
+            int maxDay = iChronology.dayOfMonth().getMaximumValue(newInstant);
+            
+            // If the day is greater than the maximum day of the month, adjust it
+            if (day > maxDay) {
+                newValues[1] = maxDay;
+            }
+        }
+        
+        return newValues;
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
