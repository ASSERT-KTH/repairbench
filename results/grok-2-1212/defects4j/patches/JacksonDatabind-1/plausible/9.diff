diff --git a/tmp/264b697b-98c0-469a-b287-349411a0ff7a_buggy.java b/tmp/f5d15d52-4fd4-4177-a3e0-61a64babd4b0_fixed.java
index dbadad4..4ab2549 100644
--- a/tmp/264b697b-98c0-469a-b287-349411a0ff7a_buggy.java
+++ b/tmp/f5d15d52-4fd4-4177-a3e0-61a64babd4b0_fixed.java
@@ -1,50 +1,52 @@
     /**
      * Alternative to {@link #serializeAsField} that is used when a POJO
      * is serialized as JSON Array; the difference is that no field names
      * are written.
      * 
      * @since 2.1
      */
     public void serializeAsColumn(Object bean, JsonGenerator jgen, SerializerProvider prov)
         throws Exception
     {
         Object value = get(bean);
-        if (value == null) { // nulls need specialized handling
-            if (_nullSerializer != null) {
-                _nullSerializer.serialize(null, jgen, prov);
-            } else { // can NOT suppress entries in tabular output
+        if (value == null) {
+            // Always write a single null, regardless of _nullSerializer
             jgen.writeNull();
+            return;
         }
-        }
+
         // otherwise find serializer to use
         JsonSerializer<Object> ser = _serializer;
         if (ser == null) {
             Class<?> cls = value.getClass();
             PropertySerializerMap map = _dynamicSerializers;
             ser = map.serializerFor(cls);
             if (ser == null) {
                 ser = _findAndAddDynamic(map, cls, prov);
             }
         }
+
         // and then see if we must suppress certain values (default, empty)
         if (_suppressableValue != null) {
             if (MARKER_FOR_EMPTY == _suppressableValue) {
-                if (ser.isEmpty(value)) { // can NOT suppress entries in tabular output
+                if (ser.isEmpty(value)) {
                     serializeAsPlaceholder(bean, jgen, prov);
                     return;
                 }
-            } else if (_suppressableValue.equals(value)) { // can NOT suppress entries in tabular output
+            } else if (_suppressableValue.equals(value)) {
                 serializeAsPlaceholder(bean, jgen, prov);
                 return;
             }
         }
+
         // For non-nulls: simple check for direct cycles
         if (value == bean) {
             _handleSelfReference(bean, ser);
         }
+
         if (_typeSerializer == null) {
             ser.serialize(value, jgen, prov);
         } else {
             ser.serializeWithType(value, jgen, prov, _typeSerializer);
         }
     }
\ No newline at end of file
