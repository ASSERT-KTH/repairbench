diff --git a/tmp/103a2925-1c42-406f-8bb1-30b027e09e58_buggy.java b/tmp/376cb12d-927f-4791-ac83-e475f00a9f24_fixed.java
index 544303b..d1308c0 100644
--- a/tmp/103a2925-1c42-406f-8bb1-30b027e09e58_buggy.java
+++ b/tmp/376cb12d-927f-4791-ac83-e475f00a9f24_fixed.java
@@ -1,29 +1,47 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    double mostNegative = getMostNegativeRhs();
+
     for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
         if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
+            coefficients[i] = getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);
+            // Check if this variable is the only one that can take this value
+            boolean isUnique = true;
+            for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + getOriginalNumDecisionVariables(); j++) {
+                if (j != getNumObjectiveFunctions() + i && tableau.getEntry(basicRow, j) == 1) {
+                    isUnique = false;
+                    break;
                 }
             }
+            if (!isUnique) {
+                coefficients[i] = 0; // If not unique, set to 0
             }
+        } else {
+            coefficients[i] = restrictToNonNegative ? 0 : -mostNegative;
         }
+    }
+
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
+
+private double getMostNegativeRhs() {
+    double mostNegative = 0;
+    for (int i = 0; i < getNumObjectiveFunctions() + getOriginalNumDecisionVariables(); i++) {
+        Integer basicRow = getBasicRow(i);
+        if (basicRow != null) {
+            double value = getEntry(basicRow, getRhsOffset());
+            if (value < mostNegative) {
+                mostNegative = value;
+            }
+        }
+    }
+    return mostNegative;
+}
\ No newline at end of file
