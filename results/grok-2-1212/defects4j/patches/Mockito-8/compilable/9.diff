diff --git a/tmp/800fc967-591b-4e00-8e08-2ba749e5e338_buggy.java b/tmp/cc664105-c72d-49ae-9f7a-207f31f79fd5_fixed.java
index 42b58d0..cdf2e74 100644
--- a/tmp/800fc967-591b-4e00-8e08-2ba749e5e338_buggy.java
+++ b/tmp/cc664105-c72d-49ae-9f7a-207f31f79fd5_fixed.java
@@ -1,19 +1,29 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
     TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+    
     for (int i = 0; i < actualTypeArguments.length; i++) {
         TypeVariable typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
+        // Check if the actual type argument is the same as the class type to avoid self-reference
+        if (actualTypeArgument.equals(classType)) {
+            continue;
+        }
+
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
+
+        // Recursively process nested parameterized types
+        if (actualTypeArgument instanceof ParameterizedType) {
+            registerTypeVariablesOn(actualTypeArgument);
+        }
     }
 }
\ No newline at end of file
