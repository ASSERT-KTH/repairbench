diff --git a/tmp/cb93fcb5-9f4d-4b68-9abf-076a5c8eed09_buggy.java b/tmp/a54ce59a-0af2-418c-918f-176d8263f779_fixed.java
index 42b58d0..c9108e8 100644
--- a/tmp/cb93fcb5-9f4d-4b68-9abf-076a5c8eed09_buggy.java
+++ b/tmp/a54ce59a-0af2-418c-918f-176d8263f779_fixed.java
@@ -1,19 +1,49 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+    Type rawType = parameterizedType.getRawType();
+    if (!(rawType instanceof Class)) {
+        return;
+    }
+    TypeVariable[] typeParameters = ((Class<?>) rawType).getTypeParameters();
+
+    // Check for self-referential types
+    if (typeParameters.length == actualTypeArguments.length) {
         for (int i = 0; i < actualTypeArguments.length; i++) {
             TypeVariable typeParameter = typeParameters[i];
             Type actualTypeArgument = actualTypeArguments[i];
 
-            if (actualTypeArgument instanceof WildcardType) {
+            // Avoid infinite recursion with self-referential types
+            if (isSelfReferential(typeParameter, actualTypeArgument)) {
+                contextualActualTypeParameters.put(typeParameter, typeParameter);
+            } else if (actualTypeArgument instanceof WildcardType) {
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
+            } else if (actualTypeArgument instanceof TypeVariable) {
+                // Handle nested type variables
+                TypeVariable nestedTypeVariable = (TypeVariable) actualTypeArgument;
+                if (contextualActualTypeParameters.containsKey(nestedTypeVariable)) {
+                    contextualActualTypeParameters.put(typeParameter, contextualActualTypeParameters.get(nestedTypeVariable));
                 } else {
                     contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
                 }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
+            } else {
+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
+            }
+        }
+    }
+}
+
+private boolean isSelfReferential(TypeVariable typeParameter, Type actualTypeArgument) {
+    if (actualTypeArgument instanceof TypeVariable) {
+        return typeParameter.equals(actualTypeArgument);
+    }
+    return false;
 }
+
+private Type boundsOf(WildcardType wildcardType) {
+    Type[] upperBounds = wildcardType.getUpperBounds();
+    return upperBounds.length > 0 ? upperBounds[0] : Object.class;
 }
\ No newline at end of file
