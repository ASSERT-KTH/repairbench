diff --git a/tmp/008aa96b-91ab-4a8f-90c2-736cfb8284a5_buggy.java b/tmp/65941484-4953-4a24-b729-1b5ade4a8e07_fixed.java
index 42b58d0..38b5ccc 100644
--- a/tmp/008aa96b-91ab-4a8f-90c2-736cfb8284a5_buggy.java
+++ b/tmp/65941484-4953-4a24-b729-1b5ade4a8e07_fixed.java
@@ -1,19 +1,39 @@
     protected void registerTypeVariablesOn(Type classType) {
         if (!(classType instanceof ParameterizedType)) {
             return;
         }
         ParameterizedType parameterizedType = (ParameterizedType) classType;
         TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
         Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+        
+        // Check for self-referential types to avoid recursion
+        Set<TypeVariable> processedTypes = new HashSet<>();
+        
         for (int i = 0; i < actualTypeArguments.length; i++) {
             TypeVariable typeParameter = typeParameters[i];
             Type actualTypeArgument = actualTypeArguments[i];
 
+            if (processedTypes.contains(typeParameter)) {
+                continue; // Skip already processed self-referential types
+            }
+            
+            processedTypes.add(typeParameter);
+
             if (actualTypeArgument instanceof WildcardType) {
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
+            } else if (actualTypeArgument instanceof TypeVariable) {
+                // Handle self-referential types
+                TypeVariable selfRefType = (TypeVariable) actualTypeArgument;
+                if (processedTypes.contains(selfRefType)) {
+                    contextualActualTypeParameters.put(typeParameter, selfRefType);
+                } else {
+                    contextualActualTypeParameters.put(typeParameter, selfRefType);
+                    // Recursively process self-referential types
+                    registerTypeVariablesOn(selfRefType);
+                }
             } else {
                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             }
             // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
         }
     }
\ No newline at end of file
