diff --git a/tmp/db7ff906-86e1-43dd-9e59-53003b9fc894_buggy.java b/tmp/2ceb337f-fc2c-4696-8635-1f99b0590af5_fixed.java
index 7e64f1d..214f24e 100644
--- a/tmp/db7ff906-86e1-43dd-9e59-53003b9fc894_buggy.java
+++ b/tmp/2ceb337f-fc2c-4696-8635-1f99b0590af5_fixed.java
@@ -1,78 +1,71 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
 protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
 {
-        List tokens = new ArrayList();
+    List<String> tokens = new ArrayList<>();
 
     boolean eatTheRest = false;
 
     for (int i = 0; i < arguments.length; i++)
     {
         String arg = arguments[i];
 
         if ("--".equals(arg))
         {
             eatTheRest = true;
             tokens.add("--");
         }
         else if ("-".equals(arg))
         {
             tokens.add("-");
         }
         else if (arg.startsWith("-"))
         {
             String opt = Util.stripLeadingHyphens(arg);
 
-                if (options.hasOption(opt))
+            int equalsIndex = opt.indexOf('=');
+            if (equalsIndex != -1)
             {
-                    tokens.add(arg);
+                String key = opt.substring(0, equalsIndex);
+                String value = opt.substring(equalsIndex + 1);
+
+                if (options.hasOption(key) && options.getOption(key).hasArg())
+                {
+                    tokens.add(arg.startsWith("--") ? "--" + key : "-" + key);
+                    tokens.add(value);
                 }
                 else
                 {
-                    if (options.hasOption(arg.substring(0, 2)))
+                    eatTheRest = stopAtNonOption;
+                    tokens.add(arg);
+                }
+            }
+            else if (options.hasOption(opt))
+            {
+                tokens.add(arg);
+            }
+            else if (arg.length() > 1 && options.hasOption(arg.substring(0, 2)))
             {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
                 tokens.add(arg.substring(0, 2)); // -D
                 tokens.add(arg.substring(2)); // property=value
             }
             else
             {
                 eatTheRest = stopAtNonOption;
                 tokens.add(arg);
             }
         }
-            }
         else
         {
             tokens.add(arg);
         }
 
         if (eatTheRest)
         {
             for (i++; i < arguments.length; i++)
             {
                 tokens.add(arguments[i]);
             }
         }
     }
 
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+    return tokens.toArray(new String[0]);
 }
\ No newline at end of file
