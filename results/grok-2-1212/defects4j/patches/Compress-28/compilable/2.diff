diff --git a/tmp/163b8802-f00a-4671-8e4f-5d1d14aea5f0_buggy.java b/tmp/6339cbfe-1eb2-4413-821e-6b4b8c3111a3_fixed.java
index 0f439b3..6689e66 100644
--- a/tmp/163b8802-f00a-4671-8e4f-5d1d14aea5f0_buggy.java
+++ b/tmp/6339cbfe-1eb2-4413-821e-6b4b8c3111a3_fixed.java
@@ -1,38 +1,50 @@
     /**
      * Reads bytes from the current tar archive entry.
      *
      * This method is aware of the boundaries of the current
      * entry in the archive and will deal with them as if they
      * were this stream's start and EOF.
      *
      * @param buf The buffer into which to place bytes read.
      * @param offset The offset at which to place bytes read.
      * @param numToRead The number of bytes to read.
      * @return The number of bytes read, or -1 at EOF.
      * @throws IOException on error
      */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
         int totalRead = 0;
 
-        if (hasHitEOF || entryOffset >= entrySize) {
+        if (hasHitEOF) {
             return -1;
         }
 
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
 
+        if (entryOffset >= entrySize) {
+            return -1;
+        }
+
         numToRead = Math.min(numToRead, available());
 
         totalRead = is.read(buf, offset, numToRead);
         count(totalRead);
 
         if (totalRead == -1) {
+            if (entryOffset < entrySize) {
+                // We've reached the end of the stream before reaching the expected entry size
+                throw new IOException("Truncated TAR archive: expected " + entrySize + " bytes, got " + entryOffset);
+            }
             hasHitEOF = true;
         } else {
             entryOffset += totalRead;
+            if (entryOffset > entrySize) {
+                // We've read past the end of the entry
+                throw new IOException("Read past end of TAR entry: expected " + entrySize + " bytes, got " + entryOffset);
+            }
         }
 
         return totalRead;
     }
\ No newline at end of file
