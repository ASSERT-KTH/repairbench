diff --git a/tmp/d559b7d9-f28b-4df4-9f21-5e235f6d4def_buggy.java b/tmp/694c42c6-7b3a-40e5-ae0f-be7fce8bcbe6_fixed.java
index 14b78fb..6e2543f 100644
--- a/tmp/d559b7d9-f28b-4df4-9f21-5e235f6d4def_buggy.java
+++ b/tmp/694c42c6-7b3a-40e5-ae0f-be7fce8bcbe6_fixed.java
@@ -1,56 +1,45 @@
 /**
  * Finds the next text wrap position after <code>startPos</code> for the
  * text in <code>text</code> with the column width <code>width</code>.
  * The wrap point is the last position before startPos+width having a 
  * whitespace character (space, \n, \r). If there is no whitespace character
  * before startPos+width, it will return startPos+width.
  *
  * @param text The text being searched for the wrap position
  * @param width width of the wrapped text
  * @param startPos position from which to start the lookup whitespace
  * character
-     * @return postion on which the text must be wrapped or -1 if the wrap
+ * @return position on which the text must be wrapped or -1 if the wrap
  * position is at the end of the text
  */
 protected int findWrapPos(String text, int width, int startPos)
 {
     int pos;
     
-        // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+    // Check for newline or tab before or at the width
+    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= startPos + width)
+            || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= startPos + width))
     {
         return pos + 1;
     }
     else if (startPos + width >= text.length())
     {
         return -1;
     }
 
+    // Look for the last whitespace character before startPos+width
+    pos = startPos + width - 1;
 
-        // look for the last whitespace character before startPos+width
-        pos = startPos + width;
-
-        char c;
-
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
+    while (pos >= startPos)
     {
-            --pos;
-        }
-
-        // if we found it - just return
-        if (pos > startPos)
+        char c = text.charAt(pos);
+        if (c == ' ' || c == '\n' || c == '\r')
         {
-            return pos;
+            return pos + 1;
         }
-        
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
+        pos--;
     }
-        return pos == text.length() ? -1 : pos;
+
+    // If no whitespace found, return startPos + width
+    return startPos + width;
 }
\ No newline at end of file
