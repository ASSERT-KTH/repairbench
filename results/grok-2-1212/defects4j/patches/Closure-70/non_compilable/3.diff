diff --git a/tmp/4f4df85d-4f57-46ff-b19e-b5b3df585b8f_buggy.java b/tmp/62572cc7-07ed-487e-87cd-78c4f56aa6a0_fixed.java
index 1530b34..dba54a0 100644
--- a/tmp/4f4df85d-4f57-46ff-b19e-b5b3df585b8f_buggy.java
+++ b/tmp/62572cc7-07ed-487e-87cd-78c4f56aa6a0_fixed.java
@@ -1,23 +1,63 @@
     /**
      * Declares all of a function's arguments.
      */
     private void declareArguments(Node functionNode) {
         Node astParameters = functionNode.getFirstChild().getNext();
         Node body = astParameters.getNext();
         FunctionType functionType = (FunctionType) functionNode.getJSType();
         if (functionType != null) {
             Node jsDocParameters = functionType.getParametersNode();
             if (jsDocParameters != null) {
                 Node jsDocParameter = jsDocParameters.getFirstChild();
                 for (Node astParameter : astParameters.children()) {
                     if (jsDocParameter != null) {
-              defineSlot(astParameter, functionNode,
-                  jsDocParameter.getJSType(), true);
+                        // Check if the parameter name already exists in the scope
+                        String paramName = astParameter.getString();
+                        if (symbolTable.getOwnSlot(paramName) != null) {
+                            reportError(astParameter, "variable " + paramName + " redefined");
+                        } else {
+                            defineSlot(astParameter, functionNode, jsDocParameter.getJSType(), true);
                             jsDocParameter = jsDocParameter.getNext();
+                        }
                     } else {
                         defineSlot(astParameter, functionNode, null, true);
                     }
                 }
             }
         }
+        // Process the function body to ensure type consistency
+        processFunctionBody(body, functionNode);
     } // end declareArguments
+
+    // Helper method to process function body and ensure type consistency
+    private void processFunctionBody(Node body, Node functionNode) {
+        for (Node child : body.children()) {
+            if (child.isVar()) {
+                Node nameNode = child.getFirstChild();
+                String varName = nameNode.getString();
+                if (symbolTable.getOwnSlot(varName) != null) {
+                    reportError(nameNode, "variable " + varName + " redefined");
+                } else {
+                    defineSlot(nameNode, functionNode, nameNode.getJSType(), false);
+                }
+            } else if (child.isAssign()) {
+                Node left = child.getFirstChild();
+                Node right = left.getNext();
+                if (left.isName()) {
+                    JSType leftType = symbolTable.getSlot(left.getString()).getType();
+                    if (leftType != null && !leftType.isSubtype(right.getJSType())) {
+                        reportError(child, "assignment\n" +
+                                            "found   : " + right.getJSType() + "\n" +
+                                            "required: " + leftType);
+                    }
+                }
+            }
+        }
+    }
+
+    // Helper method to report errors
+    private void reportError(Node node, String message) {
+        // Implement error reporting logic here
+        // This is a placeholder for the actual error reporting mechanism
+        System.err.println("Error at " + node.getSourceFileName() + ":" + node.getLineno() + " - " + message);
+    }
\ No newline at end of file
