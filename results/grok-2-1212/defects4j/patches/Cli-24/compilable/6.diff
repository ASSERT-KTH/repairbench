diff --git a/tmp/246aa658-0429-4964-a113-b87fe6dbf89e_buggy.java b/tmp/55aa1e6e-ef73-431f-af97-7cde3207721c_fixed.java
index 229b3e7..3aa08e1 100644
--- a/tmp/246aa658-0429-4964-a113-b87fe6dbf89e_buggy.java
+++ b/tmp/55aa1e6e-ef73-431f-af97-7cde3207721c_fixed.java
@@ -1,55 +1,48 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
+    // Adjust nextLineTabStop if it's greater than or equal to width
+    int adjustedTabStop = Math.min(nextLineTabStop, width - 1);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+    // all following lines must be padded with adjustedTabStop space characters
+    final String padding = createPadding(adjustedTabStop);
 
     while (true)
     {
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        pos = findWrapPos(text, width - adjustedTabStop, 0);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+        if (text.length() > width - adjustedTabStop && pos == adjustedTabStop - 1) 
         {
-                pos = width;
+            pos = width - adjustedTabStop;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
