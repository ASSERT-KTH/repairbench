diff --git a/tmp/d051a82d-05d3-4e50-9b82-d28c51759206_buggy.java b/tmp/8e9cc47e-974e-4652-9416-4e7391f84572_fixed.java
index 3ec995f..4020a76 100644
--- a/tmp/d051a82d-05d3-4e50-9b82-d28c51759206_buggy.java
+++ b/tmp/8e9cc47e-974e-4652-9416-4e7391f84572_fixed.java
@@ -1,26 +1,43 @@
 /**
  * <p>
  * Converts the given Java version string to an <code>int</code>.
  * </p>
  * 
  * <p>
  * Example return values:
  * </p>
  * <ul>
  * <li><code>120</code> for Java 1.2</li>
  * <li><code>131</code> for Java 1.3.1</li>
  * <li><code>160</code> for Java 1.6.0_20</li>
  * </ul>
  * 
  * <p>
  * Patch releases are not reported.
  * </p>
  * <p>
  * This method is package private instead of private to support unit test invocation.
  * </p>
  * 
+ * @param version the version string
  * @return the version, for example 131 for Java 1.3.1
  */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+static int toJavaVersionInt(String version) {
+    if (version == null || version.isEmpty()) {
+        return 0;
+    }
+
+    // Extract the version number from the string
+    String versionNumber = version.replaceAll("[^\\d.]", "");
+    String[] parts = versionNumber.split("\\.");
+
+    if (parts.length == 0) {
+        return 0;
+    }
+
+    int major = Integer.parseInt(parts[0]);
+    int minor = parts.length > 1 ? Integer.parseInt(parts[1]) : 0;
+    int patch = parts.length > 2 ? Integer.parseInt(parts[2]) : 0;
+
+    return major * 100 + minor * 10 + patch;
 }
\ No newline at end of file
