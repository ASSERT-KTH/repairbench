diff --git a/tmp/afe293e8-01ba-45ff-9946-3fee512a8621_buggy.java b/tmp/1b452e34-d2c3-40e1-8887-007a70b49645_fixed.java
index 3ec995f..bd6d36c 100644
--- a/tmp/afe293e8-01ba-45ff-9946-3fee512a8621_buggy.java
+++ b/tmp/1b452e34-d2c3-40e1-8887-007a70b49645_fixed.java
@@ -1,26 +1,50 @@
 /**
  * <p>
  * Converts the given Java version string to an <code>int</code>.
  * </p>
  * 
  * <p>
  * Example return values:
  * </p>
  * <ul>
  * <li><code>120</code> for Java 1.2</li>
  * <li><code>131</code> for Java 1.3.1</li>
  * <li><code>160</code> for Java 1.6.0_20</li>
  * </ul>
  * 
  * <p>
  * Patch releases are not reported.
  * </p>
  * <p>
  * This method is package private instead of private to support unit test invocation.
  * </p>
  * 
-     * @return the version, for example 131 for Java 1.3.1
+ * @param version the version string, may be null or empty
+ * @return the version, for example 131 for Java 1.3.1, or 0 if the version string cannot be parsed
  */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+static int toJavaVersionInt(String version) {
+    if (version == null || version.isEmpty()) {
+        return 0;
+    }
+
+    String[] parts = version.split("\\D+");
+    if (parts.length < 2) {
+        return 0;
+    }
+
+    int major = 0;
+    int minor = 0;
+    int patch = 0;
+
+    try {
+        major = Integer.parseInt(parts[0]);
+        minor = Integer.parseInt(parts[1]);
+        if (parts.length > 2) {
+            patch = Integer.parseInt(parts[2]);
+        }
+    } catch (NumberFormatException e) {
+        return 0;
+    }
+
+    return major * 100 + minor * 10 + patch;
 }
\ No newline at end of file
