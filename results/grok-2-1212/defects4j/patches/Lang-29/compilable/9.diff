diff --git a/tmp/1a13332a-56fb-4192-8208-4c77cf155d6b_buggy.java b/tmp/0a527161-da5c-47fc-94a3-13df794f17ae_fixed.java
index 3ec995f..14ae0ef 100644
--- a/tmp/1a13332a-56fb-4192-8208-4c77cf155d6b_buggy.java
+++ b/tmp/0a527161-da5c-47fc-94a3-13df794f17ae_fixed.java
@@ -1,26 +1,69 @@
     /**
      * <p>
      * Converts the given Java version string to an <code>int</code>.
      * </p>
      * 
      * <p>
      * Example return values:
      * </p>
      * <ul>
      * <li><code>120</code> for Java 1.2</li>
      * <li><code>131</code> for Java 1.3.1</li>
      * <li><code>160</code> for Java 1.6.0_20</li>
      * </ul>
      * 
      * <p>
      * Patch releases are not reported.
      * </p>
      * <p>
      * This method is package private instead of private to support unit test invocation.
      * </p>
      * 
      * @return the version, for example 131 for Java 1.3.1
      */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+    static int toJavaVersionInt(String version) {
+        if (version == null || version.isEmpty()) {
+            return 0;
+        }
+        
+        String[] parts = version.split("\\.");
+        int major = 0;
+        int minor = 0;
+        int patch = 0;
+        
+        // Extract major version
+        for (String part : parts[0].split("-")) {
+            try {
+                major = Integer.parseInt(part);
+                break;
+            } catch (NumberFormatException e) {
+                // Ignore non-numeric parts
+            }
+        }
+        
+        if (parts.length > 1) {
+            // Extract minor version
+            for (String part : parts[1].split("-")) {
+                try {
+                    minor = Integer.parseInt(part);
+                    break;
+                } catch (NumberFormatException e) {
+                    // Ignore non-numeric parts
+                }
+            }
+        }
+        
+        if (parts.length > 2) {
+            // Extract patch version
+            for (String part : parts[2].split("-")) {
+                try {
+                    patch = Integer.parseInt(part);
+                    break;
+                } catch (NumberFormatException e) {
+                    // Ignore non-numeric parts
+                }
+            }
+        }
+        
+        return major * 100 + minor * 10 + patch;
     }
\ No newline at end of file
