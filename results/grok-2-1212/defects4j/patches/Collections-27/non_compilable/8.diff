diff --git a/tmp/292188bd-8443-4713-ac84-f682bdf5a4ae_buggy.java b/tmp/df2cf24d-3b6e-4699-9ebb-ef4fc9debe4c_fixed.java
index e69de29..d83138b 100644
--- a/tmp/292188bd-8443-4713-ac84-f682bdf5a4ae_buggy.java
+++ b/tmp/df2cf24d-3b6e-4699-9ebb-ef4fc9debe4c_fixed.java
@@ -0,0 +1,41 @@
+private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
+    in.defaultReadObject();
+    
+    // Read the map and collection type
+    Map<K, Object> map = (Map<K, Object>) in.readObject();
+    Class<?> collectionType = (Class<?>) in.readObject();
+    
+    // Validate that the collection type is a valid Collection
+    if (!Collection.class.isAssignableFrom(collectionType)) {
+        throw new UnsupportedOperationException("Invalid collection type: " + collectionType.getName());
+    }
+    
+    // Initialize the map and set the collection type
+    this.map = new HashMap<>();
+    this.collectionType = collectionType;
+    
+    // Populate the map with deserialized entries
+    for (Map.Entry<K, Object> entry : map.entrySet()) {
+        K key = entry.getKey();
+        Object value = entry.getValue();
+        
+        if (value instanceof Collection) {
+            Collection<Object> collection = (Collection<Object>) value;
+            Collection<Object> newCollection = createCollection(collectionType);
+            newCollection.addAll(collection);
+            this.map.put(key, newCollection);
+        } else {
+            Collection<Object> newCollection = createCollection(collectionType);
+            newCollection.add(value);
+            this.map.put(key, newCollection);
+        }
+    }
+}
+
+private <T> Collection<T> createCollection(Class<?> collectionClass) {
+    try {
+        return (Collection<T>) collectionClass.getDeclaredConstructor().newInstance();
+    } catch (Exception e) {
+        throw new IllegalArgumentException("Unable to instantiate collection: " + collectionClass.getName(), e);
+    }
+}
\ No newline at end of file
