diff --git a/tmp/8aac958d-8cf4-4cbe-8c58-29da4cd6f688_buggy.java b/tmp/bcfaeb6f-fa88-4590-bf6b-b92969cafe75_fixed.java
index e69de29..7fa30fd 100644
--- a/tmp/8aac958d-8cf4-4cbe-8c58-29da4cd6f688_buggy.java
+++ b/tmp/bcfaeb6f-fa88-4590-bf6b-b92969cafe75_fixed.java
@@ -0,0 +1,51 @@
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+
+public class MultiValueMap<K, V> implements Serializable {
+    private static final long serialVersionUID = 834176534042866011L;
+
+    private final Map<K, Collection<V>> map;
+    private final Class<? extends Collection> collectionClazz;
+
+    private MultiValueMap(Map<K, Collection<V>> map, Class<? extends Collection> collectionClazz) {
+        this.map = map;
+        this.collectionClazz = collectionClazz;
+    }
+
+    public static <K, V> MultiValueMap<K, V> multiValueMap(Map<K, Collection<V>> map, Class<? extends Collection> collectionClazz) {
+        return new MultiValueMap<>(map, collectionClazz);
+    }
+
+    private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {
+        stream.defaultReadObject();
+        Class<? extends Collection> deserializedCollectionClazz = (Class<? extends Collection>) stream.readObject();
+
+        // Check if the deserialized class is safe
+        if (!deserializedCollectionClazz.equals(ArrayList.class) && !deserializedCollectionClazz.equals(LinkedList.class)) {
+            throw new UnsupportedOperationException("Unsafe deserialization attempted with class: " + deserializedCollectionClazz.getName());
+        }
+
+        this.collectionClazz = deserializedCollectionClazz;
+        int size = stream.readInt();
+        for (int i = 0; i < size; i++) {
+            K key = (K) stream.readObject();
+            Collection<V> value = (Collection<V>) stream.readObject();
+            this.map.put(key, value);
+        }
+    }
+
+    private void writeObject(java.io.ObjectOutputStream stream) throws IOException {
+        stream.defaultWriteObject();
+        stream.writeObject(collectionClazz);
+        stream.writeInt(map.size());
+        for (Map.Entry<K, Collection<V>> entry : map.entrySet()) {
+            stream.writeObject(entry.getKey());
+            stream.writeObject(entry.getValue());
+        }
+    }
+}
\ No newline at end of file
