diff --git a/tmp/c57b9235-d0ea-40c3-af82-c424874d7dc3_buggy.java b/tmp/77e10c0c-a0e7-4f76-98e0-02d97173a2ed_fixed.java
index 9976e43..86da66d 100644
--- a/tmp/c57b9235-d0ea-40c3-af82-c424874d7dc3_buggy.java
+++ b/tmp/77e10c0c-a0e7-4f76-98e0-02d97173a2ed_fixed.java
@@ -1,76 +1,82 @@
 @Override
 public boolean isSubtype(JSType other) {
     if (!(other instanceof ArrowType)) {
         return false;
     }
 
     ArrowType that = (ArrowType) other;
 
     // This is described in Draft 2 of the ES4 spec,
     // Section 3.4.7: Subtyping Function Types.
 
     // this.returnType <: that.returnType (covariant)
     if (!this.returnType.isSubtype(that.returnType)) {
         return false;
     }
 
     // that.paramType[i] <: this.paramType[i] (contravariant)
     //
     // If this.paramType[i] is required,
     // then that.paramType[i] is required.
     //
     // In theory, the "required-ness" should work in the other direction as
     // well. In other words, if we have
     //
     // function f(number, number) {}
     // function g(number) {}
     //
     // Then f *should* not be a subtype of g, and g *should* not be
     // a subtype of f. But in practice, we do not implement it this way.
     // We want to support the use case where you can pass g where f is
     // expected, and pretend that g ignores the second argument.
     // That way, you can have a single "no-op" function, and you don't have
     // to create a new no-op function for every possible type signature.
     //
     // So, in this case, g < f, but f !< g
     Node thisParam = parameters.getFirstChild();
     Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
-      JSType thisParamType = thisParam.getJSType();
-      JSType thatParamType = thatParam.getJSType();
-      if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
-          return false;
+    boolean thisHasMoreParams = true;
+    boolean thatHasMoreParams = true;
+    
+    while (thisHasMoreParams || thatHasMoreParams) {
+        JSType thisParamType = null;
+        JSType thatParamType = null;
+        
+        if (thisParam != null) {
+            thisParamType = thisParam.getJSType();
         }
+        
+        if (thatParam != null) {
+            thatParamType = thatParam.getJSType();
         }
         
-      boolean thisIsVarArgs = thisParam.isVarArgs();
-      boolean thatIsVarArgs = thatParam.isVarArgs();
+        boolean thisIsVarArgs = thisParam != null && thisParam.isVarArgs();
+        boolean thatIsVarArgs = thatParam != null && thatParam.isVarArgs();
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
+        if (thisParamType != null && thatParamType != null) {
+            if (!thatParamType.isSubtype(thisParamType)) {
+                return false;
+            }
+        } else if (thisParamType == null && thatParamType != null && !thatIsVarArgs) {
+            return false;
+        } else if (thisParamType != null && thatParamType == null && !thisIsVarArgs) {
+            return false;
+        }
 
-      // don't advance if we have variable arguments
         if (!thisIsVarArgs) {
-        thisParam = thisParam.getNext();
+            thisParam = thisParam != null ? thisParam.getNext() : null;
+            thisHasMoreParams = thisParam != null;
+        } else {
+            thisHasMoreParams = false;
         }
+
         if (!thatIsVarArgs) {
-        thatParam = thatParam.getNext();
+            thatParam = thatParam != null ? thatParam.getNext() : null;
+            thatHasMoreParams = thatParam != null;
+        } else {
+            thatHasMoreParams = false;
         }
-
-      // both var_args indicates the end
-      if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
     }
-    }
-
-    // "that" can't be a supertype, because it's missing a required arguement.
 
     return true;
 }
\ No newline at end of file
