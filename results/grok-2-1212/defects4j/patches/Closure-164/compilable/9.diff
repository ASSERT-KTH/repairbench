diff --git a/tmp/86a27288-2c1d-4dd1-8715-86557566e6c6_buggy.java b/tmp/49f87018-5f90-4158-8bec-9d7a7bbd293c_fixed.java
index 9976e43..2ef2736 100644
--- a/tmp/86a27288-2c1d-4dd1-8715-86557566e6c6_buggy.java
+++ b/tmp/49f87018-5f90-4158-8bec-9d7a7bbd293c_fixed.java
@@ -1,76 +1,64 @@
 @Override
 public boolean isSubtype(JSType other) {
     if (!(other instanceof ArrowType)) {
         return false;
     }
 
     ArrowType that = (ArrowType) other;
 
     // This is described in Draft 2 of the ES4 spec,
     // Section 3.4.7: Subtyping Function Types.
 
     // this.returnType <: that.returnType (covariant)
     if (!this.returnType.isSubtype(that.returnType)) {
         return false;
     }
 
     // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
     Node thisParam = parameters.getFirstChild();
     Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
-      JSType thisParamType = thisParam.getJSType();
-      JSType thatParamType = thatParam.getJSType();
-      if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
-          return false;
+    while (true) {
+        boolean thisIsVarArgs = thisParam != null && thisParam.isVarArgs();
+        boolean thatIsVarArgs = thatParam != null && thatParam.isVarArgs();
+
+        if (!thisIsVarArgs && thisParam == null) {
+            // All parameters of this have been checked
+            return thatParam == null || thatIsVarArgs;
         }
+
+        if (!thatIsVarArgs && thatParam == null) {
+            // All parameters of that have been checked, but this has more
+            return false;
         }
 
-      boolean thisIsVarArgs = thisParam.isVarArgs();
-      boolean thatIsVarArgs = thatParam.isVarArgs();
+        JSType thisParamType = thisParam != null ? thisParam.getJSType() : null;
+        JSType thatParamType = thatParam != null ? thatParam.getJSType() : null;
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
+        if (thisParamType != null && thatParamType != null) {
+            if (!thatParamType.isSubtype(thisParamType)) {
+                return false;
+            }
+        } else if (thisParamType == null && thatParamType != null) {
+            // this has fewer parameters than that
+            return false;
+        } else if (thisParamType != null && thatParamType == null) {
+            // that has fewer parameters than this
+            if (!thisIsVarArgs) {
+                return false;
+            }
+        }
 
-      // don't advance if we have variable arguments
         if (!thisIsVarArgs) {
             thisParam = thisParam.getNext();
         }
         if (!thatIsVarArgs) {
             thatParam = thatParam.getNext();
         }
 
-      // both var_args indicates the end
         if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
+            break;
         }
     }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
-
     return true;
 }
\ No newline at end of file
