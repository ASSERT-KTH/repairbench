diff --git a/tmp/c4ec7846-4e18-4e10-a243-8c86bb9064ee_buggy.java b/tmp/58c0e3ce-090c-4ad3-8df8-7cd2fdb36103_fixed.java
index 9976e43..72012f6 100644
--- a/tmp/c4ec7846-4e18-4e10-a243-8c86bb9064ee_buggy.java
+++ b/tmp/58c0e3ce-090c-4ad3-8df8-7cd2fdb36103_fixed.java
@@ -1,76 +1,66 @@
 @Override
 public boolean isSubtype(JSType other) {
     if (!(other instanceof ArrowType)) {
         return false;
     }
 
     ArrowType that = (ArrowType) other;
 
-    // This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.7: Subtyping Function Types.
-
-    // this.returnType <: that.returnType (covariant)
+    // Check return type (covariant)
     if (!this.returnType.isSubtype(that.returnType)) {
         return false;
     }
 
-    // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
     Node thisParam = parameters.getFirstChild();
     Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
+    boolean thisIsVarArgs = false;
+    boolean thatIsVarArgs = false;
+
+    while (thisParam != null || thatParam != null) {
+        if (thisParam != null) {
+            thisIsVarArgs = thisParam.isVarArgs();
+        }
+        if (thatParam != null) {
+            thatIsVarArgs = thatParam.isVarArgs();
+        }
+
+        if (thisIsVarArgs && thatIsVarArgs) {
+            // Both are varargs, so we can stop checking parameters
+            break;
+        }
+
+        if (thisParam == null || thatParam == null) {
+            // One of them has ended, check if they should match
+            if (!thisIsVarArgs && !thatIsVarArgs) {
+                // Neither is varargs, they must match in length
+                return false;
+            }
+            if (thisIsVarArgs && thatParam == null) {
+                // 'this' is varargs and 'that' has ended, it's ok
+                break;
+            }
+            if (thatIsVarArgs && thisParam == null) {
+                // 'that' is varargs and 'this' has ended, it's not ok
+                return false;
+            }
+        } else {
             JSType thisParamType = thisParam.getJSType();
             JSType thatParamType = thatParam.getJSType();
-      if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
+            if (thisParamType != null && thatParamType != null) {
+                // Check contravariance for parameter types
+                if (!thatParamType.isSubtype(thisParamType)) {
                     return false;
                 }
             }
+        }
 
-      boolean thisIsVarArgs = thisParam.isVarArgs();
-      boolean thatIsVarArgs = thatParam.isVarArgs();
-
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
-      // don't advance if we have variable arguments
         if (!thisIsVarArgs) {
             thisParam = thisParam.getNext();
         }
         if (!thatIsVarArgs) {
             thatParam = thatParam.getNext();
         }
-
-      // both var_args indicates the end
-      if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
     }
-    }
-
-    // "that" can't be a supertype, because it's missing a required arguement.
 
     return true;
 }
\ No newline at end of file
