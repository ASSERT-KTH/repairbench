diff --git a/tmp/81899f39-d2ff-49b1-b179-94d84a0f84a2_buggy.java b/tmp/07484db4-ddaf-4590-ad19-5de3589fc162_fixed.java
index 63a7c80..ae38915 100644
--- a/tmp/81899f39-d2ff-49b1-b179-94d84a0f84a2_buggy.java
+++ b/tmp/07484db4-ddaf-4590-ad19-5de3589fc162_fixed.java
@@ -1,77 +1,88 @@
-    /**
-     * Arranges the items within a container.
-     *
-     * @param container  the container.
-     * @param constraint  the constraint.
-     * @param g2  the graphics device.
-     *
-     * @return The container size after the arrangement.
-     */
-    protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
-                               RectangleConstraint constraint) {
+protected Size2D arrangeFF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) {
     double[] w = new double[5];
     double[] h = new double[5];
     w[0] = constraint.getWidth();
+    h[0] = 0.0;
+    h[1] = 0.0;
+    w[2] = 0.0;
+    w[3] = 0.0;
+    h[2] = 0.0;
+    h[3] = 0.0;
+    h[4] = 0.0;
+    w[4] = 0.0;
+
+    // Arrange top block
     if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
+        RectangleConstraint c1 = constraint.toFixedWidth(w[0]);
         Size2D size = this.topBlock.arrange(g2, c1);
         h[0] = size.height;
     }
-        w[1] = w[0];
+
+    // Arrange bottom block
     if (this.bottomBlock != null) {
+        double remainingHeight = constraint.getHeight() - h[0];
         RectangleConstraint c2 = new RectangleConstraint(w[0], null, 
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                LengthConstraintType.FIXED, 0.0, 
+                new Range(0.0, Math.max(0.0, remainingHeight)), 
+                LengthConstraintType.RANGE);
         Size2D size = this.bottomBlock.arrange(g2, c2);
         h[1] = size.height;
     }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+
+    // Calculate remaining height for center row
+    h[2] = Math.max(0.0, constraint.getHeight() - h[0] - h[1]);
+
+    // Arrange left block
     if (this.leftBlock != null) {
         RectangleConstraint c3 = new RectangleConstraint(0.0, 
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+                new Range(0.0, w[0]), LengthConstraintType.RANGE, 
+                h[2], null, LengthConstraintType.FIXED);
         Size2D size = this.leftBlock.arrange(g2, c3);
         w[2] = size.width;
     }
-        h[3] = h[2];
+
+    // Arrange right block
     if (this.rightBlock != null) {
+        double remainingWidth = w[0] - w[2];
         RectangleConstraint c4 = new RectangleConstraint(0.0, 
-                    new Range(0.0, constraint.getWidth() - w[2]),
+                new Range(0.0, Math.max(0.0, remainingWidth)), 
                 LengthConstraintType.RANGE, h[2], null, 
                 LengthConstraintType.FIXED);
         Size2D size = this.rightBlock.arrange(g2, c4);
         w[3] = size.width;
     }
-        h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
-        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
+
+    // Calculate width for center block
+    w[4] = Math.max(0.0, w[0] - w[2] - w[3]);
+
+    // Arrange center block
     if (this.centerBlock != null) {
-            this.centerBlock.arrange(g2, c5);
+        RectangleConstraint c5 = new RectangleConstraint(w[4], h[2]);
+        Size2D size = this.centerBlock.arrange(g2, c5);
+        h[4] = size.height;
     }
 
+    // Update height of center row if center block is taller
+    h[2] = Math.max(h[2], h[4]);
+
+    // Set bounds for each block
     if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));
     }
     if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[0], h[1]));
     }
     if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));
     }
     if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+        this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[2]));
     }
     if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[2]));
     }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+
+    // Calculate and return final size
+    double totalHeight = h[0] + h[2] + h[1];
+    return new Size2D(w[0], totalHeight);
 }
\ No newline at end of file
