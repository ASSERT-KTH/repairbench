diff --git a/tmp/e1fadc28-caa6-4d20-94ff-a6b9ab5e9c4a_buggy.java b/tmp/991b1040-f084-4826-a79c-87176de0af57_fixed.java
index 6e05e4b..029e965 100644
--- a/tmp/e1fadc28-caa6-4d20-94ff-a6b9ab5e9c4a_buggy.java
+++ b/tmp/991b1040-f084-4826-a79c-87176de0af57_fixed.java
@@ -1,51 +1,41 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
     Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
-      if (name == null) {
-        name = new Name();
-        name.setIdentifier("");
-        isUnnamedFunction = true;
-      }
+    boolean isUnnamedFunction = name == null;
+    boolean isStatement = functionNode.getParent() instanceof ScriptNode ||
+                          functionNode.getParent() instanceof Block;
+
     Node node = newNode(Token.FUNCTION);
+    
+    if (!isUnnamedFunction) {
         Node newName = transform(name);
-      if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
-        newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
-        newName.setCharno(position2charno(lpColumn));
-      }
-
         node.addChildToBack(newName);
+    }
+
     Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
-      Name fnName = functionNode.getFunctionName();
-      if (fnName != null) {
-        lp.setLineno(fnName.getLineno());
+    int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
+    lp.setCharno(position2charno(lparenCharno));
+
+    // Set the line number for the left parenthesis
+    if (!isUnnamedFunction) {
+        lp.setLineno(name.getLineno());
     } else {
         lp.setLineno(functionNode.getLineno());
     }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
 
-      lp.setCharno(position2charno(lparenCharno));
     for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
     }
     node.addChildToBack(lp);
 
     Node bodyNode = transform(functionNode.getBody());
     parseDirectives(bodyNode);
     node.addChildToBack(bodyNode);
+
+    // Handle unnamed function statements as errors
+    if (isUnnamedFunction && isStatement) {
+        reportError("unnamed function statement", functionNode);
+    }
+
     return node;
 }
\ No newline at end of file
