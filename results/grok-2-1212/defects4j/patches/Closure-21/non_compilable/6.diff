diff --git a/tmp/5af45029-2c6f-4ffc-9332-f82e0fb05235_buggy.java b/tmp/663a2073-38f0-4954-a146-16b2c2a78973_fixed.java
index 49a5702..200f70b 100644
--- a/tmp/5af45029-2c6f-4ffc-9332-f82e0fb05235_buggy.java
+++ b/tmp/663a2073-38f0-4954-a146-16b2c2a78973_fixed.java
@@ -1,66 +1,101 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
     if (n.isEmpty() ||
         n.isComma()) {
         return;
     }
 
     if (parent == null) {
         return;
     }
 
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
     if (n.isExprResult()) {
         return;
     }
 
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
         return;
     }
 
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
     if (parent.getType() == Token.COMMA) {
         if (isResultUsed) {
             return;
         }
         if (n == parent.getLastChild()) {
             for (Node an : parent.getAncestors()) {
                 int ancestorType = an.getType();
                 if (ancestorType == Token.COMMA) continue;
                 if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
                 else break;
             }
         }
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
         if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
             return;
         }
     }
     if (
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
         String msg = "This code lacks side-effects. Is there a bug?";
         if (n.isString()) {
             msg = "Is there a missing '+' on the previous line?";
         } else if (isSimpleOp) {
             msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
                 "' operator is not being used.";
         }
 
         t.getCompiler().report(
             t.makeError(n, level, USELESS_CODE_ERROR, msg));
         // TODO(johnlenz): determine if it is necessary to
         // try to protect side-effect free statements as well.
         if (!NodeUtil.isStatement(n)) {
             problemNodes.add(n);
         }
     }
+    
+    // New condition to handle cases like 'if(x);'
+    if (n.isBlock() && parent.isIf()) {
+        if (n.hasChildren() && n.getFirstChild().isOnlyWhiteSpace()) {
+            t.getCompiler().report(
+                t.makeError(n.getFirstChild(), level, USELESS_CODE_ERROR, "Empty block in if statement"));
+            problemNodes.add(n.getFirstChild());
+        }
+    }
+
+    // Handle cases like 'x == 3;' and 'x == bar();'
+    if (n.isExprResult() && n.getFirstChild().isGetProp()) {
+        if (!NodeUtil.isExpressionResultUsed(n.getFirstChild())) {
+            t.getCompiler().report(
+                t.makeError(n.getFirstChild(), level, USELESS_CODE_ERROR, "Property access with no side effects"));
+            problemNodes.add(n.getFirstChild());
+        }
+    }
+
+    // Handle cases like 'var x = 'test'\n'str''
+    if (n.isString() && parent.isExprResult() && !isResultUsed) {
+        t.getCompiler().report(
+            t.makeError(n, level, USELESS_CODE_ERROR, "Unused string literal"));
+        problemNodes.add(n);
+    }
+
+    // Handle cases like 'a = (5, 6)', 'a = (bar(), 6, 7)', etc.
+    if (parent.isAssign() && n.isComma()) {
+        Node lastChild = n.getLastChild();
+        if (!NodeUtil.mayHaveSideEffects(lastChild, t.getCompiler())) {
+            t.getCompiler().report(
+                t.makeError(lastChild, level, USELESS_CODE_ERROR, "Useless expression in comma operator"));
+            problemNodes.add(lastChild);
+        }
+    }
 }
\ No newline at end of file
