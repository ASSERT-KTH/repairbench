diff --git a/tmp/fcf03144-9d15-4655-93f5-22a20f0e0fab_buggy.java b/tmp/14bd4605-df12-405c-9961-6b89b100adad_fixed.java
index cd412d2..af3be97 100644
--- a/tmp/fcf03144-9d15-4655-93f5-22a20f0e0fab_buggy.java
+++ b/tmp/14bd4605-df12-405c-9961-6b89b100adad_fixed.java
@@ -1,76 +1,93 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
     /* 21-May-2009, tatu: DateFormat has very strict handling of
      * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
      */
 
     /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
      * quite simple because we already set date format timezone to be
      * GMT, and hence can just strip out 'Z' altogether
      */
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
+        if (len > 14 && dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
+            if (len <= 19) {
                 sb.insert(len-1, ".000");
+            }
             dateStr = sb.toString();
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
             c = dateStr.charAt(len-3);
             if (c == ':') { // remove optional colon
                 // remove colon
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len-3, len-2);
                 dateStr = sb.toString();
             } else if (c == '+' || c == '-') { // missing minutes
                 // let's just append '00'
                 dateStr += "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+            
+            // Handle missing seconds or partial milliseconds
+            int lastTIndex = dateStr.lastIndexOf('T');
+            if (lastTIndex >= 0) {
+                int timePartStart = lastTIndex + 1;
+                int timePartEnd = len - 6; // exclude timezone part
+                
                 StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                if (timePartEnd - timePartStart <= 5) { // HH:MM
+                    sb.insert(timePartEnd, ":00");
+                    timePartEnd += 3;
+                }
+                if (timePartEnd - timePartStart <= 8) { // HH:MM:SS
+                    sb.insert(timePartEnd, ".000");
+                } else if (timePartEnd - timePartStart > 8 && timePartEnd - timePartStart < 12) { // HH:MM:SS.S or HH:MM:SS.SS
+                    int decimalPointIndex = sb.lastIndexOf(".");
+                    int trailingZerosNeeded = 3 - (timePartEnd - decimalPointIndex - 1);
+                    for (int i = 0; i < trailingZerosNeeded; i++) {
+                        sb.append('0');
+                    }
+                }
                 dateStr = sb.toString();
             }
+
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
             // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+            if (timeLen > 0 && timeLen <= 8) {
                 sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
