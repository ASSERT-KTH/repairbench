diff --git a/tmp/67a18329-d75e-47fd-ba42-a12fc2dad837_buggy.java b/tmp/55102ea1-b8de-42c7-98a1-9516b060e4ac_fixed.java
index dc93be3..26290c1 100644
--- a/tmp/67a18329-d75e-47fd-ba42-a12fc2dad837_buggy.java
+++ b/tmp/55102ea1-b8de-42c7-98a1-9516b060e4ac_fixed.java
@@ -1,14 +1,19 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
+        if (Tag.isKnownTag(startTag.name()) && Tag.isSelfClosing(startTag.name())) {
+            // For known self-closing tags (like <img>, <br>), insert as empty and return
             Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            return el;
+        } else {
+            // For unknown or non-self-closing tags, treat as normal start tag
+            Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+            insert(el);
             return el;
         }
-        
+    } else {
+        // For non-self-closing tags, create and insert as usual
         Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
         insert(el);
         return el;
     }
+}
\ No newline at end of file
