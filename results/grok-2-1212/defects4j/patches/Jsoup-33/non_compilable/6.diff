diff --git a/tmp/b6ef3cd3-3f40-4238-a12b-306af067d62d_buggy.java b/tmp/659262a5-775e-4802-a11a-97b46cf7a720_fixed.java
index dc93be3..224ae50 100644
--- a/tmp/b6ef3cd3-3f40-4238-a12b-306af067d62d_buggy.java
+++ b/tmp/659262a5-775e-4802-a11a-97b46cf7a720_fixed.java
@@ -1,14 +1,24 @@
     Element insert(Token.StartTag startTag) {
         // handle empty unknown tags
         // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
         if (startTag.isSelfClosing()) {
+            if (Tag.isKnownTag(startTag.name()) && !Tag.isKnownEmptyTag(startTag.name())) {
+                // For known non-empty tags, treat as non-self-closing
+                Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+                insert(el);
+                return el;
+            } else {
+                // For known empty tags and unknown tags, handle as self-closing
                 Element el = insertEmpty(startTag);
                 stack.add(el);
+                if (!Tag.isKnownEmptyTag(startTag.name())) {
                     tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+                }
                 return el;
             }
+        }
         
         Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
         insert(el);
         return el;
     }
\ No newline at end of file
