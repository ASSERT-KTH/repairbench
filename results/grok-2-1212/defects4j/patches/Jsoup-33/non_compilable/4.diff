diff --git a/tmp/e3b8b7db-d392-418b-b91a-b31aefe8f2a1_buggy.java b/tmp/18b9bbe3-3242-4b25-a3e1-f2bdc3273620_fixed.java
index dc93be3..5916ab5 100644
--- a/tmp/e3b8b7db-d392-418b-b91a-b31aefe8f2a1_buggy.java
+++ b/tmp/18b9bbe3-3242-4b25-a3e1-f2bdc3273620_fixed.java
@@ -1,14 +1,19 @@
     Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
         if (startTag.isSelfClosing()) {
+            if (Tag.isKnownTag(startTag.name()) && Tag.valueOf(startTag.name()).isKnownEmptyTag()) {
                 Element el = insertEmpty(startTag);
                 stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+                // No need to emit an end tag for known empty tags
                 return el;
+            } else {
+                Element el = insertEmpty(startTag);
+                stack.add(el);
+                tokeniser.emit(new Token.EndTag(el.tagName()));  // Emit end tag for non-empty or unknown tags
+                return el;
+            }
         }
         
         Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
         insert(el);
         return el;
     }
\ No newline at end of file
