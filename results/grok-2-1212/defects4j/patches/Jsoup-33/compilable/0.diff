diff --git a/tmp/11f16da4-8478-47a3-bc22-ba37bf432711_buggy.java b/tmp/0eb56bda-77ff-4612-b668-0060e053226c_fixed.java
index dc93be3..421b827 100644
--- a/tmp/11f16da4-8478-47a3-bc22-ba37bf432711_buggy.java
+++ b/tmp/0eb56bda-77ff-4612-b668-0060e053226c_fixed.java
@@ -1,14 +1,23 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+    // Handle empty unknown tags
+    // When the spec expects an empty tag, it will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
+        if (Tag.isKnownTag(startTag.name()) && !Tag.valueOf(startTag.name()).isSelfClosing()) {
+            // For known tags that are not supposed to be self-closing, create a regular element
+            Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+            insert(el);
+            return el;
+        } else {
+            // For self-closing tags (either unknown or known empty tags), use insertEmpty
             Element el = insertEmpty(startTag);
             stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            tokeniser.emit(new Token.EndTag(el.tagName()));  // Ensure we get out of whatever state we are in. Emitted for yielded processing
             return el;
         }
+    }
     
+    // For non-self-closing tags
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
