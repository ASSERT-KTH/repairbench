diff --git a/tmp/dcf06ea8-78b6-40fb-9f0e-f5a1aeaadedb_buggy.java b/tmp/1332f573-69b1-45a7-9bf3-9f869f9e60a2_fixed.java
index be9c8a3..3f5513f 100644
--- a/tmp/dcf06ea8-78b6-40fb-9f0e-f5a1aeaadedb_buggy.java
+++ b/tmp/1332f573-69b1-45a7-9bf3-9f869f9e60a2_fixed.java
@@ -1,94 +1,79 @@
 /**
  * Counts the number of direct (full) references to an object.
  * Specifically we check for references of the following type:
  * <pre>
  *   x;
  *   x.fn();
  * </pre>
  */
 private boolean isInlinableObject(List<Reference> refs) {
   boolean ret = false;
+  Set<Node> assignedValues = new HashSet<>();
+  boolean hasSelfReference = false;
+
   for (Reference ref : refs) {
     Node name = ref.getNode();
     Node parent = ref.getParent();
     Node gramps = ref.getGrandparent();
 
-        // Ignore indirect references, like x.y (except x.y(), since
-        // the function referenced by y might reference 'this').
-        //
     if (parent.isGetProp()) {
-          Preconditions.checkState(parent.getFirstChild() == name);
-          // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
+      if (gramps.isCall() && gramps.getFirstChild() == parent) {
+        // A call target using the object as a 'this' value.
         return false;
       }
-
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
       continue;
     }
 
-        // Only rewrite VAR declarations or simple assignment statements
     if (!isVarOrAssignExprLhs(name)) {
       return false;
     }
 
     Node val = ref.getAssignedValue();
     if (val == null) {
-          // A var with no assignment.
       continue;
     }
 
-        // We're looking for object literal assignments only.
     if (!val.isObjectLit()) {
       return false;
     }
 
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
-            // ES5 get/set not supported.
+    // Check for self-referential assignments
+    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+      if (child.isGetterDef() || child.isSetterDef()) {
         return false;
       }
-
-
       Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
       for (Reference t : refs) {
-            Node refNode = t.getParent();
-            while (!NodeUtil.isStatementBlock(refNode)) {
+        Node refNode = t.getNode();
+        while (refNode != null) {
           if (refNode == childVal) {
-                // There's a self-referential assignment
-                return false;
+            hasSelfReference = true;
+            break;
           }
           refNode = refNode.getParent();
         }
+        if (hasSelfReference) {
+          break;
+        }
+      }
+      if (hasSelfReference) {
+        break;
       }
     }
 
+    if (hasSelfReference) {
+      return false;
+    }
+
+    // Check if the value has been assigned before
+    if (assignedValues.contains(val)) {
+      return false;
+    }
+    assignedValues.add(val);
 
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
+    // Ensure that there are no other assignments that mess things up
     ret = true;
   }
+
   return ret;
 }
\ No newline at end of file
