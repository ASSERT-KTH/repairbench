diff --git a/tmp/8ea0010f-871d-43e3-b961-2267884cd800_buggy.java b/tmp/51e4852c-0475-4112-ae9e-072fe25641cc_fixed.java
index be9c8a3..a7d12ec 100644
--- a/tmp/8ea0010f-871d-43e3-b961-2267884cd800_buggy.java
+++ b/tmp/51e4852c-0475-4112-ae9e-072fe25641cc_fixed.java
@@ -1,94 +1,92 @@
     /**
      * Counts the number of direct (full) references to an object.
      * Specifically we check for references of the following type:
      * <pre>
      *   x;
      *   x.fn();
      * </pre>
      */
     private boolean isInlinableObject(List<Reference> refs) {
       boolean ret = false;
+      Map<String, Node> inlineCandidates = new HashMap<>();
+      
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
         Node gramps = ref.getGrandparent();
 
         // Ignore indirect references, like x.y (except x.y(), since
         // the function referenced by y might reference 'this').
-        //
         if (parent.isGetProp()) {
           Preconditions.checkState(parent.getFirstChild() == name);
           // A call target maybe using the object as a 'this' value.
           if (gramps.isCall()
               && gramps.getFirstChild() == parent) {
             return false;
           }
-
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
           continue;
         }
 
-        // Only rewrite VAR declarations or simple assignment statements
-        if (!isVarOrAssignExprLhs(name)) {
+        // Allow more types of assignments
+        if (!isVarOrAssignExprLhs(name) && !NodeUtil.isNameDeclaration(name)) {
           return false;
         }
 
         Node val = ref.getAssignedValue();
         if (val == null) {
-          // A var with no assignment.
+          // A var with no assignment or reassignment.
           continue;
         }
 
         // We're looking for object literal assignments only.
         if (!val.isObjectLit()) {
-          return false;
+          if (ret) {
+            return false; // If we've already found an inline candidate, this is not inlinable
           }
-
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
-            // ES5 get/set not supported.
-            return false;
+          continue;
         }
 
+        // Check for self-referential assignments
+        boolean selfReferential = false;
+        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+          if (child.isGetterDef() || child.isSetterDef()) {
+            return false; // ES5 get/set not supported
+          }
 
           Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
           for (Reference t : refs) {
             Node refNode = t.getParent();
             while (!NodeUtil.isStatementBlock(refNode)) {
               if (refNode == childVal) {
-                // There's a self-referential assignment
-                return false;
+                selfReferential = true;
+                break;
               }
               refNode = refNode.getParent();
             }
+            if (selfReferential) break;
           }
+          if (selfReferential) break;
         }
 
+        if (selfReferential) {
+          if (ret) {
+            return false; // If we've already found an inline candidate, this is not inlinable
+          }
+          continue;
+        }
+
+        // Check if this object literal can be inlined
+        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+          String key = child.getString();
+          if (inlineCandidates.containsKey(key)) {
+            return false; // Duplicate key, cannot inline
+          }
+          inlineCandidates.put(key, child.getFirstChild());
+        }
 
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
+        // We have found an acceptable object literal assignment
         ret = true;
       }
+      
       return ret;
     }
\ No newline at end of file
