diff --git a/tmp/2284bd61-a659-4866-91f3-dc11918bf8a7_buggy.java b/tmp/35a91384-a0b6-4973-91e5-fcca2c5a2250_fixed.java
index be9c8a3..5379959 100644
--- a/tmp/2284bd61-a659-4866-91f3-dc11918bf8a7_buggy.java
+++ b/tmp/35a91384-a0b6-4973-91e5-fcca2c5a2250_fixed.java
@@ -1,94 +1,106 @@
 /**
  * Counts the number of direct (full) references to an object.
  * Specifically we check for references of the following type:
  * <pre>
  *   x;
  *   x.fn();
  * </pre>
  */
 private boolean isInlinableObject(List<Reference> refs) {
     boolean ret = false;
+    boolean hasMultipleAssignments = false;
     for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
         Node gramps = ref.getGrandparent();
 
         // Ignore indirect references, like x.y (except x.y(), since
         // the function referenced by y might reference 'this').
         //
         if (parent.isGetProp()) {
             Preconditions.checkState(parent.getFirstChild() == name);
             // A call target maybe using the object as a 'this' value.
             if (gramps.isCall()
                 && gramps.getFirstChild() == parent) {
                 return false;
             }
 
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
+            // Skip property checks, but allow inlining
             continue;
         }
 
-        // Only rewrite VAR declarations or simple assignment statements
-        if (!isVarOrAssignExprLhs(name)) {
+        // Allow VAR declarations, simple assignment statements, and reassigned variables
+        if (!isVarOrAssignExprLhs(name) && !parent.isAssign()) {
             return false;
         }
 
         Node val = ref.getAssignedValue();
         if (val == null) {
             // A var with no assignment.
             continue;
         }
 
         // We're looking for object literal assignments only.
         if (!val.isObjectLit()) {
             return false;
         }
 
+        // Check for multiple assignments to the same variable
+        if (ret) {
+            hasMultipleAssignments = true;
+        }
+
         // Make sure that the value is not self-refential. IOW,
         // disallow things like x = {b: x.a}.
         //
         // TODO: Only exclude unorderable self-referential
         // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
         // but x = {a: 1, b: x.a} is.
         //
         // Also, ES5 getters/setters aren't handled by this pass.
         for (Node child = val.getFirstChild(); child != null;
              child = child.getNext()) {
             if (child.isGetterDef() ||
                 child.isSetterDef()) {
                 // ES5 get/set not supported.
                 return false;
             }
 
-
             Node childVal = child.getFirstChild();
             // Check if childVal is the parent of any of the passed in
             // references, as that is how self-referential assignments
             // will happen.
             for (Reference t : refs) {
                 Node refNode = t.getParent();
                 while (!NodeUtil.isStatementBlock(refNode)) {
                     if (refNode == childVal) {
                         // There's a self-referential assignment
                         return false;
                     }
                     refNode = refNode.getParent();
                 }
             }
         }
 
-
         // We have found an acceptable object literal assignment. As
         // long as there are no other assignments that mess things up,
         // we can inline.
         ret = true;
     }
-      return ret;
+
+    // Allow inlining if there are multiple assignments, but only if they're all object literals
+    return ret && (!hasMultipleAssignments || canInlineMultipleAssignments(refs));
+}
+
+private boolean canInlineMultipleAssignments(List<Reference> refs) {
+    for (Reference ref : refs) {
+        Node parent = ref.getParent();
+        if (parent.isAssign()) {
+            Node val = ref.getAssignedValue();
+            if (val == null || !val.isObjectLit()) {
+                return false;
+            }
+        }
+    }
+    return true;
 }
\ No newline at end of file
