diff --git a/tmp/52e95fa9-fcab-4e64-ba89-bf315c4d61f1_buggy.java b/tmp/3edda514-0c03-46fc-909b-5bd2725099e9_fixed.java
index d8b0158..139aa06 100644
--- a/tmp/52e95fa9-fcab-4e64-ba89-bf315c4d61f1_buggy.java
+++ b/tmp/3edda514-0c03-46fc-909b-5bd2725099e9_fixed.java
@@ -1,113 +1,111 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 private Node tryFoldArrayJoin(Node n) {
     Node callTarget = n.getFirstChild();
 
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
         return n;
     }
 
     Node right = callTarget.getNext();
-    if (right != null) {
-      if (!NodeUtil.isImmutableValue(right)) {
+    if (right != null && !NodeUtil.isImmutableValue(right)) {
         return n;
     }
-    }
 
     Node arrayNode = callTarget.getFirstChild();
     Node functionName = arrayNode.getNext();
 
-    if ((arrayNode.getType() != Token.ARRAYLIT) ||
-        !functionName.getString().equals("join")) {
+    if (arrayNode.getType() != Token.ARRAYLIT || !functionName.getString().equals("join")) {
         return n;
     }
 
-      // "," is the default, it doesn't need to be explicit
-
     String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = null;
     int foldedSize = 0;
     Node prev = null;
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+    
+    // Merges adjacent immutable nodes.
     while (elem != null) {
         if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
             if (sb == null) {
                 sb = new StringBuilder();
-        } else {
+            } else if (sb.length() > 0) {
                 sb.append(joinString);
             }
-        sb.append(NodeUtil.getArrayElementStringValue(elem));
+            String elemString = NodeUtil.getArrayElementStringValue(elem);
+            if (elemString != null) {
+                sb.append(elemString);
+            }
         } else {
             if (sb != null) {
-          Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(
-              Node.newString(sb.toString()).copyInformationFrom(prev));
+                if (sb.length() > 0) {
+                    foldedSize += sb.length() + 2; // +2 for quotes
+                    arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev != null ? prev : elem));
+                }
                 sb = null;
             }
             foldedSize += InlineCostEstimator.getCost(elem);
             arrayFoldedChildren.add(elem);
         }
         prev = elem;
         elem = elem.getNext();
     }
 
-    if (sb != null) {
-      Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(
-          Node.newString(sb.toString()).copyInformationFrom(prev));
+    if (sb != null && sb.length() > 0) {
+        foldedSize += sb.length() + 2; // +2 for quotes
+        arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev != null ? prev : arrayNode));
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
+
+    // Add size of join string for each element except the first
+    foldedSize += Math.max(0, arrayFoldedChildren.size() - 1) * (joinString == null ? 0 : joinString.length());
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
         case 0:
             Node emptyStringNode = Node.newString("");
             n.getParent().replaceChild(n, emptyStringNode);
             reportCodeChange();
             return emptyStringNode;
         case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
+            Node foldedStringNode = arrayFoldedChildren.get(0);
             if (foldedSize > originalSize) {
                 return n;
             }
             arrayNode.detachChildren();
             if (foldedStringNode.getType() != Token.STRING) {
                 // If the Node is not a string literal, ensure that
                 // it is coerced to a string.
                 Node replacement = new Node(Token.ADD,
                     Node.newString("").copyInformationFrom(n),
                     foldedStringNode);
                 foldedStringNode = replacement;
             }
             n.getParent().replaceChild(n, foldedStringNode);
             reportCodeChange();
             return foldedStringNode;
         default:
             // No folding could actually be performed.
             if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
                 return n;
             }
             int kJoinOverhead = "[].join()".length();
             foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
+            if (right != null) {
+                foldedSize += InlineCostEstimator.getCost(right);
+            }
             if (foldedSize > originalSize) {
                 return n;
             }
             arrayNode.detachChildren();
             for (Node node : arrayFoldedChildren) {
                 arrayNode.addChildToBack(node);
             }
             reportCodeChange();
             break;
     }
 
     return n;
 }
\ No newline at end of file
