diff --git a/tmp/acfd6d69-14ab-42df-b0be-70313289394b_buggy.java b/tmp/b89cbf9c-7637-44bd-9673-5d28a0b81fe0_fixed.java
index d8b0158..1425508 100644
--- a/tmp/acfd6d69-14ab-42df-b0be-70313289394b_buggy.java
+++ b/tmp/b89cbf9c-7637-44bd-9673-5d28a0b81fe0_fixed.java
@@ -1,113 +1,99 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 private Node tryFoldArrayJoin(Node n) {
     Node callTarget = n.getFirstChild();
 
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
         return n;
     }
 
     Node right = callTarget.getNext();
-    if (right != null) {
-      if (!NodeUtil.isImmutableValue(right)) {
-        return n;
-      }
+    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
+    if (joinString == null) {
+        return n; // Can't fold if joinString is null
     }
 
     Node arrayNode = callTarget.getFirstChild();
     Node functionName = arrayNode.getNext();
 
-    if ((arrayNode.getType() != Token.ARRAYLIT) ||
-        !functionName.getString().equals("join")) {
+    if (arrayNode.getType() != Token.ARRAYLIT || !functionName.getString().equals("join")) {
         return n;
     }
 
-      // "," is the default, it doesn't need to be explicit
-
-    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
-    StringBuilder sb = null;
-    int foldedSize = 0;
-    Node prev = null;
+    StringBuilder sb = new StringBuilder();
+    boolean firstElement = true;
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+
     while (elem != null) {
-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
-        if (sb == null) {
-          sb = new StringBuilder();
-        } else {
+        String elementValue = NodeUtil.getArrayElementStringValue(elem);
+        if (elementValue != null) {
+            if (!firstElement) {
                 sb.append(joinString);
             }
-        sb.append(NodeUtil.getArrayElementStringValue(elem));
+            sb.append(elementValue);
+            firstElement = false;
         } else {
-        if (sb != null) {
-          Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(
-              Node.newString(sb.toString()).copyInformationFrom(prev));
-          sb = null;
+            if (sb.length() > 0) {
+                arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));
+                sb = new StringBuilder();
+                firstElement = true;
             }
-        foldedSize += InlineCostEstimator.getCost(elem);
             arrayFoldedChildren.add(elem);
         }
-      prev = elem;
         elem = elem.getNext();
     }
 
-    if (sb != null) {
-      Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(
-          Node.newString(sb.toString()).copyInformationFrom(prev));
+    if (sb.length() > 0) {
+        arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(arrayNode.getLastChild()));
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
+    int foldedSize = 0;
+
     switch (arrayFoldedChildren.size()) {
         case 0:
             Node emptyStringNode = Node.newString("");
             n.getParent().replaceChild(n, emptyStringNode);
             reportCodeChange();
             return emptyStringNode;
         case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return n;
-        }
-        arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString("").copyInformationFrom(n),
-              foldedStringNode);
-          foldedStringNode = replacement;
+            Node foldedStringNode = arrayFoldedChildren.get(0);
+            if (foldedStringNode.getType() == Token.STRING) {
+                foldedSize = foldedStringNode.getString().length() + 2; // +2 for quotes
+            } else {
+                foldedSize = InlineCostEstimator.getCost(foldedStringNode);
             }
+            if (foldedSize <= originalSize) {
                 n.getParent().replaceChild(n, foldedStringNode);
                 reportCodeChange();
                 return foldedStringNode;
+            }
+            break;
         default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return n;
+            for (Node child : arrayFoldedChildren) {
+                if (child.getType() == Token.STRING) {
+                    foldedSize += child.getString().length() + 2; // +2 for quotes
+                } else {
+                    foldedSize += InlineCostEstimator.getCost(child);
                 }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
-        if (foldedSize > originalSize) {
-          return n;
             }
+            foldedSize += (arrayFoldedChildren.size() - 1) * joinString.length(); // Add size of join strings
+            foldedSize += "[].join()".length(); // Overhead of join call
+            if (right != null) {
+                foldedSize += InlineCostEstimator.getCost(right);
+            }
+            if (foldedSize <= originalSize) {
                 arrayNode.detachChildren();
                 for (Node node : arrayFoldedChildren) {
                     arrayNode.addChildToBack(node);
                 }
                 reportCodeChange();
+                return n;
+            }
             break;
     }
 
     return n;
 }
\ No newline at end of file
