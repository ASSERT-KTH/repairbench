diff --git a/tmp/540633e1-bafc-4d36-bbcb-c33db8d95ea8_buggy.java b/tmp/4d1c3de4-cf88-4ed8-ac2a-0f1aec75fb2a_fixed.java
index ad4b0d8..6509aa9 100644
--- a/tmp/540633e1-bafc-4d36-bbcb-c33db8d95ea8_buggy.java
+++ b/tmp/4d1c3de4-cf88-4ed8-ac2a-0f1aec75fb2a_fixed.java
@@ -1,47 +1,55 @@
     /**
      * Use K-means++ to choose the initial centers.
      *
      * @param <T> type of the points to cluster
      * @param points the points to choose the initial centers from
      * @param k the number of centers to choose
      * @param random random generator to use
      * @return the initial centers
      */
     private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
         // Choose one center uniformly at random from among the data points.
         final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
         resultSet.add(new Cluster<T>(firstPoint));
 
-        final double[] dx2 = new double[pointSet.size()];
         while (resultSet.size() < k) {
             // For each data point x, compute D(x), the distance between x and
             // the nearest center that has already been chosen.
-            int sum = 0;
+            double[] distances = new double[pointSet.size()];
+            double sum = 0;
             for (int i = 0; i < pointSet.size(); i++) {
                 final T p = pointSet.get(i);
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);
                 final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
-                dx2[i] = sum;
+                distances[i] = d * d;
+                sum += distances[i];
             }
 
             // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
+            // probability proportional to D(x)^2
+            if (sum > 0) {
                 final double r = random.nextDouble() * sum;
-            for (int i = 0 ; i < dx2.length; i++) {
-                if (dx2[i] >= r) {
+                sum = 0;
+                for (int i = 0; i < distances.length; i++) {
+                    sum += distances[i];
+                    if (sum >= r) {
                         final T p = pointSet.remove(i);
                         resultSet.add(new Cluster<T>(p));
                         break;
                     }
                 }
+            } else {
+                // If all distances are zero, choose a random point
+                final int randomIndex = random.nextInt(pointSet.size());
+                final T p = pointSet.remove(randomIndex);
+                resultSet.add(new Cluster<T>(p));
+            }
         }
 
         return resultSet;
-
     }
\ No newline at end of file
