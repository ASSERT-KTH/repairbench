diff --git a/tmp/dc7a9e9c-14f4-48e7-bd14-63682bccf006_buggy.java b/tmp/b3c5ca42-9ee5-4166-a912-fabd25d69d8c_fixed.java
index ad4b0d8..7e4f272 100644
--- a/tmp/dc7a9e9c-14f4-48e7-bd14-63682bccf006_buggy.java
+++ b/tmp/b3c5ca42-9ee5-4166-a912-fabd25d69d8c_fixed.java
@@ -1,47 +1,54 @@
 /**
  * Use K-means++ to choose the initial centers.
  *
  * @param <T> type of the points to cluster
  * @param points the points to choose the initial centers from
  * @param k the number of centers to choose
  * @param random random generator to use
  * @return the initial centers
  */
 private static <T extends Clusterable<T>> List<Cluster<T>>
     chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
     final List<T> pointSet = new ArrayList<T>(points);
     final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
     // Choose one center uniformly at random from among the data points.
     final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
     resultSet.add(new Cluster<T>(firstPoint));
 
     final double[] dx2 = new double[pointSet.size()];
     while (resultSet.size() < k) {
         // For each data point x, compute D(x), the distance between x and
         // the nearest center that has already been chosen.
-            int sum = 0;
+        double sum = 0;
         for (int i = 0; i < pointSet.size(); i++) {
             final T p = pointSet.get(i);
             final Cluster<T> nearest = getNearestCluster(resultSet, p);
             final double d = p.distanceFrom(nearest.getCenter());
             sum += d * d;
             dx2[i] = sum;
         }
 
         // Add one new data point as a center. Each point x is chosen with
         // probability proportional to D(x)2
+        if (sum > 0) {
             final double r = random.nextDouble() * sum;
             for (int i = 0; i < dx2.length; i++) {
                 if (dx2[i] >= r) {
                     final T p = pointSet.remove(i);
                     resultSet.add(new Cluster<T>(p));
                     break;
                 }
             }
+        } else {
+            // If sum is zero, all remaining points are equally close to existing centers
+            // Choose a point randomly from the remaining points
+            int index = random.nextInt(pointSet.size());
+            final T p = pointSet.remove(index);
+            resultSet.add(new Cluster<T>(p));
+        }
     }
 
     return resultSet;
-
 }
\ No newline at end of file
