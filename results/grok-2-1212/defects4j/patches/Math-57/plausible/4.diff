diff --git a/tmp/cc21a426-09b4-4eb3-8e30-06709c071ad6_buggy.java b/tmp/25751d85-90a7-422e-9bfc-7f9cee7c25de_fixed.java
index ad4b0d8..9d0090e 100644
--- a/tmp/cc21a426-09b4-4eb3-8e30-06709c071ad6_buggy.java
+++ b/tmp/25751d85-90a7-422e-9bfc-7f9cee7c25de_fixed.java
@@ -1,47 +1,53 @@
     /**
      * Use K-means++ to choose the initial centers.
      *
      * @param <T> type of the points to cluster
      * @param points the points to choose the initial centers from
      * @param k the number of centers to choose
      * @param random random generator to use
      * @return the initial centers
      */
     private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
         // Choose one center uniformly at random from among the data points.
         final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
         resultSet.add(new Cluster<T>(firstPoint));
 
         final double[] dx2 = new double[pointSet.size()];
         while (resultSet.size() < k) {
             // For each data point x, compute D(x), the distance between x and
             // the nearest center that has already been chosen.
-            int sum = 0;
+            double sum = 0;
             for (int i = 0; i < pointSet.size(); i++) {
                 final T p = pointSet.get(i);
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);
                 final double d = p.distanceFrom(nearest.getCenter());
                 sum += d * d;
                 dx2[i] = sum;
             }
 
             // Add one new data point as a center. Each point x is chosen with
             // probability proportional to D(x)2
+            if (sum > 0) {
                 final double r = random.nextDouble() * sum;
                 for (int i = 0; i < dx2.length; i++) {
                     if (dx2[i] >= r) {
                         final T p = pointSet.remove(i);
                         resultSet.add(new Cluster<T>(p));
                         break;
                     }
                 }
+            } else {
+                // If all distances are zero (all points are identical), choose randomly
+                final int index = random.nextInt(pointSet.size());
+                final T p = pointSet.remove(index);
+                resultSet.add(new Cluster<T>(p));
+            }
         }
 
         return resultSet;
-
     }
\ No newline at end of file
