diff --git a/tmp/24fcf84c-b325-4d33-950f-fbb76e9a1bf1_buggy.java b/tmp/47251380-8fdd-4bc7-9fda-22db5383431e_fixed.java
index 0b7c52e..2cbbdcd 100644
--- a/tmp/24fcf84c-b325-4d33-950f-fbb76e9a1bf1_buggy.java
+++ b/tmp/47251380-8fdd-4bc7-9fda-22db5383431e_fixed.java
@@ -1,27 +1,48 @@
 /**
  * Processes a OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
   for (Node child = n.getFirstChild();
       child != null;
       child = child.getNext()) {
     // Maybe STRING, GET, SET
 
-        // We should never see a mix of numbers and strings.
+    if (child.isString()) {
       String name = child.getString();
       T type = typeSystem.getType(getScope(), n, name);
 
       Property prop = getProperty(name);
       if (!prop.scheduleRenaming(child,
                                  processProperty(t, prop, type, null))) {
         // TODO(user): It doesn't look like the user can do much in this
         // case right now.
         if (propertiesToErrorFor.containsKey(name)) {
           compiler.report(JSError.make(
               t.getSourceName(), child, propertiesToErrorFor.get(name),
               Warnings.INVALIDATION, name,
               (type == null ? "null" : type.toString()), n.toString(), ""));
         }
       }
+    } else if (child.isGetProp() || child.isGetElem()) {
+      // Handle property access using dot or bracket notation
+      Node keyNode = child.isGetProp() ? child.getLastChild() : child.getFirstChild().getNext();
+      if (keyNode.isString()) {
+        String name = keyNode.getString();
+        T type = typeSystem.getType(getScope(), n, name);
+
+        Property prop = getProperty(name);
+        if (!prop.scheduleRenaming(child,
+                                   processProperty(t, prop, type, null))) {
+          // TODO(user): It doesn't look like the user can do much in this
+          // case right now.
+          if (propertiesToErrorFor.containsKey(name)) {
+            compiler.report(JSError.make(
+                t.getSourceName(), keyNode, propertiesToErrorFor.get(name),
+                Warnings.INVALIDATION, name,
+                (type == null ? "null" : type.toString()), n.toString(), ""));
+          }
+        }
+      }
+    }
   }
 }
\ No newline at end of file
