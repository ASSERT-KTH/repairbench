diff --git a/tmp/7c6351fe-8017-44e7-a627-0a7e2154cd6b_buggy.java b/tmp/5d931c24-5fd4-492d-84b7-efe479243183_fixed.java
index 0b7c52e..b9d8a5b 100644
--- a/tmp/7c6351fe-8017-44e7-a627-0a7e2154cd6b_buggy.java
+++ b/tmp/5d931c24-5fd4-492d-84b7-efe479243183_fixed.java
@@ -1,27 +1,35 @@
 /**
-     * Processes a OBJECTLIT node.
+ * Processes an OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
   for (Node child = n.getFirstChild();
       child != null;
       child = child.getNext()) {
-        // Maybe STRING, GET, SET
+    // Handle different types of children: STRING, GET, SET
+    String name = null;
+    if (child.isStringKey()) {
+      name = child.getString();
+    } else if (child.isGetterDef() || child.isSetterDef()) {
+      name = child.getFirstChild().getString();
+    }
+
+    if (name == null) {
+      continue; // Skip unexpected child types
+    }
 
-        // We should never see a mix of numbers and strings.
-        String name = child.getString();
     T type = typeSystem.getType(getScope(), n, name);
 
     Property prop = getProperty(name);
     if (!prop.scheduleRenaming(child,
                                processProperty(t, prop, type, null))) {
       // TODO(user): It doesn't look like the user can do much in this
       // case right now.
       if (propertiesToErrorFor.containsKey(name)) {
         compiler.report(JSError.make(
             t.getSourceName(), child, propertiesToErrorFor.get(name),
             Warnings.INVALIDATION, name,
             (type == null ? "null" : type.toString()), n.toString(), ""));
       }
     }
   }
 }
\ No newline at end of file
