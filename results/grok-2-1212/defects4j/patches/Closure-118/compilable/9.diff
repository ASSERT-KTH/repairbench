diff --git a/tmp/5fbde777-4bc3-458a-886d-9406d73e8566_buggy.java b/tmp/75f69a70-b425-48b5-a048-7e0ea714f795_fixed.java
index 0b7c52e..4f1732b 100644
--- a/tmp/5fbde777-4bc3-458a-886d-9406d73e8566_buggy.java
+++ b/tmp/75f69a70-b425-48b5-a048-7e0ea714f795_fixed.java
@@ -1,27 +1,35 @@
     /**
-     * Processes a OBJECTLIT node.
+     * Processes an OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
         // Maybe STRING, GET, SET
 
         // We should never see a mix of numbers and strings.
         String name = child.getString();
-        T type = typeSystem.getType(getScope(), n, name);
+        T type = null;
+        
+        // Determine the type based on the context
+        if (child.isStringKey()) {
+          type = typeSystem.getType(getScope(), n, name);
+        } else if (child.isGetterDef() || child.isSetterDef()) {
+          // For getters and setters, we need to look at the parent node
+          type = typeSystem.getType(getScope(), n.getParent(), name);
+        }
         
         Property prop = getProperty(name);
         if (!prop.scheduleRenaming(child,
                                    processProperty(t, prop, type, null))) {
           // TODO(user): It doesn't look like the user can do much in this
           // case right now.
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
                 (type == null ? "null" : type.toString()), n.toString(), ""));
           }
         }
       }
     }
\ No newline at end of file
