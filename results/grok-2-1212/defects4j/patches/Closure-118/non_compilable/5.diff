diff --git a/tmp/8d610cba-9232-4e20-acab-e953e56724d0_buggy.java b/tmp/a8d63e5d-dcf9-48f9-8e6d-8b6974cfc852_fixed.java
index 0b7c52e..a408e7e 100644
--- a/tmp/8d610cba-9232-4e20-acab-e953e56724d0_buggy.java
+++ b/tmp/a8d63e5d-dcf9-48f9-8e6d-8b6974cfc852_fixed.java
@@ -1,27 +1,44 @@
 /**
-     * Processes a OBJECTLIT node.
+ * Processes an OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
   for (Node child = n.getFirstChild();
        child != null;
        child = child.getNext()) {
     // Maybe STRING, GET, SET
 
     // We should never see a mix of numbers and strings.
     String name = child.getString();
+    if (name == null) {
+      // Handle non-string property names (e.g., numbers)
+      name = child.getToken().toString();
+    }
+
     T type = typeSystem.getType(getScope(), n, name);
 
     Property prop = getProperty(name);
+    if (prop == null) {
+      // Create a new Property if it doesn't exist
+      prop = createNewProperty(name);
+    }
+
     if (!prop.scheduleRenaming(child,
                                processProperty(t, prop, type, null))) {
       // TODO(user): It doesn't look like the user can do much in this
       // case right now.
       if (propertiesToErrorFor.containsKey(name)) {
         compiler.report(JSError.make(
             t.getSourceName(), child, propertiesToErrorFor.get(name),
             Warnings.INVALIDATION, name,
             (type == null ? "null" : type.toString()), n.toString(), ""));
       }
     }
   }
 }
+
+// Additional helper method to create a new Property
+private Property createNewProperty(String name) {
+  Property newProp = new Property(name);
+  properties.put(name, newProp);
+  return newProp;
+}
\ No newline at end of file
