diff --git a/tmp/e58d49af-cffb-4623-87f9-c66e94b4652f_buggy.java b/tmp/5c2f3e33-02fc-4cf2-9dbb-62b6392b7835_fixed.java
index b12de99..4eaead7 100644
--- a/tmp/e58d49af-cffb-4623-87f9-c66e94b4652f_buggy.java
+++ b/tmp/5c2f3e33-02fc-4cf2-9dbb-62b6392b7835_fixed.java
@@ -1,52 +1,59 @@
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (t.inGlobalScope()) {
     return;
   }
 
   if (n.isReturn() && n.getFirstChild() != null) {
     data.get(t.getScopeRoot()).recordNonEmptyReturn();
   }
 
   if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
     return;
   }
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
-          !NodeUtil.isBleedingFunctionName(n)) {
+  if (n.isName() && NodeUtil.isLValue(n) && !NodeUtil.isBleedingFunctionName(n)) {
     String name = n.getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordAssignedName(name);
       }
 
       if (scope != ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
       }
+
+      // Handle 'this' specially
+      if (name.equals("this")) {
+        data.get(t.getScopeRoot()).recordThisReference();
       }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
+    }
+  } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) {
     String name = NodeUtil.getRootOfQualifiedName(n).getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode())
-                .recordEscapedQualifiedName(n.getQualifiedName());
+        data.get(ownerScope.getRootNode()).recordEscapedQualifiedName(n.getQualifiedName());
+      }
+    }
+  }
+
+  // Additional handling for nesting and 'this' references
+  if (n.isFunction()) {
+    Scope functionScope = t.getScope();
+    if (functionScope.getParent() != null) {
+      data.get(functionScope.getRootNode()).recordNestedFunction();
+      if (functionScope.getScopeDepth() > 2) {
+        // Check for captured 'this'
+        Node thisNode = NodeUtil.getThisNode(n);
+        if (thisNode != null) {
+          data.get(functionScope.getParent().getRootNode()).recordCapturedThis();
+        }
       }
     }
   }
 }
\ No newline at end of file
