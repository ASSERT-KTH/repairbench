diff --git a/tmp/81f7e08f-5357-4163-9451-9a9a7dbf62ed_buggy.java b/tmp/49305e8e-4d91-4914-a98e-87d85936b05a_fixed.java
index b12de99..d4829c4 100644
--- a/tmp/81f7e08f-5357-4163-9451-9a9a7dbf62ed_buggy.java
+++ b/tmp/49305e8e-4d91-4914-a98e-87d85936b05a_fixed.java
@@ -1,52 +1,56 @@
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
     if (t.inGlobalScope()) {
         return;
     }
 
     if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
     }
 
     if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
         return;
     }
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
-          !NodeUtil.isBleedingFunctionName(n)) {
+    if (n.isName() && NodeUtil.isLValue(n) && !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
             Scope ownerScope = var.getScope();
             if (ownerScope.isLocal()) {
                 data.get(ownerScope.getRootNode()).recordAssignedName(name);
             }
 
             if (scope != ownerScope && ownerScope.isLocal()) {
                 data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
+                // Propagate the type of the variable to the outer scope
+                JSType type = var.getType();
+                if (type != null) {
+                    Var outerVar = ownerScope.getVar(name);
+                    if (outerVar != null) {
+                        outerVar.setType(type);
                     }
                 }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
+            }
+        }
+    } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) {
         String name = NodeUtil.getRootOfQualifiedName(n).getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
             Scope ownerScope = var.getScope();
             if (scope != ownerScope && ownerScope.isLocal()) {
                 data.get(ownerScope.getRootNode())
                     .recordEscapedQualifiedName(n.getQualifiedName());
+                // Propagate the type of the property to the outer scope
+                JSType type = var.getType();
+                if (type != null) {
+                    Var outerVar = ownerScope.getVar(name);
+                    if (outerVar != null) {
+                        outerVar.setType(type);
+                    }
+                }
             }
         }
     }
 }
\ No newline at end of file
