diff --git a/tmp/be2d4c8a-7765-4423-9080-31d8773b1616_buggy.java b/tmp/b780fe7a-1379-4c5b-a2a2-83a35d9d642a_fixed.java
index b12de99..025929a 100644
--- a/tmp/be2d4c8a-7765-4423-9080-31d8773b1616_buggy.java
+++ b/tmp/b780fe7a-1379-4c5b-a2a2-83a35d9d642a_fixed.java
@@ -1,52 +1,47 @@
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override 
+public void visit(NodeTraversal t, Node n, Node parent) {
     if (t.inGlobalScope()) {
         return;
     }
 
     if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
     }
 
     if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
         return;
     }
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
-          !NodeUtil.isBleedingFunctionName(n)) {
+    if (n.isName() && NodeUtil.isLValue(n) && !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
             Scope ownerScope = var.getScope();
             if (ownerScope.isLocal()) {
                 data.get(ownerScope.getRootNode()).recordAssignedName(name);
             }
 
             if (scope != ownerScope && ownerScope.isLocal()) {
                 data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
             }
         }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
+    } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) {
         String name = NodeUtil.getRootOfQualifiedName(n).getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
             Scope ownerScope = var.getScope();
             if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode())
-                .recordEscapedQualifiedName(n.getQualifiedName());
+                data.get(ownerScope.getRootNode()).recordEscapedQualifiedName(n.getQualifiedName());
             }
         }
+    } else if (n.isThis()) {
+        // Handle 'this' as an escaped variable if it's used in a nested function
+        Scope scope = t.getScope();
+        Scope outerScope = scope.getParent();
+        if (outerScope != null && outerScope.isLocal()) {
+            data.get(outerScope.getRootNode()).recordEscapedVarName("this");
+        }
     }
 }
\ No newline at end of file
