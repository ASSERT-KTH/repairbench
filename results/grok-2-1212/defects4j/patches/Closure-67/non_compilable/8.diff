diff --git a/tmp/51d0192e-7e93-4530-be98-106766f90662_buggy.java b/tmp/6abc77c8-429e-419a-895b-db76a894f50f_fixed.java
index 939f49b..ca8106b 100644
--- a/tmp/51d0192e-7e93-4530-be98-106766f90662_buggy.java
+++ b/tmp/6abc77c8-429e-419a-895b-db76a894f50f_fixed.java
@@ -1,21 +1,26 @@
 private boolean isPrototypePropertyAssign(Node assign) {
     Node n = assign.getFirstChild();
     if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+        && n.getType() == Token.GETPROP) {
+        Node object = n.getFirstChild();
+        Node property = n.getSecondChild();
         
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+        if (object.getType() == Token.GETPROP) {
+            Node parentObject = object.getFirstChild();
+            Node parentProperty = object.getSecondChild();
             
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+            if (parentProperty.getType() == Token.STRING &&
+                parentProperty.getString().equals("prototype")) {
+                return true;
+            }
+        } else if (object.getType() == Token.NAME) {
+            // Check if the object is a function name
+            if (property.getType() == Token.STRING &&
+                property.getString().equals("prototype")) {
                 return true;
             }
         }
     }
     
     return false;
 }
\ No newline at end of file
