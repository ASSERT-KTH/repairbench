diff --git a/tmp/7808839e-1a0d-46bb-902a-ddd87695e35a_buggy.java b/tmp/0c5f8e73-5272-4999-9f7e-8f826ae88686_fixed.java
index 939f49b..ee72000 100644
--- a/tmp/7808839e-1a0d-46bb-902a-ddd87695e35a_buggy.java
+++ b/tmp/0c5f8e73-5272-4999-9f7e-8f826ae88686_fixed.java
@@ -1,21 +1,16 @@
 private boolean isPrototypePropertyAssign(Node assign) {
     Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+    if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP) {
+        // Traverse the chain of GETPROP nodes
+        Node current = n;
+        while (current.getType() == Token.GETPROP) {
+            Node propName = current.getLastChild();
+            if (propName.getType() == Token.STRING && propName.getString().equals("prototype")) {
                 return true;
             }
+            current = current.getFirstChild();
         }
     }
 
     return false;
 }
\ No newline at end of file
