diff --git a/tmp/3c246600-08c2-48c3-89b7-4ef65645ceed_buggy.java b/tmp/6b5c4898-e7d5-4416-b14c-ac7f704a25ca_fixed.java
index 939f49b..94e1083 100644
--- a/tmp/3c246600-08c2-48c3-89b7-4ef65645ceed_buggy.java
+++ b/tmp/6b5c4898-e7d5-4416-b14c-ac7f704a25ca_fixed.java
@@ -1,21 +1,18 @@
 private boolean isPrototypePropertyAssign(Node assign) {
     Node n = assign.getFirstChild();
     if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+        && n.getType() == Token.GETPROP) {
         
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+        // Check if the assignment is to a prototype property
+        Node propAccess = n;
+        while (propAccess.getType() == Token.GETPROP) {
+            Node propName = propAccess.getLastChild();
+            if (propName.getType() == Token.STRING && propName.getString().equals("prototype")) {
                 return true;
             }
+            propAccess = propAccess.getFirstChild();
         }
     }
 
     return false;
 }
\ No newline at end of file
