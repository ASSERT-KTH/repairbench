diff --git a/tmp/d5840e01-a211-4ef3-856d-6e5ef95dfd3f_buggy.java b/tmp/c383c8f2-32a9-4e35-bac0-7620239e6e5a_fixed.java
index 939f49b..b9934fe 100644
--- a/tmp/d5840e01-a211-4ef3-856d-6e5ef95dfd3f_buggy.java
+++ b/tmp/c383c8f2-32a9-4e35-bac0-7620239e6e5a_fixed.java
@@ -1,21 +1,26 @@
 private boolean isPrototypePropertyAssign(Node assign) {
     Node n = assign.getFirstChild();
     if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+        && n.getType() == Token.GETPROP) {
         
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+        // Traverse the property chain to find if it's a prototype property
+        Node current = n;
+        while (current.getType() == Token.GETPROP) {
+            Node propName = current.getLastChild();
+            if (propName.getType() == Token.STRING && propName.getString().equals("prototype")) {
                 return true;
             }
+            current = current.getFirstChild();
+        }
+        
+        // Check for aliasing
+        if (assign.getType() == Token.ASSIGN) {
+            Node rhs = assign.getLastChild();
+            if (rhs.getType() == Token.ASSIGN) {
+                return isPrototypePropertyAssign(rhs);
+            }
         }
     }
 
     return false;
 }
\ No newline at end of file
