diff --git a/tmp/c3d291f2-b910-4959-a27a-d008a3d78289_buggy.java b/tmp/9815f5aa-405d-4072-80db-456c2b579a03_fixed.java
index 03b03d7..7675a18 100644
--- a/tmp/c3d291f2-b910-4959-a27a-d008a3d78289_buggy.java
+++ b/tmp/9815f5aa-405d-4072-80db-456c2b579a03_fixed.java
@@ -1,25 +1,26 @@
-    /**
-     * Adjusts the offset to be the earlier or later one during an overlap.
-     * 
-     * @param instant  the instant to adjust
-     * @param earlierOrLater  false for earlier, true for later
-     * @return the adjusted instant millis
-     */
 public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
-        }
-        
-        // work out range of instants that have duplicate local times
+    // Convert the UTC instant to local time.
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+    // In an overlap, a given local time may correspond to two UTC instants.
+    // We “nudge” the instant by 1 ms in each direction to determine the two candidates.
+    long candidate1 = convertLocalToUTC(local, false, instant - 1);
+    long candidate2 = convertLocalToUTC(local, false, instant + 1);
     
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    // If both candidates are the same, there is no overlap.
+    if (candidate1 == candidate2) {
+        return instant;
+    }
+    
+    // One candidate will convert to the earlier UTC instant and the other to the later one.
+    long earlierInstant = Math.min(candidate1, candidate2);
+    long laterInstant = Math.max(candidate1, candidate2);
+    
+    // If the instant already uses the desired offset, leave it unchanged.
+    if (instant == laterInstant) {
+        return earlierOrLater ? instant : earlierInstant;
+    } else if (instant == earlierInstant) {
+        return earlierOrLater ? laterInstant : instant;
+    }
+    // Fallback: choose based on the flag.
+    return earlierOrLater ? laterInstant : earlierInstant;
 }
\ No newline at end of file
