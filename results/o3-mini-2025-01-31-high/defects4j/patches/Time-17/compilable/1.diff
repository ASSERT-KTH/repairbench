diff --git a/tmp/ea287a50-7425-4b49-aeb7-7ba887c6fc50_buggy.java b/tmp/e6c6de10-f0ce-4448-ad0e-b7721e67a316_fixed.java
index 03b03d7..2c1340f 100644
--- a/tmp/ea287a50-7425-4b49-aeb7-7ba887c6fc50_buggy.java
+++ b/tmp/e6c6de10-f0ce-4448-ad0e-b7721e67a316_fixed.java
@@ -1,25 +1,56 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
-     * @param instant  the instant to adjust
-     * @param earlierOrLater  false for earlier, true for later
+ * For ambiguous (overlap) instants there are two valid UTC values: one that, when
+ * converted to local time, uses one offset and one that uses the other. In our
+ * example (America/Sao_Paulo on 2012‐02‐25) the ambiguous wall time 23:15
+ * can occur with an offset of –02:00 (the “earlier” time in absolute UTC, i.e.
+ * 23:15 – (–02:00) = 01:15 UTC) or with –03:00 (the “later” time i.e. 23:15 – (–03:00)
+ * = 02:15 UTC). Note that because the offsets are negative, “earlier offset”
+ * means the one with the larger numerical value (–02:00) and “later offset”
+ * means the one with the smaller numerical value (–03:00).
+ * 
+ * The strategy is to convert the given instant to its ambiguous local time,
+ * then resolve the ambiguity by “nudging” the assumed instant by 1 millisecond:
+ * if the current instant already represents one candidate and the alternate candidate
+ * (computed by assuming instant+1 or instant–1) has a different offset, then we
+ * choose the candidate that gives the desired offset. Specifically, if earlierOrLater
+ * is false (i.e. withEarlierOffsetAtOverlap is requested) we return the candidate
+ * whose offset is the maximum (less negative) and if earlierOrLater is true (withLaterOffsetAtOverlap)
+ * we return the candidate whose offset is the minimum.
+ * 
+ * If the instant is not ambiguous then it is returned unchanged.
+ *
+ * @param instant         the instant to adjust (in UTC millis)
+ * @param earlierOrLater  false for “earlier offset” (i.e. the candidate with the larger offset value),
+ *                        true for “later offset” (i.e. the candidate with the smaller offset value)
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
-        }
-        
-        // work out range of instants that have duplicate local times
+    // Convert the UTC instant to the "ambiguous" local time.
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
     
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    // Get the offset in force at the given instant.
+    int offsetCurrent = getOffset(instant);
+    
+    // Resolve the ambiguity: by nudging the assumed instant by 1 ms in the appropriate direction,
+    // we force convertLocalToUTC to pick the alternate candidate.
+    // (A nudge of 1 ms is tiny compared to the typical DST shift.)
+    long assumedInstant = instant + (earlierOrLater ? 1L : -1L);
+    long otherInstant = convertLocalToUTC(local, false, assumedInstant);
+    int offsetOther = getOffset(otherInstant);
+    
+    // If both candidates give the same offset, then the instant is not in an overlap.
+    if (offsetCurrent == offsetOther) {
+        return instant;
+    }
+    
+    // In an overlap there are two valid offsets.
+    // For withEarlierOffsetAtOverlap (flag false) we want the candidate with the larger offset value;
+    // for withLaterOffsetAtOverlap (flag true) we want the candidate with the smaller offset.
+    int desiredOffset = earlierOrLater ? Math.min(offsetCurrent, offsetOther)
+                                       : Math.max(offsetCurrent, offsetOther);
+    // The resolved UTC instant is obtained by subtracting the desired offset from the local time.
+    long adjusted = local - desiredOffset;
+    return adjusted == instant ? instant : adjusted;
 }
\ No newline at end of file
