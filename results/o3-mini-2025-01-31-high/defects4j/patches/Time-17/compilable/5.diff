diff --git a/tmp/b8ca1989-e318-4aaa-b566-cc22d8935155_buggy.java b/tmp/05b1a943-e850-4653-9a00-312b9c727755_fixed.java
index 03b03d7..0b28509 100644
--- a/tmp/b8ca1989-e318-4aaa-b566-cc22d8935155_buggy.java
+++ b/tmp/05b1a943-e850-4653-9a00-312b9c727755_fixed.java
@@ -1,25 +1,23 @@
-    /**
-     * Adjusts the offset to be the earlier or later one during an overlap.
-     * 
-     * @param instant  the instant to adjust
-     * @param earlierOrLater  false for earlier, true for later
-     * @return the adjusted instant millis
-     */
 public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
-        }
-        
-        // work out range of instants that have duplicate local times
+    // Get the local time corresponding to the provided UTC instant.
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-        
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    // In an overlap there are two valid UTC instants for the same local time.
+    // We force the resolution by “nudging” the instant one millisecond in either direction.
+    long candidate1 = convertLocalToUTC(local, false, instant - 1);
+    long candidate2 = convertLocalToUTC(local, false, instant + 1);
+    // If the conversion is unambiguous (or in a gap) both candidates are equal.
+    if (candidate1 == candidate2) {
+        return instant;
+    }
+    // Identify the two alternatives. Note that for an ambiguous time,
+    // the candidate with the larger UTC millisecond value uses the later (smaller) offset.
+    long earlierCandidate = Math.min(candidate1, candidate2);
+    long laterCandidate = Math.max(candidate1, candidate2);
+    // If the input instant is already the desired candidate, return it unchanged.
+    // Otherwise, return the alternative.
+    if (earlierOrLater) { // true means "with later offset"
+        return (instant == laterCandidate ? instant : laterCandidate);
+    } else { // false means "with earlier offset"
+        return (instant == earlierCandidate ? instant : earlierCandidate);
+    }
 }
\ No newline at end of file
