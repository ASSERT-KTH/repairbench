diff --git a/tmp/4067dc75-78a6-46e3-9e50-8651f0a6c42d_buggy.java b/tmp/513a7427-1c5a-472b-b45c-c80d55c3408a_fixed.java
index f96e1af..7207db9 100644
--- a/tmp/4067dc75-78a6-46e3-9e50-8651f0a6c42d_buggy.java
+++ b/tmp/513a7427-1c5a-472b-b45c-c80d55c3408a_fixed.java
@@ -1,133 +1,139 @@
 /**
  * <p>Internal calculation method.</p>
  * 
  * @param val  the calendar
  * @param field  the field constant
  * @param round  true to round, false to truncate
  * @throws ArithmeticException if the year is over 280 million
  */
 private static void modify(Calendar val, int field, boolean round) {
     if (val.get(Calendar.YEAR) > 280000000) {
         throw new ArithmeticException("Calendar value too large for accurate calculations");
     }
     
     if (field == Calendar.MILLISECOND) {
         return;
     }
 
     // ----------------- Fix for LANG-59 ---------------------- START ---------------
-        // see http://issues.apache.org/jira/browse/LANG-59
+    // We must “zero‐out” all fields lower than the one being rounded.
+    // For example, when rounding to SECOND, only the milliseconds are affected;
+    // when rounding to MINUTE, we want to use the seconds (and milliseconds) to decide
+    // whether to round up or down but then leave the minutes intact.
     //
-        // Manually truncate milliseconds, seconds and minutes, rather than using
-        // Calendar methods.
+    // In the original code the lower “levels” were always processed, so for minute rounding
+    // the seconds block did not always set the done flag – causing the minutes block
+    // to run and accidentally subtract minutes.
     
     Date date = val.getTime();
     long time = date.getTime();
     boolean done = false;
     
-        // truncate milliseconds
+    // Process milliseconds (always affected if field > MILLISECOND)
     int millisecs = val.get(Calendar.MILLISECOND);
     if (!round || millisecs < 500) {
         time = time - millisecs;
+    }
+    // For SECOND rounding the only lower field is milliseconds.
     if (field == Calendar.SECOND) {
         done = true;
     }
-        }
     
-        // truncate seconds
+    // Process seconds if the target is greater than SECOND.
+    if (!done) {
         int seconds = val.get(Calendar.SECOND);
-        if (!done && (!round || seconds < 30)) {
-            time = time - (seconds * 1000L);
         if (field == Calendar.MINUTE) {
-            done = true;
+            // When rounding to MINUTE, use seconds for decision:
+            // subtract seconds when rounding down; if seconds >= 30 leave them intact.
+            if (!round || seconds < 30) {
+                time = time - (seconds * 1000L);
+            }
+            done = true;  // Do not process seconds again in the next block.
+        } else {
+            // For higher fields (e.g. HOUR) we always subtract seconds when they are low.
+            if (!round || seconds < 30) {
+                time = time - (seconds * 1000L);
+            }
         }
     }
     
-        // truncate minutes
+    // Process minutes if the target is greater than MINUTE.
+    // For example, when rounding to HOUR we want to check the minutes.
+    if (!done) {
         int minutes = val.get(Calendar.MINUTE);
-        if (!done && (!round || minutes < 30)) {
+        if (!round || minutes < 30) {
             time = time - (minutes * 60000L);
         }
+        // For fields like HOUR (or HOUR_OF_DAY) we consider minutes the lowest level,
+        // so mark done afterwards.
+        if (field == Calendar.HOUR || field == Calendar.HOUR_OF_DAY) {
+            done = true;
+        }
+    }
     
-        // reset time
+    // Update the calendar if anything changed.
     if (date.getTime() != time) {
         date.setTime(time);
         val.setTime(date);
     }
     // ----------------- Fix for LANG-59 ----------------------- END ----------------
 
     boolean roundUp = false;
     for (int i = 0; i < fields.length; i++) {
         for (int j = 0; j < fields[i].length; j++) {
             if (fields[i][j] == field) {
-                    //This is our field... we stop looping
+                // This is our field – now round up if necessary.
                 if (round && roundUp) {
                     if (field == DateUtils.SEMI_MONTH) {
-                            //This is a special case that's hard to generalize
-                            //If the date is 1, we round up to 16, otherwise
-                            //  we subtract 15 days and add 1 month
+                        // Special case for semi-month rounding.
                         if (val.get(Calendar.DATE) == 1) {
                             val.add(Calendar.DATE, 15);
                         } else {
                             val.add(Calendar.DATE, -15);
                             val.add(Calendar.MONTH, 1);
                         }
                     } else {
-                            //We need at add one to this field since the
-                            //  last number causes us to round up
+                        // For all other fields, add one to the most significant field.
                         val.add(fields[i][0], 1);
                     }
                 }
                 return;
             }
         }
-            //We have various fields that are not easy roundings
         int offset = 0;
         boolean offsetSet = false;
-            //These are special types of fields that require different rounding rules
+        // Handle special fields that require their own rounding logic.
         switch (field) {
             case DateUtils.SEMI_MONTH:
                 if (fields[i][0] == Calendar.DATE) {
-                        //If we're going to drop the DATE field's value,
-                        //  we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
                     offset = val.get(Calendar.DATE) - 1;
-                        //If we're above 15 days adjustment, that means we're in the
-                        //  bottom half of the month and should stay accordingly.
                     if (offset >= 15) {
                         offset -= 15;
                     }
-                        //Record whether we're in the top or bottom half of that range
                     roundUp = offset > 7;
                     offsetSet = true;
                 }
                 break;
             case Calendar.AM_PM:
                 if (fields[i][0] == Calendar.HOUR_OF_DAY) {
-                        //If we're going to drop the HOUR field's value,
-                        //  we want to do this our own way.
                     offset = val.get(Calendar.HOUR_OF_DAY);
                     if (offset >= 12) {
                         offset -= 12;
                     }
                     roundUp = offset > 6;
                     offsetSet = true;
                 }
                 break;
         }
         if (!offsetSet) {
             int min = val.getActualMinimum(fields[i][0]);
             int max = val.getActualMaximum(fields[i][0]);
-                //Calculate the offset from the minimum allowed value
             offset = val.get(fields[i][0]) - min;
-                //Set roundUp if this is more than half way between the minimum and maximum
             roundUp = offset > ((max - min) / 2);
         }
-            //We need to remove this field
         if (offset != 0) {
             val.set(fields[i][0], val.get(fields[i][0]) - offset);
         }
     }
     throw new IllegalArgumentException("The field " + field + " is not supported");
-
 }
\ No newline at end of file
