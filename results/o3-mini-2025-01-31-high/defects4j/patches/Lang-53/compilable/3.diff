diff --git a/tmp/68e83909-2726-4350-8405-51a496d5d98b_buggy.java b/tmp/46329d25-fec4-4ab7-a2b8-e68c7e71d952_fixed.java
index f96e1af..1695882 100644
--- a/tmp/68e83909-2726-4350-8405-51a496d5d98b_buggy.java
+++ b/tmp/46329d25-fec4-4ab7-a2b8-e68c7e71d952_fixed.java
@@ -1,133 +1,116 @@
-    /**
-     * <p>Internal calculation method.</p>
-     * 
-     * @param val  the calendar
-     * @param field  the field constant
-     * @param round  true to round, false to truncate
-     * @throws ArithmeticException if the year is over 280 million
-     */
 private static void modify(Calendar val, int field, boolean round) {
     if (val.get(Calendar.YEAR) > 280000000) {
         throw new ArithmeticException("Calendar value too large for accurate calculations");
     }
-        
     if (field == Calendar.MILLISECOND) {
         return;
     }
 
     // ----------------- Fix for LANG-59 ---------------------- START ---------------
     // see http://issues.apache.org/jira/browse/LANG-59
-        //
-        // Manually truncate milliseconds, seconds and minutes, rather than using
-        // Calendar methods.
-
+    // Manually truncate milliseconds, seconds and minutes instead of using
+    // Calendar methods. Depending on what field is being rounded, only the
+    // immediate lower field is used to decide whether to round up.
     Date date = val.getTime();
     long time = date.getTime();
-        boolean done = false;
+    boolean roundUp = false;
 
-        // truncate milliseconds
-        int millisecs = val.get(Calendar.MILLISECOND);
-        if (!round || millisecs < 500) {
-            time = time - millisecs;
-        if (field == Calendar.SECOND) {
-            done = true;
+    switch (field) {
+        case Calendar.SECOND: {
+            // When rounding to SECOND, only examine milliseconds.
+            int millis = val.get(Calendar.MILLISECOND);
+            if (round && millis >= 500) {
+                roundUp = true;
             }
+            time -= millis;
+            break;
         }
-
-        // truncate seconds
-        int seconds = val.get(Calendar.SECOND);
-        if (!done && (!round || seconds < 30)) {
-            time = time - (seconds * 1000L);
-        if (field == Calendar.MINUTE) {
-            done = true;
+        case Calendar.MINUTE: {
+            // When rounding to MINUTE, use the seconds field.
+            int millis = val.get(Calendar.MILLISECOND);
+            time -= millis;
+            int secs = val.get(Calendar.SECOND);
+            if (round && secs >= 30) {
+                roundUp = true;
             }
+            time -= (secs * 1000L);
+            break;
+        }
+        default: {
+            // For fields larger than MINUTE (e.g. HOUR, DATE, etc.),
+            // remove the complete millisecond, second and minute parts.
+            int millis = val.get(Calendar.MILLISECOND);
+            time -= millis;
+            int secs = val.get(Calendar.SECOND);
+            time -= (secs * 1000L);
+            int mins = val.get(Calendar.MINUTE);
+            time -= (mins * 60000L);
+            break;
         }
-
-        // truncate minutes
-        int minutes = val.get(Calendar.MINUTE);
-        if (!done && (!round || minutes < 30)) {
-            time = time - (minutes * 60000L);
     }
 
-        // reset time
     if (date.getTime() != time) {
         date.setTime(time);
         val.setTime(date);
     }
     // ----------------- Fix for LANG-59 ----------------------- END ----------------
 
-        boolean roundUp = false;
+    // Proceed with the normal rounding procedure.
     for (int i = 0; i < fields.length; i++) {
         for (int j = 0; j < fields[i].length; j++) {
             if (fields[i][j] == field) {
-                    //This is our field... we stop looping
+                // When we hit our target field, round up if needed.
                 if (round && roundUp) {
                     if (field == DateUtils.SEMI_MONTH) {
-                            //This is a special case that's hard to generalize
-                            //If the date is 1, we round up to 16, otherwise
-                            //  we subtract 15 days and add 1 month
+                        // Special case for SEMI_MONTH rounding.
                         if (val.get(Calendar.DATE) == 1) {
                             val.add(Calendar.DATE, 15);
                         } else {
                             val.add(Calendar.DATE, -15);
                             val.add(Calendar.MONTH, 1);
                         }
                     } else {
-                            //We need at add one to this field since the
-                            //  last number causes us to round up
+                        // Add one unit of the current (topmost) field of this group.
                         val.add(fields[i][0], 1);
                     }
                 }
                 return;
             }
         }
-            //We have various fields that are not easy roundings
+        // For fields that do not round in a trivial way, adjust the value.
         int offset = 0;
         boolean offsetSet = false;
-            //These are special types of fields that require different rounding rules
         switch (field) {
             case DateUtils.SEMI_MONTH:
                 if (fields[i][0] == Calendar.DATE) {
-                        //If we're going to drop the DATE field's value,
-                        //  we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
                     offset = val.get(Calendar.DATE) - 1;
-                        //If we're above 15 days adjustment, that means we're in the
-                        //  bottom half of the month and should stay accordingly.
                     if (offset >= 15) {
                         offset -= 15;
                     }
-                        //Record whether we're in the top or bottom half of that range
                     roundUp = offset > 7;
                     offsetSet = true;
                 }
                 break;
             case Calendar.AM_PM:
                 if (fields[i][0] == Calendar.HOUR_OF_DAY) {
-                        //If we're going to drop the HOUR field's value,
-                        //  we want to do this our own way.
                     offset = val.get(Calendar.HOUR_OF_DAY);
                     if (offset >= 12) {
                         offset -= 12;
                     }
                     roundUp = offset > 6;
                     offsetSet = true;
                 }
                 break;
         }
         if (!offsetSet) {
             int min = val.getActualMinimum(fields[i][0]);
             int max = val.getActualMaximum(fields[i][0]);
-                //Calculate the offset from the minimum allowed value
             offset = val.get(fields[i][0]) - min;
-                //Set roundUp if this is more than half way between the minimum and maximum
             roundUp = offset > ((max - min) / 2);
         }
-            //We need to remove this field
         if (offset != 0) {
             val.set(fields[i][0], val.get(fields[i][0]) - offset);
         }
     }
     throw new IllegalArgumentException("The field " + field + " is not supported");
-
 }
\ No newline at end of file
