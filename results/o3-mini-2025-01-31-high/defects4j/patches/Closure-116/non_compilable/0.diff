diff --git a/tmp/9a42d186-3c93-4026-853a-07f1a0c1269b_buggy.java b/tmp/5801fc95-8fc0-45a7-bee2-bb4a775e5c92_fixed.java
index 233a867..8c1b050 100644
--- a/tmp/9a42d186-3c93-4026-853a-07f1a0c1269b_buggy.java
+++ b/tmp/5801fc95-8fc0-45a7-bee2-bb4a775e5c92_fixed.java
@@ -1,73 +1,105 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
-  private CanInlineResult canInlineReferenceDirectly(
-      Node callNode, Node fnNode) {
+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {
+  // This version only permits “direct” inlining if the function is very “simple” –
+  // namely it has a single return statement and its returned value is a “trivial”
+  // expression that does not reorder evaluation of its one‐time parameter.
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
   Node block = fnNode.getLastChild();
+  // Only allow direct inlining for functions that consist of a single return.
+  if (block.getChildCount() != 1 || !block.getFirstChild().isReturn()) {
+    return CanInlineResult.NO;
+  }
+  Node retExpr = block.getFirstChild().getFirstChild();
+  // A function that returns nothing can be inlined.
+  if (retExpr == null) {
+    return CanInlineResult.YES;
+  }
 
+  // Determine if the returned expression is “simple enough” that inlining
+  // will not change the order in which the call‐site’s argument is evaluated.
+  // In particular, we disallow “complex” expressions that combine a parameter
+  // with another (side‐effecting) subexpression.
+  boolean simple;
+  if (retExpr.isName()) {
+    // e.g. “return a;”
+    simple = true;
+  } else if (retExpr.isGetProp() || retExpr.isGetElem()) {
+    // e.g. “return a.x;” or “return a[0];”
+    Node base = retExpr.getFirstChild();
+    while (base != null && (base.isGetProp() || base.isGetElem())) {
+      base = base.getFirstChild();
+    }
+    simple = (base != null && base.isName());
+  } else if (retExpr.isCall()) {
+    // Allow calls only if they have a single argument that is a simple name.
+    // e.g. “return getWindow(a);” is okay if getWindow is known to be side‐effect–free.
+    Node arg = retExpr.getSecondChild();
+    simple = (arg != null && arg.isName() && arg.getNext() == null);
+  } else if (retExpr.isAssign()) {
+    // e.g. “return a.x = 2;”
+    Node left = retExpr.getFirstChild();
+    if (left.isGetProp() || left.isGetElem()) {
+      Node base = left.getFirstChild();
+      simple = (base != null && base.isName());
+    } else {
+      simple = false;
+    }
+  } else if (retExpr.isAdd() || retExpr.isSub() || retExpr.isMul() || retExpr.isDiv()) {
+    // For binary operators, we allow inlining only if the left operand
+    // (which would be evaluated before the parameter is used) is pure.
+    Node left = retExpr.getFirstChild();
+    simple = !NodeUtil.mayHaveSideEffects(left, compiler);
+  } else {
+    // Other kinds of return expressions are not considered safe for direct inlining.
+    simple = false;
+  }
+  if (!simple) {
+    return CanInlineResult.NO;
+  }
 
-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
+  // Now, process the call arguments.
+  // In the call node the first child is the target, and the
+  // remaining children are arguments.
   Node cArg = callNode.getFirstChild().getNext();
 
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
+  // For functions called via .call() we expect the first argument to be a 'this'-reference.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
-        // ".apply" call should be filtered before this.
+      // An .apply() call should have been filtered out already.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
+  // For each formal parameter, check that if the corresponding call argument
+  // might produce side effects or mutate state that it is not duplicated.
+  // (Reordering can occur if the inlined expression evaluates the argument “late”.)
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
-    while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
-        if (cArg != null) {
-
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+  while (fnParam != null && cArg != null) {
+    // If the call argument might have side effects (or change mutable state)
+    // then we must be sure that the parameter is referenced only once.
+    if ((NodeUtil.mayHaveSideEffects(cArg, compiler) ||
+         NodeUtil.mayEffectMutableState(cArg, compiler))
+        && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
       return CanInlineResult.NO;
     }
-        }
-
-        // Move to the next name.
     fnParam = fnParam.getNext();
+    cArg = cArg.getNext();
   }
-
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
-      if (cArg != null) {
-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+  // Any extra call arguments must be side-effect free, since they would be dropped.
+  while (cArg != null) {
+    if (NodeUtil.mayHaveSideEffects(cArg, compiler) ||
+        NodeUtil.mayEffectMutableState(cArg, compiler)) {
       return CanInlineResult.NO;
     }
     cArg = cArg.getNext();
   }
-    }
 
   return CanInlineResult.YES;
 }
\ No newline at end of file
