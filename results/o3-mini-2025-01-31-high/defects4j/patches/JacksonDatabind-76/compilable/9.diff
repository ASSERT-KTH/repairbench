diff --git a/tmp/41ec4e5d-bea9-4540-ad63-5de67d5ef91a_buggy.java b/tmp/187d3969-b063-41a8-8cc5-504af5147c33_fixed.java
index 3effef5..2678fed 100644
--- a/tmp/41ec4e5d-bea9-4540-ad63-5de67d5ef91a_buggy.java
+++ b/tmp/187d3969-b063-41a8-8cc5-504af5147c33_fixed.java
@@ -1,73 +1,84 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
         DeserializationContext ctxt)
     throws IOException, JsonProcessingException
 {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
+    // Loop over all fields in the current JSON Object
     JsonToken t = p.getCurrentToken();
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
-            // creator property?
+        p.nextToken(); // move to the value
+
+        // Is this a creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
+            // Deserialize the value for the creator property and bind it.
+            // If binding this property completes the creator parameters, do bean creation.
             if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
+                // FIX: Do not advance the parser beyond what was needed.
+                // Instead of t = p.nextToken() here (which was skipping a field),
+                // we simply use the current token.
+                t = p.getCurrentToken();
                 Object bean;
                 try {
                     bean = creator.build(ctxt, buffer);
                 } catch (Exception e) {
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                     continue;
                 }
+                // Drain and copy any remaining JSON properties into the TokenBuffer.
+                // (Note: we manually write the field name before copying its value.)
                 while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
+                    String nextProp = p.getCurrentName();
+                    p.nextToken(); // move to the value for this property
+                    tokens.writeFieldName(nextProp);
                     tokens.copyCurrentStructure(p);
                     t = p.nextToken();
                 }
                 tokens.writeEndObject();
                 if (bean.getClass() != _beanType.getRawClass()) {
                     ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                     return null;
                 }
                 return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
             }
             continue;
         }
-            // Object Id property?
+        // Is it an Object Id property?
         if (buffer.readIdProperty(propName)) {
             continue;
         }
-            // regular property? needs buffering
+        // Is it a regular (non-creator) property?
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
             buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
             continue;
         }
+        // Is it ignorable?
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
+        // Otherwise, copy the property (and its value) to the TokenBuffer.
         tokens.writeFieldName(propName);
         tokens.copyCurrentStructure(p);
-            // "any property"?
         if (_anySetter != null) {
             buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
         }
     }
 
-        // We hit END_OBJECT, so:
+    // End of the input object: build the bean using any remaining buffered data.
     Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
     try {
         bean = creator.build(ctxt, buffer);
     } catch (Exception e) {
         return wrapInstantiationProblem(e, ctxt);
     }
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
