diff --git a/tmp/412d395d-3b14-4beb-899e-bc288456166c_buggy.java b/tmp/612ee5f4-bbfd-4fb5-8aeb-a637d6d3b0ee_fixed.java
index 3effef5..f98ef3a 100644
--- a/tmp/412d395d-3b14-4beb-899e-bc288456166c_buggy.java
+++ b/tmp/612ee5f4-bbfd-4fb5-8aeb-a637d6d3b0ee_fixed.java
@@ -1,73 +1,97 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
         DeserializationContext ctxt)
     throws IOException, JsonProcessingException
 {
+    // Start with the creator to collect creator properties.
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
+    // Create a TokenBuffer that will hold any "extra" (i.e. unwrapped) JSON content.
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
-        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
+    while (t == JsonToken.FIELD_NAME) {
         String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
-            // creator property?
+
+        // If this property is a creator property, we must deserialize it normally.
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
-                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
+            // Consume the value from the main stream.
+            p.nextToken();
+            Object value;
+            try {
+                value = creatorProp.deserialize(p, ctxt);
+            } catch (Exception e) {
+                wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+                t = p.getCurrentToken();
+                continue;
+            }
+            // Bind the creator property; if all creator parameters are now set,
+            // we can build the bean.
+            if (buffer.assignParameter(creatorProp, value)) {
+                // Advance to next token (field or END_OBJECT)
                 t = p.nextToken();
                 Object bean;
                 try {
                     bean = creator.build(ctxt, buffer);
                 } catch (Exception e) {
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+                    t = p.getCurrentToken();
                     continue;
                 }
+                // For remaining fields, copy the full JSON content into the TokenBuffer.
                 while (t == JsonToken.FIELD_NAME) {
+                    String nextProp = p.getCurrentName();
+                    tokens.writeFieldName(nextProp);
                     p.nextToken();
                     tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
+                    t = p.getCurrentToken();
                 }
                 tokens.writeEndObject();
+                // Sanity-check: unwrapped handling does not support polymorphic types.
                 if (bean.getClass() != _beanType.getRawClass()) {
                     ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                     return null;
                 }
                 return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
             }
+            t = p.getCurrentToken();
             continue;
         }
-            // Object Id property?
+        // Not a creator property.
+
+        // If the field name matches the Object Id property, let the buffer handle it.
         if (buffer.readIdProperty(propName)) {
+            p.nextToken();
+            t = p.getCurrentToken();
             continue;
         }
-            // regular property? needs buffering
-            SettableBeanProperty prop = _beanProperties.find(propName);
-            if (prop != null) {
-                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
-                continue;
-            }
+        // In "unwrapped" mode all non-creator (and non-Object Id) properties are not bound
+        // via the PropertyValueBuffer. Instead, we copy the entire field (name+value)
+        // into our TokenBuffer so that later the UnwrappedPropertyHandler can process it.
+        tokens.writeFieldName(propName);
+        p.nextToken();
+        tokens.copyCurrentStructure(p);
+
+        // Optionally, if the property is flagged as ignorable, handle that.
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
-                continue;
-            }
-            tokens.writeFieldName(propName);
-            tokens.copyCurrentStructure(p);
-            // "any property"?
-            if (_anySetter != null) {
-                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
         }
+        // (Any "any setter" handling is done later via processing of the TokenBuffer.)
+        t = p.getCurrentToken();
     }
 
-        // We hit END_OBJECT, so:
+    // End of the JSON object: build the bean using the accumulated creator properties.
     Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
     try {
         bean = creator.build(ctxt, buffer);
     } catch (Exception e) {
         return wrapInstantiationProblem(e, ctxt);
     }
+    tokens.writeEndObject();
+    // Process the unwrapped properties from the TokenBuffer and apply them
+    // (typically to a property annotated with JsonUnwrapped).
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
