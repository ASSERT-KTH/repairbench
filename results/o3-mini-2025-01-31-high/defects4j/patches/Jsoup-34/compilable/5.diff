diff --git a/tmp/45dd2421-4ee3-4ccc-b25c-59498d4ad398_buggy.java b/tmp/91c6d9ea-a2a9-4846-a14a-a49cbc0d8f92_fixed.java
index 21f64c6..22d8774 100644
--- a/tmp/45dd2421-4ee3-4ccc-b25c-59498d4ad398_buggy.java
+++ b/tmp/91c6d9ea-a2a9-4846-a14a-a49cbc0d8f92_fixed.java
@@ -1,23 +1,17 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
+    int seqLen = seq.length();
+    // Only search up to a point where the full sequence can still fit.
+    for (int offset = pos; offset <= length - seqLen; offset++) {
+        // If the current char isn't the start of the sequence, skip ahead.
         if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+            while (++offset <= length - seqLen && startChar != input[offset]) {}
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
+        int last = offset + seqLen;
+        // Check that subsequent characters match the sequence.
         for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
         if (i == last) // found full sequence
             return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
