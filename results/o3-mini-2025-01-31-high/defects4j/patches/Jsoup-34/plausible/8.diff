diff --git a/tmp/78324025-0893-426a-b33f-292eebc53eda_buggy.java b/tmp/832bc0b4-459f-4f3d-9b10-eebe90134e55_fixed.java
index 21f64c6..d17cb52 100644
--- a/tmp/78324025-0893-426a-b33f-292eebc53eda_buggy.java
+++ b/tmp/832bc0b4-459f-4f3d-9b10-eebe90134e55_fixed.java
@@ -1,23 +1,22 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
-        char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
-                    return offset - pos;
+    char first = seq.charAt(0);
+    int seqLen = seq.length();
+    // only consider candidate positions that have enough characters remaining for a full match
+    int max = length - seqLen;
+    for (int i = pos; i <= max; i++) {
+        if (input[i] == first) {
+            int j = 1;
+            while (j < seqLen && input[i + j] == seq.charAt(j))
+                j++;
+            if (j == seqLen)
+                return i - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
