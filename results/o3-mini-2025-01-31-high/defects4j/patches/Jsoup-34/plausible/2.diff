diff --git a/tmp/5e6a84b5-e614-4098-881e-d2f3f1ad3680_buggy.java b/tmp/833ad214-9c06-4e25-aad8-59fa5fcfaa73_fixed.java
index 21f64c6..be4c8dd 100644
--- a/tmp/5e6a84b5-e614-4098-881e-d2f3f1ad3680_buggy.java
+++ b/tmp/833ad214-9c06-4e25-aad8-59fa5fcfaa73_fixed.java
@@ -1,23 +1,21 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
+    int seqLen = seq.length();
     for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+        // scan to first instance of startChar:
+        if (input[offset] != startChar)
+            while (++offset < length && input[offset] != startChar) ;
+        // if there's not enough room for the full sequence, no candidate will work
+        if (offset + seqLen > length)
+            return -1;
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        int j = 1;
+        while (j < seqLen && input[i] == seq.charAt(j)) {
+            i++;
+            j++;
+        }
+        if (j == seqLen) // found full sequence
             return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
