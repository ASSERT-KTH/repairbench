diff --git a/tmp/692df802-bb24-4c1a-955c-231334edfb72_buggy.java b/tmp/6ba60354-380b-4361-9d66-14015724a881_fixed.java
index 21f64c6..d089289 100644
--- a/tmp/692df802-bb24-4c1a-955c-231334edfb72_buggy.java
+++ b/tmp/6ba60354-380b-4361-9d66-14015724a881_fixed.java
@@ -1,23 +1,21 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
-        char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+    int seqLen = seq.length();
+    if (seqLen == 0)
+        return 0;
+    // Only iterate over positions that have room for the full sequence.
+    for (int offset = pos; offset <= length - seqLen; offset++) {
+        if (input[offset] == seq.charAt(0)) {
+            boolean match = true;
+            // Check the remaining characters in the sequence.
+            for (int j = 1; j < seqLen; j++) {
+                if (input[offset + j] != seq.charAt(j)) {
+                    match = false;
+                    break;
+                }
+            }
+            if (match)
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
