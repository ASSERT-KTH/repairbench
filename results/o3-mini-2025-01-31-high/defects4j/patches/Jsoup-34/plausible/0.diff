diff --git a/tmp/ff946fa2-83fd-455b-8555-9eaac688b6b6_buggy.java b/tmp/609ad1b0-3ae0-403b-9c30-3e6a6f18dcc0_fixed.java
index 21f64c6..1693f9e 100644
--- a/tmp/ff946fa2-83fd-455b-8555-9eaac688b6b6_buggy.java
+++ b/tmp/609ad1b0-3ae0-403b-9c30-3e6a6f18dcc0_fixed.java
@@ -1,23 +1,27 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+    if (seq.length() == 0)
+        return 0;  // convention: empty sequence matches immediately
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+    int seqLen = seq.length();
+    // It's not possible for a match to start past this index
+    int max = length - seqLen;
+    for (int offset = pos; offset <= max; offset++) {
+        // Look for the first char of the sequence
+        if (input[offset] != startChar) {
+            while (++offset <= max && input[offset] != startChar) { }
+        }
+        if (offset <= max) {
+            // Try to match the remainder of the sequence
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            int end = offset + seqLen;
+            int j = 1;
+            while (i < end && input[i] == seq.charAt(j)) {
+                i++;
+                j++;
+            }
+            if (i == end)  // full sequence found
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
