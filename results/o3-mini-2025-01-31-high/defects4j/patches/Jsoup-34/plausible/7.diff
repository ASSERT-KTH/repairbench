diff --git a/tmp/d5547760-f1b0-4deb-a0f1-2b0654a28652_buggy.java b/tmp/6b4acb46-96fd-4248-adb8-921a95df65b2_fixed.java
index 21f64c6..f7d097c 100644
--- a/tmp/d5547760-f1b0-4deb-a0f1-2b0654a28652_buggy.java
+++ b/tmp/6b4acb46-96fd-4248-adb8-921a95df65b2_fixed.java
@@ -1,23 +1,24 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
-        char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+    // return 0 for empty sequences (adjust if needed)
+    if (seq.length() == 0)
+        return 0;
+
+    char first = seq.charAt(0);
+    // A candidate match must start at an index where the full sequence fits.
+    int maxCandidate = length - seq.length();
+
+    for (int offset = pos; offset <= maxCandidate; offset++) {
+        if (input[offset] == first) {
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            int j = 1;
+            // Compare the remainder of the sequence.
+            while (j < seq.length() && input[i] == seq.charAt(j)) {
+                i++;
+                j++;
+            }
+            if (j == seq.length())
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
