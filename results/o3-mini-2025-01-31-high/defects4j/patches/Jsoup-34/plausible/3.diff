diff --git a/tmp/054da6b1-9706-43ce-8d26-549a4dd671a5_buggy.java b/tmp/db5f5dfa-fc13-4718-8f59-75b2d139e8a8_fixed.java
index 21f64c6..3bcff49 100644
--- a/tmp/054da6b1-9706-43ce-8d26-549a4dd671a5_buggy.java
+++ b/tmp/db5f5dfa-fc13-4718-8f59-75b2d139e8a8_fixed.java
@@ -1,23 +1,24 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+    int seqLen = seq.length();
+    // Only iterate where there is enough room for the full sequence to match.
+    for (int offset = pos; offset <= length - seqLen; offset++) {
+        if (input[offset] == startChar) {
+            int i = 1;
+            // Check the rest of the sequence.
+            while (i < seqLen && input[offset + i] == seq.charAt(i)) {
+                i++;
+            }
+            if (i == seqLen) {
                 return offset - pos;
             }
         }
+    }
     return -1;
 }
\ No newline at end of file
