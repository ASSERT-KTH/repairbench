diff --git a/tmp/5363b3c0-50b3-46af-87c4-80bb2f90b32b_buggy.java b/tmp/47f1215f-1f91-4800-ab4d-ea71c8f73bd7_fixed.java
index 21f64c6..e2b9e8a 100644
--- a/tmp/5363b3c0-50b3-46af-87c4-80bb2f90b32b_buggy.java
+++ b/tmp/47f1215f-1f91-4800-ab4d-ea71c8f73bd7_fixed.java
@@ -1,23 +1,15 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
-        char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
-                    return offset - pos;
-            }
+    char first = seq.charAt(0);
+    int seqLen = seq.length();
+    int max = length - seqLen; // last index where a complete match is possible
+    for (int i = pos; i <= max; i++) {
+        if (input[i] != first)
+            continue;
+        int j = 1;
+        while (j < seqLen && input[i + j] == seq.charAt(j))
+            j++;
+        if (j == seqLen)
+            return i - pos;
     }
     return -1;
 }
\ No newline at end of file
