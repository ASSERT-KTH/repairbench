diff --git a/tmp/f5000780-ce46-48cb-89a2-98b48fa87aad_buggy.java b/tmp/69d4732f-ea31-4082-a4b0-3849ade98e9c_fixed.java
index eea9e73..12a6136 100644
--- a/tmp/f5000780-ce46-48cb-89a2-98b48fa87aad_buggy.java
+++ b/tmp/69d4732f-ea31-4082-a4b0-3849ade98e9c_fixed.java
@@ -1,41 +1,38 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
+    // Convert the searchChars array into an array of Unicode code points,
+    // so that supplementary characters (represented by surrogate pairs)
+    // are handled properly.
+    int[] searchCodePoints = new int[searchChars.length];
+    int count = 0;
+    for (int i = 0; i < searchChars.length; i++) {
+        char ch = searchChars[i];
+        if (Character.isHighSurrogate(ch) && i + 1 < searchChars.length
+                && Character.isLowSurrogate(searchChars[i + 1])) {
+            searchCodePoints[count++] = Character.toCodePoint(ch, searchChars[i + 1]);
+            i++; // skip the low surrogate
+        } else {
+            searchCodePoints[count++] = ch;
+        }
+    }
+    // Trim the array if necessary
+    if (count < searchCodePoints.length) {
+        int[] tmp = new int[count];
+        System.arraycopy(searchCodePoints, 0, tmp, 0, count);
+        searchCodePoints = tmp;
+    }
+
     int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+    for (int i = 0; i < csLength; ) {
+        int cp = Character.codePointAt(cs, i);
+        for (int searchCp : searchCodePoints) {
+            if (cp == searchCp) {
                 return true;
             }
         }
+        i += Character.charCount(cp);
     }
     return false;
 }
\ No newline at end of file
