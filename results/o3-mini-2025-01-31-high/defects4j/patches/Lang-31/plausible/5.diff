diff --git a/tmp/bbcad536-d923-44ec-84bb-a7347c793921_buggy.java b/tmp/693a77c2-bd55-45e8-a13f-793e3d49d27b_fixed.java
index eea9e73..479cc43 100644
--- a/tmp/bbcad536-d923-44ec-84bb-a7347c793921_buggy.java
+++ b/tmp/693a77c2-bd55-45e8-a13f-793e3d49d27b_fixed.java
@@ -1,41 +1,48 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
-		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+
+    // Convert searchChars into an array of complete Unicode code points.
+    int sLen = searchChars.length;
+    int cpCount = 0;
+    for (int i = 0; i < sLen; i++) {
+        char ch = searchChars[i];
+        if (Character.isHighSurrogate(ch) && i + 1 < sLen && Character.isLowSurrogate(searchChars[i + 1])) {
+            cpCount++;
+            i++; // Skip low surrogate as it is part of this code point.
+        } else {
+            cpCount++;
+        }
+    }
+    int[] searchCodePoints = new int[cpCount];
+    cpCount = 0;
+    for (int i = 0; i < sLen; i++) {
+        char ch = searchChars[i];
+        if (Character.isHighSurrogate(ch) && i + 1 < sLen && Character.isLowSurrogate(searchChars[i + 1])) {
+            searchCodePoints[cpCount++] = Character.toCodePoint(ch, searchChars[i + 1]);
+            i++;
+        } else {
+            searchCodePoints[cpCount++] = ch;
+        }
+    }
+
+    // Iterate through the CharSequence cs, processing full code points.
+    int csLen = cs.length();
+    for (int i = 0; i < csLen; i++) {
+        char current = cs.charAt(i);
+        int cp;
+        if (Character.isHighSurrogate(current) && i + 1 < csLen && Character.isLowSurrogate(cs.charAt(i + 1))) {
+            cp = Character.toCodePoint(current, cs.charAt(i + 1));
+            i++; // Advance past the surrogate pair.
+        } else {
+            cp = current;
+        }
+        for (int searchCp : searchCodePoints) {
+            if (cp == searchCp) {
                 return true;
             }
         }
     }
     return false;
 }
\ No newline at end of file
