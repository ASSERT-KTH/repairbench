diff --git a/tmp/a12511e4-5268-48d2-87b0-6aa5ce816508_buggy.java b/tmp/31d4fa87-cd47-44b7-8060-23f09179f8d5_fixed.java
index eea9e73..8aed3d1 100644
--- a/tmp/a12511e4-5268-48d2-87b0-6aa5ce816508_buggy.java
+++ b/tmp/31d4fa87-cd47-44b7-8060-23f09179f8d5_fixed.java
@@ -1,41 +1,29 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
+    
+    // Convert the searchChars array to an array of code points.
+    // Note: The maximum number of code points is searchChars.length.
+    int[] searchCodePoints = new int[searchChars.length];
+    int searchCount = 0;
+    for (int i = 0; i < searchChars.length; ) {
+        int cp = Character.codePointAt(searchChars, i);
+        searchCodePoints[searchCount++] = cp;
+        i += Character.charCount(cp);
+    }
+    
+    // Iterate through the CharSequence by code points.
     int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+    for (int i = 0; i < csLength; ) {
+        int cp = Character.codePointAt(cs, i);
+        // Check if this code point is in the search set.
+        for (int j = 0; j < searchCount; j++) {
+            if (cp == searchCodePoints[j]) {
                 return true;
             }
         }
+        i += Character.charCount(cp);
     }
     return false;
 }
\ No newline at end of file
