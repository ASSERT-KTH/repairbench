diff --git a/tmp/ed0d6f5a-b1a0-40b3-97fa-66b834281d37_buggy.java b/tmp/9a9420ef-48f4-4606-b2ba-1b38501ddbd5_fixed.java
index 7b89a27..9f65c55 100644
--- a/tmp/ed0d6f5a-b1a0-40b3-97fa-66b834281d37_buggy.java
+++ b/tmp/9a9420ef-48f4-4606-b2ba-1b38501ddbd5_fixed.java
@@ -1,76 +1,51 @@
-    /**
-     * Determines whether a qualified name is inferred.
-     * NOTE(nicksantos): Determining whether a property is declared or not
-     * is really really obnoxious.
-     *
-     * The problem is that there are two (equally valid) coding styles:
-     *
-     * (function() {
-     *   /* The authoritative definition of goog.bar. /
-     *   goog.bar = function() {};
-     * })();
-     *
-     * function f() {
-     *   goog.bar();
-     *   /* Reset goog.bar to a no-op. /
-     *   goog.bar = function() {};
-     * }
-     *
-     * In a dynamic language with first-class functions, it's very difficult
-     * to know which one the user intended without looking at lots of
-     * contextual information (the second example demonstrates a small case
-     * of this, but there are some really pathological cases as well).
-     *
-     * The current algorithm checks if either the declaration has
-     * JsDoc type information, or @const with a known type,
-     * or a function literal with a name we haven't seen before.
-     */
 private boolean isQualifiedNameInferred(
     String qName, Node n, JSDocInfo info,
     Node rhsValue, JSType valueType) {
   if (valueType == null) {
     return true;
   }
 
-      // Prototypes of constructors and interfaces are always declared.
-      if (qName != null && qName.endsWith(".prototype")) {
+  // Only treat prototype assignments as “declared” when the assignment
+  // is to the prototype of a known constructor or interface. Otherwise,
+  // if the property is on a non‐global (or parameter) object then we want to
+  // infer its type. (If we always returned false for *.prototype then both
+  // assignments below may get “declared” and force an inconsistent type.)
+  if (qName != null && qName.endsWith(".prototype") &&
+      info != null &&
+      (info.isConstructor() || info.isInterface())) {
     return false;
   }
 
   boolean inferred = true;
   if (info != null) {
     inferred = !(info.hasType()
         || info.hasEnumParameterType()
-            || (isConstantSymbol(info, n) && valueType != null
-                && !valueType.isUnknownType())
+        || (isConstantSymbol(info, n) && valueType != null && !valueType.isUnknownType())
         || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
   }
 
   if (inferred && rhsValue != null && rhsValue.isFunction()) {
     if (info != null) {
       return false;
-        } else if (!scope.isDeclared(qName, false) &&
-            n.isUnscopedQualifiedName()) {
+    } else if (!scope.isDeclared(qName, false) && n.isUnscopedQualifiedName()) {
 
-          // Check if this is in a conditional block.
-          // Functions assigned in conditional blocks are inferred.
+      // If this function assignment is inside a control structure
+      // then treat it as inferred.
       for (Node current = n.getParent();
            !(current.isScript() || current.isFunction());
            current = current.getParent()) {
         if (NodeUtil.isControlStructure(current)) {
           return true;
         }
       }
 
-          // Check if this is assigned in an inner scope.
-          // Functions assigned in inner scopes are inferred.
-          AstFunctionContents contents =
-              getFunctionAnalysisResults(scope.getRootNode());
+      // If the qualified name is assigned in an inner scope, treat it as inferred.
+      AstFunctionContents contents = getFunctionAnalysisResults(scope.getRootNode());
       if (contents == null ||
           !contents.getEscapedQualifiedNames().contains(qName)) {
         return false;
       }
     }
   }
   return inferred;
 }
\ No newline at end of file
