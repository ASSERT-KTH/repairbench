diff --git a/tmp/4779da45-6170-4817-8dd6-33b8d4cdcc48_buggy.java b/tmp/d713fdc7-538c-4299-b2e9-22690764e281_fixed.java
index 7b89a27..85387b7 100644
--- a/tmp/4779da45-6170-4817-8dd6-33b8d4cdcc48_buggy.java
+++ b/tmp/d713fdc7-538c-4299-b2e9-22690764e281_fixed.java
@@ -1,76 +1,62 @@
-    /**
-     * Determines whether a qualified name is inferred.
-     * NOTE(nicksantos): Determining whether a property is declared or not
-     * is really really obnoxious.
-     *
-     * The problem is that there are two (equally valid) coding styles:
-     *
-     * (function() {
-     *   /* The authoritative definition of goog.bar. /
-     *   goog.bar = function() {};
-     * })();
-     *
-     * function f() {
-     *   goog.bar();
-     *   /* Reset goog.bar to a no-op. /
-     *   goog.bar = function() {};
-     * }
-     *
-     * In a dynamic language with first-class functions, it's very difficult
-     * to know which one the user intended without looking at lots of
-     * contextual information (the second example demonstrates a small case
-     * of this, but there are some really pathological cases as well).
-     *
-     * The current algorithm checks if either the declaration has
-     * JsDoc type information, or @const with a known type,
-     * or a function literal with a name we haven't seen before.
-     */
 private boolean isQualifiedNameInferred(
-        String qName, Node n, JSDocInfo info,
-        Node rhsValue, JSType valueType) {
+    String qName, Node n, JSDocInfo info, Node rhsValue, JSType valueType) {
   if (valueType == null) {
     return true;
   }
 
-      // Prototypes of constructors and interfaces are always declared.
+  // If this is an assignment to a property ending in ".prototype", then
+  // we normally want to treat it as declared only if it’s the prototype of
+  // a constructor (or interface). Otherwise (for example, when the qualifier
+  // is a parameter of type Object) we want to treat the assignment as inferred
+  // so that type mismatch warnings do not occur.
   if (qName != null && qName.endsWith(".prototype")) {
+    if (n != null && n.isGetProp()) {
+      Node left = n.getFirstChild();
+      if (left != null && left.getJSType() != null &&
+          left.getJSType().isFunctionType()) {
+        // The left side is a constructor (or interface), so its prototype
+        // is always declared.
         return false;
       }
+    }
+    // If we get here, we are not assigning to a constructor’s prototype.
+    // We do not want to force a declared type here.
+  }
 
   boolean inferred = true;
   if (info != null) {
     inferred = !(info.hasType()
         || info.hasEnumParameterType()
-            || (isConstantSymbol(info, n) && valueType != null
-                && !valueType.isUnknownType())
+        || (isConstantSymbol(info, n) && valueType != null && !valueType.isUnknownType())
         || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
   }
 
   if (inferred && rhsValue != null && rhsValue.isFunction()) {
+    // When a function literal is assigned, normally we make it declared
+    // if it is not in a conditional block or inner (escaped) scope.
+    // However, if we are assigning to a .prototype property on a non-constructor,
+    // we always want the assignment to be inferred.
+    if (qName != null && qName.endsWith(".prototype")) {
+      return inferred;
+    }
     if (info != null) {
       return false;
-        } else if (!scope.isDeclared(qName, false) &&
-            n.isUnscopedQualifiedName()) {
-
+    } else if (!scope.isDeclared(qName, false) && n.isUnscopedQualifiedName()) {
       // Check if this is in a conditional block.
-          // Functions assigned in conditional blocks are inferred.
       for (Node current = n.getParent();
            !(current.isScript() || current.isFunction());
            current = current.getParent()) {
         if (NodeUtil.isControlStructure(current)) {
           return true;
         }
       }
-
       // Check if this is assigned in an inner scope.
-          // Functions assigned in inner scopes are inferred.
-          AstFunctionContents contents =
-              getFunctionAnalysisResults(scope.getRootNode());
-          if (contents == null ||
-              !contents.getEscapedQualifiedNames().contains(qName)) {
+      AstFunctionContents contents = getFunctionAnalysisResults(scope.getRootNode());
+      if (contents == null || !contents.getEscapedQualifiedNames().contains(qName)) {
         return false;
       }
     }
   }
+
   return inferred;
 }
\ No newline at end of file
