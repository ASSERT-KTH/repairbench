diff --git a/tmp/f104ea28-ff20-46df-9011-cf652bfe4495_buggy.java b/tmp/4edb0ecb-7167-4b64-ae46-cc0f4e826a0b_fixed.java
index 4b7e1e4..0e1a307 100644
--- a/tmp/f104ea28-ff20-46df-9011-cf652bfe4495_buggy.java
+++ b/tmp/4edb0ecb-7167-4b64-ae46-cc0f4e826a0b_fixed.java
@@ -1,52 +1,86 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
-    Map<String, String> parsePaxHeaders(final InputStream i)
-        throws IOException {
+Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
-        // Format is "length keyword=value\n";
-        while(true){ // get length
-            int ch;
-            int len = 0;
-            int read = 0;
-            while((ch = i.read()) != -1) {
-                read++;
+    while (true) {
+        // Read the first byte. Skip over any blank lines.
+        int ch = i.read();
+        if (ch == -1) {
+            break;
+        }
+        if (ch == '\n') {
+            // Skip blank lines (which can occur in malformed pax header blocks)
+            continue;
+        }
+        // The header line should start with a digit indicating its total length.
+        if (!Character.isDigit(ch)) {
+            // If not a digit, skip the rest of the line.
+            while (ch != -1 && ch != '\n') {
+                ch = i.read();
+            }
+            continue;
+        }
+        // Parse the length field.
+        int len = ch - '0';
+        int readBytes = 1;
+        // Read remaining digits until the space separator.
+        while (true) {
+            ch = i.read();
+            if (ch == -1) {
+                break;
+            }
+            readBytes++;
             if (ch == ' ') {
-                    // Get keyword
+                break;
+            }
+            if (!Character.isDigit(ch)) {
+                throw new IOException("Invalid pax header format: non-digit in length field: " + (char) ch);
+            }
+            len = len * 10 + (ch - '0');
+        }
+        if (ch == -1) {
+            break;
+        }
+        // If the parsed length is less than the bytes we’ve already read, the record is bogus.
+        if (len < readBytes) {
+            continue;
+        }
+        // Read the keyword until the '=' separator.
         final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
+        while (true) {
+            ch = i.read();
+            if (ch == -1) {
+                break;
+            }
+            readBytes++;
+            if (ch == '=') {
+                break;
+            }
+            coll.write(ch);
+        }
+        if (ch == -1) {
+            break;
+        }
         final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+        // The remaining bytes in this pax header record include the value plus a trailing newline.
+        int restLen = len - readBytes;
+        if (restLen < 0) {
+            throw new IOException("Invalid pax header; negative value length: " + restLen);
+        }
+        if (restLen == 1) {
+            // If there's only one byte left then it is merely the trailing newline.
+            // A value of empty string implies removal of the header entry.
             headers.remove(keyword);
-                            } else {
+            // (The newline is consumed by readFully below – nothing to do here.)
+            continue;
+        }
+        // Read the remainder of the record.
         final byte[] rest = new byte[restLen];
         final int got = IOUtils.readFully(i, rest);
         if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+            throw new IOException("Failed to read Paxheader. Expected " + restLen + " bytes, read " + got);
         }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+        // The value is all but the trailing newline.
+        final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
         headers.put(keyword, value);
     }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
-        }
     return headers;
 }
\ No newline at end of file
