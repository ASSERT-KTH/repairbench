diff --git a/tmp/3d81d16e-bac8-44ba-837a-951f394fa50b_buggy.java b/tmp/12592891-10ec-4f77-a2e8-299fc6ae9d49_fixed.java
index 4b7e1e4..208a38e 100644
--- a/tmp/3d81d16e-bac8-44ba-837a-951f394fa50b_buggy.java
+++ b/tmp/12592891-10ec-4f77-a2e8-299fc6ae9d49_fixed.java
@@ -1,52 +1,70 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
-    Map<String, String> parsePaxHeaders(final InputStream i)
-        throws IOException {
+Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
-        while(true){ // get length
+    outer: while (true) {
         int ch;
         int len = 0;
         int read = 0;
+
+        // Read the length field. If the very first character is a newline, skip this blank line.
         while ((ch = i.read()) != -1) {
+            if (read == 0 && ch == '\n') {
+                // Skip blank line
+                continue outer;
+            }
             read++;
             if (ch == ' ') {
-                    // Get keyword
+                // End of length field
+                break;
+            }
+            if (ch < '0' || ch > '9') {
+                throw new IOException("Invalid pax header record: non-digit character in length field");
+            }
+            len = (len * 10) + (ch - '0');
+        }
+        if (ch == -1) {
+            break;
+        }
+        if (len < read) {
+            throw new IOException("Truncated pax header record: stated length " + len
+                                  + " is less than bytes read " + read);
+        }
+
+        // Read the keyword until we reach the '=' delimiter.
         final ByteArrayOutputStream coll = new ByteArrayOutputStream();
         while ((ch = i.read()) != -1) {
             read++;
-                        if (ch == '='){ // end of keyword
+            if (ch == '=') {
+                break;
+            }
+            coll.write(ch);
+        }
+        if (ch == -1) {
+            break;
+        }
         final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
+
         final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+        if (restLen < 1) {
+            throw new IOException("Invalid pax header record: no trailing newline found");
+        }
+        if (restLen == 1) { // Only a newline is left, so remove this header.
+            ch = i.read();
+            if (ch != '\n') {
+                throw new IOException("Invalid pax header record: missing terminating newline");
+            }
             headers.remove(keyword);
         } else {
             final byte[] rest = new byte[restLen];
             final int got = IOUtils.readFully(i, rest);
             if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                throw new IOException("Failed to read Paxheader. Expected " + restLen
+                                      + " bytes, read " + got);
             }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+            // The value is everything except for the trailing newline.
+            final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
             headers.put(keyword, value);
         }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
     }
     return headers;
 }
\ No newline at end of file
