diff --git a/tmp/4493ab7c-17dd-4c9f-972c-e92e96eb4c90_buggy.java b/tmp/a3ddf053-be66-4252-aa46-694fe05a50ef_fixed.java
index 4b7e1e4..d1c888f 100644
--- a/tmp/4493ab7c-17dd-4c9f-972c-e92e96eb4c90_buggy.java
+++ b/tmp/a3ddf053-be66-4252-aa46-694fe05a50ef_fixed.java
@@ -1,52 +1,81 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
-    Map<String, String> parsePaxHeaders(final InputStream i)
-        throws IOException {
+Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
-        // Format is "length keyword=value\n";
-        while(true){ // get length
+    while (true) {
+        // Skip any blank lines (or stray CR/LF) at the beginning.
+        int first = i.read();
+        while (first == '\n' || first == '\r') {
+            first = i.read();
+        }
+        if (first == -1) {
+            break; // end-of-file reached
+        }
+        // If the record does not start with a digit, skip the rest of the line.
+        if (first < '0' || first > '9') {
+            while ((first = i.read()) != -1 && first != '\n') {
+                // Discard the rest of this line.
+            }
+            continue;
+        }
+
+        // At this point, we are at the beginning of a valid Pax header record.
+        // The format is: "length keyword=value\n"
+        int len = first - '0';
+        int bytesRead = 1; // we've already consumed the first digit
+
         int ch;
-            int len = 0;
-            int read = 0;
+        // Read the rest of the length field (digits) until a space is encountered.
         while ((ch = i.read()) != -1) {
-                read++;
+            bytesRead++;
             if (ch == ' ') {
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
+                break;
+            }
+            if (ch < '0' || ch > '9') {
+                throw new IOException("Invalid character in PAX header length: " + (char) ch);
+            }
+            len = (len * 10) + (ch - '0');
+        }
+        if (ch == -1) {
+            break; // unexpected EOF in length field
+        }
+
+        // Read the keyword: read bytes until '=' is reached.
+        ByteArrayOutputStream keywordBuffer = new ByteArrayOutputStream();
         while ((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+            bytesRead++;
+            if (ch == '=') {
+                break;
+            }
+            keywordBuffer.write(ch);
+        }
+        if (ch == -1) {
+            throw new IOException("Unexpected EOF while reading PAX header keyword");
+        }
+        final String keyword = keywordBuffer.toString(CharsetNames.UTF_8);
+
+        // Calculate the number of bytes remaining in the record (value + trailing newline).
+        int restLen = len - bytesRead;
+        if (restLen < 1) {
+            throw new IOException("Invalid PAX header record length: " + len + " too short");
+        }
+        if (restLen == 1) {
+            // There is no value; only the newline remains. Consume the newline.
+            int nl = i.read();
+            if (nl == -1) {
+                throw new IOException("Unexpected EOF reading newline at end of PAX header record");
+            }
+            // Remove the header (or any previously stored value from globalPaxHeaders).
             headers.remove(keyword);
         } else {
-                                final byte[] rest = new byte[restLen];
+            // Read the rest of the record (value plus trailing newline).
+            byte[] rest = new byte[restLen];
             final int got = IOUtils.readFully(i, rest);
             if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                throw new IOException("Failed to read PAX header. Expected " + restLen + " bytes, read " + got);
             }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+            // Exclude the trailing newline from the value.
+            final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
             headers.put(keyword, value);
         }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
     }
     return headers;
 }
\ No newline at end of file
