diff --git a/tmp/f799d613-1b0d-4ed2-82eb-09fda660d35c_buggy.java b/tmp/7c8d3a87-8bd7-452b-a7a4-01f4d4921e23_fixed.java
index 4b7e1e4..acfc0df 100644
--- a/tmp/f799d613-1b0d-4ed2-82eb-09fda660d35c_buggy.java
+++ b/tmp/7c8d3a87-8bd7-452b-a7a4-01f4d4921e23_fixed.java
@@ -1,52 +1,68 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
-    Map<String, String> parsePaxHeaders(final InputStream i)
-        throws IOException {
+Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
-        // Format is "length keyword=value\n";
-        while(true){ // get length
-            int ch;
-            int len = 0;
-            int read = 0;
+    // Each pax header record is of the form: "length keyword=value\n"
+    // Sometimes blank lines (just LF/CR) may appear. We simply skip them.
+    outer: while (true) {
+        int ch = i.read();
+        // Skip any blank lines (LF or CR)
+        while (ch == '\n' || ch == '\r') {
+            ch = i.read();
+        }
+        if (ch == -1) {
+            break; // EOF reached
+        }
+        // The record must start with a digit (the length field)
+        if (ch < '0' || ch > '9') {
+            throw new IOException("Invalid pax header, expected digit but got: " + (char) ch);
+        }
+        int len = ch - '0';
+        int read = 1;
+        // Read remaining digit characters until a space is encountered
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
+                break;
+            }
+            if (ch < '0' || ch > '9') {
+                throw new IOException("Invalid pax header length: unexpected character: " + (char) ch);
+            }
+            len = len * 10 + (ch - '0');
+        }
+        if (ch == -1) {
+            break;
+        }
+        // Now read the keyword until the '=' separator
+        final ByteArrayOutputStream keywordBuf = new ByteArrayOutputStream();
         while ((ch = i.read()) != -1) {
             read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+            if (ch == '=') {
+                break;
+            }
+            keywordBuf.write((byte) ch);
+        }
+        if (ch == -1) {
+            throw new IOException("Unexpected EOF while reading pax header keyword");
+        }
+        final String keyword = keywordBuf.toString(CharsetNames.UTF_8);
+        // The remaining bytes (len - read) consist of the value and a trailing newline.
+        final int remaining = len - read;
+        if (remaining < 1) {
+            throw new IOException("Corrupt pax header: entry length " + len + " is too small; already read " + read + " bytes.");
+        }
+        if (remaining == 1) {
+            // There is no value, only the trailing newline. Remove any existing mapping.
+            ch = i.read(); // consume the newline
             headers.remove(keyword);
         } else {
-                                final byte[] rest = new byte[restLen];
+            final byte[] rest = new byte[remaining];
             final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+            if (got != remaining) {
+                throw new IOException("Failed to read Paxheader. Expected " + remaining + " bytes, read " + got);
             }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+            // The last byte is the newline; the value is stored in the preceding bytes.
+            final String value = new String(rest, 0, remaining - 1, CharsetNames.UTF_8);
             headers.put(keyword, value);
         }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
     }
     return headers;
 }
\ No newline at end of file
