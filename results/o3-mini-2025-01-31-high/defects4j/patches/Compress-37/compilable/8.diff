diff --git a/tmp/fcce66af-ac85-4da4-a3c6-487912e50181_buggy.java b/tmp/087f8a5d-027c-4978-8c7d-0e093526a32d_fixed.java
index 4b7e1e4..f8a8bb7 100644
--- a/tmp/fcce66af-ac85-4da4-a3c6-487912e50181_buggy.java
+++ b/tmp/087f8a5d-027c-4978-8c7d-0e093526a32d_fixed.java
@@ -1,52 +1,83 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
-    Map<String, String> parsePaxHeaders(final InputStream i)
-        throws IOException {
+Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
+    // Start with the global pax headers.
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
-        // Format is "length keyword=value\n";
-        while(true){ // get length
-            int ch;
-            int len = 0;
-            int read = 0;
-            while((ch = i.read()) != -1) {
-                read++;
+    // Each entry is formatted as: "length keyword=value\n"
+    // Some archives may include spurious blank lines in the extended header.
+outer:
+    while (true) {
+        // Get the first non-blank character. (Skip blank lines.)
+        int ch = i.read();
+        if (ch == -1) {
+            break;
+        }
+        // If the first char is a newline or carriage-return, ignore it.
+        if (ch == '\n' || ch == '\r') {
+            continue;
+        }
+        // The header line must begin with a digit. If not, skip to end of line.
+        if (ch < '0' || ch > '9') {
+            while (ch != '\n' && ch != -1) {
+                ch = i.read();
+            }
+            continue;
+        }
+        // We already have one digit.
+        int len = ch - '0';
+        int readCount = 1;
+        // Continue collecting digits until we hit the space separator.
+        while (true) {
+            ch = i.read();
+            if (ch == -1) {
+                break outer;
+            }
+            readCount++;
             if (ch == ' ') {
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                break;
+            }
+            if (ch < '0' || ch > '9') {
+                // Malformed length field: skip to end of line.
+                while (ch != '\n' && ch != -1) {
+                    ch = i.read();
+                }
+                continue outer;
+            }
+            len = len * 10 + (ch - '0');
+        }
+        // Now read the "keyword" part up to the '='.
+        final ByteArrayOutputStream keywordOut = new ByteArrayOutputStream();
+        while (true) {
+            ch = i.read();
+            if (ch == -1) {
+                break outer;
+            }
+            readCount++;
+            if (ch == '=') {
+                break;
+            }
+            keywordOut.write((byte) ch);
+        }
+        final String keyword = keywordOut.toString(CharsetNames.UTF_8);
+        // Calculate how many bytes remain in this header entry.
+        int restLen = len - readCount;
+        if (restLen <= 0) {
+            // This header line is malformed (or blank); skip it.
+            continue;
+        }
+        if (restLen == 1) {
+            // Only a trailing newline remains. Per spec, in this case the header should be removed.
             headers.remove(keyword);
+            // The single trailing newline is still in the stream and will be skipped as a blank line.
         } else {
+            // Read the remaining bytes in this header entry.
             final byte[] rest = new byte[restLen];
             final int got = IOUtils.readFully(i, rest);
             if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                throw new IOException("Failed to read Paxheader. Expected " + restLen + " bytes, read " + got);
             }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+            // The final byte is the newline; drop it from the value.
+            final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
             headers.put(keyword, value);
         }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
     }
     return headers;
 }
\ No newline at end of file
