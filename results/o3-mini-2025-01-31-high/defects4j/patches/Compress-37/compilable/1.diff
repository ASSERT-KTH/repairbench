diff --git a/tmp/90712742-e842-4dce-9fb3-9311df4a3072_buggy.java b/tmp/787e8037-46d2-4d7f-9cdc-51ffc1d2bf64_fixed.java
index 4b7e1e4..f9ad6e6 100644
--- a/tmp/90712742-e842-4dce-9fb3-9311df4a3072_buggy.java
+++ b/tmp/787e8037-46d2-4d7f-9cdc-51ffc1d2bf64_fixed.java
@@ -1,52 +1,61 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
-    Map<String, String> parsePaxHeaders(final InputStream i)
-        throws IOException {
+Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
-        // Format is "length keyword=value\n";
-        while(true){ // get length
+    
+    outer: while (true) {
         int ch;
         int len = 0;
         int read = 0;
+        // Read the length field: a sequence of digits terminated by a space.
         while ((ch = i.read()) != -1) {
             read++;
+            // If a newline is encountered as the very first character, skip this (blank) line.
+            if (ch == '\n') {
+                if (read == 1 && len == 0) {
+                    // Skip the blank line and try reading the next header record.
+                    continue outer;
+                }
+                throw new IOException("Unexpected newline in pax header length field");
+            }
             if (ch == ' ') {
-                    // Get keyword
+                break;
+            }
+            if (ch < '0' || ch > '9') {
+                throw new IOException("Invalid character in pax header length field: " + (char) ch);
+            }
+            len = len * 10 + (ch - '0');
+        }
+        if (ch == -1) { // EOF reached.
+            break;
+        }
+        // Now read the keyword until '=' is encountered.
         final ByteArrayOutputStream coll = new ByteArrayOutputStream();
         while ((ch = i.read()) != -1) {
             read++;
-                        if (ch == '='){ // end of keyword
+            if (ch == '=') {
                 final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
                 final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                if (restLen < 1) {
+                    throw new IOException("Pax header record length " + len + " is too short");
+                }
+                if (restLen == 1) { // The header has no value (only a newline remains).
                     headers.remove(keyword);
                 } else {
                     final byte[] rest = new byte[restLen];
                     final int got = IOUtils.readFully(i, rest);
                     if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                        throw new IOException("Failed to read Paxheader. Expected " + restLen + " bytes, read " + got);
                     }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                    // The last byte is the newline; drop it.
+                    final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
                     headers.put(keyword, value);
                 }
-                            break;
+                continue outer;
             }
             coll.write((byte) ch);
         }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
+        if (ch == -1) { // Unexpected end-of-file while reading the keyword.
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
