diff --git a/tmp/bd3570d1-30a8-45ea-b439-6ef36944ff30_buggy.java b/tmp/a24ce5af-da91-49c3-92cc-d83b28791d34_fixed.java
index 4b7e1e4..05517e6 100644
--- a/tmp/bd3570d1-30a8-45ea-b439-6ef36944ff30_buggy.java
+++ b/tmp/a24ce5af-da91-49c3-92cc-d83b28791d34_fixed.java
@@ -1,52 +1,53 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
-    Map<String, String> parsePaxHeaders(final InputStream i)
-        throws IOException {
+Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
-        while(true){ // get length
+    HEADER_LOOP:
+    while (true) {
         int ch;
         int len = 0;
         int read = 0;
+        // First, read the digit part of the header record (its length)
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
-                    // Get keyword
+                // Now read the keyword until the '=' sign is encountered
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while ((ch = i.read()) != -1) {
                     read++;
-                        if (ch == '='){ // end of keyword
+                    if (ch == '=') {
                         final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
+                        // Calculate how many bytes remain in this record.
                         final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                        // If restLen is less than 1 then we have a blank (or malformed) header
+                        if (restLen < 1) {
+                            // Skip this header record (blank line, etc.)
+                            continue HEADER_LOOP;
+                        }
+                        if (restLen == 1) { // only a newline remains
                             headers.remove(keyword);
                         } else {
                             final byte[] rest = new byte[restLen];
                             final int got = IOUtils.readFully(i, rest);
                             if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                                throw new IOException("Failed to read Paxheader. Expected " 
+                                        + restLen + " bytes, read " + got);
                             }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                            // Drop the trailing newline
+                            final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
                             headers.put(keyword, value);
                         }
                         break;
                     }
                     coll.write((byte) ch);
                 }
-                    break; // Processed single header
+                break; // Finished processing one record.
             }
             len *= 10;
             len += ch - '0';
         }
-            if (ch == -1){ // EOF
+        if (ch == -1) { // End of stream reached.
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
