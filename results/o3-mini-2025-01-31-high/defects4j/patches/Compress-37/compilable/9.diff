diff --git a/tmp/26ef8ff4-169a-4608-aa24-3e65bb70ce18_buggy.java b/tmp/04d26f6b-820f-49c8-9de5-5c2d724a32da_fixed.java
index 4b7e1e4..f65075b 100644
--- a/tmp/26ef8ff4-169a-4608-aa24-3e65bb70ce18_buggy.java
+++ b/tmp/04d26f6b-820f-49c8-9de5-5c2d724a32da_fixed.java
@@ -1,52 +1,75 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
-    Map<String, String> parsePaxHeaders(final InputStream i)
-        throws IOException {
+Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
-        // Format is "length keyword=value\n";
-        while(true){ // get length
+    // Format is "length keyword=value\n"
+    while (true) {
+        // Read one byte and skip any blank lines (i.e. a lone LF).
+        int first = i.read();
+        if (first == -1) { // EOF reached
+            break;
+        }
+        if (first == '\n') { // skip blank lines
+            continue;
+        }
+        // The record must start with a digit.
+        if (first < '0' || first > '9') {
+            throw new IOException("Corrupt PAX header: header length does not start with a digit: " + (char) first);
+        }
+        int len = first - '0';
+        int read = 1;
         int ch;
-            int len = 0;
-            int read = 0;
+        // Read remaining digits until a space is found.
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
+                break;
+            }
+            if (ch < '0' || ch > '9') {
+                throw new IOException("Corrupt PAX header: header length contains a non-digit: " + (char) ch);
+            }
+            len = len * 10 + (ch - '0');
+        }
+        if (ch == -1) {
+            break;
+        }
+        
+        // Read the header keyword until the '=' sign.
+        final ByteArrayOutputStream keywordBuffer = new ByteArrayOutputStream();
         while ((ch = i.read()) != -1) {
             read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
+            if (ch == '=') {
+                break;
+            }
+            keywordBuffer.write((byte) ch);
+        }
+        if (ch == -1) {
+            throw new IOException("Unexpected EOF reading PAX header keyword");
+        }
+        final String keyword = keywordBuffer.toString(CharsetNames.UTF_8);
+        // The rest of the record should be "value\n" where value might be empty.
         final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+        if (restLen < 1) {
+            throw new IOException("Corrupt PAX header: record length " + len + " is too small for header " + keyword);
+        }
+        if (restLen == 1) {
+            // Only newline remains; remove the header.
             headers.remove(keyword);
+            // Consume the trailing newline.
+            int nl = i.read();
+            if (nl != '\n') {
+                throw new IOException("Expected newline at end of PAX header record");
+            }
         } else {
+            // Read the remainder of the header record.
             final byte[] rest = new byte[restLen];
             final int got = IOUtils.readFully(i, rest);
             if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                throw new IOException("Failed to read PAX header. Expected " + 
+                                        restLen + " bytes, read " + got);
             }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+            // The final character should be a newline; drop it.
+            final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
             headers.put(keyword, value);
         }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
     }
     return headers;
 }
\ No newline at end of file
