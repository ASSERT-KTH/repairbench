diff --git a/tmp/be37abf4-2dff-45d7-b3e2-677935bd54ec_buggy.java b/tmp/5e03856b-bab7-4c54-a1b7-edccd6354882_fixed.java
index 4b7e1e4..3a74ec2 100644
--- a/tmp/be37abf4-2dff-45d7-b3e2-677935bd54ec_buggy.java
+++ b/tmp/5e03856b-bab7-4c54-a1b7-edccd6354882_fixed.java
@@ -1,52 +1,68 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
-    Map<String, String> parsePaxHeaders(final InputStream i)
-        throws IOException {
+Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
-        // Format is "length keyword=value\n";
-        while(true){ // get length
+    headerLoop: while (true) {
         int ch;
         int len = 0;
         int read = 0;
+        // First, parse the length field which is a series of digits terminated by a space
         while ((ch = i.read()) != -1) {
             read++;
+            // If the very first character is a newline, this is a blank (empty) line â€“ skip it.
+            if (ch == '\n' && read == 1) {
+                // Start again with the next header record.
+                continue headerLoop;
+            }
             if (ch == ' ') {
-                    // Get keyword
+                // End of the length field.
+                break;
+            }
+            // If a non-digit (and not a space) is encountered, skip to end of line.
+            if (ch < '0' || ch > '9') {
+                while ((ch = i.read()) != -1 && ch != '\n') {
+                    // discard until newline
+                }
+                continue headerLoop;
+            }
+            len = len * 10 + (ch - '0');
+        }
+        if (ch == -1) {
+            break; // end-of-stream
+        }
+        // Now read the keyword until we hit an '='
         final ByteArrayOutputStream coll = new ByteArrayOutputStream();
         while ((ch = i.read()) != -1) {
             read++;
-                        if (ch == '='){ // end of keyword
+            if (ch == '=') {
+                break;
+            }
+            coll.write((byte) ch);
+        }
+        if (ch == -1) {
+            break;
+        }
         final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
         final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+        // We expect the header record (as given by 'len') to have the remaining text plus a trailing newline.
+        if (restLen < 1) {
+            // This record is malformed (or blank). Skip to the end of the current line.
+            while ((ch = i.read()) != -1 && ch != '\n') {
+                // discard the rest of the line
+            }
+            continue headerLoop;
+        } else if (restLen == 1) { // nothing but the NL is left; this is a deletion marker.
             headers.remove(keyword);
+            // Consume the trailing newline.
+            i.read();
         } else {
             final byte[] rest = new byte[restLen];
             final int got = IOUtils.readFully(i, rest);
             if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                throw new IOException("Failed to read Paxheader. Expected " + restLen + " bytes, read " + got);
             }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+            // The last byte must be a newline; drop it.
+            final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
             headers.put(keyword, value);
         }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
     }
     return headers;
 }
\ No newline at end of file
