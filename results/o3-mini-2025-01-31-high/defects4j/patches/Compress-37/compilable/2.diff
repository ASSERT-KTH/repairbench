diff --git a/tmp/e73192be-17b6-4195-83a4-efd7de191f9d_buggy.java b/tmp/7de1f979-5a88-4507-a81a-b8cab0ee2296_fixed.java
index 4b7e1e4..e27e2b0 100644
--- a/tmp/e73192be-17b6-4195-83a4-efd7de191f9d_buggy.java
+++ b/tmp/7de1f979-5a88-4507-a81a-b8cab0ee2296_fixed.java
@@ -1,52 +1,72 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
-    Map<String, String> parsePaxHeaders(final InputStream i)
-        throws IOException {
+Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
-        // Format is "length keyword=value\n";
-        while(true){ // get length
-            int ch;
-            int len = 0;
-            int read = 0;
+HEADER:
+    while (true) {
+        int ch = i.read();
+        if (ch == -1) {
+            break;
+        }
+        // Skip any lines that do not begin with a digit.
+        if (!Character.isDigit(ch)) {
+            while (ch != -1 && ch != '\n') {
+                ch = i.read();
+            }
+            continue;
+        }
+        int len = ch - '0';
+        int read = 1;
+        // Read the rest of the length field (digits) until a space.
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
-                    // Get keyword
+                break;
+            }
+            if (!Character.isDigit(ch)) {
+                // Found an unexpected character; skip to the end of the line.
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
+                }
+                continue HEADER;
+            }
+            len = len * 10 + (ch - '0');
+        }
+        if (ch == -1) {
+            break;
+        }
+        // Now read the keyword (which ends at an '=' character).
         final ByteArrayOutputStream coll = new ByteArrayOutputStream();
         while ((ch = i.read()) != -1) {
             read++;
-                        if (ch == '='){ // end of keyword
+            if (ch == '=') {
+                break;
+            }
+            coll.write((byte) ch);
+        }
+        if (ch == -1) {
+            break;
+        }
+        // Calculate the number of bytes left (this should include the trailing newline).
+        int restLen = len - read;
+        if (restLen < 1) {
+            // This header record is blank or invalid (for example, a blank line); just ignore it.
+            continue;
+        }
         final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+        if (restLen == 1) { // Only the newline remains, so remove the attribute.
             headers.remove(keyword);
+            // Consume the trailing newline.
+            i.read();
         } else {
             final byte[] rest = new byte[restLen];
             final int got = IOUtils.readFully(i, rest);
             if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                throw new IOException("Failed to read Paxheader. Expected " +
+                                      restLen + " bytes, read " + got);
             }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+            // Drop the trailing newline.
+            final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
             headers.put(keyword, value);
         }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
     }
     return headers;
 }
\ No newline at end of file
