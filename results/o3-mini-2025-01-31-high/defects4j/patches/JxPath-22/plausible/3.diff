diff --git a/tmp/be5b7f2a-492d-4459-9bcb-723f15e70e2f_buggy.java b/tmp/25c6b35a-04da-45b9-895d-c1e6ac39f407_fixed.java
index 1bd0d7e..f67e3ce 100644
--- a/tmp/be5b7f2a-492d-4459-9bcb-723f15e70e2f_buggy.java
+++ b/tmp/25c6b35a-04da-45b9-895d-c1e6ac39f407_fixed.java
@@ -1,31 +1,35 @@
-    /**
-     * Get the ns uri of the specified node.
-     * @param node Node to check
-     * @return String ns uri
-     */
 public static String getNamespaceURI(Node node) {
     if (node instanceof Document) {
         node = ((Document) node).getDocumentElement();
     }
-
     Element element = (Element) node;
 
     String uri = element.getNamespaceURI();
+    // Normalize empty string to null since an empty namespace should be treated as no namespace.
+    if (uri != null && uri.isEmpty()) {
+        uri = null;
+    }
     if (uri == null) {
-            String prefix = getPrefix(node);
-            String qname = prefix == null ? "xmlns" : "xmlns:" + prefix;
+        // Use the element's own prefix instead of a separate getPrefix() helper.
+        String prefix = element.getPrefix();
+        String qname = (prefix == null || prefix.isEmpty()) ? "xmlns" : "xmlns:" + prefix;
 
         Node aNode = node;
         while (aNode != null) {
             if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                 Attr attr = ((Element) aNode).getAttributeNode(qname);
                 if (attr != null) {
-                        return attr.getValue();
+                    String ns = attr.getValue();
+                    // Again, treat an empty string as no namespace.
+                    if (ns != null && ns.isEmpty()) {
+                        ns = null;
+                    }
+                    return ns;
                 }
             }
             aNode = aNode.getParentNode();
         }
         return null;
     }
     return uri;
 }
\ No newline at end of file
