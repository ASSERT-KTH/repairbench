diff --git a/tmp/3a8a1ec1-71ec-4868-9b2a-6a81ecbe97bd_buggy.java b/tmp/888d28f1-621b-4f2e-86ae-4f54ecce737e_fixed.java
index 30d7266..a89e0da 100644
--- a/tmp/3a8a1ec1-71ec-4868-9b2a-6a81ecbe97bd_buggy.java
+++ b/tmp/888d28f1-621b-4f2e-86ae-4f54ecce737e_fixed.java
@@ -1,69 +1,71 @@
-  /**
-   * Since this pass reports errors only when a global {@code this} keyword
-   * is encountered, there is no reason to traverse non global contexts.
-   */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
   if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
+    // Don't traverse functions that are constructors or have the @this/@override annotations.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc != null &&
         (jsDoc.isConstructor() ||
          jsDoc.isInterface() ||
          jsDoc.hasThisType() ||
          jsDoc.isOverride())) {
       return false;
     }
 
     // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {}; // or
-      // var a = {x: function() {}};
+    // be able to have a @this annotation associated with them.
     int pType = parent.getType();
     if (!(pType == Token.BLOCK ||
           pType == Token.SCRIPT ||
           pType == Token.NAME ||
           pType == Token.ASSIGN ||
-
           // object literal keys
           pType == Token.STRING ||
           pType == Token.NUMBER)) {
       return false;
     }
 
-      // Don't traverse functions that are getting lent to a prototype.
+    // FIX: Don't traverse functions that are defined in an object literal
+    // with a @lends annotation (e.g. for prototype methods).
+    // In an object literal, the function value's parent is typically a STRING/NUMBER node
+    // (the property key), whose parent is the OBJECTLIT carrying the @lends annotation.
+    if ((pType == Token.STRING || pType == Token.NUMBER) && parent.getParent() != null) {
+      Node objLit = parent.getParent();
+      if (objLit.getType() == Token.OBJECTLIT) {
+        JSDocInfo objJsDoc = objLit.getJSDocInfo();
+        if (objJsDoc != null && objJsDoc.getLendsName() != null) {
+          return false;
+        }
+      }
+    }
+
+    // (Other lends cases, such as functions assigned via prototype assignments, are
+    // handled below in the parent ASSIGN check.)
   }
 
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
     Node rhs = lhs.getNext();
 
     if (n == lhs) {
       // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
+      // nested assignments properly, assignLhsChild should not be overridden.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
+      // Only traverse the right side if it's not an assignment to a prototype property or subproperty.
       if (NodeUtil.isGet(lhs)) {
         if (lhs.getType() == Token.GETPROP &&
             lhs.getLastChild().getString().equals("prototype")) {
           return false;
         }
         Node llhs = lhs.getFirstChild();
         if (llhs.getType() == Token.GETPROP &&
             llhs.getLastChild().getString().equals("prototype")) {
           return false;
         }
       }
     }
   }
 
   return true;
 }
\ No newline at end of file
