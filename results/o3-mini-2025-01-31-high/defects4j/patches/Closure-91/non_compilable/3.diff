diff --git a/tmp/0eaa6ebf-7a60-40f5-b69e-c02f237ad28e_buggy.java b/tmp/8f96be70-e2b1-4e0a-8c7c-bcfd0a7c6880_fixed.java
index 30d7266..5136d20 100644
--- a/tmp/0eaa6ebf-7a60-40f5-b69e-c02f237ad28e_buggy.java
+++ b/tmp/8f96be70-e2b1-4e0a-8c7c-bcfd0a7c6880_fixed.java
@@ -1,69 +1,73 @@
-  /**
-   * Since this pass reports errors only when a global {@code this} keyword
-   * is encountered, there is no reason to traverse non global contexts.
-   */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
   if (n.getType() == Token.FUNCTION) {
     // Don't traverse functions that are constructors or have the @this
     // or @override annotation.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc != null &&
         (jsDoc.isConstructor() ||
          jsDoc.isInterface() ||
          jsDoc.hasThisType() ||
          jsDoc.isOverride())) {
       return false;
     }
 
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {}; // or
-      // var a = {x: function() {}};
+    // Only traverse functions that are in a context where a @this annotation is allowed.
     int pType = parent.getType();
     if (!(pType == Token.BLOCK ||
           pType == Token.SCRIPT ||
           pType == Token.NAME ||
           pType == Token.ASSIGN ||
-
-            // object literal keys
+          // keys in object literals often have type STRING or NUMBER.
           pType == Token.STRING ||
           pType == Token.NUMBER)) {
       return false;
     }
     
     // Don't traverse functions that are getting lent to a prototype.
+    // In many cases a @lends annotation is attached to an object literal.
+    // The function might be the value of a property whose parent is a STRING (or NUMBER)
+    // node, whose parent in turn is an object literal carrying a @lends annotation.
+    // In either case, we want to skip traversing the function.
+    if (parent.getType() == Token.OBJECTLIT) {
+      JSDocInfo parentJsDoc = parent.getJSDocInfo();
+      if (parentJsDoc != null && parentJsDoc.getLends() != null) {
+        return false;
+      }
+    } else if (parent.getParent() != null && parent.getParent().getType() == Token.OBJECTLIT) {
+      JSDocInfo objLitJsDoc = parent.getParent().getJSDocInfo();
+      if (objLitJsDoc != null && objLitJsDoc.getLends() != null) {
+        return false;
+      }
+    }
   }
 
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
     Node rhs = lhs.getNext();
 
     if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
+      // Always traverse the left side of the assignment.
+      // To handle nested assignments properly (e.g., (a = this).property = c),
       // assignLhsChild should not be overridden.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
       // Only traverse the right side if it's not an assignment to a prototype
       // property or subproperty.
       if (NodeUtil.isGet(lhs)) {
         if (lhs.getType() == Token.GETPROP &&
             lhs.getLastChild().getString().equals("prototype")) {
           return false;
         }
         Node llhs = lhs.getFirstChild();
         if (llhs.getType() == Token.GETPROP &&
             llhs.getLastChild().getString().equals("prototype")) {
           return false;
         }
       }
     }
   }
 
   return true;
 }
\ No newline at end of file
