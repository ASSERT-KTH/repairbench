diff --git a/tmp/df331221-618e-4974-914f-c934d68b98e9_buggy.java b/tmp/030bbbe1-c3fd-4831-86d1-a76334c72806_fixed.java
index 30d7266..cf9ac6d 100644
--- a/tmp/df331221-618e-4974-914f-c934d68b98e9_buggy.java
+++ b/tmp/030bbbe1-c3fd-4831-86d1-a76334c72806_fixed.java
@@ -1,69 +1,76 @@
-  /**
-   * Since this pass reports errors only when a global {@code this} keyword
-   * is encountered, there is no reason to traverse non global contexts.
-   */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
   if (n.getType() == Token.FUNCTION) {
     // Don't traverse functions that are constructors or have the @this
     // or @override annotation.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc != null &&
         (jsDoc.isConstructor() ||
          jsDoc.isInterface() ||
          jsDoc.hasThisType() ||
          jsDoc.isOverride())) {
       return false;
     }
 
     // Don't traverse functions unless they would normally
     // be able to have a @this annotation associated with them. e.g.,
     // var a = function() { }; // or
     // function a() {} // or
     // a.x = function() {}; // or
     // var a = {x: function() {}};
     int pType = parent.getType();
     if (!(pType == Token.BLOCK ||
           pType == Token.SCRIPT ||
           pType == Token.NAME ||
           pType == Token.ASSIGN ||
-
           // object literal keys
           pType == Token.STRING ||
           pType == Token.NUMBER)) {
       return false;
     }
 
     // Don't traverse functions that are getting lent to a prototype.
+    // This handles cases where an object literal is annotated with a
+    // @lends tag (e.g., { @lends {F.prototype} ... }) and its functions
+    // should not trigger global 'this' warnings.
+    if ((pType == Token.STRING || pType == Token.NUMBER) && parent.getParent() != null) {
+      Node objLit = parent.getParent();
+      if (objLit.getType() == Token.OBJECTLIT) {
+        JSDocInfo objJsDoc = objLit.getJSDocInfo();
+        if (objJsDoc != null && objJsDoc.getLendsName() != null &&
+            objJsDoc.getLendsName().endsWith("prototype")) {
+          return false;
+        }
+      }
+    }
   }
 
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
-      Node rhs = lhs.getNext();
+    // Node rhs = lhs.getNext(); // Unused variable in this context.
 
     if (n == lhs) {
       // Always traverse the left side of the assignment. To handle
       // nested assignments properly (e.g., (a = this).property = c;),
       // assignLhsChild should not be overridden.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
       // Only traverse the right side if it's not an assignment to a prototype
       // property or subproperty.
       if (NodeUtil.isGet(lhs)) {
         if (lhs.getType() == Token.GETPROP &&
             lhs.getLastChild().getString().equals("prototype")) {
           return false;
         }
         Node llhs = lhs.getFirstChild();
         if (llhs.getType() == Token.GETPROP &&
             llhs.getLastChild().getString().equals("prototype")) {
           return false;
         }
       }
     }
   }
 
   return true;
 }
\ No newline at end of file
