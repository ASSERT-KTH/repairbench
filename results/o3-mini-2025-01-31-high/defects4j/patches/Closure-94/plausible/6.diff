diff --git a/tmp/46ba679a-ad62-45b4-9f64-4894d5f4c032_buggy.java b/tmp/f2209520-3e5a-418a-95e7-01cc8529dd89_fixed.java
index 66e3d01..ba4652b 100644
--- a/tmp/46ba679a-ad62-45b4-9f64-4894d5f4c032_buggy.java
+++ b/tmp/f2209520-3e5a-418a-95e7-01cc8529dd89_fixed.java
@@ -1,34 +1,36 @@
-  /**
-   * Determines whether the given value may be assigned to a define.
-   *
-   * @param val The value being assigned.
-   * @param defines The list of names of existing defines.
-   */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
   switch (val.getType()) {
+    // Literals are always valid.
     case Token.STRING:
     case Token.NUMBER:
     case Token.TRUE:
     case Token.FALSE:
       return true;
 
-      // Binary operators are only valid if both children are valid.
+    // Binary operators: both operands must be valid.
+    case Token.ADD:
+    case Token.SUB:
+    case Token.MUL:
+    case Token.DIV:
+    case Token.MOD:
     case Token.BITAND:
-      case Token.BITNOT:
     case Token.BITOR:
     case Token.BITXOR:
+      return isValidDefineValue(val.getFirstChild(), defines) &&
+             isValidDefineValue(val.getLastChild(), defines);
 
-      // Uniary operators are valid if the child is valid.
+    // Unary operators: only the single child must be valid.
     case Token.NOT:
     case Token.NEG:
+    case Token.BITNOT:
       return isValidDefineValue(val.getFirstChild(), defines);
 
-      // Names are valid if and only if they are defines themselves.
+    // Names (or properties) are valid only if they refer to an existing define.
     case Token.NAME:
     case Token.GETPROP:
-        if (val.isQualifiedName()) {
-          return defines.contains(val.getQualifiedName());
-        }
-    }
+      return val.isQualifiedName() && defines.contains(val.getQualifiedName());
+
+    default:
       return false;
   }
+}
\ No newline at end of file
