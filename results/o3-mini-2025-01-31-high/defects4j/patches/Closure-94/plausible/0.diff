diff --git a/tmp/dbf9a713-1db5-43af-96ab-c0a70bb448c1_buggy.java b/tmp/00534eab-0c92-43be-a838-1a15f862b709_fixed.java
index 66e3d01..6ed29aa 100644
--- a/tmp/dbf9a713-1db5-43af-96ab-c0a70bb448c1_buggy.java
+++ b/tmp/00534eab-0c92-43be-a838-1a15f862b709_fixed.java
@@ -1,34 +1,34 @@
-  /**
-   * Determines whether the given value may be assigned to a define.
-   *
-   * @param val The value being assigned.
-   * @param defines The list of names of existing defines.
-   */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
   switch (val.getType()) {
+    // Literal values.
     case Token.STRING:
     case Token.NUMBER:
     case Token.TRUE:
     case Token.FALSE:
       return true;
 
-      // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
+    // Names are only valid if they are defined.
+    case Token.NAME:
+    case Token.GETPROP:
+      return val.isQualifiedName() && defines.contains(val.getQualifiedName());
+
+    // Unary operators: only check the single child.
+    case Token.NEG:
+    case Token.NOT:
     case Token.BITNOT:
+      return isValidDefineValue(val.getFirstChild(), defines);
+
+    // Binary operators: both children must be valid.
+    case Token.ADD:
+    case Token.SUB:
+    case Token.MUL:
+    case Token.DIV:
+    case Token.MOD:
+    case Token.BITAND:
     case Token.BITOR:
     case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
-      case Token.NOT:
-      case Token.NEG:
-        return isValidDefineValue(val.getFirstChild(), defines);
-
-      // Names are valid if and only if they are defines themselves.
-      case Token.NAME:
-      case Token.GETPROP:
-        if (val.isQualifiedName()) {
-          return defines.contains(val.getQualifiedName());
-        }
+      return isValidDefineValue(val.getFirstChild(), defines) &&
+             isValidDefineValue(val.getLastChild(), defines);
   }
   return false;
 }
\ No newline at end of file
