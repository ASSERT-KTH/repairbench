diff --git a/tmp/5eea2705-2495-4592-b92e-c04d045f7036_buggy.java b/tmp/971f7856-c8cd-45be-8d8c-bae38e4685cc_fixed.java
index 66e3d01..433a234 100644
--- a/tmp/5eea2705-2495-4592-b92e-c04d045f7036_buggy.java
+++ b/tmp/971f7856-c8cd-45be-8d8c-bae38e4685cc_fixed.java
@@ -1,34 +1,49 @@
 /**
  * Determines whether the given value may be assigned to a define.
  *
  * @param val The value being assigned.
  * @param defines The list of names of existing defines.
  */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
   switch (val.getType()) {
     case Token.STRING:
     case Token.NUMBER:
     case Token.TRUE:
     case Token.FALSE:
       return true;
 
     // Binary operators are only valid if both children are valid.
+    // (We now check both the left and right children.)
+    case Token.ADD:
     case Token.BITAND:
-      case Token.BITNOT:
     case Token.BITOR:
-      case Token.BITXOR:
+    case Token.BITXOR: {
+      Node left = val.getFirstChild();
+      if (left == null) {
+        return false;
+      }
+      Node right = left.getNext();
+      return right != null
+          && isValidDefineValue(left, defines)
+          && isValidDefineValue(right, defines);
+    }
 
-      // Uniary operators are valid if the child is valid.
+    // Unary operators (including BITNOT which represents "~" in JavaScript)
+    // are valid if their single child is valid.
     case Token.NOT:
     case Token.NEG:
+    case Token.BITNOT:
       return isValidDefineValue(val.getFirstChild(), defines);
 
-      // Names are valid if and only if they are defines themselves.
+    // Names (and property gets) are only valid if they refer to an already defined value.
     case Token.NAME:
     case Token.GETPROP:
       if (val.isQualifiedName()) {
         return defines.contains(val.getQualifiedName());
       }
-    }
       return false;
+
+    default:
+      return false;
+  }
 }
\ No newline at end of file
