diff --git a/tmp/b7decf8e-efd2-40a4-a7ca-8d828ad57b6d_buggy.java b/tmp/2fd63a8c-2a3c-4e79-9498-8372f018af1a_fixed.java
index 66e3d01..f0736fc 100644
--- a/tmp/b7decf8e-efd2-40a4-a7ca-8d828ad57b6d_buggy.java
+++ b/tmp/2fd63a8c-2a3c-4e79-9498-8372f018af1a_fixed.java
@@ -1,34 +1,39 @@
-  /**
-   * Determines whether the given value may be assigned to a define.
-   *
-   * @param val The value being assigned.
-   * @param defines The list of names of existing defines.
-   */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
   switch (val.getType()) {
+    // Literals are always valid.
     case Token.STRING:
     case Token.NUMBER:
     case Token.TRUE:
     case Token.FALSE:
       return true;
 
-      // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
-      case Token.BITNOT:
-      case Token.BITOR:
-      case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
+    // Unary operators: valid if the lone operand is valid.
     case Token.NOT:
     case Token.NEG:
+    case Token.BITNOT:
       return isValidDefineValue(val.getFirstChild(), defines);
 
-      // Names are valid if and only if they are defines themselves.
+    // Binary operators: valid only if both the left and right children are valid.
+    case Token.ADD:
+    case Token.SUB:
+    case Token.MUL:
+    case Token.DIV:
+    case Token.MOD:
+    case Token.BITAND:
+    case Token.BITOR:
+    case Token.BITXOR:
+      return isValidDefineValue(val.getFirstChild(), defines)
+          && isValidDefineValue(val.getLastChild(), defines);
+
+    // Names are valid if they are qualified and have been defined.
     case Token.NAME:
     case Token.GETPROP:
       if (val.isQualifiedName()) {
         return defines.contains(val.getQualifiedName());
       }
-    }
       return false;
+
+    default:
+      return false;
+  }
 }
\ No newline at end of file
