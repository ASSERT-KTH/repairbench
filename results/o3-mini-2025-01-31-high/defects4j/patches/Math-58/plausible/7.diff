diff --git a/tmp/ca411b14-c55b-466e-9e21-ab92cd26262b_buggy.java b/tmp/8d1d18db-e1ea-417c-a58e-448ace868fa6_fixed.java
index 3002587..b202e99 100644
--- a/tmp/ca411b14-c55b-466e-9e21-ab92cd26262b_buggy.java
+++ b/tmp/8d1d18db-e1ea-417c-a58e-448ace868fa6_fixed.java
@@ -1,10 +1,28 @@
-    /**
-     * Fits a Gaussian function to the observed points.
-     *
-     * @return the parameters of the Gaussian function that best fits the
-     * observed points (in the same order as above).
-     */
 public double[] fit() {
-        final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+    final double[] guess = new ParameterGuesser(getObservations()).guess();
+    return fit(new Gaussian.Parametric() {
+        @Override
+        public double value(double x, double[] p) {
+            try {
+                return super.value(x, p);
+            } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
+                // Instead of letting negative sigma cause an exception,
+                // return NaN so the optimizer can handle it gracefully.
+                return Double.NaN;
+            }
+        }
+
+        @Override
+        public double[] gradient(double x, double[] p) {
+            try {
+                return super.gradient(x, p);
+            } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
+                final double[] grad = new double[p.length];
+                for (int i = 0; i < grad.length; i++) {
+                    grad[i] = Double.NaN;
+                }
+                return grad;
+            }
+        }
+    }, guess);
 }
\ No newline at end of file
