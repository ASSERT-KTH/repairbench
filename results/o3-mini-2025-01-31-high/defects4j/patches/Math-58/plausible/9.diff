diff --git a/tmp/39d51977-1034-445b-88e2-58228593835c_buggy.java b/tmp/13e19d66-5568-4e29-96c9-971a012e8113_fixed.java
index 3002587..ddcd69e 100644
--- a/tmp/39d51977-1034-445b-88e2-58228593835c_buggy.java
+++ b/tmp/13e19d66-5568-4e29-96c9-971a012e8113_fixed.java
@@ -1,10 +1,36 @@
-    /**
-     * Fits a Gaussian function to the observed points.
-     *
-     * @return the parameters of the Gaussian function that best fits the
-     * observed points (in the same order as above).
-     */
 public double[] fit() {
     final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+    // Wrap the Gaussian function so that if the sigma parameter is negative (or zero)
+    // we use its absolute value rather than throwing an exception.
+    Gaussian.Parametric func = new Gaussian.Parametric() {
+        @Override
+        public double value(double x, double[] parameters) {
+            double a = parameters[0];
+            double mu = parameters[1];
+            // Instead of requiring sigma > 0 we use its absolute value.
+            double sigma = parameters[2] <= 0 ? -parameters[2] : parameters[2];
+            return a * Math.exp(-0.5 * (x - mu) * (x - mu) / (sigma * sigma));
+        }
+
+        @Override
+        public double[] gradient(double x, double[] parameters) {
+            double a = parameters[0];
+            double mu = parameters[1];
+            double sigmaOrig = parameters[2];
+            // Use the absolute value for sigma in the evaluation.
+            double sigma = sigmaOrig <= 0 ? -sigmaOrig : sigmaOrig;
+            double diff = x - mu;
+            double expTerm = Math.exp(-0.5 * diff * diff / (sigma * sigma));
+            double dA = expTerm;
+            double dMu = a * expTerm * diff / (sigma * sigma);
+            double dSigma = a * expTerm * diff * diff / (sigma * sigma * sigma);
+            // If the original sigma was negative, flip the sign of the derivative.
+            if (sigmaOrig < 0) {
+                dSigma = -dSigma;
+            }
+            return new double[] { dA, dMu, dSigma };
+        }
+    };
+
+    return fit(func, guess);
 }
\ No newline at end of file
