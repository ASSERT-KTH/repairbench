diff --git a/tmp/0de4cfe0-7a8a-4b72-9317-357048a735d7_buggy.java b/tmp/bc6413a2-516b-430f-8f62-752b759d1abb_fixed.java
index 10616db..34b7468 100644
--- a/tmp/0de4cfe0-7a8a-4b72-9317-357048a735d7_buggy.java
+++ b/tmp/bc6413a2-516b-430f-8f62-752b759d1abb_fixed.java
@@ -1,19 +1,25 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
+        long instant;
+        // When the partial does not include a year (as in MonthDay),
+        // we use a default leap year (2000) so that day 29 is valid.
+        if (partial.size() == 2 &&
+            partial.getFieldType(0) == DateTimeFieldType.monthOfYear() &&
+            partial.getFieldType(1) == DateTimeFieldType.dayOfMonth()) {
+            int defaultYear = 2000; // a leap year
+            instant = iChronology.getDateTimeMillis(defaultYear, values[0], values[1], 0);
+        } else {
+            instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
+        }
         instant = add(instant, valueToAdd);
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
