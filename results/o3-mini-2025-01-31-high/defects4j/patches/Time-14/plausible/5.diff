diff --git a/tmp/a671adde-2523-4a80-aae0-a82069e50421_buggy.java b/tmp/7167cab0-9303-4217-b7d8-6a46147437af_fixed.java
index 10616db..db0c98d 100644
--- a/tmp/a671adde-2523-4a80-aae0-a82069e50421_buggy.java
+++ b/tmp/7167cab0-9303-4217-b7d8-6a46147437af_fixed.java
@@ -1,19 +1,26 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
+        long instant;
+        // If the partial is a MonthDay (i.e. it has month and day fields only),
+        // then we must use a base instant in a leap year (for example, 2000)
+        // so that a leap day (Feb 29) is represented correctly.
+        if (partial.size() == 2 &&
+            partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) &&
+            partial.getFieldType(1).equals(DateTimeFieldType.dayOfMonth())) {
+            // Use year 2000 as the fixed leap year base.
+            instant = iChronology.getDateTimeMillis(2000, values[0], values[1], 0);
+        } else {
+            instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
+        }
         instant = add(instant, valueToAdd);
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
