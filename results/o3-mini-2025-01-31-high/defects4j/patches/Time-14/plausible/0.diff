diff --git a/tmp/ecb71da1-3d24-4f14-a84b-1a0dbc7119a7_buggy.java b/tmp/ac800f36-5356-4288-8c97-507eed140e37_fixed.java
index 10616db..3223fd6 100644
--- a/tmp/ecb71da1-3d24-4f14-a84b-1a0dbc7119a7_buggy.java
+++ b/tmp/ac800f36-5356-4288-8c97-507eed140e37_fixed.java
@@ -1,19 +1,26 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
+        long instant;
+        // Special-case MonthDay (or any partial that has only month and day)
+        // Because MonthDay has no year, we must use a default leap year (e.g. 2000)
+        // so that a value like 29 for day-of-month is accepted.
+        if (partial.size() == 2 &&
+            partial.getFieldType(0) == DateTimeFieldType.monthOfYear() &&
+            partial.getFieldType(1) == DateTimeFieldType.dayOfMonth()) {
+            instant = iChronology.getDateTimeMillis(2000, values[0], values[1], 0);
+            instant = add(instant, valueToAdd);
+            return iChronology.get(partial, instant);
+        }
+        // Otherwise, assume the partial is complete enough to use 0L as the base.
+        instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
         return iChronology.get(partial, instant);
-        } else {
+    }
     return super.add(partial, fieldIndex, values, valueToAdd);
 }
\ No newline at end of file
-    }
