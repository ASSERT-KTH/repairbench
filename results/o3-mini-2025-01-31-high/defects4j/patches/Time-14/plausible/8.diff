diff --git a/tmp/47bfd2e4-2c6a-4ef4-8246-1fa1f9ed34f4_buggy.java b/tmp/cf77d181-cc13-46f2-9bc1-bbb129389b38_fixed.java
index 10616db..c5fb24a 100644
--- a/tmp/47bfd2e4-2c6a-4ef4-8246-1fa1f9ed34f4_buggy.java
+++ b/tmp/cf77d181-cc13-46f2-9bc1-bbb129389b38_fixed.java
@@ -1,19 +1,24 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
+        long instant;
+        // If the partial is a MonthDay (i.e. has only month and day fields),
+        // use a fixed leap year (2000) so that February 29 is valid.
+        if (partial.size() == 2 &&
+            DateTimeFieldType.monthOfYear().equals(partial.getFieldType(0)) &&
+            DateTimeFieldType.dayOfMonth().equals(partial.getFieldType(1))) {
+            instant = iChronology.getDateTimeMillis(2000, values[0], values[1], 0);
+        } else {
+            instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
+        }
         instant = add(instant, valueToAdd);
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
