diff --git a/tmp/9fce587d-5f44-423d-addf-cae458537ed3_buggy.java b/tmp/a527b5f8-049a-44bd-9eb8-62727b173cba_fixed.java
index 6dd359b..dffe098 100644
--- a/tmp/9fce587d-5f44-423d-addf-cae458537ed3_buggy.java
+++ b/tmp/a527b5f8-049a-44bd-9eb8-62727b173cba_fixed.java
@@ -1,125 +1,149 @@
 public void collect(JSModule module, Scope scope, Node n) {
   Node parent = n.getParent();
 
   String name;
   boolean isSet = false;
   Name.Type type = Name.Type.OTHER;
   boolean isPropAssign = false;
 
   switch (n.getType()) {
     case Token.GETTER_DEF:
     case Token.SETTER_DEF:
     case Token.STRING_KEY:
       // This may be a key in an object literal declaration.
       name = null;
       if (parent != null && parent.isObjectLit()) {
         name = getNameForObjLitKey(n);
       }
       if (name == null) {
         return;
       }
       isSet = true;
       switch (n.getType()) {
         case Token.STRING_KEY:
           type = getValueType(n.getFirstChild());
           break;
         case Token.GETTER_DEF:
           type = Name.Type.GET;
           break;
         case Token.SETTER_DEF:
           type = Name.Type.SET;
           break;
         default:
           throw new IllegalStateException("unexpected:" + n);
       }
       break;
     case Token.NAME:
       // This may be a variable get or set.
       if (parent != null) {
+        // If this NAME is the catch parameter (i.e. the declared exception),
+        // then do not treat it as an undefined global.
+        if (parent.getType() == Token.CATCH && parent.getFirstChild() == n) {
+          return;
+        }
         switch (parent.getType()) {
           case Token.VAR:
             isSet = true;
             Node rvalue = n.getFirstChild();
             type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);
             break;
           case Token.ASSIGN:
             if (parent.getFirstChild() == n) {
               isSet = true;
               type = getValueType(n.getNext());
             }
             break;
           case Token.GETPROP:
             return;
           case Token.FUNCTION:
             Node gramps = parent.getParent();
             if (gramps == null || NodeUtil.isFunctionExpression(parent)) {
               return;
             }
             isSet = true;
             type = Name.Type.FUNCTION;
             break;
           case Token.INC:
           case Token.DEC:
             isSet = true;
             type = Name.Type.OTHER;
             break;
           default:
             if (NodeUtil.isAssignmentOp(parent) &&
                 parent.getFirstChild() == n) {
               isSet = true;
               type = Name.Type.OTHER;
             }
         }
       }
       name = n.getString();
       break;
     case Token.GETPROP:
       // This may be a namespaced name get or set.
       if (parent != null) {
         switch (parent.getType()) {
           case Token.ASSIGN:
             if (parent.getFirstChild() == n) {
               isSet = true;
               type = getValueType(n.getNext());
               isPropAssign = true;
             }
             break;
           case Token.INC:
           case Token.DEC:
             isSet = true;
             type = Name.Type.OTHER;
             break;
           case Token.GETPROP:
             return;
           default:
             if (NodeUtil.isAssignmentOp(parent) &&
                 parent.getFirstChild() == n) {
               isSet = true;
               type = Name.Type.OTHER;
             }
         }
       }
       name = n.getQualifiedName();
       if (name == null) {
         return;
       }
       break;
     default:
       return;
   }
 
+  // For GETPROP nodes, extract the root name.
+  String rootName = name;
+  if (n.getType() == Token.GETPROP) {
+    int dotIndex = name.indexOf('.');
+    if (dotIndex != -1) {
+      rootName = name.substring(0, dotIndex);
+    }
+  }
+  // Walk up the AST: if any enclosing catch clause declares a parameter with
+  // the same name as the root name, then this is not a global reference.
+  for (Node cur = n; cur != null; cur = cur.getParent()) {
+    if (cur.getType() == Token.CATCH) {
+      Node catchParam = cur.getFirstChild();
+      if (catchParam != null && catchParam.getString().equals(rootName)) {
+        return;
+      }
+    }
+  }
+
   // We are only interested in global names.
   if (!isGlobalNameReference(name, scope)) {
     return;
   }
 
   if (isSet) {
     if (isGlobalScope(scope)) {
       handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);
     } else {
       handleSetFromLocal(module, scope, n, parent, name);
     }
   } else {
     handleGet(module, scope, n, parent, name);
   }
 }
\ No newline at end of file
