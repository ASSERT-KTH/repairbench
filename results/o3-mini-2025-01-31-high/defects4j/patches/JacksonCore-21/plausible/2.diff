diff --git a/tmp/168a936d-3dd0-4a13-9348-143e16a4c921_buggy.java b/tmp/0014779e-b802-4949-97d7-9c600338220d_fixed.java
index 7c0ebae..ad3a5d4 100644
--- a/tmp/168a936d-3dd0-4a13-9348-143e16a4c921_buggy.java
+++ b/tmp/0014779e-b802-4949-97d7-9c600338220d_fixed.java
@@ -1,229 +1,201 @@
 @Override
-    public JsonToken nextToken() throws IOException
-    {
-        // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all
-        //    conditionals; and it seems odd to return `null` but NOT considering input
-        //    as closed... would love a rewrite to simplify/clear up logic here.
-        
-        // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken
-        // check for no buffered context _exposedContext - null
-        // If all the conditions matches then check for scalar / non-scalar property
-        if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {
-            //if not scalar and ended successfully, and !includePath, then return null
+public JsonToken nextToken() throws IOException {
+    // When not allowing multiple matches, if we already have a current token and
+    // we are NOT including the path, we may have already output the only match;
+    // so, in that case, if the token is an unneeded scalar or closing token, just
+    // return null.
+    if (!_allowMultipleMatches && (_currToken != null) && !_includePath && (_exposedContext == null)) {
         if (_currToken.isStructEnd()) {
             if (_headContext.isStartHandled()) {
                 return (_currToken = null);
             }
         } else if (_currToken.isScalarValue()) {
-                    //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-                    // then return null 
             if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
                 return (_currToken = null);
             }
         }
     }
-        // Anything buffered?
+
+    // Return any tokens buffered (for instance, pending parent context tokens)
     TokenFilterContext ctxt = _exposedContext;
-
     if (ctxt != null) {
         while (true) {
             JsonToken t = ctxt.nextTokenToRead();
             if (t != null) {
                 _currToken = t;
                 return t;
             }
-                // all done with buffered stuff?
+            // If no more buffered tokens in this context...
             if (ctxt == _headContext) {
                 _exposedContext = null;
                 if (ctxt.inArray()) {
                     t = delegate.getCurrentToken();
-// Is this guaranteed to work without further checks?
-//                        if (t != JsonToken.START_ARRAY) {
                     _currToken = t;
                     return t;
                 }
-
-                    // Almost! Most likely still have the current token;
-                    // with the sole exception of 
-                    /*
-                    t = delegate.getCurrentToken();
-                    if (t != JsonToken.FIELD_NAME) {
-                        _currToken = t;
-                        return t;
-                    }
-                    */
                 break;
             }
-                // If not, traverse down the context chain
             ctxt = _headContext.findChildOf(ctxt);
             _exposedContext = ctxt;
-                if (ctxt == null) { // should never occur
+            if (ctxt == null) {
                 throw _constructError("Unexpected problem: chain of filtered context broken");
             }
         }
     }
 
-        // If not, need to read more. If we got any:
+    // Read next token from delegate
     JsonToken t = delegate.nextToken();
     if (t == null) {
-            // no strict need to close, since we have no state here
         _currToken = t;
         return t;
     }
 
-        // otherwise... to include or not?
     TokenFilter f;
-        
     switch (t.id()) {
     case ID_START_ARRAY:
         f = _itemFilter;
         if (f == TokenFilter.INCLUDE_ALL) {
             _headContext = _headContext.createChildArrayContext(f, true);
             return (_currToken = t);
         }
-            if (f == null) { // does this occur?
+        if (f == null) { // unlikely but...
             delegate.skipChildren();
             break;
         }
-            // Otherwise still iffy, need to check
         f = _headContext.checkValue(f);
         if (f == null) {
             delegate.skipChildren();
             break;
         }
-            if (f != TokenFilter.INCLUDE_ALL) {
+        if (f != TokenFilter.INCLUDE_ALL) { // if still filtering, force check
             f = f.filterStartArray();
         }
         _itemFilter = f;
         if (f == TokenFilter.INCLUDE_ALL) {
             _headContext = _headContext.createChildArrayContext(f, true);
             return (_currToken = t);
         }
         _headContext = _headContext.createChildArrayContext(f, false);
-            
-            // Also: only need buffering if parent path to be included
+        // If including path, maybe output the buffered context token
         if (_includePath) {
             t = _nextTokenWithBuffering(_headContext);
             if (t != null) {
                 _currToken = t;
                 return t;
             }
         }
         break;
 
     case ID_START_OBJECT:
         f = _itemFilter;
         if (f == TokenFilter.INCLUDE_ALL) {
             _headContext = _headContext.createChildObjectContext(f, true);
             return (_currToken = t);
         }
-            if (f == null) { // does this occur?
+        if (f == null) {
             delegate.skipChildren();
             break;
         }
-            // Otherwise still iffy, need to check
         f = _headContext.checkValue(f);
         if (f == null) {
             delegate.skipChildren();
             break;
         }
         if (f != TokenFilter.INCLUDE_ALL) {
             f = f.filterStartObject();
         }
         _itemFilter = f;
         if (f == TokenFilter.INCLUDE_ALL) {
             _headContext = _headContext.createChildObjectContext(f, true);
             return (_currToken = t);
         }
         _headContext = _headContext.createChildObjectContext(f, false);
-            // Also: only need buffering if parent path to be included
+        // If including path, possibly output buffered tokens (like START_OBJECT)
         if (_includePath) {
             t = _nextTokenWithBuffering(_headContext);
             if (t != null) {
                 _currToken = t;
                 return t;
             }
         }
-            // note: inclusion of surrounding Object handled separately via
-            // FIELD_NAME
         break;
 
     case ID_END_ARRAY:
-        case ID_END_OBJECT:
-            {
-                boolean returnEnd = _headContext.isStartHandled();
+    case ID_END_OBJECT: {
+        // When including the parent path (or if the container was already output),
+        // we must output the closing token.
+        boolean includeEnd = _includePath || _headContext.isStartHandled();
         f = _headContext.getFilter();
-                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
+        if (f != null && f != TokenFilter.INCLUDE_ALL) {
+            if (t == JsonToken.END_ARRAY) {
                 f.filterFinishArray();
+            } else {
+                f.filterFinishObject();
+            }
         }
         _headContext = _headContext.getParent();
         _itemFilter = _headContext.getFilter();
-                if (returnEnd) {
+        if (includeEnd) {
             return (_currToken = t);
         }
     }
     break;
 
-        case ID_FIELD_NAME:
-            {
+    case ID_FIELD_NAME: {
         final String name = delegate.getCurrentName();
-                // note: this will also set 'needToHandleName'
+        // This call sets the current name and returns the filter to use
         f = _headContext.setFieldName(name);
         if (f == TokenFilter.INCLUDE_ALL) {
             _itemFilter = f;
             if (!_includePath) {
-                        // Minor twist here: if parent NOT included, may need to induce output of
-                        // surrounding START_OBJECT/END_OBJECT
+                // If not including parent path, we might need to force output of START_OBJECT
                 if (_includeImmediateParent && !_headContext.isStartHandled()) {
-                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
+                    t = _headContext.nextTokenToRead();
                     _exposedContext = _headContext;
                 }
             }
             return (_currToken = t);
         }
         if (f == null) {
             delegate.nextToken();
             delegate.skipChildren();
             break;
         }
         f = f.includeProperty(name);
         if (f == null) {
             delegate.nextToken();
             delegate.skipChildren();
             break;
         }
         _itemFilter = f;
         if (f == TokenFilter.INCLUDE_ALL) {
             if (_includePath) {
                 return (_currToken = t);
             }
         }
         if (_includePath) {
             t = _nextTokenWithBuffering(_headContext);
             if (t != null) {
                 _currToken = t;
                 return t;
             }
         }
         break;
     }
 
     default: // scalar value
         f = _itemFilter;
         if (f == TokenFilter.INCLUDE_ALL) {
             return (_currToken = t);
         }
         if (f != null) {
             f = _headContext.checkValue(f);
             if ((f == TokenFilter.INCLUDE_ALL)
                     || ((f != null) && f.includeValue(delegate))) {
                 return (_currToken = t);
             }
         }
-            // Otherwise not included (leaves must be explicitly included)
         break;
     }
-
-        // We get here if token was not yet found; offlined handling
     return _nextToken2();
 }
\ No newline at end of file
