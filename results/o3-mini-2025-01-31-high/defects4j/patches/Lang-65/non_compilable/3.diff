diff --git a/tmp/287599bd-50b6-495c-84b7-27017b957cc4_buggy.java b/tmp/9a5c91f7-c7ae-41f2-bcf8-04a2c8e2686f_fixed.java
index cae0024..62c0854 100644
--- a/tmp/287599bd-50b6-495c-84b7-27017b957cc4_buggy.java
+++ b/tmp/9a5c91f7-c7ae-41f2-bcf8-04a2c8e2686f_fixed.java
@@ -1,103 +1,129 @@
 /**
  * <p>Internal calculation method.</p>
  * 
  * @param val  the calendar
  * @param field  the field constant
  * @param round  true to round, false to truncate
  * @throws ArithmeticException if the year is over 280 million
  */
 private static void modify(Calendar val, int field, boolean round) {
     if (val.get(Calendar.YEAR) > 280000000) {
         throw new ArithmeticException("Calendar value too large for accurate calculations");
     }
     
-
     // ----------------- Fix for LANG-59 ---------------------- START ---------------
-        // see http://issues.apache.org/jira/browse/LANG-59
-        //
-        // Manually truncate milliseconds, seconds and minutes, rather than using
-        // Calendar methods.
-
-
-        // truncate milliseconds
-
-        // truncate seconds
-
-        // truncate minutes
-
-        // reset time
+    // Rather than “resetting” lower‐order fields via Calendar methods—which in some
+    // cases (especially in DST transition days) can cause a one‐hour jump—we
+    // recompute the truncated time using either modulus arithmetic (for second/minute)
+    // or by explicitly clearing the lower fields (for hour and day). This “freezes”
+    // the time so that later calls to set() on a field don’t inadvertently change the
+    // underlying time.
+    switch (field) {
+        case Calendar.MILLISECOND:
+            // Nothing to truncate below milliseconds.
+            break;
+        case Calendar.SECOND: {
+            // Truncate milliseconds.
+            long t = val.getTimeInMillis();
+            t = t - (t % 1000);
+            val.setTimeInMillis(t);
+            break;
+        }
+        case Calendar.MINUTE: {
+            // Truncate seconds and milliseconds.
+            long t = val.getTimeInMillis();
+            t = t - (t % 60000);  // 60,000 ms = 1 minute
+            val.setTimeInMillis(t);
+            break;
+        }
+        case Calendar.HOUR_OF_DAY:
+        case Calendar.HOUR:
+        case Calendar.AM_PM: {
+            // Clear minutes, seconds and milliseconds.
+            // (Using set() here is safe once we “sync” the calendar’s internal time.)
+            val.set(Calendar.MINUTE, 0);
+            val.set(Calendar.SECOND, 0);
+            val.set(Calendar.MILLISECOND, 0);
+            // Force a recomputation of the time fields.
+            val.setTimeInMillis(val.getTimeInMillis());
+            break;
+        }
+        case Calendar.DATE:
+        case Calendar.DAY_OF_MONTH:
+        case Calendar.DAY_OF_YEAR: {
+            // For truncation to the date, clear the entire time‐of‐day.
+            val.set(Calendar.HOUR_OF_DAY, 0);
+            val.set(Calendar.MINUTE, 0);
+            val.set(Calendar.SECOND, 0);
+            val.set(Calendar.MILLISECOND, 0);
+            val.setTimeInMillis(val.getTimeInMillis());
+            break;
+        }
+        // (Other fields such as MONTH or YEAR are not affected by the LANG-59 bug.)
+        default:
+            // No manual truncation necessary.
+            break;
+    }
     // ----------------- Fix for LANG-59 ----------------------- END ----------------
     
     boolean roundUp = false;
     for (int i = 0; i < fields.length; i++) {
         for (int j = 0; j < fields[i].length; j++) {
             if (fields[i][j] == field) {
-                    //This is our field... we stop looping
+                // This is our field... we stop looping.
                 if (round && roundUp) {
                     if (field == DateUtils.SEMI_MONTH) {
-                            //This is a special case that's hard to generalize
-                            //If the date is 1, we round up to 16, otherwise
-                            //  we subtract 15 days and add 1 month
+                        // Special case: if the date is the 1st, round up to the 16th;
+                        // otherwise subtract 15 days and add one month.
                         if (val.get(Calendar.DATE) == 1) {
                             val.add(Calendar.DATE, 15);
                         } else {
                             val.add(Calendar.DATE, -15);
                             val.add(Calendar.MONTH, 1);
                         }
                     } else {
-                            //We need at add one to this field since the
-                            //  last number causes us to round up
+                        // Add one unit to the highest field in this group.
                         val.add(fields[i][0], 1);
                     }
                 }
                 return;
             }
         }
-            //We have various fields that are not easy roundings
+        // For groups that don’t contain the field, remove the amount already set.
         int offset = 0;
         boolean offsetSet = false;
-            //These are special types of fields that require different rounding rules
+        // Some fields require special rounding rules.
         switch (field) {
             case DateUtils.SEMI_MONTH:
                 if (fields[i][0] == Calendar.DATE) {
-                        //If we're going to drop the DATE field's value,
-                        //  we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
+                    // Subtract 1 (since DATE is 1–based), then adjust.
                     offset = val.get(Calendar.DATE) - 1;
-                        //If we're above 15 days adjustment, that means we're in the
-                        //  bottom half of the month and should stay accordingly.
                     if (offset >= 15) {
                         offset -= 15;
                     }
-                        //Record whether we're in the top or bottom half of that range
                     roundUp = offset > 7;
                     offsetSet = true;
                 }
                 break;
             case Calendar.AM_PM:
                 if (fields[i][0] == Calendar.HOUR_OF_DAY) {
-                        //If we're going to drop the HOUR field's value,
-                        //  we want to do this our own way.
                     offset = val.get(Calendar.HOUR_OF_DAY);
                     if (offset >= 12) {
                         offset -= 12;
                     }
                     roundUp = offset > 6;
                     offsetSet = true;
                 }
                 break;
         }
         if (!offsetSet) {
             int min = val.getActualMinimum(fields[i][0]);
             int max = val.getActualMaximum(fields[i][0]);
-                //Calculate the offset from the minimum allowed value
             offset = val.get(fields[i][0]) - min;
-                //Set roundUp if this is more than half way between the minimum and maximum
             roundUp = offset > ((max - min) / 2);
         }
-            //We need to remove this field
+        // Remove the offset from this field.
         val.set(fields[i][0], val.get(fields[i][0]) - offset);
     }
     throw new IllegalArgumentException("The field " + field + " is not supported");
-
 }
\ No newline at end of file
