diff --git a/tmp/52e8e2ae-8bb7-4262-8420-c1868b9fad3e_buggy.java b/tmp/54d39df7-fed7-43a0-af03-d42040d99893_fixed.java
index cae0024..27410d6 100644
--- a/tmp/52e8e2ae-8bb7-4262-8420-c1868b9fad3e_buggy.java
+++ b/tmp/54d39df7-fed7-43a0-af03-d42040d99893_fixed.java
@@ -1,103 +1,106 @@
-    /**
-     * <p>Internal calculation method.</p>
-     * 
-     * @param val  the calendar
-     * @param field  the field constant
-     * @param round  true to round, false to truncate
-     * @throws ArithmeticException if the year is over 280 million
-     */
 private static void modify(Calendar val, int field, boolean round) {
     if (val.get(Calendar.YEAR) > 280000000) {
         throw new ArithmeticException("Calendar value too large for accurate calculations");
     }
 
-
     // ----------------- Fix for LANG-59 ---------------------- START ---------------
-        // see http://issues.apache.org/jira/browse/LANG-59
-        //
-        // Manually truncate milliseconds, seconds and minutes, rather than using
-        // Calendar methods.
-
-
-        // truncate milliseconds
-
-        // truncate seconds
-
-        // truncate minutes
-
-        // reset time
+    // See http://issues.apache.org/jira/browse/LANG-59
+    // Instead of calling individual set() methods (which can trigger DST bugs),
+    // we recalc the timeInMillis for the fields below the one being modified.
+    long millis = val.getTimeInMillis();
+    // The total offset in milliseconds (raw offset plus DST adjustment)
+    int offset = val.get(Calendar.ZONE_OFFSET) + val.get(Calendar.DST_OFFSET);
+    switch (field) {
+        case Calendar.MILLISECOND:
+            // already the lowest unit; nothing to truncate
+            break;
+        case Calendar.SECOND:
+            // truncate milliseconds: a second always has 1000 ms
+            millis = millis - ((millis + offset) % 1000);
+            val.setTimeInMillis(millis);
+            break;
+        case Calendar.MINUTE:
+            // truncate seconds and milliseconds (1 minute = 60000ms)
+            millis = millis - ((millis + offset) % 60000);
+            val.setTimeInMillis(millis);
+            break;
+        case Calendar.HOUR_OF_DAY:
+        case Calendar.HOUR:
+            // truncate minutes, seconds and milliseconds (1 hour = 3600000ms)
+            millis = millis - ((millis + offset) % 3600000);
+            val.setTimeInMillis(millis);
+            break;
+        case Calendar.DATE:
+        case Calendar.DAY_OF_MONTH:
+        case Calendar.DAY_OF_YEAR:
+            // truncate time within the day (1 day = 86400000ms)
+            millis = millis - ((millis + offset) % 86400000);
+            val.setTimeInMillis(millis);
+            break;
+        default:
+            // For other fields, we leave the calendar unchanged here
+            break;
+    }
     // ----------------- Fix for LANG-59 ----------------------- END ----------------
 
     boolean roundUp = false;
     for (int i = 0; i < fields.length; i++) {
         for (int j = 0; j < fields[i].length; j++) {
             if (fields[i][j] == field) {
-                    //This is our field... we stop looping
+                // We've reached our target field.
                 if (round && roundUp) {
                     if (field == DateUtils.SEMI_MONTH) {
-                            //This is a special case that's hard to generalize
-                            //If the date is 1, we round up to 16, otherwise
-                            //  we subtract 15 days and add 1 month
+                        // Special case: if the date is 1, round up to 16;
+                        // otherwise subtract 15 days and add one month.
                         if (val.get(Calendar.DATE) == 1) {
                             val.add(Calendar.DATE, 15);
                         } else {
                             val.add(Calendar.DATE, -15);
                             val.add(Calendar.MONTH, 1);
                         }
                     } else {
-                            //We need at add one to this field since the
-                            //  last number causes us to round up
+                        // For other fields, add one unit to round up.
                         val.add(fields[i][0], 1);
                     }
                 }
                 return;
             }
         }
-            //We have various fields that are not easy roundings
-            int offset = 0;
+        // For fields that are lower than the one to be modified,
+        // determine how much to roll down (i.e. truncate).
+        int localOffset = 0;
         boolean offsetSet = false;
-            //These are special types of fields that require different rounding rules
         switch (field) {
             case DateUtils.SEMI_MONTH:
                 if (fields[i][0] == Calendar.DATE) {
-                        //If we're going to drop the DATE field's value,
-                        //  we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
-                        offset = val.get(Calendar.DATE) - 1;
-                        //If we're above 15 days adjustment, that means we're in the
-                        //  bottom half of the month and should stay accordingly.
-                        if (offset >= 15) {
-                            offset -= 15;
+                    // Subtract one because dates start at 1.
+                    localOffset = val.get(Calendar.DATE) - 1;
+                    if (localOffset >= 15) {
+                        localOffset -= 15;
                     }
-                        //Record whether we're in the top or bottom half of that range
-                        roundUp = offset > 7;
+                    roundUp = localOffset > 7;
                     offsetSet = true;
                 }
                 break;
             case Calendar.AM_PM:
                 if (fields[i][0] == Calendar.HOUR_OF_DAY) {
-                        //If we're going to drop the HOUR field's value,
-                        //  we want to do this our own way.
-                        offset = val.get(Calendar.HOUR_OF_DAY);
-                        if (offset >= 12) {
-                            offset -= 12;
+                    localOffset = val.get(Calendar.HOUR_OF_DAY);
+                    if (localOffset >= 12) {
+                        localOffset -= 12;
                     }
-                        roundUp = offset > 6;
+                    roundUp = localOffset > 6;
                     offsetSet = true;
                 }
                 break;
         }
         if (!offsetSet) {
-                int min = val.getActualMinimum(fields[i][0]);
-                int max = val.getActualMaximum(fields[i][0]);
-                //Calculate the offset from the minimum allowed value
-                offset = val.get(fields[i][0]) - min;
-                //Set roundUp if this is more than half way between the minimum and maximum
-                roundUp = offset > ((max - min) / 2);
+            int actualMin = val.getActualMinimum(fields[i][0]);
+            int actualMax = val.getActualMaximum(fields[i][0]);
+            localOffset = val.get(fields[i][0]) - actualMin;
+            roundUp = localOffset > ((actualMax - actualMin) / 2);
         }
-            //We need to remove this field
-                val.set(fields[i][0], val.get(fields[i][0]) - offset);
+        // Subtract the lower-field offset.
+        val.set(fields[i][0], val.get(fields[i][0]) - localOffset);
     }
     throw new IllegalArgumentException("The field " + field + " is not supported");
-
 }
\ No newline at end of file
