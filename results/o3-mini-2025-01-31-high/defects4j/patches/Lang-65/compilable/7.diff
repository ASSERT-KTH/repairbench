diff --git a/tmp/a0fa2b77-5aa7-466f-ac58-3f3c2e407fe0_buggy.java b/tmp/5321fe5d-c4f6-40ce-a2f9-91aa0d1dbebc_fixed.java
index cae0024..e631618 100644
--- a/tmp/a0fa2b77-5aa7-466f-ac58-3f3c2e407fe0_buggy.java
+++ b/tmp/5321fe5d-c4f6-40ce-a2f9-91aa0d1dbebc_fixed.java
@@ -1,103 +1,188 @@
-    /**
-     * <p>Internal calculation method.</p>
-     * 
-     * @param val  the calendar
-     * @param field  the field constant
-     * @param round  true to round, false to truncate
-     * @throws ArithmeticException if the year is over 280 million
-     */
 private static void modify(Calendar val, int field, boolean round) {
     if (val.get(Calendar.YEAR) > 280000000) {
         throw new ArithmeticException("Calendar value too large for accurate calculations");
     }
     
-
     // ----------------- Fix for LANG-59 ---------------------- START ---------------
-        // see http://issues.apache.org/jira/browse/LANG-59
-        //
-        // Manually truncate milliseconds, seconds and minutes, rather than using
-        // Calendar methods.
-
-
-        // truncate milliseconds
-
-        // truncate seconds
-
-        // truncate minutes
-
-        // reset time
+    // Instead of calling Calendar.set to clear lower fields (which may cause
+    // unexpected DST changes), we adjust the time in milliseconds manually.
+    // For truncating/rounding to one of the following fields, we define:
+    // Level 0: MILLISECOND (no change)
+    // Level 1: SECOND       (truncate milliseconds)
+    // Level 2: MINUTE       (truncate seconds and milliseconds)
+    // Level 3: HOUR         (truncate minutes, seconds and milliseconds)
+    // Level 4: DATE         (truncate hours, minutes, seconds and milliseconds,
+    //                         using an offset to adjust for the local time zone)
+    int truncateLevel = -1;
+    switch(field) {
+        case Calendar.MILLISECOND:
+            truncateLevel = 0;
+            break;
+        case Calendar.SECOND:
+            truncateLevel = 1;
+            break;
+        case Calendar.MINUTE:
+            truncateLevel = 2;
+            break;
+        case Calendar.HOUR:
+        case Calendar.HOUR_OF_DAY:
+            truncateLevel = 3;
+            break;
+        case Calendar.DATE:
+            truncateLevel = 4;
+            break;
+        default:
+            truncateLevel = -1; // for higher fields we let the loop below work.
+    }
+    if(truncateLevel != -1) {
+        long time = val.getTimeInMillis();
+        switch(truncateLevel) {
+            case 0:
+                // Nothing to do.
+                break;
+            case 1: {
+                // Truncate milliseconds. Unit is 1000 ms.
+                long unit = 1000L;
+                long remainder = time % unit;
+                if (time < 0) {
+                    remainder = (unit + remainder) % unit;
+                }
+                if(round) {
+                    if(remainder >= unit/2) {
+                        time += (unit - remainder);
+                    } else {
+                        time -= remainder;
+                    }
+                } else {
+                    time -= remainder;
+                }
+                break;
+            }
+            case 2: {
+                // Truncate seconds and milliseconds. Unit is 60000 ms.
+                long unit = 60000L;
+                long remainder = time % unit;
+                if(time < 0) {
+                    remainder = (unit + remainder) % unit;
+                }
+                if(round) {
+                    if(remainder >= unit/2) {
+                        time += (unit - remainder);
+                    } else {
+                        time -= remainder;
+                    }
+                } else {
+                    time -= remainder;
+                }
+                break;
+            }
+            case 3: {
+                // Truncate minutes, seconds and milliseconds.
+                // Use local wall time by adding the time zone offset.
+                long unit = 3600000L;
+                int offset = val.get(Calendar.ZONE_OFFSET) + val.get(Calendar.DST_OFFSET);
+                long t = time + offset;
+                long remainder = t % unit;
+                if(t < 0) {
+                    remainder = (unit + remainder) % unit;
+                }
+                if(round) {
+                    if(remainder >= unit/2) {
+                        t += (unit - remainder);
+                    } else {
+                        t -= remainder;
+                    }
+                } else {
+                    t -= remainder;
+                }
+                time = t - offset;
+                break;
+            }
+            case 4: {
+                // Truncate hours, minutes, seconds and milliseconds.
+                // Use the local offset so that we "cut" at midnight.
+                long unit = 86400000L;
+                int offset = val.get(Calendar.ZONE_OFFSET) + val.get(Calendar.DST_OFFSET);
+                long t = time + offset;
+                long remainder = t % unit;
+                if(t < 0) {
+                    remainder = (unit + remainder) % unit;
+                }
+                if(round) {
+                    if(remainder >= unit/2) {
+                        t += (unit - remainder);
+                    } else {
+                        t -= remainder;
+                    }
+                } else {
+                    t -= remainder;
+                }
+                time = t - offset;
+                break;
+            }
+        }
+        val.setTimeInMillis(time);
+    }
     // ----------------- Fix for LANG-59 ----------------------- END ----------------
 
     boolean roundUp = false;
     for (int i = 0; i < fields.length; i++) {
         for (int j = 0; j < fields[i].length; j++) {
             if (fields[i][j] == field) {
                 // This is our field... we stop looping
                 if (round && roundUp) {
                     if (field == DateUtils.SEMI_MONTH) {
-                            //This is a special case that's hard to generalize
-                            //If the date is 1, we round up to 16, otherwise
-                            //  we subtract 15 days and add 1 month
+                        // Special case: if the date is 1, round up to 16; otherwise,
+                        // subtract 15 days then add 1 month.
                         if (val.get(Calendar.DATE) == 1) {
                             val.add(Calendar.DATE, 15);
                         } else {
                             val.add(Calendar.DATE, -15);
                             val.add(Calendar.MONTH, 1);
                         }
                     } else {
-                            //We need at add one to this field since the
-                            //  last number causes us to round up
+                        // Add one to the primary field because the discarded portion
+                        // caused a round up.
                         val.add(fields[i][0], 1);
                     }
                 }
                 return;
             }
         }
-            //We have various fields that are not easy roundings
+        // For fields that are not trivial to round, calculate an offset.
         int offset = 0;
         boolean offsetSet = false;
-            //These are special types of fields that require different rounding rules
         switch (field) {
             case DateUtils.SEMI_MONTH:
                 if (fields[i][0] == Calendar.DATE) {
-                        //If we're going to drop the DATE field's value,
-                        //  we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
+                    // Special treatment: subtract 1 (since DATE starts at 1)
                     offset = val.get(Calendar.DATE) - 1;
-                        //If we're above 15 days adjustment, that means we're in the
-                        //  bottom half of the month and should stay accordingly.
                     if (offset >= 15) {
                         offset -= 15;
                     }
-                        //Record whether we're in the top or bottom half of that range
                     roundUp = offset > 7;
                     offsetSet = true;
                 }
                 break;
             case Calendar.AM_PM:
                 if (fields[i][0] == Calendar.HOUR_OF_DAY) {
-                        //If we're going to drop the HOUR field's value,
-                        //  we want to do this our own way.
                     offset = val.get(Calendar.HOUR_OF_DAY);
                     if (offset >= 12) {
                         offset -= 12;
                     }
                     roundUp = offset > 6;
                     offsetSet = true;
                 }
                 break;
         }
         if (!offsetSet) {
             int min = val.getActualMinimum(fields[i][0]);
             int max = val.getActualMaximum(fields[i][0]);
-                //Calculate the offset from the minimum allowed value
             offset = val.get(fields[i][0]) - min;
-                //Set roundUp if this is more than half way between the minimum and maximum
             roundUp = offset > ((max - min) / 2);
         }
-            //We need to remove this field
+        // Subtract the calculated offset from the field.
         val.set(fields[i][0], val.get(fields[i][0]) - offset);
     }
     throw new IllegalArgumentException("The field " + field + " is not supported");
-
 }
\ No newline at end of file
