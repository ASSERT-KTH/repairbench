diff --git a/tmp/6e1aba81-7451-48cb-b372-895e5c4c3c78_buggy.java b/tmp/55fbbd27-9d5b-4562-9415-49df528693f0_fixed.java
index cae0024..5b29872 100644
--- a/tmp/6e1aba81-7451-48cb-b372-895e5c4c3c78_buggy.java
+++ b/tmp/55fbbd27-9d5b-4562-9415-49df528693f0_fixed.java
@@ -1,103 +1,105 @@
 /**
  * <p>Internal calculation method.</p>
  * 
  * @param val  the calendar
  * @param field  the field constant
  * @param round  true to round, false to truncate
  * @throws ArithmeticException if the year is over 280 million
  */
 private static void modify(Calendar val, int field, boolean round) {
     if (val.get(Calendar.YEAR) > 280000000) {
         throw new ArithmeticException("Calendar value too large for accurate calculations");
     }
     
-
     // ----------------- Fix for LANG-59 ---------------------- START ---------------
-        // see http://issues.apache.org/jira/browse/LANG-59
-        //
-        // Manually truncate milliseconds, seconds and minutes, rather than using
-        // Calendar methods.
-
-
-        // truncate milliseconds
-
-        // truncate seconds
-
-        // truncate minutes
-
-        // reset time
+    // See http://issues.apache.org/jira/browse/LANG-59
+    // Instead of calling Calendar.set() on the sub-minute fields (milliseconds, seconds and minutes)
+    // which can trigger a DST bug (see the "Demonstrate Problem" test),
+    // we adjust the calendarâ€™s time in milliseconds directly.
+    if (field != Calendar.MILLISECOND) {
+        long timeInMillis = val.getTimeInMillis();
+        if (field == Calendar.SECOND) {
+            // For SECOND truncation, remove the milliseconds part.
+            timeInMillis -= (timeInMillis % 1000);
+        } else if (field == Calendar.MINUTE) {
+            // For MINUTE truncation, remove seconds and milliseconds.
+            timeInMillis -= (timeInMillis % 60000);
+        } else {
+            // For any field coarser than MINUTE (e.g. HOUR, DATE, etc.),
+            // remove the minutes, seconds and milliseconds from the current time.
+            int minute = val.get(Calendar.MINUTE);
+            int second = val.get(Calendar.SECOND);
+            int milli = val.get(Calendar.MILLISECOND);
+            long offset = minute * 60000L + second * 1000L + milli;
+            timeInMillis -= offset;
+        }
+        val.setTimeInMillis(timeInMillis);
+        // Force recomputation of all calendar fields based on the new time.
+        val.getTime();
+    }
     // ----------------- Fix for LANG-59 ----------------------- END ----------------
     
     boolean roundUp = false;
     for (int i = 0; i < fields.length; i++) {
         for (int j = 0; j < fields[i].length; j++) {
             if (fields[i][j] == field) {
-                    //This is our field... we stop looping
+                // This is our field: if rounding is needed, add one unit.
                 if (round && roundUp) {
                     if (field == DateUtils.SEMI_MONTH) {
-                            //This is a special case that's hard to generalize
-                            //If the date is 1, we round up to 16, otherwise
-                            //  we subtract 15 days and add 1 month
+                        // Special case: if the date is 1, round up to 16; otherwise subtract 15 days and add 1 month.
                         if (val.get(Calendar.DATE) == 1) {
                             val.add(Calendar.DATE, 15);
                         } else {
                             val.add(Calendar.DATE, -15);
                             val.add(Calendar.MONTH, 1);
                         }
                     } else {
-                            //We need at add one to this field since the
-                            //  last number causes us to round up
+                        // For any other field, add one unit.
                         val.add(fields[i][0], 1);
                     }
                 }
                 return;
             }
         }
-            //We have various fields that are not easy roundings
+        // For fields that are less significant than the target field,
+        // we need to zero them out.
         int offset = 0;
         boolean offsetSet = false;
-            //These are special types of fields that require different rounding rules
+        // Some fields require special rounding rules.
         switch (field) {
             case DateUtils.SEMI_MONTH:
                 if (fields[i][0] == Calendar.DATE) {
-                        //If we're going to drop the DATE field's value,
-                        //  we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
+                    // Adjust DATE field specially: subtract 1 because dates start at 1.
                     offset = val.get(Calendar.DATE) - 1;
-                        //If we're above 15 days adjustment, that means we're in the
-                        //  bottom half of the month and should stay accordingly.
+                    // If the date is 15 or above, then subtract 15 days first.
                     if (offset >= 15) {
                         offset -= 15;
                     }
-                        //Record whether we're in the top or bottom half of that range
                     roundUp = offset > 7;
                     offsetSet = true;
                 }
                 break;
             case Calendar.AM_PM:
                 if (fields[i][0] == Calendar.HOUR_OF_DAY) {
-                        //If we're going to drop the HOUR field's value,
-                        //  we want to do this our own way.
+                    // Adjust HOUR_OF_DAY specially for AM_PM rounding.
                     offset = val.get(Calendar.HOUR_OF_DAY);
                     if (offset >= 12) {
                         offset -= 12;
                     }
                     roundUp = offset > 6;
                     offsetSet = true;
                 }
                 break;
         }
         if (!offsetSet) {
             int min = val.getActualMinimum(fields[i][0]);
             int max = val.getActualMaximum(fields[i][0]);
-                //Calculate the offset from the minimum allowed value
+            // Calculate how far the current field is from its minimum allowed value.
             offset = val.get(fields[i][0]) - min;
-                //Set roundUp if this is more than half way between the minimum and maximum
             roundUp = offset > ((max - min) / 2);
         }
-            //We need to remove this field
+        // Remove the offset for this field.
         val.set(fields[i][0], val.get(fields[i][0]) - offset);
     }
     throw new IllegalArgumentException("The field " + field + " is not supported");
-
 }
\ No newline at end of file
