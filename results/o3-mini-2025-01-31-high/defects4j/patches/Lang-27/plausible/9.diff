diff --git a/tmp/ae6ced83-2fb0-4c58-953e-f1a1da51d830_buggy.java b/tmp/12049161-58af-47d5-b6a9-7fefe226d49a_fixed.java
index da3f951..d12ec84 100644
--- a/tmp/ae6ced83-2fb0-4c58-953e-f1a1da51d830_buggy.java
+++ b/tmp/12049161-58af-47d5-b6a9-7fefe226d49a_fixed.java
@@ -1,174 +1,149 @@
-    /**
-     * <p>Turns a string value into a java.lang.Number.</p>
-     *
-     * <p>First, the value is examined for a type qualifier on the end
-     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts 
-     * trying to create successively larger types from the type specified
-     * until one is found that can represent the value.</p>
-     *
-     * <p>If a type specifier is not found, it will check for a decimal point
-     * and then try successively larger types from <code>Integer</code> to
-     * <code>BigInteger</code> and from <code>Float</code> to
-     * <code>BigDecimal</code>.</p>
-     *
-     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
-     * will be interpreted as a hexadecimal integer.  Values with leading
-     * <code>0</code>'s will not be interpreted as octal.</p>
-     *
-     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
-     *
-     * <p>This method does not trim the input string, i.e., strings with leading
-     * or trailing spaces will generate NumberFormatExceptions.</p>
-     *
-     * @param str  String containing a number, may be null
-     * @return Number created from the string
-     * @throws NumberFormatException if the value cannot be converted
-     */
 public static Number createNumber(String str) throws NumberFormatException {
     if (str == null) {
         return null;
     }
     if (StringUtils.isBlank(str)) {
         throw new NumberFormatException("A blank string is not a valid number");
     }  
     if (str.startsWith("--")) {
-            // this is protection for poorness in java.lang.BigDecimal.
-            // it accepts this as a legal value, but it does not appear 
-            // to be in specification of class. OS X Java parses it to 
-            // a wrong value.
+        // protection for shortcomings in java.lang.BigDecimal:
+        // BigDecimal accepts "--" as legal but produces an incorrect value.
         return null;
     }
     if (str.startsWith("0x") || str.startsWith("-0x")) {
         return createInteger(str);
     }
     char lastChar = str.charAt(str.length() - 1);
+
+    // Correctly determine the position of an exponent marker, if any.
+    int expPos = -1;
+    int eIndex = str.indexOf('e');
+    int EIndex = str.indexOf('E');
+    if (eIndex >= 0 && EIndex >= 0) {
+        expPos = Math.min(eIndex, EIndex);
+    } else if (eIndex >= 0) {
+        expPos = eIndex;
+    } else if (EIndex >= 0) {
+        expPos = EIndex;
+    }
+
     String mant;
     String dec;
     String exp;
     int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
 
     if (decPos > -1) {
-
         if (expPos > -1) {
             if (expPos < decPos) {
                 throw new NumberFormatException(str + " is not a valid number.");
             }
             dec = str.substring(decPos + 1, expPos);
         } else {
             dec = str.substring(decPos + 1);
         }
         mant = str.substring(0, decPos);
     } else {
         if (expPos > -1) {
             mant = str.substring(0, expPos);
         } else {
             mant = str;
         }
         dec = null;
     }
+
     if (!Character.isDigit(lastChar) && lastChar != '.') {
+        // Process a number with an explicit type qualifier.
         if (expPos > -1 && expPos < str.length() - 1) {
             exp = str.substring(expPos + 1, str.length() - 1);
         } else {
             exp = null;
         }
-            //Requesting a specific type..
+        // The numeric part excludes the type qualifier.
         String numeric = str.substring(0, str.length() - 1);
         boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
         switch (lastChar) {
             case 'l':
             case 'L':
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                if (dec == null && exp == null 
+                    && ((numeric.charAt(0) == '-' && isDigits(numeric.substring(1))) || isDigits(numeric))) {
                     try {
                         return createLong(numeric);
                     } catch (NumberFormatException nfe) {
-                            //Too big for a long
+                        // Fall through if too big for a long
                     }
                     return createBigInteger(numeric);
-
                 }
                 throw new NumberFormatException(str + " is not a valid number.");
             case 'f':
             case 'F':
                 try {
                     Float f = NumberUtils.createFloat(numeric);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                         return f;
                     }
-
                 } catch (NumberFormatException nfe) {
-                        // ignore the bad number
+                    // ignore and fall through
                 }
                 //$FALL-THROUGH$
             case 'd':
             case 'D':
                 try {
                     Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (NumberFormatException nfe) {
-                        // ignore the bad number
+                    // ignore and try BigDecimal
                 }
                 try {
                     return createBigDecimal(numeric);
                 } catch (NumberFormatException e) {
-                        // ignore the bad number
+                    // ignore and fall through
                 }
                 //$FALL-THROUGH$
             default:
                 throw new NumberFormatException(str + " is not a valid number.");
-
         }
     } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
+        // No explicit type qualifier; try a sequence of types.
         if (expPos > -1 && expPos < str.length() - 1) {
             exp = str.substring(expPos + 1, str.length());
         } else {
             exp = null;
         }
         if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+            // It's an integer number: try Integer, then Long, then BigInteger.
             try {
                 return createInteger(str);
             } catch (NumberFormatException nfe) {
-                    // ignore the bad number
+                // try long next
             }
             try {
                 return createLong(str);
             } catch (NumberFormatException nfe) {
-                    // ignore the bad number
+                // try BigInteger next
             }
             return createBigInteger(str);
-
         } else {
-                //Must be a float,double,BigDec
+            // It's a floating-point number: try Float, then Double, then BigDecimal.
             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
             try {
                 Float f = createFloat(str);
                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                     return f;
                 }
             } catch (NumberFormatException nfe) {
-                    // ignore the bad number
+                // ignore and try Double next
             }
             try {
                 Double d = createDouble(str);
                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                     return d;
                 }
             } catch (NumberFormatException nfe) {
-                    // ignore the bad number
+                // ignore and try BigDecimal next
             }
-
             return createBigDecimal(str);
-
         }
     }
 }
\ No newline at end of file
