diff --git a/tmp/dff5d073-27dd-43da-bb7d-5cd1abe73894_buggy.java b/tmp/7cab4f4e-3aa0-4176-a5ef-6abd7400bcf3_fixed.java
index 41ea16c..e1e80ba 100644
--- a/tmp/dff5d073-27dd-43da-bb7d-5cd1abe73894_buggy.java
+++ b/tmp/7cab4f4e-3aa0-4176-a5ef-6abd7400bcf3_fixed.java
@@ -1,63 +1,64 @@
-    /**
-     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
-     * Note that the resulting expression will always evaluate to
-     * true, as would the x = {...} expression.
-     */
 private void replaceAssignmentExpression(Var v, Reference ref,
                                            Map<String, String> varmap) {
-      // Compute all of the assignments necessary
+  // Do not transform an object literal that is part of a variable declaration.
+  // For example, in "var a = {}", the initializer is part of a VAR node,
+  // and we want to leave it alone.
+  Node assignParent = ref.getParent();
+  if (assignParent != null && assignParent.getParent() != null &&
+      assignParent.getParent().getType() == Token.VAR) {
+    return;
+  }
+
+  // Compute all of the assignments necessary.
   List<Node> nodes = Lists.newArrayList();
   Node val = ref.getAssignedValue();
   blacklistVarReferencesInTree(val, v.scope);
   Preconditions.checkState(val.getType() == Token.OBJECTLIT);
   Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
-      for (Node key = val.getFirstChild(); key != null;
-           key = key.getNext()) {
+  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {
     String var = key.getString();
     Node value = key.removeFirstChild();
-        // TODO(user): Copy type information.
-        nodes.add(
-          new Node(Token.ASSIGN,
+    // TODO: Copy type information.
+    nodes.add(new Node(Token.ASSIGN,
                        Node.newString(Token.NAME, varmap.get(var)), value));
     all.remove(var);
   }
-
-      // TODO(user): Better source information.
+  // For any remaining variables, assign undefined.
   for (String var : all) {
-        nodes.add(
-          new Node(Token.ASSIGN,
+    nodes.add(new Node(Token.ASSIGN,
                        Node.newString(Token.NAME, varmap.get(var)),
                        NodeUtil.newUndefinedNode(null)));
   }
 
   Node replacement;
-        // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
+  // All assignments evaluate to true so that the overall expression does.
   nodes.add(new Node(Token.TRUE));
 
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
+  // If there's only one node, there's no need to build a comma chain.
+  if (nodes.size() == 1) {
+    replacement = nodes.get(0);
+  } else {
+    // Build the comma chain. A COMMA node must have exactly 2 children.
     nodes = Lists.reverse(nodes);
     replacement = new Node(Token.COMMA);
     Node cur = replacement;
     int i;
     for (i = 0; i < nodes.size() - 2; i++) {
       cur.addChildToFront(nodes.get(i));
       Node t = new Node(Token.COMMA);
       cur.addChildToFront(t);
       cur = t;
     }
     cur.addChildToFront(nodes.get(i));
     cur.addChildToFront(nodes.get(i + 1));
+  }
 
   Node replace = ref.getParent();
   replacement.copyInformationFromForTree(replace);
 
   if (replace.getType() == Token.VAR) {
-        replace.getParent().replaceChild(
-            replace, NodeUtil.newExpr(replacement));
+    replace.getParent().replaceChild(replace, NodeUtil.newExpr(replacement));
   } else {
     replace.getParent().replaceChild(replace, replacement);
   }
 }
\ No newline at end of file
