diff --git a/tmp/270be84f-13d9-477e-8c48-6476818ccc19_buggy.java b/tmp/32ff0400-b7b3-4457-863e-b9465f17e094_fixed.java
index 41ea16c..6b1a05e 100644
--- a/tmp/270be84f-13d9-477e-8c48-6476818ccc19_buggy.java
+++ b/tmp/32ff0400-b7b3-4457-863e-b9465f17e094_fixed.java
@@ -1,63 +1,75 @@
 /**
-     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
-     * Note that the resulting expression will always evaluate to
-     * true, as would the x = {...} expression.
+ * Replaces an assignment like x = {...} with a comma‐expression that
+ * carries out any side‐effectful assignments, and then yields true.
+ * In the case of a variable declaration initializer, if no side effects
+ * occur (i.e. the object literal is empty) the assignment is removed.
  */
 private void replaceAssignmentExpression(Var v, Reference ref,
                                            Map<String, String> varmap) {
-      // Compute all of the assignments necessary
+  // Compute all of the assignments necessary.
   List<Node> nodes = Lists.newArrayList();
   Node val = ref.getAssignedValue();
   blacklistVarReferencesInTree(val, v.scope);
   Preconditions.checkState(val.getType() == Token.OBJECTLIT);
   Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
-      for (Node key = val.getFirstChild(); key != null;
-           key = key.getNext()) {
-        String var = key.getString();
+  // For each property in the object literal, generate an assignment.
+  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {
+    String prop = key.getString();
     Node value = key.removeFirstChild();
     // TODO(user): Copy type information.
-        nodes.add(
-          new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)), value));
-        all.remove(var);
+    nodes.add(new Node(Token.ASSIGN,
+                       Node.newString(Token.NAME, varmap.get(prop)),
+                       value));
+    all.remove(prop);
   }
-
-      // TODO(user): Better source information.
-      for (String var : all) {
-        nodes.add(
-          new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)),
+  // For any variables that did not appear in the literal,
+  // assign them undefined.
+  for (String prop : all) {
+    nodes.add(new Node(Token.ASSIGN,
+                       Node.newString(Token.NAME, varmap.get(prop)),
                        NodeUtil.newUndefinedNode(null)));
   }
-
-      Node replacement;
-        // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
+  // All assignments evaluate to true. Append a TRUE so that the entire
+  // expression has the same value as the original assignment.
   nodes.add(new Node(Token.TRUE));
 
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
+  // If there is only the TRUE literal then there is no side effect.
+  // In an assignment expression used as a var initializer, we want to remove
+  // such a degenerate assignment entirely.
+  Node replacement;
+  if (nodes.size() == 1) {
+    replacement = nodes.get(0);
+  } else {
+    // Build a comma chain. A COMMA node must have 2 children,
+    // so we build the tree by reversing the list.
     nodes = Lists.reverse(nodes);
     replacement = new Node(Token.COMMA);
     Node cur = replacement;
     int i;
     for (i = 0; i < nodes.size() - 2; i++) {
       cur.addChildToFront(nodes.get(i));
       Node t = new Node(Token.COMMA);
       cur.addChildToFront(t);
       cur = t;
     }
     cur.addChildToFront(nodes.get(i));
     cur.addChildToFront(nodes.get(i + 1));
+  }
+  replacement.copyInformationFromForTree(ref.getParent());
 
+  // If the assignment is part of a variable declaration, then
+  // if the replacement is trivial (only a TRUE literal), remove it;
+  // otherwise wrap it in an expression statement.
   Node replace = ref.getParent();
-      replacement.copyInformationFromForTree(replace);
-
   if (replace.getType() == Token.VAR) {
+    if (replacement.getType() == Token.TRUE) {
+      // No side effects, so we can remove the initializer.
+      replace.getParent().removeChild(replace);
+    } else {
       replace.getParent().replaceChild(
           replace, NodeUtil.newExpr(replacement));
+    }
   } else {
     replace.getParent().replaceChild(replace, replacement);
   }
 }
\ No newline at end of file
