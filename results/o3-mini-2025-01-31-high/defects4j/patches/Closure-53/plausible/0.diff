diff --git a/tmp/386976f7-7109-4a72-a576-e5483d369daf_buggy.java b/tmp/f2c27f8d-f494-4730-8d7b-03374925f1a4_fixed.java
index 41ea16c..bba5766 100644
--- a/tmp/386976f7-7109-4a72-a576-e5483d369daf_buggy.java
+++ b/tmp/f2c27f8d-f494-4730-8d7b-03374925f1a4_fixed.java
@@ -1,63 +1,67 @@
-    /**
-     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
-     * Note that the resulting expression will always evaluate to
-     * true, as would the x = {...} expression.
-     */
 private void replaceAssignmentExpression(Var v, Reference ref,
                                            Map<String, String> varmap) {
-      // Compute all of the assignments necessary
+  // Compute all of the assignments necessary.
   List<Node> nodes = Lists.newArrayList();
   Node val = ref.getAssignedValue();
   blacklistVarReferencesInTree(val, v.scope);
   Preconditions.checkState(val.getType() == Token.OBJECTLIT);
   Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
-      for (Node key = val.getFirstChild(); key != null;
-           key = key.getNext()) {
+  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {
     String var = key.getString();
     Node value = key.removeFirstChild();
     // TODO(user): Copy type information.
     nodes.add(
       new Node(Token.ASSIGN,
                Node.newString(Token.NAME, varmap.get(var)), value));
     all.remove(var);
   }
 
-      // TODO(user): Better source information.
+  // For any variable in varmap that is not present in the object literal,
+  // assign undefined.
   for (String var : all) {
     nodes.add(
       new Node(Token.ASSIGN,
                Node.newString(Token.NAME, varmap.get(var)),
                NodeUtil.newUndefinedNode(null)));
   }
 
-      Node replacement;
-        // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
+  // All assignments evaluate to true, so append a trailing true literal
+  // to preserve the semantics.
   nodes.add(new Node(Token.TRUE));
 
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
+  Node replacement;
+  // If there is only one node, use it directly.
+  if (nodes.size() == 1) {
+    replacement = nodes.get(0);
+  } else {
+    // Otherwise, join these nodes using COMMA nodes.
+    // (Reversing is used so that after adding children with addChildToFront,
+    //  the left/right ordering in the final tree matches that of the parser.)
     nodes = Lists.reverse(nodes);
     replacement = new Node(Token.COMMA);
     Node cur = replacement;
     int i;
+    // When there are exactly two nodes the loop wonâ€™t run and we add both.
     for (i = 0; i < nodes.size() - 2; i++) {
       cur.addChildToFront(nodes.get(i));
       Node t = new Node(Token.COMMA);
       cur.addChildToFront(t);
       cur = t;
     }
     cur.addChildToFront(nodes.get(i));
     cur.addChildToFront(nodes.get(i + 1));
+  }
 
   Node replace = ref.getParent();
   replacement.copyInformationFromForTree(replace);
 
+  // If the assignment expression is part of a VAR declaration,
+  // replace it with an expression statement so that later passes can
+  // remove the now-dead code.
   if (replace.getType() == Token.VAR) {
     replace.getParent().replaceChild(
         replace, NodeUtil.newExpr(replacement));
   } else {
     replace.getParent().replaceChild(replace, replacement);
   }
 }
\ No newline at end of file
