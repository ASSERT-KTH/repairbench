diff --git a/tmp/2f8936cb-a460-48f7-a380-5e113ea96cc6_buggy.java b/tmp/23c75388-856e-4384-a1c5-977ba5dc004c_fixed.java
index 41ea16c..77f9676 100644
--- a/tmp/2f8936cb-a460-48f7-a380-5e113ea96cc6_buggy.java
+++ b/tmp/23c75388-856e-4384-a1c5-977ba5dc004c_fixed.java
@@ -1,63 +1,69 @@
 /**
-     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
-     * Note that the resulting expression will always evaluate to
-     * true, as would the x = {...} expression.
+ * Replaces an assignment like x = {...} with a comma‐expression
+ * containing all the extracted assignments, so that:
+ *
+ *    x = {a:foo, b:bar}
+ *
+ * is replaced by
+ *
+ *    t1 = foo, t2 = bar, true
+ *
+ * Note that if the assignment occurs in a variable declaration (as an
+ * initializer) then it is simply removed.  (This is expected since a
+ * variable initializer’s value is not used. For example, in
+ *
+ *    var a = {}
+ *
+ * the object literal is dead and inlining it should remove it.)
  */
 private void replaceAssignmentExpression(Var v, Reference ref,
                                          Map<String, String> varmap) {
-      // Compute all of the assignments necessary
+  // Compute all of the assignments necessary.
   List<Node> nodes = Lists.newArrayList();
   Node val = ref.getAssignedValue();
   blacklistVarReferencesInTree(val, v.scope);
   Preconditions.checkState(val.getType() == Token.OBJECTLIT);
   Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
-      for (Node key = val.getFirstChild(); key != null;
-           key = key.getNext()) {
-        String var = key.getString();
+  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {
+    String prop = key.getString();
     Node value = key.removeFirstChild();
     // TODO(user): Copy type information.
-        nodes.add(
-          new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)), value));
-        all.remove(var);
+    nodes.add(new Node(Token.ASSIGN,
+              Node.newString(Token.NAME, varmap.get(prop)), value));
+    all.remove(prop);
   }
-
-      // TODO(user): Better source information.
-      for (String var : all) {
-        nodes.add(
-          new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)),
+  // For properties missing from the object literal, assign undefined.
+  for (String prop : all) {
+    nodes.add(new Node(Token.ASSIGN,
+              Node.newString(Token.NAME, varmap.get(prop)),
               NodeUtil.newUndefinedNode(null)));
   }
-
-      Node replacement;
-        // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
+  // Append a literal "true" so that the overall expression evaluates to true.
   nodes.add(new Node(Token.TRUE));
 
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
-        nodes = Lists.reverse(nodes);
-        replacement = new Node(Token.COMMA);
-        Node cur = replacement;
-        int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
-          cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
+  // Build a comma expression that sequences the assignments.
+  // If there is only one node (e.g. an empty object literal) then simply use it.
+  Node replacement;
+  if (nodes.size() == 1) {
+    replacement = nodes.get(0);
+  } else {
+    // Build a left‐associative chain.
+    replacement = new Node(Token.COMMA, nodes.get(0), nodes.get(1));
+    for (int i = 2; i < nodes.size(); i++) {
+      replacement = new Node(Token.COMMA, replacement, nodes.get(i));
     }
-        cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
-
+  }
+  // Copy source information from the original assignment.
   Node replace = ref.getParent();
   replacement.copyInformationFromForTree(replace);
 
-      if (replace.getType() == Token.VAR) {
-        replace.getParent().replaceChild(
-            replace, NodeUtil.newExpr(replacement));
+  // If the assignment is part of a var declaration (either the assignment node itself
+  // is a VAR or its parent is a VAR node), then remove it entirely so that "var a = {}"
+  // becomes "var a;" (and can then be eliminated); otherwise, replace the expression.
+  if (replace.getType() == Token.VAR ||
+      (replace.getParent() != null && replace.getParent().getType() == Token.VAR)) {
+    replace.getParent().removeChild(replace);
   } else {
     replace.getParent().replaceChild(replace, replacement);
   }
 }
\ No newline at end of file
