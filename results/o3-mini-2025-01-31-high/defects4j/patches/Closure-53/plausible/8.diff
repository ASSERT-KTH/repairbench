diff --git a/tmp/9abfb51b-61ba-4399-85e5-b7b5b2227e57_buggy.java b/tmp/dd835766-ad52-4687-bb73-4d56d2469dc0_fixed.java
index 41ea16c..e6f220b 100644
--- a/tmp/9abfb51b-61ba-4399-85e5-b7b5b2227e57_buggy.java
+++ b/tmp/dd835766-ad52-4687-bb73-4d56d2469dc0_fixed.java
@@ -1,63 +1,74 @@
-    /**
-     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
-     * Note that the resulting expression will always evaluate to
-     * true, as would the x = {...} expression.
-     */
 private void replaceAssignmentExpression(Var v, Reference ref,
                                            Map<String, String> varmap) {
-      // Compute all of the assignments necessary
+  // Compute all of the assignments necessary.
   List<Node> nodes = Lists.newArrayList();
   Node val = ref.getAssignedValue();
   blacklistVarReferencesInTree(val, v.scope);
   Preconditions.checkState(val.getType() == Token.OBJECTLIT);
   Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
-      for (Node key = val.getFirstChild(); key != null;
-           key = key.getNext()) {
+  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {
     String var = key.getString();
     Node value = key.removeFirstChild();
     // TODO(user): Copy type information.
-        nodes.add(
-          new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)), value));
+    nodes.add(new Node(Token.ASSIGN,
+                       Node.newString(Token.NAME, varmap.get(var)),
+                       value));
     all.remove(var);
   }
-
-      // TODO(user): Better source information.
+  // For any properties that were not present in the object literal,
+  // assign undefined.
   for (String var : all) {
-        nodes.add(
-          new Node(Token.ASSIGN,
+    nodes.add(new Node(Token.ASSIGN,
                        Node.newString(Token.NAME, varmap.get(var)),
                        NodeUtil.newUndefinedNode(null)));
   }
-
-      Node replacement;
-        // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
+  // Append a final TRUE literal so that the overall expression
+  // always evaluates to true.
   nodes.add(new Node(Token.TRUE));
 
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
+  // When there are no property assignments (i.e. only the TRUE node was added)
+  // then this assignment has no side effects. In a VAR declaration we want to remove
+  // the assignment entirely, while in an ordinary assignment we simply replace it with TRUE.
+  Node replace = ref.getParent();
+  if (nodes.size() == 1) {
+    if (replace.getType() == Token.VAR) {
+      replace.getParent().removeChild(replace);
+      return;
+    } else {
+      Node replacement = nodes.get(0);
+      replacement.copyInformationFromForTree(replace);
+      replace.getParent().replaceChild(replace, replacement);
+      return;
+    }
+  }
+
+  // Otherwise, we need to build a tree of comma expressions.
+  // A comma (",") operator node must have 2 children. Because we want the
+  // final expression to equal 'true', we must combine the assignments with a trailing true.
+  // Reverse the list so that the tree we build has the comma at its head,
+  // matching the parser's tree structure.
   nodes = Lists.reverse(nodes);
-        replacement = new Node(Token.COMMA);
+  Node replacement = new Node(Token.COMMA);
   Node cur = replacement;
-        int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
+  int i = 0;
+  // Create a chain of comma nodes so that each comma has exactly two children.
+  for (; i < nodes.size() - 2; i++) {
     cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
+    Node comma = new Node(Token.COMMA);
+    cur.addChildToFront(comma);
+    cur = comma;
   }
   cur.addChildToFront(nodes.get(i));
   cur.addChildToFront(nodes.get(i + 1));
 
-      Node replace = ref.getParent();
   replacement.copyInformationFromForTree(replace);
 
+  // If the assignment is part of a VAR declaration (as in "var a = {...}"),
+  // then we wrap the replacement in an EXPR_RESULT. In the case where the object literal
+  // is empty, we removed the assignment above.
   if (replace.getType() == Token.VAR) {
-        replace.getParent().replaceChild(
-            replace, NodeUtil.newExpr(replacement));
+    replace.getParent().replaceChild(replace, NodeUtil.newExpr(replacement));
   } else {
     replace.getParent().replaceChild(replace, replacement);
   }
 }
\ No newline at end of file
