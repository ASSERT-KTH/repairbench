diff --git a/tmp/54439f3d-b6db-498a-a64c-684d90deae83_buggy.java b/tmp/512ea7f4-30b9-42fe-88fb-b6256f6efd59_fixed.java
index 41ea16c..5d750e6 100644
--- a/tmp/54439f3d-b6db-498a-a64c-684d90deae83_buggy.java
+++ b/tmp/512ea7f4-30b9-42fe-88fb-b6256f6efd59_fixed.java
@@ -1,63 +1,68 @@
-    /**
-     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
-     * Note that the resulting expression will always evaluate to
-     * true, as would the x = {...} expression.
-     */
 private void replaceAssignmentExpression(Var v, Reference ref,
                                            Map<String, String> varmap) {
-      // Compute all of the assignments necessary
-      List<Node> nodes = Lists.newArrayList();
   Node val = ref.getAssignedValue();
   blacklistVarReferencesInTree(val, v.scope);
   Preconditions.checkState(val.getType() == Token.OBJECTLIT);
+
+  // If the assignment is part of a variable declaration (an initializer),
+  // remove the initializer (so that “var a = {}” becomes “var a;”).
+  Node parent = ref.getParent();
+  if (parent != null &&
+      parent.getType() == Token.NAME &&
+      parent.getParent() != null &&
+      parent.getParent().getType() == Token.VAR) {
+    parent.removeChild(ref);
+    return;
+  }
+
+  // Compute all of the assignments necessary.
+  List<Node> nodes = Lists.newArrayList();
   Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
-      for (Node key = val.getFirstChild(); key != null;
-           key = key.getNext()) {
-        String var = key.getString();
+  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {
+    String name = key.getString();
     Node value = key.removeFirstChild();
     // TODO(user): Copy type information.
-        nodes.add(
-          new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)), value));
-        all.remove(var);
+    nodes.add(new Node(Token.ASSIGN,
+                       Node.newString(Token.NAME, varmap.get(name)),
+                       value));
+    all.remove(name);
   }
 
-      // TODO(user): Better source information.
-      for (String var : all) {
-        nodes.add(
-          new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)),
+  // For any variables not present in the object literal, assign them undefined.
+  for (String name : all) {
+    nodes.add(new Node(Token.ASSIGN,
+                       Node.newString(Token.NAME, varmap.get(name)),
                        NodeUtil.newUndefinedNode(null)));
   }
 
-      Node replacement;
-        // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
+  // All assignments must evaluate to true.
   nodes.add(new Node(Token.TRUE));
 
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
+  // If there’s only one node (for example, when the object literal was empty
+  // and no assignments were generated) then simply use it.
+  Node replacement;
+  if (nodes.size() == 1) {
+    replacement = nodes.get(0);
+  } else {
+    // Join the nodes using the comma operator. A COMMA node must have exactly
+    // 2 children, so we build a chain.
     nodes = Lists.reverse(nodes);
     replacement = new Node(Token.COMMA);
     Node cur = replacement;
+    int size = nodes.size();
     int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
+    for (i = 0; i < size - 2; i++) {
       cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
+      Node nextComma = new Node(Token.COMMA);
+      cur.addChildToFront(nextComma);
+      cur = nextComma;
     }
     cur.addChildToFront(nodes.get(i));
     cur.addChildToFront(nodes.get(i + 1));
-
-      Node replace = ref.getParent();
-      replacement.copyInformationFromForTree(replace);
-
-      if (replace.getType() == Token.VAR) {
-        replace.getParent().replaceChild(
-            replace, NodeUtil.newExpr(replacement));
-      } else {
-        replace.getParent().replaceChild(replace, replacement);
   }
+
+  // Replace the original assignment expression with the new replacement.
+  Node assignExpr = ref.getParent();
+  replacement.copyInformationFromForTree(assignExpr);
+  assignExpr.getParent().replaceChild(assignExpr, replacement);
 }
\ No newline at end of file
