diff --git a/tmp/e01da963-1677-4013-b7f1-cf366bb5f223_buggy.java b/tmp/5ae92488-c386-4c39-92b4-214286dce34e_fixed.java
index 41ea16c..43055df 100644
--- a/tmp/e01da963-1677-4013-b7f1-cf366bb5f223_buggy.java
+++ b/tmp/5ae92488-c386-4c39-92b4-214286dce34e_fixed.java
@@ -1,63 +1,76 @@
-    /**
-     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
-     * Note that the resulting expression will always evaluate to
-     * true, as would the x = {...} expression.
-     */
 private void replaceAssignmentExpression(Var v, Reference ref,
                                            Map<String, String> varmap) {
-      // Compute all of the assignments necessary
+  // If the object literal assignment is used to initialize a var,
+  // then it is not needed for its computed value. In that case,
+  // simply remove the initializer.
+  Node assignParent = ref.getParent();
+  if (assignParent != null && assignParent.getType() == Token.NAME) {
+    Node varNode = assignParent.getParent();
+    if (varNode != null && varNode.getType() == Token.VAR) {
+      // Remove the initializer from the var declaration.
+      assignParent.removeChild(ref);
+      return;
+    }
+  }
+
+  // Compute all of the assignments necessary.
   List<Node> nodes = Lists.newArrayList();
   Node val = ref.getAssignedValue();
   blacklistVarReferencesInTree(val, v.scope);
   Preconditions.checkState(val.getType() == Token.OBJECTLIT);
   Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
-      for (Node key = val.getFirstChild(); key != null;
-           key = key.getNext()) {
+  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {
     String var = key.getString();
     Node value = key.removeFirstChild();
     // TODO(user): Copy type information.
-        nodes.add(
-          new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)), value));
+    nodes.add(new Node(Token.ASSIGN,
+                       Node.newString(Token.NAME, varmap.get(var)),
+                       value));
     all.remove(var);
   }
 
-      // TODO(user): Better source information.
+  // For any properties that were expected but missing from the literal,
+  // assign undefined.
   for (String var : all) {
-        nodes.add(
-          new Node(Token.ASSIGN,
+    nodes.add(new Node(Token.ASSIGN,
                        Node.newString(Token.NAME, varmap.get(var)),
                        NodeUtil.newUndefinedNode(null)));
   }
 
-      Node replacement;
-        // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
+  // All assignments evaluate to true.  Ensure the overall expression does,
+  // by adding a final TRUE node.
   nodes.add(new Node(Token.TRUE));
 
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
+  Node replacement;
+  // If there is only one node (which can happen for an empty object literal),
+  // then there is no need to build a COMMA chain.
+  if (nodes.size() == 1) {
+    replacement = nodes.get(0);
+  } else {
+    // Join these using COMMA operators.  A COMMA node must have exactly 2 children,
+    // so build the tree bottomâ€“up in reverse order.
     nodes = Lists.reverse(nodes);
     replacement = new Node(Token.COMMA);
     Node cur = replacement;
     int i;
     for (i = 0; i < nodes.size() - 2; i++) {
       cur.addChildToFront(nodes.get(i));
       Node t = new Node(Token.COMMA);
       cur.addChildToFront(t);
       cur = t;
     }
     cur.addChildToFront(nodes.get(i));
     cur.addChildToFront(nodes.get(i + 1));
+  }
 
+  // Replace the original assignment expression with the new code.
   Node replace = ref.getParent();
   replacement.copyInformationFromForTree(replace);
 
   if (replace.getType() == Token.VAR) {
     replace.getParent().replaceChild(
         replace, NodeUtil.newExpr(replacement));
   } else {
     replace.getParent().replaceChild(replace, replacement);
   }
 }
\ No newline at end of file
