diff --git a/tmp/1a208bff-f5a0-4393-a6c6-a592b9eb16d5_buggy.java b/tmp/fa6fe1ac-b8bb-4dff-ad73-126bb34f01d8_fixed.java
index 7d8d756..0c6e755 100644
--- a/tmp/1a208bff-f5a0-4393-a6c6-a592b9eb16d5_buggy.java
+++ b/tmp/fa6fe1ac-b8bb-4dff-ad73-126bb34f01d8_fixed.java
@@ -1,48 +1,51 @@
-    /**
-     * Method that handles type information wrapper, locates actual
-     * subtype deserializer to use, and calls it to do actual
-     * deserialization.
-     */
 @SuppressWarnings("resource")
-    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
-    {
+private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
     // 02-Aug-2013, tatu: May need to use native type ids
     if (p.canReadTypeId()) {
         Object typeId = p.getTypeId();
         if (typeId != null) {
             return _deserializeWithNativeTypeId(p, ctxt, typeId);
         }
     }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
-                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
+    // In some cases (typically with Object Ids) the parser may already be positioned
+    // at the FIELD_NAME, having had the START_OBJECT token consumed.
+    boolean hadStartObject = false;
+    JsonToken curr = p.getCurrentToken();
+    if (curr == JsonToken.START_OBJECT) {
+        hadStartObject = true;
+        // Advance to the first token within the wrapper object:
+        p.nextToken();
+        curr = p.getCurrentToken();
     }
-            // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
+    if (curr != JsonToken.FIELD_NAME) {
         throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                 "need JSON String that contains type id (for subtype of " + baseTypeName() + ")");
     }
-        final String typeId = p.getText();
+    // Retrieve type id from the current field name
+    final String typeId = p.getCurrentName();
     JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+    // Move from FIELD_NAME to the value (i.e. the actual content for the type)
     p.nextToken();
 
-        // Minor complication: we may need to merge type id in?
+    // Minor complication: if type id must be merged into the JSON,
+    // and if the value structure is a JSON Object, then do so.
     if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
         TokenBuffer tb = new TokenBuffer(null, false);
-            tb.writeStartObject(); // recreate START_OBJECT
+        tb.writeStartObject(); // re-create START_OBJECT
         tb.writeFieldName(_typePropertyName);
         tb.writeString(typeId);
         p = JsonParserSequence.createFlattened(tb.asParser(p), p);
         p.nextToken();
     }
     
     Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
+    // If we consumed a START_OBJECT (i.e. the complete type wrapper),
+    // we now need to ensure it is properly closed.
+    if (hadStartObject) {
         if (p.nextToken() != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
+    }
     return value;
 }
\ No newline at end of file
