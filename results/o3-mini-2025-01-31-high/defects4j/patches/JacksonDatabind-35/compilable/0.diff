diff --git a/tmp/92fe1438-af9a-4f8a-af05-01068f22cba8_buggy.java b/tmp/e98a6b95-80f2-44ed-af33-0e29dd459873_fixed.java
index 7d8d756..44dcfe3 100644
--- a/tmp/92fe1438-af9a-4f8a-af05-01068f22cba8_buggy.java
+++ b/tmp/e98a6b95-80f2-44ed-af33-0e29dd459873_fixed.java
@@ -1,48 +1,48 @@
-    /**
-     * Method that handles type information wrapper, locates actual
-     * subtype deserializer to use, and calls it to do actual
-     * deserialization.
-     */
 @SuppressWarnings("resource")
-    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
-    {
+private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
     // 02-Aug-2013, tatu: May need to use native type ids
     if (p.canReadTypeId()) {
         Object typeId = p.getTypeId();
         if (typeId != null) {
             return _deserializeWithNativeTypeId(p, ctxt, typeId);
         }
     }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
-                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
-        }
-            // should always get field name, but just in case...
+    // We now allow either a START_OBJECT or FIELD_NAME to start the wrapper.
+    boolean hadStartObject = false;
+    JsonToken t = p.getCurrentToken();
+    if (t == JsonToken.START_OBJECT) {
+        hadStartObject = true;
         if (p.nextToken() != JsonToken.FIELD_NAME) {
             throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                     "need JSON String that contains type id (for subtype of " + baseTypeName() + ")");
         }
-        final String typeId = p.getText();
+    } else if (t != JsonToken.FIELD_NAME) {
+        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+                "need JSON Object to contain As.WRAPPER_OBJECT type information for class " + baseTypeName());
+    }
+    // At this point, the current token is FIELD_NAME: use it as the type id.
+    final String typeId = p.getCurrentName();
     JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+    // Advance to the value corresponding to the type id.
     p.nextToken();
 
     // Minor complication: we may need to merge type id in?
     if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
         TokenBuffer tb = new TokenBuffer(null, false);
         tb.writeStartObject(); // recreate START_OBJECT
         tb.writeFieldName(_typePropertyName);
         tb.writeString(typeId);
         p = JsonParserSequence.createFlattened(tb.asParser(p), p);
         p.nextToken();
     }
     
     Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
+    // Only if we started with an explicit START_OBJECT, expect a matching END_OBJECT.
+    if (hadStartObject) {
         if (p.nextToken() != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
+    }
     return value;
 }
\ No newline at end of file
