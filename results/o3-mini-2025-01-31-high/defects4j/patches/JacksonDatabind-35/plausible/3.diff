diff --git a/tmp/72e118a5-9faa-47fd-b8a7-332e62170529_buggy.java b/tmp/f9510f7e-d5b8-45a7-91af-5108ed9b5c62_fixed.java
index 7d8d756..58b113d 100644
--- a/tmp/72e118a5-9faa-47fd-b8a7-332e62170529_buggy.java
+++ b/tmp/f9510f7e-d5b8-45a7-91af-5108ed9b5c62_fixed.java
@@ -1,48 +1,46 @@
-    /**
-     * Method that handles type information wrapper, locates actual
-     * subtype deserializer to use, and calls it to do actual
-     * deserialization.
-     */
 @SuppressWarnings("resource")
-    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
-    {
-        // 02-Aug-2013, tatu: May need to use native type ids
+private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
+    // May need to use native type ids
     if (p.canReadTypeId()) {
-            Object typeId = p.getTypeId();
-            if (typeId != null) {
-                return _deserializeWithNativeTypeId(p, ctxt, typeId);
+        Object nativeTypeId = p.getTypeId();
+        if (nativeTypeId != null) {
+            return _deserializeWithNativeTypeId(p, ctxt, nativeTypeId);
         }
     }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
-                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
-        }
-            // should always get field name, but just in case...
+    // The wrapper is expected either as a full Object, or the parser may already be at the type id
+    JsonToken current = p.getCurrentToken();
+    if (current == JsonToken.START_OBJECT) {
+        // Move to the field name which should contain the type id
         if (p.nextToken() != JsonToken.FIELD_NAME) {
             throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                 "need JSON String that contains type id (for subtype of " + baseTypeName() + ")");
         }
+    } else if (current != JsonToken.FIELD_NAME) {
+        // If not START_OBJECT and not FIELD_NAME, then it's an unexpected token.
+        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+            "need JSON Object to contain As.WRAPPER_OBJECT type information for class " + baseTypeName());
+    }
+    // At this point, we're at the FIELD_NAME that contains the type id:
     final String typeId = p.getText();
     JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+    // Advance to the actual value (contents of the type wrapper)
     p.nextToken();
 
-        // Minor complication: we may need to merge type id in?
+    // If type id should be visible inside the value, merge it in.
     if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
         TokenBuffer tb = new TokenBuffer(null, false);
-            tb.writeStartObject(); // recreate START_OBJECT
+        tb.writeStartObject();
         tb.writeFieldName(_typePropertyName);
         tb.writeString(typeId);
         p = JsonParserSequence.createFlattened(tb.asParser(p), p);
         p.nextToken();
     }
     
     Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
+    // Expect the closing END_OBJECT of the type wrapper
     if (p.nextToken() != JsonToken.END_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
             "expected closing END_OBJECT after type information and deserialized value");
     }
     return value;
 }
\ No newline at end of file
