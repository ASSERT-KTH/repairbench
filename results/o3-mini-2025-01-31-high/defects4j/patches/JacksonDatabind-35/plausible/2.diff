diff --git a/tmp/b930201c-720b-4aa4-8a08-4bdd8f1247f2_buggy.java b/tmp/46008bbb-db13-4ac8-8cd0-cfd5c6db274c_fixed.java
index 7d8d756..3e7252d 100644
--- a/tmp/b930201c-720b-4aa4-8a08-4bdd8f1247f2_buggy.java
+++ b/tmp/46008bbb-db13-4ac8-8cd0-cfd5c6db274c_fixed.java
@@ -1,48 +1,43 @@
-    /**
-     * Method that handles type information wrapper, locates actual
-     * subtype deserializer to use, and calls it to do actual
-     * deserialization.
-     */
 @SuppressWarnings("resource")
 private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
     // 02-Aug-2013, tatu: May need to use native type ids
     if (p.canReadTypeId()) {
         Object typeId = p.getTypeId();
         if (typeId != null) {
             return _deserializeWithNativeTypeId(p, ctxt, typeId);
         }
     }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
-                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
-        }
-            // should always get field name, but just in case...
+    // Allow either START_OBJECT or FIELD_NAME as the current token.
+    if (p.getCurrentToken() == JsonToken.START_OBJECT) {
         if (p.nextToken() != JsonToken.FIELD_NAME) {
             throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                     "need JSON String that contains type id (for subtype of " + baseTypeName() + ")");
         }
+    } else if (p.getCurrentToken() != JsonToken.FIELD_NAME) {
+        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+                "need JSON Object to contain As.WRAPPER_OBJECT type information for class " + baseTypeName());
+    }
+    // At this point, we expect FIELD_NAME (the type id field)
     final String typeId = p.getText();
     JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
+    p.nextToken(); // Move to the value
 
-        // Minor complication: we may need to merge type id in?
+    // Minor complication: we may need to merge the type id into the value.
     if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
         TokenBuffer tb = new TokenBuffer(null, false);
         tb.writeStartObject(); // recreate START_OBJECT
         tb.writeFieldName(_typePropertyName);
         tb.writeString(typeId);
         p = JsonParserSequence.createFlattened(tb.asParser(p), p);
         p.nextToken();
     }
 
     Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
+    // Verify that we have the closing END_OBJECT
     if (p.nextToken() != JsonToken.END_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                 "expected closing END_OBJECT after type information and deserialized value");
     }
     return value;
 }
\ No newline at end of file
