diff --git a/tmp/128d4761-d3ee-4ef0-a70c-006d6a5f1563_buggy.java b/tmp/29b0c37d-4e0a-4fc0-beea-01c19f266b76_fixed.java
index c9da1b7..d5e9299 100644
--- a/tmp/128d4761-d3ee-4ef0-a70c-006d6a5f1563_buggy.java
+++ b/tmp/29b0c37d-4e0a-4fc0-beea-01c19f266b76_fixed.java
@@ -1,33 +1,36 @@
-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
-    {
+protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
+        // If the same underlying member is being registered twice, simply ignore it.
+        if (oldOne.getAnnotated() == newOne.getAnnotated()) {
             return;
         }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+        // If an explicit creator is already registered, then a non-explicit one loses.
+        if (((_explicitCreators & mask) != 0) && !explicit) {
+            return;
         }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+        // Otherwise, we have two different creators for the same type.
+        // We allow override only when the new creator comes from a more specific (sub-)class.
+        Class<?> oldDecl = oldOne.getDeclaringClass();
+        Class<?> newDecl = newOne.getDeclaringClass();
+        if (oldDecl.equals(newDecl)) {
+            // They come from the same class (and are not the same member), a conflict!
+            throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
+                    + " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
+        } else if (oldDecl.isAssignableFrom(newDecl)) {
+            // newOne is declared in a subclass; it wins. (Fall through to override.)
+        } else if (newDecl.isAssignableFrom(oldDecl)) {
+            // oldOne is more specific; ignore newOne.
+            return;
+        } else {
             throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
                     + " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
