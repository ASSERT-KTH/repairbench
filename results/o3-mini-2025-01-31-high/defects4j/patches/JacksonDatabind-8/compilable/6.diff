diff --git a/tmp/6e92c3bd-2ad7-4b7e-a95f-cb732b9b4634_buggy.java b/tmp/39831a95-abf0-4d30-a012-fbb1b6756c56_fixed.java
index c9da1b7..f5837e2 100644
--- a/tmp/6e92c3bd-2ad7-4b7e-a95f-cb732b9b4634_buggy.java
+++ b/tmp/39831a95-abf0-4d30-a012-fbb1b6756c56_fixed.java
@@ -1,33 +1,37 @@
-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
-    {
+protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated creator
             if (!explicit) {
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
         }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+        // Instead of comparing the wrapper types (with getClass()), compare the classes
+        // that actually declare the creator.
+        Class<?> oldDeclClass = oldOne.getDeclaringClass();
+        Class<?> newDeclClass = newOne.getDeclaringClass();
+        if (oldDeclClass == newDeclClass) {
+            // If both creators come from the same declaring class, that is a conflict.
+            throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
+                    + " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
+        }
+        // If one declaring class is a subclass of the other, only accept the more specific one.
+        if (oldDeclClass.isAssignableFrom(newDeclClass)) {
+            // newOne is from a subclass of oldOne, so it overrides the old one.
+            // (Do nothing; fall through to override.)
+        } else if (newDeclClass.isAssignableFrom(oldDeclClass)) {
+            // The already collected creator is more specific; ignore newOne.
+            return;
+        } else {
+            // If the classes are not related by inheritance, that is an ambiguous/conflict situation.
             throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
                     + " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
