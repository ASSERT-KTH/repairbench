diff --git a/tmp/c389edb7-6a32-4051-8ba8-9c1d42ca3d47_buggy.java b/tmp/b196a660-ff9c-4d05-a9b4-48b3e2c74802_fixed.java
index c9da1b7..7dcb026 100644
--- a/tmp/c389edb7-6a32-4051-8ba8-9c1d42ca3d47_buggy.java
+++ b/tmp/b196a660-ff9c-4d05-a9b4-48b3e2c74802_fixed.java
@@ -1,33 +1,42 @@
-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
-    {
+protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+        // If an explicit creator has already been registered,
+        // and the new one is not explicit, simply ignore it.
+        if (((_explicitCreators & mask) != 0)) {
             if (!explicit) {
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+            // If both are explicit, check whether they actually represent the same member.
+            if (oldOne.getAnnotated() == newOne.getAnnotated()) {
+                return; // duplicate; no need to override
             }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+        }
+        // Allow overriding only if the new creator is declared in a subclass.
+        Class<?> oldDeclaring = oldOne.getDeclaringClass();
+        Class<?> newDeclaring = newOne.getDeclaringClass();
+        if (oldDeclaring == newDeclaring) {
+            throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
+                    + " creators: already had explicitly marked " + oldOne
+                    + ", encountered " + newOne);
+        }
+        if (oldDeclaring.isAssignableFrom(newDeclaring)) {
+            // newOne is declared in a subclass; override the old creator.
+            // (fall through to replace oldOne)
+        } else if (newDeclaring.isAssignableFrom(oldDeclaring)) {
+            // oldOne is more specific; keep it (ignore newOne)
+            return;
+        } else {
+            // No clear inheritance relationship: this is ambiguous.
             throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+                    + " creators: already had explicitly marked " + oldOne
+                    + ", encountered " + newOne);
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
