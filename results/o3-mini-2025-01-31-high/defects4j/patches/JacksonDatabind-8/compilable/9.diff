diff --git a/tmp/a2b34331-cb27-416e-a40a-485368bc2738_buggy.java b/tmp/1893785f-85f2-415b-b4fb-bfd45c7edf84_fixed.java
index c9da1b7..3087c43 100644
--- a/tmp/a2b34331-cb27-416e-a40a-485368bc2738_buggy.java
+++ b/tmp/1893785f-85f2-415b-b4fb-bfd45c7edf84_fixed.java
@@ -1,33 +1,30 @@
-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
-    {
+protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+        // if these two creators are really for the same underlying member, no conflict:
+        if (oldOne.getAnnotated().equals(newOne.getAnnotated())) {
+            if (explicit && ((_explicitCreators & mask) == 0)) {
+                _explicitCreators |= mask;
+            }
+            return;
+        }
+        // if we already had an explicit creator, and new one isnâ€™t explicit, then ignore it
+        if ((_explicitCreators & mask) != 0) {
             if (!explicit) {
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
         }
-
-            // one more thing: ok to override in sub-class
+        // Otherwise, if both are explicit (or new one is explicit) but coming from the same type,
+        // then that is a conflict.
         if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
             throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
                     + " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
