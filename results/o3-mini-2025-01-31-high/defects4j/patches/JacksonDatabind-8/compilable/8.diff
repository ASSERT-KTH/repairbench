diff --git a/tmp/c5701ab8-ad5b-49b5-9ff9-c42d9d4c68f7_buggy.java b/tmp/29b0e171-b18b-41f7-b957-4f7e252b74a6_fixed.java
index c9da1b7..58c67f3 100644
--- a/tmp/c5701ab8-ad5b-49b5-9ff9-c42d9d4c68f7_buggy.java
+++ b/tmp/29b0e171-b18b-41f7-b957-4f7e252b74a6_fixed.java
@@ -1,33 +1,40 @@
-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
-    {
+protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+        // If we already had an explicit creator, ignore a non-explicit new one.
+        if ((_explicitCreators & mask) != 0) {
             if (!explicit) {
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
         }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+        // If the underlying member is the same, no conflict: simply return.
+        if (oldOne.getMember() == newOne.getMember()) {
+            return;
+        }
+        // Compare the declaring classes so that a creator declared in a subclass can override one
+        // declared in a super-class.
+        Class<?> oldDeclaring = oldOne.getDeclaringClass();
+        Class<?> newDeclaring = newOne.getDeclaringClass();
+        if (oldDeclaring == newDeclaring) {
+            throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
+                    + " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
+        }
+        if (oldDeclaring.isAssignableFrom(newDeclaring)) {
+            // newOne is declared in a subclass of oldOne's declaring class: allow override.
+            ; // fall through to replace oldOne with newOne
+        } else if (newDeclaring.isAssignableFrom(oldDeclaring)) {
+            // oldOne is more specific, so we keep it.
+            return;
+        } else {
+            // Ambiguous: neither declaring class is a subclass of the other.
             throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
                     + " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
