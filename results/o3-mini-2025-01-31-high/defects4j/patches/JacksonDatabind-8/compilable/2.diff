diff --git a/tmp/e8bd429d-0727-4bf8-bdc4-d250fcce1a1c_buggy.java b/tmp/49c1e83a-a673-4890-bcdb-073effeb8582_fixed.java
index c9da1b7..2093516 100644
--- a/tmp/e8bd429d-0727-4bf8-bdc4-d250fcce1a1c_buggy.java
+++ b/tmp/49c1e83a-a673-4890-bcdb-073effeb8582_fixed.java
@@ -1,33 +1,46 @@
-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
-    {
+protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
         if (!explicit) {
+            // If the new candidate is implicit, do not override an existing creator.
             return;
-                }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+        } else {
+            // New creator is explicit.
+            if ((_explicitCreators & mask) != 0) {
+                // We already have an explicit creator.
+                // Check whether the two creators come from different declaring classes;
+                // if the new one comes from a more specific subclass, override.
+                Class<?> oldDecl = oldOne.getDeclaringClass();
+                Class<?> newDecl = newOne.getDeclaringClass();
+                if (oldDecl == newDecl) {
+                    // Both creators are declared on the same class.
+                    // In such a case we keep the original (avoiding a conflict).
+                    return;
+                } else if (oldDecl.isAssignableFrom(newDecl)) {
+                    // New creator comes from a subclass: use it.
+                    _creators[typeIndex] = _fixAccess(newOne);
+                } else if (newDecl.isAssignableFrom(oldDecl)) {
+                    // Existing creator is more specific; do nothing.
+                } else {
+                    // Neither is assignable from the other: genuine conflict.
                     throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+                            + " creators: already had explicitly marked " + oldOne
+                            + ", encountered " + newOne);
                 }
+                return;
+            } else {
+                // Old creator was implicit but the new one is explicit: override it.
+                _creators[typeIndex] = _fixAccess(newOne);
+                _explicitCreators |= mask;
+                return;
             }
+        }
+    }
+    // No prior creator: simply register the new one.
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
