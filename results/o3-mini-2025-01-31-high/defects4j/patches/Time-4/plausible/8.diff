diff --git a/tmp/b6432078-b278-4630-afcd-aa2f35b3318f_buggy.java b/tmp/5e3a4b3e-8041-4cb2-9bdb-857aa6501c92_fixed.java
index 7ea7ac9..5b43b79 100644
--- a/tmp/b6432078-b278-4630-afcd-aa2f35b3318f_buggy.java
+++ b/tmp/5e3a4b3e-8041-4cb2-9bdb-857aa6501c92_fixed.java
@@ -1,63 +1,62 @@
-    /**
-     * Gets a copy of this date with the specified field set to a new value.
-     * <p>
-     * If this partial did not previously support the field, the new one will.
-     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
-     * <p>
-     * For example, if the field type is <code>dayOfMonth</code> then the day
-     * would be changed/added in the returned instance.
-     *
-     * @param fieldType  the field type to set, not null
-     * @param value  the value to set
-     * @return a copy of this instance with the field set
-     * @throws IllegalArgumentException if the value is null or invalid
-     */
 public Partial with(DateTimeFieldType fieldType, int value) {
     if (fieldType == null) {
         throw new IllegalArgumentException("The field type must not be null");
     }
     int index = indexOf(fieldType);
     if (index == -1) {
+        // In a Partial two fields that represent the same underlying value (for example,
+        // hourOfDay and clockhourOfDay) are not allowed. Check for a duplicate in that sense.
+        for (int i = 0; i < iTypes.length; i++) {
+            if (fieldType.getDurationType().equals(iTypes[i].getDurationType()) &&
+                fieldType.getRangeDurationType().equals(iTypes[i].getRangeDurationType())) {
+                throw new IllegalArgumentException("Field '" + fieldType + "' is already supported");
+            }
+        }
+        
         DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
         int[] newValues = new int[newTypes.length];
         
-            // find correct insertion point to keep largest-smallest order
+        // Find the correct insertion point so that the fields remain in largest-to-smallest order.
         int i = 0;
         DurationField unitField = fieldType.getDurationType().getField(iChronology);
         if (unitField.isSupported()) {
             for (; i < iTypes.length; i++) {
                 DateTimeFieldType loopType = iTypes[i];
                 DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
                 if (loopUnitField.isSupported()) {
                     int compare = unitField.compareTo(loopUnitField);
                     if (compare > 0) {
                         break;
                     } else if (compare == 0) {
                         DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
                         DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
                         if (rangeField.compareTo(loopRangeField) > 0) {
                             break;
                         }
                     }
                 }
             }
         }
+        
         System.arraycopy(iTypes, 0, newTypes, 0, i);
         System.arraycopy(iValues, 0, newValues, 0, i);
         newTypes[i] = fieldType;
         newValues[i] = value;
         System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
         System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
-            // use public constructor to ensure full validation
-            // this isn't overly efficient, but is safe
+        
+        // Use the public constructor to ensure full validation, including that no duplicate
+        // (i.e. conflicting) fields have been created.
         Partial newPartial = new Partial(iChronology, newTypes, newValues);
         iChronology.validate(newPartial, newValues);
         return newPartial;
     }
+    
+    // The field already exists; if the value is the same, then return this.
     if (value == getValue(index)) {
         return this;
     }
     int[] newValues = getValues();
     newValues = getField(index).set(this, index, newValues, value);
     return new Partial(this, newValues);
 }
\ No newline at end of file
