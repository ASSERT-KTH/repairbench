diff --git a/tmp/e1aec231-2b0d-4907-8122-d622a98dc1ec_buggy.java b/tmp/ed3a1c0c-526d-432e-9e6e-49b9e39484ab_fixed.java
index 7ea7ac9..047fd9d 100644
--- a/tmp/e1aec231-2b0d-4907-8122-d622a98dc1ec_buggy.java
+++ b/tmp/ed3a1c0c-526d-432e-9e6e-49b9e39484ab_fixed.java
@@ -1,63 +1,79 @@
-    /**
-     * Gets a copy of this date with the specified field set to a new value.
-     * <p>
-     * If this partial did not previously support the field, the new one will.
-     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
-     * <p>
-     * For example, if the field type is <code>dayOfMonth</code> then the day
-     * would be changed/added in the returned instance.
-     *
-     * @param fieldType  the field type to set, not null
-     * @param value  the value to set
-     * @return a copy of this instance with the field set
-     * @throws IllegalArgumentException if the value is null or invalid
-     */
 public Partial with(DateTimeFieldType fieldType, int value) {
     if (fieldType == null) {
         throw new IllegalArgumentException("The field type must not be null");
     }
+    // Get the field implementation from the chronology.
+    DateTimeField newField = fieldType.getField(iChronology);
+    
+    // First, check whether a field with the same underlying duration is already present.
+    // (Note: clockhourOfDay and hourOfDay have the same duration and range,
+    // so adding a clockhourOfDay to a partial that already has an hourOfDay is disallowed.)
+    for (int i = 0; i < iTypes.length; i++) {
+        DateTimeField existingField = iTypes[i].getField(iChronology);
+        if (existingField.equals(newField)) {
+            // The field already exists exactly, so simply update its value.
+            if (value == getValue(i)) {
+                return this;
+            }
+            int[] newValues = getValues();
+            newValues = existingField.set(this, i, newValues, value);
+            return new Partial(this, newValues);
+        }
+        if (existingField.getDurationField().equals(newField.getDurationField()) &&
+            existingField.getRangeDurationField().equals(newField.getRangeDurationField())) {
+            throw new IllegalArgumentException("Field " + fieldType.getName() + " is already supported");
+        }
+    }
+    
+    // If the field is not already present and no conflict was found,
+    // then we need to add the new field.
+    // (The call to indexOf here is just a safety check; it should return -1.)
     int index = indexOf(fieldType);
     if (index == -1) {
         DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
         int[] newValues = new int[newTypes.length];
         
-            // find correct insertion point to keep largest-smallest order
+        // Find the correct insertion point to maintain the (largest-to-smallest) order.
         int i = 0;
-            DurationField unitField = fieldType.getDurationType().getField(iChronology);
+        DurationField unitField = newField.getDurationField();
         if (unitField.isSupported()) {
             for (; i < iTypes.length; i++) {
-                    DateTimeFieldType loopType = iTypes[i];
-                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
+                DateTimeField loopField = iTypes[i].getField(iChronology);
+                DurationField loopUnitField = loopField.getDurationField();
                 if (loopUnitField.isSupported()) {
                     int compare = unitField.compareTo(loopUnitField);
                     if (compare > 0) {
                         break;
                     } else if (compare == 0) {
-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
+                        // Compare range duration fields if the unit durations are equal.
+                        DurationField rangeField = newField.getRangeDurationField();
+                        DurationField loopRangeField = loopField.getRangeDurationField();
                         if (rangeField.compareTo(loopRangeField) > 0) {
                             break;
                         }
                     }
                 }
             }
         }
         System.arraycopy(iTypes, 0, newTypes, 0, i);
         System.arraycopy(iValues, 0, newValues, 0, i);
         newTypes[i] = fieldType;
         newValues[i] = value;
         System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
         System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
-            // use public constructor to ensure full validation
-            // this isn't overly efficient, but is safe
+        
+        // Create the new Partial and validate it.
         Partial newPartial = new Partial(iChronology, newTypes, newValues);
         iChronology.validate(newPartial, newValues);
         return newPartial;
     }
+    
+    // If by some chance the field was found (should not happen due to the loop above),
+    // simply update it.
     if (value == getValue(index)) {
         return this;
     }
     int[] newValues = getValues();
     newValues = getField(index).set(this, index, newValues, value);
     return new Partial(this, newValues);
 }
\ No newline at end of file
