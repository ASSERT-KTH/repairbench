diff --git a/tmp/3aeabdf4-81aa-49f5-a180-d0b65fbc1d80_buggy.java b/tmp/b0f69b45-bee5-4455-b18c-568dbf1d86e2_fixed.java
index 7ea7ac9..6f20983 100644
--- a/tmp/3aeabdf4-81aa-49f5-a180-d0b65fbc1d80_buggy.java
+++ b/tmp/b0f69b45-bee5-4455-b18c-568dbf1d86e2_fixed.java
@@ -1,63 +1,69 @@
-    /**
-     * Gets a copy of this date with the specified field set to a new value.
-     * <p>
-     * If this partial did not previously support the field, the new one will.
-     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
-     * <p>
-     * For example, if the field type is <code>dayOfMonth</code> then the day
-     * would be changed/added in the returned instance.
-     *
-     * @param fieldType  the field type to set, not null
-     * @param value  the value to set
-     * @return a copy of this instance with the field set
-     * @throws IllegalArgumentException if the value is null or invalid
-     */
 public Partial with(DateTimeFieldType fieldType, int value) {
     if (fieldType == null) {
         throw new IllegalArgumentException("The field type must not be null");
     }
+    // Obtain the field for the given type in the chronology.
+    DateTimeField newField = fieldType.getField(iChronology);
+    if (!newField.isSupported()) {
+        throw new IllegalArgumentException("Field '" + fieldType.getName() + "' is not supported");
+    }
+    // Check for a duplicate or conflicting field.
+    // Even if the field types are not equal by identity,
+    // if they represent the same underlying field (same unit and range),
+    // then adding the new one is not allowed.
+    for (int j = 0; j < iTypes.length; j++) {
+        DateTimeField existingField = iTypes[j].getField(iChronology);
+        if (newField.getDurationField().equals(existingField.getDurationField())) {
+            DurationField newRange = newField.getRangeDurationField();
+            DurationField existingRange = existingField.getRangeDurationField();
+            if (newRange == null ? existingRange == null : newRange.equals(existingRange)) {
+                throw new IllegalArgumentException("Field '" + fieldType.getName() + "' already exists");
+            }
+        }
+    }
+
     int index = indexOf(fieldType);
     if (index == -1) {
-            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
-            int[] newValues = new int[newTypes.length];
-            
-            // find correct insertion point to keep largest-smallest order
+        // The field is not already present.
+        // Find the correct insertion point to maintain largest-to-smallest order.
         int i = 0;
         DurationField unitField = fieldType.getDurationType().getField(iChronology);
         if (unitField.isSupported()) {
             for (; i < iTypes.length; i++) {
                 DateTimeFieldType loopType = iTypes[i];
                 DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
                 if (loopUnitField.isSupported()) {
                     int compare = unitField.compareTo(loopUnitField);
                     if (compare > 0) {
                         break;
                     } else if (compare == 0) {
+                        // Same unit length, so compare their range durations.
                         DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
                         DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
                         if (rangeField.compareTo(loopRangeField) > 0) {
                             break;
                         }
                     }
                 }
             }
         }
+        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
+        int[] newValues = new int[newTypes.length];
         System.arraycopy(iTypes, 0, newTypes, 0, i);
         System.arraycopy(iValues, 0, newValues, 0, i);
         newTypes[i] = fieldType;
         newValues[i] = value;
         System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
         System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
-            // use public constructor to ensure full validation
-            // this isn't overly efficient, but is safe
+        // Use the public constructor to ensure full validation.
         Partial newPartial = new Partial(iChronology, newTypes, newValues);
         iChronology.validate(newPartial, newValues);
         return newPartial;
     }
     if (value == getValue(index)) {
         return this;
     }
     int[] newValues = getValues();
     newValues = getField(index).set(this, index, newValues, value);
     return new Partial(this, newValues);
 }
\ No newline at end of file
