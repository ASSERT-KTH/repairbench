diff --git a/tmp/f8005350-6aaf-41dc-b42d-39a174372448_buggy.java b/tmp/5c9f7313-1252-40d3-b27e-b039fa279860_fixed.java
index 0fe7b81..2be18d4 100644
--- a/tmp/f8005350-6aaf-41dc-b42d-39a174372448_buggy.java
+++ b/tmp/5c9f7313-1252-40d3-b27e-b039fa279860_fixed.java
@@ -1,67 +1,47 @@
-    /**
-     * Find a zero in the given interval with an initial guess.
-     * <p>Throws <code>IllegalArgumentException</code> if the values of the
-     * function at the three points have the same sign (note that it is
-     * allowed to have endpoints with the same sign if the initial point has
-     * opposite sign function-wise).</p>
-     *
-     * @param f function to solve.
-     * @param min the lower bound for the interval.
-     * @param max the upper bound for the interval.
-     * @param initial the start value to use (must be set to min if no
-     * initial point is known).
-     * @return the value where the function is zero
-     * @throws MaxIterationsExceededException the maximum iteration count
-     * is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating
-     *  the function
-     * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
-     */
 public double solve(final UnivariateRealFunction f,
                     final double min, final double max, final double initial)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
     clearResult();
     verifySequence(min, initial, max);
 
     // return the initial guess if it is good enough
     double yInitial = f.value(initial);
     if (Math.abs(yInitial) <= functionValueAccuracy) {
         setResult(initial, 0);
         return result;
     }
 
-        // return the first endpoint if it is good enough
+    // return the first endpoint if it is good enough (use min, not its function value)
     double yMin = f.value(min);
     if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+        setResult(min, 0);
         return result;
     }
 
-        // reduce interval if min and initial bracket the root
+    // if min and initial bracket the root, search in [min, initial] and use the initial guess
     if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
+        return solve(f, min, yMin, initial, yInitial, initial, yInitial);
     }
 
-        // return the second endpoint if it is good enough
+    // return the second endpoint if it is good enough (use max, not its function value)
     double yMax = f.value(max);
     if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+        setResult(max, 0);
         return result;
     }
 
-        // reduce interval if initial and max bracket the root
+    // if initial and max bracket the root, search in [initial, max] and use the initial guess
     if (yInitial * yMax < 0) {
         return solve(f, initial, yInitial, max, yMax, initial, yInitial);
     }
 
+    // if both endpoints have the same sign, we cannot bracket a root unless the initial guess is of opposite sign
     if (yMin * yMax > 0) {
         throw MathRuntimeException.createIllegalArgumentException(
               NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
     }
 
-        // full Brent algorithm starting with provided initial guess
+    // full Brent algorithm starting with the provided initial guess within [min, max]
     return solve(f, min, yMin, max, yMax, initial, yInitial);
-
 }
\ No newline at end of file
