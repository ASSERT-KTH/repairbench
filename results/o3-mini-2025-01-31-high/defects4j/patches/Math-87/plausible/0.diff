diff --git a/tmp/229db282-1dc5-4449-bfd9-0eea50df9153_buggy.java b/tmp/d148150d-37e2-4768-9985-a8e6c981cdf1_fixed.java
index 70cafe0..f847476 100644
--- a/tmp/229db282-1dc5-4449-bfd9-0eea50df9153_buggy.java
+++ b/tmp/d148150d-37e2-4768-9985-a8e6c981cdf1_fixed.java
@@ -1,18 +1,27 @@
 /**
  * Checks whether the given column is basic.
  * @param col index of the column to check
  * @return the row that the variable is basic in. null if the column is not basic
  */
 private Integer getBasicRow(final int col) {
-        Integer row = null;
+    Integer basicRow = null;
     for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
-                if (row == null) {
-                row = i;
+        double entry = getEntry(i, col);
+        if (MathUtils.equals(entry, 0.0, epsilon)) {
+            // entry is essentially 0, so nothing to do here
+            continue;
+        } else if (MathUtils.equals(entry, 1.0, epsilon)) {
+            // if we find a 1, this may be the pivot row
+            if (basicRow == null) {
+                basicRow = i;
             } else {
+                // more than one entry is (almost) 1 â†’ not an identity column
                 return null;
             }
+        } else {
+            // if an entry is nonzero but not 1, then the column is not basic
+            return null;
         }
     }
-        return row;
+    return basicRow;
 }
\ No newline at end of file
