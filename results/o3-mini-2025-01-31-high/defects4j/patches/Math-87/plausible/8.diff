diff --git a/tmp/7bf8c100-52ea-42c0-81e2-7cdb4e81b5d0_buggy.java b/tmp/654a1f5d-ee2c-4ce4-a898-6048fbf16e8b_fixed.java
index 70cafe0..6868e03 100644
--- a/tmp/7bf8c100-52ea-42c0-81e2-7cdb4e81b5d0_buggy.java
+++ b/tmp/654a1f5d-ee2c-4ce4-a898-6048fbf16e8b_fixed.java
@@ -1,18 +1,26 @@
 /**
  * Checks whether the given column is basic.
  * @param col index of the column to check
  * @return the row that the variable is basic in. null if the column is not basic
  */
 private Integer getBasicRow(final int col) {
     Integer row = null;
     for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+        double entry = getEntry(i, col);
+        if (!MathUtils.equals(entry, 0.0, epsilon)) {
+            // For a column to be basic, the non-zero entry must equal 1.
+            if (MathUtils.equals(entry, 1.0, epsilon)) {
                 if (row == null) {
                     row = i;
                 } else {
+                    // More than one nonzero (unit) entry found.
+                    return null;
+                }
+            } else {
+                // Nonzero entry that is not 1 means the column is not canonical.
                 return null;
             }
         }
     }
     return row;
 }
\ No newline at end of file
