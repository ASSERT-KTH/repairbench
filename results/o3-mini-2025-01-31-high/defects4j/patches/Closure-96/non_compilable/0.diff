diff --git a/tmp/840099e2-3ecc-4ce8-8087-cc8a8711c7dd_buggy.java b/tmp/8c6d9696-a1a1-4be3-8013-049ec758bdff_fixed.java
index e0ecec8..388d594 100644
--- a/tmp/840099e2-3ecc-4ce8-8087-cc8a8711c7dd_buggy.java
+++ b/tmp/8c6d9696-a1a1-4be3-8013-049ec758bdff_fixed.java
@@ -1,35 +1,38 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
-  private void visitParameterList(NodeTraversal t, Node call,
-      FunctionType functionType) {
+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
-    Iterator<Node> parameters = functionType.getParameters().iterator();
+  // Convert the parameter iterator to a List for random access.
+  List<Node> parameters = new ArrayList<>();
+  for (Node param : functionType.getParameters()) {
+    parameters.add(param);
+  }
+  int numParameters = parameters.size();
   int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
+  while (arguments.hasNext()) {
+    Node argument = arguments.next();
     ordinal++;
-
-      validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+    Node parameter;
+    if (ordinal <= numParameters) {
+      parameter = parameters.get(ordinal - 1);
+    } else if (functionType.isVarArgs()) {
+      // In a varargs function, any extra arguments are checked against the last parameter.
+      parameter = parameters.get(numParameters - 1);
+    } else {
+      // No matching parameter exists; break out of the loop.
+      break;
+    }
+    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),
+                                              getJSType(parameter), call, ordinal);
   }
 
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
            validator.getReadableJSTypeName(call.getFirstChild(), false),
            String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
+           maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
