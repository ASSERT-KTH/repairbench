diff --git a/tmp/88c8daad-c0c2-4318-a1df-7ef945a1a87e_buggy.java b/tmp/0091c42f-377e-4b0f-aaad-2caf2ff65149_fixed.java
index e0ecec8..4ade9cb 100644
--- a/tmp/88c8daad-c0c2-4318-a1df-7ef945a1a87e_buggy.java
+++ b/tmp/0091c42f-377e-4b0f-aaad-2caf2ff65149_fixed.java
@@ -1,35 +1,52 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
-    Iterator<Node> arguments = call.children().iterator();
-    arguments.next(); // skip the function name
+  // Skip the function name.
+  Iterator<Node> children = call.children().iterator();
+  children.next();
 
-    Iterator<Node> parameters = functionType.getParameters().iterator();
+  // Collect all the argument nodes.
+  List<Node> args = new ArrayList<>();
+  while (children.hasNext()) {
+    args.add(children.next());
+  }
+
+  // Collect all the formal parameter nodes.
+  List<Node> params = new ArrayList<>(functionType.getParameters());
   int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
-      ordinal++;
+  // For a var_args function, the last formal parameter is used for all extra arguments.
+  int fixedParamCount = functionType.hasVarArgs() ? params.size() - 1 : params.size();
 
+  // Process the fixed (non-varargs) parameters.
+  for (int i = 0; i < fixedParamCount && i < args.size(); i++) {
+    ordinal++;
+    Node argument = args.get(i);
+    Node parameter = params.get(i);
     validator.expectArgumentMatchesParameter(t, argument,
         getJSType(argument), getJSType(parameter), call, ordinal);
   }
 
-    int numArgs = call.getChildCount() - 1;
+  // If this is a var_args function, process all extra arguments using the varargs parameter.
+  if (functionType.hasVarArgs()) {
+    Node varArgParam = params.get(params.size() - 1);
+    for (int i = fixedParamCount; i < args.size(); i++) {
+      ordinal++;
+      Node argument = args.get(i);
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), getJSType(varArgParam), call, ordinal);
+    }
+  }
+
+  // Check that the overall number of arguments is within the acceptable limits.
+  int numArgs = args.size();
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
         validator.getReadableJSTypeName(call.getFirstChild(), false),
         String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
+        maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
