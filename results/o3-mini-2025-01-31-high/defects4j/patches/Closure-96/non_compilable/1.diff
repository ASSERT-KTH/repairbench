diff --git a/tmp/07b8cf01-c1bc-44cb-920a-5123beec464f_buggy.java b/tmp/869c7c4c-ad3c-48a0-a1a2-ad7446fcd62c_fixed.java
index e0ecec8..8ceb9b6 100644
--- a/tmp/07b8cf01-c1bc-44cb-920a-5123beec464f_buggy.java
+++ b/tmp/869c7c4c-ad3c-48a0-a1a2-ad7446fcd62c_fixed.java
@@ -1,35 +1,49 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
-    Node parameter = null;
+  Node lastParameter = null;
   Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+  while (arguments.hasNext() && parameters.hasNext()) {
+    lastParameter = parameters.next();
     argument = arguments.next();
     ordinal++;
 
     validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+        getJSType(argument), getJSType(lastParameter), call, ordinal);
+  }
+
+  // If the function is variadic, check any extra arguments.
+  if (functionType.isVarArgs()) {
+    // If no parameter was obtained in the loop, then get the varargs parameter.
+    if (lastParameter == null) {
+      Iterator<Node> allParams = functionType.getParameters().iterator();
+      if (allParams.hasNext()) {
+        lastParameter = allParams.next();
+      }
+    }
+    while (arguments.hasNext()) {
+      argument = arguments.next();
+      ordinal++;
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), getJSType(lastParameter), call, ordinal);
+    }
   }
 
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
             validator.getReadableJSTypeName(call.getFirstChild(), false),
             String.valueOf(numArgs), String.valueOf(minArgs),
             maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
