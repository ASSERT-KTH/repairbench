diff --git a/tmp/e277c72b-9f60-4fcf-ae28-699df1a474fc_buggy.java b/tmp/02772ec9-44fe-4dcd-a451-34e1c68f3165_fixed.java
index e0ecec8..d26fa25 100644
--- a/tmp/e277c72b-9f60-4fcf-ae28-699df1a474fc_buggy.java
+++ b/tmp/02772ec9-44fe-4dcd-a451-34e1c68f3165_fixed.java
@@ -1,35 +1,45 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
-  private void visitParameterList(NodeTraversal t, Node call,
-      FunctionType functionType) {
+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
-    Iterator<Node> parameters = functionType.getParameters().iterator();
+  // Collect the formal parameters.
+  // For a var_args function, the last parameter is repeated for extra arguments.
+  List<Node> parameterNodes = functionType.getParameters();
+  boolean isVarArgs = functionType.getMaxArguments() == Integer.MAX_VALUE;
+  int fixedParamCount = isVarArgs ? parameterNodes.size() - 1 : parameterNodes.size();
+
   int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
+  // Process each argument provided.
+  for (int i = 0; arguments.hasNext(); i++) {
+    Node argument = arguments.next();
     ordinal++;
 
-      validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+    Node parameter;
+    if (i < fixedParamCount) {
+      // Use the corresponding fixed parameter.
+      parameter = parameterNodes.get(i);
+    } else if (isVarArgs) {
+      // For extra arguments, use the var_args parameter (which is the last one).
+      parameter = parameterNodes.get(parameterNodes.size() - 1);
+    } else {
+      // Extra arguments in a non-varargs function: break out (the arity error is reported below).
+      break;
+    }
+
+    validator.expectArgumentMatchesParameter(
+        t, argument, getJSType(argument), getJSType(parameter), call, ordinal);
   }
 
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
            validator.getReadableJSTypeName(call.getFirstChild(), false),
            String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
+           maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
