diff --git a/tmp/e2d91e97-3b92-427a-b0b6-9fed660061ac_buggy.java b/tmp/80047ad8-d7fd-4ed8-8378-18024caf2070_fixed.java
index e0ecec8..cf199cd 100644
--- a/tmp/e2d91e97-3b92-427a-b0b6-9fed660061ac_buggy.java
+++ b/tmp/80047ad8-d7fd-4ed8-8378-18024caf2070_fixed.java
@@ -1,35 +1,46 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
+  // Type-check all arguments which have a corresponding formal parameter.
+  while (arguments.hasNext() && parameters.hasNext()) {
+    Node parameter = parameters.next();
+    Node argument = arguments.next();
     ordinal++;
 
     validator.expectArgumentMatchesParameter(t, argument,
         getJSType(argument), getJSType(parameter), call, ordinal);
   }
 
+  // If this is a var_args function (maxArgs is effectively unbounded),
+  // then every extra argument should be type-checked against the var_args parameter.
+  if (functionType.getMaxArguments() == Integer.MAX_VALUE) {
+    // Get the full parameter list to retrieve the var_args parameter.
+    // (A var_args function should have at least one formal parameter.)
+    List<Node> paramList = functionType.getParameters();
+    if (!paramList.isEmpty()) {
+      Node varargsParameter = paramList.get(paramList.size() - 1);
+      while (arguments.hasNext()) {
+        ordinal++;
+        Node argument = arguments.next();
+        validator.expectArgumentMatchesParameter(t, argument,
+            getJSType(argument), getJSType(varargsParameter), call, ordinal);
+      }
+    }
+  }
+
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
         validator.getReadableJSTypeName(call.getFirstChild(), false),
         String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
+        maxArgs != Integer.MAX_VALUE
+            ? " and no more than " + maxArgs + " argument(s)"
+            : "");
   }
 }
\ No newline at end of file
