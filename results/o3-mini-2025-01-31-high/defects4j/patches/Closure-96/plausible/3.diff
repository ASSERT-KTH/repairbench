diff --git a/tmp/baea6b8a-d204-4ffb-adbd-98ae1e0ffe0e_buggy.java b/tmp/00875650-1cf7-4795-b333-a5eb2833b483_fixed.java
index e0ecec8..d18e08e 100644
--- a/tmp/baea6b8a-d204-4ffb-adbd-98ae1e0ffe0e_buggy.java
+++ b/tmp/00875650-1cf7-4795-b333-a5eb2833b483_fixed.java
@@ -1,35 +1,44 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
-  private void visitParameterList(NodeTraversal t, Node call,
-      FunctionType functionType) {
+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
+  Node lastParameter = null;
+  // Process each formal parameter as long as both iterators have elements.
+  while (arguments.hasNext() && parameters.hasNext()) {
+    lastParameter = parameters.next();
+    Node argument = arguments.next();
     ordinal++;
 
     validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+        getJSType(argument), getJSType(lastParameter), call, ordinal);
   }
 
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
+
+  // If the function is var_args (i.e. maxArgs is unbounded) then validate
+  // each remaining argument against the last formal (var_args) parameter.
+  if (maxArgs == Integer.MAX_VALUE && lastParameter != null) {
+    while (arguments.hasNext()) {
+      Node argument = arguments.next();
+      ordinal++;
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), getJSType(lastParameter), call, ordinal);
+    }
+  }
+
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
            validator.getReadableJSTypeName(call.getFirstChild(), false),
            String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
+           maxArgs != Integer.MAX_VALUE
+               ? " and no more than " + maxArgs + " argument(s)"
+               : "");
   }
 }
\ No newline at end of file
