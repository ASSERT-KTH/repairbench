diff --git a/tmp/af2cc7f7-625c-4ffc-aada-17905c1164b6_buggy.java b/tmp/bd644889-8772-4a85-af9d-1e1bdaadb277_fixed.java
index e0ecec8..719174a 100644
--- a/tmp/af2cc7f7-625c-4ffc-aada-17905c1164b6_buggy.java
+++ b/tmp/bd644889-8772-4a85-af9d-1e1bdaadb277_fixed.java
@@ -1,35 +1,42 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
+  Node lastParameter = null;
+  // First, process paired parameters and arguments.
+  while (arguments.hasNext() && parameters.hasNext()) {
+    lastParameter = parameters.next();
+    Node argument = arguments.next();
     ordinal++;
+    validator.expectArgumentMatchesParameter(t, argument,
+        getJSType(argument), getJSType(lastParameter), call, ordinal);
+  }
 
+  // If there are remaining arguments and the function is variadic,
+  // check the extra arguments against the var_args parameter type.
+  if (arguments.hasNext() && functionType.getMaxArguments() == Integer.MAX_VALUE) {
+    while (arguments.hasNext()) {
+      Node argument = arguments.next();
+      ordinal++;
       validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+          getJSType(argument), getJSType(lastParameter), call, ordinal);
+    }
   }
 
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
         validator.getReadableJSTypeName(call.getFirstChild(), false),
         String.valueOf(numArgs), String.valueOf(minArgs),
         maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
