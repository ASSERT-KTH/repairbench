diff --git a/tmp/fcffd3e2-503b-4825-bf27-2122dd3886ba_buggy.java b/tmp/0d208869-a4e2-45a4-8b51-5dbdd106085a_fixed.java
index 7116384..0fe0ff2 100644
--- a/tmp/fcffd3e2-503b-4825-bf27-2122dd3886ba_buggy.java
+++ b/tmp/0d208869-a4e2-45a4-8b51-5dbdd106085a_fixed.java
@@ -1,39 +1,31 @@
-    /**
-     * Returns at most 63 bits read from the underlying stream.
-     *
-     * @param count the number of bits to read, must be a positive
-     * number not bigger than 63.
-     * @return the bits concatenated as a long using the stream's byte order.
-     *         -1 if the end of the underlying stream has been reached before reading
-     *         the requested number of bits
-     * @throws IOException on error
-     */
 public long readBits(final int count) throws IOException {
     if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
         throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
     }
     while (bitsCachedSize < count) {
         final long nextByte = in.read();
         if (nextByte < 0) {
             return nextByte;
         }
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
             bitsCached |= (nextByte << bitsCachedSize);
         } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
+            bitsCached = (bitsCached << 8) | nextByte;
         }
         bitsCachedSize += 8;
     }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
 
     final long bitsOut;
     if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
+        bitsOut = bitsCached & MASKS[count];
         bitsCached >>>= count;
-            } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
-            }
         bitsCachedSize -= count;
+    } else {
+        int shift = bitsCachedSize - count;
+        bitsOut = (bitsCached >> shift) & MASKS[count];
+        // Remove the extracted bits
+        bitsCached &= MASKS[shift];
+        bitsCachedSize = shift;
+    }
     return bitsOut;
 }
\ No newline at end of file
