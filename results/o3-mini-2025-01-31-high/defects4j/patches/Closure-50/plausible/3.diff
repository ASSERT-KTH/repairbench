diff --git a/tmp/3fc5d8d4-f5e3-4203-87a7-54bdd279207f_buggy.java b/tmp/0aa28d68-6b9f-48b5-b8e3-1a7bd72f1ee8_fixed.java
index d8b0158..628e6f7 100644
--- a/tmp/3fc5d8d4-f5e3-4203-87a7-54bdd279207f_buggy.java
+++ b/tmp/0aa28d68-6b9f-48b5-b8e3-1a7bd72f1ee8_fixed.java
@@ -1,113 +1,119 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 private Node tryFoldArrayJoin(Node n) {
   Node callTarget = n.getFirstChild();
 
   if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
     return n;
   }
 
+  // Get the first argument (if any)
   Node right = callTarget.getNext();
+  // If thereâ€™s more than one argument, we cannot fold.
+  if (right != null && right.getNext() != null) {
+    return n;
+  }
   if (right != null) {
     if (!NodeUtil.isImmutableValue(right)) {
       return n;
     }
   }
 
   Node arrayNode = callTarget.getFirstChild();
   Node functionName = arrayNode.getNext();
 
   if ((arrayNode.getType() != Token.ARRAYLIT) ||
       !functionName.getString().equals("join")) {
     return n;
   }
 
-      // "," is the default, it doesn't need to be explicit
-
+  // The default join separator is "," so if no argument is provided, use that.
   String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
   StringBuilder sb = null;
   int foldedSize = 0;
   Node prev = null;
   Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+  // Merge adjacent string (or EMPTY) nodes.
   while (elem != null) {
     if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
       if (sb == null) {
         sb = new StringBuilder();
       } else {
         sb.append(joinString);
       }
       sb.append(NodeUtil.getArrayElementStringValue(elem));
     } else {
       if (sb != null) {
         Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
+        // Add the cost of the folded string literal (+2 for the quotes).
         foldedSize += sb.length() + 2;
         arrayFoldedChildren.add(
             Node.newString(sb.toString()).copyInformationFrom(prev));
         sb = null;
       }
       foldedSize += InlineCostEstimator.getCost(elem);
       arrayFoldedChildren.add(elem);
     }
     prev = elem;
     elem = elem.getNext();
   }
-
   if (sb != null) {
     Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
     foldedSize += sb.length() + 2;
     arrayFoldedChildren.add(
         Node.newString(sb.toString()).copyInformationFrom(prev));
   }
-    // one for each comma.
+  // Account for the commas inserted between folded children.
   foldedSize += arrayFoldedChildren.size() - 1;
 
   int originalSize = InlineCostEstimator.getCost(n);
   switch (arrayFoldedChildren.size()) {
     case 0:
       Node emptyStringNode = Node.newString("");
       n.getParent().replaceChild(n, emptyStringNode);
       reportCodeChange();
       return emptyStringNode;
     case 1:
       Node foldedStringNode = arrayFoldedChildren.remove(0);
       if (foldedSize > originalSize) {
         return n;
       }
       arrayNode.detachChildren();
       if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
+        // If the result is not a string literal, coerce it to a string.
         Node replacement = new Node(Token.ADD,
             Node.newString("").copyInformationFrom(n),
             foldedStringNode);
         foldedStringNode = replacement;
       }
       n.getParent().replaceChild(n, foldedStringNode);
       reportCodeChange();
       return foldedStringNode;
     default:
-        // No folding could actually be performed.
+      // If no reduction in number of children occurred, do not optimize.
       if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
         return n;
       }
       int kJoinOverhead = "[].join()".length();
       foldedSize += kJoinOverhead;
       foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
       if (foldedSize > originalSize) {
         return n;
       }
       arrayNode.detachChildren();
       for (Node node : arrayFoldedChildren) {
         arrayNode.addChildToBack(node);
       }
+      // If the join separator is the default (",") and it was passed explicitly,
+      // remove the argument so that we generate .join() instead of .join(',');
+      if (right != null && ",".equals(joinString)) {
+        n.removeChild(right);
+      }
       reportCodeChange();
       break;
   }
 
   return n;
 }
\ No newline at end of file
