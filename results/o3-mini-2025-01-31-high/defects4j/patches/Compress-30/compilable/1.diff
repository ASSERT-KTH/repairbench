diff --git a/tmp/a6592ac1-95ae-4983-bf5e-878b8234c85d_buggy.java b/tmp/c1a42461-b9da-45c5-b921-0611ffa5fcb4_fixed.java
index cae5e03..1a70a6b 100644
--- a/tmp/a6592ac1-95ae-4983-bf5e-878b8234c85d_buggy.java
+++ b/tmp/c1a42461-b9da-45c5-b921-0611ffa5fcb4_fixed.java
@@ -1,33 +1,30 @@
-    /*
-     * (non-Javadoc)
-     * 
-     * @see java.io.InputStream#read(byte[], int, int)
-     */
 @Override
-    public int read(final byte[] dest, final int offs, final int len)
-        throws IOException {
+public int read(final byte[] dest, final int offs, final int len) throws IOException {
     if (offs < 0) {
         throw new IndexOutOfBoundsException("offs(" + offs + ") < 0.");
     }
     if (len < 0) {
         throw new IndexOutOfBoundsException("len(" + len + ") < 0.");
     }
     if (offs + len > dest.length) {
-            throw new IndexOutOfBoundsException("offs(" + offs + ") + len("
-                                                + len + ") > dest.length(" + dest.length + ").");
+        throw new IndexOutOfBoundsException("offs(" + offs + ") + len(" + len
+                + ") > dest.length(" + dest.length + ").");
+    }
+    // if no bytes are requested, return 0 per contract
+    if (len == 0) {
+        return 0;
     }
     if (this.in == null) {
         throw new IOException("stream closed");
     }
 
     final int hi = offs + len;
     int destOffs = offs;
     int b;
     while (destOffs < hi && ((b = read0()) >= 0)) {
         dest[destOffs++] = (byte) b;
         count(1);
     }
     
-        int c = (destOffs == offs) ? -1 : (destOffs - offs);
-        return c;
+    return (destOffs == offs) ? -1 : (destOffs - offs);
 }
\ No newline at end of file
