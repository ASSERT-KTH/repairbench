diff --git a/tmp/e95fc227-ee99-4072-a1cc-51af2a09602f_buggy.java b/tmp/c5717246-9588-4a2c-a6bf-467b59c907b7_fixed.java
index cae5e03..0a18a4c 100644
--- a/tmp/e95fc227-ee99-4072-a1cc-51af2a09602f_buggy.java
+++ b/tmp/c5717246-9588-4a2c-a6bf-467b59c907b7_fixed.java
@@ -1,33 +1,33 @@
 /*
  * (non-Javadoc)
  *
  * @see java.io.InputStream#read(byte[], int, int)
  */
 @Override
-    public int read(final byte[] dest, final int offs, final int len)
-        throws IOException {
+public int read(final byte[] dest, final int offs, final int len) throws IOException {
     if (offs < 0) {
         throw new IndexOutOfBoundsException("offs(" + offs + ") < 0.");
     }
     if (len < 0) {
         throw new IndexOutOfBoundsException("len(" + len + ") < 0.");
     }
     if (offs + len > dest.length) {
-            throw new IndexOutOfBoundsException("offs(" + offs + ") + len("
-                                                + len + ") > dest.length(" + dest.length + ").");
+        throw new IndexOutOfBoundsException("offs(" + offs + ") + len(" + len + ") > dest.length(" + dest.length + ").");
+    }
+    if (len == 0) {
+        return 0;
     }
     if (this.in == null) {
         throw new IOException("stream closed");
     }
 
     final int hi = offs + len;
     int destOffs = offs;
     int b;
     while (destOffs < hi && ((b = read0()) >= 0)) {
         dest[destOffs++] = (byte) b;
         count(1);
     }
 
-        int c = (destOffs == offs) ? -1 : (destOffs - offs);
-        return c;
+    return (destOffs == offs) ? -1 : (destOffs - offs);
 }
\ No newline at end of file
