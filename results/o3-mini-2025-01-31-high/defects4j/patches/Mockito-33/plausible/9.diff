diff --git a/tmp/2ae81dee-8909-46a5-9877-1393098bf8da_buggy.java b/tmp/b2373fe8-8fcd-4b84-83e4-fb72b4b465e6_fixed.java
index e1fc51f..5e23cf6 100644
--- a/tmp/2ae81dee-8909-46a5-9877-1393098bf8da_buggy.java
+++ b/tmp/b2373fe8-8fcd-4b84-83e4-fb72b4b465e6_fixed.java
@@ -1,9 +1,26 @@
 public boolean hasSameMethod(Invocation candidate) {
-        //not using method.equals() for 1 good reason:
-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
     Method m1 = invocation.getMethod();
     Method m2 = candidate.getMethod();
 
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+    // If the methods are exactly equal, no further work is necessary.
+    if (m1.equals(m2)) {
+        return true;
+    }
+
+    // They might still be “the same” if one is a compiler‐generated forwarding/bridge method.
+    // In that case, we check that the two methods have the same name and parameter types.
+    if (!m1.getName().equals(m2.getName())) {
+        return false;
+    }
+    
+    if (!java.util.Arrays.equals(m1.getParameterTypes(), m2.getParameterTypes())) {
+        return false;
+    }
+    
+    // For covariant return types, the return types might not be exactly equal but one must be assignable to the other.
+    Class<?> returnType1 = m1.getReturnType();
+    Class<?> returnType2 = m2.getReturnType();
+    return returnType1.equals(returnType2)
+            || returnType1.isAssignableFrom(returnType2)
+            || returnType2.isAssignableFrom(returnType1);
 }
\ No newline at end of file
