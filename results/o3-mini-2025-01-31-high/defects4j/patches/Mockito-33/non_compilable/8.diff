diff --git a/tmp/a5d14fb8-bc0e-49c4-8a52-8792d288c5b8_buggy.java b/tmp/84e9e916-ada5-4419-9f03-0aa688284168_fixed.java
index e1fc51f..6de8846 100644
--- a/tmp/a5d14fb8-bc0e-49c4-8a52-8792d288c5b8_buggy.java
+++ b/tmp/84e9e916-ada5-4419-9f03-0aa688284168_fixed.java
@@ -1,9 +1,23 @@
 public boolean hasSameMethod(Invocation candidate) {
-        //not using method.equals() for 1 good reason:
-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
     Method m1 = invocation.getMethod();
     Method m2 = candidate.getMethod();
 
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+    // First, try the normal equality check.
+    if (m1.equals(m2)) {
+        return true;
+    }
+
+    // If the names and parameter types are the same, then we might be dealing
+    // with a bridge/forwarding method (common with generics). In that case,
+    // we treat them as equivalent.
+    if (m1.getName().equals(m2.getName()) &&
+        Arrays.equals(m1.getParameterTypes(), m2.getParameterTypes())) {
+        if (m1.isBridge() || m2.isBridge()) {
+            return true;
+        }
+        // For non-bridge methods, check the return types as well.
+        return m1.getReturnType().equals(m2.getReturnType());
+    }
+
+    return false;
 }
\ No newline at end of file
