diff --git a/tmp/40e8e311-eea2-439d-8a97-77bb23c4b0a2_buggy.java b/tmp/a43280f3-ed99-4e5a-8440-cbdfeafb04cc_fixed.java
index c6cb157..0faa1b0 100644
--- a/tmp/40e8e311-eea2-439d-8a97-77bb23c4b0a2_buggy.java
+++ b/tmp/a43280f3-ed99-4e5a-8440-cbdfeafb04cc_fixed.java
@@ -1,14 +1,16 @@
-    /**
-     * Method called to expand size of the current segment, to
-     * accommodate for more contiguous content. Usually only
-     * used when parsing tokens like names if even then.
-     */
-    public char[] expandCurrentSegment()
-    {
+public char[] expandCurrentSegment() {
     final char[] curr = _currentSegment;
-        // Let's grow by 50% by default
     final int len = curr.length;
-        // but above intended maximum, slow to increase by 25%
-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
-        return (_currentSegment = Arrays.copyOf(curr, newLen));
+    final int newLen;
+    if (len < MAX_SEGMENT_LEN) {
+        // Grow by 50% until we hit the maximum threshold
+        newLen = Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+    } else if (len == MAX_SEGMENT_LEN) {
+        // Exactly at the maximum: only add one extra element
+        newLen = len + 1;
+    } else { // len > MAX_SEGMENT_LEN
+        // Already past the intended maximum; slow growth by 25%
+        newLen = len + (len >> 2);
+    }
+    return _currentSegment = Arrays.copyOf(curr, newLen);
 }
\ No newline at end of file
