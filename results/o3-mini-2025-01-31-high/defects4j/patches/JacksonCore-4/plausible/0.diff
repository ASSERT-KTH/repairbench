diff --git a/tmp/5d256ce1-4e27-4cec-ad1a-c9cf9fbdf39f_buggy.java b/tmp/88d6c80f-ec23-4b65-985e-30793cf15d77_fixed.java
index c6cb157..6f22e7d 100644
--- a/tmp/5d256ce1-4e27-4cec-ad1a-c9cf9fbdf39f_buggy.java
+++ b/tmp/88d6c80f-ec23-4b65-985e-30793cf15d77_fixed.java
@@ -1,14 +1,19 @@
-    /**
-     * Method called to expand size of the current segment, to
-     * accommodate for more contiguous content. Usually only
-     * used when parsing tokens like names if even then.
-     */
-    public char[] expandCurrentSegment()
-    {
+public char[] expandCurrentSegment() {
     final char[] curr = _currentSegment;
-        // Let's grow by 50% by default
     final int len = curr.length;
-        // but above intended maximum, slow to increase by 25%
-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
-        return (_currentSegment = Arrays.copyOf(curr, newLen));
+    int newLen;
+    // If below the maximum segment size, grow by 50% (but never past MAX_SEGMENT_LEN)
+    if (len < MAX_SEGMENT_LEN) {
+        newLen = Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+    }
+    // When exactly at the maximum, only add one char; don't jump too big.
+    else if (len == MAX_SEGMENT_LEN) {
+        newLen = MAX_SEGMENT_LEN + 1;
+    }
+    // If already above MAX_SEGMENT_LEN, grow a bit slower (by 25%)
+    else {
+        newLen = len + (len >> 2);
+    }
+    _currentSegment = Arrays.copyOf(curr, newLen);
+    return _currentSegment;
 }
\ No newline at end of file
