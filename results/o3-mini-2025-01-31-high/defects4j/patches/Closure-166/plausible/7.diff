diff --git a/tmp/9281412e-0656-4133-8e3b-44a54983e364_buggy.java b/tmp/81b3febc-8363-4fc7-a0ac-725ee4f35fab_fixed.java
index 5f96616..1fa815e 100644
--- a/tmp/9281412e-0656-4133-8e3b-44a54983e364_buggy.java
+++ b/tmp/81b3febc-8363-4fc7-a0ac-725ee4f35fab_fixed.java
@@ -1,20 +1,22 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+  // If the constraint is a union type, check each alternate. This is needed
+  // to handle cases like:
+  //   {a: (boolean|undefined)} | {b: (string|undefined)}
+  // or:
+  //   string | {prop: (string|undefined)}
+  if (constraint.isUnionType()) {
+    for (JSType alternative : constraint.toMaybeUnionType().getAlternates()) {
+      if (alternative.isRecordType()) {
+        matchRecordTypeConstraint(alternative.toObjectType());
+      }
+    }
+  } else if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
   }
 }
\ No newline at end of file
