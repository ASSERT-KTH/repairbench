diff --git a/tmp/5d26261e-ee45-4cf2-82de-caaa1a415fc1_buggy.java b/tmp/ea037eba-b72c-45f1-9fb8-4d062d48b0cf_fixed.java
index 5f96616..edbd45d 100644
--- a/tmp/5d26261e-ee45-4cf2-82de-caaa1a415fc1_buggy.java
+++ b/tmp/ea037eba-b72c-45f1-9fb8-4d062d48b0cf_fixed.java
@@ -1,20 +1,23 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+  // If the constraint is a union type, examine each alternate.
+  // This covers cases such as:
+  //   {string|{prop: (string|undefined)}}
+  // and
+  //   {{a: (boolean|undefined)}|{b: (string|undefined)}}
+  UnionType union = constraint.toMaybeUnionType();
+  if (union != null) {
+    for (JSType alternate : union.getAlternates()) {
+      if (alternate.isRecordType()) {
+        matchRecordTypeConstraint(alternate.toObjectType());
+      }
+    }
+  } else if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
   }
 }
\ No newline at end of file
