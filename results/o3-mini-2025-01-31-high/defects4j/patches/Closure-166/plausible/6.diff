diff --git a/tmp/fcda426d-677d-4e32-b713-7d32dd671575_buggy.java b/tmp/0e102867-ccbd-4712-adfd-bf50ada3539d_fixed.java
index 5f96616..bedc425 100644
--- a/tmp/fcda426d-677d-4e32-b713-7d32dd671575_buggy.java
+++ b/tmp/0e102867-ccbd-4712-adfd-bf50ada3539d_fixed.java
@@ -1,20 +1,18 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+  // If the constraint is a union type, check each alternate.
+  if (constraint.isUnionType()) {
+    for (JSType alternate : constraint.toMaybeUnionType().getAlternates()) {
+      if (alternate.isRecordType()) {
+        matchRecordTypeConstraint(alternate.toObjectType());
+      }
+    }
+  } else if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
   }
 }
\ No newline at end of file
