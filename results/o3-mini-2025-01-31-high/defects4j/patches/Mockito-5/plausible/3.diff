diff --git a/tmp/b14c6376-37c5-4d90-8521-f022d2e5d9ce_buggy.java b/tmp/27f04954-8a00-416e-9504-81104e0bff17_fixed.java
index 9ac2149..0b48fa1 100644
--- a/tmp/b14c6376-37c5-4d90-8521-f022d2e5d9ce_buggy.java
+++ b/tmp/27f04954-8a00-416e-9504-81104e0bff17_fixed.java
@@ -1,40 +1,29 @@
-    /**
-     * Verify the given ongoing verification data, and confirm that it satisfies the delegate verification mode
-     * before the full duration has passed.
-     *
-     * In practice, this polls the delegate verification mode until it is satisfied. If it is not satisfied once
-     * the full duration has passed, the last error returned by the delegate verification mode will be thrown
-     * here in turn. This may be thrown early if the delegate is unsatisfied and the verification mode is known
-     * to never recover from this situation (e.g. {@link AtMost}).
-     *
-     * If it is satisfied before the full duration has passed, behaviour is dependent on the returnOnSuccess parameter
-     * given in the constructor. If true, this verification mode is immediately satisfied once the delegate is. If
-     * false, this verification mode is not satisfied until the delegate is satisfied and the full time has passed.
-     *
-     * @throws MockitoAssertionError if the delegate verification mode does not succeed before the timeout
-     */
 public void verify(VerificationData data) {
     AssertionError error = null;
 
     timer.start();
     while (timer.isCounting()) {
         try {
             delegate.verify(data);
 
             if (returnOnSuccess) {
                 return;
             } else {
                 error = null;
             }
         } catch (MockitoAssertionError e) {
             error = handleVerifyException(e);
-            }
-            catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {
+        } catch (AssertionError e) {
+            // Instead of directly referencing a JUnit-dependent exception type we check by name.
+            if ("org.mockito.exceptions.verification.junit.ArgumentsAreDifferent".equals(e.getClass().getName())) {
                 error = handleVerifyException(e);
+            } else {
+                throw e;
+            }
         }
     }
 
     if (error != null) {
         throw error;
     }
 }
\ No newline at end of file
