diff --git a/tmp/122df7c9-0b60-42d7-a7f7-0962b3a2b230_buggy.java b/tmp/29a781a8-e985-48fe-b553-29e54cf2fc1b_fixed.java
index 6f24eb6..13eb561 100644
--- a/tmp/122df7c9-0b60-42d7-a7f7-0962b3a2b230_buggy.java
+++ b/tmp/29a781a8-e985-48fe-b553-29e54cf2fc1b_fixed.java
@@ -1,99 +1,89 @@
-  /**
-   * Determines whether the given property is visible in the current context.
-   * @param t The current traversal.
-   * @param getprop The getprop node.
-   */
 private void checkPropertyVisibility(NodeTraversal t,
     Node getprop, Node parent) {
   ObjectType objectType =
       ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
   String propertyName = getprop.getLastChild().getString();
 
   if (objectType != null) {
-      // Is this a normal property access, or are we trying to override
-      // an existing property?
+    // Determine if this is an override assignment.
     boolean isOverride = t.inGlobalScope() &&
         parent.getType() == Token.ASSIGN &&
         parent.getFirstChild() == getprop;
 
-      // Find the lowest property defined on a class with visibility
-      // information.
     if (isOverride) {
       objectType = objectType.getImplicitPrototype();
     }
     JSDocInfo docInfo = null;
+    // Walk the implicit prototype chain to find a definition with a visibility modifier.
     for (; objectType != null;
          objectType = objectType.getImplicitPrototype()) {
       docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
       if (docInfo != null &&
           docInfo.getVisibility() != Visibility.INHERITED) {
         break;
       }
     }
 
     if (objectType == null) {
-        // We couldn't find a visibility modifier; assume it's public.
+      // No visibility modifier found; assume public.
       return;
     }
 
     boolean sameInput =
         t.getInput().getName().equals(docInfo.getSourceName());
     Visibility visibility = docInfo.getVisibility();
     JSType ownerType = normalizeClassType(objectType);
+
     if (isOverride) {
-        // Check an ASSIGN statement that's trying to override a property
-        // on a superclass.
       JSDocInfo overridingInfo = parent.getJSDocInfo();
       Visibility overridingVisibility = overridingInfo == null ?
           Visibility.INHERITED : overridingInfo.getVisibility();
 
-        // Check that (a) the property *can* be overridden, and
-        // (b) that the visibility of the override is the same as the
-        // visibility of the original property.
-        if (visibility == Visibility.PRIVATE && !sameInput) {
+      if (visibility == Visibility.PRIVATE) {
+        // If the overriding property is not explicitly marked as private,
+        // then report a BAD_PRIVATE_PROPERTY_ACCESS error.
+        if (overridingVisibility != Visibility.PRIVATE) {
+          compiler.report(
+              t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,
+                  propertyName,
+                  validator.getReadableJSTypeName(getprop.getFirstChild(), true)));
+        } else if (!sameInput) {
+          // Both properties are marked @private, but the override occurs
+          // in a different file than the original; report a PRIVATE_OVERRIDE.
           compiler.report(
               t.makeError(getprop, PRIVATE_OVERRIDE,
                   objectType.toString()));
+        }
       } else if (overridingVisibility != Visibility.INHERITED &&
           overridingVisibility != visibility) {
         compiler.report(
             t.makeError(getprop, VISIBILITY_MISMATCH,
                 visibility.name(), objectType.toString(),
                 overridingVisibility.name()));
       }
     } else {
       if (sameInput) {
-          // private access is always allowed in the same file.
+        // Private access is allowed in the same file.
         return;
       } else if (visibility == Visibility.PRIVATE &&
           (currentClass == null || ownerType.differsFrom(currentClass))) {
         if (docInfo.isConstructor() &&
             isValidPrivateConstructorAccess(parent)) {
           return;
         }
-
-          // private access is not allowed outside the file from a different
-          // enclosing class.
         compiler.report(
             t.makeError(getprop,
                 BAD_PRIVATE_PROPERTY_ACCESS,
                 propertyName,
-                  validator.getReadableJSTypeName(
-                      getprop.getFirstChild(), true)));
+                validator.getReadableJSTypeName(getprop.getFirstChild(), true)));
       } else if (visibility == Visibility.PROTECTED) {
-          // There are 3 types of legal accesses of a protected property:
-          // 1) Accesses in the same file
-          // 2) Overriding the property in a subclass
-          // 3) Accessing the property from inside a subclass
-          // The first two have already been checked for.
         if (currentClass == null || !currentClass.isSubtype(ownerType)) {
           compiler.report(
               t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,
                   propertyName,
-                    validator.getReadableJSTypeName(
-                        getprop.getFirstChild(), true)));
+                  validator.getReadableJSTypeName(getprop.getFirstChild(), true)));
         }
       }
     }
   }
 }
\ No newline at end of file
