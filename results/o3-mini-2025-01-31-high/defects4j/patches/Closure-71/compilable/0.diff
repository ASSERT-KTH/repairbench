diff --git a/tmp/202491db-7f9d-4b1e-8d81-cfba058af40d_buggy.java b/tmp/10333c8d-892a-4e45-b37c-ddeb78131dc2_fixed.java
index 6f24eb6..f1ffeb3 100644
--- a/tmp/202491db-7f9d-4b1e-8d81-cfba058af40d_buggy.java
+++ b/tmp/10333c8d-892a-4e45-b37c-ddeb78131dc2_fixed.java
@@ -1,99 +1,110 @@
-  /**
-   * Determines whether the given property is visible in the current context.
-   * @param t The current traversal.
-   * @param getprop The getprop node.
-   */
-  private void checkPropertyVisibility(NodeTraversal t,
-      Node getprop, Node parent) {
-    ObjectType objectType =
+private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {
+  ObjectType receiverType =
       ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
   String propertyName = getprop.getLastChild().getString();
-
-    if (objectType != null) {
-      // Is this a normal property access, or are we trying to override
-      // an existing property?
-      boolean isOverride = t.inGlobalScope() &&
-          parent.getType() == Token.ASSIGN &&
-          parent.getFirstChild() == getprop;
-
-      // Find the lowest property defined on a class with visibility
-      // information.
-      if (isOverride) {
-        objectType = objectType.getImplicitPrototype();
+  if (receiverType == null) {
+    return;
   }
+
+  // Determine if this is an assignment.
+  boolean isAssignment = parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop;
+  boolean isOverride = false;
   JSDocInfo docInfo = null;
-      for (; objectType != null;
-           objectType = objectType.getImplicitPrototype()) {
-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
-        if (docInfo != null &&
-            docInfo.getVisibility() != Visibility.INHERITED) {
+  ObjectType overrideOwner = null;
+
+  // Look for an inherited property (on the implicit prototype chain)
+  // that was defined with an explicit visibility.
+  for (ObjectType type = receiverType.getImplicitPrototype();
+       type != null;
+       type = type.getImplicitPrototype()) {
+    docInfo = type.getOwnPropertyJSDocInfo(propertyName);
+    if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {
+      // Only treat it as an override when this is an assignment.
+      if (isAssignment) {
+        isOverride = true;
+        overrideOwner = type;
         break;
       }
     }
+  }
 
-      if (objectType == null) {
-        // We couldn't find a visibility modifier; assume it's public.
+  if (!isOverride) {
+    // Not an override â€“ check for illegal access on the property defined on the receiver itself.
+    ObjectType foundType = null;
+    for (ObjectType type = receiverType; type != null; type = type.getImplicitPrototype()) {
+      docInfo = type.getOwnPropertyJSDocInfo(propertyName);
+      if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {
+        foundType = type;
+        break;
+      }
+    }
+    if (foundType == null) {
+      // No visibility modifier was found; assume the property is public.
       return;
     }
-
-      boolean sameInput =
-          t.getInput().getName().equals(docInfo.getSourceName());
+    boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName());
     Visibility visibility = docInfo.getVisibility();
-      JSType ownerType = normalizeClassType(objectType);
-      if (isOverride) {
-        // Check an ASSIGN statement that's trying to override a property
-        // on a superclass.
-        JSDocInfo overridingInfo = parent.getJSDocInfo();
-        Visibility overridingVisibility = overridingInfo == null ?
-            Visibility.INHERITED : overridingInfo.getVisibility();
-
-        // Check that (a) the property *can* be overridden, and
-        // (b) that the visibility of the override is the same as the
-        // visibility of the original property.
-        if (visibility == Visibility.PRIVATE && !sameInput) {
-          compiler.report(
-              t.makeError(getprop, PRIVATE_OVERRIDE,
-                  objectType.toString()));
-        } else if (overridingVisibility != Visibility.INHERITED &&
-            overridingVisibility != visibility) {
-          compiler.report(
-              t.makeError(getprop, VISIBILITY_MISMATCH,
-                  visibility.name(), objectType.toString(),
-                  overridingVisibility.name()));
-        }
-      } else {
+    JSType ownerType = normalizeClassType(foundType);
     if (sameInput) {
-          // private access is always allowed in the same file.
+      // Private access is allowed within the same file.
       return;
     } else if (visibility == Visibility.PRIVATE &&
                (currentClass == null || ownerType.differsFrom(currentClass))) {
-          if (docInfo.isConstructor() &&
-              isValidPrivateConstructorAccess(parent)) {
+      if (docInfo.isConstructor() && isValidPrivateConstructorAccess(parent)) {
         return;
       }
-
-          // private access is not allowed outside the file from a different
-          // enclosing class.
+      // Illegal private access.
       compiler.report(
           t.makeError(getprop,
               BAD_PRIVATE_PROPERTY_ACCESS,
               propertyName,
-                  validator.getReadableJSTypeName(
-                      getprop.getFirstChild(), true)));
+              validator.getReadableJSTypeName(getprop.getFirstChild(), true)));
     } else if (visibility == Visibility.PROTECTED) {
-          // There are 3 types of legal accesses of a protected property:
-          // 1) Accesses in the same file
-          // 2) Overriding the property in a subclass
-          // 3) Accessing the property from inside a subclass
-          // The first two have already been checked for.
+      // Illegal protected access.
       if (currentClass == null || !currentClass.isSubtype(ownerType)) {
         compiler.report(
             t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,
                 propertyName,
-                    validator.getReadableJSTypeName(
-                        getprop.getFirstChild(), true)));
+                validator.getReadableJSTypeName(getprop.getFirstChild(), true)));
       }
     }
+  } else {
+    // This is an override of an inherited property.
+    boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName());
+    Visibility visibility = docInfo.getVisibility();
+    JSType ownerType = normalizeClassType(overrideOwner);
+    JSDocInfo overridingInfo = parent.getJSDocInfo();
+    Visibility overridingVisibility = (overridingInfo == null)
+        ? Visibility.INHERITED : overridingInfo.getVisibility();
+
+    // When overriding a private property,
+    // the overriding property must explicitly declare (i.e. not be INHERITED)
+    // a visibility that matches.
+    if (visibility == Visibility.PRIVATE && !sameInput) {
+      if (overridingVisibility == Visibility.INHERITED) {
+        // Overriding a private property without an explicit visibility is illegal.
+        compiler.report(
+            t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,
+                propertyName,
+                validator.getReadableJSTypeName(getprop.getFirstChild(), true)));
+      } else if (overridingVisibility != visibility) {
+        compiler.report(
+            t.makeError(getprop, VISIBILITY_MISMATCH,
+                visibility.name(), ownerType.toString(),
+                overridingVisibility.name()));
+      } else {
+        // Overriding a private property with an explicit visibility.
+        compiler.report(
+            t.makeError(getprop, PRIVATE_OVERRIDE,
+                ownerType.toString()));
+      }
+    } else if (overridingVisibility != Visibility.INHERITED &&
+               overridingVisibility != visibility) {
+      // Any other visibility mismatch on an override.
+      compiler.report(
+          t.makeError(getprop, VISIBILITY_MISMATCH,
+              visibility.name(), ownerType.toString(),
+              overridingVisibility.name()));
     }
   }
 }
\ No newline at end of file
