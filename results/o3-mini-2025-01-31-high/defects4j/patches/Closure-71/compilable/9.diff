diff --git a/tmp/983cdf82-ddcd-4a95-a07d-1641499219e8_buggy.java b/tmp/ac8e438b-469c-4bdf-8ab8-8ac4e3fa1cf9_fixed.java
index 6f24eb6..a2f0761 100644
--- a/tmp/983cdf82-ddcd-4a95-a07d-1641499219e8_buggy.java
+++ b/tmp/ac8e438b-469c-4bdf-8ab8-8ac4e3fa1cf9_fixed.java
@@ -1,99 +1,101 @@
-  /**
-   * Determines whether the given property is visible in the current context.
-   * @param t The current traversal.
-   * @param getprop The getprop node.
-   */
 private void checkPropertyVisibility(NodeTraversal t,
     Node getprop, Node parent) {
   ObjectType objectType =
       ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
   String propertyName = getprop.getLastChild().getString();
 
   if (objectType != null) {
-      // Is this a normal property access, or are we trying to override
-      // an existing property?
-      boolean isOverride = t.inGlobalScope() &&
-          parent.getType() == Token.ASSIGN &&
-          parent.getFirstChild() == getprop;
+    // Determine if we are attempting to override an existing property.
+    // (Note: removed the global scope check so that assignments in constructors
+    //  are also handled as overrides.)
+    boolean isOverride =
+        parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop;
 
-      // Find the lowest property defined on a class with visibility
-      // information.
+    // When overriding, check the property on the superclass, not the subtype.
     if (isOverride) {
       objectType = objectType.getImplicitPrototype();
     }
+    // Find the lowest property defined on a class with visibility information.
     JSDocInfo docInfo = null;
     for (; objectType != null;
          objectType = objectType.getImplicitPrototype()) {
       docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
       if (docInfo != null &&
           docInfo.getVisibility() != Visibility.INHERITED) {
         break;
       }
     }
 
     if (objectType == null) {
       // We couldn't find a visibility modifier; assume it's public.
       return;
     }
 
     boolean sameInput =
         t.getInput().getName().equals(docInfo.getSourceName());
     Visibility visibility = docInfo.getVisibility();
     JSType ownerType = normalizeClassType(objectType);
+
     if (isOverride) {
-        // Check an ASSIGN statement that's trying to override a property
-        // on a superclass.
+      // Check an ASSIGN statement that's trying to override a property on a superclass.
       JSDocInfo overridingInfo = parent.getJSDocInfo();
-        Visibility overridingVisibility = overridingInfo == null ?
-            Visibility.INHERITED : overridingInfo.getVisibility();
+      Visibility overridingVisibility =
+          overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();
 
-        // Check that (a) the property *can* be overridden, and
-        // (b) that the visibility of the override is the same as the
-        // visibility of the original property.
+      // For private properties, determine the proper error type.
       if (visibility == Visibility.PRIVATE && !sameInput) {
+        // If the overriding property is not explicitly marked private,
+        // then report a BAD_PRIVATE_PROPERTY_ACCESS error.
+        if (overridingVisibility != Visibility.PRIVATE) {
+          compiler.report(
+              t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,
+                  propertyName,
+                  validator.getReadableJSTypeName(
+                      getprop.getFirstChild(), true)));
+        } else {
+          // Otherwise, report a PRIVATE_OVERRIDE error.
           compiler.report(
               t.makeError(getprop, PRIVATE_OVERRIDE,
                   objectType.toString()));
+        }
       } else if (overridingVisibility != Visibility.INHERITED &&
                  overridingVisibility != visibility) {
         compiler.report(
             t.makeError(getprop, VISIBILITY_MISMATCH,
                 visibility.name(), objectType.toString(),
                 overridingVisibility.name()));
       }
     } else {
       if (sameInput) {
-          // private access is always allowed in the same file.
+        // Private access is always allowed within the same file.
         return;
       } else if (visibility == Visibility.PRIVATE &&
                  (currentClass == null || ownerType.differsFrom(currentClass))) {
-          if (docInfo.isConstructor() &&
-              isValidPrivateConstructorAccess(parent)) {
+        if (docInfo.isConstructor() && isValidPrivateConstructorAccess(parent)) {
           return;
         }
 
-          // private access is not allowed outside the file from a different
-          // enclosing class.
+        // Private access is not allowed outside the file or in an unrelated class.
         compiler.report(
             t.makeError(getprop,
                 BAD_PRIVATE_PROPERTY_ACCESS,
                 propertyName,
                 validator.getReadableJSTypeName(
                     getprop.getFirstChild(), true)));
       } else if (visibility == Visibility.PROTECTED) {
-          // There are 3 types of legal accesses of a protected property:
-          // 1) Accesses in the same file
-          // 2) Overriding the property in a subclass
-          // 3) Accessing the property from inside a subclass
-          // The first two have already been checked for.
+        // Legal accesses for a protected property are:
+        // 1) within the same file,
+        // 2) overriding the property in a subclass, or
+        // 3) accessing it from inside a subclass.
+        // The first two cases have already been checked.
         if (currentClass == null || !currentClass.isSubtype(ownerType)) {
           compiler.report(
               t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,
                   propertyName,
                   validator.getReadableJSTypeName(
                       getprop.getFirstChild(), true)));
         }
       }
     }
   }
 }
\ No newline at end of file
