diff --git a/tmp/ecf223c2-2b1d-4236-94db-a1bbee6a2170_buggy.java b/tmp/b1211fd4-6d26-4a05-9837-003d33d55c13_fixed.java
index fe73b81..77858d4 100644
--- a/tmp/ecf223c2-2b1d-4236-94db-a1bbee6a2170_buggy.java
+++ b/tmp/b1211fd4-6d26-4a05-9837-003d33d55c13_fixed.java
@@ -1,42 +1,21 @@
-    protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)
-    {
+protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context) {
     final String name = type.getName();
-        // 19-Mar-2015: Without context, all we can check are bounds.
     if (context == null) {
-            // And to prevent infinite loops, now need this:
         return _unknownType();
-        } else {
-            // Ok: here's where context might come in handy!
-            /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
-             *   unresolved type variables to handle some cases where bounds
-             *   are enough. Let's hope it does not hide real fail cases.
-             */
+    }
+    // If the type variable already has a binding, return it:
     JavaType actualType = context.findType(name);
     if (actualType != null) {
         return actualType;
     }
-        }
-
-        /* 29-Jan-2010, tatu: We used to throw exception here, if type was
-         *   bound: but the problem is that this can occur for generic "base"
-         *   method, overridden by sub-class. If so, we will want to ignore
-         *   current type (for method) since it will be masked.
-         */
-        Type[] bounds = type.getBounds();
-
-        // With type variables we must use bound information.
-        // Theoretically this gets tricky, as there may be multiple
-        // bounds ("... extends A & B"); and optimally we might
-        // want to choose the best match. Also, bounds are optional;
-        // but here we are lucky in that implicit "Object" is
-        // added as bounds if so.
-        // Either way let's just use the first bound, for now, and
-        // worry about better match later on if there is need.
-
-        /* 29-Jan-2010, tatu: One more problem are recursive types
-         *   (T extends Comparable<T>). Need to add "placeholder"
-         *   for resolution to catch those.
-         */
+    // Add a placeholder to detect (and eventually resolve) any recursive reference
     context._addPlaceholder(name);
-        return _constructType(bounds[0], context);
+    // Get the bounds; by default there is at least the Object bound
+    Type[] bounds = type.getBounds();
+    // Construct a JavaType from the first bound
+    JavaType boundType = _constructType(bounds[0], context);
+    // Now that we have a concrete type, update the placeholder mapping so that
+    // further lookups of this type variable will return the resolved type.
+    context.resolvePlaceholder(name, boundType);
+    return boundType;
 }
\ No newline at end of file
