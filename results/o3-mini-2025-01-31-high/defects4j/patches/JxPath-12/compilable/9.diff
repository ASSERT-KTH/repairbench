diff --git a/tmp/50c73c7a-93af-4169-9ffd-bf77a7c89e3a_buggy.java b/tmp/bcbe3eca-f0ec-4300-b7cf-1c3dd7b8ec9f_fixed.java
index 40f74f7..8d1b31c 100644
--- a/tmp/50c73c7a-93af-4169-9ffd-bf77a7c89e3a_buggy.java
+++ b/tmp/bcbe3eca-f0ec-4300-b7cf-1c3dd7b8ec9f_fixed.java
@@ -1,50 +1,61 @@
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
         if (node.getNodeType() != Node.ELEMENT_NODE) {
             return false;
         }
 
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName testName = nodeNameTest.getNodeName();
-            String namespaceURI = nodeNameTest.getNamespaceURI();
+        // The namespace URI provided by the test â€“ note that an empty string
+        // and a null value should be treated as equivalent.
+        String testNS = nodeNameTest.getNamespaceURI();
         boolean wildcard = nodeNameTest.isWildcard();
         String testPrefix = testName.getPrefix();
         if (wildcard && testPrefix == null) {
             return true;
         }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {
             String nodeNS = DOMNodePointer.getNamespaceURI(node);
-                return equalStrings(namespaceURI, nodeNS);
+            // Treat null and empty string as equivalent:
+            if ((testNS == null || testNS.length() == 0) 
+                && (nodeNS == null || nodeNS.length() == 0)) {
+                return true;
+            }
+            return testNS != null && testNS.equals(nodeNS);
         }
         return false;
     }
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
             case Compiler.NODE_TYPE_NODE :
+                // For a generic node() test, allow all kinds of nodes 
+                // (elements, documents, texts, comments, PIs)
                 return nodeType == Node.ELEMENT_NODE
-                            || nodeType == Node.DOCUMENT_NODE;
+                    || nodeType == Node.DOCUMENT_NODE
+                    || nodeType == Node.TEXT_NODE
+                    || nodeType == Node.CDATA_SECTION_NODE
+                    || nodeType == Node.COMMENT_NODE
+                    || nodeType == Node.PROCESSING_INSTRUCTION_NODE;
             case Compiler.NODE_TYPE_TEXT :
                 return nodeType == Node.CDATA_SECTION_NODE
                     || nodeType == Node.TEXT_NODE;
             case Compiler.NODE_TYPE_COMMENT :
                 return nodeType == Node.COMMENT_NODE;
             case Compiler.NODE_TYPE_PI :
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
         return false;
     }
     if (test instanceof ProcessingInstructionTest) {
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
             return testPI.equals(nodePI);
         }
     }
     return false;
 }
\ No newline at end of file
