diff --git a/tmp/d2432d1b-12ea-47d6-a382-eadf7b7ee86f_buggy.java b/tmp/dc7017f1-2048-4541-9dec-510b1da9942b_fixed.java
index 40f74f7..f2c109d 100644
--- a/tmp/d2432d1b-12ea-47d6-a382-eadf7b7ee86f_buggy.java
+++ b/tmp/dc7017f1-2048-4541-9dec-510b1da9942b_fixed.java
@@ -1,50 +1,58 @@
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
         if (node.getNodeType() != Node.ELEMENT_NODE) {
             return false;
         }
-
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName testName = nodeNameTest.getNodeName();
         String namespaceURI = nodeNameTest.getNamespaceURI();
         boolean wildcard = nodeNameTest.isWildcard();
         String testPrefix = testName.getPrefix();
         if (wildcard && testPrefix == null) {
+            // Unprefixed wildcard should match any element name.
             return true;
         }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+        // Try to retrieve the local part of the node name.
+        String nodeLocalName = DOMNodePointer.getLocalName(node);
+        if (nodeLocalName == null) {
+            // Fallback for non-namespace‚Äêaware DOM implementations:
+            String fullName = node.getNodeName();
+            int colon = fullName.indexOf(':');
+            if (colon != -1) {
+                nodeLocalName = fullName.substring(colon + 1);
+            } else {
+                nodeLocalName = fullName;
+            }
+        }
+        if (wildcard || testName.getName().equals(nodeLocalName)) {
             String nodeNS = DOMNodePointer.getNamespaceURI(node);
             return equalStrings(namespaceURI, nodeNS);
         }
         return false;
     }
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
             case Compiler.NODE_TYPE_NODE:
-                    return nodeType == Node.ELEMENT_NODE
-                            || nodeType == Node.DOCUMENT_NODE;
+                return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE;
             case Compiler.NODE_TYPE_TEXT:
-                    return nodeType == Node.CDATA_SECTION_NODE
-                        || nodeType == Node.TEXT_NODE;
+                return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;
             case Compiler.NODE_TYPE_COMMENT:
                 return nodeType == Node.COMMENT_NODE;
             case Compiler.NODE_TYPE_PI:
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
         return false;
     }
     if (test instanceof ProcessingInstructionTest) {
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
             return testPI.equals(nodePI);
         }
     }
     return false;
 }
\ No newline at end of file
