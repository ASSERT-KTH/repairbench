diff --git a/tmp/30bce823-2d82-4d76-9c4c-5c1356a5da9d_buggy.java b/tmp/eda64615-d37a-4cd8-8667-22687ecedc43_fixed.java
index 40f74f7..23472ca 100644
--- a/tmp/30bce823-2d82-4d76-9c4c-5c1356a5da9d_buggy.java
+++ b/tmp/eda64615-d37a-4cd8-8667-22687ecedc43_fixed.java
@@ -1,50 +1,55 @@
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
         if (node.getNodeType() != Node.ELEMENT_NODE) {
             return false;
         }
-
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName testName = nodeNameTest.getNodeName();
         String namespaceURI = nodeNameTest.getNamespaceURI();
         boolean wildcard = nodeNameTest.isWildcard();
         String testPrefix = testName.getPrefix();
+        // If the test is "*" (with no prefix) then match any element.
         if (wildcard && testPrefix == null) {
             return true;
         }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+        // Get the local name of the node. In some DOMs getLocalName() returns null;
+        // in that case we extract it from the qualified name.
+        String nodeLocalName = DOMNodePointer.getLocalName(node);
+        if (nodeLocalName == null) {
+            String fullName = node.getNodeName();
+            int colon = fullName.indexOf(':');
+            nodeLocalName = (colon == -1) ? fullName : fullName.substring(colon + 1);
+        }
+        // Check if the local name matches (or if it is a wildcard such as "B:*")
+        if (wildcard || testName.getName().equals(nodeLocalName)) {
             String nodeNS = DOMNodePointer.getNamespaceURI(node);
             return equalStrings(namespaceURI, nodeNS);
         }
         return false;
     }
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
             case Compiler.NODE_TYPE_NODE:
-                    return nodeType == Node.ELEMENT_NODE
-                            || nodeType == Node.DOCUMENT_NODE;
+                return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE;
             case Compiler.NODE_TYPE_TEXT:
-                    return nodeType == Node.CDATA_SECTION_NODE
-                        || nodeType == Node.TEXT_NODE;
+                return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;
             case Compiler.NODE_TYPE_COMMENT:
                 return nodeType == Node.COMMENT_NODE;
             case Compiler.NODE_TYPE_PI:
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
         return false;
     }
     if (test instanceof ProcessingInstructionTest) {
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
             return testPI.equals(nodePI);
         }
     }
     return false;
 }
\ No newline at end of file
