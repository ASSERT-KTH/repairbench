diff --git a/tmp/66e5bdcd-f9db-424e-a85b-8052bd479371_buggy.java b/tmp/f38ba11c-f5bf-423e-88ce-7b42f658839f_fixed.java
index 875b31b..d148630 100644
--- a/tmp/66e5bdcd-f9db-424e-a85b-8052bd479371_buggy.java
+++ b/tmp/f38ba11c-f5bf-423e-88ce-7b42f658839f_fixed.java
@@ -1,54 +1,48 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     if (nextLineTabStop >= width)
     {
         // stops infinite loop happening
         nextLineTabStop = width - 1;
     }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // all following lines must be padded with nextLineTabStop space characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
+        // Prepend the padding and strip any extra whitespace from the remainder.
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        // Now, rather than starting at 0 we start after the padding so that the indent is preserved.
+        pos = findWrapPos(text, width, nextLineTabStop);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
