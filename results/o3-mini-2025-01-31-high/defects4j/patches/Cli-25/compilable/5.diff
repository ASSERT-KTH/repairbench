diff --git a/tmp/f2b14f87-10da-4460-bd77-3fc6290bc4f0_buggy.java b/tmp/30d1d271-901d-48e2-9ce0-b67d9114f9df_fixed.java
index 875b31b..7521c98 100644
--- a/tmp/f2b14f87-10da-4460-bd77-3fc6290bc4f0_buggy.java
+++ b/tmp/30d1d271-901d-48e2-9ce0-b67d9114f9df_fixed.java
@@ -1,54 +1,43 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
-        }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
+    // Prevent an infinite loop when the indent is too wide.
+    if (nextLineTabStop >= width) {
         nextLineTabStop = width - 1;
     }
     
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
     final String padding = createPadding(nextLineTabStop);
+    // Trim and prepend the padding so that every line gets the indent.
+    text = text.trim();
+    text = padding + text;
     
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
-            {
-                sb.append(text);
-
-                return sb;
+    while (true) {
+        int pos = findWrapPos(text, width, 0);
+        if (pos == -1) {
+            sb.append(rtrim(text));
+            break;
         }
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
+        // Handle degenerate case where only the indent is present
+        if ((text.length() > width) && (pos == nextLineTabStop - 1)) {
             pos = width;
         }
-
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        text = text.substring(pos).trim();
+        if (text.length() == 0) {
+            break;
         }
+        text = padding + text;
+    }
+    return sb;
 }
\ No newline at end of file
