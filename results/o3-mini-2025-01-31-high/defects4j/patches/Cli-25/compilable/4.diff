diff --git a/tmp/bc5bb0fd-9232-4f3a-916c-2c409c2cb1aa_buggy.java b/tmp/966b3965-ab69-462d-85fe-da16794be362_fixed.java
index 875b31b..6482c86 100644
--- a/tmp/bc5bb0fd-9232-4f3a-916c-2c409c2cb1aa_buggy.java
+++ b/tmp/966b3965-ab69-462d-85fe-da16794be362_fixed.java
@@ -1,54 +1,46 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
+    // If the original text begins with whitespace then we want to preserve that
+    // by using a single space indent on wrapped lines (as for option descriptions),
+    // otherwise use the calculated padding (as for usage texts).
+    boolean preserveLeadingSpace = text.length() > 0 && Character.isWhitespace(text.charAt(0));
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     if (nextLineTabStop >= width)
     {
-            // stops infinite loop happening
+        // stop infinite loop
         nextLineTabStop = width - 1;
     }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // The full padding is used for texts that did not start with a whitespace.
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
-            text = padding + text.substring(pos).trim();
+        // If the original text started with a whitespace (as is the case for option descriptions),
+        // use a single space indent on subsequent wrapped lines; otherwise use the computed padding.
+        text = (preserveLeadingSpace ? " " : padding) + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
         
         if ((text.length() > width) && (pos == nextLineTabStop - 1))
         {
             pos = width;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
