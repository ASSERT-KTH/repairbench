diff --git a/tmp/ea3eb401-ae11-4d79-afe3-7f49f80e2225_buggy.java b/tmp/5964fe62-ed49-416d-972e-b69fbac9f290_fixed.java
index 875b31b..7db97a3 100644
--- a/tmp/ea3eb401-ae11-4d79-afe3-7f49f80e2225_buggy.java
+++ b/tmp/5964fe62-ed49-416d-972e-b69fbac9f290_fixed.java
@@ -1,54 +1,46 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
-    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
+protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
+    if (text == null) {
         return sb;
     }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
     if (nextLineTabStop >= width)
     {
         // stops infinite loop happening
         nextLineTabStop = width - 1;
     }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // Prepend the padding so that even the very first chunk is indented.
     final String padding = createPadding(nextLineTabStop);
+    text = padding + text;
+
+    int pos = findWrapPos(text, width, 0);
+    if (pos == -1)
+    {
+        sb.append(rtrim(text));
+        return sb;
+    }
+    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     while (true)
     {
-            text = padding + text.substring(pos).trim();
+        // Remove the printed part and trim the leftover.
+        text = text.substring(pos).trim();
+        if (text.length() == 0)
+        {
+            return sb;
+        }
+        // Prepend the indent uniformly on every new line.
+        text = padding + text;
         pos = findWrapPos(text, width, 0);
-
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
-            
         if ((text.length() > width) && (pos == nextLineTabStop - 1))
         {
             pos = width;
         }
-
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
