diff --git a/tmp/1416183e-3f8d-474e-89e1-51df292144ca_buggy.java b/tmp/e4aa1237-f1b2-4cb3-a123-da59ec83382c_fixed.java
index 7d7ab59..f345daa 100644
--- a/tmp/1416183e-3f8d-474e-89e1-51df292144ca_buggy.java
+++ b/tmp/e4aa1237-f1b2-4cb3-a123-da59ec83382c_fixed.java
@@ -1,124 +1,96 @@
-  /**
-   * Attempts to minimize the number of explicit exit points in a control
-   * structure to take advantage of the implied exit at the end of the
-   * structure.  This is accomplished by removing redundant statements, and
-   * moving statements following a qualifying IF node into that node.
-   * For example:
-   *
-   * function () {
-   *   if (x) return;
-   *   else blah();
-   *   foo();
-   * }
-   *
-   * becomes:
-   *
-   * function () {
-   *  if (x) ;
-   *  else {
-   *    blah();
-   *    foo();
-   *  }
-   *
-   * @param n The execution node of a parent to inspect.
-   * @param exitType The type of exit to look for.
-   * @param labelName If parent is a label the name of the label to look for,
-   *   null otherwise.
-   * @nullable labelName non-null only for breaks within labels.
-   */
 void tryMinimizeExits(Node n, int exitType, String labelName) {
-
-    // Just an 'exit'.
+  // If this node is an explicit exit and it is not part of a finally block,
+  // remove it.
   if (matchingExitNode(n, exitType, labelName)) {
+    // Check whether n is inside a finally block.
+    boolean isInFinallyBlock = false;
+    for (Node curr = n.getParent(); curr != null; curr = curr.getParent()) {
+      if (curr.isTry() && NodeUtil.hasFinally(curr)) {
+        Node finallyBlock = curr.getLastChild();
+        // Walk up from n to see if it is a descendant of the try's finally block.
+        for (Node iter = n; iter != null; iter = iter.getParent()) {
+          if (iter == finallyBlock) {
+            isInFinallyBlock = true;
+            break;
+          }
+        }
+        if (isInFinallyBlock) {
+          break;
+        }
+      }
+    }
+    if (!isInFinallyBlock) {
       NodeUtil.removeChild(n.getParent(), n);
       compiler.reportCodeChange();
+    }
     return;
   }
 
-    // Just an 'if'.
+  // If this node is an IF, process its then and else blocks.
   if (n.isIf()) {
     Node ifBlock = n.getFirstChild().getNext();
     tryMinimizeExits(ifBlock, exitType, labelName);
     Node elseBlock = ifBlock.getNext();
     if (elseBlock != null) {
       tryMinimizeExits(elseBlock, exitType, labelName);
     }
     return;
   }
 
-    // Just a 'try/catch/finally'.
+  // If this node is a TRY, process its try block and catch block,
+  // but deliberately do not minimize the finally block.
   if (n.isTry()) {
     Node tryBlock = n.getFirstChild();
     tryMinimizeExits(tryBlock, exitType, labelName);
     Node allCatchNodes = NodeUtil.getCatchBlock(n);
     if (NodeUtil.hasCatchHandler(allCatchNodes)) {
       Preconditions.checkState(allCatchNodes.hasOneChild());
       Node catchNode = allCatchNodes.getFirstChild();
       Node catchCodeBlock = catchNode.getLastChild();
       tryMinimizeExits(catchCodeBlock, exitType, labelName);
     }
-      /* Don't try to minimize the exits of finally blocks, as this
-       * can cause problems if it changes the completion type of the finally
-       * block. See ECMA 262 Sections 8.9 & 12.14
-       */
-      if (NodeUtil.hasFinally(n)) {
-        Node finallyBlock = n.getLastChild();
-        tryMinimizeExits(finallyBlock, exitType, labelName);
-      }
+    // Do not descend into the finally block.
+    return;
   }
 
-    // Just a 'label'.
+  // If this node is a LABEL, process its labeled statement.
   if (n.isLabel()) {
     Node labelBlock = n.getLastChild();
     tryMinimizeExits(labelBlock, exitType, labelName);
   }
 
-    // TODO(johnlenz): The last case of SWITCH statement?
+  // TODO(johnlenz): Handle SWITCH statements if necessary.
 
-    // The rest assumes a block with at least one child, bail on anything else.
+  // Only continue if this node is a block with at least one child.
   if (!n.isBlock() || n.getLastChild() == null) {
     return;
   }
 
-    // Multiple if-exits can be converted in a single pass.
-    // Convert "if (blah) break;  if (blah2) break; other_stmt;" to
-    // become "if (blah); else { if (blah2); else { other_stmt; } }"
-    // which will get converted to "if (!blah && !blah2) { other_stmt; }".
+  // Process multiple if-exits.
   for (Node c : n.children()) {
-
-      // An 'if' block to process below.
     if (c.isIf()) {
       Node ifTree = c;
-        Node trueBlock, falseBlock;
+      Node trueBlock = ifTree.getFirstChild().getNext();
+      Node falseBlock = trueBlock.getNext();
+      tryMinimizeIfBlockExits(trueBlock, falseBlock, ifTree, exitType, labelName);
 
-        // First, the true condition block.
-        trueBlock = ifTree.getFirstChild().getNext();
-        falseBlock = trueBlock.getNext();
-        tryMinimizeIfBlockExits(trueBlock, falseBlock,
-            ifTree, exitType, labelName);
-
-        // Now the else block.
-        // The if blocks may have changed, get them again.
+      // The if/else blocks may have been modified, so re-read them.
       trueBlock = ifTree.getFirstChild().getNext();
       falseBlock = trueBlock.getNext();
       if (falseBlock != null) {
-          tryMinimizeIfBlockExits(falseBlock, trueBlock,
-              ifTree, exitType, labelName);
+        tryMinimizeIfBlockExits(falseBlock, trueBlock, ifTree, exitType, labelName);
       }
     }
-
     if (c == n.getLastChild()) {
       break;
     }
   }
 
-    // Now try to minimize the exits of the last child, if it is removed
-    // look at what has become the last child.
+  // Process the last child repeatedly.
   for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {
     tryMinimizeExits(c, exitType, labelName);
-      // If the node is still the last child, we are done.
     if (c == n.getLastChild()) {
       break;
     }
   }
 }
\ No newline at end of file
