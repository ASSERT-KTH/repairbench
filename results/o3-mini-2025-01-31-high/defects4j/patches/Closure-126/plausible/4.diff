diff --git a/tmp/1ce09a10-6e2a-4b72-b15b-56cc8d9fc73f_buggy.java b/tmp/34b43461-0949-4a82-a3e8-b2c95feef2f5_fixed.java
index 7d7ab59..1984a03 100644
--- a/tmp/1ce09a10-6e2a-4b72-b15b-56cc8d9fc73f_buggy.java
+++ b/tmp/34b43461-0949-4a82-a3e8-b2c95feef2f5_fixed.java
@@ -1,124 +1,97 @@
-  /**
-   * Attempts to minimize the number of explicit exit points in a control
-   * structure to take advantage of the implied exit at the end of the
-   * structure.  This is accomplished by removing redundant statements, and
-   * moving statements following a qualifying IF node into that node.
-   * For example:
-   *
-   * function () {
-   *   if (x) return;
-   *   else blah();
-   *   foo();
-   * }
-   *
-   * becomes:
-   *
-   * function () {
-   *  if (x) ;
-   *  else {
-   *    blah();
-   *    foo();
-   *  }
-   *
-   * @param n The execution node of a parent to inspect.
-   * @param exitType The type of exit to look for.
-   * @param labelName If parent is a label the name of the label to look for,
-   *   null otherwise.
-   * @nullable labelName non-null only for breaks within labels.
-   */
 void tryMinimizeExits(Node n, int exitType, String labelName) {
+  // Do not optimize any code that is nested inside a finally block.
+  // This loop checks whether any ancestor of n is the finally block
+  // of a try statement. If so, bail out.
+  for (Node curr = n; curr != null; curr = curr.getParent()) {
+    Node p = curr.getParent();
+    if (p != null && p.isTry() && NodeUtil.hasFinally(p) && p.getLastChild() == curr) {
+      return;
+    }
+  }
 
   // Just an 'exit'.
   if (matchingExitNode(n, exitType, labelName)) {
     NodeUtil.removeChild(n.getParent(), n);
     compiler.reportCodeChange();
     return;
   }
 
   // Just an 'if'.
   if (n.isIf()) {
     Node ifBlock = n.getFirstChild().getNext();
     tryMinimizeExits(ifBlock, exitType, labelName);
     Node elseBlock = ifBlock.getNext();
     if (elseBlock != null) {
       tryMinimizeExits(elseBlock, exitType, labelName);
     }
     return;
   }
 
   // Just a 'try/catch/finally'.
   if (n.isTry()) {
+    // Process the try block.
     Node tryBlock = n.getFirstChild();
     tryMinimizeExits(tryBlock, exitType, labelName);
+    // Process the catch block, if one exists.
     Node allCatchNodes = NodeUtil.getCatchBlock(n);
     if (NodeUtil.hasCatchHandler(allCatchNodes)) {
       Preconditions.checkState(allCatchNodes.hasOneChild());
       Node catchNode = allCatchNodes.getFirstChild();
       Node catchCodeBlock = catchNode.getLastChild();
       tryMinimizeExits(catchCodeBlock, exitType, labelName);
     }
-      /* Don't try to minimize the exits of finally blocks, as this
-       * can cause problems if it changes the completion type of the finally
-       * block. See ECMA 262 Sections 8.9 & 12.14
-       */
-      if (NodeUtil.hasFinally(n)) {
-        Node finallyBlock = n.getLastChild();
-        tryMinimizeExits(finallyBlock, exitType, labelName);
-      }
+    // Do NOT optimize the finally block; leaving it untouched
+    // avoids changing its completion type (ECMA 262 Sections 8.9 & 12.14).
+    return;
   }
 
   // Just a 'label'.
   if (n.isLabel()) {
     Node labelBlock = n.getLastChild();
     tryMinimizeExits(labelBlock, exitType, labelName);
   }
 
-    // TODO(johnlenz): The last case of SWITCH statement?
+  // TODO: Handle SWITCH statements?
 
-    // The rest assumes a block with at least one child, bail on anything else.
+  // The remainder of the function is intended for blocks.
   if (!n.isBlock() || n.getLastChild() == null) {
     return;
   }
 
-    // Multiple if-exits can be converted in a single pass.
-    // Convert "if (blah) break;  if (blah2) break; other_stmt;" to
-    // become "if (blah); else { if (blah2); else { other_stmt; } }"
-    // which will get converted to "if (!blah && !blah2) { other_stmt; }".
+  // Process any sequences of if-exit statements within the block.
+  // For example:
+  //   if (blah) break;
+  //   if (blah2) break;
+  //   other_stmt;
+  // becomes a nested if/else that merges the conditions.
   for (Node c : n.children()) {
-
-      // An 'if' block to process below.
     if (c.isIf()) {
       Node ifTree = c;
       Node trueBlock, falseBlock;
 
-        // First, the true condition block.
+      // Process the "true" branch.
       trueBlock = ifTree.getFirstChild().getNext();
       falseBlock = trueBlock.getNext();
-        tryMinimizeIfBlockExits(trueBlock, falseBlock,
-            ifTree, exitType, labelName);
+      tryMinimizeIfBlockExits(trueBlock, falseBlock, ifTree, exitType, labelName);
 
-        // Now the else block.
-        // The if blocks may have changed, get them again.
+      // Process the "else" branch.
       trueBlock = ifTree.getFirstChild().getNext();
       falseBlock = trueBlock.getNext();
       if (falseBlock != null) {
-          tryMinimizeIfBlockExits(falseBlock, trueBlock,
-              ifTree, exitType, labelName);
+        tryMinimizeIfBlockExits(falseBlock, trueBlock, ifTree, exitType, labelName);
       }
     }
-
     if (c == n.getLastChild()) {
       break;
     }
   }
 
-    // Now try to minimize the exits of the last child, if it is removed
-    // look at what has become the last child.
+  // Then, try again on the last child in case it was removed
+  // (which might expose a new "last child") until no further changes occur.
   for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {
     tryMinimizeExits(c, exitType, labelName);
-      // If the node is still the last child, we are done.
     if (c == n.getLastChild()) {
       break;
     }
   }
 }
\ No newline at end of file
