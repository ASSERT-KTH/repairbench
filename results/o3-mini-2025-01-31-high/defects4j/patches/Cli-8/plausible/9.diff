diff --git a/tmp/7d65eb64-c54a-4edf-abb4-074ad2c984b5_buggy.java b/tmp/0fcf54a4-969a-40e5-a185-d5bf1621a225_fixed.java
index 8e93a5e..caafddb 100644
--- a/tmp/7d65eb64-c54a-4edf-abb4-074ad2c984b5_buggy.java
+++ b/tmp/0fcf54a4-969a-40e5-a185-d5bf1621a225_fixed.java
@@ -1,43 +1,46 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
-                                             int nextLineTabStop, String text)
-    {
+        int nextLineTabStop, String text) {
+    // If the text contains an explicit newline, split and process each part separately.
+    if (text.indexOf(defaultNewLine) != -1) {
+        String[] lines = text.split(java.util.regex.Pattern.quote(defaultNewLine), -1);
+        for (int i = 0; i < lines.length; i++) {
+            if (i > 0) {
+                sb.append(defaultNewLine);
+            }
+            String line = lines[i];
+            // For lines that come after a newline, if padding is desired, prepend it.
+            if (i > 0 && nextLineTabStop > 0 && line.length() > 0) {
+                line = createPadding(nextLineTabStop) + line;
+                // Process the padded line but let any further wrapping use the same pad.
+                renderWrappedText(sb, width, nextLineTabStop, line);
+            } else {
+                // For the first line (or when no padding is required) don't add extra indent.
+                renderWrappedText(sb, width, 0, line);
+            }
+        }
+        return sb;
+    }
+
+    // Now process a single paragraph (one without any newline characters)
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
-
-            if (pos == -1)
-            {
-                sb.append(text);
-
-                return sb;
+    // Subsequent lines should be indented by nextLineTabStop spaces.
+    String indent = createPadding(nextLineTabStop);
+    // Remove the already-printed part, trimming leading/trailing whitespace.
+    text = text.substring(pos).trim();
+    while (text.length() > 0) {
+        // For wrapped lines, the available width is reduced by the indent amount.
+        pos = findWrapPos(text, width - nextLineTabStop, 0);
+        if (pos == -1) {
+            sb.append(indent).append(text);
+            break;
         }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(indent).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        text = text.substring(pos).trim();
     }
+    return sb;
 }
\ No newline at end of file
