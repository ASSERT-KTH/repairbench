diff --git a/tmp/3c83b58a-daea-464e-adda-9667dbfcc297_buggy.java b/tmp/bf7dd11d-cfea-47c1-b415-aee5f6c7593f_fixed.java
index 8e93a5e..5a153fb 100644
--- a/tmp/3c83b58a-daea-464e-adda-9667dbfcc297_buggy.java
+++ b/tmp/bf7dd11d-cfea-47c1-b415-aee5f6c7593f_fixed.java
@@ -1,43 +1,31 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
-    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
-    {
+protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // all following lines must be padded with nextLineTabStop space characters
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
+    while (true) {
+        // Instead of blindly calling trim() (which removes all leading newlines too),
+        // remove only the unwanted leading whitespace but preserve an explicit newline.
+        String remainder = text.substring(pos);
+        if (remainder.startsWith(defaultNewLine)) {
+            // if the wrap position fell on an explicit newline, skip it
+            remainder = remainder.substring(defaultNewLine.length());
+        } else {
+            // otherwise, remove all leading whitespace
+            remainder = remainder.replaceAll("^\\s+", "");
+        }
+        text = padding + remainder;
         pos = findWrapPos(text, width, nextLineTabStop);
-
-            if (pos == -1)
-            {
+        if (pos == -1) {
             sb.append(text);
-
             return sb;
         }
-
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
