diff --git a/tmp/cde884f1-99dd-488d-a89e-34507abb6df2_buggy.java b/tmp/409212f3-d18e-4671-8210-9ac0103f84d4_fixed.java
index 8e93a5e..e47ccd5 100644
--- a/tmp/cde884f1-99dd-488d-a89e-34507abb6df2_buggy.java
+++ b/tmp/409212f3-d18e-4671-8210-9ac0103f84d4_fixed.java
@@ -1,43 +1,44 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
+    // If the text already contains newlines, split and process each line individually.
+    if (text.indexOf(defaultNewLine) >= 0) {
+        // Split on the exact newline sequence.
+        String[] lines = text.split(java.util.regex.Pattern.quote(defaultNewLine), -1);
+        for (int i = 0; i < lines.length; i++) {
+            if (i > 0) {
+                sb.append(defaultNewLine);
+                // For lines after the first, prepend the specified padding.
+                if (nextLineTabStop > 0) {
+                    // Prepend the padding to the current line so that if it wraps, 
+                    // the initial (and all subsequent wrapped lines) will remain indented.
+                    lines[i] = createPadding(nextLineTabStop) + lines[i];
+                }
+            }
+            // Process the individual line. Since it now does not contain newline characters,
+            // the normal wrapping logic applies.
+            renderWrappedText(sb, width, nextLineTabStop, lines[i]);
+        }
+        return sb;
+    }
+
+    // Process a single paragraph (without embedded newlines)
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // For subsequent lines, use the specified padding.
     final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
+    while (true) {
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, nextLineTabStop);
-
-            if (pos == -1)
-            {
+        if (pos == -1) {
             sb.append(text);
-
             return sb;
         }
-
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
