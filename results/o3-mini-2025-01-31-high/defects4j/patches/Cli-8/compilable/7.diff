diff --git a/tmp/ff93085b-4ac3-4fad-b4e2-9f675ba46cd7_buggy.java b/tmp/a2123a1f-45ca-4476-8384-11cf97c60a71_fixed.java
index 8e93a5e..06190d8 100644
--- a/tmp/ff93085b-4ac3-4fad-b4e2-9f675ba46cd7_buggy.java
+++ b/tmp/a2123a1f-45ca-4476-8384-11cf97c60a71_fixed.java
@@ -1,43 +1,48 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
-    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
-    {
+protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {
+    // If the text contains newline characters, process each line separately.
+    if (text.indexOf(defaultNewLine) > -1) {
+        // Split on the newline so that existing newlines are preserved.
+        String[] lines = text.split(java.util.regex.Pattern.quote(defaultNewLine), -1);
+        for (int i = 0; i < lines.length; i++) {
+            if (i > 0) {
+                // Start a new line; if a padding is requested for subsequent lines, add it.
+                sb.append(defaultNewLine);
+                if (nextLineTabStop > 0) {
+                    sb.append(createPadding(nextLineTabStop));
+                }
+            }
+            // Process this individual line (which does not contain a newline)
+            renderWrappedText(sb, width, nextLineTabStop, lines[i]);
+        }
+        return sb;
+    }
+    
+    // Otherwise, treat the text as one paragraph and wrap it.
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
+    
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // Compute the padding string for subsequent lines.
     final String padding = createPadding(nextLineTabStop);
+    // Remove the already processed portion.
+    text = text.substring(pos).trim();
     
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
+    while (!text.isEmpty()) {
+        // Prepend padding to the next line if needed.
+        if (nextLineTabStop > 0) {
+            text = padding + text;
+        }
         pos = findWrapPos(text, width, nextLineTabStop);
-
-            if (pos == -1)
-            {
+        if (pos == -1) {
             sb.append(text);
-
             return sb;
         }
-
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        text = text.substring(pos).trim();
     }
+    return sb;
 }
\ No newline at end of file
