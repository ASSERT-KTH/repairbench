diff --git a/tmp/2f8f7747-d573-4cb1-8731-354963d74f16_buggy.java b/tmp/693de133-1b1a-432b-b0bb-a7ba788dbea1_fixed.java
index 8e93a5e..8ef9dac 100644
--- a/tmp/2f8f7747-d573-4cb1-8731-354963d74f16_buggy.java
+++ b/tmp/693de133-1b1a-432b-b0bb-a7ba788dbea1_fixed.java
@@ -1,43 +1,64 @@
 /**
  * <p>Render the specified text and return the rendered Options
  * in a StringBuffer.</p>
  *
+ * <p>This fixed version first splits the input text on new‚Äêlines so that
+ * already separated paragraphs are preserved. For each paragraph it then
+ * wraps the text as needed. If a nonzero nextLineTabStop is specified, all
+ * lines after the first of each paragraph are padded accordingly.</p>
+ *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                            int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
+    // Use the formatter's new-line string.
+    String nl = defaultNewLine;
+    // Split the input text on newlines (preserving empty trailing parts)
+    String[] lines = text.split("\\r?\\n", -1);
+    for (int i = 0; i < lines.length; i++) {
+        if (i > 0) {
+            sb.append(nl);
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
-
-            if (pos == -1)
-            {
-                sb.append(text);
-
-                return sb;
+        String line = lines[i];
+        // If the line is empty, nothing more to do.
+        if (line.length() == 0) {
+            continue;
+        }
+        // If this is a "short" line that fits in the allowed width,
+        // simply output it (adding padding if needed for non-first paragraphs).
+        if (line.length() <= width) {
+            if (i > 0 && nextLineTabStop > 0) {
+                sb.append(createPadding(nextLineTabStop));
+            }
+            sb.append(line);
+        } else {
+            // For a long line, we wrap it.
+            // For paragraphs beyond the first, we want to add padding
+            // to all wrapped lines.
+            String segment = (i > 0 && nextLineTabStop > 0)
+                             ? line = createPadding(nextLineTabStop) + line
+                             : line;
+            while (segment.length() > width) {
+                // The first call uses an indent of 0 for the very first paragraph,
+                // otherwise use nextLineTabStop.
+                int indent = (i == 0) ? 0 : nextLineTabStop;
+                int pos = findWrapPos(segment, width, indent);
+                if (pos == -1) {
+                    break;
                 }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+                sb.append(rtrim(segment.substring(0, pos)));
+                sb.append(nl);
+                // Prepend padding for every subsequent line.
+                segment = createPadding(nextLineTabStop) + segment.substring(pos).trim();
             }
+            sb.append(segment);
+        }
+    }
+    return sb;
 }
\ No newline at end of file
