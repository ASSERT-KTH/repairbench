diff --git a/tmp/ae8d3730-b093-4ea0-a759-efb8ef2be02e_buggy.java b/tmp/331205cb-67e6-438a-9cf0-4f4041dd4ec8_fixed.java
index 8e93a5e..00c6662 100644
--- a/tmp/ae8d3730-b093-4ea0-a759-efb8ef2be02e_buggy.java
+++ b/tmp/331205cb-67e6-438a-9cf0-4f4041dd4ec8_fixed.java
@@ -1,43 +1,59 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
-    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
-    {
+protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {
+    // If the text contains any newline characters, process each block separately.
+    if (text.indexOf(defaultNewLine) != -1) {
+        // Use a tokenizer that preserves the newline delimiters.
+        StringTokenizer tok = new StringTokenizer(text, defaultNewLine, true);
+        // 'bol' flag indicates beginning‐of‐line.
+        // For the very first line we do not indent,
+        // but for any line that immediately follows an explicit newline, we do.
+        boolean beginningOfLine = true;
+        while (tok.hasMoreTokens()) {
+            String token = tok.nextToken();
+            if (token.equals(defaultNewLine)) {
+                sb.append(defaultNewLine);
+                beginningOfLine = true;
+            } else {
+                // Determine the indent for this block:
+                // If we're at the beginning of a line and this is not the very first line, apply the extra padding.
+                int indent = (beginningOfLine && sb.length() > 0) ? nextLineTabStop : 0;
+                String line = token;
+                if (indent > 0) {
+                    // Remove any existing leading spaces and add the proper padding.
+                    line = createPadding(indent) + line.trim();
+                }
+                // Now word-wrap this block just like a normal paragraph.
+                while (true) {
+                    int pos = findWrapPos(line, width, indent);
+                    if (pos == -1) {
+                        sb.append(rtrim(line));
+                        break;
+                    }
+                    sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);
+                    // For subsequent wrapped lines, always use nextLineTabStop.
+                    line = createPadding(nextLineTabStop) + line.substring(pos).trim();
+                    indent = nextLineTabStop;
+                }
+                beginningOfLine = false;
+            }
+        }
+        return sb;
+    }
+
+    // Otherwise, process the text as a single paragraph.
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
     final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
+    while (true) {
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, nextLineTabStop);
-
-            if (pos == -1)
-            {
+        if (pos == -1) {
             sb.append(text);
-
             return sb;
         }
-
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
