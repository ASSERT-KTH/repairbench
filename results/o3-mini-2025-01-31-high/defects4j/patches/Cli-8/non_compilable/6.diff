diff --git a/tmp/fd0789cf-8e32-4d66-83c9-55f5cffa569d_buggy.java b/tmp/968bbc0b-1edf-4cf7-bf81-22092e6b1e7a_fixed.java
index 8e93a5e..526ae6f 100644
--- a/tmp/fd0789cf-8e32-4d66-83c9-55f5cffa569d_buggy.java
+++ b/tmp/968bbc0b-1edf-4cf7-bf81-22092e6b1e7a_fixed.java
@@ -1,43 +1,63 @@
 /**
  * <p>Render the specified text and return the rendered Options
  * in a StringBuffer.</p>
  *
+ * <p>This fixed version first checks for embedded newlines and, if found,
+ * splits the text so as to preserve them. When re‐wrapping a “continued”
+ * line (one that comes after a newline) the preset indent (nextLineTabStop)
+ * is applied from the start.</p>
+ *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
+    // If the text contains an explicit newline, process each part separately.
+    if (text.indexOf(defaultNewLine) > -1) {
+        // Tokenize keeping the newline delimiters.
+        StringTokenizer st = new StringTokenizer(text, defaultNewLine, true);
+        // After a newline the next text token should be indented (if nextLineTabStop > 0).
+        boolean padNext = false;
+        while (st.hasMoreTokens()) {
+            String token = st.nextToken();
+            if (token.equals(defaultNewLine)) {
+                sb.append(token);
+                padNext = true;
+            } else {
+                if (padNext && nextLineTabStop > 0 && token.length() > 0) {
+                    token = createPadding(nextLineTabStop) + token;
+                }
+                // Recursively wrap the token (which now does not contain any newlines).
+                renderWrappedText(sb, width, nextLineTabStop, token);
+                padNext = false;
+            }
+        }
+        return sb;
+    }
 
-        if (pos == -1)
-        {
+    // Determine whether this line is already “continued” (padded) so that
+    // the available width should be computed relative to nextLineTabStop.
+    boolean isPadded = nextLineTabStop > 0 && text.startsWith(createPadding(nextLineTabStop));
+    int pos = isPadded ? findWrapPos(text, width, nextLineTabStop)
+                       : findWrapPos(text, width, 0);
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
     final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
+    while (true) {
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, nextLineTabStop);
-
-            if (pos == -1)
-            {
+        if (pos == -1) {
             sb.append(text);
-
             return sb;
         }
-
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
