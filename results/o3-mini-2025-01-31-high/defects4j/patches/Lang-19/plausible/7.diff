diff --git a/tmp/d5c2d978-cbb3-4f47-ac42-f8bc8c037a99_buggy.java b/tmp/f76f16d1-a771-4be1-a9c0-d2131a6bad5f_fixed.java
index 72a422c..4a366e2 100644
--- a/tmp/d5c2d978-cbb3-4f47-ac42-f8bc8c037a99_buggy.java
+++ b/tmp/f76f16d1-a771-4be1-a9c0-d2131a6bad5f_fixed.java
@@ -1,51 +1,71 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
-            int start = index + 2;
+    if (input.charAt(index) == '&' && index + 1 < seqEnd && input.charAt(index + 1) == '#') {
+        int pos = index + 2; // position right after "&#"
+        if (pos >= seqEnd) {
+            return 0;
+        }
         boolean isHex = false;
-
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+        char currentChar = input.charAt(pos);
+        if (currentChar == 'x' || currentChar == 'X') {
             isHex = true;
-
-                // Check there's more than just an x after the &#
+            pos++;
+            if (pos >= seqEnd) {
+                return 0;
             }
-
-            int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
         }
-
+        int startDigits = pos;
+        // Scan for valid digits (hex or decimal) until a non-digit is encountered.
+        while (pos < seqEnd) {
+            char ch = input.charAt(pos);
+            if (isHex) {
+                if ((ch >= '0' && ch <= '9') ||
+                    (ch >= 'a' && ch <= 'f') ||
+                    (ch >= 'A' && ch <= 'F')) {
+                    pos++;
+                } else {
+                    break;
+                }
+            } else {
+                if (Character.isDigit(ch)) {
+                    pos++;
+                } else {
+                    break;
+                }
+            }
+        }
+        // No digits found means it's not a valid numeric entity.
+        if (pos == startDigits) {
+            return 0;
+        }
+        // Optionally, if a semicolon is present, consume it.
+        boolean semicolonFound = false;
+        if (pos < seqEnd && input.charAt(pos) == ';') {
+            semicolonFound = true;
+            pos++;
+        }
+        // Determine the numeric part substring.
+        String numStr = input.subSequence(startDigits, semicolonFound ? pos - 1 : pos).toString();
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            entityValue = isHex ? Integer.parseInt(numStr, 16)
+                                : Integer.parseInt(numStr, 10);
         } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            System.err.println("FAIL: " + numStr + "[" + startDigits + "][" + pos + "]");
             return 0;
         }
-
         if (entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
-
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        return pos - index;
     }
     return 0;
 }
\ No newline at end of file
