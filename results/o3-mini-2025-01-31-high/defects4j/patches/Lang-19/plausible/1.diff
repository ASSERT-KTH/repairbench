diff --git a/tmp/2fa5e3b3-63e5-47e7-a77e-0458fcb9ec85_buggy.java b/tmp/acf07c56-3ebc-40e0-b417-7f1c6ffe3164_fixed.java
index 72a422c..d70b4e5 100644
--- a/tmp/2fa5e3b3-63e5-47e7-a77e-0458fcb9ec85_buggy.java
+++ b/tmp/acf07c56-3ebc-40e0-b417-7f1c6ffe3164_fixed.java
@@ -1,51 +1,80 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
-            int start = index + 2;
+        int pos = index + 2;
         boolean isHex = false;
 
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+        // Check for an optional 'x' or 'X'
+        if (pos < seqEnd) {
+            char c = input.charAt(pos);
+            if (c == 'x' || c == 'X') {
                 isHex = true;
+                pos++;
+            }
+        } else {
+            return 0;
+        }
+
+        // If no characters remain after "&#" (or "&#x"), nothing to translate.
+        if (pos >= seqEnd) {
+            return 0;
+        }
+
+        // Save the starting position of the numeric part.
+        int digitStart = pos;
+
+        // Consume every digit (hex or decimal) until a non-digit character or a semicolon is found.
+        while (pos < seqEnd) {
+            char currentChar = input.charAt(pos);
+            if (currentChar == ';') {
+                break;
+            }
+            if (isHex) {
+                if (!((currentChar >= '0' && currentChar <= '9') ||
+                      (currentChar >= 'a' && currentChar <= 'f') ||
+                      (currentChar >= 'A' && currentChar <= 'F'))) {
+                    break;
+                }
+            } else {
+                if (!(currentChar >= '0' && currentChar <= '9')) {
+                    break;
+                }
+            }
+            pos++;
+        }
 
-                // Check there's more than just an x after the &#
+        // If no digits were found, this is not a valid entity.
+        if (pos == digitStart) {
+            return 0;
         }
 
-            int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
+        // Optionally consume a trailing semicolon.
+        if (pos < seqEnd && input.charAt(pos) == ';') {
+            pos++;
         }
 
+        // Determine the end of the numeric part (without the semicolon if it was consumed).
+        int endOfNumber = (pos > digitStart && input.charAt(pos - 1) == ';') ? pos - 1 : pos;
+
+        // Parse the numerical value.
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            String number = input.subSequence(digitStart, endOfNumber).toString();
+            entityValue = isHex ? Integer.parseInt(number, 16) : Integer.parseInt(number, 10);
         } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
 
+        // Output the translated character (or surrogate pair).
         if (entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
-
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        return pos - index;
     }
     return 0;
 }
\ No newline at end of file
