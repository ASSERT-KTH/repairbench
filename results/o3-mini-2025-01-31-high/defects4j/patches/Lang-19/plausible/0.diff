diff --git a/tmp/3b18304d-c77b-41b5-8d4d-8c681558d0cf_buggy.java b/tmp/b9a1ca5a-f6ad-4287-b419-df8785b277e6_fixed.java
index 72a422c..21f2e48 100644
--- a/tmp/3b18304d-c77b-41b5-8d4d-8c681558d0cf_buggy.java
+++ b/tmp/b9a1ca5a-f6ad-4287-b419-df8785b277e6_fixed.java
@@ -1,51 +1,59 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
-            int start = index + 2;
+    // Must have at least two characters: '&' and '#'
+    if (index + 1 >= seqEnd || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
+    int i = index + 2;
     boolean isHex = false;
-
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+    // Check if it is a hex entity (i.e. starts with "&#x" or "&#X")
+    if (i < seqEnd) {
+        char ch = input.charAt(i);
+        if (ch == 'x' || ch == 'X') {
             isHex = true;
-
-                // Check there's more than just an x after the &#
+            i++;
         }
-
-            int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
+    } else {
+        return 0;
     }
-
+    int digitStart = i;
+    // Consume all valid digits for the given numeral system.
+    while (i < seqEnd) {
+        char c = input.charAt(i);
+        if (isHex ? (Character.digit(c, 16) != -1) : Character.isDigit(c)) {
+            i++;
+        } else {
+            break;
+        }
+    }
+    // If no digits were found, it is not a valid entity.
+    if (i == digitStart) {
+        return 0;
+    }
+    // Optionally consume a trailing semicolon if present.
+    boolean hasSemicolon = false;
+    if (i < seqEnd && input.charAt(i) == ';') {
+        hasSemicolon = true;
+        i++;
+    }
+    // Extract the numeric part (without the optional semicolon).
+    String numberStr = input.subSequence(digitStart, hasSemicolon ? i - 1 : i).toString();
     int entityValue;
     try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+        entityValue = isHex ? Integer.parseInt(numberStr, 16) : Integer.parseInt(numberStr, 10);
     } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+        System.err.println("FAIL: " + numberStr);
         return 0;
     }
-
+    // Write out the corresponding character(s).
     if (entityValue > 0xFFFF) {
         char[] chrs = Character.toChars(entityValue);
         out.write(chrs[0]);
         out.write(chrs[1]);
     } else {
         out.write(entityValue);
     }
-
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
-        }
-        return 0;
+    // Return the number of characters consumed.
+    return i - index;
 }
\ No newline at end of file
