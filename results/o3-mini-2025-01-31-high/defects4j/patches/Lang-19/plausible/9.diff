diff --git a/tmp/83c14a8c-1b99-4e38-9e2d-9de724995589_buggy.java b/tmp/b825a2c9-af2f-4614-b990-9a137ec3ea39_fixed.java
index 72a422c..3e1f044 100644
--- a/tmp/83c14a8c-1b99-4e38-9e2d-9de724995589_buggy.java
+++ b/tmp/b825a2c9-af2f-4614-b990-9a137ec3ea39_fixed.java
@@ -1,51 +1,59 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
+    final int seqEnd = input.length();
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
-            int start = index + 2;
+        int pos = index + 2;
         boolean isHex = false;
-
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+        // Check if there is an 'x' or 'X' to indicate hexadecimal.
+        if (pos < seqEnd) {
+            char ch = input.charAt(pos);
+            if (ch == 'x' || ch == 'X') {
                 isHex = true;
-
-                // Check there's more than just an x after the &#
+                pos++;
             }
-
-            int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
         }
-
+        // Remember where the digits start.
+        int digitsStart = pos;
+        // Read as many valid digits as possible.
+        while (pos < seqEnd) {
+            char ch = input.charAt(pos);
+            if (isHex ? ((ch >= '0' && ch <= '9')
+                        || (ch >= 'a' && ch <= 'f')
+                        || (ch >= 'A' && ch <= 'F'))
+                      : (ch >= '0' && ch <= '9')) {
+                pos++;
+            } else {
+                break;
+            }
+        }
+        // If no digits were found, do not translate.
+        if (pos == digitsStart) {
+            return 0;
+        }
+        // Optionally, allow a trailing ';'
+        boolean semicolonPresent = pos < seqEnd && input.charAt(pos) == ';';
+        if (semicolonPresent) {
+            pos++;
+        }
+        // The numeric part is the substring from digitsStart to (pos - 1 if ; was present, else pos).
+        int numberEnd = semicolonPresent ? pos - 1 : pos;
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            String numberStr = input.subSequence(digitsStart, numberEnd).toString();
+            entityValue = isHex ? Integer.parseInt(numberStr, 16)
+                                : Integer.parseInt(numberStr, 10);
         } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
-
+        // Write the character(s) represented by the Unicode code point.
         if (entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
-
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        return pos - index;
     }
     return 0;
 }
\ No newline at end of file
