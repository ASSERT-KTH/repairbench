diff --git a/tmp/3b632388-3590-4432-bdc5-8135a8385c04_buggy.java b/tmp/1065d459-03c7-4d5c-b43e-f789594bf01c_fixed.java
index 72a422c..e8f9103 100644
--- a/tmp/3b632388-3590-4432-bdc5-8135a8385c04_buggy.java
+++ b/tmp/1065d459-03c7-4d5c-b43e-f789594bf01c_fixed.java
@@ -1,51 +1,59 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
-            int start = index + 2;
+        int pos = index + 2;
         boolean isHex = false;
-
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+        if (pos < seqEnd) {
+            char ch = input.charAt(pos);
+            if (ch == 'x' || ch == 'X') {
                 isHex = true;
-
-                // Check there's more than just an x after the &#
+                pos++;
             }
-
-            int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
         }
-
+        int startDigits = pos;
+        // Scan as many valid digits as possible for the given radix.
+        while (pos < seqEnd) {
+            char ch = input.charAt(pos);
+            if (isHex
+                ? ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F'))
+                : (ch >= '0' && ch <= '9')) {
+                pos++;
+            } else {
+                break;
+            }
+        }
+        // If no digits were found, then it's not a valid numeric entity.
+        if (pos == startDigits) {
+            return 0;
+        }
+        // Optionally, if there's a trailing semicolon, consume it.
+        if (pos < seqEnd && input.charAt(pos) == ';') {
+            pos++;
+        }
+        // Get the numeric part (without the semicolon if it was present).
+        String number = (pos > startDigits && input.charAt(pos - 1) == ';')
+                        ? input.subSequence(startDigits, pos - 1).toString()
+                        : input.subSequence(startDigits, pos).toString();
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            entityValue = isHex ? Integer.parseInt(number, 16) : Integer.parseInt(number, 10);
         } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
-
         if (entityValue > 0xFFFF) {
-                char[] chrs = Character.toChars(entityValue);
-                out.write(chrs[0]);
-                out.write(chrs[1]);
+            // Write high surrogate and low surrogate.
+            for (char c : Character.toChars(entityValue)) {
+                out.write(c);
+            }
         } else {
             out.write(entityValue);
         }
-
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // Return the number of characters consumed.
+        return pos - index;
     }
     return 0;
 }
\ No newline at end of file
