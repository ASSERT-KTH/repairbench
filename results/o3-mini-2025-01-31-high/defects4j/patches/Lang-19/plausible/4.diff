diff --git a/tmp/451ee9ac-b1a5-46c5-ab9c-97beacd2007c_buggy.java b/tmp/69bc08cd-b46e-4c36-a0ce-732b1e23b291_fixed.java
index 72a422c..9b1b5a2 100644
--- a/tmp/451ee9ac-b1a5-46c5-ab9c-97beacd2007c_buggy.java
+++ b/tmp/69bc08cd-b46e-4c36-a0ce-732b1e23b291_fixed.java
@@ -1,51 +1,76 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
-            int start = index + 2;
+    final int seqEnd = input.length();
+    if (input.charAt(index) != '&' || index + 1 >= seqEnd || input.charAt(index + 1) != '#') {
+        return 0;
+    }
+    int start = index + 2; // start of the numeric part
+    if (start >= seqEnd) {
+        return 0;
+    }
     boolean isHex = false;
-
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+    char potentialHex = input.charAt(start);
+    if (potentialHex == 'x' || potentialHex == 'X') {
         isHex = true;
-
-                // Check there's more than just an x after the &#
+        start++;
+        if (start >= seqEnd) {
+            return 0;
         }
-
-            int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
+    }
+    // Scan valid digits according to the radix (hex or decimal).
+    int pos = start;
+    if (isHex) {
+        while (pos < seqEnd) {
+            char c = input.charAt(pos);
+            if ((c >= '0' && c <= '9') ||
+                (c >= 'a' && c <= 'f') ||
+                (c >= 'A' && c <= 'F')) {
+                pos++;
+            } else {
+                break;
+            }
+        }
+    } else {
+        while (pos < seqEnd) {
+            char c = input.charAt(pos);
+            if (c >= '0' && c <= '9') {
+                pos++;
+            } else {
+                break;
+            }
+        }
+    }
+    // If no digits were found, it's not a valid entity.
+    if (pos == start) {
+        return 0;
+    }
+    // Optionally consume a trailing semicolon.
+    boolean semi = false;
+    if (pos < seqEnd && input.charAt(pos) == ';') {
+        semi = true;
+        pos++;
     }
     
+    // Obtain the number string (without the semicolon if it was present).
+    String numberStr = input.subSequence(start, pos - (semi ? 1 : 0)).toString();
     int entityValue;
     try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+        entityValue = Integer.parseInt(numberStr, isHex ? 16 : 10);
     } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+        System.err.println("FAIL: " + numberStr + " [" + start + "][" + (pos - (semi ? 1 : 0)) + "]");
         return 0;
     }
     
     if (entityValue > 0xFFFF) {
         char[] chrs = Character.toChars(entityValue);
         out.write(chrs[0]);
         out.write(chrs[1]);
     } else {
         out.write(entityValue);
     }
     
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
-        }
-        return 0;
+    return pos - index;
 }
\ No newline at end of file
