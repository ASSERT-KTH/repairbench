diff --git a/tmp/808caabe-05a2-4b8a-a735-835de440e85f_buggy.java b/tmp/f5df9dca-ae1b-4dd5-b424-7557bd083728_fixed.java
index 72a422c..872a41e 100644
--- a/tmp/808caabe-05a2-4b8a-a735-835de440e85f_buggy.java
+++ b/tmp/f5df9dca-ae1b-4dd5-b424-7557bd083728_fixed.java
@@ -1,51 +1,66 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
-
+        if (start < seqEnd) {
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
-                start++;
                 isHex = true;
-
-                // Check there's more than just an x after the &#
+                start++;
             }
-
-            int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
+        } else {
+            return 0;
         }
-
+        if (start >= seqEnd) {
+            return 0;
+        }
+        int pos = start;
+        // Consume all valid digits (hex or decimal)
+        while (pos < seqEnd) {
+            char current = input.charAt(pos);
+            if (isHex) {
+                if (!((current >= '0' && current <= '9')
+                        || (current >= 'a' && current <= 'f')
+                        || (current >= 'A' && current <= 'F'))) {
+                    break;
+                }
+            } else {
+                if (!Character.isDigit(current)) {
+                    break;
+                }
+            }
+            pos++;
+        }
+        // No digits found? Then it's not a valid numeric entity.
+        if (pos == start) {
+            return 0;
+        }
+        // Optionally, if there is a semicolon, include it.
+        boolean semicolon = false;
+        if (pos < seqEnd && input.charAt(pos) == ';') {
+            semicolon = true;
+            pos++;
+        }
+        // Parse the entity value from the digits found.
+        String number = input.subSequence(start, pos - (semicolon ? 1 : 0)).toString();
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            entityValue = isHex ? Integer.parseInt(number, 16) : Integer.parseInt(number, 10);
         } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            System.err.println("FAIL: " + number + "[" + start + "][" + (semicolon ? pos - 1 : pos) + "]");
             return 0;
         }
-
+        // Write the character(s) for the entity value.
         if (entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
-
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        return pos - index;
     }
     return 0;
 }
\ No newline at end of file
