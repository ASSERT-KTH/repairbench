diff --git a/tmp/1a4a66b1-086f-4573-9a71-86a0ce1d40a3_buggy.java b/tmp/eca18896-6934-4c9e-b206-ccb697404118_fixed.java
index 72a422c..b138c9a 100644
--- a/tmp/1a4a66b1-086f-4573-9a71-86a0ce1d40a3_buggy.java
+++ b/tmp/eca18896-6934-4c9e-b206-ccb697404118_fixed.java
@@ -1,51 +1,73 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
-            int start = index + 2;
+    // Must start with '&#'
+    if (input.charAt(index) != '&' || index >= seqEnd - 1 || input.charAt(index + 1) != '#') {
+        return 0;
+    }
+    int pos = index + 2; // position just after "&#"
     boolean isHex = false;
-
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+    if (pos < seqEnd) {
+        char ch = input.charAt(pos);
+        if (ch == 'x' || ch == 'X') {
             isHex = true;
+            pos++;
+        }
+    } else {
+        return 0;
+    }
     
-                // Check there's more than just an x after the &#
+    // Remember where the digits start.
+    int numStart = pos;
+    if (numStart >= seqEnd) {
+        return 0;
     }
     
-            int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
+    // Scan as many valid digits as possible.
+    // We stop when we hit a semicolon (which we do not consume here)
+    // or when the next character is not a valid digit in this numeral system.
+    while (pos < seqEnd) {
+        char c = input.charAt(pos);
+        if (c == ';') {
+            break;
+        }
+        boolean isDigit = isHex
+            ? ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))
+            : (c >= '0' && c <= '9');
+        if (!isDigit) {
+            break;
+        }
+        pos++;
     }
     
+    // If no digits were found, then itâ€™s not a valid entity.
+    if (pos == numStart) {
+        return 0;
+    }
+    
+    // Check for a semicolon terminator.
+    boolean hasSemicolon = pos < seqEnd && input.charAt(pos) == ';';
+    
+    // Convert the numeric string to a value.
+    String numberStr = input.subSequence(numStart, pos).toString();
     int entityValue;
     try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+        entityValue = isHex ? Integer.parseInt(numberStr, 16) : Integer.parseInt(numberStr, 10);
     } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+        System.err.println("FAIL: " + numberStr + "[" + numStart + "][" + pos + "]");
         return 0;
     }
     
+    // Write out the decoded character(s)
     if (entityValue > 0xFFFF) {
         char[] chrs = Character.toChars(entityValue);
         out.write(chrs[0]);
         out.write(chrs[1]);
     } else {
         out.write(entityValue);
     }
     
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
-        }
-        return 0;
+    // Return the number of characters consumed:
+    // if there was a semicolon, include it; otherwise, just the digits.
+    return hasSemicolon ? (pos + 1) - index : pos - index;
 }
\ No newline at end of file
