diff --git a/tmp/b5692906-1637-4489-8a60-3e4366e1eb0a_buggy.java b/tmp/3b16464e-0c9c-4cd4-8b14-2453906f23a7_fixed.java
index f95e529..238373b 100644
--- a/tmp/b5692906-1637-4489-8a60-3e4366e1eb0a_buggy.java
+++ b/tmp/3b16464e-0c9c-4cd4-8b14-2453906f23a7_fixed.java
@@ -1,165 +1,136 @@
 /** {@inheritDoc} */
 @Override
 protected UnivariatePointValuePair doOptimize() {
     final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
     final double lo = getMin();
     final double mid = getStartValue();
     final double hi = getMax();
 
     // Optional additional convergence criteria.
-        final ConvergenceChecker<UnivariatePointValuePair> checker
-            = getConvergenceChecker();
+    final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker();
 
     double a;
     double b;
     if (lo < hi) {
         a = lo;
         b = hi;
     } else {
         a = hi;
         b = lo;
     }
 
     double x = mid;
     double v = x;
     double w = x;
     double d = 0;
     double e = 0;
     double fx = computeObjectiveValue(x);
     if (!isMinim) {
         fx = -fx;
     }
     double fv = fx;
     double fw = fx;
 
-        UnivariatePointValuePair previous = null;
-        UnivariatePointValuePair current
-            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+    UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+    UnivariatePointValuePair previous = current;
 
     int iter = 0;
     while (true) {
         final double m = 0.5 * (a + b);
         final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
         final double tol2 = 2 * tol1;
 
-            // Default stopping criterion.
-            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
-            if (!stop) {
+        // Stopping criterion based on x (the best so far)
+        if (FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)) {
+            return current;
+        }
+
         double p = 0;
         double q = 0;
         double r = 0;
         double u = 0;
 
         if (FastMath.abs(e) > tol1) { // Fit parabola.
             r = (x - w) * (fx - fv);
             q = (x - v) * (fx - fw);
             p = (x - v) * q - (x - w) * r;
             q = 2 * (q - r);
-
             if (q > 0) {
                 p = -p;
             } else {
                 q = -q;
             }
-
             r = e;
             e = d;
-
-                    if (p > q * (a - x) &&
-                        p < q * (b - x) &&
-                        FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
-                        // Parabolic interpolation step.
+            if (p > q * (a - x) && p < q * (b - x)
+                    && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                 d = p / q;
                 u = x + d;
-
-                        // f must not be evaluated too close to a or b.
+                // Ensure u is not too close to a or b.
                 if (u - a < tol2 || b - u < tol2) {
-                            if (x <= m) {
-                                d = tol1;
-                            } else {
-                                d = -tol1;
-                            }
-                        }
-                    } else {
-                        // Golden section step.
-                        if (x < m) {
-                            e = b - x;
-                        } else {
-                            e = a - x;
+                    d = (x <= m) ? tol1 : -tol1;
+                    u = x + d;
                 }
+            } else { // Golden-section step.
+                e = (x < m) ? b - x : a - x;
                 d = GOLDEN_SECTION * e;
+                u = x + d;
             }
         } else {
-                    // Golden section step.
-                    if (x < m) {
-                        e = b - x;
-                    } else {
-                        e = a - x;
-                    }
+            // Golden-section step.
+            e = (x < m) ? b - x : a - x;
             d = GOLDEN_SECTION * e;
+            u = x + d;
         }
-
-                // Update by at least "tol1".
+        // Enforce a minimum step.
         if (FastMath.abs(d) < tol1) {
-                    if (d >= 0) {
-                        u = x + tol1;
-                    } else {
-                        u = x - tol1;
-                    }
+            u = (d >= 0) ? x + tol1 : x - tol1;
         } else {
             u = x + d;
         }
 
         double fu = computeObjectiveValue(u);
         if (!isMinim) {
             fu = -fu;
         }
 
-                // User-defined convergence checker.
-                previous = current;
-                current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
-
-                if (checker != null) {
-                    if (checker.converged(iter, previous, current)) {
-                        return current;
-                    }
-                }
-
-                // Update a, b, v, w and x.
+        // Update the bracket and the best-so-far point x.
         if (fu <= fx) {
             if (u < x) {
                 b = x;
             } else {
                 a = x;
             }
             v = w;
             fv = fw;
             w = x;
             fw = fx;
             x = u;
             fx = fu;
         } else {
             if (u < x) {
                 a = u;
             } else {
                 b = u;
             }
-                    if (fu <= fw ||
-                        Precision.equals(w, x)) {
+            if (fu <= fw || Precision.equals(w, x)) {
                 v = w;
                 fv = fw;
                 w = u;
                 fw = fu;
-                    } else if (fu <= fv ||
-                               Precision.equals(v, x) ||
-                               Precision.equals(v, w)) {
+            } else if (fu <= fv || Precision.equals(v, x)
+                       || Precision.equals(v, w)) {
                 v = u;
                 fv = fu;
             }
         }
-            } else { // Default termination (Brent's criterion).
+
+        // Now update our best candidate for convergence checking.
+        previous = current;
+        current = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+        if (checker != null && checker.converged(iter, previous, current)) {
             return current;
         }
         ++iter;
     }
 }
\ No newline at end of file
