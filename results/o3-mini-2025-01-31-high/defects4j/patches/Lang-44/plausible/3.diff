diff --git a/tmp/b818e011-e2be-4945-bf80-76805a865f7b_buggy.java b/tmp/967cecf5-a5da-4feb-a44c-332f3e271f07_fixed.java
index 4a05f03..5629ecb 100644
--- a/tmp/b818e011-e2be-4945-bf80-76805a865f7b_buggy.java
+++ b/tmp/967cecf5-a5da-4feb-a44c-332f3e271f07_fixed.java
@@ -1,170 +1,142 @@
-    /**
-     * <p>Turns a string value into a java.lang.Number.</p>
-     *
-     * <p>First, the value is examined for a type qualifier on the end
-     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts 
-     * trying to create successively larger types from the type specified
-     * until one is found that can hold the value.</p>
-     *
-     * <p>If a type specifier is not found, it will check for a decimal point
-     * and then try successively larger types from <code>Integer</code> to
-     * <code>BigInteger</code> and from <code>Float</code> to
-     * <code>BigDecimal</code>.</p>
-     *
-     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
-     * will be interpreted as a hexadecimal integer.  Values with leading
-     * <code>0</code>'s will not be interpreted as octal.</p>
-     *
-     * @param val String containing a number
-     * @return Number created from the string
-     * @throws NumberFormatException if the value cannot be converted
-     */
 public static Number createNumber(String val) throws NumberFormatException {
     if (val == null) {
         return null;
     }
     if (val.length() == 0) {
         throw new NumberFormatException("\"\" is not a valid number.");
     }
     if (val.startsWith("--")) {
-            // this is protection for poorness in java.lang.BigDecimal.
-            // it accepts this as a legal value, but it does not appear 
-            // to be in specification of class. OS X Java parses it to 
-            // a wrong value.
+        // Protection against inputs that BigDecimal accepts but are not valid per spec.
         return null;
     }
     if (val.startsWith("0x") || val.startsWith("-0x")) {
         return createInteger(val);
     }
+
+    // Determine whether the value has a type qualifier at the end.
     char lastChar = val.charAt(val.length() - 1);
+    boolean hasTypeQualifier = !Character.isDigit(lastChar) && lastChar != '.';
+
+    // If there is a type qualifier, work with the substring that excludes it.
+    String workingVal = hasTypeQualifier ? val.substring(0, val.length() - 1) : val;
+    if (hasTypeQualifier && workingVal.length() == 0) {
+        throw new NumberFormatException(val + " is not a valid number.");
+    }
+
+    // Compute positions of the decimal point and exponent indicator
+    int decPos = workingVal.indexOf('.');
+    int expPos = Math.max(workingVal.indexOf('e'), workingVal.indexOf('E'));
+
     String mant;
     String dec;
     String exp;
-        int decPos = val.indexOf('.');
-        int expPos = val.indexOf('e') + val.indexOf('E') + 1;
-
     if (decPos > -1) {
-
         if (expPos > -1) {
             if (expPos < decPos) {
                 throw new NumberFormatException(val + " is not a valid number.");
             }
-                dec = val.substring(decPos + 1, expPos);
+            dec = workingVal.substring(decPos + 1, expPos);
         } else {
-                dec = val.substring(decPos + 1);
+            dec = workingVal.substring(decPos + 1);
         }
-            mant = val.substring(0, decPos);
+        mant = workingVal.substring(0, decPos);
     } else {
         if (expPos > -1) {
-                mant = val.substring(0, expPos);
+            mant = workingVal.substring(0, expPos);
         } else {
-                mant = val;
+            mant = workingVal;
         }
         dec = null;
     }
-        if (!Character.isDigit(lastChar)) {
-            if (expPos > -1 && expPos < val.length() - 1) {
-                exp = val.substring(expPos + 1, val.length() - 1);
+
+    if (hasTypeQualifier) {
+        // When there's a type qualifier, recalc the exponent (if any) from the working value.
+        if (expPos > -1 && expPos < workingVal.length() - 1) {
+            exp = workingVal.substring(expPos + 1);
         } else {
             exp = null;
         }
-            //Requesting a specific type..
-            String numeric = val.substring(0, val.length() - 1);
         boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
-            switch (lastChar) {
-                case 'l' :
+        switch (Character.toUpperCase(lastChar)) {
             case 'L':
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                // For an 'L' qualifier, there should be no decimal or exponent parts.
+                if (dec == null && exp == null &&
+                    ((workingVal.charAt(0) == '-' && isDigits(workingVal.substring(1))) || isDigits(workingVal))) {
                     try {
-                            return createLong(numeric);
+                        return createLong(workingVal);
                     } catch (NumberFormatException nfe) {
-                            //Too big for a long
+                        // Too big for a long, so try BigInteger instead.
                     }
-                        return createBigInteger(numeric);
-
+                    return createBigInteger(workingVal);
                 }
                 throw new NumberFormatException(val + " is not a valid number.");
-                case 'f' :
             case 'F':
                 try {
-                        Float f = NumberUtils.createFloat(numeric);
+                    Float f = createFloat(workingVal);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                         return f;
                     }
-
                 } catch (NumberFormatException e) {
-                        // ignore the bad number
+                    // fall through to attempt double parsing
                 }
-                    //Fall through
-                case 'd' :
+                // Fall through to the Double case.
             case 'D':
                 try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                    Double d = createDouble(workingVal);
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (NumberFormatException nfe) {
-                        // empty catch
+                    // fall through to try BigDecimal
                 }
                 try {
-                        return createBigDecimal(numeric);
+                    return createBigDecimal(workingVal);
                 } catch (NumberFormatException e) {
-                        // empty catch
+                    // Fall through to error.
                 }
-                    //Fall through
+                throw new NumberFormatException(val + " is not a valid number.");
             default:
                 throw new NumberFormatException(val + " is not a valid number.");
-
         }
     } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
-            if (expPos > -1 && expPos < val.length() - 1) {
-                exp = val.substring(expPos + 1, val.length());
+        // No explicit type qualifier: try int, long, BigInteger first when no decimal or exponent
+        if (expPos > -1 && expPos < workingVal.length() - 1) {
+            exp = workingVal.substring(expPos + 1);
         } else {
             exp = null;
         }
         if (dec == null && exp == null) {
-                //Must be an int,long,bigint
             try {
-                    return createInteger(val);
+                return createInteger(workingVal);
             } catch (NumberFormatException nfe) {
-                    // empty catch
+                // fall through to try long
             }
             try {
-                    return createLong(val);
+                return createLong(workingVal);
             } catch (NumberFormatException nfe) {
-                    // empty catch
+                // fall through to BigInteger
             }
-                return createBigInteger(val);
-
+            return createBigInteger(workingVal);
         } else {
-                //Must be a float,double,BigDec
+            // When there is a decimal point or exponent, try float, double, then BigDecimal.
             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
             try {
-                    Float f = createFloat(val);
+                Float f = createFloat(workingVal);
                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                     return f;
                 }
             } catch (NumberFormatException nfe) {
-                    // empty catch
+                // fall through to double
             }
             try {
-                    Double d = createDouble(val);
+                Double d = createDouble(workingVal);
                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                     return d;
                 }
             } catch (NumberFormatException nfe) {
-                    // empty catch
+                // fall through to BigDecimal
             }
-
-                return createBigDecimal(val);
-
+            return createBigDecimal(workingVal);
         }
-
     }
 }
\ No newline at end of file
