diff --git a/tmp/2be42378-0cac-4f70-9b84-a84a0b4411d1_buggy.java b/tmp/ec77c87e-40db-49bc-b611-79e084b0e775_fixed.java
index 7c7fdc2..0917d3a 100644
--- a/tmp/2be42378-0cac-4f70-9b84-a84a0b4411d1_buggy.java
+++ b/tmp/ec77c87e-40db-49bc-b611-79e084b0e775_fixed.java
@@ -1,81 +1,94 @@
 static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException {
-        if (input == null) // empty body
+    if (input == null)
         return new Document(baseUri);
     input = ConstrainableInputStream.wrap(input, bufferSize, 0);
 
     Document doc = null;
     boolean fullyRead = false;
 
     // read the start of the stream and look for a BOM or meta charset
     input.mark(bufferSize);
-        ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); // -1 because we read one more to see if completed. First read is < buffer size, so can't be invalid.
+    ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); // -1 because we read one more to see if completed
     fullyRead = input.read() == -1;
     input.reset();
 
     // look for BOM - overrides any other header or input
     BomCharset bomCharset = detectCharsetFromBom(firstBytes);
     if (bomCharset != null)
         charsetName = bomCharset.charset;
 
     if (charsetName == null) { // determine from meta. safe first parse as UTF-8
         String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();
         doc = parser.parseInput(docData, baseUri);
 
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]");
-            String foundCharset = null; // if not found, will keep utf-8 as best attempt
+        String foundCharset = null; 
         for (Element meta : metaElements) {
             if (meta.hasAttr("http-equiv"))
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             if (foundCharset == null && meta.hasAttr("charset"))
                 foundCharset = meta.attr("charset");
             if (foundCharset != null)
                 break;
         }
 
         // look for <?xml encoding='ISO-8859-1'?>
         if (foundCharset == null && doc.childNodeSize() > 0) {
             Node first = doc.childNode(0);
             XmlDeclaration decl = null;
             if (first instanceof XmlDeclaration)
                 decl = (XmlDeclaration) first;
             else if (first instanceof Comment) {
                 Comment comment = (Comment) first;
                 if (comment.isXmlDeclaration())
                     decl = comment.asXmlDeclaration();
             }
-                if (decl != null) {
-                    if (decl.name().equalsIgnoreCase("xml"))
+            if (decl != null && decl.name().equalsIgnoreCase("xml"))
                 foundCharset = decl.attr("encoding");
         }
-            }
         foundCharset = validateCharset(foundCharset);
-            if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode. (case insensitive check here to match how validate works)
+        if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { 
             foundCharset = foundCharset.trim().replaceAll("[\"']", "");
             charsetName = foundCharset;
             doc = null;
         } else if (!fullyRead) {
             doc = null;
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
     }
     if (doc == null) {
         if (charsetName == null)
             charsetName = defaultCharset;
         BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);
-            if (bomCharset != null && bomCharset.offset) // creating the buffered reader ignores the input pos, so must skip here
+        if (bomCharset != null && bomCharset.offset) // skip the BOM if necessary
             reader.skip(1);
         try {
             doc = parser.parseInput(reader, baseUri);
         } catch (UncheckedIOException e) {
-                // io exception when parsing (not seen before because reading the stream as we go)
             throw e.ioException();
         }
+        // Check whether the chosen charset can encode; if not, fall back to the default (UTF-8)
         Charset charset = Charset.forName(charsetName);
+        if (!charset.canEncode()) {
+            charsetName = defaultCharset;
+            charset = Charset.forName(charsetName);
+            // Update any meta charset elements to reflect the fallback
+            Elements metaCharset = doc.select("meta[charset]");
+            if (!metaCharset.isEmpty()) {
+                metaCharset.attr("charset", charsetName);
+            } else {
+                Elements metaContentType = doc.select("meta[http-equiv=content-type]");
+                for (Element meta : metaContentType) {
+                    String content = meta.attr("content");
+                    content = content.replaceAll("(?i)(charset=)[^;\\s]+", "$1" + charsetName);
+                    meta.attr("content", content);
+                }
+            }
+        }
         doc.outputSettings().charset(charset);
-                // some charsets can read but not encode; switch to an encodable charset and update the meta el
     }
     input.close();
     return doc;
 }
\ No newline at end of file
