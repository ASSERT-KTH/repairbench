diff --git a/tmp/db06d88d-2e3c-486c-9597-af52489004cf_buggy.java b/tmp/166b97de-c2b2-4da3-ae22-a982d0ac8e20_fixed.java
index b05b859..50e6a3e 100644
--- a/tmp/db06d88d-2e3c-486c-9597-af52489004cf_buggy.java
+++ b/tmp/166b97de-c2b2-4da3-ae22-a982d0ac8e20_fixed.java
@@ -1,61 +1,54 @@
 /**
  * Initialize the compiler options. Only necessary if you're not doing
  * a normal compile() job.
  */
 public void initOptions(CompilerOptions options) {
   this.options = options;
   if (errorManager == null) {
     if (outStream == null) {
-        setErrorManager(
-            new LoggerErrorManager(createMessageFormatter(), logger));
+      setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));
     } else {
       PrintStreamErrorManager printer =
           new PrintStreamErrorManager(createMessageFormatter(), outStream);
       printer.setSummaryDetailLevel(options.summaryDetailLevel);
       setErrorManager(printer);
     }
   }
 
   // DiagnosticGroups override the plain checkTypes option.
   if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
     options.checkTypes = true;
   } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
     options.checkTypes = false;
   } else if (!options.checkTypes) {
     // If DiagnosticGroups did not override the plain checkTypes
     // option, and checkTypes is enabled, then turn off the
     // parser type warnings.
     options.setWarningLevel(
-          DiagnosticGroup.forType(
-              RhinoErrorReporter.TYPE_PARSE_ERROR),
+        DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),
         CheckLevel.OFF);
   }
 
   if (options.checkGlobalThisLevel.isOn()) {
-      options.setWarningLevel(
-          DiagnosticGroups.GLOBAL_THIS,
-          options.checkGlobalThisLevel);
+    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);
   }
 
   // Initialize the warnings guard.
   List<WarningsGuard> guards = Lists.newArrayList();
-    guards.add(
-        new SuppressDocWarningsGuard(
-            getDiagnosticGroups().getRegisteredGroups()));
+  guards.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));
   guards.add(options.getWarningsGuard());
 
-
   // All passes must run the variable check. This synthesizes
   // variables later so that the compiler doesn't crash. It also
   // checks the externs file for validity. If you don't want to warn
   // about missing variable declarations, we shut that specific
   // error off.
-    if (!options.checkSymbols &&
-        (warningsGuard == null || !warningsGuard.disables(
-            DiagnosticGroups.CHECK_VARIABLES))) {
-      guards.add(new DiagnosticGroupWarningsGuard(
-          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
+  //
+  // The fix here is to only disable CHECK_VARIABLES if the user
+  // hasn't explicitly enabled it (for example via --jscomp_error=undefinedVars).
+  if (!options.checkSymbols && !options.enables(DiagnosticGroups.CHECK_VARIABLES)) {
+    guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
   }
 
   this.warningsGuard = new ComposeWarningsGuard(guards);
 }
\ No newline at end of file
