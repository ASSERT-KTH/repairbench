diff --git a/tmp/633c0167-727b-41b9-88d1-12aa7ea73bac_buggy.java b/tmp/b9b2c34f-e084-4223-878b-168650eb4952_fixed.java
index 3075782..04e7354 100644
--- a/tmp/633c0167-727b-41b9-88d1-12aa7ea73bac_buggy.java
+++ b/tmp/b9b2c34f-e084-4223-878b-168650eb4952_fixed.java
@@ -1,82 +1,77 @@
 /**
  * Determines whether a function can be inlined at a particular call site.
  * There are several criteria that the function and reference must hold in
  * order for the functions to be inlined:
  * 1) If a call's arguments have side effects,
  * the corresponding argument in the function must only be referenced once.
  * For instance, this will not be inlined:
  * <pre>
  *     function foo(a) { return a + a }
  *     x = foo(i++);
  * </pre>
  */
-  private CanInlineResult canInlineReferenceDirectly(
-      Node callNode, Node fnNode) {
+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
   Node block = fnNode.getLastChild();
-
   boolean hasSideEffects = false;
   if (block.hasChildren()) {
     Preconditions.checkState(block.hasOneChild());
     Node stmt = block.getFirstChild();
     if (stmt.isReturn()) {
       hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
     }
   }
   // CALL NODE: [ NAME, ARG1, ARG2, ... ]
   Node cArg = callNode.getFirstChild().getNext();
 
   // Functions called via 'call' and 'apply' have a this-object as
   // the first parameter, but this is not part of the called function's
   // parameter list.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
       // TODO(johnlenz): Support replace this with a value.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
       // ".apply" call should be filtered before this.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
   // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
-    while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
-        if (cArg != null) {
+  Node fnParams = NodeUtil.getFunctionParameters(fnNode);
+  Node fnParam = fnParams != null ? fnParams.getFirstChild() : null;
+
+  // Process matching formal parameters and call arguments in lockstep.
+  while (fnParam != null && cArg != null) {
+    // If the function return value has side effects, then the actual argument
+    // must be safe from being affected more than once.
     if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
       return CanInlineResult.NO;
     }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+    // If the argument expression might have mutable state and the formal parameter
+    // is referenced more than once in the function body, inlining is unsafe.
+    if (NodeUtil.mayEffectMutableState(cArg, compiler) &&
+        NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
       return CanInlineResult.NO;
     }
-        }
-
-        // Move to the next name.
     fnParam = fnParam.getNext();
+    cArg = cArg.getNext();
   }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
-      if (cArg != null) {
+  // Any extra call arguments (which are not matched to a formal parameter)
+  // must not have side effects.
+  while (cArg != null) {
     if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
       return CanInlineResult.NO;
     }
     cArg = cArg.getNext();
   }
-    }
 
   return CanInlineResult.YES;
 }
\ No newline at end of file
