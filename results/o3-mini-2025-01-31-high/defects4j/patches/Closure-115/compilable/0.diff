diff --git a/tmp/e040f206-b961-487c-9867-f9f83fa8237f_buggy.java b/tmp/d8ae4d1b-cf56-4a6f-b305-5c77e659e384_fixed.java
index 3075782..7c896ba 100644
--- a/tmp/e040f206-b961-487c-9867-f9f83fa8237f_buggy.java
+++ b/tmp/d8ae4d1b-cf56-4a6f-b305-5c77e659e384_fixed.java
@@ -1,82 +1,75 @@
 /**
  * Determines whether a function can be inlined at a particular call site.
  * There are several criteria that the function and reference must hold in
  * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
+ * 1) If a call's arguments have side effects, the corresponding argument in
+ * the function must only be referenced once.
  * For instance, this will not be inlined:
  * <pre>
  *     function foo(a) { return a + a }
  *     x = foo(i++);
  * </pre>
  */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
   Node block = fnNode.getLastChild();
 
+  // Determine if the function’s return expression has side effects.
   boolean hasSideEffects = false;
   if (block.hasChildren()) {
+    // Only a single statement is allowed for direct inlining.
     Preconditions.checkState(block.hasOneChild());
     Node stmt = block.getFirstChild();
     if (stmt.isReturn()) {
       hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
     }
   }
+
   // CALL NODE: [ NAME, ARG1, ARG2, ... ]
   Node cArg = callNode.getFirstChild().getNext();
 
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
+  // For functions called via 'call' and 'apply', the receiver (this-object)
+  // appears as the first argument but is not part of the callee’s parameter list.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
+      // TODO(johnlenz): Support replacing the receiver with a value.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
-        // ".apply" call should be filtered before this.
+      // ".apply" calls should be filtered out before this.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
+  // FUNCTION NODE -> parameter list node: [ ARG1, ARG2, ... ]
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
-    while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
-        if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
-            return CanInlineResult.NO;
-          }
-        }
 
-        // Move to the next name.
+  // Process paired parameters and call arguments.
+  while (fnParam != null && cArg != null) {
+    // If the argument might be affected by side effects and the corresponding
+    // parameter is referenced more than once, then inlining may duplicate the effect.
+    if (((hasSideEffects && NodeUtil.canBeSideEffected(cArg))
+         || NodeUtil.mayEffectMutableState(cArg, compiler))
+         && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
+      return CanInlineResult.NO;
+    }
     fnParam = fnParam.getNext();
+    cArg = cArg.getNext();
   }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
-      if (cArg != null) {
+  // Any leftover arguments (those not paired with a formal parameter) must be free of side effects.
+  while (cArg != null) {
     if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
       return CanInlineResult.NO;
     }
     cArg = cArg.getNext();
   }
-    }
 
   return CanInlineResult.YES;
 }
\ No newline at end of file
