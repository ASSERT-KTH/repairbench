diff --git a/tmp/9e6c8425-efdc-432f-9e8a-92845d725081_buggy.java b/tmp/b0acc2f9-0f08-4d7b-a1a2-55d55c265a55_fixed.java
index 3075782..77fb34b 100644
--- a/tmp/9e6c8425-efdc-432f-9e8a-92845d725081_buggy.java
+++ b/tmp/b0acc2f9-0f08-4d7b-a1a2-55d55c265a55_fixed.java
@@ -1,82 +1,61 @@
 /**
  * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
+ * Inlining is disallowed when an argument that may have side effects
+ * (or may be mutated) is substituted for a parameter that is referenced
+ * more than once in the function body. Also, any extra call arguments (those
+ * not matching a named parameter) must be side‐effect free since inlining
+ * would remove their evaluation.
  */
-  private CanInlineResult canInlineReferenceDirectly(
-      Node callNode, Node fnNode) {
+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
+  // The function body is expected to be the last child.
   Node block = fnNode.getLastChild();
 
-    boolean hasSideEffects = false;
-    if (block.hasChildren()) {
-      Preconditions.checkState(block.hasOneChild());
-      Node stmt = block.getFirstChild();
-      if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
-      }
-    }
-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
+  // CALL NODE structure: [ NAME, ARG1, ARG2, ... ]
   Node cArg = callNode.getFirstChild().getNext();
 
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
+  // Handle cases like foo.call(..):
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
+      // For .call calls the first argument is the "this" value.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
-        // ".apply" call should be filtered before this.
+      // Calls via .apply should be filtered out earlier.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
+  // Iterate over each formal parameter and the corresponding call argument.
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
-    while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
-        if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
+  while (fnParam != null && cArg != null) {
+    int refCount = NodeUtil.getNameReferenceCount(block, fnParam.getString());
+    // If the call argument might have side effects (or be mutated)
+    // and the parameter is referenced more than once, inlining would
+    // cause the argument to be evaluated multiple times.
+    if (refCount > 1 &&
+        (NodeUtil.mayHaveSideEffects(cArg, compiler) ||
+         NodeUtil.mayEffectMutableState(cArg, compiler))) {
       return CanInlineResult.NO;
     }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
-            return CanInlineResult.NO;
-          }
-        }
-
-        // Move to the next name.
     fnParam = fnParam.getNext();
+    cArg = cArg.getNext();
   }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
-      if (cArg != null) {
+  // For any leftover call arguments not matched to a parameter,
+  // they are normally evaluated even if unused. After inlining they might vanish.
+  // Thus, if any such extra argument could have side effects, we cannot inline.
+  while (cArg != null) {
     if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
       return CanInlineResult.NO;
     }
     cArg = cArg.getNext();
   }
-    }
 
   return CanInlineResult.YES;
 }
\ No newline at end of file
