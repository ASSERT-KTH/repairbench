diff --git a/tmp/ef90a674-2063-43ed-a1c2-adae8def5665_buggy.java b/tmp/e00617ee-514c-4fbe-986b-50490288402c_fixed.java
index 3075782..a779fb0 100644
--- a/tmp/ef90a674-2063-43ed-a1c2-adae8def5665_buggy.java
+++ b/tmp/e00617ee-514c-4fbe-986b-50490288402c_fixed.java
@@ -1,82 +1,66 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
-  private CanInlineResult canInlineReferenceDirectly(
-      Node callNode, Node fnNode) {
+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
+  // Get the function body; we require that it has exactly one statement,
+  // namely a return.
   Node block = fnNode.getLastChild();
-
-    boolean hasSideEffects = false;
   if (block.hasChildren()) {
     Preconditions.checkState(block.hasOneChild());
     Node stmt = block.getFirstChild();
-      if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
+    Preconditions.checkState(stmt.isReturn());
   }
-    }
-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
+
+  // Start with the call’s argument list. The call node is of the form:
+  // [ callee, arg1, arg2, ... ]
   Node cArg = callNode.getFirstChild().getNext();
 
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
+  // If the call isn’t a simple NAME call,
+  // then it may be a function-object “call” (where the first parameter is the
+  // implicit 'this'). For those, require that the first argument is a "this"
+  // reference, and then skip it.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
-        // ".apply" call should be filtered before this.
+      // The “.apply” case should have been ruled out earlier.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
+  // Get the formal parameter list.
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
-    while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
-        if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
-            return CanInlineResult.NO;
-          }
-        }
 
-        // Move to the next name.
+  // For each parameter that is receiving an argument, ensure that if the
+  // function body uses that parameter more than once then the corresponding
+  // call argument is free of side effects (and mutations) so that duplicating
+  // it is safe.
+  while (fnParam != null && cArg != null) {
+    int refCount = NodeUtil.getNameReferenceCount(block, fnParam.getString());
+    if (refCount > 1
+        && (NodeUtil.mayHaveSideEffects(cArg, compiler)
+            || NodeUtil.mayEffectMutableState(cArg, compiler))) {
+      return CanInlineResult.NO;
+    }
     fnParam = fnParam.getNext();
+    cArg = cArg.getNext();
   }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
-      if (cArg != null) {
+  // If there are extra arguments (i.e. more arguments than formal parameters),
+  // then they would be evaluated at the call site. Inlining is only safe if
+  // those extra arguments have no side effects.
+  while (cArg != null) {
     if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
       return CanInlineResult.NO;
     }
     cArg = cArg.getNext();
   }
-    }
 
+  // Any extra formal parameters (with no corresponding argument) will be undefined,
+  // which is safe.
   return CanInlineResult.YES;
 }
\ No newline at end of file
