diff --git a/tmp/d03254d9-36ac-4afc-80b5-9f0e3ebfe763_buggy.java b/tmp/b2c4eaf4-f7d4-4470-b04c-04c8eb44b30f_fixed.java
index 3075782..99e8d8f 100644
--- a/tmp/d03254d9-36ac-4afc-80b5-9f0e3ebfe763_buggy.java
+++ b/tmp/b2c4eaf4-f7d4-4470-b04c-04c8eb44b30f_fixed.java
@@ -1,82 +1,46 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
-  private CanInlineResult canInlineReferenceDirectly(
-      Node callNode, Node fnNode) {
+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {
+  // Don’t try to inline functions that aren’t “direct‐call‐inlinable.”
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
+  // Instead of insisting that the function body have exactly one child,
+  // simply use the body (block) for reference‐count analysis.
   Node block = fnNode.getLastChild();
 
-    boolean hasSideEffects = false;
-    if (block.hasChildren()) {
-      Preconditions.checkState(block.hasOneChild());
-      Node stmt = block.getFirstChild();
-      if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
-      }
-    }
-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
+  // Get the call’s arguments. For a normal call node, the first child is the
+  // callee followed by the argument list.
   Node cArg = callNode.getFirstChild().getNext();
 
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
+  // For calls using the function object call syntax (e.g. f.call(...)),
+  // the “this” parameter is passed in first and isn’t part of the formal params.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
-        // ".apply" call should be filtered before this.
+      // .apply calls should be filtered earlier.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
+  // Walk through the formal parameters and their corresponding call arguments.
+  // The inlining criteria is: if a formal parameter is referenced more than once
+  // in the function body then the corresponding call argument must be free of side effects.
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
-    while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
-        if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
+  while (fnParam != null && cArg != null) {
+    int refCount = NodeUtil.getNameReferenceCount(block, fnParam.getString());
+    if (refCount > 1 &&
+        (NodeUtil.mayHaveSideEffects(cArg, compiler) ||
+         NodeUtil.mayEffectMutableState(cArg, compiler))) {
       return CanInlineResult.NO;
     }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
-            return CanInlineResult.NO;
-          }
-        }
-
-        // Move to the next name.
     fnParam = fnParam.getNext();
-      }
-
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
-      if (cArg != null) {
-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
-          return CanInlineResult.NO;
-        }
     cArg = cArg.getNext();
   }
-    }
 
+  // Any extra call arguments (or missing ones for that matter) do not affect the replacement.
   return CanInlineResult.YES;
 }
\ No newline at end of file
