diff --git a/tmp/c55ab3bb-ca2f-4100-b44d-60a2db586350_buggy.java b/tmp/680eef29-bdca-436d-bf09-1abf71884d12_fixed.java
index b98f0a7..e0982e5 100644
--- a/tmp/c55ab3bb-ca2f-4100-b44d-60a2db586350_buggy.java
+++ b/tmp/680eef29-bdca-436d-bf09-1abf71884d12_fixed.java
@@ -1,29 +1,41 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
+  FunctionType ct = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+      ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
+        // When constructorType is a NoObjectType, toMaybeFunctionType returns null
+        // even though it implements FunctionType.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+  
+  // Process arguments: if we know the constructor type, propagate the formal parameter type
+  // back to the argument for backwards inference.
+  Node arg = constructor.getNext();
+  int argIndex = 0;
+  for (; arg != null; arg = arg.getNext(), argIndex++) {
+    if (ct != null && ct.isConstructor()) {
+      JSType expectedArgType = ct.getParameterType(argIndex);
+      if (expectedArgType != null) {
+        // Propagate the expected type on the argument so that backward inference
+        // will refine its type (e.g. turning {} into {foo: (number|undefined)}).
+        arg.setJSType(expectedArgType);
+      }
+    }
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
