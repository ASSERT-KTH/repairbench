diff --git a/tmp/19904763-d34b-4f3e-96f9-023e8975fd43_buggy.java b/tmp/e34a96bb-6fa7-4b88-a75b-67545422fb8a_fixed.java
index b98f0a7..d045d93 100644
--- a/tmp/19904763-d34b-4f3e-96f9-023e8975fd43_buggy.java
+++ b/tmp/e34a96bb-6fa7-4b88-a75b-67545422fb8a_fixed.java
@@ -1,29 +1,36 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
+  FunctionType ct = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+      ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+  int argIndex = 0;
+  // Traverse arguments and, if a formal parameter type is available,
+  // use it to do backward inference on the argument.
+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), argIndex++) {
     scope = traverse(arg, scope);
+    if (ct != null && ct.isConstructor() && argIndex < ct.getParameterCount()) {
+      JSType formalArgType = ct.getParameterType(argIndex);
+      if (formalArgType != null) {
+        // Backward-infer this argumentâ€™s type from the formal parameter.
+        arg.setJSType(formalArgType);
+      }
+    }
   }
   return scope;
 }
\ No newline at end of file
