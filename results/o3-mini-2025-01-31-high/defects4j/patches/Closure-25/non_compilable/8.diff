diff --git a/tmp/b7f148d5-883b-4097-8f50-cae44269704b_buggy.java b/tmp/96b4685e-8bdc-47ba-b15d-71e0217e82a1_fixed.java
index b98f0a7..63b4a28 100644
--- a/tmp/b7f148d5-883b-4097-8f50-cae44269704b_buggy.java
+++ b/tmp/96b4685e-8bdc-47ba-b15d-71e0217e82a1_fixed.java
@@ -1,29 +1,46 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
+  FunctionType ct = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+      ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+
+  // Propagate formal parameter types to the actual arguments so that backwards
+  // inference updates them (e.g. inferring properties on object literals passed
+  // to a constructor).
+  Node arg = constructor.getNext();
+  if (ct != null) {
+    int index = 0;
+    while (arg != null) {
+      // If we have a corresponding formal parameter type, use it as the expected type.
+      JSType expectedType = (index < ct.getParameters().size())
+          ? ct.getParameterType(index) : null;
+      scope = traverse(arg, scope, expectedType);
+      arg = arg.getNext();
+      index++;
+    }
+  } else {
+    for (; arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
+  }
   return scope;
 }
\ No newline at end of file
