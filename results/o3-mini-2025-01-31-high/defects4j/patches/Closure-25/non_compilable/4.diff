diff --git a/tmp/fd07e3c4-7d64-4daa-bfd4-8f9532442b7f_buggy.java b/tmp/cf9f253b-e396-4a17-b378-911c830f8caa_fixed.java
index b98f0a7..8de8729 100644
--- a/tmp/fd07e3c4-7d64-4daa-bfd4-8f9532442b7f_buggy.java
+++ b/tmp/cf9f253b-e396-4a17-b378-911c830f8caa_fixed.java
@@ -1,29 +1,49 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
+  FunctionType ct = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+      ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
+        // Sometimes a NoObjectType will implement FunctionType even though
+        // toMaybeFunctionType returns null.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
+  
+  // Traverse all argument nodes.
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
+  
+  // BACKWARD INFERENCE: Propagate parameter types from the constructor
+  // to the call arguments. This lets us infer, for example, that in
+  //    new F(y);
+  // if F is declared as
+  //    /** @constructor @param {{foo: (number|undefined)}} x */
+  // then y will be given the type {foo: (number|undefined)}.
+  if (ct != null && ct.isConstructor()) {
+    int index = 0;
+    // Iterate again over the arguments.
+    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), index++) {
+      JSType expectedType = ct.getParameterType(index);
+      if (expectedType != null) {
+        // inferSlot (or an equivalent method on FlowScope) will update the type
+        // for the L-value (for example, a NAME node) during backwards type inference.
+        scope = scope.inferSlot(arg, expectedType);
+      }
+    }
+  }
   return scope;
 }
\ No newline at end of file
