diff --git a/tmp/e3292c22-95ed-451e-9d9c-c871e42287fa_buggy.java b/tmp/3a015d71-68d9-4c3c-a434-12fdd49d70a4_fixed.java
index b98f0a7..0e9865d 100644
--- a/tmp/e3292c22-95ed-451e-9d9c-c871e42287fa_buggy.java
+++ b/tmp/3a015d71-68d9-4c3c-a434-12fdd49d70a4_fixed.java
@@ -1,29 +1,37 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
+  FunctionType ct = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+      ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
+        // For cases like NoObjectType that implement FunctionType but whose
+        // toMaybeFunctionType() returns null.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+  
+  // Propagate formal parameter type information to the actual argument nodes.
+  int index = 0;
+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), index++) {
+    if (ct != null && ct.isConstructor()) {
+      JSType paramType = ct.getParameterType(index);
+      if (paramType != null) {
+        arg.setJSType(paramType);
+      }
+    }
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
