diff --git a/tmp/0fa63522-9223-409f-8659-d357b5e536ea_buggy.java b/tmp/dcd8d4b1-bfc2-4d38-ad16-72486181d1da_fixed.java
index b98f0a7..2b12615 100644
--- a/tmp/0fa63522-9223-409f-8659-d357b5e536ea_buggy.java
+++ b/tmp/dcd8d4b1-bfc2-4d38-ad16-72486181d1da_fixed.java
@@ -1,29 +1,38 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
+  FunctionType ct = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+      ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
+        // Handle types that implement FunctionType even though
+        // toMaybeFunctionType returns null.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+
+  // Backward propagate parameter types into the arguments.
+  // For each argument, if we have a function type with a declared parameter,
+  // traverse the argument node with the expected parameter type.
+  int i = 0;
+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), i++) {
+    JSType expected = (ct != null && ct.isConstructor()) ? ct.getParameterType(i) : null;
+    if (expected != null) {
+      scope = traverse(arg, scope, expected);
+    } else {
       scope = traverse(arg, scope);
     }
+  }
   return scope;
 }
\ No newline at end of file
