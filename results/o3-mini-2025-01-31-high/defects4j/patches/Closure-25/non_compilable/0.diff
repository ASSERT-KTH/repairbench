diff --git a/tmp/c8773c0d-8d4d-48fa-86be-096c9e98c09a_buggy.java b/tmp/6d20a528-c47b-4cda-a4e9-a2fd1923aa29_fixed.java
index b98f0a7..73c4c1c 100644
--- a/tmp/c8773c0d-8d4d-48fa-86be-096c9e98c09a_buggy.java
+++ b/tmp/6d20a528-c47b-4cda-a4e9-a2fd1923aa29_fixed.java
@@ -1,29 +1,32 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
+        // Set the new node's type to the instance type.
         type = ct.getInstanceType();
+        // Propagate the function type onto the new node so that backward
+        // inference can use the parameter types to update the argument nodes.
+        n.putProp(Node.FUNCTION_TYPE, ct);
       }
     }
   }
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
