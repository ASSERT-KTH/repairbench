diff --git a/tmp/d5a7dd9c-69a0-434b-bfd4-058a9cee1efd_buggy.java b/tmp/e0f4da50-0c0e-4dc6-833d-6aa9c44fb5d4_fixed.java
index efa499e..f99f286 100644
--- a/tmp/d5a7dd9c-69a0-434b-bfd4-058a9cee1efd_buggy.java
+++ b/tmp/e0f4da50-0c0e-4dc6-833d-6aa9c44fb5d4_fixed.java
@@ -1,35 +1,32 @@
 /**
  * Get the current solution.
  *
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
+    // Fix: Use >= 0 since a valid column index can be 0.
+    Integer negativeVarBasicRow = negativeVarColumn >= 0 ? getBasicRow(negativeVarColumn) : null;
     double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
     Set<Integer> basicRows = new HashSet<Integer>();
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     for (int i = 0; i < coefficients.length; i++) {
         int colIndex = columnLabels.indexOf("x" + i);
         if (colIndex < 0) {
             coefficients[i] = 0;
             continue;
         }
         Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
+        // If more than one variable corresponds to the same basic row,
+        // choose the first one and ignore additional ones.
         if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+            coefficients[i] = restrictToNonNegative ? 0 : -mostNegative;
         } else {
             basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+            coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()))
+                - (restrictToNonNegative ? 0 : mostNegative);
         }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
