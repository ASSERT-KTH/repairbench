diff --git a/tmp/90ae1682-ad78-4014-b3dc-c67e24d83570_buggy.java b/tmp/7e5d2e0d-8755-4285-af41-37390f259f91_fixed.java
index efa499e..7c01c17 100644
--- a/tmp/90ae1682-ad78-4014-b3dc-c67e24d83570_buggy.java
+++ b/tmp/7e5d2e0d-8755-4285-af41-37390f259f91_fixed.java
@@ -1,35 +1,33 @@
-    /**
-     * Get the current solution.
-     *
-     * @return current solution
-     */
 protected RealPointValuePair getSolution() {
     int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+    // Use >= here so that if the negative variable column is at index 0 it is taken into account.
+    Integer negativeVarBasicRow = negativeVarColumn >= 0 ? getBasicRow(negativeVarColumn) : null;
+    double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
     Set<Integer> basicRows = new HashSet<Integer>();
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     for (int i = 0; i < coefficients.length; i++) {
         int colIndex = columnLabels.indexOf("x" + i);
         if (colIndex < 0) {
             coefficients[i] = 0;
             continue;
         }
         Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
+        double value;
         if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+            // If more than one decision variable corresponds to the same basic row,
+            // choose the first and set the rest to 0.
+            value = 0 - (restrictToNonNegative ? 0 : mostNegative);
         } else {
             basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+            value = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()))
+                    - (restrictToNonNegative ? 0 : mostNegative);
         }
+        // When restricting to non-negative variables, any tiny negative value is clamped to 0.
+        if (restrictToNonNegative && value < 0) {
+            value = 0;
+        }
+        coefficients[i] = value;
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
