diff --git a/tmp/a7bed0c3-e117-4a99-828c-dcd8542468f0_buggy.java b/tmp/b2ae92bd-e18d-40da-904f-b1abbcebaec2_fixed.java
index 3c69e10..82e079f 100644
--- a/tmp/a7bed0c3-e117-4a99-828c-dcd8542468f0_buggy.java
+++ b/tmp/b2ae92bd-e18d-40da-904f-b1abbcebaec2_fixed.java
@@ -1,27 +1,27 @@
 /**
  * @param Umin smallest Mann-Whitney U value
  * @param n1 number of subjects in first sample
  * @param n2 number of subjects in second sample
  * @return two-sided asymptotic p-value
  * @throws ConvergenceException if the p-value can not be computed
  * due to a convergence error
  * @throws MaxCountExceededException if the maximum number of
  * iterations is exceeded
  */
 private double calculateAsymptoticPValue(final double Umin,
                                          final int n1,
                                          final int n2)
     throws ConvergenceException, MaxCountExceededException {
 
     final int n1n2prod = n1 * n2;
 
     // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
     final double EU = n1n2prod / 2.0;
     final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
     final double z = (Umin - EU) / FastMath.sqrt(VarU);
-
     final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+    // For a two-sided p-value we use symmetry: p = 2*P(Z <= -|z|)
+    return 2 * standardNormal.cumulativeProbability(-FastMath.abs(z));
 }
\ No newline at end of file
