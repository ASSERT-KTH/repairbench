diff --git a/tmp/923ee290-f9f6-43a3-b699-dc7d55177919_buggy.java b/tmp/3c928f68-95d3-4ee4-8c97-26ed12b24931_fixed.java
index fecb896..6ac0207 100644
--- a/tmp/923ee290-f9f6-43a3-b699-dc7d55177919_buggy.java
+++ b/tmp/3c928f68-95d3-4ee4-8c97-26ed12b24931_fixed.java
@@ -1,34 +1,53 @@
 /**
  * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
+ * and leave " four" on the queue. Unbalanced openers and closers can be quoted (with ' or ") or escaped (with \).
+ * Those escapes will be left in the returned string, which is suitable for regexes (where we need to preserve the escape),
+ * but unsuitable for plain text; use unescape for that.
  * @param open opener
  * @param close closer
  * @return data matched from the queue
  */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
-        char last = 0;
+    boolean inQuote = false;
+    char quoteChar = 0;
+    boolean escaped = false;
     
-        do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+    while (!isEmpty()) {
+        char c = consume();
+        
+        if (escaped) {
+            // The previous escape applies; just reset and continue.
+            escaped = false;
+        } else {
+            if (c == ESC) { 
+                escaped = true;
+            } else if (inQuote) {
+                // If we are inside a quoted string, ignore open/close until the matching quote is found.
+                if (c == quoteChar) {
+                    inQuote = false;
+                }
+            } else {
+                // Not escaped and not in a quote.
+                if (c == '"' || c == '\'') {
+                    inQuote = true;
+                    quoteChar = c;
+                } else if (c == open) {
                     depth++;
                     if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+                        start = pos; // mark start position after the opening delimiter
+                } else if (c == close) {
                     depth--;
                 }
+            }
+        }
         
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+        if (depth > 0)
+            end = pos; // keep updating end while within the balanced region
+        else if (depth == 0 && start != -1)
+            break; // finished: consumed the matching close delimiter
+    }
+    return (end >= 0 && start != -1) ? queue.substring(start, end) : "";
 }
\ No newline at end of file
