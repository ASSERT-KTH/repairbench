diff --git a/tmp/ac8ad7a2-ab77-4e58-a024-fe5bdbd65ac4_buggy.java b/tmp/80da2966-980c-4f8f-91bd-96e9738c7544_fixed.java
index fecb896..82860fc 100644
--- a/tmp/ac8ad7a2-ab77-4e58-a024-fe5bdbd65ac4_buggy.java
+++ b/tmp/80da2966-980c-4f8f-91bd-96e9738c7544_fixed.java
@@ -1,34 +1,37 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
-
     do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        if (isEmpty())
+            break;
+        char c = consume();
+        // Only consider special meanings if the previous character was not an escape
+        if (last != ESC) {
+            // if we hit a quote, then ignore any opens or closes until we find the matching quote
+            if (c == '\'' || c == '"') {
+                char quote = c;
+                while (!isEmpty()) {
+                    c = consume();
+                    // if the matching quote is reached and it is not itself escaped, break out
+                    if (c == quote && last != ESC)
+                        break;
+                    last = c;
+                }
+            } else if (c == open) {
                 depth++;
+                // Record the start immediately after the first open delimiter.
                 if (start == -1)
                     start = pos;
-                }
-                else if (c.equals(close))
+            } else if (c == close) {
                 depth--;
             }
-
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+        }
+        // When in a nested context, mark the end position for later substring extraction.
+        if (depth > 0)
+            end = pos;
         last = c;
     } while (depth > 0);
     return (end >= 0) ? queue.substring(start, end) : "";
 }
\ No newline at end of file
