diff --git a/tmp/a50aa976-c0a8-44f1-9a14-7ac4a0dd545c_buggy.java b/tmp/f6f0ef13-3114-4c92-aec2-a3688ce02108_fixed.java
index fecb896..b781701 100644
--- a/tmp/a50aa976-c0a8-44f1-9a14-7ac4a0dd545c_buggy.java
+++ b/tmp/f6f0ef13-3114-4c92-aec2-a3688ce02108_fixed.java
@@ -1,34 +1,38 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
-        char last = 0;
+    char inQuote = 0;
+    boolean lastWasEscape = false;
     
-        do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+    while (!isEmpty()) {
+        char c = consume();
+        
+        if (lastWasEscape) {
+            lastWasEscape = false;
+        } else {
+            if (c == '\\') {
+                lastWasEscape = true;
+            } else if (inQuote != 0) {
+                if (c == inQuote)
+                    inQuote = 0;
+            } else if (c == '\'' || c == '"') {
+                inQuote = c;
+            } else if (c == open) {
                 depth++;
                 if (start == -1)
                     start = pos;
-                }
-                else if (c.equals(close))
+            } else if (c == close) {
                 depth--;
+                if (depth == 0) {
+                    end = pos - 1;
+                    break;
+                }
+            }
         }
         
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+        if (depth > 0 && start != -1)
+            end = pos;
+    }
+    return (start != -1 && end != -1 && start < end) ? queue.substring(start, end) : "";
 }
\ No newline at end of file
