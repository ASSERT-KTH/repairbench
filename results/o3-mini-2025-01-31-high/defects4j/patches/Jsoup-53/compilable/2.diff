diff --git a/tmp/408de275-ddc1-4f18-a8b1-4a551cee7228_buggy.java b/tmp/24d7532d-8ba6-4987-a05f-00ea4334dee8_fixed.java
index fecb896..631cd80 100644
--- a/tmp/408de275-ddc1-4f18-a8b1-4a551cee7228_buggy.java
+++ b/tmp/24d7532d-8ba6-4987-a05f-00ea4334dee8_fixed.java
@@ -1,34 +1,42 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
-
     do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        if (isEmpty())
+            break;
+        char c = consume();
+        
+        // If we hit a quote and itâ€™s not escaped, then skip over the quoted content.
+        if ((c == '"' || c == '\'') && last != ESC) {
+            char quote = c;
+            char prev = 0;
+            while (!isEmpty()) {
+                c = consume();
+                if (c == quote && prev != ESC)
+                    break;
+                prev = c;
+            }
+            // Reset the escape flag and continue parsing after the quoted part.
+            last = 0;
+            continue;
+        }
+        
+        if (last != ESC) {
+            if (c == open) {
                 depth++;
                 if (start == -1)
                     start = pos;
-                }
-                else if (c.equals(close))
+            } else if (c == close) {
                 depth--;
             }
+        }
+        
+        if (depth > 0)
+            end = pos; // update the end position inside the matched pair
         
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
         last = c;
     } while (depth > 0);
     return (end >= 0) ? queue.substring(start, end) : "";
 }
\ No newline at end of file
