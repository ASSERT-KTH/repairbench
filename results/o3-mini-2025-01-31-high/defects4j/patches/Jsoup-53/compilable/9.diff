diff --git a/tmp/43615893-be6a-43c8-bf99-19077b801c2c_buggy.java b/tmp/235f8e99-be54-4292-a7be-3f9d5c9a6ad4_fixed.java
index fecb896..205481a 100644
--- a/tmp/43615893-be6a-43c8-bf99-19077b801c2c_buggy.java
+++ b/tmp/235f8e99-be54-4292-a7be-3f9d5c9a6ad4_fixed.java
@@ -1,34 +1,45 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
-        char last = 0;
-
-        do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
-                    depth++;
-                    if (start == -1)
+    char inQuote = 0;
+    
+    while (!isEmpty()) {
+        char c = consume();
+        
+        // If an escape char, skip the next char so that it isn’t processed as a delimiter.
+        if (c == '\\') {
+            if (!isEmpty())
+                consume();
+            continue;
+        }
+        
+        // If we are inside a quote, only leave if we see the matching quote.
+        if (inQuote != 0) {
+            if (c == inQuote)
+                inQuote = 0;
+            continue;
+        } else if (c == '\'' || c == '"') {
+            // Enter a quoted section.
+            inQuote = c;
+            continue;
+        }
+        
+        // Process the delimiters only when not inside a quoted section.
+        if (c == open) {
+            if (depth == 0)
+                // Mark the start position after the first opener so the outer delimiter isn’t included.
                 start = pos;
-                }
-                else if (c.equals(close))
+            depth++;
+        } else if (c == close) {
             depth--;
+            if (depth == 0) {
+                // Set end position to just before the matched closer.
+                end = pos - 1;
+                break;
+            }
+        }
     }
     
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+    return (start >= 0 && end >= 0) ? queue.substring(start, end) : "";
 }
\ No newline at end of file
