diff --git a/tmp/80dca44c-ae87-4d31-a963-4c5bda2563d9_buggy.java b/tmp/8958959b-f12e-49da-8cf1-c25e46f52c72_fixed.java
index fecb896..afafa4f 100644
--- a/tmp/80dca44c-ae87-4d31-a963-4c5bda2563d9_buggy.java
+++ b/tmp/8958959b-f12e-49da-8cf1-c25e46f52c72_fixed.java
@@ -1,34 +1,43 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
-        int start = -1;
-        int end = -1;
-        int depth = 0;
-        char last = 0;
+    // If the first character is the opening delimiter, consume it.
+    if (!isEmpty() && queue.charAt(pos) == open)
+        consume();
+    // Mark the start of the content (after the open delimiter)
+    int start = pos;
+    int depth = 1;
+    boolean inQuote = false;
+    char quoteChar = 0;
+    boolean escaped = false;
 
-        do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+    while (!isEmpty()) {
+        char c = consume();
+        if (escaped) {
+            escaped = false;
+            continue;
+        }
+        if (c == '\\') {
+            escaped = true;
+            continue;
+        }
+        if (inQuote) {
+            if (c == quoteChar)
+                inQuote = false;
+            continue;
+        } else {
+            if (c == '"' || c == '\'') {
+                inQuote = true;
+                quoteChar = c;
+                continue;
+            }
+        }
+        if (c == open) {
             depth++;
-                    if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+        } else if (c == close) {
             depth--;
+            if (depth == 0)
+                break;
         }
-
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+    }
+    // We return the content between the outer delimiters (without including them).
+    return queue.substring(start, pos - 1);
 }
\ No newline at end of file
