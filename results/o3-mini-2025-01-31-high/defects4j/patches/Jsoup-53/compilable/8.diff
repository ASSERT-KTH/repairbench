diff --git a/tmp/08d64b52-c237-4026-a4e4-a07ecf182ffc_buggy.java b/tmp/d4084821-94d7-4624-9598-e2eca3efabb4_fixed.java
index fecb896..1d06674 100644
--- a/tmp/08d64b52-c237-4026-a4e4-a07ecf182ffc_buggy.java
+++ b/tmp/d4084821-94d7-4624-9598-e2eca3efabb4_fixed.java
@@ -1,34 +1,38 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
-        char last = 0;
+    boolean inQuote = false;
+    char quoteChar = 0;
+    boolean escaped = false;
 
-        do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+    while (!isEmpty()) {
+        char c = consume();
+        if (escaped) {
+            // This char was escaped â€“ just reset flag.
+            escaped = false;
+        } else if (c == ESC) {
+            escaped = true;
+        } else if (inQuote) {
+            if (c == quoteChar) {
+                inQuote = false;
+            }
+        } else {
+            if (c == '\'' || c == '"') {
+                inQuote = true;
+                quoteChar = c;
+            } else if (c == open) {
                 depth++;
                 if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+                    start = pos; // record position after the outer opener
+            } else if (c == close) {
                 depth--;
             }
-
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+        }
+        if (depth > 0)
+            end = pos; // update end to the last character of the balanced section
+        else if (depth == 0 && start != -1)
+            break;
+    }
+    return (end >= 0 && start >= 0) ? queue.substring(start, end) : "";
 }
\ No newline at end of file
