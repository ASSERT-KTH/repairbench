diff --git a/tmp/95ec486d-c44f-4e47-b59a-024256074ffe_buggy.java b/tmp/fce3e918-3584-41c3-8317-4e8de75f29bd_fixed.java
index fecb896..5f89b08 100644
--- a/tmp/95ec486d-c44f-4e47-b59a-024256074ffe_buggy.java
+++ b/tmp/fce3e918-3584-41c3-8317-4e8de75f29bd_fixed.java
@@ -1,34 +1,55 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
-        char last = 0;
+    boolean inEscape = false;
     
-        do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+    while (!isEmpty()) {
+        char c = consume();
+        
+        // If weâ€™re in an escape sequence, just record this char and continue.
+        if (inEscape) {
+            inEscape = false;
+            if (depth > 0) end = pos;
+            continue;
+        }
+        if (c == '\\') {
+            // Mark that the next character is escaped.
+            inEscape = true;
+            if (depth > 0) end = pos;
+            continue;
+        }
+        
+        // If we hit a quote, skip everything until the matching quote.
+        if (c == '\'' || c == '\"') {
+            char quote = c;
+            while (!isEmpty()) {
+                char qc = consume();
+                if (qc == '\\') {
+                    // Skip the escaped character.
+                    if (!isEmpty()) {
+                        consume();
+                    }
+                } else if (qc == quote) {
+                    break;
+                }
+            }
+            if (depth > 0) end = pos;
+            continue;
+        }
+        
+        if (c == open) {
             depth++;
             if (start == -1)
                 start = pos;
-                }
-                else if (c.equals(close))
+        } else if (c == close) {
             depth--;
         }
         
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+        if (depth > 0)
+            end = pos;
+        if (depth <= 0)
+            break;
+    }
+    return (end >= 0 && start >= 0 && end > start) ? queue.substring(start, end) : "";
 }
\ No newline at end of file
