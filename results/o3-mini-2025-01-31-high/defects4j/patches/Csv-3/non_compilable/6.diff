diff --git a/tmp/42adc174-606c-401a-ae16-e5eb2a78081e_buggy.java b/tmp/c4be98dd-c54f-4901-ae94-ce29de66b8be_fixed.java
index 1ad070d..acd3adf 100644
--- a/tmp/42adc174-606c-401a-ae16-e5eb2a78081e_buggy.java
+++ b/tmp/c4be98dd-c54f-4901-ae94-ce29de66b8be_fixed.java
@@ -1,38 +1,36 @@
-    /**
-     * Handle an escape sequence.
-     * The current character must be the escape character.
-     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
-     * on the input stream.
-     * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
-     */
 int readEscape() throws IOException {
-        // the escape char has just been read (normally a backslash)
+    // The escape character has already been consumed.
+    // Read the next character to determine what to do.
     final int c = in.read();
     switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
         case CR:
         case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
+        case FF:
+        case TAB:
+        case BACKSPACE:
             return c;
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
+            // If the character following the escape is either the escape character
+            // itself or the quote character, then we want to consume it.
+            if (c == escape || c == quote) {
                 return c;
-            // indicate unexpected char - available from in.getLastChar()
+            }
+            // Otherwise, this is not a recognized escape sequence.
+            // We “unread” the character so it gets processed normally, and
+            // return the escape char (thus preserving it in the output).
+            in.unread(c);
+            return escape;
     }
 }
\ No newline at end of file
