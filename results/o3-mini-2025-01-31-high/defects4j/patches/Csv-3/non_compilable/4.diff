diff --git a/tmp/55d10f74-f4fe-4791-8d62-66d8d05223e2_buggy.java b/tmp/07eeac82-7b40-44ad-8781-6fd620e245ae_fixed.java
index 1ad070d..bef26c5 100644
--- a/tmp/55d10f74-f4fe-4791-8d62-66d8d05223e2_buggy.java
+++ b/tmp/07eeac82-7b40-44ad-8781-6fd620e245ae_fixed.java
@@ -1,38 +1,40 @@
-    /**
-     * Handle an escape sequence.
-     * The current character must be the escape character.
-     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
-     * on the input stream.
-     * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
-     */
 int readEscape() throws IOException {
-        // the escape char has just been read (normally a backslash)
+    // the escape char has just been read (for example, '\' or any other defined escape)
     final int c = in.read();
+    if (c == END_OF_STREAM) {
+        throw new IOException("EOF whilst processing escape sequence");
+    }
+
+    // Check for standard control-character escapes.
     switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
         case CR:
         case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
+        case FF:
+        case TAB:
+        case BACKSPACE:
             return c;
-        case END_OF_STREAM:
-            throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
+            // When the character following the escape is one of our meta‐characters,
+            // namely the escape char itself, the quote char, or the delimiter,
+            // then we simply return that character (thus “consuming” the escape)
+            if (c == escape || c == quote || c == delimiter) {
                 return c;
-            // indicate unexpected char - available from in.getLastChar()
+            } else {
+                // Otherwise, the escape was not intended to convert the following char.
+                // We “unread” that character so that it will be processed normally,
+                // and we return the literal escape character.
+                in.unread(c);
+                return escape;
+            }
     }
 }
\ No newline at end of file
