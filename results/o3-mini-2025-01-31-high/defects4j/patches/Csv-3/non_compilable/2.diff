diff --git a/tmp/91d1322f-f1a7-4eb1-a55b-611a380e390a_buggy.java b/tmp/d591e16f-c99f-4d0b-8915-d2e0dcc72ab4_fixed.java
index 1ad070d..663a6c6 100644
--- a/tmp/91d1322f-f1a7-4eb1-a55b-611a380e390a_buggy.java
+++ b/tmp/d591e16f-c99f-4d0b-8915-d2e0dcc72ab4_fixed.java
@@ -1,38 +1,41 @@
-    /**
-     * Handle an escape sequence.
-     * The current character must be the escape character.
-     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
-     * on the input stream.
-     * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
-     */
 int readEscape() throws IOException {
-        // the escape char has just been read (normally a backslash)
+    // The escape character (already read) has been encountered.
     final int c = in.read();
+    if (c == END_OF_STREAM) {
+        throw new IOException("EOF whilst processing escape sequence");
+    }
+    
+    // If the escape char is a backslash, allow standard letter escapes.
+    // (Only backslash‐escapes support conversion such as "\n", "\r", etc.)
+    if (escape == '\\') {
         switch (c) {
             case 'r':
                 return CR;
             case 'n':
                 return LF;
             case 't':
                 return TAB;
             case 'b':
                 return BACKSPACE;
             case 'f':
                 return FF;
-        case CR:
-        case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
-            return c;
-        case END_OF_STREAM:
-            throw new IOException("EOF whilst processing escape sequence");
             default:
-            // Now check for meta-characters
+                // Fall through if not one of the recognized letter escapes.
+                break;
+        }
+    }
+    
+    // In any CSV setting the escape character should also work to quote
+    // special CSV meta‐characters.  If the character following the escape
+    // is the escape char itself, the quote character or the delimiter, or if
+    // it is an actual newline (CR or LF), then unescape it (i.e. return it directly).
+    if (c == escape || c == quote || c == delimiter || c == CR || c == LF) {
         return c;
-            // indicate unexpected char - available from in.getLastChar()
     }
+    
+    // Otherwise, the escape sequence is not a special one.
+    // "Unread" the character so that it will be processed normally later
+    // and return the literal escape character.
+    in.unread(c);
+    return escape;
 }
\ No newline at end of file
