diff --git a/tmp/f7be931c-25f8-47ed-b6d1-3a94254039d8_buggy.java b/tmp/577537dd-22d8-4cc9-9795-ccfd4acaf9a9_fixed.java
index 1ad070d..bf0c3d6 100644
--- a/tmp/f7be931c-25f8-47ed-b6d1-3a94254039d8_buggy.java
+++ b/tmp/577537dd-22d8-4cc9-9795-ccfd4acaf9a9_fixed.java
@@ -1,38 +1,37 @@
-    /**
-     * Handle an escape sequence.
-     * The current character must be the escape character.
-     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
-     * on the input stream.
-     * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
-     */
 int readEscape() throws IOException {
-        // the escape char has just been read (normally a backslash)
+    // the escape char has just been read (normally a backslash or the configured escape)
     final int c = in.read();
+    if (c == END_OF_STREAM) {
+        throw new IOException("EOF whilst processing escape sequence");
+    }
     switch(c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
         case CR:
         case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
+        case FF:
+        case TAB:
+        case BACKSPACE:
             return c;
-        case END_OF_STREAM:
-            throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
-                return c;
-            // indicate unexpected char - available from in.getLastChar()
+            // If the character following the escape is the escape character itself,
+            // then return the escape so that a doubled escape (e.g. "\\" or "//")
+            // turns into a single literal escape character.
+            if (c == escape) {
+                return escape;
+            }
+            // Otherwise, for an unrecognized escape sequence (e.g. "\N" or "\a"),
+            // leave the char following the escape in the stream so that it is processed
+            // literally on a subsequent call. This way, the escape char is preserved.
+            in.unread(c);
+            return escape;
     }
 }
\ No newline at end of file
