diff --git a/tmp/fc2faa76-5fde-4ab7-8ddf-053b80012fcf_buggy.java b/tmp/9fc32616-4c52-43a1-90bf-05182ec70860_fixed.java
index 1ad070d..b5300cd 100644
--- a/tmp/fc2faa76-5fde-4ab7-8ddf-053b80012fcf_buggy.java
+++ b/tmp/9fc32616-4c52-43a1-90bf-05182ec70860_fixed.java
@@ -1,38 +1,37 @@
-    /**
-     * Handle an escape sequence.
-     * The current character must be the escape character.
-     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
-     * on the input stream.
-     * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
-     */
 int readEscape() throws IOException {
-        // the escape char has just been read (normally a backslash)
-        final int c = in.read();
+    // the escape char has just been read (normally a backslash or the configured escape)
+    int c = in.read();
     switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
         case CR:
         case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
+        case FF:
+        case TAB:
+        case BACKSPACE:
             return c;
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
+            // If the character following the escape is one of the meta‐characters
+            // that are allowed to be escaped (for example, the escape char itself,
+            // the quote char, or the delimiter) then return it.
+            // Otherwise, it is not a special escape. In that case, we “unread” that
+            // character so it will be processed normally and we return the literal
+            // escape character.
+            if (c == escape || c == quote || c == delimiter) {
                 return c;
-            // indicate unexpected char - available from in.getLastChar()
+            } else {
+                in.unread(c);
+                return escape;
+            }
     }
 }
\ No newline at end of file
