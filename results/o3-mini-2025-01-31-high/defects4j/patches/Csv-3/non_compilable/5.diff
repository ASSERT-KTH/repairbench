diff --git a/tmp/f2f24b28-2627-4f9e-837a-55c006541355_buggy.java b/tmp/add20959-9130-4dbe-a489-86ba2418adb7_fixed.java
index 1ad070d..bc542ba 100644
--- a/tmp/f2f24b28-2627-4f9e-837a-55c006541355_buggy.java
+++ b/tmp/add20959-9130-4dbe-a489-86ba2418adb7_fixed.java
@@ -1,38 +1,38 @@
-    /**
-     * Handle an escape sequence.
-     * The current character must be the escape character.
-     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
-     * on the input stream.
-     * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
-     */
 int readEscape() throws IOException {
-        // the escape char has just been read (normally a backslash)
+    // the escape char has just been read (normally, for example, '\' or '/')
     final int c = in.read();
     switch (c) {
     case 'r':
         return CR;
     case 'n':
         return LF;
     case 't':
         return TAB;
     case 'b':
         return BACKSPACE;
     case 'f':
         return FF;
     case CR:
     case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
+    case FF:
+    case TAB:
+    case BACKSPACE:
         return c;
     case END_OF_STREAM:
         throw new IOException("EOF whilst processing escape sequence");
     default:
-            // Now check for meta-characters
+        // fall through to the additional tests
+        break;
+    }
+    // If the character following the escape is one of the meta‐characters,
+    // namely the configured escape character, the quote character, or the delimiter,
+    // then we return it as is.
+    if (c == this.escape || c == this.quote || c == this.delimiter) {
         return c;
-            // indicate unexpected char - available from in.getLastChar()
     }
+    // Otherwise, the escape sequence is not recognized.
+    // We “push back” the character (so that in.getLastChar() will return it)
+    // and return the escape character itself.
+    in.setLastChar(c);
+    return this.escape;
 }
\ No newline at end of file
