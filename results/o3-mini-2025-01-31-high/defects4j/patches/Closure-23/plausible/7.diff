diff --git a/tmp/4cfd437a-24dd-4984-9555-4a801cc46075_buggy.java b/tmp/62a8e1cc-a1c6-4c1b-a30a-f4b6b43ac0e5_fixed.java
index cfdcd9c..db4cab8 100644
--- a/tmp/4cfd437a-24dd-4984-9555-4a801cc46075_buggy.java
+++ b/tmp/62a8e1cc-a1c6-4c1b-a30a-f4b6b43ac0e5_fixed.java
@@ -1,51 +1,55 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
-    Node parent = n.getParent();
   // If GETPROP/GETELEM is used as assignment target the array literal is
   // acting as a temporary we can't fold it here:
   //    "[][0] += 1"
   if (isAssignmentTarget(n)) {
     return n;
   }
 
   if (!right.isNumber()) {
     // Sometimes people like to use complex expressions to index into
     // arrays, or strings to index into array methods.
     return n;
   }
 
   double index = right.getDouble();
   int intIndex = (int) index;
   if (intIndex != index) {
     error(INVALID_GETELEM_INDEX_ERROR, right);
     return n;
   }
 
   if (intIndex < 0) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
-    Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
-      current = current.getNext();
+  // Look up the element at the given index.
+  Node elem = left.getFirstChild();
+  for (int i = 0; i < intIndex && elem != null; i++) {
+    elem = elem.getNext();
   }
-
   if (elem == null) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
+  // Ensure that folding does not cancel the evaluation of
+  // any sibling of the array literal that might have side effects.
+  for (Node child = left.getFirstChild(); child != null; child = child.getNext()) {
+    if (child != elem && NodeUtil.mayHaveSideEffects(child)) {
+      return n;
+    }
+  }
+
+  // Replace an empty (hole) with an explicit undefined.
   if (elem.isEmpty()) {
     elem = NodeUtil.newUndefinedNode(elem);
   } else {
     left.removeChild(elem);
   }
 
-    // Replace the entire GETELEM with the value
   n.getParent().replaceChild(n, elem);
   reportCodeChange();
   return elem;
 }
\ No newline at end of file
