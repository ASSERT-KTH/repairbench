diff --git a/tmp/b1bd95a3-4ee1-4ae4-8a27-8d8b90190403_buggy.java b/tmp/9dae908c-fac0-475b-8f0c-f6f3abdf875b_fixed.java
index cfdcd9c..1f03441 100644
--- a/tmp/b1bd95a3-4ee1-4ae4-8a27-8d8b90190403_buggy.java
+++ b/tmp/9dae908c-fac0-475b-8f0c-f6f3abdf875b_fixed.java
@@ -1,51 +1,58 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
-    Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
+  // If GETPROP/GETELEM is used as an assignment target then the array literal
+  // is acting as a temporary that must be kept (eg. "[][0] += 1").
   if (isAssignmentTarget(n)) {
     return n;
   }
 
   if (!right.isNumber()) {
-      // Sometimes people like to use complex expressions to index into
-      // arrays, or strings to index into array methods.
+    // Sometimes people use complex expressions to index into arrays
+    // (or strings to index into array methods).
     return n;
   }
 
   double index = right.getDouble();
   int intIndex = (int) index;
   if (intIndex != index) {
     error(INVALID_GETELEM_INDEX_ERROR, right);
     return n;
   }
-
   if (intIndex < 0) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
-    Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
-      current = current.getNext();
+  // Walk through the array literal to get the element at position intIndex.
+  Node elem = left.getFirstChild();
+  for (int i = 0; i < intIndex; i++) {
+    if (elem == null) {
+      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+      return n;
+    }
+    elem = elem.getNext();
   }
-
   if (elem == null) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
+  // For the folding to be semantics‐preserving, we must not drop the side
+  // effects of any expression that (in the original array literal)
+  // would have been evaluated but is not the element being accessed.
+  for (Node child = left.getFirstChild(); child != null; child = child.getNext()) {
+    if (child != elem && !child.isEmpty() && NodeUtil.mayHaveSideEffects(child)) {
+      return n;
+    }
+  }
+
+  // If the element is “empty” (a hole in the array), replace it with undefined.
   if (elem.isEmpty()) {
     elem = NodeUtil.newUndefinedNode(elem);
   } else {
     left.removeChild(elem);
   }
 
-    // Replace the entire GETELEM with the value
   n.getParent().replaceChild(n, elem);
   reportCodeChange();
   return elem;
 }
\ No newline at end of file
