diff --git a/tmp/1208495a-2fc3-42b7-ab0d-0b8b492ba5f2_buggy.java b/tmp/54e5efb5-82b3-4bc4-b448-4960cc5a5322_fixed.java
index cfdcd9c..1e3ac07 100644
--- a/tmp/1208495a-2fc3-42b7-ab0d-0b8b492ba5f2_buggy.java
+++ b/tmp/54e5efb5-82b3-4bc4-b448-4960cc5a5322_fixed.java
@@ -1,51 +1,49 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
-    Node parent = n.getParent();
   // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
+  // acting as a temporary; we can't fold it here:
   //    "[][0] += 1"
   if (isAssignmentTarget(n)) {
     return n;
   }
 
   if (!right.isNumber()) {
     // Sometimes people like to use complex expressions to index into
     // arrays, or strings to index into array methods.
     return n;
   }
 
   double index = right.getDouble();
   int intIndex = (int) index;
   if (intIndex != index) {
     error(INVALID_GETELEM_INDEX_ERROR, right);
     return n;
   }
 
   if (intIndex < 0) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
-    Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
-      current = current.getNext();
+  // Traverse to the child at position intIndex.
+  Node elem = left.getFirstChild();
+  for (int i = 0; i < intIndex; i++) {
+    if (elem == null) {
+      break;
+    }
+    elem = elem.getNext();
   }
-
   if (elem == null) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
   if (elem.isEmpty()) {
     elem = NodeUtil.newUndefinedNode(elem);
   } else {
     left.removeChild(elem);
   }
 
-    // Replace the entire GETELEM with the value
   n.getParent().replaceChild(n, elem);
   reportCodeChange();
   return elem;
 }
\ No newline at end of file
