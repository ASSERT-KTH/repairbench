diff --git a/tmp/c60fe047-1b39-4895-9b7f-2465c0b56f58_buggy.java b/tmp/293734b1-cad7-4ab6-aa93-01eb0e22346a_fixed.java
index 845704e..c17a4db 100644
--- a/tmp/c60fe047-1b39-4895-9b7f-2465c0b56f58_buggy.java
+++ b/tmp/293734b1-cad7-4ab6-aa93-01eb0e22346a_fixed.java
@@ -1,21 +1,22 @@
-    /**
-     * Turns out that these are expensive enough to create so that caching
-     * does make sense.
-     *<p>
-     * IMPORTANT: but, note, that instances CAN NOT BE CACHED if there is
-     * a value type deserializer; this caused an issue with 2.4.4 of
-     * JAXB Annotations (failing a test).
-     * It is also possible that some other settings could make deserializers
-     * un-cacheable; but on the other hand, caching can make a big positive
-     * difference with performance... so it's a hard choice.
-     * 
-     * @since 2.4.4
-     */
 @Override
 public boolean isCachable() {
-        /* As per [databind#735], existence of value or key deserializer (only passed
-         * if annotated to use non-standard one) should also prevent caching.
-         */
-        return (_valueTypeDeserializer == null)
-                && (_ignorableProperties == null);
+    // If there are properties to ignore, caching is not safe
+    if (_ignorableProperties != null) {
+        return false;
+    }
+    // A non-null type deserializer indicates custom handling,
+    // so we must not cache this instance.
+    if (_valueTypeDeserializer != null) {
+        return false;
+    }
+    // If a key deserializer is explicitly set and non-cachable, do not cache.
+    if (_keyDeserializer != null && !_keyDeserializer.isCachable()) {
+        return false;
+    }
+    // Similarly, if a custom value deserializer has been assigned (one that
+    // is not considered cachable), then caching must be disabled.
+    if (_valueDeserializer != null && !_valueDeserializer.isCachable()) {
+        return false;
+    }
+    return true;
 }
\ No newline at end of file
