diff --git a/tmp/c6e51635-cfa4-4694-8bd6-5b14009d2455_buggy.java b/tmp/c97e697e-ed14-4aa2-972e-1c201ac3973a_fixed.java
index 9353941..0d51c07 100644
--- a/tmp/c6e51635-cfa4-4694-8bd6-5b14009d2455_buggy.java
+++ b/tmp/c97e697e-ed14-4aa2-972e-1c201ac3973a_fixed.java
@@ -1,30 +1,36 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
+  // If we hit a name node that matches the variable,
+  // we need to decide if this is a “read” or a “kill.”
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+    // Normally a name node on the left of an assignment would signal a kill.
+    // However, because JavaScript’s assignment evaluates the left‐hand side
+    // before the right‐hand side—and the “kill” (the store) happens only after
+    // the RHS is evaluated—we must check the RHS first.
+    if (NodeUtil.isLhs(n, n.getParent()) && n.getParent().isAssign()) {
+      // In an assignment node, the second child is the right-hand side.
+      Node assign = n.getParent();
+      Node rhs = assign.getLastChild(); // Assumes binary assignment: [LHS, RHS]
+      VariableLiveness rhsState = isVariableReadBeforeKill(rhs, variable);
+      // If the RHS eventually reads the variable, then in execution
+      // the read happens before the assignment’s effect, so treat this as a read.
+      if (rhsState == VariableLiveness.READ) {
+        return VariableLiveness.READ;
+      }
+      // Otherwise, no read occurs in the RHS so the first effective reference is the kill.
       return VariableLiveness.KILL;
-      } else {
-        return VariableLiveness.READ;
     }
+    return VariableLiveness.READ;
   }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+  // For non-name nodes, search their children in left-to-right order.
+  // (Do not descend into functions or other new control flow graph boundaries.)
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
