diff --git a/tmp/a343cf78-293e-4ee6-a4bc-c7a8bd498124_buggy.java b/tmp/99a6f256-60e4-4689-99c0-e90836eb6c4d_fixed.java
index 9353941..da08e05 100644
--- a/tmp/a343cf78-293e-4ee6-a4bc-c7a8bd498124_buggy.java
+++ b/tmp/99a6f256-60e4-4689-99c0-e90836eb6c4d_fixed.java
@@ -1,30 +1,40 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
+  // If this is an assignment node, then because of JS’s evaluation order the kill
+  // (i.e. the assignment to the LHS) does not take place until AFTER the RHS is evaluated.
+  // So we must look at the RHS first.
+  if (n.isAssign()) {
+    // In an assignment node the first child is the LHS and the second is the RHS.
+    Node lhs = n.getFirstChild();
+    Node rhs = lhs.getNext();
+
+    // Evaluate the right-hand side first. Even if the LHS (the kill) is present,
+    // any read occurring in the RHS will be executed before the assignment takes effect.
+    VariableLiveness state = isVariableReadBeforeKill(rhs, variable);
+    if (state != VariableLiveness.MAYBE_LIVE) {
+      return state;
+    }
+    // Then, if no read was found in the RHS, process the LHS.
+    return isVariableReadBeforeKill(lhs, variable);
+  }
+
+  // For any other node: if the node is the given variable, then return READ if it’s not 
+  // on the LHS of an assignment or KILL if it is.
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+  // Process all children in order (except for nodes that start a new CFG such as FUNCTION bodies).
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
