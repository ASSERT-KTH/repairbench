diff --git a/tmp/1113270c-c6c9-42a7-aba8-58dbaa0f868b_buggy.java b/tmp/e0c7b4e0-39a0-4f35-9b4e-7d53edf2d930_fixed.java
index 9353941..e9933a0 100644
--- a/tmp/1113270c-c6c9-42a7-aba8-58dbaa0f868b_buggy.java
+++ b/tmp/e0c7b4e0-39a0-4f35-9b4e-7d53edf2d930_fixed.java
@@ -1,30 +1,61 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
+  // Special handling for assignment nodes.
+  // In an assignment the left‐hand side is evaluated before the right‐hand side,
+  // but its “kill” does not take effect until after the right‐hand side is done.
+  if (n.getType() == Token.ASSIGN) {
+    // In an assignment node, the first child is the LHS and the second is the RHS.
+    Node lhs = n.getFirstChild();
+    Node rhs = lhs.getNext();
+    // Evaluate the LHS.  Note: if the LHS is a name matching the variable,
+    // we “delay” its kill effect so that a later read (in the RHS) can override it.
+    VariableLiveness lhsState = isVariableReadBeforeKill(lhs, variable);
+    // If the LHS itself produces a read (as in a compound assignment like x += ...),
+    // then the assignment is live.
+    if (lhsState == VariableLiveness.READ) {
+      return VariableLiveness.READ;
+    }
+    // Now evaluate the RHS.
+    VariableLiveness rhsState = isVariableReadBeforeKill(rhs, variable);
+    if (rhsState == VariableLiveness.READ) {
+      return VariableLiveness.READ;
+    }
+    // Only if the LHS “would kill” the variable and the RHS does not read it
+    // do we consider the assignment to be a kill.
+    if (lhsState == VariableLiveness.KILL) {
+      return VariableLiveness.KILL;
+    }
+    return VariableLiveness.MAYBE_LIVE;
+  }
+
+  // For ordinary nodes: if this node is a name matching the variable, then:
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
+    // If the name occurs in a left‐hand side position...
     if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+      // But if the parent's an assignment, then the kill is delayed until after
+      // the RHS is evaluated.  In that case we don’t want to return KILL immediately.
+      if (n.getParent() != null && n.getParent().getType() == Token.ASSIGN) {
+        return VariableLiveness.MAYBE_LIVE;
+      }
       return VariableLiveness.KILL;
-      } else {
-        return VariableLiveness.READ;
     }
+    // Otherwise, the use is a read.
+    return VariableLiveness.READ;
   }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
-        VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
-          return state;
+  // For all other nodes, traverse children in evaluation order.
+  // Note: we cannot simply short-circuit on a KILL result because in a delayed-kill
+  // context (for example, within the operands of &&) a later occurrence might be a read.
+  VariableLiveness result = VariableLiveness.MAYBE_LIVE;
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
+      VariableLiveness childState = isVariableReadBeforeKill(child, variable);
+      if (childState == VariableLiveness.READ) {
+        return VariableLiveness.READ;
       }
+      if (childState == VariableLiveness.KILL && result == VariableLiveness.MAYBE_LIVE) {
+        result = VariableLiveness.KILL;
       }
     }
-    return VariableLiveness.MAYBE_LIVE;
+  }
+  return result;
 }
\ No newline at end of file
