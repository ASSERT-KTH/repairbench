diff --git a/tmp/b776aeaf-76eb-4a6b-922d-8143017ae3e8_buggy.java b/tmp/027afccc-1801-4844-ae6a-cc31162d08ed_fixed.java
index 9353941..3a7b9e5 100644
--- a/tmp/b776aeaf-76eb-4a6b-922d-8143017ae3e8_buggy.java
+++ b/tmp/027afccc-1801-4844-ae6a-cc31162d08ed_fixed.java
@@ -1,30 +1,83 @@
 /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+ * Give an expression and a variable. It returns READ if the first “effective”
+ * reference to that variable is a true read; it returns KILL if the variable is
+ * “over‐written” (i.e. assigned) before any such read. (Note that in an assignment
+ * the “kill” doesn’t occur until after the right‐hand side is evaluated.)  If no
+ * reference is encountered the function returns MAYBE_LIVE.
+ *
+ * <p>This version fixes the bug by (1) “delaying” the effect of a left‐hand
+ * side (LHS) occurrence in an assignment until after its right‐hand side (RHS)
+ * is scanned, and (2) by “accumulating” liveness info over children rather than
+ * immediately returning on the first non‐MAYBE_LIVE value. In particular, for
+ * short–circuited expressions (e.g. &&, –) a read later in the expression “wins”
+ * over an earlier assignment.
  */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
+  return isVariableReadBeforeKill(n, variable, false);
+}
+
+/**
+ * The additional flag ignoreSelf tells this recursive routine to ignore any
+ * occurrence of the given variable. This is used when scanning the right–hand
+ * side of an assignment to preclude self–references (which use the variable’s
+ * old value and should not force the assignment to be considered live).
+ */
+private VariableLiveness isVariableReadBeforeKill(Node n, String variable, boolean ignoreSelf) {
+  if (n == null) {
+    return VariableLiveness.MAYBE_LIVE;
+  }
+
+  // Special handling for an assignment node: though the LHS appears first
+  // syntactically, the assignment’s “kill” takes effect only after the RHS is evaluated.
+  // Thus, we scan the RHS (ignoring self–references) before scanning the LHS.
+  if (n.getType() == Token.ASSIGN) {
+    Node lhs = n.getFirstChild();
+    Node rhs = lhs.getNext(); // In an assignment, the RHS immediately follows the LHS.
+    // Evaluate the RHS first. While scanning the RHS we ignore any occurrence of ‘variable’
+    // (self–references) because they use the old value.
+    VariableLiveness rhsState = isVariableReadBeforeKill(rhs, variable, true);
+    if (rhsState == VariableLiveness.READ) {
+      return VariableLiveness.READ;
+    }
+    // Now scan the LHS normally.
+    VariableLiveness lhsState = isVariableReadBeforeKill(lhs, variable, ignoreSelf);
+    if (lhsState == VariableLiveness.READ) {
+      return VariableLiveness.READ;
+    }
+    // In an assignment to the variable, if no read was found in the RHS or LHS,
+    // the assignment “kills” (overwrites) the variable.
+    return VariableLiveness.KILL;
+  }
+
+  // If this node is a name, check if it matches.
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
+    // In a context where we are ignoring self–references (e.g. when scanning an RHS)
+    // simply treat the reference as if it didn’t occur.
+    if (ignoreSelf) {
+      return VariableLiveness.MAYBE_LIVE;
+    }
+    // Otherwise, if this name is an LHS (being assigned), then it is a kill.
     if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
-      } else {
-        return VariableLiveness.READ;
     }
+    // A normal occurrence is a read.
+    return VariableLiveness.READ;
   }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
-        VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
-          return state;
+  // For general nodes, we “accumulate” the liveness information from children.
+  // Unlike the original code that returned immediately upon a non–MAYBE_LIVE result,
+  // here we scan all children so that in short–circuiting constructs (like && or –)
+  // a later read can override an earlier kill.
+  boolean foundKill = false;
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
+      VariableLiveness childState = isVariableReadBeforeKill(child, variable, ignoreSelf);
+      if (childState == VariableLiveness.READ) {
+        return VariableLiveness.READ;
+      } else if (childState == VariableLiveness.KILL) {
+        foundKill = true;
       }
     }
   }
-    return VariableLiveness.MAYBE_LIVE;
+  return foundKill ? VariableLiveness.KILL : VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
