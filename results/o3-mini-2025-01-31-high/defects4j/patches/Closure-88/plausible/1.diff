diff --git a/tmp/42429072-0775-44e4-8bdc-a01979c296c4_buggy.java b/tmp/311c9159-a343-4f7b-b04b-632dc8e10547_fixed.java
index 9353941..6294183 100644
--- a/tmp/42429072-0775-44e4-8bdc-a01979c296c4_buggy.java
+++ b/tmp/311c9159-a343-4f7b-b04b-632dc8e10547_fixed.java
@@ -1,30 +1,45 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
+  // If this node is an assignment, handle its two operands specially.
+  // In an assignment “x = y”, even though the LHS (“x”) is visited first,
+  // its “kill” effect is delayed until after the RHS (“y”) is evaluated.
+  // Thus, if a read of the variable appears in the RHS, that read “wins”.
+  if (n.getType() == Token.ASSIGN) {
+    Node lhs = n.getFirstChild();
+    Node rhs = lhs.getNext();
+    VariableLiveness lhsState = isVariableReadBeforeKill(lhs, variable);
+    VariableLiveness rhsState = isVariableReadBeforeKill(rhs, variable);
+    // If either operand produces a READ, then the overall effective reference is a read.
+    if (lhsState == VariableLiveness.READ || rhsState == VariableLiveness.READ) {
+      return VariableLiveness.READ;
+    }
+    // Otherwise, if the LHS produced a kill, then no read was found later.
+    if (lhsState == VariableLiveness.KILL) {
+      return VariableLiveness.KILL;
+    }
+    return VariableLiveness.MAYBE_LIVE;
+  }
+
+  // For a name node matching the variable, decide based on context.
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
+    // If this name appears on the left‐hand side of an assignment,
+    // then by itself it would be considered a kill.
+    // (Assignment nodes are handled specially, so here this is for non–delayed cases.)
     if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+  // For all other nodes, traverse the children in left-to-right (depth-first) order.
+  // Note: new CFG nodes (such as functions) stop the search.
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
