diff --git a/tmp/2eaa271e-a470-4c9f-b40d-a541ae11dbe9_buggy.java b/tmp/f7ea55c1-269a-4227-b893-751a3c4794df_fixed.java
index fb2b020..2d720e3 100644
--- a/tmp/2eaa271e-a470-4c9f-b40d-a541ae11dbe9_buggy.java
+++ b/tmp/f7ea55c1-269a-4227-b893-751a3c4794df_fixed.java
@@ -1,27 +1,25 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
   // We only want to match contraints on anonymous types.
-
-    // Handle the case where the constraint object is a record type.
   //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+  // If the constraint is a record type (i.e. an object literal type),
+  // then for every property in the constraint we “fill in” the object
+  // literal if it doesn’t already have that property. When a property is
+  // missing, we want to allow it to be missing (i.e. be undefined) by taking
+  // the union of the constraint’s property type with undefined.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+          // Note: The order is important. We want to “union” the declared type
+          // with undefined so that if the property is missing, its type is
+          // (T|undefined) rather than just T.
+          typeToInfer = propType.getLeastSupertype(getNativeType(JSTypeNative.VOID_TYPE));
         }
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
