diff --git a/tmp/a3e4041c-b661-4067-9e38-be7f7f29d8d1_buggy.java b/tmp/416d6740-8220-4f4f-8537-1b60980a64ac_fixed.java
index fb2b020..eb7ebc4 100644
--- a/tmp/a3e4041c-b661-4067-9e38-be7f7f29d8d1_buggy.java
+++ b/tmp/416d6740-8220-4f4f-8537-1b60980a64ac_fixed.java
@@ -1,27 +1,15 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+  // We only want to match constraints on anonymous types.
+  // When the constraint is a record type, we “patch in” any missing property
+  // by inferring its type from the constraint. Previously, if the property was missing
+  // we unioned its type with VOID_TYPE, which made the property optional and caused
+  // spurious warnings. The fix is to simply use the constraint’s property type.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
-        JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
-          }
-          defineInferredProperty(prop, typeToInfer, null);
+        defineInferredProperty(prop, constraintObj.getPropertyType(prop), null);
       }
     }
   }
 }
\ No newline at end of file
