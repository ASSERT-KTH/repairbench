diff --git a/tmp/60bb2a72-cc34-4e89-8ad4-448d8fa52524_buggy.java b/tmp/eb3cc01c-a122-41b2-9762-62da2331f208_fixed.java
index fb2b020..8c41dba 100644
--- a/tmp/60bb2a72-cc34-4e89-8ad4-448d8fa52524_buggy.java
+++ b/tmp/eb3cc01c-a122-41b2-9762-62da2331f208_fixed.java
@@ -1,27 +1,15 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
-          }
-          defineInferredProperty(prop, typeToInfer, null);
+        // Instead of joining with the VOID_TYPE when the property is absent,
+        // we now simply use the constraintâ€™s property type. This prevents
+        // erroneously making a property optional (i.e. unioning with undefined)
+        // when it is actually required.
+        defineInferredProperty(prop, propType, null);
       }
     }
   }
 }
\ No newline at end of file
