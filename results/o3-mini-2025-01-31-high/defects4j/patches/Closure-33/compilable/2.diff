diff --git a/tmp/1ec0e7c6-7bf3-40f8-b0b0-c4d2a20aa458_buggy.java b/tmp/ce78fbb2-020c-4f9e-a61c-77681843cc7d_fixed.java
index fb2b020..c6e2bbd 100644
--- a/tmp/1ec0e7c6-7bf3-40f8-b0b0-c4d2a20aa458_buggy.java
+++ b/tmp/ce78fbb2-020c-4f9e-a61c-77681843cc7d_fixed.java
@@ -1,27 +1,15 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+  // We only want to match constraints on anonymous types.
+  // In particular, when an object literal is being “constrained” by a record type,
+  // we fill in any missing property with the exact type from the constraint.
+  // (The buggy version union‐ed the property type with void, which caused unwanted warnings.)
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
-          }
-          defineInferredProperty(prop, typeToInfer, null);
+        defineInferredProperty(prop, propType, null);
       }
     }
   }
 }
\ No newline at end of file
