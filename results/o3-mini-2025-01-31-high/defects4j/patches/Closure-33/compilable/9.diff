diff --git a/tmp/c7564d57-3e20-4cff-b56f-42070d4daa75_buggy.java b/tmp/cea7ed95-02f2-43b3-8d08-8cd1d6d8311c_fixed.java
index fb2b020..abf492f 100644
--- a/tmp/c7564d57-3e20-4cff-b56f-42070d4daa75_buggy.java
+++ b/tmp/cea7ed95-02f2-43b3-8d08-8cd1d6d8311c_fixed.java
@@ -1,27 +1,16 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+  // We only want to match constraints on anonymous types.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
+      // Get the declared type from the constraint.
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
-          }
-          defineInferredProperty(prop, typeToInfer, null);
+        // When the property is not explicitly present on the object,
+        // do not “add” undefined into its type.
+        // Simply use the constraint’s type directly.
+        defineInferredProperty(prop, propType, null);
       }
     }
   }
 }
\ No newline at end of file
