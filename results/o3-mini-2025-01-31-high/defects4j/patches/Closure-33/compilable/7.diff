diff --git a/tmp/e5fb25c1-88ce-456a-ba34-9dda501e9db7_buggy.java b/tmp/09c76acf-5891-44c6-85f5-233d13ae9ff1_fixed.java
index fb2b020..d4034d9 100644
--- a/tmp/e5fb25c1-88ce-456a-ba34-9dda501e9db7_buggy.java
+++ b/tmp/09c76acf-5891-44c6-85f5-233d13ae9ff1_fixed.java
@@ -1,27 +1,30 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
   // We only want to match contraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
+  // taking each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+          // When the property is absent, we want to allow undefined.
+          // Calling getLeastSupertype on the expected type with void ensures
+          // that the inferred type becomes the union (propType|undefined) rather than
+          // mistakenly computing the union in the reverse order.
+          typeToInfer = propType.getLeastSupertype(getNativeType(JSTypeNative.VOID_TYPE));
         }
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
