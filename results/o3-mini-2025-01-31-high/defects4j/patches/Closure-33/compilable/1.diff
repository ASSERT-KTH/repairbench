diff --git a/tmp/6c51e79f-c606-4c70-93e9-6fba352c1715_buggy.java b/tmp/b58a0a08-fc3f-4d96-91ef-1856ae91073a_fixed.java
index fb2b020..b5bc3b7 100644
--- a/tmp/6c51e79f-c606-4c70-93e9-6fba352c1715_buggy.java
+++ b/tmp/b58a0a08-fc3f-4d96-91ef-1856ae91073a_fixed.java
@@ -1,27 +1,13 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
-        JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
-          }
-          defineInferredProperty(prop, typeToInfer, null);
+        // Instead of weakening the constraint by unioning with VOID_TYPE,
+        // we now simply infer the property to have the same type as
+        // the constraint. This prevents the “possibly undefined” warnings.
+        defineInferredProperty(prop, constraintObj.getPropertyType(prop), null);
       }
     }
   }
 }
\ No newline at end of file
