diff --git a/tmp/c5bdc161-3b37-4937-8158-da418029177a_buggy.java b/tmp/4c640727-da4c-4d18-8675-db81fde9b67f_fixed.java
index eb9ce9f..2912a41 100644
--- a/tmp/c5bdc161-3b37-4937-8158-da418029177a_buggy.java
+++ b/tmp/4c640727-da4c-4d18-8675-db81fde9b67f_fixed.java
@@ -1,60 +1,51 @@
-    /**
-     * Look for a type declaration on a property assignment
-     * (in an ASSIGN or an object literal key).
-     *
-     * @param info The doc info for this property.
-     * @param lValue The l-value node.
-     * @param rValue The node that {@code n} is being initialized to,
-     *     or {@code null} if this is a stub declaration.
-     */
 private JSType getDeclaredType(String sourceName, JSDocInfo info,
     Node lValue, @Nullable Node rValue) {
+  // Prefer an explicit annotation attached to the l-value.
   if (info != null && info.hasType()) {
     return getDeclaredTypeInAnnotation(sourceName, lValue, info);
   } else if (rValue != null && rValue.isFunction() &&
       shouldUseFunctionLiteralType(
           JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
     return rValue.getJSType();
   } else if (info != null) {
     if (info.hasEnumParameterType()) {
       if (rValue != null && rValue.isObjectLit()) {
         return rValue.getJSType();
       } else {
         return createEnumTypeFromNodes(
             rValue, lValue.getQualifiedName(), info, lValue);
       }
     } else if (info.isConstructor() || info.isInterface()) {
       return createFunctionTypeFromNodes(
           rValue, lValue.getQualifiedName(), info, lValue);
     } else {
-          // Check if this is constant, and if it has a known type.
+      // Check if this is constant and if it can supply a known type.
       if (info.isConstant()) {
-            JSType knownType = null;
         if (rValue != null) {
-              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
-                // If rValue has a type-cast, we use the type in the type-cast.
-                // If rValue's type was already computed during scope creation,
+          // If the right‐hand side node has its own JSDoc type annotation (as in
+          // a type–cast on an object literal) then use that declared type.
+          JSDocInfo rValueDoc = rValue.getJSDocInfo();
+          if (rValueDoc != null && rValueDoc.hasType()) {
+            return getDeclaredTypeInAnnotation(sourceName, rValue, rValueDoc);
+          } else if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
+            // If rValue’s type was computed earlier (for example, because of a type–cast),
             // then we can safely use that.
             return rValue.getJSType();
           } else if (rValue.isOr()) {
-                // Check for a very specific JS idiom:
-                // var x = x || TYPE;
-                // This is used by Closure's base namespace for esoteric
-                // reasons.
+            // Handle the specific idiom: var x = x || TYPE;
             Node firstClause = rValue.getFirstChild();
             Node secondClause = firstClause.getNext();
             boolean namesMatch = firstClause.isName()
                 && lValue.isName()
                 && firstClause.getString().equals(lValue.getString());
             if (namesMatch && secondClause.getJSType() != null
                 && !secondClause.getJSType().isUnknownType()) {
               return secondClause.getJSType();
             }
           }
         }
       }
     }
   }
-
   return getDeclaredTypeInAnnotation(sourceName, lValue, info);
 }
\ No newline at end of file
