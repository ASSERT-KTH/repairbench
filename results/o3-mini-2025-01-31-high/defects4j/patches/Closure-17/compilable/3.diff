diff --git a/tmp/d156c4ea-168a-4b35-acab-6a9523604208_buggy.java b/tmp/d035b64c-2aeb-4ad3-94c1-3063d4e8192e_fixed.java
index eb9ce9f..78f931e 100644
--- a/tmp/d156c4ea-168a-4b35-acab-6a9523604208_buggy.java
+++ b/tmp/d035b64c-2aeb-4ad3-94c1-3063d4e8192e_fixed.java
@@ -1,60 +1,45 @@
-    /**
-     * Look for a type declaration on a property assignment
-     * (in an ASSIGN or an object literal key).
-     *
-     * @param info The doc info for this property.
-     * @param lValue The l-value node.
-     * @param rValue The node that {@code n} is being initialized to,
-     *     or {@code null} if this is a stub declaration.
-     */
 private JSType getDeclaredType(String sourceName, JSDocInfo info,
     Node lValue, @Nullable Node rValue) {
-      if (info != null && info.hasType()) {
-        return getDeclaredTypeInAnnotation(sourceName, lValue, info);
-      } else if (rValue != null && rValue.isFunction() &&
-          shouldUseFunctionLiteralType(
-              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
-        return rValue.getJSType();
-      } else if (info != null) {
-        if (info.hasEnumParameterType()) {
-          if (rValue != null && rValue.isObjectLit()) {
-            return rValue.getJSType();
-          } else {
-            return createEnumTypeFromNodes(
-                rValue, lValue.getQualifiedName(), info, lValue);
-          }
-        } else if (info.isConstructor() || info.isInterface()) {
-          return createFunctionTypeFromNodes(
-              rValue, lValue.getQualifiedName(), info, lValue);
-        } else {
-          // Check if this is constant, and if it has a known type.
-          if (info.isConstant()) {
-            JSType knownType = null;
-            if (rValue != null) {
+  // For constants with an initializer, use the RHSâ€™s computed type.
+  // This is needed, for example, when a constant property is defined with
+  // an explicit type annotation (e.g. @type {TwoNumbers}) but the object
+  // literal actually computes to a union including null.
+  if (info != null && info.isConstant() && rValue != null) {
     if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
-                // If rValue has a type-cast, we use the type in the type-cast.
-                // If rValue's type was already computed during scope creation,
-                // then we can safely use that.
       return rValue.getJSType();
     } else if (rValue.isOr()) {
-                // Check for a very specific JS idiom:
-                // var x = x || TYPE;
-                // This is used by Closure's base namespace for esoteric
-                // reasons.
+      // Check for a very specific JS idiom: var x = x || TYPE;
       Node firstClause = rValue.getFirstChild();
       Node secondClause = firstClause.getNext();
       boolean namesMatch = firstClause.isName()
           && lValue.isName()
           && firstClause.getString().equals(lValue.getString());
       if (namesMatch && secondClause.getJSType() != null
           && !secondClause.getJSType().isUnknownType()) {
         return secondClause.getJSType();
       }
     }
   }
+
+  if (info != null && info.hasType()) {
+    return getDeclaredTypeInAnnotation(sourceName, lValue, info);
+  } else if (rValue != null && rValue.isFunction() &&
+      shouldUseFunctionLiteralType(
+          JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
+    return rValue.getJSType();
+  } else if (info != null) {
+    if (info.hasEnumParameterType()) {
+      if (rValue != null && rValue.isObjectLit()) {
+        return rValue.getJSType();
+      } else {
+        return createEnumTypeFromNodes(
+            rValue, lValue.getQualifiedName(), info, lValue);
       }
+    } else if (info.isConstructor() || info.isInterface()) {
+      return createFunctionTypeFromNodes(
+          rValue, lValue.getQualifiedName(), info, lValue);
     }
   }
 
   return getDeclaredTypeInAnnotation(sourceName, lValue, info);
 }
\ No newline at end of file
