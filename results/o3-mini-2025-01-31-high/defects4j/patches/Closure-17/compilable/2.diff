diff --git a/tmp/1f21e1fe-86e1-44d4-baf4-311bbbd10e7b_buggy.java b/tmp/f1724e57-c283-4e5a-a4a8-39a841a457f6_fixed.java
index eb9ce9f..b339f43 100644
--- a/tmp/1f21e1fe-86e1-44d4-baf4-311bbbd10e7b_buggy.java
+++ b/tmp/f1724e57-c283-4e5a-a4a8-39a841a457f6_fixed.java
@@ -1,60 +1,53 @@
-    /**
-     * Look for a type declaration on a property assignment
-     * (in an ASSIGN or an object literal key).
-     *
-     * @param info The doc info for this property.
-     * @param lValue The l-value node.
-     * @param rValue The node that {@code n} is being initialized to,
-     *     or {@code null} if this is a stub declaration.
-     */
 private JSType getDeclaredType(String sourceName, JSDocInfo info,
     Node lValue, @Nullable Node rValue) {
+  // If the left-hand side has an explicit type annotation, use it.
   if (info != null && info.hasType()) {
     return getDeclaredTypeInAnnotation(sourceName, lValue, info);
-      } else if (rValue != null && rValue.isFunction() &&
+  }
+  // If the right-hand side has its own type annotation (for example, a cast),
+  // then use that instead.
+  if (rValue != null && rValue.getJSDocInfo() != null &&
+      rValue.getJSDocInfo().hasType()) {
+    return getDeclaredTypeInAnnotation(sourceName, rValue, rValue.getJSDocInfo());
+  }
+  // If the rValue is a function literal and we should use its type literal,
+  // then use its computed type.
+  if (rValue != null && rValue.isFunction() &&
       shouldUseFunctionLiteralType(
           JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
     return rValue.getJSType();
   } else if (info != null) {
     if (info.hasEnumParameterType()) {
       if (rValue != null && rValue.isObjectLit()) {
         return rValue.getJSType();
       } else {
-            return createEnumTypeFromNodes(
-                rValue, lValue.getQualifiedName(), info, lValue);
+        return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);
       }
     } else if (info.isConstructor() || info.isInterface()) {
-          return createFunctionTypeFromNodes(
-              rValue, lValue.getQualifiedName(), info, lValue);
+      return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);
     } else {
       // Check if this is constant, and if it has a known type.
       if (info.isConstant()) {
-            JSType knownType = null;
         if (rValue != null) {
           if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
-                // If rValue has a type-cast, we use the type in the type-cast.
-                // If rValue's type was already computed during scope creation,
-                // then we can safely use that.
+            // Use the type already computed on rValue.
             return rValue.getJSType();
           } else if (rValue.isOr()) {
-                // Check for a very specific JS idiom:
-                // var x = x || TYPE;
-                // This is used by Closure's base namespace for esoteric
-                // reasons.
+            // Handle the pattern: var x = x || TYPE;
             Node firstClause = rValue.getFirstChild();
             Node secondClause = firstClause.getNext();
-                boolean namesMatch = firstClause.isName()
-                    && lValue.isName()
-                    && firstClause.getString().equals(lValue.getString());
-                if (namesMatch && secondClause.getJSType() != null
-                    && !secondClause.getJSType().isUnknownType()) {
+            boolean namesMatch = firstClause.isName() &&
+                lValue.isName() &&
+                firstClause.getString().equals(lValue.getString());
+            if (namesMatch && secondClause.getJSType() != null &&
+                !secondClause.getJSType().isUnknownType()) {
               return secondClause.getJSType();
             }
           }
         }
       }
     }
   }
 
   return getDeclaredTypeInAnnotation(sourceName, lValue, info);
 }
\ No newline at end of file
