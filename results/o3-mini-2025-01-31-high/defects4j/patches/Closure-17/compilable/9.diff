diff --git a/tmp/4c4f6a09-8336-474f-aeeb-67b53c3bcf68_buggy.java b/tmp/2a7b4529-7582-4d70-a6a4-1289b107b3b4_fixed.java
index eb9ce9f..d058131 100644
--- a/tmp/4c4f6a09-8336-474f-aeeb-67b53c3bcf68_buggy.java
+++ b/tmp/2a7b4529-7582-4d70-a6a4-1289b107b3b4_fixed.java
@@ -1,60 +1,50 @@
-    /**
-     * Look for a type declaration on a property assignment
-     * (in an ASSIGN or an object literal key).
-     *
-     * @param info The doc info for this property.
-     * @param lValue The l-value node.
-     * @param rValue The node that {@code n} is being initialized to,
-     *     or {@code null} if this is a stub declaration.
-     */
 private JSType getDeclaredType(String sourceName, JSDocInfo info,
     Node lValue, @Nullable Node rValue) {
-      if (info != null && info.hasType()) {
+  // For non-constant properties with an explicit @type, we use the annotation.
+  // But for constants (@const), we want to use the initializer’s computed type.
+  if (info != null && info.hasType() && !info.isConstant()) {
     return getDeclaredTypeInAnnotation(sourceName, lValue, info);
   } else if (rValue != null && rValue.isFunction() &&
       shouldUseFunctionLiteralType(
           JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
     return rValue.getJSType();
   } else if (info != null) {
     if (info.hasEnumParameterType()) {
       if (rValue != null && rValue.isObjectLit()) {
         return rValue.getJSType();
       } else {
         return createEnumTypeFromNodes(
             rValue, lValue.getQualifiedName(), info, lValue);
       }
     } else if (info.isConstructor() || info.isInterface()) {
       return createFunctionTypeFromNodes(
           rValue, lValue.getQualifiedName(), info, lValue);
     } else {
-          // Check if this is constant, and if it has a known type.
+      // For constants, if the right‐hand side has a computed type we prefer that.
       if (info.isConstant()) {
-            JSType knownType = null;
         if (rValue != null) {
           if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
-                // If rValue has a type-cast, we use the type in the type-cast.
-                // If rValue's type was already computed during scope creation,
-                // then we can safely use that.
+            // If the initializer has already been type‐computed (or
+            // has a type-cast), then use its type.
             return rValue.getJSType();
           } else if (rValue.isOr()) {
-                // Check for a very specific JS idiom:
-                // var x = x || TYPE;
-                // This is used by Closure's base namespace for esoteric
-                // reasons.
+            // Special idiom: var x = x || TYPE;
             Node firstClause = rValue.getFirstChild();
             Node secondClause = firstClause.getNext();
             boolean namesMatch = firstClause.isName()
                 && lValue.isName()
                 && firstClause.getString().equals(lValue.getString());
             if (namesMatch && secondClause.getJSType() != null
                 && !secondClause.getJSType().isUnknownType()) {
               return secondClause.getJSType();
             }
           }
         }
       }
     }
   }
-
-      return getDeclaredTypeInAnnotation(sourceName, lValue, info);
+  // If there’s no useful info, only return a type if a @type annotation is present.
+  return (info != null && info.hasType())
+      ? getDeclaredTypeInAnnotation(sourceName, lValue, info)
+      : null;
 }
\ No newline at end of file
