diff --git a/tmp/3480c74b-e84e-4d9f-b582-3c411faed109_buggy.java b/tmp/1e5ffc81-c908-442f-9a87-b3db85c30181_fixed.java
index f843d29..263276d 100644
--- a/tmp/3480c74b-e84e-4d9f-b582-3c411faed109_buggy.java
+++ b/tmp/1e5ffc81-c908-442f-9a87-b3db85c30181_fixed.java
@@ -1,68 +1,78 @@
-    /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
-     *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
-     * @throws IllegalArgumentException if the string is an invalid format
-     */
 public static Locale toLocale(final String str) {
     if (str == null) {
         return null;
     }
     final int len = str.length();
+    // Handle locales with empty language (strings starting with '_')
+    if (str.charAt(0) == '_') {
+        // Must be at least 3 chars: _XX
+        if (len < 3) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        char c1 = str.charAt(1);
+        char c2 = str.charAt(2);
+        if (!Character.isUpperCase(c1) || !Character.isUpperCase(c2) ||
+            !Character.isLetter(c1) || !Character.isLetter(c2)) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        String country = str.substring(1, 3);
+        if (len == 3) {
+            return new Locale("", country);
+        }
+        // If there's more, the next char must be an underscore
+        if (str.charAt(3) != '_') {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        // There must be a non-empty variant
+        if (len == 4) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        String variant = str.substring(4);
+        return new Locale("", country, variant);
+    }
+    // Process locales with non-empty language
     if (len < 2) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-        final char ch0 = str.charAt(0);
-            final char ch1 = str.charAt(1);
-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
+    char c0 = str.charAt(0);
+    char c1 = str.charAt(1);
+    if (!Character.isLowerCase(c0) || !Character.isLowerCase(c1)) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
+    String language = str.substring(0, 2);
     if (len == 2) {
-                return new Locale(str);
-            }
-            if (len < 5) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+        return new Locale(language);
     }
+    // The third character must be an underscore
     if (str.charAt(2) != '_') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-            final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
+    // Check for the "ll__variant" syntax (empty country)
+    if (len >= 3 && str.charAt(3) == '_') {
+        if (len == 4) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        String variant = str.substring(4);
+        return new Locale(language, "", variant);
+    }
+    // Otherwise, expect a country code
+    if (len < 5) {
+        throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-            final char ch4 = str.charAt(4);
-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
+    char countryChar1 = str.charAt(3);
+    char countryChar2 = str.charAt(4);
+    if (!Character.isUpperCase(countryChar1) || !Character.isUpperCase(countryChar2) ||
+        !Character.isLetter(countryChar1) || !Character.isLetter(countryChar2)) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
+    String country = str.substring(3, 5);
     if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
+        return new Locale(language, country);
     }
-            if (len < 7) {
+    // If there is a variant, the next character must be an underscore and variant must be non-empty.
+    if (len < 7 || str.charAt(5) != '_') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-            if (str.charAt(5) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+    String variant = str.substring(6);
+    return new Locale(language, country, variant);
 }
\ No newline at end of file
