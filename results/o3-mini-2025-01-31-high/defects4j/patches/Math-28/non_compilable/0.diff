diff --git a/tmp/fd65f123-8f95-4136-a40d-5c2bf386df76_buggy.java b/tmp/450f3ac0-dd1b-41f7-89da-f8e9a831c4fb_fixed.java
index c3944a7..ac4dcdd 100644
--- a/tmp/fd65f123-8f95-4136-a40d-5c2bf386df76_buggy.java
+++ b/tmp/450f3ac0-dd1b-41f7-89da-f8e9a831c4fb_fixed.java
@@ -1,71 +1,54 @@
-    /**
-     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
-     * @param tableau simple tableau for the problem
-     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
-     * @return row with the minimum ratio
-     */
 private Integer getPivotRow(SimplexTableau tableau, final int col) {
     // create a list of all the rows that tie for the lowest score in the minimum ratio test
-        List<Integer> minRatioPositions = new ArrayList<Integer>();
+    List<Integer> minRatioPositions = new ArrayList<>();
     double minRatio = Double.MAX_VALUE;
     for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
         final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
         final double entry = tableau.getEntry(i, col);
 
         if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
             final double ratio = rhs / entry;
-                // check if the entry is strictly equal to the current min ratio
-                // do not use a ulp/epsilon check
             final int cmp = Double.compare(ratio, minRatio);
             if (cmp == 0) {
                 minRatioPositions.add(i);
             } else if (cmp < 0) {
                 minRatio = ratio;
-                    minRatioPositions = new ArrayList<Integer>();
+                minRatioPositions.clear();
                 minRatioPositions.add(i);
             }
         }
     }
 
-        if (minRatioPositions.size() == 0) {
+    if (minRatioPositions.isEmpty()) {
         return null;
-        } else if (minRatioPositions.size() > 1) {
-            // there's a degeneracy as indicated by a tie in the minimum ratio test
+    }
+    // If there is only one candidate, return it.
+    if (minRatioPositions.size() == 1) {
+        return minRatioPositions.get(0);
+    }
 
-            // 1. check if there's an artificial variable that can be forced out of the basis
+    // 1. Check if there is an artificial variable that can be forced out of the basis.
     for (Integer row : minRatioPositions) {
         for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
             int column = i + tableau.getArtificialVariableOffset();
             final double entry = tableau.getEntry(row, column);
             if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
                 return row;
             }
         }
     }
 
-            // 2. apply Bland's rule to prevent cycling:
-            //    take the row for which the corresponding basic variable has the smallest index
-            //
-            // see http://www.stanford.edu/class/msande310/blandrule.pdf
-            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
-            //
-            // Additional heuristic: if we did not get a solution after half of maxIterations
-            //                       revert to the simple case of just returning the top-most row
-            // This heuristic is based on empirical data gathered while investigating MATH-828.
+    // 2. Apply Bland's rule to prevent cycling:
+    //    choose the candidate row for which the basic variable has the smallest index.
     Integer minRow = null;
     int minIndex = tableau.getWidth();
     for (Integer row : minRatioPositions) {
-                    int i = tableau.getNumObjectiveFunctions();
-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                        if (row == tableau.getBasicRow(i)) {
-                            if (i < minIndex) {
+        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
+            if (row.equals(tableau.getBasicRow(i)) && i < minIndex) {
                 minIndex = i;
                 minRow = row;
             }
         }
     }
-                }
-                return minRow;
-        }
-        return minRatioPositions.get(0);
+    return (minRow == null) ? minRatioPositions.get(0) : minRow;
 }
\ No newline at end of file
