diff --git a/tmp/04ad19cb-b8ac-46f6-a484-0581e7eac028_buggy.java b/tmp/7d348f6b-b028-4396-bcbe-8078b1824069_fixed.java
index c3944a7..58bde3a 100644
--- a/tmp/04ad19cb-b8ac-46f6-a484-0581e7eac028_buggy.java
+++ b/tmp/7d348f6b-b028-4396-bcbe-8078b1824069_fixed.java
@@ -1,71 +1,55 @@
-    /**
-     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
-     * @param tableau simple tableau for the problem
-     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
-     * @return row with the minimum ratio
-     */
 private Integer getPivotRow(SimplexTableau tableau, final int col) {
-        // create a list of all the rows that tie for the lowest score in the minimum ratio test
-        List<Integer> minRatioPositions = new ArrayList<Integer>();
+    List<Integer> minRatioPositions = new ArrayList<>();
     double minRatio = Double.MAX_VALUE;
+    // First pass: perform the minimum ratio test
     for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
         final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
         final double entry = tableau.getEntry(i, col);
-
         if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
             final double ratio = rhs / entry;
-                // check if the entry is strictly equal to the current min ratio
-                // do not use a ulp/epsilon check
-                final int cmp = Double.compare(ratio, minRatio);
+            int cmp = Double.compare(ratio, minRatio);
             if (cmp == 0) {
                 minRatioPositions.add(i);
             } else if (cmp < 0) {
                 minRatio = ratio;
-                    minRatioPositions = new ArrayList<Integer>();
+                minRatioPositions.clear();
                 minRatioPositions.add(i);
             }
         }
     }
 
-        if (minRatioPositions.size() == 0) {
+    if (minRatioPositions.isEmpty()) {
         return null;
-        } else if (minRatioPositions.size() > 1) {
-            // there's a degeneracy as indicated by a tie in the minimum ratio test
-
-            // 1. check if there's an artificial variable that can be forced out of the basis
+    }
+    // Degeneracy: there is more than one candidate with the same (minimum) ratio.
+    if (minRatioPositions.size() > 1) {
+        // 1. First try: check if an artificial variable can be forced out of the basis.
         for (Integer row : minRatioPositions) {
             for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
                 int column = i + tableau.getArtificialVariableOffset();
                 final double entry = tableau.getEntry(row, column);
                 if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
                     return row;
                 }
             }
         }
-
-            // 2. apply Bland's rule to prevent cycling:
-            //    take the row for which the corresponding basic variable has the smallest index
-            //
-            // see http://www.stanford.edu/class/msande310/blandrule.pdf
-            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
-            //
-            // Additional heuristic: if we did not get a solution after half of maxIterations
-            //                       revert to the simple case of just returning the top-most row
-            // This heuristic is based on empirical data gathered while investigating MATH-828.
+        // 2. Second try: apply Bland's rule.
+        // For each candidate row, find its basic variable â€“ choose the row whose basic variable has the smallest index.
         Integer minRow = null;
         int minIndex = tableau.getWidth();
         for (Integer row : minRatioPositions) {
-                    int i = tableau.getNumObjectiveFunctions();
-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                        if (row == tableau.getBasicRow(i)) {
-                            if (i < minIndex) {
-                                minIndex = i;
+            for (int j = tableau.getNumObjectiveFunctions(); j < tableau.getWidth() - 1; j++) {
+                if (row.equals(tableau.getBasicRow(j))) {
+                    if (j < minIndex) {
+                        minIndex = j;
                         minRow = row;
                     }
+                    break; // Found the basic variable for this row, so move on.
                 }
             }
         }
-                return minRow;
+        return (minRow != null) ? minRow : minRatioPositions.get(0);
     }
+    // If only one candidate, simply return it.
     return minRatioPositions.get(0);
 }
\ No newline at end of file
