diff --git a/tmp/3466ca07-68d0-4637-98c7-63194b92ccbb_buggy.java b/tmp/6819c2ba-1bb3-456d-a835-1eda71da6a82_fixed.java
index ad4b0d8..3ad115e 100644
--- a/tmp/3466ca07-68d0-4637-98c7-63194b92ccbb_buggy.java
+++ b/tmp/6819c2ba-1bb3-456d-a835-1eda71da6a82_fixed.java
@@ -1,47 +1,46 @@
 /**
  * Use K-means++ to choose the initial centers.
  *
  * @param <T> type of the points to cluster
  * @param points the points to choose the initial centers from
  * @param k the number of centers to choose
  * @param random random generator to use
  * @return the initial centers
  */
-    private static <T extends Clusterable<T>> List<Cluster<T>>
-        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
+private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters(final Collection<T> points,
+                                                                                  final int k,
+                                                                                  final Random random) {
 
-        final List<T> pointSet = new ArrayList<T>(points);
-        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
+    final List<T> pointSet = new ArrayList<>(points);
+    final List<Cluster<T>> resultSet = new ArrayList<>();
 
     // Choose one center uniformly at random from among the data points.
     final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
-        resultSet.add(new Cluster<T>(firstPoint));
+    resultSet.add(new Cluster<>(firstPoint));
 
-        final double[] dx2 = new double[pointSet.size()];
     while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
-            // the nearest center that has already been chosen.
-            int sum = 0;
+        // Reallocate the cumulative weights array to match the current size of pointSet.
+        final double[] dx2 = new double[pointSet.size()];
+        double sum = 0.0;
+        // For each data point x, compute D(x)^2, the distance between x and the nearest center.
         for (int i = 0; i < pointSet.size(); i++) {
             final T p = pointSet.get(i);
             final Cluster<T> nearest = getNearestCluster(resultSet, p);
             final double d = p.distanceFrom(nearest.getCenter());
             sum += d * d;
             dx2[i] = sum;
         }
 
-            // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
+        // Add one new data point as a center. Each point x is chosen with probability proportional to D(x)^2.
         final double r = random.nextDouble() * sum;
         for (int i = 0; i < dx2.length; i++) {
             if (dx2[i] >= r) {
                 final T p = pointSet.remove(i);
-                    resultSet.add(new Cluster<T>(p));
+                resultSet.add(new Cluster<>(p));
                 break;
             }
         }
     }
 
     return resultSet;
-
 }
\ No newline at end of file
