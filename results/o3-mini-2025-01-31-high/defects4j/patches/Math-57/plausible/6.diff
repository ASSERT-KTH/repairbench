diff --git a/tmp/3a347eca-194a-4cc2-88e2-159c87055dca_buggy.java b/tmp/733bcc94-2a90-4d9d-838b-0b14abc17ba0_fixed.java
index ad4b0d8..83eb09b 100644
--- a/tmp/3a347eca-194a-4cc2-88e2-159c87055dca_buggy.java
+++ b/tmp/733bcc94-2a90-4d9d-838b-0b14abc17ba0_fixed.java
@@ -1,47 +1,46 @@
-    /**
-     * Use K-means++ to choose the initial centers.
-     *
-     * @param <T> type of the points to cluster
-     * @param points the points to choose the initial centers from
-     * @param k the number of centers to choose
-     * @param random random generator to use
-     * @return the initial centers
-     */
-    private static <T extends Clusterable<T>> List<Cluster<T>>
-        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
-
+private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters(final Collection<T> points,
+                                                                                 final int k,
+                                                                                 final Random random) {
     final List<T> pointSet = new ArrayList<T>(points);
     final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
     // Choose one center uniformly at random from among the data points.
     final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
     resultSet.add(new Cluster<T>(firstPoint));
 
+    // Allocate the dx2 array. We will only use the part corresponding to the current size of pointSet.
     final double[] dx2 = new double[pointSet.size()];
+
     while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
-            // the nearest center that has already been chosen.
-            int sum = 0;
+        double sum = 0.0;
+        // For each data point x, compute D(x), the squared distance from the nearest center
         for (int i = 0; i < pointSet.size(); i++) {
             final T p = pointSet.get(i);
             final Cluster<T> nearest = getNearestCluster(resultSet, p);
             final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
+            final double d2 = d * d;
+            sum += d2;
             dx2[i] = sum;
         }
 
-            // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
+        // Pick a random value in [0, sum)
         final double r = random.nextDouble() * sum;
-            for (int i = 0 ; i < dx2.length; i++) {
-                if (dx2[i] >= r) {
-                    final T p = pointSet.remove(i);
-                    resultSet.add(new Cluster<T>(p));
+        int selectedIndex = -1;
+        // Choose the first index for which the cumulative sum exceeds r
+        for (int i = 0; i < pointSet.size(); i++) {
+            if (r < dx2[i]) {
+                selectedIndex = i;
                 break;
             }
         }
+        // Fallback: in case due to rounding r was not less than any dx2[i],
+        // choose the last element.
+        if (selectedIndex < 0) {
+            selectedIndex = pointSet.size() - 1;
         }
 
+        final T p = pointSet.remove(selectedIndex);
+        resultSet.add(new Cluster<T>(p));
+    }
     return resultSet;
-
 }
\ No newline at end of file
