diff --git a/tmp/d4225a34-0b45-4f2a-9cb8-dd13ece40eab_buggy.java b/tmp/885401d3-a852-4fed-9845-983ec4fe24d0_fixed.java
index e4d90e7..27b4099 100644
--- a/tmp/d4225a34-0b45-4f2a-9cb8-dd13ece40eab_buggy.java
+++ b/tmp/885401d3-a852-4fed-9845-983ec4fe24d0_fixed.java
@@ -1,45 +1,46 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
     // Don't pretty print recursively.
     prettyPrint = false;
 
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this;
          current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+             (forAnnotations || propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES);
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
 
-        sb.append(property);
-        sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+      sb.append(property).append(": ");
+      sb.append(forAnnotations
+          ? getPropertyType(property).toAnnotationString()
+          : getPropertyType(property).toString());
+      i++;
 
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+      // For non-annotation printing, truncate if there are more properties than MAX.
+      if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES && propertyNames.size() > i) {
         sb.append(", ...");
         break;
       }
     }
 
     sb.append("}");
-
     prettyPrint = true;
     return sb.toString();
   } else {
     return "{...}";
   }
 }
\ No newline at end of file
