diff --git a/tmp/87ffa64c-c0d9-4ee3-bccc-160dd7cc39fb_buggy.java b/tmp/b94a61ba-16df-41ac-9ee3-e0ec22eb4143_fixed.java
index e4d90e7..57129e3 100644
--- a/tmp/87ffa64c-c0d9-4ee3-bccc-160dd7cc39fb_buggy.java
+++ b/tmp/b94a61ba-16df-41ac-9ee3-e0ec22eb4143_fixed.java
@@ -1,45 +1,66 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
-      // Don't pretty print recursively.
+    // Prevent recursion from going deeper.
+    boolean savedPrettyPrint = prettyPrint;
     prettyPrint = false;
 
-      // Use a tree set so that the properties are sorted.
-      Set<String> propertyNames = Sets.newTreeSet();
+    // When printing annotations we want the full list; otherwise, we may abbreviate.
+    boolean abbreviate = !forAnnotations;
+    Set<String> props = Sets.newTreeSet();
+
+    // Collect property names from this type and its prototypes.
+    // In abbreviation mode, we try to collect one extra name so we know if there are “too many.”
     for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+         current != null && !current.isNativeObjectType();
          current = current.getImplicitPrototype()) {
-        propertyNames.addAll(current.getOwnPropertyNames());
+      for (String name : current.getOwnPropertyNames()) {
+        props.add(name);
+        if (abbreviate && props.size() > MAX_PRETTY_PRINTED_PROPERTIES) {
+          break;
+        }
+      }
+      if (abbreviate && props.size() > MAX_PRETTY_PRINTED_PROPERTIES) {
+        break;
+      }
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
-      int i = 0;
-      for (String property : propertyNames) {
-        if (i > 0) {
+    int total = props.size();
+    int displayCount = total;
+    // In non-annotation (toString) mode, if there are more than MAX_PRETTY_PRINTED_PROPERTIES
+    // then only print (MAX_PRETTY_PRINTED_PROPERTIES - 1) items followed by an ellipsis.
+    if (abbreviate && total > MAX_PRETTY_PRINTED_PROPERTIES) {
+      displayCount = MAX_PRETTY_PRINTED_PROPERTIES - 1;
+    }
+
+    int count = 0;
+    for (String name : props) {
+      if (count > 0) {
         sb.append(", ");
       }
-
-        sb.append(property);
-        sb.append(": ");
-        sb.append(getPropertyType(property).toString());
-
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
-          sb.append(", ...");
+      if (count == displayCount) {
+        // We have more properties than we want to show.
+        sb.append("...");
         break;
       }
+      sb.append(name).append(": ");
+      // Use the appropriate printing style for the property type.
+      sb.append(forAnnotations
+          ? getPropertyType(name).toAnnotationString()
+          : getPropertyType(name).toString());
+      count++;
     }
-
     sb.append("}");
 
-      prettyPrint = true;
+    prettyPrint = savedPrettyPrint;
     return sb.toString();
   } else {
-      return "{...}";
+    // If we are inside a nested call, then avoid recursion.
+    return forAnnotations ? "?" : "{...}";
   }
 }
\ No newline at end of file
