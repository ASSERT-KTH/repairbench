diff --git a/tmp/3aa89bec-fe30-4dac-8826-4cc0bdabd5ad_buggy.java b/tmp/887bdbb6-cc8b-4255-a049-0d0f1a9df76f_fixed.java
index e4d90e7..a95aebc 100644
--- a/tmp/3aa89bec-fe30-4dac-8826-4cc0bdabd5ad_buggy.java
+++ b/tmp/887bdbb6-cc8b-4255-a049-0d0f1a9df76f_fixed.java
@@ -1,45 +1,71 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
-    } else if (prettyPrint) {
+  } else if (!forAnnotations && prettyPrint) {
     // Don't pretty print recursively.
+    boolean oldPrettyPrint = prettyPrint;
     prettyPrint = false;
     
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this;
          current != null && !current.isNativeObjectType() &&
          propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
     }
     
     StringBuilder sb = new StringBuilder();
     sb.append("{");
     
     int i = 0;
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
       
       sb.append(property);
       sb.append(": ");
       sb.append(getPropertyType(property).toString());
+      i++;
       
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+      // Only use the ellipsis if there are more properties than our limit.
+      if (i == MAX_PRETTY_PRINTED_PROPERTIES && propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {
         sb.append(", ...");
         break;
       }
     }
     
     sb.append("}");
-
-      prettyPrint = true;
+    prettyPrint = oldPrettyPrint;
     return sb.toString();
   } else {
-      return "{...}";
+    // For annotations or when not doing pretty printing, list all properties.
+    Set<String> propertyNames = Sets.newTreeSet();
+    for (ObjectType current = this;
+         current != null && !current.isNativeObjectType();
+         current = current.getImplicitPrototype()) {
+      propertyNames.addAll(current.getOwnPropertyNames());
+    }
+    
+    StringBuilder sb = new StringBuilder();
+    sb.append("{");
+    boolean first = true;
+    for (String property : propertyNames) {
+      if (!first) {
+        sb.append(", ");
+      } else {
+        first = false;
+      }
+      
+      sb.append(property);
+      sb.append(": ");
+      // When printing for annotations, delegate to the annotation-specific method.
+      sb.append(forAnnotations ? getPropertyType(property).toAnnotationString()
+                               : getPropertyType(property).toString());
+    }
+    sb.append("}");
+    return sb.toString();
   }
 }
\ No newline at end of file
