diff --git a/tmp/193252bd-bd80-4ba7-b116-53900c6ff492_buggy.java b/tmp/e13af40a-9cae-4b04-8591-73662b7c1bd6_fixed.java
index e4d90e7..6492229 100644
--- a/tmp/193252bd-bd80-4ba7-b116-53900c6ff492_buggy.java
+++ b/tmp/e13af40a-9cae-4b04-8591-73662b7c1bd6_fixed.java
@@ -1,45 +1,82 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
+  } else if (forAnnotations) {
+    // In annotation mode we want to print the full record (with all properties)
+    // and use a different recursion marker.
+    if (!prettyPrint) {
+      return "?";
+    }
+    boolean prevPrettyPrint = prettyPrint;
+    // Turn off pretty printing to avoid recursion.
+    prettyPrint = false;
+
+    // Gather all properties from this and its prototypes (ignoring native types).
+    Set<String> propertyNames = Sets.newTreeSet();
+    for (ObjectType current = this; 
+         current != null && !current.isNativeObjectType(); 
+         current = current.getImplicitPrototype()) {
+      propertyNames.addAll(current.getOwnPropertyNames());
+    }
+
+    StringBuilder sb = new StringBuilder();
+    sb.append("{");
+
+    int i = 0;
+    for (String property : propertyNames) {
+      if (i > 0) {
+        sb.append(", ");
+      }
+      sb.append(property);
+      sb.append(": ");
+      // Use the annotation string of the property type.
+      sb.append(getPropertyType(property).toAnnotationString());
+      i++;
+    }
+    sb.append("}");
+
+    prettyPrint = prevPrettyPrint;
+    return sb.toString();
   } else if (prettyPrint) {
-      // Don't pretty print recursively.
+    // In normal toString mode we want to pretty print but possibly truncate if there
+    // are too many properties.
+    boolean prevPrettyPrint = prettyPrint;
     prettyPrint = false;
 
-      // Use a tree set so that the properties are sorted.
+    // Only look far enough to decide if we should truncate.
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this; 
          current != null && !current.isNativeObjectType() &&
              propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
-
       sb.append(property);
       sb.append(": ");
       sb.append(getPropertyType(property).toString());
-
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+      i++;
+      // Only append an ellipsis if there are additional properties.
+      if (i == MAX_PRETTY_PRINTED_PROPERTIES && propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {
         sb.append(", ...");
         break;
       }
     }
-
     sb.append("}");
 
-      prettyPrint = true;
+    prettyPrint = prevPrettyPrint;
     return sb.toString();
   } else {
-      return "{...}";
+    // If we're already in a nested call, use the appropriate recursion marker.
+    return forAnnotations ? "?" : "{...}";
   }
 }
\ No newline at end of file
