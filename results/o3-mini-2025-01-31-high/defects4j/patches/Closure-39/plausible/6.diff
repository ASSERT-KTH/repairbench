diff --git a/tmp/b8aa9768-91a4-4784-90ca-ab72963cbf0a_buggy.java b/tmp/f09ecca0-2642-4153-b4d3-b8307a85ce9e_fixed.java
index e4d90e7..c7f7c95 100644
--- a/tmp/b8aa9768-91a4-4784-90ca-ab72963cbf0a_buggy.java
+++ b/tmp/f09ecca0-2642-4153-b4d3-b8307a85ce9e_fixed.java
@@ -1,45 +1,51 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
-    } else if (prettyPrint) {
-      // Don't pretty print recursively.
+  }
+  // If we are already in the middle of pretty printing (i.e. a recursive call),
+  // return the abbreviated form: "?" for annotations, "{...}" otherwise.
+  if (!prettyPrint) {
+    return forAnnotations ? "?" : "{...}";
+  }
+
+  // Begin pretty printing for this object.
   prettyPrint = false;
 
   // Use a tree set so that the properties are sorted.
   Set<String> propertyNames = Sets.newTreeSet();
   for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+       current != null && !current.isNativeObjectType();
        current = current.getImplicitPrototype()) {
     propertyNames.addAll(current.getOwnPropertyNames());
+    // For toString (non-annotation) calls, we only need to collect a few properties.
+    if (!forAnnotations && propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {
+      break;
+    }
   }
 
   StringBuilder sb = new StringBuilder();
   sb.append("{");
 
-      int i = 0;
+  int count = 0;
+  int totalProperties = propertyNames.size();
   for (String property : propertyNames) {
-        if (i > 0) {
+    if (count > 0) {
       sb.append(", ");
     }
-
-        sb.append(property);
-        sb.append(": ");
-        sb.append(getPropertyType(property).toString());
-
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+    sb.append(property).append(": ");
+    sb.append(forAnnotations ? getPropertyType(property).toAnnotationString()
+                             : getPropertyType(property).toString());
+    count++;
+    // For non-annotation printing, if we have reached the limit and there are more
+    // properties, show an ellipsis.
+    if (!forAnnotations && count == MAX_PRETTY_PRINTED_PROPERTIES && count < totalProperties) {
       sb.append(", ...");
       break;
     }
   }
 
   sb.append("}");
-
   prettyPrint = true;
   return sb.toString();
-    } else {
-      return "{...}";
-    }
 }
\ No newline at end of file
