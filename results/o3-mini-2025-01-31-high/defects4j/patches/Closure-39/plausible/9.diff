diff --git a/tmp/86f49980-0b5f-4e4c-9f6f-349c08562054_buggy.java b/tmp/24dd1777-a7aa-4962-91ee-da730887339b_fixed.java
index e4d90e7..13b886d 100644
--- a/tmp/86f49980-0b5f-4e4c-9f6f-349c08562054_buggy.java
+++ b/tmp/24dd1777-a7aa-4962-91ee-da730887339b_fixed.java
@@ -1,45 +1,52 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
-    } else if (prettyPrint) {
-      // Don't pretty print recursively.
+  }
+  // If we are already recursing, then return the recursion marker:
+  if (!prettyPrint) {
+    return forAnnotations ? "?" : "{...}";
+  }
+  
+  // Temporarily disable pretty printing to avoid infinite recursion.
+  boolean oldPrettyPrint = prettyPrint;
   prettyPrint = false;
   
-      // Use a tree set so that the properties are sorted.
+  // Collect property names in sorted order.
   Set<String> propertyNames = Sets.newTreeSet();
   for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+       current != null && !current.isNativeObjectType();
        current = current.getImplicitPrototype()) {
     propertyNames.addAll(current.getOwnPropertyNames());
+    // For normal (non‐annotation) printing, stop once we have too many properties.
+    if (!forAnnotations && propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {
+      break;
+    }
   }
   
   StringBuilder sb = new StringBuilder();
   sb.append("{");
   
   int i = 0;
   for (String property : propertyNames) {
     if (i > 0) {
       sb.append(", ");
     }
-
     sb.append(property);
     sb.append(": ");
-        sb.append(getPropertyType(property).toString());
-
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+    // Use the same forAnnotations flag when printing the property type.
+    sb.append(getPropertyType(property).toStringHelper(forAnnotations));
+    i++;
+    // In toString (non-annotation) mode, if there are too many properties, print an ellipsis.
+    if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES &&
+        propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {
       sb.append(", ...");
       break;
     }
   }
-
   sb.append("}");
   
-      prettyPrint = true;
+  // Restore the flag.
+  prettyPrint = oldPrettyPrint;
   return sb.toString();
-    } else {
-      return "{...}";
-    }
 }
\ No newline at end of file
