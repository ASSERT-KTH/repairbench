diff --git a/tmp/5396d6e1-95ef-4cda-b47a-d81204011131_buggy.java b/tmp/7c9bd9ae-b123-4f91-ad7d-8d4d92808920_fixed.java
index e4d90e7..4c85cb1 100644
--- a/tmp/5396d6e1-95ef-4cda-b47a-d81204011131_buggy.java
+++ b/tmp/7c9bd9ae-b123-4f91-ad7d-8d4d92808920_fixed.java
@@ -1,45 +1,62 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
-      // Don't pretty print recursively.
+    boolean savedPrettyPrint = prettyPrint;
+    // Prevent infinite recursion.
     prettyPrint = false;
-
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
+    if (forAnnotations) {
+      // When printing annotations, collect all properties.
       for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+           current != null && !current.isNativeObjectType();
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
+    } else {
+      // When printing normally, only care about enough properties to hit the limit.
+      for (ObjectType current = this;
+           current != null && !current.isNativeObjectType();
+           current = current.getImplicitPrototype()) {
+        propertyNames.addAll(current.getOwnPropertyNames());
+        if (propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {
+          break;
+        }
+      }
+    }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
-
     int i = 0;
-      for (String property : propertyNames) {
+    Iterator<String> iter = propertyNames.iterator();
+    while (iter.hasNext()) {
+      String property = iter.next();
       if (i > 0) {
         sb.append(", ");
       }
-
       sb.append(property);
       sb.append(": ");
+      // Use the appropriate rendering for the property type.
+      if (forAnnotations) {
+        sb.append(getPropertyType(property).toAnnotationString());
+      } else {
         sb.append(getPropertyType(property).toString());
-
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+      }
+      i++;
+      // Only for normal toString, if we reached the limit and there are more properties,
+      // append an ellipsis.
+      if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES && iter.hasNext()) {
         sb.append(", ...");
         break;
       }
     }
-
     sb.append("}");
-
-      prettyPrint = true;
+    prettyPrint = savedPrettyPrint;
     return sb.toString();
   } else {
-      return "{...}";
+    // When recursion is detected, use different markers for annotations and toString.
+    return forAnnotations ? "?" : "{...}";
   }
 }
\ No newline at end of file
