diff --git a/tmp/576396e7-56c3-4fd6-8032-69cd3eec16ef_buggy.java b/tmp/f94c6060-3292-4cbc-bdd9-53918a36ea71_fixed.java
index 42c5923..b1e98bf 100644
--- a/tmp/576396e7-56c3-4fd6-8032-69cd3eec16ef_buggy.java
+++ b/tmp/f94c6060-3292-4cbc-bdd9-53918a36ea71_fixed.java
@@ -1,89 +1,75 @@
-    /**
-     * Parses a string to produce a {@link Fraction} object.  This method
-     * expects the string to be formatted as a proper fraction.
-     * <p>
-     * Minus signs are only allowed in the whole number part - i.e.,
-     * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
-     * will result in a <code>ParseException</code>.
-     * 
-     * @param source the string to parse
-     * @param pos input/ouput parsing parameter.
-     * @return the parsed {@link Fraction} object.
-     */
 public Fraction parse(String source, ParsePosition pos) {
-        // try to parse improper fraction
+    // try to parse improper fraction first
     Fraction ret = super.parse(source, pos);
     if (ret != null) {
         return ret;
     }
     
     int initialIndex = pos.getIndex();
 
     // parse whitespace
     parseAndIgnoreWhitespace(source, pos);
 
-        // parse whole
+    // parse whole number (minus sign allowed here)
     Number whole = getWholeFormat().parse(source, pos);
     if (whole == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
 
     // parse whitespace
     parseAndIgnoreWhitespace(source, pos);
     
-        // parse numerator
+    // parse numerator; minus signs are not allowed here
     Number num = getNumeratorFormat().parse(source, pos);
     if (num == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
+    if (num.intValue() < 0) { // invalid minus sign in numerator
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(pos.getIndex());
+        return null;
+    }
     
-            // minus signs should be leading, invalid expression
+    // parse whitespace before the separator
+    parseAndIgnoreWhitespace(source, pos);
 
-        // parse '/'
+    // parse the '/'
     int startIndex = pos.getIndex();
     char c = parseNextCharacter(source, pos);
     switch (c) {
     case 0:
-            // no '/'
-            // return num as a fraction
+        // no '/' found -- interpret the numerator as a whole fraction (num/1)
         return new Fraction(num.intValue(), 1);
     case '/':
-            // found '/', continue parsing denominator
+        // valid separator, continue to parse denominator
         break;
     default:
-            // invalid '/'
-            // set index back to initial, error index should be the last
-            // character examined.
+        // wrong character found; reset and record error index
         pos.setIndex(initialIndex);
         pos.setErrorIndex(startIndex);
         return null;
     }
 
     // parse whitespace
     parseAndIgnoreWhitespace(source, pos);
 
-        // parse denominator
+    // parse denominator; minus signs are not allowed here
     Number den = getDenominatorFormat().parse(source, pos);
     if (den == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
-        
-            // minus signs must be leading, invalid
+    if (den.intValue() < 0) { // invalid minus sign in denominator
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(pos.getIndex());
+        return null;
+    }
     
     int w = whole.intValue();
     int n = num.intValue();
     int d = den.intValue();
+    // Construct the fraction: the sign comes only from the whole part
     return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
 }
\ No newline at end of file
