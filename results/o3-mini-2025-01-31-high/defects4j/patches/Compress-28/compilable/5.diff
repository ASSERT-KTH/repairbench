diff --git a/tmp/4430ca78-0b5e-4aca-8dc0-1fbc6c3e5eca_buggy.java b/tmp/ab89d103-7c41-45fb-93f1-4294940b75e8_fixed.java
index 0f439b3..bbfea5e 100644
--- a/tmp/4430ca78-0b5e-4aca-8dc0-1fbc6c3e5eca_buggy.java
+++ b/tmp/ab89d103-7c41-45fb-93f1-4294940b75e8_fixed.java
@@ -1,38 +1,27 @@
-    /**
-     * Reads bytes from the current tar archive entry.
-     *
-     * This method is aware of the boundaries of the current
-     * entry in the archive and will deal with them as if they
-     * were this stream's start and EOF.
-     *
-     * @param buf The buffer into which to place bytes read.
-     * @param offset The offset at which to place bytes read.
-     * @param numToRead The number of bytes to read.
-     * @return The number of bytes read, or -1 at EOF.
-     * @throws IOException on error
-     */
 @Override
 public int read(byte[] buf, int offset, int numToRead) throws IOException {
-    	int totalRead = 0;
-
     if (hasHitEOF || entryOffset >= entrySize) {
         return -1;
     }
 
     if (currEntry == null) {
         throw new IllegalStateException("No current tar entry");
     }
 
     numToRead = Math.min(numToRead, available());
+    int bytesRead = is.read(buf, offset, numToRead);
 
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
-        
-        if (totalRead == -1) {
+    // If we hit EOF before reading the complete entry, that's a truncation error.
+    if (bytesRead == -1) {
+        if (entryOffset < entrySize) {
+            throw new IOException("Truncated TAR archive: expected " + entrySize +
+                                  " bytes, but only read " + entryOffset);
+        }
         hasHitEOF = true;
-        } else {
-            entryOffset += totalRead;
+        return -1;
     }
 
-        return totalRead;
+    count(bytesRead);
+    entryOffset += bytesRead;
+    return bytesRead;
 }
\ No newline at end of file
