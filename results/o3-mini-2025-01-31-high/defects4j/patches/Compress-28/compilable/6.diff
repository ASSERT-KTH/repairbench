diff --git a/tmp/1f44b206-493b-4cf6-a3ec-b7d4b41df2c1_buggy.java b/tmp/5a7edda9-b23d-4883-b660-e826ad3c0fb1_fixed.java
index 0f439b3..bcb0abc 100644
--- a/tmp/1f44b206-493b-4cf6-a3ec-b7d4b41df2c1_buggy.java
+++ b/tmp/5a7edda9-b23d-4883-b660-e826ad3c0fb1_fixed.java
@@ -1,38 +1,26 @@
-    /**
-     * Reads bytes from the current tar archive entry.
-     *
-     * This method is aware of the boundaries of the current
-     * entry in the archive and will deal with them as if they
-     * were this stream's start and EOF.
-     *
-     * @param buf The buffer into which to place bytes read.
-     * @param offset The offset at which to place bytes read.
-     * @param numToRead The number of bytes to read.
-     * @return The number of bytes read, or -1 at EOF.
-     * @throws IOException on error
-     */
 @Override
 public int read(byte[] buf, int offset, int numToRead) throws IOException {
-    	int totalRead = 0;
-
     if (hasHitEOF || entryOffset >= entrySize) {
         return -1;
     }
-
     if (currEntry == null) {
         throw new IllegalStateException("No current tar entry");
     }
-
     numToRead = Math.min(numToRead, available());
 
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
-        
+    int totalRead = is.read(buf, offset, numToRead);
     if (totalRead == -1) {
+        // If we haven't read the full expected amount, the entry is truncated.
+        if (entryOffset < entrySize) {
+            throw new IOException("Truncated TAR archive: entry '" + currEntry.getName() +
+                                  "' expected " + entrySize + " bytes but only read " + entryOffset + " bytes");
+        }
         hasHitEOF = true;
-        } else {
+        return -1;
+    }
+
+    // Update the count and the current entry offset
+    count(totalRead);
     entryOffset += totalRead;
-        }
-
     return totalRead;
 }
\ No newline at end of file
