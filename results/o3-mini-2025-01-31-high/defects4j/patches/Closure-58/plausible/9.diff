diff --git a/tmp/81c2b643-aab7-49b4-9c0d-f42c89c0c5d8_buggy.java b/tmp/c2c84725-bc99-454a-97c0-d428a2ab5a89_fixed.java
index 2ff27ef..b76b0bc 100644
--- a/tmp/81c2b643-aab7-49b4-9c0d-f42c89c0c5d8_buggy.java
+++ b/tmp/c2c84725-bc99-454a-97c0-d428a2ab5a89_fixed.java
@@ -1,97 +1,98 @@
 /**
  * Computes the GEN and KILL set.
  *
  * @param n Root node.
  * @param gen Local variables that are live because of the instruction at
  *        {@code n} will be added to this set.
  * @param kill Local variables that are killed because of the instruction at
  *        {@code n} will be added to this set.
  * @param conditional {@code true} if any assignments encountered are
  *        conditionally executed. These assignments might not kill a variable.
  */
-  private void computeGenKill(Node n, BitSet gen, BitSet kill,
-      boolean conditional) {
-
+private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {
   switch (n.getType()) {
     case Token.SCRIPT:
     case Token.BLOCK:
     case Token.FUNCTION:
       return;
 
     case Token.WHILE:
     case Token.DO:
     case Token.IF:
-        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
-            conditional);
+      computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);
       return;
 
     case Token.FOR:
       if (!NodeUtil.isForIn(n)) {
-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
-              conditional);
+        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);
       } else {
         // for(x in y) {...}
         Node lhs = n.getFirstChild();
         Node rhs = lhs.getNext();
         if (NodeUtil.isVar(lhs)) {
           // for(var x in y) {...}
           lhs = lhs.getLastChild();
-          }
           addToSetIfLocal(lhs, kill);
           addToSetIfLocal(lhs, gen);
+        } else {
+          // For expressions like for(a[1] in foo) {...},
+          // we recursively compute the gen/kill sets.
+          // This ensures that any underlying local (e.g. "a") is processed.
+          computeGenKill(lhs, gen, kill, true);
+        }
         computeGenKill(rhs, gen, kill, conditional);
       }
       return;
 
     case Token.VAR:
       for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
         if (c.hasChildren()) {
           computeGenKill(c.getFirstChild(), gen, kill, conditional);
           if (!conditional) {
             addToSetIfLocal(c, kill);
           }
         }
       }
       return;
 
     case Token.AND:
     case Token.OR:
       computeGenKill(n.getFirstChild(), gen, kill, conditional);
       // May short circuit.
       computeGenKill(n.getLastChild(), gen, kill, true);
       return;
 
     case Token.HOOK:
       computeGenKill(n.getFirstChild(), gen, kill, conditional);
       // Assume both sides are conditional.
       computeGenKill(n.getFirstChild().getNext(), gen, kill, true);
       computeGenKill(n.getLastChild(), gen, kill, true);
       return;
 
     case Token.NAME:
       if (isArgumentsName(n)) {
         markAllParametersEscaped();
       } else {
         addToSetIfLocal(n, gen);
       }
       return;
 
     default:
       if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {
         Node lhs = n.getFirstChild();
         if (!conditional) {
           addToSetIfLocal(lhs, kill);
         }
         if (!NodeUtil.isAssign(n)) {
           // assignments such as a += 1 reads a.
           addToSetIfLocal(lhs, gen);
         }
         computeGenKill(lhs.getNext(), gen, kill, conditional);
       } else {
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           computeGenKill(c, gen, kill, conditional);
         }
       }
       return;
   }
 }
\ No newline at end of file
