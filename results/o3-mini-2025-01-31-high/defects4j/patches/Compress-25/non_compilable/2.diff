diff --git a/tmp/67c72afb-050d-4dd8-86d3-2319b42fdcc8_buggy.java b/tmp/829d943b-8be3-47bc-9b0d-9404fcd76d94_fixed.java
index 6c0aa19..6663f90 100644
--- a/tmp/67c72afb-050d-4dd8-86d3-2319b42fdcc8_buggy.java
+++ b/tmp/829d943b-8be3-47bc-9b0d-9404fcd76d94_fixed.java
@@ -1,20 +1,22 @@
 /**
  * @param encoding the encoding to use for file names, use null
  * for the platform's default encoding
  * @param useUnicodeExtraFields whether to use InfoZIP Unicode
  * Extra Fields (if present) to set the file names.
  * @param allowStoredEntriesWithDataDescriptor whether the stream
  * will try to read STORED entries that use a data descriptor
  * @since 1.1
  */
 public ZipArchiveInputStream(InputStream inputStream,
                              String encoding,
                              boolean useUnicodeExtraFields,
                              boolean allowStoredEntriesWithDataDescriptor) {
-        zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
+    this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
     this.useUnicodeExtraFields = useUnicodeExtraFields;
-        in = new PushbackInputStream(inputStream, buf.capacity());
-        this.allowStoredEntriesWithDataDescriptor =
-            allowStoredEntriesWithDataDescriptor;
+    // Create an internal buffer before wrapping the input stream.
+    // The previous code used buf.capacity() without initializing buf.
+    this.buf = new byte[8192];
+    this.in = new PushbackInputStream(inputStream, this.buf.length);
+    this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;
     // haven't read anything so far
 }
\ No newline at end of file
