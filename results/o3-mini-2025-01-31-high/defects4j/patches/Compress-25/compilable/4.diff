diff --git a/tmp/658dd680-8513-4dac-a4dc-667c3a769354_buggy.java b/tmp/ea4db88f-c24a-40e5-b231-66edc1dce57e_fixed.java
index 6c0aa19..84c0980 100644
--- a/tmp/658dd680-8513-4dac-a4dc-667c3a769354_buggy.java
+++ b/tmp/ea4db88f-c24a-40e5-b231-66edc1dce57e_fixed.java
@@ -1,20 +1,13 @@
-    /**
-     * @param encoding the encoding to use for file names, use null
-     * for the platform's default encoding
-     * @param useUnicodeExtraFields whether to use InfoZIP Unicode
-     * Extra Fields (if present) to set the file names.
-     * @param allowStoredEntriesWithDataDescriptor whether the stream
-     * will try to read STORED entries that use a data descriptor
-     * @since 1.1
-     */
 public ZipArchiveInputStream(InputStream inputStream,
                              String encoding,
                              boolean useUnicodeExtraFields,
                              boolean allowStoredEntriesWithDataDescriptor) {
     zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
     this.useUnicodeExtraFields = useUnicodeExtraFields;
-        in = new PushbackInputStream(inputStream, buf.capacity());
-        this.allowStoredEntriesWithDataDescriptor =
-            allowStoredEntriesWithDataDescriptor;
+    // We need a pushback buffer that’s a bit larger than our usual buffer
+    // so that when we “unread” extra bytes (such as a data descriptor)
+    // they won’t clobber the actual file data. (See COMPRESS-264.)
+    in = new PushbackInputStream(inputStream, buf.capacity() + 16);
+    this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;
     // haven't read anything so far
 }
\ No newline at end of file
