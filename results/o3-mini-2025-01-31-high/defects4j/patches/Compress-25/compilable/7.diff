diff --git a/tmp/c163a01f-a326-4120-a958-6af8f1588ebe_buggy.java b/tmp/56ae724c-04f8-4103-a151-4d67491c0dee_fixed.java
index 6c0aa19..dc3aae9 100644
--- a/tmp/c163a01f-a326-4120-a958-6af8f1588ebe_buggy.java
+++ b/tmp/56ae724c-04f8-4103-a151-4d67491c0dee_fixed.java
@@ -1,20 +1,17 @@
-    /**
-     * @param encoding the encoding to use for file names, use null
-     * for the platform's default encoding
-     * @param useUnicodeExtraFields whether to use InfoZIP Unicode
-     * Extra Fields (if present) to set the file names.
-     * @param allowStoredEntriesWithDataDescriptor whether the stream
-     * will try to read STORED entries that use a data descriptor
-     * @since 1.1
-     */
 public ZipArchiveInputStream(InputStream inputStream,
                              String encoding,
                              boolean useUnicodeExtraFields,
                              boolean allowStoredEntriesWithDataDescriptor) {
     zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
     this.useUnicodeExtraFields = useUnicodeExtraFields;
-        in = new PushbackInputStream(inputStream, buf.capacity());
-        this.allowStoredEntriesWithDataDescriptor =
-            allowStoredEntriesWithDataDescriptor;
+    int pushbackBufferSize = buf.capacity();
+    // If we are allowed to read stored entries that use a data descriptor,
+    // we must have extra lookahead space to “push back” the extra bytes.
+    if (allowStoredEntriesWithDataDescriptor) {
+        // 16 is the maximum number of extra bytes that might be read for the data descriptor.
+        pushbackBufferSize += 16;
+    }
+    in = new PushbackInputStream(inputStream, pushbackBufferSize);
+    this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;
     // haven't read anything so far
 }
\ No newline at end of file
