diff --git a/tmp/ba1e9a00-f997-4035-92b6-4b6bbd5f45ae_buggy.java b/tmp/de0b7fd4-ea83-41e1-8069-7fac609c5e21_fixed.java
index 01967cc..f898904 100644
--- a/tmp/ba1e9a00-f997-4035-92b6-4b6bbd5f45ae_buggy.java
+++ b/tmp/de0b7fd4-ea83-41e1-8069-7fac609c5e21_fixed.java
@@ -1,35 +1,20 @@
-        /**
-         * Method called to check if the default type handler should be
-         * used for given type.
-         * Note: "natural types" (String, Boolean, Integer, Double) will never
-         * use typing; that is both due to them being concrete and final,
-         * and since actual serializers and deserializers will also ignore any
-         * attempts to enforce typing.
-         */
-        public boolean useForType(JavaType t)
-        {
+public boolean useForType(JavaType t) {
     switch (_appliesFor) {
     case NON_CONCRETE_AND_ARRAYS:
         while (t.isArrayType()) {
             t = t.getContentType();
         }
         // fall through
     case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
+        // Only use default typing for Object and non-concrete types that are not tree models.
         return (t.getRawClass() == Object.class)
-                        || (!t.isConcrete()
-                                // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
-
+                || (!t.isConcrete() && !TreeNode.class.isAssignableFrom(t.getRawClass()));
     case NON_FINAL:
         while (t.isArrayType()) {
             t = t.getContentType();
         }
-                // [Issue#88] Should not apply to JSON tree models:
         return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
     default:
-            //case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
         return (t.getRawClass() == Object.class);
     }
 }
\ No newline at end of file
