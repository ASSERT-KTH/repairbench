diff --git a/tmp/aebc4186-f37a-49ff-921f-372701abbfc4_buggy.java b/tmp/086bc9c6-b5f4-4c8d-b991-34b8ae6cbc74_fixed.java
index 00914da..cd92e68 100644
--- a/tmp/aebc4186-f37a-49ff-921f-372701abbfc4_buggy.java
+++ b/tmp/086bc9c6-b5f4-4c8d-b991-34b8ae6cbc74_fixed.java
@@ -1,17 +1,22 @@
-    // does not recurse.
 private void normalise(Element element) {
+    // Collect non-blank text nodes.
     List<Node> toMove = new ArrayList<Node>();
     for (Node node : element.childNodes) {
         if (node instanceof TextNode) {
             TextNode tn = (TextNode) node;
             if (!tn.isBlank())
                 toMove.add(tn);
         }
     }
 
-        for (Node node: toMove) {
+    // We must move these orphan text nodes into the start of the body,
+    // preserving their original order. To do this we iterate in reverse and “prepend” them.
+    for (int i = toMove.size() - 1; i >= 0; i--) {
+        Node node = toMove.get(i);
         element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+        // By prepending a space and then the text node, we ensure that, when rendered,
+        // the moved text becomes the first part of body (separated from following text by a space)
+        body().prependChild(new TextNode(" ", ""));
+        body().prependChild(node);
     }
 }
\ No newline at end of file
