diff --git a/tmp/057c637d-c56d-491e-a66f-4a3771f49522_buggy.java b/tmp/305999a6-ee85-49ed-b878-280e6edcc867_fixed.java
index 00914da..b578828 100644
--- a/tmp/057c637d-c56d-491e-a66f-4a3771f49522_buggy.java
+++ b/tmp/305999a6-ee85-49ed-b878-280e6edcc867_fixed.java
@@ -1,17 +1,32 @@
-    // does not recurse.
 private void normalise(Element element) {
-        List<Node> toMove = new ArrayList<Node>();
+    // Collect non-blank text nodes from the element’s children.
+    List<Node> toMove = new ArrayList<>();
     for (Node node : element.childNodes) {
         if (node instanceof TextNode) {
             TextNode tn = (TextNode) node;
             if (!tn.isBlank())
                 toMove.add(tn);
         }
     }
+    if (toMove.isEmpty())
+        return;
 
+    // Remove each node from its original parent.
     for (Node node : toMove) {
         element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
     }
+
+    // Build a list of nodes to insert at the start of the body.
+    // We want to preserve the original order and insert a space between successive moved nodes.
+    List<Node> movedNodes = new ArrayList<>();
+    for (int i = 0; i < toMove.size(); i++) {
+        if (i > 0) {
+            movedNodes.add(new TextNode(" ", ""));
+        }
+        movedNodes.add(toMove.get(i));
+    }
+    
+    // Prepend the collected nodes into the body so they appear before the body’s current content.
+    Element body = body();
+    body.insertChildren(0, movedNodes);
 }
\ No newline at end of file
