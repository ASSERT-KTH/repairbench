diff --git a/tmp/f03ef7b0-b391-4ff2-bc0b-e4a5db0c7ec0_buggy.java b/tmp/18a21699-7c52-422c-a8e2-3ffae1b42632_fixed.java
index 2955e62..0ebf2cc 100644
--- a/tmp/f03ef7b0-b391-4ff2-bc0b-e4a5db0c7ec0_buggy.java
+++ b/tmp/18a21699-7c52-422c-a8e2-3ffae1b42632_fixed.java
@@ -1,66 +1,76 @@
 /**
  * @return true if the provided reference and declaration can be safely
  *         inlined according to our criteria
  */
 private boolean canInline(
     Reference declaration,
     Reference initialization,
     Reference reference) {
   if (!isValidDeclaration(declaration)
       || !isValidInitialization(initialization)
       || !isValidReference(reference)) {
     return false;
   }
 
   // If the value is read more than once, skip it.
   // VAR declarations and EXPR_RESULT don't need the value, but other
   // ASSIGN expressions parents do.
   if (declaration != initialization &&
       !initialization.getGrandparent().isExprResult()) {
     return false;
   }
 
   // Be very conservative and do no cross control structures or
   // scope boundaries
   if (declaration.getBasicBlock() != initialization.getBasicBlock()
       || declaration.getBasicBlock() != reference.getBasicBlock()) {
     return false;
   }
 
   // Do not inline into a call node. This would change
   // the context in which it was being called. For example,
   //   var a = b.c;
   //   a();
   // should not be inlined, because it calls a in the context of b
   // rather than the context of the window.
   //   var a = b.c;
   //   f(a)
   // is ok.
   Node value = initialization.getAssignedValue();
   Preconditions.checkState(value != null);
   if (value.isGetProp()
       && reference.getParent().isCall()
       && reference.getParent().getFirstChild() == reference.getNode()) {
     return false;
   }
 
+  // If the value assigned is a function, be extra careful.
+  // In particular, do not inline if it is being called as a subclass
+  // definition or as a singleton getter method.
   if (value.isFunction()) {
     Node callNode = reference.getParent();
-        if (reference.getParent().isCall()) {
+    if (callNode.isCall()) {
       CodingConvention convention = compiler.getCodingConvention();
       // Bug 2388531: Don't inline subclass definitions into class defining
       // calls as this confused class removing logic.
       SubclassRelationship relationship =
           convention.getClassesDefinedByCall(callNode);
       if (relationship != null) {
         return false;
       }
 
-          // issue 668: Don't inline singleton getter methods
-          // calls as this confused class removing logic.
+      // Issue 668: Don't inline singleton getter method calls.
+      // Detect calls of the form foo.getInstance() and avoid inlining them.
+      Node target = callNode.getFirstChild();
+      if (target != null && target.isGetProp()) {
+        Node prop = target.getLastChild();
+        if ("getInstance".equals(prop.getString())) {
+          return false;
+        }
+      }
     }
   }
 
   return canMoveAggressively(value) ||
       canMoveModerately(initialization, reference);
 }
\ No newline at end of file
