diff --git a/tmp/a68e4e61-4004-4865-93ac-7daf9cef50cc_buggy.java b/tmp/98935a09-75a8-4218-b5ce-91bf93884059_fixed.java
index 2955e62..458e616 100644
--- a/tmp/a68e4e61-4004-4865-93ac-7daf9cef50cc_buggy.java
+++ b/tmp/98935a09-75a8-4218-b5ce-91bf93884059_fixed.java
@@ -1,66 +1,72 @@
 /**
  * @return true if the provided reference and declaration can be safely
  *         inlined according to our criteria
  */
 private boolean canInline(
     Reference declaration,
     Reference initialization,
     Reference reference) {
   if (!isValidDeclaration(declaration)
       || !isValidInitialization(initialization)
       || !isValidReference(reference)) {
     return false;
   }
 
   // If the value is read more than once, skip it.
   // VAR declarations and EXPR_RESULT don't need the value, but other
   // ASSIGN expressions parents do.
   if (declaration != initialization &&
       !initialization.getGrandparent().isExprResult()) {
     return false;
   }
 
-      // Be very conservative and do no cross control structures or
-      // scope boundaries
+  // Be very conservative and do no cross control structures or scope boundaries
   if (declaration.getBasicBlock() != initialization.getBasicBlock()
       || declaration.getBasicBlock() != reference.getBasicBlock()) {
     return false;
   }
 
-      // Do not inline into a call node. This would change
-      // the context in which it was being called. For example,
+  // Do not inline into a call node. This would change the context in which it was
+  // being called. For example,
   //   var a = b.c;
   //   a();
-      // should not be inlined, because it calls a in the context of b
-      // rather than the context of the window.
+  // should not be inlined, because it calls a in the context of b rather than the
+  // context of the window.
   //   var a = b.c;
   //   f(a)
   // is ok.
   Node value = initialization.getAssignedValue();
   Preconditions.checkState(value != null);
   if (value.isGetProp()
       && reference.getParent().isCall()
       && reference.getParent().getFirstChild() == reference.getNode()) {
     return false;
   }
 
+  // If the assigned value is a function, we need to be extra careful.
   if (value.isFunction()) {
     Node callNode = reference.getParent();
-        if (reference.getParent().isCall()) {
+    if (callNode.isCall()) {
       CodingConvention convention = compiler.getCodingConvention();
-          // Bug 2388531: Don't inline subclass definitions into class defining
-          // calls as this confused class removing logic.
-          SubclassRelationship relationship =
-              convention.getClassesDefinedByCall(callNode);
+      // Bug 2388531: Don't inline subclass definitions into class defining calls
+      // as this confused class removing logic.
+      SubclassRelationship relationship = convention.getClassesDefinedByCall(callNode);
       if (relationship != null) {
         return false;
       }
 
-          // issue 668: Don't inline singleton getter methods
-          // calls as this confused class removing logic.
+      // Issue 668: Don't inline singleton getter method calls as this confused
+      // class removing logic.
+      Node callee = callNode.getFirstChild();
+      if (callee != null && callee.isGetProp()) {
+        Node property = callee.getLastChild();
+        if (property != null && "getInstance".equals(property.getString())) {
+          return false;
+        }
+      }
     }
   }
 
   return canMoveAggressively(value) ||
          canMoveModerately(initialization, reference);
 }
\ No newline at end of file
