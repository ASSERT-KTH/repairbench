diff --git a/tmp/802a819b-ee6d-419d-8ab8-8cbf2af6c5f6_buggy.java b/tmp/abea1ca9-9ae8-4e1e-9f5b-44807bf85f98_fixed.java
index 1b07d98..a3cc35e 100644
--- a/tmp/802a819b-ee6d-419d-8ab8-8cbf2af6c5f6_buggy.java
+++ b/tmp/abea1ca9-9ae8-4e1e-9f5b-44807bf85f98_fixed.java
@@ -1,76 +1,61 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
-        // Note! Should not skip if `property` null since that'd skip check
-        // for config overrides, in case of root value
-        if (property == null) {
-            return this;
-        }
+    // IMPORTANT: Do not bail out if 'property' is null: root values still need to check config overrides!
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
-        // Simple case first: serialize as numeric timestamp?
-        JsonFormat.Shape shape = format.getShape();
-        if (shape.isNumeric()) {
-            return withFormat(Boolean.TRUE, null);
-        }
-
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
+    // First: if a custom pattern is given, it should take precedence regardless of Shape
     if (format.hasPattern()) {
-            final Locale loc = format.hasLocale()
-                            ? format.getLocale()
-                            : serializers.getLocale();
+        final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();
         SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);
-            TimeZone tz = format.hasTimeZone() ? format.getTimeZone()
-                    : serializers.getTimeZone();
+        final TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone();
         df.setTimeZone(tz);
         return withFormat(Boolean.FALSE, df);
     }
+    // Next check: if no pattern, but shape is numeric, then use numeric timestamp representation.
+    final JsonFormat.Shape shape = format.getShape();
+    if (shape.isNumeric()) {
+        return withFormat(Boolean.TRUE, null);
+    }
     
-        // Otherwise, need one of these changes:
+    // Otherwise, we may need to adjust Locale or TimeZone for string output
     final boolean hasLocale = format.hasLocale();
     final boolean hasTZ = format.hasTimeZone();
     final boolean asString = (shape == JsonFormat.Shape.STRING);
-
     if (!hasLocale && !hasTZ && !asString) {
         return this;
     }
-
     DateFormat df0 = serializers.getConfig().getDateFormat();
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
+    // If using Jackson's own StdDateFormat, we can re-create one with overrides:
     if (df0 instanceof StdDateFormat) {
         StdDateFormat std = (StdDateFormat) df0;
         if (format.hasLocale()) {
             std = std.withLocale(format.getLocale());
         }
         if (format.hasTimeZone()) {
             std = std.withTimeZone(format.getTimeZone());
         }
         return withFormat(Boolean.FALSE, std);
     }
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
+    // Otherwise, we require a SimpleDateFormat to be able to adjust settings.
     if (!(df0 instanceof SimpleDateFormat)) {
         serializers.reportBadDefinition(handledType(), String.format(
             "Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`",
             df0.getClass().getName()));
     }
     SimpleDateFormat df = (SimpleDateFormat) df0;
     if (hasLocale) {
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+        // Need to create a new instance to change Locale settings
         df = new SimpleDateFormat(df.toPattern(), format.getLocale());
     } else {
         df = (SimpleDateFormat) df.clone();
     }
-        TimeZone newTz = format.getTimeZone();
-        boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());
-        if (changeTZ) {
+    final TimeZone newTz = format.getTimeZone();
+    if (newTz != null && !newTz.equals(df.getTimeZone())) {
         df.setTimeZone(newTz);
     }
     return withFormat(Boolean.FALSE, df);
 }
\ No newline at end of file
