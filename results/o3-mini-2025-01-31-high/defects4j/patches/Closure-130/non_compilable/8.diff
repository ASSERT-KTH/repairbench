diff --git a/tmp/e55ff968-34f4-4c21-abb1-f31554e165cf_buggy.java b/tmp/f46b0f57-bc57-4c70-972d-56cc529f4e92_fixed.java
index bb3193c..2b5d066 100644
--- a/tmp/e55ff968-34f4-4c21-abb1-f31554e165cf_buggy.java
+++ b/tmp/f46b0f57-bc57-4c70-972d-56cc529f4e92_fixed.java
@@ -1,52 +1,52 @@
-  /**
-   * For each qualified name N in the global scope, we check if:
-   * (a) No ancestor of N is ever aliased or assigned an unknown value type.
-   *     (If N = "a.b.c", "a" and "a.b" are never aliased).
-   * (b) N has exactly one write, and it lives in the global scope.
-   * (c) N is aliased in a local scope.
-   *
-   * If (a) is true, then GlobalNamespace must know all the writes to N.
-   * If (a) and (b) are true, then N cannot change during the execution of
-   *    a local scope.
-   * If (a) and (b) and (c) are true, then the alias can be inlined if the
-   *    alias obeys the usual rules for how we decide whether a variable is
-   *    inlineable.
-   * @see InlineVariables
-   */
 private void inlineAliases(GlobalNamespace namespace) {
   // Invariant: All the names in the worklist meet condition (a).
   Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());
   while (!workList.isEmpty()) {
     Name name = workList.pop();
 
     // Don't attempt to inline a getter or setter property as a variable.
     if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
       continue;
     }
 
-      if (name.globalSets == 1 && name.localSets == 0 &&
-          name.aliasingGets > 0) {
-        // {@code name} meets condition (b). Find all of its local aliases
-        // and try to inline them.
+    // Only inline aliases for names that have exactly one global write,
+    // no local writes, and that are actually aliased.
+    if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {
+      // We get a copy of the list of references because inlining
+      // may remove some of them.
       List<Ref> refs = Lists.newArrayList(name.getRefs());
       for (Ref ref : refs) {
-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
-            // {@code name} meets condition (c). Try to inline it.
+        // Previously the test was only "ref.scope.isLocal()", but that
+        // would allow inlining a reference that occurs in an inner (nested)
+        // function.  For example, in the code:
+        //
+        //   function f() {
+        //     return function () {
+        //       var args = arguments;
+        //       setTimeout(function() { alert(args); }, 0);
+        //     }
+        //   }
+        //
+        // the alias "args" is defined in one function but used inside a nested
+        // callback. Inlining in that situation would replace "args" with
+        // "arguments" inside the callback – but then "arguments" in the callback
+        // will reference the callback’s own arguments, not those of the enclosing
+        // function. To avoid this, we ensure that we inline only when the alias
+        // usage is in the same scope as the definition.
+        if (ref.type == Type.ALIASING_GET && ref.scope == name.scope) {
           if (inlineAliasIfPossible(ref, namespace)) {
             name.removeRef(ref);
           }
         }
       }
     }
 
-      // Check if {@code name} has any aliases left after the
-      // local-alias-inlining above.
-      if ((name.type == Name.Type.OBJECTLIT ||
-           name.type == Name.Type.FUNCTION) &&
+    // If the name is for an object literal or function and there are no
+    // remaining aliasing gets, then all of its children meet condition (a)
+    // so they can be added to the worklist.
+    if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) &&
         name.aliasingGets == 0 && name.props != null) {
-        // All of {@code name}'s children meet condition (a), so they can be
-        // added to the worklist.
       workList.addAll(name.props);
     }
   }
 }
\ No newline at end of file
