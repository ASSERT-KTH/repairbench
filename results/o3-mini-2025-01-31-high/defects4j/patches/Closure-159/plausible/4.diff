diff --git a/tmp/f0440d1d-6880-4fcd-add4-03a01a40ef0e_buggy.java b/tmp/06b5199e-5085-414b-8756-449855605460_fixed.java
index de9af32..94b7f06 100644
--- a/tmp/f0440d1d-6880-4fcd-add4-03a01a40ef0e_buggy.java
+++ b/tmp/06b5199e-5085-414b-8756-449855605460_fixed.java
@@ -1,18 +1,24 @@
-  /**
-   * @see #findCalledFunctions(Node)
-   */
-  private void findCalledFunctions(
-      Node node, Set<String> changed) {
+private void findCalledFunctions(Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+    Node callee = node.getFirstChild();
+    if (callee.getType() == Token.NAME) {
+      changed.add(callee.getString());
+    } else if (callee.getType() == Token.GETPROP) {
+      // In a call like initialize.call(...), the GETPROP node's last child is the property "call",
+      // and its first child is the function name.
+      Node prop = callee.getLastChild();
+      if (prop != null && "call".equals(prop.getString())) {
+        Node obj = callee.getFirstChild();
+        if (obj != null && obj.getType() == Token.NAME) {
+          changed.add(obj.getString());
+        }
+      }
     }
   }
 
   for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
     findCalledFunctions(c, changed);
   }
 }
\ No newline at end of file
