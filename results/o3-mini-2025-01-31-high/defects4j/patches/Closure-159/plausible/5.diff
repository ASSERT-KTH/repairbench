diff --git a/tmp/ac3db11e-3464-4851-b71f-a0e8c69cda89_buggy.java b/tmp/0d3c0dd6-95fb-4f24-b6a0-8a3475a9acf3_fixed.java
index de9af32..60d5068 100644
--- a/tmp/ac3db11e-3464-4851-b71f-a0e8c69cda89_buggy.java
+++ b/tmp/0d3c0dd6-95fb-4f24-b6a0-8a3475a9acf3_fixed.java
@@ -1,18 +1,22 @@
-  /**
-   * @see #findCalledFunctions(Node)
-   */
-  private void findCalledFunctions(
-      Node node, Set<String> changed) {
+private void findCalledFunctions(Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+    Node callee = node.getFirstChild();
+    if (callee.getType() == Token.NAME) {
+      changed.add(callee.getString());
+    } else if (callee.getType() == Token.GETPROP) {
+      // Handle calls like initialize.call(this, options);
+      Node object = callee.getFirstChild();
+      Node prop = object.getNext();
+      if (prop != null && "call".equals(prop.getString()) && object.getType() == Token.NAME) {
+        changed.add(object.getString());
+      }
     }
   }
   
+  // Recursively traverse all children.
   for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
     findCalledFunctions(c, changed);
   }
 }
\ No newline at end of file
