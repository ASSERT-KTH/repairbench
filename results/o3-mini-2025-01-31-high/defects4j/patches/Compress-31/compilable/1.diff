diff --git a/tmp/04d23e7c-aac1-497b-8e0e-f4b9945ce50c_buggy.java b/tmp/39db3dff-f657-4c5d-85d0-aa9ce53b0b27_fixed.java
index b91f7de..45fa7ce 100644
--- a/tmp/04d23e7c-aac1-497b-8e0e-f4b9945ce50c_buggy.java
+++ b/tmp/39db3dff-f657-4c5d-85d0-aa9ce53b0b27_fixed.java
@@ -1,69 +1,65 @@
 /**
  * Parse an octal string from a buffer.
  *
  * <p>Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.</p>
  *
  * <p>The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).</p>
  *
  * <p>To work-around some tar implementations that insert a
  * leading NUL this method returns 0 if it detects a leading NUL
  * since Commons Compress 1.4.</p>
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if the trailing space/NUL is missing or if an invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        int     end = offset + length;
-        int     start = offset;
-
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
+    int end = offset + length;
+    int start = offset;
     
+    // Work-around for tar implementations that insert a leading NUL.
     if (buffer[start] == 0) {
         return 0L;
     }
     
-        // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+    // The buffer must contain a trailing space or NUL.
+    if (buffer[end - 1] != 0 && buffer[end - 1] != ' ') {
+        throw new IllegalArgumentException("No trailing space or NUL at the end of the field");
+    }
+    
+    // Skip leading spaces.
+    while (start < end && buffer[start] == ' ') {
         start++;
-            } else {
-                break;
-            }
     }
     
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
+    // Trim trailing NULs and spaces.
+    while (start < end && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {
         end--;
-            trailer = buffer[end - 1];
     }
     
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            if (currentByte == 0) {
-                break;
+    // If the entire field is spaces/NULs, return 0.
+    if (start >= end) {
+        return 0L;
     }
-            // CheckStyle:MagicNumber OFF
+    
+    long result = 0;
+    for (int i = start; i < end; i++) {
+        final byte currentByte = buffer[i];
+        // If a character other than '0'..'7' is found, including embedded NULs, throw an exception.
         if (currentByte < '0' || currentByte > '7') {
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        result = (result << 3) + (currentByte - '0'); // convert from ASCII to numeric value
     }
     
     return result;
 }
\ No newline at end of file
