diff --git a/tmp/9d054a3b-2ff4-4021-a730-21bda0d1c824_buggy.java b/tmp/7cc656ad-b79a-47ca-8cc0-64d7651f0c08_fixed.java
index d27c40c..2c85b62 100644
--- a/tmp/9d054a3b-2ff4-4021-a730-21bda0d1c824_buggy.java
+++ b/tmp/7cc656ad-b79a-47ca-8cc0-64d7651f0c08_fixed.java
@@ -1,49 +1,63 @@
 /** Compute two arguments arc tangent of a derivative structure.
  * @param y array holding the first operand
  * @param yOffset offset of the first operand in its array
  * @param x array holding the second operand
  * @param xOffset offset of the second operand in its array
  * @param result array where result must be stored (for
  * two arguments arc tangent the result array <em>cannot</em>
  * be the input array)
  * @param resultOffset offset of the result in its array
  */
 public void atan2(final double[] y, final int yOffset,
                   final double[] x, final int xOffset,
                   final double[] result, final int resultOffset) {
 
+    // Special-case handling for when both x and y are (signed) zero.
+    // In such a case, we force the 0th order value to match Math.atan2,
+    // and set all derivative orders to zero.
+    if (x[xOffset] == 0.0 && y[yOffset] == 0.0) {
+        double v = FastMath.atan2(y[yOffset], x[xOffset]);
+        result[resultOffset] = v;
+        for (int i = 1; i < getSize(); i++) {
+            result[resultOffset + i] = 0.0;
+        }
+        return;
+    }
+
     // compute r = sqrt(x^2+y^2)
     double[] tmp1 = new double[getSize()];
     multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
     double[] tmp2 = new double[getSize()];
     multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
     add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
     rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
-        if (x[xOffset] >= 0) {
-
-            // compute atan2(y, x) = 2 atan(y / (r + x))
+    // Use the correct branch by distinguishing the sign of x.
+    // We consider x to be positive only if either x > 0
+    // or if x is +0 (i.e. 1/x > 0), otherwise we use the negative branch.
+    if (x[xOffset] > 0 || (x[xOffset] == 0.0 && 1.0 / x[xOffset] > 0)) {
+        // For x positive, use the identity:
+        //   atan2(y, x) = 2 * atan( y / (r + x) )
         add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
         divide(y, yOffset, tmp2, 0, tmp1, 0);         // y / (r + x)
         atan(tmp1, 0, tmp2, 0);                       // atan(y / (r + x))
         for (int i = 0; i < tmp2.length; ++i) {
             result[resultOffset + i] = 2 * tmp2[i];   // 2 * atan(y / (r + x))
         }
-
     } else {
-
-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
+        // For x negative we use the formula:
+        //   atan2(y, x) = sign(y)*PI - 2 * atan( y / (r - x) )
         subtract(tmp1, 0, x, xOffset, tmp2, 0);       // r - x
         divide(y, yOffset, tmp2, 0, tmp1, 0);          // y / (r - x)
         atan(tmp1, 0, tmp2, 0);                        // atan(y / (r - x))
-            result[resultOffset] =
-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
+        // Determine the sign of y properly, taking zero sign into account.
+        double sign = ((y[yOffset] > 0) || (y[yOffset] == 0.0 && 1.0 / y[yOffset] > 0)) ? 1.0 : -1.0;
+        result[resultOffset] = sign * FastMath.PI - 2 * tmp2[0];
         for (int i = 1; i < tmp2.length; ++i) {
-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
+            result[resultOffset + i] = -2 * tmp2[i];
         }
-
     }
 
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
+    // (Any other special cases, such as infinities, are assumed to be handled
+    //  in the elementary operations or are not singular for the formulas used.)
 }
\ No newline at end of file
