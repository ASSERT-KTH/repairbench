diff --git a/tmp/e8a29c7f-a4e2-4459-a5e4-7991b843d147_buggy.java b/tmp/3131f2dd-28db-46a5-8c66-96cdf9b8a7ee_fixed.java
index d27c40c..4bb9b0b 100644
--- a/tmp/e8a29c7f-a4e2-4459-a5e4-7991b843d147_buggy.java
+++ b/tmp/3131f2dd-28db-46a5-8c66-96cdf9b8a7ee_fixed.java
@@ -1,49 +1,49 @@
-    /** Compute two arguments arc tangent of a derivative structure.
-     * @param y array holding the first operand
-     * @param yOffset offset of the first operand in its array
-     * @param x array holding the second operand
-     * @param xOffset offset of the second operand in its array
-     * @param result array where result must be stored (for
-     * two arguments arc tangent the result array <em>cannot</em>
-     * be the input array)
-     * @param resultOffset offset of the result in its array
-     */
 public void atan2(final double[] y, final int yOffset,
                   final double[] x, final int xOffset,
                   final double[] result, final int resultOffset) {
 
     // compute r = sqrt(x^2+y^2)
     double[] tmp1 = new double[getSize()];
     multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
     double[] tmp2 = new double[getSize()];
     multiply(y, yOffset, y, yOffset, tmp2, 0);       // y^2
     add(tmp1, 0, tmp2, 0, tmp2, 0);                  // x^2 + y^2
     rootN(tmp2, 0, 2, tmp1, 0);                      // r = sqrt(x^2 + y^2)
 
-        if (x[xOffset] >= 0) {
-
+    // Use the true sign of x. Notice that when x is 0, 1/x distinguishes +0 from -0.
+    if (x[xOffset] > 0.0 || (x[xOffset] == 0.0 && 1.0 / x[xOffset] > 0.0)) {
         // compute atan2(y, x) = 2 atan(y / (r + x))
         add(tmp1, 0, x, xOffset, tmp2, 0);           // r + x
         divide(y, yOffset, tmp2, 0, tmp1, 0);         // y / (r + x)
         atan(tmp1, 0, tmp2, 0);                       // atan(y / (r + x))
         for (int i = 0; i < tmp2.length; ++i) {
             result[resultOffset + i] = 2 * tmp2[i];   // 2 * atan(y / (r + x))
         }
-
     } else {
-
         // compute atan2(y, x) = +/-pi - 2 atan(y / (r - x))
         subtract(tmp1, 0, x, xOffset, tmp2, 0);       // r - x
         divide(y, yOffset, tmp2, 0, tmp1, 0);          // y / (r - x)
         atan(tmp1, 0, tmp2, 0);                        // atan(y / (r - x))
+        // Use FastMath.copySign to choose +pi when y is positive (including +0) and -pi when y is negative.
         result[resultOffset] =
-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
+                (FastMath.copySign(1.0, y[yOffset]) > 0.0 ? FastMath.PI : -FastMath.PI)
+                - 2 * tmp2[0];
         for (int i = 1; i < tmp2.length; ++i) {
-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
+            result[resultOffset + i] = -2 * tmp2[i];
         }
-
     }
 
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
+    // Fix the constant part to handle special cases correctly:
+    // (+0,+0), (+0,-0), (-0,+0), (-0,-0) and cases involving infinities.
+    double realX = x[xOffset];
+    double realY = y[yOffset];
+    if (Double.isNaN(result[resultOffset]) ||
+       (realX == 0.0 && realY == 0.0) ||
+       Double.isInfinite(realX) || Double.isInfinite(realY)) {
+        double theta = Math.atan2(realY, realX);
+        result[resultOffset] = theta;
+        for (int i = 1; i < getSize(); ++i) {
+            result[resultOffset + i] = 0.0;
+        }
+    }
 }
\ No newline at end of file
