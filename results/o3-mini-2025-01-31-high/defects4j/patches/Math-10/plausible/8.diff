diff --git a/tmp/dfeb6f50-1236-44f2-aab8-35372c0e60a8_buggy.java b/tmp/782fab53-a18d-4031-a415-5e7366a4d4a8_fixed.java
index d27c40c..1c55fc7 100644
--- a/tmp/dfeb6f50-1236-44f2-aab8-35372c0e60a8_buggy.java
+++ b/tmp/782fab53-a18d-4031-a415-5e7366a4d4a8_fixed.java
@@ -1,49 +1,51 @@
-    /** Compute two arguments arc tangent of a derivative structure.
-     * @param y array holding the first operand
-     * @param yOffset offset of the first operand in its array
-     * @param x array holding the second operand
-     * @param xOffset offset of the second operand in its array
-     * @param result array where result must be stored (for
-     * two arguments arc tangent the result array <em>cannot</em>
-     * be the input array)
-     * @param resultOffset offset of the result in its array
-     */
 public void atan2(final double[] y, final int yOffset,
                   final double[] x, final int xOffset,
                   final double[] result, final int resultOffset) {
 
-        // compute r = sqrt(x^2+y^2)
+    // First, handle special cases: when both arguments are 0 (with their sign)
+    // or when one argument is infinite. In such cases the result is defined
+    // according to IEEE rules and the derivative part is taken to be 0.
+    double x0 = x[xOffset];
+    double y0 = y[yOffset];
+    if ((x0 == 0.0 && y0 == 0.0) ||
+        Double.isInfinite(x0) || Double.isInfinite(y0)) {
+        double theta = FastMath.atan2(y0, x0);
+        result[resultOffset] = theta;
+        for (int i = 1; i < getSize(); i++) {
+            result[resultOffset + i] = 0.0;
+        }
+        return;
+    }
+
+    // Compute r = sqrt(x^2 + y^2)
     double[] tmp1 = new double[getSize()];
     multiply(x, xOffset, x, xOffset, tmp1, 0);   // x^2
     double[] tmp2 = new double[getSize()];
     multiply(y, yOffset, y, yOffset, tmp2, 0);   // y^2
     add(tmp1, 0, tmp2, 0, tmp2, 0);              // x^2 + y^2
     rootN(tmp2, 0, 2, tmp1, 0);                  // r = sqrt(x^2 + y^2)
 
-        if (x[xOffset] >= 0) {
-
-            // compute atan2(y, x) = 2 atan(y / (r + x))
-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
-            for (int i = 0; i < tmp2.length; ++i) {
+    // Distinguish the branch based on the sign of x.
+    // Note: We must differentiate between +0 and -0. For x, we use the test:
+    // x > 0  OR  (x == 0 and 1.0/x > 0) (since 1.0/+0 is +infinity, while 1.0/(-0) is -infinity)
+    if (x0 > 0 || (x0 == 0.0 && 1.0 / x0 > 0)) {
+        // For non negative x: use atan2(y, x) = 2 atan(y / (r + x))
+        add(tmp1, 0, x, xOffset, tmp2, 0);      // compute r + x
+        divide(y, yOffset, tmp2, 0, tmp1, 0);    // compute y/(r + x)
+        atan(tmp1, 0, tmp2, 0);                  // compute atan( y/(r + x) )
+        for (int i = 0; i < tmp2.length; i++) {
             result[resultOffset + i] = 2 * tmp2[i];  // 2 * atan( y/(r + x) )
         }
-
     } else {
-
-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
-            result[resultOffset] =
-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
-            for (int i = 1; i < tmp2.length; ++i) {
-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
+        // For x < 0: use atan2(y, x) = +/-pi - 2 atan(y / (r - x))
+        subtract(tmp1, 0, x, xOffset, tmp2, 0); // compute r - x
+        divide(y, yOffset, tmp2, 0, tmp1, 0);    // compute y/(r - x)
+        atan(tmp1, 0, tmp2, 0);                  // compute atan( y/(r - x) )
+        // Make sure to choose the correct sign for pi based on the sign of y.
+        boolean yPositive = (y0 > 0 || (y0 == 0.0 && 1.0 / y0 > 0));
+        result[resultOffset] = (yPositive ? FastMath.PI : -FastMath.PI) - 2 * tmp2[0];
+        for (int i = 1; i < tmp2.length; i++) {
+            result[resultOffset + i] = -2 * tmp2[i];
         }
-
     }
-
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
 }
\ No newline at end of file
