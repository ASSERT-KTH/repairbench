diff --git a/tmp/44606ab8-ca5d-47ed-adb7-d0073997f2bc_buggy.java b/tmp/440fc620-316e-4934-aaf9-c80cf2838dc2_fixed.java
index d27c40c..041c2e6 100644
--- a/tmp/44606ab8-ca5d-47ed-adb7-d0073997f2bc_buggy.java
+++ b/tmp/440fc620-316e-4934-aaf9-c80cf2838dc2_fixed.java
@@ -1,49 +1,74 @@
-    /** Compute two arguments arc tangent of a derivative structure.
-     * @param y array holding the first operand
-     * @param yOffset offset of the first operand in its array
-     * @param x array holding the second operand
-     * @param xOffset offset of the second operand in its array
-     * @param result array where result must be stored (for
-     * two arguments arc tangent the result array <em>cannot</em>
-     * be the input array)
-     * @param resultOffset offset of the result in its array
-     */
 public void atan2(final double[] y, final int yOffset,
                   final double[] x, final int xOffset,
                   final double[] result, final int resultOffset) {
+    // Get the “real” (0th-order) values of the operands.
+    final double x0 = x[xOffset];
+    final double y0 = y[yOffset];
 
-        // compute r = sqrt(x^2+y^2)
-        double[] tmp1 = new double[getSize()];
-        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
-        double[] tmp2 = new double[getSize()];
-        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
-        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
-        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
+    // Special case: if both x and y are ±0, use the proper signed convention.
+    if (x0 == 0.0 && y0 == 0.0) {
+        // Positive zero has raw bits 0L, negative zero does not.
+        if (Double.doubleToRawLongBits(x0) == 0L) {
+            result[resultOffset] = y0;  // if x is +0, the result is ±0 (matching y).
+        } else {
+            // if x is -0, choose π when y is +0 and -π when y is -0.
+            result[resultOffset] = (Double.doubleToRawLongBits(y0) == 0L) ? FastMath.PI : -FastMath.PI;
+        }
+        for (int i = 1; i < getSize(); ++i) {
+            result[resultOffset + i] = 0.0;
+        }
+        return;
+    }
 
-        if (x[xOffset] >= 0) {
+    // Special case: if either argument is infinite, rely on FastMath.atan2.
+    if (Double.isInfinite(x0) || Double.isInfinite(y0)) {
+        final double ref = FastMath.atan2(y0, x0);
+        result[resultOffset] = ref;
+        for (int i = 1; i < getSize(); ++i) {
+            result[resultOffset + i] = 0.0;
+        }
+        return;
+    }
 
-            // compute atan2(y, x) = 2 atan(y / (r + x))
-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
+    // Compute r = sqrt(x^2 + y^2)
+    final double[] tmp1 = new double[getSize()];
+    multiply(x, xOffset, x, xOffset, tmp1, 0);      // tmp1 = x^2
+    final double[] tmp2 = new double[getSize()];
+    multiply(y, yOffset, y, yOffset, tmp2, 0);      // tmp2 = y^2
+    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // tmp2 = x^2 + y^2
+    rootN(tmp2, 0, 2, tmp1, 0);                     // tmp1 = r = sqrt(x^2 + y^2)
+
+    // Determine the sign of x (using raw bits so that -0.0 is treated as negative).
+    final boolean xNegative = (Double.doubleToRawLongBits(x0) & 0x8000000000000000L) != 0;
+
+    if (!xNegative) {
+        // For x > +0 (or +0 with nonzero y), use the half-angle formula:
+        // atan2(y, x) = 2 atan(y/(r + x))
+        add(tmp1, 0, x, xOffset, tmp2, 0);          // tmp2 = r + x
+        divide(y, yOffset, tmp2, 0, tmp1, 0);        // tmp1 = y/(r + x)
+        atan(tmp1, 0, tmp2, 0);                      // tmp2 = atan(y/(r + x))
         for (int i = 0; i < tmp2.length; ++i) {
-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
+            result[resultOffset + i] = 2 * tmp2[i];
         }
-
     } else {
-
-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
+        // For x < 0 (including -0 with nonzero y), use:
+        // atan2(y, x) = ±π - 2 atan(y/(r - x))
+        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // tmp2 = r - x  (note: x is negative so r - x = r + |x|)
+        divide(y, yOffset, tmp2, 0, tmp1, 0);        // tmp1 = y/(r - x)
+        atan(tmp1, 0, tmp2, 0);                      // tmp2 = atan(y/(r - x))
         result[resultOffset] =
-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
+                ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0];
         for (int i = 1; i < tmp2.length; ++i) {
-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
+            result[resultOffset + i] = -2 * tmp2[i];
         }
-
     }
 
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
+    // Final safeguard: if something went wrong (result is NaN), revert to FastMath.atan2.
+    if (Double.isNaN(result[resultOffset])) {
+        final double ref = FastMath.atan2(y0, x0);
+        result[resultOffset] = ref;
+        for (int i = 1; i < getSize(); ++i) {
+            result[resultOffset + i] = 0.0;
+        }
+    }
 }
\ No newline at end of file
