diff --git a/tmp/e731e291-7ca9-4dfc-900f-a40801950a39_buggy.java b/tmp/4572d537-322e-489b-94bd-de4fa2bea583_fixed.java
index 0b7c52e..f6d9ee0 100644
--- a/tmp/e731e291-7ca9-4dfc-900f-a40801950a39_buggy.java
+++ b/tmp/4572d537-322e-489b-94bd-de4fa2bea583_fixed.java
@@ -1,27 +1,29 @@
 /**
  * Processes a OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
-      for (Node child = n.getFirstChild();
-          child != null;
-          child = child.getNext()) {
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+    // The property key in an object literal may be a string literal that was
+    // quoted in the source. For disambiguation, we only want to rename properties
+    // that were not quoted. (This avoids renaming external or dictionary properties.)
+    if (child.isQuotedString()) {
+      continue;
+    }
+
     // Maybe STRING, GET, SET
-
-        // We should never see a mix of numbers and strings.
     String name = child.getString();
     T type = typeSystem.getType(getScope(), n, name);
 
     Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
+    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {
       // TODO (user): It doesn't look like the user can do much in this
       // case right now.
       if (propertiesToErrorFor.containsKey(name)) {
         compiler.report(JSError.make(
             t.getSourceName(), child, propertiesToErrorFor.get(name),
             Warnings.INVALIDATION, name,
             (type == null ? "null" : type.toString()), n.toString(), ""));
       }
     }
   }
 }
\ No newline at end of file
