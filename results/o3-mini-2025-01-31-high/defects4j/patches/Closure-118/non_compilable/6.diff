diff --git a/tmp/baac2273-3cb6-43fe-8c3b-f2ab52d3f612_buggy.java b/tmp/c8680049-5d08-4ef5-8644-80a63ec944f1_fixed.java
index 0b7c52e..ad0f788 100644
--- a/tmp/baac2273-3cb6-43fe-8c3b-f2ab52d3f612_buggy.java
+++ b/tmp/c8680049-5d08-4ef5-8644-80a63ec944f1_fixed.java
@@ -1,27 +1,25 @@
 /**
  * Processes a OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
-      for (Node child = n.getFirstChild();
-          child != null;
-          child = child.getNext()) {
-        // Maybe STRING, GET, SET
-
-        // We should never see a mix of numbers and strings.
-        String name = child.getString();
-        T type = typeSystem.getType(getScope(), n, name);
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+    // Because the child could be a plain STRING key or a GET/SET definition,
+    // use the utility to extract the correct property name.
+    String name = NodeUtil.getObjectLitKey(child);
+    // Use the property node (child) rather than the entire object literal (n)
+    // when asking the type system for the type.
+    T type = typeSystem.getType(getScope(), child, name);
 
     Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
+    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {
       // TODO(user): It doesn't look like the user can do much in this
       // case right now.
       if (propertiesToErrorFor.containsKey(name)) {
         compiler.report(JSError.make(
             t.getSourceName(), child, propertiesToErrorFor.get(name),
             Warnings.INVALIDATION, name,
             (type == null ? "null" : type.toString()), n.toString(), ""));
       }
     }
   }
 }
\ No newline at end of file
