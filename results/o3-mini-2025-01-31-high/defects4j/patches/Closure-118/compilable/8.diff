diff --git a/tmp/d94f0802-6484-4444-a0bd-da686fe127d3_buggy.java b/tmp/d3ba220a-641c-4861-a212-b4769f3f2e75_fixed.java
index 0b7c52e..aab9fa8 100644
--- a/tmp/d94f0802-6484-4444-a0bd-da686fe127d3_buggy.java
+++ b/tmp/d3ba220a-641c-4861-a212-b4769f3f2e75_fixed.java
@@ -1,27 +1,28 @@
 /**
-     * Processes a OBJECTLIT node.
+ * Processes an OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
-      for (Node child = n.getFirstChild();
-          child != null;
-          child = child.getNext()) {
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
     // Maybe STRING, GET, SET
 
     // We should never see a mix of numbers and strings.
     String name = child.getString();
-        T type = typeSystem.getType(getScope(), n, name);
+    // Use the parent of the object literal as the context, so that the type
+    // reflects the assignment (e.g. Foo.prototype = { ... }).
+    Node context = (n.getParent() != null) ? n.getParent() : n;
+    T type = typeSystem.getType(getScope(), context, name);
 
     Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
+    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {
       // TODO(user): It doesn't look like the user can do much in this
       // case right now.
       if (propertiesToErrorFor.containsKey(name)) {
         compiler.report(JSError.make(
             t.getSourceName(), child, propertiesToErrorFor.get(name),
             Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
+            (type == null ? "null" : type.toString()),
+            n.toString(), ""));
       }
     }
   }
 }
\ No newline at end of file
