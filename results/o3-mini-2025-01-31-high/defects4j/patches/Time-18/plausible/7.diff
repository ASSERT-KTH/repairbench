diff --git a/tmp/e3fe91d7-9e8d-420f-9b79-04065f0d5559_buggy.java b/tmp/ff806898-f02b-4ca2-b7ea-8b8d13afac55_fixed.java
index be2af16..507243b 100644
--- a/tmp/e3fe91d7-9e8d-420f-9b79-04065f0d5559_buggy.java
+++ b/tmp/ff806898-f02b-4ca2-b7ea-8b8d13afac55_fixed.java
@@ -1,29 +1,38 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
-        throws IllegalArgumentException
-    {
+    throws IllegalArgumentException {
     Chronology base;
     if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                       hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
     
-        // Assume date is Gregorian.
     long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    try {
+        // Try computing using the Gregorian rules.
+        instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                                          hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    } catch (IllegalFieldValueException ex) {
+        // If the Gregorian calculation fails (such as when 1500-02-29 is requested
+        // â€“ which is invalid in Gregorian but valid in Julian), then try using Julian.
+        instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                                       hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+            // The Julian instant is after the cutover, so the requested date falls in the gap.
             throw new IllegalArgumentException("Specified date does not exist");
         }
+        return instant;
+    }
+    
+    // If the Gregorian instant is before the cutover, recompute using the Julian rules.
+    if (instant < iCutoverMillis) {
+        long julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                                                                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        if (julianInstant >= iCutoverMillis) {
+            throw new IllegalArgumentException("Specified date does not exist");
+        }
+        instant = julianInstant;
     }
     return instant;
 }
\ No newline at end of file
