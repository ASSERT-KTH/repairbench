diff --git a/tmp/2f93d407-8044-450f-ac41-c6fb204f8817_buggy.java b/tmp/d5d4b7ce-f157-46f5-a85a-ec40d9c45ac2_fixed.java
index be2af16..a1c1177 100644
--- a/tmp/2f93d407-8044-450f-ac41-c6fb204f8817_buggy.java
+++ b/tmp/d5d4b7ce-f157-46f5-a85a-ec40d9c45ac2_fixed.java
@@ -1,29 +1,35 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
-        Chronology base;
-        if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    Chronology base = getBase();
+    if (base != null) {
+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                       hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
     
-        // Assume date is Gregorian.
     long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    
+    // First try to compute the date using the Gregorian rules.
+    // For dates after the cutover this must succeed.
+    try {
+        instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                                          hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+        if (instant >= iCutoverMillis) {
+            return instant;
+        }
+    } catch (IllegalFieldValueException e) {
+        // If the gregorian calculation fails (for example, 1500-02-29, which is illegal in Gregorian)
+        // then fall through to try the Julian conversion.
+    }
+    
+    // Use the Julian chronology for dates prior to the cutover.
+    instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                                   hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+        // The local date falls in the illegal gap.
         throw new IllegalArgumentException("Specified date does not exist");
     }
-        }
     return instant;
 }
\ No newline at end of file
