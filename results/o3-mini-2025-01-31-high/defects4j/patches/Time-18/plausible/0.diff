diff --git a/tmp/9121ad34-ceb6-4a6f-9e18-d3106e665243_buggy.java b/tmp/42406447-9633-49d1-a355-286a58968c46_fixed.java
index be2af16..c2530fb 100644
--- a/tmp/9121ad34-ceb6-4a6f-9e18-d3106e665243_buggy.java
+++ b/tmp/42406447-9633-49d1-a355-286a58968c46_fixed.java
@@ -1,29 +1,36 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
-        Chronology base;
-        if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    Chronology base = getBase();
+    if (base != null) {
+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                       hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
+    // Determine the local cutover date from the Gregorian chronology.
+    int cutoverYear = iGregorianChronology.year().get(iCutoverMillis);
+    int cutoverMonth = iGregorianChronology.monthOfYear().get(iCutoverMillis);
+    int cutoverDay = iGregorianChronology.dayOfMonth().get(iCutoverMillis);
+
     long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    // If the local date is strictly before the Gregorian cutover date,
+    // then attempt to compute using the Julian chronology.
+    if ((year < cutoverYear) ||
+        (year == cutoverYear && monthOfYear < cutoverMonth) ||
+        (year == cutoverYear && monthOfYear == cutoverMonth && dayOfMonth < cutoverDay)) {
+        instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                                       hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        // If the computed Julian instant ends up being in or after the cutover,
+        // then the local date falls into the illegal cutover gap.
         if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
             throw new IllegalArgumentException("Specified date does not exist");
         }
+    } else {
+        // Otherwise, use Gregorian chronology.
+        instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                                                           hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
     return instant;
 }
\ No newline at end of file
