diff --git a/tmp/a1641ef2-1e84-4597-997c-1c893c27e28c_buggy.java b/tmp/b034fc67-2d64-4ac2-bd3d-9fb9c56fc063_fixed.java
index be2af16..40906a7 100644
--- a/tmp/a1641ef2-1e84-4597-997c-1c893c27e28c_buggy.java
+++ b/tmp/b034fc67-2d64-4ac2-bd3d-9fb9c56fc063_fixed.java
@@ -1,29 +1,57 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
-        Chronology base;
-        if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    Chronology base = getBase();
+    if (base != null) {
+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                       hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
+    // Determine the cutover date components from the Gregorian chronology.
+    int cutoverYear = iGregorianChronology.getYear(iCutoverMillis);
+    int cutoverMonth = iGregorianChronology.getMonthOfYear(iCutoverMillis);
+    int cutoverDay = iGregorianChronology.getDayOfMonth(iCutoverMillis);
+
     long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    boolean useJulian;
+    // If the requested date is before the cutover date (in Gregorian terms), use Julian.
+    if (year < cutoverYear) {
+        useJulian = true;
+    } else if (year > cutoverYear) {
+        useJulian = false;
+    } else { // year == cutoverYear
+        if (monthOfYear < cutoverMonth) {
+            useJulian = true;
+        } else if (monthOfYear > cutoverMonth) {
+            useJulian = false;
+        } else { // same month, decide by day
+            useJulian = dayOfMonth < cutoverDay;
+        }
+    }
+
+    if (useJulian) {
+        instant = iJulianChronology.getDateTimeMillis(
+            year, monthOfYear, dayOfMonth,
+            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        if (instant >= iCutoverMillis) {
+            // This should never happen if the fields represent a valid Julian date.
+            throw new IllegalArgumentException("Specified date does not exist");
+        }
+    } else {
+        instant = iGregorianChronology.getDateTimeMillis(
+            year, monthOfYear, dayOfMonth,
             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+            // The date falls into the gap so recalculate using Julian rules.
+            instant = iJulianChronology.getDateTimeMillis(
+                year, monthOfYear, dayOfMonth,
                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
             if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
                 throw new IllegalArgumentException("Specified date does not exist");
             }
         }
+    }
     return instant;
 }
\ No newline at end of file
