diff --git a/tmp/e592f92b-5d82-4688-8146-33abaffa65f6_buggy.java b/tmp/2a779f9e-ac17-41e0-90e5-fd969e02bb32_fixed.java
index be2af16..f048547 100644
--- a/tmp/e592f92b-5d82-4688-8146-33abaffa65f6_buggy.java
+++ b/tmp/2a779f9e-ac17-41e0-90e5-fd969e02bb32_fixed.java
@@ -1,29 +1,38 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
-        Chronology base;
-        if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    Chronology base = getBase();
+    if (base != null) {
+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                       hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
     long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    try {
+        // Try computing using the Gregorian chronology.
+        // This may succeed for dates that are valid in Gregorian rules.
+        instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                                          hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        // If the computed Gregorian instant is on/after the cutover, it is correct.
         if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+            return instant;
+        }
+        // Otherwise, the date falls before the cutover, so we must use the Julian rules.
+    } catch (IllegalFieldValueException ex) {
+        // Gregorian computation failed.
+        // For example, 1500-02-29 is invalid in the Gregorian calendar,
+        // but is a valid date in the Julian calendar.
+    }
+    
+    // Compute using the Julian chronology.
+    instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                                                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    // If the Julian instant is before the cutover, itâ€™s valid.
+    if (instant < iCutoverMillis) {
+        return instant;
+    }
+    // Otherwise the fields fall into the illegal cutover gap.
     throw new IllegalArgumentException("Specified date does not exist");
 }
\ No newline at end of file
-        }
-        return instant;
-    }
