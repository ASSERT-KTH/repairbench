diff --git a/tmp/c23f9f01-b7b9-4472-950c-7acbbc53ee98_buggy.java b/tmp/918c9ba2-649d-4c44-bc6f-e550a07cd3e4_fixed.java
index be2af16..dd1f826 100644
--- a/tmp/c23f9f01-b7b9-4472-950c-7acbbc53ee98_buggy.java
+++ b/tmp/918c9ba2-649d-4c44-bc6f-e550a07cd3e4_fixed.java
@@ -1,29 +1,36 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
-        throws IllegalArgumentException
-    {
-        Chronology base;
-        if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    throws IllegalArgumentException {
+    Chronology base = getBase();
+    if (base != null) {
+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                       hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    long gregorianMillis = 0L;
+    boolean gregorianValid = false;
+    try {
+        gregorianMillis = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                                                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+        gregorianValid = true;
+    } catch (IllegalFieldValueException ex) {
+        // Gregorian calculation failed. This may occur for dates that are valid in Julian.
+        gregorianValid = false;
+    }
+
+    // If the Gregorian result is valid and the computed instant is on or after the cutover,
+    // then we use the Gregorian result.
+    if (gregorianValid && gregorianMillis >= iCutoverMillis) {
+        return gregorianMillis;
+    }
+
+    // Otherwise, compute the instant using the Julian chronology.
+    long julianMillis = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                                             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+    if (julianMillis >= iCutoverMillis) {
+        // The resulting instant lies in the cutover gap.
         throw new IllegalArgumentException("Specified date does not exist");
     }
-        }
-        return instant;
+    return julianMillis;
 }
\ No newline at end of file
