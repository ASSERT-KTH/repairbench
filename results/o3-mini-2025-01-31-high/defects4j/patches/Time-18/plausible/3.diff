diff --git a/tmp/56b136af-080a-4ad4-bbc3-062045f99c27_buggy.java b/tmp/764cb556-1ce0-4e8e-9637-c7d3d98ef50b_fixed.java
index be2af16..2a1ddaa 100644
--- a/tmp/56b136af-080a-4ad4-bbc3-062045f99c27_buggy.java
+++ b/tmp/764cb556-1ce0-4e8e-9637-c7d3d98ef50b_fixed.java
@@ -1,29 +1,52 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
-        Chronology base;
-        if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    Chronology base = getBase();
+    if (base != null) {
+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                       hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    /*
+     * Try to compute the instant using the Gregorian chronology.
+     * If the provided fields do not represent a valid Gregorian date (such as 1500-02-29),
+     * then catch the exception and, if the date is before the cutover, recalculate using Julian.
+     */
+    try {
+        long instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                                               hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+            // If the Gregorian instant is before the cutover, recalculate using the Julian chronology.
+            long julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                                                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+            if (julianInstant >= iCutoverMillis) {
+                // The fields fall into the illegal gap.
                 throw new IllegalArgumentException("Specified date does not exist");
             }
+            instant = julianInstant;
         }
         return instant;
     } 
+    catch (IllegalFieldValueException ex) {
+        // Determine the cutover date (in the Gregorian chronology)
+        int cutoverYear = iGregorianChronology.year().get(iCutoverMillis);
+        int cutoverMonth = iGregorianChronology.monthOfYear().get(iCutoverMillis);
+        int cutoverDay = iGregorianChronology.dayOfMonth().get(iCutoverMillis);
+
+        // If the provided date is strictly before the cutover date, use the Julian chronology.
+        if (year < cutoverYear ||
+            (year == cutoverYear && (monthOfYear < cutoverMonth ||
+             (monthOfYear == cutoverMonth && dayOfMonth < cutoverDay)))) {
+            long julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                                                                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            if (julianInstant >= iCutoverMillis) {
+                throw new IllegalArgumentException("Specified date does not exist");
+            }
+            return julianInstant;
+        }
+        // Otherwise, rethrow the original exception.
+        throw ex;
+    }
+}
\ No newline at end of file
