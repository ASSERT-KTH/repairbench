diff --git a/tmp/f605bc61-1483-4e23-881d-f76dc4fbdcdc_buggy.java b/tmp/b4bcaa98-8430-49e0-8152-8a7026916d63_fixed.java
index b56897c..60de95d 100644
--- a/tmp/f605bc61-1483-4e23-881d-f76dc4fbdcdc_buggy.java
+++ b/tmp/b4bcaa98-8430-49e0-8152-8a7026916d63_fixed.java
@@ -1,27 +1,31 @@
 @Override
 public boolean apply(Node n) {
-        // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
+  // When the node is null it means we reached an implicit return,
+  // e.g. a function that returns without a return statement.
   if (n == null) {
     return false;
   }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+  // Check function calls with side effects.
   if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
     return true;
   }
 
+  // Check constructor calls with side effects.
   if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
     return true;
   }
   
+  // FIX: Check for delete operations, which have side effects.
+  if (n.isDelProp()) {
+    return true;
+  }
 
+  // Recursively check children unless entering a new CFG node.
   for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
       return true;
     }
   }
   return false;
 }
\ No newline at end of file
