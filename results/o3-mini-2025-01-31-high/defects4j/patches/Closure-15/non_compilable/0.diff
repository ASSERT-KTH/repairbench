diff --git a/tmp/4567cdd6-120a-4c0a-a3b6-340ae922c880_buggy.java b/tmp/f06c911f-16a9-4509-82e8-e3ae08d0af2a_fixed.java
index b56897c..33a7a07 100644
--- a/tmp/4567cdd6-120a-4c0a-a3b6-340ae922c880_buggy.java
+++ b/tmp/f06c911f-16a9-4509-82e8-e3ae08d0af2a_fixed.java
@@ -1,27 +1,31 @@
 @Override
 public boolean apply(Node n) {
-        // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
+  // When the node is null it means we reached the implicit return
+  // (i.e. a missing return statement)
   if (n == null) {
     return false;
   }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+  // Check for function calls that have side effects.
   if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
     return true;
   }
 
+  // Check for constructor calls that have side effects.
   if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
     return true;
   }
 
+  // Check for delete operations, which are side-effecting.
+  if (n.isDelProp() || n.isDelElem()) {
+    return true;
+  }
 
+  // Recursively traverse the children, except when entering a new CFG node.
   for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
       return true;
     }
   }
   return false;
 }
\ No newline at end of file
