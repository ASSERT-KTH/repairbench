diff --git a/tmp/1805c71c-6212-4123-b8b5-07f133a55e2b_buggy.java b/tmp/a9f69ba9-c8f6-4e85-80b0-abfc30dc6549_fixed.java
index b56897c..11704dc 100644
--- a/tmp/1805c71c-6212-4123-b8b5-07f133a55e2b_buggy.java
+++ b/tmp/a9f69ba9-c8f6-4e85-80b0-abfc30dc6549_fixed.java
@@ -1,27 +1,31 @@
 @Override
 public boolean apply(Node n) {
-        // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
+  // When the node is null it means we reached the implicit return.
   if (n == null) {
     return false;
   }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+  // If we encounter a function call that might have side effects,
+  // then we cannot safely inline.
   if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
     return true;
   }
 
+  // Likewise, if a constructor call might have side effects, do not inline.
   if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
     return true;
   }
 
+  // If we see a delete operation, it is a mutation and so we must not inline.
+  if (n.isDel()) {
+    return true;
+  }
 
+  // Recursively scan the children unless we are about to enter a new CFG node.
   for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
       return true;
     }
   }
   return false;
 }
\ No newline at end of file
