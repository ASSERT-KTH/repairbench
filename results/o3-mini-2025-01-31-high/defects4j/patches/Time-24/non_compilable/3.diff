diff --git a/tmp/6522d47c-23d9-4dad-b8bf-0e974603b9c1_buggy.java b/tmp/00285b3c-f57d-4e77-8415-00ad65744a63_fixed.java
index 99d6a44..e787018 100644
--- a/tmp/6522d47c-23d9-4dad-b8bf-0e974603b9c1_buggy.java
+++ b/tmp/00285b3c-f57d-4e77-8415-00ad65744a63_fixed.java
@@ -1,58 +1,65 @@
-    /**
-     * Computes the parsed datetime by setting the saved fields.
-     * This method is idempotent, but it is not thread-safe.
-     *
-     * @param resetFields false by default, but when true, unsaved field values are cleared
-     * @param text optional text being parsed, to be included in any error message
-     * @return milliseconds since 1970-01-01T00:00:00Z
-     * @throws IllegalArgumentException if any field is out of range
-     * @since 1.3
-     */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
+
+    // If no year or weekyear has been provided, add a default.
     if (count > 0) {
-            // alter base year for parsing if first field is month or day
-            DurationField months = DurationFieldType.months().getField(iChrono);
-            DurationField days = DurationFieldType.days().getField(iChrono);
-            DurationField first = savedFields[0].iField.getDurationField();
-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
+        boolean hasYear = false;
+        boolean hasWeekyear = false;
+        boolean hasWeekOfWeekyear = false;
+        for (int i = 0; i < count; i++) {
+            DateTimeField field = savedFields[i].iField;
+            DateTimeFieldType type = field.getType();
+            if (DateTimeFieldType.year().equals(type)) {
+                hasYear = true;
+            } else if (DateTimeFieldType.weekyear().equals(type)) {
+                hasWeekyear = true;
+            } else if (DateTimeFieldType.weekOfWeekyear().equals(type)) {
+                hasWeekOfWeekyear = true;
+            }
+        }
+        if (!hasYear && !hasWeekyear) {
+            // When the week-of-weekyear field is present we want to use weekyear.
+            if (hasWeekOfWeekyear) {
+                int defaultWeekyear = iChrono.weekyear().get(iMillis);
+                saveField(DateTimeFieldType.weekyear(), defaultWeekyear);
+            } else {
                 saveField(DateTimeFieldType.year(), iDefaultYear);
+            }
             return computeMillis(resetFields, text);
         }
     }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
 
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
-                String message =
-                    "Illegal instant due to time zone offset transition (" + iZone + ')';
+            String message = "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
 
     return millis;
 }
\ No newline at end of file
