diff --git a/tmp/ed2e2801-61be-4aad-8691-5cb85f7ada66_buggy.java b/tmp/55a3e732-fb24-4609-8b96-57ff87a72b33_fixed.java
index 99d6a44..2b00033 100644
--- a/tmp/ed2e2801-61be-4aad-8691-5cb85f7ada66_buggy.java
+++ b/tmp/55a3e732-fb24-4609-8b96-57ff87a72b33_fixed.java
@@ -1,58 +1,70 @@
-    /**
-     * Computes the parsed datetime by setting the saved fields.
-     * This method is idempotent, but it is not thread-safe.
-     *
-     * @param resetFields false by default, but when true, unsaved field values are cleared
-     * @param text optional text being parsed, to be included in any error message
-     * @return milliseconds since 1970-01-01T00:00:00Z
-     * @throws IllegalArgumentException if any field is out of range
-     * @since 1.3
-     */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
     if (count > 0) {
-            // alter base year for parsing if first field is month or day
+        // For fields whose duration falls between months and days, we need a default
+        // “year‐anchor” value. However, if the parsed input already produced a
+        // calendar year or a weekyear then no default is necessary.
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days = DurationFieldType.days().getField(iChrono);
         DurationField first = savedFields[0].iField.getDurationField();
         if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
+            boolean foundYear = false;
+            boolean foundWeekyear = false;
+            boolean foundWeekOfWeekyear = false;
+            for (int i = 0; i < count; i++) {
+                DateTimeFieldType type = savedFields[i].iField.getType();
+                if (type == DateTimeFieldType.year()) {
+                    foundYear = true;
+                } else if (type == DateTimeFieldType.weekyear()) {
+                    foundWeekyear = true;
+                } else if (type == DateTimeFieldType.weekOfWeekyear()) {
+                    foundWeekOfWeekyear = true;
+                }
+            }
+            // Only add a default if no year or weekyear field was explicitly parsed.
+            if (!foundYear && !foundWeekyear) {
+                // If the format includes a week-of-weekyear token then use a weekyear default.
+                if (foundWeekOfWeekyear) {
+                    saveField(DateTimeFieldType.weekyear(), iDefaultYear);
+                } else {
                     saveField(DateTimeFieldType.year(), iDefaultYear);
+                }
+            }
             return computeMillis(resetFields, text);
         }
     }
 
     long millis = iMillis;
     try {
-            for (int i = 0; i < count; i++) {
-                millis = savedFields[i].set(millis, resetFields);
+        for (int i = 0; i < iSavedFieldsCount; i++) {
+            millis = iSavedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
     
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
-                String message =
-                    "Illegal instant due to time zone offset transition (" + iZone + ')';
+            String message = "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
     
     return millis;
 }
\ No newline at end of file
