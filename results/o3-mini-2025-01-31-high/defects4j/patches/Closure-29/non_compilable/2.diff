diff --git a/tmp/bef7eb82-9594-4b0c-b824-9d769160ffe3_buggy.java b/tmp/22d6ba35-c8f2-48a5-891d-5e128c0421f5_fixed.java
index be9c8a3..cca92e7 100644
--- a/tmp/bef7eb82-9594-4b0c-b824-9d769160ffe3_buggy.java
+++ b/tmp/22d6ba35-c8f2-48a5-891d-5e128c0421f5_fixed.java
@@ -1,94 +1,91 @@
-    /**
-     * Counts the number of direct (full) references to an object.
-     * Specifically we check for references of the following type:
-     * <pre>
-     *   x;
-     *   x.fn();
-     * </pre>
-     */
 private boolean isInlinableObject(List<Reference> refs) {
   boolean ret = false;
+  // We'll compute a union of “allowed” property names that the object literal
+  // “defines” (either explicitly via an assignment of an object literal or via an
+  // explicit property write later).  Any “read” of a property not in this set
+  // causes us to bail out.
+  Set<String> allowedProps = new HashSet<>();
+
   for (Reference ref : refs) {
     Node name = ref.getNode();
     Node parent = ref.getParent();
     Node gramps = ref.getGrandparent();
 
-        // Ignore indirect references, like x.y (except x.y(), since
-        // the function referenced by y might reference 'this').
-        //
     if (parent.isGetProp()) {
+      // Our assumption is that for a property access, the first child of the getProp
+      // is the variable reference.
       Preconditions.checkState(parent.getFirstChild() == name);
-          // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
+      // If the property’s value is being used as a function “this” (i.e. it’s the call
+      // target) then we can’t inline.
+      if (gramps.isCall() && gramps.getFirstChild() == parent) {
         return false;
       }
-
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
+      // Distinguish property writes from property reads.
+      if (NodeUtil.isAssignmentOp(gramps) && gramps.getFirstChild() == parent) {
+        // This is a property assignment like: x.foo = <expr>.
+        Node propNode = parent.getLastChild();
+        if (!propNode.isString()) {
+          return false;
+        }
+        allowedProps.add(propNode.getString());
         continue;
+      } else {
+        // Otherwise, it is a property read.  Bail if the property isn’t one that has been
+        // “defined” by one of the object literal assignments or a later property write.
+        Node propNode = parent.getLastChild();
+        if (!propNode.isString()) {
+          return false;
+        }
+        String prop = propNode.getString();
+        if (!allowedProps.contains(prop)) {
+          return false;
+        }
+        continue;
+      }
     }
 
-        // Only rewrite VAR declarations or simple assignment statements
+    // Only rewrite VAR declarations or simple assignment statements.
     if (!isVarOrAssignExprLhs(name)) {
       return false;
     }
 
     Node val = ref.getAssignedValue();
     if (val == null) {
-          // A var with no assignment.
+      // A variable declaration with no initializer.
       continue;
     }
 
-        // We're looking for object literal assignments only.
+    // We only want to inline assignments that are object literals.
     if (!val.isObjectLit()) {
       return false;
     }
 
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
-            // ES5 get/set not supported.
+    // Process every property in the object literal.
+    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+      if (child.isGetterDef() || child.isSetterDef()) {
+        // ES5 getters/setters are not supported.
         return false;
       }
 
+      // Record the property name as “defined” by the literal.
+      String prop = child.getString();
+      allowedProps.add(prop);
 
       Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
+      // Make sure that this literal’s property value is not a self reference.
       for (Reference t : refs) {
         Node refNode = t.getParent();
         while (!NodeUtil.isStatementBlock(refNode)) {
           if (refNode == childVal) {
-                // There's a self-referential assignment
+            // Self-referential assignment detected.
             return false;
           }
           refNode = refNode.getParent();
         }
       }
     }
-
-
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
+    // At least one assignment reference was acceptable.
     ret = true;
   }
   return ret;
 }
\ No newline at end of file
