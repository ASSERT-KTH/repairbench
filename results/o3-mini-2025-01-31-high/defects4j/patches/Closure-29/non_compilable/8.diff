diff --git a/tmp/d1889bc5-b2da-4755-b348-45d7af96c86b_buggy.java b/tmp/089fa62f-60bc-4b9a-a4ec-d51a4b22161b_fixed.java
index be9c8a3..8b60856 100644
--- a/tmp/d1889bc5-b2da-4755-b348-45d7af96c86b_buggy.java
+++ b/tmp/089fa62f-60bc-4b9a-a4ec-d51a4b22161b_fixed.java
@@ -1,94 +1,113 @@
-    /**
-     * Counts the number of direct (full) references to an object.
-     * Specifically we check for references of the following type:
-     * <pre>
-     *   x;
-     *   x.fn();
-     * </pre>
-     */
 private boolean isInlinableObject(List<Reference> refs) {
-      boolean ret = false;
+  // The idea is to “lock‐in” a single object literal initialization and
+  // then check that every other use of the variable is “componentized” – that is,
+  // it only accesses or updates properties. In addition, when the object literal
+  // is not “shaped” (i.e. it’s empty) we allow new properties to be “picked up”
+  // on GETPROP reads. Otherwise, a GETPROP read must request a property that
+  // is already in the literal (or later assigned to).
+  Node candidateLiteral = null;
+  int numLiteralAssignments = 0;
+  // The set of property names that we suppose the inlined object “owns.”
+  Set<String> props = new HashSet<>();
+
+  // First, look for a full (non-getprop) assignment of an object literal.
   for (Reference ref : refs) {
     Node name = ref.getNode();
     Node parent = ref.getParent();
-        Node gramps = ref.getGrandparent();
-
-        // Ignore indirect references, like x.y (except x.y(), since
-        // the function referenced by y might reference 'this').
-        //
-        if (parent.isGetProp()) {
-          Preconditions.checkState(parent.getFirstChild() == name);
-          // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
-            return false;
-          }
-
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
-          continue;
-        }
-
-        // Only rewrite VAR declarations or simple assignment statements
-        if (!isVarOrAssignExprLhs(name)) {
-           return false;
-        }
-
+    if (!parent.isGetProp() && isVarOrAssignExprLhs(name)) {
       Node val = ref.getAssignedValue();
-        if (val == null) {
-          // A var with no assignment.
-          continue;
-        }
-
-        // We're looking for object literal assignments only.
+      if (val != null) {
+        // We only allow assignments to an object literal.
         if (!val.isObjectLit()) {
           return false;
         }
-
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
-            // ES5 get/set not supported.
+        candidateLiteral = val;
+        numLiteralAssignments++;
+        // Record the keys present in the literal.
+        for (Node child = candidateLiteral.getFirstChild(); child != null; child = child.getNext()) {
+          // ES5 getters/setters aren’t supported.
+          if (child.isGetterDef() || child.isSetterDef()) {
             return false;
           }
+          // Ideally the property key is a string.
+          if (!child.hasString()) {
+            return false;
+          }
+          props.add(child.getString());
           
-
+          // Check for any self-referential assignment:
           Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
           for (Reference t : refs) {
             Node refNode = t.getParent();
-            while (!NodeUtil.isStatementBlock(refNode)) {
+            // Walk upward until we hit a statement block.
+            while (refNode != null && !NodeUtil.isStatementBlock(refNode)) {
               if (refNode == childVal) {
-                // There's a self-referential assignment
                 return false;
               }
               refNode = refNode.getParent();
             }
           }
         }
+      }
+    }
+  }
+
+  // Must have exactly one object literal assignment to inline.
+  if (numLiteralAssignments != 1 || candidateLiteral == null) {
+    return false;
+  }
+  
+  // Now go through every reference.
+  for (Reference ref : refs) {
+    Node name = ref.getNode();
+    Node parent = ref.getParent();
+    Node gramps = ref.getGrandparent();
+    
+    // If the reference is used as a property access (e.g. x.someProp)
+    if (parent.isGetProp()) {
+      // Make sure that the GETPROP node is well‐formed.
+      Preconditions.checkState(parent.getFirstChild() == name);
+      // If this GETPROP is being used as the target of a call (e.g. x.fn()),
+      // then we cannot inline it.
+      if (gramps != null && gramps.isCall() && gramps.getFirstChild() == parent) {
+        return false;
+      }
       
+      // Grab the property name.
+      Node propNameNode = parent.getLastChild();
+      if (!propNameNode.isString()) {
+        return false;
+      }
+      String propName = propNameNode.getString();
+
+      // Determine whether this GETPROP is part of an assignment.
+      boolean isPropAssignment = (gramps != null && gramps.isAssign() && gramps.getFirstChild() == parent);
       
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
-        ret = true;
+      if (isPropAssignment) {
+        // For a property assignment like "x.foo = ...", add/update the property.
+        props.add(propName);
+      } else {
+        // For a property “read” access:
+        // • If the literal was originally empty, then we “pick up” the property.
+        // • Otherwise the property must already appear.
+        if (candidateLiteral.getFirstChild() == null) {
+          props.add(propName);
+        } else if (!props.contains(propName)) {
+          return false;
+        }
+      }
+    } else {
+      // Otherwise the reference must be to a VAR declaration or simple assignment.
+      if (!isVarOrAssignExprLhs(name)) {
+         return false;
       }
-      return ret;
+      Node val = ref.getAssignedValue();
+      // If there is an assignment, it must be an object literal.
+      if (val != null && !val.isObjectLit()) {
+         return false;
+      }
+    }
+  }
+  
+  return true;
 }
\ No newline at end of file
