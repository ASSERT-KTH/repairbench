diff --git a/tmp/ada3e697-9bf5-4f53-8878-7cc0edfec31b_buggy.java b/tmp/96720c64-fb7d-4847-93ff-7d6ae5908785_fixed.java
index 2573d30..af0cd20 100644
--- a/tmp/ada3e697-9bf5-4f53-8878-7cc0edfec31b_buggy.java
+++ b/tmp/96720c64-fb7d-4847-93ff-7d6ae5908785_fixed.java
@@ -1,20 +1,26 @@
 /**
  * Checks name referenced in node to determine if it might have
  * changed.
  * @return Whether the replacement can be made.
  */
 private boolean isSafeReplacement(Node node, Node replacement) {
   // No checks are needed for simple names.
   if (node.isName()) {
     return true;
   }
   Preconditions.checkArgument(node.isGetProp());
   
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+  // Traverse left through the getProp chain to find the underlying name.
+  Node current = node;
+  // If it is a property access, then its first child might itself be a getProp.
+  while (current != null && current.isGetProp()) {
+    current = current.getFirstChild();
+  }
+  
+  // If we found a name and that name is later assigned to, then it's not safe.
+  if (current != null && current.isName() && isNameAssignedTo(current.getString(), replacement)) {
     return false;
   }
   
   return true;
 }
\ No newline at end of file
