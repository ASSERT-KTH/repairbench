diff --git a/tmp/538c2980-cb29-45e3-ae8b-3aa5bf5e7a46_buggy.java b/tmp/99e54030-1946-4718-ac35-780b7edbc48b_fixed.java
index 2573d30..5bc2f33 100644
--- a/tmp/538c2980-cb29-45e3-ae8b-3aa5bf5e7a46_buggy.java
+++ b/tmp/99e54030-1946-4718-ac35-780b7edbc48b_fixed.java
@@ -1,20 +1,21 @@
-  /**
-   * Checks name referenced in node to determine if it might have
-   * changed.
-   * @return Whether the replacement can be made.
-   */
 private boolean isSafeReplacement(Node node, Node replacement) {
   // No checks are needed for simple names.
   if (node.isName()) {
     return true;
   }
   Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+  // In a chained property access (e.g. x.parentNode.parentNode),
+  // traverse down to the leftmost (base) node.
+  Node target = node.getFirstChild();
+  while (target.isGetProp()) {
+    target = target.getFirstChild();
+  }
+
+  // If the base node is a name that is assigned somewhere in "replacement",
+  // then the replacement is unsafe.
+  if (target.isName() && isNameAssignedTo(target.getString(), replacement)) {
     return false;
   }
-
   return true;
 }
\ No newline at end of file
