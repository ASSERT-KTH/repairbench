diff --git a/tmp/7915e6c5-6e6f-4129-a062-9dc61255e6bb_buggy.java b/tmp/a4325777-b47d-49a0-a4c8-ab4fd0ee5549_fixed.java
index 2573d30..f3c86a5 100644
--- a/tmp/7915e6c5-6e6f-4129-a062-9dc61255e6bb_buggy.java
+++ b/tmp/a4325777-b47d-49a0-a4c8-ab4fd0ee5549_fixed.java
@@ -1,20 +1,21 @@
-  /**
-   * Checks name referenced in node to determine if it might have
-   * changed.
-   * @return Whether the replacement can be made.
-   */
 private boolean isSafeReplacement(Node node, Node replacement) {
   // No checks are needed for simple names.
   if (node.isName()) {
     return true;
   }
   Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+  // Instead of checking only one level, we need to descend all the way
+  // to the leftmost node (the base of any property chain).
+  Node base = node.getFirstChild();
+  while (base.isGetProp()) {
+    base = base.getFirstChild();
+  }
+
+  // If the base node is a name and that name is assigned to,
+  // it may have changed, so the replacement is unsafe.
+  if (base.isName() && isNameAssignedTo(base.getString(), replacement)) {
     return false;
   }
-
   return true;
 }
\ No newline at end of file
