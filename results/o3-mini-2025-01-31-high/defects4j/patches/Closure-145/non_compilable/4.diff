diff --git a/tmp/4ce6eef2-c8ab-477a-8c7f-0581eedeb059_buggy.java b/tmp/57adc2ff-7e78-4e70-9e55-c567ace53bc9_fixed.java
index 57f69c5..555ee10 100644
--- a/tmp/4ce6eef2-c8ab-477a-8c7f-0581eedeb059_buggy.java
+++ b/tmp/57adc2ff-7e78-4e70-9e55-c567ace53bc9_fixed.java
@@ -1,12 +1,22 @@
-  /**
-   * @return Whether the Node is a DO or FUNCTION (with or without
-   * labels).
-   */
 private boolean isOneExactlyFunctionOrDo(Node n) {
-        // For labels with block children, we need to ensure that a
-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs 
-        // are skipped. 
-          // Either a empty statement or an block with more than one child,
-          // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
+  if (n == null) {
+    return false;
+  }
+  // If we have a block with exactly one child, use that child’s info.
+  if (n.getType() == Token.BLOCK) {
+    return n.getChildCount() == 1 && isOneExactlyFunctionOrDo(n.getFirstChild());
+  }
+  // For labels, if the label’s child is a block then we must not count it
+  // as “one exactly” so that extra braces will be preserved.
+  if (n.getType() == Token.LABEL) {
+    Node child = n.getLastChild();
+    if (child != null && child.getType() == Token.BLOCK) {
+      return false;
+    }
+    return isOneExactlyFunctionOrDo(n.getOnlyChild());
+  }
+  // Originally this function returned true if n was a FUNCTION or DO.
+  // However, to work around Safari/IE bugs we now want to force extra braces
+  // when the statement is a function or do loop.
+  return n.getType() != Token.FUNCTION && n.getType() != Token.DO;
 }
\ No newline at end of file
