diff --git a/tmp/9d253b66-9d79-408d-b44f-399487f32c66_buggy.java b/tmp/71db1013-18bb-4f67-92e9-8cec1d24b670_fixed.java
index abe09ae..37af589 100644
--- a/tmp/9d253b66-9d79-408d-b44f-399487f32c66_buggy.java
+++ b/tmp/71db1013-18bb-4f67-92e9-8cec1d24b670_fixed.java
@@ -1,57 +1,51 @@
 @SuppressWarnings("unchecked")
 @Override
-    public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
-    {
-        // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:
+public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
     String text = p.getValueAsString();
     if (text != null) { // has String representation
-            if (text.length() == 0 || (text = text.trim()).length() == 0) {
-                // 04-Feb-2013, tatu: Usually should become null; but not always
+        text = text.trim();
+        if (text.length() == 0) {
+            // empty String: delegate to the empty-string deserializer
             return _deserializeFromEmptyString();
         }
         Exception cause = null;
         try {
-                // 19-May-2017, tatu: Used to require non-null result (assuming `null`
-                //    indicated error; but that seems wrong. Should be able to return
-                //    `null` as value.
-                if (_deserialize(text, ctxt) != null) {
-                return _deserialize(text, ctxt);
-                }
+            // Try to deserialize and return the result (even if it is null)
+            T result = _deserialize(text, ctxt);
+            return result;
         } catch (IllegalArgumentException iae) {
             cause = iae;
         } catch (MalformedURLException me) {
             cause = me;
         }
+        // Allow a ProblemHandler a chance to handle the problem:
+        T fallback = (T) ctxt.handleWeirdStringValue(_valueClass, text, "not a valid textual representation", cause);
+        if (fallback != null) {
+            return fallback;
+        }
         String msg = "not a valid textual representation";
-            if (cause != null) {
-                String m2 = cause.getMessage();
-                if (m2 != null) {
-                    msg = msg + ", problem: "+m2;
+        if (cause != null && cause.getMessage() != null) {
+            msg += ", problem: " + cause.getMessage();
         }
-            }
-            // 05-May-2016, tatu: Unlike most usage, this seems legit, so...
         JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);
         if (cause != null) {
             e.initCause(cause);
         }
         throw e;
-            // nothing to do here, yet? We'll fail anyway
     }
     JsonToken t = p.getCurrentToken();
-        // [databind#381]
     if (t == JsonToken.START_ARRAY) {
         return _deserializeFromArray(p, ctxt);
     }
     if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
-            // Trivial cases; null to null, instance of type itself returned as is
         Object ob = p.getEmbeddedObject();
         if (ob == null) {
             return null;
         }
         if (_valueClass.isAssignableFrom(ob.getClass())) {
             return (T) ob;
         }
         return _deserializeEmbedded(ob, ctxt);
     }
     return (T) ctxt.handleUnexpectedToken(_valueClass, p);
 }
\ No newline at end of file
