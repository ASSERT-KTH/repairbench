diff --git a/tmp/9d071e85-bba4-4959-a3ac-fc5942dc89dc_buggy.java b/tmp/81cc4c2b-4dc9-4706-9cfb-ec7d12a2bb47_fixed.java
index 25ca093..c92e332 100644
--- a/tmp/9d071e85-bba4-4959-a3ac-fc5942dc89dc_buggy.java
+++ b/tmp/81cc4c2b-4dc9-4706-9cfb-ec7d12a2bb47_fixed.java
@@ -1,52 +1,98 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
+    // Save the original position for later rewinding.
+    int initialPosition = byteData.position();
+    
+    // --- BOM Detection ---
+    String bomCharset = null;
+    int bomLength = 0;
+    ByteBuffer dup = byteData.duplicate();
+    int headerLen = Math.min(4, dup.remaining());
+    byte[] header = new byte[headerLen];
+    dup.get(header);
+    
+    // Check for UTF-32BE: 00 00 FE FF
+    if (headerLen >= 4) {
+        if (header[0] == 0x00 && header[1] == 0x00 &&
+            (header[2] & 0xFF) == 0xFE && (header[3] & 0xFF) == 0xFF) {
+            bomCharset = "UTF-32BE";
+            bomLength = 4;
+        }
+        // Check for UTF-32LE: FF FE 00 00
+        else if ((header[0] & 0xFF) == 0xFF && (header[1] & 0xFF) == 0xFE &&
+                 header[2] == 0x00 && header[3] == 0x00) {
+            bomCharset = "UTF-32LE";
+            bomLength = 4;
+        }
+    }
+    // Check for UTF-8: EF BB BF
+    if (bomCharset == null && headerLen >= 3) {
+        if ((header[0] & 0xFF) == 0xEF && (header[1] & 0xFF) == 0xBB && (header[2] & 0xFF) == 0xBF) {
+            bomCharset = "UTF-8";
+            bomLength = 3;
+        }
+    }
+    // Check for UTF-16 BOMs: FE FF (BE) or FF FE (LE)
+    if (bomCharset == null && headerLen >= 2) {
+        if ((header[0] & 0xFF) == 0xFE && (header[1] & 0xFF) == 0xFF) {
+            bomCharset = "UTF-16BE";
+            bomLength = 2;
+        } else if ((header[0] & 0xFF) == 0xFF && (header[1] & 0xFF) == 0xFE) {
+            bomCharset = "UTF-16LE";
+            bomLength = 2;
+        }
+    }
+    
+    // If a BOM was found, it overrides any supplied charset.
+    if (bomCharset != null) {
+        charsetName = bomCharset;
+        // Skip the BOM in the actual byte data.
+        byteData.position(initialPosition + bomLength);
+    }
+    
+    // --- Decoding and Meta-Detection ---
     String docData;
     Document doc = null;
     
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    if (charsetName == null) {
+        // No charset was specified and no BOM detected, so use the default.
+        charsetName = defaultCharset; // assume defaultCharset is defined elsewhere, e.g. "UTF-8"
+        docData = Charset.forName(charsetName).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
+        
+        // Look for a meta tag that might specify the charset.
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
-                if (meta.hasAttr("http-equiv")) {
+            if (meta.hasAttr("http-equiv"))
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
-                }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
+                    if (Charset.isSupported(meta.attr("charset")))
                         foundCharset = meta.attr("charset");
-                        }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(charsetName)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
+                // Rewind and skip any BOM (if present) before re-decoding.
                 byteData.rewind();
+                if (bomLength > 0)
+                    byteData.position(initialPosition + bomLength);
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+    } else {
+        // Charset was either provided or set by the BOM.
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+    
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
+    
     return doc;
 }
\ No newline at end of file
