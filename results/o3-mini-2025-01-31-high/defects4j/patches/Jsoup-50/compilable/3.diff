diff --git a/tmp/a741bde0-1955-47a7-a40e-472f15dd2c11_buggy.java b/tmp/c516cbee-e08c-4900-94a3-274457926e73_fixed.java
index 25ca093..8745e3a 100644
--- a/tmp/a741bde0-1955-47a7-a40e-472f15dd2c11_buggy.java
+++ b/tmp/c516cbee-e08c-4900-94a3-274457926e73_fixed.java
@@ -1,52 +1,96 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Determine the charset to useâ€”BOM (if present) always takes precedence
+    String effectiveCharset = charsetName; // may be null
+    boolean bomSeen = false;
+    int pos = byteData.position();
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    // Check for UTF-32 BOMs (4 bytes)
+    if (byteData.remaining() >= 4) {
+        int b0 = byteData.get(pos) & 0xff;
+        int b1 = byteData.get(pos + 1) & 0xff;
+        int b2 = byteData.get(pos + 2) & 0xff;
+        int b3 = byteData.get(pos + 3) & 0xff;
+        if (b0 == 0x00 && b1 == 0x00 && b2 == 0xFE && b3 == 0xFF) {
+            effectiveCharset = "UTF-32BE";
+            byteData.position(pos + 4);
+            bomSeen = true;
+        } else if (b0 == 0xFF && b1 == 0xFE && b2 == 0x00 && b3 == 0x00) {
+            effectiveCharset = "UTF-32LE";
+            byteData.position(pos + 4);
+            bomSeen = true;
+        }
+    }
+
+    // Check for UTF-8 BOM (3 bytes)
+    pos = byteData.position();
+    if (!bomSeen && byteData.remaining() >= 3) {
+        int b0 = byteData.get(pos) & 0xff;
+        int b1 = byteData.get(pos + 1) & 0xff;
+        int b2 = byteData.get(pos + 2) & 0xff;
+        if (b0 == 0xEF && b1 == 0xBB && b2 == 0xBF) {
+            effectiveCharset = "UTF-8";
+            byteData.position(pos + 3);
+            bomSeen = true;
+        }
+    }
+
+    // Check for UTF-16 BOM (2 bytes)
+    pos = byteData.position();
+    if (!bomSeen && byteData.remaining() >= 2) {
+        int b0 = byteData.get(pos) & 0xff;
+        int b1 = byteData.get(pos + 1) & 0xff;
+        if (b0 == 0xFE && b1 == 0xFF) {
+            effectiveCharset = "UTF-16BE";
+            byteData.position(pos + 2);
+            bomSeen = true;
+        } else if (b0 == 0xFF && b1 == 0xFE) {
+            effectiveCharset = "UTF-16LE";
+            byteData.position(pos + 2);
+            bomSeen = true;
+        }
+    }
+
+    // If no charset is provided and no BOM was detected, fall back to the default.
+    if (effectiveCharset == null)
+        effectiveCharset = defaultCharset;
+
+    // Decode the document text using the effective charset.
+    docData = Charset.forName(effectiveCharset).decode(byteData).toString();
+
+    // If no charset was explicitly supplied and no BOM was found, 
+    // then check for a <meta> tag that might declare a different charset.
+    if (charsetName == null && !bomSeen) {
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
-                if (meta.hasAttr("http-equiv")) {
+            if (meta.hasAttr("http-equiv"))
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
-                }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
+                    if (Charset.isSupported(meta.attr("charset")))
                         foundCharset = meta.attr("charset");
-                        }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 
+                    && !foundCharset.equalsIgnoreCase(effectiveCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+                effectiveCharset = foundCharset;
                 byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+                docData = Charset.forName(effectiveCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(effectiveCharset);
     }
     return doc;
 }
\ No newline at end of file
