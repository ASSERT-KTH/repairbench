diff --git a/tmp/4fd2ac05-b67c-4288-8ea0-6c3a056e01a6_buggy.java b/tmp/e2acfc3b-4503-4d53-84fb-5d932067e1de_fixed.java
index 25ca093..902a6a9 100644
--- a/tmp/4fd2ac05-b67c-4288-8ea0-6c3a056e01a6_buggy.java
+++ b/tmp/e2acfc3b-4503-4d53-84fb-5d932067e1de_fixed.java
@@ -1,52 +1,88 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
+    // First, look for a BOM in the raw bytes – if one is found, it overrides any supplied charset or meta tag.
+    // Create a duplicate so as not to disturb the caller’s position.
+    ByteBuffer bb = byteData.duplicate();
+    String bomCharset = null;
+    int bomLength = 0;
+    if (bb.remaining() >= 4) {
+        byte b0 = bb.get(bb.position());
+        byte b1 = bb.get(bb.position() + 1);
+        byte b2 = bb.get(bb.position() + 2);
+        byte b3 = bb.get(bb.position() + 3);
+        if (b0 == 0x00 && b1 == 0x00 && b2 == (byte) 0xFE && b3 == (byte) 0xFF) {
+            bomCharset = "UTF-32BE";
+            bomLength = 4;
+        } else if (b0 == (byte) 0xFF && b1 == (byte) 0xFE && b2 == 0x00 && b3 == 0x00) {
+            bomCharset = "UTF-32LE";
+            bomLength = 4;
+        }
+    }
+    if (bomCharset == null && bb.remaining() >= 3) {
+        byte b0 = bb.get(bb.position());
+        byte b1 = bb.get(bb.position() + 1);
+        byte b2 = bb.get(bb.position() + 2);
+        if (b0 == (byte) 0xEF && b1 == (byte) 0xBB && b2 == (byte) 0xBF) {
+            bomCharset = "UTF-8";
+            bomLength = 3;
+        }
+    }
+    if (bomCharset == null && bb.remaining() >= 2) {
+        byte b0 = bb.get(bb.position());
+        byte b1 = bb.get(bb.position() + 1);
+        if (b0 == (byte) 0xFE && b1 == (byte) 0xFF) {
+            bomCharset = "UTF-16BE";
+            bomLength = 2;
+        } else if (b0 == (byte) 0xFF && b1 == (byte) 0xFE) {
+            bomCharset = "UTF-16LE";
+            bomLength = 2;
+        }
+    }
+    if (bomCharset != null) {
+        // A BOM was found: use its charset and skip BOM bytes.
+        charsetName = bomCharset;
+        byteData.position(byteData.position() + bomLength);
+        String docData = Charset.forName(charsetName).decode(byteData).toString();
+        Document doc = parser.parseInput(docData, baseUri);
+        doc.outputSettings().charset(charsetName);
+        return doc;
+    }
+
+    // No BOM detected. Now, if no charset was provided, decode using our default and look for
+    // a meta charset tag.
     String docData;
     Document doc = null;
-
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    if (charsetName == null) {
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
-                if (meta.hasAttr("http-equiv")) {
+            if (meta.hasAttr("http-equiv"))
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
-                }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
+                    if (Charset.isSupported(meta.attr("charset")))
                         foundCharset = meta.attr("charset");
-                        }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                doc = null; // force re-parse with the newly determined charset
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+    
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
