diff --git a/tmp/bdec5fdb-aff7-48b5-a88b-402511b888f2_buggy.java b/tmp/fb613319-7e73-4dc9-aace-b17446eab984_fixed.java
index 25ca093..36b67a1 100644
--- a/tmp/bdec5fdb-aff7-48b5-a88b-402511b888f2_buggy.java
+++ b/tmp/fb613319-7e73-4dc9-aace-b17446eab984_fixed.java
@@ -1,52 +1,96 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
+    // Detect a BOM (Byte Order Mark) if present. A BOM always overrides any provided charset.
+    byteData.mark();
+    String bomCharset = null;
+    if (byteData.remaining() >= 4) {
+        int b1 = byteData.get() & 0xff;
+        int b2 = byteData.get() & 0xff;
+        int b3 = byteData.get() & 0xff;
+        int b4 = byteData.get() & 0xff;
+        if (b1 == 0x00 && b2 == 0x00 && b3 == 0xFE && b4 == 0xFF) {
+            bomCharset = "UTF-32BE";
+        } else if (b1 == 0xFF && b2 == 0xFE && b3 == 0x00 && b4 == 0x00) {
+            bomCharset = "UTF-32LE";
+        }
+    }
+    byteData.reset();
+    if (bomCharset == null && byteData.remaining() >= 2) {
+        byteData.mark();
+        int b1 = byteData.get() & 0xff;
+        int b2 = byteData.get() & 0xff;
+        if (b1 == 0xFE && b2 == 0xFF) {
+            bomCharset = "UTF-16BE";
+        } else if (b1 == 0xFF && b2 == 0xFE) {
+            bomCharset = "UTF-16LE";
+        }
+        byteData.reset();
+    }
+    if (bomCharset == null && byteData.remaining() >= 3) {
+        byteData.mark();
+        int b1 = byteData.get() & 0xff;
+        int b2 = byteData.get() & 0xff;
+        int b3 = byteData.get() & 0xff;
+        if (b1 == 0xEF && b2 == 0xBB && b3 == 0xBF) {
+            bomCharset = "UTF-8";
+        }
+        byteData.reset();
+    }
+    if (bomCharset != null) {
+        int skip = 0;
+        if ("UTF-8".equals(bomCharset)) {
+            skip = 3;
+        } else if ("UTF-16BE".equals(bomCharset) || "UTF-16LE".equals(bomCharset)) {
+            skip = 2;
+        } else if ("UTF-32BE".equals(bomCharset) || "UTF-32LE".equals(bomCharset)) {
+            skip = 4;
+        }
+        // Advance past the BOM bytes.
+        byteData.position(byteData.position() + skip);
+        charsetName = bomCharset;
+    }
+    
     String docData;
     Document doc = null;
     
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    if (charsetName == null) {
+        // Fall back to the default charset (typically "UTF-8") and try to detect charset from the meta tags.
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
-                if (meta.hasAttr("http-equiv")) {
+            if (meta.hasAttr("http-equiv"))
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
-                }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
+                    if (Charset.isSupported(meta.attr("charset")))
                         foundCharset = meta.attr("charset");
-                        }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                doc = null;  // will reparse below
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
+        // A charset was either specified or determined by a BOM.
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
+    
+    // Remove any stray BOM character (U+FEFF) from the beginning of the string.
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
     }
+    
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
