diff --git a/tmp/2e18f0c5-8498-4a3b-b55a-8001ee2ab4fb_buggy.java b/tmp/c90e2d7b-bf52-4df8-a5a7-6b964812b384_fixed.java
index 25ca093..9104148 100644
--- a/tmp/2e18f0c5-8498-4a3b-b55a-8001ee2ab4fb_buggy.java
+++ b/tmp/c90e2d7b-bf52-4df8-a5a7-6b964812b384_fixed.java
@@ -1,52 +1,100 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
+    // Mark the initial position so we can rewind if needed.
+    byteData.mark();
     String docData;
     Document doc = null;
+    String detectedCharset = null;
+    int bomLength = 0;
 
-        // look for BOM - overrides any other header or input
+    // Look ahead in the byte buffer to detect a BOM.
+    int remaining = byteData.remaining();
+    if (remaining >= 4) {
+        int b1 = byteData.get(byteData.position()) & 0xff;
+        int b2 = byteData.get(byteData.position() + 1) & 0xff;
+        int b3 = byteData.get(byteData.position() + 2) & 0xff;
+        int b4 = byteData.get(byteData.position() + 3) & 0xff;
+        if (b1 == 0x00 && b2 == 0x00 && b3 == 0xFE && b4 == 0xFF) {
+            detectedCharset = "UTF-32BE";
+            bomLength = 4;
+        } else if (b1 == 0xFF && b2 == 0xFE && b3 == 0x00 && b4 == 0x00) {
+            detectedCharset = "UTF-32LE";
+            bomLength = 4;
+        }
+    }
+    if (detectedCharset == null && remaining >= 3) {
+        int b1 = byteData.get(byteData.position()) & 0xff;
+        int b2 = byteData.get(byteData.position() + 1) & 0xff;
+        int b3 = byteData.get(byteData.position() + 2) & 0xff;
+        if (b1 == 0xEF && b2 == 0xBB && b3 == 0xBF) {
+            detectedCharset = "UTF-8";
+            bomLength = 3;
+        }
+    }
+    if (detectedCharset == null && remaining >= 2) {
+        int b1 = byteData.get(byteData.position()) & 0xff;
+        int b2 = byteData.get(byteData.position() + 1) & 0xff;
+        if (b1 == 0xFE && b2 == 0xFF) {
+            detectedCharset = "UTF-16BE";
+            bomLength = 2;
+        } else if (b1 == 0xFF && b2 == 0xFE) {
+            detectedCharset = "UTF-16LE";
+            bomLength = 2;
+        }
+    }
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    // If we found a BOM, override any passed charset (or lack thereof) and skip the BOM bytes.
+    if (detectedCharset != null) {
+        charsetName = detectedCharset;
+        byteData.position(byteData.position() + bomLength);
+    } else {
+        // No BOM detected; rewind to the marked position.
+        byteData.reset();
+    }
+
+    // If no charset was specified (and no BOM forced one), decode using the default charset,
+    // then look for a meta tag to potentially change the declared charset.
+    if (charsetName == null) {
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
+                // Rewind and re-decode with the correct charset.
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
+
+    // Remove a stray Unicode BOM character (if any) from the decoded string.
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
-            charsetName = defaultCharset;
         doc = null;
     }
+    
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
+    
     return doc;
 }
\ No newline at end of file
