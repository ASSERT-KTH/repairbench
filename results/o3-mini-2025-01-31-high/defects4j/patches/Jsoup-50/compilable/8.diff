diff --git a/tmp/4365cfec-3287-48bf-9a5f-f928a0f0a78a_buggy.java b/tmp/d5568bca-8fb9-4002-af3b-09b23e167d87_fixed.java
index 25ca093..052349f 100644
--- a/tmp/4365cfec-3287-48bf-9a5f-f928a0f0a78a_buggy.java
+++ b/tmp/d5568bca-8fb9-4002-af3b-09b23e167d87_fixed.java
@@ -1,52 +1,90 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
-        String docData;
-        Document doc = null;
+    // Record whether a charset was explicitly provided.
+    boolean charsetProvided = (charsetName != null);
+    boolean bomFound = false;
+    int bomOffset = 0;
     
-        // look for BOM - overrides any other header or input
+    // Duplicate the buffer so we can inspect the initial bytes without changing the callerâ€™s position.
+    ByteBuffer bb = byteData.duplicate();
     
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
-            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+    // Check for a 4-byte BOM (UTF-32)
+    if (bb.remaining() >= 4) {
+        // UTF-32BE: 00 00 FE FF
+        if (bb.get(0) == 0x00 && bb.get(1) == 0x00 && bb.get(2) == (byte) 0xFE && bb.get(3) == (byte) 0xFF) {
+            charsetName = "UTF-32BE";
+            bomFound = true;
+            bomOffset = 4;
+        }
+        // UTF-32LE: FF FE 00 00
+        else if (bb.get(0) == (byte) 0xFF && bb.get(1) == (byte) 0xFE && bb.get(2) == 0x00 && bb.get(3) == 0x00) {
+            charsetName = "UTF-32LE";
+            bomFound = true;
+            bomOffset = 4;
+        }
+    }
+    // Check for a 3-byte BOM (UTF-8)
+    if (!bomFound && bb.remaining() >= 3) {
+        // UTF-8: EF BB BF
+        if (bb.get(0) == (byte) 0xEF && bb.get(1) == (byte) 0xBB && bb.get(2) == (byte) 0xBF) {
+            charsetName = "UTF-8";
+            bomFound = true;
+            bomOffset = 3;
+        }
+    }
+    // Check for a 2-byte BOM (UTF-16)
+    if (!bomFound && bb.remaining() >= 2) {
+        // UTF-16BE: FE FF
+        if (bb.get(0) == (byte) 0xFE && bb.get(1) == (byte) 0xFF) {
+            charsetName = "UTF-16BE";
+            bomFound = true;
+            bomOffset = 2;
+        }
+        // UTF-16LE: FF FE
+        else if (bb.get(0) == (byte) 0xFF && bb.get(1) == (byte) 0xFE) {
+            charsetName = "UTF-16LE";
+            bomFound = true;
+            bomOffset = 2;
+        }
+    }
+    
+    // If a BOM was found, advance the position to skip it.
+    if (bomFound) {
+        byteData.position(byteData.position() + bomOffset);
+    }
+    
+    // Determine the charset to use. If still null, fall back to the default charset.
+    String effectiveCharset = (charsetName != null ? charsetName : defaultCharset);
+    String docData = Charset.forName(effectiveCharset).decode(byteData).toString();
+    
+    // If no explicit charset was provided and no BOM was found, try to detect a charset
+    // specified in a meta tag within the HTML.
+    if (!charsetProvided && !bomFound) {
+        Document docTest = parser.parseInput(docData, baseUri);
+        Element meta = docTest.select("meta[http-equiv=content-type], meta[charset]").first();
+        if (meta != null) {
             String foundCharset = null;
-                if (meta.hasAttr("http-equiv")) {
+            if (meta.hasAttr("http-equiv"))
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
-                }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
+                    if (Charset.isSupported(meta.attr("charset")))
                         foundCharset = meta.attr("charset");
-                        }
                 } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
+                    // ignore, will use default
                 }
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
+                effectiveCharset = foundCharset;
                 charsetName = foundCharset;
+                // Reset the buffer to re-read it from the very beginning.
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
-        if (doc == null) {
-            doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
     }
+    
+    Document doc = parser.parseInput(docData, baseUri);
+    doc.outputSettings().charset(effectiveCharset);
     return doc;
 }
\ No newline at end of file
