diff --git a/tmp/328c3b4a-9e83-420b-81cc-68a2a4c4ace4_buggy.java b/tmp/75a1ac02-c89e-4a56-8f95-5b702537e4e3_fixed.java
index 25ca093..92cb12f 100644
--- a/tmp/328c3b4a-9e83-420b-81cc-68a2a4c4ace4_buggy.java
+++ b/tmp/75a1ac02-c89e-4a56-8f95-5b702537e4e3_fixed.java
@@ -1,52 +1,96 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
-        String docData;
-        Document doc = null;
+    // Use UTF-8 as the fallback default.
+    String defaultCharset = "UTF-8";
+    boolean userCharsetSpecified = charsetName != null;
 
-        // look for BOM - overrides any other header or input
+    // --- BOM detection ---
+    String bomCharset = null;
+    int bomLength = 0;
+    int pos = byteData.position();
+    int remaining = byteData.remaining();
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
+    // Check for 4-byte BOMs (UTF-32)
+    if (remaining >= 4) {
+        int b0 = byteData.get(pos) & 0xff;
+        int b1 = byteData.get(pos + 1) & 0xff;
+        int b2 = byteData.get(pos + 2) & 0xff;
+        int b3 = byteData.get(pos + 3) & 0xff;
+        if (b0 == 0x00 && b1 == 0x00 && b2 == 0xFE && b3 == 0xFF) {
+            bomCharset = "UTF-32BE";
+            bomLength = 4;
+        } else if (b0 == 0xFF && b1 == 0xFE && b2 == 0x00 && b3 == 0x00) {
+            bomCharset = "UTF-32LE";
+            bomLength = 4;
+        }
+    }
+
+    // Check for 3-byte BOM (UTF-8)
+    if (bomCharset == null && remaining >= 3) {
+        int b0 = byteData.get(pos) & 0xff;
+        int b1 = byteData.get(pos + 1) & 0xff;
+        int b2 = byteData.get(pos + 2) & 0xff;
+        if (b0 == 0xEF && b1 == 0xBB && b2 == 0xBF) {
+            bomCharset = "UTF-8";
+            bomLength = 3;
+        }
+    }
+
+    // Check for 2-byte BOMs (UTF-16)
+    if (bomCharset == null && remaining >= 2) {
+        int b0 = byteData.get(pos) & 0xff;
+        int b1 = byteData.get(pos + 1) & 0xff;
+        if (b0 == 0xFE && b1 == 0xFF) {
+            bomCharset = "UTF-16BE";
+            bomLength = 2;
+        } else if (b0 == 0xFF && b1 == 0xFE) {
+            bomCharset = "UTF-16LE";
+            bomLength = 2;
+        }
+    }
+
+    // If a BOM was detected, advance the ByteBuffer position past the BOM.
+    if (bomLength > 0) {
+        byteData.position(pos + bomLength);
+    }
+
+    // If a BOM charset was found, it takes precedence.
+    if (bomCharset != null) {
+        charsetName = bomCharset;
+    } else if (!userCharsetSpecified) {
+        charsetName = defaultCharset;
+    }
+
+    // Decode the byte data using the determined charset.
+    String docData = Charset.forName(charsetName).decode(byteData).toString();
+    Document doc = parser.parseInput(docData, baseUri);
+
+    // Only if no user charset was provided and no BOM was detected do we look for a meta tag override.
+    if (!userCharsetSpecified && bomCharset == null) {
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 
+                    && !foundCharset.equalsIgnoreCase(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
-                    byteData.rewind();
+                byteData.rewind(); // Rewind to start the read afresh.
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
-                }
-            }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
-        if (doc == null) {
                 doc = parser.parseInput(docData, baseUri);
+            }
+        }
+    }
     doc.outputSettings().charset(charsetName);
-        }
     return doc;
 }
\ No newline at end of file
