diff --git a/tmp/497f394e-11f0-43d4-8c4b-4aa9815f7f71_buggy.java b/tmp/d1ac34b0-c5f2-44f2-99a0-94afcd0dcebc_fixed.java
index 25ca093..5895cbf 100644
--- a/tmp/497f394e-11f0-43d4-8c4b-4aa9815f7f71_buggy.java
+++ b/tmp/d1ac34b0-c5f2-44f2-99a0-94afcd0dcebc_fixed.java
@@ -1,52 +1,100 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
+    // First, check the incoming bytes for a Byte Order Mark (BOM). If one is found, it will override any
+    // provided charset or meta tag.
+    int pos = byteData.position();
+    int remaining = byteData.remaining();
+    String detectedCharset = null;
+    int bomLength = 0;
+    
+    if (remaining >= 4) {
+        // UTF-32BE: 00 00 FE FF
+        if (byteData.get(pos) == (byte) 0x00 && byteData.get(pos + 1) == (byte) 0x00 &&
+            byteData.get(pos + 2) == (byte) 0xFE && byteData.get(pos + 3) == (byte) 0xFF) {
+            detectedCharset = "UTF-32BE";
+            bomLength = 4;
+        }
+        // UTF-32LE: FF FE 00 00
+        else if (byteData.get(pos) == (byte) 0xFF && byteData.get(pos + 1) == (byte) 0xFE &&
+                 byteData.get(pos + 2) == (byte) 0x00 && byteData.get(pos + 3) == (byte) 0x00) {
+            detectedCharset = "UTF-32LE";
+            bomLength = 4;
+        }
+    }
+    if (detectedCharset == null && remaining >= 3) {
+        // UTF-8: EF BB BF
+        if (byteData.get(pos) == (byte) 0xEF && byteData.get(pos + 1) == (byte) 0xBB &&
+            byteData.get(pos + 2) == (byte) 0xBF) {
+            detectedCharset = "UTF-8";
+            bomLength = 3;
+        }
+    }
+    if (detectedCharset == null && remaining >= 2) {
+        // UTF-16BE: FE FF
+        if (byteData.get(pos) == (byte) 0xFE && byteData.get(pos + 1) == (byte) 0xFF) {
+            detectedCharset = "UTF-16BE";
+            bomLength = 2;
+        }
+        // UTF-16LE: FF FE
+        else if (byteData.get(pos) == (byte) 0xFF && byteData.get(pos + 1) == (byte) 0xFE) {
+            detectedCharset = "UTF-16LE";
+            bomLength = 2;
+        }
+    }
+    
+    // If a BOM was found, override the charset and skip the BOM bytes.
+    if (detectedCharset != null) {
+        charsetName = detectedCharset;
+        byteData.position(pos + bomLength);
+    }
+    
     String docData;
     Document doc = null;
     
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    // If no charset is yet known, default to the defaultCharset (typically "UTF-8")
+    // and then allow a meta tag in the document to override later.
+    if (charsetName == null) {
+        // Use a duplicate so that the original ByteBuffer position isn’t advanced.
+        ByteBuffer dup = byteData.duplicate();
+        docData = Charset.forName(defaultCharset).decode(dup).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
-                if (meta.hasAttr("http-equiv")) {
+            if (meta.hasAttr("http-equiv"))
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
-                }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
+                    if (Charset.isSupported(meta.attr("charset")))
                         foundCharset = meta.attr("charset");
-                        }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+    } else {
+        Validate.notEmpty(charsetName,
+                "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    
+    // Sometimes a BOM can slip into the decoded text (as the zero‐width no‐break space),
+    // so remove it if present.
+    if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
         docData = docData.substring(1);
-            charsetName = defaultCharset;
         doc = null;
     }
+    
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
+    
     return doc;
 }
\ No newline at end of file
