diff --git a/tmp/f2e72dec-fd5b-4ba7-a916-c8e72af58155_buggy.java b/tmp/8c361ffd-f29e-4607-b256-59dfb3303885_fixed.java
index 25ca093..7108e5d 100644
--- a/tmp/f2e72dec-fd5b-4ba7-a916-c8e72af58155_buggy.java
+++ b/tmp/8c361ffd-f29e-4607-b256-59dfb3303885_fixed.java
@@ -1,52 +1,99 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
+    // Detect and process Byte Order Mark (BOM) if present. BOM always wins over any provided charset.
+    boolean hasBOM = false;
+    String detectedCharset = null;
+    int bomSkip = 0;
+    int pos = byteData.position();
+    
+    // Check for 4‐byte BOMs (UTF-32)
+    if (byteData.remaining() >= 4) {
+        byte b0 = byteData.get(pos);
+        byte b1 = byteData.get(pos + 1);
+        byte b2 = byteData.get(pos + 2);
+        byte b3 = byteData.get(pos + 3);
+        if (b0 == (byte)0x00 && b1 == (byte)0x00 && b2 == (byte)0xFE && b3 == (byte)0xFF) {
+            detectedCharset = "UTF-32BE";
+            bomSkip = 4;
+        } else if (b0 == (byte)0xFF && b1 == (byte)0xFE && b2 == (byte)0x00 && b3 == (byte)0x00) {
+            detectedCharset = "UTF-32LE";
+            bomSkip = 4;
+        }
+    }
+    // Check for 3‐byte BOM (UTF-8)
+    if (detectedCharset == null && byteData.remaining() >= 3) {
+        pos = byteData.position();
+        byte b0 = byteData.get(pos);
+        byte b1 = byteData.get(pos + 1);
+        byte b2 = byteData.get(pos + 2);
+        if (b0 == (byte)0xEF && b1 == (byte)0xBB && b2 == (byte)0xBF) {
+            detectedCharset = "UTF-8";
+            bomSkip = 3;
+        }
+    }
+    // Check for 2‐byte BOMs (UTF-16)
+    if (detectedCharset == null && byteData.remaining() >= 2) {
+        pos = byteData.position();
+        byte b0 = byteData.get(pos);
+        byte b1 = byteData.get(pos + 1);
+        if (b0 == (byte)0xFE && b1 == (byte)0xFF) {
+            detectedCharset = "UTF-16BE";
+            bomSkip = 2;
+        } else if (b0 == (byte)0xFF && b1 == (byte)0xFE) {
+            detectedCharset = "UTF-16LE";
+            bomSkip = 2;
+        }
+    }
+    if (detectedCharset != null) {
+        // BOM overrides everything else
+        charsetName = detectedCharset;
+        hasBOM = true;
+        // Advance the buffer position past the BOM bytes.
+        byteData.position(byteData.position() + bomSkip);
+    }
+    
     String docData;
     Document doc = null;
     
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    if (charsetName == null) {
+        // No charset provided and no BOM found: use default charset and then try to detect from meta.
+        charsetName = defaultCharset;
+        // Ensure we decode from the beginning.
+        byteData.rewind();
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
-                if (meta.hasAttr("http-equiv")) {
+            if (meta.hasAttr("http-equiv"))
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
-                }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+    } else {
+        // If a charset was specified (or detected via BOM), use that.
+        // If we didn't already consume BOM bytes, rewind the buffer.
+        if (!hasBOM)
+            byteData.rewind();
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+    
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
