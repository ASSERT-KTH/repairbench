diff --git a/tmp/bcb8f6cd-2fd4-4a63-ae25-ff02f6d468ff_buggy.java b/tmp/5b8b4d1a-956a-4300-af3f-18cc3eb47180_fixed.java
index d926eea..1c8bc7a 100644
--- a/tmp/bcb8f6cd-2fd4-4a63-ae25-ff02f6d468ff_buggy.java
+++ b/tmp/5b8b4d1a-956a-4300-af3f-18cc3eb47180_fixed.java
@@ -1,48 +1,50 @@
 @Override
-    public JsonSerializer<?> createContextual(SerializerProvider serializers,
-            BeanProperty property) throws JsonMappingException
-    {
+public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property)
+        throws JsonMappingException {
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
+        // No annotation override; honor the mapperâ€™s default date format if dates are to be serialized as text
+        if (!serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) {
+            DateFormat df = serializers.getConfig().getDateFormat();
+            if (df instanceof SimpleDateFormat) {
+                // Clone to avoid thread-safety issues
+                return withFormat(Boolean.FALSE, (SimpleDateFormat) ((SimpleDateFormat) df).clone());
+            }
+        }
         return this;
     }
-        // Simple case first: serialize as numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
-
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
+    if ((shape == JsonFormat.Shape.STRING)
+            || format.hasPattern()
+            || format.hasLocale()
+            || format.hasTimeZone()) {
         TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
-            final Locale loc = format.hasLocale()
-                            ? format.getLocale()
-                            : serializers.getLocale();
-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
+        final String pattern;
+        if (format.hasPattern()) {
+            pattern = format.getPattern();
+        } else {
+            // Use the default mapper date format's pattern if available,
+            // otherwise fall-back to ISO8601 formatting.
+            DateFormat df = serializers.getConfig().getDateFormat();
+            if (df instanceof SimpleDateFormat) {
+                pattern = ((SimpleDateFormat) df).toPattern();
+            } else {
+                pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;
+            }
+        }
+        final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();
+        SimpleDateFormat sdf = new SimpleDateFormat(pattern, loc);
         if (tz == null) {
             tz = serializers.getTimeZone();
         }
-            df.setTimeZone(tz);
-            return withFormat(Boolean.FALSE, df);
+        sdf.setTimeZone(tz);
+        return withFormat(Boolean.FALSE, sdf);
     }
-
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
     return this;
 }
\ No newline at end of file
