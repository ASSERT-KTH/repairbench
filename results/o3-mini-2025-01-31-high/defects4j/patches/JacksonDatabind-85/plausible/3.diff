diff --git a/tmp/61c7137f-91b9-4a1b-a615-5e64049a3152_buggy.java b/tmp/a7e423e2-7291-4673-9d66-1ffbbabb29d2_fixed.java
index d926eea..bdf1218 100644
--- a/tmp/61c7137f-91b9-4a1b-a615-5e64049a3152_buggy.java
+++ b/tmp/a7e423e2-7291-4673-9d66-1ffbbabb29d2_fixed.java
@@ -1,48 +1,42 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
-            BeanProperty property) throws JsonMappingException
-    {
+        BeanProperty property) throws JsonMappingException {
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
-        // Simple case first: serialize as numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
-
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
-                    TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
-            final Locale loc = format.hasLocale()
-                            ? format.getLocale()
-                            : serializers.getLocale();
-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
-                    if (tz == null) {
-                        tz = serializers.getTimeZone();
+    // If we are to serialize as a String (or custom formatting is requested)
+    if ((shape == JsonFormat.Shape.STRING)
+            || format.hasPattern() || format.hasLocale() || format.hasTimeZone()) {
+        SimpleDateFormat df;
+        // First, try to use the provider's default DateFormat if available:
+        DateFormat providerFormat = serializers.getConfig().getDateFormat();
+        if (!format.hasPattern() && (providerFormat instanceof SimpleDateFormat)) {
+            df = (SimpleDateFormat) ((SimpleDateFormat) providerFormat).clone();
+        } else {
+            // Determine the pattern:
+            String pattern;
+            if (format.hasPattern()) {
+                pattern = format.getPattern();
+            } else if (providerFormat instanceof SimpleDateFormat) {
+                pattern = ((SimpleDateFormat) providerFormat).toPattern();
+            } else {
+                pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;
             }
+            Locale locale = format.hasLocale() ? format.getLocale() : serializers.getLocale();
+            df = new SimpleDateFormat(pattern, locale);
+        }
+        // Determine timezone: annotation override wins, otherwise providerâ€™s timezone:
+        TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone();
         df.setTimeZone(tz);
         return withFormat(Boolean.FALSE, df);
     }
-
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
     return this;
 }
\ No newline at end of file
