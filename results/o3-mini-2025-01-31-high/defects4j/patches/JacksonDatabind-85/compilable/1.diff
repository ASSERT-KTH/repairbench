diff --git a/tmp/aafda5a8-2df0-4fda-952d-7af751b7fee2_buggy.java b/tmp/8c0e291e-7658-440d-87dd-a7efbdd43632_fixed.java
index d926eea..8ff0e50 100644
--- a/tmp/aafda5a8-2df0-4fda-952d-7af751b7fee2_buggy.java
+++ b/tmp/8c0e291e-7658-440d-87dd-a7efbdd43632_fixed.java
@@ -1,48 +1,44 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
-            BeanProperty property) throws JsonMappingException
-    {
-        if (property == null) {
-            return this;
-        }
-        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
+        BeanProperty property) throws JsonMappingException {
+    // Try to get any annotation-based override, if one exists
+    JsonFormat.Value format = (property == null) ? null : findFormatOverrides(serializers, property, handledType());
+    
+    // No explicit annotation: check for a custom default DateFormat from the provider
     if (format == null) {
+        DateFormat df = serializers.getConfig().getDateFormat();
+        if (df instanceof SimpleDateFormat) {
+            // Use textual format (non-timestamp) with the custom default format
+            return withFormat(Boolean.FALSE, (SimpleDateFormat) df);
+        }
         return this;
     }
-        // Simple case first: serialize as numeric timestamp?
+    
+    // If annotation forces numeric (timestamp) shape, use that setting.
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
     
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
+    // For String shape, or if any of pattern, locale or timezone is specified,
+    // create a SimpleDateFormat with the proper settings.
     if ((shape == JsonFormat.Shape.STRING) || format.hasPattern() 
             || format.hasLocale() || format.hasTimeZone()) {
         TimeZone tz = format.getTimeZone();
         final String pattern = format.hasPattern() 
                 ? format.getPattern() 
                 : StdDateFormat.DATE_FORMAT_STR_ISO8601;
         final Locale loc = format.hasLocale() 
                 ? format.getLocale() 
                 : serializers.getLocale();
         SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
         if (tz == null) {
             tz = serializers.getTimeZone();
         }
         df.setTimeZone(tz);
         return withFormat(Boolean.FALSE, df);
     }
     
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+    // Otherwise, no customization needed; return as-is.
     return this;
 }
\ No newline at end of file
