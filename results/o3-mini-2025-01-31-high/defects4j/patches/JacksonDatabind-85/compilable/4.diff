diff --git a/tmp/ea5e4fbe-3bfe-4d65-a85d-456508c2faba_buggy.java b/tmp/d130b80f-a60d-471c-adfd-029ed77813fe_fixed.java
index d926eea..174d10e 100644
--- a/tmp/ea5e4fbe-3bfe-4d65-a85d-456508c2faba_buggy.java
+++ b/tmp/d130b80f-a60d-471c-adfd-029ed77813fe_fixed.java
@@ -1,48 +1,44 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
-        if (format == null) {
-            return this;
-        }
+    if (format != null) {
         // Simple case first: serialize as numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
-
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
+        // If we have a String shape, or explicit formatting overrides, build
+        // a SimpleDateFormat with the given pattern, locale and timezone.
+        if ((shape == JsonFormat.Shape.STRING)
+                || format.hasPattern()
+                || format.hasLocale()
+                || format.hasTimeZone()) {
             TimeZone tz = format.getTimeZone();
             final String pattern = format.hasPattern()
                     ? format.getPattern()
                     : StdDateFormat.DATE_FORMAT_STR_ISO8601;
             final Locale loc = format.hasLocale()
                     ? format.getLocale()
                     : serializers.getLocale();
             SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
             if (tz == null) {
                 tz = serializers.getTimeZone();
             }
             df.setTimeZone(tz);
+            // Use non-timestamp (i.e. textual) formatting with our builder:
+            return withFormat(Boolean.FALSE, df);
+        }
+    }
+    // No explicit format overrides found.
+    // Check if the global DateFormat is something other than the default StdDateFormat.
+    DateFormat df = serializers.getConfig().getDateFormat();
+    if (!(df instanceof StdDateFormat)) {
         return withFormat(Boolean.FALSE, df);
     }
-
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
     return this;
 }
\ No newline at end of file
