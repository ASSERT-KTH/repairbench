diff --git a/tmp/2f3a2dd0-35f4-41e2-9759-29d7aa5b2365_buggy.java b/tmp/766becd2-6d4d-4c0e-93bb-9d5025644da8_fixed.java
index d926eea..9f61f9d 100644
--- a/tmp/2f3a2dd0-35f4-41e2-9759-29d7aa5b2365_buggy.java
+++ b/tmp/766becd2-6d4d-4c0e-93bb-9d5025644da8_fixed.java
@@ -1,48 +1,45 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
-            BeanProperty property) throws JsonMappingException
-    {
-        if (property == null) {
-            return this;
-        }
-        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
-        if (format == null) {
-            return this;
-        }
-        // Simple case first: serialize as numeric timestamp?
+        BeanProperty property) throws JsonMappingException {
+    JsonFormat.Value format = (property == null)
+            ? null : findFormatOverrides(serializers, property, handledType());
+    // Determine whether we should use timestamps based on global settings.
+    boolean useTimestamp = serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
+    SimpleDateFormat df = null;
+    
+    if (format != null) {
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
-            return withFormat(Boolean.TRUE, null);
+            return withFormat(true, null);
         }
-
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
+        // Either an explicit declaration of String, or existence of a pattern/locale/timezone overrides:
+        if (shape == JsonFormat.Shape.STRING
+                || format.hasPattern()
+                || format.hasLocale()
+                || format.hasTimeZone()) {
             TimeZone tz = format.getTimeZone();
             final String pattern = format.hasPattern() 
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
+                    ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;
             final Locale loc = format.hasLocale()
-                            ? format.getLocale()
-                            : serializers.getLocale();
-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
+                    ? format.getLocale() : serializers.getLocale();
+            df = new SimpleDateFormat(pattern, loc);
             if (tz == null) {
                 tz = serializers.getTimeZone();
             }
             df.setTimeZone(tz);
-            return withFormat(Boolean.FALSE, df);
-        }
-
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-        return this;
+            useTimestamp = false;
+        }
+    } else {
+        // No format overrides: if global setting indicates textual dates, use the configured DateFormat.
+        if (!useTimestamp) {
+            DateFormat configFormat = serializers.getConfig().getDateFormat();
+            if (configFormat instanceof SimpleDateFormat) {
+                df = (SimpleDateFormat) configFormat.clone();
+            } else {
+                df = new SimpleDateFormat(StdDateFormat.DATE_FORMAT_STR_ISO8601, serializers.getLocale());
+                df.setTimeZone(serializers.getTimeZone());
+            }
+        }
+    }
+    return withFormat(useTimestamp, df);
 }
\ No newline at end of file
