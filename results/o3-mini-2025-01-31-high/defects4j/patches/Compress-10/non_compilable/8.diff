diff --git a/tmp/bbc0579a-e0f2-4c3e-9a31-8bb0b75bc757_buggy.java b/tmp/87c1b728-fd9c-4cdd-bc1e-2e7188144aae_fixed.java
index 85e6a42..4255761 100644
--- a/tmp/bbc0579a-e0f2-4c3e-9a31-8bb0b75bc757_buggy.java
+++ b/tmp/87c1b728-fd9c-4cdd-bc1e-2e7188144aae_fixed.java
@@ -1,50 +1,53 @@
-    /**
-     * Walks through all recorded entries and adds the data available
-     * from the local file header.
-     *
-     * <p>Also records the offsets for the data to read from the
-     * entries.</p>
-     */
-    private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
-                                            entriesWithoutUTF8Flag)
+private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag)
     throws IOException {
-        // changing the name of a ZipArchiveEntry is going to change
-        // the hashcode - see COMPRESS-164
-        // Map needs to be reconstructed in order to keep central
-        // directory order
+    // Loop over all the local file header entries. Note that these entries’ hash codes
+    // are based on their names and may become “wrong” when the name changes. Therefore,
+    // to update the extra Unicode information taken from the central directory we do
+    // not use Map.containsKey() directly on the entry – we match on the local file header offset.
     for (ZipArchiveEntry ze : entries.keySet()) {
         OffsetEntry offsetEntry = entries.get(ze);
         long offset = offsetEntry.headerOffset;
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
         byte[] b = new byte[SHORT];
         archive.readFully(b);
         int fileNameLen = ZipShort.getValue(b);
         archive.readFully(b);
         int extraFieldLen = ZipShort.getValue(b);
         int lenToSkip = fileNameLen;
         while (lenToSkip > 0) {
             int skipped = archive.skipBytes(lenToSkip);
             if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip file name in"
-                                               + " local file header");
+                throw new RuntimeException("failed to skip file name in local file header");
             }
             lenToSkip -= skipped;
         }
         byte[] localExtraData = new byte[extraFieldLen];
         archive.readFully(localExtraData);
         ze.setExtra(localExtraData);
-            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
-                + SHORT + SHORT + fileNameLen + extraFieldLen;
+        // The file data starts right after the local file header:
+        offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT
+            + fileNameLen + extraFieldLen;
 
-            if (entriesWithoutUTF8Flag.containsKey(ze)) {
+        // Instead of checking entriesWithoutUTF8Flag.containsKey(ze) – which is unsafe because
+        // changing the name changes the hash code – look for the matching entry by comparing the
+        // local header offset (which is immutable).
+        Iterator<Map.Entry<ZipArchiveEntry, NameAndComment>> it =
+            entriesWithoutUTF8Flag.entrySet().iterator();
+        while (it.hasNext()) {
+            Map.Entry<ZipArchiveEntry, NameAndComment> entry = it.next();
+            ZipArchiveEntry centralEntry = entry.getKey();
+            if (centralEntry.getLocalHeaderOffset() == offset) {
+                NameAndComment nc = entry.getValue();
                 String orig = ze.getName();
-                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
-                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
-                                                         nc.comment);
+                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);
                 if (!orig.equals(ze.getName())) {
                     nameMap.remove(orig);
                     nameMap.put(ze.getName(), ze);
                 }
+                // Remove the matching entry so we do not process it twice.
+                it.remove();
+                break;
+            }
         }
     }
 }
\ No newline at end of file
