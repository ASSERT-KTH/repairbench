diff --git a/tmp/d95c638b-47fa-4f1b-83f0-1700935154fb_buggy.java b/tmp/fb8b5a79-bfdf-4845-80f1-1610ba22629e_fixed.java
index 85e6a42..1eef11a 100644
--- a/tmp/d95c638b-47fa-4f1b-83f0-1700935154fb_buggy.java
+++ b/tmp/fb8b5a79-bfdf-4845-80f1-1610ba22629e_fixed.java
@@ -1,50 +1,49 @@
-    /**
-     * Walks through all recorded entries and adds the data available
-     * from the local file header.
-     *
-     * <p>Also records the offsets for the data to read from the
-     * entries.</p>
-     */
-    private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
-                                            entriesWithoutUTF8Flag)
+private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag)
     throws IOException {
-        // changing the name of a ZipArchiveEntry is going to change
-        // the hashcode - see COMPRESS-164
-        // Map needs to be reconstructed in order to keep central
-        // directory order
-        for (ZipArchiveEntry ze : entries.keySet()) {
+    // Changing the name of a ZipArchiveEntry (which is used as key in our maps)
+    // changes its hash code. To avoid lookup problems later (see COMPRESS-164)
+    // we rebuild the entries map with the (possibly) updated keys.
+    Map<ZipArchiveEntry, OffsetEntry> newEntries = new LinkedHashMap<>();
+    for (ZipArchiveEntry ze : new ArrayList<>(entries.keySet())) {
         OffsetEntry offsetEntry = entries.get(ze);
         long offset = offsetEntry.headerOffset;
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
         byte[] b = new byte[SHORT];
         archive.readFully(b);
         int fileNameLen = ZipShort.getValue(b);
         archive.readFully(b);
         int extraFieldLen = ZipShort.getValue(b);
+
+        // Skip the file name bytes (we do not need them here, they are in the central directory)
         int lenToSkip = fileNameLen;
         while (lenToSkip > 0) {
             int skipped = archive.skipBytes(lenToSkip);
             if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip file name in"
-                                               + " local file header");
+                throw new RuntimeException("failed to skip file name in local file header");
             }
             lenToSkip -= skipped;
         }
+
+        // Read extra field data from the local header and update the entry.
         byte[] localExtraData = new byte[extraFieldLen];
         archive.readFully(localExtraData);
         ze.setExtra(localExtraData);
-            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
-                + SHORT + SHORT + fileNameLen + extraFieldLen;
+        // The data offset is computed as:
+        // local header offset + fixed part (LFH_OFFSET_FOR_FILENAME_LENGTH + 2 + 2) + filename length + extra field length
+        offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT + fileNameLen + extraFieldLen;
 
+        // If the central directory has recorded Unicode name/comment separately,
+        // update the entryâ€™s name and comment accordingly.
         if (entriesWithoutUTF8Flag.containsKey(ze)) {
             String orig = ze.getName();
             NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
-                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
-                                                         nc.comment);
+            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);
             if (!orig.equals(ze.getName())) {
                 nameMap.remove(orig);
                 nameMap.put(ze.getName(), ze);
             }
         }
+        newEntries.put(ze, offsetEntry);
     }
+    entries = newEntries;
 }
\ No newline at end of file
