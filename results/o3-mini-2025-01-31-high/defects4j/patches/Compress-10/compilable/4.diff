diff --git a/tmp/bb8fa687-9ce0-4d59-8860-92f8045a6de3_buggy.java b/tmp/905c969c-bb6e-45a6-888a-219108b000ad_fixed.java
index 85e6a42..8986a3c 100644
--- a/tmp/bb8fa687-9ce0-4d59-8860-92f8045a6de3_buggy.java
+++ b/tmp/905c969c-bb6e-45a6-888a-219108b000ad_fixed.java
@@ -1,50 +1,45 @@
-    /**
-     * Walks through all recorded entries and adds the data available
-     * from the local file header.
-     *
-     * <p>Also records the offsets for the data to read from the
-     * entries.</p>
-     */
-    private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
-                                            entriesWithoutUTF8Flag)
+private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag)
     throws IOException {
     // changing the name of a ZipArchiveEntry is going to change
     // the hashcode - see COMPRESS-164
     // Map needs to be reconstructed in order to keep central
     // directory order
     for (ZipArchiveEntry ze : entries.keySet()) {
         OffsetEntry offsetEntry = entries.get(ze);
         long offset = offsetEntry.headerOffset;
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
         byte[] b = new byte[SHORT];
         archive.readFully(b);
         int fileNameLen = ZipShort.getValue(b);
         archive.readFully(b);
         int extraFieldLen = ZipShort.getValue(b);
+
+        // Skip over the file name (we donâ€™t need it as the CD already has it)
         int lenToSkip = fileNameLen;
         while (lenToSkip > 0) {
             int skipped = archive.skipBytes(lenToSkip);
             if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip file name in"
-                                               + " local file header");
+                throw new RuntimeException("failed to skip file name in local file header");
             }
             lenToSkip -= skipped;
         }
         byte[] localExtraData = new byte[extraFieldLen];
         archive.readFully(localExtraData);
-            ze.setExtra(localExtraData);
-            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
-                + SHORT + SHORT + fileNameLen + extraFieldLen;
 
+        // Save the original name before any change is made
+        String originalName = ze.getName();
+        // Only update the extra data if the entry did not come in via the UTF8 path;
+        // otherwise leave the extra data (and the name) as set from the central directory.
         if (entriesWithoutUTF8Flag.containsKey(ze)) {
-                String orig = ze.getName();
             NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
-                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
-                                                         nc.comment);
-                if (!orig.equals(ze.getName())) {
-                    nameMap.remove(orig);
+            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);
+            if (!originalName.equals(ze.getName())) {
+                nameMap.remove(originalName);
                 nameMap.put(ze.getName(), ze);
             }
+        } else {
+            ze.setExtra(localExtraData);
         }
+        offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT + fileNameLen + extraFieldLen;
     }
 }
\ No newline at end of file
