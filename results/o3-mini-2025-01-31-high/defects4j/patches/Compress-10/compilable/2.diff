diff --git a/tmp/c56c433c-43e9-4721-9e48-880142f07dd5_buggy.java b/tmp/cd2a8ccc-810d-453d-b270-bc3db007299d_fixed.java
index 85e6a42..adfdd6a 100644
--- a/tmp/c56c433c-43e9-4721-9e48-880142f07dd5_buggy.java
+++ b/tmp/cd2a8ccc-810d-453d-b270-bc3db007299d_fixed.java
@@ -1,50 +1,45 @@
-    /**
-     * Walks through all recorded entries and adds the data available
-     * from the local file header.
-     *
-     * <p>Also records the offsets for the data to read from the
-     * entries.</p>
-     */
-    private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
-                                            entriesWithoutUTF8Flag)
+private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag)
     throws IOException {
     // changing the name of a ZipArchiveEntry is going to change
     // the hashcode - see COMPRESS-164
     // Map needs to be reconstructed in order to keep central
     // directory order
     for (ZipArchiveEntry ze : entries.keySet()) {
         OffsetEntry offsetEntry = entries.get(ze);
         long offset = offsetEntry.headerOffset;
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
         byte[] b = new byte[SHORT];
         archive.readFully(b);
         int fileNameLen = ZipShort.getValue(b);
         archive.readFully(b);
         int extraFieldLen = ZipShort.getValue(b);
+
+        // Skip the file name bytes
         int lenToSkip = fileNameLen;
         while (lenToSkip > 0) {
             int skipped = archive.skipBytes(lenToSkip);
             if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip file name in"
-                                               + " local file header");
+                throw new RuntimeException("failed to skip file name in local file header");
             }
             lenToSkip -= skipped;
         }
+
+        // Read the extra field bytes from the local file header
         byte[] localExtraData = new byte[extraFieldLen];
         archive.readFully(localExtraData);
         ze.setExtra(localExtraData);
-            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
-                + SHORT + SHORT + fileNameLen + extraFieldLen;
+        offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT
+            + fileNameLen + extraFieldLen;
 
-            if (entriesWithoutUTF8Flag.containsKey(ze)) {
+        // Remove the entry from the map before modifying it so that its hash code stays consistent.
+        NameAndComment nc = entriesWithoutUTF8Flag.remove(ze);
+        if (nc != null) {
             String orig = ze.getName();
-                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
-                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
-                                                         nc.comment);
+            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);
             if (!orig.equals(ze.getName())) {
                 nameMap.remove(orig);
                 nameMap.put(ze.getName(), ze);
             }
         }
     }
 }
\ No newline at end of file
