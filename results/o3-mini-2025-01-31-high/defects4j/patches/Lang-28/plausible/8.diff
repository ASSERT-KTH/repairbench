diff --git a/tmp/113a55ff-5fd5-48b4-97bf-b167f26debc6_buggy.java b/tmp/f4fdc947-e11e-42f8-ad41-fc01baf67e84_fixed.java
index 4bbd561..a882c29 100644
--- a/tmp/113a55ff-5fd5-48b4-97bf-b167f26debc6_buggy.java
+++ b/tmp/f4fdc947-e11e-42f8-ad41-fc01baf67e84_fixed.java
@@ -1,37 +1,49 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // Ensure we have at least two characters to check for "&#"
+    if (index + 1 >= input.length() || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
+    
     int start = index + 2;
+    if (start >= input.length()) {
+        return 0;
+    }
+    
     boolean isHex = false;
-
     char firstChar = input.charAt(start);
     if (firstChar == 'x' || firstChar == 'X') {
-                start++;
         isHex = true;
+        start++;
+    }
+    if (start >= input.length()) {
+        return 0;
     }
     
     int end = start;
-            while(input.charAt(end) != ';') {
+    // Search for the terminating semicolon while staying in bounds.
+    while (end < input.length() && input.charAt(end) != ';') {
         end++;
     }
+    if (end >= input.length() || input.charAt(end) != ';') {
+        return 0;
+    }
     
     int entityValue;
     try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+        String number = input.subSequence(start, end).toString();
+        entityValue = isHex ? Integer.parseInt(number, 16) : Integer.parseInt(number, 10);
     } catch (NumberFormatException nfe) {
         return 0;
     }
     
+    // When the entity represents a supplementary character, write the surrogate pair.
+    if (entityValue > 0xFFFF) {
+        out.write(Character.toChars(entityValue));
+    } else {
         out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
-        return 0;
+    
+    // Return number of characters consumed: from the '&' to the ';'
+    return end - index + 1;
 }
\ No newline at end of file
