diff --git a/tmp/8c431bd5-f564-4d8a-8fc5-c57d15772353_buggy.java b/tmp/40387de4-d673-4390-9825-1e8ba57257fa_fixed.java
index 4bbd561..5d18cf3 100644
--- a/tmp/8c431bd5-f564-4d8a-8fc5-c57d15772353_buggy.java
+++ b/tmp/40387de4-d673-4390-9825-1e8ba57257fa_fixed.java
@@ -1,37 +1,44 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    // Protect against index out-of-bounds.
+    if (index < 0 || index >= input.length() - 1) {
+        return 0;
+    }
     if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
+        if (start < input.length() && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {
             start++;
             isHex = true;
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
+        if (end == input.length()) {
+            // No closing semicolon; not a valid entity.
+            return 0;
+        }
 
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            String entity = input.subSequence(start, end).toString();
+            entityValue = Integer.parseInt(entity, isHex ? 16 : 10);
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
+        // Handle supplementary code points by converting to a surrogate pair.
+        if (Character.isSupplementaryCodePoint(entityValue)) {
+            out.write(Character.toChars(entityValue));
+        } else {
             out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        }
+
+        // Return the number of characters consumed.
+        return end - index + 1;
     }
     return 0;
 }
\ No newline at end of file
