diff --git a/tmp/3da0433f-9a97-4eb9-9a78-a6cb0c65d363_buggy.java b/tmp/7b49377f-15d4-49fd-bf8a-d2f3290dd6ce_fixed.java
index 4bbd561..60d2fc9 100644
--- a/tmp/3da0433f-9a97-4eb9-9a78-a6cb0c65d363_buggy.java
+++ b/tmp/7b49377f-15d4-49fd-bf8a-d2f3290dd6ce_fixed.java
@@ -1,37 +1,39 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // Make sure there's room for '&#'
+    if (index >= input.length() - 1 || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
     int start = index + 2;
+    if (start >= input.length()) {
+        return 0;
+    }
     boolean isHex = false;
-
     char firstChar = input.charAt(start);
     if (firstChar == 'x' || firstChar == 'X') {
-                start++;
         isHex = true;
+        start++;
+        if (start >= input.length()) {
+            return 0;
+        }
     }
-
     int end = start;
-            while(input.charAt(end) != ';') {
+    // Look for the closing semicolon while being careful not to exceed the input length.
+    while (end < input.length() && input.charAt(end) != ';') {
         end++;
     }
-
+    if (end == input.length() || input.charAt(end) != ';') {
+        return 0;
+    }
     int entityValue;
     try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+        String numeric = input.subSequence(start, end).toString();
+        entityValue = Integer.parseInt(numeric, isHex ? 16 : 10);
     } catch (NumberFormatException nfe) {
         return 0;
     }
-
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
-        }
-        return 0;
+    // Convert the codepoint to one or two chars (for supplementary chars) and write them.
+    out.write(Character.toChars(entityValue));
+    // Consume the entire entity, which runs from index to the semicolon inclusive.
+    return end - index + 1;
 }
\ No newline at end of file
