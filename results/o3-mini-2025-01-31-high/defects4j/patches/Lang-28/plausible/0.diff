diff --git a/tmp/29ebe37a-0eb4-4ba2-a23a-dda591f8b348_buggy.java b/tmp/2f32f351-3b3d-45bc-9327-6246f82b51cd_fixed.java
index 4bbd561..2344897 100644
--- a/tmp/29ebe37a-0eb4-4ba2-a23a-dda591f8b348_buggy.java
+++ b/tmp/2f32f351-3b3d-45bc-9327-6246f82b51cd_fixed.java
@@ -1,37 +1,46 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // Protect against out-of-bounds access.
+    if (index >= input.length() - 1 || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
+    
     int start = index + 2;
     boolean isHex = false;
-
+    if (start < input.length()) {
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
-                start++;
             isHex = true;
+            start++;
+        }
+    } else {
+        return 0;
     }
     
     int end = start;
-            while(input.charAt(end) != ';') {
+    // Look for the ending semicolon safely.
+    while (end < input.length() && input.charAt(end) != ';') {
         end++;
     }
+    if (end == input.length() || input.charAt(end) != ';') {
+        return 0;
+    }
     
     int entityValue;
     try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+        String number = input.subSequence(start, end).toString();
+        entityValue = Integer.parseInt(number, isHex ? 16 : 10);
     } catch (NumberFormatException nfe) {
         return 0;
     }
     
+    // Properly write out supplementary code points as surrogate pairs.
+    if (Character.isSupplementaryCodePoint(entityValue)) {
+        out.write(Character.toChars(entityValue));
+    } else {
         out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
-        return 0;
+    
+    // Calculate and return the number of characters consumed.
+    return 2 + (isHex ? 1 : 0) + (end - start) + 1;
 }
\ No newline at end of file
