diff --git a/tmp/071bd146-c7ed-48f5-82a8-4cd7cd3b8865_buggy.java b/tmp/b1a9f1a9-3d60-4964-8335-fa7d0d1045ba_fixed.java
index 4bbd561..ce2ac56 100644
--- a/tmp/071bd146-c7ed-48f5-82a8-4cd7cd3b8865_buggy.java
+++ b/tmp/b1a9f1a9-3d60-4964-8335-fa7d0d1045ba_fixed.java
@@ -1,37 +1,46 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // Check that there's at least one character after '&'
+    if (input.charAt(index) == '&' && index + 1 < input.length() && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
+        // Check for the hex prefix
+        if (start < input.length() && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {
             start++;
             isHex = true;
         }
 
+        // Find the terminating semicolon
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
+        // If no semicolon was found, we don't translate.
+        if (end >= input.length() || input.charAt(end) != ';') {
+            return 0;
+        }
 
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            String number = input.subSequence(start, end).toString();
+            entityValue = isHex ? Integer.parseInt(number, 16) : Integer.parseInt(number, 10);
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
+        // Write the character(s) to the output.
+        // If the code point is a supplementary character then write its surrogate pair.
+        if (entityValue > Character.MAX_VALUE) {
+            out.write(Character.toChars(entityValue));
+        } else {
             out.write(entityValue);
+        }
+        // Return the count of characters consumed in the input.
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
     return 0;
 }
\ No newline at end of file
