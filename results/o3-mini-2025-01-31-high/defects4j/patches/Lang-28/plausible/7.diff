diff --git a/tmp/331c0f96-3271-43de-9f39-3d1331df902a_buggy.java b/tmp/97f715d4-d4be-41db-9de1-797139c2ad18_fixed.java
index 4bbd561..7e03c07 100644
--- a/tmp/331c0f96-3271-43de-9f39-3d1331df902a_buggy.java
+++ b/tmp/97f715d4-d4be-41db-9de1-797139c2ad18_fixed.java
@@ -1,37 +1,43 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    // Check we have at least 2 characters to work with.
+    if (index >= input.length() - 1) {
+        return 0;
+    }
     if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
+        if (start >= input.length()) {
+            return 0;
+        }
         boolean isHex = false;
-
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
-
+        if (start >= input.length()) {
+            return 0;
+        }
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
-
+        // If no semicolon is found, do not translate.
+        if (end == input.length()) {
+            return 0;
+        }
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            String number = input.subSequence(start, end).toString();
+            entityValue = isHex ? Integer.parseInt(number, 16) : Integer.parseInt(number, 10);
         } catch (NumberFormatException nfe) {
             return 0;
         }
-
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // For code points > 0xFFFF, Character.toChars() returns a surrogate pair.
+        out.write(Character.toChars(entityValue));
+        // Return the number of characters consumed:
+        // from '&' at index to ';' at end, inclusive.
+        return end - index + 1;
     }
     return 0;
 }
\ No newline at end of file
