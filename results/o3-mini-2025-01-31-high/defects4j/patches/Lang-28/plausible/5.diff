diff --git a/tmp/1beec55a-e14f-446f-bc4b-703730b24ac6_buggy.java b/tmp/3aeb5ead-0e0c-49c9-a682-5e099ff5a803_fixed.java
index 4bbd561..76ec5eb 100644
--- a/tmp/1beec55a-e14f-446f-bc4b-703730b24ac6_buggy.java
+++ b/tmp/3aeb5ead-0e0c-49c9-a682-5e099ff5a803_fixed.java
@@ -1,37 +1,49 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    // Protect from ArrayIndexOutOfBounds
+    if (index >= input.length() - 1) {
+        return 0;
+    }
     if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        // Check for the "x" or "X" that indicates hexadecimal
+        if (start < input.length()) {
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
+        } else {
+            return 0;
+        }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        // Look for the ending semicolon; be careful not to run off the end
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
+        if (end == input.length() || input.charAt(end) != ';') {
+            return 0;
+        }
 
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            String number = input.subSequence(start, end).toString();
+            entityValue = Integer.parseInt(number, isHex ? 16 : 10);
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
+        // If the code point is in the supplementary range, write it as a surrogate pair.
+        if (Character.isSupplementaryCodePoint(entityValue)) {
+            out.write(Character.toChars(entityValue));
+        } else {
             out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        }
+        // Return the number of characters consumed in the input.
+        return end - index + 1;
     }
     return 0;
 }
\ No newline at end of file
