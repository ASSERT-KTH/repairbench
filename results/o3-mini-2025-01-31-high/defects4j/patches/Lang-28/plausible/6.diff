diff --git a/tmp/0bc28bd7-ef7b-4f1a-8f19-85f64a565ba8_buggy.java b/tmp/e2f2cb51-34f4-480b-9e64-d315d516bc8f_fixed.java
index 4bbd561..9c78b66 100644
--- a/tmp/0bc28bd7-ef7b-4f1a-8f19-85f64a565ba8_buggy.java
+++ b/tmp/e2f2cb51-34f4-480b-9e64-d315d516bc8f_fixed.java
@@ -1,37 +1,47 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    // Ensure there are at least two characters ('&' and '#' at minimum)
+    if (index < 0 || index + 1 >= input.length()) {
+        return 0;
+    }
+
     if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
+        if (start >= input.length()) {
+            return 0;
+        }
         boolean isHex = false;
-
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
-                start++;
             isHex = true;
+            start++;
+            if (start >= input.length()) {
+                return 0;
+            }
         }
         
         int end = start;
-            while(input.charAt(end) != ';') {
+        // Search for the terminating ';'
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
+        if (end == input.length()) {
+            return 0;
+        }
         
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            String entity = input.subSequence(start, end).toString();
+            entityValue = isHex ? Integer.parseInt(entity, 16) : Integer.parseInt(entity, 10);
         } catch (NumberFormatException nfe) {
             return 0;
         }
         
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // Write the character(s) using Character.toChars to properly handle supplementary code points
+        out.write(Character.toChars(entityValue));
+        
+        // The consumed count is from the starting '&' to the ';'
+        return end - index + 1;
     }
     return 0;
 }
\ No newline at end of file
