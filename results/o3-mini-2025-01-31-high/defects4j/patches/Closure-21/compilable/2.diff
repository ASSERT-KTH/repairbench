diff --git a/tmp/45332871-f4be-471e-89c2-0aa51b956db5_buggy.java b/tmp/79f2e700-863f-4ee9-816e-7126dda71ec7_fixed.java
index 49a5702..e5fa60a 100644
--- a/tmp/45332871-f4be-471e-89c2-0aa51b956db5_buggy.java
+++ b/tmp/79f2e700-863f-4ee9-816e-7126dda71ec7_fixed.java
@@ -1,66 +1,102 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
-    // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+  // Instead of unconditionally skipping void nodes,
+  // only skip an empty (void) node if it’s an extra semicolon within a block.
+  if (n.isEmpty()) {
+    if (parent != null && parent.getType() == Token.BLOCK) {
+      return;
+    }
+    // Otherwise – e.g. an empty statement used as the sole body of an if‐statement –
+    // we want to flag it as “side‐effect free.”
+  }
+  if (n.isComma()) {
     return;
   }
-
   if (parent == null) {
     return;
   }
 
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
+  // We deliberately skip nodes whose type is EXPR_RESULT;
+  // their “usefulness” is computed on their children.
   if (n.isExprResult()) {
     return;
   }
 
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
+  // Don’t complain about a qualified name if it has JSDoc attached.
   if (n.isQualifiedName() && n.getJSDocInfo() != null) {
     return;
   }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
+  // Special handling for operands of a comma operator.
   if (parent.getType() == Token.COMMA) {
+    // When a comma operator is used, only its last operand contributes to the overall value.
+    // However, we do not wish to flag an entire comma‐expression that is “pure”
+    // when it is used, for example, as the right‐side of an assignment.
+    boolean allOperandsPure = true;
+    for (Node child : parent.children()) {
+      if (NodeUtil.mayHaveSideEffects(child, t.getCompiler())) {
+        allOperandsPure = false;
+        break;
+      }
+    }
+    Node commaParent = parent.getParent();
+    if (commaParent != null &&
+        (commaParent.getType() == Token.ASSIGN || commaParent.getType() == Token.VAR) &&
+        allOperandsPure) {
+      // When the whole comma expression is pure and is used for an assignment or var initializer,
+      // assume the programmer intended the final (pure) result.
+      return;
+    }
+    // For a non‐last operand in a comma operator, only flag it if it really isn’t “used.”
+    if (n != parent.getLastChild()) {
       if (isResultUsed) {
         return;
       }
-      if (n == parent.getLastChild()) {
+    } else {
+      // For the last operand, look upward to see if the comma operator’s result is itself used.
       for (Node an : parent.getAncestors()) {
         int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+        if (ancestorType == Token.COMMA) {
+          continue;
+        }
+        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {
+          return;
+        }
+        break;
+      }
     }
   }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+  // For most nodes we complain only when the computed expression’s value isn’t used.
+  // Typically an expression is “used” only when it is immediately wrapped in an
+  // expression statement or block.
+  else if (!n.isEmpty() &&
+           parent.getType() != Token.EXPR_RESULT &&
+           parent.getType() != Token.BLOCK) {
+    // ...except for the special case of a FOR loop initializer/test update.
+    if (!(parent.getType() == Token.FOR &&
+          parent.getChildCount() == 4 &&
+          (n == parent.getFirstChild() ||
+           n == parent.getFirstChild().getNext().getNext()))) {
       return;
     }
   }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+
+  // If the expression is either a simple operator (like "==")
+  // or is pure (has no side effects), then flag it.
+  if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
       msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
     }
-
-      t.getCompiler().report(
-          t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
+    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
 }
\ No newline at end of file
