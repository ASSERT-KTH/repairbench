diff --git a/tmp/87346439-7fb8-4f6c-9765-e73d518b8bb3_buggy.java b/tmp/861d4b5d-9a21-4559-9f6a-9f3ef59afe43_fixed.java
index 49a5702..073f5c4 100644
--- a/tmp/87346439-7fb8-4f6c-9765-e73d518b8bb3_buggy.java
+++ b/tmp/861d4b5d-9a21-4559-9f6a-9f3ef59afe43_fixed.java
@@ -1,66 +1,89 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
   // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+  // We allow these extra semicolons.
+  if (n.isEmpty() || n.isComma()) {
     return;
   }
-
   if (parent == null) {
     return;
   }
 
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
+  // Instead of bailing out on EXPR_RESULT nodes we “unwrap” them so that
+  // we analyze the actual expression. The EXPR_RESULT “wrapper” is only meant
+  // to hold JSDoc info, so we don’t want to lose a warning on its inner expression.
   if (n.isExprResult()) {
+    n = n.getFirstChild();
+    if (n == null) {
       return;
     }
+  }
 
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
+  // Don’t complain about a no-op statement that exists
+  // solely so that JSDoc can be attached.
   if (n.isQualifiedName() && n.getJSDocInfo() != null) {
     return;
   }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
+  // Special handling for comma operators.
   if (parent.getType() == Token.COMMA) {
+    // In a comma expression, all operands except the “final” one
+    // have their value discarded.  (Note that node’s own idea of
+    // "result used" may not reflect that fact when the comma is nested.)
+    if (n != parent.getLastChild()) {
+      // For non-final operands, if our local check says the result is used,
+      // then do nothing.
       if (isResultUsed) {
         return;
       }
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+      // Otherwise, warn on this operand.
+    } else {
+      // For the final operand of a comma operator, its value
+      // may be used if the comma expression sits in a context (like
+      // an assignment) that takes its value. To decide, look at our parent.
+      Node grandparent = parent.getParent();
+      if (grandparent != null && grandparent.getType() == Token.COMMA &&
+          grandparent.getFirstChild() == parent) {
+        // Our parent comma is itself being used as the left operand of a higher comma;
+        // so its final child’s value is actually discarded.
+        // Fall through to warn.
+      } else if (parent.getParent() != null &&
+                 (parent.getParent().getType() == Token.EXPR_RESULT ||
+                  parent.getParent().getType() == Token.BLOCK)) {
+        // The comma expression is a top‐level statement.  Its value isn’t used.
+        // Fall through.
+      } else {
+        // In other cases the final operand’s result is used, so skip warning.
+        return;
       }
     }
   } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+    // In some contexts (e.g. the head or increment of a FOR loop)
+    // the expression result is used.
+    if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4 &&
+          (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
       return;
     }
   }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+
+  // If the expression either is a simple operator or it’s known to be side-effect free,
+  // then report a warning.
+  if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
       msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
     }
-
-      t.getCompiler().report(
-          t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
+    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));
+    // If n is not a statement, add it to our problem nodes so later passes
+    // can wrap it with a JSCOMPILER_PRESERVE call.
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
 }
\ No newline at end of file
