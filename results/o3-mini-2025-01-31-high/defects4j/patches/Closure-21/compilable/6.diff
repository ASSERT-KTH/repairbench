diff --git a/tmp/558c7bb8-a8f4-43ab-bea4-3657ecc24cf0_buggy.java b/tmp/27c40081-c4b2-49de-b90e-d1233e7c1073_fixed.java
index 49a5702..3f7e50e 100644
--- a/tmp/558c7bb8-a8f4-43ab-bea4-3657ecc24cf0_buggy.java
+++ b/tmp/27c40081-c4b2-49de-b90e-d1233e7c1073_fixed.java
@@ -1,66 +1,86 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
-    // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+  // VOID nodes (extra semicolons) and comma nodes are not directly checked.
+  if (n.isEmpty() || n.isComma()) {
     return;
   }
-
   if (parent == null) {
     return;
   }
-
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
+  // We rely on the child‐nodes in “EXPR_RESULT” to report errors.
   if (n.isExprResult()) {
     return;
   }
-
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
+  // Allow a no‐op qualified name, if it has JSDoc on it.
   if (n.isQualifiedName() && n.getJSDocInfo() != null) {
     return;
   }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
+  // Special handling for nodes that are part of a comma (",") expression.
   if (parent.getType() == Token.COMMA) {
-      if (isResultUsed) {
+    // In comma expressions the “used” value is only the final one.
+    // However, there is a nuance: if the entire comma chain is pure
+    // (has no side effects) and is used in an assignment (or var initializer),
+    // then the omission of intermediate values is likely intentional.
+    // But in other contexts – like when a pure comma expression appears
+    // as a function argument – a non-final value is suspicious.
+    Node topComma = n;
+    while (topComma.getParent() != null && topComma.getParent().getType() == Token.COMMA) {
+      topComma = topComma.getParent();
+    }
+    // If the comma chain is used to initialize a variable or an assignment
+    // and the whole chain is pure, then suppress warnings.
+    if (topComma.getParent() != null) {
+      int containerType = topComma.getParent().getType();
+      if ((containerType == Token.ASSIGN || containerType == Token.VAR)
+          && !NodeUtil.mayHaveSideEffects(topComma, t.getCompiler())) {
         return;
       }
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
     }
+    // Determine whether n is the final computed value of the entire comma chain.
+    // Walk upward through comma parents. Even if n is the last child of its immediate
+    // comma, it might be nested as the left operand of a larger comma.
+    Node tmp = n;
+    boolean isFinal = true;
+    while (tmp.getParent() != null && tmp.getParent().getType() == Token.COMMA) {
+      if (tmp != tmp.getParent().getLastChild()) {
+        isFinal = false;
+        break;
+      }
+      tmp = tmp.getParent();
+    }
+    // If the overall comma expression’s value is used, then the final value is safe.
+    if (isFinal && NodeUtil.isExpressionResultUsed(tmp)) {
+      return;
     }
   } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+    // For most other nodes, if the parent is not an expression-result or a block,
+    // then ignore it, except for the special case of a FOR loop.
+    if (!(parent.getType() == Token.FOR &&
+          parent.getChildCount() == 4 &&
+          (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
       return;
     }
   }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+
+  // Now, if the node is a simple operator or a side-effect–free expression,
+  // it is considered “useless.”
+  if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
-        msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
+      msg = "The result of the '" +
+            Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
     }
-
-      t.getCompiler().report(
-          t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
+    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));
+    // Protect non-statement expressions, if necessary.
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
 }
\ No newline at end of file
