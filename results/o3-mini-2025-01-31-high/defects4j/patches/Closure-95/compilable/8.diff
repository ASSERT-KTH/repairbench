diff --git a/tmp/45c73a48-6f7c-41f1-8392-eb7ed8d1b7ee_buggy.java b/tmp/ae3325cc-38dd-4c48-baf4-79169f30b0f4_fixed.java
index 3652aad..d1f0d53 100644
--- a/tmp/45c73a48-6f7c-41f1-8392-eb7ed8d1b7ee_buggy.java
+++ b/tmp/ae3325cc-38dd-4c48-baf4-79169f30b0f4_fixed.java
@@ -1,86 +1,88 @@
 /**
  * Defines a typed variable. The defining node will be annotated with the
  * variable's type of {@link JSTypeNative#UNKNOWN_TYPE} if its type is
  * inferred.
  *
  * Slots may be any variable or any qualified name in the global scope.
  *
  * @param n the defining NAME or GETPROP node.
  * @param parent the {@code n}'s parent.
  * @param type the variable's type. It may be {@code null} if
  *     {@code inferred} is {@code true}.
  */
 void defineSlot(Node n, Node parent, JSType type, boolean inferred) {
   Preconditions.checkArgument(inferred || type != null);
 
-      // Only allow declarations of NAMEs and qualfied names.
+  // Only allow declarations of NAMEs and qualified names.
   boolean shouldDeclareOnGlobalThis = false;
   if (n.getType() == Token.NAME) {
     Preconditions.checkArgument(
         parent.getType() == Token.FUNCTION ||
         parent.getType() == Token.VAR ||
         parent.getType() == Token.LP ||
         parent.getType() == Token.CATCH);
     shouldDeclareOnGlobalThis = scope.isGlobal() &&
         (parent.getType() == Token.VAR ||
          parent.getType() == Token.FUNCTION);
   } else {
     Preconditions.checkArgument(
         n.getType() == Token.GETPROP &&
         (parent.getType() == Token.ASSIGN ||
          parent.getType() == Token.EXPR_RESULT));
   }
   String variableName = n.getQualifiedName();
   Preconditions.checkArgument(!variableName.isEmpty());
 
-      // If n is a property, then we should really declare it in the
-      // scope where the root object appears. This helps out people
-      // who declare "global" names in an anonymous namespace.
+  // If n is a property access, we want to declare it in the scope where the
+  // root (namespace) object appears. For example, if "ns" is declared globally,
+  // then "ns.foo" should be declared in the global scope.
   Scope scopeToDeclareIn = scope;
+  if (n.getType() == Token.GETPROP) {
+    String qualifiedName = n.getQualifiedName();
+    int dotIndex = qualifiedName.indexOf('.');
+    if (dotIndex != -1) {
+      String rootName = qualifiedName.substring(0, dotIndex);
+      Var rootVar = scope.getVar(rootName);
+      if (rootVar != null && rootVar.getScope() != null) {
+        scopeToDeclareIn = rootVar.getScope();
+      }
+    }
+  }
 
-        // don't try to declare in the global scope if there's
-        // already a symbol there with this name.
-
-      // declared in closest scope?
+  // If the variable has already been declared in the target scope, report an error.
   if (scopeToDeclareIn.isDeclared(variableName, false)) {
     Var oldVar = scopeToDeclareIn.getVar(variableName);
-        validator.expectUndeclaredVariable(
-            sourceName, n, parent, oldVar, variableName, type);
+    validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);
   } else {
     if (!inferred) {
       setDeferredType(n, type);
     }
     CompilerInput input = compiler.getInput(sourceName);
     scopeToDeclareIn.declare(variableName, n, type, input, inferred);
 
     if (shouldDeclareOnGlobalThis) {
-          ObjectType globalThis =
-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
+      ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
       boolean isExtern = input.isExtern();
       if (inferred) {
         globalThis.defineInferredProperty(variableName,
-                type == null ?
-                    getNativeType(JSTypeNative.NO_TYPE) :
-                    type,
+            type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,
             isExtern);
       } else {
         globalThis.defineDeclaredProperty(variableName, type, isExtern);
       }
     }
 
-        // If we're in the global scope, also declare var.prototype
-        // in the scope chain.
+    // If we're in the (possibly promoted) global scope and the type is a function,
+    // also declare its "prototype" property.
     if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {
       FunctionType fnType = (FunctionType) type;
       if (fnType.isConstructor() || fnType.isInterface()) {
         FunctionType superClassCtor = fnType.getSuperClassConstructor();
         scopeToDeclareIn.declare(variableName + ".prototype", n,
             fnType.getPrototype(), compiler.getInput(sourceName),
-                /* declared iff there's an explicit supertype */
             superClassCtor == null ||
-                superClassCtor.getInstanceType().equals(
-                    getNativeType(OBJECT_TYPE)));
+            superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));
       }
     }
   }
 }
\ No newline at end of file
