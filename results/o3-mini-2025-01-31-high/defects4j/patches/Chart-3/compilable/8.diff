diff --git a/tmp/b2990616-c801-4015-b921-136e48e89f52_buggy.java b/tmp/669c7015-aa9f-4adc-94f8-17614c503ec7_fixed.java
index 388771b..5f1fd09 100644
--- a/tmp/b2990616-c801-4015-b921-136e48e89f52_buggy.java
+++ b/tmp/669c7015-aa9f-4adc-94f8-17614c503ec7_fixed.java
@@ -1,37 +1,41 @@
 /**
  * Creates a new timeseries by copying a subset of the data in this time
  * series.
  *
  * @param start  the index of the first time period to copy.
  * @param end  the index of the last time period to copy.
  *
  * @return A series containing a copy of this times series from start until
  *         end.
  *
  * @throws CloneNotSupportedException if there is a cloning problem.
  */
 public TimeSeries createCopy(int start, int end)
         throws CloneNotSupportedException {
     if (start < 0) {
         throw new IllegalArgumentException("Requires start >= 0.");
     }
     if (end < start) {
         throw new IllegalArgumentException("Requires start <= end.");
     }
     TimeSeries copy = (TimeSeries) super.clone();
-        copy.data = new java.util.ArrayList();
-        if (this.data.size() > 0) {
+    
+    // Instead of replacing the data list, clear the cloned list
+    // so that any cached values in the series (e.g. minY and maxY)
+    // can be recalculated properly when adding new items.
+    copy.data.clear();
+    copy.minY = Double.NaN;
+    copy.maxY = Double.NaN;
+    
     for (int index = start; index <= end; index++) {
-                TimeSeriesDataItem item
-                        = (TimeSeriesDataItem) this.data.get(index);
+        TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
         TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
         try {
             copy.add(clone);
         }
         catch (SeriesException e) {
             e.printStackTrace();
         }
     }
-        }
     return copy;
 }
\ No newline at end of file
