diff --git a/tmp/410e6fb6-5918-49ec-bd74-175733c0b5b7_buggy.java b/tmp/9cb6e0c4-2576-4c49-a6ad-36f3495b8e63_fixed.java
index b2db1d6..f967550 100644
--- a/tmp/410e6fb6-5918-49ec-bd74-175733c0b5b7_buggy.java
+++ b/tmp/9cb6e0c4-2576-4c49-a6ad-36f3495b8e63_fixed.java
@@ -1,29 +1,21 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
-            Class<?> mixInCls, AnnotatedMethodMap mixIns)
-    {
-        List<Class<?>> parents = new ArrayList<Class<?>>();
+        Class<?> mixInCls, AnnotatedMethodMap mixIns) {
+    List<Class<?>> parents = new ArrayList<>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
-        for (Class<?> mixin : parents) {
+    // Process mix-in classes from ancestor to descendant
+    for (int i = parents.size() - 1; i >= 0; i--) {
+        Class<?> mixin = parents.get(i);
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
             if (am != null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
                 mixIns.add(_constructMethod(m));
             }
         }
     }
 }
\ No newline at end of file
