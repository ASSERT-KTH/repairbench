diff --git a/tmp/a7a93aa3-b330-45dd-8851-73c21dd9fc3f_buggy.java b/tmp/929ca7fe-02d2-4283-892e-b247e25a7fd0_fixed.java
index b2db1d6..0faa968 100644
--- a/tmp/a7a93aa3-b330-45dd-8851-73c21dd9fc3f_buggy.java
+++ b/tmp/929ca7fe-02d2-4283-892e-b247e25a7fd0_fixed.java
@@ -1,29 +1,27 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
             if (am != null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                // For multi-level mixin merging (Issue #515), check if a mixin method is
+                // already registered; if so, merge annotations rather than replace.
+                AnnotatedMethod existing = mixIns.find(m);
+                if (existing == null) {
                     mixIns.add(_constructMethod(m));
+                } else {
+                    _addMixUnders(m, existing);
+                }
             }
         }
     }
 }
\ No newline at end of file
