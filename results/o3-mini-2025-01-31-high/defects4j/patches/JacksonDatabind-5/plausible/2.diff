diff --git a/tmp/17536354-e856-45e0-b988-fb5bf0d645af_buggy.java b/tmp/b061d2b5-8013-4a33-b11e-dc174cd12c0c_fixed.java
index b2db1d6..66582c1 100644
--- a/tmp/17536354-e856-45e0-b988-fb5bf0d645af_buggy.java
+++ b/tmp/b061d2b5-8013-4a33-b11e-dc174cd12c0c_fixed.java
@@ -1,29 +1,24 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
-            Class<?> mixInCls, AnnotatedMethodMap mixIns)
-    {
+        Class<?> mixInCls, AnnotatedMethodMap mixIns) {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
+            // Try to find the method in the main methods map...
             AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
+            // ...if not found there, try in the mixIns map, so that we can merge multi-level mixins
+            if (am == null) {
+                am = mixIns.find(m);
+            }
             if (am != null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
                 mixIns.add(_constructMethod(m));
             }
         }
     }
 }
\ No newline at end of file
