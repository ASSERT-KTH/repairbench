diff --git a/tmp/e9c88fdf-e045-424c-98ef-e7af603ce1db_buggy.java b/tmp/5c573357-d9d6-49e7-98dc-667b966d4e86_fixed.java
index 88647d1..c94d60b 100644
--- a/tmp/e9c88fdf-e045-424c-98ef-e7af603ce1db_buggy.java
+++ b/tmp/5c573357-d9d6-49e7-98dc-667b966d4e86_fixed.java
@@ -1,44 +1,27 @@
-    /**
-     * Find a zero in the given interval.
-     * <p>
-     * Requires that the values of the function at the endpoints have opposite
-     * signs. An <code>IllegalArgumentException</code> is thrown if this is not
-     * the case.</p>
-     * 
-     * @param min the lower bound for the interval.
-     * @param max the upper bound for the interval.
-     * @return the value where the function is zero
-     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating the
-     * function 
-     * @throws IllegalArgumentException if min is not less than max or the
-     * signs of the values of the function at the endpoints are not opposites
-     */
-    public double solve(double min, double max) throws MaxIterationsExceededException, 
-        FunctionEvaluationException {
-        
+public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException {
     clearResult();
     verifyInterval(min, max);
     
-        double ret = Double.NaN;
-        
     double yMin = f.value(min);
     double yMax = f.value(max);
     
-        // Verify bracketing
-        double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
-                throw new IllegalArgumentException
-                ("Function values at endpoints do not have different signs." +
+    // If either endpoint is close enough to zero, return that endpoint.
+    double absoluteAccuracy = getAbsoluteAccuracy();
+    if (Math.abs(yMin) <= absoluteAccuracy) {
+        return min;
+    }
+    if (Math.abs(yMax) <= absoluteAccuracy) {
+        return max;
+    }
+    
+    // Verify bracketing: the function values must have opposite signs.
+    if (yMin * yMax >= 0) {
+        throw new IllegalArgumentException("Function values at endpoints do not have different signs. " +
             "Endpoints: [" + min + ", " + max + "]" +
             " Values: [" + yMin + ", " + yMax + "]");
-        } else {
-            // solve using only the first endpoint as initial guess
-            ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
     }
     
+    // Solve using only the first endpoint as the initial guess.
+    double ret = solve(min, yMin, max, yMax, min, yMin);
     return ret;
 }
\ No newline at end of file
