diff --git a/tmp/12c6b0b1-d157-4ec9-b436-b750e13e742a_buggy.java b/tmp/04492f2f-0c8c-41b7-9d6a-17d7b0e7dba5_fixed.java
index 88647d1..3c7e5d8 100644
--- a/tmp/12c6b0b1-d157-4ec9-b436-b750e13e742a_buggy.java
+++ b/tmp/04492f2f-0c8c-41b7-9d6a-17d7b0e7dba5_fixed.java
@@ -1,44 +1,29 @@
-    /**
-     * Find a zero in the given interval.
-     * <p>
-     * Requires that the values of the function at the endpoints have opposite
-     * signs. An <code>IllegalArgumentException</code> is thrown if this is not
-     * the case.</p>
-     * 
-     * @param min the lower bound for the interval.
-     * @param max the upper bound for the interval.
-     * @return the value where the function is zero
-     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating the
-     * function 
-     * @throws IllegalArgumentException if min is not less than max or the
-     * signs of the values of the function at the endpoints are not opposites
-     */
-    public double solve(double min, double max) throws MaxIterationsExceededException, 
-        FunctionEvaluationException {
+public double solve(double min, double max)
+        throws MaxIterationsExceededException, FunctionEvaluationException {
     
     clearResult();
     verifyInterval(min, max);
 
-        double ret = Double.NaN;
-        
     double yMin = f.value(min);
     double yMax = f.value(max);
 
-        // Verify bracketing
-        double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
-                throw new IllegalArgumentException
-                ("Function values at endpoints do not have different signs." +
+    // If either endpoint is sufficiently close to zero, return it immediately.
+    double functionValueAccuracy = getFunctionValueAccuracy();
+    if (Math.abs(yMin) <= functionValueAccuracy) {
+        return min;
+    }
+    if (Math.abs(yMax) <= functionValueAccuracy) {
+        return max;
+    }
+
+    // Now check that the endpoints bracket the root.
+    if (yMin * yMax > 0) {
+        throw new IllegalArgumentException(
+            "Function values at endpoints do not have different signs." +
             "  Endpoints: [" + min + "," + max + "]" +
             "  Values: [" + yMin + "," + yMax + "]");
-        } else {
-            // solve using only the first endpoint as initial guess
-            ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
     }
 
-        return ret;
+    // Use the first endpoint as the initial guess.
+    return solve(min, yMin, max, yMax, min, yMin);
 }
\ No newline at end of file
