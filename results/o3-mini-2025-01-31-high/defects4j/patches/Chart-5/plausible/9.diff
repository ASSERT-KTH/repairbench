diff --git a/tmp/af532556-641d-41d8-af3c-54942f424b64_buggy.java b/tmp/bd7599ce-bf27-4a8d-9ff8-93ff735f4c7e_fixed.java
index fd8eae5..16d2910 100644
--- a/tmp/af532556-641d-41d8-af3c-54942f424b64_buggy.java
+++ b/tmp/bd7599ce-bf27-4a8d-9ff8-93ff735f4c7e_fixed.java
@@ -1,47 +1,45 @@
-    /**
-     * Adds or updates an item in the series and sends a
-     * {@link SeriesChangeEvent} to all registered listeners.
-     *
-     * @param x  the x-value (<code>null</code> not permitted).
-     * @param y  the y-value (<code>null</code> permitted).
-     *
-     * @return A copy of the overwritten data item, or <code>null</code> if no
-     *         item was overwritten.
-     */
 public XYDataItem addOrUpdate(Number x, Number y) {
     if (x == null) {
         throw new IllegalArgumentException("Null 'x' argument.");
     }
     
-        // if we get to here, we know that duplicate X values are not permitted
     XYDataItem overwritten = null;
     int index = indexOf(x);
+    
     if (index >= 0 && !this.allowDuplicateXValues) {
+        // Update the existing item (duplicate x value not allowed)
         XYDataItem existing = (XYDataItem) this.data.get(index);
         try {
             overwritten = (XYDataItem) existing.clone();
-            }
-            catch (CloneNotSupportedException e) {
+        } catch (CloneNotSupportedException e) {
             throw new SeriesException("Couldn't clone XYDataItem!");
         }
         existing.setY(y);
-        }
-        else {
-            // if the series is sorted, the negative index is a result from
-            // Collections.binarySearch() and tells us where to insert the
-            // new item...otherwise it will be just -1 and we should just
-            // append the value to the list...
+    } else {
+        // Add a new item (duplicate x values allowed or x not found)
         if (this.autoSort) {
-                this.data.add(-index - 1, new XYDataItem(x, y));
+            int insertIndex;
+            if (index >= 0) {
+                // indexOf returned a valid index for a duplicate x value
+                // Find the position after the last element with the same x value.
+                insertIndex = index + 1;
+                while (insertIndex < this.data.size()
+                        && ((XYDataItem) this.data.get(insertIndex)).getX().equals(x)) {
+                    insertIndex++;
                 }
-            else {
+            } else {
+                // index is negative; use the insertion point from binary search
+                insertIndex = -index - 1;
+            }
+            this.data.add(insertIndex, new XYDataItem(x, y));
+        } else {
             this.data.add(new XYDataItem(x, y));
         }
-            // check if this addition will exceed the maximum item count...
+        // Check if adding this item has exceeded the maximum allowed count
         if (getItemCount() > this.maximumItemCount) {
             this.data.remove(0);
         }
     }
     fireSeriesChanged();
     return overwritten;
 }
\ No newline at end of file
