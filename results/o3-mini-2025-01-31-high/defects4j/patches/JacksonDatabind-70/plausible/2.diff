diff --git a/tmp/2c22c6a1-3f89-4974-92d2-55586cd59439_buggy.java b/tmp/b30167e4-ce50-4236-b478-7ea8e0d6c43a_fixed.java
index 0313249..5941d19 100644
--- a/tmp/2c22c6a1-3f89-4974-92d2-55586cd59439_buggy.java
+++ b/tmp/b30167e4-ce50-4236-b478-7ea8e0d6c43a_fixed.java
@@ -1,32 +1,33 @@
 /**
  * Specialized method for removing specified existing entry.
  * NOTE: entry MUST exist, otherwise an exception is thrown.
  */
-    public void remove(SettableBeanProperty propToRm)
-    {
+public void remove(SettableBeanProperty propToRm) {
     ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
     String key = getPropertyName(propToRm);
     boolean found = false;
 
+    // Note: keys are stored in _hashArea slots preceding the properties,
+    // and they have already been converted to lower-case if needed.
     for (int i = 1, end = _hashArea.length; i < end; i += 2) {
         SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
         if (prop == null) {
             continue;
         }
         if (!found) {
-                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
-                //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
-                if (found) {
+            // Compare with the key stored in the hash area (which is lower-case)
+            Object slotKey = _hashArea[i - 1];
+            if (key.equals(slotKey)) {
+                found = true;
                 // need to leave a hole here
                 _propsInOrder[_findFromOrdered(prop)] = null;
                 continue;
             }
         }
         props.add(prop);
     }
     if (!found) {
         throw new NoSuchElementException("No entry '" + propToRm.getName() + "' found, can't remove");
     }
     init(props);
 }
\ No newline at end of file
