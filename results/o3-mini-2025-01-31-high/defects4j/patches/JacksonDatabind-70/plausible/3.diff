diff --git a/tmp/3b3477b7-9fb4-4ec7-8997-94bda3d32e4e_buggy.java b/tmp/1831f3da-18a9-497b-937f-480e06565e81_fixed.java
index 0313249..f92085b 100644
--- a/tmp/3b3477b7-9fb4-4ec7-8997-94bda3d32e4e_buggy.java
+++ b/tmp/1831f3da-18a9-497b-937f-480e06565e81_fixed.java
@@ -1,32 +1,34 @@
 /**
  * Specialized method for removing specified existing entry.
  * NOTE: entry MUST exist, otherwise an exception is thrown.
  */
 public void remove(SettableBeanProperty propToRm)
 {
     ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
     String key = getPropertyName(propToRm);
     boolean found = false;
 
+    // Iterate over pairs: key stored at even indices, property at odd indices
     for (int i = 1, end = _hashArea.length; i < end; i += 2) {
         SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
         if (prop == null) {
             continue;
         }
         if (!found) {
-                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
-                //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
+            // Check against the key in the 'name slot' (stored at index i-1),
+            // which is guaranteed to be lower-cased when case-insensitive.
+            Object storedKey = _hashArea[i - 1];
+            found = key.equals(storedKey);
             if (found) {
-                    // need to leave a hole here
+                // Remove from ordered properties by leaving a hole.
                 _propsInOrder[_findFromOrdered(prop)] = null;
                 continue;
             }
         }
         props.add(prop);
     }
     if (!found) {
         throw new NoSuchElementException("No entry '" + propToRm.getName() + "' found, can't remove");
     }
     init(props);
 }
\ No newline at end of file
