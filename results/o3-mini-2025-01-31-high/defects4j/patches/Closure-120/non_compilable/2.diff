diff --git a/tmp/9f0cc55d-8488-44e9-b9b3-7f0b06cfd3be_buggy.java b/tmp/e387b470-54ce-42e1-99dd-afebd1804486_fixed.java
index 07b0792..26fef71 100644
--- a/tmp/9f0cc55d-8488-44e9-b9b3-7f0b06cfd3be_buggy.java
+++ b/tmp/e387b470-54ce-42e1-99dd-afebd1804486_fixed.java
@@ -1,22 +1,34 @@
 /**
  * @return Whether the variable is only assigned a value once for its
  *     lifetime.
  */
 boolean isAssignedOnceInLifetime() {
   Reference ref = getOneAndOnlyAssignment();
   if (ref == null) {
     return false;
   }
 
-      // Make sure this assignment is not in a loop.
-      for (BasicBlock block = ref.getBasicBlock();
-           block != null; block = block.getParent()) {
-        if (block.isFunction) {
-          break;
-        } else if (block.isLoop) {
+  // For a global variable its only “instance” lives for the entire script.
+  // Thus if its one-and-only assignment does not occur at the script level
+  // (for example, if it’s assigned from within a function),
+  // then it will be executed on every function invocation.
+  if (isGlobal()) {
+    BasicBlock assignmentBlock = ref.getBasicBlock();
+    BasicBlock parent = assignmentBlock.getParent();
+    // If the assignment is not directly in the script body, then we must
+    // assume it runs more than once.
+    if (parent != null && !parent.isScript) {
+      return false;
+    }
+  }
+
+  // Walk upward through the control flow structure to see if the assignment
+  // occurs inside a loop. (Do not stop at function boundaries.)
+  for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {
+    if (block.isLoop) {
       return false;
     }
   }
 
   return true;
 }
\ No newline at end of file
