diff --git a/tmp/46bbb981-5532-4566-b714-cf365d759d34_buggy.java b/tmp/b0939fd9-1cf0-4c5b-9616-93ddfde87246_fixed.java
index 14b78fb..1a1050e 100644
--- a/tmp/46bbb981-5532-4566-b714-cf365d759d34_buggy.java
+++ b/tmp/b0939fd9-1cf0-4c5b-9616-93ddfde87246_fixed.java
@@ -1,56 +1,42 @@
 /**
  * Finds the next text wrap position after <code>startPos</code> for the
  * text in <code>text</code> with the column width <code>width</code>.
-     * The wrap point is the last position before startPos+width having a 
-     * whitespace character (space, \n, \r). If there is no whitespace character
-     * before startPos+width, it will return startPos+width.
+ * The wrap point is the last position (at or before startPos+width) that is a
+ * whitespace character (space, \n, or \r). If no such whitespace is found,
+ * then the text is simply chopped at startPos+width.
  *
  * @param text The text being searched for the wrap position
  * @param width width of the wrapped text
-     * @param startPos position from which to start the lookup whitespace
-     * character
-     * @return postion on which the text must be wrapped or -1 if the wrap
+ * @param startPos position from which to start looking for a whitespace character
+ * @return position on which the text must be wrapped, or -1 if the wrap
  *         position is at the end of the text
  */
-    protected int findWrapPos(String text, int width, int startPos)
-    {
+protected int findWrapPos(String text, int width, int startPos) {
     int pos;
     
-        // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
-        {
+    // If there is a newline or a tab before the wrap limit, break there.
+    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= startPos + width)
+            || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= startPos + width)) {
         return pos + 1;
-        }
-        else if (startPos + width >= text.length())
-        {
+    } else if (startPos + width >= text.length()) {
         return -1;
     }
 
-
-        // look for the last whitespace character before startPos+width
+    // Look backwards from startPos+width for a whitespace character.
     pos = startPos + width;
-
-        char c;
-
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
-        {
+    while (pos > startPos) {
+        char c = text.charAt(pos);
+        if (c == ' ' || c == '\n' || c == '\r') {
+            break;
+        }
         --pos;
     }
     
-        // if we found it - just return
-        if (pos > startPos)
-        {
+    // If a whitespace was found (but not at the very start), use it.
+    if (pos > startPos) {
         return pos;
     }
     
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
-        }
-        return pos == text.length() ? -1 : pos;
+    // No whitespace found in the backwards scan; break the word at startPos+width.
+    return startPos + width;
 }
\ No newline at end of file
