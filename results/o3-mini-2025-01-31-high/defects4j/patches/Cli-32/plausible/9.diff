diff --git a/tmp/410a140e-56fc-4e1a-9efa-477e86c181f7_buggy.java b/tmp/b802a25d-38ec-478b-96cc-b38029330e15_fixed.java
index 14b78fb..d62f309 100644
--- a/tmp/410a140e-56fc-4e1a-9efa-477e86c181f7_buggy.java
+++ b/tmp/b802a25d-38ec-478b-96cc-b38029330e15_fixed.java
@@ -1,56 +1,29 @@
-    /**
-     * Finds the next text wrap position after <code>startPos</code> for the
-     * text in <code>text</code> with the column width <code>width</code>.
-     * The wrap point is the last position before startPos+width having a 
-     * whitespace character (space, \n, \r). If there is no whitespace character
-     * before startPos+width, it will return startPos+width.
-     *
-     * @param text The text being searched for the wrap position
-     * @param width width of the wrapped text
-     * @param startPos position from which to start the lookup whitespace
-     * character
-     * @return postion on which the text must be wrapped or -1 if the wrap
-     * position is at the end of the text
-     */
-    protected int findWrapPos(String text, int width, int startPos)
-    {
+protected int findWrapPos(String text, int width, int startPos) {
+    int limit = startPos + width;
     int pos;
 
-        // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
-        {
+    // Check if a newline or tab occurs before the effective wrap limit.
+    if ((pos = text.indexOf('\n', startPos)) != -1 && pos < limit) {
         return pos + 1;
     }
-        else if (startPos + width >= text.length())
-        {
+    if ((pos = text.indexOf('\t', startPos)) != -1 && pos < limit) {
+        return pos + 1;
+    }
+
+    // If the line ends before hitting the width, signal no wrap needed.
+    if (limit >= text.length()) {
         return -1;
     }
 
-
-        // look for the last whitespace character before startPos+width
-        pos = startPos + width;
-
-        char c;
-
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
-        {
-            --pos;
+    // Look backwards for the last whitespace character between startPos+width and startPos+1.
+    // (We ignore a whitespace at startPos to avoid an empty line.)
+    for (int i = limit; i > startPos; i--) {
+        char c = text.charAt(i);
+        if (c == ' ' || c == '\n' || c == '\r') {
+            return i;
         }
-
-        // if we found it - just return
-        if (pos > startPos)
-        {
-            return pos;
     }
 
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
-        }
-        return pos == text.length() ? -1 : pos;
+    // If no whitespace character was found, simply break at startPos+width.
+    return limit;
 }
\ No newline at end of file
