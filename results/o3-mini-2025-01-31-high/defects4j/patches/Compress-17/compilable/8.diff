diff --git a/tmp/c0a8a740-1058-4cf0-8910-acb6f3473705_buggy.java b/tmp/0816a2ef-81a4-47d9-b072-2ed0b610f8bf_fixed.java
index 3b9a3c0..fe9f12c 100644
--- a/tmp/c0a8a740-1058-4cf0-8910-acb6f3473705_buggy.java
+++ b/tmp/0816a2ef-81a4-47d9-b072-2ed0b610f8bf_fixed.java
@@ -1,71 +1,60 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    // If the field is binary encoded, decode it as a base‑256 number.
+    // In tar headers, if the high order bit is set the value is stored in binary (two’s complement)
+    // and should be interpreted as an unsigned number.
+    if ((buffer[offset] & 0x80) != 0) {
+        long result = 0;
+        for (int i = 0; i < length; i++) {
+            result = (result << 8) | (buffer[offset + i] & 0xff);
+        }
+        return result;
+    }
+
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2){
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
+    // Work-around: if the very first byte is NUL, return 0.
     if (buffer[start] == 0) {
         return 0L;
     }
 
-        // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+    // Skip any leading spaces.
+    while (start < end && buffer[start] == ' ') {
         start++;
-            } else {
-                break;
-            }
     }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
+    // The field must have a trailing NUL or space.
+    if (end > start) {
+        byte trailer = buffer[end - 1];
         if (trailer == 0 || trailer == ' ') {
             end--;
         } else {
             throw new IllegalArgumentException(
                 exceptionMessage(buffer, offset, length, end - 1, trailer));
         }
-        // May have additional NULs or spaces
-        trailer = buffer[end - 1];
+    }
+    // It may contain an additional trailing NUL or space.
+    if (end > start) {
+        byte trailer = buffer[end - 1];
         if (trailer == 0 || trailer == ' ') {
             end--;
         }
+    }
 
+    // Parse the remaining octal digits.
     for (; start < end; start++) {
         final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                 exceptionMessage(buffer, offset, length, start, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        result = (result << 3) + (currentByte - '0');
     }
 
     return result;
 }
\ No newline at end of file
