diff --git a/tmp/f1f12d16-b8ad-4138-bad6-5f481c89bf0c_buggy.java b/tmp/6db48904-e6a6-493a-8aff-ba06ef16ef93_fixed.java
index d907b39..539c1c0 100644
--- a/tmp/f1f12d16-b8ad-4138-bad6-5f481c89bf0c_buggy.java
+++ b/tmp/6db48904-e6a6-493a-8aff-ba06ef16ef93_fixed.java
@@ -1,56 +1,69 @@
 public int read(byte[] buffer, int start, int length) throws IOException {
     if (closed) {
         throw new IOException("The stream is closed");
     }
-        if (inf.finished() || current == null) {
+    // We only check that an entry exists. (Don’t test inf.finished() here –
+    // that will be handled later so that truncated entries don’t slip by.)
+    if (current == null) {
         return -1;
     }
+    if (start < 0 || length < 0 || start > buffer.length || buffer.length - start < length) {
+        throw new ArrayIndexOutOfBoundsException();
+    }
 
-        // avoid int overflow, check null buffer
-        if (start <= buffer.length && length >= 0 && start >= 0
-            && buffer.length - start >= length) {
     if (current.getMethod() == ZipArchiveOutputStream.STORED) {
         int csize = (int) current.getSize();
         if (readBytesOfEntry >= csize) {
             return -1;
         }
         if (offsetInBuffer >= lengthOfLastRead) {
             offsetInBuffer = 0;
+            // If the underlying stream ends before we’ve read the expected amount, it’s truncated.
             if ((lengthOfLastRead = in.read(buf)) == -1) {
+                if (readBytesOfEntry < csize) {
+                    throw new ZipException("Truncated ZIP file");
+                }
                 return -1;
             }
             count(lengthOfLastRead);
             bytesReadFromStream += lengthOfLastRead;
         }
-                int toRead = length > lengthOfLastRead
-                    ? lengthOfLastRead - offsetInBuffer
-                    : length;
+        int toRead = length;
+        if (length > (lengthOfLastRead - offsetInBuffer)) {
+            toRead = lengthOfLastRead - offsetInBuffer;
+        }
         if ((csize - readBytesOfEntry) < toRead) {
             toRead = csize - readBytesOfEntry;
         }
         System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
         offsetInBuffer += toRead;
         readBytesOfEntry += toRead;
         crc.update(buffer, start, toRead);
         return toRead;
-            }
+    } else { // DEFLATED entry
         if (inf.needsInput()) {
             fill();
             if (lengthOfLastRead > 0) {
                 bytesReadFromStream += lengthOfLastRead;
             }
         }
-            int read = 0;
+        int r;
         try {
-                read = inf.inflate(buffer, start, length);
+            r = inf.inflate(buffer, start, length);
         } catch (DataFormatException e) {
             throw new ZipException(e.getMessage());
         }
-            if (read == 0 && inf.finished()) {
+        // If we actually got some bytes, update our counter.
+        readBytesOfEntry += r;
+        // When inflate() returns 0 while finished, it could mean either a normal end‐of‐entry
+        // (when all expected bytes have been read) or a truncated entry.
+        if (r == 0 && inf.finished()) {
+            if (current.getSize() != -1 && readBytesOfEntry < current.getSize()) {
+                throw new ZipException("Truncated ZIP file");
+            }
             return -1;
         }
-            crc.update(buffer, start, read);
-            return read;
+        crc.update(buffer, start, r);
+        return r;
     }
-        throw new ArrayIndexOutOfBoundsException();
 }
\ No newline at end of file
