diff --git a/tmp/d5881bb5-a18c-4001-8ed1-db5d5c6f95d1_buggy.java b/tmp/7f5d6c24-8e1d-4747-95f4-8cf5c7f9b461_fixed.java
index d907b39..e72d64e 100644
--- a/tmp/d5881bb5-a18c-4001-8ed1-db5d5c6f95d1_buggy.java
+++ b/tmp/7f5d6c24-8e1d-4747-95f4-8cf5c7f9b461_fixed.java
@@ -1,56 +1,63 @@
 public int read(byte[] buffer, int start, int length) throws IOException {
     if (closed) {
         throw new IOException("The stream is closed");
     }
     if (inf.finished() || current == null) {
         return -1;
     }
-
-        // avoid int overflow, check null buffer
-        if (start <= buffer.length && length >= 0 && start >= 0
-            && buffer.length - start >= length) {
+    if (start <= buffer.length && length >= 0 && start >= 0 && buffer.length - start >= length) {
         if (current.getMethod() == ZipArchiveOutputStream.STORED) {
             int csize = (int) current.getSize();
             if (readBytesOfEntry >= csize) {
                 return -1;
             }
             if (offsetInBuffer >= lengthOfLastRead) {
                 offsetInBuffer = 0;
+                // If we hit EOF before reading the expected number of bytes, the entry is truncated.
                 if ((lengthOfLastRead = in.read(buf)) == -1) {
+                    if (readBytesOfEntry < csize) {
+                        throw new ZipException("Truncated ZIP file");
+                    }
                     return -1;
                 }
                 count(lengthOfLastRead);
                 bytesReadFromStream += lengthOfLastRead;
             }
-                int toRead = length > lengthOfLastRead
-                    ? lengthOfLastRead - offsetInBuffer
-                    : length;
+            int toRead = length > lengthOfLastRead ? lengthOfLastRead - offsetInBuffer : length;
             if ((csize - readBytesOfEntry) < toRead) {
                 toRead = csize - readBytesOfEntry;
             }
             System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
             offsetInBuffer += toRead;
             readBytesOfEntry += toRead;
             crc.update(buffer, start, toRead);
             return toRead;
         }
+        // For non-STORED (i.e. DEFLATED) entries:
         if (inf.needsInput()) {
             fill();
             if (lengthOfLastRead > 0) {
                 bytesReadFromStream += lengthOfLastRead;
             }
         }
-            int read = 0;
+        int numRead;
         try {
-                read = inf.inflate(buffer, start, length);
+            numRead = inf.inflate(buffer, start, length);
         } catch (DataFormatException e) {
             throw new ZipException(e.getMessage());
         }
-            if (read == 0 && inf.finished()) {
+        if (numRead > 0) {
+            readBytesOfEntry += numRead;
+        } else if (numRead == 0 && inf.finished()) {
+            // If the inflater has finished but we haven't produced all expected bytes,
+            // then the entry is truncated.
+            if (current.getSize() != -1 && readBytesOfEntry < current.getSize()) {
+                throw new ZipException("Truncated ZIP file");
+            }
             return -1;
         }
-            crc.update(buffer, start, read);
-            return read;
+        crc.update(buffer, start, numRead);
+        return numRead;
     }
     throw new ArrayIndexOutOfBoundsException();
 }
\ No newline at end of file
