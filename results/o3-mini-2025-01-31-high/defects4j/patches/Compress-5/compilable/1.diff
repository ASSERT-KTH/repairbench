diff --git a/tmp/ceddf475-07b5-4a04-92b8-a69617a28fca_buggy.java b/tmp/8d6034a3-537d-47d9-92bf-45631545600e_fixed.java
index d907b39..5549ce9 100644
--- a/tmp/ceddf475-07b5-4a04-92b8-a69617a28fca_buggy.java
+++ b/tmp/8d6034a3-537d-47d9-92bf-45631545600e_fixed.java
@@ -1,56 +1,70 @@
 public int read(byte[] buffer, int start, int length) throws IOException {
     if (closed) {
         throw new IOException("The stream is closed");
     }
+    // Per InputStream contract: a zero-length read returns 0 immediately.
+    if (length == 0) {
+        return 0;
+    }
     if (inf.finished() || current == null) {
         return -1;
     }
+    // Validate parameters.
+    if (!(start >= 0 && length >= 0 && start <= buffer.length && buffer.length - start >= length)) {
+        throw new ArrayIndexOutOfBoundsException();
+    }
 
-        // avoid int overflow, check null buffer
-        if (start <= buffer.length && length >= 0 && start >= 0
-            && buffer.length - start >= length) {
+    // Handle STORED (uncompressed) entries.
     if (current.getMethod() == ZipArchiveOutputStream.STORED) {
         int csize = (int) current.getSize();
         if (readBytesOfEntry >= csize) {
             return -1;
         }
         if (offsetInBuffer >= lengthOfLastRead) {
             offsetInBuffer = 0;
+            // If we cannot read more bytes but haven't reached the expected entry size, the entry is truncated.
             if ((lengthOfLastRead = in.read(buf)) == -1) {
-                        return -1;
+                throw new IOException("Truncated ZIP file");
             }
             count(lengthOfLastRead);
             bytesReadFromStream += lengthOfLastRead;
         }
-                int toRead = length > lengthOfLastRead
-                    ? lengthOfLastRead - offsetInBuffer
-                    : length;
+        // Calculate how many bytes are available in our internal buffer.
+        int available = lengthOfLastRead - offsetInBuffer;
+        // We want to read either the user requested length or what is available.
+        int toRead = length < available ? length : available;
+        // Do not read past the expected size.
         if ((csize - readBytesOfEntry) < toRead) {
-                    toRead = csize - readBytesOfEntry;
+            toRead = (int) (csize - readBytesOfEntry);
         }
         System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
         offsetInBuffer += toRead;
         readBytesOfEntry += toRead;
         crc.update(buffer, start, toRead);
         return toRead;
     }
+
+    // Handle DEFLATED (compressed) entries.
     if (inf.needsInput()) {
         fill();
         if (lengthOfLastRead > 0) {
             bytesReadFromStream += lengthOfLastRead;
         }
     }
-            int read = 0;
+    int read;
     try {
         read = inf.inflate(buffer, start, length);
     } catch (DataFormatException e) {
         throw new ZipException(e.getMessage());
     }
-            if (read == 0 && inf.finished()) {
+    // We must not return 0 if the inflater is not finished.
+    if (read == 0) {
+        if (inf.finished()) {
             return -1;
+        } else {
+            throw new IOException("Truncated ZIP file");
+        }
     }
     crc.update(buffer, start, read);
     return read;
 }
\ No newline at end of file
-        throw new ArrayIndexOutOfBoundsException();
-    }
