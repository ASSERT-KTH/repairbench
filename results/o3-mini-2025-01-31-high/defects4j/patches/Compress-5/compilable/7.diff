diff --git a/tmp/06bb2c14-323d-4c7d-b651-7485c8d0dc0f_buggy.java b/tmp/a0d87c90-6968-45ed-94bd-19c247f5c6a7_fixed.java
index d907b39..38c6bd2 100644
--- a/tmp/06bb2c14-323d-4c7d-b651-7485c8d0dc0f_buggy.java
+++ b/tmp/a0d87c90-6968-45ed-94bd-19c247f5c6a7_fixed.java
@@ -1,56 +1,72 @@
 public int read(byte[] buffer, int start, int length) throws IOException {
     if (closed) {
         throw new IOException("The stream is closed");
     }
     if (inf.finished() || current == null) {
         return -1;
     }
-
-        // avoid int overflow, check null buffer
+    // Check parameters avoiding int overflow and null buffer issues
     if (start <= buffer.length && length >= 0 && start >= 0
         && buffer.length - start >= length) {
         if (current.getMethod() == ZipArchiveOutputStream.STORED) {
+            // For STORED entries, we know the size up front.
             int csize = (int) current.getSize();
             if (readBytesOfEntry >= csize) {
                 return -1;
             }
             if (offsetInBuffer >= lengthOfLastRead) {
                 offsetInBuffer = 0;
+                // if no more data is available on the underlying stream
+                // but we haven't seen all expected bytes, then report truncation
                 if ((lengthOfLastRead = in.read(buf)) == -1) {
+                    if (readBytesOfEntry < csize) {
+                        throw new IOException("Truncated ZIP file");
+                    }
                     return -1;
                 }
                 count(lengthOfLastRead);
                 bytesReadFromStream += lengthOfLastRead;
             }
-                int toRead = length > lengthOfLastRead
-                    ? lengthOfLastRead - offsetInBuffer
-                    : length;
+            int toRead = length > lengthOfLastRead ? (lengthOfLastRead - offsetInBuffer) : length;
             if ((csize - readBytesOfEntry) < toRead) {
-                    toRead = csize - readBytesOfEntry;
+                toRead = (int) (csize - readBytesOfEntry);
             }
             System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
             offsetInBuffer += toRead;
             readBytesOfEntry += toRead;
             crc.update(buffer, start, toRead);
             return toRead;
         }
+
+        // For deflated (compressed) entries:
         if (inf.needsInput()) {
             fill();
             if (lengthOfLastRead > 0) {
                 bytesReadFromStream += lengthOfLastRead;
             }
         }
-            int read = 0;
+        int read;
         try {
             read = inf.inflate(buffer, start, length);
         } catch (DataFormatException e) {
             throw new ZipException(e.getMessage());
         }
+        // Accumulate the number of uncompressed bytes read (for deflated entries)
+        if (read > 0) {
+            readBytesOfEntry += read;
+        }
+        // If inflater returns 0 and signals finished, then either we really
+        // reached the end or the entry is truncated. In case the entry's expected
+        // size (current.getSize()) is known and we haven't delivered all bytes,
+        // consider it a truncated entry.
         if (read == 0 && inf.finished()) {
+            if (current.getSize() != -1 && readBytesOfEntry != current.getSize()) {
+                throw new IOException("Truncated ZIP file");
+            }
             return -1;
         }
         crc.update(buffer, start, read);
         return read;
     }
     throw new ArrayIndexOutOfBoundsException();
 }
\ No newline at end of file
