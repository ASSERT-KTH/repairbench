diff --git a/tmp/9030b678-ae0f-4baa-a375-1fe5b7d3e5e4_buggy.java b/tmp/6b33ad74-3b5e-4735-86fa-760b9b2c15d8_fixed.java
index d907b39..c153888 100644
--- a/tmp/9030b678-ae0f-4baa-a375-1fe5b7d3e5e4_buggy.java
+++ b/tmp/6b33ad74-3b5e-4735-86fa-760b9b2c15d8_fixed.java
@@ -1,56 +1,67 @@
 public int read(byte[] buffer, int start, int length) throws IOException {
     if (closed) {
         throw new IOException("The stream is closed");
     }
     if (inf.finished() || current == null) {
         return -1;
     }
-
-        // avoid int overflow, check null buffer
     if (start <= buffer.length && length >= 0 && start >= 0
         && buffer.length - start >= length) {
         if (current.getMethod() == ZipArchiveOutputStream.STORED) {
             int csize = (int) current.getSize();
             if (readBytesOfEntry >= csize) {
                 return -1;
             }
             if (offsetInBuffer >= lengthOfLastRead) {
                 offsetInBuffer = 0;
-                    if ((lengthOfLastRead = in.read(buf)) == -1) {
-                        return -1;
+                lengthOfLastRead = in.read(buf);
+                // If we get EOF before reading the expected amount for a STORED entry,
+                // the entry is truncated.
+                if (lengthOfLastRead == -1) {
+                    throw new ZipException("Truncated ZIP file");
                 }
                 count(lengthOfLastRead);
                 bytesReadFromStream += lengthOfLastRead;
             }
-                int toRead = length > lengthOfLastRead
-                    ? lengthOfLastRead - offsetInBuffer
-                    : length;
+            int toRead = length;
+            // Don't read more than what is available in our internal buffer.
+            if ((lengthOfLastRead - offsetInBuffer) < toRead) {
+                toRead = lengthOfLastRead - offsetInBuffer;
+            }
+            // Also, do not read more than the remaining bytes for this entry.
             if ((csize - readBytesOfEntry) < toRead) {
                 toRead = csize - readBytesOfEntry;
             }
             System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
             offsetInBuffer += toRead;
             readBytesOfEntry += toRead;
             crc.update(buffer, start, toRead);
             return toRead;
-            }
+        } else {
             if (inf.needsInput()) {
                 fill();
                 if (lengthOfLastRead > 0) {
                     bytesReadFromStream += lengthOfLastRead;
                 }
             }
-            int read = 0;
+            int read;
             try {
                 read = inf.inflate(buffer, start, length);
             } catch (DataFormatException e) {
                 throw new ZipException(e.getMessage());
             }
             if (read == 0 && inf.finished()) {
+                // If we have not consumed all the compressed data as indicated by the entry header,
+                // then the entry is truncated.
+                long compSize = current.getCompressedSize();
+                if (compSize != -1 && bytesReadFromStream < compSize) {
+                    throw new ZipException("Truncated ZIP file");
+                }
                 return -1;
             }
             crc.update(buffer, start, read);
             return read;
         }
+    }
     throw new ArrayIndexOutOfBoundsException();
 }
\ No newline at end of file
