diff --git a/tmp/f1fe4c01-13d5-4e76-9b34-fd484a3c9584_buggy.java b/tmp/11748aa2-f998-419b-9c2b-264dbe668f8a_fixed.java
index 91dc4ff..98825dc 100644
--- a/tmp/f1fe4c01-13d5-4e76-9b34-fd484a3c9584_buggy.java
+++ b/tmp/11748aa2-f998-419b-9c2b-264dbe668f8a_fixed.java
@@ -1,107 +1,88 @@
-    // the original object is needed so can check for Number
 private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
         final Appendable out, final boolean newRecord) throws IOException {
     boolean quote = false;
     int start = offset;
     int pos = offset;
     final int end = offset + len;
 
     final char delimChar = getDelimiter();
     final char quoteChar = getQuoteCharacter().charValue();
 
     QuoteMode quoteModePolicy = getQuoteMode();
     if (quoteModePolicy == null) {
         quoteModePolicy = QuoteMode.MINIMAL;
     }
     switch (quoteModePolicy) {
     case ALL:
         quote = true;
         break;
     case NON_NUMERIC:
         quote = !(object instanceof Number);
         break;
     case NONE:
         // Use the existing escaping code
         printAndEscape(value, offset, len, out);
         return;
     case MINIMAL:
         if (len <= 0) {
-                // always quote an empty token that is the first
-                // on the line, as it may be the only thing on the
-                // line. If it were not quoted in that case,
-                // an empty line has no tokens.
+            // Always quote an empty token if it’s the first on the line.
             if (newRecord) {
                 quote = true;
             }
         } else {
-                char c = value.charAt(pos);
-
-                // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
-                if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
-                    quote = true;
-                } else if (c <= COMMENT) {
-                    // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
-                    quote = true;
-                } else {
-                    while (pos < end) {
-                        c = value.charAt(pos);
-                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {
+            // In MINIMAL mode, we quote only if the value contains characters that
+            // might confuse the parser: delimiters, line breaks or leading/trailing whitespace.
+            for (int i = offset; i < end; i++) {
+                char c = value.charAt(i);
+                if (c == LF || c == CR || c == delimChar) {
                     quote = true;
                     break;
                 }
-                        pos++;
             }
-
             if (!quote) {
-                        pos = end - 1;
-                        c = value.charAt(pos);
-                        // Some other chars at the end caused the parser to fail, so for now
-                        // encapsulate if we end in anything less than ' '
-                        if (c <= SP) {
+                // Quote if the first or last character is whitespace.
+                if (Character.isWhitespace(value.charAt(offset)) || Character.isWhitespace(value.charAt(end - 1))) {
+                    quote = true;
+                }
+            }
+            // In standard CSV a field that contains a quote character must be quoted.
+            // However, when the quote character is a backslash, Apache Commons CSV leaves
+            // backslashes unquoted. (See tests testEscapeBackslash1/4/5.)
+            if (!quote && quoteChar != '\\') {
+                for (int i = offset; i < end; i++) {
+                    if (value.charAt(i) == quoteChar) {
                         quote = true;
+                        break;
                     }
                 }
             }
         }
-
         if (!quote) {
-                // no encapsulation needed - write out the original value
-                out.append(value, start, end);
+            // The value doesn’t require quoting – just write it out exactly.
+            out.append(value, offset, end);
             return;
         }
         break;
     default:
         throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
     }
 
-        if (!quote) {
-            // no encapsulation needed - write out the original value
-            out.append(value, start, end);
-            return;
-        }
-
-        // we hit something that needed encapsulation
+    // We must encapsulate the field.
     out.append(quoteChar);
 
-        // Pick up where we left off: pos should be positioned on the first character that caused
-        // the need for encapsulation.
+    // Walk through the field – double any occurrences of the quote character.
     while (pos < end) {
         final char c = value.charAt(pos);
         if (c == quoteChar) {
-                // write out the chunk up until this point
-
-                // add 1 to the length to write out the encapsulator also
+            // Append up to and including the quote that needs to be doubled.
             out.append(value, start, pos + 1);
-                // put the next starting position on the encapsulator so we will
-                // write it out again with the next string (effectively doubling it)
+            // Reset start to the current position so that the quote will be duplicated.
             start = pos;
         }
         pos++;
     }
 
-        // write the last segment
+    // Append the remainder of the field.
     out.append(value, start, pos);
     out.append(quoteChar);
 }
\ No newline at end of file
