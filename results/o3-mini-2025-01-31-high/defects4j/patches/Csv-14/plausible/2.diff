diff --git a/tmp/3baf83b8-1697-4cfb-ac61-ff7e840233b1_buggy.java b/tmp/60b2f5da-983b-4869-8110-a630ca2a3e89_fixed.java
index 91dc4ff..5aef823 100644
--- a/tmp/3baf83b8-1697-4cfb-ac61-ff7e840233b1_buggy.java
+++ b/tmp/60b2f5da-983b-4869-8110-a630ca2a3e89_fixed.java
@@ -1,107 +1,74 @@
-    // the original object is needed so can check for Number
 private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
         final Appendable out, final boolean newRecord) throws IOException {
     boolean quote = false;
-        int start = offset;
-        int pos = offset;
     final int end = offset + len;
-
     final char delimChar = getDelimiter();
     final char quoteChar = getQuoteCharacter().charValue();
 
     QuoteMode quoteModePolicy = getQuoteMode();
     if (quoteModePolicy == null) {
         quoteModePolicy = QuoteMode.MINIMAL;
     }
     switch (quoteModePolicy) {
     case ALL:
         quote = true;
         break;
     case NON_NUMERIC:
         quote = !(object instanceof Number);
         break;
     case NONE:
         // Use the existing escaping code
         printAndEscape(value, offset, len, out);
         return;
     case MINIMAL:
         if (len <= 0) {
-                // always quote an empty token that is the first
-                // on the line, as it may be the only thing on the
-                // line. If it were not quoted in that case,
-                // an empty line has no tokens.
+            // Always quote an empty token that is the first on the line.
             if (newRecord) {
                 quote = true;
             }
         } else {
-                char c = value.charAt(pos);
-
-                // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
-                if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
-                    quote = true;
-                } else if (c <= COMMENT) {
-                    // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
+            // Instead of forcing quoting when the first character isn’t alphanumeric,
+            // simply force quoting only for problematic characters.
+            char c = value.charAt(offset);
+            if (c <= COMMENT) {
                 quote = true;
             } else {
-                    while (pos < end) {
+                for (int pos = offset; pos < end; pos++) {
                     c = value.charAt(pos);
                     if (c == LF || c == CR || c == quoteChar || c == delimChar) {
                         quote = true;
                         break;
                     }
-                        pos++;
                 }
-
+                // Also force quoting if the last character is a control character or a space.
                 if (!quote) {
-                        pos = end - 1;
-                        c = value.charAt(pos);
-                        // Some other chars at the end caused the parser to fail, so for now
-                        // encapsulate if we end in anything less than ' '
+                    c = value.charAt(end - 1);
                     if (c <= SP) {
                         quote = true;
                     }
                 }
             }
         }
-
-            if (!quote) {
-                // no encapsulation needed - write out the original value
-                out.append(value, start, end);
-                return;
-            }
         break;
     default:
         throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
     }
 
     if (!quote) {
-            // no encapsulation needed - write out the original value
-            out.append(value, start, end);
+        // No encapsulation needed – write out the original value.
+        out.append(value, offset, end);
         return;
     }
 
-        // we hit something that needed encapsulation
+    // Write out the field surrounded by quotes. Any quote characters in the field
+    // are doubled.
     out.append(quoteChar);
-
-        // Pick up where we left off: pos should be positioned on the first character that caused
-        // the need for encapsulation.
-        while (pos < end) {
-            final char c = value.charAt(pos);
+    for (int pos = offset; pos < end; pos++) {
+        char c = value.charAt(pos);
         if (c == quoteChar) {
-                // write out the chunk up until this point
-
-                // add 1 to the length to write out the encapsulator also
-                out.append(value, start, pos + 1);
-                // put the next starting position on the encapsulator so we will
-                // write it out again with the next string (effectively doubling it)
-                start = pos;
+            out.append(quoteChar);
         }
-            pos++;
+        out.append(c);
     }
-
-        // write the last segment
-        out.append(value, start, pos);
     out.append(quoteChar);
 }
\ No newline at end of file
