diff --git a/tmp/8582c0af-6e9a-4c0a-97a8-9d135d08cf8f_buggy.java b/tmp/dc4175c8-0b81-4f64-9c9e-e9bb368b5ec2_fixed.java
index 91dc4ff..06f0f1c 100644
--- a/tmp/8582c0af-6e9a-4c0a-97a8-9d135d08cf8f_buggy.java
+++ b/tmp/dc4175c8-0b81-4f64-9c9e-e9bb368b5ec2_fixed.java
@@ -1,107 +1,73 @@
-    // the original object is needed so can check for Number
 private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
                            final Appendable out, final boolean newRecord) throws IOException {
     boolean quote = false;
-        int start = offset;
-        int pos = offset;
     final int end = offset + len;
-
     final char delimChar = getDelimiter();
     final char quoteChar = getQuoteCharacter().charValue();
 
     QuoteMode quoteModePolicy = getQuoteMode();
     if (quoteModePolicy == null) {
         quoteModePolicy = QuoteMode.MINIMAL;
     }
     switch (quoteModePolicy) {
         case ALL:
             quote = true;
             break;
         case NON_NUMERIC:
             quote = !(object instanceof Number);
             break;
         case NONE:
-            // Use the existing escaping code
+            // Use the existing escaping code when no quoting is desired.
             printAndEscape(value, offset, len, out);
             return;
         case MINIMAL:
-            if (len <= 0) {
-                // always quote an empty token that is the first
-                // on the line, as it may be the only thing on the
-                // line. If it were not quoted in that case,
-                // an empty line has no tokens.
+            if (len == 0) {
+                // Always quote an empty token if it is the first on the line.
                 if (newRecord) {
                     quote = true;
                 }
             } else {
-                char c = value.charAt(pos);
-
-                // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
-                if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
+                // If the field starts with the comment marker when at the start of a record,
+                // force quoting so it isn’t misinterpreted.
+                Character commentMarker = getComment();
+                if (newRecord && commentMarker != null && value.charAt(offset) == commentMarker.charValue()) {
                     quote = true;
-                } else if (c <= COMMENT) {
-                    // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
-                    quote = true;
-                } else {
-                    while (pos < end) {
-                        c = value.charAt(pos);
+                }
+                // Look through the field to see if any characters require quoting.
+                for (int i = offset; i < end && !quote; i++) {
+                    char c = value.charAt(i);
                     if (c == LF || c == CR || c == quoteChar || c == delimChar) {
                         quote = true;
-                            break;
                     }
-                        pos++;
                 }
-
-                    if (!quote) {
-                        pos = end - 1;
-                        c = value.charAt(pos);
-                        // Some other chars at the end caused the parser to fail, so for now
-                        // encapsulate if we end in anything less than ' '
-                        if (c <= SP) {
+                // If there’s trailing whitespace that might cause parsing problems, quote it.
+                if (!quote && len > 0) {
+                    char last = value.charAt(end - 1);
+                    if (last <= SP) {
                         quote = true;
                     }
                 }
             }
-            }
-
-            if (!quote) {
-                // no encapsulation needed - write out the original value
-                out.append(value, start, end);
-                return;
-            }
             break;
         default:
             throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
     }
 
     if (!quote) {
-            // no encapsulation needed - write out the original value
-            out.append(value, start, end);
+        // No quoting needed; output the original value.
+        out.append(value, offset, end);
         return;
     }
 
-        // we hit something that needed encapsulation
+    // Output the field with quotes.
     out.append(quoteChar);
-
-        // Pick up where we left off: pos should be positioned on the first character that caused
-        // the need for encapsulation.
-        while (pos < end) {
-            final char c = value.charAt(pos);
+    for (int i = offset; i < end; i++) {
+        char c = value.charAt(i);
         if (c == quoteChar) {
-                // write out the chunk up until this point
-
-                // add 1 to the length to write out the encapsulator also
-                out.append(value, start, pos + 1);
-                // put the next starting position on the encapsulator so we will
-                // write it out again with the next string (effectively doubling it)
-                start = pos;
+            // Double the quote character.
+            out.append(quoteChar);
         }
-            pos++;
+        out.append(c);
     }
-
-        // write the last segment
-        out.append(value, start, pos);
     out.append(quoteChar);
 }
\ No newline at end of file
