diff --git a/tmp/3ee37170-2b0a-4c0a-9bf1-2a550afb9c5d_buggy.java b/tmp/eae85175-9bd5-4b96-8423-0b413981d4c6_fixed.java
index 6b160ef..62d0a1c 100644
--- a/tmp/3ee37170-2b0a-4c0a-9bf1-2a550afb9c5d_buggy.java
+++ b/tmp/eae85175-9bd5-4b96-8423-0b413981d4c6_fixed.java
@@ -1,68 +1,77 @@
 /**
  * Create an archive input stream from an input stream, autodetecting
  * the archive type from the first few bytes of the stream. The InputStream
  * must support marks, like BufferedInputStream.
  * 
  * @param in the input stream
  * @return the archive input stream
  * @throws ArchiveException if the archiver name is not known
  * @throws IllegalArgumentException if the stream is null or does not support mark
  */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
-
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
     final byte[] signature = new byte[12];
     in.mark(signature.length);
+    int signatureLength;
     try {
-            int signatureLength = in.read(signature);
+        signatureLength = in.read(signature);
         in.reset();
+    } catch (IOException e) {
+        throw new ArchiveException("Could not use reset and mark operations.", e);
+    }
     if (ZipArchiveInputStream.matches(signature, signatureLength)) {
         return new ZipArchiveInputStream(in);
     } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
         return new JarArchiveInputStream(in);
     } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
         return new ArArchiveInputStream(in);
     } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
         return new CpioArchiveInputStream(in);
     }
 
     // Dump needs a bigger buffer to check the signature;
     final byte[] dumpsig = new byte[32];
     in.mark(dumpsig.length);
+    try {
         signatureLength = in.read(dumpsig);
         in.reset();
+    } catch (IOException e) {
+        throw new ArchiveException("Could not use reset and mark operations.", e);
+    }
     if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
         return new DumpArchiveInputStream(in);
     }
 
-            // Tar needs an even bigger buffer to check the signature; read the first block
+    // Tar needs an even bigger buffer to check the signature; read the first block.
+    // A valid TAR header always has 512 bytes.
     final byte[] tarheader = new byte[512];
     in.mark(tarheader.length);
+    try {
         signatureLength = in.read(tarheader);
         in.reset();
+    } catch (IOException e) {
+        throw new ArchiveException("Could not use reset and mark operations.", e);
+    }
+    if (signatureLength == tarheader.length) {
         if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
             return new TarArchiveInputStream(in);
         }
-            // COMPRESS-117 - improve auto-recognition
+        // COMPRESS-117 - improve auto-recognition by trying to read the first entry.
         try {
             TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
             tais.getNextEntry();
             return new TarArchiveInputStream(in);
-            } catch (Exception e) { // NOPMD
-                // can generate IllegalArgumentException as well as IOException
-                // autodetection, simply not a TAR
+        } catch (Exception e) { // NOPMD: autodetection, simply not a TAR
             // ignored
         }
-        } catch (IOException e) {
-            throw new ArchiveException("Could not use reset and mark operations.", e);
     }
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
