diff --git a/tmp/6a1453a5-3983-4b43-891d-eeb6a2d3a735_buggy.java b/tmp/15813728-f8b9-4534-8612-655ea6b6215d_fixed.java
index e5ad041..4b2c9fb 100644
--- a/tmp/6a1453a5-3983-4b43-891d-eeb6a2d3a735_buggy.java
+++ b/tmp/15813728-f8b9-4534-8612-655ea6b6215d_fixed.java
@@ -1,19 +1,13 @@
 @Override
-    protected JavaType _narrow(Class<?> subclass)
-    {
+protected JavaType _narrow(Class<?> subclass) {
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
     if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
+        throw new IllegalArgumentException("Class " + subclass.getName()
+                + " not subtype of " + _class.getName());
     }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
-                _valueHandler, _typeHandler, _asStatic);
+    // Delegate to the TypeFactory so that the subtype is fully re-resolved,
+    // including proper handling of super-types and any annotations.
+    return TypeFactory.defaultInstance().constructSpecializedType(this, subclass);
 }
\ No newline at end of file
