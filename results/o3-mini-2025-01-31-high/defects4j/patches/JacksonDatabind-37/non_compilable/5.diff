diff --git a/tmp/e57a655a-21ee-4963-8ccc-22647c08956e_buggy.java b/tmp/ac9f5ccb-338c-4579-bd9b-e9b2a88d1ec1_fixed.java
index e5ad041..b6bf803 100644
--- a/tmp/e57a655a-21ee-4963-8ccc-22647c08956e_buggy.java
+++ b/tmp/ac9f5ccb-338c-4579-bd9b-e9b2a88d1ec1_fixed.java
@@ -1,19 +1,18 @@
 @Override
-    protected JavaType _narrow(Class<?> subclass)
-    {
+protected JavaType _narrow(Class<?> subclass) {
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
     if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
+        throw new IllegalArgumentException("Class " + subclass.getName()
+                + " not sub-type of " + _class.getName());
     }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
-                _valueHandler, _typeHandler, _asStatic);
+    // Re-resolve the type so that new bean properties can be located, etc.
+    JavaType newType = TypeFactory.defaultInstance().constructSimpleType(subclass, _bindings);
+    newType = newType.withValueHandler(_valueHandler)
+                     .withTypeHandler(_typeHandler);
+    if (_asStatic && !newType.isStatic()) {
+        newType = newType.withStaticTyping();
+    }
+    return newType;
 }
\ No newline at end of file
