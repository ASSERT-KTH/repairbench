diff --git a/tmp/ada8a15f-fc02-4811-9cfc-88bf46ac03a6_buggy.java b/tmp/7fe0c88f-7c76-4ad6-8239-0f589cbac85a_fixed.java
index e5ad041..ebfe126 100644
--- a/tmp/ada8a15f-fc02-4811-9cfc-88bf46ac03a6_buggy.java
+++ b/tmp/7fe0c88f-7c76-4ad6-8239-0f589cbac85a_fixed.java
@@ -1,19 +1,17 @@
 @Override
-    protected JavaType _narrow(Class<?> subclass)
-    {
+protected JavaType _narrow(Class<?> subclass) {
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
     if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
+        throw new IllegalArgumentException("Class " + subclass.getName()
+                + " not sub-type of " + _class.getName());
     }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
-                _valueHandler, _typeHandler, _asStatic);
+    // Instead of simply copying the super type information, re-resolve the new type.
+    SimpleType newType = TypeFactory.defaultInstance().constructSimpleType(subclass, _bindings);
+    newType = newType.withTypeHandler(_typeHandler).withValueHandler(_valueHandler);
+    if (_asStatic) {
+        newType = newType.withStaticTyping();
+    }
+    return newType;
 }
\ No newline at end of file
