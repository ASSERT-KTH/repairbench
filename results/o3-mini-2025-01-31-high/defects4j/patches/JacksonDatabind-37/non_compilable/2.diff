diff --git a/tmp/a3cf8e71-ec9c-4117-b5d4-0a143f477b19_buggy.java b/tmp/82fe8887-819f-49e0-b456-6eb35b9174f2_fixed.java
index e5ad041..d583477 100644
--- a/tmp/a3cf8e71-ec9c-4117-b5d4-0a143f477b19_buggy.java
+++ b/tmp/82fe8887-819f-49e0-b456-6eb35b9174f2_fixed.java
@@ -1,19 +1,22 @@
 @Override
-    protected JavaType _narrow(Class<?> subclass)
-    {
+protected JavaType _narrow(Class<?> subclass) {
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
-        if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-        }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
-                _valueHandler, _typeHandler, _asStatic);
+    // Instead of reusing cached super-type details, re-resolve the type fully.
+    JavaType newType = TypeFactory.defaultInstance().constructType(subclass, _bindings);
+    if (newType instanceof SimpleType) {
+        SimpleType st = (SimpleType) newType;
+        if (_valueHandler != st.getValueHandler()) {
+            st = st.withValueHandler(_valueHandler);
+        }
+        if (_typeHandler != st.getTypeHandler()) {
+            st = st.withTypeHandler(_typeHandler);
+        }
+        if (_asStatic && !st.isStatic()) {
+            st = st.withStaticTyping();
+        }
+        return st;
+    }
+    return newType;
 }
\ No newline at end of file
