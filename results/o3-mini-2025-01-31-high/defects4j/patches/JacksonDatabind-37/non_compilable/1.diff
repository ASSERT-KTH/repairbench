diff --git a/tmp/f99e0fd9-04a9-412a-82f5-793afb1a7ed9_buggy.java b/tmp/836db4a4-98d4-4100-b48c-0a561e1e4a03_fixed.java
index e5ad041..c05821c 100644
--- a/tmp/f99e0fd9-04a9-412a-82f5-793afb1a7ed9_buggy.java
+++ b/tmp/836db4a4-98d4-4100-b48c-0a561e1e4a03_fixed.java
@@ -1,19 +1,18 @@
 @Override
-    protected JavaType _narrow(Class<?> subclass)
-    {
+protected JavaType _narrow(Class<?> subclass) {
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
-        if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-        }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
-                _valueHandler, _typeHandler, _asStatic);
+    // Instead of reusing the old binding/super types, re-resolve the type information with the TypeFactory.
+    JavaType result = TypeFactory.defaultInstance().constructSimpleType(subclass, null);
+    if (_valueHandler != null) {
+        result = result.withValueHandler(_valueHandler);
+    }
+    if (_typeHandler != null) {
+        result = result.withTypeHandler(_typeHandler);
+    }
+    if (_asStatic && !result.isStatic()) {
+        result = result.withStaticTyping();
+    }
+    return result;
 }
\ No newline at end of file
