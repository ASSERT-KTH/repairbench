diff --git a/tmp/d348d29a-64d2-43fe-8cf7-80346aeb96bd_buggy.java b/tmp/d10ba832-6ba0-4373-aaa2-47e9ace641d9_fixed.java
index 90fe130..c7980c9 100644
--- a/tmp/d348d29a-64d2-43fe-8cf7-80346aeb96bd_buggy.java
+++ b/tmp/d10ba832-6ba0-4373-aaa2-47e9ace641d9_fixed.java
@@ -1,61 +1,64 @@
-    /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
-     *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
-     * @throws IllegalArgumentException if the string is an invalid format
-     */
 public static Locale toLocale(String str) {
     if (str == null) {
         return null;
     }
     int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
-        }
+    // Case 1: Language only must be exactly 2 characters.
+    if (len == 2) {
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-        if (len == 2) {
         return new Locale(str, "");
+    }
+    
+    // All other forms must have an underscore at position 2.
+    if (len < 4 || str.charAt(2) != '_') {
+        throw new IllegalArgumentException("Invalid locale format: " + str);
+    }
+    
+    // Validate the language part.
+    String language = str.substring(0, 2);
+    char l0 = language.charAt(0);
+    char l1 = language.charAt(1);
+    if (l0 < 'a' || l0 > 'z' || l1 < 'a' || l1 > 'z') {
+        throw new IllegalArgumentException("Invalid locale format: " + str);
+    }
+    
+    // There are two cases now:
+    // Case 2: Language with variant but no country (pattern "ll__variant")
+    //         In this form, the character at index 3 is '_' indicating an empty country.
+    // Case 3: Language with country (and possibly variant) (pattern "ll_CC" or "ll_CC_variant")
+    if (str.charAt(3) == '_') {
+        // Must have a non-empty variant. Minimum length for "ll__X" is 5.
+        if (len == 4) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        String variant = str.substring(4);
+        return new Locale(language, "", variant);
     } else {
-            if (str.charAt(2) != '_') {
+        // Country code is expected.
+        // If there is no variant, the full string should be exactly 5 characters: "ll_CC".
+        // If there is a variant the string must be at least 7 characters: "ll_CC_variant"
+        if (len != 5 && len < 7) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            char ch3 = str.charAt(3);
-            char ch4 = str.charAt(4);
-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
+        String country = str.substring(3, 5);
+        char c0 = country.charAt(0);
+        char c1 = country.charAt(1);
+        if (c0 < 'A' || c0 > 'Z' || c1 < 'A' || c1 > 'Z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
+            return new Locale(language, country);
         } else {
+            // There MUST be an underscore after the country code.
             if (str.charAt(5) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+            String variant = str.substring(6);
+            return new Locale(language, country, variant);
         }
     }
 }
\ No newline at end of file
