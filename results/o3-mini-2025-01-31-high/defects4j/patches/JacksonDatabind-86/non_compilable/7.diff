diff --git a/tmp/9955c224-3314-4012-9c06-11343e8327af_buggy.java b/tmp/fc7b72b5-a765-456f-96b6-97cfe446864f_fixed.java
index e69de29..5646ddc 100644
--- a/tmp/9955c224-3314-4012-9c06-11343e8327af_buggy.java
+++ b/tmp/fc7b72b5-a765-456f-96b6-97cfe446864f_fixed.java
@@ -0,0 +1,25 @@
+protected JavaType _fromClass(Class<?> cls, TypeBindings context) {
+    // First: check for a cached (partially resolved) type
+    JavaType cached = _findCachedType(cls, context);
+    if (cached != null) {
+        if (cached instanceof ResolvedRecursiveType 
+                && ((ResolvedRecursiveType) cached).getSelfReferencedType() == null) {
+            // Fix the cached recursive type by wiring its self–reference.
+            ((ResolvedRecursiveType) cached).setSelfReferencedType(cached);
+        }
+        return cached;
+    }
+    // Create a placeholder recursive type and add it to the cache
+    ResolvedRecursiveType rec = new ResolvedRecursiveType(cls, context);
+    _cacheType(cls, context, rec);
+    // Fully resolve type information (including super types, etc.)
+    JavaType fullType = _fromClassInternal(cls, context, rec);
+    // Make sure that if the fully resolved type is recursive its self–reference is set
+    if (fullType instanceof ResolvedRecursiveType) {
+        ResolvedRecursiveType rrt = (ResolvedRecursiveType) fullType;
+        if (rrt.getSelfReferencedType() == null) {
+            rrt.setSelfReferencedType(rrt);
+        }
+    }
+    return fullType;
+}
\ No newline at end of file
