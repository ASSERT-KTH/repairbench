diff --git a/tmp/c762f97f-ee35-46a8-b7d0-856b7500308c_buggy.java b/tmp/87c39603-a614-4453-a1ca-0daaf19a4a10_fixed.java
index d80b7d0..c5bce83 100644
--- a/tmp/c762f97f-ee35-46a8-b7d0-856b7500308c_buggy.java
+++ b/tmp/87c39603-a614-4453-a1ca-0daaf19a4a10_fixed.java
@@ -1,61 +1,67 @@
 /**
  * Checks dimensions and values of boundaries and inputSigma if defined.
  */
 private void checkParameters() {
     final double[] init = getStartPoint();
     final double[] lB = getLowerBound();
     final double[] uB = getUpperBound();
 
     // Checks whether there is at least one finite bound value.
     boolean hasFiniteBounds = false;
     for (int i = 0; i < lB.length; i++) {
-            if (!Double.isInfinite(lB[i]) ||
-                !Double.isInfinite(uB[i])) {
+        if (!Double.isInfinite(lB[i]) || !Double.isInfinite(uB[i])) {
             hasFiniteBounds = true;
             break;
         }
     }
     // Checks whether there is at least one infinite bound value.
     boolean hasInfiniteBounds = false;
     if (hasFiniteBounds) {
         for (int i = 0; i < lB.length; i++) {
-                if (Double.isInfinite(lB[i]) ||
-                    Double.isInfinite(uB[i])) {
+            if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {
                 hasInfiniteBounds = true;
                 break;
             }
         }
-
         if (hasInfiniteBounds) {
             // If there is at least one finite bound, none can be infinite,
             // because mixed cases are not supported by the current code.
             throw new MathUnsupportedOperationException();
         } else {
             // Convert API to internal handling of boundaries.
             boundaries = new double[2][];
             boundaries[0] = lB;
             boundaries[1] = uB;
 
             // Abort early if the normalization will overflow (cf. "encode" method).
+            // Compute the difference for each dimension and if it overflows (i.e. becomes infinite)
+            // then throw a NumberIsTooLargeException.
+            for (int i = 0; i < lB.length; i++) {
+                double diff = boundaries[1][i] - boundaries[0][i];
+                if (Double.isInfinite(diff)) {
+                    throw new NumberIsTooLargeException(diff, Double.MAX_VALUE, false);
+                }
+            }
         }
     } else {
         // Convert API to internal handling of boundaries.
         boundaries = null;
     }
 
     if (inputSigma != null) {
         if (inputSigma.length != init.length) {
             throw new DimensionMismatchException(inputSigma.length, init.length);
         }
         for (int i = 0; i < init.length; i++) {
             if (inputSigma[i] < 0) {
                 throw new NotPositiveException(inputSigma[i]);
             }
             if (boundaries != null) {
-                    if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
-                        throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);
+                double range = boundaries[1][i] - boundaries[0][i];
+                if (inputSigma[i] > range) {
+                    throw new OutOfRangeException(inputSigma[i], 0, range);
                 }
             }
         }
     }
 }
\ No newline at end of file
