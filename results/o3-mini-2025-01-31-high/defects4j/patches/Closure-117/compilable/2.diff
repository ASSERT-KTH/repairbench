diff --git a/tmp/e1c2be32-7359-40e7-8846-09996045e1c5_buggy.java b/tmp/9b73a825-3228-4bee-84d7-80249cef04ff_fixed.java
index 39981f0..56fd6c4 100644
--- a/tmp/e1c2be32-7359-40e7-8846-09996045e1c5_buggy.java
+++ b/tmp/9b73a825-3228-4bee-84d7-80249cef04ff_fixed.java
@@ -1,65 +1,62 @@
-  /**
-   * Given a node, get a human-readable name for the type of that node so
-   * that will be easy for the programmer to find the original declaration.
-   *
-   * For example, if SubFoo's property "bar" might have the human-readable
-   * name "Foo.prototype.bar".
-   *
-   * @param n The node.
-   * @param dereference If true, the type of the node will be dereferenced
-   *     to an Object type, if possible.
-   */
 String getReadableJSTypeName(Node n, boolean dereference) {
-
-    // The best type name is the actual type name.
-
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
+  // Special handling for GETPROP nodes: if the property is inherited,
+  // we try to climb the prototype chain to see where it was originally defined.
   if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
-      if (objectType != null) {
+    // Get the type of the “receiver” (the object on which the property is accessed).
+    JSType receiverJSType = getJSType(n.getFirstChild());
+    if (receiverJSType != null) {
+      // Dereference to get the instance type (which, for example, converts a declared
+      // type “C3.c2_” into the type annotation “C2”).
+      ObjectType receiverType = receiverJSType.dereference();
+      if (receiverType != null) {
         String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
+        ObjectType defPropType;
+        // For an interface, get the top defining interface.
+        if (receiverType.getConstructor() != null &&
+            receiverType.getConstructor().isInterface()) {
+          defPropType = FunctionType.getTopDefiningInterface(receiverType, propName);
         } else {
-          // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
+          // For classes, search the prototype chain until we find an object that
+          // actually has an own property for the name.
+          defPropType = receiverType;
+          while (defPropType != null && !defPropType.hasOwnProperty(propName)) {
+            defPropType = defPropType.getImplicitPrototype();
           }
         }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
+        // If we found a type that actually defines the property,
+        // return “<defining type>.<propertyname>”.
+        if (defPropType != null &&
+            (defPropType.getConstructor() != null ||
+             defPropType.isFunctionPrototypeType())) {
+          return defPropType.toString() + "." + propName;
+        } else {
+          // Otherwise, if no prototype in the chain defines the property,
+          // fall back to the receiver’s type (this produces the declared type,
+          // e.g. “C2”, rather than the full qualifier “C3.c2_”).
+          return receiverType.toString();
+        }
       }
     }
   }
 
+  // Fallback: Use the type of the node itself.
   JSType type = getJSType(n);
   if (dereference) {
     ObjectType dereferenced = type.dereference();
     if (dereferenced != null) {
       type = dereferenced;
     }
   }
   if (type.isFunctionPrototypeType() ||
-        (type.toObjectType() != null &&
-         type.toObjectType().getConstructor() != null)) {
+      (type.toObjectType() != null && type.toObjectType().getConstructor() != null)) {
     return type.toString();
   }
   String qualifiedName = n.getQualifiedName();
   if (qualifiedName != null) {
     return qualifiedName;
   } else if (type.isFunctionType()) {
-      // Don't show complex function names.
     return "function";
   } else {
     return type.toString();
   }
 }
\ No newline at end of file
