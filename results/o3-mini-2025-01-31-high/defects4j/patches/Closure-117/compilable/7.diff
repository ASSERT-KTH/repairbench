diff --git a/tmp/93388b7b-18d7-466f-a760-3a8dc60b25da_buggy.java b/tmp/f1335200-6e1e-46be-810f-62a1618e7d5c_fixed.java
index 39981f0..9cf1b14 100644
--- a/tmp/93388b7b-18d7-466f-a760-3a8dc60b25da_buggy.java
+++ b/tmp/f1335200-6e1e-46be-810f-62a1618e7d5c_fixed.java
@@ -1,65 +1,46 @@
-  /**
-   * Given a node, get a human-readable name for the type of that node so
-   * that will be easy for the programmer to find the original declaration.
-   *
-   * For example, if SubFoo's property "bar" might have the human-readable
-   * name "Foo.prototype.bar".
-   *
-   * @param n The node.
-   * @param dereference If true, the type of the node will be dereferenced
-   *     to an Object type, if possible.
-   */
 String getReadableJSTypeName(Node n, boolean dereference) {
-
-    // The best type name is the actual type name.
-
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
   if (n.isGetProp()) {
     ObjectType objectType = getJSType(n.getFirstChild()).dereference();
     if (objectType != null) {
       String propName = n.getLastChild().getString();
       if (objectType.getConstructor() != null &&
           objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
+        objectType = FunctionType.getTopDefiningInterface(objectType, propName);
       } else {
-          // classes
+        // For classes, climb the prototype chain.
         while (objectType != null && !objectType.hasOwnProperty(propName)) {
           objectType = objectType.getImplicitPrototype();
         }
       }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
+      // If we found the owner, return its name with the property.
       if (objectType != null &&
           (objectType.getConstructor() != null ||
            objectType.isFunctionPrototypeType())) {
         return objectType.toString() + "." + propName;
       }
     }
+    // Fallback: if we couldnâ€™t locate the property on the prototype chain,
+    // use the type of the object expression rather than its qualified name.
+    return getReadableJSTypeName(n.getFirstChild(), dereference);
   }
 
   JSType type = getJSType(n);
   if (dereference) {
     ObjectType dereferenced = type.dereference();
     if (dereferenced != null) {
       type = dereferenced;
     }
   }
   if (type.isFunctionPrototypeType() ||
-        (type.toObjectType() != null &&
-         type.toObjectType().getConstructor() != null)) {
+      (type.toObjectType() != null && type.toObjectType().getConstructor() != null)) {
     return type.toString();
   }
   String qualifiedName = n.getQualifiedName();
   if (qualifiedName != null) {
     return qualifiedName;
   } else if (type.isFunctionType()) {
-      // Don't show complex function names.
     return "function";
   } else {
     return type.toString();
   }
 }
\ No newline at end of file
