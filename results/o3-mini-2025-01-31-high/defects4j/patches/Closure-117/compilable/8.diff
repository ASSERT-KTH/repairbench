diff --git a/tmp/7d4885dd-3342-494b-8fad-30b4bfb63e05_buggy.java b/tmp/4ca467ef-d25d-41cc-97d9-97685b906d8f_fixed.java
index 39981f0..03d9ab4 100644
--- a/tmp/7d4885dd-3342-494b-8fad-30b4bfb63e05_buggy.java
+++ b/tmp/4ca467ef-d25d-41cc-97d9-97685b906d8f_fixed.java
@@ -1,65 +1,77 @@
-  /**
-   * Given a node, get a human-readable name for the type of that node so
-   * that will be easy for the programmer to find the original declaration.
-   *
-   * For example, if SubFoo's property "bar" might have the human-readable
-   * name "Foo.prototype.bar".
-   *
-   * @param n The node.
-   * @param dereference If true, the type of the node will be dereferenced
-   *     to an Object type, if possible.
-   */
 String getReadableJSTypeName(Node n, boolean dereference) {
-
-    // The best type name is the actual type name.
-
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
+  // If we are looking at a GETPROP node, then we want to resolve the
+  // property “receiver” type in a way that gives the declared (human‐readable)
+  // type rather than a qualified (syntactic) name.
   if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
-      if (objectType != null) {
     String propName = n.getLastChild().getString();
+    ObjectType objectType = null;
+    Node receiver = n.getFirstChild();
+
+    // If the receiver is itself a GETPROP (for example, "this.c2_")
+    // then try to get its declared type rather than its qualified name.
+    if (receiver.isGetProp()) {
+      String innerProp = receiver.getLastChild().getString();
+      JSType ownerJSType = getJSType(receiver.getFirstChild());
+      if (ownerJSType != null) {
+        ObjectType ownerType = ownerJSType.dereference();
+        if (ownerType != null && ownerType.hasProperty(innerProp)) {
+          JSType declaredPropType = ownerType.getPropertyType(innerProp);
+          if (declaredPropType != null) {
+            objectType = declaredPropType.dereference();
+          }
+        }
+      }
+    }
+    // Fallback: if we couldn’t get the declared property type,
+    // then use the type of the receiver.
+    if (objectType == null) {
+      JSType recType = getJSType(receiver);
+      if (recType != null) {
+        objectType = recType.dereference();
+      }
+    }
+
+    if (objectType != null) {
+      // If the type is an interface then find the top-level interface
       if (objectType.getConstructor() != null &&
           objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
-        } else {
-          // classes
+        objectType = FunctionType.getTopDefiningInterface(objectType, propName);
+      } 
+      // Otherwise, if the receiver was not a GETPROP, climb the prototype chain.
+      else if (!receiver.isGetProp()) {
         while (objectType != null && !objectType.hasOwnProperty(propName)) {
           objectType = objectType.getImplicitPrototype();
         }
       }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
+      // If we found a valid type with a constructor (or it is a function prototype type)
       if (objectType != null &&
           (objectType.getConstructor() != null ||
            objectType.isFunctionPrototypeType())) {
         return objectType.toString() + "." + propName;
       }
     }
   }
 
+  // For non-GETPROP nodes (or if our GETPROP analysis did not succeed), use the
+  // actual JSType and (if available) the qualifiedName.
   JSType type = getJSType(n);
   if (dereference) {
     ObjectType dereferenced = type.dereference();
     if (dereferenced != null) {
       type = dereferenced;
     }
   }
   if (type.isFunctionPrototypeType() ||
       (type.toObjectType() != null &&
        type.toObjectType().getConstructor() != null)) {
     return type.toString();
   }
   String qualifiedName = n.getQualifiedName();
   if (qualifiedName != null) {
     return qualifiedName;
   } else if (type.isFunctionType()) {
-      // Don't show complex function names.
     return "function";
   } else {
     return type.toString();
   }
 }
\ No newline at end of file
