diff --git a/tmp/9bddf163-4737-4e72-b30e-6998aff6969d_buggy.java b/tmp/53d520c5-62d0-49c9-9a5b-fcd0a3dae690_fixed.java
index 39981f0..3cf6d50 100644
--- a/tmp/9bddf163-4737-4e72-b30e-6998aff6969d_buggy.java
+++ b/tmp/53d520c5-62d0-49c9-9a5b-fcd0a3dae690_fixed.java
@@ -1,65 +1,66 @@
-  /**
-   * Given a node, get a human-readable name for the type of that node so
-   * that will be easy for the programmer to find the original declaration.
-   *
-   * For example, if SubFoo's property "bar" might have the human-readable
-   * name "Foo.prototype.bar".
-   *
-   * @param n The node.
-   * @param dereference If true, the type of the node will be dereferenced
-   *     to an Object type, if possible.
-   */
 String getReadableJSTypeName(Node n, boolean dereference) {
-
-    // The best type name is the actual type name.
-
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
+  // Special-case GETPROP nodes so that we report the type where a property was declared.
   if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
+    Node left = n.getFirstChild();
+    JSType leftType = getJSType(left);
+
+    // If the left-hand side is itself a GETPROP (e.g. "this.c2_") then try to use the declared type
+    // of that property rather than its fully qualified name.
+    if (left.isGetProp()) {
+      String leftProp = left.getLastChild().getString();
+      ObjectType owner = getJSType(left.getFirstChild()).dereference();
+      if (owner != null && owner.hasProperty(leftProp)) {
+        JSType declared = owner.getPropertyType(leftProp);
+        if (declared != null) {
+          leftType = declared;
+        }
+      }
+    }
+
+    ObjectType objectType = leftType.dereference();
     if (objectType != null) {
       String propName = n.getLastChild().getString();
       if (objectType.getConstructor() != null &&
           objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
+        objectType = FunctionType.getTopDefiningInterface(objectType, propName);
       } else {
-          // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
+        // Walk up the prototype chain to see where the property is defined.
+        ObjectType current = objectType;
+        while (current != null && !current.hasOwnProperty(propName)) {
+          current = current.getImplicitPrototype();
         }
+        // If no explicit def is found, fall back to the base type.
+        if (current == null) {
+          current = objectType;
+        }
+        objectType = current;
       }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
       if (objectType != null &&
           (objectType.getConstructor() != null ||
            objectType.isFunctionPrototypeType())) {
         return objectType.toString() + "." + propName;
       }
     }
   }
 
+  // Fall back to the node's type or qualified name.
   JSType type = getJSType(n);
   if (dereference) {
     ObjectType dereferenced = type.dereference();
     if (dereferenced != null) {
       type = dereferenced;
     }
   }
   if (type.isFunctionPrototypeType() ||
-        (type.toObjectType() != null &&
-         type.toObjectType().getConstructor() != null)) {
+      (type.toObjectType() != null && type.toObjectType().getConstructor() != null)) {
     return type.toString();
   }
   String qualifiedName = n.getQualifiedName();
   if (qualifiedName != null) {
     return qualifiedName;
   } else if (type.isFunctionType()) {
-      // Don't show complex function names.
     return "function";
   } else {
     return type.toString();
   }
 }
\ No newline at end of file
