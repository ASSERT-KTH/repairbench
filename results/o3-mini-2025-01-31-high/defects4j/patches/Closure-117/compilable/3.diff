diff --git a/tmp/ef999e96-40db-4f8c-8f2b-8f1c569efd04_buggy.java b/tmp/1e47339f-9d8f-4837-a471-368c51c85209_fixed.java
index 39981f0..715ab41 100644
--- a/tmp/ef999e96-40db-4f8c-8f2b-8f1c569efd04_buggy.java
+++ b/tmp/1e47339f-9d8f-4837-a471-368c51c85209_fixed.java
@@ -1,65 +1,51 @@
-  /**
-   * Given a node, get a human-readable name for the type of that node so
-   * that will be easy for the programmer to find the original declaration.
-   *
-   * For example, if SubFoo's property "bar" might have the human-readable
-   * name "Foo.prototype.bar".
-   *
-   * @param n The node.
-   * @param dereference If true, the type of the node will be dereferenced
-   *     to an Object type, if possible.
-   */
 String getReadableJSTypeName(Node n, boolean dereference) {
 
-    // The best type name is the actual type name.
-
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
   if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
-      if (objectType != null) {
+    JSType leftType = getJSType(n.getFirstChild());
+    ObjectType leftObj = leftType == null ? null : leftType.dereference();
+    if (leftObj != null) {
       String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
+      ObjectType definingType = null;
+      if (leftObj.getConstructor() != null &&
+          leftObj.getConstructor().isInterface()) {
+        definingType = FunctionType.getTopDefiningInterface(leftObj, propName);
       } else {
-          // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
+        ObjectType current = leftObj;
+        while (current != null && !current.hasOwnProperty(propName)) {
+          current = current.getImplicitPrototype();
         }
+        definingType = current;
       }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
+      if (definingType != null &&
+          (definingType.getConstructor() != null ||
+           definingType.isFunctionPrototypeType())) {
+        return definingType.toString() + "." + propName;
+      } else {
+        // When the property is never defined, return the left expressionâ€™s type.
+        // This ensures that we report "C2" (the declared type of this.c2_) rather than "C3.c2_.prop".
+        return leftObj.toString();
       }
     }
   }
 
   JSType type = getJSType(n);
   if (dereference) {
     ObjectType dereferenced = type.dereference();
     if (dereferenced != null) {
       type = dereferenced;
     }
   }
   if (type.isFunctionPrototypeType() ||
       (type.toObjectType() != null &&
        type.toObjectType().getConstructor() != null)) {
     return type.toString();
   }
   String qualifiedName = n.getQualifiedName();
   if (qualifiedName != null) {
     return qualifiedName;
   } else if (type.isFunctionType()) {
-      // Don't show complex function names.
     return "function";
   } else {
     return type.toString();
   }
 }
\ No newline at end of file
