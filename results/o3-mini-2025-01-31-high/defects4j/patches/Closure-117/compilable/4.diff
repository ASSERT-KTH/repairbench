diff --git a/tmp/540c8c60-833e-4740-9298-c2e092cee647_buggy.java b/tmp/e1079ff4-00b0-4504-9b48-77931a4d537b_fixed.java
index 39981f0..9a3b96f 100644
--- a/tmp/540c8c60-833e-4740-9298-c2e092cee647_buggy.java
+++ b/tmp/e1079ff4-00b0-4504-9b48-77931a4d537b_fixed.java
@@ -1,65 +1,56 @@
-  /**
-   * Given a node, get a human-readable name for the type of that node so
-   * that will be easy for the programmer to find the original declaration.
-   *
-   * For example, if SubFoo's property "bar" might have the human-readable
-   * name "Foo.prototype.bar".
-   *
-   * @param n The node.
-   * @param dereference If true, the type of the node will be dereferenced
-   *     to an Object type, if possible.
-   */
 String getReadableJSTypeName(Node n, boolean dereference) {
-
-    // The best type name is the actual type name.
-
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
+  // When analyzing a GETPROP node, the property may be inherited along the
+  // prototype chain. Climb that chain to find the original type that defines
+  // the property.
   if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
+    JSType lhsType = getJSType(n.getFirstChild());
+    if (lhsType != null) {
+      ObjectType objectType = lhsType.dereference();
       if (objectType != null) {
         String propName = n.getLastChild().getString();
         if (objectType.getConstructor() != null &&
             objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
+          objectType = FunctionType.getTopDefiningInterface(objectType, propName);
         } else {
-          // classes
+          // For classes, walk up the prototype chain until we find the defining type.
           while (objectType != null && !objectType.hasOwnProperty(propName)) {
             objectType = objectType.getImplicitPrototype();
           }
         }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
         if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
+            (objectType.getConstructor() != null || objectType.isFunctionPrototypeType())) {
+          // Fix: Use the constructor's display name (if available) so that instead of
+          // something like "C3.c2_" the readable name comes out as "C2"
+          if (objectType.getConstructor() != null &&
+              objectType.getConstructor().getDisplayName() != null) {
+            return objectType.getConstructor().getDisplayName() + "." + propName;
+          } else {
             return objectType.toString() + "." + propName;
           }
         }
       }
+    }
+  }
 
+  // Fallback: get the type of the node.
   JSType type = getJSType(n);
   if (dereference) {
     ObjectType dereferenced = type.dereference();
     if (dereferenced != null) {
       type = dereferenced;
     }
   }
   if (type.isFunctionPrototypeType() ||
       (type.toObjectType() != null &&
        type.toObjectType().getConstructor() != null)) {
     return type.toString();
   }
   String qualifiedName = n.getQualifiedName();
   if (qualifiedName != null) {
     return qualifiedName;
   } else if (type.isFunctionType()) {
-      // Don't show complex function names.
     return "function";
   } else {
     return type.toString();
   }
 }
\ No newline at end of file
