diff --git a/tmp/53ef7b9c-3ad2-4b37-b265-7a438760d09c_buggy.java b/tmp/e3e87bf5-ea0d-427b-b3b4-d4720af387e1_fixed.java
index 1478ee1..cbee42a 100644
--- a/tmp/53ef7b9c-3ad2-4b37-b265-7a438760d09c_buggy.java
+++ b/tmp/e3e87bf5-ea0d-427b-b3b4-d4720af387e1_fixed.java
@@ -1,24 +1,19 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
-
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    // Compute v2’s squared norm.
+    double norm2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
+    // Compute the dot product v1.v2.
+    double dot = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
+    // Compute the factor r = v1.v2 / v2.v2.
+    double r = dot / norm2;
+    // Round r to an 8‐bit approximation (i.e. to multiples of 1/256)
+    double r8 = Math.rint(r * 256.0) / 256.0;
+    // Precondition v1 by subtracting the (approximately computed) projection of v1 onto v2.
+    double v3x = v1.x - r8 * v2.x;
+    double v3y = v1.y - r8 * v2.y;
+    double v3z = v1.z - r8 * v2.z;
+    // Compute the cross product from v3 and v2.
+    double cx = v3y * v2.z - v3z * v2.y;
+    double cy = v3z * v2.x - v3x * v2.z;
+    double cz = v3x * v2.y - v3y * v2.x;
+    return new Vector3D(cx, cy, cz);
 }
\ No newline at end of file
