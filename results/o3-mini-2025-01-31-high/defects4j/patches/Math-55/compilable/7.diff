diff --git a/tmp/e5342ecb-68fc-4f1b-a751-149e6d814188_buggy.java b/tmp/8a3c1cee-e8d1-4f8b-8fd1-bd5e8332a443_fixed.java
index 1478ee1..7e3cb4f 100644
--- a/tmp/e5342ecb-68fc-4f1b-a751-149e6d814188_buggy.java
+++ b/tmp/8a3c1cee-e8d1-4f8b-8fd1-bd5e8332a443_fixed.java
@@ -1,24 +1,57 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // When v1 and v2 are nearly parallel cancellation can occur.
+    // To reduce cancellation errors we “precondition” by replacing v1 with v1'
+    // so that v1′ = v1 – ρ v2, with ρ chosen as an 8‐bit rounded value of (v1·v2)/(v2·v2).
+    // In addition we “equalize” the vector norms if they differ by scaling the vector
+    // with the larger norm (and later undoing the scaling).
     
+    // First, get the Euclidean norms.
+    double norm1 = v1.getNorm();
+    double norm2 = v2.getNorm();
+    if (norm1 == 0 || norm2 == 0) {
+        return new Vector3D(0, 0, 0);
+    }
+    
+    // Scale the vectors so that they become of comparable magnitude.
+    // If their norms differ, multiply the vector with the larger norm by a factor
+    // so that after scaling both have the same norm. (We must later “undo” this factor.)
+    Vector3D u1 = v1;
+    Vector3D u2 = v2;
+    double scaleFactor = 1.0;
+    if (norm1 < norm2) {
+        // Scale v2 down to the norm of v1.
+        scaleFactor = norm1 / norm2;
+        u2 = v2.scalarMultiply(scaleFactor);
+    } else if (norm2 < norm1) {
+        // Scale v1 down to the norm of v2.
+        scaleFactor = norm2 / norm1;
+        u1 = v1.scalarMultiply(scaleFactor);
+    }
     
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+    // Compute the dot products using the scaled vectors.
+    double dot22 = u2.x * u2.x + u2.y * u2.y + u2.z * u2.z;
+    double dot12 = u1.x * u2.x + u1.y * u2.y + u1.z * u2.z;
+    double r = dot12 / dot22;
     
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+    // Compute an 8-bit approximation of r.
+    double rho = Math.rint(r * 256) / 256;
     
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    // Apply the preconditioning: form u1' = u1 - rho * u2.
+    Vector3D u1prime = new Vector3D(u1.x - rho * u2.x,
+                                    u1.y - rho * u2.y,
+                                    u1.z - rho * u2.z);
     
+    // Compute the cross product from u1prime and u2.
+    // Because u1′ × u2  = (v1 − ρv2) × v2 = v1 × v2.
+    double cpX = u1prime.y * u2.z - u1prime.z * u2.y;
+    double cpY = u1prime.z * u2.x - u1prime.x * u2.z;
+    double cpZ = u1prime.x * u2.y - u1prime.y * u2.x;
+    Vector3D cp = new Vector3D(cpX, cpY, cpZ);
     
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Undo the rescaling if one vector was scaled.
+    if (norm1 < norm2 || norm2 < norm1) {
+        cp = cp.scalarMultiply(1.0 / scaleFactor);
+    }
     
+    return cp;
 }
\ No newline at end of file
