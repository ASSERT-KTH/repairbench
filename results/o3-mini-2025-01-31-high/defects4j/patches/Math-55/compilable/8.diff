diff --git a/tmp/42d9c573-75b7-4e25-9bc7-43a0815d2284_buggy.java b/tmp/9d35f11e-d2a6-4373-a7d9-988c5c3ebd6b_fixed.java
index 1478ee1..02eca0e 100644
--- a/tmp/42d9c573-75b7-4e25-9bc7-43a0815d2284_buggy.java
+++ b/tmp/9d35f11e-d2a6-4373-a7d9-988c5c3ebd6b_fixed.java
@@ -1,24 +1,25 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Compute the squared norm of v2.
+    double dot22 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
+    if (dot22 == 0.0) {
+        // If v2 is the zero vector, fall back on the standard cross product.
+        return new Vector3D(v1.y * v2.z - v1.z * v2.y,
+                            v1.z * v2.x - v1.x * v2.z,
+                            v1.x * v2.y - v1.y * v2.x);
+    }
     
+    // Compute ρ as an 8‐bit approximation of (v1·v2)/(v2·v2).
+    double dot12 = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
+    double r = dot12 / dot22;
+    double rho = Math.rint(r * 256.0) / 256.0;
     
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Precondition v1 to reduce cancellation: let v3 = v1 – ρ v2.
+    double vx = v1.x - rho * v2.x;
+    double vy = v1.y - rho * v2.y;
+    double vz = v1.z - rho * v2.z;
     
+    // The cross product (v1 x v2) equals (v3 x v2).
+    return new Vector3D(vy * v2.z - vz * v2.y,
+                        vz * v2.x - vx * v2.z,
+                        vx * v2.y - vy * v2.x);
 }
\ No newline at end of file
