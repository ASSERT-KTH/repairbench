diff --git a/tmp/a5245ce1-07dd-40c2-998d-8eb8a7f9b73c_buggy.java b/tmp/bad57578-d63c-4ca4-b3a9-1ab1f917b50f_fixed.java
index 1478ee1..566502a 100644
--- a/tmp/a5245ce1-07dd-40c2-998d-8eb8a7f9b73c_buggy.java
+++ b/tmp/bad57578-d63c-4ca4-b3a9-1ab1f917b50f_fixed.java
@@ -1,24 +1,22 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Compute the squared norm of v2
+    double v2Norm2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
     
+    // Compute the dot product v1 · v2
+    double dot = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
     
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+    // Compute rho as an 8 bits approximation of (v1 · v2) / (v2 · v2)
+    double factor = dot / v2Norm2;
+    double rho = Math.rint(256 * factor) / 256.0;
     
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Precondition v1 by subtracting the projection of v1 onto v2:
+    // v3 = v1 - rho * v2
+    double v3x = v1.x - rho * v2.x;
+    double v3y = v1.y - rho * v2.y;
+    double v3z = v1.z - rho * v2.z;
     
+    // Compute the cross product using the preconditioned vector v3 and v2
+    return new Vector3D(v3y * v2.z - v3z * v2.y,
+                        v3z * v2.x - v3x * v2.z,
+                        v3x * v2.y - v3y * v2.x);
 }
\ No newline at end of file
