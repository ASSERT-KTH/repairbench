diff --git a/tmp/cd3f6172-dc88-4c78-8afe-aea73225c450_buggy.java b/tmp/67489ae5-5df8-469c-a370-ea98b3bbc7f2_fixed.java
index 1478ee1..1cf5888 100644
--- a/tmp/cd3f6172-dc88-4c78-8afe-aea73225c450_buggy.java
+++ b/tmp/67489ae5-5df8-469c-a370-ea98b3bbc7f2_fixed.java
@@ -1,24 +1,47 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // First, rescale both vectors so that their entries are of moderate size.
+    // This avoids overflow or underflow in computing dot products and ratios.
+    double max1 = Math.max(Math.abs(v1.x), Math.max(Math.abs(v1.y), Math.abs(v1.z)));
+    double max2 = Math.max(Math.abs(v2.x), Math.max(Math.abs(v2.y), Math.abs(v2.z)));
+    double scale = Math.max(max1, max2);
+    if (scale == 0.0) {
+        // Both vectors are zero.
+        return new Vector3D(0.0, 0.0, 0.0);
+    }
     
+    // Scale down v1 and v2 so that the maximum absolute value is 1.
+    double x1 = v1.x / scale;
+    double y1 = v1.y / scale;
+    double z1 = v1.z / scale;
+    double x2 = v2.x / scale;
+    double y2 = v2.y / scale;
+    double z2 = v2.z / scale;
     
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    // Preconditioning step:
+    // Compute an 8-bit approximation of the projection factor rho = (v1 . v2)/(v2 . v2)
+    // The idea is to replace v1 by v3 = v1 - rho*v2 computed in reduced precision.
+    double norm2 = x2 * x2 + y2 * y2 + z2 * z2;
+    double factor;
+    if (norm2 == 0.0) {
+        factor = 0.0;
+    } else {
+        double dot = x1 * x2 + y1 * y2 + z1 * z2;
+        double ratio = dot / norm2;
+        // Round to 8-bit: i.e. to increments of 1/256.
+        factor = Math.floor(ratio * 256.0 + 0.5) / 256.0;
+    }
     
+    // Compute the preconditioned vector v3 = v1 - factor * v2 (in scaled space).
+    double u1 = x1 - factor * x2;
+    double u2 = y1 - factor * y2;
+    double u3 = z1 - factor * z2;
     
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Compute the cross product of v3 and v2 (still in scaled coordinates).
+    double cx = u2 * z2 - u3 * y2;
+    double cy = u3 * x2 - u1 * z2;
+    double cz = u1 * y2 - u2 * x2;
     
+    // Remember: since we scaled each vector by 1/scale, the cross product scales like (1/scale)^2.
+    // To recover the proper magnitude we must multiply by scale^2.
+    return new Vector3D(cx * scale * scale, cy * scale * scale, cz * scale * scale);
 }
\ No newline at end of file
