diff --git a/tmp/328cf3c9-0c46-4a3e-a093-94999f0e74be_buggy.java b/tmp/242e2aaf-3395-44d1-a047-3255583e48dd_fixed.java
index 1478ee1..d6807c4 100644
--- a/tmp/328cf3c9-0c46-4a3e-a093-94999f0e74be_buggy.java
+++ b/tmp/242e2aaf-3395-44d1-a047-3255583e48dd_fixed.java
@@ -1,24 +1,36 @@
 /** Compute the cross-product of two vectors.
+ *  This implementation uses Kahan’s “preconditioning” technique to
+ *  reduce cancellation errors.  It first computes an 8‐bit approximation
+ *  of (v1·v2)/(v2·v2) (called rho), subtracts rho·v2 from v1, and then
+ *  forms the cross product of the “corrected” v1 with v2.
+ *
  * @param v1 first vector
  * @param v2 second vector
  * @return the cross product v1 ^ v2 as a new Vector
  */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Compute the squared norm of v2.
+    final double norm2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
+    if (norm2 == 0.0) {
+        // v2 is the zero vector; cross product is undefined.
+        return new Vector3D(Double.NaN, Double.NaN, Double.NaN);
+    }
 
+    // Compute the dot product of v1 and v2.
+    final double dot = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    // Compute rho = (v1·v2)/(v2·v2), rounded to 8 bits of precision.
+    double rho = Math.rint((dot / norm2) * 256.0) / 256.0;
 
+    // Precondition v1 by subtracting the v2-component.
+    final double ax = v1.x - rho * v2.x;
+    final double ay = v1.y - rho * v2.y;
+    final double az = v1.z - rho * v2.z;
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Now compute the cross product from the preconditioned vector and v2.
+    final double cx = ay * v2.z - az * v2.y;
+    final double cy = az * v2.x - ax * v2.z;
+    final double cz = ax * v2.y - ay * v2.x;
 
+    return new Vector3D(cx, cy, cz);
 }
\ No newline at end of file
