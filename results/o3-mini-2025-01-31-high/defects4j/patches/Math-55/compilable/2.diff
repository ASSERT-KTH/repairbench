diff --git a/tmp/c3d90418-1029-4de8-b001-c130b0afa96f_buggy.java b/tmp/203e496b-1c77-48ac-a021-ecf5da7193a6_fixed.java
index 1478ee1..23bb323 100644
--- a/tmp/c3d90418-1029-4de8-b001-c130b0afa96f_buggy.java
+++ b/tmp/203e496b-1c77-48ac-a021-ecf5da7193a6_fixed.java
@@ -1,24 +1,24 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Precondition v1 via an 8‐bit quantized multiple of v2 to reduce cancellation.
+    // That is, compute ρ ≈ (v1·v2)/(v2·v2) rounded to 8 bits.
+    double normSq = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
+    double rho;
+    if (normSq == 0.0) {
+        rho = 0.0;
+    } else {
+        double dot = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
+        double r = dot / normSq;
+        // Quantize r to 8 bits: that is, round to a multiple of 1/256.
+        rho = Math.rint(r * 256.0) / 256.0;
+    }
     
+    // Replace v1 by v3 = v1 - ρ v2; note that (v1 - ρ v2)×v2 = v1×v2.
+    double x = v1.x - rho * v2.x;
+    double y = v1.y - rho * v2.y;
+    double z = v1.z - rho * v2.z;
     
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    // Compute the cross product using v3 and v2.
+    return new Vector3D(y * v2.z - z * v2.y,
+                        z * v2.x - x * v2.z,
+                        x * v2.y - y * v2.x);
 }
\ No newline at end of file
