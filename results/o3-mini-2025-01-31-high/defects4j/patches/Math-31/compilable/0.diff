diff --git a/tmp/fcbcb42b-7939-41a4-9636-3094bd15251b_buggy.java b/tmp/3f1ddda2-8bd2-4f7d-8ebf-715cb6e5d85b_fixed.java
index 57d43b9..50a9b5c 100644
--- a/tmp/fcbcb42b-7939-41a4-9636-3094bd15251b_buggy.java
+++ b/tmp/3f1ddda2-8bd2-4f7d-8ebf-715cb6e5d85b_fixed.java
@@ -1,102 +1,92 @@
-    /**
-     * <p>
-     * Evaluates the continued fraction at the value x.
-     * </p>
-     *
-     * <p>
-     * The implementation of this method is based on the modified Lentz algorithm as described
-     * on page 18 ff. in:
-     * <ul>
-     * <li>
-     *   I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
-     *   <a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf">
-     *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
-     * </li>
-     * </ul>
-     * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
-     * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction / MathWorld</a>.
-     * </p>
-     *
-     * @param x the evaluation point.
-     * @param epsilon maximum error allowed.
-     * @param maxIterations maximum number of convergents
-     * @return the value of the continued fraction evaluated at x.
-     * @throws ConvergenceException if the algorithm fails to converge.
-     */
 public double evaluate(double x, double epsilon, int maxIterations) {
     final double small = 1e-50;
+    // getA(0,x) returns b₀ (the “initial” denominator term)
     double hPrev = getA(0, x);
-
-        // use the value of small as epsilon criteria for zero checks
     if (Precision.equals(hPrev, 0.0, small)) {
         hPrev = small;
     }
 
+    // For the recurrence we use:
+    //   P₋₁ = 1,   P₀ = b₀, and for n ≥ 1: Pₙ = bₙ * Pₙ₋₁ + aₙ * Pₙ₋₂,
+    //   Q₋₁ = 0,   Q₀ = 1, and for n ≥ 1: Qₙ = bₙ * Qₙ₋₁ + aₙ * Qₙ₋₂.
+    // The continued fraction value is fₙ = Pₙ / Qₙ.
+    // In our implementation getA(0,x) provides b₀.
+    // For n >= 1, we must use getA(n,x) as bₙ (the denominator part)
+    // and getB(n,x) as aₙ (the numerator part). (This “swap” fixes the bug.)
     int n = 1;
     double dPrev = 0.0;
     double p0 = 1.0;
     double q1 = 1.0;
     double cPrev = hPrev;
     double hN = hPrev;
 
     while (n < maxIterations) {
-            final double a = getA(n, x);
-            final double b = getB(n, x);
+        // Swap the coefficients for n>=1 so that:
+        //   b = getA(n, x) is the continued fraction denominator term bₙ,
+        //   a = getB(n, x) is the numerator term aₙ.
+        final double b = getA(n, x);
+        final double a = getB(n, x);
+
+        // Compute the new numerator and denominator of the convergents:
+        //   Pₙ = bₙ * Pₙ₋₁ + aₙ * Pₙ₋₂
+        //   Qₙ = bₙ * Qₙ₋₁ + aₙ * Qₙ₋₂
+        double cN = b * hPrev + a * p0;
+        double q2 = b * q1 + a * dPrev;
 
-            double cN = a * hPrev + b * p0;
-            double q2 = a * q1 + b * dPrev;
         if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
             double scaleFactor = 1d;
             double lastScaleFactor = 1d;
             final int maxPower = 5;
             final double scale = FastMath.max(a, b);
             if (scale <= 0) {  // Can't scale
                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
             }
             for (int i = 0; i < maxPower; i++) {
                 lastScaleFactor = scaleFactor;
                 scaleFactor *= scale;
-                    if (a != 0.0 && a > b) {
-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
-                    } else if (b != 0) {
-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
+                if (b != 0.0 && b > a) {
+                    // Factor b (the dominant term) out of the first term.
+                    cN = hPrev / lastScaleFactor + (a / scaleFactor * p0);
+                    q2 = q1 / lastScaleFactor + (a / scaleFactor * dPrev);
+                } else if (a != 0) {
+                    // Otherwise, factor a out.
+                    cN = (b / scaleFactor * hPrev) + p0 / lastScaleFactor;
+                    q2 = (b / scaleFactor * q1) + dPrev / lastScaleFactor;
                 }
                 if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
                     break;
                 }
             }
         }
 
-            final double deltaN = cN / q2 / cPrev;
+        // deltaN is the factor by which the convergent changes:
+        // (Pₙ/Qₙ) / (Pₙ₋₁/Qₙ₋₁) = (cN/q2) / cPrev.
+        final double deltaN = (cN / q2) / cPrev;
+        // hN becomes the new convergent Pₙ/Qₙ.
         hN = cPrev * deltaN;
 
         if (Double.isInfinite(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
-                                               x);
+            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
         }
         if (Double.isNaN(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
-                                               x);
+            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);
         }
-
         if (FastMath.abs(deltaN - 1.0) < epsilon) {
             break;
         }
 
+        // shift the recurrence: update the old values
         dPrev = q1;
         cPrev = cN / q2;
         p0 = hPrev;
         hPrev = cN;
         q1 = q2;
         n++;
     }
 
     if (n >= maxIterations) {
-            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
-                                                maxIterations, x);
+        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);
     }
 
     return hN;
 }
\ No newline at end of file
