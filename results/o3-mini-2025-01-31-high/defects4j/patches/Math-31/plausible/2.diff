diff --git a/tmp/aaa28cb9-3dc0-4e1c-910d-0f5d38d8e5ad_buggy.java b/tmp/cee87739-3295-4fea-bab0-1d0ed0fedb8d_fixed.java
index 57d43b9..aaac8a2 100644
--- a/tmp/aaa28cb9-3dc0-4e1c-910d-0f5d38d8e5ad_buggy.java
+++ b/tmp/cee87739-3295-4fea-bab0-1d0ed0fedb8d_fixed.java
@@ -1,102 +1,85 @@
-    /**
-     * <p>
-     * Evaluates the continued fraction at the value x.
-     * </p>
-     *
-     * <p>
-     * The implementation of this method is based on the modified Lentz algorithm as described
-     * on page 18 ff. in:
-     * <ul>
-     * <li>
-     *   I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
-     *   <a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf">
-     *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
-     * </li>
-     * </ul>
-     * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
-     * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction / MathWorld</a>.
-     * </p>
-     *
-     * @param x the evaluation point.
-     * @param epsilon maximum error allowed.
-     * @param maxIterations maximum number of convergents
-     * @return the value of the continued fraction evaluated at x.
-     * @throws ConvergenceException if the algorithm fails to converge.
-     */
 public double evaluate(double x, double epsilon, int maxIterations) {
     final double small = 1e-50;
+    // Initialize recurrence with p[-1] = 1, q[-1] = 0 and p[0] = getA(0, x), q[0] = 1.
     double hPrev = getA(0, x);
-
-        // use the value of small as epsilon criteria for zero checks
     if (Precision.equals(hPrev, 0.0, small)) {
         hPrev = small;
     }
-
     int n = 1;
-        double dPrev = 0.0;
-        double p0 = 1.0;
-        double q1 = 1.0;
-        double cPrev = hPrev;
-        double hN = hPrev;
+    double dPrev = 0.0;  // q[-1]
+    double p0 = 1.0;     // p[-1]
+    double q1 = 1.0;     // q[0]
+    // cPrev holds the previous convergent value f_{n-1} = p[n-1] / q[n-1]
+    double cPrev = hPrev; // f0 = p(0)/q(0)
+    double hN = hPrev;    // the current convergent value
 
     while (n < maxIterations) {
         final double a = getA(n, x);
         final double b = getB(n, x);
 
+        // Compute the recurrence: p[n] = a * p[n-1] + b * p[n-2]
+        // and similarly q[n] = a * q[n-1] + b * q[n-2].
         double cN = a * hPrev + b * p0;
         double q2 = a * q1 + b * dPrev;
+
+        // Avoid underflow in cN and q2.
+        if (FastMath.abs(cN) < small) {
+            cN = small;
+        }
+        if (FastMath.abs(q2) < small) {
+            q2 = small;
+        }
+
+        // If cN or q2 overflow to infinity, attempt to rescale the recurrence.
         if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
-                double scaleFactor = 1d;
-                double lastScaleFactor = 1d;
             final int maxPower = 5;
-                final double scale = FastMath.max(a,b);
-                if (scale <= 0) {  // Can't scale
+            double scaleFactor = 1.0;
+            // Use absolute values for scaling.
+            final double scale = FastMath.max(FastMath.abs(a), FastMath.abs(b));
+            if (scale <= 0) {  // Cannot scale if both a and b are zero.
                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
             }
             for (int i = 0; i < maxPower; i++) {
-                    lastScaleFactor = scaleFactor;
                 scaleFactor *= scale;
-                    if (a != 0.0 && a > b) {
-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
-                    } else if (b != 0) {
-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
+                cN = a * (hPrev / scaleFactor) + b * (p0 / scaleFactor);
+                q2 = a * (q1 / scaleFactor) + b * (dPrev / scaleFactor);
+                if (!Double.isInfinite(cN) && !Double.isInfinite(q2)) {
+                    // Also ensure that after scaling we are not too close to zero.
+                    if (FastMath.abs(cN) < small) {
+                        cN = small;
+                    }
+                    if (FastMath.abs(q2) < small) {
+                        q2 = small;
                     }
-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
                     break;
                 }
             }
         }
 
-            final double deltaN = cN / q2 / cPrev;
-            hN = cPrev * deltaN;
+        // Compute current approximant f(n) = p[n] / q[n].
+        final double f = cN / q2;
+        // deltaN = f(n) / f(n-1)
+        final double deltaN = f / cPrev;
+        hN = f;
 
         if (Double.isInfinite(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
-                                               x);
+            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
         }
         if (Double.isNaN(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
-                                               x);
+            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);
         }
-
         if (FastMath.abs(deltaN - 1.0) < epsilon) {
-                break;
+            return hN;
         }
 
+        // Update variables for next iteration.
         dPrev = q1;
-            cPrev = cN / q2;
+        cPrev = f;
         p0 = hPrev;
         hPrev = cN;
         q1 = q2;
         n++;
     }
 
-        if (n >= maxIterations) {
-            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
-                                                maxIterations, x);
-        }
-
-        return hN;
+    throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);
 }
\ No newline at end of file
