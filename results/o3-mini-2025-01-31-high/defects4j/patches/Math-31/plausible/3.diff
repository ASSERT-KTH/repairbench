diff --git a/tmp/45ca8c13-2ea3-4aa5-9334-0167f54a965d_buggy.java b/tmp/b6dcaa79-7580-4164-911d-8813a19606c7_fixed.java
index 57d43b9..df38831 100644
--- a/tmp/45ca8c13-2ea3-4aa5-9334-0167f54a965d_buggy.java
+++ b/tmp/b6dcaa79-7580-4164-911d-8813a19606c7_fixed.java
@@ -1,102 +1,109 @@
-    /**
-     * <p>
-     * Evaluates the continued fraction at the value x.
-     * </p>
-     *
-     * <p>
-     * The implementation of this method is based on the modified Lentz algorithm as described
-     * on page 18 ff. in:
-     * <ul>
-     * <li>
-     *   I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
-     *   <a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf">
-     *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
-     * </li>
-     * </ul>
-     * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
-     * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction / MathWorld</a>.
-     * </p>
-     *
-     * @param x the evaluation point.
-     * @param epsilon maximum error allowed.
-     * @param maxIterations maximum number of convergents
-     * @return the value of the continued fraction evaluated at x.
-     * @throws ConvergenceException if the algorithm fails to converge.
-     */
 public double evaluate(double x, double epsilon, int maxIterations) {
     final double small = 1e-50;
     double hPrev = getA(0, x);
-
-        // use the value of small as epsilon criteria for zero checks
+    // safeguard against a zero initial value
     if (Precision.equals(hPrev, 0.0, small)) {
         hPrev = small;
     }
-
     int n = 1;
-        double dPrev = 0.0;
-        double p0 = 1.0;
-        double q1 = 1.0;
-        double cPrev = hPrev;
+    // these variables hold, respectively, p[-1], p[0] and q[-1], q[0] so that the recurrence
+    //   p[n] = bₙ * p[n – 1] + aₙ * p[n – 2]
+    //   q[n] = bₙ * q[n – 1] + aₙ * q[n – 2]
+    // reproduces the standard continued fraction approximants f[n] = p[n] / q[n].
+    // In our implementation, getA(0, x) returns b₀, and for n>=1 one should have:
+    //   bₙ = getA(n, x)    and    aₙ = getB(n, x)
+    double dPrev = 0.0; // q[-1]
+    double p0    = 1.0; // p[-1]
+    double q1    = 1.0; // q[0]
+    double cPrev = hPrev; // f₀ = p[0]/q[0]
     double hN    = hPrev;
     
     while (n < maxIterations) {
+        // For n>=1, bₙ = getA(n, x) and aₙ = getB(n, x)
         final double a = getA(n, x);
         final double b = getB(n, x);
         
+        // Compute the next numerator and denominator by the recurrence:
+        //   p[n] = bₙ * p[n–1]   +   aₙ * p[n–2]
+        //   q[n] = bₙ * q[n–1]   +   aₙ * q[n–2]
         double cN = a * hPrev + b * p0;
         double q2 = a * q1   + b * dPrev;
+        
+        // If overflow has occurred, try to rescale following the modified Lentz algorithm.
         if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
             double scaleFactor = 1d;
             double lastScaleFactor = 1d;
             final int maxPower = 5;
             final double scale = FastMath.max(a, b);
-                if (scale <= 0) {  // Can't scale
+            if (scale <= 0) {
                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
             }
             for (int i = 0; i < maxPower; i++) {
                 lastScaleFactor = scaleFactor;
                 scaleFactor *= scale;
                 if (a != 0.0 && a > b) {
                     cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
                     q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
-                    } else if (b != 0) {
+                } else if (b != 0.0) {
                     cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
                     q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
                 }
                 if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
                     break;
                 }
             }
         }
         
-            final double deltaN = cN / q2 / cPrev;
-            hN = cPrev * deltaN;
+        // To prevent division by zero (or an extremely small number) in later steps,
+        // force cN and q2 to be at least 'small' if they are too tiny.
+        if (FastMath.abs(cN) < small) {
+            cN = small;
+        }
+        if (FastMath.abs(q2) < small) {
+            q2 = small;
+        }
+        
+        // Rescale the intermediate values (p and q recurrences) if they are too large or too small.
+        // Such scaling does not affect the ratio p[n]/q[n] but greatly improves numerical stability.
+        double extremeScale = FastMath.max(FastMath.abs(cN), FastMath.abs(q2));
+        if (extremeScale > 1e300 || (extremeScale != 0.0 && extremeScale < 1e-300)) {
+            cN    /= extremeScale;
+            hPrev /= extremeScale;
+            p0    /= extremeScale;
+            q1    /= extremeScale;
+            dPrev /= extremeScale;
+            q2    /= extremeScale;
+        }
+        
+        // Compute the relative change of the successive convergents:
+        // deltaN = (f[n] / f[n-1])  where f[n] = p[n]/q[n].
+        final double deltaN = (cN / q2) / cPrev;
+        hN = cPrev * deltaN; // hN now equals the new f[n] = p[n]/q[n].
         
         if (Double.isInfinite(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
-                                               x);
+            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
         }
         if (Double.isNaN(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
-                                               x);
+            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);
         }
         
+        // Check for convergence.
         if (FastMath.abs(deltaN - 1.0) < epsilon) {
             break;
         }
         
+        // Update recurrence parameters for next iteration.
         dPrev = q1;
-            cPrev = cN / q2;
+        cPrev = cN / q2;  // f[n] becomes the new previous approximant.
         p0    = hPrev;
         hPrev = cN;
         q1    = q2;
         n++;
     }
     
     if (n >= maxIterations) {
-            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
-                                                maxIterations, x);
+        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);
     }
     
     return hN;
 }
\ No newline at end of file
