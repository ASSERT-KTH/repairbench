diff --git a/tmp/30e795db-1862-4a28-888a-36f592324572_buggy.java b/tmp/0095c64d-f20d-480e-8a26-61e03d9cc54c_fixed.java
index d666a67..57390f7 100644
--- a/tmp/30e795db-1862-4a28-888a-36f592324572_buggy.java
+++ b/tmp/0095c64d-f20d-480e-8a26-61e03d9cc54c_fixed.java
@@ -1,36 +1,35 @@
-    /**
-     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
-     * <p />
-     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
-     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
-     * some more duplicates.
-     */
 private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
-        // limit (no cache):
+    // If there’s nothing to cache (or a negative count due to not found), return the empty string.
+    if (count <= 0)
+        return "";
+
+    // Only cache short strings.
     if (count > maxStringCacheLen)
         return new String(charBuf, start, count);
 
-        // calculate hash:
+    // Calculate hash using a simple polynomial rolling hash.
     int hash = 0;
-        int offset = start;
     for (int i = 0; i < count; i++) {
-            hash = 31 * hash + charBuf[offset++];
+        hash = 31 * hash + charBuf[start + i];
     }
 
-        // get from cache
-        final int index = hash & stringCache.length - 1;
+    // Use a bit mask on (stringCache.length - 1) to get a valid index.
+    final int index = hash & (stringCache.length - 1);
     String cached = stringCache[index];
 
-        if (cached == null) { // miss, add
+    if (cached == null) { // Cache miss: create and store
         cached = new String(charBuf, start, count);
         stringCache[index] = cached;
-        } else { // hashcode hit, check equality
-            if (rangeEquals(charBuf, start, count, cached)) { // hit
+    } else { // Cache hit – check if it really equals the char[] region.
+        // Also check the length to avoid out-of-bound comparisons; 
+        // rangeEquals is assumed to compare region of charBuf to the string.
+        if (cached.length() == count && rangeEquals(charBuf, start, count, cached)) {
             return cached;
-            } else { // hashcode conflict
+        } else {
+            // In case of a hash collision, update the cache with the new string.
             cached = new String(charBuf, start, count);
-                stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
+            stringCache[index] = cached;
         }
     }
     return cached;
 }
\ No newline at end of file
