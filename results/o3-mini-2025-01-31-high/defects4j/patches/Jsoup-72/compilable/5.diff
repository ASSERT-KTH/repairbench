diff --git a/tmp/478f5ffb-f667-49b0-8828-f8fb26b9697f_buggy.java b/tmp/47f53ae4-31bd-4048-b39a-604faf0c6149_fixed.java
index d666a67..a93cc4c 100644
--- a/tmp/478f5ffb-f667-49b0-8828-f8fb26b9697f_buggy.java
+++ b/tmp/47f53ae4-31bd-4048-b39a-604faf0c6149_fixed.java
@@ -1,36 +1,28 @@
-    /**
-     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
-     * <p />
-     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
-     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
-     * some more duplicates.
-     */
 private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
-        // limit (no cache):
+    // If there are no characters to form a string, return the empty string.
+    if (count <= 0)
+        return "";
+
+    // For very long strings, bypass the cache.
     if (count > maxStringCacheLen)
         return new String(charBuf, start, count);
 
-        // calculate hash:
+    // Compute a hash for the char range.
     int hash = 0;
-        int offset = start;
     for (int i = 0; i < count; i++) {
-            hash = 31 * hash + charBuf[offset++];
+        hash = 31 * hash + charBuf[start + i];
     }
 
-        // get from cache
-        final int index = hash & stringCache.length - 1;
+    // Use explicit parentheses so the mask is computed as intended.
+    final int index = hash & (stringCache.length - 1);
     String cached = stringCache[index];
 
-        if (cached == null) { // miss, add
+    if (cached == null) { // Cache miss - add the new string.
         cached = new String(charBuf, start, count);
         stringCache[index] = cached;
-        } else { // hashcode hit, check equality
-            if (rangeEquals(charBuf, start, count, cached)) { // hit
-                return cached;
-            } else { // hashcode conflict
+    } else if (!rangeEquals(charBuf, start, count, cached)) { // Hash collision: update with recent string.
         cached = new String(charBuf, start, count);
-                stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
-            }
+        stringCache[index] = cached;
     }
     return cached;
 }
\ No newline at end of file
