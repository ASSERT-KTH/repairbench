diff --git a/tmp/ce567b77-dc3f-4537-bb66-c9dc768ab049_buggy.java b/tmp/a295aedb-77d5-4313-99c9-94dcc6defde8_fixed.java
index d666a67..0391197 100644
--- a/tmp/ce567b77-dc3f-4537-bb66-c9dc768ab049_buggy.java
+++ b/tmp/a295aedb-77d5-4313-99c9-94dcc6defde8_fixed.java
@@ -1,36 +1,34 @@
-    /**
-     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
-     * <p />
-     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
-     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
-     * some more duplicates.
-     */
-    private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
-        // limit (no cache):
+private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, int count) {
+    // if count is negative, use the rest of the buffer
+    if (count < 0)
+        count = charBuf.length - start;
+
+    // if string is too long, donâ€™t cache it
     if (count > maxStringCacheLen)
         return new String(charBuf, start, count);
 
-        // calculate hash:
+    // calculate hash from the chars
     int hash = 0;
     int offset = start;
     for (int i = 0; i < count; i++) {
         hash = 31 * hash + charBuf[offset++];
     }
 
-        // get from cache
-        final int index = hash & stringCache.length - 1;
+    // determine cache index (assumes stringCache.length is a power of 2)
+    final int index = hash & (stringCache.length - 1);
     String cached = stringCache[index];
 
-        if (cached == null) { // miss, add
+    // if cache miss, create new string and cache it
+    if (cached == null) {
         cached = new String(charBuf, start, count);
         stringCache[index] = cached;
-        } else { // hashcode hit, check equality
-            if (rangeEquals(charBuf, start, count, cached)) { // hit
+    } else { // potential hashcode collision so check equality
+        if (rangeEquals(charBuf, start, count, cached)) {
             return cached;
-            } else { // hashcode conflict
+        } else { // hash collision: create new string and update cache
             cached = new String(charBuf, start, count);
-                stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
+            stringCache[index] = cached;
         }
     }
     return cached;
 }
\ No newline at end of file
