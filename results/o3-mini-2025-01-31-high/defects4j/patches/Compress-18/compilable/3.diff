diff --git a/tmp/76d4241e-b6d0-40f8-8b60-ef9847c80a69_buggy.java b/tmp/2e944d41-c51b-4eb7-8999-96e133089da9_fixed.java
index 08093b4..a4d5764 100644
--- a/tmp/76d4241e-b6d0-40f8-8b60-ef9847c80a69_buggy.java
+++ b/tmp/2e944d41-c51b-4eb7-8999-96e133089da9_fixed.java
@@ -1,42 +1,37 @@
-    /**
-     * Writes a PAX extended header with the given map as contents.
-     * @since 1.4
-     */
-    void writePaxHeaders(String entryName,
-                         Map<String, String> headers) throws IOException {
-        String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
-            // TarEntry's constructor would think this is a directory
-            // and not allow any data to be written
+void writePaxHeaders(String entryName, Map<String, String> headers) throws IOException {
+    // Remove the trailing slash from the entry name so that the Pax header is not
+    // mistakenly interpreted as a directory.
+    String strippedEntryName = stripTo7Bits(entryName);
+    if (strippedEntryName.endsWith("/")) {
+        strippedEntryName = strippedEntryName.substring(0, strippedEntryName.length() - 1);
+    }
+    String name = "./PaxHeaders.X/" + strippedEntryName;
     if (name.length() >= TarConstants.NAMELEN) {
         name = name.substring(0, TarConstants.NAMELEN - 1);
     }
-        TarArchiveEntry pex = new TarArchiveEntry(name,
-                                                  TarConstants.LF_PAX_EXTENDED_HEADER_LC);
+    TarArchiveEntry pex = new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
     StringWriter w = new StringWriter();
     for (Map.Entry<String, String> h : headers.entrySet()) {
         String key = h.getKey();
         String value = h.getValue();
         int len = key.length() + value.length()
             + 3 /* blank, equals and newline */
             + 2 /* guess 9 < actual length < 100 */;
         String line = len + " " + key + "=" + value + "\n";
         int actualLength = line.getBytes(CharsetNames.UTF_8).length;
         while (len != actualLength) {
-                // Adjust for cases where length < 10 or > 100
-                // or where UTF-8 encoding isn't a single octet
-                // per character.
-                // Must be in loop as size may go from 99 to 100 in
-                // first pass so we'd need a second.
+            // Adjust for cases where length < 10 or > 100,
+            // or where the UTF-8 encoding uses more than one byte per character.
             len = actualLength;
             line = len + " " + key + "=" + value + "\n";
             actualLength = line.getBytes(CharsetNames.UTF_8).length;
         }
         w.write(line);
     }
     byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
     pex.setSize(data.length);
     putArchiveEntry(pex);
     write(data);
     closeArchiveEntry();
 }
\ No newline at end of file
