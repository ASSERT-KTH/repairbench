diff --git a/tmp/fd84f89e-2380-4584-bf20-bfe5fb63f263_buggy.java b/tmp/32e231c8-f6a5-43c1-9acb-610045dc1346_fixed.java
index 08093b4..6874e82 100644
--- a/tmp/fd84f89e-2380-4584-bf20-bfe5fb63f263_buggy.java
+++ b/tmp/32e231c8-f6a5-43c1-9acb-610045dc1346_fixed.java
@@ -1,42 +1,39 @@
-    /**
-     * Writes a PAX extended header with the given map as contents.
-     * @since 1.4
-     */
 void writePaxHeaders(String entryName,
                      Map<String, String> headers) throws IOException {
-        String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
-            // TarEntry's constructor would think this is a directory
-            // and not allow any data to be written
+    // Convert the entry name to a safe 7-bit version.
+    String safeEntryName = stripTo7Bits(entryName);
+    // Remove a trailing '/' if present to avoid being treated as a directory.
+    if (safeEntryName.endsWith("/")) {
+        safeEntryName = safeEntryName.substring(0, safeEntryName.length() - 1);
+    }
+    String name = "./PaxHeaders.X/" + safeEntryName;
     if (name.length() >= TarConstants.NAMELEN) {
         name = name.substring(0, TarConstants.NAMELEN - 1);
     }
     TarArchiveEntry pex = new TarArchiveEntry(name,
                                               TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
     StringWriter w = new StringWriter();
     for (Map.Entry<String, String> h : headers.entrySet()) {
         String key = h.getKey();
         String value = h.getValue();
         int len = key.length() + value.length()
             + 3 /* blank, equals and newline */
             + 2 /* guess 9 < actual length < 100 */;
         String line = len + " " + key + "=" + value + "\n";
         int actualLength = line.getBytes(CharsetNames.UTF_8).length;
         while (len != actualLength) {
             // Adjust for cases where length < 10 or > 100
-                // or where UTF-8 encoding isn't a single octet
-                // per character.
-                // Must be in loop as size may go from 99 to 100 in
-                // first pass so we'd need a second.
+            // or where UTF-8 encoding isn't a single octet per character.
             len = actualLength;
             line = len + " " + key + "=" + value + "\n";
             actualLength = line.getBytes(CharsetNames.UTF_8).length;
         }
         w.write(line);
     }
     byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
     pex.setSize(data.length);
     putArchiveEntry(pex);
     write(data);
     closeArchiveEntry();
 }
\ No newline at end of file
