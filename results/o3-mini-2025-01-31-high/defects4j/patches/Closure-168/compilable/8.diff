diff --git a/tmp/32539e5d-d0fe-4d59-b2d0-d33144d6a050_buggy.java b/tmp/05416d84-69d9-465c-9a61-31a4f9cf688a_fixed.java
index b12de99..9f9ddf5 100644
--- a/tmp/32539e5d-d0fe-4d59-b2d0-d33144d6a050_buggy.java
+++ b/tmp/05416d84-69d9-465c-9a61-31a4f9cf688a_fixed.java
@@ -1,52 +1,49 @@
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (t.inGlobalScope()) {
     return;
   }
 
   if (n.isReturn() && n.getFirstChild() != null) {
     data.get(t.getScopeRoot()).recordNonEmptyReturn();
   }
 
   if (t.getScopeDepth() <= 2) {
     // The first-order function analyzer looks at two types of variables:
-        //
     // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
     // 2) Local variables that are assigned more than once.
-        //
     // We treat all global variables as escaped by default, so there's
     // no reason to do this extra computation for them.
     return;
   }
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
-          !NodeUtil.isBleedingFunctionName(n)) {
+  // For name nodes we need to record two things:
+  // - If the node is part of an assignment, record the assigned name.
+  // - And always record an "escape" if the current scope is not the
+  //   variableâ€™s owner scope.
+  if (n.isName() && !NodeUtil.isBleedingFunctionName(n)) {
     String name = n.getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
-          if (ownerScope.isLocal()) {
+      if (ownerScope.isLocal() && NodeUtil.isLValue(n)) {
         data.get(ownerScope.getRootNode()).recordAssignedName(name);
       }
-
       if (scope != ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
       }
     }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
+  } else if (n.isGetProp() && n.isUnscopedQualifiedName()) {
+    // For property accesses we similarly record an escaped qualified name
     String name = NodeUtil.getRootOfQualifiedName(n).getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (scope != ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode())
             .recordEscapedQualifiedName(n.getQualifiedName());
       }
     }
   }
 }
\ No newline at end of file
