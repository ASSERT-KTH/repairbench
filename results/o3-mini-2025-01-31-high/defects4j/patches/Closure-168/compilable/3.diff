diff --git a/tmp/8a214131-48a1-404b-aaa0-a14a8ef47cba_buggy.java b/tmp/e6104179-00b0-48f1-92a7-75de711076b4_fixed.java
index b12de99..8467d15 100644
--- a/tmp/8a214131-48a1-404b-aaa0-a14a8ef47cba_buggy.java
+++ b/tmp/e6104179-00b0-48f1-92a7-75de711076b4_fixed.java
@@ -1,52 +1,56 @@
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
   if (t.inGlobalScope()) {
     return;
   }
 
   if (n.isReturn() && n.getFirstChild() != null) {
     data.get(t.getScopeRoot()).recordNonEmptyReturn();
   }
 
   if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
+    // Skip analysis for shallow scopes (global or near‐global).
     return;
   }
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
+  // When a variable is written (“assigned”) in an inner scope, we want to mark it;
+  // however, in cases like "self.bar(...)" the name "self" appears as a child of a GETPROP
+  // that is not actually an assignment.  So, for a bare name node, make sure it isn’t
+  // merely the object part of a property access.
+  if (n.isName() &&
+      (parent == null || !(parent.isGetProp() && parent.getFirstChild() == n)) &&
+      NodeUtil.isLValue(n) &&
       !NodeUtil.isBleedingFunctionName(n)) {
     String name = n.getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordAssignedName(name);
       }
-
+      // Mark as escaped if the variable is used in an inner scope.
       if (scope != ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
       }
     }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
+  }
+  // For property assignments like "obj.prop = …", only record the escape when the GETPROP
+  // node itself is being assigned (i.e. it is the LHS of an assignment).
+  else if (n.isGetProp() &&
+           n.isUnscopedQualifiedName() &&
+           parent != null &&
+           parent.isAssign() &&
+           parent.getFirstChild() == n) {
     String name = NodeUtil.getRootOfQualifiedName(n).getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (scope != ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode())
             .recordEscapedQualifiedName(n.getQualifiedName());
       }
     }
   }
 }
\ No newline at end of file
