diff --git a/tmp/612f0a79-baa0-4223-9128-b8fc493286e4_buggy.java b/tmp/8cfbe359-b170-44cb-8c66-ba7929fd369b_fixed.java
index b12de99..49339f3 100644
--- a/tmp/612f0a79-baa0-4223-9128-b8fc493286e4_buggy.java
+++ b/tmp/8cfbe359-b170-44cb-8c66-ba7929fd369b_fixed.java
@@ -1,52 +1,55 @@
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
+  // Skip only true globals.
   if (t.inGlobalScope()) {
     return;
   }
 
   if (n.isReturn() && n.getFirstChild() != null) {
     data.get(t.getScopeRoot()).recordNonEmptyReturn();
   }
 
-      if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
+  // Process nodes for all non‐global functions.
+  // (Previously we returned for scope depth ≤2, which
+  //  skipped first‐order functions that declare variables used
+  //  in inner functions. Now we only return for depth <2.)
+  if (t.getScopeDepth() < 2) {
     return;
   }
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
-          !NodeUtil.isBleedingFunctionName(n)) {
+  // For a plain name reference, record an assignment only if
+  // it really occurs as an assignment target—that is, not when the
+  // name is merely used as the object in a property access.
+  if (n.isName() && !NodeUtil.isBleedingFunctionName(n)) {
+    if (NodeUtil.isLValue(n) && (parent == null || !parent.isGetProp())) {
       String name = n.getString();
       Scope scope = t.getScope();
       Var var = scope.getVar(name);
       if (var != null) {
         Scope ownerScope = var.getScope();
         if (ownerScope.isLocal()) {
           data.get(ownerScope.getRootNode()).recordAssignedName(name);
         }
-
         if (scope != ownerScope && ownerScope.isLocal()) {
           data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
         }
       }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
+    }
+  }
+  // For a get-property node, record an escaped qualified name only if it is
+  // really assigned to (for example, in "obj.prop = …").
+  else if (n.isGetProp() && n.isUnscopedQualifiedName()) {
+    if (parent != null && parent.isAssign() && parent.getFirstChild() == n) {
       String name = NodeUtil.getRootOfQualifiedName(n).getString();
       Scope scope = t.getScope();
       Var var = scope.getVar(name);
       if (var != null) {
         Scope ownerScope = var.getScope();
         if (scope != ownerScope && ownerScope.isLocal()) {
           data.get(ownerScope.getRootNode())
               .recordEscapedQualifiedName(n.getQualifiedName());
         }
       }
     }
   }
+}
\ No newline at end of file
