diff --git a/tmp/87feea01-790e-4a0e-a340-702e25e6f495_buggy.java b/tmp/b585c53f-48c2-4416-bd69-7976e9ab0aa9_fixed.java
index b5a206b..194db4d 100644
--- a/tmp/87feea01-790e-4a0e-a340-702e25e6f495_buggy.java
+++ b/tmp/b585c53f-48c2-4416-bd69-7976e9ab0aa9_fixed.java
@@ -1,80 +1,80 @@
 /**
  * Get the next entry in this tar archive. This will skip
  * over any remaining data in the current entry, if there
  * is one, and place the input stream at the header of the
  * next entry, and read the header and instantiate a new
  * TarEntry from the header bytes and return that entry.
  * If there are no more entries in the archive, null will
  * be returned to indicate that the end of the archive has
  * been reached.
  *
  * @return The next TarEntry in the archive, or null.
  * @throws IOException on error
  */
 public TarArchiveEntry getNextTarEntry() throws IOException {
     if (hasHitEOF) {
         return null;
     }
 
     if (currEntry != null) {
         long numToSkip = entrySize - entryOffset;
 
         while (numToSkip > 0) {
             long skipped = skip(numToSkip);
             if (skipped <= 0) {
                 throw new RuntimeException("failed to skip current tar entry");
             }
             numToSkip -= skipped;
         }
-
         readBuf = null;
     }
 
     byte[] headerBuf = getRecord();
 
     if (hasHitEOF) {
         currEntry = null;
         return null;
     }
 
+    try {
         currEntry = new TarArchiveEntry(headerBuf);
+    } catch (IllegalArgumentException e) {
+        // Wrap the IllegalArgumentException in an IOException as expected by callers.
+        throw new IOException(e);
+    }
+
     entryOffset = 0;
     entrySize = currEntry.getSize();
 
     if (currEntry.isGNULongNameEntry()) {
-            // read in the name
+        // read in the long name
         StringBuffer longName = new StringBuffer();
         byte[] buf = new byte[SMALL_BUFFER_SIZE];
-            int length = 0;
+        int length;
         while ((length = read(buf)) >= 0) {
             longName.append(new String(buf, 0, length));
         }
         getNextEntry();
         if (currEntry == null) {
-                // Bugzilla: 40334
-                // Malformed tar file - long entry name not followed by entry
+            // Malformed tar file - long entry name not followed by an actual entry.
             return null;
         }
-            // remove trailing null terminator
-            if (longName.length() > 0
-                && longName.charAt(longName.length() - 1) == 0) {
+        // remove trailing null terminator if present
+        if (longName.length() > 0 && longName.charAt(longName.length() - 1) == 0) {
             longName.deleteCharAt(longName.length() - 1);
         }
         currEntry.setName(longName.toString());
     }
 
     if (currEntry.isPaxHeader()) { // Process Pax headers
         paxHeaders();
     }
 
     if (currEntry.isGNUSparse()) { // Process sparse files
         readGNUSparse();
     }
 
-        // If the size of the next element in the archive has changed
-        // due to a new size being reported in the posix header
-        // information, we update entrySize here so that it contains
-        // the correct value.
+    // Update entrySize in case it has been modified (e.g. by a posix header)
     entrySize = currEntry.getSize();
     return currEntry;
 }
\ No newline at end of file
