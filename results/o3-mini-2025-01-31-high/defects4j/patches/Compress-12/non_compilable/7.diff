diff --git a/tmp/f8ffad76-762b-4dbc-a9eb-9cdb2b7592f7_buggy.java b/tmp/c8f8a65a-0f9a-4560-8fc9-578cae9c3319_fixed.java
index b5a206b..31abcbd 100644
--- a/tmp/f8ffad76-762b-4dbc-a9eb-9cdb2b7592f7_buggy.java
+++ b/tmp/c8f8a65a-0f9a-4560-8fc9-578cae9c3319_fixed.java
@@ -1,80 +1,76 @@
 /**
  * Get the next entry in this tar archive. This will skip
  * over any remaining data in the current entry, if there
  * is one, and place the input stream at the header of the
  * next entry, and read the header and instantiate a new
  * TarEntry from the header bytes and return that entry.
  * If there are no more entries in the archive, null will
  * be returned to indicate that the end of the archive has
  * been reached.
  *
  * @return The next TarEntry in the archive, or null.
  * @throws IOException on error
  */
 public TarArchiveEntry getNextTarEntry() throws IOException {
     if (hasHitEOF) {
         return null;
     }
 
+    // If we have a current entry, skip its unread bytes.
     if (currEntry != null) {
         long numToSkip = entrySize - entryOffset;
-
         while (numToSkip > 0) {
             long skipped = skip(numToSkip);
             if (skipped <= 0) {
                 throw new RuntimeException("failed to skip current tar entry");
             }
             numToSkip -= skipped;
         }
-
         readBuf = null;
     }
 
+    // Read the next header record.
     byte[] headerBuf = getRecord();
-
     if (hasHitEOF) {
         currEntry = null;
         return null;
     }
-
     currEntry = new TarArchiveEntry(headerBuf);
     entryOffset = 0;
     entrySize = currEntry.getSize();
 
+    // Process GNU long name entry.
     if (currEntry.isGNULongNameEntry()) {
-            // read in the name
         StringBuffer longName = new StringBuffer();
         byte[] buf = new byte[SMALL_BUFFER_SIZE];
-            int length = 0;
+        int length;
         while ((length = read(buf)) >= 0) {
             longName.append(new String(buf, 0, length));
         }
-            getNextEntry();
+        // Replace the current entry with the one following the long name entry.
+        currEntry = getNextEntry();
         if (currEntry == null) {
-                // Bugzilla: 40334
             // Malformed tar file - long entry name not followed by entry
             return null;
         }
-            // remove trailing null terminator
-            if (longName.length() > 0
-                && longName.charAt(longName.length() - 1) == 0) {
+        // Remove any trailing null characters.
+        while (longName.length() > 0 && longName.charAt(longName.length() - 1) == 0) {
             longName.deleteCharAt(longName.length() - 1);
         }
         currEntry.setName(longName.toString());
     }
 
-        if (currEntry.isPaxHeader()){ // Process Pax headers
+    // Process Pax headers if present.
+    if (currEntry.isPaxHeader()) {
         paxHeaders();
     }
 
-        if (currEntry.isGNUSparse()){ // Process sparse files
+    // Process GNU sparse files if needed.
+    if (currEntry.isGNUSparse()) {
         readGNUSparse();
     }
 
-        // If the size of the next element in the archive has changed
-        // due to a new size being reported in the posix header
-        // information, we update entrySize here so that it contains
-        // the correct value.
+    // Update the entry size (in case the header changed it, e.g. via a posix header)
     entrySize = currEntry.getSize();
     return currEntry;
 }
\ No newline at end of file
