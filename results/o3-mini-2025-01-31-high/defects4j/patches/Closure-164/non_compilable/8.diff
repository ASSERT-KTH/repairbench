diff --git a/tmp/51a6167a-15df-4f7a-812f-d9acd06629e6_buggy.java b/tmp/b71d2b3e-a53f-4050-bf1c-1078ce0d4dcb_fixed.java
index 9976e43..22f75ae 100644
--- a/tmp/51a6167a-15df-4f7a-812f-d9acd06629e6_buggy.java
+++ b/tmp/b71d2b3e-a53f-4050-bf1c-1078ce0d4dcb_fixed.java
@@ -1,76 +1,65 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
 
   ArrowType that = (ArrowType) other;
 
-    // This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.7: Subtyping Function Types.
-
-    // this.returnType <: that.returnType (covariant)
+  // According to subtyping for function types (ES4 Draft 2, §3.4.7):
+  //   - The return type must be covariant.
+  //   - The parameter types are checked contravariantly.
+  // In our system we “relax” the arity requirement so that a function that
+  // takes fewer arguments is considered a subtype of one that takes more –
+  // that is, you can “ignore” extra parameters. However, if the candidate
+  // function (this) requires more parameters than the supertype (that),
+  // then it is not a subtype.
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
-    // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
+  // Walk pairwise over the parameter lists.
   while (thisParam != null && thatParam != null) {
     JSType thisParamType = thisParam.getJSType();
     JSType thatParamType = thatParam.getJSType();
+    // If candidate declares a type for a parameter then
+    // the supertype’s corresponding parameter must be a subtype
+    // (contravariant check).
     if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
+      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {
         return false;
       }
     }
 
     boolean thisIsVarArgs = thisParam.isVarArgs();
     boolean thatIsVarArgs = thatParam.isVarArgs();
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
-      // don't advance if we have variable arguments
+    // When a parameter is not marked var_args, advance to the next.
     if (!thisIsVarArgs) {
       thisParam = thisParam.getNext();
     }
     if (!thatIsVarArgs) {
       thatParam = thatParam.getNext();
     }
 
-      // both var_args indicates the end
+    // If both parameters are var_args, then they “swallow” the rest.
     if (thisIsVarArgs && thatIsVarArgs) {
       thisParam = null;
       thatParam = null;
     }
   }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+  // At this point one or both lists have been exhausted.
+  // Our function subtyping rule is that the candidate (this)
+  // must not have more parameters than the supertype (that);
+  // it is OK if it has fewer—which is what lets you “ignore” extra arguments.
+  if (thisParam != null) {
+    return false;
+  }
 
+  // (If thatParam is non-null, that’s fine: the supertype may expect
+  // extra arguments that the candidate simply ignores.)
   return true;
 }
\ No newline at end of file
