diff --git a/tmp/22f91a89-e530-4d5a-ad62-379b0243d8a2_buggy.java b/tmp/d66a68e4-0ab3-4c6b-8dcf-910169000e68_fixed.java
index 9976e43..8f0b1f4 100644
--- a/tmp/22f91a89-e530-4d5a-ad62-379b0243d8a2_buggy.java
+++ b/tmp/d66a68e4-0ab3-4c6b-8dcf-910169000e68_fixed.java
@@ -1,76 +1,80 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
 
   ArrowType that = (ArrowType) other;
 
   // This is described in Draft 2 of the ES4 spec,
   // Section 3.4.7: Subtyping Function Types.
 
   // this.returnType <: that.returnType (covariant)
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
   // that.paramType[i] <: this.paramType[i] (contravariant)
   //
   // If this.paramType[i] is required,
   // then that.paramType[i] is required.
   //
   // In theory, the "required-ness" should work in the other direction as
   // well. In other words, if we have
   //
   //   function f(number, number) {}
   //   function g(number) {}
   //
-    // Then f *should* not be a subtype of g, and g *should* not be
+  // then f *should* not be a subtype of g, and g *should* not be
   // a subtype of f. But in practice, we do not implement it this way.
   // We want to support the use case where you can pass g where f is
   // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
+  // That way, you can have a single "no‐op" function, and you don't have
+  // to create a new no‐op function for every possible type signature.
   //
-    // So, in this case, g < f, but f !< g
+  // So, in this case, a function with fewer (or varargs in place of extra)
+  // parameters is acceptable as a subtype, but one with extra required
+  // parameters is not.
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
   while (thisParam != null && thatParam != null) {
     JSType thisParamType = thisParam.getJSType();
     JSType thatParamType = thatParam.getJSType();
     if (thisParamType != null) {
       if (thatParamType == null ||
           !thatParamType.isSubtype(thisParamType)) {
         return false;
       }
     }
 
     boolean thisIsVarArgs = thisParam.isVarArgs();
     boolean thatIsVarArgs = thatParam.isVarArgs();
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
-      // don't advance if we have variable arguments
+    // Don't advance if we have variable arguments.
     if (!thisIsVarArgs) {
       thisParam = thisParam.getNext();
     }
     if (!thatIsVarArgs) {
       thatParam = thatParam.getNext();
     }
 
-      // both var_args indicates the end
+    // If both parameters are varargs, they "absorb" all remaining arguments.
     if (thisIsVarArgs && thatIsVarArgs) {
       thisParam = null;
       thatParam = null;
     }
   }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+  // At this point, we have processed all parameters that both functions have.
+  // It is okay for 'that' (the expected type) to have extra parameters.
+  // However, if 'this' (the candidate subtype) has extra parameters, then
+  // it requires arguments that 'that' did not promise to supply.
+  while (thisParam != null) {
+    if (!thisParam.isVarArgs() && thisParam.getJSType() != null) {
+      return false;
+    }
+    thisParam = thisParam.getNext();
+  }
 
   return true;
 }
\ No newline at end of file
