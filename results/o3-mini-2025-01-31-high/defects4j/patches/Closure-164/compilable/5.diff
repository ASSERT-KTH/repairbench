diff --git a/tmp/14cae814-366f-4e07-9061-fdb819deebc1_buggy.java b/tmp/ba65d458-d126-46cd-be22-682109195904_fixed.java
index 9976e43..f8c3e7c 100644
--- a/tmp/14cae814-366f-4e07-9061-fdb819deebc1_buggy.java
+++ b/tmp/ba65d458-d126-46cd-be22-682109195904_fixed.java
@@ -1,76 +1,58 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
-
   ArrowType that = (ArrowType) other;
 
-    // This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.7: Subtyping Function Types.
-
-    // this.returnType <: that.returnType (covariant)
+  // Return types: this.returnType <: that.returnType (covariant)
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
-    // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
+  // Parameter types are contravariant.
+  // For each parameter in "this" (the candidate subtype), the corresponding parameter
+  // in "that" (the supertype) must satisfy:
+  //    that.paramType[i] <: this.paramType[i]
+  // Also, if "this" has a required parameter, then "that" must have one.
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
   while (thisParam != null && thatParam != null) {
     JSType thisParamType = thisParam.getJSType();
     JSType thatParamType = thatParam.getJSType();
     if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
+      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {
         return false;
       }
     }
 
     boolean thisIsVarArgs = thisParam.isVarArgs();
     boolean thatIsVarArgs = thatParam.isVarArgs();
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
-      // don't advance if we have variable arguments
+    // When a parameter is not var_args, advance to the next one.
     if (!thisIsVarArgs) {
       thisParam = thisParam.getNext();
     }
     if (!thatIsVarArgs) {
       thatParam = thatParam.getNext();
     }
 
-      // both var_args indicates the end
+    // If both sides are varargs then we've reached the end of the list.
     if (thisIsVarArgs && thatIsVarArgs) {
       thisParam = null;
       thatParam = null;
     }
   }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+  // If the candidate function ("this") has any extra parameters they must be varargs.
+  // Otherwise, "this" has more required parameters than "that", so it is not a subtype.
+  while (thisParam != null) {
+    if (!thisParam.isVarArgs()) {
+      return false;
+    }
+    thisParam = thisParam.getNext();
+  }
 
+  // It is allowed for the supertype ("that") to have extra parameters.
   return true;
 }
\ No newline at end of file
