diff --git a/tmp/43ebe3f1-b261-4e05-85cb-8735e0c10b9f_buggy.java b/tmp/0967df08-81a1-4d4d-bed1-1f6dc69111bc_fixed.java
index 9976e43..7dd88e0 100644
--- a/tmp/43ebe3f1-b261-4e05-85cb-8735e0c10b9f_buggy.java
+++ b/tmp/0967df08-81a1-4d4d-bed1-1f6dc69111bc_fixed.java
@@ -1,76 +1,53 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
-
   ArrowType that = (ArrowType) other;
 
-    // This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.7: Subtyping Function Types.
-
-    // this.returnType <: that.returnType (covariant)
+  // Covariant: this.returnType <: that.returnType.
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
-    // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
+  // Contravariant on parameters:
+  // For each parameter in "that", the corresponding parameter in "this" must be
+  // such that that.paramType is a subtype of this.paramType.
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
   while (thisParam != null && thatParam != null) {
     JSType thisParamType = thisParam.getJSType();
     JSType thatParamType = thatParam.getJSType();
     if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
+      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {
         return false;
       }
     }
 
     boolean thisIsVarArgs = thisParam.isVarArgs();
     boolean thatIsVarArgs = thatParam.isVarArgs();
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
-      // don't advance if we have variable arguments
+    // If both parameters are var_args, treat this as the end of the list.
+    if (thisIsVarArgs && thatIsVarArgs) {
+      thisParam = null;
+      thatParam = null;
+    } else {
       if (!thisIsVarArgs) {
         thisParam = thisParam.getNext();
       }
       if (!thatIsVarArgs) {
         thatParam = thatParam.getNext();
       }
-
-      // both var_args indicates the end
-      if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
     }
   }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+  // If "this" has extra parameters that "that" does not have,
+  // then "this" expects more arguments than "that" provides.
+  if (thisParam != null) {
+    return false;
+  }
   
+  // If "that" has extra parameters, that's acceptable
+  // (calls expecting more arguments will simply ignore the extras).
   return true;
 }
\ No newline at end of file
