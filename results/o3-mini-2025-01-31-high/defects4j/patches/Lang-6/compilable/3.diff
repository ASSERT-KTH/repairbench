diff --git a/tmp/908ea7f0-951c-4047-929c-5910b8610471_buggy.java b/tmp/247c294f-d2bd-4917-9450-3b7f9e470faa_fixed.java
index 4c1ed27..4a99e67 100644
--- a/tmp/908ea7f0-951c-4047-929c-5910b8610471_buggy.java
+++ b/tmp/247c294f-d2bd-4917-9450-3b7f9e470faa_fixed.java
@@ -1,32 +1,23 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
     int len = input.length();
     while (pos < len) {
         int consumed = translate(input, pos, out);
         if (consumed == 0) {
+            // No translation occurred, write the code point directly.
             char[] c = Character.toChars(Character.codePointAt(input, pos));
             out.write(c);
             pos += c.length;
-                continue;
-            }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+        } else {
+            // The contract of the translate method is that it returns the number 
+            // of characters (not codepoints) consumed from the input. Simply advance.
+            pos += consumed;
         }
     }
 }
\ No newline at end of file
