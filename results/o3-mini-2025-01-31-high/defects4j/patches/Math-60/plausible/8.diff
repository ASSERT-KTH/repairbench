diff --git a/tmp/03883937-a94c-4182-ba52-4c0ff96cb47a_buggy.java b/tmp/a70a30fe-11ba-4749-a63e-68c76c201955_fixed.java
index 3127f85..d9c70f4 100644
--- a/tmp/03883937-a94c-4182-ba52-4c0ff96cb47a_buggy.java
+++ b/tmp/a70a30fe-11ba-4749-a63e-68c76c201955_fixed.java
@@ -1,24 +1,24 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
 public double cumulativeProbability(double x) throws MathException {
-        final double dev = x - mean;
-        try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
-                throw ex;
+    // Handle NaN and infinite values explicitly.
+    if (Double.isNaN(x)) {
+        return Double.NaN;
     }
+    if (x == Double.POSITIVE_INFINITY) {
+        return 1.0;
     }
+    if (x == Double.NEGATIVE_INFINITY) {
+        return 0.0;
+    }
+    
+    // For extreme values, return 0 or 1 as appropriate, avoiding numerical issues.
+    if (x > mean + 20 * standardDeviation) {
+        return 1.0;
+    }
+    if (x < mean - 20 * standardDeviation) {
+        return 0.0;
+    }
+    
+    // Compute the cumulative probability using the error function.
+    double arg = (x - mean) / (standardDeviation * FastMath.sqrt(2.0));
+    return 0.5 * (1.0 + Erf.erf(arg));
 }
\ No newline at end of file
