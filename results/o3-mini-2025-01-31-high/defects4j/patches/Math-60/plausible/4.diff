diff --git a/tmp/370fca11-8c9a-471f-92a9-54bccf7ea3bc_buggy.java b/tmp/15990a6d-aa3d-4f9c-8cf5-f0e155b96819_fixed.java
index 3127f85..f3e6fa4 100644
--- a/tmp/370fca11-8c9a-471f-92a9-54bccf7ea3bc_buggy.java
+++ b/tmp/15990a6d-aa3d-4f9c-8cf5-f0e155b96819_fixed.java
@@ -1,24 +1,34 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
 public double cumulativeProbability(double x) throws MathException {
+    // Handle infinite inputs right away.
+    if (x == Double.POSITIVE_INFINITY) {
+        return 1.0;
+    }
+    if (x == Double.NEGATIVE_INFINITY) {
+        return 0.0;
+    }
+
     final double dev = x - mean;
+    // If x is more than 40 standard deviations from the mean,
+    // return 0 or 1 immediately (see class Javadoc).
+    if (dev > 40 * standardDeviation) {
+        return 1.0;
+    }
+    if (dev < -40 * standardDeviation) {
+        return 0.0;
+    }
+
     try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+        return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
     } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
+        // Fallback: if the computation fails to converge,
+        // then for values that are still far from the mean (20 standard deviations),
+        // we assume the tail probability is 0 or 1.
+        if (dev < -20 * standardDeviation) {
+            return 0.0;
+        } else if (dev > 20 * standardDeviation) {
+            return 1.0;
         } else {
             throw ex;
         }
     }
 }
\ No newline at end of file
