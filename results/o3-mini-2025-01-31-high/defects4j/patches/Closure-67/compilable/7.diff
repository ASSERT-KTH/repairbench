diff --git a/tmp/4bc6a073-fa80-48be-8405-94fbbfe4ce91_buggy.java b/tmp/48a9f261-77a8-438a-abb4-27779fe75489_fixed.java
index 939f49b..8a3c9af 100644
--- a/tmp/4bc6a073-fa80-48be-8405-94fbbfe4ce91_buggy.java
+++ b/tmp/48a9f261-77a8-438a-abb4-27779fe75489_fixed.java
@@ -1,21 +1,22 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+      && (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)) {
+    // In a chained property, the left-hand side looks like (e.prototype).<prop>.
+    // We must handle both dot and bracket notations.
+    Node receiver = n.getFirstChild();
+    if (receiver != null &&
+        (receiver.getType() == Token.GETPROP || receiver.getType() == Token.GETELEM)) {
+      Node base = receiver.getFirstChild();
+      if (base != null) {
+        Node protoProp = base.getNext();
+        if (protoProp != null &&
+            protoProp.getType() == Token.STRING &&
+            "prototype".equals(protoProp.getString())) {
           return true;
         }
       }
     }
-
+  }
   return false;
 }
\ No newline at end of file
