diff --git a/tmp/332a58dd-3992-4bbf-b90f-97af5d82f046_buggy.java b/tmp/9aacd539-c7c5-4e6c-a579-e8d4e2b4d45d_fixed.java
index 939f49b..d807735 100644
--- a/tmp/332a58dd-3992-4bbf-b90f-97af5d82f046_buggy.java
+++ b/tmp/9aacd539-c7c5-4e6c-a579-e8d4e2b4d45d_fixed.java
@@ -1,21 +1,25 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+  if (n != null 
+      && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
+      && (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)) {
+    // For a chained property assignment such as:
+    //   e.prototype.method or e.prototype['alias1']
+    // n is the outer access node (GETPROP or GETELEM) and its first child
+    // is the inner access node representing e.prototype.
+    Node objectExpr = n.getFirstChild();
+    if (objectExpr != null &&
+        (objectExpr.getType() == Token.GETPROP || objectExpr.getType() == Token.GETELEM)) {
+      // In e.prototype, the property "prototype" is stored as the second child.
+      Node protoProp = (objectExpr.getFirstChild() != null) 
+                       ? objectExpr.getFirstChild().getNext() 
+                       : null;
+      if (protoProp != null &&
+          protoProp.getType() == Token.STRING &&
+          "prototype".equals(protoProp.getString())) {
         return true;
       }
     }
   }
-
   return false;
 }
\ No newline at end of file
