diff --git a/tmp/88d286cc-b91b-49ef-affb-d0dfbd1826a8_buggy.java b/tmp/0edba80d-d295-49a3-82ad-1a894b16f7cc_fixed.java
index 939f49b..4e9a48d 100644
--- a/tmp/88d286cc-b91b-49ef-affb-d0dfbd1826a8_buggy.java
+++ b/tmp/0edba80d-d295-49a3-82ad-1a894b16f7cc_fixed.java
@@ -1,21 +1,17 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+      && (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)) {
+    Node target = n.getFirstChild();
+    if (target != null && (target.getType() == Token.GETPROP || target.getType() == Token.GETELEM)) {
+      // The property being accessed on the inner chain should be "prototype".
+      Node protoProp = target.getLastChild();
+      if (protoProp != null &&
+          protoProp.getType() == Token.STRING &&
+          "prototype".equals(protoProp.getString())) {
         return true;
       }
     }
   }
-
   return false;
 }
\ No newline at end of file
