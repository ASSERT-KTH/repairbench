diff --git a/tmp/d10af9ff-0973-44ec-a77d-d8655e65f2e4_buggy.java b/tmp/06a6e66c-e223-45ba-985a-cf896d58500f_fixed.java
index 939f49b..217c4e3 100644
--- a/tmp/d10af9ff-0973-44ec-a77d-d8655e65f2e4_buggy.java
+++ b/tmp/06a6e66c-e223-45ba-985a-cf896d58500f_fixed.java
@@ -1,21 +1,23 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+  if (n != null 
+      && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
+      && (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)) {
     // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+    // If the left-hand side is a property access off an object property,
+    // check whether that object property is “prototype”.
+    Node target = n.getFirstChild();
+    if (target != null 
+        && (target.getType() == Token.GETPROP || target.getType() == Token.GETELEM)) {
+      // In both GETPROP and GETELEM the first child is the object (e.g. "e")
+      // and the second child (obtained via getNext()) is the property name.
+      Node prototypeProp = target.getFirstChild().getNext();
+      if (prototypeProp != null 
+          && prototypeProp.getType() == Token.STRING
+          && "prototype".equals(prototypeProp.getString())) {
         return true;
       }
     }
   }
-
   return false;
 }
\ No newline at end of file
