diff --git a/tmp/51a28521-31de-4ce4-99e9-bf0cb0418d96_buggy.java b/tmp/73e6b4b1-f816-4dc9-974d-2399fb9ba72f_fixed.java
index 939f49b..8af5c32 100644
--- a/tmp/51a28521-31de-4ce4-99e9-bf0cb0418d96_buggy.java
+++ b/tmp/73e6b4b1-f816-4dc9-974d-2399fb9ba72f_fixed.java
@@ -1,21 +1,24 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+  if (n != null 
+      && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
+      && (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)) {
+    // In a chained property assign, the receiver (the object on which a property is read)
+    // will be a property access (GETPROP). For example, in "e.prototype['alias1']",
+    // n is GETELEM and its first child is "e.prototype" (a GETPROP node).
+    Node receiver = n.getFirstChild();
+    if (receiver != null && receiver.getType() == Token.GETPROP) {
+      // For e.prototype, the first child is "e" and the next sibling is the property name.
+      Node prototypeToken = receiver.getFirstChild();
+      if (prototypeToken != null) {
+        Node propName = prototypeToken.getNext();
+        if (propName != null 
+            && propName.getType() == Token.STRING 
+            && "prototype".equals(propName.getString())) {
           return true;
         }
       }
     }
-
+  }
   return false;
 }
\ No newline at end of file
