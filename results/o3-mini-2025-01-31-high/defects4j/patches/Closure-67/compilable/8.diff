diff --git a/tmp/30256a80-95dc-4f95-84cb-cc7b787e27fe_buggy.java b/tmp/b4bd349c-8093-41ec-a0f9-23bdd903e212_fixed.java
index 939f49b..54c4120 100644
--- a/tmp/30256a80-95dc-4f95-84cb-cc7b787e27fe_buggy.java
+++ b/tmp/b4bd349c-8093-41ec-a0f9-23bdd903e212_fixed.java
@@ -1,21 +1,24 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+  if (n != null &&
+      NodeUtil.isVarOrSimpleAssignLhs(n, assign) &&
+      (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)) {
+    // In a chained property access, the object whose property is being accessed
+    // is itself a property access like "e.prototype". We need to check that
+    // the inner access has "prototype" as its property.
+    Node target = n.getFirstChild();
+    if (target != null &&
+        (target.getType() == Token.GETPROP || target.getType() == Token.GETELEM)) {
+      Node objectNode = target.getFirstChild();
+      if (objectNode != null) {
+        Node propNode = objectNode.getNext();
+        if (propNode != null &&
+            propNode.getType() == Token.STRING &&
+            "prototype".equals(propNode.getString())) {
           return true;
         }
       }
     }
-
+  }
   return false;
 }
\ No newline at end of file
