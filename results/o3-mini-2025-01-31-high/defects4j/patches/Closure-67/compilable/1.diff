diff --git a/tmp/3417fc40-190f-45b1-9045-81e87d3c7eab_buggy.java b/tmp/c2fac8ec-9477-412f-b8fc-fa471cf2899c_fixed.java
index 939f49b..65e2e17 100644
--- a/tmp/3417fc40-190f-45b1-9045-81e87d3c7eab_buggy.java
+++ b/tmp/c2fac8ec-9477-412f-b8fc-fa471cf2899c_fixed.java
@@ -1,21 +1,19 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP) {
+    // Check if the object part is itself a GETPROP,
+    // which should indicate a chain like "e.prototype.foo".
+    Node receiver = n.getFirstChild();
+    if (receiver != null && receiver.getType() == Token.GETPROP) {
+      // Instead of chaining getFirstChild().getNext(),
+      // use getLastChild() to reliably get the property name from "e.prototype".
+      Node protoProp = receiver.getLastChild();
+      if (protoProp != null &&
+          protoProp.getType() == Token.STRING &&
+          "prototype".equals(protoProp.getString())) {
         return true;
       }
     }
   }
-
   return false;
 }
\ No newline at end of file
