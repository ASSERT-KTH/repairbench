diff --git a/tmp/a1286dd9-5abe-4311-b25e-9e2a246958aa_buggy.java b/tmp/f8510727-5e6b-4b97-b6ea-751eaca63315_fixed.java
index db19f52..e8d9796 100644
--- a/tmp/a1286dd9-5abe-4311-b25e-9e2a246958aa_buggy.java
+++ b/tmp/f8510727-5e6b-4b97-b6ea-751eaca63315_fixed.java
@@ -1,32 +1,40 @@
-    // switching the chartset midstream when a meta http-equiv tag defines the charset.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // strip spurious BOM, if present
+        if (!docData.isEmpty() && docData.charAt(0) == '\uFEFF') {
+            docData = docData.substring(1);
+        }
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset = meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset");
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+        if (meta != null) { // if meta found, check if re-decode is needed (charset change)
+            String foundCharset = meta.hasAttr("http-equiv")
+                    ? getCharsetFromContentType(meta.attr("content"))
+                    : meta.attr("charset");
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
+                // strip BOM from the re-decoded data, if any
+                if (!docData.isEmpty() && docData.charAt(0) == '\uFEFF') {
+                    docData = docData.substring(1);
+                }
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
+        // remove a leading BOM if present
+        if (!docData.isEmpty() && docData.charAt(0) == '\uFEFF') {
+            docData = docData.substring(1);
+        }
     }
     if (doc == null) {
-            // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present
-            // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight
-            // into head mode
-
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
