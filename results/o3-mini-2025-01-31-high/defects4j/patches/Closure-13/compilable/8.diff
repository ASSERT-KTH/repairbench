diff --git a/tmp/dfeccd0f-634e-4436-9ddb-509abf08e623_buggy.java b/tmp/22cc097b-e302-47ae-908a-358d7b6d0532_fixed.java
index b5d94e0..f775ba3 100644
--- a/tmp/dfeccd0f-634e-4436-9ddb-509abf08e623_buggy.java
+++ b/tmp/22cc097b-e302-47ae-908a-358d7b6d0532_fixed.java
@@ -1,26 +1,20 @@
 private void traverse(Node node) {
-    // The goal here is to avoid retraversing
-    // the entire AST to catch newly created opportunities.
-    // So we track whether a "unit of code" has changed,
-    // and revisit immediately.
   if (!shouldVisit(node)) {
     return;
   }
 
+  // First, repeatedly transform (visit) this node until it stabilizes.
   int visits = 0;
   do {
-      Node c = node.getFirstChild();
-      while(c != null) {
-        traverse(c);
-        Node next = c.getNext();
-        c = next;
-      }
-
     visit(node);
     visits++;
-
-      Preconditions.checkState(visits < 10000, "too many interations");
+    Preconditions.checkState(visits < 10000, "too many iterations");
   } while (shouldRetraverse(node));
 
+  // Now that the node is stable, traverse its (possibly new) children.
+  for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {
+    traverse(child);
+  }
+
   exitNode(node);
 }
\ No newline at end of file
