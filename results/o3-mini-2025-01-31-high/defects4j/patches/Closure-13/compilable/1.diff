diff --git a/tmp/a26c4726-56dd-4a7b-b834-eef011fb9148_buggy.java b/tmp/a05de054-f098-472f-96b5-30f4654a1f7a_fixed.java
index b5d94e0..a7c21d9 100644
--- a/tmp/a26c4726-56dd-4a7b-b834-eef011fb9148_buggy.java
+++ b/tmp/a05de054-f098-472f-96b5-30f4654a1f7a_fixed.java
@@ -1,26 +1,31 @@
 private void traverse(Node node) {
-    // The goal here is to avoid retraversing
-    // the entire AST to catch newly created opportunities.
-    // So we track whether a "unit of code" has changed,
-    // and revisit immediately.
   if (!shouldVisit(node)) {
     return;
   }
 
+  // Process all children that already exist.
+  Node child = node.getFirstChild();
+  Node lastVisited = null;
+  while (child != null) {
+    traverse(child);
+    lastVisited = child;
+    child = child.getNext();
+  }
+
   int visits = 0;
   do {
-      Node c = node.getFirstChild();
-      while(c != null) {
-        traverse(c);
-        Node next = c.getNext();
-        c = next;
-      }
-
     visit(node);
     visits++;
+    Preconditions.checkState(visits < 10000, "too many iterations");
 
-      Preconditions.checkState(visits < 10000, "too many interations");
+    // If visit(node) has added new children, process only those new children.
+    child = (lastVisited == null) ? node.getFirstChild() : lastVisited.getNext();
+    while (child != null) {
+      traverse(child);
+      lastVisited = child;
+      child = child.getNext();
+    }
   } while (shouldRetraverse(node));
 
   exitNode(node);
 }
\ No newline at end of file
