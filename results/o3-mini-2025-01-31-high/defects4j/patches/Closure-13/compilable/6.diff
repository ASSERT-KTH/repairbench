diff --git a/tmp/d89a384c-3a4d-4a01-8d4b-be599b6a237b_buggy.java b/tmp/3e0eeb57-4ca5-49ac-9e57-1cae539e29e9_fixed.java
index b5d94e0..7675399 100644
--- a/tmp/d89a384c-3a4d-4a01-8d4b-be599b6a237b_buggy.java
+++ b/tmp/3e0eeb57-4ca5-49ac-9e57-1cae539e29e9_fixed.java
@@ -1,26 +1,22 @@
 private void traverse(Node node) {
-    // The goal here is to avoid retraversing
-    // the entire AST to catch newly created opportunities.
-    // So we track whether a "unit of code" has changed,
-    // and revisit immediately.
   if (!shouldVisit(node)) {
     return;
   }
 
   int visits = 0;
   do {
-      Node c = node.getFirstChild();
-      while(c != null) {
-        traverse(c);
-        Node next = c.getNext();
-        c = next;
-      }
-
+    // First, apply the transformation so that any changes to 'node'
+    // (for example, new children being added) are in place before we
+    // try to traverse the (possibly new) children.
     visit(node);
     visits++;
+    Preconditions.checkState(visits < 10000, "too many iterations");
     
-      Preconditions.checkState(visits < 10000, "too many interations");
+    // Now traverse the children of the current (possibly updated) node.
+    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {
+      traverse(child);
+    }
   } while (shouldRetraverse(node));
   
   exitNode(node);
 }
\ No newline at end of file
