diff --git a/tmp/841b7e8a-9fc9-4643-b6a1-80cf41998610_buggy.java b/tmp/54615608-96c9-4fe4-a58d-9104e1707039_fixed.java
index 6c5e87f..4856bef 100644
--- a/tmp/841b7e8a-9fc9-4643-b6a1-80cf41998610_buggy.java
+++ b/tmp/54615608-96c9-4fe4-a58d-9104e1707039_fixed.java
@@ -1,12 +1,24 @@
 /**
  * Build a sparse matrix with the supplied row and column dimensions.
  *
  * @param rowDimension Number of rows of the matrix.
  * @param columnDimension Number of columns of the matrix.
  */
 public OpenMapRealMatrix(int rowDimension, int columnDimension) {
-        super(rowDimension, columnDimension);
+    // The key used internally is computed as row * column + columnIndex.
+    // To avoid overflow in that computation, check that the total number
+    // of entries does not exceed Integer.MAX_VALUE.
+    super(validateDimensions(rowDimension, columnDimension), columnDimension);
     this.rows = rowDimension;
     this.columns = columnDimension;
     this.entries = new OpenIntToDoubleHashMap(0.0);
 }
+
+private static int validateDimensions(int rowDimension, int columnDimension) {
+    // Avoid multiplying if rowDimension is 0.
+    // If rowDimension != 0, then check that (long) rowDimension * columnDimension <= Integer.MAX_VALUE
+    if (rowDimension != 0 && columnDimension > Integer.MAX_VALUE / rowDimension) {
+        throw new NumberIsTooLargeException(columnDimension, Integer.MAX_VALUE / rowDimension, false);
+    }
+    return rowDimension;
+}
\ No newline at end of file
