diff --git a/tmp/a5e66fcf-0bf9-4cb0-b942-2b217dfbcb46_buggy.java b/tmp/4c6fa16d-2328-4bdc-b631-292312b5be32_fixed.java
index c4b260c..e2aa7b0 100644
--- a/tmp/a5e66fcf-0bf9-4cb0-b942-2b217dfbcb46_buggy.java
+++ b/tmp/4c6fa16d-2328-4bdc-b631-292312b5be32_fixed.java
@@ -1,51 +1,53 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
+    // Use the default charset (typically "UTF-8") when none is provided.
+    // Assumes that "defaultCharset" is defined elsewhere (e.g., as "UTF-8").
     String docData;
-        Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    Document doc;
+    if (charsetName == null) {
+        // Decode using the default charset first.
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // If the BOM is present at the start, remove it.
+        if (docData.length() > 0 && docData.charAt(0) == '\uFEFF')
+            docData = docData.substring(1);
+        // Parse the document to allow meta charset detection.
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+        if (meta != null) {
+            String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
-                            if (Charset.isSupported(meta.attr("charset"))) {
+                        if (Charset.isSupported(meta.attr("charset")))
                             foundCharset = meta.attr("charset");
-                            }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
             } else {
                 foundCharset = meta.attr("charset");
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            // If a different charset is declared in the meta tag, re-decode and re-parse.
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                if (docData.length() > 0 && docData.charAt(0) == '\uFEFF')
+                    docData = docData.substring(1);
+                doc = parser.parseInput(docData, baseUri);
             }
         }
-        } else { // specified by content type header (or by user on file load)
+        // Set the output charset; if still null, fall back to defaultCharset.
+        doc.outputSettings().charset(charsetName == null ? defaultCharset : charsetName);
+    } else {
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // Remove a spurious BOM if present.
+        if (docData.length() > 0 && docData.charAt(0) == '\uFEFF')
             docData = docData.substring(1);
-            charsetName = defaultCharset;
-        }
-        if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
