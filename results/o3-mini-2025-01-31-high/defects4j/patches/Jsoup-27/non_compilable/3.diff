diff --git a/tmp/46335591-a9c8-4766-91d9-ff793ba7f57a_buggy.java b/tmp/46b5bf47-dca3-4733-94d9-44f98fd5d32d_fixed.java
index 7fb120e..a778106 100644
--- a/tmp/46335591-a9c8-4766-91d9-ff793ba7f57a_buggy.java
+++ b/tmp/46b5bf47-dca3-4733-94d9-44f98fd5d32d_fixed.java
@@ -1,16 +1,19 @@
-    /**
-     * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
-     * will kick in.)
-     * @param contentType e.g. "text/html; charset=EUC-JP"
-     * @return "EUC-JP", or null if not found. Charset is trimmed and uppercased.
-     */
 static String getCharsetFromContentType(String contentType) {
     if (contentType == null) return null;
     Matcher m = charsetPattern.matcher(contentType);
     if (m.find()) {
         String charset = m.group(1).trim();
-            charset = charset.toUpperCase(Locale.ENGLISH);
+        // Remove surrounding quotes if present
+        if (charset.length() > 1 && charset.charAt(0) == '"' && charset.charAt(charset.length() - 1) == '"') {
+            charset = charset.substring(1, charset.length() - 1).trim();
+        }
+        // Only return supported charsets; Javaâ€™s Charset.isSupported is case-insensitive.
+        try {
+            if (Charset.isSupported(charset))
                 return charset;
+        } catch (IllegalCharsetNameException e) {
+            // Illegal charset name, so fall through to return null
+        }
     }
     return null;
 }
\ No newline at end of file
