diff --git a/tmp/c481a01f-68df-42d9-a0ae-6e7a3535904d_buggy.java b/tmp/aab4414f-75b1-42e7-ba74-1af8ca092338_fixed.java
index bf9c086..e056cc8 100644
--- a/tmp/c481a01f-68df-42d9-a0ae-6e7a3535904d_buggy.java
+++ b/tmp/aab4414f-75b1-42e7-ba74-1af8ca092338_fixed.java
@@ -1,54 +1,49 @@
-  /**
-   * Visits a CALL node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   */
 private void visitCall(NodeTraversal t, Node n) {
   Node child = n.getFirstChild();
   JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
   if (!childType.canBeCalled()) {
     report(t, n, NOT_CALLABLE, childType.toString());
     ensureTyped(t, n);
     return;
   }
 
-    // A couple of types can be called as if they were functions.
-    // If it is a function type, then validate parameters.
   if (childType instanceof FunctionType) {
     FunctionType functionType = (FunctionType) childType;
 
+    // If the function has an explicit "this" type, then it must be
+    // called via a property access (GETPROP or GETELEM). For example,
+    // calling a function like "f()" where f is declared as
+    // "function(this:F)" is an error.
+    JSType thisType = functionType.getTypeOfThis();
+    if (thisType != null && !thisType.isUnknownType() &&
+        !child.isGetProp() && !child.isGetElem()) {
+      report(t, n, INVALID_THIS, functionType.toString());
+      ensureTyped(t, n, functionType.getReturnType());
+      return;
+    }
+
     boolean isExtern = false;
     JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
     if (functionJSDocInfo != null) {
       String sourceName = functionJSDocInfo.getSourceName();
       CompilerInput functionSource = compiler.getInput(sourceName);
       isExtern = functionSource.isExtern();
     }
 
-      // Non-native constructors should not be called directly
-      // unless they specify a return type and are defined
-      // in an extern.
+    // Non-native constructors should not be called directly unless they
+    // specify a return type and are defined in an extern.
     if (functionType.isConstructor() &&
         !functionType.isNativeObjectType() &&
         (functionType.getReturnType().isUnknownType() ||
          functionType.getReturnType().isVoidType() ||
          !isExtern)) {
       report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
     }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
-
     visitParameterList(t, n, functionType);
     ensureTyped(t, n, functionType.getReturnType());
   } else {
     ensureTyped(t, n);
   }
-
-    // TODO: Add something to check for calls of RegExp objects, which is not
-    // supported by IE.  Either say something about the return type or warn
-    // about the non-portability of the call or both.
 }
\ No newline at end of file
