diff --git a/tmp/e348d128-1170-4856-8d0a-41048ca4f788_buggy.java b/tmp/d00c01d4-64a2-49bb-91c0-c1f514f3ea20_fixed.java
index 63641d0..5d35043 100644
--- a/tmp/e348d128-1170-4856-8d0a-41048ca4f788_buggy.java
+++ b/tmp/d00c01d4-64a2-49bb-91c0-c1f514f3ea20_fixed.java
@@ -1,33 +1,39 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
-  private boolean inferTemplatedTypesForCall(
-      Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+private boolean inferTemplatedTypesForCall(Node n, FunctionType fnType) {
+  ImmutableList<TemplateType> keys =
+      fnType.getTemplateTypeMap().getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
-    // Try to infer the template types
+  // Try to infer the template types from the call’s arguments.
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
-
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+  // Use the TemplateTypeReplacer to substitute template types.
+  // Any template type for which no inference was obtained will be replaced with UNKNOWN.
+  TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);
   Node callTarget = n.getFirstChild();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
+  FunctionType inferredFnType = fnType.visit(replacer).toMaybeFunctionType();
+  Preconditions.checkNotNull(inferredFnType);
 
-    callTarget.setJSType(replacementFnType);
-    n.setJSType(replacementFnType.getReturnType());
+  // If the call target already has a function type (for example, if it was written
+  // as a function literal with an explicit JSDoc), we want to update only its “this” type.
+  // This preserves the originally declared parameter and return types.
+  JSType existingType = callTarget.getJSType();
+  if (existingType != null && existingType.isFunctionType()) {
+    FunctionType originalFnType = existingType.toMaybeFunctionType();
+    // Create a new function type that is identical except that its "this" type is replaced.
+    FunctionType updatedFnType = originalFnType.withThisType(
+        inferredFnType.getTypeOfThis());
+    callTarget.setJSType(updatedFnType);
+  } else {
+    // Otherwise, simply replace the entire type.
+    callTarget.setJSType(inferredFnType);
+  }
+
+  // The call expression's type is determined by the function's return type.
+  n.setJSType(inferredFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
