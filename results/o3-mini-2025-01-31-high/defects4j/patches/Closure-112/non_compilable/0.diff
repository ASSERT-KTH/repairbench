diff --git a/tmp/b708e32f-686e-46eb-8c9f-c0158b66d6c8_buggy.java b/tmp/2d12d59b-ba81-4b1e-bb34-fda2104d7039_fixed.java
index 63641d0..1929065 100644
--- a/tmp/b708e32f-686e-46eb-8c9f-c0158b66d6c8_buggy.java
+++ b/tmp/2d12d59b-ba81-4b1e-bb34-fda2104d7039_fixed.java
@@ -1,33 +1,28 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
-  private boolean inferTemplatedTypesForCall(
-      Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+private boolean inferTemplatedTypesForCall(Node n, FunctionType fnType) {
+  ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap().getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
-    // Try to infer the template types
-    Map<TemplateType, JSType> inferred =
-        inferTemplateTypesFromParameters(fnType, n);
-
+  // Try to infer the template types.
+  Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);
 
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+  TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);
   Node callTarget = n.getFirstChild();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+  FunctionType replacementFnType = fnType.visit(replacer).toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
+  // Update the call target's type.
   callTarget.setJSType(replacementFnType);
+  if (callTarget.isFunction()) {
+    // Also update the cached function-type property so that the "this" type (and other
+    // instantiated types) get used in subsequent type-checking.
+    callTarget.putProp(Node.FUNCTION_PROP, replacementFnType);
+  }
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
