diff --git a/tmp/b78e90c3-2ce7-44c2-92e1-ea22bc40ec31_buggy.java b/tmp/155745e5-9423-4783-bbfc-0be9a3a86088_fixed.java
index 63641d0..6f21619 100644
--- a/tmp/b78e90c3-2ce7-44c2-92e1-ea22bc40ec31_buggy.java
+++ b/tmp/155745e5-9423-4783-bbfc-0be9a3a86088_fixed.java
@@ -1,33 +1,30 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
-  private boolean inferTemplatedTypesForCall(
-      Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+private boolean inferTemplatedTypesForCall(Node n, FunctionType fnType) {
+  final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap().getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
-    Map<TemplateType, JSType> inferred =
-        inferTemplateTypesFromParameters(fnType, n);
-
+  Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);
 
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+  TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);
   Node callTarget = n.getFirstChild();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+  FunctionType replacementFnType = fnType.visit(replacer).toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
+  // If the call target is a function literal, update its "this" type.
+  if (callTarget.isFunction()) {
+    FunctionType funLit = callTarget.getJSType().toMaybeFunctionType();
+    if (funLit != null) {
+      funLit.setTypeOfThis(replacementFnType.getTypeOfThis());
+    }
+  }
+
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
