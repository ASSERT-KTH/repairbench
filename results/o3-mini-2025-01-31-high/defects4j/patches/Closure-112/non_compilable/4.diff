diff --git a/tmp/0b1ace2e-c90c-41b2-a5a4-9b65a5ace6f5_buggy.java b/tmp/e78f3a3a-4ed5-40f3-a1d0-68a3c561c992_fixed.java
index 63641d0..9aed133 100644
--- a/tmp/0b1ace2e-c90c-41b2-a5a4-9b65a5ace6f5_buggy.java
+++ b/tmp/e78f3a3a-4ed5-40f3-a1d0-68a3c561c992_fixed.java
@@ -1,33 +1,30 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
-  private boolean inferTemplatedTypesForCall(
-      Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+private boolean inferTemplatedTypesForCall(Node n, FunctionType fnType) {
+  final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap().getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
-    // Try to infer the template types
-    Map<TemplateType, JSType> inferred =
-        inferTemplateTypesFromParameters(fnType, n);
+  // Try to infer the template types.
+  Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);
 
+  // For any template type that could not be inferred, substitute UNKNOWN.
+  // (We build a complete mapping so that every key is replaced.)
+  Map<TemplateType, JSType> completeMapping = new HashMap<>(inferred);
+  for (TemplateType key : keys) {
+    if (!completeMapping.containsKey(key)) {
+      completeMapping.put(key, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
+    }
+  }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+  // Replace all template types in the function type.
+  TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, completeMapping);
   Node callTarget = n.getFirstChild();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+  FunctionType replacementFnType = fnType.visit(replacer).toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
