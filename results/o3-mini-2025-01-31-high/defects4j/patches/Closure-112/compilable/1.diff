diff --git a/tmp/2cbff80a-b517-4a87-93e1-0c2af401835c_buggy.java b/tmp/56190ff8-1d07-43af-a38c-81e165821eb2_fixed.java
index 63641d0..57acbc6 100644
--- a/tmp/2cbff80a-b517-4a87-93e1-0c2af401835c_buggy.java
+++ b/tmp/56190ff8-1d07-43af-a38c-81e165821eb2_fixed.java
@@ -1,33 +1,37 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
-  private boolean inferTemplatedTypesForCall(
-      Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+private boolean inferTemplatedTypesForCall(Node n, FunctionType fnType) {
+  ImmutableList<TemplateType> keys =
+      fnType.getTemplateTypeMap().getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
-    // Try to infer the template types
-    Map<TemplateType, JSType> inferred =
-        inferTemplateTypesFromParameters(fnType, n);
+  // Try to infer the template types.
+  Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);
 
+  // Only proceed if at least one template key gets a concrete (non-UNKNOWN) inference.
+  boolean madeRealInference = false;
+  for (TemplateType key : keys) {
+    JSType replacement = inferred.get(key);
+    if (replacement != null && !replacement.isUnknownType()) {
+      madeRealInference = true;
+      break;
+    }
+  }
+  if (!madeRealInference) {
+    return false;
+  }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+  // Replace all template types. If a replacement wasn't inferred, it would normally 
+  // be substituted with UNKNOWN—but if all remain UNKNOWN we don’t want to force a change.
+  TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
       .toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
