diff --git a/tmp/ef4c7c8f-b9c5-4c9c-9fda-892a0f1d5884_buggy.java b/tmp/19c78124-58ad-4b62-8c65-5de1799b618e_fixed.java
index 63641d0..2f61a2e 100644
--- a/tmp/ef4c7c8f-b9c5-4c9c-9fda-892a0f1d5884_buggy.java
+++ b/tmp/19c78124-58ad-4b62-8c65-5de1799b618e_fixed.java
@@ -1,33 +1,24 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
-  private boolean inferTemplatedTypesForCall(
-      Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+private boolean inferTemplatedTypesForCall(Node n, FunctionType fnType) {
+  ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap().getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
-    // Try to infer the template types
-    Map<TemplateType, JSType> inferred =
-        inferTemplateTypesFromParameters(fnType, n);
+  // Try to infer the template types.
+  Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);
 
-
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
-    Node callTarget = n.getFirstChild();
-
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+  // Replace all template types. If no actual replacement is made, then donâ€™t update
+  // the types on the call node.
+  TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);
+  FunctionType replacementFnType = fnType.visit(replacer).toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
+  if (!replacer.madeChanges) {
+    return false;
+  }
+
+  Node callTarget = n.getFirstChild();
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
-
-    return replacer.madeChanges;
+  return true;
 }
\ No newline at end of file
