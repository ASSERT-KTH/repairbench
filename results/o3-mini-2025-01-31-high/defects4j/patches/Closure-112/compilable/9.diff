diff --git a/tmp/bc0e03f5-41e3-440c-85d4-4c70e529c0e3_buggy.java b/tmp/a485075b-5b40-4ec5-90cf-a1696148f801_fixed.java
index 63641d0..b300f0f 100644
--- a/tmp/bc0e03f5-41e3-440c-85d4-4c70e529c0e3_buggy.java
+++ b/tmp/a485075b-5b40-4ec5-90cf-a1696148f801_fixed.java
@@ -1,33 +1,26 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
-  private boolean inferTemplatedTypesForCall(
-      Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+  private boolean inferTemplatedTypesForCall(Node n, FunctionType fnType) {
+    ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap().getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
-    // Try to infer the template types
-    Map<TemplateType, JSType> inferred =
-        inferTemplateTypesFromParameters(fnType, n);
+    // Only perform templated inference on function‚Äêliteral calls.
+    Node callTarget = n.getFirstChild();
+    if (!callTarget.isFunction()) {
+      return false;
+    }
 
+    // Try to infer the template types.
+    Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
-    Node callTarget = n.getFirstChild();
-
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+    TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);
+    FunctionType replacementFnType = fnType.visit(replacer).toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
