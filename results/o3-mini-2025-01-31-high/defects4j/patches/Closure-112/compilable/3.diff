diff --git a/tmp/7af0ba3a-3164-4180-b94f-ea7b9ac6c51a_buggy.java b/tmp/604bdabc-9d47-4ed5-9952-5127103fa312_fixed.java
index 63641d0..3bbe6b1 100644
--- a/tmp/7af0ba3a-3164-4180-b94f-ea7b9ac6c51a_buggy.java
+++ b/tmp/604bdabc-9d47-4ed5-9952-5127103fa312_fixed.java
@@ -1,33 +1,35 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
-  private boolean inferTemplatedTypesForCall(
-      Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+private boolean inferTemplatedTypesForCall(Node n, FunctionType fnType) {
+  ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap().getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
-    // Try to infer the template types
-    Map<TemplateType, JSType> inferred =
-        inferTemplateTypesFromParameters(fnType, n);
+  // Try to infer the template types from the call’s arguments.
+  Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);
 
-
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+  // Create a replacer that will substitute every template type, replacing any
+  // uninferred type with UNKNOWN.
+  TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);
   Node callTarget = n.getFirstChild();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+  FunctionType replacementFnType = fnType.visit(replacer).toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
+  // Set the type on the function being called (the callee).
   callTarget.setJSType(replacementFnType);
+  // Set the type of the call expression to be the function’s return type.
   n.setJSType(replacementFnType.getReturnType());
 
+  // Furthermore, propagate the inferred template types to the call’s argument nodes.
+  // This is necessary so that if an argument is a function literal whose “this”
+  // type (or other type annotations) depend on a template type, it will be
+  // properly specialized.
+  for (Node arg = callTarget.getNext(); arg != null; arg = arg.getNext()) {
+    JSType argType = arg.getJSType();
+    if (argType != null) {
+      arg.setJSType(argType.visit(replacer));
+    }
+  }
+
   return replacer.madeChanges;
 }
\ No newline at end of file
