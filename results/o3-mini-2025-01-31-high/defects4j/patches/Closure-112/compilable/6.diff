diff --git a/tmp/3b85a7a2-4408-409f-934f-725e2225cf79_buggy.java b/tmp/7d677b6f-598f-4ef8-bbcd-75256bf89c9d_fixed.java
index 63641d0..efda2bc 100644
--- a/tmp/3b85a7a2-4408-409f-934f-725e2225cf79_buggy.java
+++ b/tmp/7d677b6f-598f-4ef8-bbcd-75256bf89c9d_fixed.java
@@ -1,33 +1,35 @@
 /**
  * For functions with function(this: T, ...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
+ * actual type of T.
  */
-  private boolean inferTemplatedTypesForCall(
-      Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+private boolean inferTemplatedTypesForCall(Node n, FunctionType fnType) {
+  final ImmutableList<TemplateType> keys =
+      fnType.getTemplateTypeMap().getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
-    // Try to infer the template types
+  // Try to infer the template types.
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  TemplateTypeReplacer replacer =
+      new TemplateTypeReplacer(registry, inferred);
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
-    Node callTarget = n.getFirstChild();
-
+  // Process the function type with the inferred template replacements.
   FunctionType replacementFnType = fnType.visit(replacer)
       .toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
+  // Only update the call node and its callee if any substitutions actually occurred.
+  if (!replacer.madeChanges) {
+    return false;
+  }
+
+  Node callTarget = n.getFirstChild();
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
-    return replacer.madeChanges;
+  return true;
 }
\ No newline at end of file
