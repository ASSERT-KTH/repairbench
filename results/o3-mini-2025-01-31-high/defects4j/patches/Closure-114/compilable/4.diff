diff --git a/tmp/2984a373-5bb7-4394-ab95-04b1a5b949ab_buggy.java b/tmp/b74a78fe-0f9a-4093-87c1-7f404631e1ea_fixed.java
index c51c8b1..ec16f50 100644
--- a/tmp/2984a373-5bb7-4394-ab95-04b1a5b949ab_buggy.java
+++ b/tmp/b74a78fe-0f9a-4093-87c1-7f404631e1ea_fixed.java
@@ -1,31 +1,25 @@
 private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
   Node nameNode = n.getFirstChild();
   Node parent = n.getParent();
   NameInformation ns = createNameInformation(t, nameNode);
   if (ns != null) {
     if (parent.isFor() && !NodeUtil.isForIn(parent)) {
-          // Patch for assignments that appear in the init,
-          // condition or iteration part of a FOR loop.  Without
-          // this change, all 3 of those parts try to claim the for
-          // loop as their dependency scope.  The last assignment in
-          // those three fields wins, which can result in incorrect
-          // reference edges between referenced and assigned variables.
-          //
-          // TODO(user) revisit the dependency scope calculation
-          // logic.
+      // For a FOR loop, if the assignment is not in the initializer,
+      // record the dependency on the record node; otherwise on the name.
       if (parent.getFirstChild().getNext() != n) {
         recordDepScope(recordNode, ns);
       } else {
         recordDepScope(nameNode, ns);
       }
+    } else if (recordNode != null && recordNode.isCall() &&
+               recordNode.getFirstChild() == n) {
+      // When the assignment is immediately used as the callee of a call,
+      // its RHS (the function) is used by the call and should not be
+      // associated with the LHS. Record the dependency on the name node,
+      // so the assignment does not become part of the dependency of the call.
+      recordDepScope(nameNode, ns);
     } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
       recordDepScope(recordNode, ns);
     }
   }
 }
\ No newline at end of file
