diff --git a/tmp/e65c8f96-af7b-46b5-8114-a429f56e4bd0_buggy.java b/tmp/deb8e1a5-8faa-4c1f-9f65-76eb24354d69_fixed.java
index c51c8b1..a05673d 100644
--- a/tmp/e65c8f96-af7b-46b5-8114-a429f56e4bd0_buggy.java
+++ b/tmp/deb8e1a5-8faa-4c1f-9f65-76eb24354d69_fixed.java
@@ -1,31 +1,34 @@
 private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
   Node nameNode = n.getFirstChild();
   Node parent = n.getParent();
   NameInformation ns = createNameInformation(t, nameNode);
   if (ns != null) {
     if (parent.isFor() && !NodeUtil.isForIn(parent)) {
       // Patch for assignments that appear in the init,
       // condition or iteration part of a FOR loop.  Without
       // this change, all 3 of those parts try to claim the for
       // loop as their dependency scope.  The last assignment in
       // those three fields wins, which can result in incorrect
       // reference edges between referenced and assigned variables.
       //
-          // TODO(user) revisit the dependency scope calculation
-          // logic.
+      // TODO(user) revisit the dependency scope calculation logic.
       if (parent.getFirstChild().getNext() != n) {
         recordDepScope(recordNode, ns);
       } else {
         recordDepScope(nameNode, ns);
       }
     } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
+      // If the assignment is directly used as the callee of a call
+      // (for example, in (fun = function(){ x; })(); ), the right-hand
+      // side (i.e. the function literal) is actually the caller. In such cases,
+      // we want to record dependency on the function literal rather than on the
+      // assignment node so that any naming attached to the lhs is not propagated.
+      if (parent != null && parent.isCall() && parent.getFirstChild() == n) {
+        recordDepScope(n.getLastChild(), ns);
+      } else {
+        // In all other cases, record dependency on the provided record node.
         recordDepScope(recordNode, ns);
       }
     }
   }
+}
\ No newline at end of file
