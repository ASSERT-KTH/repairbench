diff --git a/tmp/ed0618af-bb7b-46e0-a251-4a42604d8916_buggy.java b/tmp/0647bcb1-eb71-41ba-9fe9-dce37d5a5264_fixed.java
index 19fd63e..1926df7 100644
--- a/tmp/ed0618af-bb7b-46e0-a251-4a42604d8916_buggy.java
+++ b/tmp/0647bcb1-eb71-41ba-9fe9-dce37d5a5264_fixed.java
@@ -1,24 +1,45 @@
 /**
  * @return Whether the node is a block with a single statement that is
  *     an expression.
  */
 private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
-        Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
-      }
-    }
-
+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {
+    Node child = n.getFirstChild();
+    // If the child is an EXPR_RESULT, unwrap it to get at the expression.
+    Node expr = child;
+    if (child.getType() == Token.EXPR_RESULT) {
+      expr = child.getFirstChild();
+    }
+    if (expr != null && NodeUtil.isExpressionNode(expr)) {
+      // If the expression is a call, and its callee is a property access,
+      // then we might be looking at an event handler.  For IE the behavior
+      // differs when the event handlerâ€™s return value is incorporated into 
+      // another expression (via &&).  To avoid the bug we only allow folding 
+      // if the enclosing if-condition is a literal (so no && will be used).
+      if (expr.getType() == Token.CALL) {
+        Node callee = expr.getFirstChild();
+        if (callee != null && callee.getType() == Token.GETPROP) {
+          Node prop = callee.getLastChild();
+          if (prop != null && prop.getType() == Token.STRING) {
+            String propName = prop.getString();
+            if (propName.startsWith("on") && propName.length() > 2 &&
+                Character.isLowerCase(propName.charAt(2))) {
+              Node parent = n.getParent();
+              if (parent != null && parent.getType() == Token.IF) {
+                Node cond = parent.getFirstChild();
+                // When the condition is not a literal, folding would create a &&
+                // expression, which might expose the IE bug. In that case, do not
+                // fold the block.
+                if (cond.getType() != Token.TRUE && cond.getType() != Token.FALSE) {
+                  return false;
+                }
+              }
+            }
+          }
+        }
+      }
+      return true;
+    }
+  }
   return false;
 }
\ No newline at end of file
