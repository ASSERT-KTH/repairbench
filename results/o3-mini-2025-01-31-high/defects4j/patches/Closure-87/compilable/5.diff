diff --git a/tmp/858198f7-e747-4e60-b77d-98e54b497085_buggy.java b/tmp/2d4c819c-5a5c-450f-ae0d-50acfb49db33_fixed.java
index 19fd63e..f58ef9a 100644
--- a/tmp/858198f7-e747-4e60-b77d-98e54b497085_buggy.java
+++ b/tmp/2d4c819c-5a5c-450f-ae0d-50acfb49db33_fixed.java
@@ -1,24 +1,34 @@
-  /**
-   * @return Whether the node is a block with a single statement that is
-   *     an expression.
-   */
 private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
-        Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+  // Only blocks with one child can be folded.
+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {
+    Node stmt = n.getFirstChild();
+    // If the block’s child is an EXPR_RESULT, “unwrap” it.
+    if (stmt.getType() == Token.EXPR_RESULT) {
+      Node expr = stmt.getFirstChild();
+      // If the expression is a call, we must check further.
+      if (expr != null && expr.getType() == Token.CALL) {
+        Node callee = expr.getFirstChild();
+        // Only method calls written in the dot (GETPROP) style are safe.
+        if (callee == null || callee.getType() != Token.GETPROP) {
+          return false;
+        }
+        Node prop = callee.getLastChild();
+        // For calls like f.onchange(), the IE bug prevents us from folding
+        // if the call’s return value would be used (e.g. in an && expression).
+        // However, if the block is the then–branch of an if whose condition 
+        // is a literal true, the value isn’t used, so folding is allowed.
+        if (prop != null && prop.getString() != null && prop.getString().startsWith("on")) {
+          Node parent = n.getParent();
+          if (parent == null ||
+              parent.getType() != Token.IF ||
+              !NodeUtil.isLiteralValue(parent.getFirstChild(), true)) {
+            return false;
+          }
+        }
+      }
+      return NodeUtil.isExpressionNode(expr);
     }
+    return NodeUtil.isExpressionNode(stmt);
   }
-
   return false;
 }
\ No newline at end of file
