diff --git a/tmp/7c121e55-d757-4b99-aa5d-17f7cce5cbbe_buggy.java b/tmp/4c34093d-22d3-413c-a274-a448f2824d04_fixed.java
index 19fd63e..e9e2ad0 100644
--- a/tmp/7c121e55-d757-4b99-aa5d-17f7cce5cbbe_buggy.java
+++ b/tmp/4c34093d-22d3-413c-a274-a448f2824d04_fixed.java
@@ -1,24 +1,28 @@
-  /**
-   * @return Whether the node is a block with a single statement that is
-   *     an expression.
-   */
 private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
-        Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {
+    Node stmt = n.getFirstChild();
+    // If the single statement is an expression statement, check its inner expression.
+    if (stmt.getType() == Token.EXPR_RESULT) {
+      Node expr = stmt.getFirstChild();
+      // If it is a call expression, check whether it is a call on an "onXYZ" property.
+      if (expr != null && expr.getType() == Token.CALL) {
+        Node callee = expr.getFirstChild();
+        if (callee != null && callee.getType() == Token.GETPROP) {
+          // Only non-computed property accesses are represented by GETPROP.
+          Node prop = callee.getLastChild();
+          if (prop != null && prop.getType() == Token.STRING) {
+            String propName = prop.getString();
+            // Do not allow folding if the call is of the form "obj.on...()"
+            // since IE treats event handler calls differently when their return
+            // value is used.
+            if (propName.startsWith("on")) {
+              return false;
+            }
+          }
+        }
+      }
     }
+    return NodeUtil.isExpressionNode(stmt);
   }
-
   return false;
 }
\ No newline at end of file
