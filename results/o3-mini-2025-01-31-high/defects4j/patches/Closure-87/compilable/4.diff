diff --git a/tmp/d0bbf78d-fdfe-42da-adb0-7ac122a2bf5e_buggy.java b/tmp/5ba7fb96-68dc-4a4d-9a4f-d9358f91e3c6_fixed.java
index 19fd63e..806a33d 100644
--- a/tmp/d0bbf78d-fdfe-42da-adb0-7ac122a2bf5e_buggy.java
+++ b/tmp/5ba7fb96-68dc-4a4d-9a4f-d9358f91e3c6_fixed.java
@@ -1,24 +1,46 @@
-  /**
-   * @return Whether the node is a block with a single statement that is
-   *     an expression.
-   */
 private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
-        Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {
+    Node child = n.getFirstChild();
+    if (!NodeUtil.isExpressionNode(child)) {
+      return false;
+    }
 
-          return NodeUtil.isExpressionNode(maybeExpr);
+    // If the only statement is an expression result, check for calls.
+    if (child.getType() == Token.EXPR_RESULT) {
+      Node expr = child.getFirstChild();
+      if (expr != null && expr.getType() == Token.CALL) {
+        Node callee = expr.getFirstChild();
+        if (callee != null) {
+          // Only allow folding if the call is made through a property-access.
+          if (callee.getType() == Token.GETPROP) {
+            Node prop = callee.getLastChild();
+            if (prop != null && prop.getType() == Token.STRING) {
+              String propName = prop.getString();
+              // If this is a call to an "on..." method (an event handler)
+              // then we only want to fold it when the surrounding IF
+              // has a literal condition (so that its return value isn’t used).
+              if (propName.length() > 2 && propName.startsWith("on")) {
+                Node parent = n.getParent();
+                if (parent != null && parent.getType() == Token.IF) {
+                  Node cond = parent.getFirstChild();
+                  if (cond != null) {
+                    int condType = cond.getType();
+                    if (condType == Token.TRUE || condType == Token.FALSE || condType == Token.NUMBER) {
+                      return true;
                     }
                   }
-
+                }
+                return false;
+              }
+            }
+            return true;
+          }
+          // Do not fold if the call isn’t via a property (e.g. computed property access)
+          return false;
+        }
+      }
+    }
+    return true;
+  }
   return false;
 }
\ No newline at end of file
