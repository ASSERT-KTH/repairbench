diff --git a/tmp/7f4b85de-07ce-42c5-96f6-23b2d1b74ab1_buggy.java b/tmp/5841b2eb-e519-4ddf-be2a-e13a11ceb418_fixed.java
index 19fd63e..7e28ec5 100644
--- a/tmp/7f4b85de-07ce-42c5-96f6-23b2d1b74ab1_buggy.java
+++ b/tmp/5841b2eb-e519-4ddf-be2a-e13a11ceb418_fixed.java
@@ -1,24 +1,45 @@
-  /**
-   * @return Whether the node is a block with a single statement that is
-   *     an expression.
-   */
 private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
-        Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
-      }
-    }
-
+  // Only blocks with exactly one child are of interest.
+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {
+    Node stmt = n.getFirstChild();
+    // We expect a block to contain an expression statement.
+    if (stmt.getType() == Token.EXPR_RESULT) {
+      Node expr = stmt.getFirstChild();
+      // If the single expression is a call, then we want to be extra careful.
+      if (expr != null && expr.getType() == Token.CALL) {
+        Node callee = expr.getFirstChild();
+        if (callee != null) {
+          // Only simple property (dot) calls are safe to inline.
+          if (callee.getType() != Token.GETPROP) {
+            // For example, f['x']() is not safe.
+            return false;
+          }
+          // Get the property name.
+          Node prop = callee.getLastChild();
+          if (prop != null && prop.getType() == Token.STRING) {
+            String propName = prop.getString();
+            // IE bug: methods with an implicit 'this' parameter behave differently
+            // if their return value is used. We want to avoid folding a block that
+            // consists of a call like "f.onchange()": unless the if‐condition is a literal.
+            if (propName.startsWith("on")) {
+              Node parent = n.getParent();
+              if (parent != null && parent.getType() == Token.IF) {
+                Node cond = parent.getFirstChild();
+                // Only when the condition is a literal (true or false) is it safe to fold.
+                if (cond != null && (cond.isTrue() || cond.isFalse())) {
+                  return true;
+                }
+              }
+              return false;
+            }
+          }
+        }
+      }
+      // For other kinds of expression statements, we can simply ask NodeUtil.
+      return NodeUtil.isExpressionNode(stmt);
+    }
+    // If the only child isn’t an EXPR_RESULT, fall back on the generic test.
+    return NodeUtil.isExpressionNode(stmt);
+  }
   return false;
 }
\ No newline at end of file
