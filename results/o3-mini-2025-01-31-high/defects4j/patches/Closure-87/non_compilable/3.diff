diff --git a/tmp/db0c8315-7262-4ffb-af92-ddef0867efad_buggy.java b/tmp/9b640037-25eb-4036-8d84-e6db7cf67863_fixed.java
index 19fd63e..cf7f4e3 100644
--- a/tmp/db0c8315-7262-4ffb-af92-ddef0867efad_buggy.java
+++ b/tmp/9b640037-25eb-4036-8d84-e6db7cf67863_fixed.java
@@ -1,24 +1,37 @@
-  /**
-   * @return Whether the node is a block with a single statement that is
-   *     an expression.
-   */
 private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
-        Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
-      }
-    }
-
+  // Must be a block with exactly one statement.
+  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {
     return false;
   }
+  Node stmt = n.getFirstChild();
+  // In a normal JS AST a lone expression in a block is wrapped in an EXPR_RESULT.
+  // Unwrap that to get the underlying expression.
+  if (stmt.getType() == Token.EXPR_RESULT && stmt.hasOneChild()) {
+    stmt = stmt.getFirstChild();
+  }
+  // Only expression nodes are foldable.
+  if (!NodeUtil.isExpressionNode(stmt)) {
+    return false;
+  }
+  // If the expression is a function call, be extra careful.
+  // The IE bug [issue 291] occurs when a method-call with an implicit "this"
+  // is folded into an expression (via the && operator) when the method name
+  // starts with "on".
+  if (stmt.getType() == Token.CALL) {
+    Node callee = stmt.getFirstChild();
+    // Only allow a simple property access (i.e. f.foo() not f["foo"]())
+    if (callee == null || callee.getType() != Token.GETPROP || callee.isComputed()) {
+      return false;
+    }
+    Node propNode = callee.getLastChild();
+    if (propNode != null && propNode.getType() == Token.STRING) {
+      String propName = propNode.getString();
+      // If the property name starts with "on", then folding into an alternate syntax
+      // (which would change the implicit "this" value) is unsafe in IE.
+      if (propName.length() > 2 && propName.startsWith("on")) {
+        return false;
+      }
+    }
+  }
+  return true;
+}
\ No newline at end of file
