diff --git a/tmp/3586633f-0ca7-40ec-8b04-f7a3ae7122fc_buggy.java b/tmp/988ad2fe-14cd-4ca2-9b71-1007fe63984c_fixed.java
index 19fd63e..b00fa89 100644
--- a/tmp/3586633f-0ca7-40ec-8b04-f7a3ae7122fc_buggy.java
+++ b/tmp/988ad2fe-14cd-4ca2-9b71-1007fe63984c_fixed.java
@@ -1,24 +1,42 @@
 /**
  * @return Whether the node is a block with a single statement that is
  *     an expression.
  */
 private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
-        Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
-      }
-    }
-
+  // Must be a BLOCK with exactly one child.
+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {
+    Node child = n.getFirstChild();
+    // Only an expression statement (EXPR_RESULT) is eligible.
+    if (child.getType() != Token.EXPR_RESULT) {
+      return false;
+    }
+    // When an IF‐statement’s then–block is being replaced with an expression,
+    // IE can behave differently if the expression’s return value is used.
+    // In particular, if the expression is a call on a property (an implicit “this” call)
+    // and that property is "onchange", then we do not want to “fold” the block
+    // into a larger expression (for example, as the right‐hand side of “&&”).
+    //
+    // However, if the IF’s condition is a literal true, then the transformation
+    // does not end up “using” the call’s return value, so it is safe.
+    Node parent = n.getParent();
+    if (parent != null && parent.getType() == Token.IF) {
+      Node condition = parent.getFirstChild();
+      if (!NodeUtil.isBooleanTrue(condition)) {
+        Node expr = child.getFirstChild();
+        if (expr != null && expr.getType() == Token.CALL) {
+          Node callee = expr.getFirstChild();
+          // Only allow a simple method call via dot access.
+          if (callee == null || callee.getType() != Token.GETPROP || callee.isComputed()) {
+            return false;
+          }
+          String propName = callee.getLastChild().getString();
+          if ("onchange".equals(propName)) {
+            return false;
+          }
+        }
+      }
+    }
+    return true;
+  }
   return false;
 }
\ No newline at end of file
