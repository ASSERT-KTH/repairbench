diff --git a/tmp/45803cda-474e-42c6-825f-e2b2c82f94c0_buggy.java b/tmp/0a17a61f-8a52-4d9f-b0e0-b98bed926cd3_fixed.java
index f8caf72..9051dd3 100644
--- a/tmp/45803cda-474e-42c6-825f-e2b2c82f94c0_buggy.java
+++ b/tmp/0a17a61f-8a52-4d9f-b0e0-b98bed926cd3_fixed.java
@@ -1,65 +1,30 @@
-    /**
-     * Gets the millisecond offset to subtract from local time to get UTC time.
-     * This offset can be used to undo adding the offset obtained by getOffset.
-     *
-     * <pre>
-     * millisLocal == millisUTC   + getOffset(millisUTC)
-     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
-     * </pre>
-     *
-     * NOTE: After calculating millisLocal, some error may be introduced. At
-     * offset transitions (due to DST or other historical changes), ranges of
-     * local times may map to different UTC times.
-     * <p>
-     * This method will return an offset suitable for calculating an instant
-     * after any DST gap. For example, consider a zone with a cutover
-     * from 01:00 to 01:59:<br />
-     * Input: 00:00  Output: 00:00<br />
-     * Input: 00:30  Output: 00:30<br />
-     * Input: 01:00  Output: 02:00<br />
-     * Input: 01:30  Output: 02:30<br />
-     * Input: 02:00  Output: 02:00<br />
-     * Input: 02:30  Output: 02:30<br />
-     * <p>
-     * During a DST overlap (where the local time is ambiguous) this method will return
-     * the earlier instant. The combination of these two rules is to always favour
-     * daylight (summer) time over standard (winter) time.
-     * <p>
-     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
-     * Prior to v1.5, the DST gap behaviour was also not defined.
-     *
-     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
-     * @return the millisecond offset to subtract from local time to get UTC time
-     */
 public int getOffsetFromLocal(long instantLocal) {
     // get the offset at instantLocal (first estimate)
     final int offsetLocal = getOffset(instantLocal);
     // adjust instantLocal using the estimate and recalc the offset
     final long instantAdjusted = instantLocal - offsetLocal;
     final int offsetAdjusted = getOffset(instantAdjusted);
     // if the offsets differ, we must be near a DST boundary
     if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
+        // For a DST gap the initial offset is too high.
+        // When (offsetLocal - offsetAdjusted) is negative the local instant is in a gap.
         long nextLocal = nextTransition(instantAdjusted);
         long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
         if (nextLocal != nextAdjusted) {
             return offsetLocal;
         }
-            }
-        } else if (offsetLocal > 0) {
+    } else {
+        // During a DST overlap the two offsets are equal.
+        // In this case we need to check the previous transition.
         long prev = previousTransition(instantAdjusted);
         if (prev < instantAdjusted) {
             int offsetPrev = getOffset(prev);
-                int diff = offsetPrev - offsetLocal;
+            // In an overlap, the earlier (daylight) offset is greater.
+            int diff = offsetPrev - offsetAdjusted;
             if (instantAdjusted - prev <= diff) {
                 return offsetPrev;
             }
         }
     }
     return offsetAdjusted;
 }
\ No newline at end of file
