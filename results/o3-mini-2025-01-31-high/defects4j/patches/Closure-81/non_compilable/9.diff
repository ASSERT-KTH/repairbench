diff --git a/tmp/9fe0b88c-58fe-4156-86ec-65a7d348a529_buggy.java b/tmp/847a7bc0-4e70-45e4-921d-cdaecd59663c_fixed.java
index 6e05e4b..ed595b0 100644
--- a/tmp/9fe0b88c-58fe-4156-86ec-65a7d348a529_buggy.java
+++ b/tmp/847a7bc0-4e70-45e4-921d-cdaecd59663c_fixed.java
@@ -1,51 +1,53 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
   Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
+  boolean isUnnamedFunction = false;
   if (name == null) {
+    // If this function is a statement rather than an expression,
+    // then having no name is illegal.
+    if (!functionNode.isFunctionExpression()) {
+      throw new IllegalArgumentException("unnamed function statement");
+    }
     name = new Name();
     name.setIdentifier("");
     isUnnamedFunction = true;
   }
   Node node = newNode(Token.FUNCTION);
   Node newName = transform(name);
   if (isUnnamedFunction) {
     // Old Rhino tagged the empty name node with the line number of the
     // declaration.
     newName.setLineno(functionNode.getLineno());
     // TODO(bowdidge) Mark line number of paren correctly.
     // Same problem as below - the left paren might not be on the
     // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
+    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
     newName.setCharno(position2charno(lpColumn));
   }
 
   node.addChildToBack(newName);
   Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
+  // The left paren is a bit complicated because it isn’t represented by an
+  // AstNode; so nothing directly records its actual line number.
+  // We know the paren has to appear on the same line as the function name
+  // (or else a semicolon will be inserted).  If there’s no function name,
+  // assume the paren was on the same line as the function.
   // TODO(bowdidge): Mark line number of paren correctly.
   Name fnName = functionNode.getFunctionName();
   if (fnName != null) {
     lp.setLineno(fnName.getLineno());
   } else {
     lp.setLineno(functionNode.getLineno());
   }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
-
+  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
   lp.setCharno(position2charno(lparenCharno));
   for (AstNode param : functionNode.getParams()) {
     lp.addChildToBack(transform(param));
   }
   node.addChildToBack(lp);
 
   Node bodyNode = transform(functionNode.getBody());
   parseDirectives(bodyNode);
   node.addChildToBack(bodyNode);
   return node;
 }
\ No newline at end of file
