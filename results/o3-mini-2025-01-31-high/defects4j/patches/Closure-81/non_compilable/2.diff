diff --git a/tmp/8851ce42-dd60-4e63-8a14-ea10ad1c24d7_buggy.java b/tmp/b809f61d-3521-4f08-ae64-a7f69bfea182_fixed.java
index 6e05e4b..ac4ee60 100644
--- a/tmp/8851ce42-dd60-4e63-8a14-ea10ad1c24d7_buggy.java
+++ b/tmp/b809f61d-3521-4f08-ae64-a7f69bfea182_fixed.java
@@ -1,51 +1,53 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
+  // Get the function name, if any.
   Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
+  boolean isUnnamedFunction = false;
   if (name == null) {
+    // When the function has no name, create an empty name.
     name = new Name();
     name.setIdentifier("");
     isUnnamedFunction = true;
   }
+
+  // Rule: an unnamed function is only allowed as an expression.
+  // If it appears as a statement, report a parse error.
+  if (isUnnamedFunction && !functionNode.isFunctionExpression()) {
+    error("unnamed function statement");
+  }
+
   Node node = newNode(Token.FUNCTION);
+  // Use the (possibly empty) name node for the function.
   Node newName = transform(name);
   if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
+    // For an anonymous function declaration, tag the empty name node
+    // with the line number of the function declaration.
     newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
+    // Compute the character position based on function's absolute position
+    // plus the left-paren offset.
+    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
     newName.setCharno(position2charno(lpColumn));
   }
-
   node.addChildToBack(newName);
+
   Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
-      Name fnName = functionNode.getFunctionName();
-      if (fnName != null) {
-        lp.setLineno(fnName.getLineno());
+  // For the left parenthesis, if we have a nonempty name then assume its
+  // line number is the one where the paren appears;
+  // otherwise, use the function's line number.
+  if (!name.getIdentifier().isEmpty()) {
+    lp.setLineno(name.getLineno());
   } else {
     lp.setLineno(functionNode.getLineno());
   }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
-
+  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
   lp.setCharno(position2charno(lparenCharno));
   for (AstNode param : functionNode.getParams()) {
     lp.addChildToBack(transform(param));
   }
   node.addChildToBack(lp);
 
   Node bodyNode = transform(functionNode.getBody());
   parseDirectives(bodyNode);
   node.addChildToBack(bodyNode);
   return node;
 }
\ No newline at end of file
