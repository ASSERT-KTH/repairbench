diff --git a/tmp/e6b4c8a0-4797-4ef7-b955-4e2f3334b6d4_buggy.java b/tmp/7d1386b0-6f13-478c-a907-ef25971374cf_fixed.java
index 6e05e4b..bd1fe56 100644
--- a/tmp/e6b4c8a0-4797-4ef7-b955-4e2f3334b6d4_buggy.java
+++ b/tmp/7d1386b0-6f13-478c-a907-ef25971374cf_fixed.java
@@ -1,51 +1,52 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
   Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
+  boolean isUnnamedFunction = false;
   if (name == null) {
     name = new Name();
     name.setIdentifier("");
     isUnnamedFunction = true;
   }
+  
+  // If this is an unnamed function and it is a statement (not an expression),
+  // then report a parse error.
+  // (For function expressions, unnamed functions are allowed.)
+  if (isUnnamedFunction && !functionNode.isFunctionExpression()) {
+    throw new IllegalArgumentException("unnamed function statement");
+  }
+  
   Node node = newNode(Token.FUNCTION);
   Node newName = transform(name);
   if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
+    // Old Rhino tagged the empty name node with the line number of the declaration.
     newName.setLineno(functionNode.getLineno());
     // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
+    // Same problem as below â€“ the left paren might not be on the same line as the function keyword.
+    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
     newName.setCharno(position2charno(lpColumn));
   }
-
   node.addChildToBack(newName);
+  
   Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
+  // The left paren is complicated because it's not represented by an AstNode, so there is no 
+  // actual node for its line number. We assume the paren appears on the same line as the function name.
+  // If there is no function name, we assume the paren was on the same line as the function.
   Name fnName = functionNode.getFunctionName();
   if (fnName != null) {
     lp.setLineno(fnName.getLineno());
   } else {
     lp.setLineno(functionNode.getLineno());
   }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
-
+  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
   lp.setCharno(position2charno(lparenCharno));
+  
   for (AstNode param : functionNode.getParams()) {
     lp.addChildToBack(transform(param));
   }
   node.addChildToBack(lp);
   
   Node bodyNode = transform(functionNode.getBody());
   parseDirectives(bodyNode);
   node.addChildToBack(bodyNode);
   return node;
 }
\ No newline at end of file
