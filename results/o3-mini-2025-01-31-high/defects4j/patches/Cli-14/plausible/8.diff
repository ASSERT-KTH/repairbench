diff --git a/tmp/1e77ca5c-b27b-4e3b-88a8-5c187af6a57c_buggy.java b/tmp/f81e3d2e-0a0b-41f2-9b55-fc2bf1b4aaa5_fixed.java
index 71189c3..92d7060 100644
--- a/tmp/1e77ca5c-b27b-4e3b-88a8-5c187af6a57c_buggy.java
+++ b/tmp/f81e3d2e-0a0b-41f2-9b55-fc2bf1b4aaa5_fixed.java
@@ -1,46 +1,38 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
-        // number of options found
     int present = 0;
-
-        // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
-                option.validate(commandLine);
-            }
-
-            // if the child option is present then validate it
+        // If the option is present then validate it once.
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
-
                 break;
             }
-
+            option.validate(commandLine);
+        }
+        // If the option isn't present but is required (or is a Group) then validate it
+        // to trigger an error (for instance, missing required option).
+        else if (option.isRequired() || option instanceof Group) {
             option.validate(commandLine);
         }
     }
 
-        // too many options
     if (unexpected != null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
-        // too few option
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
-        // validate each anonymous argument
+    // Validate each anonymous argument.
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
         option.validate(commandLine);
     }
 }
\ No newline at end of file
