diff --git a/tmp/4296651f-98a1-4684-8e5d-af221fbe1fc8_buggy.java b/tmp/0606b0e7-7ce8-47d5-8485-5e1893d96160_fixed.java
index 71189c3..bc2fbdc 100644
--- a/tmp/4296651f-98a1-4684-8e5d-af221fbe1fc8_buggy.java
+++ b/tmp/0606b0e7-7ce8-47d5-8485-5e1893d96160_fixed.java
@@ -1,46 +1,44 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
-                option.validate(commandLine);
-            }
-
-            // if the child option is present then validate it
+        // If the option is present, validate it (once) and count it.
         if (commandLine.hasOption(option)) {
-                if (++present > maximum) {
+            present++;
+            if (present > maximum) {
                 unexpected = option;
-
                 break;
             }
-
+            option.validate(commandLine);
+        }
+        // If the option wasnâ€™t provided but is required (or a Group),
+        // still validate it so that proper missing-option errors are thrown.
+        else if (option.isRequired() || option instanceof Group) {
             option.validate(commandLine);
         }
     }
 
     // too many options
     if (unexpected != null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
-        // too few option
+    // too few options
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
         option.validate(commandLine);
     }
 }
\ No newline at end of file
