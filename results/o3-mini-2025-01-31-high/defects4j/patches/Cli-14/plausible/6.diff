diff --git a/tmp/14ac3b53-6d91-4d23-8e76-bc98f2ddf62b_buggy.java b/tmp/46e5d775-846b-4c6b-902b-0804e84a1688_fixed.java
index 71189c3..a8edeb8 100644
--- a/tmp/14ac3b53-6d91-4d23-8e76-bc98f2ddf62b_buggy.java
+++ b/tmp/46e5d775-846b-4c6b-902b-0804e84a1688_fixed.java
@@ -1,46 +1,44 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
-                option.validate(commandLine);
-            }
-
-            // if the child option is present then validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
-
                 break;
             }
-
+            // Validate the provided option only once.
+            option.validate(commandLine);
+        } else {
+            // If the option is not present but is required or a group option then trigger validation,
+            // which typically will throw an exception signalling a missing option.
+            if (option.isRequired() || option instanceof Group) {
                 option.validate(commandLine);
             }
         }
+    }
 
-        // too many options
+    // Too many options?
     if (unexpected != null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
-        // too few option
+    // Too few options?
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
-        // validate each anonymous argument
+    // Validate each anonymous argument.
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
         option.validate(commandLine);
     }
 }
\ No newline at end of file
