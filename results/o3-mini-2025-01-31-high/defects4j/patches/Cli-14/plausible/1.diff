diff --git a/tmp/d260dc26-1408-49d4-8da5-a23d9cf0995e_buggy.java b/tmp/f1c2025a-5f53-4a31-9447-b3890738e47b_fixed.java
index 71189c3..f3a3e7c 100644
--- a/tmp/d260dc26-1408-49d4-8da5-a23d9cf0995e_buggy.java
+++ b/tmp/f1c2025a-5f53-4a31-9447-b3890738e47b_fixed.java
@@ -1,46 +1,42 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
-                option.validate(commandLine);
-            }
-
-            // if the child option is present then validate it
+        // if the option is present, count it and validate it once
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
-
                 break;
             }
-
+            option.validate(commandLine);
+        }
+        // if it is not present yet it is required or a group, still validate it to catch missing option errors
+        else if (option.isRequired() || option instanceof Group) {
             option.validate(commandLine);
         }
     }
 
     // too many options
     if (unexpected != null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
-        // too few option
+    // too few options
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
         option.validate(commandLine);
     }
 }
\ No newline at end of file
