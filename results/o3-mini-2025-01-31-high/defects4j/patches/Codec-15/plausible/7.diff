diff --git a/tmp/53ba5cd4-2e92-42a5-9453-1fb702b3bc6d_buggy.java b/tmp/25905bfb-2aac-439c-9bfe-604a0445567a_fixed.java
index b529d33..b1602a1 100644
--- a/tmp/53ba5cd4-2e92-42a5-9453-1fb702b3bc6d_buggy.java
+++ b/tmp/25905bfb-2aac-439c-9bfe-604a0445567a_fixed.java
@@ -1,29 +1,17 @@
-    /**
-     * Used internally by the Soundex algorithm.
-     *
-     * Consonants from the same code group separated by W or H are treated as one.
-     *
-     * @param str
-     *                  the cleaned working string to encode (in upper case).
-     * @param index
-     *                  the character position to encode
-     * @return Mapping code for a particular character
-     * @throws IllegalArgumentException
-     *                  if the character is not mapped
-     */
 private char getMappingCode(final String str, final int index) {
-        // map() throws IllegalArgumentException
     final char mappedChar = this.map(str.charAt(index));
-        // HW rule check
     if (index > 1 && mappedChar != '0') {
-            final char hwChar = str.charAt(index - 1);
-            if ('H' == hwChar || 'W' == hwChar) {
-                final char preHWChar = str.charAt(index - 2);
-                final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
+        int j = index - 1;
+        // Skip over any intervening H or W characters.
+        while (j >= 0 && (str.charAt(j) == 'H' || str.charAt(j) == 'W')) {
+            j--;
+        }
+        if (j >= 0) {
+            final char previousMapping = this.map(str.charAt(j));
+            if (previousMapping == mappedChar) {
                 return 0;
             }
         }
     }
     return mappedChar;
 }
\ No newline at end of file
