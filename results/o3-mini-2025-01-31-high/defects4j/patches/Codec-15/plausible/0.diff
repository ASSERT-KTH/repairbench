diff --git a/tmp/16cb9d3a-8947-44b3-a6e8-48fae1191cba_buggy.java b/tmp/8bff6200-7307-4e48-921e-2b5844285181_fixed.java
index b529d33..51b95b0 100644
--- a/tmp/16cb9d3a-8947-44b3-a6e8-48fae1191cba_buggy.java
+++ b/tmp/8bff6200-7307-4e48-921e-2b5844285181_fixed.java
@@ -1,29 +1,15 @@
-    /**
-     * Used internally by the Soundex algorithm.
-     *
-     * Consonants from the same code group separated by W or H are treated as one.
-     *
-     * @param str
-     *                  the cleaned working string to encode (in upper case).
-     * @param index
-     *                  the character position to encode
-     * @return Mapping code for a particular character
-     * @throws IllegalArgumentException
-     *                  if the character is not mapped
-     */
 private char getMappingCode(final String str, final int index) {
-        // map() throws IllegalArgumentException
     final char mappedChar = this.map(str.charAt(index));
-        // HW rule check
-        if (index > 1 && mappedChar != '0') {
-            final char hwChar = str.charAt(index - 1);
-            if ('H' == hwChar || 'W' == hwChar) {
-                final char preHWChar = str.charAt(index - 2);
-                final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
+    if (mappedChar != '0') {
+        int i = index - 1;
+        // Skip any intervening H's or W's
+        while (i >= 0 && (str.charAt(i) == 'H' || str.charAt(i) == 'W')) {
+            i--;
+        }
+        // If the previous non-H/W character has the same mapping, drop this one.
+        if (i >= 0 && this.map(str.charAt(i)) == mappedChar) {
             return 0;
         }
     }
-        }
     return mappedChar;
 }
\ No newline at end of file
