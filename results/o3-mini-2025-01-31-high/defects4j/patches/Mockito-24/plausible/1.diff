diff --git a/tmp/0d4d5d51-ec19-4911-8878-2a118785ae7b_buggy.java b/tmp/35ba4cee-1b67-4bfb-b416-6fa212a948e9_fixed.java
index 47915ed..9508981 100644
--- a/tmp/0d4d5d51-ec19-4911-8878-2a118785ae7b_buggy.java
+++ b/tmp/35ba4cee-1b67-4bfb-b416-6fa212a948e9_fixed.java
@@ -1,22 +1,24 @@
-    /* (non-Javadoc)
-     * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)
-     */
 public Object answer(InvocationOnMock invocation) {
     if (methodsGuru.isToString(invocation.getMethod())) {
         Object mock = invocation.getMock();
         MockName name = mockUtil.getMockName(mock);
         if (name.isDefault()) {
-                return "Mock for " + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ", hashCode: " + mock.hashCode();
+            return "Mock for " + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() 
+                + ", hashCode: " + mock.hashCode();
         } else {
             return name.toString();
         }
     } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {
-            //see issue 184.
-            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
-            //Only for compareTo() method by the Comparable interface
+        Object other = invocation.getArguments()[0];
+        // if compared against itself, return 0
+        if (other == invocation.getMock()) {
+            return 0;
+        } else {
+            // otherwise, return any non-zero value (1 is chosen here)
             return 1;
         }
+    }
     
     Class<?> returnType = invocation.getMethod().getReturnType();
     return returnValueFor(returnType);
 }
\ No newline at end of file
