diff --git a/tmp/12de82cb-335a-4a70-95bf-3f0d7b337a72_buggy.java b/tmp/7c53b23c-d43b-4906-8db7-991d789dc428_fixed.java
index 3a790cb..074af3a 100644
--- a/tmp/12de82cb-335a-4a70-95bf-3f0d7b337a72_buggy.java
+++ b/tmp/7c53b23c-d43b-4906-8db7-991d789dc428_fixed.java
@@ -1,74 +1,79 @@
 private void inlineNonConstants(
     Var v, ReferenceCollection referenceInfo,
     boolean maybeModifiedArguments) {
   int refCount = referenceInfo.references.size();
   Reference declaration = referenceInfo.references.get(0);
   Reference init = referenceInfo.getInitializingReference();
   int firstRefAfterInit = (declaration == init) ? 2 : 3;
 
   if (refCount > 1 &&
       isImmutableAndWellDefinedVariable(v, referenceInfo)) {
-        // if the variable is referenced more than once, we can only
-        // inline it if it's immutable and never defined before referenced.
+    // When the variable is referenced more than once,
+    // we can only inline it if it is immutable and never defined before its use.
     Node value;
     if (init != null) {
       value = init.getAssignedValue();
     } else {
-          // Create a new node for variable that is never initialized.
+      // Create a new node for a variable that is never initialized.
       Node srcLocation = declaration.getNode();
       value = NodeUtil.newUndefinedNode(srcLocation);
     }
     Preconditions.checkNotNull(value);
     inlineWellDefinedVariable(v, value, referenceInfo.references);
     staleVars.add(v);
+
   } else if (refCount == firstRefAfterInit) {
-        // The variable likely only read once, try some more
-        // complex inlining heuristics.
-        Reference reference = referenceInfo.references.get(
-            firstRefAfterInit - 1);
+    // For variables with exactly one read, we originally tried a more aggressive (heuristic)
+    // inlining. However, this branch must only inline immutable, well‐defined variables.
+    // Otherwise (as in External Issue 1053) a variable like:
+    //   var x = u;
+    // where u is later modified, would be inlined unsafely.
+    if (isImmutableAndWellDefinedVariable(v, referenceInfo)) {
+      Reference reference = referenceInfo.references.get(firstRefAfterInit - 1);
       if (canInline(declaration, init, reference)) {
         inline(v, declaration, init, reference);
         staleVars.add(v);
       }
+    }
+    
   } else if (declaration != init && refCount == 2) {
     if (isValidDeclaration(declaration) && isValidInitialization(init)) {
-          // The only reference is the initialization, remove the assignment and
+      // When the only reference is the initialization, remove the assignment and
       // the variable declaration.
       Node value = init.getAssignedValue();
       Preconditions.checkNotNull(value);
       inlineWellDefinedVariable(v, value, referenceInfo.references);
       staleVars.add(v);
     }
   }
 
-      // If this variable was not inlined normally, check if we can
+  // If this variable was not inlined normally, then check if we can
   // inline an alias of it. (If the variable was inlined, then the
-      // reference data is out of sync. We're better off just waiting for
+  // reference information is out of sync. We're better off waiting for
   // the next pass.)
   if (!maybeModifiedArguments &&
       !staleVars.contains(v) &&
       referenceInfo.isWellDefined() &&
       referenceInfo.isAssignedOnceInLifetime()) {
-          // Inlining the variable based solely on well-defined and assigned
-          // once is *NOT* correct. We relax the correctness requirement if
-          // the variable is declared constant.
+    // Note: inlining based solely on being well‐defined and assigned
+    // only once is *NOT* correct in general. We relax the correctness requirement
+    // only if the variable is declared constant.
     List<Reference> refs = referenceInfo.references;
-        for (int i = 1 /* start from a read */; i < refs.size(); i++) {
+    for (int i = 1; i < refs.size(); i++) { // start from a read
       Node nameNode = refs.get(i).getNode();
       if (aliasCandidates.containsKey(nameNode)) {
         AliasCandidate candidate = aliasCandidates.get(nameNode);
         if (!staleVars.contains(candidate.alias) &&
             !isVarInlineForbidden(candidate.alias)) {
-              Reference aliasInit;
-              aliasInit = candidate.refInfo.getInitializingReference();
+          Reference aliasInit = candidate.refInfo.getInitializingReference();
           Node value = aliasInit.getAssignedValue();
           Preconditions.checkNotNull(value);
           inlineWellDefinedVariable(candidate.alias,
               value,
               candidate.refInfo.references);
           staleVars.add(candidate.alias);
         }
       }
     }
   }
 }
\ No newline at end of file
