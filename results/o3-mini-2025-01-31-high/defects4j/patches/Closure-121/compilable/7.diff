diff --git a/tmp/69a33715-f726-4b20-9264-af0a3d901aa1_buggy.java b/tmp/eedba6ac-d63c-4f83-a396-0e929ce9365d_fixed.java
index 3a790cb..3b03468 100644
--- a/tmp/69a33715-f726-4b20-9264-af0a3d901aa1_buggy.java
+++ b/tmp/eedba6ac-d63c-4f83-a396-0e929ce9365d_fixed.java
@@ -1,74 +1,78 @@
 private void inlineNonConstants(
     Var v, ReferenceCollection referenceInfo,
     boolean maybeModifiedArguments) {
   int refCount = referenceInfo.references.size();
   Reference declaration = referenceInfo.references.get(0);
   Reference init = referenceInfo.getInitializingReference();
   int firstRefAfterInit = (declaration == init) ? 2 : 3;
 
+  // Only inline variables with an initializer that is “immutable”
+  // so that re‐evaluating it later won’t change program behavior.
   if (refCount > 1 &&
       isImmutableAndWellDefinedVariable(v, referenceInfo)) {
-        // if the variable is referenced more than once, we can only
-        // inline it if it's immutable and never defined before referenced.
+    // If the variable is referenced more than once, we can only inline
+    // it if it's immutable and never redefined before each reference.
     Node value;
     if (init != null) {
       value = init.getAssignedValue();
     } else {
-          // Create a new node for variable that is never initialized.
       Node srcLocation = declaration.getNode();
       value = NodeUtil.newUndefinedNode(srcLocation);
     }
     Preconditions.checkNotNull(value);
     inlineWellDefinedVariable(v, value, referenceInfo.references);
     staleVars.add(v);
   } else if (refCount == firstRefAfterInit) {
-        // The variable likely only read once, try some more
-        // complex inlining heuristics.
-        Reference reference = referenceInfo.references.get(
-            firstRefAfterInit - 1);
-        if (canInline(declaration, init, reference)) {
+    // The variable is likely read only once; try more refined inlining.
+    Reference reference = referenceInfo.references.get(firstRefAfterInit - 1);
+    // Do not inline if the initializer is not a compile‐time constant.
+    if (init != null &&
+        NodeUtil.isImmutableValue(init.getAssignedValue()) &&
+        canInline(declaration, init, reference)) {
       inline(v, declaration, init, reference);
       staleVars.add(v);
     }
   } else if (declaration != init && refCount == 2) {
-        if (isValidDeclaration(declaration) && isValidInitialization(init)) {
-          // The only reference is the initialization, remove the assignment and
-          // the variable declaration.
+    // When the only reference is the initialization, we can remove
+    // the assignment and the variable declaration.
+    if (init != null &&
+        NodeUtil.isImmutableValue(init.getAssignedValue()) &&
+        isValidDeclaration(declaration) &&
+        isValidInitialization(init)) {
       Node value = init.getAssignedValue();
       Preconditions.checkNotNull(value);
       inlineWellDefinedVariable(v, value, referenceInfo.references);
       staleVars.add(v);
     }
   }
 
-      // If this variable was not inlined normally, check if we can
-      // inline an alias of it. (If the variable was inlined, then the
-      // reference data is out of sync. We're better off just waiting for
-      // the next pass.)
+  // If the variable was not inlined above, check if an alias can be inlined.
+  // (If the variable was inlined, its reference data has been disrupted,
+  // so we defer alias inlining until a later pass.)
   if (!maybeModifiedArguments &&
       !staleVars.contains(v) &&
       referenceInfo.isWellDefined() &&
       referenceInfo.isAssignedOnceInLifetime()) {
-          // Inlining the variable based solely on well-defined and assigned
-          // once is *NOT* correct. We relax the correctness requirement if
-          // the variable is declared constant.
+    // Inlining based solely on being well defined and assigned once is
+    // not safe unless the initializer is immutable.
     List<Reference> refs = referenceInfo.references;
-        for (int i = 1 /* start from a read */; i < refs.size(); i++) {
+    for (int i = 1; i < refs.size(); i++) {
       Node nameNode = refs.get(i).getNode();
       if (aliasCandidates.containsKey(nameNode)) {
         AliasCandidate candidate = aliasCandidates.get(nameNode);
         if (!staleVars.contains(candidate.alias) &&
             !isVarInlineForbidden(candidate.alias)) {
-              Reference aliasInit;
-              aliasInit = candidate.refInfo.getInitializingReference();
+          Reference aliasInit = candidate.refInfo.getInitializingReference();
           Node value = aliasInit.getAssignedValue();
           Preconditions.checkNotNull(value);
+          if (NodeUtil.isImmutableValue(value)) {
             inlineWellDefinedVariable(candidate.alias,
                 value,
                 candidate.refInfo.references);
             staleVars.add(candidate.alias);
           }
         }
       }
     }
   }
+}
\ No newline at end of file
