diff --git a/tmp/58f925cf-8cc9-496e-b094-fb7f11122246_buggy.java b/tmp/b7b157e0-1c4e-4d19-a48f-3dbe42eb298f_fixed.java
index 3a790cb..0c62338 100644
--- a/tmp/58f925cf-8cc9-496e-b094-fb7f11122246_buggy.java
+++ b/tmp/b7b157e0-1c4e-4d19-a48f-3dbe42eb298f_fixed.java
@@ -1,74 +1,87 @@
 private void inlineNonConstants(
     Var v, ReferenceCollection referenceInfo,
     boolean maybeModifiedArguments) {
   int refCount = referenceInfo.references.size();
   Reference declaration = referenceInfo.references.get(0);
   Reference init = referenceInfo.getInitializingReference();
   int firstRefAfterInit = (declaration == init) ? 2 : 3;
 
   if (refCount > 1 &&
       isImmutableAndWellDefinedVariable(v, referenceInfo)) {
-        // if the variable is referenced more than once, we can only
-        // inline it if it's immutable and never defined before referenced.
+    // If the variable is referenced more than once, we can only
+    // inline it if it’s immutable and never defined before being referenced.
     Node value;
     if (init != null) {
       value = init.getAssignedValue();
     } else {
-          // Create a new node for variable that is never initialized.
+      // Create a new node for a variable that is never initialized.
       Node srcLocation = declaration.getNode();
       value = NodeUtil.newUndefinedNode(srcLocation);
     }
     Preconditions.checkNotNull(value);
     inlineWellDefinedVariable(v, value, referenceInfo.references);
     staleVars.add(v);
   } else if (refCount == firstRefAfterInit) {
-        // The variable likely only read once, try some more
-        // complex inlining heuristics.
-        Reference reference = referenceInfo.references.get(
-            firstRefAfterInit - 1);
+    // The variable is likely only read once.  Try some more
+    // complex inlining heuristics.  However, we now must be careful
+    // not to inline non-constant initializers when doing so would change
+    // evaluation order.  For example, inlining:
+    //   var x = u;
+    // in a context where u is later modified (e.g. via a recursive call)
+    // would result in different semantics.  To prevent this, only inline
+    // if the initializer is immutable.
+    if (init == null) {
+      return;
+    }
+    Node value = init.getAssignedValue();
+    Preconditions.checkNotNull(value);
+    if (!NodeUtil.isImmutableValue(value)) {
+      // Do not inline if the initializer isn’t an immutable value.
+      return;
+    }
+    Reference reference = referenceInfo.references.get(firstRefAfterInit - 1);
     if (canInline(declaration, init, reference)) {
       inline(v, declaration, init, reference);
       staleVars.add(v);
     }
   } else if (declaration != init && refCount == 2) {
     if (isValidDeclaration(declaration) && isValidInitialization(init)) {
-          // The only reference is the initialization, remove the assignment and
+      // When the only reference is the initialization, remove the assignment and
       // the variable declaration.
       Node value = init.getAssignedValue();
       Preconditions.checkNotNull(value);
       inlineWellDefinedVariable(v, value, referenceInfo.references);
       staleVars.add(v);
     }
   }
 
   // If this variable was not inlined normally, check if we can
   // inline an alias of it. (If the variable was inlined, then the
   // reference data is out of sync. We're better off just waiting for
   // the next pass.)
   if (!maybeModifiedArguments &&
       !staleVars.contains(v) &&
       referenceInfo.isWellDefined() &&
       referenceInfo.isAssignedOnceInLifetime()) {
-          // Inlining the variable based solely on well-defined and assigned
-          // once is *NOT* correct. We relax the correctness requirement if
+    // Inlining the variable based solely on being well-defined and assigned
+    // once is *NOT* correct. We relax the correctness requirement only if
     // the variable is declared constant.
     List<Reference> refs = referenceInfo.references;
-        for (int i = 1 /* start from a read */; i < refs.size(); i++) {
+    for (int i = 1; i < refs.size(); i++) { // start from a read
       Node nameNode = refs.get(i).getNode();
       if (aliasCandidates.containsKey(nameNode)) {
         AliasCandidate candidate = aliasCandidates.get(nameNode);
         if (!staleVars.contains(candidate.alias) &&
             !isVarInlineForbidden(candidate.alias)) {
-              Reference aliasInit;
-              aliasInit = candidate.refInfo.getInitializingReference();
-              Node value = aliasInit.getAssignedValue();
-              Preconditions.checkNotNull(value);
+          Reference aliasInit = candidate.refInfo.getInitializingReference();
+          Node aliasValue = aliasInit.getAssignedValue();
+          Preconditions.checkNotNull(aliasValue);
           inlineWellDefinedVariable(candidate.alias,
-                  value,
+              aliasValue,
               candidate.refInfo.references);
           staleVars.add(candidate.alias);
         }
       }
     }
   }
 }
\ No newline at end of file
