diff --git a/tmp/97eb5017-c0c3-4791-b02f-f01cf1310e43_buggy.java b/tmp/bcce4704-1adb-492f-874e-9be1a1682347_fixed.java
index ef65dd9..2ac999c 100644
--- a/tmp/97eb5017-c0c3-4791-b02f-f01cf1310e43_buggy.java
+++ b/tmp/bcce4704-1adb-492f-874e-9be1a1682347_fixed.java
@@ -1,92 +1,95 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
-                         Node parent) {
+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {
   if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
     return;
   }
 
   Node arrayNode = left.getFirstChild();
   Node functionName = arrayNode.getNext();
 
-    if ((arrayNode.getType() != Token.ARRAYLIT) ||
+  if (arrayNode.getType() != Token.ARRAYLIT ||
       !functionName.getString().equals("join")) {
     return;
   }
 
   String joinString = NodeUtil.getStringValue(right);
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
-    StringBuilder sb = new StringBuilder();
   int foldedSize = 0;
-    Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
-    while (elem != null) {
+
+  // Instead of using sb.length() to decide whether we already added an element,
+  // we use an explicit flag so that even an empty string literal is counted.
+  StringBuilder groupBuilder = new StringBuilder();
+  boolean groupStarted = false; // indicates that we've started a contiguous group of constants
+
+  // Walk all elements in the array literal.
+  for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {
     if (NodeUtil.isImmutableValue(elem)) {
-        if (sb.length() > 0) {
-          sb.append(joinString);
+      if (groupStarted) {
+        // For every constant after the first, add the join string.
+        groupBuilder.append(joinString);
+      } else {
+        groupStarted = true;
       }
-        sb.append(NodeUtil.getStringValue(elem));
+      groupBuilder.append(NodeUtil.getStringValue(elem));
     } else {
-        if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(Node.newString(sb.toString()));
-          sb = new StringBuilder();
+      // Before processing a non-constant, flush any accumulated constant group.
+      if (groupStarted) {
+        foldedSize += groupBuilder.length() + 2; // add cost for quotes
+        arrayFoldedChildren.add(Node.newString(groupBuilder.toString()));
+        groupBuilder = new StringBuilder();
+        groupStarted = false;
       }
       foldedSize += InlineCostEstimator.getCost(elem);
       arrayFoldedChildren.add(elem);
     }
-      elem = elem.getNext();
   }
-
-    if (sb.length() > 0) {
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(Node.newString(sb.toString()));
+  // Flush any trailing group.
+  if (groupStarted) {
+    foldedSize += groupBuilder.length() + 2;
+    arrayFoldedChildren.add(Node.newString(groupBuilder.toString()));
   }
-    // one for each comma.
+  // Charge one unit for each comma (between array children).
   foldedSize += arrayFoldedChildren.size() - 1;
 
   int originalSize = InlineCostEstimator.getCost(n);
   switch (arrayFoldedChildren.size()) {
     case 0:
       Node emptyStringNode = Node.newString("");
       parent.replaceChild(n, emptyStringNode);
       break;
-
     case 1:
+      // If the entire result folds to a single constant.
+      if (foldedSize > originalSize) {
+        return;
+      }
       Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return;
-        }
       arrayNode.detachChildren();
       if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString(""), foldedStringNode);
+        // Coerce non-string constant to string literal.
+        Node replacement = new Node(Token.ADD, Node.newString(""), foldedStringNode);
         foldedStringNode = replacement;
       }
       parent.replaceChild(n, foldedStringNode);
       break;
-
     default:
-        // No folding could actually be performed.
+      // When some, but not all, constant nodes got merged.
+      // Only perform the fold if there is an actual reduction of nodes.
       if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
         return;
       }
       int kJoinOverhead = "[].join()".length();
       foldedSize += kJoinOverhead;
       foldedSize += InlineCostEstimator.getCost(right);
       if (foldedSize > originalSize) {
         return;
       }
       arrayNode.detachChildren();
       for (Node node : arrayFoldedChildren) {
         arrayNode.addChildToBack(node);
       }
       break;
   }
   t.getCompiler().reportCodeChange();
 }
\ No newline at end of file
