diff --git a/tmp/2250ea2d-b667-4b61-b5be-7c8eaa6da33a_buggy.java b/tmp/b8df54aa-e660-45df-aae3-f9fa9d43e38c_fixed.java
index ef65dd9..e32b229 100644
--- a/tmp/2250ea2d-b667-4b61-b5be-7c8eaa6da33a_buggy.java
+++ b/tmp/b8df54aa-e660-45df-aae3-f9fa9d43e38c_fixed.java
@@ -1,92 +1,96 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
   if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
     return;
   }
 
   Node arrayNode = left.getFirstChild();
   Node functionName = arrayNode.getNext();
 
-    if ((arrayNode.getType() != Token.ARRAYLIT) ||
+  if (arrayNode.getType() != Token.ARRAYLIT ||
       !functionName.getString().equals("join")) {
     return;
   }
 
   String joinString = NodeUtil.getStringValue(right);
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
   StringBuilder sb = new StringBuilder();
+  // Use a flag so that even if the constant is the empty string,
+  // we know we have begun a pending constant group.
+  boolean pendingConstant = false;
   int foldedSize = 0;
-    Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
-    while (elem != null) {
+  
+  // Process each element in the array literal.
+  for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {
     if (NodeUtil.isImmutableValue(elem)) {
-        if (sb.length() > 0) {
+      if (!pendingConstant) {
+        // Starting a new constant group.
+        pendingConstant = true;
+      } else {
+        // Append the join string between constants.
         sb.append(joinString);
       }
       sb.append(NodeUtil.getStringValue(elem));
     } else {
-        if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
+      if (pendingConstant) {
+        foldedSize += sb.length() + 2; // account for quotes in a string literal.
         arrayFoldedChildren.add(Node.newString(sb.toString()));
         sb = new StringBuilder();
+        pendingConstant = false;
       }
       foldedSize += InlineCostEstimator.getCost(elem);
       arrayFoldedChildren.add(elem);
     }
-      elem = elem.getNext();
   }
-
-    if (sb.length() > 0) {
-      // + 2 for the quotes.
+  if (pendingConstant) {
     foldedSize += sb.length() + 2;
     arrayFoldedChildren.add(Node.newString(sb.toString()));
   }
-    // one for each comma.
+  // Account for commas inserted between array elements.
   foldedSize += arrayFoldedChildren.size() - 1;
 
   int originalSize = InlineCostEstimator.getCost(n);
   switch (arrayFoldedChildren.size()) {
     case 0:
+      // The original array had no elements.
       Node emptyStringNode = Node.newString("");
       parent.replaceChild(n, emptyStringNode);
       break;
 
     case 1:
+      // All elements were constant and merged into one node.
       Node foldedStringNode = arrayFoldedChildren.remove(0);
       if (foldedSize > originalSize) {
         return;
       }
       arrayNode.detachChildren();
       if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString(""), foldedStringNode);
+        // If it isnâ€™t a string literal, force a string coercion.
+        Node replacement = new Node(Token.ADD, Node.newString(""), foldedStringNode);
         foldedStringNode = replacement;
       }
       parent.replaceChild(n, foldedStringNode);
       break;
 
     default:
-        // No folding could actually be performed.
+      // Only perform the fold if it actually reduces the cost.
       if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
         return;
       }
       int kJoinOverhead = "[].join()".length();
       foldedSize += kJoinOverhead;
       foldedSize += InlineCostEstimator.getCost(right);
       if (foldedSize > originalSize) {
         return;
       }
       arrayNode.detachChildren();
       for (Node node : arrayFoldedChildren) {
         arrayNode.addChildToBack(node);
       }
       break;
   }
   t.getCompiler().reportCodeChange();
 }
\ No newline at end of file
