diff --git a/tmp/1d9afc52-f9d0-42a1-8fc5-b88e0f739d3f_buggy.java b/tmp/b3888544-e4e9-42d1-b231-854e9f1614e7_fixed.java
index ef65dd9..de29692 100644
--- a/tmp/1d9afc52-f9d0-42a1-8fc5-b88e0f739d3f_buggy.java
+++ b/tmp/b3888544-e4e9-42d1-b231-854e9f1614e7_fixed.java
@@ -1,92 +1,106 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
-                         Node parent) {
+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {
   if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
     return;
   }
 
   Node arrayNode = left.getFirstChild();
   Node functionName = arrayNode.getNext();
 
   if ((arrayNode.getType() != Token.ARRAYLIT) ||
       !functionName.getString().equals("join")) {
     return;
   }
 
   String joinString = NodeUtil.getStringValue(right);
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
-    StringBuilder sb = new StringBuilder();
   int foldedSize = 0;
   Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+  // Instead of relying on sb.length(), we track whether we are in a
+  // group of adjacent literal nodes and use a flag to know if this is the first literal.
+  boolean inLiteralGroup = false;
+  StringBuilder sb = new StringBuilder();
+  boolean firstInGroup = true;
+
   while (elem != null) {
     if (NodeUtil.isImmutableValue(elem)) {
-        if (sb.length() > 0) {
+      // Start a new literal group if needed.
+      if (!inLiteralGroup) {
+        inLiteralGroup = true;
+        sb = new StringBuilder();
+        firstInGroup = true;
+      } else {
+        // For later literals in the same group, always insert the join string.
+        if (!firstInGroup) {
           sb.append(joinString);
         }
+      }
+      // Append the literal even if it is the empty string.
       sb.append(NodeUtil.getStringValue(elem));
+      firstInGroup = false;
     } else {
-        if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(Node.newString(sb.toString()));
-          sb = new StringBuilder();
+      // Flush any accumulated literal even if it is empty.
+      if (inLiteralGroup) {
+        String literal = sb.toString();
+        foldedSize += literal.length() + 2; // account for quotes
+        arrayFoldedChildren.add(Node.newString(literal));
+        inLiteralGroup = false;
       }
       foldedSize += InlineCostEstimator.getCost(elem);
       arrayFoldedChildren.add(elem);
     }
     elem = elem.getNext();
   }
-
-    if (sb.length() > 0) {
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(Node.newString(sb.toString()));
+  // Flush any remaining literal group.
+  if (inLiteralGroup) {
+    String literal = sb.toString();
+    foldedSize += literal.length() + 2;
+    arrayFoldedChildren.add(Node.newString(literal));
   }
-    // one for each comma.
+  // Account for commas between array literal children.
   foldedSize += arrayFoldedChildren.size() - 1;
 
   int originalSize = InlineCostEstimator.getCost(n);
   switch (arrayFoldedChildren.size()) {
     case 0:
       Node emptyStringNode = Node.newString("");
       parent.replaceChild(n, emptyStringNode);
       break;
 
     case 1:
       Node foldedStringNode = arrayFoldedChildren.remove(0);
+      // Do not fold if the new cost is higher.
       if (foldedSize > originalSize) {
         return;
       }
       arrayNode.detachChildren();
       if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
+        // Coerce to a string literal.
         Node replacement = new Node(Token.ADD,
             Node.newString(""), foldedStringNode);
         foldedStringNode = replacement;
       }
       parent.replaceChild(n, foldedStringNode);
       break;
 
     default:
-        // No folding could actually be performed.
+      // If no folding occurred (i.e. nothing was merged), keep the original tree.
       if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
         return;
       }
       int kJoinOverhead = "[].join()".length();
       foldedSize += kJoinOverhead;
       foldedSize += InlineCostEstimator.getCost(right);
       if (foldedSize > originalSize) {
         return;
       }
       arrayNode.detachChildren();
       for (Node node : arrayFoldedChildren) {
         arrayNode.addChildToBack(node);
       }
       break;
   }
   t.getCompiler().reportCodeChange();
 }
\ No newline at end of file
