diff --git a/tmp/da1201f3-45d1-4f95-a108-7d2718492203_buggy.java b/tmp/cde97d09-0e0d-4c22-bcb3-f2153e62662d_fixed.java
index 6e238e7..8be2902 100644
--- a/tmp/da1201f3-45d1-4f95-a108-7d2718492203_buggy.java
+++ b/tmp/cde97d09-0e0d-4c22-bcb3-f2153e62662d_fixed.java
@@ -1,15 +1,36 @@
 /**
  * Calculates the L<sub>2</sub> (Euclidean) distance between two points.
  *
-     * @param p1 the first point
-     * @param p2 the second point
+ * To avoid overflow when squaring large differences and to handle cases
+ * where one of the points is null (as can happen in degenerate clustering),
+ * we use a double accumulator and treat a null point as the origin.
+ *
+ * @param p1 the first point (may be null, which is treated as the zero vector)
+ * @param p2 the second point (may be null, which is treated as the zero vector)
  * @return the L<sub>2</sub> distance between the two points
  */
 public static double distance(int[] p1, int[] p2) {
-      int sum = 0;
+    if (p1 == null && p2 == null) {
+        return 0.0;
+    }
+    if (p1 == null) {
+        double sum = 0.0;
+        for (int d : p2) {
+            sum += d * d;
+        }
+        return Math.sqrt(sum);
+    }
+    if (p2 == null) {
+        double sum = 0.0;
+        for (int d : p1) {
+            sum += d * d;
+        }
+        return Math.sqrt(sum);
+    }
+    double sum = 0.0;
     for (int i = 0; i < p1.length; i++) {
-          final int dp = p1[i] - p2[i];
-          sum += dp * dp;
+        double diff = p1[i] - p2[i];
+        sum += diff * diff;
     }
     return Math.sqrt(sum);
 }
\ No newline at end of file
