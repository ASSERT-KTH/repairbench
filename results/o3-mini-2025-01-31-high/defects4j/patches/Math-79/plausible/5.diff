diff --git a/tmp/5cb1532e-4d72-4459-8380-35a91819dadc_buggy.java b/tmp/ac095aee-62f7-4086-90a3-8ed9eff70046_fixed.java
index 6e238e7..c3274c7 100644
--- a/tmp/5cb1532e-4d72-4459-8380-35a91819dadc_buggy.java
+++ b/tmp/ac095aee-62f7-4086-90a3-8ed9eff70046_fixed.java
@@ -1,15 +1,28 @@
 /**
  * Calculates the L<sub>2</sub> (Euclidean) distance between two points.
  *
-     * @param p1 the first point
-     * @param p2 the second point
+ * If one of the points is null while the other is not, the distance is defined to be
+ * positive infinity. If both points are null, the distance is 0.
+ *
+ * @param p1 the first point (an array of integers)
+ * @param p2 the second point (an array of integers)
  * @return the L<sub>2</sub> distance between the two points
+ * @throws IllegalArgumentException if the arrays are non-null but of different lengths
  */
 public static double distance(int[] p1, int[] p2) {
-      int sum = 0;
+    if (p1 == null && p2 == null) {
+        return 0.0;
+    }
+    if (p1 == null || p2 == null) {
+        return Double.POSITIVE_INFINITY;
+    }
+    if (p1.length != p2.length) {
+        throw new IllegalArgumentException("Point dimension mismatch");
+    }
+    double sum = 0.0;
     for (int i = 0; i < p1.length; i++) {
-          final int dp = p1[i] - p2[i];
-          sum += dp * dp;
+        double d = p1[i] - p2[i];
+        sum += d * d;
     }
     return Math.sqrt(sum);
 }
\ No newline at end of file
