diff --git a/tmp/8a93d6ca-9064-48a1-a889-4361d3234db3_buggy.java b/tmp/1bd1073d-c3ae-40d8-9fdf-611cc421bb36_fixed.java
index d4e6d48..94da1bb 100644
--- a/tmp/8a93d6ca-9064-48a1-a889-4361d3234db3_buggy.java
+++ b/tmp/1bd1073d-c3ae-40d8-9fdf-611cc421bb36_fixed.java
@@ -1,23 +1,18 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
   Preconditions.checkState(n.isCall());
   Node callTarget = n.getFirstChild();
   if (callTarget != null && callTarget.isName() &&
       callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
+    // Only fold if there is exactly one argument and that argument is immutable.
     Node value = callTarget.getNext();
-      if (value != null) {
+    if (value != null && value.getNext() == null && NodeUtil.isImmutableValue(value)) {
       Node addition = IR.add(
           IR.string("").srcref(callTarget),
           value.detachFromParent());
       n.getParent().replaceChild(n, addition);
       reportCodeChange();
       return addition;
     }
   }
   return n;
 }
\ No newline at end of file
