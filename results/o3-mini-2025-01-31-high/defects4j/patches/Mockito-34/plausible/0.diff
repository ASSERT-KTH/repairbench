diff --git a/tmp/f5e8da7f-8f57-4ffa-b083-1acec7d213b8_buggy.java b/tmp/6037142b-d985-4264-b401-b5f82502865e_fixed.java
index d68a69c..781693f 100644
--- a/tmp/f5e8da7f-8f57-4ffa-b083-1acec7d213b8_buggy.java
+++ b/tmp/6037142b-d985-4264-b401-b5f82502865e_fixed.java
@@ -1,9 +1,28 @@
 public void captureArgumentsFrom(Invocation i) {
-        int k = 0;
+    Object[] args = i.getArguments();
+    // In case of a varargs method that was called with no arguments,
+    // args may be empty. We can get the method so we know the expected
+    // number of parameters.
+    Method method = i.getMethod();
+    int paramCount = method.getParameterTypes().length;
+    int matcherIndex = 0;
     for (Matcher m : matchers) {
         if (m instanceof CapturesArguments) {
-                ((CapturesArguments) m).captureFrom(i.getArguments()[k]);
+            Object valueToCapture;
+            if (matcherIndex < args.length) {
+                // There is a corresponding argument.
+                valueToCapture = args[matcherIndex];
+            } else if (method.isVarArgs() && matcherIndex == paramCount - 1) {
+                // For a varargs parameter, if no argument has been passed at all,
+                // capture an empty array of the proper type.
+                Class<?> varargType = method.getParameterTypes()[paramCount - 1].getComponentType();
+                valueToCapture = java.lang.reflect.Array.newInstance(varargType, 0);
+            } else {
+                // In all other cases there is no matching argument.
+                valueToCapture = null;
             }
-            k++;
+            ((CapturesArguments) m).captureFrom(valueToCapture);
+        }
+        matcherIndex++;
     }
 }
\ No newline at end of file
