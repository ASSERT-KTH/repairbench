diff --git a/tmp/520b5b8e-634b-422b-9c8a-ba6e75ec4675_buggy.java b/tmp/f5466a3a-7695-44bf-8024-658cca49236e_fixed.java
index d68a69c..f6a985d 100644
--- a/tmp/520b5b8e-634b-422b-9c8a-ba6e75ec4675_buggy.java
+++ b/tmp/f5466a3a-7695-44bf-8024-658cca49236e_fixed.java
@@ -1,9 +1,40 @@
 public void captureArgumentsFrom(Invocation i) {
-        int k = 0;
-        for (Matcher m : matchers) {
-            if (m instanceof CapturesArguments) {
-                ((CapturesArguments) m).captureFrom(i.getArguments()[k]);
+    Object[] args = i.getArguments();
+    Method method = i.getMethod();
+    if (method.isVarArgs()) {
+        // For varargs methods, the last matcher corresponds to the entire varargs array.
+        // The fixed (non-varargs) part has length = total parameters - 1.
+        int fixedCount = method.getParameterTypes().length - 1;
+        for (int k = 0; k < matchers.size(); k++) {
+            Matcher m = matchers.get(k);
+            if (!(m instanceof CapturesArguments)) {
+                continue;
+            }
+            if (k < fixedCount) {
+                // For fixed arguments, only capture if an argument exists
+                if (k < args.length) {
+                    ((CapturesArguments) m).captureFrom(args[k]);
+                }
+            } else {
+                // For the varargs matcher:
+                // When no varargs were passed, args may have only the fixed arguments.
+                Object varargs;
+                if (args.length == fixedCount) {
+                    varargs = new Object[0];
+                } else {
+                    // Otherwise, the varargs are stored at index fixedCount.
+                    varargs = args[fixedCount];
+                }
+                ((CapturesArguments) m).captureFrom(varargs);
+            }
+        }
+    } else {
+        // For non-varargs methods, only process matchers for which an argument exists.
+        for (int k = 0; k < matchers.size(); k++) {
+            Matcher m = matchers.get(k);
+            if (m instanceof CapturesArguments && k < args.length) {
+                ((CapturesArguments) m).captureFrom(args[k]);
+            }
         }
-            k++;
     }
 }
\ No newline at end of file
