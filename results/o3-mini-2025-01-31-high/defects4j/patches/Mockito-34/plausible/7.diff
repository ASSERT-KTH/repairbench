diff --git a/tmp/63aa3889-11c9-4c44-b459-5e91b389bc17_buggy.java b/tmp/17ececb8-c382-4fa9-b80f-25c7f5deb6d6_fixed.java
index d68a69c..8e3ebb8 100644
--- a/tmp/63aa3889-11c9-4c44-b459-5e91b389bc17_buggy.java
+++ b/tmp/17ececb8-c382-4fa9-b80f-25c7f5deb6d6_fixed.java
@@ -1,9 +1,41 @@
 public void captureArgumentsFrom(Invocation i) {
-        int k = 0;
-        for (Matcher m : matchers) {
+    Object[] arguments = i.getArguments();
+    int matcherCount = matchers.size();
+
+    // In the normal (non-varargs) case, the number of matchers equals the arguments count.
+    if (arguments.length == matcherCount) {
+        for (int k = 0; k < matcherCount; k++) {
+            Matcher m = matchers.get(k);
             if (m instanceof CapturesArguments) {
-                ((CapturesArguments) m).captureFrom(i.getArguments()[k]);
+                ((CapturesArguments) m).captureFrom(arguments[k]);
+            }
+        }
+    } else {
+        // Otherwise we assume a varargs call.
+        // In a varargs method the matcher list is built from the fixed arguments plus one matcher 
+        // for all varargs.  (It might happen that the varargs matcher must capture an empty array.)
+        int fixedArgCount = matcherCount - 1;
+
+        // Capture fixed (non-varargs) arguments if present.
+        for (int k = 0; k < fixedArgCount && k < arguments.length; k++) {
+            Matcher m = matchers.get(k);
+            if (m instanceof CapturesArguments) {
+                ((CapturesArguments) m).captureFrom(arguments[k]);
+            }
+        }
+
+        // The last matcher is for the varargs.
+        Matcher varargsMatcher = matchers.get(matcherCount - 1);
+        Object[] varargs;
+        if (arguments.length > fixedArgCount) {
+            int varargsLength = arguments.length - fixedArgCount;
+            varargs = new Object[varargsLength];
+            System.arraycopy(arguments, fixedArgCount, varargs, 0, varargsLength);
+        } else {
+            varargs = new Object[0];
+        }
+        if (varargsMatcher instanceof CapturesArguments) {
+            ((CapturesArguments) varargsMatcher).captureFrom(varargs);
         }
-            k++;
     }
 }
\ No newline at end of file
