diff --git a/tmp/71c4259b-6eea-4ee2-9427-3a99900c8016_buggy.java b/tmp/4b296fbd-cbae-494e-a379-e094edab919d_fixed.java
index 2d9cf24..325df7d 100644
--- a/tmp/71c4259b-6eea-4ee2-9427-3a99900c8016_buggy.java
+++ b/tmp/4b296fbd-cbae-494e-a379-e094edab919d_fixed.java
@@ -1,33 +1,25 @@
-    public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException
-    {
-        // There are certain nasty classes that could cause problems, mostly
-        // via default typing -- catch them here.
+public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {
     final Class<?> raw = type.getRawClass();
-        String full = raw.getName();
+    final String full = raw.getName();
 
-        main_check:
-        do {
-            if (_cfgIllegalClassNames.contains(full)) {
-                break;
+    // First: if configured illegal class names are supplied, use them.
+    if (_cfgIllegalClassNames != null && _cfgIllegalClassNames.contains(full)) {
+        throw JsonMappingException.from(ctxt,
+                String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
     }
 
-            // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling
-            //    for some Spring framework types
-            // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces
-            if (full.startsWith(PREFIX_STRING)) {
-                for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
+    // Check for Spring Framework types: only if PREFIX_STRING is non-null.
+    if (PREFIX_STRING != null && full.startsWith(PREFIX_STRING)) {
+        // Use "cls != null" to protect against interfaces whose getSuperclass() returns null.
+        for (Class<?> cls = raw; cls != null && cls != Object.class; cls = cls.getSuperclass()) {
             String name = cls.getSimpleName();
-                    // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
+            // If any superclass has a suspicious name, reject the type.
             if ("AbstractPointcutAdvisor".equals(name)
-                            // ditto  for "FileSystemXmlApplicationContext": block all ApplicationContexts
                     || "AbstractApplicationContext".equals(name)) {
-                        break main_check;
-                    }
-                }
-            }
-            return;
-        } while (false);
-
                 throw JsonMappingException.from(ctxt,
                         String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
             }
+        }
+    }
+    // No exception thrown: type is allowed.
+}
\ No newline at end of file
