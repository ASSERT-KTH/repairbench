diff --git a/tmp/249232c3-3e81-4782-a1cc-987fbee87760_buggy.java b/tmp/79a6c7d1-6404-4621-b410-19f2b62af40d_fixed.java
index 2d9cf24..656e743 100644
--- a/tmp/249232c3-3e81-4782-a1cc-987fbee87760_buggy.java
+++ b/tmp/79a6c7d1-6404-4621-b410-19f2b62af40d_fixed.java
@@ -1,33 +1,25 @@
-    public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException
-    {
+public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {
     // There are certain nasty classes that could cause problems, mostly
     // via default typing -- catch them here.
     final Class<?> raw = type.getRawClass();
     String full = raw.getName();
 
-        main_check:
-        do {
-            if (_cfgIllegalClassNames.contains(full)) {
-                break;
+    // If a set of illegal class names was configured and this type is in it, fail.
+    if (_cfgIllegalClassNames != null && _cfgIllegalClassNames.contains(full)) {
+        throw JsonMappingException.from(ctxt,
+                String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
     }
     
-            // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling
-            //    for some Spring framework types
-            // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces
+    // For some Spring framework types we need more sophisticated handling:
     if (full.startsWith(PREFIX_STRING)) {
         for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
             String name = cls.getSimpleName();
-                    // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
-                    if ("AbstractPointcutAdvisor".equals(name)
-                            // ditto  for "FileSystemXmlApplicationContext": block all ApplicationContexts
-                            || "AbstractApplicationContext".equals(name)) {
-                        break main_check;
-                    }
-                }
-            }
-            return;
-        } while (false);
-
+            // Looking for "AbstractPointcutAdvisor" or "AbstractApplicationContext" should be blocked.
+            if ("AbstractPointcutAdvisor".equals(name) || "AbstractApplicationContext".equals(name)) {
                 throw JsonMappingException.from(ctxt,
                         String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
             }
+        }
+    }
+    // If none of the conditions matched, the subtype is valid.
+}
\ No newline at end of file
