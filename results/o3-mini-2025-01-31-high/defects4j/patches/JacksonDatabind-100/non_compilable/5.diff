diff --git a/tmp/98d5a19d-c35b-4a8b-9356-21a428a7d493_buggy.java b/tmp/ae7d13c5-c636-4936-82f3-5a9858e16f6e_fixed.java
index fc8c302..7be8175 100644
--- a/tmp/98d5a19d-c35b-4a8b-9356-21a428a7d493_buggy.java
+++ b/tmp/ae7d13c5-c636-4936-82f3-5a9858e16f6e_fixed.java
@@ -1,23 +1,32 @@
 @Override
 public byte[] getBinaryValue(Base64Variant b64variant)
     throws IOException, JsonParseException
 {
-        // Multiple possibilities...
     JsonNode n = currentNode();
     if (n != null) {
-            // [databind#2096]: although `binaryValue()` works for real binary node
-            // and embedded "POJO" node, coercion from TextNode may require variant, so:
+        // For TextNodes, use the variant-specific decoding, not the default one.
+        if (n instanceof TextNode) {
+            try {
+                return ((TextNode) n).binaryValue(b64variant);
+            } catch (IllegalArgumentException iae) {
+                throw new JsonParseException(
+                        "Cannot access contents of TextNode as binary due to broken Base64 encoding: " 
+                        + iae.getMessage(), null);
+            }
+        }
+        // For other node types (like BinaryNode), use the standard binaryValue() method.
         byte[] data = n.binaryValue();
         if (data != null) {
             return data;
         }
+        // Also support POJONode that may wrap a byte array.
         if (n.isPojo()) {
             Object ob = ((POJONode) n).getPojo();
             if (ob instanceof byte[]) {
                 return (byte[]) ob;
             }
         }
     }
-        // otherwise return null to mark we have no binary content
+    // No binary content available.
     return null;
 }
\ No newline at end of file
