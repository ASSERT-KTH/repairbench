diff --git a/tmp/a08028e3-1768-47a9-95ea-c2c7c2866f0e_buggy.java b/tmp/fb3ab747-80d4-4e79-957c-74665e884175_fixed.java
index fc8c302..76731c1 100644
--- a/tmp/a08028e3-1768-47a9-95ea-c2c7c2866f0e_buggy.java
+++ b/tmp/fb3ab747-80d4-4e79-957c-74665e884175_fixed.java
@@ -1,23 +1,31 @@
 @Override
 public byte[] getBinaryValue(Base64Variant b64variant)
     throws IOException, JsonParseException
 {
-        // Multiple possibilities...
     JsonNode n = currentNode();
     if (n != null) {
-            // [databind#2096]: although `binaryValue()` works for real binary node
-            // and embedded "POJO" node, coercion from TextNode may require variant, so:
-            byte[] data = n.binaryValue();
-            if (data != null) {
-                return data;
+        // For proper binary nodes (or similar) use their native binary value:
+        if (n.isBinary()) {
+            return n.binaryValue();
         }
+        // For textual nodes, decode using the provided Base64Variant
+        if (n.isTextual()) {
+            String base64 = n.asText();
+            try {
+                return b64variant.decode(base64);
+            } catch (IllegalArgumentException iae) {
+                throw new JsonParseException("Cannot access contents of TextNode as binary due to broken Base64 encoding: " 
+                        + iae.getMessage(), this.getCurrentLocation(), iae);
+            }
+        }
+        // Fallback: if the node is a POJO holding a byte array
         if (n.isPojo()) {
             Object ob = ((POJONode) n).getPojo();
             if (ob instanceof byte[]) {
                 return (byte[]) ob;
             }
         }
     }
-        // otherwise return null to mark we have no binary content
+    // If no convertible binary content, return null.
     return null;
 }
\ No newline at end of file
