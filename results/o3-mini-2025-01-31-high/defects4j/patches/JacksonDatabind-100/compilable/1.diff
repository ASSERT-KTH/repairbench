diff --git a/tmp/d1736f17-c807-4dd4-8662-11105461ebef_buggy.java b/tmp/674b2639-d1c2-47d8-a6ce-f31cdad0ea7f_fixed.java
index fc8c302..9f39f26 100644
--- a/tmp/d1736f17-c807-4dd4-8662-11105461ebef_buggy.java
+++ b/tmp/674b2639-d1c2-47d8-a6ce-f31cdad0ea7f_fixed.java
@@ -1,23 +1,35 @@
 @Override
 public byte[] getBinaryValue(Base64Variant b64variant)
     throws IOException, JsonParseException
 {
-        // Multiple possibilities...
     JsonNode n = currentNode();
     if (n != null) {
-            // [databind#2096]: although `binaryValue()` works for real binary node
-            // and embedded "POJO" node, coercion from TextNode may require variant, so:
+        // If the node is textual, decode it using the provided Base64 variant
+        if (n.isTextual()) {
+            String text = n.textValue();
+            com.fasterxml.jackson.core.util.ByteArrayBuilder builder = new com.fasterxml.jackson.core.util.ByteArrayBuilder();
+            try {
+                b64variant.decode(text, builder);
+            } catch (IllegalArgumentException iae) {
+                throw new JsonParseException(
+                    "Cannot access contents of TextNode as binary due to broken Base64 encoding: " 
+                    + iae.getMessage(), null, iae
+                );
+            }
+            return builder.toByteArray();
+        }
+        // Otherwise, try getting binary value (for BinaryNode or similar)
         byte[] data = n.binaryValue();
         if (data != null) {
             return data;
         }
+        // Finally, if it is a POJO wrapping a byte array, return it.
         if (n.isPojo()) {
             Object ob = ((POJONode) n).getPojo();
             if (ob instanceof byte[]) {
                 return (byte[]) ob;
             }
         }
     }
-        // otherwise return null to mark we have no binary content
     return null;
 }
\ No newline at end of file
