diff --git a/tmp/2f367ebb-a895-4e6f-8077-c25e2ddc9de1_buggy.java b/tmp/ca0cb833-65e8-4008-9880-c4915e5316a8_fixed.java
index fc8c302..d8e61e3 100644
--- a/tmp/2f367ebb-a895-4e6f-8077-c25e2ddc9de1_buggy.java
+++ b/tmp/ca0cb833-65e8-4008-9880-c4915e5316a8_fixed.java
@@ -1,23 +1,45 @@
 @Override
 public byte[] getBinaryValue(Base64Variant b64variant)
     throws IOException, JsonParseException
 {
-        // Multiple possibilities...
     JsonNode n = currentNode();
     if (n != null) {
-            // [databind#2096]: although `binaryValue()` works for real binary node
-            // and embedded "POJO" node, coercion from TextNode may require variant, so:
+        // First, if the node contains textual data, we decode it using the
+        // passed-in Base64Variant rather than relying on a default.
+        if (n.isTextual()) {
+            String text = n.asText();
+            try {
+                byte[] decoded;
+                String variantName = b64variant.getName();
+                if ("MODIFIED-FOR-URL".equals(variantName)) {
+                    decoded = java.util.Base64.getUrlDecoder().decode(text);
+                } else if ("MIME-NO-LINEFEEDS".equals(variantName)) {
+                    decoded = java.util.Base64.getDecoder().decode(text);
+                } else if ("PEM".equals(variantName) || "MIME".equals(variantName)) {
+                    decoded = java.util.Base64.getMimeDecoder().decode(text);
+                } else {
+                    decoded = java.util.Base64.getDecoder().decode(text);
+                }
+                return decoded;
+            } catch (IllegalArgumentException iae) {
+                throw new JsonParseException(null,
+                    "Cannot access contents of TextNode as binary due to broken Base64 encoding: " 
+                    + iae.getMessage(), iae);
+            }
+        }
+        // For non-textual nodes (e.g. binary nodes), try the regular binaryValue()
         byte[] data = n.binaryValue();
         if (data != null) {
             return data;
         }
+        // Lastly, if node is a POJO node, see if it actually wraps a byte[]
         if (n.isPojo()) {
             Object ob = ((POJONode) n).getPojo();
             if (ob instanceof byte[]) {
                 return (byte[]) ob;
             }
         }
     }
-        // otherwise return null to mark we have no binary content
+    // No binary content found
     return null;
 }
\ No newline at end of file
