diff --git a/tmp/1af3a153-69a1-4499-83dc-3e22b7834185_buggy.java b/tmp/44bec936-3c83-4c04-959a-491893803108_fixed.java
index fc8c302..34eef18 100644
--- a/tmp/1af3a153-69a1-4499-83dc-3e22b7834185_buggy.java
+++ b/tmp/44bec936-3c83-4c04-959a-491893803108_fixed.java
@@ -1,23 +1,29 @@
 @Override
-    public byte[] getBinaryValue(Base64Variant b64variant)
-        throws IOException, JsonParseException
-    {
-        // Multiple possibilities...
+public byte[] getBinaryValue(Base64Variant b64variant) throws IOException, JsonParseException {
     JsonNode n = currentNode();
     if (n != null) {
-            // [databind#2096]: although `binaryValue()` works for real binary node
-            // and embedded "POJO" node, coercion from TextNode may require variant, so:
-            byte[] data = n.binaryValue();
-            if (data != null) {
-                return data;
+        // If the node is truly binary, use its binary value directly.
+        if (n.isBinary()) {
+            return n.binaryValue();
         }
+        // If it is a POJO node that happens to contain a byte[], return that.
         if (n.isPojo()) {
             Object ob = ((POJONode) n).getPojo();
             if (ob instanceof byte[]) {
                 return (byte[]) ob;
             }
         }
+        // If it is a textual node, decode the Base64 content using the provided variant.
+        if (n.isTextual()) {
+            String text = n.textValue();
+            try {
+                return b64variant.decode(text);
+            } catch (IllegalArgumentException iae) {
+                throw new JsonParseException(null,
+                        "Cannot access contents of TextNode as binary due to broken Base64 encoding: " + iae.getMessage(), iae);
             }
-        // otherwise return null to mark we have no binary content
+        }
+    }
+    // If there is no node or it doesn't contain valid binary content, return null.
     return null;
 }
\ No newline at end of file
