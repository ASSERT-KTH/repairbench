diff --git a/tmp/7a4f515b-44e4-4262-bc14-11b53e048384_buggy.java b/tmp/4f694e60-83e4-4e3a-8bc0-2fa81cb8fa39_fixed.java
index b36b2a9..db2c397 100644
--- a/tmp/7a4f515b-44e4-4262-bc14-11b53e048384_buggy.java
+++ b/tmp/4f694e60-83e4-4e3a-8bc0-2fa81cb8fa39_fixed.java
@@ -1,26 +1,56 @@
 JSType meet(JSType that) {
   UnionTypeBuilder builder = new UnionTypeBuilder(registry);
   for (JSType alternate : alternates) {
     if (alternate.isSubtype(that)) {
       builder.addAlternate(alternate);
     }
   }
 
   if (that instanceof UnionType) {
     for (JSType otherAlternate : ((UnionType) that).alternates) {
       if (otherAlternate.isSubtype(this)) {
         builder.addAlternate(otherAlternate);
       }
     }
   } else if (that.isSubtype(this)) {
     builder.addAlternate(that);
   }
   JSType result = builder.build();
   if (result != null) {
     return result;
-    } else if (this.isObject() && that.isObject()) {
+  }
+
+  // Instead of relying on this.isObject() for unions (which can be overly strict),
+  // we check that each alternate in a union is an object.
+  boolean thisIsObject;
+  if (this instanceof UnionType) {
+    thisIsObject = true;
+    for (JSType alt : ((UnionType) this).alternates) {
+      if (!alt.isObject()) {
+        thisIsObject = false;
+        break;
+      }
+    }
+  } else {
+    thisIsObject = this.isObject();
+  }
+
+  boolean thatIsObject;
+  if (that instanceof UnionType) {
+    thatIsObject = true;
+    for (JSType alt : ((UnionType) that).alternates) {
+      if (!alt.isObject()) {
+        thatIsObject = false;
+        break;
+      }
+    }
+  } else {
+    thatIsObject = that.isObject();
+  }
+
+  if (thisIsObject && thatIsObject) {
     return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
   } else {
     return getNativeType(JSTypeNative.NO_TYPE);
   }
 }
\ No newline at end of file
