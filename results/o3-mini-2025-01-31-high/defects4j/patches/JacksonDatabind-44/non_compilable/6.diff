diff --git a/tmp/d591846d-c12a-48d6-8139-45fcda0ef0ae_buggy.java b/tmp/f5575f54-c9bb-4ecf-877a-6248cd1c313b_fixed.java
index 1a63a66..a54afec 100644
--- a/tmp/d591846d-c12a-48d6-8139-45fcda0ef0ae_buggy.java
+++ b/tmp/f5575f54-c9bb-4ecf-877a-6248cd1c313b_fixed.java
@@ -1,21 +1,17 @@
 @Override
 @Deprecated
-    protected JavaType _narrow(Class<?> subclass)
-    {
-        if (_class == subclass) {
+protected JavaType _narrow(Class<?> subclass) {
+    if (subclass == _class) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
-        // TODO: fix in 2.8
-            /*
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-                    */
-            return new SimpleType(subclass, _bindings, this, _superInterfaces,
+    if (!_class.isAssignableFrom(subclass)) {
+        throw new IllegalArgumentException("Class " + subclass.getName()
+                + " not a subtype of " + _class.getName());
+    }
+    // Instead of passing "this" as the super-type, we must compute the proper
+    // super-type for the new subclass. This ensures that properties declared
+    // only in the subclass (like "b" in the test) are discovered.
+    JavaType newSuper = (_superClass == null) ? null : _superClass.narrow(subclass.getSuperclass());
+    return new SimpleType(subclass, _bindings, newSuper, _superInterfaces,
             _valueHandler, _typeHandler, _asStatic);
-        // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
-        // should not get here but...
 }
\ No newline at end of file
