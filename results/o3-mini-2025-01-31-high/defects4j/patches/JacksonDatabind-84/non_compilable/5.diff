diff --git a/tmp/5445dbac-012b-4cd6-9b5f-6d7d5f93b075_buggy.java b/tmp/fb3a1d44-b852-4e2c-9f24-3bbc96c26cc5_fixed.java
index e69de29..15aaa8b 100644
--- a/tmp/5445dbac-012b-4cd6-9b5f-6d7d5f93b075_buggy.java
+++ b/tmp/fb3a1d44-b852-4e2c-9f24-3bbc96c26cc5_fixed.java
@@ -0,0 +1,36 @@
+protected JavaType _fromClass(Class<?> cls, TypeBindings context) {
+    // First, see if a fully resolved type is already cached
+    ClassKey key = new ClassKey(cls);
+    JavaType result = _typeCache.get(key);
+    if (result != null) {
+        return result;
+    }
+    // Check for a placeholder already created to handle recursive types
+    ResolvedRecursiveType rec = _incomplete.get(key);
+    if (rec != null) {
+        return rec;
+    }
+    // Create a placeholder to detect recursion while building the type
+    ResolvedRecursiveType placeholder = new ResolvedRecursiveType(cls, context);
+    _incomplete.put(key, placeholder);
+
+    // Build the full JavaType according to the kind of class
+    if (cls.isArray()) {
+        result = _fromArrayClass(cls, context);
+    } else if (Map.class.isAssignableFrom(cls)) {
+        result = _fromMapClass(cls, context);
+    } else if (Collection.class.isAssignableFrom(cls)) {
+        result = _fromCollectionClass(cls, context);
+    } else {
+        result = _fromBeanType(cls, context);
+    }
+    // FIX: Make sure that any recursive references are properly resolved.
+    // This ensures that properties from super types (such as Base) are included
+    // even if the type was pre-registered as a placeholder.
+    placeholder.resolveSelfReferences(result);
+
+    // Now remove the placeholder and cache the fully resolved type.
+    _incomplete.remove(key);
+    _typeCache.put(key, result);
+    return result;
+}
\ No newline at end of file
