diff --git a/tmp/e87308f2-86b9-48df-928d-4621d6cc3de8_buggy.java b/tmp/e6099883-f2c6-455e-a95c-1b39eda4a452_fixed.java
index e69de29..4861fa3 100644
--- a/tmp/e87308f2-86b9-48df-928d-4621d6cc3de8_buggy.java
+++ b/tmp/e6099883-f2c6-455e-a95c-1b39eda4a452_fixed.java
@@ -0,0 +1,27 @@
+protected JavaType _fromClass(Class<?> cls, TypeBindings bindings) {
+    // First check for already “well‐known” types (no need to rebuild these)
+    JavaType known = _findWellKnownSimple(cls);
+    if (known != null) {
+        return known;
+    }
+    // FIX: Always create a fresh SimpleType rather than reusing any previously
+    // cached incomplete instance. This avoids the situation where a Base type
+    // (constructed earlier via tf.constructType(Base.class)) is reused in a Sub type
+    // and thereby misses out on its full (inherited) property definitions.
+    SimpleType result = new SimpleType(cls, bindings);
+    
+    // Recursively construct type information for the superclass.
+    // Important: We don’t try to reuse a cached type here, so that if Base was built earlier,
+    // we recompute it to include all properties.
+    Class<?> superClass = cls.getSuperclass();
+    if (superClass != null) {
+        JavaType superType = _fromClass(superClass, TypeBindings.emptyBindings());
+        result = result.withSuperType(superType);
+    }
+    
+    // (Optionally, interfaces could be processed here as well.)
+    
+    // Finalize type resolution (this step fills in any remaining details)
+    result = result.resolve(this);
+    return result;
+}
\ No newline at end of file
