diff --git a/tmp/2f1f7f4b-07f8-4e8b-a5b0-2ab6e0285076_buggy.java b/tmp/9c636104-067a-498c-8c64-2c7e3e4d413b_fixed.java
index e69de29..c139a28 100644
--- a/tmp/2f1f7f4b-07f8-4e8b-a5b0-2ab6e0285076_buggy.java
+++ b/tmp/9c636104-067a-498c-8c64-2c7e3e4d413b_fixed.java
@@ -0,0 +1,34 @@
+protected JavaType _fromClass(Class<?> cls, TypeBindings context) {
+    // Only reuse a cached type if it is fully resolved.
+    JavaType cached = _findCachedType(cls);
+    if (cached != null && cached.isFullyResolved()) {
+        return cached;
+    }
+    
+    // Handle array types separately.
+    if (cls.isArray()) {
+        JavaType compType = _fromClass(cls.getComponentType(), context);
+        ArrayType arrayType = ArrayType.construct(compType, null);
+        _cacheType(cls, arrayType);
+        return arrayType;
+    }
+    
+    // Recursively construct the super type (if any), but do not use the cached
+    // version unless it is fully resolved.
+    JavaType superType = (cls.getSuperclass() != null && cls.getSuperclass() != Object.class)
+            ? _fromClass(cls.getSuperclass(), TypeBindings.emptyBindings())
+            : null;
+    
+    // Build a new SimpleType for this class with the (possibly incomplete) super type.
+    SimpleType newType = new SimpleType(cls, context, superType, null, null, null, false);
+    _cacheType(cls, newType);
+    
+    // Force full resolution: if the new type isnâ€™t yet fully resolved,
+    // re-create it so that inherited properties (like those from Base) get included.
+    if (!newType.isFullyResolved()) {
+        newType = newType.narrowBy(cls);
+        _cacheType(cls, newType);
+    }
+    
+    return newType;
+}
\ No newline at end of file
