diff --git a/tmp/82dab01a-5b00-44b0-aac4-3b24e9ec0842_buggy.java b/tmp/1ba2d855-12ae-4158-8e15-406b15456a7d_fixed.java
index e69de29..095764e 100644
--- a/tmp/82dab01a-5b00-44b0-aac4-3b24e9ec0842_buggy.java
+++ b/tmp/1ba2d855-12ae-4158-8e15-406b15456a7d_fixed.java
@@ -0,0 +1,30 @@
+protected JavaType _fromClass(Class<?> rawClass, TypeBindings context) {
+    // First check whether we already have a type for this class.
+    JavaType cached = _findCachedType(rawClass);
+    if (cached != null) {
+        // Even if found, for proper inheritance we must ensure that the
+        // "super type" is up-to-date. If the raw class has a non-Object superclass,
+        // force a re-resolution of its type and “attach” it to the cached type.
+        Class<?> superClass = rawClass.getSuperclass();
+        if (superClass != null && superClass != Object.class) {
+            JavaType actualSuper = constructType(superClass);
+            // If the cached type’s super-type is missing or outdated, update it.
+            if (cached.getSuperClass() == null || !cached.getSuperClass().equals(actualSuper)) {
+                return ((SimpleType) cached).withSuperClass(actualSuper);
+            }
+        }
+        return cached;
+    }
+    // No cached value yet: create a new SimpleType instance.
+    SimpleType result = SimpleType.construct(rawClass, context);
+    // Add the new (as yet incomplete) type to the cache to handle potential cyclic references.
+    _addCachedType(rawClass, result);
+    // If the class has a superclass (other than Object), resolve and attach it.
+    Class<?> superClass = rawClass.getSuperclass();
+    if (superClass != null && superClass != Object.class) {
+        JavaType superType = constructType(superClass);
+        result = result.withSuperClass(superType);
+        _updateCachedType(rawClass, result);
+    }
+    return result;
+}
\ No newline at end of file
