diff --git a/tmp/e3eec68a-9f3f-40a7-a6fa-4d6d0743b4c9_buggy.java b/tmp/93e9f1c7-9967-48ed-9b9d-20cb8c18deb8_fixed.java
index e69de29..a3c9b5d 100644
--- a/tmp/e3eec68a-9f3f-40a7-a6fa-4d6d0743b4c9_buggy.java
+++ b/tmp/93e9f1c7-9967-48ed-9b9d-20cb8c18deb8_fixed.java
@@ -0,0 +1,28 @@
+protected JavaType _fromClass(Class<?> cls, TypeBindings context) {
+    // First, check for a cached JavaType for the given class and bindings
+    JavaType cached = _findCachedType(cls, context);
+    if (cached != null) {
+        // If the cached type was built for a super-class, narrow it to the requested cls
+        if (cached.getRawClass() != cls) {
+            cached = cached.narrowBy(cls);
+            _typeCache.put(cls, cached);
+        }
+        return cached;
+    }
+    // Create a placeholder to handle potential self-references.
+    // Without this, a call to construct a base type (via a recursive call)
+    // might return an incomplete bean description.
+    ResolvedRecursiveType rec = new ResolvedRecursiveType(cls);
+    _typeCache.put(cls, rec);
+
+    // Fully build the JavaType (which will introspect properties, including those
+    // inherited from super types). This is typically where all bean properties get discovered.
+    JavaType actual = _buildType(cls, context);
+
+    // FIX: Update the placeholder with the fully resolved type so that any recursive
+    // or inherited properties (for example, the "base" property in a subtype) are properly included.
+    rec.setSelfReference(actual);
+    // Replace the placeholder in the cache with the complete type.
+    _typeCache.put(cls, actual);
+    return actual;
+}
\ No newline at end of file
