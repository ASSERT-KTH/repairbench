diff --git a/tmp/f5cb844c-d095-4649-b9e8-67d09121a7e7_buggy.java b/tmp/a2847fc2-a6c6-441f-a261-2d17e19d9b3c_fixed.java
index 31f58d4..6b664aa 100644
--- a/tmp/f5cb844c-d095-4649-b9e8-67d09121a7e7_buggy.java
+++ b/tmp/a2847fc2-a6c6-441f-a261-2d17e19d9b3c_fixed.java
@@ -1,101 +1,137 @@
 /**
  * <p>An implementation of {@link Parser}'s abstract
  * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>
  *
  * <p>The following are the rules used by this flatten method.
  * <ol>
  *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not
  *  burst anymore of <code>arguments</code> entries, just add each
  *  successive entry without further processing.  Otherwise, ignore
  *  <code>stopAtNonOption</code>.</li>
  *  <li>if the current <code>arguments</code> entry is "<b>--</b>"
  *  just add the entry to the list of processed tokens</li>
  *  <li>if the current <code>arguments</code> entry is "<b>-</b>"
  *  just add the entry to the list of processed tokens</li>
  *  <li>if the current <code>arguments</code> entry is two characters
  *  in length and the first character is "<b>-</b>" then check if this
  *  is a valid {@link Option} id.  If it is a valid id, then add the
  *  entry to the list of processed tokens and set the current {@link Option}
-     *  member.  If it is not a valid id and <code>stopAtNonOption</code>
-     *  is true, then the remaining entries are copied to the list of 
-     *  processed tokens.  Otherwise, the current entry is ignored.</li>
+ *  member.  If it is not a valid id and <code>stopAtNonOption</code> is true,
+ *  then the current entry and all remaining entries are copied to the list of 
+ *  processed tokens.</li>
  *  <li>if the current <code>arguments</code> entry is more than two
  *  characters in length and the first character is "<b>-</b>" then
  *  we need to burst the entry to determine its constituents.  For more
  *  information on the bursting algorithm see 
-     *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>
+ *  {@link PosixParser#burstToken(String, boolean) burstToken} unless
+ *  <code>stopAtNonOption</code> is true, in which case the token is added as is.</li>
  *  <li>if the current <code>arguments</code> entry is not handled 
  *  by any of the previous rules, then the entry is added to the list
-     *  of processed tokens.</li>
+ *  of processed tokens. And if <code>stopAtNonOption</code> is true, then
+ *  no further processing is performed.</li>
  * </ol>
  * </p>
  *
  * @param options The command line {@link Options}
  * @param arguments The command line arguments to be parsed
  * @param stopAtNonOption Specifies whether to stop flattening
  * when an non option is found.
  * @return The flattened <code>arguments</code> String array.
  */
 protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
 {
     init();
     this.options = options;
-
-        // an iterator for the command line tokens
+    boolean eatTheRest = false;
     Iterator iter = Arrays.asList(arguments).iterator();
 
-        // process each command line token
     while (iter.hasNext())
     {
-            // get the next command line token
         String token = (String) iter.next();
+        if (eatTheRest)
+        {
+            tokens.add(token);
+            continue;
+        }
 
-            // handle long option --foo or --foo=bar
+        if ("--".equals(token))
+        {
+            tokens.add(token);
+            eatTheRest = true;
+        }
+        else if ("-".equals(token))
+        {
+            tokens.add(token);
+        }
+        else if (token.startsWith("-"))
+        {
+            // Handle long options that begin with "--"
             if (token.startsWith("--"))
             {
                 if (token.indexOf('=') != -1)
+                {
+                    // When stopAtNonOption is true, do not split; add the token as is.
+                    if (stopAtNonOption)
+                    {
+                        tokens.add(token);
+                    }
+                    else
                     {
                         tokens.add(token.substring(0, token.indexOf('=')));
                         tokens.add(token.substring(token.indexOf('=') + 1, token.length()));
                     }
+                }
                 else
                 {
                     tokens.add(token);
                 }
             }
-
-            // single hyphen
-            else if ("-".equals(token))
-            {
-                tokens.add(token);
-            }
-            else if (token.startsWith("-"))
+            else  // Token starts with a single '-' (short option or burstable token)
             {
                 if (token.length() == 2)
+                {
+                    // If stopAtNonOption is true and the option is not valid, treat it as a non-option.
+                    if (stopAtNonOption && !options.hasOption(token))
+                    {
+                        tokens.add(token);
+                        eatTheRest = true;
+                    }
+                    else
                     {
                         processOptionToken(token, stopAtNonOption);
                     }
-                else if (options.hasOption(token))
+                }
+                else
+                {
+                    // Token is more than two characters long.
+                    if (options.hasOption(token))
+                    {
+                        tokens.add(token);
+                    }
+                    else
+                    {
+                        // If we're in stopAtNonOption mode, do not burst; add token as is and stop further processing.
+                        if (stopAtNonOption)
                         {
                             tokens.add(token);
+                            eatTheRest = true;
                         }
-                // requires bursting
                         else
                         {
                             burstToken(token, stopAtNonOption);
                         }
                     }
-            else if (stopAtNonOption)
-            {
-                process(token);
+                }
+            }
         }
         else
         {
             tokens.add(token);
+            if (stopAtNonOption)
+            {
+                eatTheRest = true;
+            }
         }
-
-            gobble(iter);
     }
-
     return (String[]) tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
