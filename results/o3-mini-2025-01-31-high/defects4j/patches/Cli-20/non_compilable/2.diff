diff --git a/tmp/9f47a141-f93a-4f2e-93b1-1dc0363038f5_buggy.java b/tmp/01efe8fd-965a-487f-ac36-16d37e4239d8_fixed.java
index 31f58d4..13c5841 100644
--- a/tmp/9f47a141-f93a-4f2e-93b1-1dc0363038f5_buggy.java
+++ b/tmp/01efe8fd-965a-487f-ac36-16d37e4239d8_fixed.java
@@ -1,101 +1,85 @@
-    /**
-     * <p>An implementation of {@link Parser}'s abstract
-     * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>
-     *
-     * <p>The following are the rules used by this flatten method.
-     * <ol>
-     *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not
-     *  burst anymore of <code>arguments</code> entries, just add each
-     *  successive entry without further processing.  Otherwise, ignore
-     *  <code>stopAtNonOption</code>.</li>
-     *  <li>if the current <code>arguments</code> entry is "<b>--</b>"
-     *  just add the entry to the list of processed tokens</li>
-     *  <li>if the current <code>arguments</code> entry is "<b>-</b>"
-     *  just add the entry to the list of processed tokens</li>
-     *  <li>if the current <code>arguments</code> entry is two characters
-     *  in length and the first character is "<b>-</b>" then check if this
-     *  is a valid {@link Option} id.  If it is a valid id, then add the
-     *  entry to the list of processed tokens and set the current {@link Option}
-     *  member.  If it is not a valid id and <code>stopAtNonOption</code>
-     *  is true, then the remaining entries are copied to the list of 
-     *  processed tokens.  Otherwise, the current entry is ignored.</li>
-     *  <li>if the current <code>arguments</code> entry is more than two
-     *  characters in length and the first character is "<b>-</b>" then
-     *  we need to burst the entry to determine its constituents.  For more
-     *  information on the bursting algorithm see 
-     *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>
-     *  <li>if the current <code>arguments</code> entry is not handled 
-     *  by any of the previous rules, then the entry is added to the list
-     *  of processed tokens.</li>
-     * </ol>
-     * </p>
-     *
-     * @param options The command line {@link Options}
-     * @param arguments The command line arguments to be parsed
-     * @param stopAtNonOption Specifies whether to stop flattening
-     * when an non option is found.
-     * @return The flattened <code>arguments</code> String array.
-     */
-    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
-    {
+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {
     init();
     this.options = options;
 
-        // an iterator for the command line tokens
-        Iterator iter = Arrays.asList(arguments).iterator();
+    Iterator<String> iter = Arrays.asList(arguments).iterator();
+    // The tokens list is assumed to be an instance field (e.g. an ArrayList<String>)
+    // and gobble(Iterator) is assumed to add the remaining tokens as-is.
 
-        // process each command line token
-        while (iter.hasNext())
-        {
-            // get the next command line token
-            String token = (String) iter.next();
+    while (iter.hasNext()) {
+        String token = iter.next();
 
-            // handle long option --foo or --foo=bar
-            if (token.startsWith("--"))
-            {
-                if (token.indexOf('=') != -1)
-                {
-                    tokens.add(token.substring(0, token.indexOf('=')));
-                    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));
+        /*
+         * If we are in "stop at non-option" mode AND the current token does not look like
+         * a proper option, then simply add it and copy over the rest of the tokens.
+         */
+        if (stopAtNonOption) {
+            boolean validOption = false;
+            if ("-".equals(token) || "--".equals(token)) {
+                validOption = true;
+            } else if (token.startsWith("--")) {
+                int pos = token.indexOf('=');
+                if (pos == -1) {
+                    validOption = options.hasOption(token.substring(2));
+                } else {
+                    validOption = options.hasOption(token.substring(2, pos));
                 }
-                else
-                {
+            } else if (token.startsWith("-")) {
+                if (token.length() == 2) {
+                    validOption = options.hasOption(token.substring(1));
+                } else {
+                    // For a compound token like "-abtoast", check the first letter.
+                    validOption = options.hasOption(token.substring(1, 2));
+                }
+            }
+            // If the token is not a recognized option, then stop further processing.
+            if (!validOption) {
                 tokens.add(token);
+                gobble(iter);
+                break;
             }
         }
 
-            // single hyphen
-            else if ("-".equals(token))
-            {
+        if (token.startsWith("--")) {
+            // Handle long options. Normally, if the token is of the form --foo=bar
+            // we split it into two tokens. However, if stopAtNonOption is true
+            // (and the token wasn’t deemed a valid option) we just add it as-is.
+            if (token.indexOf('=') != -1) {
+                if (stopAtNonOption) {
                     tokens.add(token);
+                } else {
+                    int pos = token.indexOf('=');
+                    tokens.add(token.substring(0, pos));
+                    tokens.add(token.substring(pos + 1));
                 }
-            else if (token.startsWith("-"))
-            {
-                if (token.length() == 2)
-                {
+            } else {
+                tokens.add(token);
+            }
+        } else if ("-".equals(token)) {
+            tokens.add(token);
+        } else if (token.startsWith("-")) {
+            if (token.length() == 2) {
                 processOptionToken(token, stopAtNonOption);
-                }
-                else if (options.hasOption(token))
-                {
+            } else if (options.hasOption(token)) {
                 tokens.add(token);
-                }
-                // requires bursting
-                else
-                {
+            } else {
+                // In non-stop mode, break the token into pieces.
+                // But if stopAtNonOption is true we want to stop any bursting.
+                if (stopAtNonOption) {
+                    tokens.add(token);
+                    gobble(iter);
+                    break;
+                } else {
                     burstToken(token, stopAtNonOption);
                 }
             }
-            else if (stopAtNonOption)
-            {
-                process(token);
-            }
-            else
-            {
+        } else {
+            // A plain token – since it's a non-option, we stop further processing.
             tokens.add(token);
+            gobble(iter);
+            break;
         }
-
         gobble(iter);
     }
-
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+    return tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
