diff --git a/tmp/36b74eb0-fed1-4179-b369-a4d423748ae4_buggy.java b/tmp/1150ae71-f012-440b-8cf9-5f640a5df992_fixed.java
index 31f58d4..18a2f6e 100644
--- a/tmp/36b74eb0-fed1-4179-b369-a4d423748ae4_buggy.java
+++ b/tmp/1150ae71-f012-440b-8cf9-5f640a5df992_fixed.java
@@ -1,101 +1,69 @@
-    /**
-     * <p>An implementation of {@link Parser}'s abstract
-     * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>
-     *
-     * <p>The following are the rules used by this flatten method.
-     * <ol>
-     *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not
-     *  burst anymore of <code>arguments</code> entries, just add each
-     *  successive entry without further processing.  Otherwise, ignore
-     *  <code>stopAtNonOption</code>.</li>
-     *  <li>if the current <code>arguments</code> entry is "<b>--</b>"
-     *  just add the entry to the list of processed tokens</li>
-     *  <li>if the current <code>arguments</code> entry is "<b>-</b>"
-     *  just add the entry to the list of processed tokens</li>
-     *  <li>if the current <code>arguments</code> entry is two characters
-     *  in length and the first character is "<b>-</b>" then check if this
-     *  is a valid {@link Option} id.  If it is a valid id, then add the
-     *  entry to the list of processed tokens and set the current {@link Option}
-     *  member.  If it is not a valid id and <code>stopAtNonOption</code>
-     *  is true, then the remaining entries are copied to the list of 
-     *  processed tokens.  Otherwise, the current entry is ignored.</li>
-     *  <li>if the current <code>arguments</code> entry is more than two
-     *  characters in length and the first character is "<b>-</b>" then
-     *  we need to burst the entry to determine its constituents.  For more
-     *  information on the bursting algorithm see 
-     *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>
-     *  <li>if the current <code>arguments</code> entry is not handled 
-     *  by any of the previous rules, then the entry is added to the list
-     *  of processed tokens.</li>
-     * </ol>
-     * </p>
-     *
-     * @param options The command line {@link Options}
-     * @param arguments The command line arguments to be parsed
-     * @param stopAtNonOption Specifies whether to stop flattening
-     * when an non option is found.
-     * @return The flattened <code>arguments</code> String array.
-     */
-    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
-    {
+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {
     init();
     this.options = options;
+    Iterator<String> iter = Arrays.asList(arguments).iterator();
+    // once we hit an argument that should no longer be processed (non‐option or one that
+    // isn’t burstable when stopAtNonOption is true) we just add the rest verbatim.
+    boolean eatTheRest = false;
+    while (iter.hasNext()) {
+        String token = iter.next();
 
-        // an iterator for the command line tokens
-        Iterator iter = Arrays.asList(arguments).iterator();
-
-        // process each command line token
-        while (iter.hasNext())
-        {
-            // get the next command line token
-            String token = (String) iter.next();
-
-            // handle long option --foo or --foo=bar
-            if (token.startsWith("--"))
-            {
-                if (token.indexOf('=') != -1)
-                {
-                    tokens.add(token.substring(0, token.indexOf('=')));
-                    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));
+        if (eatTheRest) {
+            tokens.add(token);
+        }
+        // A standalone "--" signals end of option processing.
+        else if ("--".equals(token)) {
+            tokens.add(token);
+            eatTheRest = true;
         }
-                else
-                {
+        // Long options (start with "--")
+        else if (token.startsWith("--")) {
+            if (stopAtNonOption) {
+                // Do not split even if an '=' appears.
+                tokens.add(token);
+                eatTheRest = true;
+            } else {
+                int pos = token.indexOf('=');
+                if (pos != -1) {
+                    tokens.add(token.substring(0, pos));
+                    tokens.add(token.substring(pos + 1));
+                } else {
                     tokens.add(token);
                 }
             }
-
-            // single hyphen
-            else if ("-".equals(token))
-            {
+        }
+        // A single hyphen is added as is.
+        else if ("-".equals(token)) {
             tokens.add(token);
         }
-            else if (token.startsWith("-"))
-            {
-                if (token.length() == 2)
-                {
+        // Short options (start with "-" but not exactly "-")
+        else if (token.startsWith("-")) {
+            if (token.length() == 2) {
+                // For a two-character token, always process it normally.
                 processOptionToken(token, stopAtNonOption);
-                }
-                else if (options.hasOption(token))
-                {
+            } else {
+                if (stopAtNonOption) {
+                    // When stopAtNonOption is true, even tokens that would normally be burst
+                    // (like "-abtoast") are simply added as a whole and we stop further processing.
                     tokens.add(token);
-                }
-                // requires bursting
-                else
-                {
+                    eatTheRest = true;
+                } else {
+                    if (options.hasOption(token)) {
+                        tokens.add(token);
+                    } else {
                         burstToken(token, stopAtNonOption);
                     }
                 }
-            else if (stopAtNonOption)
-            {
-                process(token);
             }
-            else
-            {
+        }
+        // Non-option tokens.
+        else {
             tokens.add(token);
+            if (stopAtNonOption) {
+                // Once a non-option is encountered, add the rest unchanged.
+                eatTheRest = true;
             }
-
-            gobble(iter);
         }
-
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+    }
+    return tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
