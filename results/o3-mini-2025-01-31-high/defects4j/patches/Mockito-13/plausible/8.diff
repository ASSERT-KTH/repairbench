diff --git a/tmp/8941e4e7-20f1-4bfd-ad09-28efc1cf1ee9_buggy.java b/tmp/3fddd16d-cc76-4f7b-935a-e40b2e34fae0_fixed.java
index 5481b94..dd380e7 100644
--- a/tmp/8941e4e7-20f1-4bfd-ad09-28efc1cf1ee9_buggy.java
+++ b/tmp/3fddd16d-cc76-4f7b-935a-e40b2e34fae0_fixed.java
@@ -1,49 +1,41 @@
 public Object handle(Invocation invocation) throws Throwable {
     if (invocationContainerImpl.hasAnswersForStubbing()) {
         // stubbing voids with stubVoid() or doAnswer() style
-            InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress
-                            .getArgumentMatcherStorage(), invocation);
+        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(
+                mockingProgress.getArgumentMatcherStorage(), invocation);
         invocationContainerImpl.setMethodForStubbing(invocationMatcher);
         return null;
     }
+    
     VerificationMode verificationMode = mockingProgress.pullVerificationMode();
-
-        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),
-                        invocation);
-
+    InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(
+            mockingProgress.getArgumentMatcherStorage(), invocation);
     mockingProgress.validateState();
 
-        //if verificationMode is not null then someone is doing verify()        
     if (verificationMode != null) {
-            //We need to check if verification was started on the correct mock 
-            // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
-            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
+        if (verificationMode instanceof MockAwareVerificationMode &&
+            ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
             VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);
             verificationMode.verify(data);
             return null;
-                // this means there is an invocation on a different mock. Re-adding verification mode 
-                // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
+        } else {
+            // re-add verification mode because this invocation is on a different mock
+            mockingProgress.verificationStarted(verificationMode);
         }
     }
     
     invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
     OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
     mockingProgress.reportOngoingStubbing(ongoingStubbing);
 
     StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
-
     if (stubbedInvocation != null) {
         stubbedInvocation.captureArgumentsFrom(invocation);
         return stubbedInvocation.answer(invocation);
     } else {
         Object ret = mockSettings.getDefaultAnswer().answer(invocation);
-
-            // redo setting invocation for potential stubbing in case of partial
-            // mocks / spies.
-            // Without it, the real method inside 'when' might have delegated
-            // to other self method and overwrite the intended stubbed method
-            // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
+        // redo setting invocation for potential stubbing in case of partial mocks/spies
         invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
         return ret;
     }
 }
\ No newline at end of file
