diff --git a/tmp/79449e9f-92d3-4de0-aaf2-65ea1de0db74_buggy.java b/tmp/09d083e7-d371-4648-af4f-fe38d318db7b_fixed.java
index 5481b94..20e34aa 100644
--- a/tmp/79449e9f-92d3-4de0-aaf2-65ea1de0db74_buggy.java
+++ b/tmp/09d083e7-d371-4648-af4f-fe38d318db7b_fixed.java
@@ -1,49 +1,50 @@
 public Object handle(Invocation invocation) throws Throwable {
     if (invocationContainerImpl.hasAnswersForStubbing()) {
         // stubbing voids with stubVoid() or doAnswer() style
-            InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress
-                            .getArgumentMatcherStorage(), invocation);
+        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(
+                mockingProgress.getArgumentMatcherStorage(), invocation);
         invocationContainerImpl.setMethodForStubbing(invocationMatcher);
         return null;
     }
     VerificationMode verificationMode = mockingProgress.pullVerificationMode();
-
-        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),
-                        invocation);
+    InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(
+            mockingProgress.getArgumentMatcherStorage(), invocation);
 
     mockingProgress.validateState();
 
     // if verificationMode is not null then someone is doing verify()
     if (verificationMode != null) {
-            //We need to check if verification was started on the correct mock 
-            // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
-            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
+        if (verificationMode instanceof MockAwareVerificationMode) {
+            if (((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);
                 verificationMode.verify(data);
                 return null;
-                // this means there is an invocation on a different mock. Re-adding verification mode 
-                // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
+            } else {
+                // this invocation is on a different mock than expected,
+                // so re-add the verification mode so that it is not lost
+                mockingProgress.verificationMode(verificationMode);
+            }
+        } else {
+            // re-add verification mode if it is not mock-aware (defensive)
+            mockingProgress.verificationMode(verificationMode);
         }
     }
     
     invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
     OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
     mockingProgress.reportOngoingStubbing(ongoingStubbing);
 
     StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
 
     if (stubbedInvocation != null) {
         stubbedInvocation.captureArgumentsFrom(invocation);
         return stubbedInvocation.answer(invocation);
     } else {
         Object ret = mockSettings.getDefaultAnswer().answer(invocation);
 
         // redo setting invocation for potential stubbing in case of partial
-            // mocks / spies.
-            // Without it, the real method inside 'when' might have delegated
-            // to other self method and overwrite the intended stubbed method
-            // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
+        // mocks / spies to avoid runtime exceptions that validate the return type.
         invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
         return ret;
     }
 }
\ No newline at end of file
