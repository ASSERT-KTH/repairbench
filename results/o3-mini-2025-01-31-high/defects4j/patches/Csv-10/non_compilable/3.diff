diff --git a/tmp/90d1adf6-f7f2-4f78-a83a-32d2c20082a1_buggy.java b/tmp/6f673cb1-eb61-417f-9370-4536518e16ee_fixed.java
index 97f28e5..692a43b 100644
--- a/tmp/90d1adf6-f7f2-4f78-a83a-32d2c20082a1_buggy.java
+++ b/tmp/6f673cb1-eb61-417f-9370-4536518e16ee_fixed.java
@@ -1,26 +1,15 @@
-    /**
-     * Creates a printer that will print values to the given stream following the CSVFormat.
-     * <p>
-     * Currently, only a pure encapsulation format or a pure escaping format is supported. Hybrid formats (encapsulation
-     * and escaping with a different character) are not supported.
-     * </p>
-     * 
-     * @param out
-     *        stream to which to print. Must not be null.
-     * @param format
-     *        the CSV format. Must not be null.
-     * @throws IOException
-     *         thrown if the optional header cannot be printed.
-     * @throws IllegalArgumentException
-     *         thrown if the parameters of the format are inconsistent or if either out or format are null.
-     */
 public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {
     Assertions.notNull(out, "out");
     Assertions.notNull(format, "format");
 
     this.out = out;
     this.format = format;
     this.format.validate();
-        // TODO: Is it a good idea to do this here instead of on the first call to a print method?
-        // It seems a pain to have to track whether the header has already been printed or not.
+
+    // If a header is defined and we're not configured to skip it, print it immediately.
+    if (this.format.getHeader() != null && this.format.getHeader().length > 0 && !this.format.getSkipHeaderRecord()) {
+        printRecord(this.format.getHeader());
+        // Mark that the header has been printed so subsequent prints do not reprint it.
+        this.headerPrinted = true;
+    }
 }
\ No newline at end of file
