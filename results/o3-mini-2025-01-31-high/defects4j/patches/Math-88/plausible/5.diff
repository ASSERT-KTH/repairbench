diff --git a/tmp/5fca2dcf-2c24-4493-b300-0a24dcba4f75_buggy.java b/tmp/0bcef104-3d29-407a-a4af-28eff12b0df0_fixed.java
index 544303b..f803c2b 100644
--- a/tmp/5fca2dcf-2c24-4493-b300-0a24dcba4f75_buggy.java
+++ b/tmp/0bcef104-3d29-407a-a4af-28eff12b0df0_fixed.java
@@ -1,29 +1,23 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    Integer artRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
+    double mostNegative = (artRow == null ? 0 : getEntry(artRow, getRhsOffset()));
     for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+        double value = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()));
+        if (!restrictToNonNegative) {
+            value -= mostNegative;
         }
+        // If the same basic row was already used for an earlier decision variable,
+        // then we must choose that one and set the current value to 0.
+        for (int j = 0; j < i; j++) {
+            Integer prevBasicRow = getBasicRow(getNumObjectiveFunctions() + j);
+            if (prevBasicRow != null && prevBasicRow.equals(basicRow)) {
+                value = 0;
+                break;
             }
         }
+        coefficients[i] = value;
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
