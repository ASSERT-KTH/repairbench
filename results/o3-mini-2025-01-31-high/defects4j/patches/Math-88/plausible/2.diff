diff --git a/tmp/7e2f0724-7ad1-44cb-9b6a-a184249d7d5d_buggy.java b/tmp/6b30faa4-d613-41b8-ac39-3dd0175c1a9f_fixed.java
index 544303b..b0bbe2b 100644
--- a/tmp/7e2f0724-7ad1-44cb-9b6a-a184249d7d5d_buggy.java
+++ b/tmp/6b30faa4-d613-41b8-ac39-3dd0175c1a9f_fixed.java
@@ -1,29 +1,26 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    // Get the offset from the last column (this may be nonzero if a variable was shifted).
+    Integer lastBasicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
+    double offset = lastBasicRow == null ? 0 : getEntry(lastBasicRow, getRhsOffset());
     for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+        double value = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        if (!restrictToNonNegative) {
+            value -= offset;
+        }
+        // If more than one decision variable is basic in the same row,
+        // we choose the one with the smallest index and set the others to 0.
         if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
+            for (int j = 0; j < i; j++) {
+                Integer earlierBasic = getBasicRow(getNumObjectiveFunctions() + j);
+                if (basicRow.equals(earlierBasic)) {
+                    value = 0;
+                    break;
                 }
             }
         }
+        coefficients[i] = value;
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
