diff --git a/tmp/44a4dc2b-f881-4424-a040-320054ad93ae_buggy.java b/tmp/49d63d0a-ccbb-49a7-88fd-3c4c4f61c632_fixed.java
index 544303b..38014cc 100644
--- a/tmp/44a4dc2b-f881-4424-a040-320054ad93ae_buggy.java
+++ b/tmp/49d63d0a-ccbb-49a7-88fd-3c4c4f61c632_fixed.java
@@ -1,29 +1,25 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    // Compute the offset (mostNegative) from the extra row if needed.
+    Integer offsetRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
+    double offset = (offsetRow == null ? 0 : getEntry(offsetRow, getRhsOffset()));
+    
     for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+        double value = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()))
+                       - (restrictToNonNegative ? 0 : offset);
+        // If more than one decision variable appears to be basic in the same row,
+        // only assign the value to the first occurrence.
         if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
+            for (int k = 0; k < i; k++) {
+                Integer otherRow = getBasicRow(getNumObjectiveFunctions() + k);
+                if (otherRow != null && otherRow.equals(basicRow)) {
+                    value = 0;
+                    break;
                 }
             }
         }
+        coefficients[i] = value;
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
