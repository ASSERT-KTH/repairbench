diff --git a/tmp/284f35fe-924b-4466-a2be-f2d113ea0201_buggy.java b/tmp/10d79452-9f60-46fb-bb68-521769233669_fixed.java
index 544303b..18655b4 100644
--- a/tmp/284f35fe-924b-4466-a2be-f2d113ea0201_buggy.java
+++ b/tmp/10d79452-9f60-46fb-bb68-521769233669_fixed.java
@@ -1,29 +1,20 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    // When a Phase I shift was performed, subtract its value.
+    Integer artRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
+    double shift = (artRow == null ? 0.0 : getEntry(artRow, getRhsOffset()));
+
+    // To avoid using the same row twice when two variables share the same basic row,
+    // record which rows have already been “used.”
+    Set<Integer> usedRows = new HashSet<Integer>();
     for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
-                    }
-                }
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+        if (basicRow != null && !usedRows.contains(basicRow)) {
+            coefficients[i] = getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0.0 : shift);
+            usedRows.add(basicRow);
+        } else {
+            coefficients[i] = 0.0;
         }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
