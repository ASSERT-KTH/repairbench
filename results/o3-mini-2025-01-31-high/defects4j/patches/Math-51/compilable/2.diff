diff --git a/tmp/28581b47-53db-49e9-81de-3b84661ed32b_buggy.java b/tmp/b1e8c36c-37c5-4124-bcf0-af1c465dc152_fixed.java
index 6b09955..e1e8780 100644
--- a/tmp/28581b47-53db-49e9-81de-3b84661ed32b_buggy.java
+++ b/tmp/b1e8c36c-37c5-4124-bcf0-af1c465dc152_fixed.java
@@ -1,121 +1,129 @@
 /** {@inheritDoc} */
 protected final double doSolve() {
     // Get initial solution
     double x0 = getMin();
     double x1 = getMax();
     double f0 = computeObjectiveValue(x0);
     double f1 = computeObjectiveValue(x1);
 
-        // If one of the bounds is the exact root, return it. Since these are
-        // not under-approximations or over-approximations, we can return them
-        // regardless of the allowed solutions.
+    // If one of the bounds is the exact root, return it.
     if (f0 == 0.0) {
         return x0;
     }
     if (f1 == 0.0) {
         return x1;
     }
 
-        // Verify bracketing of initial solution.
+    // Verify that the initial interval brackets the root.
     verifyBracketing(x0, x1);
 
-        // Get accuracies.
+    // Get accuracy tolerances.
     final double ftol = getFunctionValueAccuracy();
     final double atol = getAbsoluteAccuracy();
     final double rtol = getRelativeAccuracy();
 
-        // Keep track of inverted intervals, meaning that the left bound is
-        // larger than the right bound.
-        boolean inverted = false;
+    // This flag is used to record which endpoint was updated
+    // in the previous iteration:
+    //   true  => the lower bound (x0) was updated last time,
+    //   false => the upper bound (x1) was updated last time.
+    boolean leftUpdated = false;
+
+    double x;     // current interpolation
+    double fx;    // function value at x
 
-        // Keep finding better approximations.
     while (true) {
-            // Calculate the next approximation.
-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
-            final double fx = computeObjectiveValue(x);
+        // Compute the false position (regula falsi) approximation.
+        // (This is equivalent to: x = (x0*f1 - x1*f0) / (f1 - f0))
+        x = x1 - (f1 * (x1 - x0)) / (f1 - f0);
+        fx = computeObjectiveValue(x);
 
-            // If the new approximation is the exact root, return it. Since
-            // this is not an under-approximation or an over-approximation,
-            // we can return it regardless of the allowed solutions.
         if (fx == 0.0) {
             return x;
         }
 
-            // Update the bounds with the new approximation.
-            if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
-                x0 = x1;
-                f0 = f1;
-                inverted = !inverted;
-            } else {
-                switch (method) {
-                case ILLINOIS:
-                    f0 *= 0.5;
-                    break;
-                case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
-                    break;
-                        // Update formula cannot make any progress: Update the
-                        // search interval.
-                default:
-                    // Should never happen.
-                }
-            }
-            // Update from [x0, x1] to [x0, x].
+        // Decide which subinterval to keep.
+        // In a properly bracketing interval [x0, x1] (with f(x0)*f(x1) < 0)
+        // one of f0 or f1 is negative.
+        // If f0 and fx have opposite signs, then the root is between x0 and x;
+        // so we update the upper bound.
+        // Otherwise, f0 and fx have the same sign and the sign change is between
+        // x and x1, so we update the lower bound.
+        if (f0 * fx < 0.0) {
+            // Root is between x0 and x: update the upper bound.
             x1 = x;
             f1 = fx;
+            if (!leftUpdated) {
+                // Last update was also on the upper side, so adjust the stationary endpoint.
+                switch (method) {
+                    case ILLINOIS:
+                        f0 *= 0.5;
+                        break;
+                    case PEGASUS:
+                        f0 *= f1 / (f1 + fx);
+                        break;
+                    default:
+                        throw new MathInternalError();
+                }
+            } else {
+                // Changing sides: record that we just updated the upper endpoint.
+                leftUpdated = false;
+            }
+        } else {
+            // Root is between x and x1: update the lower bound.
+            x0 = x;
+            f0 = fx;
+            if (leftUpdated) {
+                // Consecutive update on the lower side: adjust the stationary endpoint.
+                switch (method) {
+                    case ILLINOIS:
+                        f1 *= 0.5;
+                        break;
+                    case PEGASUS:
+                        f1 *= f0 / (f0 + fx);
+                        break;
+                    default:
+                        throw new MathInternalError();
+                }
+            } else {
+                // Record that we just updated the lower bound.
+                leftUpdated = true;
+            }
+        }
 
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
-            if (FastMath.abs(f1) <= ftol) {
+        // Check whether the function value is close enough to zero.
+        if (FastMath.abs(fx) <= ftol) {
             switch (allowed) {
                 case ANY_SIDE:
-                    return x1;
+                    return x;
                 case LEFT_SIDE:
-                    if (inverted) {
-                        return x1;
-                    }
-                    break;
+                    return leftUpdated ? x0 : x1;
                 case RIGHT_SIDE:
-                    if (!inverted) {
-                        return x1;
-                    }
-                    break;
+                    return leftUpdated ? x1 : x0;
                 case BELOW_SIDE:
-                    if (f1 <= 0) {
-                        return x1;
-                    }
-                    break;
+                    return (fx <= 0) ? x : (leftUpdated ? x0 : x1);
                 case ABOVE_SIDE:
-                    if (f1 >= 0) {
-                        return x1;
-                    }
-                    break;
+                    return (fx >= 0) ? x : (leftUpdated ? x0 : x1);
                 default:
                     throw new MathInternalError();
             }
         }
 
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                     atol)) {
+        // Check whether the interval width is within the allowed tolerance.
+        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
             switch (allowed) {
                 case ANY_SIDE:
-                    return x1;
+                    return x;
                 case LEFT_SIDE:
-                    return inverted ? x1 : x0;
+                    return leftUpdated ? x0 : x1;
                 case RIGHT_SIDE:
-                    return inverted ? x0 : x1;
+                    return leftUpdated ? x1 : x0;
                 case BELOW_SIDE:
-                    return (f1 <= 0) ? x1 : x0;
+                    return (fx <= 0) ? x : (leftUpdated ? x0 : x1);
                 case ABOVE_SIDE:
-                    return (f1 >= 0) ? x1 : x0;
+                    return (fx >= 0) ? x : (leftUpdated ? x0 : x1);
                 default:
                     throw new MathInternalError();
             }
         }
     }
 }
\ No newline at end of file
