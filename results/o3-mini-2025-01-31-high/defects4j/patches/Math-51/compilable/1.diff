diff --git a/tmp/0a66ccb9-274a-4f2d-81c6-6073620915c8_buggy.java b/tmp/75feb77c-b870-47b0-84c3-0ae735fdc700_fixed.java
index 6b09955..c486880 100644
--- a/tmp/0a66ccb9-274a-4f2d-81c6-6073620915c8_buggy.java
+++ b/tmp/75feb77c-b870-47b0-84c3-0ae735fdc700_fixed.java
@@ -1,121 +1,124 @@
 /** {@inheritDoc} */
 protected final double doSolve() {
     // Get initial solution
     double x0 = getMin();
     double x1 = getMax();
     double f0 = computeObjectiveValue(x0);
     double f1 = computeObjectiveValue(x1);
 
-        // If one of the bounds is the exact root, return it. Since these are
-        // not under-approximations or over-approximations, we can return them
-        // regardless of the allowed solutions.
+    // If one of the bounds is the exact root, return it.
     if (f0 == 0.0) {
         return x0;
     }
     if (f1 == 0.0) {
         return x1;
     }
 
     // Verify bracketing of initial solution.
     verifyBracketing(x0, x1);
 
     // Get accuracies.
     final double ftol = getFunctionValueAccuracy();
     final double atol = getAbsoluteAccuracy();
     final double rtol = getRelativeAccuracy();
 
-        // Keep track of inverted intervals, meaning that the left bound is
-        // larger than the right bound.
+    // In this implementation the two endpoints are maintained as follows:
+    //   x0 is the lower bound and x1 is the upper bound.
+    // The false position formula used is
+    //      x = x1 - f1*(x1 - x0)/(f1 - f0)
+    // After the new candidate x is computed we decide which endpoint to replace.
+    // Standard (Illinois/Pegasus) regula falsi would replace the endpoint whose function
+    // value has the same sign as f(x). In our corrected code the test is performed using f0.
+    // (That is, if f0 and f(x) have opposite signs, then the root lies between x0 and x,
+    //  so the new candidate becomes the upper bound; otherwise, it becomes the lower bound.)
+    //
+    // We'll use the 'inverted' flag to later choose which bound to return if the interval
+    // is small or the function value is nearly zero.
     boolean inverted = false;
 
     // Keep finding better approximations.
     while (true) {
-            // Calculate the next approximation.
+        // Compute the next approximation using the false position formula.
         final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
         final double fx = computeObjectiveValue(x);
 
-            // If the new approximation is the exact root, return it. Since
-            // this is not an under-approximation or an over-approximation,
-            // we can return it regardless of the allowed solutions.
+        // If the new approximation is the exact root, return it.
         if (fx == 0.0) {
             return x;
         }
 
         // Update the bounds with the new approximation.
-            if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
-                x0 = x1;
-                f0 = f1;
-                inverted = !inverted;
+        // (Note: f0 and f1 have opposite signs.)
+        if (f0 * fx < 0) {
+            // The sign change is between x0 and x, so the new upper bound should be x.
+            x1 = x;
+            f1 = fx;
+            inverted = false;
         } else {
+            // Otherwise the sign change is between x and x1, so update the lower bound.
+            x0 = x;
+            f0 = fx;
+            // Apply the Illinois/Pegasus modification on the endpoint that stayed fixed.
             switch (method) {
                 case ILLINOIS:
-                    f0 *= 0.5;
+                    f1 *= 0.5;
                     break;
                 case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
+                    // (This scaling is equivalent to multiplying by 1/2 when f0==fx.)
+                    f1 *= f0 / (f0 + fx);
                     break;
-                        // Update formula cannot make any progress: Update the
-                        // search interval.
                 default:
                     // Should never happen.
             }
+            inverted = true;
         }
-            // Update from [x0, x1] to [x0, x].
-            x1 = x;
-            f1 = fx;
 
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
+        // If the function value is sufficiently small, return the current approximation.
         if (FastMath.abs(f1) <= ftol) {
             switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     if (inverted) {
                         return x1;
                     }
                     break;
                 case RIGHT_SIDE:
                     if (!inverted) {
                         return x1;
                     }
                     break;
                 case BELOW_SIDE:
                     if (f1 <= 0) {
                         return x1;
                     }
                     break;
                 case ABOVE_SIDE:
                     if (f1 >= 0) {
                         return x1;
                     }
                     break;
                 default:
                     throw new MathInternalError();
             }
         }
 
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                     atol)) {
+        // If the current interval is within the desired accuracies, return one of the bounds.
+        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
             switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
                     return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
                     return (f1 >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
             }
         }
     }
 }
\ No newline at end of file
