diff --git a/tmp/daf79e69-13fc-4f53-821b-e103e3ab17a4_buggy.java b/tmp/dc00f84d-aed2-49f9-90dc-0f1d17a56222_fixed.java
index 6b09955..a8ca5be 100644
--- a/tmp/daf79e69-13fc-4f53-821b-e103e3ab17a4_buggy.java
+++ b/tmp/dc00f84d-aed2-49f9-90dc-0f1d17a56222_fixed.java
@@ -1,121 +1,113 @@
 /** {@inheritDoc} */
 protected final double doSolve() {
-        // Get initial solution
+    // Initial endpoints
     double x0 = getMin();
     double x1 = getMax();
     double f0 = computeObjectiveValue(x0);
     double f1 = computeObjectiveValue(x1);
 
-        // If one of the bounds is the exact root, return it. Since these are
-        // not under-approximations or over-approximations, we can return them
-        // regardless of the allowed solutions.
+    // Shortcut if an endpoint is exactly a root.
     if (f0 == 0.0) {
         return x0;
     }
     if (f1 == 0.0) {
         return x1;
     }
 
-        // Verify bracketing of initial solution.
+    // Check that the initial interval brackets a root.
     verifyBracketing(x0, x1);
 
-        // Get accuracies.
+    // Tolerances.
     final double ftol = getFunctionValueAccuracy();
     final double atol = getAbsoluteAccuracy();
     final double rtol = getRelativeAccuracy();
 
-        // Keep track of inverted intervals, meaning that the left bound is
-        // larger than the right bound.
-        boolean inverted = false;
-
-        // Keep finding better approximations.
+    // We now maintain the invariant that the root is bracketed
+    // by x0 (left) and x1 (right). For a well‐behaved function,
+    // one of f0 and f1 is negative and the other positive.
+    // In the usual false position method the candidate is computed as:
+    //    x = x1 - f1 * (x1 - x0) / (f1 - f0)
+    // However, when the function is very steep at one end the method can stall.
+    // Modified methods (Illinois / Pegasus) counteract this by scaling the
+    // function value at the endpoint that does not change.
     while (true) {
-            // Calculate the next approximation.
-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
+        // Compute the next approximation via the false position formula.
+        final double x = x1 - (f1 * (x1 - x0)) / (f1 - f0);
         final double fx = computeObjectiveValue(x);
 
-            // If the new approximation is the exact root, return it. Since
-            // this is not an under-approximation or an over-approximation,
-            // we can return it regardless of the allowed solutions.
+        // If we hit an exact root, return immediately.
         if (fx == 0.0) {
             return x;
         }
 
-            // Update the bounds with the new approximation.
-            if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
-                x0 = x1;
-                f0 = f1;
-                inverted = !inverted;
+        // Termination by function value.
+        if (FastMath.abs(fx) <= ftol) {
+            switch (allowed) {
+                case ANY_SIDE:
+                    return x;
+                case LEFT_SIDE:
+                    return x0;
+                case RIGHT_SIDE:
+                    return x1;
+                case BELOW_SIDE:
+                    return (fx <= 0) ? x : x0;
+                case ABOVE_SIDE:
+                    return (fx >= 0) ? x : x1;
+                default:
+                    throw new MathInternalError();
+            }
+        }
+
+        // Termination by interval size.
+        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x), atol)) {
+            switch (allowed) {
+                case ANY_SIDE:
+                    return x;
+                case LEFT_SIDE:
+                    return x0;
+                case RIGHT_SIDE:
+                    return x1;
+                case BELOW_SIDE:
+                    return (fx <= 0) ? x : x0;
+                case ABOVE_SIDE:
+                    return (fx >= 0) ? x : x1;
+                default:
+                    throw new MathInternalError();
+            }
+        }
+
+        // Update the bracketing interval:
+        // (Recall that initially one endpoint is negative and the other positive.)
+        // Here we use the standard bracketing rule:
+        //   If f(x0) and f(x) have opposite signs, then the root lies in [x0, x];
+        //   otherwise it lies in [x, x1].
+        if (f0 * fx < 0) {
+            // New interval is [x0, x] where f0 and fx straddle the root.
+            x1 = x;
+            f1 = fx;
+            // In this branch the left endpoint remains fixed.
+            // If the same endpoint stays fixed over successive iterations,
+            // the Illinois and Pegasus schemes leave their mark by scaling that endpoint’s f-value.
+            // (No scaling is applied in the step where the endpoint actually changes.)
         } else {
+            // New interval is [x, x1]. In this case the left endpoint is updated.
+            x0 = x;
+            f0 = fx;
+            // To prevent slow convergence the modification scales the function at
+            // the endpoint that did not change. That is, since x1 is unchanged here,
+            // we modify f1.
             switch (method) {
                 case ILLINOIS:
-                    f0 *= 0.5;
+                    f1 *= 0.5;
                     break;
                 case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
+                    // f0 and fx have the same sign here.
+                    // Adjust f1 by a factor that diminishes its influence.
+                    f1 *= f0 / (f0 + fx);
                     break;
-                        // Update formula cannot make any progress: Update the
-                        // search interval.
                 default:
                     // Should never happen.
             }
         }
-            // Update from [x0, x1] to [x0, x].
-            x1 = x;
-            f1 = fx;
-
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
-            if (FastMath.abs(f1) <= ftol) {
-                switch (allowed) {
-                case ANY_SIDE:
-                    return x1;
-                case LEFT_SIDE:
-                    if (inverted) {
-                        return x1;
-                    }
-                    break;
-                case RIGHT_SIDE:
-                    if (!inverted) {
-                        return x1;
-                    }
-                    break;
-                case BELOW_SIDE:
-                    if (f1 <= 0) {
-                        return x1;
-                    }
-                    break;
-                case ABOVE_SIDE:
-                    if (f1 >= 0) {
-                        return x1;
-                    }
-                    break;
-                default:
-                    throw new MathInternalError();
-                }
-            }
-
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                     atol)) {
-                switch (allowed) {
-                case ANY_SIDE:
-                    return x1;
-                case LEFT_SIDE:
-                    return inverted ? x1 : x0;
-                case RIGHT_SIDE:
-                    return inverted ? x0 : x1;
-                case BELOW_SIDE:
-                    return (f1 <= 0) ? x1 : x0;
-                case ABOVE_SIDE:
-                    return (f1 >= 0) ? x1 : x0;
-                default:
-                    throw new MathInternalError();
-                }
-            }
     }
 }
\ No newline at end of file
