diff --git a/tmp/bd5c14c3-304e-414f-a2a6-c6f49129aacb_buggy.java b/tmp/ce0a9e0d-b237-4308-9090-6f9b1c757a43_fixed.java
index 6b09955..3aef559 100644
--- a/tmp/bd5c14c3-304e-414f-a2a6-c6f49129aacb_buggy.java
+++ b/tmp/ce0a9e0d-b237-4308-9090-6f9b1c757a43_fixed.java
@@ -1,121 +1,107 @@
 /** {@inheritDoc} */
 protected final double doSolve() {
     // Get initial solution
     double x0 = getMin();
     double x1 = getMax();
     double f0 = computeObjectiveValue(x0);
     double f1 = computeObjectiveValue(x1);
 
-        // If one of the bounds is the exact root, return it. Since these are
-        // not under-approximations or over-approximations, we can return them
-        // regardless of the allowed solutions.
+    // If one of the bounds is the exact root, return it.
     if (f0 == 0.0) {
         return x0;
     }
     if (f1 == 0.0) {
         return x1;
     }
 
-        // Verify bracketing of initial solution.
+    // Verify that the initial interval brackets a root.
     verifyBracketing(x0, x1);
 
-        // Get accuracies.
+    // Get tolerances.
     final double ftol = getFunctionValueAccuracy();
     final double atol = getAbsoluteAccuracy();
     final double rtol = getRelativeAccuracy();
 
-        // Keep track of inverted intervals, meaning that the left bound is
-        // larger than the right bound.
-        boolean inverted = false;
+    // This flag records if the *lower bound* was updated in the previous iteration.
+    // That is used to damp the effect of updating the same endpoint consecutively.
+    boolean lowerBoundUpdated = false;
 
-        // Keep finding better approximations.
     while (true) {
-            // Calculate the next approximation.
+        // Compute the candidate using the false position (secant) formula.
         final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
         final double fx = computeObjectiveValue(x);
 
-            // If the new approximation is the exact root, return it. Since
-            // this is not an under-approximation or an over-approximation,
-            // we can return it regardless of the allowed solutions.
+        // If we found an exact zero then we are done.
         if (fx == 0.0) {
             return x;
         }
 
-            // Update the bounds with the new approximation.
-            if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
-                x0 = x1;
-                f0 = f1;
-                inverted = !inverted;
+        // Standard false position update:
+        //   Given a bracketing interval [x0, x1] where f(x0) and f(x1) have opposite signs,
+        //   if f(x0) and f(x) have opposite signs then the root lies in [x0, x];
+        //   otherwise the sign change is in [x, x1].
+        if (f0 * fx < 0) {
+            // The root is in [x0, x]. Replace the upper bound.
+            x1 = x;
+            f1 = fx;
+            lowerBoundUpdated = false; // we just updated the upper endpoint
         } else {
+            // The root is in [x, x1]. Replace the lower bound.
+            x0 = x;
+            f0 = fx;
+            // If we update the lower bound two iterations consecutively,
+            // apply a damping factor (Illinois/ Pegasus modification) to the opposite endpoint.
+            if (lowerBoundUpdated) {
                 switch (method) {
                     case ILLINOIS:
-                    f0 *= 0.5;
+                        f1 *= 0.5;
                         break;
                     case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
+                        // In Pegasus, the damping factor is computed so that f1 becomes f1 * f0/(f0 + fx).
+                        // Note here that after update f0 == fx so the factor is Â½.
+                        f1 *= f0 / (f0 + fx);
                         break;
-                        // Update formula cannot make any progress: Update the
-                        // search interval.
                     default:
                         // Should never happen.
                 }
             }
-            // Update from [x0, x1] to [x0, x].
-            x1 = x;
-            f1 = fx;
+            lowerBoundUpdated = true;
+        }
 
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
-            if (FastMath.abs(f1) <= ftol) {
+        // Termination based on function value.
+        if (FastMath.abs(fx) <= ftol) {
             switch (allowed) {
                 case ANY_SIDE:
-                    return x1;
+                    return x;
                 case LEFT_SIDE:
-                    if (inverted) {
-                        return x1;
-                    }
-                    break;
+                    return x0;
                 case RIGHT_SIDE:
-                    if (!inverted) {
                     return x1;
-                    }
-                    break;
                 case BELOW_SIDE:
-                    if (f1 <= 0) {
-                        return x1;
-                    }
-                    break;
+                    return (fx <= 0) ? x : x0;
                 case ABOVE_SIDE:
-                    if (f1 >= 0) {
-                        return x1;
-                    }
-                    break;
+                    return (fx >= 0) ? x : x1;
                 default:
                     throw new MathInternalError();
             }
         }
 
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                     atol)) {
+        // Termination based on interval width.
+        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
             switch (allowed) {
                 case ANY_SIDE:
-                    return x1;
+                    return x;
                 case LEFT_SIDE:
-                    return inverted ? x1 : x0;
+                    return x0;
                 case RIGHT_SIDE:
-                    return inverted ? x0 : x1;
+                    return x1;
                 case BELOW_SIDE:
-                    return (f1 <= 0) ? x1 : x0;
+                    return (fx <= 0) ? x : x0;
                 case ABOVE_SIDE:
-                    return (f1 >= 0) ? x1 : x0;
+                    return (fx >= 0) ? x : x1;
                 default:
                     throw new MathInternalError();
             }
         }
     }
 }
\ No newline at end of file
