diff --git a/tmp/3d5e5761-5932-42c6-bf36-cfd94a0f47b5_buggy.java b/tmp/b731bda4-c8f2-4974-8cae-856303c63cbc_fixed.java
index b36c3f0..e873028 100644
--- a/tmp/3d5e5761-5932-42c6-bf36-cfd94a0f47b5_buggy.java
+++ b/tmp/b731bda4-c8f2-4974-8cae-856303c63cbc_fixed.java
@@ -1,58 +1,65 @@
 /**
  * Returns true if calls to this function have side effects.
  *
-   * @param callNode The call node to inspected.
+ * @param callNode The call node to inspect.
  * @param compiler A compiler object to provide program state changing
  *     context information. Can be null.
  */
 static boolean functionCallHasSideEffects(
     Node callNode, @Nullable AbstractCompiler compiler) {
   if (callNode.getType() != Token.CALL) {
     throw new IllegalStateException(
         "Expected CALL node, got " + Token.name(callNode.getType()));
   }
 
   if (callNode.isNoSideEffectsCall()) {
     return false;
   }
 
   Node nameNode = callNode.getFirstChild();
 
   // Built-in functions with no side effects.
   if (nameNode.getType() == Token.NAME) {
     String name = nameNode.getString();
     if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
       return false;
     }
   } else if (nameNode.getType() == Token.GETPROP) {
-      if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
-                nameNode.getLastChild().getString())) {
-        return false;
-      }
-
-      if (callNode.isOnlyModifiesThisCall()
-          && evaluatesToLocalValue(nameNode.getFirstChild())) {
-        return false;
-      }
-
     // Functions in the "Math" namespace have no side effects.
+    Node target = nameNode.getFirstChild();
+    if (target != null &&
+        target.getType() == Token.NAME &&
+        "Math".equals(target.getString())) {
+      return false;
+    }
+
+    if (callNode.hasOneChild() &&
+        OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
+            nameNode.getLastChild().getString())) {
+      return false;
+    }
+
+    if (callNode.isOnlyModifiesThisCall() &&
+        evaluatesToLocalValue(nameNode.getFirstChild())) {
+      return false;
+    }
 
     if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
-        if (nameNode.getFirstChild().getType() == Token.REGEXP
-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+      if (nameNode.getFirstChild().getType() == Token.REGEXP &&
+          REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
         return false;
-        } else if (nameNode.getFirstChild().getType() == Token.STRING
-            && STRING_REGEXP_METHODS.contains(
+      } else if (nameNode.getFirstChild().getType() == Token.STRING &&
+                 STRING_REGEXP_METHODS.contains(
                      nameNode.getLastChild().getString())) {
         Node param = nameNode.getNext();
         if (param != null &&
-              (param.getType() == Token.STRING
-                  || param.getType() == Token.REGEXP))
+            (param.getType() == Token.STRING ||
+             param.getType() == Token.REGEXP)) {
           return false;
         }
       }
     }
+  }
 
   return true;
 }
\ No newline at end of file
