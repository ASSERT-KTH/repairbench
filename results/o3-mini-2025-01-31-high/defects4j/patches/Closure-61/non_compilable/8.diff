diff --git a/tmp/1318c876-d1cf-44f8-9a79-7a2654b11cb2_buggy.java b/tmp/b1fe5b54-4a55-42c4-bd28-c6a2f5241201_fixed.java
index b36c3f0..9a349d3 100644
--- a/tmp/1318c876-d1cf-44f8-9a79-7a2654b11cb2_buggy.java
+++ b/tmp/b1fe5b54-4a55-42c4-bd28-c6a2f5241201_fixed.java
@@ -1,58 +1,52 @@
-  /**
-   * Returns true if calls to this function have side effects.
-   *
-   * @param callNode The call node to inspected.
-   * @param compiler A compiler object to provide program state changing
-   *     context information. Can be null.
-   */
-  static boolean functionCallHasSideEffects(
-      Node callNode, @Nullable AbstractCompiler compiler) {
+static boolean functionCallHasSideEffects(Node callNode, @Nullable AbstractCompiler compiler) {
   if (callNode.getType() != Token.CALL) {
     throw new IllegalStateException(
         "Expected CALL node, got " + Token.name(callNode.getType()));
   }
 
   if (callNode.isNoSideEffectsCall()) {
     return false;
   }
 
   Node nameNode = callNode.getFirstChild();
 
   // Built-in functions with no side effects.
   if (nameNode.getType() == Token.NAME) {
     String name = nameNode.getString();
     if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
       return false;
     }
   } else if (nameNode.getType() == Token.GETPROP) {
-      if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
-                nameNode.getLastChild().getString())) {
+    // If the property call is on the Math object then it is side-effect free.
+    Node target = nameNode.getFirstChild();
+    if (target != null && target.isName() && "Math".equals(target.getString())) {
       return false;
     }
 
-      if (callNode.isOnlyModifiesThisCall()
-          && evaluatesToLocalValue(nameNode.getFirstChild())) {
+    if (callNode.hasOneChild() &&
+        OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())) {
       return false;
     }
 
-      // Functions in the "Math" namespace have no side effects.
+    if (callNode.isOnlyModifiesThisCall() &&
+        evaluatesToLocalValue(nameNode.getFirstChild())) {
+      return false;
+    }
 
     if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
-        if (nameNode.getFirstChild().getType() == Token.REGEXP
-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+      if (nameNode.getFirstChild().getType() == Token.REGEXP &&
+          REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
         return false;
-        } else if (nameNode.getFirstChild().getType() == Token.STRING
-            && STRING_REGEXP_METHODS.contains(
-                nameNode.getLastChild().getString())) {
+      } else if (nameNode.getFirstChild().getType() == Token.STRING &&
+          STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
         Node param = nameNode.getNext();
         if (param != null &&
-              (param.getType() == Token.STRING
-                  || param.getType() == Token.REGEXP))
+            (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) {
           return false;
         }
       }
     }
+  }
 
   return true;
 }
\ No newline at end of file
