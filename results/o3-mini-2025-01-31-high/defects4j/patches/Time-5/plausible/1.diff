diff --git a/tmp/825c8571-f2a1-4319-96f9-39a7c70acf3f_buggy.java b/tmp/99926e47-e0fa-401a-adbd-306790d6bbc3_fixed.java
index dbda381..4c9db54 100644
--- a/tmp/825c8571-f2a1-4319-96f9-39a7c70acf3f_buggy.java
+++ b/tmp/99926e47-e0fa-401a-adbd-306790d6bbc3_fixed.java
@@ -1,54 +1,48 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
+    long millis = getMillis();
+    millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;
+    millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;
+    millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;
+    millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;
+    millis += ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK;
     Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
-        int years = getYears();
-        int months = getMonths();
-        if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
-            }
-            if (months != 0) {
-                result = result.withMonths(months);
+
+    // Save the original year/month values, which were not converted into millis.
+    int origYears = getYears();
+    int origMonths = getMonths();
+    if (origYears != 0 || origMonths != 0) {
+        // Two cases: when both years and months are supported,
+        // perform the typical normalization (months normalized to 0-11),
+        // otherwise, if one field is not supported, merge its value into the next field.
+        if (type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {
+            // Normalize months so that they are in the range 0 to 11.
+            int normalizedYears = FieldUtils.safeAdd(origYears, origMonths / 12);
+            int normalizedMonths = origMonths % 12;
+            if (normalizedYears != 0) {
+                result = result.withYears(normalizedYears);
+            }
+            if (normalizedMonths != 0) {
+                result = result.withMonths(normalizedMonths);
+            }
+        }
+        else if (!type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {
+            // When the target type does not support years, merge years into months.
+            int totalMonths = FieldUtils.safeAdd(origYears * 12, origMonths);
+            result = result.withMonths(totalMonths);
+        }
+        else if (type.isSupported(DurationFieldType.years()) && !type.isSupported(DurationFieldType.months())) {
+            // When the target type supports years but not months, the months value must divide evenly into years.
+            if (origMonths % 12 != 0) {
+                throw new UnsupportedOperationException("Field is not supported: months");
+            }
+            int totalYears = FieldUtils.safeAdd(origYears, origMonths / 12);
+            result = result.withYears(totalYears);
+        }
+        else {
+            // Neither years nor months are supported but the period contains non-zero values.
+            throw new UnsupportedOperationException("Period does not support years or months");
         }
     }
     return result;
 }
\ No newline at end of file
