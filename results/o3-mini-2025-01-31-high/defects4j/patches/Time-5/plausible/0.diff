diff --git a/tmp/a3f1decf-2b9a-47bc-9921-640a60456746_buggy.java b/tmp/66f0b96e-2e55-4829-a677-1ae76c69ffec_fixed.java
index dbda381..a1a1fd9 100644
--- a/tmp/a3f1decf-2b9a-47bc-9921-640a60456746_buggy.java
+++ b/tmp/66f0b96e-2e55-4829-a677-1ae76c69ffec_fixed.java
@@ -1,54 +1,47 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
     long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
     millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
     millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
     millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
     millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
     millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
     Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+    
     int years = getYears();
     int months = getMonths();
     if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+        boolean yearsSupported = type.isSupported(DurationFieldType.years());
+        boolean monthsSupported = type.isSupported(DurationFieldType.months());
+        
+        // If both years and months are supported, distribute extra months into years.
+        if (yearsSupported && monthsSupported) {
+            int extraYears = months / 12;
+            int remMonths = months % 12;
+            int totalYears = FieldUtils.safeAdd(years, extraYears);
+            result = result.withYears(totalYears).withMonths(remMonths);
+            // If the extra conversion makes a field zero, then withX() will simply ignore it.
+        }
+        // If only months are supported, convert years to months.
+        else if (!yearsSupported && monthsSupported) {
+            int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);
+            result = result.withMonths(totalMonths);
+        }
+        // If only years are supported, try converting months to years.
+        else if (yearsSupported && !monthsSupported) {
+            // Only allow conversion if months convert evenly into years.
+            if (months % 12 != 0) {
+                throw new UnsupportedOperationException("Field 'months' is not supported");
+            }
+            int totalYears = FieldUtils.safeAdd(years, months / 12);
+            result = result.withYears(totalYears);
+        }
+        // If neither years nor months are supported but this period has non-zero values for them.
+        else {
+            if (years != 0 || months != 0) {
+                throw new UnsupportedOperationException("Fields 'years' and 'months' are not supported");
             }
-            if (months != 0) {
-                result = result.withMonths(months);
         }
     }
     return result;
 }
\ No newline at end of file
