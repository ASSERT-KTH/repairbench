diff --git a/tmp/1e9bd7db-c0a4-4ff1-8833-3caa5352da6f_buggy.java b/tmp/ad0c802b-4de0-4ac2-baa1-ef1e204a0711_fixed.java
index 7e64f1d..f7ab597 100644
--- a/tmp/1e9bd7db-c0a4-4ff1-8833-3caa5352da6f_buggy.java
+++ b/tmp/ad0c802b-4de0-4ac2-baa1-ef1e204a0711_fixed.java
@@ -1,78 +1,70 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
-    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
-    {
-        List tokens = new ArrayList();
-
+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {
+    List<String> tokens = new ArrayList<>();
     boolean eatTheRest = false;
     
-        for (int i = 0; i < arguments.length; i++)
-        {
+    for (int i = 0; i < arguments.length; i++) {
         String arg = arguments[i];
         
-            if ("--".equals(arg))
-            {
+        if (eatTheRest) {
+            tokens.add(arg);
+            continue;
+        }
+        
+        if ("--".equals(arg)) {
             eatTheRest = true;
             tokens.add("--");
-            }
-            else if ("-".equals(arg))
-            {
+        } else if ("-".equals(arg)) {
             tokens.add("-");
+        } else if (arg.startsWith("-")) {
+            String prefix = arg.startsWith("--") ? "--" : "-";
+            String stripped = arg.substring(prefix.length());
+            int eqIndex = stripped.indexOf('=');
+            if (eqIndex != -1) {
+                String potentialOption = stripped.substring(0, eqIndex);
+                // If the part before '=' is recognized then split the argument.
+                if (options.hasOption(potentialOption)) {
+                    tokens.add(prefix + potentialOption);
+                    tokens.add(stripped.substring(eqIndex + 1));
+                    continue;
+                } 
+                // Otherwise, if it is a property option (e.g. -Dproperty=value) where the first character is defined
+                else if (prefix.equals("-") && stripped.length() > 0 && options.hasOption(String.valueOf(stripped.charAt(0)))) {
+                    tokens.add("-" + stripped.charAt(0));
+                    tokens.add(arg.substring(2));
+                    continue;
+                } else {
+                    if (stopAtNonOption) {
+                        eatTheRest = true;
                     }
-            else if (arg.startsWith("-"))
-            {
-                String opt = Util.stripLeadingHyphens(arg);
-
-                if (options.hasOption(opt))
-                {
                     tokens.add(arg);
+                    continue;
+                }
+            } else {
+                // No '=' present. If the option as a whole is not recognized and
+                // we should stop at the first non‚Äêoption then trigger the remainder.
+                if (!options.hasOption(stripped) && stopAtNonOption) {
+                    eatTheRest = true;
                 }
-                else
-                {
-                    if (options.hasOption(arg.substring(0, 2)))
-                    {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
-                    }
-                    else
-                    {
-                        eatTheRest = stopAtNonOption;
                 tokens.add(arg);
             }
+        } else {
+            tokens.add(arg);
+            if (stopAtNonOption) {
+                // add the rest unchanged
+                for (int j = i + 1; j < arguments.length; j++) {
+                    tokens.add(arguments[j]);
                 }
+                break;
             }
-            else
-            {
-                tokens.add(arg);
         }
         
-            if (eatTheRest)
-            {
-                for (i++; i < arguments.length; i++)
-                {
-                    tokens.add(arguments[i]);
+        if (eatTheRest) {
+            for (int j = i + 1; j < arguments.length; j++) {
+                tokens.add(arguments[j]);
             }
+            break;
         }
     }
     
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+    return tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
