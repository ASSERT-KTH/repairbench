diff --git a/tmp/20c7dba5-778c-4daf-9786-5a4d6c4d4d56_buggy.java b/tmp/26065717-03d3-448c-9653-2f2e3f740af0_fixed.java
index 7e64f1d..b07c235 100644
--- a/tmp/20c7dba5-778c-4daf-9786-5a4d6c4d4d56_buggy.java
+++ b/tmp/26065717-03d3-448c-9653-2f2e3f740af0_fixed.java
@@ -1,78 +1,91 @@
 /**
  * <p>This flatten method does so using the following rules:
  * <ol>
  *  <li>If an {@link Option} exists for the first character of 
  *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
  *  does not exist for the whole <code>argument</code> then
  *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
+ *  list e.g. "-D" and add the rest of the entry to the list.
+ *  This is used to split assignments that are “attached” to the option.
+ *  For example, "-f=bar" becomes two tokens: "-f" and "bar". Similarly,
+ *  "--foo=bar" becomes "--foo" and "bar". For property-style options
+ *  (e.g. "-Dfoo=bar"), if the complete string is not recognized but the 
+ *  first option letter is registered, then the option is split after the 
+ *  first two characters so that "-Dfoo=bar" becomes "-D" and "foo=bar".</li>
  *  <li>Otherwise just add the token to the processed tokens list.
  *  </li>
  * </ol>
  * </p>
  *
  * @param options The Options to parse the arguments by.
  * @param arguments The arguments that have to be flattened.
  * @param stopAtNonOption specifies whether to stop 
  * flattening when a non option has been encountered
  * @return a String array of the flattened arguments
  */
-    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
-    {
-        List tokens = new ArrayList();
-
+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {
+    List<String> tokens = new ArrayList<>();
     boolean eatTheRest = false;
 
-        for (int i = 0; i < arguments.length; i++)
-        {
+    for (int i = 0; i < arguments.length; i++) {
         String arg = arguments[i];
 
-            if ("--".equals(arg))
-            {
+        if ("--".equals(arg)) {
             eatTheRest = true;
             tokens.add("--");
-            }
-            else if ("-".equals(arg))
-            {
+        } else if ("-".equals(arg)) {
             tokens.add("-");
-            }
-            else if (arg.startsWith("-"))
-            {
-                String opt = Util.stripLeadingHyphens(arg);
-
-                if (options.hasOption(opt))
-                {
+        } else if (arg.startsWith("-")) {
+            // Check for an equals sign, which indicates an attached option argument.
+            int eqPos = arg.indexOf('=');
+            if (eqPos > 0) {
+                if (arg.startsWith("--")) {
+                    // For arguments like "--foo=bar": extract "foo" and "bar".
+                    String optPart = arg.substring(2, eqPos);
+                    if (options.hasOption(optPart)) {
+                        tokens.add("--" + optPart);
+                        tokens.add(arg.substring(eqPos + 1));
+                    } else {
+                        // Unrecognized option: possibly stop if desired.
+                        eatTheRest = stopAtNonOption;
                         tokens.add(arg);
                     }
-                else
-                {
-                    if (options.hasOption(arg.substring(0, 2)))
-                    {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
-                    }
-                    else
-                    {
+                } else {
+                    // For single-dash arguments.
+                    // candidate is the part after the dash up to the '='.
+                    String candidate = arg.substring(1, eqPos);
+                    if (options.hasOption(candidate)) {
+                        // e.g. "-f=bar" where option "f" (or equivalently "foo") is registered.
+                        tokens.add(arg.substring(0, eqPos));
+                        tokens.add(arg.substring(eqPos + 1));
+                    } else if (candidate.length() > 1 && options.hasOption(candidate.substring(0, 1))) {
+                        // Handle property style options such as "-Dfoo=bar":
+                        // If the full candidate ("Dfoo") is not recognized but the first letter ("D") is,
+                        // then split after the option letter.
+                        tokens.add(arg.substring(0, 2));
+                        tokens.add(arg.substring(2));
+                    } else {
+                        // Not a recognized option.
                         eatTheRest = stopAtNonOption;
                         tokens.add(arg);
                     }
                 }
+            } else {
+                // No '=' present, just add the argument.
+                tokens.add(arg);
             }
-            else
-            {
+        } else {
             tokens.add(arg);
         }
 
-            if (eatTheRest)
-            {
-                for (i++; i < arguments.length; i++)
-                {
+        if (eatTheRest) {
+            // Add every remaining argument as is.
+            for (i++; i < arguments.length; i++) {
                 tokens.add(arguments[i]);
             }
+            break;
         }
     }
 
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+    return tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
