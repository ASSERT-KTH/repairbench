diff --git a/tmp/1ed5622a-6307-427c-ab3c-473f479e39cd_buggy.java b/tmp/456fc10d-6258-4d64-885c-1d9346caf5ab_fixed.java
index 7e64f1d..f386ecc 100644
--- a/tmp/1ed5622a-6307-427c-ab3c-473f479e39cd_buggy.java
+++ b/tmp/456fc10d-6258-4d64-885c-1d9346caf5ab_fixed.java
@@ -1,78 +1,62 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
-    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
-    {
-        List tokens = new ArrayList();
-
+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {
+    List<String> tokens = new ArrayList<>();
     boolean eatTheRest = false;
 
-        for (int i = 0; i < arguments.length; i++)
-        {
+    for (int i = 0; i < arguments.length; i++) {
         String arg = arguments[i];
 
-            if ("--".equals(arg))
-            {
-                eatTheRest = true;
+        if ("--".equals(arg)) {
             tokens.add("--");
-            }
-            else if ("-".equals(arg))
-            {
+            eatTheRest = true;
+        } else if ("-".equals(arg)) {
             tokens.add("-");
+        } else if (arg.startsWith("-")) {
+            // First: if the argument looks like a “property option” 
+            // (e.g. "-Dproperty=value"), check if the first two characters
+            // form a known option.
+            if (arg.length() > 2 && options.hasOption(arg.substring(0, 2))) {
+                tokens.add(arg.substring(0, 2));       // e.g. "-D"
+                tokens.add(arg.substring(2));          // e.g. "property=value"
+            } else {
+                // Next: if the token contains an '=' then split it on the '='.
+                int eqIndex = arg.indexOf('=');
+                if (eqIndex != -1) {
+                    String optPart = arg.substring(0, eqIndex);
+                    String valuePart = arg.substring(eqIndex + 1);
+                    // Check if the part before '=' (after stripping any leading hyphens)
+                    // is a recognized option.
+                    if (options.hasOption(Util.stripLeadingHyphens(optPart))) {
+                        tokens.add(optPart);
+                        tokens.add(valuePart);
+                    } else {
+                        tokens.add(arg);
+                        if (stopAtNonOption) {
+                            eatTheRest = true;
                         }
-            else if (arg.startsWith("-"))
-            {
+                    }
+                } else {
+                    // Otherwise, check if the whole token (after stripping hyphens) is a valid option.
                     String opt = Util.stripLeadingHyphens(arg);
-
-                if (options.hasOption(opt))
-                {
+                    if (options.hasOption(opt)) {
                         tokens.add(arg);
-                }
-                else
-                {
-                    if (options.hasOption(arg.substring(0, 2)))
-                    {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
-                    }
-                    else
-                    {
-                        eatTheRest = stopAtNonOption;
+                    } else {
                         tokens.add(arg);
+                        if (stopAtNonOption) {
+                            eatTheRest = true;
+                        }
                     }
                 }
             }
-            else
-            {
+        } else {
             tokens.add(arg);
         }
 
-            if (eatTheRest)
-            {
-                for (i++; i < arguments.length; i++)
-                {
+        if (eatTheRest) {
+            for (++i; i < arguments.length; i++) {
                 tokens.add(arguments[i]);
             }
+            break;
         }
     }
-
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+    return tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
