diff --git a/tmp/b1fe6581-6c37-439c-8165-877d1154bd53_buggy.java b/tmp/ab64a745-f639-4ae6-86aa-b492042228b5_fixed.java
index 7e64f1d..31d1790 100644
--- a/tmp/b1fe6581-6c37-439c-8165-877d1154bd53_buggy.java
+++ b/tmp/ab64a745-f639-4ae6-86aa-b492042228b5_fixed.java
@@ -1,78 +1,60 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
-    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
-    {
-        List tokens = new ArrayList();
-
+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {
+    List<String> tokens = new ArrayList<>();
     boolean eatTheRest = false;
 
-        for (int i = 0; i < arguments.length; i++)
-        {
+    for (int i = 0; i < arguments.length; i++) {
         String arg = arguments[i];
 
-            if ("--".equals(arg))
-            {
-                eatTheRest = true;
+        if ("--".equals(arg)) {
             tokens.add("--");
-            }
-            else if ("-".equals(arg))
-            {
+            eatTheRest = true;
+        } else if ("-".equals(arg)) {
             tokens.add("-");
+        } else if (arg.startsWith("-")) {
+            // If the argument contains an '=' sign, try to split it.
+            if (arg.indexOf('=') != -1) {
+                int eqIdx = arg.indexOf('=');
+                // Try to see if the full option (up to the '=') is recognized.
+                String candidateFull = Util.stripLeadingHyphens(arg.substring(0, eqIdx));
+                if (options.hasOption(candidateFull)) {
+                    tokens.add(arg.substring(0, eqIdx));
+                    tokens.add(arg.substring(eqIdx + 1));
+                } else if (arg.length() > 2 && options.hasOption(Util.stripLeadingHyphens(arg.substring(0, 2)))) {
+                    // Special case: the option exists for the first character only.
+                    tokens.add(arg.substring(0, 2));
+                    tokens.add(arg.substring(2));
+                } else {
+                    tokens.add(arg);
+                    if (stopAtNonOption) {
+                        eatTheRest = true;
                     }
-            else if (arg.startsWith("-"))
-            {
+                }
+            } else {
                 String opt = Util.stripLeadingHyphens(arg);
-
-                if (options.hasOption(opt))
-                {
+                if (options.hasOption(opt)) {
                     tokens.add(arg);
-                }
-                else
-                {
-                    if (options.hasOption(arg.substring(0, 2)))
-                    {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
-                    }
-                    else
-                    {
-                        eatTheRest = stopAtNonOption;
+                } else if (arg.length() > 2 && options.hasOption(Util.stripLeadingHyphens(arg.substring(0, 2)))) {
+                    // Special handling: e.g. -Dproperty (when -D is a recognized option)
+                    tokens.add(arg.substring(0, 2));
+                    tokens.add(arg.substring(2));
+                } else {
                     tokens.add(arg);
+                    if (stopAtNonOption) {
+                        eatTheRest = true;
                     }
                 }
             }
-            else
-            {
+        } else {
             tokens.add(arg);
         }
 
-            if (eatTheRest)
-            {
-                for (i++; i < arguments.length; i++)
-                {
+        if (eatTheRest) {
+            for (i = i + 1; i < arguments.length; i++) {
                 tokens.add(arguments[i]);
             }
+            break;
         }
     }
 
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+    return tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
