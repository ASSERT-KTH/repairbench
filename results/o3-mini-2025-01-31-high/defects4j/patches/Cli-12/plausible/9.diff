diff --git a/tmp/520caad2-acc9-408a-b796-c02dd3dda4a4_buggy.java b/tmp/cdc3d9c5-4fe6-4167-b1e2-8d21a983cf0c_fixed.java
index 7e64f1d..6a95440 100644
--- a/tmp/520caad2-acc9-408a-b796-c02dd3dda4a4_buggy.java
+++ b/tmp/cdc3d9c5-4fe6-4167-b1e2-8d21a983cf0c_fixed.java
@@ -1,78 +1,82 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
-    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
-    {
+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {
     List tokens = new ArrayList();
 
     boolean eatTheRest = false;
 
-        for (int i = 0; i < arguments.length; i++)
-        {
+    for (int i = 0; i < arguments.length; i++) {
         String arg = arguments[i];
 
-            if ("--".equals(arg))
-            {
+        if ("--".equals(arg)) {
+            // when the parser sees the specific marker "--" then stop further processing
             eatTheRest = true;
             tokens.add("--");
-            }
-            else if ("-".equals(arg))
-            {
+        } else if ("-".equals(arg)) {
             tokens.add("-");
+        } else if (arg.startsWith("-")) {
+            // First, see if this token contains an '='.
+            int eqPos = arg.indexOf('=');
+            if (eqPos > 0) {
+                // If the whole option (with its value) were defined, then leave it aloneâ€¦
+                String wholeOption = Util.stripLeadingHyphens(arg);
+                if (options.hasOption(wholeOption)) {
+                    tokens.add(arg);
+                } else {
+                    // Otherwise, split the option/value.
+                    if (arg.startsWith("--")) {
+                        // For a long option of the form "--foo=bar": candidate is "foo"
+                        String candidate = arg.substring(2, eqPos);
+                        if (options.hasOption(candidate)) {
+                            tokens.add(arg.substring(0, eqPos)); // e.g. "--foo"
+                            tokens.add(arg.substring(eqPos + 1));  // e.g. "bar"
+                        } else {
+                            tokens.add(arg);
                         }
-            else if (arg.startsWith("-"))
-            {
+                    } else {
+                        // For a single-dash option, the splitting can go two ways.
+                        // For a normal option like "-f=bar": candidate is "f"
+                        String candidate = arg.substring(1, eqPos);
+                        if (options.hasOption(candidate)) {
+                            tokens.add(arg.substring(0, eqPos)); // e.g. "-f"
+                            tokens.add(arg.substring(eqPos + 1));  // e.g. "bar"
+                        } 
+                        // Otherwise, maybe it is a property option like "-Dproperty=value"
+                        else if (arg.length() > 1 && options.hasOption(arg.substring(1, 2))) {
+                            tokens.add(arg.substring(0, 2)); // e.g. "-D"
+                            tokens.add(arg.substring(2));    // e.g. "property=value"
+                        } else {
+                            tokens.add(arg);
+                        }
+                    }
+                }
+                // We are done processing this token (whether split or not).
+                continue;
+            } else {
+                // No '=' present. First try to see if the
+                // argument as a whole (with all dashes stripped) is a valid option.
                 String opt = Util.stripLeadingHyphens(arg);
-
-                if (options.hasOption(opt))
-                {
+                if (options.hasOption(opt)) {
                     tokens.add(arg);
                 } 
-                else
-                {
-                    if (options.hasOption(arg.substring(0, 2)))
-                    {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
-                    }
-                    else
-                    {
+                // Otherwise, if the first character makes a valid option (property style)
+                // then split the token into its first two characters and the rest.
+                else if (arg.length() > 2 && options.hasOption(arg.substring(1, 2))) {
+                    tokens.add(arg.substring(0, 2));
+                    tokens.add(arg.substring(2));
+                } else {
                     eatTheRest = stopAtNonOption;
                     tokens.add(arg);
                 }
             }
-            }
-            else
-            {
+        } else {
             tokens.add(arg);
         }
 
-            if (eatTheRest)
-            {
-                for (i++; i < arguments.length; i++)
-                {
+        // Once we hit a non-option (if stopAtNonOption is true), add the remainder unchanged.
+        if (eatTheRest) {
+            for (i++; i < arguments.length; i++) {
                 tokens.add(arguments[i]);
             }
         }
     }
-
     return (String[]) tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
