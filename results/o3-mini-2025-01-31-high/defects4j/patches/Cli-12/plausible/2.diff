diff --git a/tmp/508f2518-d99a-417c-9b76-cc8a2cacbf8d_buggy.java b/tmp/719cb7d9-479f-4e83-8154-5966e70a8366_fixed.java
index 7e64f1d..aa5634b 100644
--- a/tmp/508f2518-d99a-417c-9b76-cc8a2cacbf8d_buggy.java
+++ b/tmp/719cb7d9-479f-4e83-8154-5966e70a8366_fixed.java
@@ -1,78 +1,82 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
 protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
 {
-        List tokens = new ArrayList();
-
+    List<String> tokens = new ArrayList<String>();
     boolean eatTheRest = false;
 
     for (int i = 0; i < arguments.length; i++)
     {
         String arg = arguments[i];
 
         if ("--".equals(arg))
         {
             eatTheRest = true;
             tokens.add("--");
         }
         else if ("-".equals(arg))
         {
             tokens.add("-");
         }
         else if (arg.startsWith("-"))
         {
+            /*
+             * First, if the argument contains an '=' sign, check whether the part
+             * before the '=' represents a valid option. If so, split the token so that
+             * the option and its value become separate tokens.
+             */
+            int eqIndex = arg.indexOf('=');
+            if (eqIndex > 0)
+            {
+                String candidateOption = arg.substring(0, eqIndex);
+                if (options.hasOption(Util.stripLeadingHyphens(candidateOption)))
+                {
+                    String candidateValue = arg.substring(eqIndex + 1);
+                    tokens.add(candidateOption);
+                    tokens.add(candidateValue);
+                    continue;
+                }
+            }
+
+            // Otherwise, check if the entire token (with hyphens stripped) is a recognized option.
             String opt = Util.stripLeadingHyphens(arg);
-
             if (options.hasOption(opt))
             {
                 tokens.add(arg);
             }
             else
             {
-                    if (options.hasOption(arg.substring(0, 2)))
+                /*
+                 * For cases like "-Dproperty=value", the long token isn't recognized.
+                 * Instead, try to see if the first two characters form a valid short option.
+                 * Note that for tokens like "-f=bar", the check in the '=' branch above will
+                 * have already succeeded.
+                 */
+                if (arg.length() > 2 && options.hasOption(Util.stripLeadingHyphens(arg.substring(0, 2))))
                 {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                    tokens.add(arg.substring(0, 2));
+                    tokens.add(arg.substring(2));
                 }
                 else
                 {
-                        eatTheRest = stopAtNonOption;
                     tokens.add(arg);
+                    if (stopAtNonOption)
+                    {
+                        eatTheRest = true;
+                    }
                 }
             }
         }
         else
         {
             tokens.add(arg);
         }
 
         if (eatTheRest)
         {
             for (i++; i < arguments.length; i++)
             {
                 tokens.add(arguments[i]);
             }
         }
     }
-
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+    return tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
