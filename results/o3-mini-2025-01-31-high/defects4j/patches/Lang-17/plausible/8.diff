diff --git a/tmp/480308b7-0dff-44ae-ba03-4f60afb70a52_buggy.java b/tmp/d3736ec6-fd1c-410f-891c-7bb4c7d50f6a_fixed.java
index b86c1ea..0b14b9c 100644
--- a/tmp/480308b7-0dff-44ae-ba03-4f60afb70a52_buggy.java
+++ b/tmp/d3736ec6-fd1c-410f-891c-7bb4c7d50f6a_fixed.java
@@ -1,38 +1,23 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
-        while (pos < len) {
+    final int count = Character.codePointCount(input, 0, input.length());
+    while (pos < count) {
+        // Call the abstract translator method.
+        // The 'pos' variable is interpreted as the index in code points.
         int consumed = translate(input, pos, out);
         if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
+            // Convert the code point index to the actual char index.
+            int index = Character.offsetByCodePoints(input, 0, pos);
+            int cp = Character.codePointAt(input, index);
+            out.write(Character.toChars(cp));
+            consumed = 1;
         }
-            else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
-                        pos++;
-                    }
-                }
-                pos--;
-            }
-            pos++;
+        pos += consumed;
     }
 }
\ No newline at end of file
