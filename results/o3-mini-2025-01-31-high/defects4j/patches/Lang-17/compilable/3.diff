diff --git a/tmp/8ee531e3-0591-424c-a02b-fae17da53be6_buggy.java b/tmp/12350a72-d1e1-4ba2-9ddf-c63f60476207_fixed.java
index b86c1ea..4294e92 100644
--- a/tmp/8ee531e3-0591-424c-a02b-fae17da53be6_buggy.java
+++ b/tmp/12350a72-d1e1-4ba2-9ddf-c63f60476207_fixed.java
@@ -1,38 +1,28 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
-        while (pos < len) {
+    final int count = input.length();
+    while (pos < count) {
         int consumed = translate(input, pos, out);
         if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
+            char c1 = input.charAt(pos);
+            out.write(c1);
+            pos++;
+            // if we see a high surrogate, check if it forms a valid pair with the following low surrogate
+            if (Character.isHighSurrogate(c1) && pos < count) {
+                char c2 = input.charAt(pos);
+                if (Character.isLowSurrogate(c2)) {
+                    out.write(c2);
+                    pos++;
+                }
             }
-            else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
         } else {
-                        pos++;
+            pos += consumed;
         }
     }
-                pos--;
-            }
-            pos++;
-        }
 }
\ No newline at end of file
