diff --git a/tmp/e4345174-03db-4d9b-98d4-53468afc2128_buggy.java b/tmp/a068a12a-03ed-480e-b930-ce17c7141d87_fixed.java
index 6c9090f..269c272 100644
--- a/tmp/e4345174-03db-4d9b-98d4-53468afc2128_buggy.java
+++ b/tmp/a068a12a-03ed-480e-b930-ce17c7141d87_fixed.java
@@ -1,45 +1,43 @@
-    /**
-     * Method called to finalize setup of this deserializer,
-     * when it is known for which property deserializer is needed
-     * for.
-     */
 @Override
 public CollectionDeserializer createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
+    // First: contextualize the value instantiator (needed for delegate-creator annotations)
+    if (_valueInstantiator instanceof ContextualValueInstantiator) {
+        _valueInstantiator = ((ContextualValueInstantiator) _valueInstantiator)
+                .createContextual(ctxt, property);
+    }
+    
     // May need to resolve types for delegate-based creators:
     JsonDeserializer<Object> delegateDeser = null;
-        if (_valueInstantiator != null) {
-            if (_valueInstantiator.canCreateUsingDelegate()) {
+    if (_valueInstantiator != null && _valueInstantiator.canCreateUsingDelegate()) {
         JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
         if (delegateType == null) {
             throw new IllegalArgumentException("Invalid delegate-creator definition for " + _collectionType
                     + ": value instantiator (" + _valueInstantiator.getClass().getName()
                     + ") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
         }
         delegateDeser = findDeserializer(ctxt, delegateType, property);
     }
-        }
-        // [databind#1043]: allow per-property allow-wrapping of single overrides:
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
+
+    // [databind#1043]: allow per-property "unwrap single" handling for collections:
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
-        // also, often value deserializer is resolved here:
+    
+    // Resolve value deserializer (possibly converting) for contents:
     JsonDeserializer<?> valueDeser = _valueDeserializer;
-        
-        // May have a content converter
     valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
     final JavaType vt = _collectionType.getContentType();
     if (valueDeser == null) {
         valueDeser = ctxt.findContextualValueDeserializer(vt, property);
     } else { // if directly assigned, probably not yet contextual, so:
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
     }
-        // and finally, type deserializer needs context as well
+    
+    // And finally, type deserializer needs context as well
     TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
     if (valueTypeDeser != null) {
         valueTypeDeser = valueTypeDeser.forProperty(property);
     }
     return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
 }
\ No newline at end of file
