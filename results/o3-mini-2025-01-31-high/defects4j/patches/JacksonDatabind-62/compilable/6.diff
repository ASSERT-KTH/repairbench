diff --git a/tmp/81666181-d2c4-4606-b45d-b65198d384f4_buggy.java b/tmp/2776938d-62cd-4ddf-9366-35300feb5561_fixed.java
index 6c9090f..653d1e5 100644
--- a/tmp/81666181-d2c4-4606-b45d-b65198d384f4_buggy.java
+++ b/tmp/2776938d-62cd-4ddf-9366-35300feb5561_fixed.java
@@ -1,45 +1,39 @@
-    /**
-     * Method called to finalize setup of this deserializer,
-     * when it is known for which property deserializer is needed
-     * for.
-     */
 @Override
 public CollectionDeserializer createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
     // May need to resolve types for delegate-based creators:
     JsonDeserializer<Object> delegateDeser = null;
     if (_valueInstantiator != null) {
-            if (_valueInstantiator.canCreateUsingDelegate()) {
+        // If we cannot use a default constructor, then we must use delegate-based creation.
+        if (_valueInstantiator.canCreateUsingDelegate() || !_valueInstantiator.canCreateUsingDefault()) {
             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
             if (delegateType == null) {
                 throw new IllegalArgumentException("Invalid delegate-creator definition for " + _collectionType
                         + ": value instantiator (" + _valueInstantiator.getClass().getName()
-                            +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
+                        + ") returned null for 'getDelegateType()'");
             }
             delegateDeser = findDeserializer(ctxt, delegateType, property);
         }
     }
     // [databind#1043]: allow per-property allow-wrapping of single overrides:
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
-        // also, often value deserializer is resolved here:
+    // Resolve the value deserializer:
     JsonDeserializer<?> valueDeser = _valueDeserializer;
 
-        // May have a content converter
+    // Possibly wrap with a converting deserializer
     valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
     final JavaType vt = _collectionType.getContentType();
     if (valueDeser == null) {
         valueDeser = ctxt.findContextualValueDeserializer(vt, property);
-        } else { // if directly assigned, probably not yet contextual, so:
+    } else {
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
     }
-        // and finally, type deserializer needs context as well
+    // And finally, update type deserializer if necessary
     TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
     if (valueTypeDeser != null) {
         valueTypeDeser = valueTypeDeser.forProperty(property);
     }
     return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
 }
\ No newline at end of file
