diff --git a/tmp/76b0919e-cb55-4996-942d-97b62f8b0d50_buggy.java b/tmp/7741e8ad-1549-4a94-9b9c-8273535ac9ad_fixed.java
index d6a560a..ea0a50e 100644
--- a/tmp/76b0919e-cb55-4996-942d-97b62f8b0d50_buggy.java
+++ b/tmp/7741e8ad-1549-4a94-9b9c-8273535ac9ad_fixed.java
@@ -1,33 +1,26 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
   boolean resolved = resolveViaRegistry(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
 
   if (resolved) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
 
   resolveViaProperties(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
 
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
     finishPropertyContinuations();
   }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+  return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
