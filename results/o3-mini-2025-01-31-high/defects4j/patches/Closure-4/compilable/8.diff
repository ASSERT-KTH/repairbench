diff --git a/tmp/e2aa8a48-60cb-4dd0-89f6-ff48915374c8_buggy.java b/tmp/3ee5a069-ef3a-47a6-a2bd-02db2ee2fc9d_fixed.java
index d6a560a..6f7f5b1 100644
--- a/tmp/e2aa8a48-60cb-4dd0-89f6-ff48915374c8_buggy.java
+++ b/tmp/3ee5a069-ef3a-47a6-a2bd-02db2ee2fc9d_fixed.java
@@ -1,33 +1,30 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
   boolean resolved = resolveViaRegistry(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
 
   if (resolved) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
 
   resolveViaProperties(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
   
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
     finishPropertyContinuations();
   }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+  
+  return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
