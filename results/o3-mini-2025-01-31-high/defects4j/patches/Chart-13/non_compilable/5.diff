diff --git a/tmp/7dbf1e06-779d-4765-bec3-4991cfaea67a_buggy.java b/tmp/9df54424-be77-459a-9321-1b344d46e3d9_fixed.java
index 63a7c80..65d7463 100644
--- a/tmp/7dbf1e06-779d-4765-bec3-4991cfaea67a_buggy.java
+++ b/tmp/9df54424-be77-459a-9321-1b344d46e3d9_fixed.java
@@ -1,77 +1,142 @@
-    /**
-     * Arranges the items within a container.
-     *
-     * @param container  the container.
-     * @param constraint  the constraint.
-     * @param g2  the graphics device.
-     *
-     * @return The container size after the arrangement.
-     */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
+    // If the height is not fixed, use an additive layout.
+    if (constraint.getHeightConstraintType() == LengthConstraintType.NONE) {
+        double width = constraint.getWidth();
+        
+        // Arrange the top block using the full fixed width and no height restriction.
+        double topHeight = 0.0;
+        if (this.topBlock != null) {
+            RectangleConstraint topConstraint = new RectangleConstraint(width, null);
+            Size2D topSize = this.topBlock.arrange(g2, topConstraint);
+            topHeight = topSize.height;
+        }
+        
+        // Arrange the bottom block similarly.
+        double bottomHeight = 0.0;
+        if (this.bottomBlock != null) {
+            RectangleConstraint bottomConstraint = new RectangleConstraint(width, null);
+            Size2D bottomSize = this.bottomBlock.arrange(g2, bottomConstraint);
+            bottomHeight = bottomSize.height;
+        }
+        
+        // Arrange the left block: give it a width range from 0 to the overall width.
+        double leftWidth = 0.0;
+        double leftHeight = 0.0;
+        if (this.leftBlock != null) {
+            RectangleConstraint leftConstraint = new RectangleConstraint(new Range(0.0, width));
+            Size2D leftSize = this.leftBlock.arrange(g2, leftConstraint);
+            leftWidth = leftSize.width;
+            leftHeight = leftSize.height;
+        }
+        
+        // Arrange the right block: its maximum allowable width is (width - leftWidth).
+        double rightWidth = 0.0;
+        double rightHeight = 0.0;
+        if (this.rightBlock != null) {
+            double availableForRight = Math.max(width - leftWidth, 0.0);
+            RectangleConstraint rightConstraint = new RectangleConstraint(new Range(0.0, availableForRight));
+            Size2D rightSize = this.rightBlock.arrange(g2, rightConstraint);
+            rightWidth = rightSize.width;
+            rightHeight = rightSize.height;
+        }
+        
+        // The center block gets the remaining width.
+        double centerWidth = Math.max(width - leftWidth - rightWidth, 0.0);
+        double centerHeight = 0.0;
+        if (this.centerBlock != null) {
+            RectangleConstraint centerConstraint = new RectangleConstraint(centerWidth, null);
+            Size2D centerSize = this.centerBlock.arrange(g2, centerConstraint);
+            centerHeight = centerSize.height;
+        }
+        
+        // The height for the middle region (where left, center, and right are placed)
+        // is the maximum of the individual block heights.
+        double middleHeight = Math.max(Math.max(leftHeight, rightHeight), centerHeight);
+        double totalHeight = topHeight + middleHeight + bottomHeight;
+        
+        // Now set the bounds for each block.
+        if (this.topBlock != null) {
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, width, topHeight));
+        }
+        if (this.leftBlock != null) {
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, topHeight, leftWidth, middleHeight));
+        }
+        if (this.centerBlock != null) {
+            this.centerBlock.setBounds(new Rectangle2D.Double(leftWidth, topHeight, centerWidth, middleHeight));
+        }
+        if (this.rightBlock != null) {
+            this.rightBlock.setBounds(new Rectangle2D.Double(leftWidth + centerWidth, topHeight, rightWidth, middleHeight));
+        }
+        if (this.bottomBlock != null) {
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, topHeight + middleHeight, width, bottomHeight));
+        }
+        
+        return new Size2D(width, totalHeight);
+    }
+    else {
+        // Otherwise, use the fixed height algorithm.
         double[] w = new double[5];
         double[] h = new double[5];
-        w[0] = constraint.getWidth();
+        double width = constraint.getWidth();
+        w[0] = width;
         if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
+            RectangleConstraint c1 = new RectangleConstraint(width, null,
                     LengthConstraintType.FIXED, 0.0,
                     new Range(0.0, constraint.getHeight()),
                     LengthConstraintType.RANGE);
             Size2D size = this.topBlock.arrange(g2, c1);
             h[0] = size.height;
         }
-        w[1] = w[0];
+        w[1] = width;
         if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+            RectangleConstraint c2 = new RectangleConstraint(width, null,
+                    LengthConstraintType.FIXED, 0.0,
+                    new Range(0.0, constraint.getHeight() - h[0]),
+                    LengthConstraintType.RANGE);
             Size2D size = this.bottomBlock.arrange(g2, c2);
             h[1] = size.height;
         }
         h[2] = constraint.getHeight() - h[1] - h[0];
         if (this.leftBlock != null) {
             RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
+                    new Range(0.0, width),
                     LengthConstraintType.RANGE, h[2], null,
                     LengthConstraintType.FIXED);
             Size2D size = this.leftBlock.arrange(g2, c3);
             w[2] = size.width;
         }
         h[3] = h[2];
         if (this.rightBlock != null) {
             RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
+                    new Range(0.0, width - w[2]),
                     LengthConstraintType.RANGE, h[2], null,
                     LengthConstraintType.FIXED);
             Size2D size = this.rightBlock.arrange(g2, c4);
             w[3] = size.width;
         }
         h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+        w[4] = width - w[3] - w[2];
         RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
         if (this.centerBlock != null) {
             this.centerBlock.arrange(g2, c5);
         }
 
         if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));
         }
         if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));
         }
         if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));
         }
         if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3]));
         }
         if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));
+        }
+        return new Size2D(width, constraint.getHeight());
     }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
 }
\ No newline at end of file
