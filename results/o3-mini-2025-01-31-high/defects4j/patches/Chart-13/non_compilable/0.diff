diff --git a/tmp/f665a98c-4493-4b54-ae07-39d01c06c00e_buggy.java b/tmp/37347ee6-d26a-41ed-a4d6-a7b6eb755485_fixed.java
index 63a7c80..a15b0d4 100644
--- a/tmp/f665a98c-4493-4b54-ae07-39d01c06c00e_buggy.java
+++ b/tmp/37347ee6-d26a-41ed-a4d6-a7b6eb755485_fixed.java
@@ -1,77 +1,176 @@
 /**
  * Arranges the items within a container.
  *
+ * In the case where the height constraint is NONE (i.e. an unconstrained height),
+ * the overall height is computed as the sum of the top block height, the maximum “middle”
+ * height (from the left, center and right blocks) and the bottom block height.
+ *
+ * Otherwise (when the height is fixed or given as a range) we mimic the original code,
+ * with defensive clamping to avoid creating a Range with a negative upper bound.
+ *
  * @param container  the container.
-     * @param constraint  the constraint.
  * @param g2  the graphics device.
+ * @param constraint  the constraint.
  *
  * @return The container size after the arrangement.
  */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
+    // If the vertical constraint is NONE, calculate the height from the blocks’ preferred sizes.
+    if (constraint.getHeightConstraintType() == LengthConstraintType.NONE) {
+        double topHeight = 0.0;
+        double bottomHeight = 0.0;
+        if (this.topBlock != null) {
+            RectangleConstraint topConstraint = new RectangleConstraint(
+                constraint.getWidth(), null, LengthConstraintType.FIXED,
+                0.0, null, LengthConstraintType.NONE
+            );
+            Size2D s = this.topBlock.arrange(g2, topConstraint);
+            topHeight = s.getHeight();
+        }
+        if (this.bottomBlock != null) {
+            RectangleConstraint bottomConstraint = new RectangleConstraint(
+                constraint.getWidth(), null, LengthConstraintType.FIXED,
+                0.0, null, LengthConstraintType.NONE
+            );
+            Size2D s = this.bottomBlock.arrange(g2, bottomConstraint);
+            bottomHeight = s.getHeight();
+        }
+
+        // Arrange the "middle" blocks (left, center and right) without a vertical constraint.
+        double leftWidth = 0.0;
+        double rightWidth = 0.0;
+        double middleHeight = 0.0; // will be the max height among left/center/right
+        if (this.leftBlock != null) {
+            RectangleConstraint leftConstraint = new RectangleConstraint(
+                new Range(0.0, constraint.getWidth()), null, LengthConstraintType.RANGE,
+                0.0, null, LengthConstraintType.NONE
+            );
+            Size2D s = this.leftBlock.arrange(g2, leftConstraint);
+            leftWidth = s.getWidth();
+            middleHeight = Math.max(middleHeight, s.getHeight());
+        }
+        if (this.rightBlock != null) {
+            double availableForRight = Math.max(constraint.getWidth() - leftWidth, 0.0);
+            RectangleConstraint rightConstraint = new RectangleConstraint(
+                new Range(0.0, availableForRight), null, LengthConstraintType.RANGE,
+                0.0, null, LengthConstraintType.NONE
+            );
+            Size2D s = this.rightBlock.arrange(g2, rightConstraint);
+            rightWidth = s.getWidth();
+            middleHeight = Math.max(middleHeight, s.getHeight());
+        }
+        if (this.centerBlock != null) {
+            double centerWidth = Math.max(constraint.getWidth() - leftWidth - rightWidth, 0.0);
+            RectangleConstraint centerConstraint = new RectangleConstraint(
+                centerWidth, null, LengthConstraintType.FIXED,
+                0.0, null, LengthConstraintType.NONE
+            );
+            Size2D s = this.centerBlock.arrange(g2, centerConstraint);
+            middleHeight = Math.max(middleHeight, s.getHeight());
+        }
+        
+        // Position the blocks.
+        if (this.topBlock != null) {
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0,
+                constraint.getWidth(), topHeight));
+        }
+        // The three middle blocks share the same vertical space.
+        if (this.leftBlock != null) {
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, topHeight,
+                leftWidth, middleHeight));
+        }
+        if (this.centerBlock != null) {
+            double centerWidth = Math.max(constraint.getWidth() - leftWidth - rightWidth, 0.0);
+            this.centerBlock.setBounds(new Rectangle2D.Double(leftWidth, topHeight,
+                centerWidth, middleHeight));
+        }
+        if (this.rightBlock != null) {
+            // When a right block is present along with a center block, it is positioned immediately to the right of center.
+            // But if there’s no center block, we align it flush with the right edge.
+            double centerWidth = (this.centerBlock != null) 
+                    ? Math.max(constraint.getWidth() - leftWidth - rightWidth, 0.0)
+                    : 0.0;
+            this.rightBlock.setBounds(new Rectangle2D.Double(leftWidth + centerWidth, topHeight,
+                rightWidth, middleHeight));
+        }
+        if (this.bottomBlock != null) {
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, topHeight + middleHeight,
+                constraint.getWidth(), bottomHeight));
+        }
+        
+        return new Size2D(constraint.getWidth(), topHeight + middleHeight + bottomHeight);
+    }
+    else { 
+        // Otherwise (with a fixed or ranged height), follow the original layout (with slight clamping to avoid negatives).
         double[] w = new double[5];
         double[] h = new double[5];
         w[0] = constraint.getWidth();
         if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
+            RectangleConstraint c1 = new RectangleConstraint(
+                w[0], null, LengthConstraintType.FIXED,
+                0.0, new Range(0.0, constraint.getHeight()), LengthConstraintType.RANGE
+            );
             Size2D size = this.topBlock.arrange(g2, c1);
-            h[0] = size.height;
+            h[0] = size.getHeight();
+        } else {
+            h[0] = 0.0;
         }
         w[1] = w[0];
         if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+            RectangleConstraint c2 = new RectangleConstraint(
+                w[0], null, LengthConstraintType.FIXED,
+                0.0, new Range(0.0, Math.max(constraint.getHeight() - h[0], 0.0)), LengthConstraintType.RANGE
+            );
             Size2D size = this.bottomBlock.arrange(g2, c2);
-            h[1] = size.height;
+            h[1] = size.getHeight();
+        } else {
+            h[1] = 0.0;
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+        h[2] = Math.max(constraint.getHeight() - h[1] - h[0], 0.0);
         if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+            RectangleConstraint c3 = new RectangleConstraint(
+                0.0, new Range(0.0, constraint.getWidth()), LengthConstraintType.RANGE,
+                h[2], null, LengthConstraintType.FIXED
+            );
             Size2D size = this.leftBlock.arrange(g2, c3);
-            w[2] = size.width;
+            w[2] = size.getWidth();
+        } else {
+            w[2] = 0.0;
         }
         h[3] = h[2];
         if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+            RectangleConstraint c4 = new RectangleConstraint(
+                0.0, new Range(0.0, Math.max(constraint.getWidth() - w[2], 0.0)),
+                LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED
+            );
             Size2D size = this.rightBlock.arrange(g2, c4);
-            w[3] = size.width;
+            w[3] = size.getWidth();
+        } else {
+            w[3] = 0.0;
         }
         h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+        w[4] = Math.max(constraint.getWidth() - w[3] - w[2], 0.0);
         RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
         if (this.centerBlock != null) {
             this.centerBlock.arrange(g2, c5);
         }
     
         if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));
         }
         if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));
         }
         if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));
         }
         if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3]));
         }
         if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));
         }
         return new Size2D(constraint.getWidth(), constraint.getHeight());
     }
+}
\ No newline at end of file
