diff --git a/tmp/73063b73-4c1e-4ed2-b751-dc54d98c3736_buggy.java b/tmp/5f144938-08ab-4b51-a981-54f8dfcd6386_fixed.java
index 63a7c80..0906013 100644
--- a/tmp/73063b73-4c1e-4ed2-b751-dc54d98c3736_buggy.java
+++ b/tmp/5f144938-08ab-4b51-a981-54f8dfcd6386_fixed.java
@@ -1,77 +1,179 @@
 /**
  * Arranges the items within a container.
  *
  * @param container  the container.
-     * @param constraint  the constraint.
  * @param g2  the graphics device.
+ * @param constraint  the constraint.
  *
  * @return The container size after the arrangement.
  */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
+    // The width is fixed.
+    double fixedWidth = constraint.getWidth();
+    
+    // If the height is fixed, follow the original fixed‚Äêheight strategy.
+    if (constraint.getHeightConstraintType() == LengthConstraintType.FIXED) {
         double[] w = new double[5];
         double[] h = new double[5];
-        w[0] = constraint.getWidth();
+        
+        w[0] = fixedWidth;
         if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
+            RectangleConstraint c1 = new RectangleConstraint(
+                    fixedWidth, null, LengthConstraintType.FIXED,
+                    0.0, new Range(0.0, constraint.getHeight()),
+                    LengthConstraintType.RANGE
+            );
             Size2D size = this.topBlock.arrange(g2, c1);
             h[0] = size.height;
         }
-        w[1] = w[0];
+        w[1] = fixedWidth;
         if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+            RectangleConstraint c2 = new RectangleConstraint(
+                    fixedWidth, null, LengthConstraintType.FIXED,
+                    0.0, new Range(0.0, constraint.getHeight() - h[0]),
+                    LengthConstraintType.RANGE
+            );
             Size2D size = this.bottomBlock.arrange(g2, c2);
             h[1] = size.height;
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+        h[2] = constraint.getHeight() - h[0] - h[1];
         if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
+            RectangleConstraint c3 = new RectangleConstraint(
+                    0.0, new Range(0.0, fixedWidth),
                     LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+                    LengthConstraintType.FIXED
+            );
             Size2D size = this.leftBlock.arrange(g2, c3);
             w[2] = size.width;
         }
+        else {
+            w[2] = 0.0;
+        }
         h[3] = h[2];
         if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
+            RectangleConstraint c4 = new RectangleConstraint(
+                    0.0, new Range(0.0, fixedWidth - w[2]),
                     LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+                    LengthConstraintType.FIXED
+            );
             Size2D size = this.rightBlock.arrange(g2, c4);
             w[3] = size.width;
         }
+        else {
+            w[3] = 0.0;
+        }
         h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+        w[4] = fixedWidth - w[2] - w[3];
         RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
         if (this.centerBlock != null) {
             this.centerBlock.arrange(g2, c5);
         }
 
         if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, fixedWidth, h[0]));
         }
         if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], fixedWidth, h[1]));
         }
         if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));
         }
         if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[2]));
         }
         if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[2]));
+        }
+        return new Size2D(fixedWidth, constraint.getHeight());
+    }
+    // Otherwise, if the height is unconstrained (LengthConstraintType.NONE), compute the natural height.
+    else {
+        double topHeight = 0.0, bottomHeight = 0.0, middleHeight = 0.0;
+        double leftWidth = 0.0, rightWidth = 0.0;
+        Size2D topSize = null, bottomSize = null, leftSize = null, rightSize = null, centerSize = null;
+        
+        // Arrange the top block (if any) using the fixed width and no height constraint.
+        if (this.topBlock != null) {
+            RectangleConstraint ct = new RectangleConstraint(
+                    fixedWidth, null, LengthConstraintType.FIXED,
+                    0.0, null, LengthConstraintType.NONE
+            );
+            topSize = this.topBlock.arrange(g2, ct);
+            topHeight = topSize.height;
+        }
+        
+        // Arrange the bottom block (if any).
+        if (this.bottomBlock != null) {
+            RectangleConstraint cb = new RectangleConstraint(
+                    fixedWidth, null, LengthConstraintType.FIXED,
+                    0.0, null, LengthConstraintType.NONE
+            );
+            bottomSize = this.bottomBlock.arrange(g2, cb);
+            bottomHeight = bottomSize.height;
+        }
+        
+        // Arrange the left block (if any) with a width range capped at the full width.
+        if (this.leftBlock != null) {
+            RectangleConstraint cl = new RectangleConstraint(
+                    null, new Range(0.0, fixedWidth), LengthConstraintType.RANGE,
+                    Double.POSITIVE_INFINITY, null, LengthConstraintType.NONE
+            );
+            leftSize = this.leftBlock.arrange(g2, cl);
+            leftWidth = leftSize.width;
+            middleHeight = Math.max(middleHeight, leftSize.height);
+        }
+        
+        // Arrange the right block (if any) such that it does not exceed the remaining width.
+        double availableForRight = fixedWidth - leftWidth;
+        if (availableForRight < 0) {
+            availableForRight = 0;
+        }
+        if (this.rightBlock != null) {
+            RectangleConstraint cr = new RectangleConstraint(
+                    null, new Range(0.0, availableForRight), LengthConstraintType.RANGE,
+                    Double.POSITIVE_INFINITY, null, LengthConstraintType.NONE
+            );
+            rightSize = this.rightBlock.arrange(g2, cr);
+            rightWidth = rightSize.width;
+            middleHeight = Math.max(middleHeight, rightSize.height);
+        }
+        
+        // Arrange the center block (if any) using the remaining width.
+        double availableForCenter = fixedWidth - leftWidth - rightWidth;
+        if (availableForCenter < 0) {
+            availableForCenter = 0;
+        }
+        if (this.centerBlock != null) {
+            RectangleConstraint cc = new RectangleConstraint(
+                    availableForCenter, null, LengthConstraintType.FIXED,
+                    Double.POSITIVE_INFINITY, null, LengthConstraintType.NONE
+            );
+            centerSize = this.centerBlock.arrange(g2, cc);
+            middleHeight = Math.max(middleHeight, centerSize.height);
+        }
+        
+        double totalHeight = topHeight + middleHeight + bottomHeight;
+        
+        // Set bounds for the blocks.
+        double y = 0.0;
+        if (this.topBlock != null) {
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, y, fixedWidth, topHeight));
+            y += topHeight;
+        }
+        if (this.leftBlock != null) {
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, y, leftWidth, middleHeight));
+        }
+        if (this.centerBlock != null) {
+            this.centerBlock.setBounds(new Rectangle2D.Double(leftWidth, y, availableForCenter, middleHeight));
+        }
+        if (this.rightBlock != null) {
+            this.rightBlock.setBounds(new Rectangle2D.Double(leftWidth + availableForCenter, y, rightWidth, middleHeight));
+        }
+        y += middleHeight;
+        if (this.bottomBlock != null) {
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, y, fixedWidth, bottomHeight));
+        }
+        return new Size2D(fixedWidth, totalHeight);
     }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
 }
\ No newline at end of file
