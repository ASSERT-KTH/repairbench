diff --git a/tmp/f074b0b9-d038-4f67-823a-3e3a772bda82_buggy.java b/tmp/7f615e5c-f3a2-4667-889f-2e7e8a4ae840_fixed.java
index 63a7c80..5bb2557 100644
--- a/tmp/f074b0b9-d038-4f67-823a-3e3a772bda82_buggy.java
+++ b/tmp/7f615e5c-f3a2-4667-889f-2e7e8a4ae840_fixed.java
@@ -1,77 +1,155 @@
-    /**
-     * Arranges the items within a container.
-     *
-     * @param container  the container.
-     * @param constraint  the constraint.
-     * @param g2  the graphics device.
-     *
-     * @return The container size after the arrangement.
-     */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
+    // If the vertical constraint is NONE then we compute the overall height
+    // from the preferred sizes of the blocks rather than subtracting from a fixed height.
+    if (constraint.getHeightConstraintType() == LengthConstraintType.NONE) {
+        double fixedWidth = constraint.getWidth();
+        double topHeight = 0.0;
+        if (this.topBlock != null) {
+            RectangleConstraint topConstraint = new RectangleConstraint(
+                    fixedWidth, null, LengthConstraintType.FIXED);
+            Size2D topSize = this.topBlock.arrange(g2, topConstraint);
+            topHeight = topSize.getHeight();
+        }
+        double bottomHeight = 0.0;
+        if (this.bottomBlock != null) {
+            RectangleConstraint bottomConstraint = new RectangleConstraint(
+                    fixedWidth, null, LengthConstraintType.FIXED);
+            Size2D bottomSize = this.bottomBlock.arrange(g2, bottomConstraint);
+            bottomHeight = bottomSize.getHeight();
+        }
+        
+        // For the centre area we need to arrange the left, right, and center blocks.
+        // We first get the preferred widths for the side blocks.
+        double leftWidth = 0.0;
+        Size2D leftSize = null;
+        if (this.leftBlock != null) {
+            // Arrange with no width/height constraints to obtain its natural size
+            leftSize = this.leftBlock.arrange(g2, RectangleConstraint.none());
+            leftWidth = leftSize.getWidth();
+        }
+        double rightWidth = 0.0;
+        Size2D rightSize = null;
+        if (this.rightBlock != null) {
+            rightSize = this.rightBlock.arrange(g2, RectangleConstraint.none());
+            rightWidth = rightSize.getWidth();
+        }
+        
+        // The remaining width is for the center block.
+        double centerWidth = fixedWidth - leftWidth - rightWidth;
+        if (centerWidth < 0) {
+            centerWidth = 0;
+        }
+        Size2D centerSize = null;
+        if (this.centerBlock != null) {
+            RectangleConstraint centerConstraint = new RectangleConstraint(
+                    centerWidth, null, LengthConstraintType.FIXED);
+            centerSize = this.centerBlock.arrange(g2, centerConstraint);
+        }
+        
+        // The height for the middle area is the maximum of the heights returned
+        // by the left, right and center blocks.
+        double middleHeight = 0.0;
+        if (centerSize != null) {
+            middleHeight = Math.max(middleHeight, centerSize.getHeight());
+        }
+        if (leftSize != null) {
+            middleHeight = Math.max(middleHeight, leftSize.getHeight());
+        }
+        if (rightSize != null) {
+            middleHeight = Math.max(middleHeight, rightSize.getHeight());
+        }
+        
+        double totalHeight = topHeight + middleHeight + bottomHeight;
+        
+        // Set block bounds.
+        if (this.topBlock != null) {
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, fixedWidth,
+                    topHeight));
+        }
+        if (this.bottomBlock != null) {
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0,
+                    topHeight + middleHeight, fixedWidth, bottomHeight));
+        }
+        if (this.leftBlock != null) {
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, topHeight,
+                    leftWidth, middleHeight));
+        }
+        if (this.rightBlock != null) {
+            this.rightBlock.setBounds(new Rectangle2D.Double(fixedWidth - rightWidth,
+                    topHeight, rightWidth, middleHeight));
+        }
+        if (this.centerBlock != null) {
+            this.centerBlock.setBounds(new Rectangle2D.Double(leftWidth, topHeight,
+                    centerWidth, middleHeight));
+        }
+        return new Size2D(fixedWidth, totalHeight);
+    }
+    else {
+        // When the height is fixed (or a range) we use the fixed-height algorithm.
         double[] w = new double[5];
         double[] h = new double[5];
         w[0] = constraint.getWidth();
         if (this.topBlock != null) {
             RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                     LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
+                    new Range(0.0, constraint.getHeight()), LengthConstraintType.RANGE);
             Size2D size = this.topBlock.arrange(g2, c1);
-            h[0] = size.height;
+            h[0] = size.getHeight();
         }
         w[1] = w[0];
         if (this.bottomBlock != null) {
+            double availableHeightForBottom = Math.max(constraint.getHeight() - h[0], 0.0);
             RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                    LengthConstraintType.FIXED, 0.0,
+                    new Range(0.0, availableHeightForBottom), LengthConstraintType.RANGE);
             Size2D size = this.bottomBlock.arrange(g2, c2);
-            h[1] = size.height;
+            h[1] = size.getHeight();
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+        h[2] = constraint.getHeight() - h[0] - h[1];
         if (this.leftBlock != null) {
             RectangleConstraint c3 = new RectangleConstraint(0.0,
                     new Range(0.0, constraint.getWidth()),
                     LengthConstraintType.RANGE, h[2], null,
                     LengthConstraintType.FIXED);
             Size2D size = this.leftBlock.arrange(g2, c3);
-            w[2] = size.width;
+            w[2] = size.getWidth();
         }
         h[3] = h[2];
         if (this.rightBlock != null) {
             RectangleConstraint c4 = new RectangleConstraint(0.0,
                     new Range(0.0, constraint.getWidth() - w[2]),
                     LengthConstraintType.RANGE, h[2], null,
                     LengthConstraintType.FIXED);
             Size2D size = this.rightBlock.arrange(g2, c4);
-            w[3] = size.width;
+            w[3] = size.getWidth();
         }
         h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+        w[4] = constraint.getWidth() - w[2] - w[3];
         RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
         if (this.centerBlock != null) {
             this.centerBlock.arrange(g2, c5);
         }
-
         if (this.topBlock != null) {
             this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
                     h[0]));
         }
         if (this.bottomBlock != null) {
             this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
                     w[1], h[1]));
         }
         if (this.leftBlock != null) {
             this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
                     h[2]));
         }
         if (this.rightBlock != null) {
             this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
                     w[3], h[3]));
         }
         if (this.centerBlock != null) {
             this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
                     h[4]));
         }
         return new Size2D(constraint.getWidth(), constraint.getHeight());
     }
+}
\ No newline at end of file
