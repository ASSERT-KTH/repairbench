diff --git a/tmp/aaa59190-fa4d-47ca-b36a-e03990e94d98_buggy.java b/tmp/dd5ebf62-bde5-40f3-a8a8-64ac464838da_fixed.java
index 63a7c80..e2bc8a0 100644
--- a/tmp/aaa59190-fa4d-47ca-b36a-e03990e94d98_buggy.java
+++ b/tmp/dd5ebf62-bde5-40f3-a8a8-64ac464838da_fixed.java
@@ -1,77 +1,154 @@
 /**
  * Arranges the items within a container.
  *
+ * If the height constraint is NONE (i.e. no fixed height is provided), then the
+ * natural (preferred) heights of the blocks are used to compute the overall height.
+ * Otherwise, the fixed height is used (and the original algorithm is applied).
+ *
  * @param container  the container.
-     * @param constraint  the constraint.
  * @param g2  the graphics device.
+ * @param constraint  the rectangle constraint.
  *
  * @return The container size after the arrangement.
  */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
+    // If the height is not fixed, we must compute the natural (preferred) height.
+    if (constraint.getHeightConstraintType() == LengthConstraintType.NONE) {
+        double fixedWidth = constraint.getWidth();
+        double topHeight = 0.0;
+        double bottomHeight = 0.0;
+        double leftWidth = 0.0;
+        double rightWidth = 0.0;
+        double middleHeight = 0.0;
+        
+        // Arrange TOP block (if any) using the fixed width; height is free.
+        if (this.topBlock != null) {
+            // Constrain the width only...
+            RectangleConstraint topConstraint 
+                    = new RectangleConstraint(fixedWidth, null, LengthConstraintType.FIXED);
+            Size2D topSize = this.topBlock.arrange(g2, topConstraint);
+            topHeight = topSize.getHeight();
+        }
+        
+        // Arrange BOTTOM block (if any) using the fixed width.
+        if (this.bottomBlock != null) {
+            RectangleConstraint bottomConstraint 
+                    = new RectangleConstraint(fixedWidth, null, LengthConstraintType.FIXED);
+            Size2D bottomSize = this.bottomBlock.arrange(g2, bottomConstraint);
+            bottomHeight = bottomSize.getHeight();
+        }
+        
+        // Arrange LEFT block (if any) with no constraints.
+        if (this.leftBlock != null) {
+            Size2D leftSize = this.leftBlock.arrange(g2, RectangleConstraint.NONE);
+            leftWidth = leftSize.getWidth();
+            middleHeight = Math.max(middleHeight, leftSize.getHeight());
+        }
+        
+        // Arrange RIGHT block (if any) with no constraints.
+        if (this.rightBlock != null) {
+            Size2D rightSize = this.rightBlock.arrange(g2, RectangleConstraint.NONE);
+            rightWidth = rightSize.getWidth();
+            middleHeight = Math.max(middleHeight, rightSize.getHeight());
+        }
+        
+        // Arrange CENTER block (if any). Its available width is whatâ€™s left.
+        if (this.centerBlock != null) {
+            double centerWidth = Math.max(0.0, fixedWidth - leftWidth - rightWidth);
+            RectangleConstraint centerConstraint 
+                    = new RectangleConstraint(centerWidth, null, LengthConstraintType.FIXED);
+            Size2D centerSize = this.centerBlock.arrange(g2, centerConstraint);
+            middleHeight = Math.max(middleHeight, centerSize.getHeight());
+        }
+        
+        // Overall height is the sum of top, middle and bottom heights.
+        double totalHeight = topHeight + middleHeight + bottomHeight;
+        
+        // Set bounds for each block.
+        double y = 0.0;
+        if (this.topBlock != null) {
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, y, fixedWidth, topHeight));
+            y += topHeight;
+        }
+        double middleY = y;
+        double x = 0.0;
+        if (this.leftBlock != null) {
+            this.leftBlock.setBounds(new Rectangle2D.Double(x, middleY, leftWidth, middleHeight));
+            x += leftWidth;
+        }
+        if (this.centerBlock != null) {
+            this.centerBlock.setBounds(new Rectangle2D.Double(
+                    x, middleY, Math.max(0.0, fixedWidth - leftWidth - rightWidth), middleHeight));
+        }
+        if (this.rightBlock != null) {
+            this.rightBlock.setBounds(new Rectangle2D.Double(fixedWidth - rightWidth, middleY, rightWidth, middleHeight));
+        }
+        if (this.bottomBlock != null) {
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, y + middleHeight, fixedWidth, bottomHeight));
+        }
+        return new Size2D(fixedWidth, totalHeight);
+    }
+    else { 
+        // Otherwise, use the fixed height algorithm (original code)...
         double[] w = new double[5];
         double[] h = new double[5];
         w[0] = constraint.getWidth();
         if (this.topBlock != null) {
             RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                     LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
+                    new Range(0.0, constraint.getHeight()), LengthConstraintType.RANGE);
             Size2D size = this.topBlock.arrange(g2, c1);
-            h[0] = size.height;
+            h[0] = size.getHeight();
         }
         w[1] = w[0];
         if (this.bottomBlock != null) {
             RectangleConstraint c2 = new RectangleConstraint(w[0], null,
                     LengthConstraintType.FIXED, 0.0, new Range(0.0,
                     constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
             Size2D size = this.bottomBlock.arrange(g2, c2);
-            h[1] = size.height;
+            h[1] = size.getHeight();
         }
         h[2] = constraint.getHeight() - h[1] - h[0];
         if (this.leftBlock != null) {
             RectangleConstraint c3 = new RectangleConstraint(0.0,
                     new Range(0.0, constraint.getWidth()),
                     LengthConstraintType.RANGE, h[2], null,
                     LengthConstraintType.FIXED);
             Size2D size = this.leftBlock.arrange(g2, c3);
-            w[2] = size.width;
+            w[2] = size.getWidth();
         }
         h[3] = h[2];
         if (this.rightBlock != null) {
             RectangleConstraint c4 = new RectangleConstraint(0.0,
                     new Range(0.0, constraint.getWidth() - w[2]),
                     LengthConstraintType.RANGE, h[2], null,
                     LengthConstraintType.FIXED);
             Size2D size = this.rightBlock.arrange(g2, c4);
-            w[3] = size.width;
+            w[3] = size.getWidth();
         }
         h[4] = h[2];
         w[4] = constraint.getWidth() - w[3] - w[2];
         RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
         if (this.centerBlock != null) {
             this.centerBlock.arrange(g2, c5);
         }
 
         if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));
         }
         if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));
         }
         if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));
         }
         if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3]));
         }
         if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));
         }
         return new Size2D(constraint.getWidth(), constraint.getHeight());
     }
+}
\ No newline at end of file
