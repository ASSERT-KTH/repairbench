diff --git a/tmp/65108f81-610b-4bfe-a231-a4a54ab3e897_buggy.java b/tmp/2a1d1916-2565-4e1c-a683-b79ac885165d_fixed.java
index 63a7c80..4db010f 100644
--- a/tmp/65108f81-610b-4bfe-a231-a4a54ab3e897_buggy.java
+++ b/tmp/2a1d1916-2565-4e1c-a683-b79ac885165d_fixed.java
@@ -1,77 +1,153 @@
 /**
  * Arranges the items within a container.
  *
+ * Note: This version distinguishes between a fixed‐height constraint and a free (NONE)
+ * height constraint. In the free‐height case the overall height is computed from the blocks’ preferred sizes.
+ *
  * @param container  the container.
-     * @param constraint  the constraint.
  * @param g2  the graphics device.
+ * @param constraint  the constraint.
  *
  * @return The container size after the arrangement.
  */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
+    // When the height is fixed we “force” the blocks into that height.
+    if (constraint.getHeightConstraintType() == LengthConstraintType.FIXED) {
         double[] w = new double[5];
         double[] h = new double[5];
         w[0] = constraint.getWidth();
         if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
+            RectangleConstraint c1 = new RectangleConstraint(
+                w[0], null, LengthConstraintType.FIXED,
+                0.0, new Range(0.0, constraint.getHeight()),
+                LengthConstraintType.RANGE
+            );
             Size2D size = this.topBlock.arrange(g2, c1);
             h[0] = size.height;
+        } else {
+            h[0] = 0.0;
         }
         w[1] = w[0];
         if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+            double availForBottom = Math.max(0.0, constraint.getHeight() - h[0]);
+            RectangleConstraint c2 = new RectangleConstraint(
+                w[0], null, LengthConstraintType.FIXED,
+                0.0, new Range(0.0, availForBottom),
+                LengthConstraintType.RANGE
+            );
             Size2D size = this.bottomBlock.arrange(g2, c2);
             h[1] = size.height;
+        } else {
+            h[1] = 0.0;
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+        // Middle area height is whatever space remains (or 0 if negative)
+        h[2] = Math.max(0.0, constraint.getHeight() - h[0] - h[1]);
         if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+            RectangleConstraint c3 = new RectangleConstraint(
+                0.0, new Range(0.0, constraint.getWidth()),
+                LengthConstraintType.RANGE, h[2],
+                null, LengthConstraintType.FIXED
+            );
             Size2D size = this.leftBlock.arrange(g2, c3);
             w[2] = size.width;
+        } else {
+            w[2] = 0.0;
         }
-        h[3] = h[2];
         if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+            double availForRight = Math.max(0.0, constraint.getWidth() - w[2]);
+            RectangleConstraint c4 = new RectangleConstraint(
+                0.0, new Range(0.0, availForRight),
+                LengthConstraintType.RANGE, h[2],
+                null, LengthConstraintType.FIXED
+            );
             Size2D size = this.rightBlock.arrange(g2, c4);
             w[3] = size.width;
+        } else {
+            w[3] = 0.0;
         }
+        w[4] = Math.max(0.0, constraint.getWidth() - w[2] - w[3]);
         h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
         RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
         if (this.centerBlock != null) {
             this.centerBlock.arrange(g2, c5);
         }
-
         if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));
         }
         if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));
         }
         if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));
         }
         if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[2]));
         }
         if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));
         }
         return new Size2D(constraint.getWidth(), constraint.getHeight());
     } 
+    // Free (NONE) height constraint: compute the natural height from the blocks.
+    else {
+        double availableWidth = constraint.getWidth();
+        double topHeight = 0.0;
+        if (this.topBlock != null) {
+            // Allow the top block to determine its natural height.
+            RectangleConstraint topConstraint = new RectangleConstraint(
+                availableWidth, null, LengthConstraintType.FIXED,
+                0.0, new Range(0.0, Double.POSITIVE_INFINITY),
+                LengthConstraintType.RANGE
+            );
+            Size2D size = this.topBlock.arrange(g2, topConstraint);
+            topHeight = size.height;
+        }
+        double bottomHeight = 0.0;
+        if (this.bottomBlock != null) {
+            RectangleConstraint bottomConstraint = new RectangleConstraint(
+                availableWidth, null, LengthConstraintType.FIXED,
+                0.0, new Range(0.0, Double.POSITIVE_INFINITY),
+                LengthConstraintType.RANGE
+            );
+            Size2D size = this.bottomBlock.arrange(g2, bottomConstraint);
+            bottomHeight = size.height;
+        }
+        // Get natural sizes (with no constraint) for the left, right and center blocks.
+        Size2D leftSize = (this.leftBlock != null) ? this.leftBlock.arrange(g2, RectangleConstraint.NONE)
+                                                  : new Size2D(0.0, 0.0);
+        Size2D rightSize = (this.rightBlock != null) ? this.rightBlock.arrange(g2, RectangleConstraint.NONE)
+                                                    : new Size2D(0.0, 0.0);
+        Size2D centerSize = (this.centerBlock != null) ? this.centerBlock.arrange(g2, RectangleConstraint.NONE)
+                                                      : new Size2D(0.0, 0.0);
+        // The middle area's height is the maximum of the left, right and center block heights.
+        double middleHeight = Math.max(centerSize.height, Math.max(leftSize.height, rightSize.height));
+        double centerWidth = availableWidth - leftSize.width - rightSize.width;
+        if (centerWidth < 0.0) {
+            centerWidth = 0.0;
+        }
+        if (this.centerBlock != null) {
+            // Re-arrange the center block to fit the available width and the determined middle height.
+            RectangleConstraint centerConstraint = new RectangleConstraint(centerWidth, middleHeight);
+            this.centerBlock.arrange(g2, centerConstraint);
+        }
+        // Set the bounds of each block.
+        if (this.topBlock != null) {
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, availableWidth, topHeight));
+        }
+        if (this.bottomBlock != null) {
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, topHeight + middleHeight, availableWidth, bottomHeight));
+        }
+        if (this.leftBlock != null) {
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, topHeight, leftSize.width, middleHeight));
+        }
+        if (this.rightBlock != null) {
+            this.rightBlock.setBounds(new Rectangle2D.Double(availableWidth - rightSize.width, topHeight, rightSize.width, middleHeight));
+        }
+        if (this.centerBlock != null) {
+            this.centerBlock.setBounds(new Rectangle2D.Double(leftSize.width, topHeight, centerWidth, middleHeight));
+        }
+        double totalHeight = topHeight + middleHeight + bottomHeight;
+        return new Size2D(availableWidth, totalHeight);
+    }
+}
\ No newline at end of file
