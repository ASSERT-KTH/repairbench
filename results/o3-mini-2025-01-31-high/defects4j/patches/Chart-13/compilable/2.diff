diff --git a/tmp/e151c3e7-9cac-4869-98ea-130f6c53c6c6_buggy.java b/tmp/f80c63f6-c3a8-4b95-a225-7520d84871af_fixed.java
index 63a7c80..cd41bd2 100644
--- a/tmp/e151c3e7-9cac-4869-98ea-130f6c53c6c6_buggy.java
+++ b/tmp/f80c63f6-c3a8-4b95-a225-7520d84871af_fixed.java
@@ -1,77 +1,188 @@
 /**
  * Arranges the items within a container.
  *
+ * If the height constraint is fixed, the blocks are laid out in a fixed‚Äêheight
+ * arrangement. But if the height constraint is NONE (as when only a width constraint
+ * is provided), then the overall height is computed from the natural (preferred)
+ * sizes of the blocks.
+ *
  * @param container  the container.
-     * @param constraint  the constraint.
  * @param g2  the graphics device.
+ * @param constraint  the constraint.
  *
  * @return The container size after the arrangement.
  */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
+    // Branch: if height is not specified (NONE), we compute the final height from the blocks'
+    // natural (unconstrained) sizes.
+    if (constraint.getHeightConstraintType() == LengthConstraintType.NONE) {
+        // The container width is fixed.
+        double fixedWidth = constraint.getWidth();
+
+        // Arrange the top block with a fixed width and no vertical constraint.
+        double topHeight = 0.0;
+        if (this.topBlock != null) {
+            RectangleConstraint topConstraint = new RectangleConstraint(
+                    fixedWidth, null, LengthConstraintType.FIXED,
+                    0.0, null, LengthConstraintType.NONE
+            );
+            Size2D topSize = this.topBlock.arrange(g2, topConstraint);
+            topHeight = topSize.height;
+        }
+
+        // Arrange the bottom block similarly.
+        double bottomHeight = 0.0;
+        if (this.bottomBlock != null) {
+            RectangleConstraint bottomConstraint = new RectangleConstraint(
+                    fixedWidth, null, LengthConstraintType.FIXED,
+                    0.0, null, LengthConstraintType.NONE
+            );
+            Size2D bottomSize = this.bottomBlock.arrange(g2, bottomConstraint);
+            bottomHeight = bottomSize.height;
+        }
+
+        // Next, arrange the left block.
+        double leftWidth = 0.0;
+        Size2D leftSize = new Size2D(0.0, 0.0);
+        if (this.leftBlock != null) {
+            // Constrain the left block's width to be at most the container width.
+            RectangleConstraint leftConstraint = new RectangleConstraint(
+                    0.0, new Range(0.0, fixedWidth), LengthConstraintType.RANGE,
+                    0.0, null, LengthConstraintType.NONE
+            );
+            leftSize = this.leftBlock.arrange(g2, leftConstraint);
+            leftWidth = leftSize.width;
+        }
+
+        // Arrange the right block. Its width is constrained to not exceed (container width - leftWidth).
+        double rightWidth = 0.0;
+        Size2D rightSize = new Size2D(0.0, 0.0);
+        if (this.rightBlock != null) {
+            RectangleConstraint rightConstraint = new RectangleConstraint(
+                    0.0, new Range(0.0, fixedWidth - leftWidth), LengthConstraintType.RANGE,
+                    0.0, null, LengthConstraintType.NONE
+            );
+            rightSize = this.rightBlock.arrange(g2, rightConstraint);
+            rightWidth = rightSize.width;
+        }
+
+        // With left/right determined, the center gets the remaining width.
+        double centerAvailableWidth = fixedWidth - leftWidth - rightWidth;
+        if (centerAvailableWidth < 0) {
+            centerAvailableWidth = 0;
+        }
+        Size2D centerSize = new Size2D(0.0, 0.0);
+        if (this.centerBlock != null) {
+            RectangleConstraint centerConstraint = new RectangleConstraint(
+                    centerAvailableWidth, null, LengthConstraintType.FIXED,
+                    0.0, null, LengthConstraintType.NONE
+            );
+            centerSize = this.centerBlock.arrange(g2, centerConstraint);
+        }
+
+        // The middle area height is the maximum natural height among the left, center and right blocks.
+        double middleHeight = Math.max(
+                (this.centerBlock != null ? centerSize.height : 0.0),
+                Math.max(leftSize.height, rightSize.height)
+        );
+
+        // Now re-arrange the blocks in the middle so that they use the allocated (fixed) height.
+        if (this.leftBlock != null) {
+            RectangleConstraint leftFixed = new RectangleConstraint(leftWidth, middleHeight);
+            this.leftBlock.arrange(g2, leftFixed);
+        }
+        if (this.rightBlock != null) {
+            RectangleConstraint rightFixed = new RectangleConstraint(rightWidth, middleHeight);
+            this.rightBlock.arrange(g2, rightFixed);
+        }
+        if (this.centerBlock != null) {
+            RectangleConstraint centerFixed = new RectangleConstraint(centerAvailableWidth, middleHeight);
+            this.centerBlock.arrange(g2, centerFixed);
+        }
+
+        // Set the bounds for each block.
+        if (this.topBlock != null) {
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, fixedWidth, topHeight));
+        }
+        if (this.leftBlock != null) {
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, topHeight, leftWidth, middleHeight));
+        }
+        if (this.centerBlock != null) {
+            this.centerBlock.setBounds(new Rectangle2D.Double(leftWidth, topHeight, centerAvailableWidth, middleHeight));
+        }
+        if (this.rightBlock != null) {
+            // Position the right block at the far right.
+            this.rightBlock.setBounds(new Rectangle2D.Double(fixedWidth - rightWidth, topHeight, rightWidth, middleHeight));
+        }
+        if (this.bottomBlock != null) {
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, topHeight + middleHeight, fixedWidth, bottomHeight));
+        }
+
+        // The overall container height is the sum of the top, middle and bottom areas.
+        return new Size2D(fixedWidth, topHeight + middleHeight + bottomHeight);
+    }
+    else {
+        // Height is fixed; use the original algorithm.
         double[] w = new double[5];
         double[] h = new double[5];
         w[0] = constraint.getWidth();
         if (this.topBlock != null) {
             RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                     LengthConstraintType.FIXED, 0.0,
                     new Range(0.0, constraint.getHeight()),
                     LengthConstraintType.RANGE);
             Size2D size = this.topBlock.arrange(g2, c1);
             h[0] = size.height;
         }
         w[1] = w[0];
         if (this.bottomBlock != null) {
             RectangleConstraint c2 = new RectangleConstraint(w[0], null,
                     LengthConstraintType.FIXED, 0.0, new Range(0.0,
                     constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
             Size2D size = this.bottomBlock.arrange(g2, c2);
             h[1] = size.height;
         }
         h[2] = constraint.getHeight() - h[1] - h[0];
         if (this.leftBlock != null) {
             RectangleConstraint c3 = new RectangleConstraint(0.0,
                     new Range(0.0, constraint.getWidth()),
                     LengthConstraintType.RANGE, h[2], null,
                     LengthConstraintType.FIXED);
             Size2D size = this.leftBlock.arrange(g2, c3);
             w[2] = size.width;
         }
         h[3] = h[2];
         if (this.rightBlock != null) {
             RectangleConstraint c4 = new RectangleConstraint(0.0,
                     new Range(0.0, constraint.getWidth() - w[2]),
                     LengthConstraintType.RANGE, h[2], null,
                     LengthConstraintType.FIXED);
             Size2D size = this.rightBlock.arrange(g2, c4);
             w[3] = size.width;
         }
         h[4] = h[2];
         w[4] = constraint.getWidth() - w[3] - w[2];
         RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
         if (this.centerBlock != null) {
             this.centerBlock.arrange(g2, c5);
         }
 
         if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));
         }
         if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));
         }
         if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));
         }
         if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3]));
         }
         if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));
         }
         return new Size2D(constraint.getWidth(), constraint.getHeight());
     }
+}
\ No newline at end of file
