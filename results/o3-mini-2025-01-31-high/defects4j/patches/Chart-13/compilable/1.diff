diff --git a/tmp/e19f12ca-3045-4de1-ae25-3fbd326ba275_buggy.java b/tmp/7974ca64-2516-4b16-9491-6a2c0ec766e9_fixed.java
index 63a7c80..b2857e1 100644
--- a/tmp/e19f12ca-3045-4de1-ae25-3fbd326ba275_buggy.java
+++ b/tmp/7974ca64-2516-4b16-9491-6a2c0ec766e9_fixed.java
@@ -1,77 +1,142 @@
-    /**
-     * Arranges the items within a container.
-     *
-     * @param container  the container.
-     * @param constraint  the constraint.
-     * @param g2  the graphics device.
-     *
-     * @return The container size after the arrangement.
-     */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
+    // If the height is not fixed (i.e. unconstrained), compute the overall height
+    if (constraint.getHeightConstraintType() == LengthConstraintType.NONE) {
+        // Arrange the top block with the fixed width and an unbounded height.
+        double topHeight = 0.0;
+        if (this.topBlock != null) {
+            RectangleConstraint topConstraint = new RectangleConstraint(
+                    constraint.getWidth(), null,
+                    LengthConstraintType.FIXED, 0.0,
+                    new Range(0.0, Double.POSITIVE_INFINITY),
+                    LengthConstraintType.RANGE
+            );
+            Size2D topSize = this.topBlock.arrange(g2, topConstraint);
+            topHeight = topSize.height;
+        }
+
+        // Arrange the bottom block similarly.
+        double bottomHeight = 0.0;
+        if (this.bottomBlock != null) {
+            RectangleConstraint bottomConstraint = new RectangleConstraint(
+                    constraint.getWidth(), null,
+                    LengthConstraintType.FIXED, 0.0,
+                    new Range(0.0, Double.POSITIVE_INFINITY),
+                    LengthConstraintType.RANGE
+            );
+            Size2D bottomSize = this.bottomBlock.arrange(g2, bottomConstraint);
+            bottomHeight = bottomSize.height;
+        }
+
+        // Arrange the left and right blocks with no constraints.
+        double leftWidth = 0.0;
+        double leftHeight = 0.0;
+        if (this.leftBlock != null) {
+            Size2D leftSize = this.leftBlock.arrange(g2, new RectangleConstraint(null, null));
+            leftWidth = leftSize.width;
+            leftHeight = leftSize.height;
+        }
+        double rightWidth = 0.0;
+        double rightHeight = 0.0;
+        if (this.rightBlock != null) {
+            Size2D rightSize = this.rightBlock.arrange(g2, new RectangleConstraint(null, null));
+            rightWidth = rightSize.width;
+            rightHeight = rightSize.height;
+        }
+
+        // The center block is given the available width (fixed width minus the side blocks).
+        double centerAvailWidth = Math.max(0.0, constraint.getWidth() - leftWidth - rightWidth);
+        double centerHeight = 0.0;
+        if (this.centerBlock != null) {
+            Size2D centerSize = this.centerBlock.arrange(g2, new RectangleConstraint(centerAvailWidth, null));
+            centerHeight = centerSize.height;
+        }
+        // The middle areaâ€™s height is the maximum among left, center, and right.
+        double middleHeight = Math.max(centerHeight, Math.max(leftHeight, rightHeight));
+
+        // Total height is the sum of the top, middle, and bottom heights.
+        double totalHeight = topHeight + middleHeight + bottomHeight;
+
+        // Set the bounds for each block.
+        if (this.topBlock != null) {
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, constraint.getWidth(), topHeight));
+        }
+        if (this.leftBlock != null) {
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, topHeight, leftWidth, middleHeight));
+        }
+        if (this.centerBlock != null) {
+            this.centerBlock.setBounds(new Rectangle2D.Double(leftWidth, topHeight, centerAvailWidth, middleHeight));
+        }
+        if (this.rightBlock != null) {
+            this.rightBlock.setBounds(new Rectangle2D.Double(leftWidth + centerAvailWidth, topHeight, rightWidth, middleHeight));
+        }
+        if (this.bottomBlock != null) {
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, topHeight + middleHeight, constraint.getWidth(), bottomHeight));
+        }
+        return new Size2D(constraint.getWidth(), totalHeight);
+    }
+    else {
+        // Fixed height branch (unchanged)
         double[] w = new double[5];
         double[] h = new double[5];
         w[0] = constraint.getWidth();
         if (this.topBlock != null) {
             RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                     LengthConstraintType.FIXED, 0.0,
                     new Range(0.0, constraint.getHeight()),
                     LengthConstraintType.RANGE);
             Size2D size = this.topBlock.arrange(g2, c1);
             h[0] = size.height;
         }
         w[1] = w[0];
         if (this.bottomBlock != null) {
             RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                    LengthConstraintType.FIXED, 0.0,
+                    new Range(0.0, constraint.getHeight() - h[0]),
+                    LengthConstraintType.RANGE);
             Size2D size = this.bottomBlock.arrange(g2, c2);
             h[1] = size.height;
         }
         h[2] = constraint.getHeight() - h[1] - h[0];
         if (this.leftBlock != null) {
             RectangleConstraint c3 = new RectangleConstraint(0.0,
                     new Range(0.0, constraint.getWidth()),
                     LengthConstraintType.RANGE, h[2], null,
                     LengthConstraintType.FIXED);
             Size2D size = this.leftBlock.arrange(g2, c3);
             w[2] = size.width;
         }
         h[3] = h[2];
         if (this.rightBlock != null) {
             RectangleConstraint c4 = new RectangleConstraint(0.0,
                     new Range(0.0, constraint.getWidth() - w[2]),
                     LengthConstraintType.RANGE, h[2], null,
                     LengthConstraintType.FIXED);
             Size2D size = this.rightBlock.arrange(g2, c4);
             w[3] = size.width;
         }
         h[4] = h[2];
         w[4] = constraint.getWidth() - w[3] - w[2];
         RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
         if (this.centerBlock != null) {
             this.centerBlock.arrange(g2, c5);
         }
 
         if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));
         }
         if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));
         }
         if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));
         }
         if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3]));
         }
         if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));
         }
         return new Size2D(constraint.getWidth(), constraint.getHeight());
     }
+}
\ No newline at end of file
