diff --git a/tmp/e340dc98-5589-4480-85ac-d8f6aa75d591_buggy.java b/tmp/af5e93a1-b41a-43ff-9003-926c5aa8b79a_fixed.java
index b4e6f03..ab0184e 100644
--- a/tmp/e340dc98-5589-4480-85ac-d8f6aa75d591_buggy.java
+++ b/tmp/af5e93a1-b41a-43ff-9003-926c5aa8b79a_fixed.java
@@ -1,44 +1,29 @@
-    /**
-     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
-     * <code>&lt;img src></code>).
-     * <p/>
-     * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
-     * <p/>
-     * If the attribute value is already absolute (i.e. it starts with a protocol, like
-     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
-     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
-     * absolute using that.
-     * <p/>
-     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
-     * <code>String absUrl = linkEl.attr("abs:href");</code>
-     *
-     * @param attributeKey The attribute key
-     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
-     * could not be made successfully into a URL.
-     * @see #attr
-     * @see java.net.URL#URL(java.net.URL, String)
-     */
 public String absUrl(String attributeKey) {
     Validate.notEmpty(attributeKey);
 
     String relUrl = attr(attributeKey);
-        if (!hasAttr(attributeKey)) {
-            return ""; // nothing to make absolute with
-        } else {
+    if (!hasAttr(attributeKey))
+        return "";
+
+    try {
         URL base;
-            try {
         try {
             base = new URL(baseUri);
         } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
+            // baseUri is invalid. Try treating the attribute as an absolute URL.
             URL abs = new URL(relUrl);
             return abs.toExternalForm();
         }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
+        // if the relative URL is just a query (e.g., "?foo"), then Java's URL resolution
+        // would drop the file portion of the base URL; fix this by appending the query to base's path.
+        if (relUrl.startsWith("?")) {
+            return new URL(base.getProtocol(), base.getHost(), base.getPort(), base.getPath() + relUrl)
+                    .toExternalForm();
+        }
+        // normal behavior for other relative URLs
         URL abs = new URL(base, relUrl);
         return abs.toExternalForm();
     } catch (MalformedURLException e) {
         return "";
     }
 }
\ No newline at end of file
-    }
