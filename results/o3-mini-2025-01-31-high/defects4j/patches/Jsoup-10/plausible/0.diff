diff --git a/tmp/f7d5222b-2cf1-4216-831e-7a7042402355_buggy.java b/tmp/07bf1d2a-5401-46bf-b01b-8bd3a6363621_fixed.java
index b4e6f03..f17fa6f 100644
--- a/tmp/f7d5222b-2cf1-4216-831e-7a7042402355_buggy.java
+++ b/tmp/07bf1d2a-5401-46bf-b01b-8bd3a6363621_fixed.java
@@ -1,44 +1,36 @@
-    /**
-     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
-     * <code>&lt;img src></code>).
-     * <p/>
-     * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
-     * <p/>
-     * If the attribute value is already absolute (i.e. it starts with a protocol, like
-     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
-     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
-     * absolute using that.
-     * <p/>
-     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
-     * <code>String absUrl = linkEl.attr("abs:href");</code>
-     *
-     * @param attributeKey The attribute key
-     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
-     * could not be made successfully into a URL.
-     * @see #attr
-     * @see java.net.URL#URL(java.net.URL, String)
-     */
 public String absUrl(String attributeKey) {
     Validate.notEmpty(attributeKey);
 
     String relUrl = attr(attributeKey);
-        if (!hasAttr(attributeKey)) {
-            return ""; // nothing to make absolute with
-        } else {
+    if (!hasAttr(attributeKey))
+        return "";
+
+    try {
         URL base;
-            try {
         try {
             base = new URL(baseUri);
         } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
+            // the baseUri is not a valid URL, so try to use the attribute as an absolute URL
             URL abs = new URL(relUrl);
             return abs.toExternalForm();
         }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
+
+        // workaround: if the href is a relative query ("?foo"), Java's URL
+        // resolution drops the last path segment. Instead, remove any query from the
+        // base and append the relative query.
+        if (relUrl.startsWith("?")) {
+            String baseStr = base.toExternalForm();
+            int queryIndex = baseStr.indexOf("?");
+            if (queryIndex != -1) {
+                baseStr = baseStr.substring(0, queryIndex);
+            }
+            return baseStr + relUrl;
+        }
+
+        // Normal URL resolution for non-query relative URLs.
         URL abs = new URL(base, relUrl);
         return abs.toExternalForm();
     } catch (MalformedURLException e) {
         return "";
     }
 }
\ No newline at end of file
-    }
