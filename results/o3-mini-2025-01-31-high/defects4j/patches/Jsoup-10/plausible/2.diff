diff --git a/tmp/6b44abb8-cb61-4c0c-84cf-7aea7bbd90dd_buggy.java b/tmp/68704d28-e39d-4f94-b1dd-149435b237d9_fixed.java
index b4e6f03..e0d0dee 100644
--- a/tmp/6b44abb8-cb61-4c0c-84cf-7aea7bbd90dd_buggy.java
+++ b/tmp/68704d28-e39d-4f94-b1dd-149435b237d9_fixed.java
@@ -1,44 +1,29 @@
-    /**
-     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
-     * <code>&lt;img src></code>).
-     * <p/>
-     * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
-     * <p/>
-     * If the attribute value is already absolute (i.e. it starts with a protocol, like
-     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
-     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
-     * absolute using that.
-     * <p/>
-     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
-     * <code>String absUrl = linkEl.attr("abs:href");</code>
-     *
-     * @param attributeKey The attribute key
-     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
-     * could not be made successfully into a URL.
-     * @see #attr
-     * @see java.net.URL#URL(java.net.URL, String)
-     */
 public String absUrl(String attributeKey) {
     Validate.notEmpty(attributeKey);
-
     String relUrl = attr(attributeKey);
-        if (!hasAttr(attributeKey)) {
-            return ""; // nothing to make absolute with
-        } else {
+    if (!hasAttr(attributeKey))
+        return "";
+    try {
         URL base;
-            try {
         try {
             base = new URL(baseUri);
         } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
-                    URL abs = new URL(relUrl);
-                    return abs.toExternalForm();
+            // The base URI is bad, but maybe the attr itself is an absolute URL.
+            return new URL(relUrl).toExternalForm();
+        }
+        // Workaround for a java.net.URL bug:
+        // When the relative URL is just a query (e.g., "?foo") and the base already has a query,
+        // the URL constructor drops the file name part.
+        // So if baseUri is "http://jsoup.org/path/file?bar", new URL(base, "?foo") yields "http://jsoup.org/path/?foo"
+        // rather than the expected "http://jsoup.org/path/file?foo".
+        if (relUrl.startsWith("?") && base.getQuery() != null) {
+            int pos = baseUri.indexOf('?');
+            String fixedBase = pos != -1 ? baseUri.substring(0, pos) : baseUri;
+            return new URL(fixedBase + relUrl).toExternalForm();
         }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
         URL abs = new URL(base, relUrl);
         return abs.toExternalForm();
     } catch (MalformedURLException e) {
         return "";
     }
 }
\ No newline at end of file
-    }
