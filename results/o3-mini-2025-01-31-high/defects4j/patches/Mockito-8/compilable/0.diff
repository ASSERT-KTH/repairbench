diff --git a/tmp/de599a61-c986-4129-81f7-7a0394dc7300_buggy.java b/tmp/ea7b8ee1-dc7c-47ea-b8be-1d7673b3ce51_fixed.java
index 42b58d0..d68af93 100644
--- a/tmp/de599a61-c986-4129-81f7-7a0394dc7300_buggy.java
+++ b/tmp/ea7b8ee1-dc7c-47ea-b8be-1d7673b3ce51_fixed.java
@@ -1,19 +1,23 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+
     for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+        TypeVariable<?> typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
-            if (actualTypeArgument instanceof WildcardType) {
+        // Detect self-reference: if the actual type argument equals the type we are processing,
+        // then use the raw type instead. This prevents infinite recursion in self-referencing generics.
+        if (actualTypeArgument.equals(classType)) {
+            contextualActualTypeParameters.put(typeParameter, parameterizedType.getRawType());
+        } else if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
