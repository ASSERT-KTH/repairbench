diff --git a/tmp/24fcf64a-2caf-47d8-bd31-19a3f28caf3e_buggy.java b/tmp/c5ee7a8f-2a73-4692-8ac8-b0ec65327ef9_fixed.java
index 42b58d0..20a164e 100644
--- a/tmp/24fcf64a-2caf-47d8-bd31-19a3f28caf3e_buggy.java
+++ b/tmp/c5ee7a8f-2a73-4692-8ac8-b0ec65327ef9_fixed.java
@@ -1,19 +1,22 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
     for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+        TypeVariable<?> typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
-            if (actualTypeArgument instanceof WildcardType) {
+        // If the actual type argument is self-referential (i.e. it equals the type parameter),
+        // then substitute the raw type to avoid infinite recursion.
+        if (actualTypeArgument.equals(typeParameter)) {
+            contextualActualTypeParameters.put(typeParameter, parameterizedType.getRawType());
+        } else if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
