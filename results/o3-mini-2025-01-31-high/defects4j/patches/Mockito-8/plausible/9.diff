diff --git a/tmp/7db6183d-b35e-48d8-b476-f11d3081463c_buggy.java b/tmp/2e2c8d39-c128-416f-af82-7ee3fa360a5e_fixed.java
index 42b58d0..30a04eb 100644
--- a/tmp/7db6183d-b35e-48d8-b476-f11d3081463c_buggy.java
+++ b/tmp/2e2c8d39-c128-416f-af82-7ee3fa360a5e_fixed.java
@@ -1,19 +1,23 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    Class<?> rawType = (Class<?>) parameterizedType.getRawType();
+    TypeVariable<?>[] typeParameters = rawType.getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
     for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+        TypeVariable<?> typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
-            if (actualTypeArgument instanceof WildcardType) {
+        // If the actual type argument is the same as the type variable, it is self-referencing.
+        // To avoid infinite recursion, register the raw type instead.
+        if (actualTypeArgument instanceof TypeVariable && actualTypeArgument.equals(typeParameter)) {
+            contextualActualTypeParameters.put(typeParameter, rawType);
+        } else if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
