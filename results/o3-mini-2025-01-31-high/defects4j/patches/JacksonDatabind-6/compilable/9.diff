diff --git a/tmp/8dd54375-7813-4d37-abac-1b4ae61b2c4c_buggy.java b/tmp/f49c638d-39c8-4f48-9337-e7540854f447_fixed.java
index cd412d2..b57b329 100644
--- a/tmp/8dd54375-7813-4d37-abac-1b4ae61b2c4c_buggy.java
+++ b/tmp/f49c638d-39c8-4f48-9337-e7540854f447_fixed.java
@@ -1,76 +1,125 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
     int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
+    char lastChar = dateStr.charAt(len - 1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
+    // If we got a plain date (only date, no time), use plain-date formatter
+    if (len <= 10 && Character.isDigit(lastChar)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
-        } else if (c == 'Z') {
-            df = _formatISO8601_z;
-            if (df == null) {
-                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
+        return df.parse(dateStr, pos);
     }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
+
+    // Check if a timezone indicator is present (e.g. "+01:00" or "-05:00")
+    boolean hasTZ = hasTimeZone(dateStr);
+
+    // Normalize timezone offset: if not 'Z' and a timezone is found, then remove the optional colon
+    if (lastChar != 'Z' && hasTZ) {
+        int tzPos = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));
+        if (tzPos != -1 && tzPos + 3 < dateStr.length() && dateStr.charAt(tzPos + 3) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
+            sb.deleteCharAt(tzPos + 3);
             dateStr = sb.toString();
-            }
-        } else {
-            // Let's see if we have timezone indicator or not...
-            if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+            len = dateStr.length();
+        } else if (tzPos != -1 && tzPos + 3 == dateStr.length()) {
+            // When timezone minutes are missing, append "00"
             dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
             len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
         }
+    }
+    // Refresh lastChar after possible modifications.
+    lastChar = dateStr.charAt(dateStr.length() - 1);
+
+    // Normalize the time portion.
+    int tPos = dateStr.indexOf('T');
+    if (tPos < 0) { // not in expected ISO-8601 format; fallback to plain
+        df = _formatPlain;
+        if (df == null) {
+            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
+        }
+        return df.parse(dateStr, pos);
+    }
+    // Determine the end of the time-part; if a timezone is present, that's where it starts.
+    int endOfTime = dateStr.length();
+    if (lastChar != 'Z' && hasTZ) {
+        int plusPos = dateStr.indexOf('+', tPos);
+        int minusPos = dateStr.indexOf('-', tPos);
+        if (plusPos > 0 && minusPos > 0) {
+            endOfTime = Math.min(plusPos, minusPos);
+        } else if (plusPos > 0) {
+            endOfTime = plusPos;
+        } else if (minusPos > 0) {
+            endOfTime = minusPos;
+        }
+    } else if (lastChar == 'Z') {
+        endOfTime = dateStr.length() - 1;
+    }
+    // Extract the time part (after 'T' and before the timezone)
+    String timePortion = dateStr.substring(tPos + 1, endOfTime);
+    String newTimePortion = timePortion;
+
+    // If only one colon is present in the time-part, seconds are missing.
+    if (timePortion.indexOf(':') == timePortion.lastIndexOf(':')) {
+        newTimePortion = timePortion + ":00";
+    }
+
+    // Look for fractional seconds. If missing, add ".000" after seconds.
+    int dotIndex = newTimePortion.indexOf('.');
+    if (dotIndex < 0) {
+        // Expecting HH:mm:ss to be exactly 8 characters; if so, append fractional milliseconds.
+        if (newTimePortion.length() == 8) {
+            newTimePortion = newTimePortion + ".000";
+        }
+    } else {
+        // There is a fractional part; normalize it to exactly three digits.
+        int fracStart = dotIndex + 1;
+        int fracEnd = fracStart;
+        while (fracEnd < newTimePortion.length() && Character.isDigit(newTimePortion.charAt(fracEnd))) {
+            fracEnd++;
+        }
+        String fraction = newTimePortion.substring(fracStart, fracEnd);
+        if (fraction.length() < 3) {
+            StringBuilder fracBuilder = new StringBuilder(fraction);
+            while (fracBuilder.length() < 3) {
+                fracBuilder.append('0');
+            }
+            newTimePortion = newTimePortion.substring(0, fracStart)
+                    + fracBuilder.toString()
+                    + newTimePortion.substring(fracEnd);
+        } else if (fraction.length() > 3) {
+            newTimePortion = newTimePortion.substring(0, fracStart)
+                    + fraction.substring(0, 3)
+                    + newTimePortion.substring(fracEnd);
+        }
+    }
+
+    // Rebuild the normalized date string.
+    String normalizedDateStr;
+    if (lastChar == 'Z') {
+        normalizedDateStr = dateStr.substring(0, tPos + 1) + newTimePortion + "Z";
+    } else if (hasTZ) {
+        String tzPart = dateStr.substring(endOfTime);
+        normalizedDateStr = dateStr.substring(0, tPos + 1) + newTimePortion + tzPart;
+    } else {
+        normalizedDateStr = dateStr.substring(0, tPos + 1) + newTimePortion;
+    }
+    dateStr = normalizedDateStr;
+
+    // Choose appropriate date format based on the timezone designator.
+    if (dateStr.charAt(dateStr.length() - 1) == 'Z') {
+        df = _formatISO8601_z;
+        if (df == null) {
+            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z,
+                    DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
+        }
+    } else {
         df = _formatISO8601;
         if (_formatISO8601 == null) {
-                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
-                }
-            } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
-                StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
-                }
-                sb.append('Z');
-                dateStr = sb.toString();
-                df = _formatISO8601_z;
-                if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
-                }
+            df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601,
+                    DATE_FORMAT_STR_ISO8601, _timezone, _locale);
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
