diff --git a/tmp/6e982346-3389-43f9-8c28-c4a06c91a69c_buggy.java b/tmp/8cc688d0-1ed3-42ff-8bff-29e1289433b6_fixed.java
index cd412d2..2bce7ec 100644
--- a/tmp/6e982346-3389-43f9-8c28-c4a06c91a69c_buggy.java
+++ b/tmp/8cc688d0-1ed3-42ff-8bff-29e1289433b6_fixed.java
@@ -1,76 +1,167 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
     /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
+     * timezone modifiers for ISO-8601, so some scrubbing is done here.
      */
     int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
     DateFormat df;
+    char lastChar = dateStr.charAt(len - 1);
 
-        // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
+    // [JACKSON-200]: plain date? (yyyy-MM-dd)
+    if (len <= 10 && Character.isDigit(lastChar)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
-        } else if (c == 'Z') {
+        return df.parse(dateStr, pos);
+    }
+    // Ends with 'Z' -> GMT timezone
+    else if (lastChar == 'Z') {
+        int tPos = dateStr.indexOf('T');
+        if (tPos >= 0) {
+            String datePortion = dateStr.substring(0, tPos + 1);
+            String timePortion = dateStr.substring(tPos + 1, len - 1);
+            String normalizedTime;
+            String[] timeParts = timePortion.split(":");
+            if (timeParts.length == 2) {
+                // Missing seconds part -- assume "00" seconds and add millis
+                normalizedTime = timeParts[0] + ":" + timeParts[1] + ":00.000";
+            } else if (timeParts.length >= 3) {
+                String secPart = timeParts[2];
+                String sec;
+                String ms;
+                int dotIndex = secPart.indexOf('.');
+                if (dotIndex < 0) {
+                    sec = secPart;
+                    ms = "000";
+                } else {
+                    sec = secPart.substring(0, dotIndex);
+                    ms = secPart.substring(dotIndex + 1);
+                }
+                if (sec.length() == 0) {
+                    sec = "00";
+                }
+                while (ms.length() < 3) {
+                    ms = ms + "0";
+                }
+                if (ms.length() > 3) {
+                    ms = ms.substring(0, 3);
+                }
+                normalizedTime = timeParts[0] + ":" + timeParts[1] + ":" + sec + "." + ms;
+            } else {
+                normalizedTime = "00:00:00.000";
+            }
+            dateStr = datePortion + normalizedTime + "Z";
+        }
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
+        return df.parse(dateStr, pos);
     }
-        } else {
-            // Let's see if we have timezone indicator or not...
+    // Otherwise: has explicit timezone indicator (like +01:00 or -05:00)
+    else {
         if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+            // Remove colon from timezone if present (e.g., change +01:00 -> +0100)
+            if (dateStr.charAt(dateStr.length() - 3) == ':') {
+                dateStr = dateStr.substring(0, dateStr.length() - 3)
+                    + dateStr.substring(dateStr.length() - 2);
+            }
+            // Append "00" if timezone minutes are missing (e.g., +01 -> +0100)
+            else if (dateStr.charAt(dateStr.length() - 5) == '+' || dateStr.charAt(dateStr.length() - 5) == '-') {
                 dateStr += "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
+            int tzStart = dateStr.length() - 5;
+            int tPos = dateStr.indexOf('T');
+            if (tPos < 0) { // Fallback to plain date format if no 'T'
+                df = _formatPlain;
+                if (df == null) {
+                    df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
                 }
+                return df.parse(dateStr, pos);
+            }
+            String datePortion = dateStr.substring(0, tPos + 1);
+            String timePortion = dateStr.substring(tPos + 1, tzStart);
+            String normalizedTime;
+            String[] timeParts = timePortion.split(":");
+            if (timeParts.length == 2) {
+                // Missing seconds part -- insert default seconds and millis
+                normalizedTime = timeParts[0] + ":" + timeParts[1] + ":00.000";
+            } else if (timeParts.length >= 3) {
+                String secPart = timeParts[2];
+                String sec;
+                String ms;
+                int dotIndex = secPart.indexOf('.');
+                if (dotIndex < 0) {
+                    sec = secPart;
+                    ms = "000";
+                } else {
+                    sec = secPart.substring(0, dotIndex);
+                    ms = secPart.substring(dotIndex + 1);
+                }
+                if (sec.length() == 0) {
+                    sec = "00";
+                }
+                while (ms.length() < 3) {
+                    ms = ms + "0";
+                }
+                if (ms.length() > 3) {
+                    ms = ms.substring(0, 3);
+                }
+                normalizedTime = timeParts[0] + ":" + timeParts[1] + ":" + sec + "." + ms;
+            } else {
+                normalizedTime = "00:00:00.000";
+            }
+            String tzPart = dateStr.substring(tzStart);
+            dateStr = datePortion + normalizedTime + tzPart;
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
+        }
+        // No timezone indicator: assume GMT by appending 'Z'
+        else {
+            int tPos = dateStr.indexOf('T');
+            if (tPos >= 0) {
+                String datePortion = dateStr.substring(0, tPos + 1);
+                String timePortion = dateStr.substring(tPos + 1);
+                String normalizedTime;
+                String[] timeParts = timePortion.split(":");
+                if (timeParts.length == 2) {
+                    normalizedTime = timeParts[0] + ":" + timeParts[1] + ":00.000";
+                } else if (timeParts.length >= 3) {
+                    String secPart = timeParts[2];
+                    String sec;
+                    String ms;
+                    int dotIndex = secPart.indexOf('.');
+                    if (dotIndex < 0) {
+                        sec = secPart;
+                        ms = "000";
                     } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
-                StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
-                }
-                sb.append('Z');
-                dateStr = sb.toString();
+                        sec = secPart.substring(0, dotIndex);
+                        ms = secPart.substring(dotIndex + 1);
+                    }
+                    if (sec.length() == 0) {
+                        sec = "00";
+                    }
+                    while (ms.length() < 3) {
+                        ms = ms + "0";
+                    }
+                    if (ms.length() > 3) {
+                        ms = ms.substring(0, 3);
+                    }
+                    normalizedTime = timeParts[0] + ":" + timeParts[1] + ":" + sec + "." + ms;
+                } else {
+                    normalizedTime = "00:00:00.000";
+                }
+                dateStr = datePortion + normalizedTime + "Z";
+            } else {
+                dateStr = dateStr + "Z";
+            }
             df = _formatISO8601_z;
             if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
-                }
+                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
             }
         }
         return df.parse(dateStr, pos);
     }
+}
\ No newline at end of file
