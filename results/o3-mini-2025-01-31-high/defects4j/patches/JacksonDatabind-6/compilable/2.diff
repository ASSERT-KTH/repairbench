diff --git a/tmp/ff25609a-899a-4fdf-a528-6bdf22988425_buggy.java b/tmp/c08378e6-08e9-4731-861e-48fcfd50b9c6_fixed.java
index cd412d2..f3d588a 100644
--- a/tmp/ff25609a-899a-4fdf-a528-6bdf22988425_buggy.java
+++ b/tmp/c08378e6-08e9-4731-861e-48fcfd50b9c6_fixed.java
@@ -1,76 +1,116 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
+    // If it looks like a "plain" date (yyyy-MM-dd), use plain format:
+    if (len <= 10 && Character.isDigit(dateStr.charAt(len - 1))) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
-        } else if (c == 'Z') {
-            df = _formatISO8601_z;
+        return df.parse(dateStr, pos);
+    }
+
+    // ---- Normalize the ISO-8601 string so that it always has hours, minutes,
+    // seconds and milliseconds. The expected pattern is:
+    // "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
+    // We'll break the string into three parts: date part (up to and including 'T'),
+    // time part (between 'T' and the start of the timezone), and timezone part.
+    String normalized;
+    int tPos = dateStr.indexOf('T');
+    if (tPos < 0) {
+        // Fallback: treat it as a plain date.
+        df = _formatPlain;
         if (df == null) {
-                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
+            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
+        return df.parse(dateStr, pos);
     }
-        } else {
-            // Let's see if we have timezone indicator or not...
+    String datePart = dateStr.substring(0, tPos + 1); // includes the 'T'
+    String timePart;
+    String tzPart = "";
+
+    // Determine if there is an explicit timezone indicator.
+    // We assume hasTimeZone(String) correctly detects a timezone.
     if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
+        // Check for terminal 'Z'
+        if (dateStr.charAt(len - 1) == 'Z') {
+            tzPart = "Z";
+            timePart = dateStr.substring(tPos + 1, len - 1);
+        } else {
+            // Look for '+' or '-' after the 'T'
+            int plusIndex = dateStr.indexOf('+', tPos);
+            int minusIndex = dateStr.indexOf('-', tPos);
+            int tzIndex;
+            if (plusIndex < 0) {
+                tzIndex = minusIndex;
+            } else if (minusIndex < 0) {
+                tzIndex = plusIndex;
+            } else {
+                tzIndex = Math.min(plusIndex, minusIndex);
             }
+            // In case no explicit sign is found, default to entire remainder.
+            if (tzIndex < 0) {
+                tzIndex = len;
+            }
+            timePart = dateStr.substring(tPos + 1, tzIndex);
+            tzPart = dateStr.substring(tzIndex);
+            // Remove optional colon in timezone offset (e.g., "+01:00" -> "+0100")
+            if (tzPart.length() == 6 && tzPart.charAt(3) == ':') {
+                tzPart = tzPart.substring(0, 3) + tzPart.substring(4);
+            }
+        }
+    } else {
+        // No timezone provided. We'll treat it as GMT.
+        timePart = dateStr.substring(tPos + 1);
+        tzPart = "Z";
+    }
+
+    // ---- Normalize the time part.
+    // The allowed time parts are:
+    // "HH:mm" (missing seconds), "HH:mm:ss", or with fractional seconds.
+    // First, if the seconds field is missing, append ":00".
+    int firstColon = timePart.indexOf(':');
+    int lastColon = timePart.lastIndexOf(':');
+    if (firstColon >= 0 && firstColon == lastColon) {
+        // Only one colon found, so we have "HH:mm" -> add missing seconds.
+        timePart = timePart + ":00";
+    }
+
+    // Next, ensure there is a fractional part.
+    int dotIndex = timePart.indexOf('.');
+    if (dotIndex < 0) {
+        // No fraction: append ".000"
+        timePart = timePart + ".000";
+    } else {
+        // There is a fraction; pad or trim it to exactly 3 digits.
+        String frac = timePart.substring(dotIndex + 1);
+        if (frac.length() == 0) {
+            frac = "000";
+        } else if (frac.length() == 1) {
+            frac = frac + "00";
+        } else if (frac.length() == 2) {
+            frac = frac + "0";
+        } else if (frac.length() > 3) {
+            frac = frac.substring(0, 3);
+        }
+        timePart = timePart.substring(0, dotIndex + 1) + frac;
+    }
+
+    normalized = datePart + timePart + tzPart;
+
+    // ---- Choose the appropriate DateFormat
+    if ("Z".equals(tzPart)) {
+        df = _formatISO8601_z;
+        if (df == null) {
+            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
+        }
+    } else {
         df = _formatISO8601;
-                if (_formatISO8601 == null) {
+        if (df == null) {
             df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
         }
-            } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
-                StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
     }
-                sb.append('Z');
-                dateStr = sb.toString();
-                df = _formatISO8601_z;
-                if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
-                }
-            }
-        }
-        return df.parse(dateStr, pos);
+    return df.parse(normalized, pos);
 }
\ No newline at end of file
