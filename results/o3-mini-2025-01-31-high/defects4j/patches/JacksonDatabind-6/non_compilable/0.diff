diff --git a/tmp/8ee87361-be3a-4959-862a-81e0a18978d4_buggy.java b/tmp/be350056-2570-4dca-9360-f25600a547cf_fixed.java
index cd412d2..f8933ff 100644
--- a/tmp/8ee87361-be3a-4959-862a-81e0a18978d4_buggy.java
+++ b/tmp/be350056-2570-4dca-9360-f25600a547cf_fixed.java
@@ -1,76 +1,80 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
     /* 21-May-2009, tatu: DateFormat has very strict handling of
      * timezone modifiers for ISO-8601. So we need to do some scrubbing.
      */
 
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len - 1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len - 4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len - 1, ".000");
             dateStr = sb.toString();
         }
     } else {
-            // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
+            // Normalize timezone: remove optional colon in timezone offset or append missing minutes.
+            len = dateStr.length();
             c = dateStr.charAt(len - 3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+            if (c == ':') { // e.g. "-05:00" -> "-0500"
+                dateStr = dateStr.substring(0, len - 3) + dateStr.substring(len - 2);
+            } else if (c == '+' || c == '-') { // timezone missing minutes, e.g. "+01" -> "+0100"
                 dateStr += "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
+            // Now, the last 5 characters are the timezone offset in Â±HHMM form.
+            int tzIndex = dateStr.length() - 5;
+            int dotIndex = dateStr.lastIndexOf('.', tzIndex);
+            if (dotIndex < 0) {
+                // No fractional seconds; insert ".000" just before the timezone offset.
+                dateStr = dateStr.substring(0, tzIndex) + ".000" + dateStr.substring(tzIndex);
+            } else {
+                // There is a fractional second part; pad it if it has less than 3 digits.
+                int fractionLen = tzIndex - dotIndex - 1;
+                if (fractionLen == 0) {
+                    dateStr = dateStr.substring(0, tzIndex) + "000" + dateStr.substring(tzIndex);
+                } else if (fractionLen == 1) {
+                    dateStr = dateStr.substring(0, tzIndex) + "00" + dateStr.substring(tzIndex);
+                } else if (fractionLen == 2) {
+                    dateStr = dateStr.substring(0, tzIndex) + "0" + dateStr.substring(tzIndex);
+                } else if (fractionLen > 3) {
+                    // In case there are more than three digits, truncate to three.
+                    dateStr = dateStr.substring(0, dotIndex + 1) + dateStr.substring(dotIndex + 1, dotIndex + 4)
+                            + dateStr.substring(tzIndex);
+                }
             }
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
+            // No timezone: treat it as a plain date but append missing fractional part and a 'Z'
             StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
             if (timeLen <= 8) {
                 sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
