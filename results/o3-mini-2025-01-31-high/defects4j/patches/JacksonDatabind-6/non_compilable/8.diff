diff --git a/tmp/217fc4cb-9b59-45ae-b6f4-036b831fb134_buggy.java b/tmp/bd2a7637-79b7-490e-a8de-a5054f281fa4_fixed.java
index cd412d2..fba0081 100644
--- a/tmp/217fc4cb-9b59-45ae-b6f4-036b831fb134_buggy.java
+++ b/tmp/bd2a7637-79b7-490e-a8de-a5054f281fa4_fixed.java
@@ -1,76 +1,98 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
     /* 21-May-2009, tatu: DateFormat has very strict handling of
      * timezone modifiers for ISO-8601. So we need to do some scrubbing.
      */
 
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len - 1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len - 4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len - 1, ".000");
             dateStr = sb.toString();
         }
     } else {
-            // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            // First, fix up the timezone offset:
+            len = dateStr.length();
+            char tzIndicator = dateStr.charAt(len - 3);
+            if (tzIndicator == ':') { // Remove the colon in the timezone (e.g. "+01:00" -> "+0100")
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len - 3, len - 2);
                 dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+            } else if (tzIndicator == '+' || tzIndicator == '-') { 
+                // If minutes are missing (e.g. "+01"), append "00" to make it proper (e.g. "+0100")
                 dateStr += "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
+
+            // Now, normalize the time part to conform to "HH:mm:ss.SSS"
+            // We know that the timezone offset is in the last 5 characters (Â±HHMM).
+            int tIndex = dateStr.indexOf('T');
+            int tzIndex = dateStr.length() - 5;
+            String timePart = dateStr.substring(tIndex + 1, tzIndex);
+
+            // Count colons to detect if seconds are present.
+            int colonCount = 0;
+            for (int i = 0; i < timePart.length(); i++) {
+                if (timePart.charAt(i) == ':') {
+                    colonCount++;
                 }
+            }
+            String newTimePart = timePart;
+            if (colonCount == 1) {
+                // Time is of the form HH:mm; seconds are missing.
+                newTimePart = timePart + ":00.000";
+            } else { // Assume timePart is HH:mm:ss or HH:mm:ss.xxx
+                int dotIndex = timePart.indexOf('.');
+                if (dotIndex < 0) {
+                    // No fraction, so append default milliseconds.
+                    newTimePart = timePart + ".000";
+                } else {
+                    // Normalize fractional seconds to exactly three digits.
+                    String fraction = timePart.substring(dotIndex + 1);
+                    if (fraction.length() < 3) {
+                        while (fraction.length() < 3) {
+                            fraction = fraction + "0";
+                        }
+                    } else if (fraction.length() > 3) {
+                        fraction = fraction.substring(0, 3);
+                    }
+                    newTimePart = timePart.substring(0, dotIndex + 1) + fraction;
+                }
+            }
+            dateStr = dateStr.substring(0, tIndex + 1) + newTimePart + dateStr.substring(tzIndex);
+
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
+            // No timezone indicator; assume plain date with time.
             StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
             if (timeLen <= 8) {
                 sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
+                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
