diff --git a/tmp/0df4cae8-8956-4eb1-aab6-645b4d4c57c3_buggy.java b/tmp/3cc03864-96c8-420a-8ead-f3817b906cf0_fixed.java
index cd412d2..add94f3 100644
--- a/tmp/0df4cae8-8956-4eb1-aab6-645b4d4c57c3_buggy.java
+++ b/tmp/3cc03864-96c8-420a-8ead-f3817b906cf0_fixed.java
@@ -1,76 +1,96 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
     int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
     DateFormat df;
-
-        // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
+    // Case 1: Plain date (no time info)
+    if (len <= 10 && Character.isDigit(dateStr.charAt(len - 1))) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
-        } else if (c == 'Z') {
+        return df.parse(dateStr, pos);
+    }
+
+    // Local helper to “normalize” the time part so that it always is in the form:
+    // HH:mm:ss.SSS   (i.e. if seconds are missing, add ":00"; if fractional seconds are missing or partial, pad to 3 digits)
+    java.util.function.Function<String, String> normalizeTime = timePart -> {
+        // Count colons to check if seconds are provided.
+        int colonCount = 0;
+        for (int i = 0; i < timePart.length(); i++) {
+            if (timePart.charAt(i) == ':') {
+                colonCount++;
+            }
+        }
+        if (colonCount == 1) {
+            // Only hours and minutes provided; add seconds.
+            timePart = timePart + ":00";
+        }
+        int dotIndex = timePart.indexOf('.');
+        if (dotIndex < 0) {
+            // No fractional part -> add .000
+            timePart = timePart + ".000";
+        } else {
+            int fracDigits = timePart.length() - dotIndex - 1;
+            while (fracDigits < 3) {
+                timePart = timePart + "0";
+                fracDigits++;
+            }
+        }
+        return timePart;
+    };
+
+    // Case 2: If the date string ends with 'Z' (Zulu/GMT)
+    if (dateStr.charAt(len - 1) == 'Z') {
+        int tIndex = dateStr.indexOf('T');
+        String timePart = dateStr.substring(tIndex + 1, len - 1);
+        timePart = normalizeTime.apply(timePart);
+        dateStr = dateStr.substring(0, tIndex + 1) + timePart + "Z";
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
+        return df.parse(dateStr, pos);
     }
-        } else {
-            // Let's see if we have timezone indicator or not...
+
+    // Case 3: Date string with a timezone offset (e.g. "+01:00" or "-05:00")
     if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
+        // Remove colon from timezone if present (e.g. convert "+01:00" to "+0100")
+        if (dateStr.length() >= 6 && dateStr.charAt(dateStr.length() - 3) == ':') {
+            dateStr = dateStr.substring(0, dateStr.length() - 3) + dateStr.substring(dateStr.length() - 2);
         }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
+        // In some cases the minutes in the zone are missing; append "00"
+        else if (dateStr.length() >= 5) {
+            char tzSign = dateStr.charAt(dateStr.length() - 5);
+            if (tzSign == '+' || tzSign == '-') {
+                dateStr = dateStr + "00";
             }
+        }
+        int tIndex = dateStr.indexOf('T');
+        int tzIndex = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));
+        if (tzIndex < 0) {
+            tzIndex = dateStr.length();
+        }
+        String timePart = dateStr.substring(tIndex + 1, tzIndex);
+        timePart = normalizeTime.apply(timePart);
+        dateStr = dateStr.substring(0, tIndex + 1) + timePart + dateStr.substring(tzIndex);
         df = _formatISO8601;
         if (_formatISO8601 == null) {
             df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
         }
+        return df.parse(dateStr, pos);
+    }
+
+    // Case 4: No timezone indicator – treat as a plain date/time and append 'Z'
+    int tIndex = dateStr.indexOf('T');
+    String timePart = (tIndex >= 0) ? dateStr.substring(tIndex + 1) : "";
+    timePart = normalizeTime.apply(timePart);
+    if (tIndex >= 0) {
+        dateStr = dateStr.substring(0, tIndex + 1) + timePart + "Z";
     } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
-                StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
+        dateStr = dateStr + "T00:00:00.000Z";
     }
-                sb.append('Z');
-                dateStr = sb.toString();
     df = _formatISO8601_z;
     if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
-                }
-            }
+        df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
