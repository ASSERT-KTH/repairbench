diff --git a/tmp/a97fdc35-cc7c-4605-af12-346fa661daf5_buggy.java b/tmp/114cb6c9-3da7-451e-b329-94dcf26c4fc4_fixed.java
index cd412d2..7c95c2e 100644
--- a/tmp/a97fdc35-cc7c-4605-af12-346fa661daf5_buggy.java
+++ b/tmp/114cb6c9-3da7-451e-b329-94dcf26c4fc4_fixed.java
@@ -1,76 +1,144 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
+    // 1. Handle "plain" dates (no time components)
+    if (len <= 10 && Character.isDigit(dateStr.charAt(len - 1))) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
-        } else if (c == 'Z') {
+        return df.parse(dateStr, pos);
+    }
+
+    // 2. Handle ISO8601 with trailing 'Z' (GMT)
+    char lastChar = dateStr.charAt(len - 1);
+    if (lastChar == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
+        // Remove the trailing 'Z' to normalize the time part, then re-append it.
+        String withoutZ = dateStr.substring(0, len - 1);
+        int tIndex = withoutZ.indexOf('T');
+        if (tIndex >= 0) {
+            String datePart = withoutZ.substring(0, tIndex + 1);
+            String timePart = withoutZ.substring(tIndex + 1);
+            String[] parts = timePart.split(":");
+            String hour = parts[0];
+            String minute = parts.length > 1 ? parts[1] : "00";
+            String second = "00";
+            String frac = "000";
+            if (parts.length > 2) {
+                String secPart = parts[2];
+                int dotIndex = secPart.indexOf('.');
+                if (dotIndex >= 0) {
+                    second = secPart.substring(0, dotIndex);
+                    frac = secPart.substring(dotIndex + 1);
+                    if (frac.length() < 3) {
+                        frac = (frac + "000").substring(0, 3);
+                    } else if (frac.length() > 3) {
+                        frac = frac.substring(0, 3);
                     }
                 } else {
-            // Let's see if we have timezone indicator or not...
+                    second = secPart;
+                }
+                if (second.length() == 0) {
+                    second = "00";
+                }
+            }
+            else { // no seconds provided; default to 00.000
+                second = "00";
+                frac = "000";
+            }
+            String normalizedTime = hour + ":" + minute + ":" + second + "." + frac;
+            dateStr = datePart + normalizedTime + "Z";
+        }
+        return df.parse(dateStr, pos);
+    }
+
+    // 3. Handle ISO8601 with explicit timezone (like "+01:00" or "-05:00")
     if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+        // Remove the colon in the timezone part if present.
+        int sz = dateStr.length();
+        if (dateStr.charAt(sz - 3) == ':') {
+            dateStr = dateStr.substring(0, sz - 3) + dateStr.substring(sz - 2);
+            sz = dateStr.length();
+        }
+        else {
+            // In case minutes are omitted (e.g.: "+01"), append "00".
+            int plusIdx = dateStr.lastIndexOf('+');
+            int minusIdx = dateStr.lastIndexOf('-');
+            int idx = Math.max(plusIdx, minusIdx);
+            if (idx != -1 && dateStr.length() - idx == 3) {
                 dateStr += "00";
+                sz = dateStr.length();
             }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
         }
+        // Separate the timezone (last 5 chars) from the rest.
+        String tz = dateStr.substring(sz - 5);
+        String core = dateStr.substring(0, sz - 5);
+        int tIndex = core.indexOf('T');
+        if (tIndex < 0) { // fallback – if no 'T', try plain format.
+            df = _formatPlain;
+            if (df == null) {
+                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
+            }
+            return df.parse(dateStr, pos);
+        }
+        String datePart = core.substring(0, tIndex + 1);
+        String timePart = core.substring(tIndex + 1);
+        String[] parts = timePart.split(":");
+        String hour = parts[0];
+        String minute = parts.length > 1 ? parts[1] : "00";
+        String second = "00";
+        String frac = "000";
+        if (parts.length > 2) {
+            String secPart = parts[2];
+            int dotIndex = secPart.indexOf('.');
+            if (dotIndex >= 0) {
+                second = secPart.substring(0, dotIndex);
+                frac = secPart.substring(dotIndex + 1);
+                if (frac.length() < 3) {
+                    frac = (frac + "000").substring(0, 3);
+                } else if (frac.length() > 3) {
+                    frac = frac.substring(0, 3);
+                }
+            } else {
+                second = secPart;
+            }
+            if (second.length() == 0) {
+                second = "00";
+            }
+        }
+        else { // missing seconds; set to "00.000"
+            second = "00";
+            frac = "000";
+        }
+        String normalizedTime = hour + ":" + minute + ":" + second + "." + frac;
+        dateStr = datePart + normalizedTime + tz;
         df = _formatISO8601;
-                if (_formatISO8601 == null) {
+        if (df == null) {
             df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
         }
-            } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
+        return df.parse(dateStr, pos);
+    }
+
+    // 4. No timezone indicator – assume local/plain date, so append ".000Z".
+    {
         StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
+        int tPos = dateStr.indexOf('T');
+        int timeLen = tPos >= 0 ? dateStr.length() - tPos - 1 : 0;
         if (timeLen <= 8) {
             sb.append(".000");
         }
         sb.append('Z');
         dateStr = sb.toString();
         df = _formatISO8601_z;
         if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
-                }
-            }
+            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         return df.parse(dateStr, pos);
     }
+}
\ No newline at end of file
