diff --git a/tmp/4335116f-6bb8-477b-bffd-c37c7c7cc7f0_buggy.java b/tmp/890f3628-fb97-4f0d-b908-a916f62a0f90_fixed.java
index cd412d2..e13d5bb 100644
--- a/tmp/4335116f-6bb8-477b-bffd-c37c7c7cc7f0_buggy.java
+++ b/tmp/890f3628-fb97-4f0d-b908-a916f62a0f90_fixed.java
@@ -1,76 +1,139 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
     /* 21-May-2009, tatu: DateFormat has very strict handling of
      * timezone modifiers for ISO-8601. So we need to do some scrubbing.
      */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len - 1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
-        } else if (c == 'Z') {
+    }
+    // Case: ends with 'Z' (Zulu timezone)
+    else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
-                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
+            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
+                    _timezone, _locale);
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
+        // Remove the trailing 'Z' to work on the base time
+        String baseTime = dateStr.substring(0, len - 1);
+        // If time portion is missing seconds, add them.
+        int tIndex = baseTime.indexOf('T');
+        if (tIndex >= 0) {
+            String timePart = baseTime.substring(tIndex + 1);
+            int colonCount = 0;
+            for (int i = 0; i < timePart.length(); ++i) {
+                if (timePart.charAt(i) == ':') {
+                    ++colonCount;
                 }
+            }
+            if (colonCount == 1) { // only hours and minutes provided
+                baseTime += ":00";
+            }
+        }
+        // Now fix fractional seconds: ensure exactly three digits
+        int dotIndex = baseTime.indexOf('.');
+        if (dotIndex < 0) {
+            baseTime += ".000";
         } else {
-            // Let's see if we have timezone indicator or not...
-            if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            int fracLen = baseTime.length() - dotIndex - 1;
+            if (fracLen < 3) {
+                StringBuilder sb = new StringBuilder(baseTime);
+                for (int i = 0; i < 3 - fracLen; i++) {
+                    sb.append('0');
+                }
+                baseTime = sb.toString();
+            } else if (fracLen > 3) {
+                baseTime = baseTime.substring(0, dotIndex + 4);
+            }
+        }
+        dateStr = baseTime + "Z";
+    }
+    // Case: non-Z timezone (has '+' or '-' in it)
+    else if (hasTimeZone(dateStr)) {
+        // Normalize timezone: remove optional colon, or add missing minutes
+        if (dateStr.charAt(dateStr.length() - 3) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
+            sb.deleteCharAt(dateStr.length() - 3);
             dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+        } else if (dateStr.charAt(dateStr.length() - 3) == '+' ||
+                   dateStr.charAt(dateStr.length() - 3) == '-') {
             dateStr += "00";
         }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
-                }
-                df = _formatISO8601;
+        // Assume the timezone offset is the final 5 characters
+        int tzPos = dateStr.length() - 5;
+        String baseTime = dateStr.substring(0, tzPos);
+        // If seconds are missing (time part only has hour/minute), add seconds.
+        int tIndex = baseTime.indexOf('T');
+        if (tIndex >= 0) {
+            String timePart = baseTime.substring(tIndex + 1);
+            int colonCount = 0;
+            for (int i = 0; i < timePart.length(); ++i) {
+                if (timePart.charAt(i) == ':') {
+                    ++colonCount;
+                }
+            }
+            if (colonCount == 1) {
+                baseTime += ":00";
+            }
+        }
+        // Fix fractional seconds if needed
+        int dotIndex = baseTime.indexOf('.');
+        if (dotIndex < 0) {
+            baseTime += ".000";
+        } else {
+            int fracLen = baseTime.length() - dotIndex - 1;
+            if (fracLen < 3) {
+                StringBuilder sb = new StringBuilder(baseTime);
+                for (int i = 0; i < 3 - fracLen; i++) {
+                    sb.append('0');
+                }
+                baseTime = sb.toString();
+            } else if (fracLen > 3) {
+                baseTime = baseTime.substring(0, dotIndex + 4);
+            }
+        }
+        dateStr = baseTime + dateStr.substring(tzPos);
         if (_formatISO8601 == null) {
-                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
+            _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601,
+                    _timezone, _locale);
         }
-            } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
+        df = _formatISO8601;
+    }
+    // Case: no timezone indicator; treat as plain and assume 'Z'
+    else {
         StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+        int tIndex = dateStr.indexOf('T');
+        if (tIndex >= 0) {
+            String timePart = dateStr.substring(tIndex + 1);
+            int colonCount = 0;
+            for (int i = 0; i < timePart.length(); ++i) {
+                if (timePart.charAt(i) == ':') {
+                    colonCount++;
+                }
+            }
+            if (colonCount == 1) {
+                sb.append(":00");
+            }
+            if (timePart.indexOf('.') < 0) {
                 sb.append(".000");
             }
+        } else {
+            sb.append("T00:00:00.000");
+        }
         sb.append('Z');
         dateStr = sb.toString();
-                df = _formatISO8601_z;
-                if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
+        if (_formatISO8601_z == null) {
+            _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                     _timezone, _locale);
         }
-            }
+        df = _formatISO8601_z;
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
