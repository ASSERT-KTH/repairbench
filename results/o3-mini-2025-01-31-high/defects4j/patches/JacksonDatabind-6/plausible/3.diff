diff --git a/tmp/d86cdff7-b0f4-4b53-8926-db209f41218e_buggy.java b/tmp/4c1f001b-4d54-4ea7-9074-e44c2bbb396d_fixed.java
index cd412d2..61f00c9 100644
--- a/tmp/d86cdff7-b0f4-4b53-8926-db209f41218e_buggy.java
+++ b/tmp/4c1f001b-4d54-4ea7-9074-e44c2bbb396d_fixed.java
@@ -1,76 +1,107 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
     int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
     DateFormat df;
+    char c = dateStr.charAt(len - 1);
 
-        // [JACKSON-200]: need to support "plain" date...
+    // For plain date formats (e.g. "yyyy-MM-dd")
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
-        } else if (c == 'Z') {
-            df = _formatISO8601_z;
+        return df.parse(dateStr, pos);
+    }
+
+    // Force presence of a 'T'
+    int tIndex = dateStr.indexOf('T');
+    if (tIndex < 0) { // fallback to plain date parser
+        df = _formatPlain;
         if (df == null) {
-                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
+            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
+        return df.parse(dateStr, pos);
     }
-        } else {
-            // Let's see if we have timezone indicator or not...
-            if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+
+    // Determine timezone: ends with 'Z' or has an explicit offset
+    boolean isZulu = (c == 'Z');
+    String timePortion;  // portion between 'T' and timezone offset
+    String zonePortion;  // the timezone part (either "Z" or "+0100"/"-0500", etc.)
+
+    if (isZulu) {
+        zonePortion = "Z";
+        timePortion = dateStr.substring(tIndex + 1, len - 1);
+    } else if (hasTimeZone(dateStr)) {
+        // Normalize timezone: remove the optional colon if present (e.g. +01:00 -> +0100)
+        if (dateStr.charAt(len - 3) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
+            sb.deleteCharAt(len - 3);
             dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+            len = dateStr.length();
+        } else if (dateStr.charAt(len - 3) == '+' || dateStr.charAt(len - 3) == '-') {
+            // Missing minutes? Append "00"
             dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
             len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
         }
-                df = _formatISO8601;
-                if (_formatISO8601 == null) {
-                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
+        zonePortion = dateStr.substring(len - 5);
+        timePortion = dateStr.substring(tIndex + 1, len - 5);
+    } else { // no timezone indicator; assume Zulu
+        zonePortion = "Z";
+        timePortion = dateStr.substring(tIndex + 1);
     }
+
+    // Now fix the time portion so that it conforms to "HH:mm:ss.SSS"
+    // It might be "HH:mm" (missing seconds) or have a seconds part with partial milliseconds.
+    String fixedTimePortion;
+    String[] parts = timePortion.split(":");
+    if (parts.length == 2) {
+        // No seconds (e.g. "19:20") -> add seconds and milliseconds.
+        fixedTimePortion = parts[0] + ":" + parts[1] + ":00.000";
+    } else if (parts.length >= 3) {
+        // There is a seconds part; it may contain a fractional component.
+        String secPart = parts[2];
+        String sec, frac;
+        int dotIndex = secPart.indexOf('.');
+        if (dotIndex < 0) {
+            sec = secPart;
+            frac = "000";
         } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
-                StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
+            sec = secPart.substring(0, dotIndex);
+            frac = secPart.substring(dotIndex + 1);
+            // Pad (or trim) the fractional seconds to exactly 3 digits.
+            if (frac.length() == 1) {
+                frac = frac + "00";
+            } else if (frac.length() == 2) {
+                frac = frac + "0";
+            } else if (frac.length() > 3) {
+                frac = frac.substring(0, 3);
             }
-                sb.append('Z');
-                dateStr = sb.toString();
+        }
+        // Default seconds if empty.
+        if (sec.isEmpty()) {
+            sec = "00";
+        }
+        fixedTimePortion = parts[0] + ":" + parts[1] + ":" + sec + "." + frac;
+    } else { 
+        // Fallback: leave as-is 
+        fixedTimePortion = timePortion;
+    }
+
+    // Reassemble the adjusted date string.
+    String fixedDateStr = dateStr.substring(0, tIndex + 1) + fixedTimePortion + zonePortion;
+
+    // Use the proper DateFormat instance.
+    if (isZulu || zonePortion.equals("Z")) {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                     _timezone, _locale);
         }
+    } else {
+        df = _formatISO8601;
+        if (df == null) {
+            df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601,
+                    _timezone, _locale);
         }
     }
-        return df.parse(dateStr, pos);
+    return df.parse(fixedDateStr, pos);
 }
\ No newline at end of file
