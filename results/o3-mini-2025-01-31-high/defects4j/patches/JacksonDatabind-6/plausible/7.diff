diff --git a/tmp/66e62f79-b9da-4e71-9810-63774b023789_buggy.java b/tmp/a8b08a4a-570f-4650-8280-8db091fa9330_fixed.java
index cd412d2..1b30d34 100644
--- a/tmp/66e62f79-b9da-4e71-9810-63774b023789_buggy.java
+++ b/tmp/a8b08a4a-570f-4650-8280-8db091fa9330_fixed.java
@@ -1,76 +1,103 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
     int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
+    // Short "plain" date (e.g. "1997-07-16")
+    if (len <= 10 && Character.isDigit(dateStr.charAt(len - 1))) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
-        } else if (c == 'Z') {
+        return df.parse(dateStr, pos);
+    }
+
+    // First choose format based on timezone indicator.
+    if (dateStr.charAt(len - 1) == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
-            }
-        } else {
-            // Let's see if we have timezone indicator or not...
-            if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+    } else if (hasTimeZone(dateStr)) {
+        // Remove the optional colon in timezone offset if present:
+        char tzChar = dateStr.charAt(len - 3);
+        if (tzChar == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.delete(len - 3, len - 2);
             dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+        } else if (tzChar == '+' || tzChar == '-') {
+            // Missing minute information: pad with "00"
             dateStr += "00";
         }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
-                }
         df = _formatISO8601;
-                if (_formatISO8601 == null) {
+        if (df == null) {
             df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
         }
     } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
+        // No timezone indicator: assume local time, so append missing parts and default 'Z'
         StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+        int tIdx = dateStr.indexOf('T');
+        if (tIdx != -1) {
+            int timeLen = len - tIdx - 1;
+            // If only hours and minutes (e.g. "19:20"), then append seconds.
+            if (timeLen == 5) {
+                sb.append(":00");
+            }
             sb.append(".000");
         }
         sb.append('Z');
         dateStr = sb.toString();
         df = _formatISO8601_z;
         if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
+            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
     }
+
+    // Normalize the time portion to always be in "HH:mm:ss.SSS" form.
+    int tIndex = dateStr.indexOf('T');
+    if (tIndex != -1) {
+        int tzPos;
+        if (dateStr.endsWith("Z")) {
+            tzPos = dateStr.length() - 1;
+        } else {
+            int plusIndex = dateStr.indexOf('+', tIndex);
+            int minusIndex = dateStr.indexOf('-', tIndex);
+            tzPos = (plusIndex != -1) ? plusIndex : (minusIndex != -1 ? minusIndex : dateStr.length());
+        }
+        // Extract the time part between the 'T' and the start of the timezone.
+        String timePart = dateStr.substring(tIndex + 1, tzPos);
+        // If only hours and minutes are present (e.g. "19:20"), add seconds.
+        int colonCount = 0;
+        for (int i = 0; i < timePart.length(); i++) {
+            if (timePart.charAt(i) == ':') {
+                colonCount++;
+            }
+        }
+        if (colonCount == 1) {
+            timePart = timePart + ":00";
+        }
+        // Normalize (or insert) the fractional (millisecond) part.
+        int dotIndex = timePart.indexOf('.');
+        if (dotIndex >= 0) {
+            String secsPart = timePart.substring(0, dotIndex);
+            String fraction = timePart.substring(dotIndex + 1);
+            if (fraction.length() < 3) {
+                StringBuilder fracSB = new StringBuilder(fraction);
+                while (fracSB.length() < 3) {
+                    fracSB.append('0');
+                }
+                fraction = fracSB.toString();
+            } else if (fraction.length() > 3) {
+                fraction = fraction.substring(0, 3);
+            }
+            timePart = secsPart + "." + fraction;
+        } else {
+            // No fractional part: if timePart has exactly "HH:mm:ss", append ".000"
+            if (timePart.length() == 8) {
+                timePart = timePart + ".000";
+            }
+        }
+        // Reassemble the full date string with the normalized time part.
+        dateStr = dateStr.substring(0, tIndex + 1) + timePart + dateStr.substring(tzPos);
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
