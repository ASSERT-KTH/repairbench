diff --git a/tmp/a8d34859-d75f-4682-b726-1af4b7024bb4_buggy.java b/tmp/89078479-8148-4e4f-ac61-de94e42c5946_fixed.java
index 9d69396..a58a49c 100644
--- a/tmp/a8d34859-d75f-4682-b726-1af4b7024bb4_buggy.java
+++ b/tmp/89078479-8148-4e4f-ac61-de94e42c5946_fixed.java
@@ -1,46 +1,42 @@
-    /**
-     * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
-     * <blockquote>
-     * The checksum is calculated by taking the sum of the unsigned byte values
-     * of the header block with the eight checksum bytes taken to be ascii
-     * spaces (decimal value 32). It is stored as a six digit octal number with
-     * leading zeroes followed by a NUL and then a space. Various
-     * implementations do not adhere to this format. For better compatibility,
-     * ignore leading and trailing whitespace, and get the first six digits. In
-     * addition, some historic tar implementations treated bytes as signed.
-     * Implementations typically calculate the checksum both ways, and treat it
-     * as good if either the signed or unsigned sum matches the included
-     * checksum.
-     * </blockquote>
-     * <p>
-     * The return value of this method should be treated as a best-effort
-     * heuristic rather than an absolute and final truth. The checksum
-     * verification logic may well evolve over time as more special cases
-     * are encountered.
-     *
-     * @param header tar header
-     * @return whether the checksum is reasonably good
-     * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
-     * @since 1.5
-     */
 public static boolean verifyCheckSum(byte[] header) {
+    // First, extract the stored checksum from the header’s checksum field.
+    // According to the spec, the checksum is stored as an octal number,
+    // possibly padded with spaces and/or a NUL. We’ll extract the field as a string,
+    // trim off whitespace and any trailing NUL, and then parse out the first group of octal digits.
+    String s = new String(header, CHKSUM_OFFSET, CHKSUMLEN, java.nio.charset.StandardCharsets.US_ASCII).trim();
+    int nullPos = s.indexOf('\0');
+    if (nullPos != -1) {
+        s = s.substring(0, nullPos).trim();
+    }
+    int start = 0;
+    while (start < s.length() && Character.isWhitespace(s.charAt(start))) {
+        start++;
+    }
+    int end = start;
+    while (end < s.length() && s.charAt(end) >= '0' && s.charAt(end) <= '7') {
+        end++;
+    }
     long storedSum = 0;
+    if (start < end) {
+        try {
+            storedSum = Long.parseLong(s.substring(start, end), 8);
+        } catch (NumberFormatException e) {
+            storedSum = -1;
+        }
+    }
+
+    // Now calculate the checksum over the header,
+    // but treat the entire checksum field (CHKSUM_OFFSET ... CHKSUM_OFFSET+CHKSUMLEN-1)
+    // as if it were all ASCII spaces.
     long unsignedSum = 0;
     long signedSum = 0;
-
-        int digits = 0;
     for (int i = 0; i < header.length; i++) {
         byte b = header[i];
-            if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
-                } else if (digits > 0) {
-                    digits = 6;
-                }
+        if (i >= CHKSUM_OFFSET && i < CHKSUM_OFFSET + CHKSUMLEN) {
             b = ' ';
         }
-            unsignedSum += 0xff & b;
+        unsignedSum += (b & 0xff);
         signedSum += b;
     }
     return storedSum == unsignedSum || storedSum == signedSum;
 }
\ No newline at end of file
