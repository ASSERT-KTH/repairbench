diff --git a/tmp/99bb9bae-d965-452b-8383-578327d1fcc4_buggy.java b/tmp/21457d90-96a3-40d6-9022-83a73aa14c39_fixed.java
index 9d69396..5e1af0e 100644
--- a/tmp/99bb9bae-d965-452b-8383-578327d1fcc4_buggy.java
+++ b/tmp/21457d90-96a3-40d6-9022-83a73aa14c39_fixed.java
@@ -1,46 +1,43 @@
-    /**
-     * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
-     * <blockquote>
-     * The checksum is calculated by taking the sum of the unsigned byte values
-     * of the header block with the eight checksum bytes taken to be ascii
-     * spaces (decimal value 32). It is stored as a six digit octal number with
-     * leading zeroes followed by a NUL and then a space. Various
-     * implementations do not adhere to this format. For better compatibility,
-     * ignore leading and trailing whitespace, and get the first six digits. In
-     * addition, some historic tar implementations treated bytes as signed.
-     * Implementations typically calculate the checksum both ways, and treat it
-     * as good if either the signed or unsigned sum matches the included
-     * checksum.
-     * </blockquote>
-     * <p>
-     * The return value of this method should be treated as a best-effort
-     * heuristic rather than an absolute and final truth. The checksum
-     * verification logic may well evolve over time as more special cases
-     * are encountered.
-     *
-     * @param header tar header
-     * @return whether the checksum is reasonably good
-     * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
-     * @since 1.5
-     */
 public static boolean verifyCheckSum(byte[] header) {
+    // First, extract the checksum field as a US-ASCII string and trim any extra whitespace.
+    String field = new String(header, CHKSUM_OFFSET, CHKSUMLEN, java.nio.charset.StandardCharsets.US_ASCII);
+    char[] trimmed = field.trim().toCharArray();
+    // Now, take only the first contiguous sequence of octal digits (up to 6 characters).
+    StringBuilder sb = new StringBuilder();
+    for (char c : trimmed) {
+        if (c >= '0' && c <= '7') {
+            if (sb.length() < 6) {
+                sb.append(c);
+            } else {
+                break;
+            }
+        } else if (sb.length() > 0) {
+            // Once digits have started, any non-digit terminates the processing.
+            break;
+        }
+    }
+
     long storedSum = 0;
+    if (sb.length() > 0) {
+        try {
+            storedSum = Long.parseLong(sb.toString(), 8);
+        } catch (NumberFormatException nfe) {
+            storedSum = 0;
+        }
+    }
+
     long unsignedSum = 0;
     long signedSum = 0;
-
-        int digits = 0;
+    // Compute the sums of all header bytes; for indices in the checksum field,
+    // use an ascii space (decimal 32) instead of the real byte.
     for (int i = 0; i < header.length; i++) {
         byte b = header[i];
-            if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
-                } else if (digits > 0) {
-                    digits = 6;
-                }
+        if (i >= CHKSUM_OFFSET && i < CHKSUM_OFFSET + CHKSUMLEN) {
             b = ' ';
         }
-            unsignedSum += 0xff & b;
+        unsignedSum += b & 0xff;
         signedSum += b;
     }
+
     return storedSum == unsignedSum || storedSum == signedSum;
 }
\ No newline at end of file
