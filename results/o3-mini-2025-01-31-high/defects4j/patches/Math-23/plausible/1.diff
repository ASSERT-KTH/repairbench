diff --git a/tmp/3a3f8231-3a8b-433e-81a0-c451e6238161_buggy.java b/tmp/19becfa1-6f28-40ad-a4fb-2fd71bcaca17_fixed.java
index 466a88c..e973032 100644
--- a/tmp/3a3f8231-3a8b-433e-81a0-c451e6238161_buggy.java
+++ b/tmp/19becfa1-6f28-40ad-a4fb-2fd71bcaca17_fixed.java
@@ -1,169 +1,158 @@
-    /** {@inheritDoc} */
 @Override
 protected UnivariatePointValuePair doOptimize() {
     final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
     final double lo = getMin();
     final double mid = getStartValue();
     final double hi = getMax();
 
     // Optional additional convergence criteria.
-        final ConvergenceChecker<UnivariatePointValuePair> checker
-            = getConvergenceChecker();
+    final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker();
 
     double a;
     double b;
     if (lo < hi) {
         a = lo;
         b = hi;
     } else {
         a = hi;
         b = lo;
     }
 
     double x = mid;
     double v = x;
     double w = x;
     double d = 0;
     double e = 0;
     double fx = computeObjectiveValue(x);
     if (!isMinim) {
         fx = -fx;
     }
     double fv = fx;
     double fw = fx;
 
+    UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
     UnivariatePointValuePair previous = null;
-        UnivariatePointValuePair current
-            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
-        // Best point encountered so far (which is the initial guess).
+
+    // Track the best point encountered so far.
+    double bestInternal = fx;
+    UnivariatePointValuePair bestCandidate = current;
 
     int iter = 0;
     while (true) {
         final double m = 0.5 * (a + b);
         final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
         final double tol2 = 2 * tol1;
 
         // Default stopping criterion.
         final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
         if (!stop) {
             double p = 0;
             double q = 0;
             double r = 0;
-                double u = 0;
+            double u;
 
-                if (FastMath.abs(e) > tol1) { // Fit parabola.
+            if (FastMath.abs(e) > tol1) { // Attempt parabolic interpolation.
                 r = (x - w) * (fx - fv);
                 q = (x - v) * (fx - fw);
                 p = (x - v) * q - (x - w) * r;
                 q = 2 * (q - r);
-
                 if (q > 0) {
                     p = -p;
                 } else {
                     q = -q;
                 }
-
                 r = e;
                 e = d;
-
-                    if (p > q * (a - x) &&
-                        p < q * (b - x) &&
-                        FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
-                        // Parabolic interpolation step.
+                if (p > q * (a - x) && p < q * (b - x)
+                        && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                     d = p / q;
                     u = x + d;
-
-                        // f must not be evaluated too close to a or b.
+                    // Ensure u is not too close to the boundaries.
                     if (u - a < tol2 || b - u < tol2) {
                         if (x <= m) {
                             d = tol1;
                         } else {
                             d = -tol1;
                         }
                     }
-                    } else {
-                        // Golden section step.
+                } else { // Golden section step.
                     if (x < m) {
                         e = b - x;
                     } else {
                         e = a - x;
                     }
                     d = GOLDEN_SECTION * e;
                 }
-                } else {
-                    // Golden section step.
+            } else { // Golden section step.
                 if (x < m) {
                     e = b - x;
                 } else {
                     e = a - x;
                 }
                 d = GOLDEN_SECTION * e;
             }
 
-                // Update by at least "tol1".
+            // Ensure that the step is at least tol1.
             if (FastMath.abs(d) < tol1) {
                 if (d >= 0) {
                     u = x + tol1;
                 } else {
                     u = x - tol1;
                 }
             } else {
                 u = x + d;
             }
 
             double fu = computeObjectiveValue(u);
             if (!isMinim) {
                 fu = -fu;
             }
 
-                // User-defined convergence checker.
+            // Update the best candidate (i.e. the one with the smallest internal value).
+            if (fu <= bestInternal) {
+                bestInternal = fu;
+                bestCandidate = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
+            }
+
             previous = current;
             current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
 
-                if (checker != null) {
-                    if (checker.converged(iter, previous, current)) {
-                        return best(current, previous, isMinim);
-                    }
+            if (checker != null && checker.converged(iter, previous, current)) {
+                return bestCandidate;
             }
 
-                // Update a, b, v, w and x.
+            // Update the brackets and the points.
             if (fu <= fx) {
                 if (u < x) {
                     b = x;
                 } else {
                     a = x;
                 }
                 v = w;
                 fv = fw;
                 w = x;
                 fw = fx;
                 x = u;
                 fx = fu;
             } else {
                 if (u < x) {
                     a = u;
                 } else {
                     b = u;
                 }
-                    if (fu <= fw ||
-                        Precision.equals(w, x)) {
+                if (fu <= fw || Precision.equals(w, x)) {
                     v = w;
                     fv = fw;
                     w = u;
                     fw = fu;
-                    } else if (fu <= fv ||
-                               Precision.equals(v, x) ||
-                               Precision.equals(v, w)) {
+                } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) {
                     v = u;
                     fv = fu;
                 }
             }
-            } else { // Default termination (Brent's criterion).
-                return
-                            best(current,
-                                 previous,
-                            isMinim);
+        } else { // Termination: return the best candidate seen so far.
+            return bestCandidate;
         }
         ++iter;
     }
 }
\ No newline at end of file
