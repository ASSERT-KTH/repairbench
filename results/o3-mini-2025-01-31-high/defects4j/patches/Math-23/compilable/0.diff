diff --git a/tmp/3237d5ed-7151-44ee-a8f4-49f4980de633_buggy.java b/tmp/65a46f3e-f90c-4b1c-9b30-2325ce8ea4d9_fixed.java
index 466a88c..4cd3552 100644
--- a/tmp/3237d5ed-7151-44ee-a8f4-49f4980de633_buggy.java
+++ b/tmp/65a46f3e-f90c-4b1c-9b30-2325ce8ea4d9_fixed.java
@@ -1,169 +1,142 @@
 /** {@inheritDoc} */
 @Override
 protected UnivariatePointValuePair doOptimize() {
     final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
     final double lo = getMin();
     final double mid = getStartValue();
     final double hi = getMax();
 
     // Optional additional convergence criteria.
-        final ConvergenceChecker<UnivariatePointValuePair> checker
-            = getConvergenceChecker();
+    final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker();
 
     double a;
     double b;
     if (lo < hi) {
         a = lo;
         b = hi;
     } else {
         a = hi;
         b = lo;
     }
 
     double x = mid;
     double v = x;
     double w = x;
     double d = 0;
     double e = 0;
     double fx = computeObjectiveValue(x);
     if (!isMinim) {
         fx = -fx;
     }
     double fv = fx;
     double fw = fx;
 
-        UnivariatePointValuePair previous = null;
-        UnivariatePointValuePair current
-            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
-        // Best point encountered so far (which is the initial guess).
+    // Initialize the current best candidate using the starting value.
+    UnivariatePointValuePair previous = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+    UnivariatePointValuePair current = previous;
 
     int iter = 0;
     while (true) {
         final double m = 0.5 * (a + b);
         final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
         final double tol2 = 2 * tol1;
 
-            // Default stopping criterion.
+        // Stop if x is sufficiently close to the midpoint.
         final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
         if (!stop) {
             double p = 0;
             double q = 0;
             double r = 0;
-                double u = 0;
+            double u;
 
-                if (FastMath.abs(e) > tol1) { // Fit parabola.
+            if (FastMath.abs(e) > tol1) { // Attempt a parabolic step.
                 r = (x - w) * (fx - fv);
                 q = (x - v) * (fx - fw);
                 p = (x - v) * q - (x - w) * r;
                 q = 2 * (q - r);
-
                 if (q > 0) {
                     p = -p;
                 } else {
                     q = -q;
                 }
-
                 r = e;
                 e = d;
-
                 if (p > q * (a - x) &&
                     p < q * (b - x) &&
                     FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                     // Parabolic interpolation step.
                     d = p / q;
                     u = x + d;
-
-                        // f must not be evaluated too close to a or b.
+                    // Make sure that u is not too close to a or b.
                     if (u - a < tol2 || b - u < tol2) {
-                            if (x <= m) {
-                                d = tol1;
-                            } else {
-                                d = -tol1;
-                            }
+                        d = (x <= m) ? tol1 : -tol1;
                     }
                 } else {
                     // Golden section step.
-                        if (x < m) {
-                            e = b - x;
-                        } else {
-                            e = a - x;
-                        }
+                    e = (x < m) ? b - x : a - x;
                     d = GOLDEN_SECTION * e;
+                    u = x + d;
                 }
             } else {
                 // Golden section step.
-                    if (x < m) {
-                        e = b - x;
-                    } else {
-                        e = a - x;
-                    }
+                e = (x < m) ? b - x : a - x;
                 d = GOLDEN_SECTION * e;
+                u = x + d;
             }
 
-                // Update by at least "tol1".
+            // Ensure we move at least tol1.
             if (FastMath.abs(d) < tol1) {
-                    if (d >= 0) {
-                        u = x + tol1;
-                    } else {
-                        u = x - tol1;
-                    }
+                u = (d >= 0) ? x + tol1 : x - tol1;
             } else {
                 u = x + d;
             }
 
             double fu = computeObjectiveValue(u);
             if (!isMinim) {
                 fu = -fu;
             }
 
-                // User-defined convergence checker.
             previous = current;
             current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
 
-                if (checker != null) {
-                    if (checker.converged(iter, previous, current)) {
-                        return best(current, previous, isMinim);
-                    }
+            // Use user-defined convergence checker if available.
+            if (checker != null && checker.converged(iter, previous, current)) {
+                // IMPORTANT FIX: Return the best overall point (stored in x) rather than the last evaluated candidate.
+                return new UnivariatePointValuePair(x, isMinim ? fx : -fx);
             }
 
-                // Update a, b, v, w and x.
+            // Update the search interval and the best points.
             if (fu <= fx) {
                 if (u < x) {
                     b = x;
                 } else {
                     a = x;
                 }
                 v = w;
                 fv = fw;
                 w = x;
                 fw = fx;
                 x = u;
                 fx = fu;
             } else {
                 if (u < x) {
                     a = u;
                 } else {
                     b = u;
                 }
-                    if (fu <= fw ||
-                        Precision.equals(w, x)) {
+                if (fu <= fw || Precision.equals(w, x)) {
                     v = w;
                     fv = fw;
                     w = u;
                     fw = fu;
-                    } else if (fu <= fv ||
-                               Precision.equals(v, x) ||
-                               Precision.equals(v, w)) {
+                } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) {
                     v = u;
                     fv = fu;
                 }
             }
-            } else { // Default termination (Brent's criterion).
-                return
-                            best(current,
-                                 previous,
-                            isMinim);
+        } else { // Termination condition met; return best found point.
+            return new UnivariatePointValuePair(x, isMinim ? fx : -fx);
         }
         ++iter;
     }
 }
\ No newline at end of file
