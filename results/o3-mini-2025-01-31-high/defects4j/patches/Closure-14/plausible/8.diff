diff --git a/tmp/171cce77-b0cc-434e-884c-173ff8e66946_buggy.java b/tmp/529295f1-641e-401a-9a31-b889c73b18eb_fixed.java
index bf9bb88..142c209 100644
--- a/tmp/171cce77-b0cc-434e-884c-173ff8e66946_buggy.java
+++ b/tmp/529295f1-641e-401a-9a31-b889c73b18eb_fixed.java
@@ -1,108 +1,109 @@
 /**
  * Computes the follow() node of a given node and its parent. There is a side
  * effect when calling this function. If this function computed an edge that
-   * exists a FINALLY, it'll attempt to connect the fromNode to the outer
-   * FINALLY according to the finallyMap.
+ * exits a FINALLY, it'll attempt to connect the fromNode to the outer FINALLY
+ * according to the finallyMap.
+ *
+ * <p>The idea is that almost every node’s “fall‐through” is simply its immediate
+ * sibling but when control escapes constructs (if, try/catch/finally, loops, etc)
+ * we have to “climb” the AST. In the case of a try, if there is a finally block, then
+ * control always goes to that finally block (or, if we are already in the finally,
+ * then to any “outer” finally handlers).</p>
  *
  * @param fromNode The original source node since {@code node} is changed
  *        during recursion.
  * @param node The node that follow() should compute.
  */
-  private static Node computeFollowNode(
-      Node fromNode, Node node, ControlFlowAnalysis cfa) {
-    /*
-     * This is the case where:
-     *
-     * 1. Parent is null implies that we are transferring control to the end of
-     * the script.
-     *
-     * 2. Parent is a function implies that we are transferring control back to
-     * the caller of the function.
-     *
-     * 3. If the node is a return statement, we should also transfer control
-     * back to the caller of the function.
-     *
-     * 4. If the node is root then we have reached the end of what we have been
-     * asked to traverse.
-     *
-     * In all cases we should transfer control to a "symbolic return" node.
-     * This will make life easier for DFAs.
-     */
+private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {
   Node parent = node.getParent();
-    if (parent == null || parent.isFunction() ||
-        (cfa != null && node == cfa.root)) {
+  // When the parent is null, a function node, or we have reached the root,
+  // then control returns to a symbolic return node (represented by null).
+  if (parent == null || parent.isFunction() || (cfa != null && node == cfa.root)) {
     return null;
   }
 
-    // If we are just before a IF/WHILE/DO/FOR:
   switch (parent.getType()) {
-      // The follow() of any of the path from IF would be what follows IF.
     case Token.IF:
+      // For if-statements, the follow of any branch is what follows the if.
       return computeFollowNode(fromNode, parent, cfa);
+
     case Token.CASE:
     case Token.DEFAULT_CASE:
-        // After the body of a CASE, the control goes to the body of the next
-        // case, without having to go to the case condition.
+      // For case/default blocks, if there is a next case then its first executable
+      // statement is the follow; otherwise, climb up the AST.
       if (parent.getNext() != null) {
         if (parent.getNext().isCase()) {
           return parent.getNext().getFirstChild().getNext();
         } else if (parent.getNext().isDefaultCase()) {
           return parent.getNext().getFirstChild();
         } else {
           Preconditions.checkState(false, "Not reachable");
         }
       } else {
         return computeFollowNode(fromNode, parent, cfa);
       }
-        break;
+      // Unreachable but required by the language.
+      // break;
+
     case Token.FOR:
       if (NodeUtil.isForIn(parent)) {
         return parent;
       } else {
+        // For a standard FOR loop, the condition/expression part follows.
         return parent.getFirstChild().getNext().getNext();
       }
+
     case Token.WHILE:
     case Token.DO:
       return parent;
+
     case Token.TRY:
-        // If we are coming out of the TRY block...
-        if (parent.getFirstChild() == node) {
-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
+      // If the try statement has a finally clause, then regardless of whether
+      // we are leaving the try block or the catch block, control must flow to the
+      // finally block. Furthermore, when leaving the finally block itself we need
+      // to add cross edges to any outer FINALLY handlers.
+      if (NodeUtil.hasFinally(parent)) {
+        if (node != parent.getLastChild()) {
+          // We are exiting either the try or the catch part.
+          // Create an edge from the abrupt node (fromNode) into the finally block.
+          // For a throw (or for some conditions in a finally), we want the branch
+          // to be exceptional.
+          Branch branchType = (fromNode.getType() == Token.THROW || fromNode.getType() == Token.IF)
+              ? Branch.ON_EX : Branch.UNCOND;
+          if (cfa != null) {
+            cfa.createEdge(fromNode, branchType, parent.getLastChild());
+          }
+          // The immediate follow is the finally block.
           return computeFallThrough(parent.getLastChild());
-          } else { // and have no FINALLY.
-            return computeFollowNode(fromNode, parent, cfa);
-          }
-        // CATCH block.
-        } else if (NodeUtil.getCatchBlock(parent) == node){
-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
-            return computeFallThrough(node.getNext());
         } else {
-            return computeFollowNode(fromNode, parent, cfa);
-          }
-        // If we are coming out of the FINALLY block...
-        } else if (parent.getLastChild() == node){
+          // We are exiting from the finally block.
+          // Regardless of the type of fromNode, once leaving a finally we want to
+          // connect to any outer FINALLY handlers via an exceptional (ON_EX) edge.
+          Branch branchType = Branch.ON_EX;
           if (cfa != null) {
             for (Node finallyNode : cfa.finallyMap.get(parent)) {
-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
+              cfa.createEdge(fromNode, branchType, finallyNode);
             }
           }
           return computeFollowNode(fromNode, parent, cfa);
         }
+      } else {
+        // No finally clause present; simply climb the AST.
+        return computeFollowNode(fromNode, parent, cfa);
+      }
   }
 
-    // Now that we are done with the special cases follow should be its
-    // immediate sibling, unless its sibling is a function
+  // For most constructs the follow node is just the next sibling,
+  // unless that sibling is a function (control does not fall into functions).
   Node nextSibling = node.getNext();
-
-    // Skip function declarations because control doesn't get pass into it.
   while (nextSibling != null && nextSibling.isFunction()) {
     nextSibling = nextSibling.getNext();
   }
 
   if (nextSibling != null) {
     return computeFallThrough(nextSibling);
   } else {
-      // If there are no more siblings, control is transferred up the AST.
+    // If there are no more siblings, then control escapes the current block.
     return computeFollowNode(fromNode, parent, cfa);
   }
 }
\ No newline at end of file
