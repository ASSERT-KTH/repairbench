diff --git a/tmp/fa3d09b1-d3f5-439a-a9d8-878220e8ab42_buggy.java b/tmp/0a12e8d1-842c-4ae3-8be0-46cfba2ae2d4_fixed.java
index bf9bb88..5e6c660 100644
--- a/tmp/fa3d09b1-d3f5-439a-a9d8-878220e8ab42_buggy.java
+++ b/tmp/0a12e8d1-842c-4ae3-8be0-46cfba2ae2d4_fixed.java
@@ -1,108 +1,101 @@
-  /**
-   * Computes the follow() node of a given node and its parent. There is a side
-   * effect when calling this function. If this function computed an edge that
-   * exists a FINALLY, it'll attempt to connect the fromNode to the outer
-   * FINALLY according to the finallyMap.
-   *
-   * @param fromNode The original source node since {@code node} is changed
-   *        during recursion.
-   * @param node The node that follow() should compute.
-   */
-  private static Node computeFollowNode(
-      Node fromNode, Node node, ControlFlowAnalysis cfa) {
+private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {
   /*
    * This is the case where:
    *
    * 1. Parent is null implies that we are transferring control to the end of
    * the script.
    *
    * 2. Parent is a function implies that we are transferring control back to
    * the caller of the function.
    *
    * 3. If the node is a return statement, we should also transfer control
    * back to the caller of the function.
    *
    * 4. If the node is root then we have reached the end of what we have been
    * asked to traverse.
    *
    * In all cases we should transfer control to a "symbolic return" node.
    * This will make life easier for DFAs.
    */
   Node parent = node.getParent();
   if (parent == null || parent.isFunction() ||
       (cfa != null && node == cfa.root)) {
     return null;
   }
 
-    // If we are just before a IF/WHILE/DO/FOR:
   switch (parent.getType()) {
     // The follow() of any of the path from IF would be what follows IF.
     case Token.IF:
       return computeFollowNode(fromNode, parent, cfa);
     case Token.CASE:
     case Token.DEFAULT_CASE:
-        // After the body of a CASE, the control goes to the body of the next
+      // After the body of a CASE, control goes to the body of the next
       // case, without having to go to the case condition.
       if (parent.getNext() != null) {
         if (parent.getNext().isCase()) {
           return parent.getNext().getFirstChild().getNext();
         } else if (parent.getNext().isDefaultCase()) {
           return parent.getNext().getFirstChild();
         } else {
           Preconditions.checkState(false, "Not reachable");
         }
       } else {
         return computeFollowNode(fromNode, parent, cfa);
       }
-        break;
     case Token.FOR:
       if (NodeUtil.isForIn(parent)) {
         return parent;
       } else {
         return parent.getFirstChild().getNext().getNext();
       }
     case Token.WHILE:
     case Token.DO:
       return parent;
     case Token.TRY:
-        // If we are coming out of the TRY block...
+      // Leaving a TRY node. Note that a TRY node typically has three children:
+      // the try block, an optional catch block (obtained via NodeUtil.getCatchBlock)
+      // and an optional finally block (the last child). When a FINALLY block exists,
+      // we want to preserve it so that later (when exiting FINALLY) a cross edge is
+      // created. (See the branch below for parent.getLastChild()==node.)
       if (parent.getFirstChild() == node) {
-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
-            return computeFallThrough(parent.getLastChild());
-          } else { // and have no FINALLY.
+        if (NodeUtil.hasFinally(parent)) {
+          // Instead of unwrapping the finally block (via computeFallThrough),
+          // return it as-is so that later the cross edges can be created.
+          return parent.getLastChild();
+        } else {
           return computeFollowNode(fromNode, parent, cfa);
         }
-        // CATCH block.
       } else if (NodeUtil.getCatchBlock(parent) == node) {
-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
-            return computeFallThrough(node.getNext());
+        if (NodeUtil.hasFinally(parent)) {
+          // Likewise, if leaving the catch block in a TRY that has FINALLY,
+          // return the FINALLY block (node.getNext()) directly.
+          return node.getNext();
         } else {
           return computeFollowNode(fromNode, parent, cfa);
         }
-        // If we are coming out of the FINALLY block...
       } else if (parent.getLastChild() == node) {
+        // When exiting the FINALLY block itself, add cross edges from the
+        // original fromNode to each outer FINALLY according to finallyMap.
         if (cfa != null) {
           for (Node finallyNode : cfa.finallyMap.get(parent)) {
             cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
           }
         }
         return computeFollowNode(fromNode, parent, cfa);
       }
   }
 
-    // Now that we are done with the special cases follow should be its
-    // immediate sibling, unless its sibling is a function
+  // Now that we are done with the special cases, the follow should be its
+  // immediate sibling, unless its sibling is a function.
   Node nextSibling = node.getNext();
-
-    // Skip function declarations because control doesn't get pass into it.
   while (nextSibling != null && nextSibling.isFunction()) {
     nextSibling = nextSibling.getNext();
   }
 
   if (nextSibling != null) {
     return computeFallThrough(nextSibling);
   } else {
     // If there are no more siblings, control is transferred up the AST.
     return computeFollowNode(fromNode, parent, cfa);
   }
 }
\ No newline at end of file
