diff --git a/tmp/77993ee6-c04a-4067-9bbc-936a83844bb4_buggy.java b/tmp/46aeb864-a98c-4501-8e15-f84edd7841bd_fixed.java
index 88bb3a1..98f889e 100644
--- a/tmp/77993ee6-c04a-4067-9bbc-936a83844bb4_buggy.java
+++ b/tmp/46aeb864-a98c-4501-8e15-f84edd7841bd_fixed.java
@@ -1,57 +1,52 @@
-    /**
-     * Helper method called when there is the explicit "is-creator", but no mode declaration.
-     *
-     * @since 2.9.2
-     */
 protected void _addExplicitAnyCreator(DeserializationContext ctxt,
         BeanDescription beanDesc, CreatorCollector creators,
         CreatorCandidate candidate)
     throws JsonMappingException
 {
-        // Looks like there's bit of magic regarding 1-parameter creators; others simpler:
     if (1 != candidate.paramCount()) {
-            // Ok: for delegates, we want one and exactly one parameter without
-            // injection AND without name
+        // For multi-parameter creators, try to find a single non-injected parameter...
         int oneNotInjected = candidate.findOnlyParamWithoutInjection();
         if (oneNotInjected >= 0) {
-                // getting close; but most not have name
+            // ...but if that parameter has no name, then it is considered a delegate creator
             if (candidate.paramName(oneNotInjected) == null) {
                 _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);
                 return;
             }
         }
         _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);
         return;
     }
+    // For one-argument creators:
     AnnotatedParameter param = candidate.parameter(0);
     JacksonInject.Value injectId = candidate.injection(0);
-        PropertyName paramName = candidate.explicitParamName(0);
+    // Also get property definition (which may come with a naming strategy applied)
     BeanPropertyDefinition paramDef = candidate.propertyDef(0);
 
-        // If there's injection or explicit name, should be properties-based
+    // First, obtain the explicit parameter name (usually the Java name)
+    PropertyName paramName = candidate.explicitParamName(0);
+    // If a property definition is available, try to get the implicit name 
+    // (which will have naming strategy applied, e.g. convert "paramName0" to "param_name0")
+    if (paramDef != null) {
+        PropertyName implicitName = candidate.findImplicitParamName(0);
+        if (implicitName != null) {
+            paramName = implicitName;
+        }
+    }
+
+    // If the parameter has a name (or injection) it is treated as a property-based creator:
     boolean useProps = (paramName != null) || (injectId != null);
-        if (!useProps && (paramDef != null)) {
-            // One more thing: if implicit name matches property with a getter
-            // or field, we'll consider it property-based as well
-
-            // 25-May-2018, tatu: as per [databind#2051], looks like we have to get
-            //    not implicit name, but name with possible strategy-based-rename
-//            paramName = candidate.findImplicitParamName(0);
-            paramName = candidate.findImplicitParamName(0);
-            useProps = (paramName != null) && paramDef.couldSerialize();
-        }
     if (useProps) {
         SettableBeanProperty[] properties = new SettableBeanProperty[] {
                 constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId)
         };
         creators.addPropertyCreator(candidate.creator(), true, properties);
         return;
     }
+    // Fallback: treat single-argument creator as a delegate creator.
     _handleSingleArgumentCreator(creators, candidate.creator(), true, true);
     
-        // one more thing: sever link to creator property, to avoid possible later
-        // problems with "unresolved" constructor property
+    // Sever links to creator properties to avoid later problems.
     if (paramDef != null) {
         ((POJOPropertyBuilder) paramDef).removeConstructors();
     }
 }
\ No newline at end of file
