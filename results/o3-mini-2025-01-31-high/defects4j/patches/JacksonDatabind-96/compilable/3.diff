diff --git a/tmp/4464cb32-88ac-4106-964f-938cad5e9e9d_buggy.java b/tmp/133ef94d-7a43-4e9c-911a-9b7dd8b8773b_fixed.java
index 88bb3a1..860f37c 100644
--- a/tmp/4464cb32-88ac-4106-964f-938cad5e9e9d_buggy.java
+++ b/tmp/133ef94d-7a43-4e9c-911a-9b7dd8b8773b_fixed.java
@@ -1,57 +1,61 @@
 /**
  * Helper method called when there is the explicit "is-creator", but no mode declaration.
  *
  * @since 2.9.2
  */
 protected void _addExplicitAnyCreator(DeserializationContext ctxt,
         BeanDescription beanDesc, CreatorCollector creators,
         CreatorCandidate candidate)
     throws JsonMappingException
 {
     // Looks like there's bit of magic regarding 1-parameter creators; others simpler:
     if (1 != candidate.paramCount()) {
         // Ok: for delegates, we want one and exactly one parameter without
         // injection AND without name
         int oneNotInjected = candidate.findOnlyParamWithoutInjection();
         if (oneNotInjected >= 0) {
-                // getting close; but most not have name
+            // getting close; but must not have name
             if (candidate.paramName(oneNotInjected) == null) {
                 _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);
                 return;
             }
         }
         _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);
         return;
     }
     AnnotatedParameter param = candidate.parameter(0);
     JacksonInject.Value injectId = candidate.injection(0);
+    // Initially, get the (possibly raw) parameter name; note: if coming from JVM
+    // parameter names (and not explicitly annotated) it is considered "implicit"
     PropertyName paramName = candidate.explicitParamName(0);
     BeanPropertyDefinition paramDef = candidate.propertyDef(0);
     
-        // If there's injection or explicit name, should be properties-based
-        boolean useProps = (paramName != null) || (injectId != null);
-        if (!useProps && (paramDef != null)) {
-            // One more thing: if implicit name matches property with a getter
-            // or field, we'll consider it property-based as well
-
-            // 25-May-2018, tatu: as per [databind#2051], looks like we have to get
-            //    not implicit name, but name with possible strategy-based-rename
-//            paramName = candidate.findImplicitParamName(0);
-            paramName = candidate.findImplicitParamName(0);
-            useProps = (paramName != null) && paramDef.couldSerialize();
+    // Determine whether to create property-based creator.
+    // If there is an injection then that is an indication to use property mode;
+    // otherwise, even if a name is available we try to use the version that
+    // has been potentially renamed via a naming strategy if we have a property definition.
+    boolean useProps = (injectId != null) || (paramName != null);
+    if (injectId == null && paramDef != null) {
+        // As per [databind#2051], if a naming strategy is configured,
+        // we must use the 'implicit' name (which can be renamed by the strategy)
+        PropertyName implName = candidate.findImplicitParamName(0);
+        if (implName != null && paramDef.couldSerialize()) {
+            paramName = implName;
+            useProps = true;
+        }
     }
     if (useProps) {
         SettableBeanProperty[] properties = new SettableBeanProperty[] {
                 constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId)
         };
         creators.addPropertyCreator(candidate.creator(), true, properties);
         return;
     }
     _handleSingleArgumentCreator(creators, candidate.creator(), true, true);
     
     // one more thing: sever link to creator property, to avoid possible later
     // problems with "unresolved" constructor property
     if (paramDef != null) {
         ((POJOPropertyBuilder) paramDef).removeConstructors();
     }
 }
\ No newline at end of file
