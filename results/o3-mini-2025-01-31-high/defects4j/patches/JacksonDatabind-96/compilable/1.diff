diff --git a/tmp/cc00df2c-c70b-420a-8720-29c7dfc8faee_buggy.java b/tmp/a0d85943-2fee-4c77-a6d4-20c3bab16c79_fixed.java
index 88bb3a1..4f7bbae 100644
--- a/tmp/cc00df2c-c70b-420a-8720-29c7dfc8faee_buggy.java
+++ b/tmp/a0d85943-2fee-4c77-a6d4-20c3bab16c79_fixed.java
@@ -1,57 +1,56 @@
 /**
  * Helper method called when there is the explicit "is-creator", but no mode declaration.
  *
  * @since 2.9.2
  */
 protected void _addExplicitAnyCreator(DeserializationContext ctxt,
         BeanDescription beanDesc, CreatorCollector creators,
         CreatorCandidate candidate)
     throws JsonMappingException
 {
     // Looks like there's bit of magic regarding 1-parameter creators; others simpler:
     if (1 != candidate.paramCount()) {
         // Ok: for delegates, we want one and exactly one parameter without
         // injection AND without name
         int oneNotInjected = candidate.findOnlyParamWithoutInjection();
         if (oneNotInjected >= 0) {
-                // getting close; but most not have name
+            // getting close; but must not have name
             if (candidate.paramName(oneNotInjected) == null) {
                 _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);
                 return;
             }
         }
         _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);
         return;
     }
+    // 1-argument case:
     AnnotatedParameter param = candidate.parameter(0);
     JacksonInject.Value injectId = candidate.injection(0);
-        PropertyName paramName = candidate.explicitParamName(0);
     BeanPropertyDefinition paramDef = candidate.propertyDef(0);
-
-        // If there's injection or explicit name, should be properties-based
+    // Start with the explicitly declared name (if any)
+    PropertyName explicitName = candidate.explicitParamName(0);
+    // However, if we have a BeanPropertyDefinition, we need to apply naming
+    // strategy and override with the proper (implicit) name if available.
+    PropertyName paramName = explicitName;
+    if (paramDef != null) {
+        PropertyName implicitName = candidate.findImplicitParamName(0);
+        if (implicitName != null) {
+            paramName = implicitName;
+        }
+    }
+    // If there's injection or (renamed) explicit name, we treat it as property-based.
     boolean useProps = (paramName != null) || (injectId != null);
-        if (!useProps && (paramDef != null)) {
-            // One more thing: if implicit name matches property with a getter
-            // or field, we'll consider it property-based as well
-
-            // 25-May-2018, tatu: as per [databind#2051], looks like we have to get
-            //    not implicit name, but name with possible strategy-based-rename
-//            paramName = candidate.findImplicitParamName(0);
-            paramName = candidate.findImplicitParamName(0);
-            useProps = (paramName != null) && paramDef.couldSerialize();
-        }
     if (useProps) {
         SettableBeanProperty[] properties = new SettableBeanProperty[] {
                 constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId)
         };
         creators.addPropertyCreator(candidate.creator(), true, properties);
         return;
     }
     _handleSingleArgumentCreator(creators, candidate.creator(), true, true);
 
-        // one more thing: sever link to creator property, to avoid possible later
-        // problems with "unresolved" constructor property
+    // Disconnect link to creator property to avoid possible later issues
     if (paramDef != null) {
         ((POJOPropertyBuilder) paramDef).removeConstructors();
     }
 }
\ No newline at end of file
