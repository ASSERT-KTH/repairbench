diff --git a/tmp/55315dff-613c-472e-a4f6-2cd6ed7556d8_buggy.java b/tmp/df70a70b-156e-4751-b692-144fb3dfff69_fixed.java
index 88bb3a1..3f1a468 100644
--- a/tmp/55315dff-613c-472e-a4f6-2cd6ed7556d8_buggy.java
+++ b/tmp/df70a70b-156e-4751-b692-144fb3dfff69_fixed.java
@@ -1,57 +1,50 @@
-    /**
-     * Helper method called when there is the explicit "is-creator", but no mode declaration.
-     *
-     * @since 2.9.2
-     */
 protected void _addExplicitAnyCreator(DeserializationContext ctxt,
         BeanDescription beanDesc, CreatorCollector creators,
         CreatorCandidate candidate)
     throws JsonMappingException
 {
     // Looks like there's bit of magic regarding 1-parameter creators; others simpler:
-        if (1 != candidate.paramCount()) {
-            // Ok: for delegates, we want one and exactly one parameter without
-            // injection AND without name
+    if (candidate.paramCount() != 1) {
+        // For delegates we want exactly one parameter without injection AND without a name:
         int oneNotInjected = candidate.findOnlyParamWithoutInjection();
         if (oneNotInjected >= 0) {
-                // getting close; but most not have name
             if (candidate.paramName(oneNotInjected) == null) {
                 _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);
                 return;
             }
         }
         _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);
         return;
     }
     AnnotatedParameter param = candidate.parameter(0);
     JacksonInject.Value injectId = candidate.injection(0);
     PropertyName paramName = candidate.explicitParamName(0);
     BeanPropertyDefinition paramDef = candidate.propertyDef(0);
 
-        // If there's injection or explicit name, should be properties-based
+    // If a property definition exists, attempt to use the implicit name,
+    // which will apply the naming strategy (e.g. snake_case), instead of the raw explicit name.
+    if (paramDef != null) {
+        PropertyName implicitName = candidate.findImplicitParamName(0);
+        if (implicitName != null) {
+            paramName = implicitName;
+        }
+    }
+
+    // If there's injection or any parameter name (explicit or from naming strategy),
+    // then we want a property-based creator.
     boolean useProps = (paramName != null) || (injectId != null);
-        if (!useProps && (paramDef != null)) {
-            // One more thing: if implicit name matches property with a getter
-            // or field, we'll consider it property-based as well
-
-            // 25-May-2018, tatu: as per [databind#2051], looks like we have to get
-            //    not implicit name, but name with possible strategy-based-rename
-//            paramName = candidate.findImplicitParamName(0);
-            paramName = candidate.findImplicitParamName(0);
-            useProps = (paramName != null) && paramDef.couldSerialize();
-        }
     if (useProps) {
         SettableBeanProperty[] properties = new SettableBeanProperty[] {
             constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId)
         };
         creators.addPropertyCreator(candidate.creator(), true, properties);
         return;
     }
     _handleSingleArgumentCreator(creators, candidate.creator(), true, true);
 
-        // one more thing: sever link to creator property, to avoid possible later
-        // problems with "unresolved" constructor property
+    // Sever link to creator property to avoid possible later problems with "unresolved"
+    // constructor properties.
     if (paramDef != null) {
         ((POJOPropertyBuilder) paramDef).removeConstructors();
     }
 }
\ No newline at end of file
