diff --git a/tmp/438a823f-f9fa-43a6-b2e7-e2feadaad63b_buggy.java b/tmp/b144841c-dc3c-435f-b0d7-d3ee473e3d0d_fixed.java
index 88bb3a1..2626429 100644
--- a/tmp/438a823f-f9fa-43a6-b2e7-e2feadaad63b_buggy.java
+++ b/tmp/b144841c-dc3c-435f-b0d7-d3ee473e3d0d_fixed.java
@@ -1,57 +1,56 @@
-    /**
-     * Helper method called when there is the explicit "is-creator", but no mode declaration.
-     *
-     * @since 2.9.2
-     */
 protected void _addExplicitAnyCreator(DeserializationContext ctxt,
         BeanDescription beanDesc, CreatorCollector creators,
         CreatorCandidate candidate)
     throws JsonMappingException
 {
-        // Looks like there's bit of magic regarding 1-parameter creators; others simpler:
+    // Looks like there's a bit of magic regarding 1-parameter creators; others simpler:
     if (1 != candidate.paramCount()) {
-            // Ok: for delegates, we want one and exactly one parameter without
-            // injection AND without name
+        // For delegates, we want one and exactly one parameter without injection AND without name
         int oneNotInjected = candidate.findOnlyParamWithoutInjection();
         if (oneNotInjected >= 0) {
-                // getting close; but most not have name
+            // Getting close; but must not have a name
             if (candidate.paramName(oneNotInjected) == null) {
                 _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);
                 return;
             }
         }
         _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);
         return;
     }
     AnnotatedParameter param = candidate.parameter(0);
     JacksonInject.Value injectId = candidate.injection(0);
     PropertyName paramName = candidate.explicitParamName(0);
     BeanPropertyDefinition paramDef = candidate.propertyDef(0);
 
     // If there's injection or explicit name, should be properties-based
     boolean useProps = (paramName != null) || (injectId != null);
     if (!useProps && (paramDef != null)) {
-            // One more thing: if implicit name matches property with a getter
-            // or field, we'll consider it property-based as well
-
-            // 25-May-2018, tatu: as per [databind#2051], looks like we have to get
-            //    not implicit name, but name with possible strategy-based-rename
-//            paramName = candidate.findImplicitParamName(0);
+        // For 1-parameter creators, if no explicit name is available, try to find an implicit name.
         paramName = candidate.findImplicitParamName(0);
         useProps = (paramName != null) && paramDef.couldSerialize();
     }
     if (useProps) {
+        // Apply naming strategy conversion if the name is implicit (i.e. not explicitly annotated)
+        if (paramName != null && (paramDef == null || !paramDef.isExplicitlyNamed())) {
+            MapperConfig<?> config = ctxt.getConfig();
+            PropertyNamingStrategy namingStrategy = config.getPropertyNamingStrategy();
+            if (namingStrategy != null) {
+                String newName = namingStrategy.nameForConstructorParameter(config, param, paramName.getSimpleName());
+                if (!newName.equals(paramName.getSimpleName())) {
+                    paramName = PropertyName.construct(newName, paramName.getNamespace());
+                }
+            }
+        }
         SettableBeanProperty[] properties = new SettableBeanProperty[] {
                 constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId)
         };
         creators.addPropertyCreator(candidate.creator(), true, properties);
         return;
     }
     _handleSingleArgumentCreator(creators, candidate.creator(), true, true);
 
-        // one more thing: sever link to creator property, to avoid possible later
-        // problems with "unresolved" constructor property
+    // Sever link to creator property, to avoid possible later problems with "unresolved" constructor property
     if (paramDef != null) {
         ((POJOPropertyBuilder) paramDef).removeConstructors();
     }
 }
\ No newline at end of file
