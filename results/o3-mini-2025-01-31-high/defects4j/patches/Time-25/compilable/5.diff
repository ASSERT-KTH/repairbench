diff --git a/tmp/0f29ddcf-8deb-4049-a599-c3b33852e471_buggy.java b/tmp/5d0dc5aa-1c58-41bd-9951-572ba4b6d13d_fixed.java
index 05aaf2d..0ba0d9f 100644
--- a/tmp/0f29ddcf-8deb-4049-a599-c3b33852e471_buggy.java
+++ b/tmp/5d0dc5aa-1c58-41bd-9951-572ba4b6d13d_fixed.java
@@ -1,56 +1,37 @@
-    /**
-     * Gets the millisecond offset to subtract from local time to get UTC time.
-     * This offset can be used to undo adding the offset obtained by getOffset.
-     *
-     * <pre>
-     * millisLocal == millisUTC   + getOffset(millisUTC)
-     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
-     * </pre>
-     *
-     * NOTE: After calculating millisLocal, some error may be introduced. At
-     * offset transitions (due to DST or other historical changes), ranges of
-     * local times may map to different UTC times.
-     * <p>
-     * This method will return an offset suitable for calculating an instant
-     * after any DST gap. For example, consider a zone with a cutover
-     * from 01:00 to 01:59:<br />
-     * Input: 00:00  Output: 00:00<br />
-     * Input: 00:30  Output: 00:30<br />
-     * Input: 01:00  Output: 02:00<br />
-     * Input: 01:30  Output: 02:30<br />
-     * Input: 02:00  Output: 02:00<br />
-     * Input: 02:30  Output: 02:30<br />
-     * <p>
-     * During a DST overlap (where the local time is ambiguous) this method will return
-     * the earlier instant. The combination of these two rules is to always favour
-     * daylight (summer) time over standard (winter) time.
-     * <p>
-     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
-     * Prior to v1.5, the DST gap behaviour was also not defined.
-     *
-     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
-     * @return the millisecond offset to subtract from local time to get UTC time
-     */
 public int getOffsetFromLocal(long instantLocal) {
-        // get the offset at instantLocal (first estimate)
-        final int offsetLocal = getOffset(instantLocal);
-        // adjust instantLocal using the estimate and recalc the offset
-        final long instantAdjusted = instantLocal - offsetLocal;
-        final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
-        if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
-                long nextLocal = nextTransition(instantAdjusted);
-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
-                if (nextLocal != nextAdjusted) {
+    // First guess using the provided instant.
+    int offsetLocal = getOffset(instantLocal);
+    // Adjust the instant using that offset.
+    long instantAdjusted = instantLocal - offsetLocal;
+    int offsetAdjusted = getOffset(instantAdjusted);
+    
+    // If both estimates agree, there is no transition effect.
+    if (offsetLocal == offsetAdjusted) {
         return offsetLocal;
     }
+    
+    // Otherwise we have two candidate offsets.
+    // Define the candidate UTC instants:
+    //   candidate A: using offsetLocal -> utcA = instantLocal - offsetLocal
+    //   candidate B: using offsetAdjusted -> utcB = instantLocal - offsetAdjusted
+    //
+    // In an overlap (fall-back), both utcA and utcB lie in the same offset period,
+    // so nextTransition(utcA) equals nextTransition(utcB). In that case we want the
+    // earlier instant â€“ which is achieved by subtracting the larger offset.
+    // In a gap (spring-forward), the two instants will fall on different sides of the
+    // transition, so nextTransition(utcA) != nextTransition(utcB). Then we must choose
+    // the offset which produces a UTC instant on or after the gap (i.e. the smaller offset).
+    
+    int maxOffset = Math.max(offsetLocal, offsetAdjusted);
+    int minOffset = Math.min(offsetLocal, offsetAdjusted);
+    long utcFromMax = instantLocal - maxOffset;
+    long utcFromMin = instantLocal - minOffset;
+    
+    if (nextTransition(utcFromMax) == nextTransition(utcFromMin)) {
+        // Overlap scenario: choose the maximum offset (favour daylight time).
+        return maxOffset;
+    } else {
+        // Gap scenario: choose the minimum offset to push the UTC instant forward.
+        return minOffset;
     }
 }
\ No newline at end of file
-        return offsetAdjusted;
-    }
