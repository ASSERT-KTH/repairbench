diff --git a/tmp/3e287070-c9ad-49b5-a73a-998e562d389e_buggy.java b/tmp/15798aa1-e6b2-4d32-bf1a-95091d9f6124_fixed.java
index 05aaf2d..39887ad 100644
--- a/tmp/3e287070-c9ad-49b5-a73a-998e562d389e_buggy.java
+++ b/tmp/15798aa1-e6b2-4d32-bf1a-95091d9f6124_fixed.java
@@ -1,56 +1,37 @@
-    /**
-     * Gets the millisecond offset to subtract from local time to get UTC time.
-     * This offset can be used to undo adding the offset obtained by getOffset.
-     *
-     * <pre>
-     * millisLocal == millisUTC   + getOffset(millisUTC)
-     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
-     * </pre>
-     *
-     * NOTE: After calculating millisLocal, some error may be introduced. At
-     * offset transitions (due to DST or other historical changes), ranges of
-     * local times may map to different UTC times.
-     * <p>
-     * This method will return an offset suitable for calculating an instant
-     * after any DST gap. For example, consider a zone with a cutover
-     * from 01:00 to 01:59:<br />
-     * Input: 00:00  Output: 00:00<br />
-     * Input: 00:30  Output: 00:30<br />
-     * Input: 01:00  Output: 02:00<br />
-     * Input: 01:30  Output: 02:30<br />
-     * Input: 02:00  Output: 02:00<br />
-     * Input: 02:30  Output: 02:30<br />
-     * <p>
-     * During a DST overlap (where the local time is ambiguous) this method will return
-     * the earlier instant. The combination of these two rules is to always favour
-     * daylight (summer) time over standard (winter) time.
-     * <p>
-     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
-     * Prior to v1.5, the DST gap behaviour was also not defined.
-     *
-     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
-     * @return the millisecond offset to subtract from local time to get UTC time
-     */
 public int getOffsetFromLocal(long instantLocal) {
-        // get the offset at instantLocal (first estimate)
-        final int offsetLocal = getOffset(instantLocal);
-        // adjust instantLocal using the estimate and recalc the offset
-        final long instantAdjusted = instantLocal - offsetLocal;
-        final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
-        if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
-                long nextLocal = nextTransition(instantAdjusted);
-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
-                if (nextLocal != nextAdjusted) {
-                    return offsetLocal;
+    // First get the offset based on the local instant.
+    int offset1 = getOffset(instantLocal);
+    long utcCandidate1 = instantLocal - offset1;
+    // Recalculate the offset using the adjusted instant.
+    int offset2 = getOffset(utcCandidate1);
+    
+    // If both offsets are the same, there's no transition in effect.
+    if (offset1 == offset2) {
+        return offset1;
     }
+    
+    // Determine the boundaries from below using both offsets.
+    long trans1 = nextTransition(instantLocal - offset1);
+    long trans2 = nextTransition(instantLocal - offset2);
+    
+    /*
+     * There are two cases:
+     *
+     * 1. Overlap (typically in a fall-back situation):
+     *    Both adjusted instants lie in the same transition gap.
+     *    In an overlap the two valid offsets differ, and we choose the larger one,
+     *    which corresponds to the earlier UTC instant.
+     *
+     * 2. Gap (typically in a spring-forward):
+     *    The two adjusted instants lie on different sides of the DST gap.
+     *    In a gap we want to map the local instant to a UTC instant on or after the gap,
+     *    so we choose the smaller offset.
+     */
+    if (trans1 == trans2) {
+        // Overlap: return the larger (i.e. more positive) offset.
+        return Math.max(offset1, offset2);
+    } else {
+        // Gap: return the smaller offset.
+        return Math.min(offset1, offset2);
     }
 }
\ No newline at end of file
-        return offsetAdjusted;
-    }
