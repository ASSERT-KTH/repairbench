diff --git a/tmp/93ab2fe4-eed4-47ad-ba19-845d14f92507_buggy.java b/tmp/b553404b-a0a7-40b4-a5d3-d69bf5ee62e0_fixed.java
index bfa2423..0900f2f 100644
--- a/tmp/93ab2fe4-eed4-47ad-ba19-845d14f92507_buggy.java
+++ b/tmp/b553404b-a0a7-40b4-a5d3-d69bf5ee62e0_fixed.java
@@ -1,23 +1,33 @@
 /**
  * Generate a random sample from the distribution.
  *
  * @param sampleSize the number of random values to generate.
  * @return an array representing the random sample.
-     * @throws NotStrictlyPositiveException if {@code sampleSize} is not
-     * positive.
+ * @throws NotStrictlyPositiveException if {@code sampleSize} is not positive.
  */
 public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
     if (sampleSize <= 0) {
-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
-                    sampleSize);
+        throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
     }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+    // Find a common component type for all support values.
+    // This prevents an ArrayStoreException when the support elements are of different
+    // (anonymous) classes, as was the case in Issue 942.
+    Class<?> commonType = singletons.get(0).getClass();
+    for (int i = 1; i < singletons.size(); i++) {
+        T current = singletons.get(i);
+        Class<?> candidate = current.getClass();
+        while (!commonType.isAssignableFrom(candidate)) {
+            commonType = commonType.getSuperclass();
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    final T[] out = (T[]) java.lang.reflect.Array.newInstance(commonType, sampleSize);
 
     for (int i = 0; i < sampleSize; i++) {
         out[i] = sample();
     }
 
     return out;
-
 }
\ No newline at end of file
