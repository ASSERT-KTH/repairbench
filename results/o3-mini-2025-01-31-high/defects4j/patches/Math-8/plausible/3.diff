diff --git a/tmp/8305af50-24cc-47a1-b99e-43b583f56c96_buggy.java b/tmp/e12524ef-2103-4a4e-8855-e02a9bbc37f3_fixed.java
index bfa2423..cc08a99 100644
--- a/tmp/8305af50-24cc-47a1-b99e-43b583f56c96_buggy.java
+++ b/tmp/e12524ef-2103-4a4e-8855-e02a9bbc37f3_fixed.java
@@ -1,23 +1,22 @@
-    /**
-     * Generate a random sample from the distribution.
-     *
-     * @param sampleSize the number of random values to generate.
-     * @return an array representing the random sample.
-     * @throws NotStrictlyPositiveException if {@code sampleSize} is not
-     * positive.
-     */
 public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
     if (sampleSize <= 0) {
-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
-                    sampleSize);
+        throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
     }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+    // Determine an appropriate runtime type for the array.
+    // If the singleton elements are not all of the same type,
+    // use Object.class to avoid ArrayStoreException.
+    Class<?> componentType = singletons.get(0).getClass();
+    for (int j = 1; j < singletons.size(); j++) {
+        if (!componentType.equals(singletons.get(j).getClass())) {
+            componentType = Object.class;
+            break;
+        }
+    }
+    final T[] out = (T[]) java.lang.reflect.Array.newInstance(componentType, sampleSize);
 
     for (int i = 0; i < sampleSize; i++) {
         out[i] = sample();
     }
-
     return out;
-
 }
\ No newline at end of file
