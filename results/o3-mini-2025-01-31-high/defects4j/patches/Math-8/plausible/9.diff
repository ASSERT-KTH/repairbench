diff --git a/tmp/a65edbec-114e-40ce-aef4-9dfc6b5d79ea_buggy.java b/tmp/9ba55228-5504-4b66-8509-291019e609d7_fixed.java
index bfa2423..7543555 100644
--- a/tmp/a65edbec-114e-40ce-aef4-9dfc6b5d79ea_buggy.java
+++ b/tmp/9ba55228-5504-4b66-8509-291019e609d7_fixed.java
@@ -1,23 +1,30 @@
-    /**
-     * Generate a random sample from the distribution.
-     *
-     * @param sampleSize the number of random values to generate.
-     * @return an array representing the random sample.
-     * @throws NotStrictlyPositiveException if {@code sampleSize} is not
-     * positive.
-     */
 public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
     if (sampleSize <= 0) {
-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
-                    sampleSize);
+        throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
     }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+    // Determine a common runtime type that can hold every value from the distribution.
+    // Using only the first elementâ€™s type may fail if other elements have a different runtime type.
+    Class<?> commonType = singletons.get(0).getClass();
+    for (int i = 1; i < singletons.size(); i++) {
+        Class<?> candidate = singletons.get(i).getClass();
+        // Walk up the hierarchy from the current commonType until it can hold candidate.
+        while (!commonType.isAssignableFrom(candidate)) {
+            commonType = commonType.getSuperclass();
+            if (commonType == null) {
+                // If we reach the top, fallback to Object.
+                commonType = Object.class;
+                break;
+            }
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    T[] out = (T[]) java.lang.reflect.Array.newInstance(commonType, sampleSize);
 
     for (int i = 0; i < sampleSize; i++) {
         out[i] = sample();
     }
 
     return out;
-
 }
\ No newline at end of file
