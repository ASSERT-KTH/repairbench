diff --git a/tmp/cbfa154a-bccd-495c-a691-8fecd00e185e_buggy.java b/tmp/205b9b63-683e-443a-84fd-5e9f70436659_fixed.java
index bfa2423..b113e19 100644
--- a/tmp/cbfa154a-bccd-495c-a691-8fecd00e185e_buggy.java
+++ b/tmp/205b9b63-683e-443a-84fd-5e9f70436659_fixed.java
@@ -1,23 +1,33 @@
 /**
  * Generate a random sample from the distribution.
  *
  * @param sampleSize the number of random values to generate.
  * @return an array representing the random sample.
-     * @throws NotStrictlyPositiveException if {@code sampleSize} is not
-     * positive.
+ * @throws NotStrictlyPositiveException if {@code sampleSize} is not positive.
  */
 public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
     if (sampleSize <= 0) {
-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
-                    sampleSize);
+        throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
     }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+    // Compute a common base type for the distribution outcomes.
+    // Using the class of the first element may be too narrow if the list contains items
+    // of different (anonymous) classes. In that case, we fall back to Object
+    Class<?> commonType = singletons.get(0).getClass();
+    for (int i = 1; i < singletons.size(); i++) {
+        Class<?> candidate = singletons.get(i).getClass();
+        if (!commonType.isAssignableFrom(candidate)) {
+            commonType = Object.class;
+            break;
+        }
+    }
+    
+    @SuppressWarnings("unchecked")
+    final T[] out = (T[]) java.lang.reflect.Array.newInstance(commonType, sampleSize);
 
     for (int i = 0; i < sampleSize; i++) {
         out[i] = sample();
     }
 
     return out;
-
 }
\ No newline at end of file
