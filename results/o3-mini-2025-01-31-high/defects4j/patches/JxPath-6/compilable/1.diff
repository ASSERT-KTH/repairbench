diff --git a/tmp/ad53734b-d6b0-4467-a8a4-d7de6cec9d0c_buggy.java b/tmp/b11ccc8c-1fe7-45fa-9191-f631c1ec6340_fixed.java
index f650982..05fe4db 100644
--- a/tmp/ad53734b-d6b0-4467-a8a4-d7de6cec9d0c_buggy.java
+++ b/tmp/b11ccc8c-1fe7-45fa-9191-f631c1ec6340_fixed.java
@@ -1,42 +1,37 @@
-    /**
-     * Compares two values
-     */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
-
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
-        if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
-        }
-
-        if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
-        }
+    // Instead of immediately converting Collections to Iterators (which may exhaust them
+    // and lead to incorrect results in subsequent comparisons), we check here whether
+    // either operand is “iterable” (a Collection or an Iterator) and then obtain a fresh
+    // Iterator if necessary.
+    boolean lIterable = (l instanceof Collection) || (l instanceof Iterator);
+    boolean rIterable = (r instanceof Collection) || (r instanceof Iterator);
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+    if (lIterable && !rIterable) {
+        Iterator li = (l instanceof Collection) ? ((Collection) l).iterator() : (Iterator) l;
+        return contains(li, r);
     }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+    if (!lIterable && rIterable) {
+        Iterator ri = (r instanceof Collection) ? ((Collection) r).iterator() : (Iterator) r;
+        return contains(ri, l);
     }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+    if (lIterable && rIterable) {
+        Iterator li = (l instanceof Collection) ? ((Collection) l).iterator() : (Iterator) l;
+        Iterator ri = (r instanceof Collection) ? ((Collection) r).iterator() : (Iterator) r;
+        return findMatch(li, ri);
     }
     return equal(l, r);
 }
\ No newline at end of file
