diff --git a/tmp/20a1d26c-3d02-486e-8aea-66331d880322_buggy.java b/tmp/ac376f66-88bc-4b3e-96cf-5c7bc1f3fe06_fixed.java
index f650982..aef9dd6 100644
--- a/tmp/20a1d26c-3d02-486e-8aea-66331d880322_buggy.java
+++ b/tmp/ac376f66-88bc-4b3e-96cf-5c7bc1f3fe06_fixed.java
@@ -1,42 +1,41 @@
-    /**
-     * Compares two values
-     */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
-
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
-        if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
-        }
-
-        if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
-        }
+    // Determine if either value is a node-set.
+    boolean lIsNodeSet = (l instanceof Iterator) || (l instanceof Collection);
+    boolean rIsNodeSet = (r instanceof Iterator) || (r instanceof Collection);
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+    // If one operand is a node-set but the other is not,
+    // then the comparison should succeed if ANY node in the node-set
+    // equals the other operand.
+    if (lIsNodeSet && !rIsNodeSet) {
+        Iterator lit = (l instanceof Iterator) ? (Iterator) l : ((Collection) l).iterator();
+        return contains(lit, r);
     }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+    if (!lIsNodeSet && rIsNodeSet) {
+        Iterator rit = (r instanceof Iterator) ? (Iterator) r : ((Collection) r).iterator();
+        return contains(rit, l);
     }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+    // If both are node-sets, then they compare equal if there is at least one 
+    // pair of nodes (one from each) that compare equal.
+    if (lIsNodeSet && rIsNodeSet) {
+        Iterator lit = (l instanceof Iterator) ? (Iterator) l : ((Collection) l).iterator();
+        Iterator rit = (r instanceof Iterator) ? (Iterator) r : ((Collection) r).iterator();
+        return findMatch(lit, rit);
     }
+    
+    // Otherwise, use the standard equality comparison.
     return equal(l, r);
 }
\ No newline at end of file
