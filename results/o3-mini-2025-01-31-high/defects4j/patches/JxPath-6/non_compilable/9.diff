diff --git a/tmp/1785a202-6205-42a2-bb71-10fcc84d0683_buggy.java b/tmp/4193ca02-0adb-49ac-8a00-808dd9bdbecc_fixed.java
index f650982..66f2961 100644
--- a/tmp/1785a202-6205-42a2-bb71-10fcc84d0683_buggy.java
+++ b/tmp/4193ca02-0adb-49ac-8a00-808dd9bdbecc_fixed.java
@@ -1,42 +1,115 @@
-    /**
-     * Compares two values
-     */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+    // If an operand is a context, substitute its single node pointer.
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
-
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
+    /*
+     * In XPath “=” comparisons, if either operand is a node‐set,
+     * the result is true if at least one node in the set, when converted
+     * to its atomic value, is equal to the other operand.
+     *
+     * However, node-sets may be returned as Collections or Iterators.
+     * To avoid problems with one-shot Iterators, we materialize any node‐set
+     * into a List.
+     */
+    boolean lIsNodeSet = (l instanceof Collection) || (l instanceof Iterator);
+    boolean rIsNodeSet = (r instanceof Collection) || (r instanceof Iterator);
+
+    if (lIsNodeSet) {
         if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+            l = new ArrayList((Collection) l);
+        } else { // l is an Iterator – materialize it into a List.
+            List temp = new ArrayList();
+            Iterator it = (Iterator) l;
+            while (it.hasNext()) {
+                temp.add(it.next());
             }
-
+            l = temp;
+        }
+    }
+    if (rIsNodeSet) {
         if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+            r = new ArrayList((Collection) r);
+        } else { // r is an Iterator – materialize it into a List.
+            List temp = new ArrayList();
+            Iterator it = (Iterator) r;
+            while (it.hasNext()) {
+                temp.add(it.next());
+            }
+            r = temp;
+        }
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+    // If one operand is a node-set (a List now) and the other is a scalar,
+    // return true if any item in the node-set (after unwrapping node pointers)
+    // equals the scalar.
+    if (lIsNodeSet && !rIsNodeSet) {
+        List lList = (List) l;
+        for (int i = 0, size = lList.size(); i < size; i++) {
+            Object item = lList.get(i);
+            if (item instanceof NodePointer) {
+                item = ((NodePointer) item).getValue();
+            }
+            Object rVal = r instanceof NodePointer ? ((NodePointer) r).getValue() : r;
+            if (equal(item, rVal)) {
+                return true;
+            }
+        }
+        return false;
+    }
+    if (rIsNodeSet && !lIsNodeSet) {
+        List rList = (List) r;
+        for (int i = 0, size = rList.size(); i < size; i++) {
+            Object item = rList.get(i);
+            if (item instanceof NodePointer) {
+                item = ((NodePointer) item).getValue();
+            }
+            Object lVal = l instanceof NodePointer ? ((NodePointer) l).getValue() : l;
+            if (equal(item, lVal)) {
+                return true;
+            }
         }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        return false;
+    }
+    // If both operands are node-sets, return true if any item from one set equals any item from the other.
+    if (lIsNodeSet && rIsNodeSet) {
+        List lList = (List) l;
+        List rList = (List) r;
+        for (int i = 0, lSize = lList.size(); i < lSize; i++) {
+            Object li = lList.get(i);
+            if (li instanceof NodePointer) {
+                li = ((NodePointer) li).getValue();
+            }
+            for (int j = 0, rSize = rList.size(); j < rSize; j++) {
+                Object rj = rList.get(j);
+                if (rj instanceof NodePointer) {
+                    rj = ((NodePointer) rj).getValue();
+                }
+                if (equal(li, rj)) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+
+    // Neither operand is a node-set: unwrap node pointers if needed and compare.
+    if (l instanceof NodePointer) {
+        l = ((NodePointer) l).getValue();
     }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+    if (r instanceof NodePointer) {
+        r = ((NodePointer) r).getValue();
     }
     return equal(l, r);
 }
\ No newline at end of file
