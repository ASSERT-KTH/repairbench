diff --git a/tmp/b9f98ae1-821c-46b9-8ce2-3fca541d32c2_buggy.java b/tmp/d42dc37d-ffe6-4ebb-8f65-b468370cf381_fixed.java
index f650982..d455d50 100644
--- a/tmp/b9f98ae1-821c-46b9-8ce2-3fca541d32c2_buggy.java
+++ b/tmp/d42dc37d-ffe6-4ebb-8f65-b468370cf381_fixed.java
@@ -1,42 +1,55 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
+    // If a computed value is a non‚ÄêCollection Iterator,
+    // copy its contents into a List so that subsequent iteration works correctly.
+    if (l instanceof Iterator && !(l instanceof Collection)) {
+        List temp = new ArrayList();
+        Iterator it = (Iterator) l;
+        while (it.hasNext()) {
+            temp.add(it.next());
+        }
+        l = temp;
+    }
+    if (r instanceof Iterator && !(r instanceof Collection)) {
+        List temp = new ArrayList();
+        Iterator it = (Iterator) r;
+        while (it.hasNext()) {
+            temp.add(it.next());
+        }
+        r = temp;
+    }
 
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
-
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
-
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
     return equal(l, r);
 }
\ No newline at end of file
