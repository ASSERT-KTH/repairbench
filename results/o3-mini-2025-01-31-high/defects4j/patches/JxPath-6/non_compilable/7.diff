diff --git a/tmp/0ec270e6-4e6b-4fed-b0d3-95de620c50db_buggy.java b/tmp/899b02a7-2686-4440-858d-d2e7b37f64a3_fixed.java
index f650982..3bf9496 100644
--- a/tmp/0ec270e6-4e6b-4fed-b0d3-95de620c50db_buggy.java
+++ b/tmp/899b02a7-2686-4440-858d-d2e7b37f64a3_fixed.java
@@ -1,42 +1,67 @@
-    /**
-     * Compares two values
-     */
-    protected boolean equal(
-        EvalContext context,
-        Expression left,
-        Expression right) 
-    {
+protected boolean equal(EvalContext context, Expression left, Expression right) {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
-
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
-        if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+    // If an Iterator is passed in (but not a Collection) then materialize it,
+    // so that later comparisons do not “consume” the node-set.
+    if (l instanceof Iterator && !(l instanceof Collection)) {
+        List temp = new ArrayList();
+        Iterator it = (Iterator) l;
+        while (it.hasNext()) {
+            temp.add(it.next());
         }
-
-        if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+        l = temp;
+    }
+    if (r instanceof Iterator && !(r instanceof Collection)) {
+        List temp = new ArrayList();
+        Iterator it = (Iterator) r;
+        while (it.hasNext()) {
+            temp.add(it.next());
+        }
+        r = temp;
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+    // In XPath, when one operand is a node-set (here represented as a Collection)
+    // and the other is a scalar, the equality test is true if any node in the set 
+    // equals the scalar.
+    boolean lIsNodeSet = l instanceof Collection;
+    boolean rIsNodeSet = r instanceof Collection;
+    
+    if (lIsNodeSet && !rIsNodeSet) {
+        for (Object item : (Collection<?>) l) {
+            if (equal(item, r)) {
+                return true;
+            }
+        }
+        return false;
     }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+    if (!lIsNodeSet && rIsNodeSet) {
+        for (Object item : (Collection<?>) r) {
+            if (equal(l, item)) {
+                return true;
             }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
         }
+        return false;
+    }
+    if (lIsNodeSet && rIsNodeSet) {
+        // Two node-sets are equal if any pair of items are equal.
+        for (Object itemL : (Collection<?>) l) {
+            for (Object itemR : (Collection<?>) r) {
+                if (equal(itemL, itemR)) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+    
+    // Otherwise delegate to the scalar equality.
     return equal(l, r);
 }
\ No newline at end of file
