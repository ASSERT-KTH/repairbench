diff --git a/tmp/5df331b8-96bb-4c21-adb0-951cc0106c24_buggy.java b/tmp/135deabd-3344-4e1d-8c8a-1534842599fb_fixed.java
index f650982..ad1e356 100644
--- a/tmp/5df331b8-96bb-4c21-adb0-951cc0106c24_buggy.java
+++ b/tmp/135deabd-3344-4e1d-8c8a-1534842599fb_fixed.java
@@ -1,42 +1,49 @@
-    /**
-     * Compares two values
-     */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
-
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
-        if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+    // If a value is an Iterator (but not already a Collection),
+    // copy its contents into a List so that we get a fresh, re‐iterable sequence.
+    if (l instanceof Iterator && !(l instanceof Collection)) {
+        List<Object> list = new ArrayList<Object>();
+        Iterator<?> iter = (Iterator<?>) l;
+        while (iter.hasNext()) {
+            list.add(iter.next());
         }
-
-        if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+        l = list;
+    }
+    if (r instanceof Iterator && !(r instanceof Collection)) {
+        List<Object> list = new ArrayList<Object>();
+        Iterator<?> iter = (Iterator<?>) r;
+        while (iter.hasNext()) {
+            list.add(iter.next());
         }
+        r = list;
+    }
+
+    boolean lIsCollection = (l instanceof Collection);
+    boolean rIsCollection = (r instanceof Collection);
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+    if (lIsCollection && !rIsCollection) {
+        // use a fresh iterator from the Collection, so it isn’t consumed permanently
+        return contains(((Collection<?>) l).iterator(), r);
     }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+    if (!lIsCollection && rIsCollection) {
+        return contains(((Collection<?>) r).iterator(), l);
     }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+    if (lIsCollection && rIsCollection) {
+        return findMatch(((Collection<?>) l).iterator(), ((Collection<?>) r).iterator());
     }
     return equal(l, r);
 }
\ No newline at end of file
