diff --git a/tmp/2abd03f1-1913-43f6-bff1-173c5da8588a_buggy.java b/tmp/7418a2e7-87e5-4df1-8dcf-36ad5feb4600_fixed.java
index f650982..ee86b1e 100644
--- a/tmp/2abd03f1-1913-43f6-bff1-173c5da8588a_buggy.java
+++ b/tmp/7418a2e7-87e5-4df1-8dcf-36ad5feb4600_fixed.java
@@ -1,42 +1,70 @@
-    /**
-     * Compares two values
-     */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+    // Normalize any context objects
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
-
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
+    // If an operand is an Iterator, drain it into a List so that it can be iterated repeatedly.
+    if (l instanceof Iterator) {
+        List<Object> list = new ArrayList<>();
+        Iterator<?> iter = (Iterator<?>) l;
+        while (iter.hasNext()) {
+            list.add(iter.next());
+        }
+        l = list;
+    }
+    if (r instanceof Iterator) {
+        List<Object> list = new ArrayList<>();
+        Iterator<?> iter = (Iterator<?>) r;
+        while (iter.hasNext()) {
+            list.add(iter.next());
+        }
+        r = list;
+    }
+
+    // If either operand is a Collection then according to XPath semantics,
+    // the equality is true if any member of the node-set equals the other operand.
     if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
-        }
-
+        Collection<?> coll = (Collection<?>) l;
+        // If r is also a Collection, check for any pair of equal members.
         if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+            Collection<?> otherColl = (Collection<?>) r;
+            for (Object o1 : coll) {
+                for (Object o2 : otherColl) {
+                    if (equal(o1, o2)) {
+                        return true;
+                    }
+                }
+            }
+        } else {
+            for (Object o : coll) {
+                if (equal(o, r)) {
+                    return true;
                 }
-
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
             }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
         }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+        return false;
     }
+    if (r instanceof Collection) {
+        Collection<?> coll = (Collection<?>) r;
+        for (Object o : coll) {
+            if (equal(l, o)) {
+                return true;
+            }
+        }
+        return false;
+    }
+    
+    // Otherwise, compare the two atomic values.
     return equal(l, r);
 }
\ No newline at end of file
