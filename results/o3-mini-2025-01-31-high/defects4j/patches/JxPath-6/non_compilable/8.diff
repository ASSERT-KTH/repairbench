diff --git a/tmp/a79203d6-b776-4be2-a272-4003b93aa9d1_buggy.java b/tmp/4dfbf9a5-d9b3-427d-aa8c-153628b78d62_fixed.java
index f650982..391b1b0 100644
--- a/tmp/a79203d6-b776-4be2-a272-4003b93aa9d1_buggy.java
+++ b/tmp/4dfbf9a5-d9b3-427d-aa8c-153628b78d62_fixed.java
@@ -1,42 +1,94 @@
-    /**
-     * Compares two values
-     */
-    protected boolean equal(
-        EvalContext context,
-        Expression left,
-        Expression right) 
-    {
+protected boolean equal(EvalContext context, Expression left, Expression right) {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+    // If the computed value is an evaluation context, unwrap it.
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
-
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
+    // If the value is a Collection (i.e. a node‐set),
+    // turn it into an iterator. (A single–node Collection is left as its sole value.)
     if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+        Collection<?> coll = (Collection<?>) l;
+        if (coll.size() == 1) {
+            l = coll.iterator().next();
+        } else {
+            l = coll.iterator();
+        }
     }
-
     if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+        Collection<?> coll = (Collection<?>) r;
+        if (coll.size() == 1) {
+            r = coll.iterator().next();
+        } else {
+            r = coll.iterator();
+        }
+    }
+
+    /*
+     * When comparing a node‐set (which is represented as an Iterator)
+     * with a scalar (String, Boolean, etc.), XPath requires that the comparison
+     * be made between the “atomized” (that is, string‐valued) objects.
+     * The bug was that node–set elements (usually NodePointer objects) were
+     * not being converted to their (typically string) values before comparison.
+     * 
+     * Here we “wrap” any Iterator so that each time its next()
+     * is called, we return the node’s underlying value.
+     *
+     * (In cases where the value is not a NodePointer the value is returned as–is.)
+     */
+    // Local helper: wrap iterators so that each element is atomized.
+    class AtomizingIterator implements Iterator {
+        private final Iterator<?> it;
+        AtomizingIterator(Iterator<?> it) {
+            this.it = it;
+        }
+        public boolean hasNext() {
+            return it.hasNext();
+        }
+        public Object next() {
+            Object o = it.next();
+            return (o instanceof NodePointer)
+                ? ((NodePointer) o).getValue()
+                : o;
+        }
+        public void remove() {
+            throw new UnsupportedOperationException();
+        }
+    }
+
+    // If our value is not an iterator, “atomize” it directly.
+    // (For example, if it is a NodePointer, use its underlying value.)
+    if (!(l instanceof Iterator)) {
+        l = (l instanceof NodePointer) ? ((NodePointer) l).getValue() : l;
+    }
+    if (!(r instanceof Iterator)) {
+        r = (r instanceof NodePointer) ? ((NodePointer) r).getValue() : r;
+    }
+
+    // For iterators, wrap them in an AtomizingIterator before comparing.
+    if (l instanceof Iterator) {
+        l = new AtomizingIterator((Iterator<?>) l);
+    }
+    if (r instanceof Iterator) {
+        r = new AtomizingIterator((Iterator<?>) r);
     }
 
+    // Now do the equality comparisons as required by XPath:
+    // If one operand is an iterator and the other isn’t, check whether
+    // the iterator contains an element equal to the scalar.
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        return contains((Iterator<?>) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        return contains((Iterator<?>) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+        return findMatch((Iterator<?>) l, (Iterator<?>) r);
     }
     return equal(l, r);
 }
\ No newline at end of file
