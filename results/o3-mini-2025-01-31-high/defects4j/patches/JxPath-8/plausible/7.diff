diff --git a/tmp/de255fc4-e132-4e29-a1d1-f67b8ba91335_buggy.java b/tmp/ea40b04c-c18d-4e05-85ac-21d231c5f1e6_fixed.java
index 98d89dc..0102ffd 100644
--- a/tmp/de255fc4-e132-4e29-a1d1-f67b8ba91335_buggy.java
+++ b/tmp/ea40b04c-c18d-4e05-85ac-21d231c5f1e6_fixed.java
@@ -1,23 +1,36 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
-        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+
+    // Handle NaN values:
+    // If either operand is NaN, then:
+    //   - if both are NaN, we simulate an equality (evaluateCompare(0))
+    //   - otherwise, any comparison (>, <, =) must return false.
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        if (Double.isNaN(ld) && Double.isNaN(rd)) {
+            return evaluateCompare(0);
+        }
+        return false;
+    }
+
+    int cmp = ld == rd ? 0 : (ld < rd ? -1 : 1);
+    return evaluateCompare(cmp);
 }
\ No newline at end of file
