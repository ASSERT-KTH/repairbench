diff --git a/tmp/5dc61b68-250e-4527-8485-15dda18c3e0c_buggy.java b/tmp/36f6cf04-e7af-4742-84fb-96718033e137_fixed.java
index 98d89dc..5bf41f6 100644
--- a/tmp/5dc61b68-250e-4527-8485-15dda18c3e0c_buggy.java
+++ b/tmp/36f6cf04-e7af-4742-84fb-96718033e137_fixed.java
@@ -1,23 +1,34 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
-        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // In XPath, if both numbers are NaN, they are considered equal.
+        // In any other case (only one NaN), comparisons (<, >, =) should yield false.
+        if (Double.isNaN(ld) && Double.isNaN(rd)) {
+            return evaluateCompare(0);
+        }
+        return false;
+    }
+
+    int cmp = (ld == rd ? 0 : ld < rd ? -1 : 1);
+    return evaluateCompare(cmp);
 }
\ No newline at end of file
