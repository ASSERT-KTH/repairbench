diff --git a/tmp/353f7a76-c40a-46be-a934-e09c364020a5_buggy.java b/tmp/8f687f51-060f-44fb-a612-b2e743dc4fdb_fixed.java
index 98d89dc..aa02d81 100644
--- a/tmp/353f7a76-c40a-46be-a934-e09c364020a5_buggy.java
+++ b/tmp/8f687f51-060f-44fb-a612-b2e743dc4fdb_fixed.java
@@ -1,23 +1,32 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // Special handling for NaN: if either number is NaN then
+    // - if both are NaN, treat them as equal (i.e. comparison result 0)
+    // - otherwise, any comparison returns false.
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        return (Double.isNaN(ld) && Double.isNaN(rd)) ? evaluateCompare(0) : false;
+    }
+    
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
