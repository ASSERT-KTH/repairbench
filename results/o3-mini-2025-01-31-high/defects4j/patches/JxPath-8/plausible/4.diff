diff --git a/tmp/8f7b207d-7fad-4e3b-aa20-8f452ebb9081_buggy.java b/tmp/29bce609-9f6c-4b1c-aba9-3aea47f9b26e_fixed.java
index 98d89dc..99e81bd 100644
--- a/tmp/8f7b207d-7fad-4e3b-aa20-8f452ebb9081_buggy.java
+++ b/tmp/29bce609-9f6c-4b1c-aba9-3aea47f9b26e_fixed.java
@@ -1,23 +1,30 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // If either operand is NaN then:
+    // - if both are NaN, treat them as equal (pass 0 to evaluateCompare)
+    // - if only one is NaN, then the comparison should always be false.
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        return (Double.isNaN(ld) && Double.isNaN(rd)) ? evaluateCompare(0) : false;
+    }
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
