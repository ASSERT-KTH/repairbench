diff --git a/tmp/177c6c7a-ca4c-4fa3-9700-87ebbd75ab98_buggy.java b/tmp/65e27664-b463-4dd5-ba64-4742c2c7e643_fixed.java
index 98d89dc..7f97042 100644
--- a/tmp/177c6c7a-ca4c-4fa3-9700-87ebbd75ab98_buggy.java
+++ b/tmp/65e27664-b463-4dd5-ba64-4742c2c7e643_fixed.java
@@ -1,23 +1,32 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // Handle NaN according to XPath semantics:
+    // If either operand is NaN then:
+    //   - if both are NaN, treat them as equal (for "=" operator, true; for others, false)
+    //   - if only one is NaN, the comparison always yields false.
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        return Double.isNaN(ld) && Double.isNaN(rd) ? evaluateCompare(0) : false;
+    }
+    
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
