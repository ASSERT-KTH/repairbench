diff --git a/tmp/08ad36a1-320a-481a-83ac-59a6ce4eaf8b_buggy.java b/tmp/457a6e72-1d67-442d-9093-684c82895bf2_fixed.java
index 98d89dc..3e0052a 100644
--- a/tmp/08ad36a1-320a-481a-83ac-59a6ce4eaf8b_buggy.java
+++ b/tmp/457a6e72-1d67-442d-9093-684c82895bf2_fixed.java
@@ -1,23 +1,35 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+    
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
-        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+    
+    // Handle NaN cases as specified: if one is NaN (but not both) the result is false;
+    // if both are NaN, treat them as equal (cmp==0) so that equality comparisons succeed.
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        if (Double.isNaN(ld) && Double.isNaN(rd)) {
+            return evaluateCompare(0);
+        }
+        return false;
+    }
+    
+    int cmp = ld == rd ? 0 : ld < rd ? -1 : 1;
+    return evaluateCompare(cmp);
 }
\ No newline at end of file
