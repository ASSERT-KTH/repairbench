diff --git a/tmp/4ede6c9d-6bbe-4f38-87e9-1ec6d47062bb_buggy.java b/tmp/3d68a7c9-db5c-4937-b566-3508d14cd52f_fixed.java
index 98d89dc..91ebfff 100644
--- a/tmp/4ede6c9d-6bbe-4f38-87e9-1ec6d47062bb_buggy.java
+++ b/tmp/3d68a7c9-db5c-4937-b566-3508d14cd52f_fixed.java
@@ -1,23 +1,34 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // Handle NaN comparisons specially.
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // If both are NaN, we treat them as equal.
+        if (Double.isNaN(ld) && Double.isNaN(rd)) {
+            return evaluateCompare(0);
+        }
+        // If only one side is NaN, no ordering comparison should be true.
+        return false;
+    }
+
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
