diff --git a/tmp/42182846-2cf1-4255-9fc6-de45b3027c7e_buggy.java b/tmp/87c50073-83b5-4399-8d3e-2ad1d11cc7db_fixed.java
index b6b11b6..d96070d 100644
--- a/tmp/42182846-2cf1-4255-9fc6-de45b3027c7e_buggy.java
+++ b/tmp/87c50073-83b5-4399-8d3e-2ad1d11cc7db_fixed.java
@@ -1,38 +1,40 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+    int len = pattern.length();
+    char[] chars = pattern.toCharArray();
+
+    // The character at the current position must be the opening quote.
+    if (pos.getIndex() >= len || chars[pos.getIndex()] != QUOTE) {
+        throw new IllegalArgumentException("Quoted string must start with a quote at position " + pos.getIndex());
     }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+    // Skip the opening quote.
+    pos.setIndex(pos.getIndex() + 1);
+    int lastHold = pos.getIndex();
+
+    while (pos.getIndex() < len) {
+        // If escaping is on and the upcoming text matches the escape sequence (i.e. two quotes),
+        // append a literal quote and skip the escape.
+        if (escapingOn 
+                && pos.getIndex() + ESCAPED_QUOTE.length() <= len
+                && pattern.substring(pos.getIndex(), pos.getIndex() + ESCAPED_QUOTE.length()).equals(ESCAPED_QUOTE)) {
+            if (appendTo != null) {
+                appendTo.append(chars, lastHold, pos.getIndex() - lastHold).append(QUOTE);
+            }
+            pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());
             lastHold = pos.getIndex();
             continue;
         }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+        // A single quote here terminates the quoted string.
+        if (chars[pos.getIndex()] == QUOTE) {
+            if (appendTo != null) {
+                appendTo.append(chars, lastHold, pos.getIndex() - lastHold);
             }
+            pos.setIndex(pos.getIndex() + 1); // skip the closing quote
+            return appendTo;
         }
-        throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+        // Otherwise, move to the next character.
+        pos.setIndex(pos.getIndex() + 1);
+    }
+    throw new IllegalArgumentException("Unterminated quoted string at position " + start);
 }
\ No newline at end of file
