diff --git a/tmp/b02985c9-a3ef-4b11-9b05-c7ec19507de0_buggy.java b/tmp/56853d38-d599-45dc-8a9d-8cf3f80b219b_fixed.java
index b6b11b6..0baa388 100644
--- a/tmp/b02985c9-a3ef-4b11-9b05-c7ec19507de0_buggy.java
+++ b/tmp/56853d38-d599-45dc-8a9d-8cf3f80b219b_fixed.java
@@ -1,38 +1,45 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+    char[] chars = pattern.toCharArray();
+    int length = pattern.length();
+
+    // The character at pos must be a quote.
+    if (chars[pos.getIndex()] != '\'') {
+        throw new IllegalArgumentException("Quoted string must start with a quote at position " + pos.getIndex());
     }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+
+    // Skip the opening quote.
+    pos.setIndex(pos.getIndex() + 1);
+    int lastHold = pos.getIndex();
+
+    while (pos.getIndex() < length) {
+        // If escaping is on and we have two consecutive quotes, that means an escaped quote.
+        if (escapingOn && pos.getIndex() < length - 1 
+                && chars[pos.getIndex()] == '\'' && chars[pos.getIndex() + 1] == '\'') {
+            if (appendTo != null) {
+                // Append the part before the doubled quote,
+                // then append a single quote literal.
+                appendTo.append(chars, lastHold, pos.getIndex() - lastHold);
+                appendTo.append('\'');
+            }
+            // Skip over both quotes.
+            pos.setIndex(pos.getIndex() + 2);
             lastHold = pos.getIndex();
             continue;
         }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+        // If we have a single quote, then this is the closing quote.
+        if (chars[pos.getIndex()] == '\'') {
+            if (appendTo != null) {
+                // Append the text between the opening quote and this closing quote.
+                appendTo.append(chars, lastHold, pos.getIndex() - lastHold);
             }
+            // Consume the closing quote.
+            pos.setIndex(pos.getIndex() + 1);
+            return appendTo;
         }
-        throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+        // Otherwise, simply advance one character.
+        pos.setIndex(pos.getIndex() + 1);
+    }
+    throw new IllegalArgumentException("Unterminated quoted string at position " + start);
 }
\ No newline at end of file
