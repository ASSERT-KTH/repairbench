diff --git a/tmp/d401c718-0fd7-45d4-8a3a-14a54ccb25fb_buggy.java b/tmp/1e650431-ac58-4c9f-8143-e9322ae73c57_fixed.java
index b6b11b6..19bb1bf 100644
--- a/tmp/d401c718-0fd7-45d4-8a3a-14a54ccb25fb_buggy.java
+++ b/tmp/1e650431-ac58-4c9f-8143-e9322ae73c57_fixed.java
@@ -1,38 +1,31 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+    int len = pattern.length();
+    // Skip the opening quote
+    pos.setIndex(start + 1);
+    while (pos.getIndex() < len) {
+        char ch = pattern.charAt(pos.getIndex());
+        if (ch == QUOTE) {
+            int next = pos.getIndex() + 1;
+            if (escapingOn && next < len && pattern.charAt(next) == QUOTE) {
+                // Escaped quote: append one quote and skip both quotes.
+                if (appendTo != null) {
+                    appendTo.append(QUOTE);
                 }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
+                pos.setIndex(next + 1);
                 continue;
+            } else {
+                // Closing quote found: skip it and return.
+                pos.setIndex(pos.getIndex() + 1);
+                return appendTo;
             }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+        } else {
+            if (appendTo != null) {
+                appendTo.append(ch);
             }
+            pos.setIndex(pos.getIndex() + 1);
         }
-        throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+    }
+    throw new IllegalArgumentException("Unterminated quoted string at position " + start);
 }
\ No newline at end of file
