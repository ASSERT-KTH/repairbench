diff --git a/tmp/7a39c488-8cce-4c4a-956f-72b6a68d514f_buggy.java b/tmp/3ecc3d83-9239-42f3-b150-e05b5aa986c9_fixed.java
index b6b11b6..9ea5f46 100644
--- a/tmp/7a39c488-8cce-4c4a-956f-72b6a68d514f_buggy.java
+++ b/tmp/3ecc3d83-9239-42f3-b150-e05b5aa986c9_fixed.java
@@ -1,38 +1,38 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
+    // If an escaped quote (two consecutive quotes) is at the start, consume it and return a single quote.
+    if (escapingOn && pattern.startsWith(ESCAPED_QUOTE, start)) {
+        pos.setIndex(start + ESCAPED_QUOTE.length());
         return appendTo == null ? null : appendTo.append(QUOTE);
     }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+    // Otherwise, the quote marks the beginning of a quoted literal.
+    // Skip the opening quote.
+    pos.setIndex(start + 1);
+    int lastHold = pos.getIndex();
+    while (pos.getIndex() < pattern.length()) {
+        // Handle an escaped quote inside the quoted string.
+        if (escapingOn && pattern.startsWith(ESCAPED_QUOTE, pos.getIndex())) {
+            if (appendTo != null) {
+                // Append what we have seen so far (up to but not including the escaped quote)
+                appendTo.append(pattern, lastHold, pos.getIndex());
+                appendTo.append(QUOTE);
+            }
+            pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());
             lastHold = pos.getIndex();
-                continue;
+        } else {
+            char ch = pattern.charAt(pos.getIndex());
+            if (ch == QUOTE) { // Found the closing quote.
+                pos.setIndex(pos.getIndex() + 1);
+                if (appendTo != null) {
+                    // Append the text between the opening and closing quotes.
+                    appendTo.append(pattern, lastHold, pos.getIndex() - 1);
                 }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+                return appendTo;
+            } else {
+                pos.setIndex(pos.getIndex() + 1);
             }
         }
-        throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+    }
+    throw new IllegalArgumentException("Unterminated quoted string at position " + start);
 }
\ No newline at end of file
