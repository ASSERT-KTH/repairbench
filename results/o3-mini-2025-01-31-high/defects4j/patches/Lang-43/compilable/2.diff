diff --git a/tmp/a3f8ab9a-c44e-47a2-b399-b8280817015c_buggy.java b/tmp/65760f2d-8c48-46e6-973a-ba9f0de510f3_fixed.java
index b6b11b6..10d8191 100644
--- a/tmp/a3f8ab9a-c44e-47a2-b399-b8280817015c_buggy.java
+++ b/tmp/65760f2d-8c48-46e6-973a-ba9f0de510f3_fixed.java
@@ -1,38 +1,41 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+    int len = pattern.length();
+    if (start >= len || pattern.charAt(start) != '\'') {
+        throw new IllegalArgumentException(
+                "Quoted string must start with a quote at position " + start);
     }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+    // If two quotes appear in a row, treat that as an escaped quote.
+    if (escapingOn && start + 1 < len && pattern.charAt(start + 1) == '\'') {
+        pos.setIndex(start + 2);
+        return appendTo == null ? null : appendTo.append('\'');
+    }
+    // Otherwise, it is a quoted literal: skip the opening quote.
+    pos.setIndex(start + 1);
+    int lastHold = pos.getIndex();
+    while (pos.getIndex() < len) {
+        int cur = pos.getIndex();
+        // If we see an escaped quote within the quoted literal, output one quote.
+        if (escapingOn && cur + 1 < len && pattern.charAt(cur) == '\'' 
+                && pattern.charAt(cur + 1) == '\'') {
+            if (appendTo != null) {
+                appendTo.append(pattern, lastHold, cur);
+                appendTo.append('\'');
+            }
+            pos.setIndex(cur + 2);
             lastHold = pos.getIndex();
             continue;
         }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+        char ch = pattern.charAt(cur);
+        pos.setIndex(cur + 1);
+        if (ch == '\'') { // found closing quote
+            if (appendTo != null) {
+                appendTo.append(pattern, lastHold, cur);
+            }
+            return appendTo;
         }
     }
     throw new IllegalArgumentException(
             "Unterminated quoted string at position " + start);
 }
\ No newline at end of file
