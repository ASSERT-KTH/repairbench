diff --git a/tmp/29963f22-7532-45c5-bbd7-e56c8a8d06dc_buggy.java b/tmp/018c8ec4-b836-41a2-add4-26a775d51675_fixed.java
index b6b11b6..2f57fe5 100644
--- a/tmp/29963f22-7532-45c5-bbd7-e56c8a8d06dc_buggy.java
+++ b/tmp/018c8ec4-b836-41a2-add4-26a775d51675_fixed.java
@@ -1,38 +1,42 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
+    char[] chars = pattern.toCharArray();
+    if (start >= pattern.length() || chars[start] != QUOTE) {
+        throw new IllegalArgumentException("Quoted string must start with a quote at position " + start);
+    }
+    // If the opening two characters are quotes, that means an escaped quote.
+    if (escapingOn && start + 1 < pattern.length() && chars[start] == QUOTE && chars[start + 1] == QUOTE) {
+        pos.setIndex(start + 2);
         return appendTo == null ? null : appendTo.append(QUOTE);
     }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
+    // Consume the opening quote.
+    pos.setIndex(start + 1);
+    int index = pos.getIndex();
+    int literalStart = index;
+    
+    while (index < pattern.length()) {
+        // If we see an escaped quote sequence (two single quotes), output one literal quote.
+        if (escapingOn && pattern.startsWith(ESCAPED_QUOTE, index)) {
+            if (appendTo != null) {
+                appendTo.append(chars, literalStart, index - literalStart);
+                appendTo.append(QUOTE);
+            }
+            index += ESCAPED_QUOTE.length();
+            pos.setIndex(index);
+            literalStart = index;
             continue;
         }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+        // A single quote ends the quoted string.
+        if (chars[index] == QUOTE) {
+            if (appendTo != null) {
+                appendTo.append(chars, literalStart, index - literalStart);
             }
+            pos.setIndex(index + 1);
+            return appendTo;
         }
-        throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+        index++;
+        pos.setIndex(index);
+    }
+    throw new IllegalArgumentException("Unterminated quoted string at position " + start);
 }
\ No newline at end of file
