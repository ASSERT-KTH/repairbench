diff --git a/tmp/85703f87-08ff-4f07-bc30-cadb00769658_buggy.java b/tmp/c5ca0925-c74f-42cc-8719-e925d9580169_fixed.java
index b6b11b6..cfd9224 100644
--- a/tmp/85703f87-08ff-4f07-bc30-cadb00769658_buggy.java
+++ b/tmp/c5ca0925-c74f-42cc-8719-e925d9580169_fixed.java
@@ -1,38 +1,46 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
+    int len = pattern.length();
+
+    // If we are in escaping mode and the next two characters are a pair of quotes,
+    // interpret this as a literal quote and return it.
+    if (escapingOn && pos.getIndex() + 1 < len 
+            && pattern.charAt(pos.getIndex()) == QUOTE 
+            && pattern.charAt(pos.getIndex() + 1) == QUOTE) {
+        pos.setIndex(pos.getIndex() + 2);
         return appendTo == null ? null : appendTo.append(QUOTE);
     }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+
+    // Otherwise, treat the current quote as the start of a quoted string.
+    // Skip the opening quote.
+    pos.setIndex(pos.getIndex() + 1);
+    int lastHold = pos.getIndex();
+
+    while (pos.getIndex() < len) {
+        // Look for an escaped quote sequence inside the quoted string.
+        if (escapingOn && pos.getIndex() + 1 < len 
+                && pattern.charAt(pos.getIndex()) == QUOTE 
+                && pattern.charAt(pos.getIndex() + 1) == QUOTE) {
+            if (appendTo != null) {
+                appendTo.append(pattern, lastHold, pos.getIndex()).append(QUOTE);
+            }
+            pos.setIndex(pos.getIndex() + 2);
             lastHold = pos.getIndex();
             continue;
         }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+        // If we hit a single quote, that terminates the quoted string.
+        if (pattern.charAt(pos.getIndex()) == QUOTE) {
+            if (appendTo != null) {
+                appendTo.append(pattern, lastHold, pos.getIndex());
             }
+            pos.setIndex(pos.getIndex() + 1); // consume the closing quote
+            return appendTo;
         }
+        // Otherwise, move on to the next character.
+        pos.setIndex(pos.getIndex() + 1);
+    }
+    
     throw new IllegalArgumentException(
             "Unterminated quoted string at position " + start);
 }
\ No newline at end of file
