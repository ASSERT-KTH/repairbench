diff --git a/tmp/e754aba7-5eca-49d1-b152-cb40112983af_buggy.java b/tmp/1f26dda4-3f88-43df-a430-5d83b9b851e6_fixed.java
index d64eec3..5b7f378 100644
--- a/tmp/e754aba7-5eca-49d1-b152-cb40112983af_buggy.java
+++ b/tmp/1f26dda4-3f88-43df-a430-5d83b9b851e6_fixed.java
@@ -1,122 +1,91 @@
-    /**
-     * Draws the axis label.
-     *
-     * @param label  the label text.
-     * @param g2  the graphics device.
-     * @param plotArea  the plot area.
-     * @param dataArea  the area inside the axes.
-     * @param edge  the location of the axis.
-     * @param state  the axis state (<code>null</code> not permitted).
-     * @param plotState  the plot state (<code>null</code> permitted).
-     *
-     * @return Information about the axis.
-     */
-    protected AxisState drawLabel(String label, Graphics2D g2, 
-            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, 
-            AxisState state, PlotRenderingInfo plotState) {
+protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea,
+        Rectangle2D dataArea, RectangleEdge edge, AxisState state,
+        PlotRenderingInfo plotState) {
 
-        // it is unlikely that 'state' will be null, but check anyway...
     if (state == null) {
         throw new IllegalArgumentException("Null 'state' argument.");
     }
-        
-        if ((label == null) || (label.equals(""))) {
+    if (label == null || label.equals("")) {
         return state;
     }
 
     Font font = getLabelFont();
     RectangleInsets insets = getLabelInsets();
     g2.setFont(font);
     g2.setPaint(getLabelPaint());
     FontMetrics fm = g2.getFontMetrics();
-        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);
+    // Get the unrotated text bounds.
+    Rectangle2D textBounds = TextUtilities.getTextBounds(label, g2, fm);
+    double w0 = textBounds.getWidth();
+    double h0 = textBounds.getHeight();
+
     Shape hotspot = null;
+    double rotatedW, rotatedH;
+    double angle = 0.0;
+    double labelX = 0.0;
+    double labelY = 0.0;
 
+    // For a text drawn with anchor CENTER, if no rotation is applied, its
+    // drawn bounds would be a rectangle of width w0 and height h0 centered at
+    // the given (labelX, labelY). When rotated about that center by an angle,
+    // the new bounding box dimensions become:
+    //   rotatedW = |w0 * cos(angle)| + |h0 * sin(angle)|
+    //   rotatedH = |w0 * sin(angle)| + |h0 * cos(angle)|
     if (edge == RectangleEdge.TOP) {
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle(), labelBounds.getCenterX(), 
-                    labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) dataArea.getCenterX();
-            float labely = (float) (state.getCursor() - insets.getBottom() 
-                    - h / 2.0);
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
-            state.cursorUp(insets.getTop() + labelBounds.getHeight() 
-                    + insets.getBottom());
+        angle = getLabelAngle();
+        rotatedW = Math.abs(w0 * Math.cos(angle)) + Math.abs(h0 * Math.sin(angle));
+        rotatedH = Math.abs(w0 * Math.sin(angle)) + Math.abs(h0 * Math.cos(angle));
+        labelX = dataArea.getCenterX();
+        labelY = state.getCursor() - insets.getBottom() - rotatedH / 2.0;
+        TextUtilities.drawRotatedString(label, g2, (float) labelX, (float) labelY,
+                TextAnchor.CENTER, angle, TextAnchor.CENTER);
+        hotspot = new Rectangle2D.Double(labelX - rotatedW / 2.0,
+                labelY - rotatedH / 2.0, rotatedW, rotatedH);
+        state.cursorUp(insets.getTop() + rotatedH + insets.getBottom());
+    } else if (edge == RectangleEdge.BOTTOM) {
+        angle = getLabelAngle();
+        rotatedW = Math.abs(w0 * Math.cos(angle)) + Math.abs(h0 * Math.sin(angle));
+        rotatedH = Math.abs(w0 * Math.sin(angle)) + Math.abs(h0 * Math.cos(angle));
+        labelX = dataArea.getCenterX();
+        labelY = state.getCursor() + insets.getTop() + rotatedH / 2.0;
+        TextUtilities.drawRotatedString(label, g2, (float) labelX, (float) labelY,
+                TextAnchor.CENTER, angle, TextAnchor.CENTER);
+        hotspot = new Rectangle2D.Double(labelX - rotatedW / 2.0,
+                labelY - rotatedH / 2.0, rotatedW, rotatedH);
+        state.cursorDown(insets.getTop() + rotatedH + insets.getBottom());
+    } else if (edge == RectangleEdge.LEFT) {
+        angle = getLabelAngle() - Math.PI / 2.0;
+        rotatedW = Math.abs(w0 * Math.cos(angle)) + Math.abs(h0 * Math.sin(angle));
+        rotatedH = Math.abs(w0 * Math.sin(angle)) + Math.abs(h0 * Math.cos(angle));
+        labelX = state.getCursor() - insets.getRight() - rotatedW / 2.0;
+        labelY = dataArea.getCenterY();
+        TextUtilities.drawRotatedString(label, g2, (float) labelX, (float) labelY,
+                TextAnchor.CENTER, angle, TextAnchor.CENTER);
+        hotspot = new Rectangle2D.Double(labelX - rotatedW / 2.0,
+                labelY - rotatedH / 2.0, rotatedW, rotatedH);
+        state.cursorLeft(insets.getLeft() + rotatedW + insets.getRight());
+    } else if (edge == RectangleEdge.RIGHT) {
+        angle = getLabelAngle() + Math.PI / 2.0;
+        rotatedW = Math.abs(w0 * Math.cos(angle)) + Math.abs(h0 * Math.sin(angle));
+        rotatedH = Math.abs(w0 * Math.sin(angle)) + Math.abs(h0 * Math.cos(angle));
+        labelX = state.getCursor() + insets.getLeft() + rotatedW / 2.0;
+        labelY = dataArea.getCenterY();
+        TextUtilities.drawRotatedString(label, g2, (float) labelX, (float) labelY,
+                TextAnchor.CENTER, angle, TextAnchor.CENTER);
+        hotspot = new Rectangle2D.Double(labelX - rotatedW / 2.0,
+                labelY - rotatedH / 2.0, rotatedW, rotatedH);
+        state.cursorRight(insets.getLeft() + rotatedW + insets.getRight());
     }
-        else if (edge == RectangleEdge.BOTTOM) {
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle(), labelBounds.getCenterX(), 
-                    labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) dataArea.getCenterX();
-            float labely = (float) (state.getCursor() + insets.getTop() 
-                    + h / 2.0);
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
-            state.cursorDown(insets.getTop() + labelBounds.getHeight() 
-                    + insets.getBottom());
-        }
-        else if (edge == RectangleEdge.LEFT) {
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), 
-                    labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) (state.getCursor() - insets.getRight() 
-                    - w / 2.0);
-            float labely = (float) dataArea.getCenterY();
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, 
-                    TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
-            state.cursorLeft(insets.getLeft() + labelBounds.getWidth() 
-                    + insets.getRight());
-        }
-        else if (edge == RectangleEdge.RIGHT) {
 
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle() + Math.PI / 2.0, 
-                    labelBounds.getCenterX(), labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) (state.getCursor() 
-                            + insets.getLeft() + w / 2.0);
-            float labely = (float) (dataArea.getY() + dataArea.getHeight() 
-                    / 2.0);
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, 
-                    TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
-            state.cursorRight(insets.getLeft() + labelBounds.getWidth() 
-                    + insets.getRight());
-
-        }
+    // Only add an axis label entity if there is a non-null owner.
     if (plotState != null && hotspot != null) {
         ChartRenderingInfo owner = plotState.getOwner();
+        if (owner != null) {
             EntityCollection entities = owner.getEntityCollection();
             if (entities != null) {
-                    entities.add(new AxisLabelEntity(this, hotspot, 
-                            this.labelToolTip, this.labelURL));
+                entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));
+            }
         }
     }
     return state;
-
 }
\ No newline at end of file
