diff --git a/tmp/4311861e-5447-421a-a49a-5faa9d5a3a4b_buggy.java b/tmp/0b0d9eaa-d08b-465b-950c-bf019b5cf8dc_fixed.java
index 08e51e4..8f2979e 100644
--- a/tmp/4311861e-5447-421a-a49a-5faa9d5a3a4b_buggy.java
+++ b/tmp/0b0d9eaa-d08b-465b-950c-bf019b5cf8dc_fixed.java
@@ -1,16 +1,25 @@
-    /**
-     * <p>Reduce the fraction to the smallest values for the numerator and
-     * denominator, returning the result.</p>
-     * 
-     * <p>For example, if this fraction represents 2/4, then the result
-     * will be 1/2.</p>
-     *
-     * @return a new reduced fraction instance, or this if no simplification possible
-     */
 public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
-        if (gcd == 1) {
+    // If numerator is 0, then the canonical value is 0/1, i.e. Fraction.ZERO.
+    if (numerator == 0) {
+        return Fraction.ZERO;
+    }
+
+    // Use the absolute values for both numerator and denominator to compute the GCD.
+    int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));
+    int num = numerator / gcd;
+    int den = denominator / gcd;
+
+    // Ensure the denominator is positive.
+    if (den < 0) {
+        num = -num;
+        den = -den;
+    }
+
+    // If the fraction is already in reduced canonical form, return this instance.
+    if (num == numerator && den == denominator) {
         return this;
     }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+    
+    // Otherwise, return a new fraction (which for 0/1 will be Fraction.ZERO as required).
+    return Fraction.getFraction(num, den);
 }
\ No newline at end of file
