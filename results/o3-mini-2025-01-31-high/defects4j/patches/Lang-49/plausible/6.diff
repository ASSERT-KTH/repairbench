diff --git a/tmp/9918495a-595e-44d1-a82e-dd654b5e82e2_buggy.java b/tmp/e3931bd9-c042-4272-98c9-3cea74a88f82_fixed.java
index 08e51e4..5f5fcb0 100644
--- a/tmp/9918495a-595e-44d1-a82e-dd654b5e82e2_buggy.java
+++ b/tmp/e3931bd9-c042-4272-98c9-3cea74a88f82_fixed.java
@@ -1,16 +1,26 @@
-    /**
-     * <p>Reduce the fraction to the smallest values for the numerator and
-     * denominator, returning the result.</p>
-     * 
-     * <p>For example, if this fraction represents 2/4, then the result
-     * will be 1/2.</p>
-     *
-     * @return a new reduced fraction instance, or this if no simplification possible
-     */
 public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
-        if (gcd == 1) {
+    // Special handling for a zero numerator.
+    // If the numerator is 0 and the denominator is already 1, return this.
+    // Otherwise, return the canonical ZERO instance.
+    if (numerator == 0) {
+        return denominator == 1 ? this : Fraction.ZERO;
+    }
+    
+    // Compute the greatest common divisor using absolute values.
+    int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));
+    int newNumerator = numerator / gcd;
+    int newDenominator = denominator / gcd;
+    
+    // Normalize the sign so that the denominator is positive.
+    if (newDenominator < 0) {
+        newNumerator = -newNumerator;
+        newDenominator = -newDenominator;
+    }
+    
+    // If no changes were made (already reduced and properly normalized), return this.
+    if (newNumerator == numerator && newDenominator == denominator) {
         return this;
     }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+    
+    return Fraction.getFraction(newNumerator, newDenominator);
 }
\ No newline at end of file
