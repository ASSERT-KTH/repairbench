diff --git a/tmp/44a22c43-04c4-43c0-a598-03e7da801543_buggy.java b/tmp/ad6e8c6a-ef54-47be-b50d-204b5ff19b8e_fixed.java
index 08e51e4..1c5eddd 100644
--- a/tmp/44a22c43-04c4-43c0-a598-03e7da801543_buggy.java
+++ b/tmp/ad6e8c6a-ef54-47be-b50d-204b5ff19b8e_fixed.java
@@ -1,16 +1,31 @@
-    /**
-     * <p>Reduce the fraction to the smallest values for the numerator and
-     * denominator, returning the result.</p>
-     * 
-     * <p>For example, if this fraction represents 2/4, then the result
-     * will be 1/2.</p>
-     *
-     * @return a new reduced fraction instance, or this if no simplification possible
-     */
 public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
-        if (gcd == 1) {
+    // If the numerator is zero, return Fraction.ZERO if the denominator isnâ€™t already 1.
+    if (numerator == 0) {
+        return (denominator == 1) ? this : Fraction.ZERO;
+    }
+    
+    // Start with the current numerator and denominator.
+    int num = numerator;
+    int den = denominator;
+    
+    // Normalize the fraction so that the denominator is always positive.
+    if (den < 0) {
+        num = -num;
+        den = -den;
+    }
+    
+    // Compute the greatest common divisor using absolute values.
+    int gcd = greatestCommonDivisor(Math.abs(num), den);
+    
+    // Reduce the numerator and denominator.
+    num /= gcd;
+    den /= gcd;
+    
+    // If the normalized values match the current ones, return this instance.
+    if (num == numerator && den == denominator) {
         return this;
     }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+    
+    // Otherwise, return a new Fraction instance with the reduced values.
+    return Fraction.getFraction(num, den);
 }
\ No newline at end of file
