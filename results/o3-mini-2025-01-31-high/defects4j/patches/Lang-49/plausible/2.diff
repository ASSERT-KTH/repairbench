diff --git a/tmp/2a0084f6-10b9-469b-a5d3-7a9cd9f31b5a_buggy.java b/tmp/93335f72-d2ca-4f41-8bcd-bd6a7a8ef842_fixed.java
index 08e51e4..dd0239e 100644
--- a/tmp/2a0084f6-10b9-469b-a5d3-7a9cd9f31b5a_buggy.java
+++ b/tmp/93335f72-d2ca-4f41-8bcd-bd6a7a8ef842_fixed.java
@@ -1,16 +1,21 @@
-    /**
-     * <p>Reduce the fraction to the smallest values for the numerator and
-     * denominator, returning the result.</p>
-     * 
-     * <p>For example, if this fraction represents 2/4, then the result
-     * will be 1/2.</p>
-     *
-     * @return a new reduced fraction instance, or this if no simplification possible
-     */
 public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
-        if (gcd == 1) {
+    // Special-case for a zero numerator: always return the canonical ZERO fraction,
+    // unless this is already the canonical instance.
+    if (numerator == 0) {
+        return (denominator == 1) ? this : Fraction.ZERO;
+    }
+    // Compute the greatest common divisor using the absolute values
+    int common = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));
+    int num = numerator / common;
+    int den = denominator / common;
+    // Ensure the denominator is positive; if it's negative, flip the signs.
+    if (den < 0) {
+        num = -num;
+        den = -den;
+    }
+    // If no changes were made, return this instance.
+    if (num == numerator && den == denominator) {
         return this;
     }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+    return Fraction.getFraction(num, den);
 }
\ No newline at end of file
