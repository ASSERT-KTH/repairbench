diff --git a/tmp/e632c517-a8fb-43dc-84c9-fe518bba9014_buggy.java b/tmp/b7f38f7b-a5e3-4602-843a-14de12c73c59_fixed.java
index 08e51e4..948ce5b 100644
--- a/tmp/e632c517-a8fb-43dc-84c9-fe518bba9014_buggy.java
+++ b/tmp/b7f38f7b-a5e3-4602-843a-14de12c73c59_fixed.java
@@ -1,16 +1,24 @@
-    /**
-     * <p>Reduce the fraction to the smallest values for the numerator and
-     * denominator, returning the result.</p>
-     * 
-     * <p>For example, if this fraction represents 2/4, then the result
-     * will be 1/2.</p>
-     *
-     * @return a new reduced fraction instance, or this if no simplification possible
-     */
 public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
+    if (numerator == 0) {
+        // If the numerator is zero, then the fraction is 0/1 in canonical form.
+        // Return 'this' if itâ€™s already 0/1; otherwise, return the canonical ZERO.
+        return (denominator == 1) ? this : Fraction.ZERO;
+    }
+    // Compute the greatest common divisor using absolute values.
+    int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));
+    // If already in lowest terms, fix the sign if necessary.
     if (gcd == 1) {
+        if (denominator < 0) {
+            return Fraction.getFraction(-numerator, -denominator);
+        }
         return this;
     }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+    int newNumerator = numerator / gcd;
+    int newDenom = denominator / gcd;
+    // Ensure the denominator is positive.
+    if (newDenom < 0) {
+        newNumerator = -newNumerator;
+        newDenom = -newDenom;
+    }
+    return Fraction.getFraction(newNumerator, newDenom);
 }
\ No newline at end of file
