diff --git a/tmp/0c751993-e54b-42e4-93c7-1ab7af66e050_buggy.java b/tmp/81d82f19-41ec-4ed5-adac-06b0938493bc_fixed.java
index 08e51e4..7e21222 100644
--- a/tmp/0c751993-e54b-42e4-93c7-1ab7af66e050_buggy.java
+++ b/tmp/81d82f19-41ec-4ed5-adac-06b0938493bc_fixed.java
@@ -1,16 +1,21 @@
-    /**
-     * <p>Reduce the fraction to the smallest values for the numerator and
-     * denominator, returning the result.</p>
-     * 
-     * <p>For example, if this fraction represents 2/4, then the result
-     * will be 1/2.</p>
-     *
-     * @return a new reduced fraction instance, or this if no simplification possible
-     */
 public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
-        if (gcd == 1) {
+    // Special case: if numerator is 0, then the canonical fraction is 0/1.
+    if (numerator == 0) {
+        return (denominator == 1) ? this : Fraction.ZERO;
+    }
+    // Compute the gcd on the absolute values.
+    int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));
+    // Divide numerator and denominator by the gcd.
+    int newNumerator = numerator / gcd;
+    int newDenom = denominator / gcd;
+    // Ensure the denominator is positive.
+    if (newDenom < 0) {
+        newNumerator = -newNumerator;
+        newDenom = -newDenom;
+    }
+    // If nothing has changed, return this; otherwise, return a new fraction.
+    if (newNumerator == numerator && newDenom == denominator) {
         return this;
     }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+    return Fraction.getFraction(newNumerator, newDenom);
 }
\ No newline at end of file
