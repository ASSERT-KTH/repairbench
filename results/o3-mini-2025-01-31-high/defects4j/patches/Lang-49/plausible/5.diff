diff --git a/tmp/108fcf79-1226-4371-9e13-2f052b74b183_buggy.java b/tmp/7cdf1426-8c20-4aac-9242-6f1ef9feb801_fixed.java
index 08e51e4..5ae15ac 100644
--- a/tmp/108fcf79-1226-4371-9e13-2f052b74b183_buggy.java
+++ b/tmp/7cdf1426-8c20-4aac-9242-6f1ef9feb801_fixed.java
@@ -1,16 +1,23 @@
-    /**
-     * <p>Reduce the fraction to the smallest values for the numerator and
-     * denominator, returning the result.</p>
-     * 
-     * <p>For example, if this fraction represents 2/4, then the result
-     * will be 1/2.</p>
-     *
-     * @return a new reduced fraction instance, or this if no simplification possible
-     */
 public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
-        if (gcd == 1) {
+    // Handle zero specially: if numerator is 0, then the canonical value is 0/1.
+    if (numerator == 0) {
+        return (denominator == 1) ? this : Fraction.ZERO;
+    }
+
+    // Use the absolute value for both numerator and denominator.
+    int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));
+    int newNumerator = numerator / gcd;
+    int newDenominator = denominator / gcd;
+
+    // Ensure the denominator is positive.
+    if (newDenominator < 0) {
+        newNumerator = -newNumerator;
+        newDenominator = -newDenominator;
+    }
+
+    // If nothing changed, return this.
+    if (newNumerator == numerator && newDenominator == denominator) {
         return this;
     }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+    return Fraction.getFraction(newNumerator, newDenominator);
 }
\ No newline at end of file
