diff --git a/tmp/b6c70eb4-364a-44ee-89f5-e15b620a7821_buggy.java b/tmp/36bdbcf0-0065-4ff1-a81c-f921e12acd74_fixed.java
index 08e51e4..272d866 100644
--- a/tmp/b6c70eb4-364a-44ee-89f5-e15b620a7821_buggy.java
+++ b/tmp/36bdbcf0-0065-4ff1-a81c-f921e12acd74_fixed.java
@@ -1,16 +1,28 @@
-    /**
-     * <p>Reduce the fraction to the smallest values for the numerator and
-     * denominator, returning the result.</p>
-     * 
-     * <p>For example, if this fraction represents 2/4, then the result
-     * will be 1/2.</p>
-     *
-     * @return a new reduced fraction instance, or this if no simplification possible
-     */
 public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
+    // Handle the special case of zero.
+    if (numerator == 0) {
+        return (denominator == 1) ? this : Fraction.ZERO;
+    }
+    
+    // Normalize the sign so that the denominator is positive.
+    int normNumerator = numerator;
+    int normDenom = denominator;
+    if (normDenom < 0) {
+        normNumerator = -normNumerator;
+        normDenom = -normDenom;
+    }
+    
+    // Compute the greatest common divisor using positive values.
+    int gcd = greatestCommonDivisor(Math.abs(normNumerator), normDenom);
+    
+    // If already in lowest terms and properly normalized, return this instance.
     if (gcd == 1) {
+        if (normNumerator == numerator && normDenom == denominator) {
             return this;
+        } else {
+            return Fraction.getFraction(normNumerator, normDenom);
         }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+    }
+    
+    return Fraction.getFraction(normNumerator / gcd, normDenom / gcd);
 }
\ No newline at end of file
