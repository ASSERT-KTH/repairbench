diff --git a/tmp/3ae5ee85-fa75-4f20-b5a5-337c456a6823_buggy.java b/tmp/ec76c3be-2d9b-48c9-8436-3699bed34767_fixed.java
index 5f8ac1a..f7044c6 100644
--- a/tmp/3ae5ee85-fa75-4f20-b5a5-337c456a6823_buggy.java
+++ b/tmp/ec76c3be-2d9b-48c9-8436-3699bed34767_fixed.java
@@ -1,34 +1,33 @@
-    private int compareNodePointers(
-        NodePointer p1,
-        int depth1,
-        NodePointer p2,
-        int depth2) 
-    {
+private int compareNodePointers(NodePointer p1, int depth1, NodePointer p2, int depth2) {
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
     if (p1 == null && p2 == null) {
         return 0;
     }
-
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
-
+    // When we are at the root level (depth==1) and the two pointers are not equal,
+    // they must be from different trees. Instead of throwing an exception,
+    // we fall back to an arbitrary (but consistent) ordering.
     if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        int cmp = p1.toString().compareTo(p2.toString());
+        if (cmp == 0) {
+            // In the unlikely event that the string representations are equal,
+            // use the identity hash to guarantee a non-zero result.
+            return System.identityHashCode(p1) < System.identityHashCode(p2) ? -1 : 1;
+        }
+        return cmp;
     }
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
-
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
