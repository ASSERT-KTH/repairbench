diff --git a/tmp/6f3444f6-9ea7-42f4-8f78-bcb0a1e80a75_buggy.java b/tmp/82d1577f-32cf-4936-8464-47fda93b913c_fixed.java
index 5f8ac1a..455e9e7 100644
--- a/tmp/6f3444f6-9ea7-42f4-8f78-bcb0a1e80a75_buggy.java
+++ b/tmp/82d1577f-32cf-4936-8464-47fda93b913c_fixed.java
@@ -1,34 +1,32 @@
-    private int compareNodePointers(
-        NodePointer p1,
-        int depth1,
-        NodePointer p2,
-        int depth2) 
-    {
+private int compareNodePointers(NodePointer p1, int depth1, NodePointer p2, int depth2) {
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
     if (p1 == null && p2 == null) {
         return 0;
     }
-
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
-
     if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        // Instead of throwing an exception when pointers come from different trees,
+        // we provide a fallback ordering based on their string representations.
+        if (p1 == null) {
+            return -1;
+        }
+        if (p2 == null) {
+            return 1;
+        }
+        return p1.toString().compareTo(p2.toString());
     }
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
-
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
