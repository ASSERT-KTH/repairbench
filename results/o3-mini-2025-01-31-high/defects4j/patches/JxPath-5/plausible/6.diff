diff --git a/tmp/93ff6895-5540-4687-91a5-fc81755fcd2a_buggy.java b/tmp/d744459f-6450-4205-8202-db0b305bbdbb_fixed.java
index 5f8ac1a..6a91215 100644
--- a/tmp/93ff6895-5540-4687-91a5-fc81755fcd2a_buggy.java
+++ b/tmp/d744459f-6450-4205-8202-db0b305bbdbb_fixed.java
@@ -1,34 +1,48 @@
-    private int compareNodePointers(
-        NodePointer p1,
-        int depth1,
-        NodePointer p2,
-        int depth2) 
-    {
+private int compareNodePointers(NodePointer p1, int depth1, NodePointer p2, int depth2) {
+    // Handle null pointers consistently.
+    if (p1 == null && p2 == null) {
+        return 0;
+    }
+    if (p1 == null) {
+        return -1;
+    }
+    if (p2 == null) {
+        return 1;
+    }
+
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
     
-        if (p1 != null && p1.equals(p2)) {
+    // At equal depth, if the pointers are equal, return 0.
+    if (p1.equals(p2)) {
         return 0;
     }
     
+    // When we reach the root level (depth == 1) we no longer have a parent,
+    // so instead of throwing an exception for pointers from different trees,
+    // use a fallback ordering based on their string representations.
     if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        int cmp = p1.toString().compareTo(p2.toString());
+        if (cmp != 0) {
+            return cmp;
         }
+        // If the string representations compare equal (which is unusual),
+        // use the identity hash code to ensure a consistent total order.
+        return System.identityHashCode(p1) - System.identityHashCode(p2);
+    }
+    
+    // Compare the parents.
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
     
+    // Finally, compare the two pointers as children of their common parent.
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
