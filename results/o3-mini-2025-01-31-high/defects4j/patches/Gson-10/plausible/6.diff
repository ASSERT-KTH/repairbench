diff --git a/tmp/05561b65-e0c8-4fcc-bad0-f5cd6a75a606_buggy.java b/tmp/9b5b05a5-be62-4f46-8643-3dd4f05e94da_fixed.java
index 9d42346..63d8cab 100644
--- a/tmp/05561b65-e0c8-4fcc-bad0-f5cd6a75a606_buggy.java
+++ b/tmp/9b5b05a5-be62-4f46-8643-3dd4f05e94da_fixed.java
@@ -1,37 +1,44 @@
 private ReflectiveTypeAdapterFactory.BoundField createBoundField(
     final Gson context, final Field field, final String name,
     final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
   final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
-    // special casing primitives here saves ~5% on Android...
+  // Look for a JsonAdapter annotation on the field.
   JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
   TypeAdapter<?> mapped = null;
   if (annotation != null) {
     mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
   }
-    final boolean jsonAdapterPresent = mapped != null;
-    if (mapped == null) mapped = context.getAdapter(fieldType);
-
+  // If there is a JsonAdapter annotation and it produced a type adapter,
+  // we want to use that adapter as-is (without runtime-type wrapping).
+  final boolean skipRuntimeTypeWrapping = (annotation != null) && (mapped != null);
+  if (mapped == null) {
+    mapped = context.getAdapter(fieldType);
+  }
   final TypeAdapter<?> typeAdapter = mapped;
   return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
-      @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
-      @Override void write(JsonWriter writer, Object value)
-          throws IOException, IllegalAccessException {
+    @SuppressWarnings({"unchecked", "rawtypes"})
+    @Override
+    void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException {
       Object fieldValue = field.get(value);
-        TypeAdapter t =
-          new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
-        t.write(writer, fieldValue);
+      // Only wrap with a runtime type adapter if no JsonAdapter annotation was used.
+      TypeAdapter chosenAdapter = skipRuntimeTypeWrapping
+          ? typeAdapter
+          : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+      chosenAdapter.write(writer, fieldValue);
     }
-      @Override void read(JsonReader reader, Object value)
-          throws IOException, IllegalAccessException {
+    @Override
+    void read(JsonReader reader, Object value) throws IOException, IllegalAccessException {
       Object fieldValue = typeAdapter.read(reader);
       if (fieldValue != null || !isPrimitive) {
         field.set(value, fieldValue);
       }
     }
-      @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
+    @Override
+    public boolean writeField(Object value) throws IOException, IllegalAccessException {
       if (!serialized) return false;
       Object fieldValue = field.get(value);
-        return fieldValue != value; // avoid recursion for example for Throwable.cause
+      // Avoid infinite recursion (e.g. Throwable.cause).
+      return fieldValue != value;
     }
   };
 }
\ No newline at end of file
