diff --git a/tmp/b2c71d0d-602e-46ff-b3fc-3982379c7912_buggy.java b/tmp/907c66e8-1af7-4fdc-a401-dfd1c72c1072_fixed.java
index 86553f4..af7d43a 100644
--- a/tmp/b2c71d0d-602e-46ff-b3fc-3982379c7912_buggy.java
+++ b/tmp/907c66e8-1af7-4fdc-a401-dfd1c72c1072_fixed.java
@@ -1,57 +1,83 @@
 /**
  * Since this pass reports errors only when a global {@code this} keyword
  * is encountered, there is no reason to traverse non global contexts.
  */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
   if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
+    // Don't traverse functions that are constructors, interfaces, or have the @this
     // or @override annotation.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc != null &&
         (jsDoc.isConstructor() ||
+         jsDoc.isInterface() ||
          jsDoc.hasThisType() ||
          jsDoc.isOverride())) {
       return false;
     }
 
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
+    // Don't traverse functions unless they would normally be able
+    // to have a @this annotation associated with them. e.g.,
     // var a = function() { }; // or
     // function a() {} // or
     // a.x = function() {};
     int pType = parent.getType();
     if (!(pType == Token.BLOCK ||
           pType == Token.SCRIPT ||
           pType == Token.NAME ||
           pType == Token.ASSIGN)) {
       return false;
     }
   }
 
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
-      Node rhs = lhs.getNext();
 
     if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
+      // Always traverse the left side of the assignment. To handle nested assignments
+      // properly (e.g., (a = this).property = c;), assignLhsChild should not be overridden.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+      // Only traverse the right side if it's not an assignment to a prototype property
+      // or subproperty.
+      //
+      // For a GETPROP node (non computed property access), check if the property chain
+      // involves "prototype".
+      if (lhs.getType() == Token.GETPROP) {
+        if ("prototype".equals(lhs.getLastChild().getString())) {
           return false;
         }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
+        String qname = lhs.getQualifiedName();
+        if (qname != null && qname.contains(".prototype.")) {
           return false;
         }
       }
+      // For a GETELEM node (computed property access), inspect its object part.
+      else if (lhs.getType() == Token.GETELEM) {
+        Node obj = lhs.getFirstChild();
+        if (obj != null) {
+          // If the object is a GETPROP, then check similarly.
+          if (obj.getType() == Token.GETPROP) {
+            if ("prototype".equals(obj.getLastChild().getString())) {
+              return false;
+            }
+            String qname = obj.getQualifiedName();
+            if (qname != null && (qname.contains(".prototype") || qname.endsWith("prototype"))) {
+              return false;
+            }
+          }
+          // Fallback: if the object has a qualified name that indicates it's a prototype,
+          // skip the right-hand side.
+          String qname = obj.getQualifiedName();
+          if (qname != null && (qname.contains(".prototype") || qname.endsWith("prototype"))) {
+            return false;
+          }
+        }
+      }
+    }
   }
 
   return true;
 }
\ No newline at end of file
