diff --git a/tmp/e688e232-43d5-4c5e-817d-e1a5e588ee75_buggy.java b/tmp/846ec2cb-80bb-42c7-8adf-71d5a3e6fd05_fixed.java
index 86553f4..cd81863 100644
--- a/tmp/e688e232-43d5-4c5e-817d-e1a5e588ee75_buggy.java
+++ b/tmp/846ec2cb-80bb-42c7-8adf-71d5a3e6fd05_fixed.java
@@ -1,57 +1,66 @@
-  /**
-   * Since this pass reports errors only when a global {@code this} keyword
-   * is encountered, there is no reason to traverse non global contexts.
-   */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
   if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
+    // Do not traverse functions that are constructors, have an explicit
+    // @this type, are marked @override, or are declared as an interface.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc != null &&
         (jsDoc.isConstructor() ||
          jsDoc.hasThisType() ||
-           jsDoc.isOverride())) {
+         jsDoc.isOverride() ||
+         jsDoc.isInterface())) {
       return false;
     }
 
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {};
+    // Only traverse functions if they normally can have a @this annotation.
     int pType = parent.getType();
     if (!(pType == Token.BLOCK ||
           pType == Token.SCRIPT ||
           pType == Token.NAME ||
           pType == Token.ASSIGN)) {
       return false;
     }
   }
 
+  // When we see an assignment, only traverse the right-hand side if this
+  // is not an assignment to a prototype property.
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
-      Node rhs = lhs.getNext();
     
     if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
+      // Always traverse the left side.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+      // For assignments like a.prototype.foo = ... or a["prototype"].foo = ...,
+      // do not traverse the right side.
+      if (lhs.getType() == Token.GETPROP) {
+        // e.g. a.prototype.foo = ... (the last child is "foo").
+        // If the full qualified name contains ".prototype.", it is a method.
+        if ("prototype".equals(lhs.getLastChild().getString())) {
           return false;
         }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
+        if (lhs.getQualifiedName() != null &&
+            lhs.getQualifiedName().contains(".prototype.")) {
           return false;
         }
       }
+      if (lhs.getType() == Token.GETELEM) {
+        // e.g. a.prototype['x' + 'y'] = ...
+        Node target = lhs.getFirstChild();
+        if (target != null) {
+          if (target.getType() == Token.GETPROP &&
+              "prototype".equals(target.getLastChild().getString())) {
+            return false;
+          }
+          if (target.getQualifiedName() != null &&
+              target.getQualifiedName().contains(".prototype")) {
+            return false;
+          }
+        }
+      }
+    }
   }
 
   return true;
 }
\ No newline at end of file
