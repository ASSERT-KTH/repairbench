diff --git a/tmp/fa7e9c63-203b-4770-8624-6cc24ab93192_buggy.java b/tmp/1f586b99-c139-452e-a462-8058e798ca61_fixed.java
index 86553f4..ecd8998 100644
--- a/tmp/fa7e9c63-203b-4770-8624-6cc24ab93192_buggy.java
+++ b/tmp/1f586b99-c139-452e-a462-8058e798ca61_fixed.java
@@ -1,57 +1,63 @@
-  /**
-   * Since this pass reports errors only when a global {@code this} keyword
-   * is encountered, there is no reason to traverse non global contexts.
-   */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
   if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
+    // Don't traverse functions that are constructors, have the @this or @override
+    // annotation, or are annotated as an interface.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc != null &&
         (jsDoc.isConstructor() ||
          jsDoc.hasThisType() ||
-           jsDoc.isOverride())) {
+         jsDoc.isOverride() ||
+         jsDoc.isInterface())) {
       return false;
     }
 
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
+    // Don't traverse functions unless they would normally be able to have a
+    // @this annotation associated with them. e.g.,
+    // var a = function() { };
+    // function a() {}
     // a.x = function() {};
     int pType = parent.getType();
     if (!(pType == Token.BLOCK ||
           pType == Token.SCRIPT ||
           pType == Token.NAME ||
           pType == Token.ASSIGN)) {
       return false;
     }
   }
 
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
     Node rhs = lhs.getNext();
       
     if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
+      // Always traverse the left side of the assignment. To handle nested
+      // assignments properly (e.g., (a = this).property = c;), assignLhsChild
+      // should not be overridden.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
       // Only traverse the right side if it's not an assignment to a prototype
       // property or subproperty.
       if (lhs.getType() == Token.GETPROP &&
           lhs.getLastChild().getString().equals("prototype")) {
         return false;
       }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
+      if (lhs.getQualifiedName() != null &&
+          lhs.getQualifiedName().contains(".prototype.")) {
         return false;
       }
+      // Also check for computed property accesses like a.prototype['xy']
+      if (lhs.getType() == Token.GETELEM) {
+        Node obj = lhs.getFirstChild();
+        if (obj != null &&
+            obj.getType() == Token.GETPROP &&
+            obj.getLastChild().getString().equals("prototype")) {
+          return false;
+        }
+      }
     }
   }
 
   return true;
 }
\ No newline at end of file
