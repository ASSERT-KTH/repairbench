diff --git a/tmp/482818bf-f00f-4c27-a6b0-68da16e02349_buggy.java b/tmp/a1da963a-44f8-419c-a8a0-1983057cdbea_fixed.java
index 602226b..d0fb94a 100644
--- a/tmp/482818bf-f00f-4c27-a6b0-68da16e02349_buggy.java
+++ b/tmp/a1da963a-44f8-419c-a8a0-1983057cdbea_fixed.java
@@ -1,26 +1,17 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+    // A valid alias must be declared in a var statement and be initialized
+    // with a qualified name.
+    if (n.getParent().isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {
       String name = n.getString();
       Var aliasVar = scope.getVar(name);
       aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+      String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
       transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
     } else {
-          // TODO(robbyw): Support using locals for private variables.
       report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
-    }
