diff --git a/tmp/85548ab8-fb24-4f7f-bd60-e916902d1051_buggy.java b/tmp/6256c1d7-a363-4332-b327-29e0d0b9a8c1_fixed.java
index 602226b..19e962b 100644
--- a/tmp/85548ab8-fb24-4f7f-bd60-e916902d1051_buggy.java
+++ b/tmp/6256c1d7-a363-4332-b327-29e0d0b9a8c1_fixed.java
@@ -1,26 +1,17 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+    // A valid alias must be a var declaration with an initializer that is a simple qualified name.
+    if (n.hasChildren() && n.getFirstChild().isQualifiedName() && n.getParent().isVar()) {
       String name = n.getString();
       Var aliasVar = scope.getVar(name);
       aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+      String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
       transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+      // Bleeding functions and scope-parameter locals already get a BAD_PARAMETERS error.
     } else {
-          // TODO(robbyw): Support using locals for private variables.
       report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
-    }
