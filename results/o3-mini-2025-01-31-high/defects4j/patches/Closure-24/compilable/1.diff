diff --git a/tmp/370d77d2-9ca6-45ca-8f06-ea0bb8c11208_buggy.java b/tmp/01e960b2-e1c5-4768-b102-8fd5b1af21b7_fixed.java
index 602226b..6f51c0e 100644
--- a/tmp/370d77d2-9ca6-45ca-8f06-ea0bb8c11208_buggy.java
+++ b/tmp/01e960b2-e1c5-4768-b102-8fd5b1af21b7_fixed.java
@@ -1,26 +1,22 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
-        int type = n.getType();
     Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+    // A valid alias declaration must:
+    // 1. Appear in a var statement.
+    // 2. Be the only declared variable in that statement.
+    // 3. Have an initializer that is a qualified name.
+    if (parent.isVar() && parent.getChildCount() == 1 &&
+        n.hasChildren() && n.getFirstChild().isQualifiedName()) {
       String name = n.getString();
       Var aliasVar = scope.getVar(name);
       aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+      String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
       transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
     } else {
-          // TODO(robbyw): Support using locals for private variables.
       report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
-    }
