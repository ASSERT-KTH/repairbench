diff --git a/tmp/b1a7c37d-aa01-4382-a16a-c53d152c05a5_buggy.java b/tmp/b0c3e015-b3fc-4d20-91e3-5b0043dccd41_fixed.java
index 602226b..d41b1e6 100644
--- a/tmp/b1a7c37d-aa01-4382-a16a-c53d152c05a5_buggy.java
+++ b/tmp/b0c3e015-b3fc-4d20-91e3-5b0043dccd41_fixed.java
@@ -1,26 +1,19 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
-        if (parent.isVar()) {
+    // If the initializer exists and is exactly a qualified name, then
+    // it is a valid alias. Otherwise, report a non‚Äêalias local error.
     if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
       String name = n.getString();
       Var aliasVar = scope.getVar(name);
       aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+      String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
       transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+      // Bleeding functions and scope parameters already get a BAD_PARAMETERS
+      // error so we need not report an additional error.
     } else {
-          // TODO(robbyw): Support using locals for private variables.
       report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
-    }
