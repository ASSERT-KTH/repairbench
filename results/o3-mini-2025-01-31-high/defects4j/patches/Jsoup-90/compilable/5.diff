diff --git a/tmp/a9a1a254-a940-4f0b-8444-8d0d746ae913_buggy.java b/tmp/270a7318-a810-4adb-8811-4e1038cc6287_fixed.java
index 373b1e8..5c788e8 100644
--- a/tmp/a9a1a254-a940-4f0b-8444-8d0d746ae913_buggy.java
+++ b/tmp/270a7318-a810-4adb-8811-4e1038cc6287_fixed.java
@@ -1,37 +1,47 @@
 private static boolean looksLikeUtf8(byte[] input) {
     int i = 0;
     // BOM:
-            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+    if (input.length >= 3
+            && (input[0] & 0xFF) == 0xEF
+            && (input[1] & 0xFF) == 0xBB
+            && (input[2] & 0xFF) == 0xBF) {
         i = 3;
     }
 
-            int end;
-            for (int j = input.length; i < j; ++i) {
-                int o = input[i];
+    int length = input.length;
+    while (i < length) {
+        int o = input[i] & 0xFF;
+        // ASCII
         if ((o & 0x80) == 0) {
-                    continue; // ASCII
+            i++;
+            continue;
         }
 
-                // UTF-8 leading:
+        int expected;
         if ((o & 0xE0) == 0xC0) {
-                    end = i + 1;
+            expected = 1;
         } else if ((o & 0xF0) == 0xE0) {
-                    end = i + 2;
+            expected = 2;
         } else if ((o & 0xF8) == 0xF0) {
-                    end = i + 3;
+            expected = 3;
         } else {
             return false;
         }
 
+        // Check if enough bytes remain for the expected continuation bytes:
+        if (i + expected >= length) {
+            return false;
+        }
 
-                while (i < end) {
+        // Validate each continuation byte:
+        for (int k = 0; k < expected; k++) {
             i++;
-                    o = input[i];
+            o = input[i] & 0xFF;
             if ((o & 0xC0) != 0x80) {
                 return false;
             }
         }
+        i++;
     }
     return true;
 }
\ No newline at end of file
