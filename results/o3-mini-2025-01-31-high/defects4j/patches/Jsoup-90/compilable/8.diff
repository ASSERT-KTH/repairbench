diff --git a/tmp/91d1805f-18dc-4072-9fad-9c8f26434761_buggy.java b/tmp/27b85443-7160-46e1-9e95-04a8e0a5de2f_fixed.java
index 373b1e8..80a8d08 100644
--- a/tmp/91d1805f-18dc-4072-9fad-9c8f26434761_buggy.java
+++ b/tmp/27b85443-7160-46e1-9e95-04a8e0a5de2f_fixed.java
@@ -1,37 +1,49 @@
 private static boolean looksLikeUtf8(byte[] input) {
     int i = 0;
-            // BOM:
-            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+    // Check for BOM:
+    if (input.length >= 3 
+            && (input[0] & 0xFF) == 0xEF 
+            && (input[1] & 0xFF) == 0xBB 
+            && (input[2] & 0xFF) == 0xBF) {
         i = 3;
     }
 
-            int end;
-            for (int j = input.length; i < j; ++i) {
-                int o = input[i];
+    int j = input.length;
+    for (; i < j; i++) {
+        int o = input[i] & 0xFF;
         if ((o & 0x80) == 0) {
-                    continue; // ASCII
+            continue; // ASCII byte; move on.
         }
 
-                // UTF-8 leading:
+        int end;
         if ((o & 0xE0) == 0xC0) {
+            // 2-byte sequence: 1 continuation byte required.
+            if (i + 1 >= j)
+                return false;
             end = i + 1;
         } else if ((o & 0xF0) == 0xE0) {
+            // 3-byte sequence: 2 continuation bytes required.
+            if (i + 2 >= j)
+                return false;
             end = i + 2;
         } else if ((o & 0xF8) == 0xF0) {
+            // 4-byte sequence: 3 continuation bytes required.
+            if (i + 3 >= j)
+                return false;
             end = i + 3;
         } else {
             return false;
         }
 
-
-                while (i < end) {
-                    i++;
-                    o = input[i];
-                    if ((o & 0xC0) != 0x80) {
+        // Check that each continuation byte starts with 10xxxxxx.
+        for (int k = i + 1; k <= end; k++) {
+            int cont = input[k] & 0xFF;
+            if ((cont & 0xC0) != 0x80) {
                 return false;
             }
         }
+        // Skip over the continuation bytes we've just checked.
+        i = end;
     }
     return true;
 }
\ No newline at end of file
