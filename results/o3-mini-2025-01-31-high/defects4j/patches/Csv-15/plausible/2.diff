diff --git a/tmp/7832756a-d2fa-4964-9bcf-8916a78e07ba_buggy.java b/tmp/1f43b4c2-4dcb-480f-a40b-0c7d60649c58_fixed.java
index 66af1fd..9dede87 100644
--- a/tmp/7832756a-d2fa-4964-9bcf-8916a78e07ba_buggy.java
+++ b/tmp/1f43b4c2-4dcb-480f-a40b-0c7d60649c58_fixed.java
@@ -1,107 +1,99 @@
-    // the original object is needed so can check for Number
 private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
         final Appendable out, final boolean newRecord) throws IOException {
     boolean quote = false;
     int start = offset;
     int pos = offset;
     final int end = offset + len;
 
     final char delimChar = getDelimiter();
     final char quoteChar = getQuoteCharacter().charValue();
 
     QuoteMode quoteModePolicy = getQuoteMode();
     if (quoteModePolicy == null) {
         quoteModePolicy = QuoteMode.MINIMAL;
     }
     switch (quoteModePolicy) {
     case ALL:
     case ALL_NON_NULL:
         quote = true;
         break;
     case NON_NUMERIC:
         quote = !(object instanceof Number);
         break;
     case NONE:
         // Use the existing escaping code
         printAndEscape(value, offset, len, out);
         return;
     case MINIMAL:
         if (len <= 0) {
-                // always quote an empty token that is the first
-                // on the line, as it may be the only thing on the
-                // line. If it were not quoted in that case,
-                // an empty line has no tokens.
+            // Always quote an empty token that is the first on the line.
             if (newRecord) {
                 quote = true;
             }
         } else {
             char c = value.charAt(pos);
-
-                if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {
+            // For a record's first token only check for control characters that need quoting.
+            // (Removed the check for characters > 0x7E so that extended Unicode characters such as 'â‚¬'
+            // are not quoted.)
+            if (newRecord && (c < 0x20 || (c > 0x21 && c < 0x23) || (c > 0x2B && c < 0x2D))) {
                 quote = true;
             } else if (c <= COMMENT) {
-                    // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
+                // Quote if the first character is less than or equal to the comment indicator.
                 quote = true;
             } else {
                 while (pos < end) {
                     c = value.charAt(pos);
                     if (c == LF || c == CR || c == quoteChar || c == delimChar) {
                         quote = true;
                         break;
                     }
                     pos++;
                 }
 
                 if (!quote) {
                     pos = end - 1;
                     c = value.charAt(pos);
-                        // Some other chars at the end caused the parser to fail, so for now
-                        // encapsulate if we end in anything less than ' '
+                    // If the last character is a control character (less than or equal to space), quote it.
                     if (c <= SP) {
                         quote = true;
                     }
                 }
             }
         }
 
         if (!quote) {
             // no encapsulation needed - write out the original value
             out.append(value, start, end);
             return;
         }
         break;
     default:
         throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
     }
 
     if (!quote) {
         // no encapsulation needed - write out the original value
         out.append(value, start, end);
         return;
     }
 
     // we hit something that needed encapsulation
     out.append(quoteChar);
 
     // Pick up where we left off: pos should be positioned on the first character that caused
     // the need for encapsulation.
     while (pos < end) {
         final char c = value.charAt(pos);
         if (c == quoteChar) {
-                // write out the chunk up until this point
-
-                // add 1 to the length to write out the encapsulator also
+            // write out the chunk up until this point (including the quote that needs doubling)
             out.append(value, start, pos + 1);
-                // put the next starting position on the encapsulator so we will
-                // write it out again with the next string (effectively doubling it)
+            // set start to the quote character so that it will be doubled in the output
             start = pos;
         }
         pos++;
     }
 
-        // write the last segment
+    // write the last segment and then the closing quote
     out.append(value, start, pos);
     out.append(quoteChar);
 }
\ No newline at end of file
