diff --git a/tmp/67357fe5-6d65-46b7-941c-985b75f92e16_buggy.java b/tmp/e3d7aec1-c5b2-4fe4-9feb-4bff052e0c79_fixed.java
index e8705ac..e0821da 100644
--- a/tmp/67357fe5-6d65-46b7-941c-985b75f92e16_buggy.java
+++ b/tmp/e3d7aec1-c5b2-4fe4-9feb-4bff052e0c79_fixed.java
@@ -1,24 +1,20 @@
-    /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
-     */
 private void annotateCalls(Node n) {
   Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
-      // explicit "this" is a free call.
+  // Get the callee and unwrap any cast nodes.
   Node first = n.getFirstChild();
+  Node callee = first;
+  while (callee != null && callee.isCast()) {
+    callee = callee.getFirstChild();
+  }
 
-      // ignore cast nodes.
-
-      if (!NodeUtil.isGet(first)) {
+  // If the unwrapped callee isnâ€™t a get-property, then this is a free call.
+  if (!NodeUtil.isGet(callee)) {
     n.putBooleanProp(Node.FREE_CALL, true);
   }
 
-      // Keep track of the context in which eval is called. It is important
-      // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+  // If the unwrapped callee is a name "eval", mark it as a direct eval call.
+  if (callee != null && callee.isName() && "eval".equals(callee.getString())) {
+    callee.putBooleanProp(Node.DIRECT_EVAL, true);
   }
 }
\ No newline at end of file
