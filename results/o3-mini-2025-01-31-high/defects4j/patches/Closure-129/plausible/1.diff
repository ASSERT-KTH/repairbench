diff --git a/tmp/746d1d43-758d-4747-9f53-e9e7cd67c37d_buggy.java b/tmp/b8a91f7c-ea17-4756-bf9d-59a0c8ea50f0_fixed.java
index e8705ac..fc9259e 100644
--- a/tmp/746d1d43-758d-4747-9f53-e9e7cd67c37d_buggy.java
+++ b/tmp/b8a91f7c-ea17-4756-bf9d-59a0c8ea50f0_fixed.java
@@ -1,24 +1,20 @@
-    /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
-     */
 private void annotateCalls(Node n) {
   Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
-      // explicit "this" is a free call.
+  // Retrieve the first child. It might be wrapped in one or more cast nodes.
   Node first = n.getFirstChild();
+  Node effective = first;
+  while (effective.isCast()) {
+    effective = effective.getFirstChild();
+  }
 
-      // ignore cast nodes.
-
-      if (!NodeUtil.isGet(first)) {
+  // If the effective node is not a get (e.g. GETPROP or GETELEM), then this is a free call.
+  if (!NodeUtil.isGet(effective)) {
     n.putBooleanProp(Node.FREE_CALL, true);
   }
 
-      // Keep track of the context in which eval is called. It is important
-      // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+  // When the effective node is a Name and it's "eval", mark it as a direct eval.
+  if (effective.isName() && "eval".equals(effective.getString())) {
+    effective.putBooleanProp(Node.DIRECT_EVAL, true);
   }
 }
\ No newline at end of file
