diff --git a/tmp/0b0d20b0-f2a7-4203-9b31-d63640dd618f_buggy.java b/tmp/978a9152-da8a-4ba1-b9be-ef711333b431_fixed.java
index e8705ac..1560fc2 100644
--- a/tmp/0b0d20b0-f2a7-4203-9b31-d63640dd618f_buggy.java
+++ b/tmp/978a9152-da8a-4ba1-b9be-ef711333b431_fixed.java
@@ -1,24 +1,22 @@
-    /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
-     */
 private void annotateCalls(Node n) {
   Preconditions.checkState(n.isCall());
+  Node callee = n.getFirstChild();
   
-      // Keep track of of the "this" context of a call.  A call without an
-      // explicit "this" is a free call.
-      Node first = n.getFirstChild();
+  // Unwrap any cast nodes that might be masking the real call target.
+  while (callee != null && callee.getType() == Token.CAST) {
+    callee = callee.getFirstChild();
+  }
 
-      // ignore cast nodes.
-
-      if (!NodeUtil.isGet(first)) {
+  // Mark the call as a "free" call (without an explicit "this") if the target
+  // is not a GET (i.e. property access). Without unwrapping casts, a call such as
+  // "/** @type {function():!string} */ ((new x())['abc'])()" would be mis-annotated.
+  if (!NodeUtil.isGet(callee)) {
     n.putBooleanProp(Node.FREE_CALL, true);
   }
 
-      // Keep track of the context in which eval is called. It is important
-      // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+  // Record if the call is a direct eval call. Using the unwrapped callee ensures that
+  // an eval wrapped in cast is still detected as eval.
+  if (callee.isName() && "eval".equals(callee.getString())) {
+    callee.putBooleanProp(Node.DIRECT_EVAL, true);
   }
 }
\ No newline at end of file
