diff --git a/tmp/909aad7f-9169-41f4-8344-705e4081ce77_buggy.java b/tmp/77e80887-6bae-4447-89a3-18bb285ec3b9_fixed.java
index 210695a..bd0a17b 100644
--- a/tmp/909aad7f-9169-41f4-8344-705e4081ce77_buggy.java
+++ b/tmp/77e80887-6bae-4447-89a3-18bb285ec3b9_fixed.java
@@ -1,32 +1,22 @@
-  /**
-   * Computes the subset of {@code this} and {@code that} types if inequality
-   * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
-   * type of {@code v1} is {@code number} and the type of {@code v2} is
-   * {@code number} as well.
-   *
-   * @return a pair containing the restricted type of {@code this} as the first
-   *         component and the restricted type of {@code that} as the second
-   *         element. The returned pair is never {@code null} even though its
-   *         components may be {@code null}
-   */
 public TypePair getTypesUnderInequality(JSType that) {
-    // unions types
+  // If "that" is a union type, delegate to its implementation then swap
   if (that instanceof UnionType) {
     TypePair p = that.getTypesUnderInequality(this);
     return new TypePair(p.typeB, p.typeA);
   }
 
-    // other types
   switch (this.testForEquality(that)) {
     case TRUE:
-        return new TypePair(null, null);
-
+      // If the two types are definitely equal, then the branch where they are
+      // unequal is unreachable. Instead of returning null (which means “no refinement”
+      // and leaves the type unchanged), we return the bottom type (NO_TYPE) so that
+      // the variable’s type gets eliminated. This fixes the test failure in which
+      // "undefined" was observed instead of "None".
+      return new TypePair(getNativeType(JSTypeNative.NO_TYPE),
+                          getNativeType(JSTypeNative.NO_TYPE));
     case FALSE:
     case UNKNOWN:
       return new TypePair(this, that);
   }
-
-    // switch case is exhaustive
   throw new IllegalStateException();
 }
\ No newline at end of file
