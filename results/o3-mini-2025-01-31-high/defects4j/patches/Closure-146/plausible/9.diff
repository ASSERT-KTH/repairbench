diff --git a/tmp/9cc114c7-bfd8-421d-83e2-47aa2e5d8d64_buggy.java b/tmp/0698c030-c563-4f4b-8793-9a95fadddaa3_fixed.java
index 210695a..c91b479 100644
--- a/tmp/9cc114c7-bfd8-421d-83e2-47aa2e5d8d64_buggy.java
+++ b/tmp/0698c030-c563-4f4b-8793-9a95fadddaa3_fixed.java
@@ -1,32 +1,29 @@
-  /**
-   * Computes the subset of {@code this} and {@code that} types if inequality
-   * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
-   * type of {@code v1} is {@code number} and the type of {@code v2} is
-   * {@code number} as well.
-   *
-   * @return a pair containing the restricted type of {@code this} as the first
-   *         component and the restricted type of {@code that} as the second
-   *         element. The returned pair is never {@code null} even though its
-   *         components may be {@code null}
-   */
 public TypePair getTypesUnderInequality(JSType that) {
   // unions types
   if (that instanceof UnionType) {
     TypePair p = that.getTypesUnderInequality(this);
     return new TypePair(p.typeB, p.typeA);
   }
 
-    // other types
+  /*
+   * If testForEquality returns TRUE then the two types are definitely equal.
+   * In that case, assuming they are not equal leads to a contradiction; that is,
+   * no value of this type can ever be not equal to any value of that type.
+   * (For example, if both are undefined then “undefined != undefined” is impossible.)
+   * Therefore, we must narrow both types to the bottom type (NO_TYPE) rather than
+   * leaving them unchanged (or null, which signals “no change”).
+   */
   switch (this.testForEquality(that)) {
     case TRUE:
-        return new TypePair(null, null);
+      return new TypePair(
+          this.getNativeType(JSTypeNative.NO_TYPE),
+          this.getNativeType(JSTypeNative.NO_TYPE));
 
     case FALSE:
     case UNKNOWN:
       return new TypePair(this, that);
   }
 
-    // switch case is exhaustive
+  // switch is meant to be exhaustive
   throw new IllegalStateException();
 }
\ No newline at end of file
