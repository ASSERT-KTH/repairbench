diff --git a/tmp/c193ef4e-b33b-4221-8dae-2f1bbf8e3a35_buggy.java b/tmp/73a91093-4334-4563-b94e-4a4bb25b156d_fixed.java
index 210695a..8c907e7 100644
--- a/tmp/c193ef4e-b33b-4221-8dae-2f1bbf8e3a35_buggy.java
+++ b/tmp/73a91093-4334-4563-b94e-4a4bb25b156d_fixed.java
@@ -1,32 +1,26 @@
-  /**
-   * Computes the subset of {@code this} and {@code that} types if inequality
-   * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
-   * type of {@code v1} is {@code number} and the type of {@code v2} is
-   * {@code number} as well.
-   *
-   * @return a pair containing the restricted type of {@code this} as the first
-   *         component and the restricted type of {@code that} as the second
-   *         element. The returned pair is never {@code null} even though its
-   *         components may be {@code null}
-   */
 public TypePair getTypesUnderInequality(JSType that) {
-    // unions types
+  // If 'that' is a union type, delegate and swap the result.
   if (that instanceof UnionType) {
     TypePair p = that.getTypesUnderInequality(this);
     return new TypePair(p.typeB, p.typeA);
   }
 
-    // other types
+  // For non-union types, use the result of the equality test.
   switch (this.testForEquality(that)) {
     case TRUE:
       return new TypePair(null, null);
 
     case FALSE:
     case UNKNOWN:
-        return new TypePair(this, that);
+      // When inequality is observed, we must rule out 'undefined'.
+      // In our system, a variable with the type VOID_TYPE (i.e. undefined)
+      // must be refined to NO_TYPE. Furthermore, if a union-type contains
+      // undefined as an option, we remove it.
+      JSType leftType = this.equals(VOID_TYPE) ? NO_TYPE : this.removeType(VOID_TYPE);
+      JSType rightType = that.equals(VOID_TYPE) ? NO_TYPE : that.removeType(VOID_TYPE);
+      return new TypePair(leftType, rightType);
   }
   
-    // switch case is exhaustive
+  // Should never reach here.
   throw new IllegalStateException();
 }
\ No newline at end of file
