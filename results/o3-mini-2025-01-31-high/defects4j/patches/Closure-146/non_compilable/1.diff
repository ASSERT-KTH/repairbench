diff --git a/tmp/65bc28cb-ecf9-41b8-a2a4-f2571419eca1_buggy.java b/tmp/4033c789-f2fa-4fd6-9787-cb09506ac50b_fixed.java
index 210695a..bdbd2f4 100644
--- a/tmp/65bc28cb-ecf9-41b8-a2a4-f2571419eca1_buggy.java
+++ b/tmp/4033c789-f2fa-4fd6-9787-cb09506ac50b_fixed.java
@@ -1,32 +1,37 @@
 /**
  * Computes the subset of {@code this} and {@code that} types if inequality
  * is observed. If a value {@code v1} of type {@code number} is not equal to a
  * value {@code v2} of type {@code (undefined,number)}, we can infer that the
  * type of {@code v1} is {@code number} and the type of {@code v2} is
  * {@code number} as well.
  *
  * @return a pair containing the restricted type of {@code this} as the first
  *         component and the restricted type of {@code that} as the second
  *         element. The returned pair is never {@code null} even though its
  *         components may be {@code null}
  */
 public TypePair getTypesUnderInequality(JSType that) {
-    // unions types
+  // If the right-hand side is a union type, delegate and swap the result.
   if (that instanceof UnionType) {
     TypePair p = that.getTypesUnderInequality(this);
     return new TypePair(p.typeB, p.typeA);
   }
 
-    // other types
+  // For non-union types, decide based on the equality test outcome.
   switch (this.testForEquality(that)) {
     case TRUE:
       return new TypePair(null, null);
 
     case FALSE:
     case UNKNOWN:
-        return new TypePair(this, that);
+      // For the inequality branch, we must remove the possibility of "undefined"
+      // from both operands. In particular, if an operand is exactly VOID_TYPE,
+      // then removing undefined yields NO_TYPE.
+      return new TypePair(
+          this.removeType(VOID_TYPE),
+          that.removeType(VOID_TYPE));
   }
 
-    // switch case is exhaustive
+  // This point should never be reached.
   throw new IllegalStateException();
 }
\ No newline at end of file
