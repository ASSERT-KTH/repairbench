diff --git a/tmp/e53041b0-b16f-4fbb-a39e-f6650ca4c33c_buggy.java b/tmp/a82ae891-b15c-4245-86dc-1d13e541bf5d_fixed.java
index 210695a..71de7aa 100644
--- a/tmp/e53041b0-b16f-4fbb-a39e-f6650ca4c33c_buggy.java
+++ b/tmp/a82ae891-b15c-4245-86dc-1d13e541bf5d_fixed.java
@@ -1,32 +1,34 @@
 /**
  * Computes the subset of {@code this} and {@code that} types if inequality
  * is observed. If a value {@code v1} of type {@code number} is not equal to a
  * value {@code v2} of type {@code (undefined,number)}, we can infer that the
  * type of {@code v1} is {@code number} and the type of {@code v2} is
  * {@code number} as well.
  *
  * @return a pair containing the restricted type of {@code this} as the first
  *         component and the restricted type of {@code that} as the second
  *         element. The returned pair is never {@code null} even though its
  *         components may be {@code null}
  */
 public TypePair getTypesUnderInequality(JSType that) {
   // unions types
   if (that instanceof UnionType) {
     TypePair p = that.getTypesUnderInequality(this);
     return new TypePair(p.typeB, p.typeA);
   }
 
   // other types
   switch (this.testForEquality(that)) {
     case TRUE:
-        return new TypePair(null, null);
-
+      // If the two types are definitely equal then the inequality branch is
+      // unsatisfiable. In that case we refine both types to the bottom type,
+      // represented by NO_TYPE.
+      return new TypePair(NO_TYPE, NO_TYPE);
     case FALSE:
     case UNKNOWN:
       return new TypePair(this, that);
   }
 
   // switch case is exhaustive
   throw new IllegalStateException();
 }
\ No newline at end of file
