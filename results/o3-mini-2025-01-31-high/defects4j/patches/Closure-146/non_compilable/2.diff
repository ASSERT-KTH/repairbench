diff --git a/tmp/ac64b218-206d-4f30-837a-d8d29c8d843c_buggy.java b/tmp/3b871d97-6550-4c5d-8ca6-54fe90c135f3_fixed.java
index 210695a..c43be6d 100644
--- a/tmp/ac64b218-206d-4f30-837a-d8d29c8d843c_buggy.java
+++ b/tmp/3b871d97-6550-4c5d-8ca6-54fe90c135f3_fixed.java
@@ -1,32 +1,19 @@
-  /**
-   * Computes the subset of {@code this} and {@code that} types if inequality
-   * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
-   * type of {@code v1} is {@code number} and the type of {@code v2} is
-   * {@code number} as well.
-   *
-   * @return a pair containing the restricted type of {@code this} as the first
-   *         component and the restricted type of {@code that} as the second
-   *         element. The returned pair is never {@code null} even though its
-   *         components may be {@code null}
-   */
 public TypePair getTypesUnderInequality(JSType that) {
-    // unions types
+  // For union types, delegate to the other type and swap the result.
   if (that instanceof UnionType) {
     TypePair p = that.getTypesUnderInequality(this);
     return new TypePair(p.typeB, p.typeA);
   }
 
-    // other types
+  // For non-union types, refine based on the equality test.
+  // If the types are definitely equal then assuming inequality is impossible,
+  // so we return the bottom type (NO_TYPE) for both sides.
   switch (this.testForEquality(that)) {
     case TRUE:
-        return new TypePair(null, null);
-
+      return new TypePair(NO_TYPE, NO_TYPE);
     case FALSE:
     case UNKNOWN:
       return new TypePair(this, that);
   }
-
-    // switch case is exhaustive
   throw new IllegalStateException();
 }
\ No newline at end of file
