diff --git a/tmp/a3a32e6c-54c0-4700-a41a-169898fc1009_buggy.java b/tmp/1c1ba339-6471-4851-b517-c41311af61fa_fixed.java
index 210695a..89a4a24 100644
--- a/tmp/a3a32e6c-54c0-4700-a41a-169898fc1009_buggy.java
+++ b/tmp/1c1ba339-6471-4851-b517-c41311af61fa_fixed.java
@@ -1,32 +1,35 @@
-  /**
-   * Computes the subset of {@code this} and {@code that} types if inequality
-   * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
-   * type of {@code v1} is {@code number} and the type of {@code v2} is
-   * {@code number} as well.
-   *
-   * @return a pair containing the restricted type of {@code this} as the first
-   *         component and the restricted type of {@code that} as the second
-   *         element. The returned pair is never {@code null} even though its
-   *         components may be {@code null}
-   */
 public TypePair getTypesUnderInequality(JSType that) {
   // unions types
   if (that instanceof UnionType) {
     TypePair p = that.getTypesUnderInequality(this);
     return new TypePair(p.typeB, p.typeA);
   }
 
-    // other types
   switch (this.testForEquality(that)) {
     case TRUE:
+      // When the equality test obviously holds, we return no new information.
       return new TypePair(null, null);
 
     case FALSE:
     case UNKNOWN:
-        return new TypePair(this, that);
+      // Under the assumption of inequality, remove the possibility of undefined.
+      JSType refinedThis = this;
+      if (this.equals(VOID_TYPE)) {
+        refinedThis = NO_TYPE;
+      } else if (this instanceof UnionType && ((UnionType) this).contains(VOID_TYPE)) {
+        JSType withoutUndefined = ((UnionType) this).removeType(VOID_TYPE);
+        refinedThis = withoutUndefined == null ? NO_TYPE : withoutUndefined;
+      }
+      JSType refinedThat = that;
+      if (that.equals(VOID_TYPE)) {
+        refinedThat = NO_TYPE;
+      } else if (that instanceof UnionType && ((UnionType) that).contains(VOID_TYPE)) {
+        JSType withoutUndefined = ((UnionType) that).removeType(VOID_TYPE);
+        refinedThat = withoutUndefined == null ? NO_TYPE : withoutUndefined;
+      }
+      return new TypePair(refinedThis, refinedThat);
   }
 
-    // switch case is exhaustive
+  // switch is exhaustive
   throw new IllegalStateException();
 }
\ No newline at end of file
