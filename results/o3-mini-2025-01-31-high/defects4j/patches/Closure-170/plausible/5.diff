diff --git a/tmp/d707b7bd-1674-4de5-b56b-1ad801ceb2b1_buggy.java b/tmp/4eb2f8bd-bad6-40fe-99af-86c0868acc61_fixed.java
index 5abdeb5..60382d4 100644
--- a/tmp/d707b7bd-1674-4de5-b56b-1ad801ceb2b1_buggy.java
+++ b/tmp/4eb2f8bd-bad6-40fe-99af-86c0868acc61_fixed.java
@@ -1,29 +1,44 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
-
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          // Look for uses of the variable.
+          if (n.isName() && n.getString().equals(varName)) {
+            // Normally we do not count a name that is the left‐hand side of an assignment.
+            // However, if that assignment is not “top‑level” within the cfgNode (for example,
+            // when it occurs inside a hook operator), then it must be counted.
+            if (isLhsOfTopLevelAssignmentChain(n, cfgNode)) {
+              return;
+            }
             numUsesWithinCfgNode++;
           }
         }
 
+        /**
+         * Returns true if n is the left-hand side of an assignment that is part of a
+         * top-level assignment chain (i.e. every ancestor from the assignment node
+         * up to cfgNode is an assignment).
+         */
+        private boolean isLhsOfTopLevelAssignmentChain(Node n, Node cfgNode) {
+          // n must be the first child of an ASSIGN.
+          if (!(n.getParent().isAssign() && n.getParent().getFirstChild() == n)) {
+            return false;
+          }
+          // Walk up from the assignment node until we hit cfgNode.
+          // If every parent in between is an assignment then the entire cfgNode
+          // is just a chain of assignments, so we skip counting n.
+          Node cur = n.getParent();
+          while (cur != null && cur != cfgNode) {
+            if (!cur.isAssign()) {
+              return false;
+            }
+            cur = cur.getParent();
+          }
+          return cur == cfgNode;
+        }
       };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
