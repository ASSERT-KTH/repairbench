diff --git a/tmp/31b8241e-683d-4efe-8bbe-a8c37870cb06_buggy.java b/tmp/2c2d201d-bae2-4932-9667-7fe4cd6b59bc_fixed.java
index 5abdeb5..7c85a78 100644
--- a/tmp/31b8241e-683d-4efe-8bbe-a8c37870cb06_buggy.java
+++ b/tmp/2c2d201d-bae2-4932-9667-7fe4cd6b59bc_fixed.java
@@ -1,29 +1,31 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
-
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName)) {
+            // Normally, we want to ignore the left‐hand side of an assignment,
+            // because it is a “write” rather than a read. However, if the assignment
+            // occurs inside a hook (ternary operator), then its evaluation order
+            // is intertwined with the surrounding expression and must be counted.
+            if (parent != null && parent.isAssign() && parent.getFirstChild() == n) {
+              boolean insideHook = false;
+              for (Node anc = parent; anc != null; anc = anc.getParent()) {
+                if (anc.isHook()) {
+                  insideHook = true;
+                  break;
+                }
+              }
+              if (!insideHook) {
+                // Skip counting a left‐hand side that is not nested inside a hook.
+                return;
+              }
+            }
             numUsesWithinCfgNode++;
           }
         }
-
       };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
