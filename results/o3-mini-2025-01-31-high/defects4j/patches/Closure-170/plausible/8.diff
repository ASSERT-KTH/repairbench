diff --git a/tmp/0ddc8ab3-8a03-4ea3-8051-6efd82237993_buggy.java b/tmp/47f673a6-28bf-4c2f-b3d6-edea1b1fff3d_fixed.java
index 5abdeb5..dcb02f0 100644
--- a/tmp/0ddc8ab3-8a03-4ea3-8051-6efd82237993_buggy.java
+++ b/tmp/47f673a6-28bf-4c2f-b3d6-edea1b1fff3d_fixed.java
@@ -1,29 +1,41 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
-      AbstractCfgNodeTraversalCallback gatherCb =
-          new AbstractCfgNodeTraversalCallback() {
 
+  // Determine whether the entire cfgNode is an assignment chain.
+  // In such chains the “left‐hand side” of an assignment happens later
+  // in evaluation and should be ignored.
+  final boolean inAssignmentChain;
+  if (cfgNode.isAssign()) {
+    inAssignmentChain = true;
+  } else if (cfgNode.isExprResult() && cfgNode.getFirstChild() != null
+             && cfgNode.getFirstChild().isAssign()) {
+    inAssignmentChain = true;
+  } else if (cfgNode.isComma()) {
+    // For comma operators, all children except the last are side-effect expressions.
+    boolean allAssigns = true;
+    for (Node c = cfgNode.getFirstChild(); c != null && c != cfgNode.getLastChild(); c = c.getNext()) {
+      if (!c.isAssign()) {
+        allAssigns = false;
+        break;
+      }
+    }
+    inAssignmentChain = allAssigns;
+  } else {
+    inAssignmentChain = false;
+  }
+
+  AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback() {
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+      if (n.isName() && n.getString().equals(varName)
+          // When the entire cfgNode is a chain of assignments, skip the LHS of an assignment.
+          // Otherwise (e.g. when the assignment is nested inside a HOOK or binary op)
+          // the variable is used (and could affect evaluation order).
+          && !(inAssignmentChain && parent.isAssign() && parent.getFirstChild() == n)) {
         numUsesWithinCfgNode++;
       }
     }
-
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
