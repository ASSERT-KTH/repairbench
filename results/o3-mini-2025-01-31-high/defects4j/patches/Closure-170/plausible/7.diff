diff --git a/tmp/cf8be039-3b7b-4fc3-947c-da3017af7759_buggy.java b/tmp/9cad2d24-d8ba-4830-9dd2-4001c35762db_fixed.java
index 5abdeb5..4fabdb5 100644
--- a/tmp/cf8be039-3b7b-4fc3-947c-da3017af7759_buggy.java
+++ b/tmp/9cad2d24-d8ba-4830-9dd2-4001c35762db_fixed.java
@@ -1,29 +1,52 @@
 /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
+ * Computes the number of uses of the variable varName and stores it in
+ * numUsesWithinCfgNode.
+ *
+ * <p>When the whole CFG node consists solely of assignment‐chain expressions,
+ * we do not count the left‐hand side of an assignment. However, if an assignment
+ * appears nested (for example inside a hook, binary operator, etc.), then its LHS
+ * should count as a use. We detect a “top‐level assignment chain” by looking
+ * upward from an ASSIGN node and requiring that every parent up to cfgNode is either
+ * an ASSIGN or a COMMA.</p>
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
-
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName)) {
+            // If n is the left-hand side of an assignment, then normally we do not count it.
+            if (parent.isAssign() && parent.getFirstChild() == n) {
+              // But only skip it if the assignment is part of a top‐level assignment chain.
+              // That is, if from the parent (the ASSIGN node) up to cfgNode every node is
+              // either an ASSIGN or a COMMA, then we are in an assignment chain.
+              if (parent == cfgNode) {
+                // Special case: the cfgNode is itself an assignment.
+                return;
+              }
+              boolean isTopLevelChain = false;
+              for (Node cur = parent; cur != null && cur != cfgNode; cur = cur.getParent()) {
+                Node p = cur.getParent();
+                if (p == null) {
+                  break;
+                }
+                if (p == cfgNode) {
+                  isTopLevelChain = true;
+                  break;
+                }
+                if (!p.isAssign() && !p.isComma()) {
+                  break;
+                }
+              }
+              if (isTopLevelChain) {
+                return;
+              }
+            }
             numUsesWithinCfgNode++;
           }
         }
-
       };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
