diff --git a/tmp/8e88e313-65c3-476e-9332-5328732b7d28_buggy.java b/tmp/dddd8594-86b7-4a3b-af4b-4b8705aacd71_fixed.java
index 5abdeb5..3f2df3b 100644
--- a/tmp/8e88e313-65c3-476e-9332-5328732b7d28_buggy.java
+++ b/tmp/dddd8594-86b7-4a3b-af4b-4b8705aacd71_fixed.java
@@ -1,29 +1,39 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName)) {
+            // Only ignore the LHS of an assignment when that assignment is
+            // the “top‐level” expression for this CFG node (i.e. a chain of assigns).
+            if (isLhsOfTopLevelAssign(n, cfgNode)) {
+              return;
+            }
             numUsesWithinCfgNode++;
           }
         }
 
+        /**
+         * Returns true if n is the left-hand side of an assign node that is the entire cfgNode.
+         */
+        private boolean isLhsOfTopLevelAssign(Node n, Node cfgNode) {
+          Node p = n.getParent();
+          if (p != null && p.isAssign() && p.getFirstChild() == n) {
+            // If p is directly contained in cfgNode (or in an EXPR_RESULT whose child is p)
+            // then this assignment is a top-level assignment chain and we should ignore its LHS.
+            Node gp = p.getParent();
+            if (gp == cfgNode) {
+              return true;
+            }
+            if (cfgNode.isExprResult() && cfgNode.getFirstChild() == p) {
+              return true;
+            }
+          }
+          return false;
+        }
       };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
