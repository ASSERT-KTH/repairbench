diff --git a/tmp/e27991c5-c1d7-4736-ae38-0ac0ebf9c102_buggy.java b/tmp/857ba24f-5607-4183-8bff-b20e2ce15072_fixed.java
index 5abdeb5..a02a21b 100644
--- a/tmp/e27991c5-c1d7-4736-ae38-0ac0ebf9c102_buggy.java
+++ b/tmp/857ba24f-5607-4183-8bff-b20e2ce15072_fixed.java
@@ -1,29 +1,27 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+      if (n.isName() && n.getString().equals(varName)) {
+        // Only skip counting this name if it’s the left‐hand side of a top‐level
+        // assignment chain (i.e. its parent is an ASSIGN and that ASSIGN is
+        // directly under our cfgNode). This special case is needed because when
+        // the entire cfgNode is a chain of assignments, the LHSs haven’t been
+        // executed when the right‐hand side is inlined.
+        if (parent.isAssign() && parent.getFirstChild() == n &&
+            parent.getParent() == cfgNode) {
+          // Do not count the LHS of a top‐level assignment.
+          return;
+        }
         numUsesWithinCfgNode++;
       }
     }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
