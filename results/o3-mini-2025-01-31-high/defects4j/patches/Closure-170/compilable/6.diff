diff --git a/tmp/2ce56e7d-24c4-4f46-bd69-9ae1c6e22722_buggy.java b/tmp/f9d00678-02cc-4b54-90e6-f813011ae3a3_fixed.java
index 5abdeb5..d20c137 100644
--- a/tmp/2ce56e7d-24c4-4f46-bd69-9ae1c6e22722_buggy.java
+++ b/tmp/f9d00678-02cc-4b54-90e6-f813011ae3a3_fixed.java
@@ -1,29 +1,31 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
-
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          // Match only if this is the variable we care about.
+          if (n.isName() && n.getString().equals(varName)) {
+            // We used to ignore all occurrences where this name
+            // was the left-hand side of an assignment. However, that
+            // is too aggressive. In a top‐level assignment (e.g. an
+            // assignment statement), the LHS is not a “use” but a
+            // definition. When the assignment occurs inside a larger
+            // expression (such as inside a hook), however, the assignment
+            // happens sooner than the rest of the expression, so we must
+            // count it.
+            //
+            // Therefore, we only ignore the LHS if the assignment node
+            // is directly contained in the cfgNode.
+            if (parent != null
+                && parent.isAssign()
+                && parent.getFirstChild() == n
+                && parent.getParent() == cfgNode) {
+              return;
+            }
             numUsesWithinCfgNode++;
           }
         }
-
       };
-
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
