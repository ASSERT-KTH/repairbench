diff --git a/tmp/d104bdaa-5cdc-4318-85ea-9e4a8b8f5620_buggy.java b/tmp/51290fca-dc9e-46e0-a59f-46213d93a400_fixed.java
index 5abdeb5..523485d 100644
--- a/tmp/d104bdaa-5cdc-4318-85ea-9e4a8b8f5620_buggy.java
+++ b/tmp/51290fca-dc9e-46e0-a59f-46213d93a400_fixed.java
@@ -1,29 +1,20 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
-
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
+          // When the entire cfgNode is an assignment (i.e. an assignment chain),
+          // the left‐hand side is not a “use” of the variable. However, if the
+          // assignment appears inside a larger expression (for example, inside
+          // a hook expression), then the lhs must count as a use. Therefore,
+          // we only skip the lhs if cfgNode is an assignment.
           if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+              !(cfgNode.isAssign() && parent.isAssign() && parent.getFirstChild() == n)) {
             numUsesWithinCfgNode++;
           }
         }
-
       };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
