diff --git a/tmp/0e3d329e-1dce-494c-bdf2-86d28b86f32d_buggy.java b/tmp/03c9deeb-a2ad-4957-b216-87d98f3d3cf4_fixed.java
index 800e6e1..b89508e 100644
--- a/tmp/0e3d329e-1dce-494c-bdf2-86d28b86f32d_buggy.java
+++ b/tmp/03c9deeb-a2ad-4957-b216-87d98f3d3cf4_fixed.java
@@ -1,32 +1,30 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
-      if (n == scope.getRootNode()) return;
-
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
+  if (n == scope.getRootNode()) {
+    return;
+  }
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
-
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
+    case Token.GETPROP:
+      // This case is needed so that namespaced function stubs (like
+      // goog.foo or this.foo) get their declared types properly collected.
+      defineGetProp(n, parent);
+      break;
   }
 }
\ No newline at end of file
