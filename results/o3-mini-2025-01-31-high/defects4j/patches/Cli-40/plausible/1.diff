diff --git a/tmp/e82ea4a5-7d4f-4906-a40f-aa105168dd92_buggy.java b/tmp/d1e773af-4977-401d-8019-5e486775b656_fixed.java
index a7d0787..9c61c33 100644
--- a/tmp/e82ea4a5-7d4f-4906-a40f-aa105168dd92_buggy.java
+++ b/tmp/d1e773af-4977-401d-8019-5e486775b656_fixed.java
@@ -1,54 +1,41 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
-    @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
-    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
-    {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
-        {
+public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {
+    if (PatternOptionBuilder.STRING_VALUE == clazz) {
         return (T) str;
-        }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {
         return (T) createObject(str);
+    } else if (PatternOptionBuilder.NUMBER_VALUE == clazz || Number.class.isAssignableFrom(clazz)) {
+        // Attempt to parse the string as a number.
+        Number num = createNumber(str);
+        // Convert the parsed number into the appropriate type if needed.
+        if (clazz.equals(Integer.class)) {
+            return (T) Integer.valueOf(num.intValue());
+        } else if (clazz.equals(Long.class)) {
+            return (T) Long.valueOf(num.longValue());
+        } else if (clazz.equals(Float.class)) {
+            return (T) Float.valueOf(num.floatValue());
+        } else if (clazz.equals(Double.class)) {
+            return (T) Double.valueOf(num.doubleValue());
+        } else if (clazz.equals(Byte.class)) {
+            return (T) Byte.valueOf(num.byteValue());
+        } else if (clazz.equals(Short.class)) {
+            return (T) Short.valueOf(num.shortValue());
+        } else {
+            // If clazz is Number or another numeric type we don't specifically handle, just return the Number.
+            return (T) num;
         }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
-        {
-            return (T) createNumber(str);
-        }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.DATE_VALUE == clazz) {
         return (T) createDate(str);
-        }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.CLASS_VALUE == clazz) {
         return (T) createClass(str);
-        }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.FILE_VALUE == clazz) {
         return (T) createFile(str);
-        }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {
         return (T) openFile(str);
-        }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.FILES_VALUE == clazz) {
         return (T) createFiles(str);
-        }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.URL_VALUE == clazz) {
         return (T) createURL(str);
-        }
-        else
-        {
-            return null;
+    } else {
+        throw new ParseException("Cannot convert '" + str + "' to " + clazz.getName());
     }
 }
\ No newline at end of file
