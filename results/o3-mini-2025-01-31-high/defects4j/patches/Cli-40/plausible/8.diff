diff --git a/tmp/a66e9d31-d5e1-45ee-86c3-aaacc2891b61_buggy.java b/tmp/b6ac26d2-85ab-4c18-bc60-ab55b49dbe06_fixed.java
index a7d0787..22e8354 100644
--- a/tmp/a66e9d31-d5e1-45ee-86c3-aaacc2891b61_buggy.java
+++ b/tmp/b6ac26d2-85ab-4c18-bc60-ab55b49dbe06_fixed.java
@@ -1,54 +1,52 @@
 /**
  * Returns the <code>Object</code> of type <code>clazz</code>
  * with the value of <code>str</code>.
  *
  * @param str the command line value
  * @param clazz the type of argument
  * @return The instance of <code>clazz</code> initialised with
  * the value of <code>str</code>.
  * @throws ParseException if the value creation for the given class failed
  */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
-    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
-    {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
-        {
+public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {
+    if (clazz.equals(PatternOptionBuilder.STRING_VALUE)) {
         return (T) str;
-        }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
-        {
+    } else if (clazz.equals(PatternOptionBuilder.OBJECT_VALUE)) {
         return (T) createObject(str);
+    } else if (Number.class.isAssignableFrom(clazz)) {
+        // For any numeric type (e.g. Integer, Double, etc), try to create a Number first.
+        Number number = createNumber(str);
+        if (clazz.equals(Byte.class)) {
+            return (T) Byte.valueOf(number.byteValue());
+        } else if (clazz.equals(Short.class)) {
+            return (T) Short.valueOf(number.shortValue());
+        } else if (clazz.equals(Integer.class)) {
+            return (T) Integer.valueOf(number.intValue());
+        } else if (clazz.equals(Long.class)) {
+            return (T) Long.valueOf(number.longValue());
+        } else if (clazz.equals(Float.class)) {
+            return (T) Float.valueOf(number.floatValue());
+        } else if (clazz.equals(Double.class)) {
+            return (T) Double.valueOf(number.doubleValue());
+        } else if (clazz.equals(Number.class)) {
+            return (T) number;
+        } else {
+            throw new ParseException("Cannot convert " + str + " to " + clazz.getName());
         }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
-        {
-            return (T) createNumber(str);
-        }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
-        {
+    } else if (clazz.equals(PatternOptionBuilder.DATE_VALUE)) {
         return (T) createDate(str);
-        }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
-        {
+    } else if (clazz.equals(PatternOptionBuilder.CLASS_VALUE)) {
         return (T) createClass(str);
-        }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
-        {
+    } else if (clazz.equals(PatternOptionBuilder.FILE_VALUE)) {
         return (T) createFile(str);
-        }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
-        {
+    } else if (clazz.equals(PatternOptionBuilder.EXISTING_FILE_VALUE)) {
         return (T) openFile(str);
-        }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
-        {
+    } else if (clazz.equals(PatternOptionBuilder.FILES_VALUE)) {
         return (T) createFiles(str);
-        }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
-        {
+    } else if (clazz.equals(PatternOptionBuilder.URL_VALUE)) {
         return (T) createURL(str);
-        }
-        else
-        {
-            return null;
+    } else {
+        throw new ParseException("Cannot convert " + str + " to " + clazz.getName());
     }
 }
\ No newline at end of file
