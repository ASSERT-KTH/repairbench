diff --git a/tmp/134bc847-3292-48df-8688-882f940f9189_buggy.java b/tmp/f9b785c7-ab39-47e8-a3f5-959e4dffeae7_fixed.java
index a7d0787..c6e23e9 100644
--- a/tmp/134bc847-3292-48df-8688-882f940f9189_buggy.java
+++ b/tmp/f9b785c7-ab39-47e8-a3f5-959e4dffeae7_fixed.java
@@ -1,54 +1,39 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
-    @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
-    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
-    {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
-        {
+public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {
+    if (PatternOptionBuilder.STRING_VALUE.equals(clazz)) {
         return (T) str;
-        }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.OBJECT_VALUE.equals(clazz)) {
         return (T) createObject(str);
+    } else if (Number.class.isAssignableFrom(clazz)) {
+        Number number = createNumber(str); // May throw ParseException if conversion fails
+        if (clazz.equals(Byte.class)) {
+            return (T) Byte.valueOf(number.byteValue());
+        } else if (clazz.equals(Short.class)) {
+            return (T) Short.valueOf(number.shortValue());
+        } else if (clazz.equals(Integer.class)) {
+            return (T) Integer.valueOf(number.intValue());
+        } else if (clazz.equals(Long.class)) {
+            return (T) Long.valueOf(number.longValue());
+        } else if (clazz.equals(Float.class)) {
+            return (T) Float.valueOf(number.floatValue());
+        } else if (clazz.equals(Double.class)) {
+            return (T) Double.valueOf(number.doubleValue());
+        } else {
+            // For Number.class or any other Number subtype we don't specifically convert
+            return (T) number;
         }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
-        {
-            return (T) createNumber(str);
-        }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.DATE_VALUE.equals(clazz)) {
         return (T) createDate(str);
-        }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.CLASS_VALUE.equals(clazz)) {
         return (T) createClass(str);
-        }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.FILE_VALUE.equals(clazz)) {
         return (T) createFile(str);
-        }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.EXISTING_FILE_VALUE.equals(clazz)) {
         return (T) openFile(str);
-        }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.FILES_VALUE.equals(clazz)) {
         return (T) createFiles(str);
-        }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.URL_VALUE.equals(clazz)) {
         return (T) createURL(str);
-        }
-        else
-        {
-            return null;
+    } else {
+        throw new ParseException("Cannot convert '" + str + "' to " + clazz.getName());
     }
 }
\ No newline at end of file
