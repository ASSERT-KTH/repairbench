diff --git a/tmp/e3bceb79-badf-40ff-a662-ee99e1ebcd2b_buggy.java b/tmp/686059d3-a6ec-4096-8227-35384b7c4f7e_fixed.java
index d57736b..0f81f75 100644
--- a/tmp/e3bceb79-badf-40ff-a662-ee99e1ebcd2b_buggy.java
+++ b/tmp/686059d3-a6ec-4096-8227-35384b7c4f7e_fixed.java
@@ -1,39 +1,53 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
-    if (constraintObj != null && constraintObj.isRecordType()) {
+  if (constraintObj == null || !constraintObj.isRecordType()) {
+    return;
+  }
+
+  // If “type” is a union of object types (as is typical for an object literal
+  // coming from different control‐flow branches) then process each alternate.
+  UnionType union = type.toMaybeUnionType();
+  if (union != null) {
+    for (JSType alt : union.getAlternates()) {
+      ObjectType altObj = ObjectType.cast(alt.restrictByNotNullOrUndefined());
+      if (altObj == null) {
+        continue;
+      }
+      for (String prop : constraintObj.getOwnPropertyNames()) {
+        // Only automatically widen properties that weren’t explicitly declared.
+        if (!altObj.isPropertyTypeDeclared(prop)) {
+          JSType propType = constraintObj.getPropertyType(prop);
+          JSType typeToInfer = propType;
+          // If the property isn’t present on this alternate, widen its type by
+          // unioning with undefined.
+          if (!altObj.hasProperty(prop)) {
+            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
+          }
+          altObj.defineInferredProperty(prop, typeToInfer, null);
+        }
+      }
+    }
+    return;
+  }
+
+  // Otherwise, treat type as a single object type.
   ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
   if (objType != null) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
-          JSType propType = constraintObj.getPropertyType(prop);
       if (!objType.isPropertyTypeDeclared(prop)) {
+        JSType propType = constraintObj.getPropertyType(prop);
         JSType typeToInfer = propType;
         if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+          typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
         }
         objType.defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
-  }
