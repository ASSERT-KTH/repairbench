diff --git a/tmp/ed7e48b1-671b-4a9c-9574-227ab7796d35_buggy.java b/tmp/eddc1ac6-1418-4e76-b27e-04511db1b1d0_fixed.java
index d57736b..eccb590 100644
--- a/tmp/ed7e48b1-671b-4a9c-9574-227ab7796d35_buggy.java
+++ b/tmp/eddc1ac6-1418-4e76-b27e-04511db1b1d0_fixed.java
@@ -1,39 +1,28 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
   if (constraintObj != null && constraintObj.isRecordType()) {
     ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
     if (objType != null) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
-          JSType propType = constraintObj.getPropertyType(prop);
+        // Only widen properties that have not been explicitly declared.
         if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
-            }
-            objType.defineInferredProperty(prop, typeToInfer, null);
+          JSType constraintPropType = constraintObj.getPropertyType(prop);
+          // Whether or not the property already exists on the inferred type,
+          // we want its type to be widened to include undefined.
+          JSType currentPropType = objType.hasProperty(prop)
+              ? objType.getPropertyType(prop)
+              : getNativeType(VOID_TYPE);
+          JSType widenedType =
+              getNativeType(VOID_TYPE).getLeastSupertype(currentPropType, constraintPropType);
+          objType.defineInferredProperty(prop, widenedType, null);
         }
       }
     }
   }
 }
\ No newline at end of file
