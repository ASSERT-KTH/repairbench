diff --git a/tmp/ce7f63bd-56e7-4a14-86d6-9f30ca4dda2b_buggy.java b/tmp/0d88ff80-4510-4dd9-afac-7a788778128e_fixed.java
index d57736b..5be18e4 100644
--- a/tmp/ce7f63bd-56e7-4a14-86d6-9f30ca4dda2b_buggy.java
+++ b/tmp/0d88ff80-4510-4dd9-afac-7a788778128e_fixed.java
@@ -1,39 +1,26 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
   if (constraintObj != null && constraintObj.isRecordType()) {
     ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
     if (objType != null) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
-          JSType propType = constraintObj.getPropertyType(prop);
+        // Only infer properties that were not explicitly declared.
         if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
-              typeToInfer =
+          JSType propType = constraintObj.getPropertyType(prop);
+          // Always widen the property type by unioning it with undefined.
+          // This ensures that even if the property exists on some branches,
+          // we get a common widened type (e.g. (number|undefined)) as required.
+          JSType widenedType =
               getNativeType(VOID_TYPE).getLeastSupertype(propType);
-            }
-            objType.defineInferredProperty(prop, typeToInfer, null);
+          objType.defineInferredProperty(prop, widenedType, null);
         }
       }
     }
   }
 }
\ No newline at end of file
