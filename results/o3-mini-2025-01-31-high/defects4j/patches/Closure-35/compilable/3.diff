diff --git a/tmp/3d3dff85-9e9f-416f-98ca-f39aba2be20f_buggy.java b/tmp/61247c5c-474e-4193-a89c-0f9b407efd15_fixed.java
index d57736b..8de6495 100644
--- a/tmp/3d3dff85-9e9f-416f-98ca-f39aba2be20f_buggy.java
+++ b/tmp/61247c5c-474e-4193-a89c-0f9b407efd15_fixed.java
@@ -1,39 +1,25 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
   if (constraintObj != null && constraintObj.isRecordType()) {
     ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
     if (objType != null) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
-          JSType propType = constraintObj.getPropertyType(prop);
+        // Only infer (and widen) properties that are not already declared.
         if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
-            }
+          JSType propType = constraintObj.getPropertyType(prop);
+          // Always widen to include undefined. This ensures that even if the property
+          // appears only in some branches, its type is the union of the constraint type
+          // and undefined.
+          JSType typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
           objType.defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
 }
\ No newline at end of file
