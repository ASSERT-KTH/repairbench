diff --git a/tmp/642e89a8-215f-4d5c-add1-803a9470497c_buggy.java b/tmp/373d0e77-663c-4723-ad20-32d94f6c579c_fixed.java
index d57736b..6d15b28 100644
--- a/tmp/642e89a8-215f-4d5c-add1-803a9470497c_buggy.java
+++ b/tmp/373d0e77-663c-4723-ad20-32d94f6c579c_fixed.java
@@ -1,39 +1,30 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
   if (constraintObj != null && constraintObj.isRecordType()) {
     ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
     if (objType != null) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
-          JSType propType = constraintObj.getPropertyType(prop);
         if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
-            }
+          // Instead of using the constraint’s property type directly when
+          // the property is already present, always widen the existing property’s
+          // type with undefined.  This makes sure that even if the property exists
+          // in some branches but is missing in others, its overall type includes undefined.
+          JSType currentPropType = objType.hasProperty(prop)
+              ? objType.getPropertyType(prop)
+              : null;
+          JSType typeToInfer = getNativeType(VOID_TYPE)
+              .getLeastSupertype(currentPropType != null
+                  ? currentPropType
+                  : constraintObj.getPropertyType(prop));
           objType.defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
 }
\ No newline at end of file
