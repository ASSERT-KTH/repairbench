diff --git a/tmp/d5bb5417-936b-4511-89fb-053ecf065abf_buggy.java b/tmp/63027895-9376-4d4d-91b2-da08f3e81485_fixed.java
index 5bc9804..75587c4 100644
--- a/tmp/d5bb5417-936b-4511-89fb-053ecf065abf_buggy.java
+++ b/tmp/63027895-9376-4d4d-91b2-da08f3e81485_fixed.java
@@ -1,85 +1,65 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)
     throws IOException
 {
     final ExternalTypeHandler ext = _externalTypeIdHandler.start();
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
+    // We will use a TokenBuffer to hold any “extra” tokens.
     TokenBuffer tokens = new TokenBuffer(p);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
-            // creator property?
+        p.nextToken(); // advance to the value
+        // Is it a creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
-                // first: let's check to see if this might be part of value with external type id:
-                // 11-Sep-2015, tatu: Important; do NOT pass buffer as last arg, but null,
-                //   since it is not the bean
+            // First: check to see if the external type handler wants to handle this
             if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {
-                    ;
+                // already handled as part of external type id handling
             } else {
-                    // Last creator property to set?
-                    if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {
-                        t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
-                        Object bean;
-                        try {
-                            bean = creator.build(ctxt, buffer);
-                        } catch (Exception e) {
-                            wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                            continue; // never gets here
-                        }
-                        // if so, need to copy all remaining tokens into buffer
-                        while (t == JsonToken.FIELD_NAME) {
-                            p.nextToken(); // to skip name
-                            tokens.copyCurrentStructure(p);
-                            t = p.nextToken();
-                        }
-                        if (bean.getClass() != _beanType.getRawClass()) {
-                            // !!! 08-Jul-2011, tatu: Could theoretically support; but for now
-                            //   it's too complicated, so bail out
-                            throw ctxt.mappingException("Can not create polymorphic instances with unwrapped values");
-                        }
-                        return ext.complete(p, ctxt, bean);
-                    }
+                // Instead of checking if this is the last parameter and then building the bean immediately,
+                // simply assign the value. Creation is deferred until all properties (including external type id)
+                // have been read.
+                buffer.assignParameter(creatorProp,
+                    _deserializeWithErrorWrapping(p, ctxt, creatorProp));
             }
             continue;
         }
         // Object Id property?
         if (buffer.readIdProperty(propName)) {
             continue;
         }
-            // regular property? needs buffering
+        // Regular bean property: buffer its value
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
             buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
             continue;
         }
-            // external type id (or property that depends on it)?
+        // External type id (or property that depends on it)?
         if (ext.handlePropertyValue(p, ctxt, propName, null)) {
             continue;
         }
-            /* As per [JACKSON-313], things marked as ignorable should not be
-             * passed to any setter
-             */
+        // Properties marked as ignorable should be handled appropriately
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
-            // "any property"?
+        // "any getter"
         if (_anySetter != null) {
             buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
         }
     }
 
-        // We hit END_OBJECT; resolve the pieces:
+    // End of object reached; complete the object by letting the external type handler
+    // combine the buffered properties (and external type information) with the creator.
     try {
         return ext.complete(p, ctxt, buffer, creator);
     } catch (Exception e) {
         wrapInstantiationProblem(e, ctxt);
-            return null; // never gets here
+        return null; // unreachable
     }
 }
\ No newline at end of file
