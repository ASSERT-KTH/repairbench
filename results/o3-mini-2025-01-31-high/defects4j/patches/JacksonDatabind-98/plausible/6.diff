diff --git a/tmp/51c180c5-d4c0-4193-bc37-b49d2f10b5ff_buggy.java b/tmp/c19a4f9d-6d8b-47cc-b343-759d0d297e55_fixed.java
index afcc27c..551dcab 100644
--- a/tmp/51c180c5-d4c0-4193-bc37-b49d2f10b5ff_buggy.java
+++ b/tmp/c19a4f9d-6d8b-47cc-b343-759d0d297e55_fixed.java
@@ -1,61 +1,67 @@
-    /**
-     * Variant called when creation of the POJO involves buffering of creator properties
-     * as well as property-based creator.
-     */
 public Object complete(JsonParser p, DeserializationContext ctxt,
         PropertyValueBuffer buffer, PropertyBasedCreator creator)
     throws IOException
 {
     // first things first: deserialize all data buffered:
     final int len = _properties.length;
     Object[] values = new Object[len];
     for (int i = 0; i < len; ++i) {
         String typeId = _typeIds[i];
         final ExtTypedProperty extProp = _properties[i];
         if (typeId == null) {
-                // let's allow missing both type and property (may already have been set, too)
+            // Allow missing both type and property; may already have been set
             if (_tokens[i] == null) {
                 continue;
             }
-                // but not just one
-                // 26-Oct-2012, tatu: As per [databind#94], must allow use of 'defaultImpl'
+            // But not just one: if no type id, check defaultImpl handling
             if (!extProp.hasDefaultType()) {
                 ctxt.reportInputMismatch(_beanType,
                         "Missing external type id property '%s'",
                         extProp.getTypePropertyName());
             } else {
                 typeId = extProp.getDefaultTypeId();
             }
         } else if (_tokens[i] == null) {
+            // Found a type id but not the associated property: error!
             SettableBeanProperty prop = extProp.getProperty();
             ctxt.reportInputMismatch(_beanType,
                     "Missing property '%s' for external type id '%s'",
-                        prop.getName(), _properties[i].getTypePropertyName());
+                    prop.getName(), extProp.getTypePropertyName());
         }
         values[i] = _deserialize(p, ctxt, i, typeId);
 
         final SettableBeanProperty prop = extProp.getProperty();
-            // also: if it's creator prop, fill in
+        // If the main property is a creator parameter, assign it directly...
         if (prop.getCreatorIndex() >= 0) {
             buffer.assignParameter(prop, values[i]);
 
-                // [databind#999] And maybe there's creator property for type id too?
+            // And if there is also an external type id property for this creator parameter:
             SettableBeanProperty typeProp = extProp.getTypeProperty();
-                // for now, should only be needed for creator properties, too
-                if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {
-                    // 31-May-2018, tatu: [databind#1328] if id is NOT plain `String`, need to
-                    //    apply deserializer... fun fun.
-                    buffer.assignParameter(typeProp, typeId);
+            if (typeProp != null && typeProp.getCreatorIndex() >= 0) {
+                Object typeValue;
+                // If the creator expects a String, we can use the type id as is.
+                if (typeProp.getType().getRawClass() == String.class) {
+                    typeValue = typeId;
+                } else {
+                    // Otherwise, we must deserialize the type id so that it has the expected type.
+                    // Create a temporary parser for a JSON String value of typeId.
+                    JsonParser typeParser = p.getCodec().getFactory()
+                        .createParser("\"" + typeId + "\"");
+                    typeParser.nextToken();
+                    typeValue = typeProp.getValueDeserializer().deserialize(typeParser, ctxt);
+                    typeParser.close();
+                }
+                buffer.assignParameter(typeProp, typeValue);
             }
         }
     }
     Object bean = creator.build(ctxt, buffer);
-        // third: assign non-creator properties
+    // assign any non-creator (regular) properties:
     for (int i = 0; i < len; ++i) {
         SettableBeanProperty prop = _properties[i].getProperty();
         if (prop.getCreatorIndex() < 0) {
             prop.set(bean, values[i]);
         }
     }
     return bean;
 }
\ No newline at end of file
