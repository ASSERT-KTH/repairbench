diff --git a/tmp/f7826fd2-c531-444f-9290-080a4ceb78d3_buggy.java b/tmp/40975864-d925-408e-a9b6-af1c5b03eed5_fixed.java
index 19fe1b4..74d5ed4 100644
--- a/tmp/f7826fd2-c531-444f-9290-080a4ceb78d3_buggy.java
+++ b/tmp/40975864-d925-408e-a9b6-af1c5b03eed5_fixed.java
@@ -1,17 +1,39 @@
 public static boolean isJSIdentifier(String s) {
-      int length = s.length();
-
-      if (length == 0 ||
-          !Character.isJavaIdentifierStart(s.charAt(0))) {
+  if (s == null || s.isEmpty()) {
     return false;
   }
-
-      for (int i = 1; i < length; i++) {
-        if (
-            !Character.isJavaIdentifierPart(s.charAt(i))) {
+  // Only allow ASCII letters, '$', or '_' as the first character.
+  char first = s.charAt(0);
+  if (!((first >= 'a' && first <= 'z') ||
+        (first >= 'A' && first <= 'Z') ||
+         first == '$' ||
+         first == '_')) {
+    return false;
+  }
+  // For subsequent characters, allow ASCII letters, digits, '$', or '_'.
+  for (int i = 1; i < s.length(); i++) {
+    char c = s.charAt(i);
+    if (!((c >= 'a' && c <= 'z') ||
+          (c >= 'A' && c <= 'Z') ||
+          (c >= '0' && c <= '9') ||
+           c == '$' ||
+           c == '_')) {
+      return false;
+    }
+  }
+  // Do not convert if the string is a reserved JavaScript keyword.
+  // This is a minimal set that covers the cases we care about.
+  String[] reservedWords = {
+    "break", "case", "catch", "continue", "debugger", "default",
+    "delete", "do", "else", "finally", "for", "function", "if",
+    "in", "instanceof", "new", "return", "switch", "this", "throw",
+    "try", "typeof", "var", "void", "while", "with", "class",
+    "enum", "export", "extends", "import", "super"
+  };
+  for (String reserved : reservedWords) {
+    if (s.equals(reserved)) {
       return false;
     }
   }
-
   return true;
 }
\ No newline at end of file
