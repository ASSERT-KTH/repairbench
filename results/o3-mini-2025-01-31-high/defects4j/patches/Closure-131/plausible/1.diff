diff --git a/tmp/ae7c1144-e3c6-40b5-9615-cdff16192ba2_buggy.java b/tmp/a403b78f-2e9c-456d-8ac4-042126c93f91_fixed.java
index 19fe1b4..7eaf866 100644
--- a/tmp/ae7c1144-e3c6-40b5-9615-cdff16192ba2_buggy.java
+++ b/tmp/a403b78f-2e9c-456d-8ac4-042126c93f91_fixed.java
@@ -1,17 +1,69 @@
 public static boolean isJSIdentifier(String s) {
-      int length = s.length();
+  if (s.isEmpty()) {
+    return false;
+  }
 
-      if (length == 0 ||
-          !Character.isJavaIdentifierStart(s.charAt(0))) {
+  // Only allow simple ASCII letters, digits, underscore, and dollar sign.
+  char c = s.charAt(0);
+  if (!((c >= 'A' && c <= 'Z') ||
+        (c >= 'a' && c <= 'z') ||
+         c == '$' ||
+         c == '_')) {
     return false;
   }
 
-      for (int i = 1; i < length; i++) {
-        if (
-            !Character.isJavaIdentifierPart(s.charAt(i))) {
+  for (int i = 1; i < s.length(); i++) {
+    c = s.charAt(i);
+    if (!((c >= 'A' && c <= 'Z') ||
+          (c >= 'a' && c <= 'z') ||
+          (c >= '0' && c <= '9') ||
+          c == '$' ||
+          c == '_')) {
       return false;
     }
   }
 
+  // Disallow reserved words. Even though many ECMAScript versions 
+  // permit using reserved words for property access, for the sake of 
+  // conversion we donâ€™t want to convert them.
+  if (s.equals("break") ||
+      s.equals("case") ||
+      s.equals("catch") ||
+      s.equals("class") ||
+      s.equals("const") ||
+      s.equals("continue") ||
+      s.equals("debugger") ||
+      s.equals("default") ||
+      s.equals("delete") ||
+      s.equals("do") ||
+      s.equals("else") ||
+      s.equals("enum") ||
+      s.equals("export") ||
+      s.equals("extends") ||
+      s.equals("finally") ||
+      s.equals("for") ||
+      s.equals("function") ||
+      s.equals("if") ||
+      s.equals("import") ||
+      s.equals("in") ||
+      s.equals("instanceof") ||
+      s.equals("new") ||
+      s.equals("return") ||
+      s.equals("super") ||
+      s.equals("switch") ||
+      s.equals("this") ||
+      s.equals("throw") ||
+      s.equals("try") ||
+      s.equals("typeof") ||
+      s.equals("var") ||
+      s.equals("void") ||
+      s.equals("while") ||
+      s.equals("with") ||
+      s.equals("null") ||
+      s.equals("true") ||
+      s.equals("false")) {
+    return false;
+  }
+
   return true;
 }
\ No newline at end of file
