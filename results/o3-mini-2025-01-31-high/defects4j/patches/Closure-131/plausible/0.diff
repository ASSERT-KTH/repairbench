diff --git a/tmp/1afd16c0-2954-46a9-9290-747de5987671_buggy.java b/tmp/1f074d70-552e-4db3-9f1c-84c0a74db50b_fixed.java
index 19fe1b4..7db89c0 100644
--- a/tmp/1afd16c0-2954-46a9-9290-747de5987671_buggy.java
+++ b/tmp/1f074d70-552e-4db3-9f1c-84c0a74db50b_fixed.java
@@ -1,17 +1,43 @@
 public static boolean isJSIdentifier(String s) {
-      int length = s.length();
+  if (s == null || s.isEmpty()) {
+    return false;
+  }
 
-      if (length == 0 ||
-          !Character.isJavaIdentifierStart(s.charAt(0))) {
+  // Only allow ASCII letters, '$' and '_' as the first character.
+  char firstChar = s.charAt(0);
+  if (!(firstChar == '$' || firstChar == '_' ||
+        (firstChar >= 'A' && firstChar <= 'Z') ||
+        (firstChar >= 'a' && firstChar <= 'z'))) {
     return false;
   }
 
-      for (int i = 1; i < length; i++) {
-        if (
-            !Character.isJavaIdentifierPart(s.charAt(i))) {
+  // Remaining characters may be ASCII letters, digits, '$' or '_'.
+  for (int i = 1, len = s.length(); i < len; i++) {
+    char ch = s.charAt(i);
+    if (!(ch == '$' || ch == '_' ||
+          (ch >= '0' && ch <= '9') ||
+          (ch >= 'A' && ch <= 'Z') ||
+          (ch >= 'a' && ch <= 'z'))) {
       return false;
     }
   }
 
+  // Disallow a fixed set of JavaScript reserved words.
+  // (We could add more reserved words if needed.)
+  if (s.equals("break") || s.equals("case") || s.equals("catch") ||
+      s.equals("class") || s.equals("const") || s.equals("continue") ||
+      s.equals("debugger") || s.equals("default") || s.equals("delete") ||
+      s.equals("do") || s.equals("else") || s.equals("enum") ||
+      s.equals("export") || s.equals("extends") || s.equals("finally") ||
+      s.equals("for") || s.equals("function") || s.equals("if") ||
+      s.equals("import") || s.equals("in") || s.equals("instanceof") ||
+      s.equals("new") || s.equals("return") || s.equals("super") ||
+      s.equals("switch") || s.equals("this") || s.equals("throw") ||
+      s.equals("try") || s.equals("typeof") || s.equals("var") ||
+      s.equals("void") || s.equals("while") || s.equals("with") ||
+      s.equals("yield")) {
+    return false;
+  }
+
   return true;
 }
\ No newline at end of file
