diff --git a/tmp/29b74fce-47a1-4ee0-a8c7-87c8262ed5e4_buggy.java b/tmp/d60a7e8b-7bb9-4da3-b332-152bc80f718b_fixed.java
index 19fe1b4..b68fa4a 100644
--- a/tmp/29b74fce-47a1-4ee0-a8c7-87c8262ed5e4_buggy.java
+++ b/tmp/d60a7e8b-7bb9-4da3-b332-152bc80f718b_fixed.java
@@ -1,17 +1,39 @@
 public static boolean isJSIdentifier(String s) {
-      int length = s.length();
-
-      if (length == 0 ||
-          !Character.isJavaIdentifierStart(s.charAt(0))) {
+  if (s == null || s.isEmpty()) {
     return false;
   }
-
-      for (int i = 1; i < length; i++) {
-        if (
-            !Character.isJavaIdentifierPart(s.charAt(i))) {
+  // Only allow simple ASCII identifiers.
+  // The first character must be a letter (A-Z or a-z), a dollar sign, or an underscore.
+  char first = s.charAt(0);
+  if (!((first >= 'a' && first <= 'z') || (first >= 'A' && first <= 'Z') || first == '$' || first == '_')) {
     return false;
   }
+  // The remaining characters can be letters, digits, dollar signs, or underscores.
+  for (int i = 1; i < s.length(); i++) {
+    char c = s.charAt(i);
+    if (!((c >= 'a' && c <= 'z') ||
+          (c >= 'A' && c <= 'Z') ||
+          (c >= '0' && c <= '9') ||
+          c == '$' ||
+          c == '_')) {
+      return false;
+    }
+  }
+  // Do not convert reserved words (or literal values) even if they consist of allowed characters.
+  if ("break".equals(s) || "case".equals(s) || "catch".equals(s) ||
+      "continue".equals(s) || "debugger".equals(s) || "default".equals(s) ||
+      "delete".equals(s) || "do".equals(s) || "else".equals(s) ||
+      "finally".equals(s) || "for".equals(s) || "function".equals(s) ||
+      "if".equals(s) || "in".equals(s) || "instanceof".equals(s) ||
+      "new".equals(s) || "return".equals(s) || "switch".equals(s) ||
+      "this".equals(s) || "throw".equals(s) || "try".equals(s) ||
+      "typeof".equals(s) || "var".equals(s) || "void".equals(s) ||
+      "while".equals(s) || "with".equals(s) ||
+      "class".equals(s) || "const".equals(s) || "enum".equals(s) ||
+      "export".equals(s) || "extends".equals(s) || "import".equals(s) ||
+      "super".equals(s) ||
+      "null".equals(s) || "true".equals(s) || "false".equals(s)) {
+    return false;
   }
-
   return true;
 }
\ No newline at end of file
