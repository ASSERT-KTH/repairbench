diff --git a/tmp/1b68c6fb-afdc-46bc-a20e-5659e9338600_buggy.java b/tmp/e0e37e07-8075-445c-999e-e909172ae99d_fixed.java
index 0eef537..3cf841c 100644
--- a/tmp/1b68c6fb-afdc-46bc-a20e-5659e9338600_buggy.java
+++ b/tmp/e0e37e07-8075-445c-999e-e909172ae99d_fixed.java
@@ -1,74 +1,75 @@
 /**
  * Calculates the Cholesky decomposition of the given matrix.
  * @param matrix the matrix to decompose
  * @param relativeSymmetryThreshold threshold above which off-diagonal
  * elements are considered too different and matrix not symmetric
  * @param absolutePositivityThreshold threshold below which diagonal
  * elements are considered null and matrix not positive definite
  * @exception NonSquareMatrixException if matrix is not square
  * @exception NotSymmetricMatrixException if matrix is not symmetric
  * @exception NotPositiveDefiniteMatrixException if the matrix is not
  * strictly positive definite
  * @see #CholeskyDecompositionImpl(RealMatrix)
  * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
  * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
  */
 public CholeskyDecompositionImpl(final RealMatrix matrix,
                                  final double relativeSymmetryThreshold,
                                  final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
     if (!matrix.isSquare()) {
         throw new NonSquareMatrixException(matrix.getRowDimension(),
                                            matrix.getColumnDimension());
     }
 
     final int order = matrix.getRowDimension();
     lTData   = matrix.getData();
     cachedL  = null;
     cachedLT = null;
 
-        // check the matrix before transformation
+    // Check that the matrix is symmetric and that the diagonal entries are initially positive.
     for (int i = 0; i < order; ++i) {
-
         final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
+        if (lI[i] < absolutePositivityThreshold) {
             throw new NotPositiveDefiniteMatrixException();
         }
-            // check off-diagonal elements (and reset them to 0)
+        // Ensure symmetry and zero out lower-triangular part.
         for (int j = i + 1; j < order; ++j) {
             final double[] lJ = lTData[j];
             final double lIJ = lI[j];
             final double lJI = lJ[i];
             final double maxDelta = 
                 relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
             if (Math.abs(lIJ - lJI) > maxDelta) {
                 throw new NotSymmetricMatrixException();
             }
             lJ[i] = 0;
        }
     }
 
-        // transform the matrix
+    // Perform the Cholesky transformation in place.
+    // (Note: The inner loop is processed in descending order so that when
+    //  subtracting the rank-1 update, all the later off-diagonals (columns) 
+    //  in the current row have already been scaled.)
     for (int i = 0; i < order; ++i) {
-
         final double[] ltI = lTData[i];
 
-            // check diagonal element
-
+        // IMPORTANT FIX: Check the (possibly updated) diagonal entry before taking its square root.
+        if (ltI[i] < absolutePositivityThreshold) {
+            throw new NotPositiveDefiniteMatrixException();
+        }
         ltI[i] = Math.sqrt(ltI[i]);
         final double inverse = 1.0 / ltI[i];
 
+        // Process the off-diagonal entries in descending order.
         for (int q = order - 1; q > i; --q) {
             ltI[q] *= inverse;
             final double[] ltQ = lTData[q];
             for (int p = q; p < order; ++p) {
                 ltQ[p] -= ltI[q] * ltI[p];
             }
         }
-
     }
-
 }
\ No newline at end of file
