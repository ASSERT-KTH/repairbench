diff --git a/tmp/1d049a3b-dd45-4a6a-b8cb-b50c740af8f6_buggy.java b/tmp/bfe46254-ee7c-494e-8006-3aca87dbec78_fixed.java
index 0722547..e988bfc 100644
--- a/tmp/1d049a3b-dd45-4a6a-b8cb-b50c740af8f6_buggy.java
+++ b/tmp/bfe46254-ee7c-494e-8006-3aca87dbec78_fixed.java
@@ -1,26 +1,33 @@
 @Override
 public void feedInput(byte[] buf, int start, int end) throws IOException
 {
     // Must not have remaining input
     if (_inputPtr < _inputEnd) {
         _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
     }
     if (end < start) {
         _reportError("Input end (%d) may not be before start (%d)", end, start);
     }
     // and shouldn't have been marked as end-of-input
     if (_endOfInput) {
         _reportError("Already closed, can not feed more input");
     }
-        // Time to update pointers first
+    // First, update processed count using previous bufferâ€™s length
     _currInputProcessed += _origBufferLen;
 
-        // Also need to adjust row start, to work as if it extended into the past wrt new buffer
-        _currInputRowStart = start - (_inputEnd - _currInputRowStart);
+    // Adjust the "row start" so that cumulative offsets and columns are correct.
+    // For the very first feed (i.e. _currInputProcessed==0) we want to pretend that the
+    // logical document started one byte before the first fed byte.
+    // For subsequent feeds we need to "carry over" the amount remaining from the previous buffer.
+    if (_currInputProcessed == 0) {
+        _currInputRowStart = start - 1;
+    } else {
+        _currInputRowStart = start - (_inputEnd - _currInputRowStart) + 1;
+    }
 
-        // And then update buffer settings
+    // Then update buffer pointers and length info
     _inputBuffer = buf;
     _inputPtr = start;
     _inputEnd = end;
     _origBufferLen = end - start;
 }
\ No newline at end of file
