diff --git a/tmp/127d5ff2-fefd-487c-ac1d-9767e18a21c1_buggy.java b/tmp/3767c0b4-b167-4499-be7d-8f4ff0a56296_fixed.java
index 0722547..bacaccf 100644
--- a/tmp/127d5ff2-fefd-487c-ac1d-9767e18a21c1_buggy.java
+++ b/tmp/3767c0b4-b167-4499-be7d-8f4ff0a56296_fixed.java
@@ -1,26 +1,29 @@
 @Override
 public void feedInput(byte[] buf, int start, int end) throws IOException
 {
     // Must not have remaining input
     if (_inputPtr < _inputEnd) {
         _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
     }
     if (end < start) {
         _reportError("Input end (%d) may not be before start (%d)", end, start);
     }
     // and shouldn't have been marked as end-of-input
     if (_endOfInput) {
         _reportError("Already closed, can not feed more input");
     }
-        // Time to update pointers first
-        _currInputProcessed += _origBufferLen;
     
-        // Also need to adjust row start, to work as if it extended into the past wrt new buffer
+    // NOTE: Do NOT update _currInputProcessed here.
+    // The original update (_currInputProcessed += _origBufferLen) was causing
+    // cumulative offsets to be too high.
+    
+    // Adjust row start so that offsets in the new segment are computed as if the
+    // previous content “preceded” the new buffer.
     _currInputRowStart = start - (_inputEnd - _currInputRowStart);
     
-        // And then update buffer settings
+    // Update buffer settings
     _inputBuffer = buf;
     _inputPtr = start;
     _inputEnd = end;
     _origBufferLen = end - start;
 }
\ No newline at end of file
