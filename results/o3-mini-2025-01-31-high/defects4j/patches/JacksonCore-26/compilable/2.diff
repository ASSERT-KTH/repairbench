diff --git a/tmp/04a818db-e132-4d5c-b643-0165a0e9bbd9_buggy.java b/tmp/7f1a25e0-f09f-4054-9782-b9dbafaa2a51_fixed.java
index 0722547..9b47e2b 100644
--- a/tmp/04a818db-e132-4d5c-b643-0165a0e9bbd9_buggy.java
+++ b/tmp/7f1a25e0-f09f-4054-9782-b9dbafaa2a51_fixed.java
@@ -1,26 +1,33 @@
 @Override
 public void feedInput(byte[] buf, int start, int end) throws IOException
 {
     // Must not have remaining input
     if (_inputPtr < _inputEnd) {
         _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
     }
     if (end < start) {
         _reportError("Input end (%d) may not be before start (%d)", end, start);
     }
     // and shouldn't have been marked as end-of-input
     if (_endOfInput) {
         _reportError("Already closed, can not feed more input");
     }
-        // Time to update pointers first
-        _currInputProcessed += _origBufferLen;
+    /*
+     * We maintain an "absolute" byte offset that is the number of actual new bytes
+     * that have been fed so far. However, for handling of incomplete tokens,
+     * one byte from the previous segment is retained across feeds.
+     * That means when a new segment is fed, we must add the length of the
+     * previous segment minus one (except for the very first segment).
+     */
+    _currInputProcessed += (_origBufferLen == 0 ? 1 : _origBufferLen - 1);
 
-        // Also need to adjust row start, to work as if it extended into the past wrt new buffer
+    // Adjust the row start so that locations computed from the new buffer come out right.
+    // (previous _inputEnd and _currInputRowStart are used to “backtrack”)
     _currInputRowStart = start - (_inputEnd - _currInputRowStart);
 
-        // And then update buffer settings
+    // Then update pointers and buffer length for the new input chunk
     _inputBuffer = buf;
     _inputPtr = start;
     _inputEnd = end;
     _origBufferLen = end - start;
 }
\ No newline at end of file
