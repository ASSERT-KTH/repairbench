diff --git a/tmp/ca76c75d-e83f-4be1-9ee6-c52f767ea61a_buggy.java b/tmp/f6b4b559-93e5-4f4f-ad7d-2132f0be4555_fixed.java
index 0722547..c432983 100644
--- a/tmp/ca76c75d-e83f-4be1-9ee6-c52f767ea61a_buggy.java
+++ b/tmp/f6b4b559-93e5-4f4f-ad7d-2132f0be4555_fixed.java
@@ -1,26 +1,30 @@
 @Override
 public void feedInput(byte[] buf, int start, int end) throws IOException
 {
     // Must not have remaining input
     if (_inputPtr < _inputEnd) {
         _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
     }
     if (end < start) {
         _reportError("Input end (%d) may not be before start (%d)", end, start);
     }
     // and shouldn't have been marked as end-of-input
     if (_endOfInput) {
         _reportError("Already closed, can not feed more input");
     }
-        // Time to update pointers first
+    // Advance the overall counter by the length of the previous segment:
     _currInputProcessed += _origBufferLen;
 
-        // Also need to adjust row start, to work as if it extended into the past wrt new buffer
-        _currInputRowStart = start - (_inputEnd - _currInputRowStart);
+    // Adjust the row start to pretend that the buffer actually extended further back.
+    // (Instead of subtracting the old length from the new start we subtract the old input
+    //  pointer, so that when the previous buffer was fully consumed, we get:
+    //      newRowStart = (_currInputRowStart - oldInputPtr) + newStart
+    // This yields correct offsets as verified by the async location tests.)
+    _currInputRowStart = (_currInputRowStart - _inputPtr) + start;
 
-        // And then update buffer settings
+    // Now update the buffer and pointers:
     _inputBuffer = buf;
     _inputPtr = start;
     _inputEnd = end;
     _origBufferLen = end - start;
 }
\ No newline at end of file
