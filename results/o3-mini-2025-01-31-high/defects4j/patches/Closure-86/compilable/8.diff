diff --git a/tmp/70956e0f-cfcf-4caa-bb0f-b1c0034673d8_buggy.java b/tmp/fc536295-e393-44e0-b99e-35f810d0e09e_fixed.java
index a3709ee..33de27f 100644
--- a/tmp/70956e0f-cfcf-4caa-bb0f-b1c0034673d8_buggy.java
+++ b/tmp/fc536295-e393-44e0-b99e-35f810d0e09e_fixed.java
@@ -1,71 +1,101 @@
 /**
  * @param locals A predicate to apply to unknown local values.
  * @return Whether the node is known to be a value that is not a reference
  *     outside the expression scope.
  */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
+      // For compound assignments (like x += y) the operator
+      // “forces” a local (computed) value.
+      if (isAssignmentOp(value)) {
+        return true;
+      }
+      // For a simple assignment x = something, the aliasing of the left‐hand side
+      // matters. (Rather than calling locals.apply(value) on the ASSIGN node we look
+      // at its left child, since that is the actual variable name.)
       return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
+          || (locals.apply(value.getFirstChild())
               && evaluatesToLocalValue(value.getLastChild(), locals));
+
     case Token.COMMA:
+      // Only the right side of a comma matters.
       return evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.AND:
     case Token.OR:
+      // For && and || both operands force a computed value.
       return evaluatesToLocalValue(value.getFirstChild(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.HOOK:
+      // For the conditional operator, only the two possible result expressions matter.
       return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.INC:
     case Token.DEC:
+      // For postfix operators, the value of x++ is the old (possibly non-local) value;
+      // for prefix (++x) the new (primitive) number is produced.
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
         return evaluatesToLocalValue(value.getFirstChild(), locals);
       } else {
         return true;
       }
+
     case Token.THIS:
       return locals.apply(value);
+
     case Token.NAME:
       return isImmutableValue(value) || locals.apply(value);
+
     case Token.GETELEM:
     case Token.GETPROP:
-        // There is no information about the locality of object properties.
+      // We have no extra knowledge of property accesses.
       return locals.apply(value);
+
     case Token.CALL:
+      // For a call, several heuristics apply.
+      // (a) If the call is on a property access whose receiver is a NEW expression,
+      //     then the value of the call is tied to the freshly created object.
+      if (value.getFirstChild().getType() == Token.GETPROP) {
+        Node receiver = value.getFirstChild().getFirstChild();
+        if (receiver.getType() == Token.NEW) {
+          return evaluatesToLocalValue(receiver, locals);
+        }
+      }
       return callHasLocalResult(value)
           || isToStringMethodCall(value)
           || locals.apply(value);
+
     case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+      // Instead of claiming that any new expression yields a local value,
+      // defer to the supplied predicate. For example, "new x()"
+      // will be non-local if x isn’t known to be a local constructor.
+      return locals.apply(value);
+
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+      // Literals (or function definitions, regexp literals, and object/array literals)
+      // are known to be local.
       return true;
+
     case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+      // The IN operator always yields a computed (local) value.
       return true;
+
     default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+      // Other operators. For simple operators or those that always produce a new value,
+      // we optimistically assume they are local.
       if (isAssignmentOp(value)
           || isSimpleOperator(value)
           || isImmutableValue(value)) {
         return true;
       }
-
       throw new IllegalStateException(
           "Unexpected expression node" + value +
           "\n parent:" + value.getParent());
   }
 }
\ No newline at end of file
