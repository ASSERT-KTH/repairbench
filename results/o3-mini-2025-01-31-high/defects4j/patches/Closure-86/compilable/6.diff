diff --git a/tmp/54630be2-f933-41c6-a941-0fc57ec725f4_buggy.java b/tmp/5d2e0473-c836-450a-891d-d170d02503a6_fixed.java
index a3709ee..2ab08a4 100644
--- a/tmp/54630be2-f933-41c6-a941-0fc57ec725f4_buggy.java
+++ b/tmp/5d2e0473-c836-450a-891d-d170d02503a6_fixed.java
@@ -1,71 +1,91 @@
-  /**
-   * @param locals A predicate to apply to unknown local values.
-   * @return Whether the node is known to be a value that is not a reference
-   *     outside the expression scope.
-   */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
-      case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
-        return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
-                && evaluatesToLocalValue(value.getLastChild(), locals));
+    case Token.ASSIGN: {
+      // In a simple assignment “x = rhs”, the value of the expression is
+      // considered “local” (i.e. not escaping) only if either the rhs is an
+      // immutable literal, or if we’re writing to a local name and the rhs’s
+      // computed value is itself local.
+      Node lhs = value.getFirstChild();
+      Node rhs = value.getLastChild();
+      if (lhs.getType() == Token.NAME && locals.apply(lhs)) {
+        return evaluatesToLocalValue(rhs, locals);
+      }
+      return NodeUtil.isImmutableValue(rhs);
+    }
+
     case Token.COMMA:
+      // Only the value of the last comma child matters.
       return evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.AND:
     case Token.OR:
+      // For logical operators both sides must evaluate to a local value.
       return evaluatesToLocalValue(value.getFirstChild(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.HOOK:
+      // In a ternary expression only the two branch values are considered.
       return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.INC:
     case Token.DEC:
+      // For increment/decrement, the prefix case returns the new (numeric)
+      // value, which is a fresh primitive, but the postfix value is the old
+      // value (that might be externally visible).
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-          return evaluatesToLocalValue(value.getFirstChild(), locals);
+        // Prefix: Always produces a new primitive.
+        return true;
       } else {
-          return true;
+        // Postfix: returns the original value.
+        return false;
       }
+
     case Token.THIS:
       return locals.apply(value);
+
     case Token.NAME:
-        return isImmutableValue(value) || locals.apply(value);
+      // A name is local only if it is an immutable value or the locally declared one.
+      return NodeUtil.isImmutableValue(value) || locals.apply(value);
+
     case Token.GETELEM:
     case Token.GETPROP:
-        // There is no information about the locality of object properties.
+      // We don’t have enough info about object property aliases.
       return locals.apply(value);
+
     case Token.CALL:
       return callHasLocalResult(value)
           || isToStringMethodCall(value)
           || locals.apply(value);
+
     case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+      // Instead of assuming a NEW always produces a local result, we delegate to
+      // callHasLocalResult. That helper will return false for a “new” expression if
+      // we can’t rule out aliasing (as in “new x()”) but might return true when we’re
+      // sure no alias escapes (for example, a call to a pure constructor).
+      return callHasLocalResult(value);
+
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+      // Literals and inline functions/objects are considered local.
       return true;
+
     case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+      // In operator results in a local boolean.
       return true;
+
     default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+      // For other operators, if they are assignments, simple operators, or
+      // already immutable, then the overall expression is local.
       if (isAssignmentOp(value)
           || isSimpleOperator(value)
-            || isImmutableValue(value)) {
+          || NodeUtil.isImmutableValue(value)) {
         return true;
       }
-
       throw new IllegalStateException(
           "Unexpected expression node" + value +
           "\n parent:" + value.getParent());
   }
 }
\ No newline at end of file
