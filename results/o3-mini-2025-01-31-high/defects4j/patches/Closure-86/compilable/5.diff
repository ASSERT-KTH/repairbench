diff --git a/tmp/ec5553f5-21dd-407e-9503-5cb60c9fa82b_buggy.java b/tmp/05afe53f-0e6d-4ee8-bea2-d3d33d7117fd_fixed.java
index a3709ee..85f8f1e 100644
--- a/tmp/ec5553f5-21dd-407e-9503-5cb60c9fa82b_buggy.java
+++ b/tmp/05afe53f-0e6d-4ee8-bea2-d3d33d7117fd_fixed.java
@@ -1,71 +1,76 @@
-  /**
-   * @param locals A predicate to apply to unknown local values.
-   * @return Whether the node is known to be a value that is not a reference
-   *     outside the expression scope.
-   */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
+      // For assignments the aliasing comes from the lhs.
+      // e.g. in "x=1" we ignore x if 1 (the rhs) is immutable.
       return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
+          || (locals.apply(value.getFirstChild())
               && evaluatesToLocalValue(value.getLastChild(), locals));
+
     case Token.COMMA:
+      // Only the last comma operand matters.
       return evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.AND:
     case Token.OR:
+      // Both operands are important.
       return evaluatesToLocalValue(value.getFirstChild(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.HOOK:
+      // Only the true and false branches matter.
       return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.INC:
     case Token.DEC:
+      // Pre-increment yields the new primitive value (local),
+      // whereas post-increment produces the original value.
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-          return evaluatesToLocalValue(value.getFirstChild(), locals);
+        // pre-increment (e.g. ++x) always produces a new number.
+        return true;
       } else {
-          return true;
+        // post-increment (e.g. x++) returns the old value.
+        return evaluatesToLocalValue(value.getFirstChild(), locals);
       }
+
     case Token.THIS:
       return locals.apply(value);
+
     case Token.NAME:
       return isImmutableValue(value) || locals.apply(value);
+
     case Token.GETELEM:
     case Token.GETPROP:
-        // There is no information about the locality of object properties.
+      // Without extra alias-tracking for properties, we rely on the predicate.
       return locals.apply(value);
+
     case Token.CALL:
       return callHasLocalResult(value)
           || isToStringMethodCall(value)
           || locals.apply(value);
+
     case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+      // We no longer assume NEW always yields a local result.
+      // Its locality is decided by the predicate.
+      return locals.apply(value);
+
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+      // Literals are considered local.
       return true;
+
     case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
       return true;
+
     default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
-        if (isAssignmentOp(value)
-            || isSimpleOperator(value)
-            || isImmutableValue(value)) {
+      // Operators like x+=y, comparisons, etc.
+      if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
         return true;
       }
-
       throw new IllegalStateException(
-            "Unexpected expression node" + value +
-            "\n parent:" + value.getParent());
+          "Unexpected expression node" + value + "\n parent:" + value.getParent());
   }
 }
\ No newline at end of file
