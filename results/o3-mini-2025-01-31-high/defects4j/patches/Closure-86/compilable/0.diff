diff --git a/tmp/8a9b659c-0247-4e55-9328-5f1af72994db_buggy.java b/tmp/868141ae-519c-45e7-90f1-6d6eeb8a4c37_fixed.java
index a3709ee..3e2c8f0 100644
--- a/tmp/8a9b659c-0247-4e55-9328-5f1af72994db_buggy.java
+++ b/tmp/868141ae-519c-45e7-90f1-6d6eeb8a4c37_fixed.java
@@ -1,71 +1,77 @@
 /**
  * @param locals A predicate to apply to unknown local values.
  * @return Whether the node is known to be a value that is not a reference
  *     outside the expression scope.
  */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
+      // For "x = y", the assignment is local only if the right‐hand side (y)
+      // is an immutable value or if the left side “x” is known to be local.
       return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
-                && evaluatesToLocalValue(value.getLastChild(), locals));
+          || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
     case Token.COMMA:
+      // Only the right-hand operand determines the value of a comma expression.
       return evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.AND:
     case Token.OR:
+      // Both operands must yield a local value.
       return evaluatesToLocalValue(value.getFirstChild(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.HOOK:
+      // In a ternary operator only the two results matter.
       return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.INC:
     case Token.DEC:
+      // For prefix increments/decrements, the result is a new primitive value;
+      // for postfix, the original value is returned.
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
+        // Postfix: the previous value matters.
         return evaluatesToLocalValue(value.getFirstChild(), locals);
       } else {
+        // Prefix: the result is a new primitive.
         return true;
       }
     case Token.THIS:
       return locals.apply(value);
     case Token.NAME:
+      // A name is local only if it’s known to be immutable or if it
+      // is declared locally.
       return isImmutableValue(value) || locals.apply(value);
     case Token.GETELEM:
     case Token.GETPROP:
-        // There is no information about the locality of object properties.
+      // We have no detailed info on object property accesses.
       return locals.apply(value);
     case Token.CALL:
-        return callHasLocalResult(value)
-            || isToStringMethodCall(value)
-            || locals.apply(value);
+      // A function call is known to yield a local result
+      // only if we can analyze its call target. Do not simply fall back
+      // to "locals" on the CALL node.
+      return callHasLocalResult(value) || isToStringMethodCall(value);
     case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+      // Instead of always returning true, we now rely on callHasLocalResult.
+      // This ensures that “new” expressions (like "new x()") are considered non‐local
+      // when we cannot be sure that the constructed object has not been aliased.
+      return callHasLocalResult(value);
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+      // Literals or function/regexp/array/object literals always yield a local value.
       return true;
     case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+      // The IN operator is treated as forcing a local value.
       return true;
     default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+      // For most operators that force a local (such as simple arithmetic,
+      // assignment ops, or immutable values), we assume the result is local.
       if (isAssignmentOp(value)
           || isSimpleOperator(value)
           || isImmutableValue(value)) {
         return true;
       }
-
       throw new IllegalStateException(
           "Unexpected expression node" + value +
           "\n parent:" + value.getParent());
   }
 }
\ No newline at end of file
