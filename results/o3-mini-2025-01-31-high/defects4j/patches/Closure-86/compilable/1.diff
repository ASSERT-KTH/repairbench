diff --git a/tmp/49e1823a-0007-4b5d-b277-cb4c6de65583_buggy.java b/tmp/a3f0120b-71b7-4681-955a-d3f8e5c18e71_fixed.java
index a3709ee..eafb72e 100644
--- a/tmp/49e1823a-0007-4b5d-b277-cb4c6de65583_buggy.java
+++ b/tmp/a3f0120b-71b7-4681-955a-d3f8e5c18e71_fixed.java
@@ -1,71 +1,72 @@
 /**
  * @param locals A predicate to apply to unknown local values.
  * @return Whether the node is known to be a value that is not a reference
  *     outside the expression scope.
  */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
-        return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
-                && evaluatesToLocalValue(value.getLastChild(), locals));
+      // When assigning, only the left‐hand side (the alias) determines
+      // whether the result is “local” if the right‐hand side isn’t immutable.
+      Node lhs = value.getFirstChild();
+      Node rhs = value.getLastChild();
+      return NodeUtil.isImmutableValue(rhs)
+          || (locals.apply(lhs) && evaluatesToLocalValue(rhs, locals));
     case Token.COMMA:
+      // Only the right operand of a comma matters.
       return evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.AND:
     case Token.OR:
+      // Both operands must evaluate to a local value.
       return evaluatesToLocalValue(value.getFirstChild(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.HOOK:
+      // Only the results of the two branches (second and third children)
+      // determine locality.
       return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.INC:
     case Token.DEC:
+      // For increment/decrement, if the old value is used (post-inc/dec)
+      // then we care about the operand; but pre-inc/dec produces a new value.
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
         return evaluatesToLocalValue(value.getFirstChild(), locals);
       } else {
         return true;
       }
     case Token.THIS:
       return locals.apply(value);
     case Token.NAME:
       return isImmutableValue(value) || locals.apply(value);
     case Token.GETELEM:
     case Token.GETPROP:
-        // There is no information about the locality of object properties.
+      // No information about property references; rely on the predicate.
       return locals.apply(value);
     case Token.CALL:
       return callHasLocalResult(value)
           || isToStringMethodCall(value)
           || locals.apply(value);
     case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+      // Instead of assuming a NEW always yields a local value,
+      // determine it via similar logic to CALL.
+      return callHasLocalResult(value) || locals.apply(value);
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+      // Literals (and functions/regexps) always yield local values.
       return true;
     case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+      // The result of the IN operator is a primitive.
       return true;
     default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
-        if (isAssignmentOp(value)
-            || isSimpleOperator(value)
-            || isImmutableValue(value)) {
+      // Other operators (e.g. assignment operators, simple arithmetic,
+      // comparisons) force a local value.
+      if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
         return true;
       }
-
       throw new IllegalStateException(
           "Unexpected expression node" + value +
           "\n parent:" + value.getParent());
   }
 }
\ No newline at end of file
