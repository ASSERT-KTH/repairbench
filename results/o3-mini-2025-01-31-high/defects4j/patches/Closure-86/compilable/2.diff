diff --git a/tmp/4931c561-e8c7-4a66-9034-3af997c77de1_buggy.java b/tmp/6350c1e2-c582-446c-afe0-fbba5cba51cf_fixed.java
index a3709ee..a9e9a33 100644
--- a/tmp/4931c561-e8c7-4a66-9034-3af997c77de1_buggy.java
+++ b/tmp/6350c1e2-c582-446c-afe0-fbba5cba51cf_fixed.java
@@ -1,71 +1,80 @@
 /**
  * @param locals A predicate to apply to unknown local values.
  * @return Whether the node is known to be a value that is not a reference
  *     outside the expression scope.
  */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
+      // For an assignment "LHS = RHS", if the RHS is immutable then the result is local;
+      // otherwise the assignment is local only if the LHS is known to be a local name.
       return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
+          || (locals.apply(value.getFirstChild())
               && evaluatesToLocalValue(value.getLastChild(), locals));
     case Token.COMMA:
+      // Only the right-hand operand matters.
       return evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.AND:
     case Token.OR:
+      // Both operands must be local.
       return evaluatesToLocalValue(value.getFirstChild(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.HOOK:
+      // Only the 'then' and 'else' parts matter.
       return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.INC:
     case Token.DEC:
+      // For prefix ++/--, the result is the updated primitive value (local);
+      // for postfix, the pre-update value matters.
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
         return evaluatesToLocalValue(value.getFirstChild(), locals);
       } else {
         return true;
       }
     case Token.THIS:
       return locals.apply(value);
     case Token.NAME:
       return isImmutableValue(value) || locals.apply(value);
     case Token.GETELEM:
     case Token.GETPROP:
-        // There is no information about the locality of object properties.
+      // There is no detailed information about property accesses, so defer to the predicate.
       return locals.apply(value);
     case Token.CALL:
-        return callHasLocalResult(value)
-            || isToStringMethodCall(value)
-            || locals.apply(value);
+      // A call is local if it is known to produce a local result or is a toString() call.
+      if (callHasLocalResult(value) || isToStringMethodCall(value)) {
+        return true;
+      }
+      // In method calls the receiver can “localize” the call result.
+      Node callee = value.getFirstChild();
+      if (callee.getType() == Token.GETPROP) {
+        Node receiver = callee.getFirstChild();
+        if (evaluatesToLocalValue(receiver, locals)) {
+          return true;
+        }
+      }
+      return locals.apply(value);
     case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+      // A new expression is considered to yield a local value
+      // only if we can tell its constructor call produces an unaliased result.
+      return callHasLocalResult(value);
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+      // Literals and function/regexp/array/object expressions are deemed local.
       return true;
     case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
       return true;
     default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+      // Other operators force a local value.
       if (isAssignmentOp(value)
           || isSimpleOperator(value)
           || isImmutableValue(value)) {
         return true;
       }
-
       throw new IllegalStateException(
           "Unexpected expression node" + value +
           "\n parent:" + value.getParent());
   }
 }
\ No newline at end of file
