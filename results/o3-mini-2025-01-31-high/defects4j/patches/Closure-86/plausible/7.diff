diff --git a/tmp/ef9ebab7-d0ae-4478-90fd-aa75f9a4b93d_buggy.java b/tmp/fe0526fd-1093-45bb-a95e-044623bcb89f_fixed.java
index a3709ee..54509df 100644
--- a/tmp/ef9ebab7-d0ae-4478-90fd-aa75f9a4b93d_buggy.java
+++ b/tmp/fe0526fd-1093-45bb-a95e-044623bcb89f_fixed.java
@@ -1,71 +1,68 @@
-  /**
-   * @param locals A predicate to apply to unknown local values.
-   * @return Whether the node is known to be a value that is not a reference
-   *     outside the expression scope.
-   */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
+      // For an assignment, we are local if the right‐hand side is immutable or
+      // if the assignment itself is known to be local and its right‐hand side is local.
       return NodeUtil.isImmutableValue(value.getLastChild())
           || (locals.apply(value)
               && evaluatesToLocalValue(value.getLastChild(), locals));
     case Token.COMMA:
+      // Only the rightmost value matters.
       return evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.AND:
     case Token.OR:
+      // Both operands must yield a local value.
       return evaluatesToLocalValue(value.getFirstChild(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.HOOK:
+      // Only the two branch values determine the local result.
       return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.INC:
     case Token.DEC:
+      // For ++/--, if the node is in postfix mode then its value is the old one;
+      // if it is prefix then the result is the computed number.
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
         return evaluatesToLocalValue(value.getFirstChild(), locals);
       } else {
         return true;
       }
     case Token.THIS:
       return locals.apply(value);
     case Token.NAME:
       return isImmutableValue(value) || locals.apply(value);
     case Token.GETELEM:
     case Token.GETPROP:
-        // There is no information about the locality of object properties.
+      // We have no intrinsic info about property accesses.
       return locals.apply(value);
     case Token.CALL:
-        return callHasLocalResult(value)
-            || isToStringMethodCall(value)
-            || locals.apply(value);
+      // Only certain calls produce a local result.
+      // Remove the fallback to locals.apply(value) so that calls like f(), or
+      // ones to methods known to modify their receiver (e.g. setLocation)
+      // aren’t mistakenly treated as local.
+      return callHasLocalResult(value) || isToStringMethodCall(value);
     case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+      // We can’t be sure a newly created object hasn’t been aliased.
+      return false;
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+      // Literals and functions (or regexps) are always local.
       return true;
     case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+      // For the IN operator we assume the result is local.
       return true;
     default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+      // Other operators force a local value if they’re assignments, simple
+      // operators, or immutable.
       if (isAssignmentOp(value)
           || isSimpleOperator(value)
           || isImmutableValue(value)) {
         return true;
       }
-
       throw new IllegalStateException(
           "Unexpected expression node" + value +
           "\n parent:" + value.getParent());
   }
 }
\ No newline at end of file
