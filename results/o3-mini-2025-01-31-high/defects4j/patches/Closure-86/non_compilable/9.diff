diff --git a/tmp/72415cfe-ce96-4984-abf1-4fc92994ba71_buggy.java b/tmp/9cc1ecbe-ad6e-4163-aadd-a316c3b04eb8_fixed.java
index a3709ee..27e8333 100644
--- a/tmp/72415cfe-ce96-4984-abf1-4fc92994ba71_buggy.java
+++ b/tmp/9cc1ecbe-ad6e-4163-aadd-a316c3b04eb8_fixed.java
@@ -1,71 +1,79 @@
-  /**
-   * @param locals A predicate to apply to unknown local values.
-   * @return Whether the node is known to be a value that is not a reference
-   *     outside the expression scope.
-   */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
+      // A result that is aliased by a non-local name is effectively the
+      // same as returning a non-local name, but this doesn’t matter if the
       // value is immutable.
       return NodeUtil.isImmutableValue(value.getLastChild())
           || (locals.apply(value)
               && evaluatesToLocalValue(value.getLastChild(), locals));
     case Token.COMMA:
+      // Only the last expression in a comma matters.
       return evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.AND:
     case Token.OR:
+      // Both operands must be local.
       return evaluatesToLocalValue(value.getFirstChild(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.HOOK:
+      // Only the two result expressions matter.
       return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.INC:
     case Token.DEC:
+      // For prefix inc/dec, the value of the expression is the updated value.
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
         return evaluatesToLocalValue(value.getFirstChild(), locals);
       } else {
+        // Postfix: For side‐effect analysis we conservatively assume a change.
         return true;
       }
     case Token.THIS:
       return locals.apply(value);
     case Token.NAME:
       return isImmutableValue(value) || locals.apply(value);
     case Token.GETELEM:
     case Token.GETPROP:
-        // There is no information about the locality of object properties.
+      // There is no further information about the property, so we rely on
+      // the local predicate.
       return locals.apply(value);
     case Token.CALL:
+      // A CALL is local if (a) the call is known to return a local value,
+      // (b) it is a toString() call, or (c) the node itself is known to be local.
       return callHasLocalResult(value)
           || isToStringMethodCall(value)
           || locals.apply(value);
     case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+      // Instead of always returning true, we now distinguish between cases.
+      // When constructing an object via "new", the result is considered local
+      // only if we know the constructor is locally defined.
+      // In BROKEN_NEW mode (typically used in tests over externs or unknown
+      // constructors), we use the locality of the constructor (the first child)
+      // to decide. Otherwise we rely on callHasLocalResult(…) to be conservative.
+      if (BROKEN_NEW) {
+        return locals.apply(value.getFirstChild());
+      } else {
+        return callHasLocalResult(value);
+      }
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+      // Literals (and functions, regexps, literal arrays/objects) are inherently local.
       return true;
     case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+      // The IN operator always produces a primitive result.
       return true;
     default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+      // For any other operator, if it is an assignment op or a simple operator
+      // or already an immutable value, assume it yields a local value.
       if (isAssignmentOp(value)
           || isSimpleOperator(value)
           || isImmutableValue(value)) {
         return true;
       }
-
       throw new IllegalStateException(
           "Unexpected expression node" + value +
           "\n parent:" + value.getParent());
   }
 }
\ No newline at end of file
