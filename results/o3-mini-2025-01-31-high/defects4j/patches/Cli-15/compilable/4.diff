diff --git a/tmp/8bf26952-f5f0-4f1b-8e73-27b119c418f7_buggy.java b/tmp/53e2bdd0-f2cf-4d4b-8443-5028d7985f3a_fixed.java
index 4e8b037..0ade6b8 100644
--- a/tmp/8bf26952-f5f0-4f1b-8e73-27b119c418f7_buggy.java
+++ b/tmp/53e2bdd0-f2cf-4d4b-8443-5028d7985f3a_fixed.java
@@ -1,20 +1,29 @@
-    public List getValues(final Option option,
-                          List defaultValues) {
-        // initialize the return list
+public List getValues(final Option option, List defaultValues) {
+    // get user-specified values (if any)
     List valueList = (List) values.get(option);
+    if (valueList == null) {
+        valueList = new ArrayList();
+    } else {
+        // copy the list so we don't modify the original
+        valueList = new ArrayList(valueList);
+    }
 
-        // grab the correct default values
-        if ((valueList == null) || valueList.isEmpty()) {
-            valueList = defaultValues;
+    // Determine which default list to use.
+    // Prefer the passed-in defaultValues, but if thatâ€™s null or empty, 
+    // use the defaults stored in this.defaultValues.
+    List actualDefaults = defaultValues;
+    if (actualDefaults == null || actualDefaults.isEmpty()) {
+        actualDefaults = (List) this.defaultValues.get(option);
     }
 
-        // augment the list with the default values
-        if ((valueList == null) || valueList.isEmpty()) {
-            valueList = (List) this.defaultValues.get(option);
+    // If there are defaults available, and the user did not supply enough values,
+    // append the missing default(s). The rule is: if the user provided n values, use 
+    // the default at position n (if any) to fill in the next argument.
+    if (actualDefaults != null && !actualDefaults.isEmpty()) {
+        for (int i = valueList.size(); i < actualDefaults.size(); i++) {
+            valueList.add(actualDefaults.get(i));
+        }
     }
-                // if there are more default values as specified, add them to
-                // the list.
-                    // copy the list first
 
-        return valueList == null ? Collections.EMPTY_LIST : valueList;
+    return valueList.isEmpty() ? Collections.EMPTY_LIST : valueList;
 }
\ No newline at end of file
