diff --git a/tmp/60d17806-860b-4582-bfe5-503356a4d0a6_buggy.java b/tmp/3a9b13cc-35e6-43e3-91ee-c6419ed0f8fe_fixed.java
index a6dab52..be12c6d 100644
--- a/tmp/60d17806-860b-4582-bfe5-503356a4d0a6_buggy.java
+++ b/tmp/3a9b13cc-35e6-43e3-91ee-c6419ed0f8fe_fixed.java
@@ -1,80 +1,77 @@
-    /**
-     * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>
-     * 
-     * @param out write to receieve the escaped string
-     * @param str String to escape values in, may be null
-     * @param escapeSingleQuote escapes single quotes if <code>true</code>
-     * @throws IOException if an IOException occurs
-     */
 private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (str == null) {
         return;
     }
-        int sz;
-        sz = str.length();
+    int sz = str.length();
     for (int i = 0; i < sz; i++) {
         char ch = str.charAt(i);
 
         // handle unicode
         if (ch > 0xfff) {
             out.write("\\u" + hex(ch));
         } else if (ch > 0xff) {
             out.write("\\u0" + hex(ch));
         } else if (ch > 0x7f) {
             out.write("\\u00" + hex(ch));
         } else if (ch < 32) {
             switch (ch) {
                 case '\b':
                     out.write('\\');
                     out.write('b');
                     break;
                 case '\n':
                     out.write('\\');
                     out.write('n');
                     break;
                 case '\t':
                     out.write('\\');
                     out.write('t');
                     break;
                 case '\f':
                     out.write('\\');
                     out.write('f');
                     break;
                 case '\r':
                     out.write('\\');
                     out.write('r');
                     break;
                 default:
                     if (ch > 0xf) {
                         out.write("\\u00" + hex(ch));
                     } else {
                         out.write("\\u000" + hex(ch));
                     }
                     break;
             }
+        } else {
+            // Escape a forward slash if it is immediately preceded by a '<'
+            if (ch == '/' && i > 0 && str.charAt(i - 1) == '<') {
+                out.write('\\');
+                out.write(ch);
             } else {
                 switch (ch) {
                     case '\'':
                         if (escapeSingleQuote) {
                             out.write('\\');
                         }
                         out.write('\'');
                         break;
                     case '"':
                         out.write('\\');
                         out.write('"');
                         break;
                     case '\\':
                         out.write('\\');
                         out.write('\\');
                         break;
                     default:
                         out.write(ch);
                         break;
                 }
             }
         }
     }
+}
\ No newline at end of file
