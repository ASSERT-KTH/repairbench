diff --git a/tmp/387c6a42-07bf-4cbd-8509-519f5da606bb_buggy.java b/tmp/4f7a0a7c-1c3d-48f7-ad92-33dc39805d98_fixed.java
index f9a9b5b..07d60c9 100644
--- a/tmp/387c6a42-07bf-4cbd-8509-519f5da606bb_buggy.java
+++ b/tmp/4f7a0a7c-1c3d-48f7-ad92-33dc39805d98_fixed.java
@@ -1,30 +1,53 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
-        T mockInstance = null;
+    T mockInstance;
     try {
+        // If the user requested constructor invocation (for spies, inner classes, etc.)
+        if (settings.isUsingConstructor()) {
+            if (settings.getOuterInstance() != null) {
+                // For non-static inner classes, provide the outer instance and any constructor args.
+                mockInstance = classInstantiator.instantiateInnerClass(
+                        mockedProxyType,
+                        settings.getOuterInstance(),
+                        settings.getConstructorArgs()
+                );
+            } else {
+                // Regular instantiation via constructor with the given constructor arguments.
+                mockInstance = classInstantiator.instantiateWithConstructor(
+                        mockedProxyType,
+                        settings.getConstructorArgs()
+                );
+            }
+        } else {
+            // Default instantiation without calling the constructor (e.g. via Objenesis).
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
+        // Install the mock interceptor on the newly created instance.
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        throw new MockitoException(
+                "Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'",
+                e
+        );
     }
 }
\ No newline at end of file
