diff --git a/tmp/f42d45ac-c747-4898-ab5b-ca9b8988ae1f_buggy.java b/tmp/938bb69a-d96f-44b6-9400-d23962e3e114_fixed.java
index f9a9b5b..452b70d 100644
--- a/tmp/f42d45ac-c747-4898-ab5b-ca9b8988ae1f_buggy.java
+++ b/tmp/938bb69a-d96f-44b6-9400-d23962e3e114_fixed.java
@@ -1,30 +1,47 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        if (settings.isUsingConstructor()) {
+            Object[] constructorArgs = settings.getConstructorArguments();
+            // In case the type to mock is an inner (non-static) class, an outer instance must be provided.
+            if (settings.getOuterInstance() != null) {
+                if (constructorArgs == null || constructorArgs.length == 0) {
+                    constructorArgs = new Object[]{settings.getOuterInstance()};
+                } else {
+                    Object[] newArgs = new Object[constructorArgs.length + 1];
+                    newArgs[0] = settings.getOuterInstance();
+                    System.arraycopy(constructorArgs, 0, newArgs, 1, constructorArgs.length);
+                    constructorArgs = newArgs;
+                }
+            }
+            // Instantiate by calling the actual constructor (which will run the initialization code)
+            mockInstance = classInstantiator.instantiate(mockedProxyType, constructorArgs);
+        } else {
+            // Instantiate without calling the constructor (using objenesis, etc)
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
-
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'", e);
     }
 }
\ No newline at end of file
