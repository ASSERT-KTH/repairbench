diff --git a/tmp/f418269d-88ef-42df-b13c-911bddf4a50b_buggy.java b/tmp/d579bb8b-2247-4fbb-b44d-dcf4fea28bb9_fixed.java
index 1303a19..9362f49 100644
--- a/tmp/f418269d-88ef-42df-b13c-911bddf4a50b_buggy.java
+++ b/tmp/d579bb8b-2247-4fbb-b44d-dcf4fea28bb9_fixed.java
@@ -1,45 +1,48 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
   Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
+  // If GETPROP/GETELEM is used as an assignment target the array literal
+  // is acting as a temporary and we can't fold it here.
+  // For example, in "[][0] += 1;" the GETELEM is on the LHS of an assignment.
+  if (parent != null && n == parent.getFirstChild() && NodeUtil.isAssignmentOp(parent)) {
+    return n;
+  }
 
   if (right.getType() != Token.NUMBER) {
-      // Sometimes people like to use complex expressions to index into
-      // arrays, or strings to index into array methods.
+    // Sometimes people like to use complex expressions to index into arrays,
+    // or strings to index into array methods.
     return n;
   }
 
   double index = right.getDouble();
   int intIndex = (int) index;
   if (intIndex != index) {
     error(INVALID_GETELEM_INDEX_ERROR, right);
     return n;
   }
 
   if (intIndex < 0) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
   Node elem = left.getFirstChild();
   for (int i = 0; elem != null && i < intIndex; i++) {
     elem = elem.getNext();
   }
 
   if (elem == null) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
   if (elem.getType() == Token.EMPTY) {
     elem = NodeUtil.newUndefinedNode(elem);
   } else {
     left.removeChild(elem);
   }
 
-    // Replace the entire GETELEM with the value
+  // Replace the entire GETELEM with the element value.
   n.getParent().replaceChild(n, elem);
   reportCodeChange();
   return elem;
 }
\ No newline at end of file
