diff --git a/tmp/e06766cc-3d4c-4617-b2e3-45e6a7499e1a_buggy.java b/tmp/a891df6c-928c-4093-a2d7-703497a3480f_fixed.java
index bada2b6..69d85d1 100644
--- a/tmp/e06766cc-3d4c-4617-b2e3-45e6a7499e1a_buggy.java
+++ b/tmp/a891df6c-928c-4093-a2d7-703497a3480f_fixed.java
@@ -1,16 +1,24 @@
-    /**
-     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
-     * 
-     * @param field
-     * @return
-     */
 public Class getGenericType(Field field) {
     Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
+    if (generic instanceof ParameterizedType) {
+        // Get the first generic type parameter
         Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
+        if (actual instanceof Class) {
             return (Class) actual;
-                //in case of nested generics we don't go deep
+        } else if (actual instanceof ParameterizedType) {
+            // For nested generics, return the raw type (e.g. Set from Set<String>)
+            return (Class) ((ParameterizedType) actual).getRawType();
+        } else if (actual instanceof WildcardType) {
+            // In case of a wildcard, use the first upper bound
+            Type[] bounds = ((WildcardType) actual).getUpperBounds();
+            if (bounds.length > 0) {
+                if (bounds[0] instanceof Class) {
+                    return (Class) bounds[0];
+                } else if (bounds[0] instanceof ParameterizedType) {
+                    return (Class) ((ParameterizedType) bounds[0]).getRawType();
+                }
+            }
+        }
     }
-        
     return Object.class;
 }
\ No newline at end of file
