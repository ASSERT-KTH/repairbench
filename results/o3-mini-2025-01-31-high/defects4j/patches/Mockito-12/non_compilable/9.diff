diff --git a/tmp/4ad1d538-e324-4c58-825c-3e635e151115_buggy.java b/tmp/b935b5e5-4490-4a28-b62e-0bda50d2388b_fixed.java
index bada2b6..1bb1b63 100644
--- a/tmp/4ad1d538-e324-4c58-825c-3e635e151115_buggy.java
+++ b/tmp/b935b5e5-4490-4a28-b62e-0bda50d2388b_fixed.java
@@ -1,16 +1,24 @@
 /**
  * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.
  *
-     * @param field
-     * @return
+ * @param field the field for which to extract the generic type
+ * @return the extracted generic type or Object.class if not found
  */
 public Class getGenericType(Field field) {        
     Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
+    if (generic instanceof ParameterizedType) {
         Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
+        if (actual instanceof Class) {
             return (Class) actual;
-                //in case of nested generics we don't go deep
+        } else if (actual instanceof ParameterizedType) {
+            // In case of nested generics we return the raw type (e.g. Set in Set<Set<String>>)
+            return (Class) ((ParameterizedType) actual).getRawType();
+        } else if (actual instanceof GenericArrayType) {
+            Type compType = ((GenericArrayType) actual).getGenericComponentType();
+            if (compType instanceof Class) {
+                return java.lang.reflect.Array.newInstance((Class) compType, 0).getClass();
+            }
+        }
     }
-        
     return Object.class;
 }
\ No newline at end of file
