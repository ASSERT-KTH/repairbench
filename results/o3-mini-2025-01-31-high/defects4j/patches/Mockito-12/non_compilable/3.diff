diff --git a/tmp/b21819d4-22a6-4c31-bc7b-8e1c3cab48c8_buggy.java b/tmp/a8b5a02f-06b7-4d42-9d9d-850d7057472e_fixed.java
index bada2b6..7a75753 100644
--- a/tmp/b21819d4-22a6-4c31-bc7b-8e1c3cab48c8_buggy.java
+++ b/tmp/a8b5a02f-06b7-4d42-9d9d-850d7057472e_fixed.java
@@ -1,16 +1,17 @@
-    /**
-     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
-     * 
-     * @param field
-     * @return
-     */
 public Class getGenericType(Field field) {
-        Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+    Type genericType = field.getGenericType();
+    if (genericType instanceof ParameterizedType) {
+        Type actualType = ((ParameterizedType) genericType).getActualTypeArguments()[0];
+        if (actualType instanceof Class) {
+            return (Class) actualType;
+        } else if (actualType instanceof ParameterizedType) {
+            return (Class) ((ParameterizedType) actualType).getRawType();
+        } else if (actualType instanceof WildcardType) {
+            Type[] upperBounds = ((WildcardType) actualType).getUpperBounds();
+            if (upperBounds.length > 0 && upperBounds[0] instanceof Class) {
+                return (Class) upperBounds[0];
+            }
+        }
     }
-        
     return Object.class;
 }
\ No newline at end of file
