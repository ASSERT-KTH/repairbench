diff --git a/tmp/a7c4799d-c8f9-422c-825f-e2de118fdaed_buggy.java b/tmp/f9a34341-0b12-4cad-b002-6a55048cbb82_fixed.java
index bada2b6..1876c7d 100644
--- a/tmp/a7c4799d-c8f9-422c-825f-e2de118fdaed_buggy.java
+++ b/tmp/f9a34341-0b12-4cad-b002-6a55048cbb82_fixed.java
@@ -1,16 +1,18 @@
-    /**
-     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
-     * 
-     * @param field
-     * @return
-     */
-    public Class getGenericType(Field field) {        
+public Class<?> getGenericType(Field field) {
     Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
+    if (generic instanceof ParameterizedType) {
         Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+        if (actual instanceof Class) {
+            return (Class<?>) actual;
+        } else if (actual instanceof ParameterizedType) {
+            return (Class<?>) ((ParameterizedType) actual).getRawType();
+        } else if (actual instanceof WildcardType) {
+            // Choose the first upper bound if available.
+            Type[] bounds = ((WildcardType) actual).getUpperBounds();
+            if (bounds.length > 0 && bounds[0] instanceof Class) {
+                return (Class<?>) bounds[0];
+            }
+        }
     }
-        
     return Object.class;
 }
\ No newline at end of file
