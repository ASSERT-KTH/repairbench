diff --git a/tmp/dec2881f-e8f2-4ac3-8b2b-b4bf0d6c5b79_buggy.java b/tmp/bb33e0b6-8e91-4931-8bbb-27f8a1a7ec00_fixed.java
index 58a1651..0048a01 100644
--- a/tmp/dec2881f-e8f2-4ac3-8b2b-b4bf0d6c5b79_buggy.java
+++ b/tmp/bb33e0b6-8e91-4931-8bbb-27f8a1a7ec00_fixed.java
@@ -1,32 +1,32 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
   setResolvedTypeInternal(this);
 
   call = (ArrowType) safeResolve(call, t, scope);
   prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+  // If the resolved type isnâ€™t an ObjectType (for example, if it is a UnionType),
+  // then toMaybeObjectType() will return null, and the appropriate warning will be
+  // reported upstream.
+  typeOfThis = safeResolve(typeOfThis, t, scope).toMaybeObjectType();
 
   boolean changed = false;
   ImmutableList.Builder<ObjectType> resolvedInterfaces =
       ImmutableList.builder();
   for (ObjectType iface : implementedInterfaces) {
     ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
     resolvedInterfaces.add(resolvedIface);
     changed |= (resolvedIface != iface);
   }
   if (changed) {
     implementedInterfaces = resolvedInterfaces.build();
   }
 
   if (subTypes != null) {
     for (int i = 0; i < subTypes.size(); i++) {
       subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
     }
   }
 
   return super.resolveInternal(t, scope);
 }
\ No newline at end of file
