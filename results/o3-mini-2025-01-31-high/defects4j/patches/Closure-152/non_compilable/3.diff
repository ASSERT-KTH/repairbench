diff --git a/tmp/0eeb437e-5ff3-40c1-8c8f-b322291e6843_buggy.java b/tmp/f612393d-94e4-4f7c-8b02-55984ddd3852_fixed.java
index 58a1651..3829814 100644
--- a/tmp/0eeb437e-5ff3-40c1-8c8f-b322291e6843_buggy.java
+++ b/tmp/f612393d-94e4-4f7c-8b02-55984ddd3852_fixed.java
@@ -1,32 +1,43 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
   setResolvedTypeInternal(this);
 
   call = (ArrowType) safeResolve(call, t, scope);
   prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+  // Instead of directly casting typeOfThis to ObjectType, we resolve it
+  // and then check whether it’s an ObjectType or (in the case of a UnionType)
+  // a union of non‐nullable object types. (If it isn’t acceptable we set it to null
+  // so that the error is reported later.)
+  JSType resolved = safeResolve(typeOfThis, t, scope);
+  UnionType union = resolved.toMaybeUnionType();
+  if (union != null) {
+    // If the union turns out to be nullable then we don’t want to use it as the "this"
+    // type.  (Note that in Closure the non-null assertion “!” will remove null from
+    // the union; see testBackwardsTypedefUse2 vs testBackwardsTypedefUse3.)
+    typeOfThis = union.isNullable() ? null : (ObjectType) resolved;
+  } else if (resolved instanceof ObjectType) {
+    typeOfThis = (ObjectType) resolved;
+  } else {
+    typeOfThis = null;
+  }
 
   boolean changed = false;
-    ImmutableList.Builder<ObjectType> resolvedInterfaces =
-        ImmutableList.builder();
+  ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder();
   for (ObjectType iface : implementedInterfaces) {
     ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
     resolvedInterfaces.add(resolvedIface);
     changed |= (resolvedIface != iface);
   }
   if (changed) {
     implementedInterfaces = resolvedInterfaces.build();
   }
 
   if (subTypes != null) {
     for (int i = 0; i < subTypes.size(); i++) {
       subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
     }
   }
 
   return super.resolveInternal(t, scope);
 }
\ No newline at end of file
