diff --git a/tmp/bf476adf-149a-4af0-96fa-2dfa5b50e945_buggy.java b/tmp/795fde9d-03ea-43d7-9b48-4f00e1a6a583_fixed.java
index 0ef85f2..ee0c15b 100644
--- a/tmp/bf476adf-149a-4af0-96fa-2dfa5b50e945_buggy.java
+++ b/tmp/795fde9d-03ea-43d7-9b48-4f00e1a6a583_fixed.java
@@ -1,50 +1,40 @@
-  /**
-   * Gets the source line for the indicated line number.
-   *
-   * @param lineNumber the line number, 1 being the first line of the file.
-   * @return The line indicated. Does not include the newline at the end
-   *     of the file. Returns {@code null} if it does not exist,
-   *     or if there was an IO exception.
-   */
 public String getLine(int lineNumber) {
-    String js = "";
+  String js;
   try {
-      // NOTE(nicksantos): Right now, this is optimized for few warnings.
-      // This is probably the right trade-off, but will be slow if there
-      // are lots of warnings in one file.
     js = getCode();
   } catch (IOException e) {
     return null;
   }
 
   int pos = 0;
   int startLine = 1;
 
   // If we've saved a previous offset and it's for a line less than the
   // one we're searching for, then start at that point.
   if (lineNumber >= lastLine) {
     pos = lastOffset;
     startLine = lastLine;
   }
 
+  // Move to the start of the requested line.
   for (int n = startLine; n < lineNumber; n++) {
-      int nextpos = js.indexOf('\n', pos);
-      if (nextpos == -1) {
+    int nextPos = js.indexOf('\n', pos);
+    if (nextPos == -1) {
       return null;
     }
-      pos = nextpos + 1;
+    pos = nextPos + 1;
   }
 
-    // Remember this offset for the next search we do.
+  // Cache this offset for future calls.
   lastOffset = pos;
   lastLine = lineNumber;
 
-    if (js.indexOf('\n', pos) == -1) {
-      // If next new line cannot be found, there are two cases
-      // 1. pos already reaches the end of file, then null should be returned
-      // 2. otherwise, return the contents between pos and the end of file.
-        return null;
-    } else {
-      return js.substring(pos, js.indexOf('\n', pos));
+  // Find the end of the line.
+  int newLinePos = js.indexOf('\n', pos);
+  if (newLinePos == -1) {
+    // If no newline is found, then either we are at the end of the file or
+    // return everything after this position.
+    return (pos == js.length()) ? null : js.substring(pos);
   }
+  return js.substring(pos, newLinePos);
 }
\ No newline at end of file
