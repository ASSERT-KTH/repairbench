diff --git a/tmp/42500b31-1a16-4196-a61f-64cbb64015f8_buggy.java b/tmp/3497b65c-8f75-475a-81cd-b618a3547af0_fixed.java
index 0ef85f2..b7d239c 100644
--- a/tmp/42500b31-1a16-4196-a61f-64cbb64015f8_buggy.java
+++ b/tmp/3497b65c-8f75-475a-81cd-b618a3547af0_fixed.java
@@ -1,50 +1,39 @@
-  /**
-   * Gets the source line for the indicated line number.
-   *
-   * @param lineNumber the line number, 1 being the first line of the file.
-   * @return The line indicated. Does not include the newline at the end
-   *     of the file. Returns {@code null} if it does not exist,
-   *     or if there was an IO exception.
-   */
 public String getLine(int lineNumber) {
-    String js = "";
+  String js;
   try {
-      // NOTE(nicksantos): Right now, this is optimized for few warnings.
-      // This is probably the right trade-off, but will be slow if there
-      // are lots of warnings in one file.
     js = getCode();
   } catch (IOException e) {
     return null;
   }
 
   int pos = 0;
   int startLine = 1;
-
-    // If we've saved a previous offset and it's for a line less than the
-    // one we're searching for, then start at that point.
+  // Use the cached offset if the requested line is not before the last one we looked up.
   if (lineNumber >= lastLine) {
     pos = lastOffset;
     startLine = lastLine;
   }
 
+  // Advance to the beginning of the requested line.
   for (int n = startLine; n < lineNumber; n++) {
-      int nextpos = js.indexOf('\n', pos);
-      if (nextpos == -1) {
-        return null;
+    int nextPos = js.indexOf('\n', pos);
+    if (nextPos == -1) {
+      return null; // no such line exists
     }
-      pos = nextpos + 1;
+    pos = nextPos + 1;
   }
 
-    // Remember this offset for the next search we do.
+  // Cache the current position and line number for future calls.
   lastOffset = pos;
   lastLine = lineNumber;
 
-    if (js.indexOf('\n', pos) == -1) {
-      // If next new line cannot be found, there are two cases
-      // 1. pos already reaches the end of file, then null should be returned
-      // 2. otherwise, return the contents between pos and the end of file.
-        return null;
+  // Look for the newline ending the current line.
+  int newline = js.indexOf('\n', pos);
+  if (newline == -1) {
+    // If no newline was found, then if we have reached the file end,
+    // return null; otherwise, return the remainder of the file.
+    return pos < js.length() ? js.substring(pos) : null;
   } else {
-      return js.substring(pos, js.indexOf('\n', pos));
+    return js.substring(pos, newline);
   }
 }
\ No newline at end of file
