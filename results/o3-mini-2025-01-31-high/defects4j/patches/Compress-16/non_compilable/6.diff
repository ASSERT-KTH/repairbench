diff --git a/tmp/e03cbc18-10d1-42fc-906b-5eeece905e32_buggy.java b/tmp/ab15bcd4-ec3d-4705-95c6-bc6f6ebf397f_fixed.java
index 2ce28b5..98cda0c 100644
--- a/tmp/e03cbc18-10d1-42fc-906b-5eeece905e32_buggy.java
+++ b/tmp/ab15bcd4-ec3d-4705-95c6-bc6f6ebf397f_fixed.java
@@ -1,72 +1,68 @@
-    /**
-     * Create an archive input stream from an input stream, autodetecting
-     * the archive type from the first few bytes of the stream. The InputStream
-     * must support marks, like BufferedInputStream.
-     * 
-     * @param in the input stream
-     * @return the archive input stream
-     * @throws ArchiveException if the archiver name is not known
-     * @throws IllegalArgumentException if the stream is null or does not support mark
-     */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
-
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
     final byte[] signature = new byte[12];
     in.mark(signature.length);
+    int signatureLength;
     try {
-            int signatureLength = in.read(signature);
+        signatureLength = in.read(signature);
         in.reset();
+    } catch (IOException e) {
+        throw new ArchiveException("Could not use reset and mark operations.", e);
+    }
     if (ZipArchiveInputStream.matches(signature, signatureLength)) {
         return new ZipArchiveInputStream(in);
     } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
         return new JarArchiveInputStream(in);
     } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
         return new ArArchiveInputStream(in);
     } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
         return new CpioArchiveInputStream(in);
     }
 
-            // Dump needs a bigger buffer to check the signature;
     final byte[] dumpsig = new byte[32];
     in.mark(dumpsig.length);
+    try {
         signatureLength = in.read(dumpsig);
         in.reset();
+    } catch (IOException e) {
+        throw new ArchiveException("Could not use reset and mark operations.", e);
+    }
     if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
         return new DumpArchiveInputStream(in);
     }
 
-            // Tar needs an even bigger buffer to check the signature; read the first block
+    /*
+     * Instead of relying solely on TarArchiveInputStream.matches (which can be too lenient and
+     * mistakenly match an AIFF file, for example), we now verify the tar header by reading the
+     * first 512 bytes and trying to extract an entry. Only if an entry is found do we return a
+     * TarArchiveInputStream.
+     */
     final byte[] tarheader = new byte[512];
     in.mark(tarheader.length);
+    try {
         signatureLength = in.read(tarheader);
         in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
-            }
-            // COMPRESS-117 - improve auto-recognition
-            if (signatureLength >= 512) {
-                try {
-                    TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                    // COMPRESS-191 - verify the header checksum
-                    tais.getNextEntry();
-                        return new TarArchiveInputStream(in);
-                } catch (Exception e) { // NOPMD
-                    // can generate IllegalArgumentException as well
-                    // as IOException
-                    // autodetection, simply not a TAR
-                    // ignored
-                }
-            }
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
+    if (signatureLength >= tarheader.length) {
+        try (ByteArrayInputStream bais = new ByteArrayInputStream(tarheader)) {
+            TarArchiveInputStream tais = new TarArchiveInputStream(bais);
+            ArchiveEntry entry = tais.getNextEntry();
+            if (entry != null) {
+                return new TarArchiveInputStream(in);
+            }
+        } catch (Exception e) {
+            // Not a valid TAR archive; fall through.
+        }
+    }
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
