diff --git a/tmp/5d0855fb-a1f5-4de0-810c-666591c674ea_buggy.java b/tmp/32e9389a-8521-48d0-82c5-8ae6544308cd_fixed.java
index 2ce28b5..6190190 100644
--- a/tmp/5d0855fb-a1f5-4de0-810c-666591c674ea_buggy.java
+++ b/tmp/32e9389a-8521-48d0-82c5-8ae6544308cd_fixed.java
@@ -1,72 +1,58 @@
-    /**
-     * Create an archive input stream from an input stream, autodetecting
-     * the archive type from the first few bytes of the stream. The InputStream
-     * must support marks, like BufferedInputStream.
-     * 
-     * @param in the input stream
-     * @return the archive input stream
-     * @throws ArchiveException if the archiver name is not known
-     * @throws IllegalArgumentException if the stream is null or does not support mark
-     */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
-
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
     final byte[] signature = new byte[12];
     in.mark(signature.length);
     try {
         int signatureLength = in.read(signature);
         in.reset();
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
             return new ZipArchiveInputStream(in);
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
             return new JarArchiveInputStream(in);
         } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
             return new ArArchiveInputStream(in);
         } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
             return new CpioArchiveInputStream(in);
         }
 
-            // Dump needs a bigger buffer to check the signature;
+        // Check for Dump archive (needs a bigger buffer).
         final byte[] dumpsig = new byte[32];
         in.mark(dumpsig.length);
         signatureLength = in.read(dumpsig);
         in.reset();
         if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
             return new DumpArchiveInputStream(in);
         }
 
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
+        // Tar archives require a full 512-byte block to reliably check the header.
+        final byte[] tarHeader = new byte[512];
+        in.mark(tarHeader.length);
+        signatureLength = in.read(tarHeader);
         in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
+        if (signatureLength < tarHeader.length) {
+            throw new ArchiveException("No Archiver found for the stream signature");
         }
-            // COMPRESS-117 - improve auto-recognition
-            if (signatureLength >= 512) {
+        // Instead of immediately accepting a match (which may be too lenient),
+        // we verify the tar header checksum by attempting to read the first entry.
         try {
-                    TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                    // COMPRESS-191 - verify the header checksum
-                    tais.getNextEntry();
+            TarArchiveInputStream tarTester = new TarArchiveInputStream(
+                    new ByteArrayInputStream(tarHeader));
+            if (tarTester.getNextEntry() != null) {
                 return new TarArchiveInputStream(in);
-                } catch (Exception e) { // NOPMD
-                    // can generate IllegalArgumentException as well
-                    // as IOException
-                    // autodetection, simply not a TAR
-                    // ignored
             }
+        } catch (Exception e) { // NOPMD: Exception indicates it's not a valid TAR
+            // Not a TAR archive; fall through.
         }
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
