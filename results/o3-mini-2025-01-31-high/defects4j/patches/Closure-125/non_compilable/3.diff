diff --git a/tmp/0ddad568-7e28-4d63-89b6-90c29375e655_buggy.java b/tmp/fff0e0a3-951f-4489-89b6-f5dc71932ea7_fixed.java
index 7e43c1c..043c432 100644
--- a/tmp/0ddad568-7e28-4d63-89b6-90c29375e655_buggy.java
+++ b/tmp/fff0e0a3-951f-4489-89b6-f5dc71932ea7_fixed.java
@@ -1,19 +1,46 @@
 /**
  * Visits a NEW node.
  */
 private void visitNew(NodeTraversal t, Node n) {
   Node constructor = n.getFirstChild();
   JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
+  
+  // If the constructorâ€™s type is a union, try to extract all constructor alternatives.
+  if (type.isUnionType()) {
+    UnionType union = type.toMaybeUnionType();
+    List<FunctionType> fnTypes = new ArrayList<>();
+    for (JSType alt : union.getAlternates()) {
+      if (alt.isConstructor()) {
+        FunctionType fn = alt.toMaybeFunctionType();
+        if (fn != null) {
+          fnTypes.add(fn);
+        }
+      }
+    }
+    if (!fnTypes.isEmpty()) {
+      // Use the first function type to visit the parameter list.
+      visitParameterList(t, n, fnTypes.get(0));
+      // Compute the union of the instance types from all constructor alternatives.
+      JSType instanceType = fnTypes.get(0).getInstanceType();
+      for (int i = 1; i < fnTypes.size(); i++) {
+        instanceType = instanceType.getLeastSupertype(fnTypes.get(i).getInstanceType());
+      }
+      ensureTyped(t, n, instanceType);
+      return;
+    }
+  }
+  
+  // Otherwise, if the type is known to be a constructor (or is empty/unknown), use it.
   if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
     FunctionType fnType = type.toMaybeFunctionType();
     if (fnType != null) {
       visitParameterList(t, n, fnType);
       ensureTyped(t, n, fnType.getInstanceType());
     } else {
       ensureTyped(t, n);
     }
   } else {
     report(t, n, NOT_A_CONSTRUCTOR);
     ensureTyped(t, n);
   }
 }
\ No newline at end of file
