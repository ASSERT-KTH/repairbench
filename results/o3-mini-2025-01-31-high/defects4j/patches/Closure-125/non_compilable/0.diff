diff --git a/tmp/c52ce90b-0f66-4b07-95a2-6b7c0b3b6ee6_buggy.java b/tmp/7a9b538e-daed-49c8-bfe8-d0ea04511e8f_fixed.java
index 7e43c1c..86ec0e0 100644
--- a/tmp/c52ce90b-0f66-4b07-95a2-6b7c0b3b6ee6_buggy.java
+++ b/tmp/7a9b538e-daed-49c8-bfe8-d0ea04511e8f_fixed.java
@@ -1,19 +1,57 @@
 /**
  * Visits a NEW node.
  */
 private void visitNew(NodeTraversal t, Node n) {
   Node constructor = n.getFirstChild();
   JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
-    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
+
+  // Determine whether the type is acceptable as a constructor.
+  // We accept if it is already a constructor, if it is empty/unknown,
+  // or if it is a union type that contains at least one constructor.
+  boolean isCtor = type.isConstructor() || type.isEmptyType() || type.isUnknownType();
+  if (!isCtor && type.isUnionType()) {
+    UnionType union = type.toMaybeUnionType();
+    for (JSType alt : union.getAlternates()) {
+      if (alt.isConstructor()) {
+        isCtor = true;
+        break;
+      }
+    }
+  }
+
+  if (isCtor) {
+    // Try to get a single function type from the (possibly union) type.
     FunctionType fnType = type.toMaybeFunctionType();
     if (fnType != null) {
+      // When we have a unique function type we can check the parameters.
       visitParameterList(t, n, fnType);
       ensureTyped(t, n, fnType.getInstanceType());
+    } else if (type.isUnionType()) {
+      // Handle the case where the constructor type is a union of function types.
+      UnionType union = type.toMaybeUnionType();
+      JSType instanceType = null;
+      for (JSType alt : union.getAlternates()) {
+        // Only look at alternates that are constructors.
+        if (alt.isConstructor()) {
+          FunctionType altFn = alt.toMaybeFunctionType();
+          if (altFn != null) {
+            JSType altInstance = altFn.getInstanceType();
+            instanceType = instanceType == null
+                ? altInstance
+                : instanceType.getUnionType(altInstance);
+          }
+        }
+      }
+      if (instanceType == null) {
+        instanceType = getNativeType(UNKNOWN_TYPE);
+      }
+      // For union types we forego parameter-list checking because it is ambiguous.
+      ensureTyped(t, n, instanceType);
     } else {
       ensureTyped(t, n);
     }
   } else {
     report(t, n, NOT_A_CONSTRUCTOR);
     ensureTyped(t, n);
   }
 }
\ No newline at end of file
