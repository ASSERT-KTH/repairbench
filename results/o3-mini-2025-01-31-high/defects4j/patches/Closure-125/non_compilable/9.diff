diff --git a/tmp/b28bc667-17b7-4bb0-81ae-69b9e167bfad_buggy.java b/tmp/4929b244-3e96-4966-b0c4-39f698ae6314_fixed.java
index 7e43c1c..dca7de9 100644
--- a/tmp/b28bc667-17b7-4bb0-81ae-69b9e167bfad_buggy.java
+++ b/tmp/4929b244-3e96-4966-b0c4-39f698ae6314_fixed.java
@@ -1,19 +1,31 @@
-  /**
-   * Visits a NEW node.
-   */
 private void visitNew(NodeTraversal t, Node n) {
   Node constructor = n.getFirstChild();
   JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
   if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
     FunctionType fnType = type.toMaybeFunctionType();
+    // If we couldnâ€™t get a function type directly,
+    // check union alternatives to see if one is a function type.
+    if (fnType == null && type.isUnionType()) {
+      for (JSType alt : type.getAlternates()) {
+        fnType = alt.toMaybeFunctionType();
+        if (fnType != null) {
+          break;
+        }
+      }
+    }
     if (fnType != null) {
       visitParameterList(t, n, fnType);
-        ensureTyped(t, n, fnType.getInstanceType());
+      JSType instanceType = fnType.getInstanceType();
+      // Avoid passing a null instance type.
+      if (instanceType == null) {
+        instanceType = fnType;
+      }
+      ensureTyped(t, n, instanceType);
     } else {
       ensureTyped(t, n);
     }
   } else {
     report(t, n, NOT_A_CONSTRUCTOR);
     ensureTyped(t, n);
   }
 }
\ No newline at end of file
