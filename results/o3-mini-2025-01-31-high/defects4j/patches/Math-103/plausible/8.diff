diff --git a/tmp/5882a0f0-147b-4bd3-b105-20b98deee618_buggy.java b/tmp/4b458bd8-1920-4824-af63-4faf0b30ef48_fixed.java
index 6cfa79b..b2ddbdc 100644
--- a/tmp/5882a0f0-147b-4bd3-b105-20b98deee618_buggy.java
+++ b/tmp/4b458bd8-1920-4824-af63-4faf0b30ef48_fixed.java
@@ -1,12 +1,20 @@
-    /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
-     * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
-     * @throws MathException if the algorithm fails to converge; unless
-     * x is more than 20 standard deviations from the mean, in which case the
-     * convergence exception is caught and 0 or 1 is returned.
-     */
 public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+    // Handle infinities explicitly.
+    if (x == Double.NEGATIVE_INFINITY) {
+        return 0.0;
+    }
+    if (x == Double.POSITIVE_INFINITY) {
+        return 1.0;
+    }
+    // For extreme values, avoid calling Erf (which may not converge)
+    // For a standard normal distribution, values below -10 or above +10
+    // are so extreme that we simply return 0 or 1.
+    if (x <= mean - 10 * standardDeviation) {
+        return 0.0;
+    }
+    if (x >= mean + 10 * standardDeviation) {
+        return 1.0;
+    }
+    // Otherwise, use the usual formulation.
+    return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));
 }
\ No newline at end of file
