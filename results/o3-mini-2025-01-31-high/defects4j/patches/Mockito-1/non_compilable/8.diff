diff --git a/tmp/6518a7e6-a410-4944-b3a1-e875af9a3bda_buggy.java b/tmp/ae56f1d8-1715-43f1-bbe0-aff9473286f9_fixed.java
index 1c875ad..b446d03 100644
--- a/tmp/6518a7e6-a410-4944-b3a1-e875af9a3bda_buggy.java
+++ b/tmp/ae56f1d8-1715-43f1-bbe0-aff9473286f9_fixed.java
@@ -1,31 +1,38 @@
 public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
+    Object[] rawArguments = invocation.getRawArguments();
+    Class<?>[] parameterTypes = invocation.getMethod().getParameterTypes();
+    // Loop over all matcher positions
     for (int position = 0; position < matchers.size(); position++) {
         Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
-                }
-            }
-        }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+        if (!(m instanceof CapturesArguments)) {
+            continue;
+        }
+        // Only proceed if we have an argument at this position
+        if (rawArguments.length <= position) {
+            continue;
+        }
+        // Check if this argument is the varargs one.
+        if (invocation.getMethod().isVarArgs() && position == parameterTypes.length - 1) {
+            Object varargArray = rawArguments[position];
+            // If the matcher is the special vararg matcher (e.g. AnyVararg),
+            // then capture each element of the varargs array individually.
+            if (AnyVararg.ANY_VARARG.equals(m)) {
+                if (varargArray != null && varargArray.getClass().isArray()) {
+                    int length = java.lang.reflect.Array.getLength(varargArray);
+                    for (int i = 0; i < length; i++) {
+                        ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(varargArray, i));
+                    }
+                } else {
+                    // If the vararg array is null, capture null.
+                    ((CapturesArguments) m).captureFrom(varargArray);
+                }
+            } else {
+                // Otherwise capture the entire varargs array as one argument.
+                ((CapturesArguments) m).captureFrom(varargArray);
+            }
+        } else {
+            // Non-varargs (or non-special) parameter: capture the argument normally.
+            ((CapturesArguments) m).captureFrom(rawArguments[position]);
+        }
+    }
 }
\ No newline at end of file
