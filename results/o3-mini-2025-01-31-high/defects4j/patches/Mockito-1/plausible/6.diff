diff --git a/tmp/d730f5ad-ba0e-4236-85b4-d38a821b1538_buggy.java b/tmp/f885abed-8f12-472f-b1ff-15bd85e25cf7_fixed.java
index 1c875ad..9adb108 100644
--- a/tmp/d730f5ad-ba0e-4236-85b4-d38a821b1538_buggy.java
+++ b/tmp/f885abed-8f12-472f-b1ff-15bd85e25cf7_fixed.java
@@ -1,31 +1,36 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
+        // Loop through all matchers. In a varargs method, the last real parameter is actually an array.
+        for (int position = 0; position < matchers.size(); position++) {
+            Matcher m = matchers.get(position);
+            // Only capture if we have a corresponding raw argument.
+            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
+                // If this is the varargs parameter and the matcher is built to capture varargs...
+                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {
+                    Object array = invocation.getRawArguments()[position];
+                    // If the varargs array is non-null, capture each element.
+                    if (array != null && array.getClass().isArray()) {
+                        for (int i = 0; i < Array.getLength(array); i++) {
+                            ((CapturesArguments) m).captureFrom(Array.get(array, i));
+                        }
+                    } else {
+                        // Otherwise, capture the null value as is.
+                        ((CapturesArguments) m).captureFrom(array);
+                    }
+                    // Once we have captured all varargs elements, no point in processing further.
+                    return;
+                } else {
+                    // For non-varargs parameters, just capture the argument.
+                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
+                }
+            }
+        }
     } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
