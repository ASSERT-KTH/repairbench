diff --git a/tmp/ddc26973-1e93-4074-ad4f-3ab3c52bb5b4_buggy.java b/tmp/d6396846-36f5-4040-a5f1-c5950357a9d1_fixed.java
index 1c875ad..8aae979 100644
--- a/tmp/ddc26973-1e93-4074-ad4f-3ab3c52bb5b4_buggy.java
+++ b/tmp/d6396846-36f5-4040-a5f1-c5950357a9d1_fixed.java
@@ -1,31 +1,29 @@
 public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
+    // Loop through all matcher positions.
     for (int position = 0; position < matchers.size(); position++) {
+        // Only try to capture if an argument exists at this position.
+        if (invocation.getRawArguments().length > position) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
+                // For varargs, the matcher for the vararg parameter should capture each element in the array.
+                if (invocation.getMethod().isVarArgs()
+                        && isVariableArgument(invocation, position)
+                        && isVarargMatcher(m)) {
+                    Object varArgArray = invocation.getRawArguments()[position];
+                    if (varArgArray != null && varArgArray.getClass().isArray()) {
+                        for (int i = 0; i < Array.getLength(varArgArray); i++) {
+                            ((CapturesArguments) m).captureFrom(Array.get(varArgArray, i));
+                        }
+                    } else {
+                        // If the vararg array is null, simply capture null.
+                        ((CapturesArguments) m).captureFrom(varArgArray);
+                    }
+                    // Since varargs is always the last parameter, no need to process further matchers.
+                    return;
+                } else {
                     ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
                 }
             }
         }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+    }
 }
\ No newline at end of file
