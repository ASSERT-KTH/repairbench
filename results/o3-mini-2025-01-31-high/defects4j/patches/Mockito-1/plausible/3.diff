diff --git a/tmp/eb669ca4-83cd-4217-9373-c55e405055f0_buggy.java b/tmp/513a9b33-fa82-46a0-aa86-30728b64ffb3_fixed.java
index 1c875ad..9c619f1 100644
--- a/tmp/eb669ca4-83cd-4217-9373-c55e405055f0_buggy.java
+++ b/tmp/513a9b33-fa82-46a0-aa86-30728b64ffb3_fixed.java
@@ -1,31 +1,49 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        // For a varargs method, the declared parameters include a varargs array as the last element.
+        // The number of fixed (non‚Äêvarargs) parameters is:
+        int fixedParameterCount = invocation.getMethod().getParameterTypes().length - 1;
+        Object[] rawArguments = invocation.getRawArguments();
+        int matcherCount = matchers.size();
         
+        for (int pos = 0; pos < matcherCount; pos++) {
+            if (pos >= rawArguments.length) {
+                // No argument was supplied for this matcher.
+                break;
+            }
+            Matcher m = matchers.get(pos);
+            if (!(m instanceof CapturesArguments)) {
+                continue;
+            }
+            if (pos == fixedParameterCount) {
+                // This matcher corresponds to the varargs parameter.
+                Object varargsArgument = rawArguments[pos];
+                if (varargsArgument != null && varargsArgument.getClass().isArray()) {
+                    int len = java.lang.reflect.Array.getLength(varargsArgument);
+                    for (int i = 0; i < len; i++) {
+                        ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(varargsArgument, i));
+                    }
                 } else {
+                    // In case the varargs argument is not an array, capture it directly.
+                    ((CapturesArguments) m).captureFrom(varargsArgument);
+                }
+                // Once we've captured the varargs parameter, we return.
+                return;
+            } else {
+                // Fixed (non-varargs) parameter: capture directly.
+                ((CapturesArguments) m).captureFrom(rawArguments[pos]);
+            }
+        }
+    } else {
+        // Non-varargs method: iterate over matchers and capture each corresponding argument.
         for (int position = 0; position < matchers.size(); position++) {
+            if (position >= invocation.getRawArguments().length) {
+                break;
+            }
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
