diff --git a/tmp/03de26b2-2508-4904-bbcd-e839eb5186d9_buggy.java b/tmp/13079384-432e-47ff-8c05-4b8da424f54a_fixed.java
index 1c875ad..d6575f7 100644
--- a/tmp/03de26b2-2508-4904-bbcd-e839eb5186d9_buggy.java
+++ b/tmp/13079384-432e-47ff-8c05-4b8da424f54a_fixed.java
@@ -1,31 +1,38 @@
 public void captureArgumentsFrom(Invocation invocation) {
+    Object[] rawArguments = invocation.getRawArguments();
+    // If the invoked method is varargs, handle the vararg parameter specially
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
+        for (int position = 0; position < matchers.size(); position++) {
+            Matcher m = matchers.get(position);
+            // Only attempt to capture if there is a corresponding argument
+            if (m instanceof CapturesArguments && rawArguments.length > position) {
+                // If this parameter is the vararg one and the matcher is meant to capture varargs...
+                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {
+                    Object varargsArray = rawArguments[position];
+                    // If the vararg value is a non-null array, capture each element separately.
+                    if (varargsArray != null && varargsArray.getClass().isArray()) {
+                        int length = java.lang.reflect.Array.getLength(varargsArray);
+                        for (int i = 0; i < length; i++) {
+                            ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(varargsArray, i));
+                        }
                     } else {
+                        // Otherwise, capture the value as-is (it might be null)
+                        ((CapturesArguments) m).captureFrom(varargsArray);
+                    }
+                    // Once we've captured varargs elements, thereâ€™s no need to process further matchers.
+                    return;
+                } else {
+                    ((CapturesArguments) m).captureFrom(rawArguments[position]);
+                }
+            }
+        }
+    } else {
+        // Non-varargs: capture each argument using its usual accessor.
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
