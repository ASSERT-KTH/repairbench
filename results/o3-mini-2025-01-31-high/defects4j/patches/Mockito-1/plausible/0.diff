diff --git a/tmp/52547403-9c35-43e7-98e7-0d7a64771a9d_buggy.java b/tmp/477041df-78f8-470d-848b-0ddedc1fc2fe_fixed.java
index 1c875ad..c3022ab 100644
--- a/tmp/52547403-9c35-43e7-98e7-0d7a64771a9d_buggy.java
+++ b/tmp/477041df-78f8-470d-848b-0ddedc1fc2fe_fixed.java
@@ -1,31 +1,33 @@
 public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
     for (int position = 0; position < matchers.size(); position++) {
-                Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+        Matcher matcher = matchers.get(position);
+        if (!(matcher instanceof CapturesArguments)) {
+            continue;
         }
+        // If there isn’t an argument at this position, skip capturing.
+        if (invocation.getRawArguments().length <= position) {
+            continue;
+        }
+        // If the method is varargs and this is the vararg argument,
+        // capture each element of the varargs array.
+        if (invocation.getMethod().isVarArgs() 
+                && isVariableArgument(invocation, position) 
+                && isVarargMatcher(matcher)) {
+            Object varargsArray = invocation.getRawArguments()[position];
+            if (varargsArray != null) {
+                int length = Array.getLength(varargsArray);
+                for (int i = 0; i < length; i++) {
+                    ((CapturesArguments) matcher).captureFrom(Array.get(varargsArray, i));
+                }
+            } else {
+                ((CapturesArguments) matcher).captureFrom(null);
+            }
+            // Since the vararg parameter is always the last one, we can return immediately.
+            return;
+        } else {
+            // For non‐vararg parameters (or when the matcher isn’t a vararg matcher)
+            // capture using the type-safe accessor.
+            ((CapturesArguments) matcher).captureFrom(invocation.getArgumentAt(position, Object.class));
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
