diff --git a/tmp/8d413686-6a57-47ad-9040-49f6893d00ba_buggy.java b/tmp/bdb9c71f-b052-43d0-b640-e447e59359bb_fixed.java
index 1c875ad..a408e87 100644
--- a/tmp/8d413686-6a57-47ad-9040-49f6893d00ba_buggy.java
+++ b/tmp/bdb9c71f-b052-43d0-b640-e447e59359bb_fixed.java
@@ -1,31 +1,26 @@
 public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
     for (int position = 0; position < matchers.size(); position++) {
         Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+        if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
+            Object argument = invocation.getRawArguments()[position];
+            if (invocation.getMethod().isVarArgs() 
+                    && isVariableArgument(invocation, position) 
+                    && isVarargMatcher(m)) {
+                // If the vararg parameter is passed as an array we capture each element.
+                if (argument != null && argument.getClass().isArray()) {
+                    int len = Array.getLength(argument);
+                    for (int i = 0; i < len; i++) {
+                        ((CapturesArguments) m).captureFrom(Array.get(argument, i));
+                    }
+                } else {
+                    // In case the vararg is null or not an array, just capture it directly.
+                    ((CapturesArguments) m).captureFrom(argument);
+                }
+                // Once we've processed the varargs parameter, exit the method.
+                return;
+            } else {
+                ((CapturesArguments) m).captureFrom(argument);
             }
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
