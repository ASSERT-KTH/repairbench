diff --git a/tmp/3e38fc2f-10d5-485e-85ea-f48d47cab372_buggy.java b/tmp/c03be428-7c9d-4a04-831e-ee20e117496e_fixed.java
index 1c875ad..1dce2cd 100644
--- a/tmp/3e38fc2f-10d5-485e-85ea-f48d47cab372_buggy.java
+++ b/tmp/c03be428-7c9d-4a04-831e-ee20e117496e_fixed.java
@@ -1,31 +1,29 @@
 public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
-            for (int position = 0; position < matchers.size(); position++) {
+    Object[] rawArguments = invocation.getRawArguments();
+    int matcherCount = matchers.size();
+    int argCount = rawArguments.length;
+    for (int position = 0; position < matcherCount; position++) {
         Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
-                }
-            }
-        }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+        if (!(m instanceof CapturesArguments)) {
+            continue;
+        }
+        // If the method uses varargs and we're at the last matcher, handle the varargs array
+        if (invocation.getMethod().isVarArgs() && position == matcherCount - 1) {
+            if (position < argCount) {
+                Object varargsArg = rawArguments[position];
+                if (varargsArg != null && varargsArg.getClass().isArray()) {
+                    int length = java.lang.reflect.Array.getLength(varargsArg);
+                    for (int i = 0; i < length; i++) {
+                        ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(varargsArg, i));
+                    }
+                } else {
+                    ((CapturesArguments) m).captureFrom(varargsArg);
+                }
+            }
+        } else {
+            if (position < argCount) {
+                ((CapturesArguments) m).captureFrom(rawArguments[position]);
+            }
+        }
+    }
 }
\ No newline at end of file
