diff --git a/tmp/a6e3c586-927c-4e2a-a855-d942f0bf5069_buggy.java b/tmp/7d7c846b-139e-465b-a2f7-80a97b9c9afc_fixed.java
index 1c875ad..6005a72 100644
--- a/tmp/a6e3c586-927c-4e2a-a855-d942f0bf5069_buggy.java
+++ b/tmp/7d7c846b-139e-465b-a2f7-80a97b9c9afc_fixed.java
@@ -1,31 +1,40 @@
 public void captureArgumentsFrom(Invocation invocation) {
+    Object[] rawArguments = invocation.getRawArguments();
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
+        // The number of formal parameters (the last one is varargs)
+        int parameterCount = invocation.getMethod().getParameterTypes().length;
+        for (int position = 0; position < matchers.size(); position++) {
+            Matcher matcher = matchers.get(position);
+            // If there is no argument to capture at this position, skip it.
+            if (rawArguments.length <= position || !(matcher instanceof CapturesArguments)) {
+                continue;
+            }
+            // If this parameter is the varargs parameter...
+            if (position == parameterCount - 1) {
+                Object varargsArray = rawArguments[position];
+                if (varargsArray != null && varargsArray.getClass().isArray()) {
+                    int length = java.lang.reflect.Array.getLength(varargsArray);
+                    for (int i = 0; i < length; i++) {
+                        ((CapturesArguments) matcher).captureFrom(java.lang.reflect.Array.get(varargsArray, i));
+                    }
                 } else {
+                    // If the vararg array is null, capture null.
+                    ((CapturesArguments) matcher).captureFrom(null);
+                }
+                // We assume that the varargs matcher is the last one so we can stop here.
+                return;
+            } else {
+                // Normal (non-varargs) parameter: capture its corresponding argument.
+                ((CapturesArguments) matcher).captureFrom(rawArguments[position]);
+            }
+        }
+    } else {
+        // Non-varargs: capture each argument directly by position.
         for (int position = 0; position < matchers.size(); position++) {
-                Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
-                }
-            }
-        }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+            Matcher matcher = matchers.get(position);
+            if (matcher instanceof CapturesArguments) {
+                ((CapturesArguments) matcher).captureFrom(invocation.getArgumentAt(position, Object.class));
+            }
+        }
+    }
 }
\ No newline at end of file
