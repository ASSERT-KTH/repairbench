diff --git a/tmp/f62100eb-8f11-4fa4-bb81-140e30afb8b9_buggy.java b/tmp/6f94354a-1696-4a24-b526-e6590b148c83_fixed.java
index 139579d..d2932ae 100644
--- a/tmp/f62100eb-8f11-4fa4-bb81-140e30afb8b9_buggy.java
+++ b/tmp/6f94354a-1696-4a24-b526-e6590b148c83_fixed.java
@@ -1,43 +1,42 @@
 // performance sensitive
 public boolean hasClass(String className) {
-        final String classAttr = attributes.get("class");
+    // use a case–insensitive lookup for the "class" attribute
+    final String classAttr = attributes.getIgnoreCase("class");
+    if (classAttr == null || classAttr.length() == 0)
+        return false;
     final int len = classAttr.length();
     final int wantLen = className.length();
 
-        if (len == 0 || len < wantLen) {
+    if (len < wantLen)
         return false;
-        }
 
-        // if both lengths are equal, only need compare the className with the attribute
-        if (len == wantLen) {
+    // if lengths are equal, just compare the whole string case–insensitively
+    if (len == wantLen)
         return className.equalsIgnoreCase(classAttr);
-        }
 
-        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
+    // otherwise, scan the attribute for individual class tokens
     boolean inClass = false;
     int start = 0;
     for (int i = 0; i < len; i++) {
-            if (Character.isWhitespace(classAttr.charAt(i))) {
+        char c = classAttr.charAt(i);
+        if (Character.isWhitespace(c)) {
             if (inClass) {
-                    // white space ends a class name, compare it with the requested one, ignore case
-                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
+                // end of a class token; check if it matches the requested class name
+                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen))
                     return true;
-                    }
                 inClass = false;
             }
         } else {
             if (!inClass) {
-                    // we're in a class name : keep the start of the substring
+                // start of a new class token
                 inClass = true;
                 start = i;
             }
         }
     }
-
-        // check the last entry
-        if (inClass && len - start == wantLen) {
+    // check the last token (if there is one)
+    if (inClass && len - start == wantLen)
         return classAttr.regionMatches(true, start, className, 0, wantLen);
-        }
 
     return false;
 }
\ No newline at end of file
