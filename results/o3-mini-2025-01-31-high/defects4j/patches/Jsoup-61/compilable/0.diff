diff --git a/tmp/032f2836-1f10-4e0e-844b-67fd049f7165_buggy.java b/tmp/88c5f6d9-bb90-4585-a738-1d948137637e_fixed.java
index 139579d..7105110 100644
--- a/tmp/032f2836-1f10-4e0e-844b-67fd049f7165_buggy.java
+++ b/tmp/88c5f6d9-bb90-4585-a738-1d948137637e_fixed.java
@@ -1,43 +1,40 @@
-    // performance sensitive
 public boolean hasClass(String className) {
-        final String classAttr = attributes.get("class");
+    // Use attr("class") so that attribute lookup is case insensitive (returns "" if not set)
+    final String classAttr = attr("class");
     final int len = classAttr.length();
     final int wantLen = className.length();
     
     if (len == 0 || len < wantLen) {
         return false;
     }
-
-        // if both lengths are equal, only need compare the className with the attribute
+    // If the entire attribute is the class, compare directly.
     if (len == wantLen) {
         return className.equalsIgnoreCase(classAttr);
     }
     
-        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
+    // Otherwise, scan through the attribute value looking for the className in space-separated tokens.
     boolean inClass = false;
     int start = 0;
     for (int i = 0; i < len; i++) {
         if (Character.isWhitespace(classAttr.charAt(i))) {
             if (inClass) {
-                    // white space ends a class name, compare it with the requested one, ignore case
                 if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
                     return true;
                 }
                 inClass = false;
             }
         } else {
             if (!inClass) {
-                    // we're in a class name : keep the start of the substring
                 inClass = true;
                 start = i;
             }
         }
     }
     
-        // check the last entry
-        if (inClass && len - start == wantLen) {
+    // Check the last token
+    if (inClass && (len - start) == wantLen) {
         return classAttr.regionMatches(true, start, className, 0, wantLen);
     }
     
     return false;
 }
\ No newline at end of file
