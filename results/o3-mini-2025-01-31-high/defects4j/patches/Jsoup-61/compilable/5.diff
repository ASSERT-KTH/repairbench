diff --git a/tmp/4a34fae1-19f1-4168-b312-78fa6d61c44c_buggy.java b/tmp/6cd5af19-e051-4e3e-b16e-81eabf88695a_fixed.java
index 139579d..082151d 100644
--- a/tmp/4a34fae1-19f1-4168-b312-78fa6d61c44c_buggy.java
+++ b/tmp/6cd5af19-e051-4e3e-b16e-81eabf88695a_fixed.java
@@ -1,43 +1,45 @@
 // performance sensitive
 public boolean hasClass(String className) {
+    // Reject null or empty class names immediately.
+    if (className == null || className.length() == 0)
+        throw new IllegalArgumentException("className must not be empty");
+
+    // Get the value of the "class" attribute; if missing, no classes exist.
     final String classAttr = attributes.get("class");
+    if (classAttr == null || classAttr.length() == 0)
+        return false;
+
     final int len = classAttr.length();
     final int wantLen = className.length();
 
-        if (len == 0 || len < wantLen) {
-            return false;
-        }
-
-        // if both lengths are equal, only need compare the className with the attribute
-        if (len == wantLen) {
+    // If the entire attribute is exactly the class name, compare directly.
+    if (len == wantLen)
         return className.equalsIgnoreCase(classAttr);
-        }
 
-        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
+    // Otherwise, scan through the attribute looking for tokens.
+    // (NB: We treat NBSP (U+00A0) as whitespace because HTML does too.)
     boolean inClass = false;
     int start = 0;
     for (int i = 0; i < len; i++) {
-            if (Character.isWhitespace(classAttr.charAt(i))) {
+        char c = classAttr.charAt(i);
+        // Use explicit check for non-breaking space since Character.isWhitespace('\u00A0') is false.
+        if (c == '\u00A0' || Character.isWhitespace(c)) {
             if (inClass) {
-                    // white space ends a class name, compare it with the requested one, ignore case
-                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
+                // End of a class token. If the token length matches, compare it.
+                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen))
                     return true;
-                    }
                 inClass = false;
             }
         } else {
             if (!inClass) {
-                    // we're in a class name : keep the start of the substring
                 inClass = true;
                 start = i;
             }
         }
     }
-
-        // check the last entry
-        if (inClass && len - start == wantLen) {
+    // Check the final token (if we didnâ€™t end on whitespace).
+    if (inClass && len - start == wantLen)
         return classAttr.regionMatches(true, start, className, 0, wantLen);
-        }
 
     return false;
 }
\ No newline at end of file
