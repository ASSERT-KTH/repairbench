diff --git a/tmp/72686666-2e4a-4e90-b15f-8f004155e04f_buggy.java b/tmp/2f6b437e-6d4e-437f-b6f0-d583342b33de_fixed.java
index d9d2789..98df22f 100644
--- a/tmp/72686666-2e4a-4e90-b15f-8f004155e04f_buggy.java
+++ b/tmp/2f6b437e-6d4e-437f-b6f0-d583342b33de_fixed.java
@@ -1,73 +1,47 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
+    // If the very first byte is 0 the field is considered as not set.
     if (buffer[start] == 0) {
         return 0L;
     }
 
-        // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+    // Skip any leading spaces.
+    while (start < end && buffer[start] == ' ') {
         start++;
-            } else {
-                break;
-            }
     }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
+    // Only trim trailing NULs or spaces if they are present.
+    // In many tar implementations the field is completely filled with digits,
+    // so we only remove trailing terminators if they actually exist.
+    if (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {
+        while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {
             end--;
-        } else {
+        }
+    }
+    // Otherwise, if the last byte is not a terminator,
+    // it must be a valid digit (i.e. between '0' and '7'),
+    // otherwise we throw an error.
+    else if (end > start && (buffer[end - 1] < '0' || buffer[end - 1] > '7')) {
         throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
-        }
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
+            exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));
     }
 
+    // Process each byte as an octal digit.
     for (; start < end; start++) {
         final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                 exceptionMessage(buffer, offset, length, start, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        result = (result << 3) + (currentByte - '0');
     }
 
     return result;
 }
\ No newline at end of file
