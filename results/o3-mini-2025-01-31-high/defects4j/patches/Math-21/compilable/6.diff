diff --git a/tmp/009fb088-26a4-4175-b776-e69f37d6e2f9_buggy.java b/tmp/106d1554-7ace-4329-81ce-8051a9d8b44f_fixed.java
index 6708762..ebf22c0 100644
--- a/tmp/009fb088-26a4-4175-b776-e69f37d6e2f9_buggy.java
+++ b/tmp/106d1554-7ace-4329-81ce-8051a9d8b44f_fixed.java
@@ -1,99 +1,83 @@
 /**
  * Decompose a symmetric positive semidefinite matrix.
  *
  * @param matrix Symmetric positive semidefinite matrix.
  * @param small Diagonal elements threshold under which  column are
  * considered to be dependent on previous ones and are discarded.
  * @exception NonPositiveDefiniteMatrixException if the matrix is not
  * positive semidefinite.
  */
 public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
         throws NonPositiveDefiniteMatrixException {
 
     final int order = matrix.getRowDimension();
     final double[][] c = matrix.getData();
     final double[][] b = new double[order][order];
 
-        int[] swap  = new int[order];
     int[] index = new int[order];
     for (int i = 0; i < order; ++i) {
         index[i] = i;
     }
 
     int r = 0;
-        for (boolean loop = true; loop;) {
+    boolean loop = true;
+    while (loop && r < order) {
 
-            // find maximal diagonal element
-            swap[r] = r;
+        // Find the index with the largest diagonal element from r to order-1.
+        int pivot = r;
         for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+            if (c[index[i]][index[i]] > c[index[pivot]][index[pivot]]) {
+                pivot = i;
             }
         }
-
-
-            // swap elements
-            if (swap[r] != r) {
+        if (pivot != r) {
             int tmp = index[r];
-                index[r] = index[swap[r]];
-                index[swap[r]] = tmp;
+            index[r] = index[pivot];
+            index[pivot] = tmp;
         }
 
-            // check diagonal element
+        // Check the pivot diagonal element.
         int ir = index[r];
         if (c[ir][ir] < small) {
-
             if (r == 0) {
                 throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
             }
-
-                // check remaining diagonal elements
             for (int i = r; i < order; ++i) {
                 if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
+                    // There is at least one sufficiently negative diagonal element.
                     throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
                 }
             }
-
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
-                ++r;
+            // Do not include this column (it is numerically zero) and terminate.
             loop = false;
-
         } else {
 
-                // transform the matrix
+            // Compute the Cholesky factor for column r.
             final double sqrt = FastMath.sqrt(c[ir][ir]);
             b[r][r] = sqrt;
-                final double inverse  = 1 / sqrt;
+            final double inverse = 1.0 / sqrt;
             for (int i = r + 1; i < order; ++i) {
                 final int ii = index[i];
                 final double e = inverse * c[ii][ir];
                 b[i][r] = e;
                 c[ii][ii] -= e * e;
                 for (int j = r + 1; j < i; ++j) {
                     final int ij = index[j];
                     final double f = c[ii][ij] - e * b[j][r];
                     c[ii][ij] = f;
                     c[ij][ii] = f;
                 }
             }
-
-                // prepare next iteration
-                loop = ++r < order;
+            r++;
         }
     }
 
-        // build the root matrix
+    // Build the root matrix using the permutation stored in 'index'.
     rank = r;
     root = MatrixUtils.createRealMatrix(order, r);
     for (int i = 0; i < order; ++i) {
         for (int j = 0; j < r; ++j) {
             root.setEntry(index[i], j, b[i][j]);
         }
     }
-
 }
\ No newline at end of file
