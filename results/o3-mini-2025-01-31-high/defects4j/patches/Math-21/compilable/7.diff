diff --git a/tmp/268a35ba-9cb2-4b24-b5bc-4106cff6de04_buggy.java b/tmp/1cdea129-8ec1-4aa4-b4ac-ab198c894a2e_fixed.java
index 6708762..cf8789a 100644
--- a/tmp/268a35ba-9cb2-4b24-b5bc-4106cff6de04_buggy.java
+++ b/tmp/1cdea129-8ec1-4aa4-b4ac-ab198c894a2e_fixed.java
@@ -1,99 +1,92 @@
 /**
  * Decompose a symmetric positive semidefinite matrix.
  *
  * @param matrix Symmetric positive semidefinite matrix.
-     * @param small Diagonal elements threshold under which  column are
+ * @param small Diagonal elements threshold under which columns are
  * considered to be dependent on previous ones and are discarded.
  * @exception NonPositiveDefiniteMatrixException if the matrix is not
  * positive semidefinite.
  */
 public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
     throws NonPositiveDefiniteMatrixException {
 
     final int order = matrix.getRowDimension();
     final double[][] c = matrix.getData();
+    // b will hold the Cholesky factor (in permuted order)
     final double[][] b = new double[order][order];
 
-        int[] swap  = new int[order];
+    // This index array will keep track of the permutation applied.
     int[] index = new int[order];
-        for (int i = 0; i < order; ++i) {
+    for (int i = 0; i < order; i++) {
         index[i] = i;
     }
 
     int r = 0;
-        for (boolean loop = true; loop;) {
-
-            // find maximal diagonal element
-            swap[r] = r;
-            for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+    boolean continueLoop = true;
+    while (continueLoop) {
+        // Find the pivot: the index (among r ... order-1) with the largest diagonal element.
+        int maxIndex = r;
+        for (int i = r + 1; i < order; i++) {
+            if (c[index[i]][index[i]] > c[index[maxIndex]][index[maxIndex]]) {
+                maxIndex = i;
             }
         }
-
-
-            // swap elements
-            if (swap[r] != r) {
+        // Swap the pivot into position r if necessary.
+        if (maxIndex != r) {
             int tmp = index[r];
-                index[r] = index[swap[r]];
-                index[swap[r]] = tmp;
+            index[r] = index[maxIndex];
+            index[maxIndex] = tmp;
         }
 
-            // check diagonal element
         int ir = index[r];
         if (c[ir][ir] < small) {
-
+            // If no column has been computed yet, the matrix cannot be decomposed.
             if (r == 0) {
                 throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
             }
-
-                // check remaining diagonal elements
-                for (int i = r; i < order; ++i) {
+            // Check remaining diagonal elements: if any is substantially negative,
+            // then the matrix is not positive semidefinite.
+            for (int i = r; i < order; i++) {
                 if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
                     throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
                 }
             }
-
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
-                ++r;
-                loop = false;
-
+            // At this point the rest of the matrix is (almost) null.
+            // We include one zero column in the factor and stop the loop.
+            r++;
+            continueLoop = false;
         } else {
-
-                // transform the matrix
-                final double sqrt = FastMath.sqrt(c[ir][ir]);
-                b[r][r] = sqrt;
-                final double inverse  = 1 / sqrt;
-                for (int i = r + 1; i < order; ++i) {
-                    final int ii = index[i];
+            // Compute the new column of the factor.
+            final double diagSqrt = FastMath.sqrt(c[ir][ir]);
+            b[r][r] = diagSqrt;
+            final double inverse = 1.0 / diagSqrt;
+            // Update the rest of the column and modify the trailing submatrix.
+            for (int i = r + 1; i < order; i++) {
+                int ii = index[i];
                 final double e = inverse * c[ii][ir];
                 b[i][r] = e;
                 c[ii][ii] -= e * e;
-                    for (int j = r + 1; j < i; ++j) {
-                        final int ij = index[j];
+                for (int j = r + 1; j < i; j++) {
+                    int ij = index[j];
                     final double f = c[ii][ij] - e * b[j][r];
                     c[ii][ij] = f;
                     c[ij][ii] = f;
                 }
             }
-
-                // prepare next iteration
-                loop = ++r < order;
+            r++;
+            if (r >= order) {
+                continueLoop = false;
+            }
         }
     }
 
-        // build the root matrix
+    // Build the root (Cholesky factor) matrix.
+    // The factor b was computed in the permuted order; we now undo the permutation.
     rank = r;
     root = MatrixUtils.createRealMatrix(order, r);
-        for (int i = 0; i < order; ++i) {
-            for (int j = 0; j < r; ++j) {
+    for (int i = 0; i < order; i++) {
+        for (int j = 0; j < r; j++) {
             root.setEntry(index[i], j, b[i][j]);
         }
     }
-
 }
\ No newline at end of file
