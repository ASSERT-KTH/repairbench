diff --git a/tmp/ae188908-5dbc-4914-ab1c-d97a72bd5945_buggy.java b/tmp/00b0c541-9a8c-46c1-80be-6cbf2616112f_fixed.java
index 6708762..04cd75b 100644
--- a/tmp/ae188908-5dbc-4914-ab1c-d97a72bd5945_buggy.java
+++ b/tmp/00b0c541-9a8c-46c1-80be-6cbf2616112f_fixed.java
@@ -1,99 +1,91 @@
 /**
  * Decompose a symmetric positive semidefinite matrix.
  *
  * @param matrix Symmetric positive semidefinite matrix.
  * @param small Diagonal elements threshold under which column are
  * considered to be dependent on previous ones and are discarded.
  * @exception NonPositiveDefiniteMatrixException if the matrix is not
  * positive semidefinite.
  */
 public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
     throws NonPositiveDefiniteMatrixException {
 
     final int order = matrix.getRowDimension();
     final double[][] c = matrix.getData();
     final double[][] b = new double[order][order];
 
-        int[] swap  = new int[order];
+    // Use an index array to record the permutation
     int[] index = new int[order];
     for (int i = 0; i < order; ++i) {
         index[i] = i;
     }
 
     int r = 0;
-        for (boolean loop = true; loop;) {
+    boolean loop = true;
+    while (loop) {
 
-            // find maximal diagonal element
-            swap[r] = r;
+        // Find the pivot: the index with the maximum remaining diagonal element.
+        int pivotIndex = r;
         for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+            if (c[index[i]][index[i]] > c[index[pivotIndex]][index[pivotIndex]]) {
+                pivotIndex = i;
             }
         }
 
-
-            // swap elements
-            if (swap[r] != r) {
+        // Swap the selected pivot with the current row if needed.
+        if (pivotIndex != r) {
             int tmp = index[r];
-                index[r] = index[swap[r]];
-                index[swap[r]] = tmp;
+            index[r] = index[pivotIndex];
+            index[pivotIndex] = tmp;
         }
 
-            // check diagonal element
         int ir = index[r];
         if (c[ir][ir] < small) {
-
+            // If no pivot could be found at the first step, the matrix is not positive semidefinite.
             if (r == 0) {
                 throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
             }
-
-                // check remaining diagonal elements
+            // Verify that the remaining diagonal entries are close to zero.
             for (int i = r; i < order; ++i) {
                 if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
+                    // A sufficiently negative value means the matrix is not positive semidefinite.
                     throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
                 }
             }
-
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
+            // Terminate the loop; the extra (zero) column will be included.
             ++r;
             loop = false;
-
         } else {
 
-                // transform the matrix
+            // Compute the pivot column of the factor.
             final double sqrt = FastMath.sqrt(c[ir][ir]);
             b[r][r] = sqrt;
-                final double inverse  = 1 / sqrt;
+            final double inverse = 1.0 / sqrt;
             for (int i = r + 1; i < order; ++i) {
                 final int ii = index[i];
                 final double e = inverse * c[ii][ir];
                 b[i][r] = e;
                 c[ii][ii] -= e * e;
                 for (int j = r + 1; j < i; ++j) {
                     final int ij = index[j];
                     final double f = c[ii][ij] - e * b[j][r];
                     c[ii][ij] = f;
                     c[ij][ii] = f;
                 }
             }
 
-                // prepare next iteration
-                loop = ++r < order;
+            // Proceed to the next column.
+            ++r;
+            loop = (r < order);
         }
     }
 
-        // build the root matrix
+    // Build the root (Cholesky factor) matrix.
     rank = r;
     root = MatrixUtils.createRealMatrix(order, r);
     for (int i = 0; i < order; ++i) {
         for (int j = 0; j < r; ++j) {
             root.setEntry(index[i], j, b[i][j]);
         }
     }
-
 }
\ No newline at end of file
