diff --git a/tmp/18b41d3d-c4d8-40db-8f3a-44f1ce956699_buggy.java b/tmp/a0fb690f-29b0-4092-ba78-5d78c4618ec2_fixed.java
index 227a4ef..f23140b 100644
--- a/tmp/18b41d3d-c4d8-40db-8f3a-44f1ce956699_buggy.java
+++ b/tmp/a0fb690f-29b0-4092-ba78-5d78c4618ec2_fixed.java
@@ -1,48 +1,48 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // All following lines must be padded with nextLineTabStop space characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
-            int lastPos = pos;
+        // Prepend the padding to the remaining text.
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
+        // Use nextLineTabStop as the start index so that the padding is not counted
+        // in the available width.
+        pos = findWrapPos(text, width, nextLineTabStop);
         if (pos == -1)
         {
             sb.append(text);
-
-                return sb;
-            } else
-            if (pos == lastPos)
+            break;
+        }
+        // If no progress is made beyond the padding, simply output the rest to avoid looping.
+        if (pos <= nextLineTabStop)
         {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+            sb.append(text);
+            break;
         }
-
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
+    return sb;
 }
\ No newline at end of file
