diff --git a/tmp/8834ed59-12b0-4c62-9f94-d6bf014a3076_buggy.java b/tmp/816cc36a-f59a-4156-add9-db6cf1ab85b7_fixed.java
index 227a4ef..5f59f26 100644
--- a/tmp/8834ed59-12b0-4c62-9f94-d6bf014a3076_buggy.java
+++ b/tmp/816cc36a-f59a-4156-add9-db6cf1ab85b7_fixed.java
@@ -1,48 +1,31 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // All following lines must be padded with nextLineTabStop space characters.
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
-            int lastPos = pos;
+        // Prepend padding to the remaining text and trim any extra whitespace.
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        // When wrapping subsequent lines, start searching after the indentation.
+        pos = findWrapPos(text, width, nextLineTabStop);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
