diff --git a/tmp/16668344-f74c-4feb-a107-34fe7add150f_buggy.java b/tmp/65e342c0-4bac-4322-af7e-170913b04d99_fixed.java
index 227a4ef..9d4e61a 100644
--- a/tmp/16668344-f74c-4feb-a107-34fe7add150f_buggy.java
+++ b/tmp/65e342c0-4bac-4322-af7e-170913b04d99_fixed.java
@@ -1,48 +1,38 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
+    // Wrap the first line using the full width
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // If there isn’t enough room for any indented text, just output the rest.
+    if (width - nextLineTabStop <= 0) {
+        sb.append(text.substring(pos).trim());
+        return sb;
+    }
+
     final String padding = createPadding(nextLineTabStop);
     
-        while (true)
-        {
-            int lastPos = pos;
+    while (true) {
+        // Prepend the padding to the remaining text, trimming any leading/trailing spaces.
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
-            {
+        // For subsequent lines, the pad area is not available for text so start
+        // searching from nextLineTabStop instead of 0.
+        pos = findWrapPos(text, width, nextLineTabStop);
+        if (pos == -1) {
+            sb.append(text);
+            return sb;
+        }
+        // If no progress can be made (i.e. we can’t break past the indent),
+        // then just append the rest of the text to avoid an infinite loop.
+        if (pos <= nextLineTabStop) {
             sb.append(text);
-
             return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
         }
-
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
