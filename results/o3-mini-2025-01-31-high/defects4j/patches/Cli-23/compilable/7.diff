diff --git a/tmp/f6b2a62d-e71a-4330-8976-c49d865dd474_buggy.java b/tmp/a313e6b8-b024-4b31-9116-e9a76e54ef41_fixed.java
index 227a4ef..ecb8ce6 100644
--- a/tmp/f6b2a62d-e71a-4330-8976-c49d865dd474_buggy.java
+++ b/tmp/a313e6b8-b024-4b31-9116-e9a76e54ef41_fixed.java
@@ -1,48 +1,31 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // For subsequent lines, we want to indent with padding so we must ignore
+    // any wrap break that falls in the padding region.
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
-            int lastPos = pos;
+    while (true) {
+        // Remove the already-printed portion and prepend the padding.
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
-            {
+        // Start looking for a wrap position after the padding.
+        pos = findWrapPos(text, width, padding.length());
+        if (pos == -1) {
             sb.append(text);
-
             return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
         }
-
+        // If the break comes too early (i.e. within the padding) then no progress is made.
+        // Force a break at 'width' (or at the end of the string if it is shorter).
+        if (pos <= padding.length()) {
+            pos = Math.min(width, text.length());
+        }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
