diff --git a/tmp/d4834b23-e730-4e22-8fc0-688ed72dba66_buggy.java b/tmp/6e89127d-88bb-4f2c-b045-6b8f183dde97_fixed.java
index 227a4ef..24c667f 100644
--- a/tmp/d4834b23-e730-4e22-8fc0-688ed72dba66_buggy.java
+++ b/tmp/6e89127d-88bb-4f2c-b045-6b8f183dde97_fixed.java
@@ -1,48 +1,34 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
-    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
-    {
+protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {
+    // Process the first line using the full width.
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
+    // In case we donâ€™t get any progress, force a break.
+    if (pos <= 0 || pos > text.length()) {
+        pos = Math.min(width, text.length());
+    }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+    text = text.substring(pos).trim();
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // For subsequent lines, the effective width is reduced by the tab stop.
     final String padding = createPadding(nextLineTabStop);
+    int effectiveWidth = width - nextLineTabStop;
     
-        while (true)
-        {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
-            {
-                sb.append(text);
-
+    while (text.length() > 0) {
+        pos = findWrapPos(text, effectiveWidth, 0);
+        // If no break position is found, simply append the remaining text.
+        if (pos == -1) {
+            sb.append(padding).append(text);
+            break;
+        }
+        // If progress is zero or not significant, force a break.
+        if (pos <= 0 || pos > text.length()) {
+            pos = text.length() > effectiveWidth ? effectiveWidth : text.length();
+        }
+        sb.append(padding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        text = text.substring(pos).trim();
+    }
     return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
 }
\ No newline at end of file
