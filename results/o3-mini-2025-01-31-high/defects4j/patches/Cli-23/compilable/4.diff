diff --git a/tmp/7d1b5e36-b1f8-4d9b-a283-50b46f496952_buggy.java b/tmp/21c6f978-897d-485e-975f-aafa166c8200_fixed.java
index 227a4ef..cbb0657 100644
--- a/tmp/7d1b5e36-b1f8-4d9b-a283-50b46f496952_buggy.java
+++ b/tmp/21c6f978-897d-485e-975f-aafa166c8200_fixed.java
@@ -1,48 +1,43 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
-    {
+                                         int nextLineTabStop, String text) {
+    // Trim any trailing whitespace from the text.
+    text = rtrim(text);
+    if (text.length() == 0) {
+        return sb;
+    }
+
+    // Wrap the first line using the full width.
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
-        }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
-            {
+    if (pos == -1) {
         sb.append(text);
-
         return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
     }
-
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+    text = text.substring(pos).trim();
+
+    // For subsequent lines, we need to account for the padding added.
+    final String padding = createPadding(nextLineTabStop);
+    int availableWidth = width - nextLineTabStop;
+    if (availableWidth < 1) { 
+        // Safeguard in case the nextLineTabStop is equal to or greater than width.
+        availableWidth = width;
     }
+
+    // Process remaining text.
+    while (text.length() > 0) {
+        pos = findWrapPos(text, availableWidth, 0);
+        if (pos == -1) {
+            // No natural break found; append the rest of the text.
+            sb.append(padding).append(text);
+            break;
+        }
+        // If the break position is 0 (i.e. no progress made), force a break.
+        if (pos <= 0) {
+            pos = Math.min(availableWidth, text.length());
+        }
+        sb.append(padding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        text = text.substring(pos).trim();
+    }
+
+    return sb;
 }
\ No newline at end of file
