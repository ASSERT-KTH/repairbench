diff --git a/tmp/ce47a628-2b0d-4f20-9ab9-91a5c2c2039c_buggy.java b/tmp/77cad67c-5c38-4b6b-bed1-6c43af35fa95_fixed.java
index 227a4ef..80cca13 100644
--- a/tmp/ce47a628-2b0d-4f20-9ab9-91a5c2c2039c_buggy.java
+++ b/tmp/77cad67c-5c38-4b6b-bed1-6c43af35fa95_fixed.java
@@ -1,48 +1,34 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
-    {
+                                         int nextLineTabStop, String text) {
+    // Find the wrap position in the first (unindented) line.
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // Compute what remains after the first line.
+    String remainder = text.substring(pos).trim();
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
-            {
-                sb.append(text);
-
+    // Process each remaining chunk.
+    while (remainder.length() > 0) {
+        // Prepend the padding to the remainder.
+        String line = padding + remainder;
+        // Start searching for a wrap point at index 1 so we do not pick up the leading padding.
+        pos = findWrapPos(line, width, 1);
+        if (pos == -1) {
+            sb.append(line);
+            break;
+        }
+        // If the break point is too short (i.e. within the padding), then force a break
+        // to avoid an infinite loop when no proper break point is found.
+        if (pos <= padding.length()) {
+            pos = width;
+        }
+        sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);
+        remainder = line.substring(pos).trim();
+    }
     return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
 }
\ No newline at end of file
