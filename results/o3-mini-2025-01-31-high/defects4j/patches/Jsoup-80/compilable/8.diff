diff --git a/tmp/ab8d3b43-e9f4-4ef9-b409-74886d5ffd1d_buggy.java b/tmp/270331a5-82aa-43ce-9168-b32dd6e56bbb_fixed.java
index cbfa753..9a760ea 100644
--- a/tmp/ab8d3b43-e9f4-4ef9-b409-74886d5ffd1d_buggy.java
+++ b/tmp/270331a5-82aa-43ce-9168-b32dd6e56bbb_fixed.java
@@ -1,15 +1,33 @@
 void insert(Token.Comment commentToken) {
     Comment comment = new Comment(commentToken.getData());
     Node insert = comment;
     if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)
-            // so we do a bit of a hack and parse the data as an element to pull the attributes out
-            String data = comment.getData();
-            if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))) {
-                Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri, Parser.xmlParser());
+        String data = comment.getData().trim();
+        // Check if this bogus comment is really an XML declaration:
+        // It may either start with "!" or "?" or (in dodgy cases) simply start with "xml".
+        if (data.length() > 0 &&
+                (data.startsWith("!") || data.startsWith("?") || data.toLowerCase().startsWith("xml"))) {
+            String decl;
+            // If the string starts with '!' or '?', strip it.
+            // Only strip the trailing punctuation if it matches the leading one.
+            if (data.charAt(0) == '!' || data.charAt(0) == '?') {
+                if (data.length() > 1 && data.charAt(data.length() - 1) == data.charAt(0))
+                    decl = data.substring(1, data.length() - 1).trim();
+                else
+                    decl = data.substring(1).trim();
+            } else {
+                decl = data;
+            }
+            // Wrap into a self-closing tag so the XML parser can extract attributes.
+            Document doc = Jsoup.parse("<" + decl + "/>", baseUri, Parser.xmlParser());
+            if (!doc.children().isEmpty()) {
                 Element el = doc.child(0);
+                // The second argument is set to true if the XML declaration starts with '!' (as in <!xml ...>) 
+                // and false if it starts with '?' (as in <?xml ...>).
                 insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith("!"));
                 insert.attributes().addAll(el.attributes());
             }
         }
+    }
     insertNode(insert);
 }
\ No newline at end of file
