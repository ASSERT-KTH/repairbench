diff --git a/tmp/40f11198-44c7-4d82-9f65-a0bb6fe2e0d5_buggy.java b/tmp/af8c6910-1bc4-4430-b987-f071cacc8ad8_fixed.java
index cbfa753..d48e368 100644
--- a/tmp/40f11198-44c7-4d82-9f65-a0bb6fe2e0d5_buggy.java
+++ b/tmp/af8c6910-1bc4-4430-b987-f071cacc8ad8_fixed.java
@@ -1,15 +1,31 @@
 void insert(Token.Comment commentToken) {
     Comment comment = new Comment(commentToken.getData());
     Node insert = comment;
     if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)
         // so we do a bit of a hack and parse the data as an element to pull the attributes out
         String data = comment.getData();
-            if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))) {
-                Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri, Parser.xmlParser());
+        if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?") || data.toLowerCase().startsWith("xml"))) {
+            String declData;
+            // When the data begins with '!' or '?' and also ends with the same char, strip both ends.
+            // Otherwise, just strip the first char. For declarations that donâ€™t have a leading delimiter
+            // (eg, "xml version='1.0'") leave the data unaltered.
+            if (data.startsWith("!") || data.startsWith("?")) {
+                if (data.charAt(0) == data.charAt(data.length() - 1))
+                    declData = data.substring(1, data.length() - 1);
+                else
+                    declData = data.substring(1);
+            } else {
+                declData = data;
+            }
+            Document doc = Jsoup.parse("<" + declData + ">", baseUri, Parser.xmlParser());
+            if (!doc.children().isEmpty()) {
                 Element el = doc.child(0);
-                    insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith("!"));
+                // When the original data started with '?' or (in its absence) if it begins with "xml", consider it a processing instruction.
+                boolean isProcessingInstruction = data.startsWith("?") || data.toLowerCase().startsWith("xml");
+                insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), isProcessingInstruction);
                 insert.attributes().addAll(el.attributes());
             }
         }
+    }
     insertNode(insert);
 }
\ No newline at end of file
