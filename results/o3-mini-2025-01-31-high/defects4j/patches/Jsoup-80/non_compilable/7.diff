diff --git a/tmp/a017f4cc-431b-44d8-af0e-e0705f2ab53e_buggy.java b/tmp/52acb51e-d82c-4a46-916c-92f92450f8bc_fixed.java
index cbfa753..72f8517 100644
--- a/tmp/a017f4cc-431b-44d8-af0e-e0705f2ab53e_buggy.java
+++ b/tmp/52acb51e-d82c-4a46-916c-92f92450f8bc_fixed.java
@@ -1,15 +1,34 @@
 void insert(Token.Comment commentToken) {
     Comment comment = new Comment(commentToken.getData());
     Node insert = comment;
-        if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)
-            // so we do a bit of a hack and parse the data as an element to pull the attributes out
+    if (commentToken.bogus) { // XML declarations are emitted as bogus comments (fine for HTML but not for XML)
+        // hack: try to parse the comment’s data as if it were an element to pull out attributes
         String data = comment.getData();
-            if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))) {
-                Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri, Parser.xmlParser());
-                    Element el = doc.child(0);
-                    insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith("!"));
+        String trimmed = data.trim();
+        String fragment = null;
+
+        // If the data is wrapped with matching '!' or '?' then remove those boundaries.
+        if (trimmed.length() > 1 && 
+            ((trimmed.charAt(0) == '!' || trimmed.charAt(0) == '?') && trimmed.charAt(trimmed.length() - 1) == trimmed.charAt(0))) {
+            fragment = trimmed.substring(1, trimmed.length() - 1);
+        } 
+        // Otherwise, if the data starts with "xml" (ignoring case), use it as-is.
+        else if (trimmed.toLowerCase().startsWith("xml")) {
+            fragment = trimmed;
+        }
+        
+        if (fragment != null && !fragment.isEmpty()) {
+            // Wrap the fragment in a self-closing element tag so that the XML parser can extract attributes.
+            Document doc = Jsoup.parse("<" + fragment + " />", baseUri, Parser.xmlParser());
+            Elements elements = doc.children();
+            if (!elements.isEmpty()) {
+                Element el = elements.first();
+                // Determine if it’s a declaration (if originally it had a leading '!') else treat as a processing instruction.
+                boolean isDeclaration = trimmed.charAt(0) == '!';
+                insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), isDeclaration);
                 insert.attributes().addAll(el.attributes());
             }
         }
+    }
     insertNode(insert);
 }
\ No newline at end of file
