diff --git a/tmp/b0467696-f7da-41e2-9d4f-9cd7f49acda8_buggy.java b/tmp/cddbb98f-be05-4b88-a076-55d57ffed37c_fixed.java
index e087f95..07617a1 100644
--- a/tmp/b0467696-f7da-41e2-9d4f-9cd7f49acda8_buggy.java
+++ b/tmp/cddbb98f-be05-4b88-a076-55d57ffed37c_fixed.java
@@ -1,53 +1,78 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
  * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    // The field must be at least 2 bytes long.
+    if (length < 2) {
+        throw new IllegalArgumentException("Octal field length must be at least 2 bytes: " + length);
+    }
+    final int end = offset + length;
+    
+    // If every byte in the field is NUL then this is a missing field.
+    boolean allNull = true;
+    for (int idx = offset; idx < end; idx++) {
+        if (buffer[idx] != 0) {
+            allNull = false;
+            break;
+        }
+    }
+    if (allNull) {
+        return 0L;
+    }
+    
+    int i = offset;
+    // Skip only leading spaces.
+    while (i < end && buffer[i] == (byte) ' ') {
+        i++;
+    }
+    if (i >= end) {
+        // Should not happen since we already ruled out all-NUL fields.
+        throw new IllegalArgumentException("Invalid octal field: no digits after leading spaces.");
+    }
+    
+    // Parse octal digits.
+    int digitStart = i;
     long result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
-        int     start = offset;
-
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
+    while (i < end && buffer[i] >= '0' && buffer[i] <= '7') {
+        result = (result << 3) + (buffer[i] - '0');
+        i++;
     }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
+    if (i == digitStart) {
+        // No valid octal digit was found.
+        throw new IllegalArgumentException("Invalid octal field: no octal digits found.");
     }
-                if (currentByte == (byte) ' ') {
-                break;
+    
+    // There MUST be a trailer byte (space or NUL) immediately following the digits.
+    if (i >= end) {
+        throw new IllegalArgumentException("Invalid octal field: missing trailing space or NUL.");
     }
+    if (buffer[i] != (byte) ' ' && buffer[i] != 0) {
+        throw new IllegalArgumentException(
+            exceptionMessage(buffer, offset, length, i, buffer[i])
+        );
     }
     
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+    // All remaining bytes MUST be trailer bytes.
+    for (int j = i; j < end; j++) {
+        if (buffer[j] != (byte) ' ' && buffer[j] != 0) {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                exceptionMessage(buffer, offset, length, j, buffer[j])
+            );
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
     
     return result;
 }
\ No newline at end of file
