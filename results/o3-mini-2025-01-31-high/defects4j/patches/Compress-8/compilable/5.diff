diff --git a/tmp/0ccb8883-4f34-4197-a2f7-259746fd8134_buggy.java b/tmp/9ed27387-2cfb-413b-a2a8-8c6aa11a7b74_fixed.java
index e087f95..03750d9 100644
--- a/tmp/0ccb8883-4f34-4197-a2f7-259746fd8134_buggy.java
+++ b/tmp/9ed27387-2cfb-413b-a2a8-8c6aa11a7b74_fixed.java
@@ -1,53 +1,65 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
+    // The length must be at least 2 bytes.
+    if (length < 2) {
+        throw new IllegalArgumentException("octal field must be at least 2 bytes long");
+    }
     int end = offset + length;
+
+    // If the entire field is NULs then this field represents a missing value.
+    boolean allNul = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNul = false;
+            break;
+        }
+    }
+    if (allNul) {
+        return 0;
+    }
+
+    // Skip only leading spaces (not zeros â€“ those are valid digits).
     int start = offset;
-
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
+    while (start < end && buffer[start] == (byte) ' ') {
+        start++;
     }
     
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
+    // Now, the digit sequence starts at 'start'.
+    // There must be at least one octal digit.
+    int digitStart = start;
+    int i = digitStart;
+    while (i < end && buffer[i] != 0 && buffer[i] != (byte) ' ') {
+        if (buffer[i] < '0' || buffer[i] > '7') {
+            throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, digitStart, buffer[i])
+            );
         }
-                if (currentByte == (byte) ' ') {
-                break;
+        i++;
     }
+    if (i == digitStart) {
+        // No octal digits were found (for example, the first non-space is a delimiter).
+        throw new IllegalArgumentException(
+            exceptionMessage(buffer, offset, length, digitStart, buffer[digitStart])
+        );
     }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+    // The digit sequence must be immediately terminated by a delimiter (a space or NUL).
+    if (i == end) {
+        throw new IllegalArgumentException("No trailing space or NUL found in octal field");
+    }
 
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+    // After the digit sequence, the remaining characters (if any) must all be either space or NUL.
+    for (int j = i; j < end; j++) {
+        if (buffer[j] != 0 && buffer[j] != (byte) ' ') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                exceptionMessage(buffer, offset, length, digitStart, buffer[j])
+            );
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
+    // Convert the digit sequence from octal.
+    long result = 0;
+    for (int j = digitStart; j < i; j++) {
+        result = (result << 3) + (buffer[j] - (byte) '0');
+    }
     return result;
 }
\ No newline at end of file
