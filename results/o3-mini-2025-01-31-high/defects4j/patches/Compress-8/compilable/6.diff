diff --git a/tmp/e041bcbd-2380-40f3-b32e-e1fbe79b1dc0_buggy.java b/tmp/344c8a52-47e8-436e-b2f9-0852378b309e_fixed.java
index e087f95..b6e4206 100644
--- a/tmp/e041bcbd-2380-40f3-b32e-e1fbe79b1dc0_buggy.java
+++ b/tmp/344c8a52-47e8-436e-b2f9-0852378b309e_fixed.java
@@ -1,53 +1,58 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
+    // The numeric field must be at least 2 bytes long.
+    if (length < 2) {
+        throw new IllegalArgumentException("A numeric field must be at least 2 bytes long");
+    }
     int end = offset + length;
-        int     start = offset;
     
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+    // If every byte in the field is NUL, then return 0.
+    boolean allNull = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNull = false;
             break;
         }
+    }
+    if (allNull) {
+        return 0L;
+    }
     
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
+    long result = 0L;
+    int index = offset;
+    
+    // Skip any leading spaces.
+    while (index < end && buffer[index] == (byte)' ') {
+        index++;
     }
-                if (currentByte == (byte) ' ') {
-                break;
+    
+    // There must be at least one octal digit now.
+    int digitStart = index;
+    while (index < end && buffer[index] >= (byte)'0' && buffer[index] <= (byte)'7') {
+        result = (result << 3) + (buffer[index] - (byte)'0');
+        index++;
     }
+    if (index == digitStart) {
+        throw new IllegalArgumentException("No octal digits in numeric field");
     }
     
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+    // The next character (the terminator) must be either a space or NUL.
+    if (index >= end) {
+        throw new IllegalArgumentException("Missing terminating null or space in numeric field");
+    }
+    byte term = buffer[index];
+    if (term != 0 && term != (byte)' ') {
+        throw new IllegalArgumentException("Invalid terminating character in numeric field: " + term);
+    }
+    index++; // Skip the terminator.
     
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
-            }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    // Any remaining bytes in the field must be either a space or NUL.
+    while (index < end) {
+        byte b = buffer[index];
+        if (b != 0 && b != (byte)' ') {
+            throw new IllegalArgumentException("Invalid character in trailer of numeric field: " + b);
+        }
+        index++;
     }
     
     return result;
 }
\ No newline at end of file
