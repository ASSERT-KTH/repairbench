diff --git a/tmp/9cf083e4-ddca-4785-8275-b8d3960a273a_buggy.java b/tmp/502960d0-5737-4772-b1b0-96b2c9668b0c_fixed.java
index e087f95..4459a96 100644
--- a/tmp/9cf083e4-ddca-4785-8275-b8d3960a273a_buggy.java
+++ b/tmp/502960d0-5737-4772-b1b0-96b2c9668b0c_fixed.java
@@ -1,53 +1,66 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
+    // The field length must be at least 2 bytes.
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes.");
+    }
     int end = offset + length;
-        int     start = offset;
     
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+    // The very last byte must be either a NUL or a space.
+    byte trailer = buffer[end - 1];
+    if (trailer != 0 && trailer != (byte) ' ') {
+        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, end - 1, trailer));
+    }
+    
+    // If the entire field consists solely of NULs, return 0 (this is allowed).
+    boolean allNull = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNull = false;
             break;
         }
+    }
+    if (allNull) {
+        return 0L;
+    }
+    
+    // Skip any leading spaces.
+    int i = offset;
+    while (i < end && buffer[i] == (byte) ' ') {
+        i++;
+    }
+    // At this point, there must be at least one digit;
+    // if we've reached a NUL right away, that means non-NUL data exists elsewhere so that's an error.
+    if (i >= end || buffer[i] == 0) {
+        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, buffer[i < end ? i : end - 1]));
+    }
     
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
+    long result = 0;
+    boolean foundDigit = false;
+    // Process the octal digits.
+    for (; i < end; i++) {
+        byte b = buffer[i];
+        // A delimiter (space or NUL) signals the end of the number.
+        if (b == (byte) ' ' || b == 0) {
+            // All remaining bytes (if any) must be either space or NUL.
+            for (int j = i; j < end; j++) {
+                if (buffer[j] != (byte) ' ' && buffer[j] != 0) {
+                    throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, j, buffer[j]));
+                }
             }
-                if (currentByte == (byte) ' ') {
             break;
         }
+        // Only digits '0' to '7' are valid.
+        if (b < (byte) '0' || b > (byte) '7') {
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, b));
+        }
+        foundDigit = true;
+        result = (result << 3) + (b - (byte) '0');
     }
     
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
-            }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    if (!foundDigit) {
+        // If no digit was found in a field that isnâ€™t all NULs, this is considered an error.
+        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, offset, buffer[offset]));
     }
     
     return result;
 }
\ No newline at end of file
