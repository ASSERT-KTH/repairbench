diff --git a/tmp/80412f66-d95b-4fa6-be4a-728f64effb40_buggy.java b/tmp/3af02df5-e5b3-4ae5-87c5-161e1d6b61fa_fixed.java
index e087f95..8f0ff58 100644
--- a/tmp/80412f66-d95b-4fa6-be4a-728f64effb40_buggy.java
+++ b/tmp/3af02df5-e5b3-4ae5-87c5-161e1d6b61fa_fixed.java
@@ -1,53 +1,63 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
+    // The field must be at least 2 bytes long.
+    if (length < 2) {
+        throw new IllegalArgumentException("Octal field length must be at least 2 bytes");
+    }
     int end = offset + length;
-        int     start = offset;
     
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+    // If the entire field is NULs then return 0.
+    boolean allNull = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNull = false;
             break;
         }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
-                if (currentByte == (byte) ' ') {
-                break;
     }
+    if (allNull) {
+        return 0;
     }
     
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+    // Skip any leading spaces. Note: do not skip digit '0'.
+    int idx = offset;
+    while (idx < end && buffer[idx] == (byte) ' ') {
+        idx++;
+    }
     
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+    long result = 0;
+    boolean foundDigit = false;
+    // Parse octal digits until a delimiter (NUL or space) is reached.
+    while (idx < end) {
+        byte currentByte = buffer[idx];
+        if (currentByte == 0 || currentByte == (byte) ' ') {
+            break;
+        }
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, idx, currentByte));
+        }
+        foundDigit = true;
+        result = (result << 3) + (currentByte - '0');
+        idx++;
+    }
+    
+    // There must be at least one octal digit.
+    if (!foundDigit) {
+        throw new IllegalArgumentException("No octal digits found in field");
+    }
+    
+    // At this point, we must have encountered a trailing delimiter.
+    if (idx >= end) {
+        throw new IllegalArgumentException("Missing null terminator or space at end of octal field");
+    }
+    
+    // The remainder of the field (if any) must consist solely of NULs and/or spaces.
+    for (; idx < end; idx++) {
+        byte currentByte = buffer[idx];
+        if (currentByte != 0 && currentByte != (byte) ' ') {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, idx, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
     
     return result;
 }
\ No newline at end of file
