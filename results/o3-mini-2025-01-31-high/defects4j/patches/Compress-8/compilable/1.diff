diff --git a/tmp/d6cdf358-8775-4416-9054-5854d9a14f1c_buggy.java b/tmp/a6fd5723-c332-434d-918d-79db3fe4798c_fixed.java
index e087f95..04b8a9e 100644
--- a/tmp/d6cdf358-8775-4416-9054-5854d9a14f1c_buggy.java
+++ b/tmp/a6fd5723-c332-434d-918d-79db3fe4798c_fixed.java
@@ -1,53 +1,69 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
  * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
+    if (length < 2) {
+        throw new IllegalArgumentException("Octal field must be at least 2 bytes long");
+    }
+
+    // Check if the entire field is NUL bytes.
+    boolean allNull = true;
+    for (int i = offset; i < offset + length; i++) {
+        if (buffer[i] != 0) {
+            allNull = false;
+            break;
+        }
+    }
+    if (allNull) {
+        return 0;
+    }
+
+    // The very last byte must be either a NUL or a space.
+    final int bufEnd = offset + length;
+    if (buffer[bufEnd - 1] != 0 && buffer[bufEnd - 1] != (byte)' ') {
+        throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, offset, buffer[bufEnd - 1]));
+    }
+
+    // Trim off any trailing NULs or spaces.
+    int end = bufEnd;
+    while (end > offset && (buffer[end - 1] == 0 || buffer[end - 1] == (byte)' ')) {
+        end--;
+    }
+
+    // Skip leading spaces.
     int start = offset;
+    while (start < end && buffer[start] == (byte)' ') {
+        start++;
+    }
 
+    // There should be at least one digit.
+    if (start >= end) {
+        throw new IllegalArgumentException("No octal digits found in field");
+    }
+
+    long result = 0;
+    // Process each digit. All characters must be between '0' and '7'.
     for (int i = start; i < end; i++) {
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+        byte b = buffer[i];
+        if (b < (byte)'0' || b > (byte)'7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, b));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        result = (result << 3) + (b - (byte)'0');
     }
-
     return result;
 }
\ No newline at end of file
