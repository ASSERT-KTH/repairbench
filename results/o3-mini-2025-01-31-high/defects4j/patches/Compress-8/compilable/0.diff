diff --git a/tmp/b88dce75-5083-4919-8a4d-aaaca5959ce9_buggy.java b/tmp/755d366a-da57-4eeb-a21d-060620afeec6_fixed.java
index e087f95..e432065 100644
--- a/tmp/b88dce75-5083-4919-8a4d-aaaca5959ce9_buggy.java
+++ b/tmp/755d366a-da57-4eeb-a21d-060620afeec6_fixed.java
@@ -1,53 +1,72 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if the field length is less than 2, if the trailing space/NUL is missing,
+ *         if no octal digits are found in a non‐all‐NUL field, or if an invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
+    if (length < 2) {
+        throw new IllegalArgumentException("Octal field length must be at least 2 bytes.");
+    }
     int end = offset + length;
-        int     start = offset;
 
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+    // Check if the field is composed entirely of NULs.
+    boolean allNul = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNul = false;
             break;
         }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
     }
-                if (currentByte == (byte) ' ') {
-                break;
+    if (allNul) {
+        return 0L;
     }
+    
+    // The last byte must be either NUL or space.
+    if (buffer[end - 1] != 0 && buffer[end - 1] != (byte)' ') {
+        throw new IllegalArgumentException("Octal field does not end with a trailing space or NUL.");
     }
     
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+    // Skip leading spaces.
+    int i = offset;
+    while (i < end && buffer[i] == (byte)' ') {
+        i++;
+    }
     
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+    // There should be at least one octal digit.
+    long result = 0L;
+    boolean foundDigit = false;
+    while (i < end && buffer[i] >= (byte)'0' && buffer[i] <= (byte)'7') {
+        foundDigit = true;
+        result = (result << 3) + (buffer[i] - (byte)'0');
+        i++;
     }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    if (!foundDigit) {
+        throw new IllegalArgumentException("No octal digits found in field.");
     }
     
+    // The first non-digit (if any) must be a valid terminator (either space or NUL).
+    if (i < end && buffer[i] != 0 && buffer[i] != (byte)' ') {
+        throw new IllegalArgumentException("Invalid character in octal field: " + buffer[i]);
+    }
+    
+    // The remainder of the field, if any, must be either spaces or NULs.
+    while (i < end) {
+        if (buffer[i] != 0 && buffer[i] != (byte)' ') {
+            throw new IllegalArgumentException("Invalid trailing character in octal field: " + buffer[i]);
+        }
+        i++;
+    }
     return result;
 }
\ No newline at end of file
