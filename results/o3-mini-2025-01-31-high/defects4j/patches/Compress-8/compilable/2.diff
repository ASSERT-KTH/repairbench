diff --git a/tmp/49abd29b-9446-4a85-8db1-94517c9b65c5_buggy.java b/tmp/fd30dc6e-12fc-4262-9f7a-1154566f2d68_fixed.java
index e087f95..e181720 100644
--- a/tmp/49abd29b-9446-4a85-8db1-94517c9b65c5_buggy.java
+++ b/tmp/fd30dc6e-12fc-4262-9f7a-1154566f2d68_fixed.java
@@ -1,53 +1,68 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    // Must be at least 2 bytes long.
+    if (length < 2) {
+        throw new IllegalArgumentException("Field length must be at least 2 bytes long");
+    }
+    int endIndex = offset + length;
+
+    // Special case: if every byte is NUL then this denotes a missing field.
+    boolean allZeros = true;
+    for (int i = offset; i < endIndex; i++) {
+        if (buffer[i] != 0) {
+            allZeros = false;
+            break;
+        }
+    }
+    if (allZeros) {
+        return 0L;
+    }
+
+    // Skip leading spaces.
+    int pos = offset;
+    while (pos < endIndex && buffer[pos] == (byte) ' ') {
+        pos++;
+    }
+    if (pos >= endIndex) {
+        throw new IllegalArgumentException("No octal digits found in non-null field");
+    }
+
     long result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
-        int     start = offset;
-
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+    int digitStart = pos;
+    boolean foundDigit = false;
+    // Parse octal digits until a delimiter (either NUL or space) is encountered.
+    while (pos < endIndex) {
+        byte current = buffer[pos];
+        if (current == 0 || current == (byte) ' ') {
+            // Termination of the number.
             break;
         }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+        if (current < '0' || current > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, digitStart, current));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        foundDigit = true;
+        result = (result << 3) + (current - '0'); // convert from ASCII octal digit
+        pos++;
+    }
+    if (!foundDigit) {
+        throw new IllegalArgumentException("No octal digits found in non-null field");
+    }
+    // Must have a trailing delimiter.
+    if (pos >= endIndex) {
+        throw new IllegalArgumentException("Missing trailing delimiter in octal field");
+    }
+    byte delimiter = buffer[pos];
+    if (!(delimiter == 0 || delimiter == (byte) ' ')) {
+        throw new IllegalArgumentException("Invalid trailing delimiter in octal field");
+    }
+    // Any remaining bytes must be either NUL or space.
+    pos++;
+    while (pos < endIndex) {
+        byte extra = buffer[pos];
+        if (extra != 0 && extra != (byte) ' ') {
+            throw new IllegalArgumentException("Invalid character after trailing delimiter in octal field");
+        }
+        pos++;
     }
-
     return result;
 }
\ No newline at end of file
