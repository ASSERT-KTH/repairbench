diff --git a/tmp/cf7881a0-fedd-4069-889a-41bf6a619344_buggy.java b/tmp/6c8de281-0207-4715-ae37-d9752d7035fd_fixed.java
index e087f95..af54397 100644
--- a/tmp/cf7881a0-fedd-4069-889a-41bf6a619344_buggy.java
+++ b/tmp/6c8de281-0207-4715-ae37-d9752d7035fd_fixed.java
@@ -1,53 +1,78 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if the trailing space/NUL is missing or if an invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
-        int     start = offset;
-
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+    // Check that we have at least 2 bytes.
+    if (length < 2) {
+        throw new IllegalArgumentException("Buffer length must be at least 2 bytes");
+    }
+    final int fieldEnd = offset + length;
+    // If all bytes in the field are NUL then return 0L.
+    boolean allNull = true;
+    for (int i = offset; i < fieldEnd; i++) {
+        if (buffer[i] != 0) {
+            allNull = false;
             break;
         }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
     }
-                if (currentByte == (byte) ' ') {
-                break;
+    if (allNull) {
+        return 0L;
     }
+
+    // Skip leading spaces.
+    int startIndex = offset;
+    while (startIndex < fieldEnd && buffer[startIndex] == (byte) ' ') {
+        startIndex++;
     }
     
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+    // Identify the contiguous sequence of octal digits.
+    int digitEnd = startIndex;
+    while (digitEnd < fieldEnd && buffer[digitEnd] >= '0' && buffer[digitEnd] <= '7') {
+        digitEnd++;
+    }
     
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+    // There must be at least one digit.
+    if (digitEnd == startIndex) {
+        // Use the next byte (if any) in the error message.
+        byte errByte = startIndex < fieldEnd ? buffer[startIndex] : 0;
         throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                exceptionMessage(buffer, offset, length, startIndex, errByte));
+    }
+    
+    // There must be a trailing delimiter right after the digits.
+    if (digitEnd >= fieldEnd) {
+        throw new IllegalArgumentException("Missing trailing null or space in octal number");
+    }
+    byte term = buffer[digitEnd];
+    if (term != (byte) ' ' && term != 0) {
+        throw new IllegalArgumentException("Invalid trailing delimiter in octal number: " + (char) term);
+    }
+    // Any remaining bytes must be either NUL or space.
+    for (int j = digitEnd + 1; j < fieldEnd; j++) {
+        byte b = buffer[j];
+        if (b != 0 && b != (byte) ' ') {
+            throw new IllegalArgumentException("Invalid character after octal number: " + (char) b);
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
     
+    // Parse the octal number.
+    long result = 0;
+    for (int j = startIndex; j < digitEnd; j++) {
+        // Each byte is between '0' and '7' so this is safe.
+        result = (result << 3) + (buffer[j] - '0');
+    }
     return result;
 }
\ No newline at end of file
