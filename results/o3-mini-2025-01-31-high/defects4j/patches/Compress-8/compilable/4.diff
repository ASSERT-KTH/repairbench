diff --git a/tmp/14690736-a5e8-46ad-a681-35122dcac5f5_buggy.java b/tmp/a700bf77-926b-4ae6-8f87-0794cadc75df_fixed.java
index e087f95..e9ca268 100644
--- a/tmp/14690736-a5e8-46ad-a681-35122dcac5f5_buggy.java
+++ b/tmp/a700bf77-926b-4ae6-8f87-0794cadc75df_fixed.java
@@ -1,53 +1,62 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
+    // The field must be at least 2 bytes long.
+    if (length < 2) {
+        throw new IllegalArgumentException("Invalid header record: length must be at least 2 bytes");
+    }
     int end = offset + length;
-        int     start = offset;
     
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+    // If every byte in the field is NUL then this is considered a missing field.
+    boolean allNull = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNull = false;
             break;
         }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
     }
-                if (currentByte == (byte) ' ') {
-                break;
+    if (allNull) {
+        return 0L;
     }
+    
+    // Skip only leading spaces.
+    int index = offset;
+    while (index < end && buffer[index] == (byte)' ') {
+        index++;
     }
     
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+    // After skipping spaces there must be at least one digit.
+    // A valid digit is one of '0'..'7'.  If the first non-space byte is NUL or another space,
+    // then the field is inconsistent (it isnâ€™t an all-NUL missing field but contains no digit).
+    if (index >= end || buffer[index] == 0 || buffer[index] == (byte)' ') {
+        throw new IllegalArgumentException("Invalid octal encoding: no digits found");
+    }
     
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+    long result = 0;
+    int digitStart = index;
+    // Parse consecutive octal digits until a trailing delimiter (NUL or space) is encountered.
+    while (index < end && buffer[index] != 0 && buffer[index] != (byte)' ') {
+        byte currentByte = buffer[index];
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                exceptionMessage(buffer, offset, length, digitStart, currentByte)
+            );
+        }
+        result = (result << 3) + (currentByte - '0');
+        index++;
+    }
+    
+    // There MUST be at least one trailing delimiter.
+    if (index >= end) {
+        throw new IllegalArgumentException("Invalid octal encoding: missing trailing space or NUL");
+    }
+    // Any remaining bytes in the field must be either NUL or space.
+    for (int j = index; j < end; j++) {
+        byte ch = buffer[j];
+        if (ch != 0 && ch != (byte)' ') {
+            throw new IllegalArgumentException(
+                "Invalid octal encoding: invalid trailing character '" + (char) ch + "'"
+            );
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
     
     return result;
 }
\ No newline at end of file
