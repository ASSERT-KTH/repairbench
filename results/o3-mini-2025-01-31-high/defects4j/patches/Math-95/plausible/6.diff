diff --git a/tmp/4ca77e8a-fdd4-4baa-8bc2-03d3dd712b00_buggy.java b/tmp/ff72d2f0-d4cc-4a73-9ce4-02850a907345_fixed.java
index 25c13b3..73a3558 100644
--- a/tmp/4ca77e8a-fdd4-4baa-8bc2-03d3dd712b00_buggy.java
+++ b/tmp/ff72d2f0-d4cc-4a73-9ce4-02850a907345_fixed.java
@@ -1,15 +1,14 @@
-    /**
-     * Access the initial domain value, based on <code>p</code>, used to
-     * bracket a CDF root.  This method is used by
-     * {@link #inverseCumulativeProbability(double)} to find critical values.
-     * 
-     * @param p the desired probability for the critical value
-     * @return initial domain value
-     */
 protected double getInitialDomain(double p) {
-        double ret;
     double d = getDenominatorDegreesOfFreedom();
-            // use mean
-            ret = d / (d - 2.0);
-        return ret;
+    if (d > 2.0) {
+        // When the mean exists, use it; note that the mean of an F-distribution is
+        // d / (d - 2) when d > 2.
+        return d / (d - 2.0);
+    } else {
+        // When d <= 2 the F-distribution mean is undefined and the previous
+        // formula gives a non-positive value. In that case we choose an initial
+        // guess that is positive. Here we use 1/(1-p) so that if p is large (e.g. 0.975)
+        // the initial guess is also large.
+        return 1.0 / (1.0 - p);
+    }
 }
\ No newline at end of file
