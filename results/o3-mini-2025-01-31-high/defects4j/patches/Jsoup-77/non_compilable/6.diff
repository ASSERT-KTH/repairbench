diff --git a/tmp/6a46d47e-c0ed-4d8e-8f4e-d1b626467883_buggy.java b/tmp/e57a455f-df15-4866-a2c9-a2b0ee4c90ef_fixed.java
index 9a3a9db..5f76dba 100644
--- a/tmp/6a46d47e-c0ed-4d8e-8f4e-d1b626467883_buggy.java
+++ b/tmp/e57a455f-df15-4866-a2c9-a2b0ee4c90ef_fixed.java
@@ -1,27 +1,42 @@
-    /**
-     * If the stack contains an element with this tag's name, pop up the stack to remove the first occurrence. If not
-     * found, skips.
-     *
-     * @param endTag tag to close
-     */
 private void popStackToClose(Token.EndTag endTag) {
     String elName = endTag.name();
-        Element firstFound = null;
-
-        for (int pos = stack.size() -1; pos >= 0; pos--) {
-            Element next = stack.get(pos);
-            if (next.nodeName().equals(elName)) {
-                firstFound = next;
+    int pos = -1;
+    // Find the matching element in the stack (searching downward from the top)
+    for (int i = stack.size() - 1; i >= 0; i--) {
+        if (stack.get(i).nodeName().equals(elName)) {
+            pos = i;
             break;
         }
     }
-        if (firstFound == null)
-            return; // not found, skip
+    if (pos == -1)
+        return; // not found, so nothing to do
 
-        for (int pos = stack.size() -1; pos >= 0; pos--) {
-            Element next = stack.get(pos);
-            stack.remove(pos);
-            if (next == firstFound)
-                break;
+    // Collect any elements that were pushed after the matching element.
+    // These are the mis-nested elements that need to be reparented.
+    List<Element> misnested = new ArrayList<>();
+    for (int i = pos + 1; i < stack.size(); i++) {
+        misnested.add(stack.get(i));
+    }
+
+    // Remove the misnested elements from the stack.
+    // (They remain in the tree as children of the element we created them under.)
+    for (int i = stack.size() - 1; i > pos; i--) {
+        stack.remove(i);
+    }
+
+    // Remove the matching element (i.e. the one we’re closing) from the stack.
+    Element nodeToClose = stack.remove(pos);
+
+    // Reparent misnested elements so that they no longer live inside the closed element.
+    // They are appended as children of the new current element (if one exists).
+    if (!misnested.isEmpty() && !stack.isEmpty()) {
+        Element newCurrent = stack.get(stack.size() - 1);
+        for (Element el : misnested) {
+            // If the misnested element’s parent is still the closed element, detach it.
+            if (el.parent() == nodeToClose) {
+                el.remove();
+            }
+            newCurrent.appendChild(el);
+        }
     }
 }
\ No newline at end of file
