diff --git a/tmp/b5c2946b-d8a3-43a3-9006-8819ce1608b5_buggy.java b/tmp/2a46de53-6a99-4fea-ad5b-dd2096db3527_fixed.java
index 9a3a9db..51b4fa6 100644
--- a/tmp/b5c2946b-d8a3-43a3-9006-8819ce1608b5_buggy.java
+++ b/tmp/2a46de53-6a99-4fea-ad5b-dd2096db3527_fixed.java
@@ -1,27 +1,40 @@
-    /**
-     * If the stack contains an element with this tag's name, pop up the stack to remove the first occurrence. If not
-     * found, skips.
-     *
-     * @param endTag tag to close
-     */
 private void popStackToClose(Token.EndTag endTag) {
     String elName = endTag.name();
-        Element firstFound = null;
-
-        for (int pos = stack.size() -1; pos >= 0; pos--) {
-            Element next = stack.get(pos);
-            if (next.nodeName().equals(elName)) {
-                firstFound = next;
+    int pos = -1;
+    // Find the nearest element on the stack with a matching tag name.
+    for (int i = stack.size() - 1; i >= 0; i--) {
+        if (stack.get(i).nodeName().equals(elName)) {
+            pos = i;
             break;
         }
     }
-        if (firstFound == null)
+    if (pos == -1)
         return; // not found, skip
 
-        for (int pos = stack.size() -1; pos >= 0; pos--) {
-            Element next = stack.get(pos);
-            stack.remove(pos);
-            if (next == firstFound)
-                break;
+    Element target = stack.get(pos);
+    Element parent = target.parent();
+    // If there are any elements above the target in the stack (i.e. mis-nested),
+    // remove them from their current parent (usually the target) and reparent
+    // them into targetâ€™s parent (immediately after target). This ensures that,
+    // for example, a mis-nested <p> that was improperly appended to a <div> ends
+    // up as a sibling of the <div> (as required by the test).
+    if (parent != null) {
+        List<Element> misnested = new ArrayList<>();
+        // Collect all elements above the target
+        for (int i = pos + 1; i < stack.size(); i++) {
+            misnested.add(stack.get(i));
+        }
+        // Determine the insertion point immediately after target in the parent's children.
+        int insertIndex = parent.children().indexOf(target) + 1;
+        for (Element node : misnested) {
+            // Remove node from its current parent so as not to leave a dangling reference.
+            node.remove();
+            parent.insertChildren(insertIndex, node);
+            insertIndex++;
+        }
+    }
+    // Now pop everything from the stack from the top down to and including target.
+    for (int i = stack.size() - 1; i >= pos; i--) {
+        stack.remove(i);
     }
 }
\ No newline at end of file
