diff --git a/tmp/1e959838-fe9b-4d1d-bf69-e06f63ab4c3f_buggy.java b/tmp/e8b610f1-f2ff-4131-aa77-536e37bcb239_fixed.java
index 9a3a9db..594d8e0 100644
--- a/tmp/1e959838-fe9b-4d1d-bf69-e06f63ab4c3f_buggy.java
+++ b/tmp/e8b610f1-f2ff-4131-aa77-536e37bcb239_fixed.java
@@ -1,27 +1,44 @@
-    /**
-     * If the stack contains an element with this tag's name, pop up the stack to remove the first occurrence. If not
-     * found, skips.
-     *
-     * @param endTag tag to close
-     */
 private void popStackToClose(Token.EndTag endTag) {
     String elName = endTag.name();
-        Element firstFound = null;
-
-        for (int pos = stack.size() -1; pos >= 0; pos--) {
-            Element next = stack.get(pos);
-            if (next.nodeName().equals(elName)) {
-                firstFound = next;
+    int targetIdx = -1;
+    // Find the closest element in the stack whose tag name matches endTag.
+    for (int i = stack.size() - 1; i >= 0; i--) {
+        Element el = stack.get(i);
+        if (el.nodeName().equals(elName)) {
+            targetIdx = i;
             break;
         }
     }
-        if (firstFound == null)
-            return; // not found, skip
+    if (targetIdx == -1)
+        return; // Not found, nothing to do
 
-        for (int pos = stack.size() -1; pos >= 0; pos--) {
-            Element next = stack.get(pos);
-            stack.remove(pos);
-            if (next == firstFound)
-                break;
+    // Identify the target element (the one to be closed)
+    Element target = stack.get(targetIdx);
+
+    // Collect any elements that were opened after the target — these are mis‐nested.
+    // They will be re‐parented (moved out of the target’s children) so that they end up as siblings.
+    List<Element> misnested = new ArrayList<>();
+    // Note: the target itself is at index targetIdx. Everything above that is mis‐nested.
+    for (int i = targetIdx + 1; i < stack.size(); i++) {
+        misnested.add(stack.get(i));
+    }
+    // Remove the misnested elements from the stack.
+    for (int i = stack.size() - 1; i > targetIdx; i--) {
+        stack.remove(i);
+    }
+    // Now remove the target element itself (its closing tag is being handled).
+    stack.remove(targetIdx);
+
+    // Reparent misnested elements: if the target had a parent,
+    // then extract any misnested element that had been appended to target and move it to target’s parent.
+    if (target.parent() != null) {
+        for (Element node : misnested) {
+            // Often a misnested node will have been inserted as a child of the element below it,
+            // which will be the target; if so, we remove it and re-append to target’s parent.
+            if (node.parent() == target) {
+                node.remove(); // detach from the wrong parent
+                target.parent().appendChild(node); // append as a sibling following target
+            }
+        }
     }
 }
\ No newline at end of file
