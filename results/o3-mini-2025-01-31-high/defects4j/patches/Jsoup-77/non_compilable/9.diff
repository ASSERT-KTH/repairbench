diff --git a/tmp/f4bf93a3-4e8f-4007-8b4c-f41850034337_buggy.java b/tmp/8d83e719-8e1f-43a1-9060-3b5a050e5445_fixed.java
index 9a3a9db..83728b0 100644
--- a/tmp/f4bf93a3-4e8f-4007-8b4c-f41850034337_buggy.java
+++ b/tmp/8d83e719-8e1f-43a1-9060-3b5a050e5445_fixed.java
@@ -1,27 +1,33 @@
-    /**
-     * If the stack contains an element with this tag's name, pop up the stack to remove the first occurrence. If not
-     * found, skips.
-     *
-     * @param endTag tag to close
-     */
 private void popStackToClose(Token.EndTag endTag) {
     String elName = endTag.name();
-        Element firstFound = null;
-
-        for (int pos = stack.size() -1; pos >= 0; pos--) {
-            Element next = stack.get(pos);
-            if (next.nodeName().equals(elName)) {
-                firstFound = next;
+    // Find the closest element on the stack with this tag name.
+    int pos = -1;
+    for (int i = stack.size() - 1; i >= 0; i--) {
+        if (stack.get(i).nodeName().equals(elName)) {
+            pos = i;
             break;
         }
     }
-        if (firstFound == null)
-            return; // not found, skip
+    if (pos == -1)
+        return; // not found, so nothing to do
 
-        for (int pos = stack.size() -1; pos >= 0; pos--) {
-            Element next = stack.get(pos);
-            stack.remove(pos);
-            if (next == firstFound)
-                break;
+    // Collect any mis-nested elements that were opened after the matching element.
+    List<Element> misnested = new ArrayList<>();
+    for (int i = stack.size() - 1; i > pos; i--) {
+        misnested.add(stack.get(i));
+    }
+    // Now pop off all elements from the top of the stack down to (and including) the matched element.
+    for (int i = stack.size() - 1; i >= pos; i--) {
+        stack.remove(i);
+    }
+    // If there were misnested elements, reparent them to the new current element so they come after the closed element.
+    if (!misnested.isEmpty() && !stack.isEmpty()) {
+        // Reverse the order so as to preserve their original document order.
+        Collections.reverse(misnested);
+        Element newParent = stack.get(stack.size() - 1);
+        for (Element el : misnested) {
+            el.remove();          // detach from the closed element (its former parent)
+            newParent.appendChild(el); // reattach as a child of the new current node
+        }
     }
 }
\ No newline at end of file
