diff --git a/tmp/a83fc602-8846-4524-bab2-4499f1f292a7_buggy.java b/tmp/f1ec9dc5-00b3-45c9-8aba-56a8ae9e9dad_fixed.java
index 9a3a9db..3c35109 100644
--- a/tmp/a83fc602-8846-4524-bab2-4499f1f292a7_buggy.java
+++ b/tmp/f1ec9dc5-00b3-45c9-8aba-56a8ae9e9dad_fixed.java
@@ -1,27 +1,49 @@
-    /**
-     * If the stack contains an element with this tag's name, pop up the stack to remove the first occurrence. If not
-     * found, skips.
-     *
-     * @param endTag tag to close
-     */
 private void popStackToClose(Token.EndTag endTag) {
     String elName = endTag.name();
-        Element firstFound = null;
-
-        for (int pos = stack.size() -1; pos >= 0; pos--) {
-            Element next = stack.get(pos);
-            if (next.nodeName().equals(elName)) {
-                firstFound = next;
+    int pos = -1;
+    // Find the most recently opened element with the given name.
+    for (int i = stack.size() - 1; i >= 0; i--) {
+        if (stack.get(i).nodeName().equals(elName)) {
+            pos = i;
             break;
         }
     }
-        if (firstFound == null)
+    if (pos == -1)
         return; // not found, skip
 
-        for (int pos = stack.size() -1; pos >= 0; pos--) {
-            Element next = stack.get(pos);
-            stack.remove(pos);
-            if (next == firstFound)
-                break;
+    // If the matching element is at the top, remove it normally.
+    if (pos == stack.size() - 1) {
+        stack.remove(stack.size() - 1);
+        return;
+    }
+    
+    // Otherwise, there are mis-nested elements above the matching element.
+    // Remove them from the stack and save them temporarily.
+    List<Element> misnested = new ArrayList<>();
+    for (int i = stack.size() - 1; i > pos; i--) {
+        misnested.add(stack.get(i));
+        stack.remove(i);
+    }
+    
+    // Remove the matching element from the stack.
+    Element closed = stack.remove(pos);
+    
+    // Now, reparent the misnested elements to the element that is now current (if any).
+    if (!stack.isEmpty()) {
+        Element newParent = stack.get(stack.size() - 1);
+        // We iterate in reverse so that the original order is preserved.
+        for (int i = misnested.size() - 1; i >= 0; i--) {
+            Element el = misnested.get(i);
+            // Detach from its old parent (the closed element) and re-attach to the new parent.
+            el.remove();
+            newParent.appendChild(el);
+            // Since this element is still “open”, push it back on the stack.
+            stack.add(el);
+        }
+    } else {
+        // Unlikely case: no new parent, so re-add the misnested elements.
+        for (Element el : misnested) {
+            stack.add(el);
+        }
     }
 }
\ No newline at end of file
