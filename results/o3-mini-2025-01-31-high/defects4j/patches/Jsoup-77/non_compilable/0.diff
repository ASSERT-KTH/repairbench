diff --git a/tmp/a08a4ecf-b442-4383-ad81-10b0a12d2d1b_buggy.java b/tmp/1314f8b7-c262-4a0e-8bb1-036e9af3a701_fixed.java
index 9a3a9db..7390995 100644
--- a/tmp/a08a4ecf-b442-4383-ad81-10b0a12d2d1b_buggy.java
+++ b/tmp/1314f8b7-c262-4a0e-8bb1-036e9af3a701_fixed.java
@@ -1,27 +1,34 @@
-    /**
-     * If the stack contains an element with this tag's name, pop up the stack to remove the first occurrence. If not
-     * found, skips.
-     *
-     * @param endTag tag to close
-     */
 private void popStackToClose(Token.EndTag endTag) {
     String elName = endTag.name();
-        Element firstFound = null;
-
-        for (int pos = stack.size() -1; pos >= 0; pos--) {
-            Element next = stack.get(pos);
-            if (next.nodeName().equals(elName)) {
-                firstFound = next;
+    int pos = -1;
+    // Find the matching element’s position in the stack.
+    for (int i = stack.size() - 1; i >= 0; i--) {
+        if (stack.get(i).nodeName().equals(elName)) {
+            pos = i;
             break;
         }
     }
-        if (firstFound == null)
-            return; // not found, skip
+    if (pos == -1)
+        return; // no matching element; nothing to do
 
-        for (int pos = stack.size() -1; pos >= 0; pos--) {
-            Element next = stack.get(pos);
-            stack.remove(pos);
-            if (next == firstFound)
-                break;
+    // Remove (“pop”) all elements above the matching element,
+    // saving them as misnested nodes that need to be reparented.
+    List<Element> misnested = new ArrayList<>();
+    while (stack.size() > pos + 1) {
+        misnested.add(stack.remove(stack.size() - 1));
+    }
+
+    // Pop the matching element – it is now closed.
+    Element closed = stack.remove(stack.size() - 1);
+
+    // Reparent any misnested elements: move them from the closed element’s subtree
+    // to the new current node (the node now on top of the stack).
+    if (!misnested.isEmpty() && !stack.isEmpty()) {
+        Element newParent = stack.get(stack.size() - 1);
+        // Reverse to preserve the original insertion order.
+        Collections.reverse(misnested);
+        for (Element el : misnested) {
+            newParent.appendChild(el);
+        }
     }
 }
\ No newline at end of file
