diff --git a/tmp/ba738182-92d2-4761-9d33-1b6adb358d7a_buggy.java b/tmp/3f1444cd-2f40-41ea-9965-8e454af7122e_fixed.java
index 229b3e7..956b8c9 100644
--- a/tmp/ba738182-92d2-4761-9d33-1b6adb358d7a_buggy.java
+++ b/tmp/3f1444cd-2f40-41ea-9965-8e454af7122e_fixed.java
@@ -1,55 +1,28 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
-    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
-    {
-        int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
+protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {
+    // When indenting (i.e. for options or usage chunks), the effective width for text is reduced.
+    int effectiveWidth = width - nextLineTabStop;
+    if (effectiveWidth < 1) {
+        throw new IllegalStateException("Total width is less than the width of the argument and indent - no room for the description");
     }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
-            {
-                sb.append(text);
-
-                return sb;
+    // Create the padding string (e.g. a series of spaces) to be prepended on every line.
+    String padding = createPadding(nextLineTabStop);
+
+    // Loop while the remaining text is longer than the effective width.
+    while (text.length() > effectiveWidth) {
+        int pos = findWrapPos(text, effectiveWidth, 0);
+        // If no wrap position was found (i.e. for a long word), force break at effectiveWidth.
+        if (pos == -1) {
+            pos = effectiveWidth;
         }
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
+        sb.append(padding)
+          .append(rtrim(text.substring(0, pos)))
+          .append(defaultNewLine);
+        text = text.substring(pos).trim();
     }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+    // Append any leftover text (which fits in one line) with the same padding.
+    if (text.length() > 0) {
+        sb.append(padding).append(text);
     }
+    return sb;
 }
\ No newline at end of file
