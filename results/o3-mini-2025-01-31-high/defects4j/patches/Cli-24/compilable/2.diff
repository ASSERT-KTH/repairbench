diff --git a/tmp/55f2e55f-75d2-407f-82ec-8ee74ee48f5d_buggy.java b/tmp/38b42b46-fafd-4687-b7a6-ac3cb2d6ecad_fixed.java
index 229b3e7..d1c4395 100644
--- a/tmp/55f2e55f-75d2-407f-82ec-8ee74ee48f5d_buggy.java
+++ b/tmp/38b42b46-fafd-4687-b7a6-ac3cb2d6ecad_fixed.java
@@ -1,55 +1,29 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
-    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
-    {
-        int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
+protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {
+    // Determine the space available for text on each line.
+    // If nextLineTabStop is non-zero, we subtract it from the total width.
+    int availWidth = (nextLineTabStop > 0) ? width - nextLineTabStop : width;
+    if (availWidth < 1) {
+        throw new IllegalStateException("Total width is less than the width of the argument and indent - no room for the description");
     }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // Create the padding string (may be empty if nextLineTabStop is 0).
     final String padding = createPadding(nextLineTabStop);
     
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
-            {
-                sb.append(text);
-
+    // Loop through the text, chopping off chunks of size 'availWidth' at a natural break if possible.
+    while (text.length() > availWidth) {
+        int pos = findWrapPos(text, availWidth, 0);
+        if (pos == -1) {
+            // If no natural break is found, force a break at availWidth.
+            pos = availWidth;
+        }
+        sb.append(padding)
+          .append(rtrim(text.substring(0, pos)))
+          .append(defaultNewLine);
+        // Remove the chunk that was just processed and trim leading whitespace.
+        text = text.substring(pos).trim();
+    }
+    // Append any leftover text.
+    if (text.length() > 0) {
+        sb.append(padding).append(text);
+    }
     return sb;
 }
\ No newline at end of file
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
