diff --git a/tmp/fe9df5a2-54df-4f16-b884-3761c0af3acc_buggy.java b/tmp/8d38b0d5-b447-458f-b7d0-c6698270e832_fixed.java
index 229b3e7..339e50c 100644
--- a/tmp/fe9df5a2-54df-4f16-b884-3761c0af3acc_buggy.java
+++ b/tmp/8d38b0d5-b447-458f-b7d0-c6698270e832_fixed.java
@@ -1,55 +1,36 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
-                                             int nextLineTabStop, String text)
-    {
-        int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
-        }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
+                                         int nextLineTabStop, String text) {
+    if (nextLineTabStop >= width) {
         throw new IllegalStateException("Total width is less than the width of the argument and indent " +
                 "- no room for the description");
     }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+    // Prepend the indent (padding) so that even the first line is rendered with the proper offset.
+    if (nextLineTabStop > 0) {
+        text = createPadding(nextLineTabStop) + text;
+    }
 
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
-            {
+    // Process the text uniformly in a loop.
+    while (true) {
+        int pos = findWrapPos(text, width, 0);
+        if (pos == -1) {
             sb.append(text);
-
-                return sb;
+            break;
         }
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
+        // If the only break found is in the indent section, force a break at the full width.
+        if ((text.length() > width) && (pos == nextLineTabStop - 1)) {
             pos = width;
         }
-
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        // Remove the part already rendered.
+        text = text.substring(pos).trim();
+        if (text.isEmpty()) {
+            break;
         }
+        // Prepend padding on every subsequent line.
+        if (nextLineTabStop > 0) {
+            text = createPadding(nextLineTabStop) + text;
+        }
+    }
+    return sb;
 }
\ No newline at end of file
