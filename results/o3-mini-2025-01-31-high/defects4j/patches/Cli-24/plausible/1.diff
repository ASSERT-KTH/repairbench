diff --git a/tmp/dda3024d-f717-444c-866d-0bcb94321e1c_buggy.java b/tmp/e784f9be-061f-4777-b05e-80c23ba934e1_fixed.java
index 229b3e7..541bae3 100644
--- a/tmp/dda3024d-f717-444c-866d-0bcb94321e1c_buggy.java
+++ b/tmp/e784f9be-061f-4777-b05e-80c23ba934e1_fixed.java
@@ -1,55 +1,54 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
+        // If no reasonable break was found and the text is wider than the available
+        // width, force a break at column "width".
+        if (text.length() > width) {
+            pos = width;
+        } else {
             sb.append(rtrim(text));
-
             return sb;
         }
+    }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
+    // Instead of throwing an exception when the computed indent is 
+    // greater than (or equal to) the total width, simply ignore the requested indent.
     if (nextLineTabStop >= width)
     {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
+        nextLineTabStop = width - 1;
     }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
+        // Remove the part that has been output and add the indent for the next line.
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
+            // If no wrap position was found but there is still text,
+            // if the text is too long, force a break at width.
+            if (text.length() > width) {
+                pos = width;
+            } else {
                 sb.append(text);
-
                 return sb;
             }
+        }
         
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+        // When the break occurs too early (i.e. before the indent region),
+        // force a break at the maximum available width.
+        if ((text.length() > width) && (pos < nextLineTabStop))
         {
             pos = width;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
