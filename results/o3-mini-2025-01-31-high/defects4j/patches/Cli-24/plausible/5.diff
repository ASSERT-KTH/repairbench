diff --git a/tmp/dcb4efc2-35b7-4bea-81fb-b7cffbaf1db2_buggy.java b/tmp/6e536f64-1b4c-4ec1-94e8-eca22ae5efb9_fixed.java
index 229b3e7..34f1f0a 100644
--- a/tmp/dcb4efc2-35b7-4bea-81fb-b7cffbaf1db2_buggy.java
+++ b/tmp/6e536f64-1b4c-4ec1-94e8-eca22ae5efb9_fixed.java
@@ -1,55 +1,41 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
+    // Instead of throwing an exception when no room is available,
+    // adjust nextLineTabStop so that at least one character can be printed.
+    nextLineTabStop = Math.min(nextLineTabStop, width - 1);
+
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
+
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // All following lines must be padded with nextLineTabStop space characters.
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
+        // Prepend the padding to the remaining text.
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
-            
+        // If the only break found is at the end of the indent area,
+        // force a break at the maximum width so that at least one character is printed.
         if ((text.length() > width) && (pos == nextLineTabStop - 1))
         {
             pos = width;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
