diff --git a/tmp/fb79a76d-9f98-4c27-b3b1-ea856ea8105d_buggy.java b/tmp/96d181be-2a11-4b12-a364-44eee5d13c0e_fixed.java
index fa42cd9..413929a 100644
--- a/tmp/fb79a76d-9f98-4c27-b3b1-ea856ea8105d_buggy.java
+++ b/tmp/96d181be-2a11-4b12-a364-44eee5d13c0e_fixed.java
@@ -1,27 +1,25 @@
-  /**
-   * Declares a refined type in {@code scope} for the name represented by
-   * {@code node}. It must be possible to refine the type of the given node in
-   * the given scope, as determined by {@link #getTypeIfRefinable}.
-   */
 protected void declareNameInScope(FlowScope scope, Node node, JSType type) {
   switch (node.getType()) {
     case Token.NAME:
       scope.inferSlotType(node.getString(), type);
       break;
 
     case Token.GETPROP:
       String qualifiedName = node.getQualifiedName();
       Preconditions.checkNotNull(qualifiedName);
-
       JSType origType = node.getJSType();
       origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
       scope.inferQualifiedSlot(node, qualifiedName, origType, type);
       break;
 
-        // "this" references aren't currently modeled in the CFG.
+    case Token.THIS:
+      // Although "this" references are not modeled in the CFG,
+      // we need to refine its type in order for type inference to work.
+      scope.inferSlotType("this", type);
+      break;
 
     default:
       throw new IllegalArgumentException("Node cannot be refined. \n" +
           node.toStringTree());
   }
 }
\ No newline at end of file
