diff --git a/tmp/2b6d2766-aa9f-421f-8422-21b35b33c86e_buggy.java b/tmp/a1768d02-5d81-46fc-9fab-6f6662d55463_fixed.java
index 61ffdbf..7e4e0c0 100644
--- a/tmp/2b6d2766-aa9f-421f-8422-21b35b33c86e_buggy.java
+++ b/tmp/a1768d02-5d81-46fc-9fab-6f6662d55463_fixed.java
@@ -1,44 +1,49 @@
 /**
  * Removes unreferenced arguments from a function declaration and when
  * possible the function's callSites.
  *
+ * <p>Notice that removing unreferenced function args breaks
+ * Function.prototype.length. In advanced mode, we don't really care
+ * about this: we consider "length" the equivalent of reflecting on
+ * the function's lexical source.
+ *
+ * <p>Rather than create a new option for this, we assume that if the user
+ * is removing globals, then it's OK to remove unused function args.
+ *
+ * <p>See http://code.google.com/p/closure-compiler/issues/detail?id=253
+ *
  * @param fnScope The scope inside the function
  */
 private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
+  // Only remove unused function arguments if we are also removing globals.
+  // In SIMPLE_OPTIMIZATIONS and when removeGlobal is false we must leave the
+  // parameters intact (for example, so that Function.prototype.length remains).
+  if (!removeGlobal) {
+    return;
+  }
 
   Node function = fnScope.getRootNode();
-
   Preconditions.checkState(function.isFunction());
   if (NodeUtil.isGetOrSetKey(function.getParent())) {
-      // The parameters object literal setters can not be removed.
+    // The parameters for object literal getters or setters must not be removed.
     return;
   }
 
   Node argList = getFunctionArgList(function);
-    boolean modifyCallers = modifyCallSites
-        && callSiteOptimizer.canModifyCallers(function);
+  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);
   if (!modifyCallers) {
     // Strip unreferenced args off the end of the function declaration.
     Node lastArg;
     while ((lastArg = argList.getLastChild()) != null) {
       Var var = fnScope.getVar(lastArg.getString());
       if (!referenced.contains(var)) {
         argList.removeChild(lastArg);
         compiler.reportCodeChange();
       } else {
         break;
       }
     }
   } else {
     callSiteOptimizer.optimize(fnScope, referenced);
   }
 }
\ No newline at end of file
