diff --git a/tmp/9f0fe3de-9df0-410e-80aa-e0fe4f1f475d_buggy.java b/tmp/f7f2f3d6-2df5-4a58-9f3a-fd8f53e2e63a_fixed.java
index 61ffdbf..5e7ec2b 100644
--- a/tmp/9f0fe3de-9df0-410e-80aa-e0fe4f1f475d_buggy.java
+++ b/tmp/f7f2f3d6-2df5-4a58-9f3a-fd8f53e2e63a_fixed.java
@@ -1,44 +1,34 @@
-  /**
-   * Removes unreferenced arguments from a function declaration and when
-   * possible the function's callSites.
-   *
-   * @param fnScope The scope inside the function
-   */
 private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
   Node function = fnScope.getRootNode();
-
   Preconditions.checkState(function.isFunction());
   if (NodeUtil.isGetOrSetKey(function.getParent())) {
-      // The parameters object literal setters can not be removed.
+    return;
+  }
+
+  // Only “remove” (optimize) unused function arguments if we are also removing globals.
+  // When removeGlobal is false the function’s signature must be preserved.
+  if (!removeGlobal) {
     return;
   }
 
   Node argList = getFunctionArgList(function);
-    boolean modifyCallers = modifyCallSites
-        && callSiteOptimizer.canModifyCallers(function);
-    if (!modifyCallers) {
-      // Strip unreferenced args off the end of the function declaration.
-      Node lastArg;
-      while ((lastArg = argList.getLastChild()) != null) {
-        Var var = fnScope.getVar(lastArg.getString());
+  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);
+  if (modifyCallers) {
+    // If we can modify call sites, let the callSiteOptimizer do its work.
+    // (It may remove extra arguments since call sites can be updated.)
+    callSiteOptimizer.optimize(fnScope, referenced);
+  } else {
+    // We cannot update callers so we must preserve the parameter count.
+    // Instead of removing an unreferenced parameter (which would change .length),
+    // we simply rename it to a short name. (For example, "x" becomes "a".)
+    int newNameIndex = 0;
+    for (Node param = argList.getFirstChild(); param != null; param = param.getNext()) {
+      Var var = fnScope.getVar(param.getString());
       if (!referenced.contains(var)) {
-          argList.removeChild(lastArg);
+        String newName = String.valueOf((char) ('a' + newNameIndex++));
+        param.setString(newName);
         compiler.reportCodeChange();
-        } else {
-          break;
       }
     }
-    } else {
-      callSiteOptimizer.optimize(fnScope, referenced);
   }
 }
\ No newline at end of file
