diff --git a/tmp/215164e8-555e-45ed-9eec-58cd9b99095c_buggy.java b/tmp/d7f2692c-9c4f-4a25-bc18-bbcaebd498df_fixed.java
index 61ffdbf..fc4ed62 100644
--- a/tmp/215164e8-555e-45ed-9eec-58cd9b99095c_buggy.java
+++ b/tmp/d7f2692c-9c4f-4a25-bc18-bbcaebd498df_fixed.java
@@ -1,44 +1,32 @@
-  /**
-   * Removes unreferenced arguments from a function declaration and when
-   * possible the function's callSites.
-   *
-   * @param fnScope The scope inside the function
-   */
 private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
+  // Only remove unused function parameters when globals are removed.
+  // In SIMPLE_OPTIMIZATIONS (or when removeGlobal is false) we leave them intact.
+  if (!removeGlobal) {
+    return;
+  }
 
   Node function = fnScope.getRootNode();
-
   Preconditions.checkState(function.isFunction());
   if (NodeUtil.isGetOrSetKey(function.getParent())) {
-      // The parameters object literal setters can not be removed.
+    // The parameters of object literal setters may not be removed.
     return;
   }
 
   Node argList = getFunctionArgList(function);
-    boolean modifyCallers = modifyCallSites
-        && callSiteOptimizer.canModifyCallers(function);
+  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);
   if (!modifyCallers) {
-      // Strip unreferenced args off the end of the function declaration.
+    // Remove unreferenced args off the end of the function declaration.
     Node lastArg;
     while ((lastArg = argList.getLastChild()) != null) {
       Var var = fnScope.getVar(lastArg.getString());
       if (!referenced.contains(var)) {
         argList.removeChild(lastArg);
         compiler.reportCodeChange();
       } else {
         break;
       }
     }
   } else {
     callSiteOptimizer.optimize(fnScope, referenced);
   }
 }
\ No newline at end of file
