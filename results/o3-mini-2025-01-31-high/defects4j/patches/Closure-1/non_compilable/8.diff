diff --git a/tmp/9353530e-6531-42d7-9430-621c8da8ca15_buggy.java b/tmp/b87b1b79-35a1-4135-a534-2a85184cd882_fixed.java
index 61ffdbf..480a38e 100644
--- a/tmp/9353530e-6531-42d7-9430-621c8da8ca15_buggy.java
+++ b/tmp/b87b1b79-35a1-4135-a534-2a85184cd882_fixed.java
@@ -1,44 +1,46 @@
   /**
    * Removes unreferenced arguments from a function declaration and when
    * possible the function's callSites.
    *
+   * In advanced mode (when globals are removed), this routine is allowed
+   * to trim off unreferenced trailing parameters. However, to preserve the
+   * function's "length" property, the final remaining parameter is never removed.
+   * In SIMPLE_OPTIMIZATIONS mode (when removeGlobal is false) no parameters are
+   * removed.
+   *
    * @param fnScope The scope inside the function
    */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
+    // Only remove unused function arguments if globals are being removed.
+    // In SIMPLE mode or when removeGlobal is false, we must preserve the parameter list.
+    if (!removeGlobal) {
+      return;
+    }
 
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
-      // The parameters object literal setters can not be removed.
+      // The parameters of object literal setters cannot be removed.
       return;
     }
 
     Node argList = getFunctionArgList(function);
-    boolean modifyCallers = modifyCallSites
-        && callSiteOptimizer.canModifyCallers(function);
+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);
     if (!modifyCallers) {
-      // Strip unreferenced args off the end of the function declaration.
       Node lastArg;
-      while ((lastArg = argList.getLastChild()) != null) {
+      // Remove trailing unreferenced args only if there is more than one parameter.
+      // This avoids impacting Function.prototype.length.
+      while (argList.getChildCount() > 1 && (lastArg = argList.getLastChild()) != null) {
         Var var = fnScope.getVar(lastArg.getString());
         if (!referenced.contains(var)) {
           argList.removeChild(lastArg);
           compiler.reportCodeChange();
         } else {
           break;
         }
       }
     } else {
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
\ No newline at end of file
