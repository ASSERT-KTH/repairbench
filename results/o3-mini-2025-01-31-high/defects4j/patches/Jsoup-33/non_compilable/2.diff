diff --git a/tmp/d68354d8-2353-4848-97e0-f73285df7c04_buggy.java b/tmp/a73ca79c-0933-4e40-9630-3e468dce689e_fixed.java
index dc93be3..5b3b81b 100644
--- a/tmp/d68354d8-2353-4848-97e0-f73285df7c04_buggy.java
+++ b/tmp/a73ca79c-0933-4e40-9630-3e468dce689e_fixed.java
@@ -1,14 +1,19 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        Tag tag = Tag.valueOf(startTag.name());
+        // For known empty tags – and for unknown tags – the self‐closing marker is honored.
+        // Otherwise (for non‐empty known tags) treat the self closing as a start tag
+        // and later force a matching end tag.
+        if (tag.isKnownEmpty() || !tag.isKnownTag()) {
+            return insertEmpty(startTag);
+        } else {
+            Element el = new Element(tag, baseUri, startTag.attributes);
+            insert(el);
+            tokeniser.emit(new Token.EndTag(el.tagName())); // force closure for non-empty tags
             return el;
         }
-        
+    }
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
