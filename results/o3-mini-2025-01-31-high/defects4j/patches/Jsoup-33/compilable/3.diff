diff --git a/tmp/7bb936df-6430-4498-92b0-36422e8827b6_buggy.java b/tmp/bbcb2ffa-35b3-460d-bec7-5dd81bcf2c7c_fixed.java
index dc93be3..d1a08d9 100644
--- a/tmp/7bb936df-6430-4498-92b0-36422e8827b6_buggy.java
+++ b/tmp/bbcb2ffa-35b3-460d-bec7-5dd81bcf2c7c_fixed.java
@@ -1,14 +1,20 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+    Tag tag = Tag.valueOf(startTag.name());
     if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        // For known tags that arenâ€™t meant to be truly empty (like div, script, a, etc),
+        // ignore the self-closing flag and insert a normal element then force a closure.
+        if (tag.isKnownTag() && !tag.isEmpty()) {
+            Element el = new Element(tag, baseUri, startTag.attributes);
+            insert(el);
+            tokeniser.emit(new Token.EndTag(el.tagName()));
             return el;
+        } else {
+            // For unknown tags or tags that by spec are empty (like hr, img, etc),
+            // use the empty element insertion.
+            return insertEmpty(startTag);
+        }
     }
-        
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+    Element el = new Element(tag, baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
