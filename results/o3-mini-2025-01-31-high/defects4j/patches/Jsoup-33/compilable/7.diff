diff --git a/tmp/8964f04a-4938-40f6-9f83-3551e4b7970c_buggy.java b/tmp/6be12acf-a834-460a-98c4-858a98bf3a26_fixed.java
index dc93be3..79a9091 100644
--- a/tmp/8964f04a-4938-40f6-9f83-3551e4b7970c_buggy.java
+++ b/tmp/6be12acf-a834-460a-98c4-858a98bf3a26_fixed.java
@@ -1,14 +1,20 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        Tag tag = Tag.valueOf(startTag.name());
+        // For known tags that are not defined as empty (e.g. div, script, a, i),
+        // a selfâ€‘closing slash is treated as a synthetic start tag followed immediately by an end tag.
+        if (tag.isKnownTag() && !tag.isEmpty()) {
+            Element el = new Element(tag, baseUri, startTag.attributes);
+            insert(el);
+            tokeniser.emit(new Token.EndTag(el.tagName()));
             return el;
+        } else {
+            // For unknown tags, or tags that are defined as empty (e.g. img, hr, br),
+            // retain the self closing treatment.
+            return insertEmpty(startTag);
+        }
     }
-        
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
