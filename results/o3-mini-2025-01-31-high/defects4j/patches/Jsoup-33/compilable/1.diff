diff --git a/tmp/83be80d7-86b0-45c5-ba7c-4f7e770b308c_buggy.java b/tmp/65282c8f-3add-41ab-a9ca-6fe106ed40dc_fixed.java
index dc93be3..96d7dec 100644
--- a/tmp/83be80d7-86b0-45c5-ba7c-4f7e770b308c_buggy.java
+++ b/tmp/65282c8f-3add-41ab-a9ca-6fe106ed40dc_fixed.java
@@ -1,14 +1,21 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+    Tag tag = Tag.valueOf(startTag.name());
     if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        // For self-closing tags, if the tag is either a known empty element (like img, hr, etc.)
+        // or unknown (so that we preserve the empty state), then use the empty insertion.
+        // Otherwise, for known non-empty tags (div, script, a, i, etc.) we treat them as a regular
+        // start tag—even though they were written as self closing—and immediately emit a fake end tag.
+        if (!tag.isKnownTag() || tag.isEmpty()) {
+            return insertEmpty(startTag);
+        } else {
+            Element el = new Element(tag, baseUri, startTag.attributes);
+            insert(el);
+            tokeniser.emit(new Token.EndTag(el.tagName())); // force closure for non-empty elements
             return el;
         }
+    }
     
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+    Element el = new Element(tag, baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
