diff --git a/tmp/36cabce3-7f47-40c6-ab46-3f8830c5391c_buggy.java b/tmp/adc30fce-f880-4308-a42d-f31614da17db_fixed.java
index dc93be3..a70cd76 100644
--- a/tmp/36cabce3-7f47-40c6-ab46-3f8830c5391c_buggy.java
+++ b/tmp/adc30fce-f880-4308-a42d-f31614da17db_fixed.java
@@ -1,14 +1,19 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+    Tag tag = Tag.valueOf(startTag.name());
     if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        // For known, non-empty tags (like div, script, a, i), a self‑closing token should be
+        // treated as a normal start tag – so we insert it normally and then force a matching
+        // end tag. For void tags (such as img, hr) or for unknown tags, we leave them self‑closed.
+        if (tag.isKnownTag() && !tag.isEmpty()) {
+            Element el = new Element(tag, baseUri, startTag.attributes);
+            insert(el);
+            tokeniser.emit(new Token.EndTag(el.tagName()));
             return el;
+        } else {
+            return insertEmpty(startTag);
+        }
     }
-        
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+    Element el = new Element(tag, baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
