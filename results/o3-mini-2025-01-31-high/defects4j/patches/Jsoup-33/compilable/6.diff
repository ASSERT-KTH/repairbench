diff --git a/tmp/f1a3acdf-5366-4aab-a245-e8270acf715c_buggy.java b/tmp/1af965b7-e214-4924-915d-3be3ec0cdf6f_fixed.java
index dc93be3..0a08865 100644
--- a/tmp/f1a3acdf-5366-4aab-a245-e8270acf715c_buggy.java
+++ b/tmp/1af965b7-e214-4924-915d-3be3ec0cdf6f_fixed.java
@@ -1,14 +1,21 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+    Tag tag = Tag.valueOf(startTag.name());
     if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        // For known (non-void) tags – like div, script, a, i – that appear with a self‐closing slash,
+        // we want to treat them as if they had been written with both a start and an end tag.
+        // Void tags (or unknown tags, which by default are not forced to have a closing tag)
+        // should be handled as empty.
+        if (tag.isKnownTag() && !tag.isEmpty()) {
+            Element el = new Element(tag, baseUri, startTag.attributes);
+            insert(el);
+            tokeniser.emit(new Token.EndTag(el.tagName()));
             return el;
+        } else {
+            // Void elements (e.g. img, hr) or unknown tags remain self closing.
+            return insertEmpty(startTag);
+        }
     }
-        
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+    Element el = new Element(tag, baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
