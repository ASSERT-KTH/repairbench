diff --git a/tmp/1bf21b0e-ca73-47e6-91e1-bd7c8a04877e_buggy.java b/tmp/d654f9ee-6ac5-489e-838e-70c98c705f24_fixed.java
index dc93be3..47446ed 100644
--- a/tmp/1bf21b0e-ca73-47e6-91e1-bd7c8a04877e_buggy.java
+++ b/tmp/d654f9ee-6ac5-489e-838e-70c98c705f24_fixed.java
@@ -1,14 +1,19 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        Tag tag = Tag.valueOf(startTag.name());
+        // if the tag is one that should be empty (or is unknown), then create an empty element.
+        if (tag.isEmpty() || !tag.isKnownTag()) {
+            return insertEmpty(startTag);
+        } else {
+            // otherwise, even though a "/" was present, treat it as a normal (non-empty) element:
+            // insert it normally and then emit a fake end tag to close it immediately.
+            Element el = new Element(tag, baseUri, startTag.attributes);
+            insert(el);
+            tokeniser.emit(new Token.EndTag(el.tagName()));
             return el;
         }
-        
+    }
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
