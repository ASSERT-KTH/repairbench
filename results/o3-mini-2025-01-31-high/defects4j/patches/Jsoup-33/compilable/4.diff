diff --git a/tmp/c1305466-d406-44a0-840e-55a1f777579a_buggy.java b/tmp/18cc0d23-a202-4b7d-8449-80818a2c250c_fixed.java
index dc93be3..e1ae8a6 100644
--- a/tmp/c1305466-d406-44a0-840e-55a1f777579a_buggy.java
+++ b/tmp/18cc0d23-a202-4b7d-8449-80818a2c250c_fixed.java
@@ -1,14 +1,14 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        // For non-void self closing tags (e.g. <div />, <script /> that normally require an end tag)
+        // insert the element then immediately pop it so that subsequent tokens are not treated as its content.
+        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+        insert(el);             // insert as usual (this pushes it onto the stack)
+        stack.remove(stack.size() - 1); // immediately pop the element to “close” it
         return el;
     }
     
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
