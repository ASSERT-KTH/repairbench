diff --git a/tmp/12ef3afd-0c20-4336-a327-329d0539ceba_buggy.java b/tmp/a0e65e18-7014-4ab4-a477-5f1a23ff2b6e_fixed.java
index ec6c9ee..dbb3e4c 100644
--- a/tmp/12ef3afd-0c20-4336-a327-329d0539ceba_buggy.java
+++ b/tmp/a0e65e18-7014-4ab4-a477-5f1a23ff2b6e_fixed.java
@@ -1,21 +1,21 @@
-    //-----------------------------------------------------------------------
 private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
     if (notPrinter && notParser) {
         throw new IllegalStateException("Builder has created neither a printer nor a parser");
     }
-        int size = elementPairs.size();
-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {
+    // If the first element is a Separator, recursively build from the remaining list.
+    // (Bug fix: use subList(1, ...) rather than subList(2, ...), so we donâ€™t drop the first element after the separator.)
+    if (!elementPairs.isEmpty() && elementPairs.get(0) instanceof Separator) {
         Separator sep = (Separator) elementPairs.get(0);
-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
+        PeriodFormatter f = toFormatter(elementPairs.subList(1, elementPairs.size()), notPrinter, notParser);
         sep = sep.finish(f.getPrinter(), f.getParser());
         return new PeriodFormatter(sep, sep);
     }
     Object[] comp = createComposite(elementPairs);
     if (notPrinter) {
         return new PeriodFormatter(null, (PeriodParser) comp[1]);
     } else if (notParser) {
         return new PeriodFormatter((PeriodPrinter) comp[0], null);
     } else {
         return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
     }
 }
\ No newline at end of file
