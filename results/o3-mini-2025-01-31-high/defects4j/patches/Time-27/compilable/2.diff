diff --git a/tmp/84a186be-dd91-4952-a366-88eeb39747a5_buggy.java b/tmp/564ff0ca-7deb-45d3-8313-85f29e568f99_fixed.java
index ec6c9ee..2d2bdca 100644
--- a/tmp/84a186be-dd91-4952-a366-88eeb39747a5_buggy.java
+++ b/tmp/564ff0ca-7deb-45d3-8313-85f29e568f99_fixed.java
@@ -1,21 +1,27 @@
-    //-----------------------------------------------------------------------
 private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
     if (notPrinter && notParser) {
         throw new IllegalStateException("Builder has created neither a printer nor a parser");
     }
     int size = elementPairs.size();
-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {
+    // If the first element is a Separator then it is used to “glue” together the later elements.
+    // Previously the code skipped two elements (assuming a duplicate), but in some cases only one element was added.
+    if (size > 0 && elementPairs.get(0) instanceof Separator) {
         Separator sep = (Separator) elementPairs.get(0);
-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
+        // Recurse on the remaining elements starting at index 1
+        PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);
+        // If no fields follow, then the separator is not needed.
+        if (f.getPrinter() == null && f.getParser() == null) {
+            return f;
+        }
         sep = sep.finish(f.getPrinter(), f.getParser());
         return new PeriodFormatter(sep, sep);
     }
     Object[] comp = createComposite(elementPairs);
     if (notPrinter) {
         return new PeriodFormatter(null, (PeriodParser) comp[1]);
     } else if (notParser) {
         return new PeriodFormatter((PeriodPrinter) comp[0], null);
     } else {
         return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
     }
 }
\ No newline at end of file
