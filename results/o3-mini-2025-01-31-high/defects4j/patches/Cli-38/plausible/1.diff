diff --git a/tmp/eeee0a6b-8b81-47fe-8676-efcd0d696a12_buggy.java b/tmp/c8115b5b-56a4-476e-acfa-fc0f645dd6e1_fixed.java
index 81a6e8b..03424c0 100644
--- a/tmp/eeee0a6b-8b81-47fe-8676-efcd0d696a12_buggy.java
+++ b/tmp/c8115b5b-56a4-476e-acfa-fc0f645dd6e1_fixed.java
@@ -1,19 +1,23 @@
-    /**
-     * Tells if the token looks like a short option.
-     * 
-     * @param token
-     */
-    private boolean isShortOption(String token)
-    {
-        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        if (!token.startsWith("-") || token.length() == 1)
-        {
+private boolean isShortOption(String token) {
+    if (!token.startsWith("-") || token.equals("-")) {
         return false;
     }
     
-        // remove leading "-" and "=value"
+    // Remove leading "-" and any "=value" part.
     int pos = token.indexOf("=");
-        String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);
-        return options.hasShortOption(optName);
-        // check for several concatenated short options
+    String optPart = pos == -1 ? token.substring(1) : token.substring(1, pos);
+    
+    // If the entire optPart matches a defined short option, return true.
+    if (options.hasShortOption(optPart)) {
+        return true;
+    }
+    
+    // Otherwise, check if every individual character corresponds to a valid short option.
+    for (int i = 0; i < optPart.length(); i++) {
+        if (!options.hasShortOption(String.valueOf(optPart.charAt(i)))) {
+            return false;
+        }
+    }
+    
+    return true;
 }
\ No newline at end of file
