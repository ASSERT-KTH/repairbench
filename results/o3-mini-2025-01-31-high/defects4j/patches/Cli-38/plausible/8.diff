diff --git a/tmp/f48d2f4c-f8e1-4638-8505-8c628c944dd4_buggy.java b/tmp/7b7b1a1e-b0a4-4219-b45b-cc1785cd50f6_fixed.java
index 81a6e8b..b2d9c0b 100644
--- a/tmp/f48d2f4c-f8e1-4638-8505-8c628c944dd4_buggy.java
+++ b/tmp/7b7b1a1e-b0a4-4219-b45b-cc1785cd50f6_fixed.java
@@ -1,19 +1,35 @@
 /**
  * Tells if the token looks like a short option.
  * 
-     * @param token
+ * @param token the token to check
  */
 private boolean isShortOption(String token)
 {
     // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
     if (!token.startsWith("-") || token.length() == 1)
     {
         return false;
     }
 
     // remove leading "-" and "=value"
     int pos = token.indexOf("=");
     String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);
-        return options.hasShortOption(optName);
-        // check for several concatenated short options
+    
+    // if the entire optName is defined as a short option, then that's it
+    if (options.hasShortOption(optName))
+    {
+        return true;
+    }
+
+    // Otherwise, consider it as a group of concatenated short options.
+    // Every character in optName must be defined as a valid short option.
+    for (int i = 0; i < optName.length(); i++)
+    {
+        String singleOpt = String.valueOf(optName.charAt(i));
+        if (!options.hasShortOption(singleOpt))
+        {
+            return false;
+        }
+    }
+    return true;
 }
\ No newline at end of file
