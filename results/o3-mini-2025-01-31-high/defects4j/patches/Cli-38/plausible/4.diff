diff --git a/tmp/2028fbea-f663-400d-9088-c7a4a8397f49_buggy.java b/tmp/d53082cb-e0ca-4700-ab13-2382220e01d9_fixed.java
index 81a6e8b..3ae4ca2 100644
--- a/tmp/2028fbea-f663-400d-9088-c7a4a8397f49_buggy.java
+++ b/tmp/d53082cb-e0ca-4700-ab13-2382220e01d9_fixed.java
@@ -1,19 +1,33 @@
-    /**
-     * Tells if the token looks like a short option.
-     * 
-     * @param token
-     */
 private boolean isShortOption(String token)
 {
-        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
     if (!token.startsWith("-") || token.length() == 1)
     {
         return false;
     }
 
-        // remove leading "-" and "=value"
+    // remove leading "-" and any value attached with "="
     int pos = token.indexOf("=");
     String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);
-        return options.hasShortOption(optName);
-        // check for several concatenated short options
+
+    // if the whole option name is registered, it's a valid option
+    if (options.hasShortOption(optName))
+    {
+        return true;
+    }
+
+    // if there's no '=' and the optName has more than one character, check for concatenated short options
+    if (pos == -1 && optName.length() > 1)
+    {
+        for (int i = 0; i < optName.length(); i++)
+        {
+            String singleOpt = String.valueOf(optName.charAt(i));
+            if (!options.hasShortOption(singleOpt))
+            {
+                return false;
+            }
+        }
+        return true;
+    }
+    
+    return false;
 }
\ No newline at end of file
