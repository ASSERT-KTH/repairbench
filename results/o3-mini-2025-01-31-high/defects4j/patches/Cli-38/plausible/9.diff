diff --git a/tmp/295e80a5-73fc-4a55-8eea-688fe55c6698_buggy.java b/tmp/59f511e4-7e61-4105-8922-e0678ad5c764_fixed.java
index 81a6e8b..d15d918 100644
--- a/tmp/295e80a5-73fc-4a55-8eea-688fe55c6698_buggy.java
+++ b/tmp/59f511e4-7e61-4105-8922-e0678ad5c764_fixed.java
@@ -1,19 +1,27 @@
-    /**
-     * Tells if the token looks like a short option.
-     * 
-     * @param token
-     */
-    private boolean isShortOption(String token)
-    {
-        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        if (!token.startsWith("-") || token.length() == 1)
-        {
+private boolean isShortOption(String token) {
+    if (!token.startsWith("-") || token.length() == 1) {
         return false;
     }
 
-        // remove leading "-" and "=value"
+    // Remove leading "-" and any "=value" part.
     int pos = token.indexOf("=");
-        String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);
-        return options.hasShortOption(optName);
-        // check for several concatenated short options
+    String optPart = pos == -1 ? token.substring(1) : token.substring(1, pos);
+
+    // If the whole token (minus any value) is a valid short option, use it.
+    if (options.hasShortOption(optPart)) {
+        return true;
+    }
+
+    // Otherwise, if the token has more than one character, treat it as several concatenated short options.
+    if (optPart.length() > 1) {
+        for (int i = 0; i < optPart.length(); i++) {
+            String singleOpt = String.valueOf(optPart.charAt(i));
+            if (!options.hasShortOption(singleOpt)) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    return false;
 }
\ No newline at end of file
