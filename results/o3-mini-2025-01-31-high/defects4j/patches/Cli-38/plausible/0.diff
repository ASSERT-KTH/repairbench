diff --git a/tmp/2ee65919-e47e-472c-8139-ce8aa1181149_buggy.java b/tmp/2c884a7e-6faf-4f7d-a80d-896f65cafa93_fixed.java
index 81a6e8b..387df65 100644
--- a/tmp/2ee65919-e47e-472c-8139-ce8aa1181149_buggy.java
+++ b/tmp/2c884a7e-6faf-4f7d-a80d-896f65cafa93_fixed.java
@@ -1,19 +1,41 @@
 /**
  * Tells if the token looks like a short option.
  * 
  * @param token
  */
 private boolean isShortOption(String token)
 {
     // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
     if (!token.startsWith("-") || token.length() == 1)
     {
         return false;
     }
 
-        // remove leading "-" and "=value"
+    // remove leading "-" and strip off any "=value" if present
     int pos = token.indexOf("=");
     String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);
-        return options.hasShortOption(optName);
-        // check for several concatenated short options
+
+    // First, if the whole option name is recognized, return true.
+    if (options.hasShortOption(optName))
+    {
+        return true;
+    }
+
+    // If there is an equals sign, do not attempt to parse as concatenated options.
+    if (pos != -1)
+    {
+        return false;
+    }
+
+    // Otherwise, check for several concatenated short options:
+    // every character must be a valid short option.
+    for (int i = 0; i < optName.length(); i++)
+    {
+        String letter = optName.substring(i, i + 1);
+        if (!options.hasShortOption(letter))
+        {
+            return false;
+        }
+    }
+    return true;
 }
\ No newline at end of file
