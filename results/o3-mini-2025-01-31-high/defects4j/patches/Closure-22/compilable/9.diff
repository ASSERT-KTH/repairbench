diff --git a/tmp/5f46aad2-5e7d-496a-abc6-67b28e9aaf6b_buggy.java b/tmp/9a2fc230-af00-4d95-9fce-5e61f9883e0d_fixed.java
index 7f61a8c..c8a16cf 100644
--- a/tmp/5f46aad2-5e7d-496a-abc6-67b28e9aaf6b_buggy.java
+++ b/tmp/9a2fc230-af00-4d95-9fce-5e61f9883e0d_fixed.java
@@ -1,73 +1,79 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
-    // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+  // Only ignore extra semicolons at the BLOCK level.
+  if (n.isComma()) {
+    return;
+  }
+  if (n.isEmpty() && parent != null && parent.getType() == Token.BLOCK) {
     return;
   }
 
   if (parent == null) {
     return;
   }
 
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
   if (parent.getType() == Token.COMMA) {
     Node gramps = parent.getParent();
     if (gramps.isCall() && parent == gramps.getFirstChild()) {
-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && "eval".equals(n.getNext().getString())) {
+      if (n == parent.getFirstChild() && parent.getChildCount() == 2 &&
+          n.getNext().isName() && "eval".equals(n.getNext().getString())) {
         return;
       }
     }
-
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
+    // For a comma operator, if this node is the last child,
+    // make sure that the non-COMMA ancestor is either an EXPR_RESULT or BLOCK.
     if (n == parent.getLastChild()) {
       for (Node an : parent.getAncestors()) {
         int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA)
+        if (ancestorType == Token.COMMA) {
           continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
+        }
+        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {
           return;
-          else
+        } else {
           break;
         }
       }
+    }
   } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||
-           n == parent.getFirstChild().getNext().getNext())) {
+    // Allow for-loop initializers and increments.
+    if (parent.getType() == Token.FOR && parent.getChildCount() == 4 &&
+        (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {
+      // Fall through.
     } else {
       return;
     }
   }
 
+  // Determine whether the result of 'n' is used.
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
+  // When 'n' is part of a comma operator, only the last operand actually
+  // contributes to the overall value. Force intermediate operands to be
+  // considered as not used.
+  if (parent != null && parent.getType() == Token.COMMA) {
+    isResultUsed = (n == parent.getLastChild());
+  }
+
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
   if (!isResultUsed &&
       (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
     } else if (n.isExprResult()) {
       return;
     }
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
       msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
     }
 
-      t.getCompiler().report(
-          t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
+    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));
+    // For non-statement expressions, record the problem node.
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
 }
\ No newline at end of file
