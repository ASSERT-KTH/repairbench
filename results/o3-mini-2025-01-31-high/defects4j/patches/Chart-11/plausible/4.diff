diff --git a/tmp/d225a60b-387b-4d4b-b4b5-2bbb4f1f1c82_buggy.java b/tmp/835f2917-28aa-4842-bbc7-46249f70ac03_fixed.java
index ad7255c..82eab98 100644
--- a/tmp/d225a60b-387b-4d4b-b4b5-2bbb4f1f1c82_buggy.java
+++ b/tmp/835f2917-28aa-4842-bbc7-46249f70ac03_fixed.java
@@ -1,42 +1,68 @@
 /**
  * Tests two polygons for equality. If both are <code>null</code> this
  * method returns <code>true</code>.
  *
  * @param p1  path 1 (<code>null</code> permitted).
  * @param p2  path 2 (<code>null</code> permitted).
  *
  * @return A boolean.
  */
 public static boolean equal(GeneralPath p1, GeneralPath p2) {
     if (p1 == null) {
         return (p2 == null);
     }
     if (p2 == null) {
         return false;
     }
     if (p1.getWindingRule() != p2.getWindingRule()) {
         return false;
     }
+
     PathIterator iterator1 = p1.getPathIterator(null);
-        PathIterator iterator2 = p1.getPathIterator(null);
-        double[] d1 = new double[6];
-        double[] d2 = new double[6];
-        boolean done = iterator1.isDone() && iterator2.isDone();
-        while (!done) {
+    PathIterator iterator2 = p2.getPathIterator(null); // FIX: use p2 for the second iterator
+
+    double[] coords1 = new double[6];
+    double[] coords2 = new double[6];
+
+    while (!iterator1.isDone() || !iterator2.isDone()) {
+        // If one path is done and the other is not, they are different.
         if (iterator1.isDone() != iterator2.isDone()) {
             return false;
         }
-            int seg1 = iterator1.currentSegment(d1);
-            int seg2 = iterator2.currentSegment(d2);
+        int seg1 = iterator1.currentSegment(coords1);
+        int seg2 = iterator2.currentSegment(coords2);
         if (seg1 != seg2) {
             return false;
         }
-            if (!Arrays.equals(d1, d2)) {
+
+        int numCoords = 0;
+        switch (seg1) {
+            case PathIterator.SEG_MOVETO:
+            case PathIterator.SEG_LINETO:
+                numCoords = 2;
+                break;
+            case PathIterator.SEG_QUADTO:
+                numCoords = 4;
+                break;
+            case PathIterator.SEG_CUBICTO:
+                numCoords = 6;
+                break;
+            case PathIterator.SEG_CLOSE:
+                numCoords = 0;
+                break;
+            default:
+                break;
+        }
+
+        // Compare the coordinates for the current segment.
+        for (int i = 0; i < numCoords; i++) {
+            if (Double.doubleToLongBits(coords1[i]) != Double.doubleToLongBits(coords2[i])) {
                 return false;
             }
+        }
+
         iterator1.next();
         iterator2.next();
-            done = iterator1.isDone() && iterator2.isDone();
     }
     return true;
 }
\ No newline at end of file
