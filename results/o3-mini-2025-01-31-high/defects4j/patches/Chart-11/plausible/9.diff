diff --git a/tmp/d5effef2-8baf-401a-ab47-16b671266e8f_buggy.java b/tmp/75942b88-df49-4ef4-9246-469e46f0354f_fixed.java
index ad7255c..d736376 100644
--- a/tmp/d5effef2-8baf-401a-ab47-16b671266e8f_buggy.java
+++ b/tmp/75942b88-df49-4ef4-9246-469e46f0354f_fixed.java
@@ -1,42 +1,59 @@
-    /**
-     * Tests two polygons for equality.  If both are <code>null</code> this
-     * method returns <code>true</code>.
-     *
-     * @param p1  path 1 (<code>null</code> permitted).
-     * @param p2  path 2 (<code>null</code> permitted).
-     *
-     * @return A boolean.
-     */
 public static boolean equal(GeneralPath p1, GeneralPath p2) {
     if (p1 == null) {
-            return (p2 == null);
+        return p2 == null;
     }
     if (p2 == null) {
         return false;
     }
     if (p1.getWindingRule() != p2.getWindingRule()) {
         return false;
     }
-        PathIterator iterator1 = p1.getPathIterator(null);
-        PathIterator iterator2 = p1.getPathIterator(null);
-        double[] d1 = new double[6];
-        double[] d2 = new double[6];
-        boolean done = iterator1.isDone() && iterator2.isDone();
-        while (!done) {
-            if (iterator1.isDone() != iterator2.isDone()) {
+    
+    PathIterator it1 = p1.getPathIterator(null);
+    PathIterator it2 = p2.getPathIterator(null); // Fixed: use p2 instead of p1
+    double[] coords1 = new double[6];
+    double[] coords2 = new double[6];
+    
+    while (!it1.isDone() || !it2.isDone()) {
+        if (it1.isDone() != it2.isDone()) {
             return false;
         }
-            int seg1 = iterator1.currentSegment(d1);
-            int seg2 = iterator2.currentSegment(d2);
+        int seg1 = it1.currentSegment(coords1);
+        int seg2 = it2.currentSegment(coords2);
+        
         if (seg1 != seg2) {
             return false;
         }
-            if (!Arrays.equals(d1, d2)) {
+        
+        int numCoords;
+        switch (seg1) {
+            case PathIterator.SEG_MOVETO:
+            case PathIterator.SEG_LINETO:
+                numCoords = 2;
+                break;
+            case PathIterator.SEG_QUADTO:
+                numCoords = 4;
+                break;
+            case PathIterator.SEG_CUBICTO:
+                numCoords = 6;
+                break;
+            case PathIterator.SEG_CLOSE:
+                numCoords = 0;
+                break;
+            default:
+                numCoords = 0;
+                break;
+        }
+        
+        for (int i = 0; i < numCoords; i++) {
+            if (Double.compare(coords1[i], coords2[i]) != 0) {
                 return false;
             }
-            iterator1.next();
-            iterator2.next();
-            done = iterator1.isDone() && iterator2.isDone();
         }
+        
+        it1.next();
+        it2.next();
+    }
+    
     return true;
 }
\ No newline at end of file
