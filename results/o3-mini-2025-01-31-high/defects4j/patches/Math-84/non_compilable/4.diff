diff --git a/tmp/c8692389-5c6a-4c30-8b54-8763890c99d2_buggy.java b/tmp/ca9b4857-a710-45b4-8260-372c66d45660_fixed.java
index 5f1dcf2..e3ebc48 100644
--- a/tmp/c8692389-5c6a-4c30-8b54-8763890c99d2_buggy.java
+++ b/tmp/ca9b4857-a710-45b4-8260-372c66d45660_fixed.java
@@ -1,41 +1,42 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
-
-        while (true) {
-
+    // Count one iteration.
     incrementIterationsCounter();
 
-            // save the original vertex
+    // Save the current simplex.
     final RealPointValuePair[] original = simplex;
     final RealPointValuePair best = original[0];
 
-            // perform a reflection step
+    // Reflection step.
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
     if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
+        // Expansion step.
         final RealPointValuePair[] reflectedSimplex = simplex;
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
         if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
             simplex = reflectedSimplex;
         }
-
         return;
-
     }
 
-            // compute the contracted simplex
+    // Contraction step.
     final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
     if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
         return;
     }
 
+    // If neither reflection nor contraction improved the simplex,
+    // perform a shrink step.
+    final double[] bestPoint = best.getPoint();
+    for (int i = 1; i < simplex.length; i++) {
+        final double[] vertex = simplex[i].getPoint();
+        final double[] shrunk = new double[vertex.length];
+        for (int j = 0; j < vertex.length; j++) {
+            shrunk[j] = bestPoint[j] + 0.5 * (vertex[j] - bestPoint[j]);
+        }
+        // Re-evaluate the function at the new (shrunk) vertex.
+        simplex[i] = new RealPointValuePair(shrunk, getFunctionValue(shrunk));
     }
-
 }
\ No newline at end of file
