diff --git a/tmp/4ed45ffb-9b05-425b-8d25-9fea4cb32c63_buggy.java b/tmp/4f39f865-7e92-44e6-a7bf-10d7f0f5f677_fixed.java
index 5f1dcf2..fece26c 100644
--- a/tmp/4ed45ffb-9b05-425b-8d25-9fea4cb32c63_buggy.java
+++ b/tmp/4f39f865-7e92-44e6-a7bf-10d7f0f5f677_fixed.java
@@ -1,41 +1,46 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
-
         incrementIterationsCounter();
 
-            // save the original vertex
+        // save the original simplex and its best vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
+            // try an expansion step from the reflected simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
-
             return;
-
         }
 
-            // compute the contracted simplex
+        // perform a contraction step
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
             return;
         }
 
+        // Neither reflection nor contraction improved the simplex.
+        // Perform a shrink step: update all vertices (except the best) toward the best vertex.
+        // Here we use a shrink factor of 0.5.
+        for (int i = 1; i < simplex.length; i++) {
+            final double[] vertex = simplex[i].getPoint();
+            final double[] bestPoint = best.getPoint();
+            final double[] newVertex = new double[vertex.length];
+            for (int j = 0; j < vertex.length; j++) {
+                newVertex[j] = bestPoint[j] + 0.5 * (vertex[j] - bestPoint[j]);
+            }
+            simplex[i] = new RealPointValuePair(newVertex, computeObjectiveValue(newVertex));
+        }
+        return;
     }
-
 }
\ No newline at end of file
