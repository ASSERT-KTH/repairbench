diff --git a/tmp/6085b313-6bb5-4243-80c1-b576ed2f08b6_buggy.java b/tmp/27a6f3c3-0725-470e-a016-05ea036fe93a_fixed.java
index 5f1dcf2..db92d0e 100644
--- a/tmp/6085b313-6bb5-4243-80c1-b576ed2f08b6_buggy.java
+++ b/tmp/27a6f3c3-0725-470e-a016-05ea036fe93a_fixed.java
@@ -1,41 +1,56 @@
-    /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
+    // In each iteration we transform the current simplex (stored in the field "simplex")
+    // until the convergence criteria are met.
     while (true) {
-
+        // Increment iteration counter (this may throw if max iterations are exceeded).
         incrementIterationsCounter();
 
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
+        // Keep a copy of the current simplex for convergence checking.
+        final RealPointValuePair[] previousSimplex = simplex.clone();
+        final RealPointValuePair best = simplex[0];
 
-            // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+        // --- Reflection Step ---
+        // Compute a reflected simplex using a scale factor 1.0.
+        final RealPointValuePair reflected = evaluateNewSimplex(previousSimplex, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+            // The reflected point improves upon the best. Try expansion.
+            final RealPointValuePair[] reflectedSimplex = simplex.clone();
+            final RealPointValuePair expanded = evaluateNewSimplex(previousSimplex, khi, comparator);
+            // If expansion does not improve on the reflection, accept the reflected simplex.
             if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
-
-                return;
-
-            }
-
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+        } else {
+            // --- Contraction Step ---
+            // Reflection did not yield a new best; try a contraction with factor gamma.
+            final RealPointValuePair contracted = evaluateNewSimplex(previousSimplex, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
+                // Contraction produced an improvement; the new simplex has already been stored.
+            } else {
+                // --- Shrink Step ---
+                // Neither reflection nor contraction improved the simplex;
+                // shrink the simplex towards the best point.
+                final double shrink = 0.5;
+                final double[] bestPoint = best.getPoint();
+                for (int i = 1; i < simplex.length; i++) {
+                    final double[] currentPoint = simplex[i].getPoint();
+                    final double[] newPoint = new double[currentPoint.length];
+                    for (int j = 0; j < currentPoint.length; j++) {
+                        newPoint[j] = bestPoint[j] + shrink * (currentPoint[j] - bestPoint[j]);
+                    }
+                    // Evaluate the objective function at the new point.
+                    simplex[i] = new RealPointValuePair(newPoint, evaluate(newPoint));
+                }
+            }
+        }
 
-            // check convergence
+        // --- Convergence Check ---
+        // If the simplex has converged (according to the convergenceChecker), we exit.
+        if (convergenceChecker.converged(getIterations(), previousSimplex, simplex)) {
             return;
         }
-
     }
-
 }
\ No newline at end of file
