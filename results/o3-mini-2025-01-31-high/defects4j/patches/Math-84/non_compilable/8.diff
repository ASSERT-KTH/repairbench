diff --git a/tmp/9f9bbebf-6612-47fb-9a9a-78a59c953fa1_buggy.java b/tmp/04135bb2-2eff-475d-b87a-19bc1ee7ab82_fixed.java
index 5f1dcf2..3df7556 100644
--- a/tmp/9f9bbebf-6612-47fb-9a9a-78a59c953fa1_buggy.java
+++ b/tmp/04135bb2-2eff-475d-b87a-19bc1ee7ab82_fixed.java
@@ -1,41 +1,54 @@
-    /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
+    // Save a copy of the current simplex to use in the convergence check.
+    RealPointValuePair[] prevSimplex = simplex.clone();
+    final double shrinkFactor = 0.5;
+
     while (true) {
-
         incrementIterationsCounter();
 
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
+        // Make a copy of the current simplex.
+        final RealPointValuePair[] original = simplex.clone();
         final RealPointValuePair best = original[0];
 
-            // perform a reflection step
+        // --- Reflection step ---
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+            // We got an improvement. Try an expansion step.
+            final RealPointValuePair[] reflectedSimplex = simplex.clone();
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
+                // If the expansion did not yield a better simplex, keep the reflected one.
                 simplex = reflectedSimplex;
             }
-
-                return;
-
-            }
-
-            // compute the contracted simplex
+        } else {
+            // --- Contraction step ---
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
+                // The contracted simplex is accepted (its update is assumed to occur in evaluateNewSimplex).
+            } else {
+                // --- Shrink the simplex ---
+                // Neither reflection nor contraction improved the simplex.
+                // So, shrink all vertices (except the best one) toward the best vertex.
+                final RealPointValuePair bestVertex = simplex[0];
+                final double[] bestPoint = bestVertex.getPointRef();
+                for (int i = 1; i < simplex.length; i++) {
+                    final double[] currentPoint = simplex[i].getPointRef();
+                    final double[] newPoint = new double[bestPoint.length];
+                    for (int j = 0; j < bestPoint.length; j++) {
+                        newPoint[j] = bestPoint[j] + shrinkFactor * (currentPoint[j] - bestPoint[j]);
+                    }
+                    simplex[i] = new RealPointValuePair(newPoint, getObjectiveFunction().value(newPoint));
+                }
+            }
+        }
 
-            // check convergence
+        // Check for convergence by comparing the previous simplex with the current one.
+        if (convergenceChecker.converged(prevSimplex, simplex)) {
             return;
         }
-
+        prevSimplex = simplex.clone();
     }
-
 }
\ No newline at end of file
