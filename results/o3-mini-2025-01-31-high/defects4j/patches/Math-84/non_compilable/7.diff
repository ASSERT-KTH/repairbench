diff --git a/tmp/cb3419cf-1027-4eff-9880-4fccdec16768_buggy.java b/tmp/48e12ad7-f5e5-45fd-bb0a-97c05f4ef540_fixed.java
index 5f1dcf2..8c5d85a 100644
--- a/tmp/cb3419cf-1027-4eff-9880-4fccdec16768_buggy.java
+++ b/tmp/48e12ad7-f5e5-45fd-bb0a-97c05f4ef540_fixed.java
@@ -1,41 +1,46 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
+    // One iteration of the simplex transformation.
     incrementIterationsCounter();
 
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
+    // Save a copy of the current simplex.
+    final RealPointValuePair[] original = simplex.clone();
     final RealPointValuePair best = original[0];
 
-            // perform a reflection step
+    // Reflection step.
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
     if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+        // If reflection improved the best point, try an expansion step.
+        final RealPointValuePair[] reflectedSimplex = simplex.clone();
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
         if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
+            // If the expansion did not outperform the reflection,
+            // restore the reflected simplex.
             simplex = reflectedSimplex;
         }
-
         return;
-
     }
 
-            // compute the contracted simplex
+    // Contraction step.
     final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
     if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
+        // Accept the contracted simplex.
         return;
     }
 
+    // If neither reflection nor contraction has improved the simplex,
+    // perform a shrink of the simplex toward the best vertex.
+    final double shrinkCoefficient = 0.5;
+    for (int i = 1; i < simplex.length; i++) {
+        final double[] current = simplex[i].getPoint();
+        final double[] bestPoint = best.getPoint();
+        final double[] newPoint = new double[current.length];
+        for (int j = 0; j < current.length; j++) {
+            newPoint[j] = bestPoint[j] + shrinkCoefficient * (current[j] - bestPoint[j]);
+        }
+        simplex[i] = new RealPointValuePair(newPoint, function.value(newPoint));
     }
-
 }
\ No newline at end of file
