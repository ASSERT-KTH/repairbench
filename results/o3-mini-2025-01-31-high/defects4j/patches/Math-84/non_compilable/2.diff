diff --git a/tmp/b536894f-20cd-4a28-944d-e9a488eb2ead_buggy.java b/tmp/03365e4c-2303-4b93-9c41-25a9e103aabc_fixed.java
index 5f1dcf2..3b107db 100644
--- a/tmp/b536894f-20cd-4a28-944d-e9a488eb2ead_buggy.java
+++ b/tmp/03365e4c-2303-4b93-9c41-25a9e103aabc_fixed.java
@@ -1,41 +1,50 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
+    // Count the iteration.
     incrementIterationsCounter();
 
-            // save the original vertex
+    // Save the original simplex and its best vertex.
     final RealPointValuePair[] original = simplex;
     final RealPointValuePair best = original[0];
 
-            // perform a reflection step
+    // --- Reflection step ---
+    // Try to reflect the worst point through the centroid.
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
     if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+        // The reflected point is an improvement.
+        // Try to further expand the simplex along the reflection direction.
+        // Note: evaluateNewSimplex updates the member "simplex" with the new vertices.
+        final RealPointValuePair[] reflectedSimplex = simplex;  // save the state after reflection
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+        // If the expansion did not improve over the reflection then keep the reflected simplex.
         if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
             simplex = reflectedSimplex;
         }
-
         return;
-
     }
 
-            // compute the contracted simplex
+    // --- Contraction step ---
+    // Try to contract (move vertices toward the best vertex) since reflection failed.
     final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
     if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
+        // The contraction yielded an improvement.
         return;
     }
 
+    // --- Shrink (reduction) step ---
+    // Neither reflection nor contraction improved the simplex.
+    // Shrink all vertices (except the best) toward the best vertex.
+    final double sigma = 0.5;  // shrink factor (typically 0.5)
+    final double[] bestPoint = best.getPoint();
+    for (int i = 1; i < simplex.length; i++) {
+        final double[] currentPoint = simplex[i].getPoint();
+        final double[] newPoint = new double[currentPoint.length];
+        for (int j = 0; j < currentPoint.length; j++) {
+            newPoint[j] = bestPoint[j] + sigma * (currentPoint[j] - bestPoint[j]);
+        }
+        simplex[i] = new RealPointValuePair(newPoint, computeObjectiveValue(newPoint));
     }
-
 }
\ No newline at end of file
