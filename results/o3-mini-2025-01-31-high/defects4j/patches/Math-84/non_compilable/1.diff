diff --git a/tmp/029ac66e-a7e7-4f71-87a1-e9ec71eefc8b_buggy.java b/tmp/9b4fe4a8-1710-45fc-8fe9-ee94302a0f51_fixed.java
index 5f1dcf2..d16ea13 100644
--- a/tmp/029ac66e-a7e7-4f71-87a1-e9ec71eefc8b_buggy.java
+++ b/tmp/9b4fe4a8-1710-45fc-8fe9-ee94302a0f51_fixed.java
@@ -1,41 +1,67 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
-
+        // Record an iteration.
         incrementIterationsCounter();
 
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
+        // Make a copy of the current simplex (the vertices are assumed to be sorted).
+        final RealPointValuePair[] original = simplex.clone();
         final RealPointValuePair best = original[0];
 
-            // perform a reflection step
+        // --- Reflection step ---
+        // Try a reflection with a factor of 1.0.
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+            // If reflection improves on the best vertex, try an expansion.
+            final RealPointValuePair[] reflectedSimplex = simplex.clone();
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
+                // Accept the reflected simplex.
                 simplex = reflectedSimplex;
             }
-
+            // Optionally check for convergence using the best vertex.
+            if (convergenceChecker != null &&
+                convergenceChecker.converged(getIterations(), best, simplex[0])) {
+                return;
+            }
             return;
-
         }
 
-            // compute the contracted simplex
+        // --- Contraction step ---
+        // If reflection did not yield improvement, try a contraction with factor gamma.
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
+            // Accept the contracted simplex.
+            if (convergenceChecker != null &&
+                convergenceChecker.converged(getIterations(), best, simplex[0])) {
                 return;
             }
-
+            return;
         }
 
+        // --- Shrink step ---
+        // Neither reflection nor contraction produced an improved simplex.
+        // In this case, shrink the simplex toward the best vertex.
+        final int n = simplex.length;
+        final int dim = best.getPoint().length;
+        for (int i = 1; i < n; i++) {
+            final double[] newPoint = new double[dim];
+            final double[] bestPoint = best.getPoint();
+            final double[] currentPoint = simplex[i].getPoint();
+            for (int j = 0; j < dim; j++) {
+                newPoint[j] = bestPoint[j] + 0.5 * (currentPoint[j] - bestPoint[j]);
+            }
+            // Evaluate the objective function at the new point.
+            double newValue = evaluate(newPoint);
+            simplex[i] = new RealPointValuePair(newPoint, newValue, false);
+        }
+        // After shrinking the simplex, check if the convergence criteria is met.
+        if (convergenceChecker != null &&
+            convergenceChecker.converged(getIterations(), best, simplex[0])) {
+            return;
+        }
+    }
 }
\ No newline at end of file
