diff --git a/tmp/0d2d8aa9-07bd-42ba-8e42-2d9cbb025f26_buggy.java b/tmp/292912ab-2e2f-412a-9827-9c5eaf48a1b2_fixed.java
index 5f1dcf2..a78b20a 100644
--- a/tmp/0d2d8aa9-07bd-42ba-8e42-2d9cbb025f26_buggy.java
+++ b/tmp/292912ab-2e2f-412a-9827-9c5eaf48a1b2_fixed.java
@@ -1,41 +1,49 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
+    // count an iteration
     incrementIterationsCounter();
 
-            // save the original vertex
+    // Save the current simplex and its best vertex.
     final RealPointValuePair[] original = simplex;
     final RealPointValuePair best = original[0];
 
-            // perform a reflection step
+    // Reflection step.
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
     if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
+        // Reflection improved the best point.
+        // Save the reflected simplex so it can be recovered if expansion fails.
         final RealPointValuePair[] reflectedSimplex = simplex;
+        // Try an expansion step.
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
         if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
+            // If expansion did not improve upon the reflection,
+            // restore the reflected simplex.
             simplex = reflectedSimplex;
         }
-
         return;
-
     }
 
-            // compute the contracted simplex
+    // Contraction step.
     final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
     if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
+        // If contraction produced improvement, accept it.
         return;
     }
 
+    // Neither reflection nor contraction yielded an improvement.
+    // Therefore, perform a shrink of the simplex around the best vertex.
+    // (Shrink each vertex (except the best) toward the best by a factor of 0.5.)
+    for (int i = 1; i < simplex.length; i++) {
+        final double[] bestPoint = best.getPointRef();
+        final double[] currentPoint = simplex[i].getPointRef();
+        final double[] newPoint = new double[bestPoint.length];
+        for (int j = 0; j < bestPoint.length; j++) {
+            newPoint[j] = bestPoint[j] + 0.5 * (currentPoint[j] - bestPoint[j]);
+        }
+        // Re-evaluate the objective function at the new point.
+        simplex[i] = new RealPointValuePair(newPoint, evaluate(newPoint));
     }
-
 }
\ No newline at end of file
