diff --git a/tmp/3e02ffcd-826f-4884-8f8e-2513f8ad2197_buggy.java b/tmp/c538a678-5545-499f-b523-671a4258f5e5_fixed.java
index fbd0884..1813cf2 100644
--- a/tmp/3e02ffcd-826f-4884-8f8e-2513f8ad2197_buggy.java
+++ b/tmp/c538a678-5545-499f-b523-671a4258f5e5_fixed.java
@@ -1,23 +1,26 @@
-    /**
-     * Flip qd array if warranted.
-     * @param n number of rows in the block
-     * @param step within the array (1 for flipping all elements, 2 for flipping
-     * only every other element)
-     * @return true if qd array was flipped
-     */
 private boolean flipIfWarranted(final int n, final int step) {
     if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
-            // flip array
         int j = 4 * n - 1;
         for (int i = 0; i < j; i += 4) {
+            // When the two rows to swap are really the same row (i.e. the middle row)
+            // and we are flipping all four elements (step==1), we must avoid doing a full
+            // 4‐element swap (which would undo itself) and only swap the first half.
+            if (step == 1 && i == j - 3) {
+                for (int k = 0; k < 2; k++) {
+                    final double tmp = work[i + k];
+                    work[i + k] = work[j - k];
+                    work[j - k] = tmp;
+                }
+            } else {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
                     work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
+            }
             j -= 4;
         }
         return true;
     }
     return false;
 }
\ No newline at end of file
