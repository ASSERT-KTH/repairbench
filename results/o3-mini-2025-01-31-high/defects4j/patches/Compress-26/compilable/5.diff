diff --git a/tmp/a7fc0058-a5d7-4d31-8d5a-13d91e28c9b0_buggy.java b/tmp/a9c4a12e-e8d4-42e4-97b5-ed63a70d05ad_fixed.java
index 4b163f6..4fdda15 100644
--- a/tmp/a7fc0058-a5d7-4d31-8d5a-13d91e28c9b0_buggy.java
+++ b/tmp/a9c4a12e-e8d4-42e4-97b5-ed63a70d05ad_fixed.java
@@ -1,28 +1,33 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
+ * the requested number of bytes has been skipped this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
  * bytes if the end of the input stream has been reached.</p>
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
-     * @throws IOException
+ * @throws IOException if an I/O error occurs
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
+    long remaining = numToSkip;
+    while (remaining > 0) {
+        long n = input.skip(remaining);
+        if (n == 0) {
+            // If skip() returns 0, try reading one byte instead.
+            int b = input.read();
+            if (b < 0) {
+                // End-of-stream reached.
                 break;
             }
-            numToSkip -= skipped;
+            n = 1;
         }
-            
-        return available - numToSkip;
+        remaining -= n;
+    }
+    return numToSkip - remaining;
 }
\ No newline at end of file
