diff --git a/tmp/cfa66ee1-6dc2-45a7-99b7-4ab5f535aea2_buggy.java b/tmp/1fb1642f-2356-419c-a9ed-f0784a4e0434_fixed.java
index 4be01ab..d634855 100644
--- a/tmp/cfa66ee1-6dc2-45a7-99b7-4ab5f535aea2_buggy.java
+++ b/tmp/1fb1642f-2356-419c-a9ed-f0784a4e0434_fixed.java
@@ -1,115 +1,117 @@
 /**
  * Extracts the text found on the current line and all subsequent
  * until either an annotation, end of comment or end of file is reached.
  * Note that if this method detects an end of line as the first token, it
  * will quit immediately (indicating that there is no text where it was
  * expected).  Note that token = info.token; should be called after this
  * method is used to update the token properly in the parser.
  *
  * @param token The start token.
  * @param option How to handle whitespace.
  *
  * @return The extraction information.
  */
 @SuppressWarnings("fallthrough")
 private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                     WhitespaceOption option) {
-
   if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
       token == JsDocToken.EOF) {
     return new ExtractionInfo("", token);
   }
 
   stream.update();
   int startLineno = stream.getLineno();
   int startCharno = stream.getCharno() + 1;
 
   // Read the content from the first line.
   String line = stream.getRemainingJSDocLine();
-    if (option != WhitespaceOption.PRESERVE) {
+  // In SINGLE_LINE mode we collapse all whitespace.
+  // Otherwise, we only remove unwanted trailing spaces.
+  if (option == WhitespaceOption.SINGLE_LINE) {
     line = line.trim();
+  } else {
+    line = trimEnd(line);
   }
-
   StringBuilder builder = new StringBuilder();
   builder.append(line);
 
   state = State.SEARCHING_ANNOTATION;
   token = next();
 
+  // This flag will be set after an EOL to indicate that if a STAR
+  // is the first token on the new line it should be skipped.
   boolean ignoreStar = false;
 
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
-    do {
+  while (true) {
     switch (token) {
       case STAR:
         if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
+          // Skip a star token if it appears at the beginning of the line.
+          ignoreStar = false;
         } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
+          // In the rare event that a '*' is meant to be part of the text,
+          // only add a separator if we’re not already at the start of a new line.
+          if (builder.length() > 0 && builder.charAt(builder.length() - 1) != '\n') {
             builder.append(' ');
           }
-
           builder.append('*');
         }
-
         token = next();
         continue;
 
       case EOL:
         if (option != WhitespaceOption.SINGLE_LINE) {
           builder.append("\n");
         }
-
+        // Mark that we are at the start of a new line.
         ignoreStar = true;
         token = next();
         continue;
 
       default:
+        // We reset the ignoreStar flag once real content is found.
         ignoreStar = false;
         state = State.SEARCHING_ANNOTATION;
 
-              // All tokens must be separated by a space.
-
+        // If we’ve reached an end-comment, end-of-file,
+        // or an annotation (unless we’re in preserve mode),
+        // finish up.
         if (token == JsDocToken.EOC ||
             token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
+            (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {
           String multilineText = builder.toString();
-
-            if (option != WhitespaceOption.PRESERVE) {
+          if (option == WhitespaceOption.SINGLE_LINE) {
             multilineText = multilineText.trim();
+          } else if (option != WhitespaceOption.PRESERVE) {
+            multilineText = trimEnd(multilineText);
           }
-
           int endLineno = stream.getLineno();
           int endCharno = stream.getCharno();
 
           if (multilineText.length() > 0) {
             jsdocBuilder.markText(multilineText, startLineno, startCharno,
                 endLineno, endCharno);
           }
-
           return new ExtractionInfo(multilineText, token);
         }
 
-          if (builder.length() > 0) {
+        // If we're not at the start of a new line (i.e. the last char isn’t a newline),
+        // separate tokens with a space.
+        if (builder.length() > 0 && builder.charAt(builder.length() - 1) != '\n') {
           builder.append(' ');
         }
         builder.append(toString(token));
 
+        // Get any remaining text on the current line.
         line = stream.getRemainingJSDocLine();
-
-          if (option != WhitespaceOption.PRESERVE) {
+        if (option == WhitespaceOption.SINGLE_LINE) {
+          line = line.trim();
+        } else if (option != WhitespaceOption.PRESERVE) {
           line = trimEnd(line);
         }
-
         builder.append(line);
         token = next();
+        break;
+    }
   }
-    } while (true);
 }
\ No newline at end of file
