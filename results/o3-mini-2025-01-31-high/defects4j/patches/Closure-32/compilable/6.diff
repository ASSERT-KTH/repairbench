diff --git a/tmp/4ada8a90-83f0-4d5b-80e6-1f3f00e4cffa_buggy.java b/tmp/240b87cf-fe74-41a9-9ada-4e46019c5ff9_fixed.java
index 4be01ab..53f768e 100644
--- a/tmp/4ada8a90-83f0-4d5b-80e6-1f3f00e4cffa_buggy.java
+++ b/tmp/240b87cf-fe74-41a9-9ada-4e46019c5ff9_fixed.java
@@ -1,115 +1,89 @@
-  /**
-   * Extracts the text found on the current line and all subsequent
-   * until either an annotation, end of comment or end of file is reached.
-   * Note that if this method detects an end of line as the first token, it
-   * will quit immediately (indicating that there is no text where it was
-   * expected).  Note that token = info.token; should be called after this
-   * method is used to update the token properly in the parser.
-   *
-   * @param token The start token.
-   * @param option How to handle whitespace.
-   *
-   * @return The extraction information.
-   */
 @SuppressWarnings("fallthrough")
 private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                     WhitespaceOption option) {
 
   if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
       token == JsDocToken.EOF) {
     return new ExtractionInfo("", token);
   }
 
   stream.update();
   int startLineno = stream.getLineno();
   int startCharno = stream.getCharno() + 1;
 
   // Read the content from the first line.
+  // Use trimEnd() rather than trim() so that any intended leading space is preserved.
   String line = stream.getRemainingJSDocLine();
   if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
+    line = trimEnd(line);
   }
-
   StringBuilder builder = new StringBuilder();
   builder.append(line);
 
   state = State.SEARCHING_ANNOTATION;
   token = next();
 
   boolean ignoreStar = false;
 
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
+  // Loop over subsequent tokens until an annotation, the end of comment,
+  // or the end of file is reached.
   do {
     switch (token) {
       case STAR:
         if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
+          // The star was skipped at the beginning of this line.
         } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
+          // The star is part of the comment; prepend a separating space only if needed.
+          if (builder.length() > 0 && builder.charAt(builder.length() - 1) != '\n') {
             builder.append(' ');
           }
-
           builder.append('*');
         }
-
         token = next();
         continue;
 
       case EOL:
+        // Append a newline if we aren’t in single line mode.
         if (option != WhitespaceOption.SINGLE_LINE) {
           builder.append("\n");
         }
-
         ignoreStar = true;
         token = next();
         continue;
 
       default:
         ignoreStar = false;
         state = State.SEARCHING_ANNOTATION;
 
-              // All tokens must be separated by a space.
-
+        // If we have reached an end marker—or if we hit another annotation
+        // when not in PRESERVE mode—then finish.
         if (token == JsDocToken.EOC ||
             token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
+            (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {
           String multilineText = builder.toString();
-
-            if (option != WhitespaceOption.PRESERVE) {
-              multilineText = multilineText.trim();
-            }
-
           int endLineno = stream.getLineno();
           int endCharno = stream.getCharno();
-
           if (multilineText.length() > 0) {
             jsdocBuilder.markText(multilineText, startLineno, startCharno,
                                   endLineno, endCharno);
           }
-
           return new ExtractionInfo(multilineText, token);
         }
 
-          if (builder.length() > 0) {
+        // Append a separating space if the builder does not already end with a newline.
+        if (builder.length() > 0 && builder.charAt(builder.length() - 1) != '\n') {
           builder.append(' ');
         }
         builder.append(toString(token));
 
+        // Append the rest of the current line. Use trimEnd() so that only trailing
+        // whitespace is removed when not preserving; leading whitespace is kept.
         line = stream.getRemainingJSDocLine();
-
         if (option != WhitespaceOption.PRESERVE) {
           line = trimEnd(line);
         }
-
         builder.append(line);
         token = next();
     }
   } while (true);
 }
\ No newline at end of file
