diff --git a/tmp/659b53aa-8dbb-4ed0-a265-810665504111_buggy.java b/tmp/affb9c8c-4649-43bb-85ad-3b4caff7b4cc_fixed.java
index 4be01ab..26216c2 100644
--- a/tmp/659b53aa-8dbb-4ed0-a265-810665504111_buggy.java
+++ b/tmp/affb9c8c-4649-43bb-85ad-3b4caff7b4cc_fixed.java
@@ -1,115 +1,98 @@
-  /**
-   * Extracts the text found on the current line and all subsequent
-   * until either an annotation, end of comment or end of file is reached.
-   * Note that if this method detects an end of line as the first token, it
-   * will quit immediately (indicating that there is no text where it was
-   * expected).  Note that token = info.token; should be called after this
-   * method is used to update the token properly in the parser.
-   *
-   * @param token The start token.
-   * @param option How to handle whitespace.
-   *
-   * @return The extraction information.
-   */
 @SuppressWarnings("fallthrough")
 private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                     WhitespaceOption option) {
-
   if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
       token == JsDocToken.EOF) {
     return new ExtractionInfo("", token);
   }
 
   stream.update();
   int startLineno = stream.getLineno();
   int startCharno = stream.getCharno() + 1;
 
-    // Read the content from the first line.
+  // For the first line, obtain its remaining text.
+  // In non‐preserve mode we want to remove any trailing whitespace
+  // (but we intentionally leave any leading whitespace intact).
   String line = stream.getRemainingJSDocLine();
   if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
+    line = trimEnd(line);
   }
-
   StringBuilder builder = new StringBuilder();
   builder.append(line);
 
   state = State.SEARCHING_ANNOTATION;
   token = next();
 
   boolean ignoreStar = false;
 
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
   do {
     switch (token) {
       case STAR:
         if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
+          // When a line begins with a decorative star, skip it.
+          // Also reset the flag so that subsequent tokens on this line
+          // get proper separation.
+          ignoreStar = false;
+          token = next();
+          continue;
         } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
+          // Append the star only if it isn’t at the beginning of a line.
+          // Insert a separating space only when needed.
+          if (builder.length() > 0 &&
+              !Character.isWhitespace(builder.charAt(builder.length() - 1))) {
             builder.append(' ');
           }
-
           builder.append('*');
-          }
-
           token = next();
           continue;
-
+        }
       case EOL:
         if (option != WhitespaceOption.SINGLE_LINE) {
           builder.append("\n");
         }
-
+        // Set this flag so that a star at the beginning of the next line
+        // (if present) is ignored.
         ignoreStar = true;
         token = next();
         continue;
-
       default:
         ignoreStar = false;
         state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
-
+        // If we have reached the end of the comment (or an annotation token
+        // when we are not preserving whitespace) then finish.
         if (token == JsDocToken.EOC ||
             token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
             (token == JsDocToken.ANNOTATION &&
              option != WhitespaceOption.PRESERVE)) {
           String multilineText = builder.toString();
-
+          // In non‐preserve mode, we remove trailing whitespace (but keep any
+          // intentional leading space that might follow the tag).
           if (option != WhitespaceOption.PRESERVE) {
-              multilineText = multilineText.trim();
+            multilineText = trimEnd(multilineText);
           }
-
           int endLineno = stream.getLineno();
           int endCharno = stream.getCharno();
-
           if (multilineText.length() > 0) {
             jsdocBuilder.markText(multilineText, startLineno, startCharno,
                                   endLineno, endCharno);
           }
-
           return new ExtractionInfo(multilineText, token);
         }
-
-          if (builder.length() > 0) {
+        // In the default case, before outputting the token’s text,
+        // ensure it’s separated from what has already been captured—but
+        // only add a space if the last character isn’t already whitespace.
+        if (builder.length() > 0 &&
+            !Character.isWhitespace(builder.charAt(builder.length() - 1))) {
           builder.append(' ');
         }
         builder.append(toString(token));
 
         line = stream.getRemainingJSDocLine();
-
         if (option != WhitespaceOption.PRESERVE) {
           line = trimEnd(line);
         }
-
         builder.append(line);
         token = next();
     }
   } while (true);
 }
\ No newline at end of file
