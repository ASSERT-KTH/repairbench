diff --git a/tmp/c6d5e63d-1b81-4b28-a362-923f8258b835_buggy.java b/tmp/13da5715-e457-4874-87d0-f683efd8cf74_fixed.java
index 56b2d66..b30df6c 100644
--- a/tmp/c6d5e63d-1b81-4b28-a362-923f8258b835_buggy.java
+++ b/tmp/13da5715-e457-4874-87d0-f683efd8cf74_fixed.java
@@ -1,45 +1,91 @@
 /**
-     * Removes the phase 1 objective function, positive cost non-artificial variables,
-     * and the non-basic artificial variables from this tableau.
+ * Removes the phase 1 objective function, positive cost non‚Äêartificial variables,
+ * and all artificial variables (by pivoting out any basic artificial variables)
+ * from this tableau.
  */
 protected void dropPhase1Objective() {
+    // if only one objective function, nothing to drop
     if (getNumObjectiveFunctions() == 1) {
         return;
     }
 
+    // list of column indices to drop
     List<Integer> columnsToDrop = new ArrayList<Integer>();
+    // The first column (used for the phase 1 constant) is removed.
     columnsToDrop.add(0);
 
-        // positive cost non-artificial variables
+    // Drop any non-artificial columns that have a positive cost in the phase 1 row.
+    // These are the columns between the phase 1 and artificial variable regions.
     for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
         final double entry = tableau.getEntry(0, i);
         if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
             columnsToDrop.add(i);
         }
     }
 
-        // non-basic artificial variables
+    // Process artificial variables: whether basic or non-basic, we want to drop their columns.
+    // However, if an artificial variable is basic, we first try to pivot it out.
     for (int i = 0; i < getNumArtificialVariables(); i++) {
-          int col = i + getArtificialVariableOffset();
-          if (getBasicRow(col) == null) {
-            columnsToDrop.add(col);
+        int artCol = i + getArtificialVariableOffset();
+        Integer basicRow = getBasicRow(artCol);
+        if (basicRow != null) {
+            // Try to pick a candidate pivot column among the original columns (i.e. before the artificial variables)
+            int pivotCol = -1;
+            for (int j = 0; j < getArtificialVariableOffset(); j++) {
+                // Only consider columns not already marked to drop and with a nonzero coefficient.
+                if (!columnsToDrop.contains(j) &&
+                    Precision.compareTo(tableau.getEntry(basicRow, j), 0d, maxUlps) != 0) {
+                    pivotCol = j;
+                    break;
+                }
+            }
+            if (pivotCol != -1) {
+                // Perform a classical pivot on (basicRow, pivotCol).
+                double pivotVal = tableau.getEntry(basicRow, pivotCol);
+                // Normalize the pivot row.
+                for (int j = 0; j < getWidth(); j++) {
+                    tableau.setEntry(basicRow, j, tableau.getEntry(basicRow, j) / pivotVal);
+                }
+                // Eliminate the pivot column entries in every other row.
+                for (int r = 0; r < getHeight(); r++) {
+                    if (r != basicRow) {
+                        double factor = tableau.getEntry(r, pivotCol);
+                        for (int j = 0; j < getWidth(); j++) {
+                            double updated = tableau.getEntry(r, j) - factor * tableau.getEntry(basicRow, j);
+                            tableau.setEntry(r, j, updated);
+                        }
+                    }
+                }
+            }
+            // Whether or not a pivot was possible, drop the artificial variable.
+            columnsToDrop.add(artCol);
+        } else {
+            // Non-basic artificial variable: simply mark its column for deletion.
+            columnsToDrop.add(artCol);
         }
     }
 
-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
+    // Create a new matrix that omits the dropped columns.
+    int newWidth = getWidth() - columnsToDrop.size();
+    int newHeight = getHeight() - 1; // drop the phase 1 objective row (row 0)
+    double[][] matrix = new double[newHeight][newWidth];
     for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
+        int newCol = 0;
         for (int j = 0; j < getWidth(); j++) {
             if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+                matrix[i - 1][newCol++] = tableau.getEntry(i, j);
             }
         }
     }
 
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+    // Remove the dropped columns from the list of column labels.
+    // It is important to remove from highest index to lowest so that indices remain valid.
+    Collections.sort(columnsToDrop, Collections.reverseOrder());
+    for (int col : columnsToDrop) {
+        columnLabels.remove(col);
     }
 
+    // Replace the tableau with the new reduced matrix and reset the artificial variable count.
     this.tableau = new Array2DRowRealMatrix(matrix);
     this.numArtificialVariables = 0;
 }
\ No newline at end of file
