diff --git a/tmp/e5bf8f46-26d5-4c32-bc5b-d47433350214_buggy.java b/tmp/adda5104-dc59-4467-b92c-4c7f3c592eee_fixed.java
index 6e45f80..ba61b9e 100644
--- a/tmp/e5bf8f46-26d5-4c32-bc5b-d47433350214_buggy.java
+++ b/tmp/adda5104-dc59-4467-b92c-4c7f3c592eee_fixed.java
@@ -1,21 +1,35 @@
-  /**
-   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
-   * that the deserialized type matches the type requested.
-   */
 public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
     final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
   return new TypeAdapterFactory() {
     @SuppressWarnings("unchecked")
     public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
       final Class<? super T2> requestedType = typeToken.getRawType();
       if (!clazz.isAssignableFrom(requestedType)) {
         return null;
       }
-        return (TypeAdapter<T2>) typeAdapter;
+      // Wrap the given adapter so that the returned value is checked at runtime.
+      TypeAdapter<T1> wrapped = new TypeAdapter<T1>() {
+        @Override
+        public void write(JsonWriter out, T1 value) throws IOException {
+          typeAdapter.write(out, value);
+        }
 
+        @Override
+        public T1 read(JsonReader in) throws IOException {
+          T1 result = typeAdapter.read(in);
+          if (result != null && !clazz.isInstance(result)) {
+            throw new JsonSyntaxException("Expected a " + clazz.getName() 
+                + " but was " + result.getClass().getName());
+          }
+          return result;
         }
-      @Override public String toString() {
+      };
+      return (TypeAdapter<T2>) wrapped.nullSafe();
+    }
+
+    @Override
+    public String toString() {
       return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
     }
   };
 }
\ No newline at end of file
