diff --git a/tmp/b06825fd-2917-4ef0-a5d4-baf6bfb12692_buggy.java b/tmp/6fceb79e-efde-4fe8-a2cc-d6300833ed0d_fixed.java
index 4ebe4f9..8980610 100644
--- a/tmp/b06825fd-2917-4ef0-a5d4-baf6bfb12692_buggy.java
+++ b/tmp/6fceb79e-efde-4fe8-a2cc-d6300833ed0d_fixed.java
@@ -1,41 +1,31 @@
-    /*
-    /**********************************************************
-    /* Validation, post-processing
-    /**********************************************************
-     */
 @Override
-    public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
-            BeanProperty property) throws JsonMappingException
-    {
-        // May need to resolve types for delegate-based creators:
-        JsonDeserializer<Object> delegate = null;
-        if (_valueInstantiator != null) {
-            // [databind#2324]: check both array-delegating and delegating
-            AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();
-            if (delegateCreator != null) {
+public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)
+        throws JsonMappingException {
+    // If a delegate-creator is available, use it and skip resolving the content deserializer.
+    if (_valueInstantiator != null && _valueInstantiator.getDelegateCreator() != null) {
         JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
-                delegate = findDeserializer(ctxt, delegateType, property);
-            }
+        JsonDeserializer<Object> delegate = ctxt.findContextualValueDeserializer(delegateType, property);
+        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
+                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
+        return withResolved(delegate, _valueDeserializer,
+                findContentNullProvider(ctxt, property, _valueDeserializer), unwrapSingle);
     }
+    // Otherwise, resolve the deserializer used for the containerâ€™s element values.
     JsonDeserializer<?> valueDeser = _valueDeserializer;
     final JavaType valueType = _containerType.getContentType();
     if (valueDeser == null) {
-            // [databind#125]: May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         if (valueDeser == null) {
-            // And we may also need to get deserializer for String
             valueDeser = ctxt.findContextualValueDeserializer(valueType, property);
         }
-        } else { // if directly assigned, probably not yet contextual, so:
+    } else {
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);
     }
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
     NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);
     if (isDefaultDeserializer(valueDeser)) {
         valueDeser = null;
     }
-        return withResolved(delegate, valueDeser, nuller, unwrapSingle);
+    return withResolved(null, valueDeser, nuller, unwrapSingle);
 }
\ No newline at end of file
