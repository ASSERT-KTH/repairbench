diff --git a/tmp/87dbcd6f-1e87-4745-881e-ae3738dfd761_buggy.java b/tmp/308f1b2e-778d-44b0-84b3-ffaa95239018_fixed.java
index 4ebe4f9..94e41f3 100644
--- a/tmp/87dbcd6f-1e87-4745-881e-ae3738dfd761_buggy.java
+++ b/tmp/308f1b2e-778d-44b0-84b3-ffaa95239018_fixed.java
@@ -1,41 +1,36 @@
-    /*
-    /**********************************************************
-    /* Validation, post-processing
-    /**********************************************************
-     */
 @Override
-    public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
-            BeanProperty property) throws JsonMappingException
-    {
-        // May need to resolve types for delegate-based creators:
+public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)
+        throws JsonMappingException {
     JsonDeserializer<Object> delegate = null;
     if (_valueInstantiator != null) {
-            // [databind#2324]: check both array-delegating and delegating
+        // [databind#2324]: if a delegate creator exists, use it to find a deserializer for the delegate type
         AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();
         if (delegateCreator != null) {
             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
             delegate = findDeserializer(ctxt, delegateType, property);
         }
     }
     JsonDeserializer<?> valueDeser = _valueDeserializer;
+    if (delegate == null) {
+        // No delegate means using element-by-element deserialization for container contents.
         final JavaType valueType = _containerType.getContentType();
         if (valueDeser == null) {
-            // [databind#125]: May have a content converter
             valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
             if (valueDeser == null) {
-            // And we may also need to get deserializer for String
                 valueDeser = ctxt.findContextualValueDeserializer(valueType, property);
             }
-        } else { // if directly assigned, probably not yet contextual, so:
+        } else {
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);
         }
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
+        if (isDefaultDeserializer(valueDeser)) {
+            valueDeser = null;
+        }
+    } else {
+        // When delegate-based instantiation is in use, we ignore element deserialization.
+        valueDeser = null;
+    }
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
     NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);
-        if (isDefaultDeserializer(valueDeser)) {
-            valueDeser = null;
-        }
     return withResolved(delegate, valueDeser, nuller, unwrapSingle);
 }
\ No newline at end of file
