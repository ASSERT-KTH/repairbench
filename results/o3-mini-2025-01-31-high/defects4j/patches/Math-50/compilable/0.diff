diff --git a/tmp/741c61cd-ab56-4430-9b80-20ab67375aa3_buggy.java b/tmp/29ce5268-bb37-4200-b9d5-c33296cf06b1_fixed.java
index 65c0e7b..7f7c0ae 100644
--- a/tmp/741c61cd-ab56-4430-9b80-20ab67375aa3_buggy.java
+++ b/tmp/29ce5268-bb37-4200-b9d5-c33296cf06b1_fixed.java
@@ -1,127 +1,133 @@
 /** {@inheritDoc} */
 protected final double doSolve() {
     // Get initial solution
     double x0 = getMin();
     double x1 = getMax();
     double f0 = computeObjectiveValue(x0);
     double f1 = computeObjectiveValue(x1);
 
-        // If one of the bounds is the exact root, return it. Since these are
-        // not under-approximations or over-approximations, we can return them
-        // regardless of the allowed solutions.
+    // If one of the bounds is the exact root, return it.
     if (f0 == 0.0) {
         return x0;
     }
     if (f1 == 0.0) {
         return x1;
     }
 
-        // Verify bracketing of initial solution.
+    // Verify that the provided interval brackets a root.
     verifyBracketing(x0, x1);
 
     // Get accuracies.
     final double ftol = getFunctionValueAccuracy();
     final double atol = getAbsoluteAccuracy();
     final double rtol = getRelativeAccuracy();
 
-        // Keep track of inverted intervals, meaning that the left bound is
-        // larger than the right bound.
+    // Flag to keep track if the roles of the bounds have been swapped.
     boolean inverted = false;
     
-        // Keep finding better approximations.
     while (true) {
-            // Calculate the next approximation.
+        // Compute the next approximation using the false position formula.
         final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
         final double fx = computeObjectiveValue(x);
         
-            // If the new approximation is the exact root, return it. Since
-            // this is not an under-approximation or an over-approximation,
-            // we can return it regardless of the allowed solutions.
+        // If we hit the exact root, return it.
         if (fx == 0.0) {
             return x;
         }
         
-            // Update the bounds with the new approximation.
-            if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
-                x0 = x1;
-                f0 = f1;
-                inverted = !inverted;
+        // Standard regula falsi update:
+        // Given an interval [x0,x1] that brackets the root and assuming f(x0) < 0 and f(x1) > 0,
+        // the linear interpolation (secant) gives an approximation x. Then:
+        //   - If f(x0) and f(x) have opposite signs, the new interval is [x0, x].
+        //   - Otherwise, the new interval is [x, x1].
+        if (f0 * fx < 0) {
+            // The sign change is between x0 and x so the upper bound gets replaced.
+            x1 = x;
+            f1 = fx;
         } else {
+            // f(x0) and f(x) have the same sign => the root lies in [x, x1].
+            // For methods that accelerate convergence, adjust the function value at the endpoint
+            // that remains fixed.
             switch (method) {
                 case ILLINOIS:
                     f0 *= 0.5;
                     break;
                 case PEGASUS:
+                    // Scale f0 to force progress.
                     f0 *= f1 / (f1 + fx);
                     break;
                 case REGULA_FALSI:
-                    // Nothing.
-                    if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
-                        f0 = computeObjectiveValue(x0);
+                    // If no progress is made, try a bisection‐like step.
+                    if (x == x0) {
+                        // Note: we use + rather than “–” so that the new x1 lies inside [x0, x1].
+                        x1 = 0.5 * (x0 + x1 + FastMath.max(rtol * FastMath.abs(x0), atol));
+                        f1 = computeObjectiveValue(x1);
                     }
                     break;
                 default:
-                    // Should never happen.
                     throw new MathInternalError();
             }
+            x0 = x;
+            f0 = fx;
         }
-            // Update from [x0, x1] to [x0, x].
-            x1 = x;
-            f1 = fx;
         
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
+        // Maintain the invariant that x0 < x1.
+        if (x0 > x1) {
+            final double tmpX = x0;
+            x0 = x1;
+            x1 = tmpX;
+            final double tmpF = f0;
+            f0 = f1;
+            f1 = tmpF;
+            inverted = !inverted;
+        }
+
+        // Termination criteria based on function value.
         if (FastMath.abs(f1) <= ftol) {
             switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     if (inverted) {
                         return x1;
                     }
                     break;
                 case RIGHT_SIDE:
                     if (!inverted) {
                         return x1;
                     }
                     break;
                 case BELOW_SIDE:
                     if (f1 <= 0) {
                         return x1;
                     }
                     break;
                 case ABOVE_SIDE:
                     if (f1 >= 0) {
                         return x1;
                     }
                     break;
                 default:
                     throw new MathInternalError();
             }
         }
 
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                     atol)) {
+        // Termination criteria based on the interval.
+        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
             switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
                     return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
                     return (f1 >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
             }
         }
     }
 }
\ No newline at end of file
