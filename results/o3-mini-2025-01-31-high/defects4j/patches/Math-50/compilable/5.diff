diff --git a/tmp/3f8a6f20-a40b-4595-b300-957da0c51d40_buggy.java b/tmp/dab2c326-10f9-49c6-8e6e-afa92d63fcf3_fixed.java
index 65c0e7b..5a6871f 100644
--- a/tmp/3f8a6f20-a40b-4595-b300-957da0c51d40_buggy.java
+++ b/tmp/dab2c326-10f9-49c6-8e6e-afa92d63fcf3_fixed.java
@@ -1,127 +1,126 @@
 /** {@inheritDoc} */
 protected final double doSolve() {
     // Get initial solution
     double x0 = getMin();
     double x1 = getMax();
     double f0 = computeObjectiveValue(x0);
     double f1 = computeObjectiveValue(x1);
 
-        // If one of the bounds is the exact root, return it. Since these are
-        // not under-approximations or over-approximations, we can return them
-        // regardless of the allowed solutions.
+    // If one of the bounds is the exact root, return it.
     if (f0 == 0.0) {
         return x0;
     }
     if (f1 == 0.0) {
         return x1;
     }
 
     // Verify bracketing of initial solution.
     verifyBracketing(x0, x1);
 
     // Get accuracies.
     final double ftol = getFunctionValueAccuracy();
     final double atol = getAbsoluteAccuracy();
     final double rtol = getRelativeAccuracy();
 
-        // Keep track of inverted intervals, meaning that the left bound is
-        // larger than the right bound.
+    // The “inverted” flag is used for allowed-solution selection;
+    // with proper updates the interval will remain ordered.
     boolean inverted = false;
 
     // Keep finding better approximations.
     while (true) {
-            // Calculate the next approximation.
+        // Compute the next approximation using the false position formula.
         final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
         final double fx = computeObjectiveValue(x);
 
-            // If the new approximation is the exact root, return it. Since
-            // this is not an under-approximation or an over-approximation,
-            // we can return it regardless of the allowed solutions.
+        // If an exact root is found, return immediately.
         if (fx == 0.0) {
             return x;
         }
 
-            // Update the bounds with the new approximation.
-            if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
-                x0 = x1;
-                f0 = f1;
-                inverted = !inverted;
+        // --- Correct bracket update ---
+        // In a proper false position update the new point “x” should replace
+        // the endpoint whose function value has the same sign as fx.
+        // With a = x0 and b = x1 (where f(a) and f(b) have opposite signs),
+        // the standard update is:
+        //   if f(a)*f(x) < 0 then the root lies in [a,x] so set b = x,
+        //   else the root lies in [x,b] so set a = x.
+        if (f0 * fx < 0) {
+            // Sign change between x0 and x: new interval is [x0, x].
+            x1 = x;
+            f1 = fx;
         } else {
+            // f0 and fx have the same sign so the change is in [x, x1].
+            // For Illinois and Pegasus modifications (and for plain Regula Falsi)
+            // we adjust the function value at the fixed endpoint to force progress.
             switch (method) {
                 case ILLINOIS:
-                    f0 *= 0.5;
+                    f1 *= 0.5;
                     break;
                 case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
+                    f1 *= f0 / (f0 + fx);
                     break;
                 case REGULA_FALSI:
-                    // Nothing.
-                    if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
-                        f0 = computeObjectiveValue(x0);
+                    // In plain false position stagnation is possible.
+                    // Compare with atol rather than exact equality.
+                    if (FastMath.abs(x - x0) <= atol) {
+                        x1 = 0.5 * (x0 + x1 + FastMath.max(rtol * FastMath.abs(x0), atol));
+                        f1 = computeObjectiveValue(x1);
                     }
                     break;
                 default:
-                    // Should never happen.
                     throw new MathInternalError();
             }
+            x0 = x;
+            f0 = fx;
         }
-            // Update from [x0, x1] to [x0, x].
-            x1 = x;
-            f1 = fx;
+        // --- End correct bracket update ---
 
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
+        // Check if the function value at the newest point is within tolerance.
         if (FastMath.abs(f1) <= ftol) {
             switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     if (inverted) {
                         return x1;
                     }
                     break;
                 case RIGHT_SIDE:
                     if (!inverted) {
                         return x1;
                     }
                     break;
                 case BELOW_SIDE:
                     if (f1 <= 0) {
                         return x1;
                     }
                     break;
                 case ABOVE_SIDE:
                     if (f1 >= 0) {
                         return x1;
                     }
                     break;
                 default:
                     throw new MathInternalError();
             }
         }
 
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                     atol)) {
+        // Check if the interval is sufficiently small.
+        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
             switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
                     return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
                     return (f1 >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
             }
         }
     }
 }
\ No newline at end of file
