diff --git a/tmp/15bd8fd9-4374-4ed7-9174-7075c856145e_buggy.java b/tmp/9a2265a4-d91a-4090-91f4-564ed69b8393_fixed.java
index ce55b5f..5e47ebd1 100644
--- a/tmp/15bd8fd9-4374-4ed7-9174-7075c856145e_buggy.java
+++ b/tmp/9a2265a4-d91a-4090-91f4-564ed69b8393_fixed.java
@@ -1,63 +1,47 @@
-    /**
-     * <p>
-     * Gets the greatest common divisor of the absolute value of two numbers,
-     * using the "binary gcd" method which avoids division and modulo
-     * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
-     * Stein (1961).
-     * </p>
-     * 
-     * @param u a non-zero number
-     * @param v a non-zero number
-     * @return the greatest common divisor, never zero
-     * @since 1.1
-     */
 public static int gcd(int u, int v) {
     if (u * v == 0) {
         return (Math.abs(u) + Math.abs(v));
     }
-        // keep u and v negative, as negative integers range down to
-        // -2^31, while positive numbers can only be as large as 2^31-1
-        // (i.e. we can't necessarily negate a negative number without
-        // overflow)
-        /* assert u!=0 && v!=0; */
+    // Keep u and v negative to avoid overflow (since Integer.MIN_VALUE cannot be negated)
     if (u > 0) {
         u = -u;
-        } // make u negative
+    }
     if (v > 0) {
         v = -v;
-        } // make v negative
-        // B1. [Find power of 2]
+    }
+    // B1. Find the greatest common power of 2 dividing both u and v.
     int k = 0;
-        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
-                                                            // both even...
+    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {
         u /= 2;
         v /= 2;
-            k++; // cast out twos.
+        k++;
     }
-        if (k == 31) {
-            throw new ArithmeticException("overflow: gcd is 2^31");
+    // After the above loop at least one of u or v is odd.
+    // Ensure that u is odd by dividing by 2 as needed.
+    while ((u & 1) == 0) {
+        u /= 2;
     }
-        // B2. Initialize: u and v have been divided by 2^k and at least
-        // one is odd.
-        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
-        // t negative: u was odd, v may be even (t replaces v)
-        // t positive: u was even, v is odd (t replaces u)
+    // B2. Initialize: u and v have been divided by 2^k and now u is odd.
+    // The original algorithm uses a clever trick: if u is odd then t is set to v,
+    // otherwise (if u were even) t would be set to â€“(u/2). Now u is odd so:
+    int t = v;  // (equivalent to: ((u & 1) == 1) ? v : -(u / 2))
+    
+    // B3. Main loop: repeatedly cast out factors of 2 from t and adjust u and v.
     do {
-            /* assert u<0 && v<0; */
-            // B4/B3: cast out twos from t.
-            while ((t & 1) == 0) { // while t is even..
-                t /= 2; // cast out twos
+        // Remove any factors of 2 from t.
+        while ((t & 1) == 0) {
+            t /= 2;
         }
-            // B5 [reset max(u,v)]
+        // Depending on the sign of t, update one of the two numbers.
         if (t > 0) {
-                u = -t;
+            u = -t;  // u remains negative, and |u| = t
         } else {
             v = t;
         }
-            // B6/B3. at this point both u and v should be odd.
+        // At this point both u and v are odd.
         t = (v - u) / 2;
-            // |u| larger: t positive (replace u)
-            // |v| larger: t negative (replace v)
     } while (t != 0);
-        return -u * (1 << k); // gcd is u*2^k
+    
+    // The GCD is -u (which is positive) times the common power of 2 we factored out.
+    return -u * (1 << k);
 }
\ No newline at end of file
