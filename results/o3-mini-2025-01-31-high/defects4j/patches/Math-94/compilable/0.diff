diff --git a/tmp/5bae2d3a-a272-4dc8-bbd3-17ec40838afe_buggy.java b/tmp/eaafe9bc-89e6-413b-8299-b333de6901d2_fixed.java
index ce55b5f..d41c5e2 100644
--- a/tmp/5bae2d3a-a272-4dc8-bbd3-17ec40838afe_buggy.java
+++ b/tmp/eaafe9bc-89e6-413b-8299-b333de6901d2_fixed.java
@@ -1,63 +1,40 @@
-    /**
-     * <p>
-     * Gets the greatest common divisor of the absolute value of two numbers,
-     * using the "binary gcd" method which avoids division and modulo
-     * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
-     * Stein (1961).
-     * </p>
-     * 
-     * @param u a non-zero number
-     * @param v a non-zero number
-     * @return the greatest common divisor, never zero
-     * @since 1.1
-     */
 public static int gcd(int u, int v) {
-        if (u * v == 0) {
-            return (Math.abs(u) + Math.abs(v));
+    if (u == 0 || v == 0) {
+        return Math.abs(u) + Math.abs(v);
     }
-        // keep u and v negative, as negative integers range down to
-        // -2^31, while positive numbers can only be as large as 2^31-1
-        // (i.e. we can't necessarily negate a negative number without
-        // overflow)
-        /* assert u!=0 && v!=0; */
+    // Convert to negatives so that MIN_VALUE can be handled.
     if (u > 0) {
         u = -u;
-        } // make u negative
+    }
     if (v > 0) {
         v = -v;
-        } // make v negative
-        // B1. [Find power of 2]
-        int k = 0;
-        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
-                                                            // both even...
+    }
+    // B1. Remove common factors of 2; note that (u|v) is even only if both are.
+    int shift = 0;
+    while (((u | v) & 1) == 0 && shift < 31) {
         u /= 2;
         v /= 2;
-            k++; // cast out twos.
+        shift++;
     }
-        if (k == 31) {
-            throw new ArithmeticException("overflow: gcd is 2^31");
+    // Make u odd.
+    while ((u & 1) == 0) {
+        u /= 2;
     }
-        // B2. Initialize: u and v have been divided by 2^k and at least
-        // one is odd.
-        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
-        // t negative: u was odd, v may be even (t replaces v)
-        // t positive: u was even, v is odd (t replaces u)
+    // From here on u is always odd.
     do {
-            /* assert u<0 && v<0; */
-            // B4/B3: cast out twos from t.
-            while ((t & 1) == 0) { // while t is even..
-                t /= 2; // cast out twos
+        // Remove all factors of 2 in v â€“ they are not common.
+        while ((v & 1) == 0) {
+            v /= 2;
         }
-            // B5 [reset max(u,v)]
-            if (t > 0) {
-                u = -t;
-            } else {
-                v = t;
+        // Now both u and v are odd. Swap if necessary so that u <= v,
+        // then set v = v - u (which is even).
+        if (u > v) {
+            int temp = u;
+            u = v;
+            v = temp;
         }
-            // B6/B3. at this point both u and v should be odd.
-            t = (v - u) / 2;
-            // |u| larger: t positive (replace u)
-            // |v| larger: t negative (replace v)
-        } while (t != 0);
-        return -u * (1 << k); // gcd is u*2^k
+        v = v - u;
+    } while (v != 0);
+    // Restore common factors of 2.
+    return -u * (1 << shift);
 }
\ No newline at end of file
