diff --git a/tmp/1b9a7772-0e0c-4c92-badd-8b0e8f1c3a81_buggy.java b/tmp/851c269c-ce32-4926-8e2d-eed7bfe3c7cd_fixed.java
index c9c2b44..27c9827 100644
--- a/tmp/1b9a7772-0e0c-4c92-badd-8b0e8f1c3a81_buggy.java
+++ b/tmp/851c269c-ce32-4926-8e2d-eed7bfe3c7cd_fixed.java
@@ -1,13 +1,23 @@
 @Override
 public boolean matches(Element root, Element element) {
-            // evaluate from last to first
-            for (int i = evaluators.size() -1; i >= 0; --i) {
-                if (element == null)
+    // For a compound selector (more than one evaluator), the element’s
+    // ancestry must “anchor” in the root. For a single evaluator, we simply
+    // test the candidate.
+    if (evaluators.size() == 1)
+        return evaluators.get(0).matches(root, element);
+
+    // For compound selectors, work “backwards” (right-to–left):
+    // each evaluator must match an element in the candidate’s ancestry,
+    // and after processing all parts the next parent must be the context.
+    Element candidate = element;
+    for (int i = evaluators.size() - 1; i >= 0; i--) {
+        if (candidate == null)
             return false;
         Evaluator eval = evaluators.get(i);
-                if (!eval.matches(root, element))
+        if (!eval.matches(root, candidate))
             return false;
-                element = element.parent();
+        candidate = candidate.parent();
     }
-            return true;
+    // Only accept if the chain “anchors” in the context root.
+    return candidate == root;
 }
\ No newline at end of file
