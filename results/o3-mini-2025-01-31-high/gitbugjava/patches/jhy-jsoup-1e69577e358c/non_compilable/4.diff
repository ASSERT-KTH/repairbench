diff --git a/tmp/2e5c9052-8703-4a6c-bf38-5d72fe165251_buggy.java b/tmp/8ee60924-6c6f-4aaf-a39d-94e91550014a_fixed.java
index c9c77a4..3a6b990 100644
--- a/tmp/2e5c9052-8703-4a6c-bf38-5d72fe165251_buggy.java
+++ b/tmp/8ee60924-6c6f-4aaf-a39d-94e91550014a_fixed.java
@@ -1,35 +1,43 @@
 URL build() {
     try {
-            // use the URI class to encode non-ascii in path
+        // Convert the host to punycode as before.
+        String host = IDN.toASCII(decodePart(u.getHost()));
+        // For the path, if it already contains percent escapes (e.g. "%2B"), leave it alone.
+        // Otherwise, decode it so that non-ascii characters can be re-encoded.
+        String rawPath = u.getPath();
+        String path = rawPath;
+        if (rawPath != null && rawPath.indexOf('%') == -1) {
+            path = decodePart(rawPath);
+        }
+
         URI uri = new URI(
             u.getProtocol(),
             u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
+            host,
             u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
+            path,
+            null, // query
+            null  // fragment
         );
 
         String normUrl = uri.toASCIIString();
         if (q != null || u.getRef() != null) {
             StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
             if (q != null) {
                 sb.append('?');
                 appendToAscii(StringUtil.releaseBuilder(q), true, sb);
             }
             if (u.getRef() != null) {
                 sb.append('#');
                 appendToAscii(u.getRef(), false, sb);
             }
             normUrl = StringUtil.releaseBuilder(sb);
         }
         u = new URL(normUrl);
         return u;
     } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
-            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
-            // the remote end will be able to handle it, so in prod we just pass the original URL.
-            // The UnsupportedEncodingException would never happen as always UTF8
+        // In development, assert so that normalization problems are caught; in production, return the original URL.
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
\ No newline at end of file
