diff --git a/tmp/64d161a6-b200-481b-b7d2-5aced4385440_buggy.java b/tmp/3f8f6d1a-4074-4c22-8378-fd16bfd981ec_fixed.java
index c9c77a4..f578588 100644
--- a/tmp/64d161a6-b200-481b-b7d2-5aced4385440_buggy.java
+++ b/tmp/3f8f6d1a-4074-4c22-8378-fd16bfd981ec_fixed.java
@@ -1,35 +1,51 @@
 URL build() {
     try {
+        // Save the original URL string so we can tell if a “+” was originally percent‐encoded.
+        String original = u.toExternalForm();
         // use the URI class to encode non-ascii in path
         URI uri = new URI(
             u.getProtocol(),
             u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
+            IDN.toASCII(decodePart(u.getHost())), // puny‐code
             u.getPort(),
             decodePart(u.getPath()),
             null, null // query and fragment appended later so as not to encode
         );
 
         String normUrl = uri.toASCIIString();
         if (q != null || u.getRef() != null) {
             StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
             if (q != null) {
                 sb.append('?');
                 appendToAscii(StringUtil.releaseBuilder(q), true, sb);
             }
             if (u.getRef() != null) {
                 sb.append('#');
                 appendToAscii(u.getRef(), false, sb);
             }
             normUrl = StringUtil.releaseBuilder(sb);
         }
+
+        // Workaround: if the original URL contained a percent-encoded plus ("%2B"),
+        // then the URI constructor loses that encoding (producing a plain "+").
+        // To preserve the original encoding in the path we replace plus signs with "%2B"
+        // but only in the path portion (and only if the original string contained "%2B").
+        if (original.contains("%2B") || original.contains("%2b")) {
+            int queryOrRef = normUrl.length();
+            int qi = normUrl.indexOf('?');
+            int hi = normUrl.indexOf('#');
+            if (qi != -1) queryOrRef = qi;
+            if (hi != -1) queryOrRef = Math.min(queryOrRef, hi);
+            String pathPart = normUrl.substring(0, queryOrRef).replace("+", "%2B");
+            normUrl = pathPart + normUrl.substring(queryOrRef);
+        }
+
         u = new URL(normUrl);
         return u;
     } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
-            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
-            // the remote end will be able to handle it, so in prod we just pass the original URL.
-            // The UnsupportedEncodingException would never happen as always UTF8
+        // ‘assert’ so any unexpected malformed URL / encoding issue is caught in development.
+        // In production we simply hand back the original URL.
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
\ No newline at end of file
