diff --git a/tmp/aff8699b-85f8-4f4f-8322-1288b5c3908c_buggy.java b/tmp/c5573a2f-44b9-4064-bfa9-12caea009943_fixed.java
index c9c77a4..328b19d 100644
--- a/tmp/aff8699b-85f8-4f4f-8322-1288b5c3908c_buggy.java
+++ b/tmp/c5573a2f-44b9-4064-bfa9-12caea009943_fixed.java
@@ -1,35 +1,56 @@
 URL build() {
     try {
-            // use the URI class to encode non-ascii in path
+        // Re-encode the path so that any character that was percent‐encoded (like “%2B”) is preserved.
+        // (The URL’s getPath() has already decoded escapes – so we must re‑encode characters like ‘+’)
+        String path = u.getPath();
+        StringBuilder pathEncoded = new StringBuilder();
+        for (int i = 0; i < path.length(); i++) {
+            char c = path.charAt(i);
+            // Allow letters, digits, and most punctuation – note that we *exclude* '+' so that a decoded plus becomes %2B.
+            if ((c >= 'A' && c <= 'Z') ||
+                (c >= 'a' && c <= 'z') ||
+                (c >= '0' && c <= '9') ||
+                "-._~!$&'()*,;=:@/".indexOf(c) != -1) {
+                pathEncoded.append(c);
+            } else {
+                // percent-encode the character (UTF-8 encoding)
+                byte[] bytes = String.valueOf(c).getBytes("UTF-8");
+                for (byte b : bytes) {
+                    pathEncoded.append(String.format("%%%02X", b));
+                }
+            }
+        }
+        String encodedPath = pathEncoded.toString();
+
         URI uri = new URI(
             u.getProtocol(),
             u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
+            IDN.toASCII(decodePart(u.getHost())), // puny-code, host decoding remains as before
             u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
+            encodedPath, // use our re-encoded path rather than decodePart(u.getPath())
+            null,
+            null // query and fragment appended later so as not to encode
         );
 
         String normUrl = uri.toASCIIString();
         if (q != null || u.getRef() != null) {
             StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
             if (q != null) {
                 sb.append('?');
                 appendToAscii(StringUtil.releaseBuilder(q), true, sb);
             }
             if (u.getRef() != null) {
                 sb.append('#');
                 appendToAscii(u.getRef(), false, sb);
             }
             normUrl = StringUtil.releaseBuilder(sb);
         }
         u = new URL(normUrl);
         return u;
     } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
-            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
-            // the remote end will be able to handle it, so in prod we just pass the original URL.
-            // The UnsupportedEncodingException would never happen as always UTF8
+        // For devel, we assert so that any incomplete normalization issues are caught;
+        // in prod we simply pass the original URL.
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
\ No newline at end of file
