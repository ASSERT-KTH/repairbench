diff --git a/tmp/f55a8f76-15cd-41cf-9cca-3f0bdf388498_buggy.java b/tmp/acb252cc-0324-4548-8a6b-950ad729ed88_fixed.java
index c9c77a4..6e556b2 100644
--- a/tmp/f55a8f76-15cd-41cf-9cca-3f0bdf388498_buggy.java
+++ b/tmp/acb252cc-0324-4548-8a6b-950ad729ed88_fixed.java
@@ -1,35 +1,70 @@
 URL build() {
     try {
-            // use the URI class to encode non-ascii in path
+        // Construct a URI using the raw host but for the path, use u.getPath()
+        // (i.e. do not decode it) so that any percent-encoded characters are not lost.
         URI uri = new URI(
             u.getProtocol(),
             u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
+            IDN.toASCII(decodePart(u.getHost())), // puny-code conversion on host remains
             u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
+            u.getPath(), // do not decode the path – let non-ascii get encoded but preserve any % escapes
+            null, 
+            null  // query and fragment will be appended later without further encoding
         );
-
         String normUrl = uri.toASCIIString();
+
+        // Because u.getPath() gives the decoded path (so that "%2B" becomes "+")
+        // we use the original URL’s text (u.toExternalForm()) to extract the raw path.
+        // If the original raw path contains a '%' then we want to replace the path in normUrl
+        // with that original raw path so that encoded parts (like %2B) are preserved.
+        String original = u.toExternalForm();
+        int protoSep = original.indexOf("://");
+        if (protoSep != -1) {
+            int origPathStart = original.indexOf("/", protoSep + 3);
+            if (origPathStart != -1) {
+                int origPathEnd = original.length();
+                int qIdx = original.indexOf("?", origPathStart);
+                if (qIdx != -1) origPathEnd = qIdx;
+                int fIdx = original.indexOf("#", origPathStart);
+                if (fIdx != -1 && fIdx < origPathEnd) origPathEnd = fIdx;
+                String originalPath = original.substring(origPathStart, origPathEnd);
+                if (originalPath.contains("%")) { // Only swap in if there was explicit encoding
+                    int normProtoSep = normUrl.indexOf("://");
+                    if (normProtoSep != -1) {
+                        int normPathStart = normUrl.indexOf("/", normProtoSep + 3);
+                        if (normPathStart != -1) {
+                            int normPathEnd = normUrl.length();
+                            int normQIdx = normUrl.indexOf("?", normPathStart);
+                            if (normQIdx != -1) normPathEnd = normQIdx;
+                            int normFIdx = normUrl.indexOf("#", normPathStart);
+                            if (normFIdx != -1 && normFIdx < normPathEnd) normPathEnd = normFIdx;
+                            normUrl = normUrl.substring(0, normPathStart)
+                                + originalPath
+                                + normUrl.substring(normPathEnd);
+                        }
+                    }
+                }
+            }
+        }
+
+        // Append query and fragment if available (unchanged to avoid extra encoding)
         if (q != null || u.getRef() != null) {
             StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
             if (q != null) {
                 sb.append('?');
                 appendToAscii(StringUtil.releaseBuilder(q), true, sb);
             }
             if (u.getRef() != null) {
                 sb.append('#');
                 appendToAscii(u.getRef(), false, sb);
             }
             normUrl = StringUtil.releaseBuilder(sb);
         }
         u = new URL(normUrl);
         return u;
     } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
-            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
-            // the remote end will be able to handle it, so in prod we just pass the original URL.
-            // The UnsupportedEncodingException would never happen as always UTF8
+        // Development assert – in production we simply return the original URL.
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
\ No newline at end of file
