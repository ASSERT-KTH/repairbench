diff --git a/tmp/2ef53ac1-a3bb-4f76-bf03-a507cca536a5_buggy.java b/tmp/8822bd16-eb91-4eb9-8402-fc4d17b28a6e_fixed.java
index ad77f15..c5941dc 100644
--- a/tmp/2ef53ac1-a3bb-4f76-bf03-a507cca536a5_buggy.java
+++ b/tmp/8822bd16-eb91-4eb9-8402-fc4d17b28a6e_fixed.java
@@ -1,112 +1,242 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
-        switch (fragment.substring(0, dataIndex)) {
+    String type = fragment.substring(0, dataIndex);
+    switch (type) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
-                    position.setLatitude(-position.getLatitude());
+            // Validity
+            String valid = (index < values.length ? values[index++] : "");
+            position.setValid("A".equals(valid));
+
+            // Satellites
+            String satellites = (index < values.length ? values[index++] : "");
+            if (!satellites.isEmpty()) {
+                position.set(Position.KEY_SATELLITES, Integer.parseInt(satellites));
             }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
-                    position.setLongitude(-position.getLongitude());
+
+            // Latitude: expected format "N31.551856" or "S31.551856"
+            if (index < values.length) {
+                String latField = values[index++];
+                if (latField.length() > 1) {
+                    double latitude = Double.parseDouble(latField.substring(1));
+                    if (latField.charAt(0) == 'S') {
+                        latitude = -latitude;
+                    }
+                    position.setLatitude(latitude);
                 }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
             }
-                position.setCourse(Integer.parseInt(values[index++]));
+
+            // Longitude: expected format "E74.366920" or "W74.366920"
             if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                String lonField = values[index++];
+                if (lonField.length() > 1) {
+                    double longitude = Double.parseDouble(lonField.substring(1));
+                    if (lonField.charAt(0) == 'W') {
+                        longitude = -longitude;
+                    }
+                    position.setLongitude(longitude);
+                }
+            }
+
+            // Speed (in kph, converted to knots)
+            String speedStr = (index < values.length ? values[index++] : "");
+            if (!speedStr.isEmpty()) {
+                position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedStr)));
+            }
+
+            // Course
+            String courseStr = (index < values.length ? values[index++] : "");
+            if (!courseStr.isEmpty()) {
+                position.setCourse(Integer.parseInt(courseStr));
             }
+
+            // Altitude (optional)
             if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                String altStr = values[index++];
+                if (!altStr.isEmpty()) {
+                    position.setAltitude(Integer.parseInt(altStr));
                 }
+            }
+
+            // HDOP (optional)
             if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                String hdopStr = values[index++];
+                if (!hdopStr.isEmpty()) {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(hdopStr));
+                }
+            }
+
+            // VDOP (optional)
+            if (index < values.length) {
+                String vdopStr = values[index++];
+                if (!vdopStr.isEmpty()) {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(vdopStr));
+                }
             }
             break;
+
         case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
+            // Skip registration status and signal strength
+            index++;
+            index++;
+            String mccStr = (index < values.length ? values[index++] : "");
+            String mncStr = (index < values.length ? values[index++] : "");
+            String lacStr = (index < values.length ? values[index++] : "");
+            String cidStr = (index < values.length ? values[index++] : "");
+            String signalStr = (index < values.length ? values[index++] : "");
+            if (!mccStr.isEmpty() && !mncStr.isEmpty() && !lacStr.isEmpty()
+                    && !cidStr.isEmpty() && !signalStr.isEmpty()) {
                 position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                        Integer.parseInt(mccStr),
+                        Integer.parseInt(mncStr),
+                        Integer.parseInt(lacStr, 16),
+                        Integer.parseInt(cidStr, 16),
+                        Integer.parseInt(signalStr))));
+            }
             break;
+
         case "COT":
+            // Odometer
             if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                String odometerStr = values[index++];
+                if (!odometerStr.isEmpty()) {
+                    position.set(Position.KEY_ODOMETER, Long.parseLong(odometerStr));
                 }
+            }
+            // Hours (optional)
             if (index < values.length) {
-                    String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                String hoursStr = values[index++];
+                if (!hoursStr.isEmpty()) {
+                    String[] parts = hoursStr.split("-");
+                    int totalSeconds = 0;
+                    if (parts.length > 0 && !parts[0].isEmpty()) {
+                        totalSeconds += Integer.parseInt(parts[0]) * 3600;
+                    }
+                    if (parts.length > 1 && !parts[1].isEmpty()) {
+                        totalSeconds += Integer.parseInt(parts[1]) * 60;
+                    }
+                    if (parts.length > 2 && !parts[2].isEmpty()) {
+                        totalSeconds += Integer.parseInt(parts[2]);
+                    }
+                    position.set(Position.KEY_HOURS, totalSeconds * 1000);
+                }
             }
             break;
+
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
+            String powerStr = (index < values.length ? values[index++] : "");
+            if (!powerStr.isEmpty()) {
+                position.set(Position.KEY_POWER, Double.parseDouble(powerStr));
+            }
             if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                String batteryStr = values[index++];
+                if (!batteryStr.isEmpty()) {
+                    position.set(Position.KEY_BATTERY, Double.parseDouble(batteryStr));
+                }
             }
             if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                String adc1Str = values[index++];
+                if (!adc1Str.isEmpty()) {
+                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1Str));
+                }
             }
             if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                String adc2Str = values[index++];
+                if (!adc2Str.isEmpty()) {
+                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2Str));
+                }
             }
             break;
+
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            if (index < values.length) {
+                String statusStr = values[index++];
+                if (!statusStr.isEmpty()) {
+                    position.set(Position.KEY_STATUS, Integer.parseInt(statusStr, 16));
+                }
+            }
+            if (index < values.length) {
+                String ioStr = values[index++];
+                if (!ioStr.isEmpty()) {
+                    int io = Integer.parseInt(ioStr, 16);
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                 }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+            }
+            // Geofence expected parts
+            String geoPart1 = (index < values.length ? values[index++] : "");
+            String geoPart2 = (index < values.length ? values[index++] : "");
+            position.set(Position.KEY_GEOFENCE, geoPart1 + geoPart2);
+            if (index < values.length) {
                 position.set("eventStatus", values[index++]);
+            }
             if (index < values.length) {
                 position.set("packetType", values[index++]);
             }
             break;
+
         case "ETD":
+            if (index < values.length) {
                 position.set("eventData", values[index++]);
+            }
             break;
+
         case "OBD":
+            if (index < values.length) {
                 position.set("obd", values[index++]);
+            }
             break;
+
         case "TAG":
+            if (index < values.length) {
                 position.set("tagData", values[index++]);
+            }
             break;
+
         case "IWD":
             while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+                String sensorIndexStr = (index < values.length ? values[index++] : "");
+                if (sensorIndexStr.isEmpty()) {
+                    break;
+                }
+                int sensorIndex = Integer.parseInt(sensorIndexStr);
+                String dataTypeStr = (index < values.length ? values[index++] : "");
+                if (dataTypeStr.isEmpty()) {
+                    break;
+                }
+                int dataType = Integer.parseInt(dataTypeStr);
                 if (dataType == 0) {
+                    if (index < values.length) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    }
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    // Skip temperature sensor serial number
+                    index++;
+                    if (index < values.length) {
+                        String tempStr = values[index++];
+                        if (!tempStr.isEmpty()) {
+                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(tempStr));
+                        }
+                    }
                 }
             }
             break;
+
         default:
             break;
     }
 }
\ No newline at end of file
