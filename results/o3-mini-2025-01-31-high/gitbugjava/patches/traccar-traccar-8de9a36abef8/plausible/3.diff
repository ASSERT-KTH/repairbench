diff --git a/tmp/4f24d355-c7d3-417f-b782-4778b04d24b2_buggy.java b/tmp/2b9ba78d-f665-405f-8f32-9275b2ad2dea_fixed.java
index ad77f15..1f4d1f7 100644
--- a/tmp/4f24d355-c7d3-417f-b782-4778b04d24b2_buggy.java
+++ b/tmp/2b9ba78d-f665-405f-8f32-9275b2ad2dea_fixed.java
@@ -1,112 +1,238 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
-                    position.setLatitude(-position.getLatitude());
+            // Some devices (like GS02) send GPS fragments in a different format:
+            // For GS02 the tokens are: [time, valid, latitude, longitude, speed, course, odometer]
+            // Whereas in other cases the tokens are: [valid, satellites, latitude, longitude, speed, course, altitude (opt), hdop (opt), vdop (opt)]
+            if (values.length == 7 && !values[0].isEmpty() && Character.isDigit(values[0].charAt(0))) {
+                // GS02 format: skip the time token
+                index = 1;
+                // valid
+                position.setValid("A".equalsIgnoreCase(values[index]));
+                index++;
+                // latitude
+                if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) {
+                    double latitude = Double.parseDouble(values[index].substring(1));
+                    if (values[index].charAt(0) == 'S') {
+                        latitude = -latitude;
                     }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
-                    position.setLongitude(-position.getLongitude());
+                    position.setLatitude(latitude);
                 }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                index++;
+                // longitude
+                if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) {
+                    double longitude = Double.parseDouble(values[index].substring(1));
+                    if (values[index].charAt(0) == 'W') {
+                        longitude = -longitude;
                     }
-                position.setCourse(Integer.parseInt(values[index++]));
+                    position.setLongitude(longitude);
+                }
+                index++;
+                // speed
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));
+                }
+                index++;
+                // course
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.setCourse(Integer.parseInt(values[index]));
+                }
+                index++;
+                // odometer
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));
+                }
+            } else {
+                // Standard format: tokens: [valid, satellites, latitude, longitude, speed, course, altitude (optional), hdop (optional), vdop (optional)]
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.setValid(values[index].equals("A"));
+                }
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));
+                }
+                index++;
+                if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) {
+                    double latitude = Double.parseDouble(values[index].substring(1));
+                    if (values[index].charAt(0) == 'S') {
+                        latitude = -latitude;
+                    }
+                    position.setLatitude(latitude);
+                }
+                index++;
+                if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) {
+                    double longitude = Double.parseDouble(values[index].substring(1));
+                    if (values[index].charAt(0) == 'W') {
+                        longitude = -longitude;
+                    }
+                    position.setLongitude(longitude);
+                }
+                index++;
                 if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                    if (!values[index].isEmpty()) {
+                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));
                     }
+                }
+                index++;
+                if (index < values.length) {
+                    if (!values[index].isEmpty()) {
+                        position.setCourse(Integer.parseInt(values[index]));
+                    }
+                }
+                index++;
+                if (index < values.length) {
+                    if (!values[index].isEmpty()) {
+                        position.setAltitude(Integer.parseInt(values[index]));
+                    }
+                }
+                index++;
                 if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                    if (!values[index].isEmpty()) {
+                        position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));
+                    }
                 }
+                index++;
                 if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                    if (!values[index].isEmpty()) {
+                        position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));
+                    }
+                }
             }
             break;
         case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+            // Skip registration status and signal strength tokens
+            index++;
+            index++;
+            int mcc = 0;
+            int mnc = 0;
+            int lac = 0;
+            int cid = 0;
+            int signal = 0;
+            if (index < values.length && !values[index].isEmpty()) {
+                mcc = Integer.parseInt(values[index]);
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                mnc = Integer.parseInt(values[index]);
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                lac = Integer.parseInt(values[index], 16);
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                cid = Integer.parseInt(values[index], 16);
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                signal = Integer.parseInt(values[index]);
+            }
+            index++;
+            position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, signal)));
             break;
         case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));
             }
-                if (index < values.length) {
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
                 String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                int h = (hours.length > 0 && !hours[0].isEmpty()) ? Integer.parseInt(hours[0]) : 0;
+                int m = (hours.length > 1 && !hours[1].isEmpty()) ? Integer.parseInt(hours[1]) : 0;
+                int s = (hours.length > 2 && !hours[2].isEmpty()) ? Integer.parseInt(hours[2]) : 0;
+                position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);
             }
+            index++;
             break;
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_POWER, Double.parseDouble(values[index]));
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));
             }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));
+            }
+            index++;
             break;
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                int io = Integer.parseInt(values[index], 16);
                 position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                 position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                 position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                 position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                 position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                 position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                 position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                 position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
             }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+            index++;
+            String geoFencePart1 = index < values.length ? values[index++] : "";
+            String geoFencePart2 = index < values.length ? values[index++] : "";
+            position.set(Position.KEY_GEOFENCE, geoFencePart1 + geoFencePart2);
+            if (index < values.length) {
                 position.set("eventStatus", values[index++]);
+            }
             if (index < values.length) {
                 position.set("packetType", values[index++]);
             }
             break;
         case "ETD":
+            if (index < values.length) {
                 position.set("eventData", values[index++]);
+            }
             break;
         case "OBD":
+            if (index < values.length) {
                 position.set("obd", values[index++]);
+            }
             break;
         case "TAG":
+            if (index < values.length) {
                 position.set("tagData", values[index++]);
+            }
             break;
         case "IWD":
             while (index < values.length) {
+                if (values[index].isEmpty()) {
+                    break;
+                }
                 int sensorIndex = Integer.parseInt(values[index++]);
                 int dataType = Integer.parseInt(values[index++]);
                 if (dataType == 0) {
                     position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    index++; // skip temperature sensor serial number
+                    if (index < values.length && !values[index].isEmpty()) {
+                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index]));
+                    }
+                    index++;
                 }
             }
             break;
         default:
             break;
     }
 }
\ No newline at end of file
