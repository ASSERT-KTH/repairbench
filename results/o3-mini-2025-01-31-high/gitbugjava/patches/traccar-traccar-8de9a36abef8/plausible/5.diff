diff --git a/tmp/20121c0e-182f-4fa4-bd62-d6140715ef7a_buggy.java b/tmp/03108282-a6d2-4955-999f-bf3aff4aa349_fixed.java
index ad77f15..b299c44 100644
--- a/tmp/20121c0e-182f-4fa4-bd62-d6140715ef7a_buggy.java
+++ b/tmp/03108282-a6d2-4955-999f-bf3aff4aa349_fixed.java
@@ -1,112 +1,268 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
-        int index = 0;
-        String[] values;
-        if (fragment.length() == dataIndex + 1) {
-            values = new String[0];
+    if (dataIndex < 0) {
+        return;
+    }
+
+    // If nothing follows the colon, we use an empty array.
+    String[] values = (fragment.length() == dataIndex + 1) ? new String[0]
+            : fragment.substring(dataIndex + 1).split(";");
+    String type = fragment.substring(0, dataIndex);
+
+    switch (type) {
+        case "GPS": {
+            // Some messages (e.g. GS02) include a fix time as the first field.
+            if (values.length > 0 && values[0].matches("\\d{6}")) {
+                // GS02 format: fix time;validity;lat;lon;speed;course;date;[optional altitude,hdop,vdop]
+                int idx = 0;
+                // Skip fix time (HHMMSS)
+                idx++;
+                if (idx < values.length) {
+                    position.setValid(values[idx].equals("A"));
+                }
+                idx++;
+                if (idx < values.length) {
+                    String latStr = values[idx++];
+                    if (latStr.length() > 1) {
+                        double lat = Double.parseDouble(latStr.substring(1));
+                        if (latStr.charAt(0) == 'S') {
+                            lat = -lat;
+                        }
+                        position.setLatitude(lat);
+                    }
+                }
+                if (idx < values.length) {
+                    String lonStr = values[idx++];
+                    if (lonStr.length() > 1) {
+                        double lon = Double.parseDouble(lonStr.substring(1));
+                        if (lonStr.charAt(0) == 'W') {
+                            lon = -lon;
+                        }
+                        position.setLongitude(lon);
+                    }
+                }
+                if (idx < values.length) {
+                    String speed = values[idx++];
+                    if (!speed.isEmpty()) {
+                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speed)));
+                    }
+                }
+                if (idx < values.length) {
+                    String course = values[idx++];
+                    if (!course.isEmpty()) {
+                        position.setCourse(Integer.parseInt(course));
+                    }
+                }
+                // Optionally, process altitude, hdop, vdop if available.
+                if (idx < values.length && !values[idx].isEmpty()) {
+                    position.setAltitude(Integer.parseInt(values[idx]));
+                    idx++;
+                } else if (idx < values.length) {
+                    idx++;
+                }
+                if (idx < values.length && !values[idx].isEmpty()) {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(values[idx]));
+                    idx++;
+                } else if (idx < values.length) {
+                    idx++;
+                }
+                if (idx < values.length && !values[idx].isEmpty()) {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(values[idx]));
+                }
             } else {
-            values = fragment.substring(dataIndex + 1).split(";");
+                // Otherwise, assume the standard (GS06/GS16) format:
+                // valid;satellites;lat;lon;speed;course;[altitude;hdop;vdop]
+                int idx = 0;
+                if (idx < values.length) {
+                    position.setValid(values[idx].equals("A"));
                 }
-
-        switch (fragment.substring(0, dataIndex)) {
-            case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
-                    position.setLatitude(-position.getLatitude());
+                idx++;
+                if (idx < values.length && !values[idx].isEmpty()) {
+                    position.set(Position.KEY_SATELLITES, Integer.parseInt(values[idx]));
                 }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
-                    position.setLongitude(-position.getLongitude());
+                idx++;
+                if (idx < values.length) {
+                    String latStr = values[idx++];
+                    if (latStr.length() > 1) {
+                        double lat = Double.parseDouble(latStr.substring(1));
+                        if (latStr.charAt(0) == 'S') {
+                            lat = -lat;
                         }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                        position.setLatitude(lat);
                     }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                if (idx < values.length) {
+                    String lonStr = values[idx++];
+                    if (lonStr.length() > 1) {
+                        double lon = Double.parseDouble(lonStr.substring(1));
+                        if (lonStr.charAt(0) == 'W') {
+                            lon = -lon;
+                        }
+                        position.setLongitude(lon);
+                    }
+                }
+                if (idx < values.length) {
+                    String speed = values[idx++];
+                    if (!speed.isEmpty()) {
+                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speed)));
+                    }
+                }
+                if (idx < values.length) {
+                    String course = values[idx++];
+                    if (!course.isEmpty()) {
+                        position.setCourse(Integer.parseInt(course));
+                    }
+                }
+                if (idx < values.length) {
+                    String alt = values[idx++];
+                    if (!alt.isEmpty()) {
+                        position.setAltitude(Integer.parseInt(alt));
+                    }
+                }
+                if (idx < values.length) {
+                    String hdop = values[idx++];
+                    if (!hdop.isEmpty()) {
+                        position.set(Position.KEY_HDOP, Double.parseDouble(hdop));
+                    }
+                }
+                if (idx < values.length) {
+                    String vdop = values[idx++];
+                    if (!vdop.isEmpty()) {
+                        position.set(Position.KEY_VDOP, Double.parseDouble(vdop));
+                    }
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
             }
             break;
-            case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+        }
+        case "GSM": {
+            int idx = 0;
+            // Skip two fields: registration status and signal strength.
+            idx++; 
+            idx++;
+            int mcc = Integer.parseInt(values[idx++]);
+            int mnc = Integer.parseInt(values[idx++]);
+            int lac = Integer.parseInt(values[idx++], 16);
+            int cid = Integer.parseInt(values[idx++], 16);
+            int signal = Integer.parseInt(values[idx++]);
+            position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, signal)));
             break;
-            case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
         }
-                if (index < values.length) {
-                    String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+        case "COT": {
+            int idx = 0;
+            if (idx < values.length) {
+                String odo = values[idx++];
+                if (!odo.isEmpty()) {
+                    position.set(Position.KEY_ODOMETER, Long.parseLong(odo));
+                }
+            }
+            if (idx < values.length) {
+                String hrs = values[idx++];
+                if (!hrs.isEmpty()) {
+                    String[] parts = hrs.split("-");
+                    int h = parts.length > 0 && !parts[0].isEmpty() ? Integer.parseInt(parts[0]) : 0;
+                    int m = parts.length > 1 && !parts[1].isEmpty() ? Integer.parseInt(parts[1]) : 0;
+                    int s = parts.length > 2 && !parts[2].isEmpty() ? Integer.parseInt(parts[2]) : 0;
+                    position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);
+                }
             }
             break;
-            case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
         }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+        case "ADC": {
+            int idx = 0;
+            if (idx < values.length && !values[idx].isEmpty()) {
+                position.set(Position.KEY_POWER, Double.parseDouble(values[idx]));
+            }
+            idx++;
+            if (idx < values.length && !values[idx].isEmpty()) {
+                position.set(Position.KEY_BATTERY, Double.parseDouble(values[idx]));
+            }
+            idx++;
+            if (idx < values.length && !values[idx].isEmpty()) {
+                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[idx]));
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+            idx++;
+            if (idx < values.length && !values[idx].isEmpty()) {
+                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[idx]));
             }
             break;
-            case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+        }
+        case "DTT": {
+            int idx = 0;
+            if (idx < values.length && !values[idx].isEmpty()) {
+                position.set(Position.KEY_STATUS, Integer.parseInt(values[idx], 16));
+            }
+            idx++;
+            if (idx < values.length && !values[idx].isEmpty()) {
+                int io = Integer.parseInt(values[idx], 16);
                 position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                 position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                 position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                 position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                 position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                 position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                 position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                 position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
             }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
-                if (index < values.length) {
-                    position.set("packetType", values[index++]);
+            idx++;
+            if (idx + 1 < values.length) {
+                position.set(Position.KEY_GEOFENCE, values[idx] + values[idx + 1]);
+            }
+            idx += 2;
+            if (idx < values.length) {
+                position.set("eventStatus", values[idx]);
+                idx++;
+            }
+            if (idx < values.length) {
+                position.set("packetType", values[idx]);
+                idx++;
             }
             break;
+        }
         case "ETD":
-                position.set("eventData", values[index++]);
+            if (values.length > 0) {
+                position.set("eventData", values[0]);
+            }
             break;
         case "OBD":
-                position.set("obd", values[index++]);
+            if (values.length > 0) {
+                position.set("obd", values[0]);
+            }
             break;
         case "TAG":
-                position.set("tagData", values[index++]);
+            if (values.length > 0) {
+                position.set("tagData", values[0]);
+            }
             break;
-            case "IWD":
-                while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+        case "IWD": {
+            int idx = 0;
+            while (idx < values.length) {
+                if (!values[idx].isEmpty()) {
+                    int sensorIndex = Integer.parseInt(values[idx]);
+                    idx++;
+                    if (idx < values.length && !values[idx].isEmpty()) {
+                        int dataType = Integer.parseInt(values[idx]);
+                        idx++;
                         if (dataType == 0) {
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                            if (idx < values.length) {
+                                position.set(Position.KEY_DRIVER_UNIQUE_ID, values[idx]);
+                                idx++;
+                            }
                         } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                            idx++; // skip temperature sensor serial number
+                            if (idx < values.length && !values[idx].isEmpty()) {
+                                position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[idx]));
                             }
+                            idx++;
                         }
+                    }
+                } else {
                     break;
+                }
+            }
+            break;
+        }
         default:
             break;
     }
 }
\ No newline at end of file
