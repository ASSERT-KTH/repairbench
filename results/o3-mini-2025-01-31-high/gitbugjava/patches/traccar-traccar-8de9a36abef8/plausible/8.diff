diff --git a/tmp/b928bd6b-ef68-463b-8f9d-23201cb7368b_buggy.java b/tmp/3d32212f-9c0f-49b7-a1a4-43c7731988dc_fixed.java
index ad77f15..c5ce874 100644
--- a/tmp/b928bd6b-ef68-463b-8f9d-23201cb7368b_buggy.java
+++ b/tmp/3d32212f-9c0f-49b7-a1a4-43c7731988dc_fixed.java
@@ -1,112 +1,270 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
-        switch (fragment.substring(0, dataIndex)) {
-            case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
-                    position.setLatitude(-position.getLatitude());
+    String type = fragment.substring(0, dataIndex);
+    switch (type) {
+        case "GPS": {
+            // valid flag
+            if (index < values.length) {
+                String validToken = values[index++];
+                position.setValid("A".equals(validToken));
             }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
-                    position.setLongitude(-position.getLongitude());
+
+            // satellites
+            if (index < values.length) {
+                String satToken = values[index++];
+                if (!satToken.isEmpty()) {
+                    position.set(Position.KEY_SATELLITES, Integer.parseInt(satToken));
                 }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
             }
-                position.setCourse(Integer.parseInt(values[index++]));
+
+            // latitude (expecting something like "N31.551856" or "S31.551856")
             if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                String latToken = values[index++];
+                if (!latToken.isEmpty() && latToken.length() > 1) {
+                    char hemi = latToken.charAt(0);
+                    double lat = Double.parseDouble(latToken.substring(1));
+                    if (hemi == 'S') {
+                        lat = -lat;
+                    }
+                    position.setLatitude(lat);
+                }
             }
+
+            // longitude (expecting "E74.366920" or "W74.366920")
             if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                String lonToken = values[index++];
+                if (!lonToken.isEmpty() && lonToken.length() > 1) {
+                    char hemi = lonToken.charAt(0);
+                    double lon = Double.parseDouble(lonToken.substring(1));
+                    if (hemi == 'W') {
+                        lon = -lon;
                     }
+                    position.setLongitude(lon);
+                }
+            }
+
+            // speed (optional)
             if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                String speedToken = values[index++];
+                if (!speedToken.isEmpty()) {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedToken)));
+                }
+            }
+
+            // course (optional)
+            if (index < values.length) {
+                String courseToken = values[index++];
+                if (!courseToken.isEmpty()) {
+                    position.setCourse(Integer.parseInt(courseToken));
+                }
+            }
+
+            // altitude (optional)
+            if (index < values.length) {
+                String altToken = values[index++];
+                if (!altToken.isEmpty()) {
+                    position.setAltitude(Integer.parseInt(altToken));
+                }
+            }
+
+            // HDOP (optional)
+            if (index < values.length) {
+                String hdopToken = values[index++];
+                if (!hdopToken.isEmpty()) {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(hdopToken));
+                }
+            }
+
+            // VDOP (optional)
+            if (index < values.length) {
+                String vdopToken = values[index++];
+                if (!vdopToken.isEmpty()) {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(vdopToken));
+                }
             }
             break;
-            case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+        }
+        case "GSM": {
+            // Skip registration status and signal strength
+            if (index < values.length) index++;
+            if (index < values.length) index++;
+
+            int lac = 0, cid = 0, mcc = 0, mnc = 0, dbm = 0;
+            if (index < values.length) {
+                String token = values[index++];
+                if (!token.isEmpty()) {
+                    lac = Integer.parseInt(token);
+                }
+            }
+            if (index < values.length) {
+                String token = values[index++];
+                if (!token.isEmpty()) {
+                    cid = Integer.parseInt(token);
+                }
+            }
+            if (index < values.length) {
+                String token = values[index++];
+                if (!token.isEmpty()) {
+                    mcc = Integer.parseInt(token, 16);
+                }
+            }
+            if (index < values.length) {
+                String token = values[index++];
+                if (!token.isEmpty()) {
+                    mnc = Integer.parseInt(token, 16);
+                }
+            }
+            if (index < values.length) {
+                String token = values[index++];
+                if (!token.isEmpty()) {
+                    dbm = Integer.parseInt(token);
+                }
+            }
+            position.setNetwork(new Network(CellTower.from(lac, cid, mcc, mnc, dbm)));
             break;
-            case "COT":
+        }
+        case "COT": {
+            // Odometer (optional)
             if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                String odoToken = values[index++];
+                if (!odoToken.isEmpty()) {
+                    position.set(Position.KEY_ODOMETER, Long.parseLong(odoToken));
+                }
             }
+            // Hours (optional)
             if (index < values.length) {
-                    String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                String hoursToken = values[index++];
+                if (!hoursToken.isEmpty()) {
+                    String[] parts = hoursToken.split("-");
+                    int h = (parts.length > 0 && !parts[0].isEmpty()) ? Integer.parseInt(parts[0]) : 0;
+                    int m = (parts.length > 1 && !parts[1].isEmpty()) ? Integer.parseInt(parts[1]) : 0;
+                    int s = (parts.length > 2 && !parts[2].isEmpty()) ? Integer.parseInt(parts[2]) : 0;
+                    position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);
+                }
             }
             break;
-            case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
+        }
+        case "ADC": {
+            if (index < values.length) {
+                String powerToken = values[index++];
+                if (!powerToken.isEmpty()) {
+                    position.set(Position.KEY_POWER, Double.parseDouble(powerToken));
+                }
+            }
             if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                String batToken = values[index++];
+                if (!batToken.isEmpty()) {
+                    position.set(Position.KEY_BATTERY, Double.parseDouble(batToken));
+                }
             }
             if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                String adc1 = values[index++];
+                if (!adc1.isEmpty()) {
+                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1));
+                }
             }
             if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                String adc2 = values[index++];
+                if (!adc2.isEmpty()) {
+                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2));
+                }
             }
             break;
-            case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+        }
+        case "DTT": {
+            if (index < values.length) {
+                String statusToken = values[index++];
+                if (!statusToken.isEmpty()) {
+                    position.set(Position.KEY_STATUS, Integer.parseInt(statusToken, 16));
+                }
+            }
+
+            if (index < values.length) {
+                String ioToken = values[index++];
+                if (!ioToken.isEmpty()) {
+                    int io = Integer.parseInt(ioToken, 16);
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                 }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+            }
+
+            String geoPart1 = (index < values.length) ? values[index++] : "";
+            String geoPart2 = (index < values.length) ? values[index++] : "";
+            position.set(Position.KEY_GEOFENCE, geoPart1 + geoPart2);
+
+            if (index < values.length) {
                 position.set("eventStatus", values[index++]);
+            }
             if (index < values.length) {
                 position.set("packetType", values[index++]);
             }
             break;
-            case "ETD":
+        }
+        case "ETD": {
+            if (index < values.length) {
                 position.set("eventData", values[index++]);
+            }
             break;
-            case "OBD":
+        }
+        case "OBD": {
+            if (index < values.length) {
                 position.set("obd", values[index++]);
+            }
             break;
-            case "TAG":
+        }
+        case "TAG": {
+            if (index < values.length) {
                 position.set("tagData", values[index++]);
+            }
             break;
-            case "IWD":
+        }
+        case "IWD": {
             while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+                String sensorIndexToken = values[index++];
+                if (sensorIndexToken.isEmpty()) {
+                    continue;
+                }
+                int sensorIndex = Integer.parseInt(sensorIndexToken);
+                if (index >= values.length) break;
+                String dataTypeToken = values[index++];
+                if (dataTypeToken.isEmpty()) {
+                    continue;
+                }
+                int dataType = Integer.parseInt(dataTypeToken);
                 if (dataType == 0) {
+                    if (index < values.length) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    }
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    if (index < values.length) { 
+                        index++; // skip temperature sensor serial number
+                    }
+                    if (index < values.length) {
+                        String tempToken = values[index++];
+                        if (!tempToken.isEmpty()) {
+                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(tempToken));
+                        }
+                    }
                 }
             }
             break;
+        }
         default:
             break;
     }
 }
\ No newline at end of file
