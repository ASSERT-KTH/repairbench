diff --git a/tmp/d2696873-692a-468b-874c-395809eab784_buggy.java b/tmp/757ef972-2e24-4cf9-bbe5-c9013103112d_fixed.java
index ad77f15..0f84c5b 100644
--- a/tmp/d2696873-692a-468b-874c-395809eab784_buggy.java
+++ b/tmp/757ef972-2e24-4cf9-bbe5-c9013103112d_fixed.java
@@ -1,112 +1,217 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
-                    position.setLatitude(-position.getLatitude());
+            // Validity
+            position.setValid(values[index].equals("A"));
+            index++;
+
+            // Satellites (if non-empty)
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));
             }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
-                    position.setLongitude(-position.getLongitude());
+            index++;
+
+            // Latitude (the field includes hemisphere; e.g. "N31.551856" or "S25.750200")
+            if (index < values.length && !values[index].isEmpty()) {
+                double latitude = Double.parseDouble(values[index].substring(1));
+                if (values[index].charAt(0) == 'S') {
+                    latitude = -latitude;
                 }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                position.setLatitude(latitude);
             }
-                position.setCourse(Integer.parseInt(values[index++]));
+            index++;
+
+            // Longitude (the field includes hemisphere; e.g. "E74.366920" or "W122.238720")
+            if (index < values.length && !values[index].isEmpty()) {
+                double longitude = Double.parseDouble(values[index].substring(1));
+                if (values[index].charAt(0) == 'W') {
+                    longitude = -longitude;
+                }
+                position.setLongitude(longitude);
+            }
+            index++;
+
+            // Speed
             if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                String speedVal = values[index];
+                index++;
+                if (!speedVal.isEmpty()) {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedVal)));
+                }
             }
+
+            // Course
+            if (index < values.length && !values[index].isEmpty()) {
+                position.setCourse(Integer.parseInt(values[index]));
+            }
+            index++;
+
+            // Altitude (optional, may be empty)
             if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                String alt = values[index];
+                if (!alt.isEmpty()) {
+                    position.setAltitude(Integer.parseInt(alt));
+                }
+                index++;
             }
+
+            // HDOP (optional)
             if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                String hdop = values[index];
+                if (!hdop.isEmpty()) {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(hdop));
+                }
+                index++;
+            }
+
+            // VDOP (optional)
+            if (index < values.length) {
+                String vdop = values[index];
+                if (!vdop.isEmpty()) {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(vdop));
+                }
+                index++;
             }
             break;
+
         case "GSM":
             index += 1; // registration status
             index += 1; // signal strength
             position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                    Integer.parseInt(values[index++]),
+                    Integer.parseInt(values[index++]),
+                    Integer.parseInt(values[index++], 16),
+                    Integer.parseInt(values[index++], 16),
+                    Integer.parseInt(values[index++])
+            )));
             break;
+
         case "COT":
             if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                // Odometer may be empty
+                String odometer = values[index];
+                if (!odometer.isEmpty()) {
+                    position.set(Position.KEY_ODOMETER, Long.parseLong(odometer));
+                }
+                index++;
             }
             if (index < values.length) {
-                    String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                String hoursField = values[index];
+                index++;
+                if (!hoursField.isEmpty()) {
+                    String[] hours = hoursField.split("-");
+                    int h = hours.length > 0 && !hours[0].isEmpty() ? Integer.parseInt(hours[0]) : 0;
+                    int m = hours.length > 1 && !hours[1].isEmpty() ? Integer.parseInt(hours[1]) : 0;
+                    int s = hours.length > 2 && !hours[2].isEmpty() ? Integer.parseInt(hours[2]) : 0;
+                    position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);
+                }
             }
             break;
+
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_POWER, Double.parseDouble(values[index]));
+            }
+            index++;
             if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                String battery = values[index];
+                if (!battery.isEmpty()) {
+                    position.set(Position.KEY_BATTERY, Double.parseDouble(battery));
+                }
             }
+            index++;
             if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                String adc1 = values[index];
+                if (!adc1.isEmpty()) {
+                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1));
                 }
+            }
+            index++;
             if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                String adc2 = values[index];
+                if (!adc2.isEmpty()) {
+                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2));
+                }
             }
+            index++;
             break;
+
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                int io = Integer.parseInt(values[index], 16);
                 position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                 position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                 position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                 position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                 position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                 position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                 position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                 position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
             }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+            index++;
+            if (index + 1 < values.length) {
+                position.set(Position.KEY_GEOFENCE, values[index] + values[index + 1]);
+            }
+            index += 2;
+            if (index < values.length) {
                 position.set("eventStatus", values[index++]);
+            }
             if (index < values.length) {
                 position.set("packetType", values[index++]);
             }
             break;
+
         case "ETD":
+            if (index < values.length) {
                 position.set("eventData", values[index++]);
+            }
             break;
+
         case "OBD":
+            if (index < values.length) {
                 position.set("obd", values[index++]);
+            }
             break;
+
         case "TAG":
+            if (index < values.length) {
                 position.set("tagData", values[index++]);
+            }
             break;
+
         case "IWD":
             while (index < values.length) {
                 int sensorIndex = Integer.parseInt(values[index++]);
                 int dataType = Integer.parseInt(values[index++]);
                 if (dataType == 0) {
+                    if (index < values.length) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    }
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    index++; // skip temperature sensor serial number
+                    if (index < values.length && !values[index].isEmpty()) {
+                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index]));
+                    }
+                    index++;
                 }
             }
             break;
+
         default:
             break;
     }
 }
\ No newline at end of file
