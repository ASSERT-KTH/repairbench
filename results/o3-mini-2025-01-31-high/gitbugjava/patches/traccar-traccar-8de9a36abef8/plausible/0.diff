diff --git a/tmp/204e4fd6-0e94-4ec4-a66f-7bd15fe17654_buggy.java b/tmp/9e927e86-bec6-4536-93bf-ae7a840c7127_fixed.java
index ad77f15..0aef310 100644
--- a/tmp/204e4fd6-0e94-4ec4-a66f-7bd15fe17654_buggy.java
+++ b/tmp/9e927e86-bec6-4536-93bf-ae7a840c7127_fixed.java
@@ -1,112 +1,235 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
+    String[] values = (fragment.length() == dataIndex + 1) ? new String[0] : fragment.substring(dataIndex + 1).split(";");
     int index = 0;
-        String[] values;
-        if (fragment.length() == dataIndex + 1) {
-            values = new String[0];
-        } else {
-            values = fragment.substring(dataIndex + 1).split(";");
-        }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
-                    position.setLatitude(-position.getLatitude());
+            // Two distinct GPS formats:
+            // Format 1 (standard): first token is fix status ("A"/"L"), then satellites, latitude, longitude, speed, course, altitude, hdop, vdop.
+            // Format 2 (alternate): first token is a 6-digit time, then fix status, latitude, longitude, speed, course.
+            if (values.length > 0 && values[0].matches("\\d{6}")) {
+                // Alternate format (with time)
+                int i = 1;
+                if (i < values.length) {
+                    position.setValid("A".equals(values[i]));
+                    i++;
                 }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
-                    position.setLongitude(-position.getLongitude());
+                if (i < values.length && !values[i].isEmpty()) {
+                    String lat = values[i];
+                    double latitude = Double.parseDouble(lat.substring(1));
+                    if (lat.charAt(0) == 'S') {
+                        latitude = -latitude;
                     }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                    position.setLatitude(latitude);
                 }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                i++;
+                if (i < values.length && !values[i].isEmpty()) {
+                    String lon = values[i];
+                    double longitude = Double.parseDouble(lon.substring(1));
+                    if (lon.charAt(0) == 'W') {
+                        longitude = -longitude;
+                    }
+                    position.setLongitude(longitude);
+                }
+                i++;
+                if (i < values.length && !values[i].isEmpty()) {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[i])));
+                }
+                i++;
+                if (i < values.length && !values[i].isEmpty()) {
+                    position.setCourse(Integer.parseInt(values[i]));
+                }
+                // Extra tokens (if any) are ignored.
+            } else {
+                // Standard format
+                int i = 0;
+                if (i < values.length) {
+                    position.setValid("A".equals(values[i]));
+                }
+                i++;
+                if (i < values.length && !values[i].isEmpty()) {
+                    position.set(Position.KEY_SATELLITES, Integer.parseInt(values[i]));
+                }
+                i++;
+                if (i < values.length && !values[i].isEmpty()) {
+                    String lat = values[i];
+                    double latitude = Double.parseDouble(lat.substring(1));
+                    if (lat.charAt(0) == 'S') {
+                        latitude = -latitude;
+                    }
+                    position.setLatitude(latitude);
+                }
+                i++;
+                if (i < values.length && !values[i].isEmpty()) {
+                    String lon = values[i];
+                    double longitude = Double.parseDouble(lon.substring(1));
+                    if (lon.charAt(0) == 'W') {
+                        longitude = -longitude;
+                    }
+                    position.setLongitude(longitude);
+                }
+                i++;
+                if (i < values.length) {
+                    String speed = values[i];
+                    if (!speed.isEmpty()) {
+                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speed)));
+                    }
+                }
+                i++;
+                if (i < values.length) {
+                    String course = values[i];
+                    if (!course.isEmpty()) {
+                        position.setCourse(Integer.parseInt(course));
+                    }
+                }
+                i++;
+                if (i < values.length) {
+                    String alt = values[i];
+                    if (!alt.isEmpty()) {
+                        position.setAltitude(Integer.parseInt(alt));
+                    }
+                }
+                i++;
+                if (i < values.length) {
+                    String hdop = values[i];
+                    if (!hdop.isEmpty()) {
+                        position.set(Position.KEY_HDOP, Double.parseDouble(hdop));
+                    }
+                }
+                i++;
+                if (i < values.length) {
+                    String vdop = values[i];
+                    if (!vdop.isEmpty()) {
+                        position.set(Position.KEY_VDOP, Double.parseDouble(vdop));
                     }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
             }
             break;
         case "GSM":
             index += 1; // registration status
             index += 1; // signal strength
             position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                    Integer.parseInt(values[index++]),
+                    Integer.parseInt(values[index++]),
+                    Integer.parseInt(values[index++], 16),
+                    Integer.parseInt(values[index++], 16),
+                    Integer.parseInt(values[index++])
+            )));
             break;
         case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));
             }
-                if (index < values.length) {
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
                 String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                int h = 0, m = 0, s = 0;
+                if (hours.length > 0 && !hours[0].isEmpty()) {
+                    h = Integer.parseInt(hours[0]);
                 }
+                if (hours.length > 1 && !hours[1].isEmpty()) {
+                    m = Integer.parseInt(hours[1]);
+                }
+                if (hours.length > 2 && !hours[2].isEmpty()) {
+                    s = Integer.parseInt(hours[2]);
+                }
+                position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);
+            }
+            index++;
             break;
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_POWER, Double.parseDouble(values[index]));
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));
             }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));
+            }
+            index++;
             break;
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                int io = Integer.parseInt(values[index], 16);
                 position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                 position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                 position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                 position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                 position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                 position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                 position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                 position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
             }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
+            index++;
+            if (index + 1 < values.length) {
+                position.set(Position.KEY_GEOFENCE, values[index] + values[index + 1]);
+            }
+            index += 2;
+            if (index < values.length) {
+                position.set("eventStatus", values[index]);
+            }
+            index++;
             if (index < values.length) {
-                    position.set("packetType", values[index++]);
+                position.set("packetType", values[index]);
             }
+            index++;
             break;
         case "ETD":
-                position.set("eventData", values[index++]);
+            if (index < values.length) {
+                position.set("eventData", values[index]);
+            }
+            index++;
             break;
         case "OBD":
-                position.set("obd", values[index++]);
+            if (index < values.length) {
+                position.set("obd", values[index]);
+            }
+            index++;
             break;
         case "TAG":
-                position.set("tagData", values[index++]);
+            if (index < values.length) {
+                position.set("tagData", values[index]);
+            }
+            index++;
             break;
         case "IWD":
             while (index < values.length) {
+                if (values[index].isEmpty()) {
+                    break;
+                }
                 int sensorIndex = Integer.parseInt(values[index++]);
+                if (index >= values.length) {
+                    break;
+                }
                 int dataType = Integer.parseInt(values[index++]);
                 if (dataType == 0) {
+                    if (index < values.length) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    }
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
+                    index++; // skip temperature sensor serial number
+                    if (index < values.length && !values[index].isEmpty()) {
                         position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    } else {
+                        index++;
+                    }
                 }
             }
             break;
         default:
             break;
     }
 }
\ No newline at end of file
