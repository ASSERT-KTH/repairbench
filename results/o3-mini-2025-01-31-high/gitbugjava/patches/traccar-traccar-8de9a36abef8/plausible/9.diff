diff --git a/tmp/eb9e0177-2a5a-4831-b40d-d6126a76f242_buggy.java b/tmp/cdcc2372-d801-413f-88df-184e44d6a884_fixed.java
index ad77f15..db0b7d1 100644
--- a/tmp/eb9e0177-2a5a-4831-b40d-d6126a76f242_buggy.java
+++ b/tmp/cdcc2372-d801-413f-88df-184e44d6a884_fixed.java
@@ -1,112 +1,205 @@
 private void decodeFragment(Position position, String fragment) {
-
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
+            // Mandatory fields
             position.setValid(values[index++].equals("A"));
             position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
-                    position.setLatitude(-position.getLatitude());
+
+            String latStr = values[index++];
+            if (latStr.length() > 1 && !latStr.substring(1).isEmpty()) {
+                double latitude = Double.parseDouble(latStr.substring(1));
+                if (latStr.charAt(0) == 'S') {
+                    latitude = -latitude;
                 }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
-                    position.setLongitude(-position.getLongitude());
+                position.setLatitude(latitude);
             }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+
+            String lonStr = values[index++];
+            if (lonStr.length() > 1 && !lonStr.substring(1).isEmpty()) {
+                double longitude = Double.parseDouble(lonStr.substring(1));
+                if (lonStr.charAt(0) == 'W') {
+                    longitude = -longitude;
                 }
-                position.setCourse(Integer.parseInt(values[index++]));
+                position.setLongitude(longitude);
+            }
+
+            String speedStr = values[index++];
+            if (!speedStr.isEmpty()) {
+                position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedStr)));
+            }
+
+            String courseStr = values[index++];
+            if (!courseStr.isEmpty()) {
+                position.setCourse(Integer.parseInt(courseStr));
+            }
+
             if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                String altitudeStr = values[index++];
+                if (!altitudeStr.isEmpty()) {
+                    position.setAltitude(Integer.parseInt(altitudeStr));
+                }
             }
             if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                String hdopStr = values[index++];
+                if (!hdopStr.isEmpty()) {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(hdopStr));
+                }
             }
             if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                String vdopStr = values[index++];
+                if (!vdopStr.isEmpty()) {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(vdopStr));
+                }
             }
             break;
+
         case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
+            index += 1; // skip registration status
+            index += 1; // skip signal strength
             position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                    Integer.parseInt(values[index++]),
+                    Integer.parseInt(values[index++]),
+                    Integer.parseInt(values[index++], 16),
+                    Integer.parseInt(values[index++], 16),
+                    Integer.parseInt(values[index++])
+            )));
             break;
+
         case "COT":
             if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                String odometer = values[index++];
+                if (!odometer.isEmpty()) {
+                    position.set(Position.KEY_ODOMETER, Long.parseLong(odometer));
+                }
             }
             if (index < values.length) {
-                    String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                String hoursStr = values[index++];
+                if (!hoursStr.isEmpty()) {
+                    String[] parts = hoursStr.split("-");
+                    int h = Integer.parseInt(parts[0]);
+                    int m = (parts.length > 1 && !parts[1].isEmpty()) ? Integer.parseInt(parts[1]) : 0;
+                    int s = (parts.length > 2 && !parts[2].isEmpty()) ? Integer.parseInt(parts[2]) : 0;
+                    position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);
+                }
             }
             break;
+
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
+            {
+                String powerStr = values[index++];
+                if (!powerStr.isEmpty()) {
+                    position.set(Position.KEY_POWER, Double.parseDouble(powerStr));
+                }
                 if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                    String batteryStr = values[index++];
+                    if (!batteryStr.isEmpty()) {
+                        position.set(Position.KEY_BATTERY, Double.parseDouble(batteryStr));
+                    }
                 }
                 if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                    String adc1 = values[index++];
+                    if (!adc1.isEmpty()) {
+                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1));
+                    }
                 }
                 if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                    String adc2 = values[index++];
+                    if (!adc2.isEmpty()) {
+                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2));
+                    }
+                }
             }
             break;
+
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            {
+                String statusStr = values[index++];
+                position.set(Position.KEY_STATUS, Integer.parseInt(statusStr, 16));
+                if (index < values.length) {
+                    String ioStr = values[index++];
+                    if (!ioStr.isEmpty()) {
+                        int io = Integer.parseInt(ioStr, 16);
                         position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                         position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                         position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                         position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                         position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                         position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                         position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                         position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                     }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+                }
+                if (index < values.length - 1) {
+                    String geoFencePart1 = values[index++];
+                    String geoFencePart2 = values[index++];
+                    position.set(Position.KEY_GEOFENCE, geoFencePart1 + geoFencePart2);
+                } else if (index < values.length) {
+                    position.set(Position.KEY_GEOFENCE, values[index++]);
+                }
+                if (index < values.length) {
                     position.set("eventStatus", values[index++]);
+                }
                 if (index < values.length) {
                     position.set("packetType", values[index++]);
                 }
+            }
             break;
+
         case "ETD":
+            if (index < values.length) {
                 position.set("eventData", values[index++]);
+            }
             break;
+
         case "OBD":
+            if (index < values.length) {
                 position.set("obd", values[index++]);
+            }
             break;
+
         case "TAG":
+            if (index < values.length) {
                 position.set("tagData", values[index++]);
+            }
             break;
+
         case "IWD":
             while (index < values.length) {
+                // Skip any empty tokens.
+                if (values[index].isEmpty()) {
+                    index++;
+                    continue;
+                }
                 int sensorIndex = Integer.parseInt(values[index++]);
                 int dataType = Integer.parseInt(values[index++]);
                 if (dataType == 0) {
+                    if (index < values.length) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    }
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    if (index < values.length) {
+                        index++; // skip temperature sensor serial number
+                    }
+                    if (index < values.length) {
+                        String tempStr = values[index++];
+                        if (!tempStr.isEmpty()) {
+                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(tempStr));
+                        }
+                    }
                 }
             }
             break;
+
         default:
             break;
     }
 }
\ No newline at end of file
