diff --git a/tmp/7a2d61cd-6e94-4bf1-ae65-7c754bc4573a_buggy.java b/tmp/b47f4628-b4e9-43f8-a4fe-67da5b32ad10_fixed.java
index 3da904d..b855921 100644
--- a/tmp/7a2d61cd-6e94-4bf1-ae65-7c754bc4573a_buggy.java
+++ b/tmp/b47f4628-b4e9-43f8-a4fe-67da5b32ad10_fixed.java
@@ -1,73 +1,75 @@
 private Position decodePosition(DeviceSession deviceSession, String data) {
 
     Parser parser = new Parser(PATTERN_POSITION, data);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
-
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
     position.setCourse(parser.nextDouble(0));
     position.setAltitude(parser.nextDouble(0));
 
     position.set(Position.KEY_SATELLITES, parser.nextInt(0));
     position.set(Position.KEY_RSSI, parser.nextInt(0));
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
-
     position.set(Position.KEY_STEPS, parser.nextInt(0));
 
     int status = parser.nextHexInt(0);
     position.set(Position.KEY_ALARM, decodeAlarm(status));
     if (BitUtil.check(status, 4)) {
         position.set(Position.KEY_MOTION, true);
     }
 
-        String[] values = parser.next().split(",");
+    // Parse network information.
+    // In some messages the network field is not provided and is marked with "FFFF..."
+    String networkData = parser.next();
+    if (networkData != null && !networkData.isEmpty() && !networkData.startsWith("FFFF")) {
+        String[] values = networkData.split(",");
         int index = 0;
-
         Network network = new Network();
 
         int cellCount = Integer.parseInt(values[index++]);
         if (cellCount > 0) {
-            index += 1; // timing advance
+            index += 1; // skip timing advance
             int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
             int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
 
             for (int i = 0; i < cellCount; i++) {
                 int lac = Integer.parseInt(values[index++]);
                 int cid = Integer.parseInt(values[index++]);
-                String rssi = values[index++];
-                if (!rssi.isEmpty()) {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+                String cellRssi = values[index++];
+                if (!cellRssi.isEmpty()) {
+                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(cellRssi)));
                 } else {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                 }
             }
         }
 
         if (index < values.length && !values[index].isEmpty()) {
             int wifiCount = Integer.parseInt(values[index++]);
 
             for (int i = 0; i < wifiCount; i++) {
-                index += 1; // wifi name
+                index += 1; // skip wifi name
                 String macAddress = values[index++];
-                String rssi = values[index++];
-                if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
-                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+                String wifiRssi = values[index++];
+                if (!macAddress.isEmpty() && !macAddress.equals("0") && !wifiRssi.isEmpty()) {
+                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(wifiRssi)));
                 }
             }
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
+    }
 
     return position;
 }
\ No newline at end of file
