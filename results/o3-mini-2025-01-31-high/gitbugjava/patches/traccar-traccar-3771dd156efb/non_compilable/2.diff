diff --git a/tmp/40e14807-eb08-4f94-9b6b-3cdf94f314d3_buggy.java b/tmp/de996e50-511c-4b20-8bf3-0370be755901_fixed.java
index 3da904d..2ba97bd 100644
--- a/tmp/40e14807-eb08-4f94-9b6b-3cdf94f314d3_buggy.java
+++ b/tmp/de996e50-511c-4b20-8bf3-0370be755901_fixed.java
@@ -1,73 +1,90 @@
 private Position decodePosition(DeviceSession deviceSession, String data) {
 
     Parser parser = new Parser(PATTERN_POSITION, data);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
     position.setCourse(parser.nextDouble(0));
     position.setAltitude(parser.nextDouble(0));
 
     position.set(Position.KEY_SATELLITES, parser.nextInt(0));
     position.set(Position.KEY_RSSI, parser.nextInt(0));
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
     position.set(Position.KEY_STEPS, parser.nextInt(0));
 
     int status = parser.nextHexInt(0);
     position.set(Position.KEY_ALARM, decodeAlarm(status));
     if (BitUtil.check(status, 4)) {
         position.set(Position.KEY_MOTION, true);
     }
 
-        String[] values = parser.next().split(",");
-        int index = 0;
-
+    // Process network information
+    String networkData = parser.next();
     Network network = new Network();
 
-        int cellCount = Integer.parseInt(values[index++]);
+    // The network fields are comma-separated. In some cases the first token
+    // is "FFFF" (in hex) which indicates that network data is not available.
+    String[] values = networkData.split(",");
+    int index = 0;
+    if (values.length > 0 && "FFFF".equalsIgnoreCase(values[0])) {
+        // Skip network processing if the first token is "FFFF"
+    } else {
+        int cellCount;
+        try {
+            cellCount = Integer.parseInt(values[index++]);
+        } catch (NumberFormatException e) {
+            cellCount = 0;
+        }
         if (cellCount > 0) {
-            index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+            // Skip timing advance field if available
+            if (index < values.length) {
+                index++;
+            }
+            int mcc = (index < values.length && !values[index].isEmpty()) ? Integer.parseInt(values[index++]) : 0;
+            int mnc = (index < values.length && !values[index].isEmpty()) ? Integer.parseInt(values[index++]) : 0;
 
-            for (int i = 0; i < cellCount; i++) {
+            for (int i = 0; i < cellCount && index + 2 < values.length; i++) {
                 int lac = Integer.parseInt(values[index++]);
                 int cid = Integer.parseInt(values[index++]);
                 String rssi = values[index++];
                 if (!rssi.isEmpty()) {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
                 } else {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                 }
             }
         }
 
         if (index < values.length && !values[index].isEmpty()) {
             int wifiCount = Integer.parseInt(values[index++]);
 
-            for (int i = 0; i < wifiCount; i++) {
-                index += 1; // wifi name
+            for (int i = 0; i < wifiCount && index + 2 < values.length; i++) {
+                index++; // skip wifi name
                 String macAddress = values[index++];
                 String rssi = values[index++];
                 if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
                     network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
                 }
             }
         }
+    }
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+    // Only attach network information if any cell towers or wifi access points were added.
+    if ((network.getCellTowers() != null && !network.getCellTowers().isEmpty()) ||
+        (network.getWifiAccessPoints() != null && !network.getWifiAccessPoints().isEmpty())) {
         position.setNetwork(network);
     }
 
     return position;
 }
\ No newline at end of file
