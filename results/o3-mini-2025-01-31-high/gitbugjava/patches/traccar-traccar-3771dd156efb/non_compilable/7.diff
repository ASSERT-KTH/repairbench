diff --git a/tmp/b7e2087c-d3cb-455f-9e7b-a7c539599036_buggy.java b/tmp/1d3f1c88-ede7-41a7-b793-7f9aed826f26_fixed.java
index 3da904d..8f4ebbf 100644
--- a/tmp/b7e2087c-d3cb-455f-9e7b-a7c539599036_buggy.java
+++ b/tmp/1d3f1c88-ede7-41a7-b793-7f9aed826f26_fixed.java
@@ -1,73 +1,119 @@
 private Position decodePosition(DeviceSession deviceSession, String data) {
 
     Parser parser = new Parser(PATTERN_POSITION, data);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
     position.setCourse(parser.nextDouble(0));
     position.setAltitude(parser.nextDouble(0));
 
     position.set(Position.KEY_SATELLITES, parser.nextInt(0));
     position.set(Position.KEY_RSSI, parser.nextInt(0));
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
     position.set(Position.KEY_STEPS, parser.nextInt(0));
 
     int status = parser.nextHexInt(0);
     position.set(Position.KEY_ALARM, decodeAlarm(status));
     if (BitUtil.check(status, 4)) {
         position.set(Position.KEY_MOTION, true);
     }
 
+    // Parse network information
     String[] values = parser.next().split(",");
     int index = 0;
-
     Network network = new Network();
 
+    // --- Process cell tower data ---
+    if (values.length > index) {
         int cellCount = Integer.parseInt(values[index++]);
         if (cellCount > 0) {
-            index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+            // skip timing advance
+            index++;
+
+            // Parse MCC; if token equals "FFFF" then treat as 0
+            int mcc = 0;
+            if (index < values.length && !values[index].isEmpty() && !values[index].equalsIgnoreCase("FFFF")) {
+                mcc = Integer.parseInt(values[index]);
+            }
+            index++;
+
+            // Parse MNC
+            int mnc = 0;
+            if (index < values.length && !values[index].isEmpty() && !values[index].equalsIgnoreCase("FFFF")) {
+                mnc = Integer.parseInt(values[index]);
+            }
+            index++;
 
             for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
-                String rssi = values[index++];
-                if (!rssi.isEmpty()) {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
-                } else {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
-                }
-            }
+                // LAC: if equals "FFFF" or "FFFE", use 0
+                int lac = 0;
+                if (index < values.length && !values[index].isEmpty()
+                        && !values[index].equalsIgnoreCase("FFFF")
+                        && !values[index].equalsIgnoreCase("FFFE")) {
+                    lac = Integer.parseInt(values[index]);
                 }
+                index++;
 
+                // CID: if token contains letters, parse as hex, else as decimal
+                int cid = 0;
                 if (index < values.length && !values[index].isEmpty()) {
+                    String cidStr = values[index];
+                    if (cidStr.matches("\\d+")) {
+                        cid = Integer.parseInt(cidStr);
+                    } else {
+                        cid = Integer.parseInt(cidStr, 16);
+                    }
+                }
+                index++;
+
+                // Cell tower RSSI: treat "FFFF" or "FFFE" as 0
+                int cellRssi = 0;
+                if (index < values.length && !values[index].isEmpty()
+                        && !values[index].equalsIgnoreCase("FFFF")
+                        && !values[index].equalsIgnoreCase("FFFE")) {
+                    cellRssi = Integer.parseInt(values[index]);
+                }
+                index++;
+
+                network.addCellTower(CellTower.from(mcc, mnc, lac, cid, cellRssi));
+            }
+        }
+    }
+
+    // --- Process Wiâ€‘Fi data ---
+    if (values.length > index && !values[index].isEmpty()) {
         int wifiCount = Integer.parseInt(values[index++]);
 
         for (int i = 0; i < wifiCount; i++) {
-                index += 1; // wifi name
-                String macAddress = values[index++];
-                String rssi = values[index++];
-                if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
-                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+            // Skip wifi name
+            index++;
+            String macAddress = index < values.length ? values[index++] : "";
+            String wifiRssiStr = index < values.length ? values[index++] : "";
+            // If the MAC or RSSI value is missing or the RSSI token equals "FFFF" or "FFFE", skip it.
+            if (!macAddress.isEmpty() && !macAddress.equals("0")
+                    && !wifiRssiStr.isEmpty()
+                    && !wifiRssiStr.equalsIgnoreCase("FFFF")
+                    && !wifiRssiStr.equalsIgnoreCase("FFFE")) {
+                network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(wifiRssiStr)));
             }
         }
     }
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+    if ((network.getCellTowers() != null && !network.getCellTowers().isEmpty())
+            || (network.getWifiAccessPoints() != null && !network.getWifiAccessPoints().isEmpty())) {
         position.setNetwork(network);
     }
 
     return position;
 }
\ No newline at end of file
