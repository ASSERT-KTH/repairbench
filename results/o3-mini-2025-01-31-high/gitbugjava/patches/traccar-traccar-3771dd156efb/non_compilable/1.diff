diff --git a/tmp/e8cd3ff4-bff2-4082-b90e-a70ea515c595_buggy.java b/tmp/4b2ad821-5c38-406d-a386-5f3ecac3a0a0_fixed.java
index 3da904d..f259bec 100644
--- a/tmp/e8cd3ff4-bff2-4082-b90e-a70ea515c595_buggy.java
+++ b/tmp/4b2ad821-5c38-406d-a386-5f3ecac3a0a0_fixed.java
@@ -1,73 +1,81 @@
 private Position decodePosition(DeviceSession deviceSession, String data) {
 
     Parser parser = new Parser(PATTERN_POSITION, data);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
-
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
     position.setCourse(parser.nextDouble(0));
     position.setAltitude(parser.nextDouble(0));
 
     position.set(Position.KEY_SATELLITES, parser.nextInt(0));
     position.set(Position.KEY_RSSI, parser.nextInt(0));
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
     position.set(Position.KEY_STEPS, parser.nextInt(0));
 
     int status = parser.nextHexInt(0);
     position.set(Position.KEY_ALARM, decodeAlarm(status));
     if (BitUtil.check(status, 4)) {
         position.set(Position.KEY_MOTION, true);
     }
 
+    // The remainder string (network info) can contain both decimal and hex values.
     String[] values = parser.next().split(",");
     int index = 0;
-
     Network network = new Network();
 
-        int cellCount = Integer.parseInt(values[index++]);
+    // Helper: if the string contains only digits, parse as decimal;
+    // otherwise parse using base 16.
+    java.util.function.Function<String, Integer> parseIntAuto = s -> {
+        if (s.matches("\\d+")) {
+            return Integer.parseInt(s);
+        } else {
+            return Integer.parseInt(s, 16);
+        }
+    };
+
+    int cellCount = parseIntAuto.apply(values[index++]);
     if (cellCount > 0) {
-            index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+        index += 1; // skip timing advance
+        int mcc = !values[index].isEmpty() ? parseIntAuto.apply(values[index++]) : 0;
+        int mnc = !values[index].isEmpty() ? parseIntAuto.apply(values[index++]) : 0;
 
         for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
+            int lac = parseIntAuto.apply(values[index++]);
+            int cid = parseIntAuto.apply(values[index++]);
             String rssi = values[index++];
             if (!rssi.isEmpty()) {
                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
             } else {
                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
             }
         }
     }
 
     if (index < values.length && !values[index].isEmpty()) {
         int wifiCount = Integer.parseInt(values[index++]);
-
         for (int i = 0; i < wifiCount; i++) {
-                index += 1; // wifi name
+            index += 1; // skip wifi name
             String macAddress = values[index++];
             String rssi = values[index++];
             if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
                 network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
             }
         }
     }
 
     if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
         position.setNetwork(network);
     }
 
     return position;
 }
\ No newline at end of file
