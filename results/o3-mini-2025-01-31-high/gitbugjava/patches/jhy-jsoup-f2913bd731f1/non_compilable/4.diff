diff --git a/tmp/384eed8f-e3e7-4109-9141-1c30de38d257_buggy.java b/tmp/a23f1c81-55a5-4cbc-9b2f-e65a37e03d54_fixed.java
index 016a7f6..4c12022 100644
--- a/tmp/384eed8f-e3e7-4109-9141-1c30de38d257_buggy.java
+++ b/tmp/a23f1c81-55a5-4cbc-9b2f-e65a37e03d54_fixed.java
@@ -1,29 +1,41 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
         trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
         trimTrailing = trimLikeBlock && nextSibling() == null;
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+        // obtain the adjacent nodes once:
         Node next = nextSibling();
-            boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
-
         Node prev = previousSibling();
+        boolean isBlank = isBlank();
+        // if the next node will be indented (or is a blank text node from re-parenting), skip output if this text is blank:
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+                            || (next instanceof TextNode && ((TextNode) next).isBlank());
+        if (couldSkip && isBlank)
+            return;
+
+        // Additionally, if this is a blank text node sandwiched between two elements,
+        // and at least one of its neighbours is block-level, treat it as formatting whitespace and skip it.
+        if (isBlank && prev instanceof Element && next instanceof Element) {
+            boolean prevIsBlock = ((Element) prev).tag().isBlock();
+            boolean nextIsBlock = ((Element) next).tag().isBlock();
+            if (prevIsBlock || nextIsBlock)
+                return;
+        }
+
         if (
             (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
             (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+            (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))
+        ) {
             indent(accum, depth, out);
         }
+    }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
