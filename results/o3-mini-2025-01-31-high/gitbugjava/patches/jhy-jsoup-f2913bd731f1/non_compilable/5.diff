diff --git a/tmp/bce95fe0-5028-4330-9b85-1f8ccdbecc2c_buggy.java b/tmp/a5ce6e30-b66d-4c3b-875a-336858f863d5_fixed.java
index 016a7f6..c26423b 100644
--- a/tmp/bce95fe0-5028-4330-9b85-1f8ccdbecc2c_buggy.java
+++ b/tmp/a5ce6e30-b66d-4c3b-875a-336858f863d5_fixed.java
@@ -1,29 +1,35 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
-            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
+        // When a text node is adjacent to a block element, we want to trim its boundary whitespace.
+        trimLeading = (trimLikeBlock && (siblingIndex == 0
+                        || (previousSibling() instanceof Element
+                            && ((Element) previousSibling()).tag().isBlock())))
+                      || parentNode instanceof Document;
+        trimTrailing = trimLikeBlock && (nextSibling() == null
+                        || (nextSibling() instanceof Element
+                            && ((Element) nextSibling()).tag().isBlock()));
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+        // If this text is just whitespace and the next sibling would normally trigger an indent, skip output.
         Node next = nextSibling();
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+                            || (next instanceof TextNode && ((TextNode) next).isBlank());
+        if (couldSkip && isBlank)
+            return;
 
         Node prev = previousSibling();
-            if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+        if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank)
+            || (out.outline() && siblingNodes().size() > 0 && !isBlank)
+            || (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))) {
             indent(accum, depth, out);
         }
+    }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
