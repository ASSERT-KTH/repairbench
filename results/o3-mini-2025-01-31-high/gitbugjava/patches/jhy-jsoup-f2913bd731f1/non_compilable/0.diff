diff --git a/tmp/c6d7f2e4-4157-4fee-8a3a-089092931417_buggy.java b/tmp/ae28f8b1-f0cf-43f0-8503-14736ca1e777_fixed.java
index 016a7f6..1b75d6f 100644
--- a/tmp/c6d7f2e4-4157-4fee-8a3a-089092931417_buggy.java
+++ b/tmp/ae28f8b1-f0cf-43f0-8503-14736ca1e777_fixed.java
@@ -1,29 +1,36 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+    // True if the parent is “block‐like” (either a block tag or one formatted as a block)
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
+    // If in pretty-print mode and this text is only whitespace in a block context, skip output.
+    if (normaliseWhite && isBlank() && trimLikeBlock)
+        return;
+        
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
         trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
         trimTrailing = trimLikeBlock && nextSibling() == null;
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+        // If this text is just whitespace, and the next node will cause an indent, skip it:
         Node next = nextSibling();
-            boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+        boolean textIsBlank = isBlank();
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+            || (next instanceof TextNode && ((TextNode) next).isBlank());
+        if (couldSkip && textIsBlank)
+            return;
 
         Node prev = previousSibling();
         if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+            (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !textIsBlank) ||
+            (out.outline() && siblingNodes().size() > 0 && !textIsBlank) ||
+            (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))
+        ) {
             indent(accum, depth, out);
         }
+    }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
