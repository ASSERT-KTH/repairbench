diff --git a/tmp/05c07d3e-d361-407a-ad27-50ef04b99f89_buggy.java b/tmp/c5f6452d-5499-4919-a084-59474ef5d9e0_fixed.java
index 016a7f6..ac36651 100644
--- a/tmp/05c07d3e-d361-407a-ad27-50ef04b99f89_buggy.java
+++ b/tmp/c5f6452d-5499-4919-a084-59474ef5d9e0_fixed.java
@@ -1,29 +1,47 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
+        // First, check if this text node is entirely whitespace.
+        boolean blank = isBlank();
+        // If the whitespace immediately follows a block-level element, then skip it.
+        if (blank) {
+            Node previous = previousSibling();
+            if (previous instanceof Element) {
+                Element prevEl = (Element) previous;
+                if (prevEl.tag().isBlock() || prevEl.tag().formatAsBlock())
+                    return;
+            }
+        }
+
         trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
         trimTrailing = trimLikeBlock && nextSibling() == null;
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
-            boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+        // If the next node is one that would be indented or is blank (from reparenting),
+        // and this text node is only whitespace, then skip outputting it.
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+                         || (next instanceof TextNode && ((TextNode) next).isBlank());
+        if (couldSkip && blank)
+            return;
 
-            Node prev = previousSibling();
+        Node previous = previousSibling();
+        // Conditionally indent if this text node isnâ€™t blank and:
+        // - it is the first sibling and the parent formats as block, or
+        // - outline mode is enabled, or
+        // - the previous sibling is a <br> element.
         if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+            (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !blank) ||
+            (out.outline() && siblingNodes().size() > 0 && !blank) ||
+            (siblingIndex > 0 && previous instanceof Element && ((Element) previous).normalName().equals("br"))
+        ) {
             indent(accum, depth, out);
         }
+    }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
