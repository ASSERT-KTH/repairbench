diff --git a/tmp/9578999a-6a79-496d-9103-c269f54e6433_buggy.java b/tmp/64f89720-7e6c-498f-9850-31e391dd1620_fixed.java
index 016a7f6..c3ce497 100644
--- a/tmp/9578999a-6a79-496d-9103-c269f54e6433_buggy.java
+++ b/tmp/64f89720-7e6c-498f-9850-31e391dd1620_fixed.java
@@ -1,29 +1,38 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
+        // Determine if this text consists solely of whitespace.
+        boolean isBlank = isBlank();
+        // --- FIX: If a blank text node sits between non-text siblings (e.g. between elements),
+        // itâ€™s only formatting cruft, so skip outputting it.
+        if (isBlank
+                && ((previousSibling() == null || !(previousSibling() instanceof TextNode))
+                    && (nextSibling() == null || !(nextSibling() instanceof TextNode)))) {
+            return;
+        }
+
         trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
         trimTrailing = trimLikeBlock && nextSibling() == null;
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+        // If this text is just whitespace, and the next node is about to be indented,
+        // skip this text. (For example, a newline between elements that should be collapsed.)
         Node next = nextSibling();
-            boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+            || (next instanceof TextNode && ((TextNode) next).isBlank());
+        if (couldSkip && isBlank)
+            return;
 
         Node prev = previousSibling();
-            if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+        if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank)
+            || (out.outline() && siblingNodes().size() > 0 && !isBlank)
+            || (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")))
             indent(accum, depth, out);
     }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
