diff --git a/tmp/6cff3eea-2fe1-4739-9c19-7fe1e9f58806_buggy.java b/tmp/923b761b-e1cd-4d94-9906-b5fc5e9a0c92_fixed.java
index 6d50be3..d8f0083 100644
--- a/tmp/6cff3eea-2fe1-4739-9c19-7fe1e9f58806_buggy.java
+++ b/tmp/923b761b-e1cd-4d94-9906-b5fc5e9a0c92_fixed.java
@@ -1,194 +1,226 @@
 private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
     List<Position> positions = new LinkedList<>();
 
-        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
+    // Skip header up to the first comma
+    int commaIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+    if (commaIndex < 0) {
+        return positions;
+    }
+    buf.readerIndex(commaIndex + 1);
+
     String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
-        buf.skipBytes(1 + 3 + 1);
+    buf.skipBytes(5); // skip 1 + 3 + 1
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
     buf.readUnsignedIntLE(); // remaining cache
     int count = buf.readUnsignedShortLE();
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         buf.readUnsignedShortLE(); // length
         buf.readUnsignedShortLE(); // index
 
         int paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            // First group of parameters (1-byte values)
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             switch (id) {
                 case 0x01:
                     position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                     break;
                 case 0x05:
                     position.setValid(buf.readUnsignedByte() > 0);
                     break;
                 case 0x06:
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
                 case 0x07:
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     break;
                 case 0x14:
                     position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                     break;
                 case 0x15:
                     position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                     break;
                 case 0x47:
                     int lockState = buf.readUnsignedByte();
                     if (lockState > 0) {
                         position.set(Position.KEY_LOCK, lockState == 2);
                     }
                     break;
                 case 0x97:
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                     break;
                 case 0x9D:
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                     break;
                 case 0xFE69:
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     break;
                 default:
                     buf.readUnsignedByte();
                     break;
             }
         }
 
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            // Second group of parameters (mostly 2‐byte values)
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             switch (id) {
                 case 0x08:
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                     break;
                 case 0x09:
                     position.setCourse(buf.readUnsignedShortLE());
                     break;
                 case 0x0A:
                     position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
                     break;
                 case 0x0B:
                     position.setAltitude(buf.readShortLE());
                     break;
                 case 0x16:
                     position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x19:
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x1A:
                     position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x40:
                     position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
                     break;
                 case 0x91:
                 case 0x92:
                     position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
                     break;
                 case 0x98:
                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
                     break;
                 case 0x99:
                     position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                     break;
                 case 0x9C:
                     position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
                     break;
                 case 0x9F:
                     position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
                     break;
                 case 0xC9:
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
                     break;
                 default:
                     buf.readUnsignedShortLE();
                     break;
             }
         }
 
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            // Third group of parameters (4-byte or int values etc.)
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             switch (id) {
                 case 0x02:
                     position.setLatitude(buf.readIntLE() * 0.000001);
                     break;
                 case 0x03:
                     position.setLongitude(buf.readIntLE() * 0.000001);
                     break;
                 case 0x04:
                     position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
                     break;
                 case 0x0C:
                 case 0x9B:
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                     break;
                 case 0x0D:
                     position.set("runtime", buf.readUnsignedIntLE());
                     break;
                 case 0x25:
                     position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
                     break;
                 case 0xA0:
                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
                     break;
                 case 0xA2:
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
                     break;
                 default:
                     buf.readUnsignedIntLE();
                     break;
             }
         }
 
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            // Fourth group of parameters (variable length)
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             int length = buf.readUnsignedByte();
             switch (id) {
                 case 0x2A:
                 case 0x2B:
                 case 0x2C:
                 case 0x2D:
                 case 0x2E:
                 case 0x2F:
                 case 0x30:
                 case 0x31:
+                    // Expected: 1 byte label + 2 bytes temperature value (total = 3 bytes)
+                    if (buf.readableBytes() >= 3) {
                         buf.readUnsignedByte(); // label
                         position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                        // If the parameter length is greater than 3, skip the extra bytes (if any)
+                        int extra = length - 3;
+                        if (extra > 0) {
+                            buf.skipBytes(Math.min(extra, buf.readableBytes()));
+                        }
+                    } else {
+                        buf.skipBytes(buf.readableBytes());
+                    }
                     break;
                 case 0xFE31:
+                    // Alarm parameter: 1 byte alarm protocol + 1 byte alarm type = 2 bytes
+                    if (buf.readableBytes() >= 2) {
                         buf.readUnsignedByte(); // alarm protocol
                         buf.readUnsignedByte(); // alarm type
-                        buf.skipBytes(length - 2);
+                        int toSkip = length - 2;
+                        buf.skipBytes(Math.min(toSkip, buf.readableBytes()));
+                    } else {
+                        buf.skipBytes(buf.readableBytes());
+                    }
                     break;
                 case 0xFEA8:
+                    // Battery info: 1 byte battery status + 1 byte battery level + 1 byte battery alert = 3 bytes
+                    if (buf.readableBytes() >= 3) {
                         buf.readUnsignedByte(); // battery status
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                         buf.readUnsignedByte(); // battery alert
+                    } else {
+                        buf.skipBytes(buf.readableBytes());
+                    }
                     break;
                 default:
-                        buf.skipBytes(length);
+                    // For unknown parameters, make sure we do not try to skip more than available.
+                    buf.skipBytes(Math.min(length, buf.readableBytes()));
                     break;
             }
         }
 
         positions.add(position);
     }
 
     return positions;
 }
\ No newline at end of file
