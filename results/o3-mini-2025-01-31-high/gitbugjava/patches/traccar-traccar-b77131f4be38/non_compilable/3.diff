diff --git a/tmp/a54d2a35-e0d3-4802-832d-d345acf3cab1_buggy.java b/tmp/229a42c0-f580-4706-a899-aa3d0a934881_fixed.java
index 7b8ee38..653079a 100644
--- a/tmp/a54d2a35-e0d3-4802-832d-d345acf3cab1_buggy.java
+++ b/tmp/229a42c0-f580-4706-a899-aa3d0a934881_fixed.java
@@ -1,179 +1,181 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     ByteBuf buf = (ByteBuf) msg;
 
+    // Skip the '[' header and read manufacturer (assumed to be a 2‚Äêbyte ASCII string)
     buf.skipBytes(1); // '[' header
     manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
     buf.skipBytes(1); // '*' delimiter
 
+    // Read device id field up to the next '*'
     int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+    if (idIndex < 0) {
+        return null;
+    }
     String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
 
     buf.skipBytes(1); // '*' delimiter
 
+    // Optional index field: check whether the next part is a hexadecimal index
     String index = null;
     int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
+    if (contentIndex != -1 
+            && contentIndex + 5 < buf.writerIndex() 
+            && buf.getByte(contentIndex + 5) == '*'
             && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
-            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
+        int indexLength = contentIndex - buf.readerIndex();
         hasIndex = true;
         index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
-            buf.skipBytes(1); // '*' delimiter
+        buf.skipBytes(1); // skip the '*' delimiter after index field
     }
 
-        buf.skipBytes(4); // length
-        buf.skipBytes(1); // '*' delimiter
+    buf.skipBytes(4); // Skip length field
+    buf.skipBytes(1); // Skip '*' delimiter
 
-        buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
+    // Remove the ending ']' by reducing the writer index
+    buf.writerIndex(buf.writerIndex() - 1);
 
+    // Read the message type by reading until the next comma (if present)
     contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
     if (contentIndex < 0) {
         contentIndex = buf.writerIndex();
     }
-
     String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
-
     if (contentIndex < buf.writerIndex()) {
         buf.readerIndex(contentIndex + 1);
     }
 
+    // Process the message based on its type
     if (type.equals("INIT")) {
-
         sendResponse(channel, id, index, "INIT,1");
 
     } else if (type.equals("LK")) {
-
         sendResponse(channel, id, index, "LK");
 
         if (buf.isReadable()) {
             String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
             if (values.length >= 3) {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
-
                 getLastLocation(position, null);
-
                 position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
                 position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
-
                 return position;
             }
         }
 
     } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
-
         Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
-
         if (type.startsWith("AL")) {
             if (position != null) {
                 position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
             }
             sendResponse(channel, id, index, "AL");
         }
-
         return position;
 
     } else if (type.equals("TKQ") || type.equals("TKQ2")) {
-
         sendResponse(channel, id, index, type);
 
     } else if (type.equalsIgnoreCase("PULSE")
             || type.equalsIgnoreCase("HEART")
             || type.equalsIgnoreCase("BLOOD")
             || type.equalsIgnoreCase("BPHRT")
-                || type.equalsIgnoreCase("btemp2")) {
+            || type.equalsIgnoreCase("btemp2")
+            || type.equalsIgnoreCase("TEMP")) {
 
         if (buf.isReadable()) {
-
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
-
             getLastLocation(position, new Date());
-
             String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
+            // For messages with type "TEMP" (from [ ...*TEMP,36.5])
+            if (type.equalsIgnoreCase("TEMP")) {
+                if (values.length > 0 && !values[0].isEmpty()) {
+                    position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[0]));
+                }
+            } else if (type.equalsIgnoreCase("btemp2")) {
                 int valueIndex = 0;
-
-                if (type.equalsIgnoreCase("btemp2")) {
-                    if (Integer.parseInt(values[valueIndex++]) > 0) {
+                if (values.length >= 2 && Integer.parseInt(values[valueIndex++]) > 0) {
                     position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
                 }
             } else {
+                int valueIndex = 0;
                 if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
+                    if (values.length >= 3) {
                         position.set("pressureHigh", values[valueIndex++]);
                         position.set("pressureLow", values[valueIndex++]);
                     }
-                    if (valueIndex <= values.length - 1) {
+                }
+                if (values.length > valueIndex) {
                     position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
                 }
             }
-
             return position;
-
         }
 
     } else if (type.equals("img")) {
-
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
-
         getLastLocation(position, null);
-
         int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-            buf.readerIndex(timeIndex + 12 + 2);
+        if (timeIndex < 0) {
+            return null;
+        }
+        // Advance reader index past the time field (12 + 2 characters)
+        buf.readerIndex(timeIndex + 14);
         position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
-
         return position;
 
     } else if (type.equals("JXTK")) {
-
-            int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
-            String[] values = buf.readCharSequence(
-                    dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
-
+        int commaIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4);
+        if (commaIndex < 0) {
+            return null;
+        }
+        int dataIndex = commaIndex + 1;
+        String[] values = buf.readCharSequence(dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII)
+                .toString().split(",");
+        if (values.length < 4) {
+            return null;
+        }
         int current = Integer.parseInt(values[2]);
         int total = Integer.parseInt(values[3]);
 
         if (audio == null) {
             audio = Unpooled.buffer();
         }
         audio.writeBytes(buf);
 
         sendResponse(channel, id, index, "JXTKR,1");
 
         if (current < total) {
             return null;
         } else {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             getLastLocation(position, null);
             position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
             audio.release();
             audio = null;
             return position;
         }
 
     } else if (type.equals("TK")) {
-
         if (buf.readableBytes() == 1) {
             return null;
         }
-
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
-
         getLastLocation(position, null);
-
         position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
-
         return position;
-
     }
 
     return null;
 }
\ No newline at end of file
