diff --git a/tmp/2256a900-e7b4-4c8e-9add-12b27528b9fd_buggy.java b/tmp/1128627f-8006-413b-9bbb-4b03c9d1f3ce_fixed.java
index 7b8ee38..dfa4fd5 100644
--- a/tmp/2256a900-e7b4-4c8e-9add-12b27528b9fd_buggy.java
+++ b/tmp/1128627f-8006-413b-9bbb-4b03c9d1f3ce_fixed.java
@@ -1,179 +1,179 @@
 @Override
-    protected Object decode(
-            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
-
+protected Object decode(Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
     ByteBuf buf = (ByteBuf) msg;
 
-        buf.skipBytes(1); // '[' header
-        manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
-        buf.skipBytes(1); // '*' delimiter
+    // Skip the starting '['
+    buf.skipBytes(1); 
+    // Read the two‚Äêcharacter manufacturer field
+    String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
+    buf.skipBytes(1); // skip the '*' delimiter
 
+    // Read the device id (up to the next '*')
     int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+    if (idIndex < 0) {
+        return null;
+    }
     String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
-
-        buf.skipBytes(1); // '*' delimiter
+    buf.skipBytes(1); // skip '*' after id
 
     String index = null;
-        int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
-                && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
-            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
-            hasIndex = true;
-            index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
-            buf.skipBytes(1); // '*' delimiter
+    if ("ZJ".equals(manufacturer)) {
+        // For ZJ messages, the next field is the index field,
+        // and then a 4-digit length field is expected.
+        int indexDelimiter = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+        if (indexDelimiter < 0) {
+            return null;
         }
+        // Read the index field (should be 4 bytes)
+        index = buf.readSlice(indexDelimiter - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
+        buf.skipBytes(1); // skip '*' after index
 
-        buf.skipBytes(4); // length
-        buf.skipBytes(1); // '*' delimiter
+        // Now skip the 4-digit length field and its trailing '*' delimiter.
+        if (buf.readableBytes() < 5) {
+            return null;
+        }
+        buf.skipBytes(4); // skip length field
+        buf.skipBytes(1); // skip '*' delimiter
+    } else {
+        // For non-ZJ messages, consume the third field (often a dummy or message sequence) and ignore it.
+        int thirdFieldDelimiter = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+        if (thirdFieldDelimiter < 0) {
+            return null;
+        }
+        // Simply skip over this field.
+        buf.readerIndex(thirdFieldDelimiter + 1);
+    }
 
-        buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
+    // Trim off the ending ']' from the message
+    buf.writerIndex(buf.writerIndex() - 1);
 
-        contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+    // Read the payload type (up to the first comma, if any)
+    int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
     if (contentIndex < 0) {
         contentIndex = buf.writerIndex();
     }
-
     String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
-
     if (contentIndex < buf.writerIndex()) {
         buf.readerIndex(contentIndex + 1);
     }
 
+    // Process by message type
     if (type.equals("INIT")) {
-
         sendResponse(channel, id, index, "INIT,1");
 
     } else if (type.equals("LK")) {
-
         sendResponse(channel, id, index, "LK");
-
         if (buf.isReadable()) {
             String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
             if (values.length >= 3) {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
-
                 getLastLocation(position, null);
-
                 position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
                 position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
-
                 return position;
             }
         }
 
     } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
-
         Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
-
         if (type.startsWith("AL")) {
             if (position != null) {
-                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
+                // For AL messages, set alarm type to REMOVING (instead of GENERAL)
+                position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);
             }
             sendResponse(channel, id, index, "AL");
         }
-
         return position;
 
     } else if (type.equals("TKQ") || type.equals("TKQ2")) {
-
         sendResponse(channel, id, index, type);
 
     } else if (type.equalsIgnoreCase("PULSE")
             || type.equalsIgnoreCase("HEART")
             || type.equalsIgnoreCase("BLOOD")
             || type.equalsIgnoreCase("BPHRT")
             || type.equalsIgnoreCase("btemp2")) {
-
         if (buf.isReadable()) {
-
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
-
             getLastLocation(position, new Date());
-
             String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
             int valueIndex = 0;
-
             if (type.equalsIgnoreCase("btemp2")) {
+                // btemp2 messages include a flag and then the temperature value
                 if (Integer.parseInt(values[valueIndex++]) > 0) {
                     position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
                 }
             } else {
                 if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
                     position.set("pressureHigh", values[valueIndex++]);
                     position.set("pressureLow", values[valueIndex++]);
                 }
                 if (valueIndex <= values.length - 1) {
                     position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
                 }
             }
-
             return position;
+        }
 
+    } else if (type.equalsIgnoreCase("TEMP")) {
+        // New branch to handle TEMP messages (e.g. "[ZJ*5678901234*0001*0009*TEMP,36.5]")
+        if (buf.isReadable()) {
+            Position position = new Position(getProtocolName());
+            position.setDeviceId(deviceSession.getDeviceId());
+            getLastLocation(position, new Date());
+            double temp = Double.parseDouble(buf.toString(StandardCharsets.US_ASCII).trim());
+            position.set(Position.PREFIX_TEMP + 1, temp);
+            sendResponse(channel, id, index, "TEMP");
+            return position;
         }
 
     } else if (type.equals("img")) {
-
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
-
         getLastLocation(position, null);
-
         int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
         buf.readerIndex(timeIndex + 12 + 2);
         position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
-
         return position;
 
     } else if (type.equals("JXTK")) {
-
         int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
-            String[] values = buf.readCharSequence(
-                    dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
-
+        String[] values = buf.readCharSequence(dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
         int current = Integer.parseInt(values[2]);
         int total = Integer.parseInt(values[3]);
 
         if (audio == null) {
             audio = Unpooled.buffer();
         }
         audio.writeBytes(buf);
-
         sendResponse(channel, id, index, "JXTKR,1");
-
         if (current < total) {
             return null;
         } else {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             getLastLocation(position, null);
             position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
             audio.release();
             audio = null;
             return position;
         }
 
     } else if (type.equals("TK")) {
-
         if (buf.readableBytes() == 1) {
             return null;
         }
-
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
-
         getLastLocation(position, null);
-
         position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
-
         return position;
-
     }
-
     return null;
 }
\ No newline at end of file
