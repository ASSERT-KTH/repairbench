diff --git a/tmp/8ee8750c-1424-4990-9c75-50ed7065b3a8_buggy.java b/tmp/b10d758a-df54-457b-9491-b3436dadfc12_fixed.java
index 7374e5f..c98558c 100644
--- a/tmp/8ee8750c-1424-4990-9c75-50ed7065b3a8_buggy.java
+++ b/tmp/b10d758a-df54-457b-9491-b3436dadfc12_fixed.java
@@ -1,61 +1,103 @@
-    private Object decodeLocationNew(
-            Channel channel, SocketAddress remoteAddress, String sentence) {
+private Object decodeLocationNew(Channel channel, SocketAddress remoteAddress, String sentence) {
 
     Parser parser = new Parser(PATTERN_NEW, sentence);
     if (!parser.matches()) {
         return null;
     }
 
+    // first two groups: unique device id and index
     String imei = parser.next();
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
     String index = parser.next();
 
+    // The next group is the event/alarm field which (for this protocol)
+    // is reported as something like "A03". The parser’s nextInt() call here
+    // converts it (for example, by ignoring the letter) and decodeAlarm() then
+    // maps the numerical value.
+    int alarmCode = parser.nextInt();
+    Object alarm = decodeAlarm(alarmCode);
+
+    // The next field is an optional driver unique id.
+    // In many messages this field is present (even if empty),
+    // so we simply skip it.
+    parser.next();
+
+    // Now the device time is parsed.
+    Date deviceTime = parser.nextDateTime();
+
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
-
-        position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
-
-        position.setDeviceTime(parser.nextDateTime());
+    position.set(Position.KEY_ALARM, alarm);
+    position.setDeviceTime(deviceTime);
 
     Network network = new Network();
+
+    // After the device time, some messages include cell tower info.
+    // If the next token contains a pipe, we assume it holds cell tower data.
+    String cellTowerToken = parser.next();
+    if (cellTowerToken.contains("|")) {
+        String[] tower = cellTowerToken.split("\\|");
         network.addCellTower(CellTower.from(
-                parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
+                Integer.parseInt(tower[0]),
+                Integer.parseInt(tower[1]),
+                Integer.parseInt(tower[2], 16),
+                Integer.parseInt(tower[3], 16)));
 
         position.set(Position.KEY_BATTERY, parser.nextDouble());
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
         position.set(Position.KEY_STATUS, parser.nextHexInt());
+    }
 
-        if (parser.hasNext(5)) {
-
+    /*
+     * Now we get to the GPS part.
+     * For messages that carried network info, the GPS branch carries
+     * one extra field at its start.
+     * For example, in the message
+     *
+     * $$99,865413050150407,7F,A03,,230626072722,460|0|25FC|AC2AB0B,3.74,52,0019,0,A,0,13,22.643466,114.018211*74
+     *
+     * after the common fields the tokens are:
+     *    "0" , "A" , "0" , "13" , "22.643466" , "114.018211"
+     *
+     * We want to ignore the first extra token ("0"), then treat "A" as the valid flag,
+     * then take the next value ("0") as the speed (converted from kph to knots)
+     * and then "13" as the satellite count.
+     */
+    if (parser.hasNext(6)) {
+        // Skip the first extra field
+        parser.next();
+        // Now the next token should be the GPS validity flag.
         position.setValid(parser.next().equals("A"));
         position.setFixTime(position.getDeviceTime());
-            position.set(Position.KEY_SATELLITES, parser.nextInt());
+
+        // Note: the order here is important.
+        // For messages with network info the protocol sends speed first,
+        // then the number of satellites.
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
+        position.set(Position.KEY_SATELLITES, parser.nextInt());
         position.setLatitude(parser.nextDouble());
         position.setLongitude(parser.nextDouble());
-
     } else {
-
+        // Otherwise, the protocol may have sent Wi‑Fi access point information.
         String[] points = parser.next().split("\\|");
         for (String point : points) {
             String[] wifi = point.split(":");
             String mac = wifi[0].replaceAll("(..)", "$1:");
             network.addWifiAccessPoint(WifiAccessPoint.from(
                     mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
         }
-
     }
 
     position.setNetwork(network);
 
     DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
     String response = index + ",A03," + dateFormat.format(new Date());
     sendResponse(channel, remoteAddress, imei, response);
 
     return position;
 }
\ No newline at end of file
