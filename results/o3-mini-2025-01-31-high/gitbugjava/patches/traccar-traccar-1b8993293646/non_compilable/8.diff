diff --git a/tmp/c6e212c9-27e8-4737-9239-7da614312d4c_buggy.java b/tmp/398b56cc-5e0d-4b81-93de-2d19f452aa92_fixed.java
index 7374e5f..a4c0d26 100644
--- a/tmp/c6e212c9-27e8-4737-9239-7da614312d4c_buggy.java
+++ b/tmp/398b56cc-5e0d-4b81-93de-2d19f452aa92_fixed.java
@@ -1,61 +1,81 @@
-    private Object decodeLocationNew(
-            Channel channel, SocketAddress remoteAddress, String sentence) {
+private Object decodeLocationNew(Channel channel, SocketAddress remoteAddress, String sentence) {
 
     Parser parser = new Parser(PATTERN_NEW, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     String imei = parser.next();
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
     String index = parser.next();
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
+    // The alarm field is sent as something like "A03" and parsed via nextInt() by the custom parser.
     position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
 
+    // Device time is expected next (the parserâ€™s nextDateTime() handles formats appropriately)
     position.setDeviceTime(parser.nextDateTime());
 
     Network network = new Network();
     network.addCellTower(CellTower.from(
             parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
 
     position.set(Position.KEY_BATTERY, parser.nextDouble());
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
     position.set(Position.KEY_STATUS, parser.nextHexInt());
 
-        if (parser.hasNext(5)) {
-
+    // In many messages the location part contains an extra token.
+    // There are normally either 5 tokens:
+    //    valid, satellites, speed, latitude, longitude
+    // or 6 tokens:
+    //    extra, valid, speed, satellites, latitude, longitude
+    // For example, in one test the tokens after status are:
+    //    "0", "A", "0", "13", "22.643466", "114.018211*74"
+    // We must skip the extra field so that satellites is read as 13.
+    if (parser.hasNext(6)) {
+        // Skip extra token.
+        parser.next();
+        // Then token order is: valid, speed, satellites, latitude, longitude.
+        position.setValid(parser.next().equals("A"));
+        int speed = parser.nextInt();
+        int satellites = parser.nextInt();
+        position.setFixTime(position.getDeviceTime());
+        // Now the satellite count is as expected.
+        position.set(Position.KEY_SATELLITES, satellites);
+        position.setSpeed(UnitsConverter.knotsFromKph(speed));
+        position.setLatitude(parser.nextDouble());
+        position.setLongitude(parser.nextDouble());
+    } else if (parser.hasNext(5)) {
+        // Otherwise the tokens come in the default order:
+        // valid, satellites, speed, latitude, longitude.
         position.setValid(parser.next().equals("A"));
         position.setFixTime(position.getDeviceTime());
         position.set(Position.KEY_SATELLITES, parser.nextInt());
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
         position.setLatitude(parser.nextDouble());
         position.setLongitude(parser.nextDouble());
-
     } else {
-
         String[] points = parser.next().split("\\|");
         for (String point : points) {
             String[] wifi = point.split(":");
             String mac = wifi[0].replaceAll("(..)", "$1:");
             network.addWifiAccessPoint(WifiAccessPoint.from(
                     mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
         }
-
     }
 
     position.setNetwork(network);
 
     DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
     String response = index + ",A03," + dateFormat.format(new Date());
     sendResponse(channel, remoteAddress, imei, response);
 
     return position;
 }
\ No newline at end of file
