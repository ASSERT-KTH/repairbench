diff --git a/tmp/7f63daa3-fe44-442d-8c5c-9a89f584dae1_buggy.java b/tmp/1b15805d-50af-4077-a98b-1d1ce7c79dd2_fixed.java
index 7374e5f..4381de4 100644
--- a/tmp/7f63daa3-fe44-442d-8c5c-9a89f584dae1_buggy.java
+++ b/tmp/1b15805d-50af-4077-a98b-1d1ce7c79dd2_fixed.java
@@ -1,61 +1,74 @@
 private Object decodeLocationNew(
         Channel channel, SocketAddress remoteAddress, String sentence) {
 
     Parser parser = new Parser(PATTERN_NEW, sentence);
     if (!parser.matches()) {
         return null;
     }
 
+    // The first field is the message length – skip it.
+    parser.next();
+
     String imei = parser.next();
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
     String index = parser.next();
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
-        position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
+    // The alarm field is a hexadecimal value.
+    position.set(Position.KEY_ALARM, decodeAlarm(parser.nextHexInt()));
+
+    // There is an empty (unused) field here – skip it.
+    parser.next();
 
     position.setDeviceTime(parser.nextDateTime());
 
     Network network = new Network();
+    // The cell tower information comes in one token that the parser
+    // is able to split into four parts.
     network.addCellTower(CellTower.from(
             parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
 
     position.set(Position.KEY_BATTERY, parser.nextDouble());
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
     position.set(Position.KEY_STATUS, parser.nextHexInt());
 
-        if (parser.hasNext(5)) {
-
+    // In the GPS branch the data order is:
+    // [course (ignored)], [validity], [speed], [satellites], [latitude], [longitude].
+    // Previously the satellite count was read too early (as 0). We now first skip the course
+    // and then read speed before satellites so that KEY_SATELLITES gets the proper value.
+    if (parser.hasNext(6)) {
+        // Skip the course field.
+        parser.next();
         position.setValid(parser.next().equals("A"));
-            position.setFixTime(position.getDeviceTime());
-            position.set(Position.KEY_SATELLITES, parser.nextInt());
+        // Now read speed followed by satellite count
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
+        position.set(Position.KEY_SATELLITES, parser.nextInt());
         position.setLatitude(parser.nextDouble());
         position.setLongitude(parser.nextDouble());
-
     } else {
-
+        // In some messages the GPS info is replaced by Wi‑Fi measurements.
+        int wifiCount = parser.nextInt();
         String[] points = parser.next().split("\\|");
         for (String point : points) {
             String[] wifi = point.split(":");
             String mac = wifi[0].replaceAll("(..)", "$1:");
             network.addWifiAccessPoint(WifiAccessPoint.from(
                     mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
         }
-
     }
 
     position.setNetwork(network);
 
     DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
     String response = index + ",A03," + dateFormat.format(new Date());
     sendResponse(channel, remoteAddress, imei, response);
 
     return position;
 }
\ No newline at end of file
