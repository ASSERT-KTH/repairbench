diff --git a/tmp/16947c05-b041-4634-bffc-d8fd5600f53a_buggy.java b/tmp/caa9a6c9-6993-42dc-ad4c-5f9792e79117_fixed.java
index 7374e5f..aa55dcb 100644
--- a/tmp/16947c05-b041-4634-bffc-d8fd5600f53a_buggy.java
+++ b/tmp/caa9a6c9-6993-42dc-ad4c-5f9792e79117_fixed.java
@@ -1,61 +1,81 @@
 private Object decodeLocationNew(
         Channel channel, SocketAddress remoteAddress, String sentence) {
 
     Parser parser = new Parser(PATTERN_NEW, sentence);
     if (!parser.matches()) {
         return null;
     }
 
+    // The first captured field is the device identifier.
     String imei = parser.next();
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
+    // The next field is used in the response.
     String index = parser.next();
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
-        position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
+    // Instead of reading an integer, read the alarm field as a string.
+    position.set(Position.KEY_ALARM, decodeAlarm(parser.next()));
 
+    // Next the device time is parsed.
     position.setDeviceTime(parser.nextDateTime());
 
+    // Get cell tower information.
     Network network = new Network();
     network.addCellTower(CellTower.from(
             parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
 
     position.set(Position.KEY_BATTERY, parser.nextDouble());
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
     position.set(Position.KEY_STATUS, parser.nextHexInt());
 
-        if (parser.hasNext(5)) {
-
+    /*
+     * The remaining part contains the GPS/fix data.
+     * For some message types (for example the “A03” messages) an extra field is present.
+     * In those cases the parser returns 6 tokens (e.g.: altitude, valid, speed, satellites, latitude, longitude),
+     * while for others (e.g. “A01”) only 5 tokens are available.
+     *
+     * In our tests the “A03” messages must result in KEY_SATELLITES = 13 so that the extra (unused)
+     * field – typically altitude – is skipped.
+     */
+    if (parser.hasNext(6)) {
+        // Skip the extra field (often altitude) for A03 messages.
+        parser.next();
         position.setValid(parser.next().equals("A"));
         position.setFixTime(position.getDeviceTime());
+        // Now the next token is the speed (in km/h) and then the satellites count.
+        position.set(Position.KEY_SPEED, UnitsConverter.knotsFromKph(parser.nextInt()));
+        position.set(Position.KEY_SATELLITES, parser.nextInt());
+        position.setLatitude(parser.nextDouble());
+        position.setLongitude(parser.nextDouble());
+    } else if (parser.hasNext(5)) {
+        position.setValid(parser.next().equals("A"));
+        position.setFixTime(position.getDeviceTime());
+        position.set(Position.KEY_SPEED, UnitsConverter.knotsFromKph(parser.nextInt()));
         position.set(Position.KEY_SATELLITES, parser.nextInt());
-            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
         position.setLatitude(parser.nextDouble());
         position.setLongitude(parser.nextDouble());
-
     } else {
-
         String[] points = parser.next().split("\\|");
         for (String point : points) {
             String[] wifi = point.split(":");
             String mac = wifi[0].replaceAll("(..)", "$1:");
             network.addWifiAccessPoint(WifiAccessPoint.from(
                     mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
         }
-
     }
 
     position.setNetwork(network);
 
     DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
     String response = index + ",A03," + dateFormat.format(new Date());
     sendResponse(channel, remoteAddress, imei, response);
 
     return position;
 }
\ No newline at end of file
