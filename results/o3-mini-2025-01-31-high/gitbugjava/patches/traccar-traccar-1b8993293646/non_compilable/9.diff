diff --git a/tmp/02bbe1db-413a-4b32-a0bd-75aec7e617e1_buggy.java b/tmp/be67062e-5690-487f-903b-68d83266f803_fixed.java
index 7374e5f..4dc0b11 100644
--- a/tmp/02bbe1db-413a-4b32-a0bd-75aec7e617e1_buggy.java
+++ b/tmp/be67062e-5690-487f-903b-68d83266f803_fixed.java
@@ -1,61 +1,101 @@
 private Object decodeLocationNew(
         Channel channel, SocketAddress remoteAddress, String sentence) {
 
     Parser parser = new Parser(PATTERN_NEW, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     String imei = parser.next();
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
     String index = parser.next();
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
-        position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
+    // Read the “alarm” field as a string.
+    String alarmField = parser.next();
+    // If the message indicates “D” (for example, a diagnostic) then ignore it.
+    if (alarmField.startsWith("D")) {
+        return null;
+    }
+    // If it is a “B” type message, treat it as a result message.
+    else if (alarmField.startsWith("B")) {
+        String result = parser.next();
+        // Remove any checksum appended (everything after '*')
+        int starPos = result.indexOf('*');
+        if (starPos > 0) {
+            result = result.substring(0, starPos);
+        }
+        position.set(Position.KEY_RESULT, result);
+
+        DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
+        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
+        String response = index + ",A03," + dateFormat.format(new Date());
+        sendResponse(channel, remoteAddress, imei, response);
+
+        return position;
+    }
+    // For alarm messages starting with "A", decode the numeric part.
+    else if (alarmField.startsWith("A")) {
+        // Remove the leading character and parse the rest as an integer.
+        position.set(Position.KEY_ALARM, decodeAlarm(Integer.parseInt(alarmField.substring(1))));
+    }
+
+    // Skip the extra field (which may be empty or an event id not used here)
+    parser.next();
 
     position.setDeviceTime(parser.nextDateTime());
 
     Network network = new Network();
     network.addCellTower(CellTower.from(
             parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
 
     position.set(Position.KEY_BATTERY, parser.nextDouble());
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
     position.set(Position.KEY_STATUS, parser.nextHexInt());
 
-        if (parser.hasNext(5)) {
-
+    // There are two possible layouts for the remaining tokens.
+    // In some messages (with network info) an additional "odometer" value is present.
+    if (parser.hasNext(6)) {
+        // Expected order: odometer, valid flag, speed, satellites, latitude, longitude.
+        position.set(Position.KEY_ODOMETER, parser.nextDouble());
         position.setValid(parser.next().equals("A"));
-            position.setFixTime(position.getDeviceTime());
-            position.set(Position.KEY_SATELLITES, parser.nextInt());
-            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
+        int speed = parser.nextInt();
+        int satellites = parser.nextInt(); // Now the second integer is read as satellites.
+        position.setSpeed(UnitsConverter.knotsFromKph(speed));
+        position.set(Position.KEY_SATELLITES, satellites);
+        position.setLatitude(parser.nextDouble());
+        position.setLongitude(parser.nextDouble());
+    } else if (parser.hasNext(5)) {
+        // Expected order: valid flag, speed, satellites, latitude, longitude.
+        position.setValid(parser.next().equals("A"));
+        int speed = parser.nextInt();
+        int satellites = parser.nextInt(); // Swap order: speed first, then satellites.
+        position.setSpeed(UnitsConverter.knotsFromKph(speed));
+        position.set(Position.KEY_SATELLITES, satellites);
         position.setLatitude(parser.nextDouble());
         position.setLongitude(parser.nextDouble());
-
     } else {
-
         String[] points = parser.next().split("\\|");
         for (String point : points) {
             String[] wifi = point.split(":");
             String mac = wifi[0].replaceAll("(..)", "$1:");
             network.addWifiAccessPoint(WifiAccessPoint.from(
                     mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
         }
-
     }
 
     position.setNetwork(network);
 
     DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
     String response = index + ",A03," + dateFormat.format(new Date());
     sendResponse(channel, remoteAddress, imei, response);
 
     return position;
 }
\ No newline at end of file
