diff --git a/tmp/ecbdb882-f7a2-4518-8e7f-4ea54e5fdcca_buggy.java b/tmp/1d914332-6763-47d7-a1f1-d46ef7ecb5cb_fixed.java
index 7374e5f..abb95e0 100644
--- a/tmp/ecbdb882-f7a2-4518-8e7f-4ea54e5fdcca_buggy.java
+++ b/tmp/1d914332-6763-47d7-a1f1-d46ef7ecb5cb_fixed.java
@@ -1,61 +1,62 @@
-    private Object decodeLocationNew(
-            Channel channel, SocketAddress remoteAddress, String sentence) {
+private Object decodeLocationNew(Channel channel, SocketAddress remoteAddress, String sentence) {
 
     Parser parser = new Parser(PATTERN_NEW, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     String imei = parser.next();
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
     String index = parser.next();
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
 
     position.setDeviceTime(parser.nextDateTime());
 
     Network network = new Network();
     network.addCellTower(CellTower.from(
             parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
 
     position.set(Position.KEY_BATTERY, parser.nextDouble());
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
     position.set(Position.KEY_STATUS, parser.nextHexInt());
 
-        if (parser.hasNext(5)) {
-
+    // In the new messages an extra field is present before the GPS fix data.
+    // The expected order of tokens is:
+    // [unused], valid flag, speed, satellites, latitude, longitude
+    if (parser.hasNext(6)) {
+        // skip the extra (unused) field, for example odometer
+        parser.next();
         position.setValid(parser.next().equals("A"));
         position.setFixTime(position.getDeviceTime());
-            position.set(Position.KEY_SATELLITES, parser.nextInt());
+        // Note: speed comes before satellites in the message
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
+        position.set(Position.KEY_SATELLITES, parser.nextInt());
         position.setLatitude(parser.nextDouble());
         position.setLongitude(parser.nextDouble());
-
     } else {
-
         String[] points = parser.next().split("\\|");
         for (String point : points) {
             String[] wifi = point.split(":");
             String mac = wifi[0].replaceAll("(..)", "$1:");
             network.addWifiAccessPoint(WifiAccessPoint.from(
                     mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
         }
-
     }
 
     position.setNetwork(network);
 
     DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
     String response = index + ",A03," + dateFormat.format(new Date());
     sendResponse(channel, remoteAddress, imei, response);
 
     return position;
 }
\ No newline at end of file
