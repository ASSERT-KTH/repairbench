diff --git a/tmp/032841b5-d689-4fbe-866c-c1f804b1c7c0_buggy.java b/tmp/fe3dfa56-df57-43c2-80c4-0553e5fca5fd_fixed.java
index 7374e5f..5d76f09 100644
--- a/tmp/032841b5-d689-4fbe-866c-c1f804b1c7c0_buggy.java
+++ b/tmp/fe3dfa56-df57-43c2-80c4-0553e5fca5fd_fixed.java
@@ -1,61 +1,92 @@
-    private Object decodeLocationNew(
-            Channel channel, SocketAddress remoteAddress, String sentence) {
+private Object decodeLocationNew(Channel channel, SocketAddress remoteAddress, String sentence) {
 
     Parser parser = new Parser(PATTERN_NEW, sentence);
     if (!parser.matches()) {
         return null;
     }
 
+    // The first token is the device identifier.
     String imei = parser.next();
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
+    // The next token is used for the response.
     String index = parser.next();
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
-        position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
+    // The alarm field is a string (e.g. "A03" or "A01"), not an integer.
+    String alarmField = parser.next();
+    position.set(Position.KEY_ALARM, decodeAlarm(alarmField));
+
+    // If not enough tokens remain for a full location message, treat this as a command response.
+    // A full location message should have at least:
+    // device time (1) + cell tower (4) + battery (1) + battery level (1) + status (1) = 8 tokens.
+    if (!parser.hasNext(8)) {
+        String result = parser.next();
+        // Remove any checksum (everything after a star) if present.
+        if (result.contains("*")) {
+            result = result.substring(0, result.indexOf('*'));
+        }
+        position.set(Position.KEY_RESULT, result);
+
+        DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
+        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
+        String response = index + ",A03," + dateFormat.format(new Date());
+        sendResponse(channel, remoteAddress, imei, response);
+
+        return position;
+    }
 
     position.setDeviceTime(parser.nextDateTime());
 
     Network network = new Network();
     network.addCellTower(CellTower.from(
             parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
 
     position.set(Position.KEY_BATTERY, parser.nextDouble());
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
     position.set(Position.KEY_STATUS, parser.nextHexInt());
 
-        if (parser.hasNext(5)) {
-
+    // For location fix data, newer messages provide an extra token.
+    // In messages like:
+    //   $$99,865413050150407,7F,A03,,230626072722,460|0|25FC|AC2AB0B,3.74,52,0019,0,A,0,13,22.643466,114.018211*74
+    // after the battery info, there are 6 tokens:
+    //   token1: an extra field (e.g. heading, which we ignore),
+    //   token2: valid flag ("A" means valid),
+    //   token3: speed in KPH,
+    //   token4: satellite count,
+    //   token5: latitude,
+    //   token6: longitude.
+    if (parser.hasNext(6)) {
+        parser.next(); // Ignore the extra field (e.g. heading)
         position.setValid(parser.next().equals("A"));
         position.setFixTime(position.getDeviceTime());
-            position.set(Position.KEY_SATELLITES, parser.nextInt());
+        // Note: the protocol sends speed before satellite count.
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
+        position.set(Position.KEY_SATELLITES, parser.nextInt());
         position.setLatitude(parser.nextDouble());
         position.setLongitude(parser.nextDouble());
-
     } else {
-
+        // If there aren't 6 tokens, then assume the remaining token contains Wiâ€‘Fi access point data.
         String[] points = parser.next().split("\\|");
         for (String point : points) {
             String[] wifi = point.split(":");
             String mac = wifi[0].replaceAll("(..)", "$1:");
             network.addWifiAccessPoint(WifiAccessPoint.from(
                     mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
         }
-
     }
 
     position.setNetwork(network);
 
     DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
     String response = index + ",A03," + dateFormat.format(new Date());
     sendResponse(channel, remoteAddress, imei, response);
 
     return position;
 }
\ No newline at end of file
