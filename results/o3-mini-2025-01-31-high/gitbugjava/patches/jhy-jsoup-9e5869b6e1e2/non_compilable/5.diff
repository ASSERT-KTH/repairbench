diff --git a/tmp/86733144-a131-4ed3-9a32-23f2c08b3185_buggy.java b/tmp/6578a40e-9250-4acb-8da2-51a4c8a17b16_fixed.java
index 0583946..0ee795a 100644
--- a/tmp/86733144-a131-4ed3-9a32-23f2c08b3185_buggy.java
+++ b/tmp/6578a40e-9250-4acb-8da2-51a4c8a17b16_fixed.java
@@ -1,30 +1,34 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
-        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
+    final Element parent = parentNode instanceof Element ? (Element) parentNode : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+        // use formatAsBlock() consistently so that custom elements (which may be formatted as blocks)
+        // are treated correctly when trimming whitespace.
+        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock())
+            || parentNode instanceof Document;
+        trimTrailing = nextSibling() == null && parent != null && parent.tag().formatAsBlock();
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+        // If this text is just whitespace, and the next node will trigger an indent, skip output:
         Node next = nextSibling();
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+            || (next instanceof TextNode && ((TextNode) next).isBlank());
+        if (couldSkip && isBlank)
+            return;
 
         Node prev = previousSibling();
         if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+            (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank)
+            || (out.outline() && siblingNodes().size() > 0 && !isBlank)
+            || (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))
+        ) {
             indent(accum, depth, out);
         }
+    }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
