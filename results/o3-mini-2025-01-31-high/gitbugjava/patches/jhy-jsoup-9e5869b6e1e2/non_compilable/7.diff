diff --git a/tmp/96be55fa-68c5-430e-b711-0c4a9b1523cd_buggy.java b/tmp/efe262f8-e255-4420-a13d-4cb8ba33648a_fixed.java
index 0583946..936c856 100644
--- a/tmp/96be55fa-68c5-430e-b711-0c4a9b1523cd_buggy.java
+++ b/tmp/efe262f8-e255-4420-a13d-4cb8ba33648a_fixed.java
@@ -1,30 +1,31 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
-        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+    // Use the parent (if available) when checking for whitespace preservation.
+    final boolean normaliseWhite = prettyPrint && (parent == null || !Element.preserveWhitespace(parent));
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
+        // Note: using formatAsBlock() ensures that custom tags that are output as blocks
+        // are treated correctly so that unwanted extra spaces are not added.
+        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock()) ||
             parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+        trimTrailing = nextSibling() == null && parent != null && parent.tag().formatAsBlock();
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+            || (next instanceof TextNode && ((TextNode) next).isBlank());
         if (couldSkip && isBlank) return;
 
         Node prev = previousSibling();
-            if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+        if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank)
+            || (out.outline() && siblingNodes().size() > 0 && !isBlank)
+            || (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")))
             indent(accum, depth, out);
     }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
