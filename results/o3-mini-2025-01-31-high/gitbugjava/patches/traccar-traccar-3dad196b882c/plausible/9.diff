diff --git a/tmp/b5d6486c-814f-4695-9c62-3668ca603908_buggy.java b/tmp/4cf348b6-4a72-471c-aa70-2887c516627e_fixed.java
index c6164f1..0f486a5 100644
--- a/tmp/b5d6486c-814f-4695-9c62-3668ca603908_buggy.java
+++ b/tmp/4cf348b6-4a72-471c-aa70-2887c516627e_fixed.java
@@ -1,116 +1,156 @@
 private Position decodePosition(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     int status = buf.readUnsignedShort();
-
     position.setValid(BitUtil.check(status, 15));
-
     position.set(Position.KEY_STATUS, status);
     position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
     int event = buf.readUnsignedShort();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, event);
 
     String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
-
     DateBuilder dateBuilder = new DateBuilder()
             .setYear(Integer.parseInt(time.substring(0, 2)))
             .setMonth(Integer.parseInt(time.substring(2, 4)))
             .setDay(Integer.parseInt(time.substring(4, 6)))
             .setHour(Integer.parseInt(time.substring(6, 8)))
             .setMinute(Integer.parseInt(time.substring(8, 10)))
             .setSecond(Integer.parseInt(time.substring(10, 12)));
     position.setTime(dateBuilder.getDate());
 
     position.setLongitude(buf.readInt() * 0.00001);
     position.setLatitude(buf.readInt() * 0.00001);
 
     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
     position.setCourse(buf.readUnsignedShort());
     position.setAltitude(buf.readUnsignedShort());
 
     position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
     Network network = new Network();
 
-        while (buf.readableBytes() > 4) {
+    // Process extra attributes; each attribute has a header of 4 bytes (subtype and length)
+    while (buf.readableBytes() >= 4) {
         int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
+        int totalAttrLength = buf.readUnsignedShort();
+        // totalAttrLength includes the 4 bytes of header; it must be at least 4.
+        if (totalAttrLength < 4 || (totalAttrLength - 4) > buf.readableBytes()) {
+            // Invalid attribute length; avoid negative or over-read values
+            break;
+        }
+        int dataLength = totalAttrLength - 4;
+        int endIndex = buf.readerIndex() + dataLength;
+
         switch (subtype) {
             case 0x0001:
+                // Expecting 17 bytes of fixed data for engine parameters
+                if (buf.readableBytes() < 17) {
+                    buf.skipBytes(buf.readableBytes());
+                    break;
+                }
                 int coolantTemperature = buf.readUnsignedByte() - 40;
                 if (coolantTemperature <= 215) {
                     position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                 }
                 int rpm = buf.readUnsignedShort();
                 if (rpm <= 65535) {
                     position.set(Position.KEY_RPM, rpm);
                 }
                 position.set("averageSpeed", buf.readUnsignedByte());
-                    buf.readUnsignedShort(); // interval fuel consumption
+                buf.readUnsignedShort(); // interval fuel consumption (ignored)
                 position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                 position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                 position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                 position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
-                    buf.readUnsignedInt(); // trip id
+                buf.readUnsignedInt(); // trip id (ignored)
                 break;
             case 0x0005:
+                // Expecting 6 bytes of fixed data
+                if (buf.readableBytes() < 6) {
+                    buf.skipBytes(buf.readableBytes());
+                    break;
+                }
                 position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                 position.set(Position.KEY_HDOP, buf.readUnsignedByte());
-                    buf.readUnsignedInt(); // run time
+                buf.readUnsignedInt(); // run time (ignored)
                 break;
             case 0x0009:
-                    position.set(
-                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                // VIN string, using the entire attribute block
+                position.set(Position.KEY_VIN,
+                        buf.readCharSequence(dataLength, StandardCharsets.US_ASCII).toString());
                 break;
             case 0x0011:
+                // Expecting 4 bytes of fixed data for hours
+                if (buf.readableBytes() < 4) {
+                    buf.skipBytes(buf.readableBytes());
+                    break;
+                }
                 position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
                 break;
             case 0x0014:
+                // Expecting 6 bytes of fixed data
+                if (buf.readableBytes() < 6) {
+                    buf.skipBytes(buf.readableBytes());
+                    break;
+                }
                 position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                 position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                 position.set("airTemp", buf.readUnsignedByte() - 40);
                 position.set("airFlow", buf.readUnsignedShort() * 0.01);
                 position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
                 break;
             case 0x0020:
-                    String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                // Cell tower info string; data is entire attribute block
+                String cellsStr = buf.readCharSequence(dataLength, StandardCharsets.US_ASCII).toString();
+                String[] cells = cellsStr.split("\\+");
                 for (String cell : cells) {
                     String[] values = cell.split("@");
+                    if (values.length >= 4) {
                         network.addCellTower(CellTower.from(
-                                Integer.parseInt(values[0]), Integer.parseInt(values[1]),
-                                Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
+                                Integer.parseInt(values[0]),
+                                Integer.parseInt(values[1]),
+                                Integer.parseInt(values[2], 16),
+                                Integer.parseInt(values[3], 16)));
+                    }
                 }
                 break;
             case 0x0021:
-                    String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                // WiFi access point info string; data is entire attribute block
+                String pointsStr = buf.readCharSequence(dataLength, StandardCharsets.US_ASCII).toString();
+                String[] points = pointsStr.split("\\+");
                 for (String point : points) {
                     String[] values = point.split("@");
+                    if (values.length >= 2) {
                         network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
                     }
+                }
                 break;
             default:
-                    buf.skipBytes(length);
+                // Skip unknown attribute data
+                buf.skipBytes(dataLength);
                 break;
         }
+
+        // Ensure that we have consumed the complete attribute block
+        if (buf.readerIndex() < endIndex) {
+            buf.skipBytes(endIndex - buf.readerIndex());
+        }
     }
 
     if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
         position.setNetwork(network);
     }
 
     sendResponse(channel, MSG_POSITION_RSP, index, null);
-
     return position;
 }
\ No newline at end of file
