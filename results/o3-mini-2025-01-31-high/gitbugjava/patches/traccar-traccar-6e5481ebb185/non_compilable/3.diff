diff --git a/tmp/f5bfaa38-1f41-4312-adcb-47c701e10085_buggy.java b/tmp/2bfe5632-fbb8-4924-b439-f5b2509b9623_fixed.java
index ee599aa..0005048 100644
--- a/tmp/f5bfaa38-1f41-4312-adcb-47c701e10085_buggy.java
+++ b/tmp/2bfe5632-fbb8-4924-b439-f5b2509b9623_fixed.java
@@ -1,50 +1,76 @@
 private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {
 
     int length = 0;
     if (hasLength) {
         length = buf.readUnsignedByte();
         if (length == 0) {
             boolean zeroedData = true;
+            // Check some extra bytes – if all zero then ignore the LBS block
             for (int i = buf.readerIndex() + 9; i < buf.readerIndex() + 45 && i < buf.writerIndex(); i++) {
                 if (buf.getByte(i) != 0) {
                     zeroedData = false;
                     break;
                 }
             }
             if (zeroedData) {
                 buf.skipBytes(Math.min(buf.readableBytes(), 45));
             }
             return false;
         }
     }
 
+    // Remember where the LBS fields begin so we can compute the expected block length.
+    int start = buf.readerIndex();
+
     int mcc = buf.readUnsignedShort();
-        int mnc;
-        if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {
-            mnc = buf.readUnsignedShort();
-        } else {
-            mnc = buf.readUnsignedByte();
-        }
-        int lac;
-        if (type == MSG_LBS_ALARM) {
-            lac = buf.readInt();
-        } else {
-            lac = buf.readUnsignedShort();
-        }
+    // For some messages the Mobile Network Code is 2 bytes, otherwise 1 byte.
+    boolean twoByteMnc = (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6);
+    int mnc = twoByteMnc ? buf.readUnsignedShort() : buf.readUnsignedByte();
+    int lac = (type == MSG_LBS_ALARM) ? buf.readInt() : buf.readUnsignedShort();
     long cid;
     if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {
         cid = buf.readLong();
     } else if (type == MSG_GPS_LBS_6) {
         cid = buf.readUnsignedInt();
     } else {
         cid = buf.readUnsignedMedium();
     }
 
+    // Calculate how many bytes we consumed while reading LBS fields.
+    int basicSize = buf.readerIndex() - start;
+    // Now compute the “expected” size for the LBS block according to type:
+    int expected;
+    if (type == MSG_GPS_LBS_6) {
+        // mcc (2) + mnc (2) + lac (2) + cid (4) = 10
+        expected = 2 + 2 + 2 + 4;
+    } else if (type == MSG_GPS_LBS_7) {
+        // mcc (2) + mnc (1 or 2) + lac (2) + cid (8)
+        expected = 2 + (twoByteMnc ? 2 : 1) + 2 + 8;
+    } else if (type == MSG_LBS_ALARM) {
+        // mcc (2) + mnc (1 or 2) + lac (4) + cid (8)
+        expected = 2 + (twoByteMnc ? 2 : 1) + 4 + 8;
+    } else {
+        // default LBS format: mcc (2) + mnc (1 or 2) + lac (2) + cid (3)
+        expected = 2 + (twoByteMnc ? 2 : 1) + 2 + 3;
+    }
+
+    if (hasLength) {
+        // If the block length (from the header) isn’t exactly what we expect,
+        // skip any extra bytes and do not decode LBS information.
+        if (length != expected) {
+            int remaining = length - basicSize;
+            if (remaining > 0 && remaining <= buf.readableBytes()) {
+                buf.skipBytes(remaining);
+            }
+            return false;
+        }
+    }
+
+    // Additionally, if any essential field is zero, consider the LBS data invalid.
+    if (mcc == 0 || lac == 0 || cid == 0) {
+        return false;
+    }
+
     position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));
-
-        if (length > 9) {
-            buf.skipBytes(length - 9);
-        }
-
     return true;
 }
\ No newline at end of file
