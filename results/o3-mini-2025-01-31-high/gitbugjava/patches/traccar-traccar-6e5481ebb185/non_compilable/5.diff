diff --git a/tmp/1023d04a-b53a-4420-ac24-97ba39df9ed3_buggy.java b/tmp/40587a67-ad07-4dd8-800d-d4cb2c0f87bd_fixed.java
index ee599aa..cec4b08 100644
--- a/tmp/1023d04a-b53a-4420-ac24-97ba39df9ed3_buggy.java
+++ b/tmp/40587a67-ad07-4dd8-800d-d4cb2c0f87bd_fixed.java
@@ -1,50 +1,94 @@
 private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {
     
     int length = 0;
     if (hasLength) {
         length = buf.readUnsignedByte();
         if (length == 0) {
+            // If length is zero, check if the following bytes are all zeros.
             boolean zeroedData = true;
             for (int i = buf.readerIndex() + 9; i < buf.readerIndex() + 45 && i < buf.writerIndex(); i++) {
                 if (buf.getByte(i) != 0) {
                     zeroedData = false;
                     break;
                 }
             }
             if (zeroedData) {
                 buf.skipBytes(Math.min(buf.readableBytes(), 45));
             }
             return false;
         }
+        // Peek at the first two bytes (mcc) to determine the expected LBS length.
+        if (buf.readableBytes() < 2) {
+            buf.skipBytes(length);
+            return false;
+        }
+        int mccPeek = buf.getUnsignedShort(buf.readerIndex());
+        // In our protocol the mnc is read as two bytes if the mcc’s high bit is set or if type indicates GPS_LBS_6.
+        boolean twoDigitMnc = BitUtil.check(mccPeek, 15) || type == MSG_GPS_LBS_6;
+        int expectedLength;
+        if (type == MSG_LBS_ALARM) {
+            // mcc (2) + mnc (2 if twoDigit, else 1) + lac (4) + cid (8)
+            expectedLength = 2 + (twoDigitMnc ? 2 : 1) + 4 + 8;
+        } else if (type == MSG_GPS_LBS_6) {
+            // mcc (2) + mnc (always 2 for this type) + lac (2) + cid (4)
+            expectedLength = 2 + 2 + 2 + 4;
+        } else if (type == MSG_GPS_LBS_7) {
+            // mcc (2) + mnc (1) + lac (2) + cid (8)
+            expectedLength = 2 + 1 + 2 + 8;
+        } else {
+            // Default: mcc (2) + mnc (assumed 2-byte) + lac (2) + cid (3)
+            expectedLength = 2 + 2 + 2 + 3;
+        }
+        // If the provided length is too short the message isn’t valid.
+        if (length < expectedLength) {
+            buf.skipBytes(length);
+            return false;
+        }
     }
 
     int mcc = buf.readUnsignedShort();
     int mnc;
     if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {
         mnc = buf.readUnsignedShort();
     } else {
         mnc = buf.readUnsignedByte();
     }
+    
     int lac;
     if (type == MSG_LBS_ALARM) {
         lac = buf.readInt();
     } else {
         lac = buf.readUnsignedShort();
     }
+    
     long cid;
     if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {
         cid = buf.readLong();
     } else if (type == MSG_GPS_LBS_6) {
         cid = buf.readUnsignedInt();
     } else {
         cid = buf.readUnsignedMedium();
     }
     
     position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));
     
-        if (length > 9) {
-            buf.skipBytes(length - 9);
+    if (hasLength) {
+        int expectedLength;
+        // Recalculate expected length now that we’ve consumed mcc.
+        boolean twoDigitMnc = BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6;
+        if (type == MSG_LBS_ALARM) {
+            expectedLength = 2 + (twoDigitMnc ? 2 : 1) + 4 + 8;
+        } else if (type == MSG_GPS_LBS_6) {
+            expectedLength = 2 + 2 + 2 + 4;
+        } else if (type == MSG_GPS_LBS_7) {
+            expectedLength = 2 + 1 + 2 + 8;
+        } else {
+            expectedLength = 2 + 2 + 2 + 3;
+        }
+        if (length > expectedLength) {
+            buf.skipBytes(length - expectedLength);
+        }
     }
     
     return true;
 }
\ No newline at end of file
