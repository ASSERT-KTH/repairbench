diff --git a/tmp/defee7fb-f043-4ad7-86fd-8a4317ab0973_buggy.java b/tmp/6d397f31-b883-433f-8898-b4c11f222f59_fixed.java
index ee599aa..a5e4771 100644
--- a/tmp/defee7fb-f043-4ad7-86fd-8a4317ab0973_buggy.java
+++ b/tmp/6d397f31-b883-433f-8898-b4c11f222f59_fixed.java
@@ -1,50 +1,113 @@
 private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {
 
     int length = 0;
     if (hasLength) {
         length = buf.readUnsignedByte();
         if (length == 0) {
             boolean zeroedData = true;
             for (int i = buf.readerIndex() + 9; i < buf.readerIndex() + 45 && i < buf.writerIndex(); i++) {
                 if (buf.getByte(i) != 0) {
                     zeroedData = false;
                     break;
                 }
             }
             if (zeroedData) {
                 buf.skipBytes(Math.min(buf.readableBytes(), 45));
             }
             return false;
         }
+
+        // Make sure the LBS block contains enough bytes
+        if (buf.readableBytes() < length) {
+            buf.skipBytes(buf.readableBytes());
+            return false;
         }
 
+        // In order to compute the expected number of bytes, we need to inspect the first field.
+        // Mark the reader index so we can recompute later.
+        buf.markReaderIndex();
+        if (buf.readableBytes() < 2) {  // not enough for MCC
+            buf.resetReaderIndex();
+            buf.skipBytes(length);
+            return false;
+        }
+        int mccTemp = buf.readUnsignedShort();
+        // Based on the flag in MCC (or message type) we decide the MNC length.
+        int mncBytes = ((BitUtil.check(mccTemp, 15)) || type == MSG_GPS_LBS_6) ? 2 : 1;
+        // lac: normally 2 bytes; for alarm messages use 4 bytes.
+        int lacBytes = (type == MSG_LBS_ALARM) ? 4 : 2;
+        // cid: normally 3 bytes; for MSG_GPS_LBS_6 use 4, and for MSG_LBS_ALARM / MSG_GPS_LBS_7 use 8.
+        int cidBytes;
+        if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {
+            cidBytes = 8;
+        } else if (type == MSG_GPS_LBS_6) {
+            cidBytes = 4;
+        } else {
+            cidBytes = 3;
+        }
+        int expected = 2 /*mcc*/ + mncBytes + lacBytes + cidBytes;
+        buf.resetReaderIndex();
+        if (length < expected) {
+            buf.skipBytes(length);
+            return false;
+        }
+
+        // Now decode the fields from the LBS block.
         int mcc = buf.readUnsignedShort();
         int mnc;
         if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {
             mnc = buf.readUnsignedShort();
         } else {
             mnc = buf.readUnsignedByte();
         }
         int lac;
         if (type == MSG_LBS_ALARM) {
             lac = buf.readInt();
         } else {
             lac = buf.readUnsignedShort();
         }
         long cid;
         if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {
             cid = buf.readLong();
         } else if (type == MSG_GPS_LBS_6) {
             cid = buf.readUnsignedInt();
         } else {
             cid = buf.readUnsignedMedium();
         }
 
+        // Skip any extra bytes present in the LBS block.
+        int consumed = expected;
+        if (length > consumed) {
+            buf.skipBytes(length - consumed);
+        }
+
         position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));
+        return true;
+    }
 
-        if (length > 9) {
-            buf.skipBytes(length - 9);
+    // Without length field assume fixed LBS structure.
+    int mcc = buf.readUnsignedShort();
+    int mnc;
+    if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {
+        mnc = buf.readUnsignedShort();
+    } else {
+        mnc = buf.readUnsignedByte();
+    }
+    int lac;
+    if (type == MSG_LBS_ALARM) {
+        lac = buf.readInt();
+    } else {
+        lac = buf.readUnsignedShort();
+    }
+    long cid;
+    if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {
+        cid = buf.readLong();
+    } else if (type == MSG_GPS_LBS_6) {
+        cid = buf.readUnsignedInt();
+    } else {
+        cid = buf.readUnsignedMedium();
     }
 
+    position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));
     return true;
 }
\ No newline at end of file
