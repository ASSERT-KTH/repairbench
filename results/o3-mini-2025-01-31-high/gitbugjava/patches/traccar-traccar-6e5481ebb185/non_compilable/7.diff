diff --git a/tmp/16c297d6-966e-4f8d-a161-6c9ee9a91e1f_buggy.java b/tmp/b2d9f483-b63c-4641-9244-b3dc6c7a8cbd_fixed.java
index ee599aa..e859aec 100644
--- a/tmp/16c297d6-966e-4f8d-a161-6c9ee9a91e1f_buggy.java
+++ b/tmp/b2d9f483-b63c-4641-9244-b3dc6c7a8cbd_fixed.java
@@ -1,50 +1,92 @@
 private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {
 
-        int length = 0;
+    int length;
     if (hasLength) {
         length = buf.readUnsignedByte();
         if (length == 0) {
             boolean zeroedData = true;
+            // Check for a block of zero bytes further in the buffer.
             for (int i = buf.readerIndex() + 9; i < buf.readerIndex() + 45 && i < buf.writerIndex(); i++) {
                 if (buf.getByte(i) != 0) {
                     zeroedData = false;
                     break;
                 }
             }
             if (zeroedData) {
                 buf.skipBytes(Math.min(buf.readableBytes(), 45));
             }
             return false;
         }
+    } else {
+        // If there is no length field, assume the minimal payload for a default LBS message.
+        length = 8;
     }
 
+    // Mark the start so we can later calculate how many payload bytes were consumed.
+    int startIndex = buf.readerIndex();
+
+    // Ensure we have enough bytes for the mandatory MCC field.
+    if (buf.readableBytes() < 2) {
+        buf.skipBytes(length);
+        return false;
+    }
     int mcc = buf.readUnsignedShort();
+
+    // Determine the size of the MNC field.
+    int mncLength = (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) ? 2 : 1;
+    // Lac field size: 4 bytes for alarm messages, 2 bytes otherwise.
+    int lacLength = (type == MSG_LBS_ALARM) ? 4 : 2;
+    // CID field size depends on the type.
+    int cidLength;
+    if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {
+        cidLength = 8;
+    } else if (type == MSG_GPS_LBS_6) {
+        cidLength = 4;
+    } else {
+        cidLength = 3;
+    }
+
+    // Total expected payload (after the length field) is the sum of the parts.
+    // Note: The length field indicates the payload length (excluding itself).
+    int requiredPayload = 2 + mncLength + lacLength + cidLength;
+    if (length < requiredPayload) {
+        int remaining = length - (buf.readerIndex() - startIndex);
+        if (remaining > 0) {
+            buf.skipBytes(remaining);
+        }
+        return false;
+    }
+
     int mnc;
-        if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {
+    if (mncLength == 2) {
         mnc = buf.readUnsignedShort();
     } else {
         mnc = buf.readUnsignedByte();
     }
+
     int lac;
     if (type == MSG_LBS_ALARM) {
         lac = buf.readInt();
     } else {
         lac = buf.readUnsignedShort();
     }
+
     long cid;
     if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {
         cid = buf.readLong();
     } else if (type == MSG_GPS_LBS_6) {
         cid = buf.readUnsignedInt();
     } else {
         cid = buf.readUnsignedMedium();
     }
 
     position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));
 
-        if (length > 9) {
-            buf.skipBytes(length - 9);
+    // Skip any extra bytes present in the payload.
+    int bytesRead = buf.readerIndex() - startIndex;
+    if (length > bytesRead) {
+        buf.skipBytes(length - bytesRead);
     }
 
     return true;
 }
\ No newline at end of file
