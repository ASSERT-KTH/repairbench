diff --git a/tmp/fbd60a66-ed12-4aa2-82c4-a03b3830f607_buggy.java b/tmp/2cd6f728-b4ed-4022-86db-5efb39902b2c_fixed.java
index ee599aa..b03b737 100644
--- a/tmp/fbd60a66-ed12-4aa2-82c4-a03b3830f607_buggy.java
+++ b/tmp/2cd6f728-b4ed-4022-86db-5efb39902b2c_fixed.java
@@ -1,50 +1,56 @@
 private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {
 
     int length = 0;
     if (hasLength) {
         length = buf.readUnsignedByte();
+        // If the provided length is less than the minimum expected payload (9 bytes),
+        // skip the data (using a special zero‚Äêcheck if the length is 0) and mark decoding as failed.
+        if (length < 9) {
             if (length == 0) {
                 boolean zeroedData = true;
                 for (int i = buf.readerIndex() + 9; i < buf.readerIndex() + 45 && i < buf.writerIndex(); i++) {
                     if (buf.getByte(i) != 0) {
                         zeroedData = false;
                         break;
                     }
                 }
                 if (zeroedData) {
                     buf.skipBytes(Math.min(buf.readableBytes(), 45));
                 }
+            } else {
+                buf.skipBytes(length);
+            }
             return false;
         }
     }
 
     int mcc = buf.readUnsignedShort();
     int mnc;
     if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {
         mnc = buf.readUnsignedShort();
     } else {
         mnc = buf.readUnsignedByte();
     }
     int lac;
     if (type == MSG_LBS_ALARM) {
         lac = buf.readInt();
     } else {
         lac = buf.readUnsignedShort();
     }
     long cid;
     if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {
         cid = buf.readLong();
     } else if (type == MSG_GPS_LBS_6) {
         cid = buf.readUnsignedInt();
     } else {
         cid = buf.readUnsignedMedium();
     }
 
     position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));
 
     if (length > 9) {
         buf.skipBytes(length - 9);
     }
 
     return true;
 }
\ No newline at end of file
