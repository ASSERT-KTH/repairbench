diff --git a/tmp/0f9659e8-c978-40d9-b5c9-e6224af66712_buggy.java b/tmp/dd674681-9f0a-49a5-84a2-e4f4605a3cc0_fixed.java
index 47a8941..0d3b050 100644
--- a/tmp/0f9659e8-c978-40d9-b5c9-e6224af66712_buggy.java
+++ b/tmp/dd674681-9f0a-49a5-84a2-e4f4605a3cc0_fixed.java
@@ -1,53 +1,52 @@
 /**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+ * Move the given class to its grand‚Äêparent (either a class or a package). The given {@code clazz} should be an inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+    // Obtain the parent (the current container) and remove clazz from its inner classes map.
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
+    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+    parentClasses.remove(clazz.name());
+
+    // Modify the container so that it now refers to clazz. The container can be a class or a package.
     JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
     // FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
-			// Element class should be added as its container child:
+        // In case the grand-parent is a class, add the element class as a child of that container.
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
-
         classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+    } else {
+        // Otherwise the grand-parent is a package.
         JPackage grandParentPackage = (JPackage) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
-
         classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
-			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
+        // For a top-level class (moved from an inner class) the "static" modifier must be unset.
+        int newMods = clazz.mods().getValue() & ~JMod.STATIC;
+        setPrivateField(clazz.mods(), "mods", Integer.valueOf(newMods));
 
+        // Also adjust the corresponding schema component.
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
-
                 // FIXME: Inner class is always a local declaration.
                 assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
                 setPrivateField(sc, "anonymous", Boolean.FALSE);
-
                 break;
             }
         }
     }
 
+    // If a class with the same name already exists in the target container, rename this class.
     if (classes.containsKey(clazz.name())) {
         writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
         setPrivateField(clazz, "name", parent.name() + clazz.name());
     }
     
     classes.put(clazz.name(), clazz);
 
-		// Finally modify the class so that it refers back the container:
+    // Finally, update clazz so that its outer container is now the grand-parent.
     setPrivateField(clazz, "outer", grandParent);
 }
\ No newline at end of file
