diff --git a/tmp/0cf0e3fb-f5c5-4519-a622-b85eed461d8d_buggy.java b/tmp/ee37859d-c308-412d-9047-065390999b92_fixed.java
index 47a8941..0f67140 100644
--- a/tmp/0cf0e3fb-f5c5-4519-a622-b85eed461d8d_buggy.java
+++ b/tmp/ee37859d-c308-412d-9047-065390999b92_fixed.java
@@ -1,53 +1,52 @@
-	/**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
-	 */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+    // Get the current parent (the inner class’s container)…
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
+    // …and remove the inner class from the parent's "classes" map,
+    // since it will be rehomed to its grandparent.
+    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+    parentClasses.remove(clazz.name());
+
+    // Get the grandparent container (it can be either a class or a package)
     JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
+    // This map will track name collisions in the new container.
     Map<String, JDefinedClass> classes;
 
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
-			// Element class should be added as its container child:
+        // If the grandparent is a class, we add the inner class as its member.
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
-
         classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+    } else {
+        // Otherwise, the grandparent is a package.
         JPackage grandParentPackage = (JPackage) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
-
         classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
+        // In this scenario, the inner class becomes a top‐level class,
+        // so remove the STATIC modifier (it would cause a compile error).
         setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
-
                 // FIXME: Inner class is always a local declaration.
                 assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+                // Mark it as non-anonymous now that it is top-level.
                 setPrivateField(sc, "anonymous", Boolean.FALSE);
-
                 break;
             }
         }
     }
 
+    // Check for name collisions in the grandparent's "classes" map.
     if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+        String newName = parent.name() + clazz.name();
+        writeSummary("\tRenaming class " + clazz.fullName() + " to class " + newName);
+        setPrivateField(clazz, "name", newName);
     }
 
     classes.put(clazz.name(), clazz);
 
-		// Finally modify the class so that it refers back the container:
+    // Finally, update the inner class so that its container reference points to the grandparent.
     setPrivateField(clazz, "outer", grandParent);
 }
\ No newline at end of file
