diff --git a/tmp/400cf73f-253f-4c09-9a34-f10a11ef9a9f_buggy.java b/tmp/1ffdb7b1-f7e3-4fe9-8292-93c876298cbd_fixed.java
index 47a8941..d34c5d2 100644
--- a/tmp/400cf73f-253f-4c09-9a34-f10a11ef9a9f_buggy.java
+++ b/tmp/1ffdb7b1-f7e3-4fe9-8292-93c876298cbd_fixed.java
@@ -1,53 +1,57 @@
 /**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+ * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+    // Get the parent (the current container) and its container (the new container).
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
     JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
+    // This map keeps track of the classes in the new container to detect name collisions.
     Map<String, JDefinedClass> classes;
 
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
+    // When moving into a class container.
     if (grandParent.isClass()) {
-			// Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
-
         classes = getPrivateField(grandParentClass, "classes");
     }
+    // When moving into a package container.
     else {
         JPackage grandParentPackage = (JPackage) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
-
         classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
+        // Remove the 'static' modifier; otherwise, the class wonâ€™t compile in its new location.
         setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
+        // Update the associated schema component so that the inner class is no longer considered anonymous.
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
-
-					// FIXME: Inner class is always a local declaration.
+                // Inner classes are always a local declaration.
                 assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
                 setPrivateField(sc, "anonymous", Boolean.FALSE);
-
                 break;
             }
         }
     }
 
+    // If the new container already has a class by this name, rename the class.
     if (classes.containsKey(clazz.name())) {
         writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
         setPrivateField(clazz, "name", parent.name() + clazz.name());
     }
-
     classes.put(clazz.name(), clazz);
 
-		// Finally modify the class so that it refers back the container:
+    // Finally, update the class so that its container is now the grandparent.
     setPrivateField(clazz, "outer", grandParent);
+
+    // IMPORTANT: Remove the class from its old parent's collection of inner classes.
+    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+    for (Iterator<Map.Entry<String, JDefinedClass>> it = parentClasses.entrySet().iterator(); it.hasNext();) {
+        Map.Entry<String, JDefinedClass> entry = it.next();
+        if (entry.getValue() == clazz) {
+            it.remove();
+            break;
+        }
+    }
 }
\ No newline at end of file
