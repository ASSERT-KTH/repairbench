diff --git a/tmp/2d1d67f1-6e57-42df-9844-c24f0cf72fa0_buggy.java b/tmp/9abaca32-92ac-4a77-aad6-9f7a8aee6d60_fixed.java
index 47a8941..9374d26 100644
--- a/tmp/2d1d67f1-6e57-42df-9844-c24f0cf72fa0_buggy.java
+++ b/tmp/9abaca32-92ac-4a77-aad6-9f7a8aee6d60_fixed.java
@@ -1,53 +1,49 @@
 /**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+ * Move the given class to its grandparent (either class or package). The given {@code clazz} should be inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+    // Retrieve the parent container (which is a class) and remove the inner class from it.
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
+    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+    parentClasses.remove(clazz.name());
+
+    // Get the grandparent container (which can be a class or a package).
     JClassContainer grandParent = parent.parentContainer();
     // Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
     // FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
         // Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
-
         classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+    } else {
         JPackage grandParentPackage = (JPackage) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
-
         classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
+        // In this scenario class should have its "static" modifier reset otherwise it won't compile.
         setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
-
                 // FIXME: Inner class is always a local declaration.
                 assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
                 setPrivateField(sc, "anonymous", Boolean.FALSE);
-
                 break;
             }
         }
     }
 
+    // If the grandparent already contains a class with the same name, rename the class.
     if (classes.containsKey(clazz.name())) {
         writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
         setPrivateField(clazz, "name", parent.name() + clazz.name());
     }
-
     classes.put(clazz.name(), clazz);
 
-		// Finally modify the class so that it refers back the container:
+    // Finally modify the class so that it refers back to the grandparent container.
     setPrivateField(clazz, "outer", grandParent);
 }
\ No newline at end of file
