diff --git a/tmp/570e8602-bee3-4a15-834d-668563b358e9_buggy.java b/tmp/a684bf5d-8693-4e64-a9a6-832bcb25ba07_fixed.java
index 47a8941..516db1c 100644
--- a/tmp/570e8602-bee3-4a15-834d-668563b358e9_buggy.java
+++ b/tmp/a684bf5d-8693-4e64-a9a6-832bcb25ba07_fixed.java
@@ -1,53 +1,49 @@
-	/**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
-	 */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+    // Get the inner class’s immediate container and its parent (the new container)
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
     JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
+
+    // Remove clazz from its old container (the parent) so that it won't remain registered there.
+    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+    String originalName = clazz.name();
+    parentClasses.remove(originalName);
+
+    // Determine the target container's classes collection.
     Map<String, JDefinedClass> classes;
-
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
-			// Element class should be added as its container child:
+        // When the grandparent is a class:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
-
         classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+    } else {
+        // When the grandparent is a package:
         JPackage grandParentPackage = (JPackage) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
-
         classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
+        // Top-level classes cannot be static so remove the static modifier.
         setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
+        // Locate the class outline, and mark the underlying component as non–anonymous.
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
-
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+                if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {
                     setPrivateField(sc, "anonymous", Boolean.FALSE);
-
+                }
                 break;
             }
         }
     }
 
+    // If a class with the same name already exists in the target container then rename.
     if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+        String newName = parent.name() + clazz.name();
+        writeSummary("\tRenaming class " + clazz.fullName() + " to class " + newName);
+        setPrivateField(clazz, "name", newName);
     }
-
     classes.put(clazz.name(), clazz);
 
-		// Finally modify the class so that it refers back the container:
+    // Finally update the container pointer so that clazz is now attached to its grandparent.
     setPrivateField(clazz, "outer", grandParent);
 }
\ No newline at end of file
