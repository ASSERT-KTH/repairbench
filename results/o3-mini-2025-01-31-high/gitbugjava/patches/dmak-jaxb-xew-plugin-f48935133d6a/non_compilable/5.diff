diff --git a/tmp/0580ca78-cba7-42a7-bd1f-bea8dcde431b_buggy.java b/tmp/b51d2db8-cd60-42b0-baf5-b529e43748e2_fixed.java
index 47a8941..6544fbf 100644
--- a/tmp/0580ca78-cba7-42a7-bd1f-bea8dcde431b_buggy.java
+++ b/tmp/b51d2db8-cd60-42b0-baf5-b529e43748e2_fixed.java
@@ -1,53 +1,47 @@
-	/**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
-	 */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+    // Get the current parent (should be a class, since clazz is an inner class)
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
+    // Remove clazz from its original parent's inner classes mapping.
+    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+    parentClasses.remove(clazz.name());
+
     JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
     // FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
-			// Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
-
         classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+    } else {
         JPackage grandParentPackage = (JPackage) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
-
         classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
+        // When moving to a package level, the class cannot be static.
         setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
-
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+                // Rather than asserting, only update if the component is a local declaration.
+                if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {
                     setPrivateField(sc, "anonymous", Boolean.FALSE);
-
+                }
                 break;
             }
         }
     }
 
+    // If a class with the same name already exists in the new container,
+    // rename this inner class to avoid collision.
     if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+        String newName = parent.name() + clazz.name();
+        writeSummary("\tRenaming class " + clazz.fullName() + " to class " + newName);
+        setPrivateField(clazz, "name", newName);
     }
-
     classes.put(clazz.name(), clazz);
 
-		// Finally modify the class so that it refers back the container:
+    // Finally, update the class so that its container now refers to the grandparent.
     setPrivateField(clazz, "outer", grandParent);
 }
\ No newline at end of file
