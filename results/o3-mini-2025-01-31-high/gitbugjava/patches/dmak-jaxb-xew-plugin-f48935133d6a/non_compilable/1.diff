diff --git a/tmp/6cf6d02a-cd95-4fd6-ad3c-ca5fa1338d42_buggy.java b/tmp/a347b061-d151-4226-8b7c-c227e09a808c_fixed.java
index 47a8941..59b1044 100644
--- a/tmp/6cf6d02a-cd95-4fd6-ad3c-ca5fa1338d42_buggy.java
+++ b/tmp/a347b061-d151-4226-8b7c-c227e09a808c_fixed.java
@@ -1,53 +1,57 @@
 /**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+ * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+    // Remove clazz from its current parent container's inner classes mapping.
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
+    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+    if (parentClasses != null) {
+        for (Iterator<Map.Entry<String, JDefinedClass>> it = parentClasses.entrySet().iterator(); it.hasNext(); ) {
+            Map.Entry<String, JDefinedClass> entry = it.next();
+            if (entry.getValue() == clazz) {
+                it.remove();
+                break;
+            }
+        }
+    }
+    
+    // Get the new container: the grandparent.
     JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
     
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
+    // When the grandparent is a class.
     if (grandParent.isClass()) {
-			// Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
-
         classes = getPrivateField(grandParentClass, "classes");
     }
-		else {
+    else { // When the grandparent is a package.
         JPackage grandParentPackage = (JPackage) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
-
         classes = getPrivateField(grandParentPackage, "classes");
         
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
+        // In package scope, remove the static modifier so the class will compile.
         setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
         
+        // Update the related XSComponent so that the class is not considered anonymous.
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
-
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+                if (sc instanceof XSDeclaration) {
                     setPrivateField(sc, "anonymous", Boolean.FALSE);
-
+                }
                 break;
             }
         }
     }
     
+    // Handle naming collisions in the new container.
     if (classes.containsKey(clazz.name())) {
         writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
         setPrivateField(clazz, "name", parent.name() + clazz.name());
     }
-
     classes.put(clazz.name(), clazz);
     
-		// Finally modify the class so that it refers back the container:
+    // Finally, update the class so that it now refers back to its new container.
     setPrivateField(clazz, "outer", grandParent);
 }
\ No newline at end of file
