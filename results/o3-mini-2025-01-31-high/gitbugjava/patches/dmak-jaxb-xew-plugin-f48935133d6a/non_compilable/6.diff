diff --git a/tmp/f413a0d2-0e3d-4624-9361-3ab36750c910_buggy.java b/tmp/721d7be7-dbf2-466c-8afc-423858bbdfca_fixed.java
index 47a8941..def5ac7 100644
--- a/tmp/f413a0d2-0e3d-4624-9361-3ab36750c910_buggy.java
+++ b/tmp/721d7be7-dbf2-466c-8afc-423858bbdfca_fixed.java
@@ -1,53 +1,54 @@
 /**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+ * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+    // Save the original name for collision checking.
+    String originalName = clazz.name();
+
+    // Get the immediate container (parent) and remove the inner class from its classes map.
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
+    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+    parentClasses.remove(originalName);
+
+    // The grandparent container is either a class or a package.
     JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
-			// Element class should be added as its container child:
+        // When moving to a class container:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
-
         classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+    } else {
+        // When moving to a package container:
         JPackage grandParentPackage = (JPackage) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
-
         classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
-			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
+        // Remove the STATIC modifier so that the class will compile at package level.
+        int newMods = clazz.mods().getValue() & ~JMod.STATIC;
+        setPrivateField(clazz.mods(), "mods", Integer.valueOf(newMods));
 
+        // Mark the corresponding schema component as non-anonymous.
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
-
-					// FIXME: Inner class is always a local declaration.
+                // Inner class is always a local declaration.
                 assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
                 setPrivateField(sc, "anonymous", Boolean.FALSE);
-
                 break;
             }
         }
     }
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+    // If the grandparent already has a class with the same name, rename this one.
+    if (classes.containsKey(originalName)) {
+        String newName = parent.name() + originalName;
+        writeSummary("\tRenaming class " + clazz.fullName() + " to class " + newName);
+        setPrivateField(clazz, "name", newName);
     }
-
     classes.put(clazz.name(), clazz);
 
-		// Finally modify the class so that it refers back the container:
+    // Finally, update the inner class so that its outer container now points to the grandparent.
     setPrivateField(clazz, "outer", grandParent);
 }
\ No newline at end of file
