diff --git a/tmp/2578fd1d-597e-4f8e-b253-375b1e13a61b_buggy.java b/tmp/b0bc55bd-f423-4450-80e2-1ab127d18c94_fixed.java
index 712f277..6ebbddd 100644
--- a/tmp/2578fd1d-597e-4f8e-b253-375b1e13a61b_buggy.java
+++ b/tmp/b0bc55bd-f423-4450-80e2-1ab127d18c94_fixed.java
@@ -1,48 +1,36 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
     int i = 0;
-        int j, k;
-
     while (true) {
-            j = input.indexOf(BEGIN_TOKEN, i);
-            if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
-                }
+        int start = input.indexOf(BEGIN_TOKEN, i);
+        if (start == -1) {
             target.append(input.substring(i));
             return target;
         }
-            target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
+        // Append any literal text before the token.
+        target.append(input.substring(i, start));
         
-            if (k == -1) {
-                target.append(input);
-                return target;
+        // Look for the end token starting after the full begin token.
+        int specStart = start + BEGIN_TOKEN_LEN;
+        int end = input.indexOf(END_TOKEN, specStart);
+        if (end == -1) {
+            // Instead of silently appending the input, throw an exception.
+            throw new IllegalArgumentException("Invalid ANSI escape sequence: missing end token in " 
+                    + input.substring(start));
         }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
         
+        String spec = input.substring(specStart, end);
+        // A well formed escape must consist of exactly two parts (style and text)
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+        if (items.length != 2) {
+            throw new IllegalArgumentException("Invalid ANSI escape sequence: " 
+                    + input.substring(start, end + END_TOKEN_LEN));
         }
+        
+        // Process the escape sequence.
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
         target.append(replacement);
         
-            i = k + END_TOKEN_LEN;
+        // Continue parsing after the end token.
+        i = end + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
