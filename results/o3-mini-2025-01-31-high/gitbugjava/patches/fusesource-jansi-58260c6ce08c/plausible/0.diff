diff --git a/tmp/d13eef27-7344-479c-8045-0a7d9030ef34_buggy.java b/tmp/0b221d69-5b77-4b4d-b08c-0e7b5bfb5cd3_fixed.java
index 712f277..8e51360 100644
--- a/tmp/d13eef27-7344-479c-8045-0a7d9030ef34_buggy.java
+++ b/tmp/0b221d69-5b77-4b4d-b08c-0e7b5bfb5cd3_fixed.java
@@ -1,48 +1,37 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
     int i = 0;
-        int j, k;
 
     while (true) {
-            j = input.indexOf(BEGIN_TOKEN, i);
+        // Find the next BEGIN_TOKEN starting at position i.
+        int j = input.indexOf(BEGIN_TOKEN, i);
         if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
-                }
+            // No more tokens found; append the rest of the input and return.
             target.append(input.substring(i));
             return target;
         }
+        // Append the text before the BEGIN_TOKEN.
         target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
 
+        // Look for the corresponding END_TOKEN; it must come after the BEGIN_TOKEN.
+        int k = input.indexOf(END_TOKEN, j + BEGIN_TOKEN_LEN);
         if (k == -1) {
-                target.append(input);
-                return target;
+            throw new IllegalArgumentException("Missing closing token '" + END_TOKEN + "' in input: " + input);
         }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
 
+        // Extract the spec (the text between the tokens).
+        String spec = input.substring(j + BEGIN_TOKEN_LEN, k);
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+
+        // If the spec does not split into two parts, the escape sequence is invalid.
+        if (items.length < 2) {
+            throw new IllegalArgumentException("Invalid ANSI escape sequence: " + input.substring(j, k + END_TOKEN_LEN));
         }
+
+        // Process the replacement using the other render overload.
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
         target.append(replacement);
 
+        // Move the index i past this escape sequence.
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
