diff --git a/tmp/588278c8-49a7-444b-b61a-1313fe4716dc_buggy.java b/tmp/6c427523-3d4d-4014-9533-ea7c955a90b8_fixed.java
index 712f277..1ffaf96 100644
--- a/tmp/588278c8-49a7-444b-b61a-1313fe4716dc_buggy.java
+++ b/tmp/6c427523-3d4d-4014-9533-ea7c955a90b8_fixed.java
@@ -1,48 +1,41 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
     int i = 0;
     int j, k;
 
     while (true) {
         j = input.indexOf(BEGIN_TOKEN, i);
         if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
-                }
+            // No BEGIN_TOKEN found. Append remainder of input.
             target.append(input.substring(i));
             return target;
         }
+        // Append all text before the token
         target.append(input.substring(i, j));
         k = input.indexOf(END_TOKEN, j);
 
         if (k == -1) {
-                target.append(input);
+            // No matching END_TOKEN found, just append remainder of input.
+            target.append(input.substring(j));
             return target;
         }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
 
+        // Calculate where the token specification should start.
+        int specStart = j + BEGIN_TOKEN_LEN;
+        if (k < specStart) {
+            // The END_TOKEN was found before any valid specification text.
+            throw new IllegalArgumentException("Invalid ANSI markup: END_TOKEN found before token specification.");
+        }
+
+        String spec = input.substring(specStart, k);
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
         if (items.length == 1) {
-                target.append(input);
+            // If the spec doesn't split into two parts, treat the entire input as literal.
+            target.append(input.substring(j, k + END_TOKEN_LEN));
             return target;
         }
+        // Delegate to the render method that accepts a String and a String[].
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
         target.append(replacement);
-
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
