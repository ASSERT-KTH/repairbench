diff --git a/tmp/6419c9dc-2015-48f3-828b-dbdc87730324_buggy.java b/tmp/b5bd0f6a-b8cd-479f-a327-229f4b691d14_fixed.java
index 712f277..786f17e 100644
--- a/tmp/6419c9dc-2015-48f3-828b-dbdc87730324_buggy.java
+++ b/tmp/b5bd0f6a-b8cd-479f-a327-229f4b691d14_fixed.java
@@ -1,48 +1,32 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
     int i = 0;
     int j, k;
 
     while (true) {
         j = input.indexOf(BEGIN_TOKEN, i);
         if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
-                }
+            // No more markup tokens found; append the rest of the input.
             target.append(input.substring(i));
             return target;
         }
+        // Append text before the token.
         target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
 
+        // Look for the ending token starting after the full BEGIN_TOKEN
+        k = input.indexOf(END_TOKEN, j + BEGIN_TOKEN_LEN);
         if (k == -1) {
-                target.append(input);
-                return target;
+            throw new IllegalArgumentException("No matching end token for markup starting at position " + j + ": " + input);
         }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
 
+        String spec = input.substring(j + BEGIN_TOKEN_LEN, k);
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+        if (items.length != 2 || items[0].isEmpty() || items[1].isEmpty()) {
+            throw new IllegalArgumentException("Invalid markup: " + input.substring(j, k + END_TOKEN_LEN));
         }
+
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
         target.append(replacement);
 
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
