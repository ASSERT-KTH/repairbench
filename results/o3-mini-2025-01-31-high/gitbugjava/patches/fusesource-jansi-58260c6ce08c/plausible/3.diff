diff --git a/tmp/11e65fd0-e083-4bc2-b840-d9a8f3eb73a5_buggy.java b/tmp/88b84fe6-ea55-41c3-be4d-89fa1748684e_fixed.java
index 712f277..9a7456c 100644
--- a/tmp/11e65fd0-e083-4bc2-b840-d9a8f3eb73a5_buggy.java
+++ b/tmp/88b84fe6-ea55-41c3-be4d-89fa1748684e_fixed.java
@@ -1,48 +1,35 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
     int i = 0;
-        int j, k;
-
     while (true) {
-            j = input.indexOf(BEGIN_TOKEN, i);
+        int j = input.indexOf(BEGIN_TOKEN, i);
         if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
-                }
+            // No more tokens; append the rest of the string.
             target.append(input.substring(i));
             return target;
         }
+        // Append literal text before the markup.
         target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
 
+        // Look for the END_TOKEN, but start searching after the BEGIN_TOKEN.
+        int k = input.indexOf(END_TOKEN, j + BEGIN_TOKEN_LEN);
         if (k == -1) {
-                target.append(input);
-                return target;
+            // Markup is not closed.
+            throw new IllegalArgumentException("ANSI escape sequence not terminated: " 
+                                               + input.substring(j));
         }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
 
+        // Extract the markup specification.
+        String spec = input.substring(j + BEGIN_TOKEN_LEN, k);
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+        if (items.length != 2) {
+            // The markup is malformed (for example, missing the text part).
+            throw new IllegalArgumentException("Invalid ANSI escape sequence: " 
+                                               + input.substring(j, k + END_TOKEN_LEN));
         }
+
+        // Recursively process the replacement string.
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
         target.append(replacement);
-
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
