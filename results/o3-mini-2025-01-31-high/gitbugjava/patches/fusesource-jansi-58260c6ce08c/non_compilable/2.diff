diff --git a/tmp/67e05c74-91a5-4d9a-8411-0ba1a810dda6_buggy.java b/tmp/bfce229d-23c6-45b8-8e46-249edcf99f5f_fixed.java
index 712f277..47ae5cc 100644
--- a/tmp/67e05c74-91a5-4d9a-8411-0ba1a810dda6_buggy.java
+++ b/tmp/bfce229d-23c6-45b8-8e46-249edcf99f5f_fixed.java
@@ -1,48 +1,37 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
     int i = 0;
     int j, k;
 
     while (true) {
         j = input.indexOf(BEGIN_TOKEN, i);
         if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
-                }
+            // No BEGIN_TOKEN found, append the rest of the string.
             target.append(input.substring(i));
             return target;
         }
         target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
 
+        // Look for END_TOKEN after the full BEGIN_TOKEN.
+        k = input.indexOf(END_TOKEN, j + BEGIN_TOKEN_LEN);
         if (k == -1) {
-                target.append(input);
+            // Could not find matching END_TOKEN; append the rest as is.
+            target.append(input.substring(j));
             return target;
         }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
 
+        // Extract the spec between the tokens.
+        String spec = input.substring(j + BEGIN_TOKEN_LEN, k);
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+        if (items.length != 2) {
+            // The ANSI escape sequence is invalid (e.g. missing either styling codes or text).
+            throw new IllegalArgumentException("Invalid ANSI escape sequence: " + input.substring(j, k + END_TOKEN_LEN));
         }
+
+        // Process the escape sequence.
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
         target.append(replacement);
 
+        // Move past the end token.
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
