diff --git a/tmp/c5f4673d-25bd-4349-b466-433f4097d57f_buggy.java b/tmp/90124b61-7ba2-429d-8b37-77f99989d087_fixed.java
index 712f277..cbe1f2b 100644
--- a/tmp/c5f4673d-25bd-4349-b466-433f4097d57f_buggy.java
+++ b/tmp/90124b61-7ba2-429d-8b37-77f99989d087_fixed.java
@@ -1,48 +1,37 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
     int i = 0;
-        int j, k;
-
     while (true) {
-            j = input.indexOf(BEGIN_TOKEN, i);
+        int j = input.indexOf(BEGIN_TOKEN, i);
         if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
-                }
             target.append(input.substring(i));
             return target;
         }
         target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
         
+        // Look for the END_TOKEN starting immediately after the BEGIN_TOKEN
+        int specStart = j + BEGIN_TOKEN_LEN;
+        int k = input.indexOf(END_TOKEN, specStart);
         if (k == -1) {
-                target.append(input);
+            // No closing END_TOKEN; just output the rest literally.
+            target.append(input.substring(j));
             return target;
         }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
         
+        // If the spec is empty, then the END_TOKEN came immediately after the BEGIN_TOKEN.
+        if (specStart == k) {
+            throw new IllegalArgumentException("Invalid ANSI escape sequence: no content between " 
+                    + BEGIN_TOKEN + " and " + END_TOKEN + " in: " + input);
+        }
+        
+        String spec = input.substring(specStart, k);
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+        if (items.length != 2) {
+            throw new IllegalArgumentException("Invalid ANSI escape sequence: " + spec + " in: " + input);
         }
+        
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
         target.append(replacement);
         
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
