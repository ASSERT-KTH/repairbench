diff --git a/tmp/1ce42b87-fa1b-4f93-adea-7b56a7a426d8_buggy.java b/tmp/5c18ea3f-3f44-4b55-a1cb-6a87083abf7d_fixed.java
index 23f078d..54ac8f1 100644
--- a/tmp/1ce42b87-fa1b-4f93-adea-7b56a7a426d8_buggy.java
+++ b/tmp/5c18ea3f-3f44-4b55-a1cb-6a87083abf7d_fixed.java
@@ -1,14 +1,16 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
-        // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
-            int c = s.codePointAt(i);
-            if (c == ' ') {
+    // minimal normalization of Unicode -> Ascii, and space normal.
+    // Existing escapes are left as-is.
+    for (int i = 0; i < s.length(); ) {
+        int cp = s.codePointAt(i);
+        if (cp == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
-            } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
+        } else if (cp > 127) { // out of ascii range
+            sb.append(URLEncoder.encode(new String(Character.toChars(cp)), UTF_8.name()));
             // ^^ is a bit heavy-handed - if perf critical, we could optimize
         } else {
-                sb.append((char) c);
+            sb.append((char) cp);
         }
+        i += Character.charCount(cp);
     }
 }
\ No newline at end of file
