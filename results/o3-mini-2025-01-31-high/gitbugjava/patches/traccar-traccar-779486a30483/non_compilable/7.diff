diff --git a/tmp/0a08513e-6190-48c8-9c79-1a1b7bb20170_buggy.java b/tmp/1cdcc536-2de7-461b-91cb-59596e90ec52_fixed.java
index f591bc6..7562a27 100644
--- a/tmp/0a08513e-6190-48c8-9c79-1a1b7bb20170_buggy.java
+++ b/tmp/1cdcc536-2de7-461b-91cb-59596e90ec52_fixed.java
@@ -1,74 +1,95 @@
 protected Object decodeAvrmc(
         String sentence, Channel channel, SocketAddress remoteAddress) {
 
     Parser parser = new Parser(PATTERN_AVRMC, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     DeviceSession deviceSession =
         getDeviceSession(channel, remoteAddress, parser.next());
     if (deviceSession == null) {
         return null;
     }
 
     String deviceModel = null;
     Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
     if (device != null) {
         deviceModel = device.getModel();
     }
 
     Position position = new Position(getProtocolName());
-
     position.setDeviceId(deviceSession.getDeviceId());
-        DateBuilder dateBuilder = new DateBuilder()
-                .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
+
+    DateBuilder dateBuilder = new DateBuilder();
+
+    // Parse time token in HHmmss format
+    String timeString = parser.next();
+    if (timeString != null && timeString.length() >= 6) {
+        int hour = Integer.parseInt(timeString.substring(0, 2));
+        int minute = Integer.parseInt(timeString.substring(2, 4));
+        int second = Integer.parseInt(timeString.substring(4, 6));
+        dateBuilder.setTime(hour, minute, second);
+    } else {
+        dateBuilder.setTime(0, 0, 0);
+    }
 
     String status = parser.next();
-        String upperCaseStatus = status.toUpperCase();
-        position.setValid(upperCaseStatus.equals("A") || upperCaseStatus.equals("R") || upperCaseStatus.equals("P"));
+    position.setValid(status != null &&
+            (status.equalsIgnoreCase("A") ||
+             status.equalsIgnoreCase("R") ||
+             status.equalsIgnoreCase("P")));
     position.set(Position.KEY_STATUS, status);
 
     position.setLatitude(parser.nextCoordinate());
     position.setLongitude(parser.nextCoordinate());
     position.setSpeed(parser.nextDouble(0));
     position.setCourse(parser.nextDouble(0));
 
-        dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
+    // Parse date token in ddMMyy format
+    String dateString = parser.next();
+    if (dateString != null && dateString.length() >= 6) {
+        int day = Integer.parseInt(dateString.substring(0, 2));
+        int month = Integer.parseInt(dateString.substring(2, 4));
+        int year = Integer.parseInt(dateString.substring(4, 6));
+        year += (year < 70 ? 2000 : 1900);
+        dateBuilder.setDateReverse(day, month, year);
+    } else {
+        dateBuilder.setDateReverse(0, 0, 0);
+    }
     position.setTime(dateBuilder.getDate());
 
     String event = parser.next();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));
-        position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
+    position.set(Position.KEY_BATTERY,
+            Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
     position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
     position.set(Position.KEY_GPS, parser.nextInt());
     position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);
 
     if ("AVL110".equals(deviceModel) || "AVL120".equals(deviceModel)) {
         position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);
     }
 
     Integer lac = parser.nextHexInt();
     Integer cid = parser.nextHexInt();
     Integer mcc = parser.nextInt();
     Integer mnc = parser.nextInt();
     if (lac != null && cid != null && mcc != null && mnc != null) {
         position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));
     }
 
     parser.next(); // unused
-
     String checksum = parser.next();
 
     if (channel != null) {
-
         sendAcknowledge(status, event, checksum, channel, remoteAddress);
 
         String devicePassword = AttributeUtil.getDevicePassword(
                 getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);
         sendEventResponse(event, devicePassword, channel, remoteAddress);
     }
 
     return position;
 }
\ No newline at end of file
