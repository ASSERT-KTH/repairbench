diff --git a/tmp/c1c6db8e-62e8-4e57-ab60-1d7468a98527_buggy.java b/tmp/b037b1d3-28b6-44b4-b406-128bea3790ac_fixed.java
index 30eba92..936e7ce 100644
--- a/tmp/c1c6db8e-62e8-4e57-ab60-1d7468a98527_buggy.java
+++ b/tmp/b037b1d3-28b6-44b4-b406-128bea3790ac_fixed.java
@@ -1,113 +1,134 @@
-    private Object decodePosition(
-            Channel channel, SocketAddress remoteAddress, String sentence, String id) {
+private Object decodePosition(Channel channel, SocketAddress remoteAddress, String sentence, String id) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
 
+    // If the sentence contains a '#' (device id separator), use the part after it for decoding
+    int index = sentence.indexOf('#');
+    if (index != -1) {
+        sentence = sentence.substring(index + 1);
+    }
+
     List<Position> positions = new LinkedList<>();
     Position position = null;
     DateBuilder dateBuilder = null;
 
     for (String pair : sentence.split(",")) {
+        // Skip tokens that do not contain ':' or '='
+        if (!(pair.contains(":") || pair.contains("="))) {
+            continue;
+        }
         String[] data = pair.split("[=:]");
+        if (data.length < 2) {
+            continue;
+        }
         int key;
         try {
             key = Integer.parseInt(data[0], 16);
         } catch (NumberFormatException e) {
             continue;
         }
         String value = data[1];
+
+        // Remove any trailing checksum (everything after the '*' character)
+        int asteriskIndex = value.indexOf('*');
+        if (asteriskIndex != -1) {
+            value = value.substring(0, asteriskIndex);
+        }
+
+        // When key 0x0 is encountered, start a new position
         if (key == 0x0) {
-                if (position != null) {
+            if (position != null && dateBuilder != null) {
                 position.setTime(dateBuilder.getDate());
                 positions.add(position);
             }
             position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             dateBuilder = new DateBuilder(new Date());
         } else if (position != null) {
             switch (key) {
                 case 0x11:
                     value = ("000000" + value).substring(value.length());
                     dateBuilder.setDateReverse(
                             Integer.parseInt(value.substring(0, 2)),
                             Integer.parseInt(value.substring(2, 4)),
                             Integer.parseInt(value.substring(4)));
                     break;
                 case 0x10:
                     value = ("00000000" + value).substring(value.length());
                     dateBuilder.setTime(
                             Integer.parseInt(value.substring(0, 2)),
                             Integer.parseInt(value.substring(2, 4)),
                             Integer.parseInt(value.substring(4, 6)),
                             Integer.parseInt(value.substring(6)) * 10);
                     break;
                 case 0xA:
                     position.setValid(true);
                     position.setLatitude(Double.parseDouble(value));
                     break;
                 case 0xB:
                     position.setValid(true);
                     position.setLongitude(Double.parseDouble(value));
                     break;
                 case 0xC:
                     position.setAltitude(Double.parseDouble(value));
                     break;
                 case 0xD:
                     position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
                     break;
                 case 0xE:
                     position.setCourse(Integer.parseInt(value));
                     break;
                 case 0xF:
                     position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                     break;
                 case 0x12:
                     position.set(Position.KEY_HDOP, Integer.parseInt(value));
                     break;
                 case 0x20:
                     position.set(Position.KEY_ACCELERATION, value);
                     break;
                 case 0x24:
                     position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);
                     break;
                 case 0x81:
                     position.set(Position.KEY_RSSI, Integer.parseInt(value));
                     break;
                 case 0x82:
-                        position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
+                    // Fix: parse as double because the value can have decimals (e.g. "53.000000")
+                    position.set(Position.KEY_DEVICE_TEMP, Double.parseDouble(value) * 0.1);
                     break;
                 case 0x104:
                     position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));
                     break;
                 case 0x105:
                     position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
                     break;
                 case 0x10c:
                     position.set(Position.KEY_RPM, Integer.parseInt(value));
                     break;
                 case 0x10d:
                     position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
                     break;
                 case 0x111:
                     position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
                     break;
                 default:
                     position.set(Position.PREFIX_IO + key, value);
                     break;
             }
         }
     }
 
-        if (position != null) {
+    if (position != null && dateBuilder != null) {
         if (!position.getValid()) {
             getLastLocation(position, null);
         }
         position.setTime(dateBuilder.getDate());
         positions.add(position);
     }
 
     return positions.isEmpty() ? null : positions;
 }
\ No newline at end of file
