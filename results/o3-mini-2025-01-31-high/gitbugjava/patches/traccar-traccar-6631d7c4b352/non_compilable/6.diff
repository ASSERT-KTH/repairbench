diff --git a/tmp/549dd577-3125-4ee9-a0ff-6518e84ca860_buggy.java b/tmp/82d7a3e6-929c-4e20-a966-e09664ba0ab5_fixed.java
index d87dd79..c0613cd 100644
--- a/tmp/549dd577-3125-4ee9-a0ff-6518e84ca860_buggy.java
+++ b/tmp/82d7a3e6-929c-4e20-a966-e09664ba0ab5_fixed.java
@@ -1,47 +1,72 @@
 @Override
-    protected Object decode(
-            ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
+protected Object decode(ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
+    int startIndex = buf.readerIndex();
+    int writerIndex = buf.writerIndex();
 
-        int endIndex = -1;
-        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
-            if (buf.getByte(i) == ']') {
-                endIndex = i + 1;
+    // Search forward for the first unescaped closing bracket ']'
+    int frameEndIndex = -1;
+    int i = startIndex;
+    while (i < writerIndex) {
+        byte b = buf.getByte(i);
+        if (b == '}') {
+            // If escape indicator is found but the escape code is not yet available, wait for more bytes.
+            if (i + 1 >= writerIndex) {
+                return null;
+            }
+            // Skip both the escape indicator and its code.
+            i += 2;
+            continue;
+        } else if (b == ']') {
+            frameEndIndex = i;
             break;
+        } else {
+            i++;
         }
     }
 
-        if (endIndex > 0) {
-            ByteBuf frame = Unpooled.buffer();
-            while (buf.readerIndex() < endIndex) {
+    // If no complete frame (no unescaped ']') is found, return null.
+    if (frameEndIndex < 0) {
+        return null;
+    }
+
+    // Create a new ByteBuf for the decoded frame.
+    ByteBuf frame = Unpooled.buffer(frameEndIndex - startIndex + 1);
+    
+    // Decode the frame from its encoded form.
+    // Note: frameEndIndex is based on the original buffer positions.
+    while (buf.readerIndex() <= frameEndIndex) {
         byte b1 = buf.readByte();
         if (b1 == '}') {
+            // We expect an escape code following '}'.
+            if (!buf.isReadable()) {
+                // Incomplete escape sequence; should not happen because we checked during scanning.
+                return null;
+            }
             byte b2 = buf.readByte();
             switch (b2) {
                 case 0x01:
                     frame.writeByte('}');
                     break;
                 case 0x02:
                     frame.writeByte('[');
                     break;
                 case 0x03:
                     frame.writeByte(']');
                     break;
                 case 0x04:
                     frame.writeByte(',');
                     break;
                 case 0x05:
                     frame.writeByte('*');
                     break;
                 default:
                     throw new IllegalArgumentException(String.format(
                         "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
             }
         } else {
             frame.writeByte(b1);
         }
     }
+    
     return frame;
 }
\ No newline at end of file
-
-        return null;
-    }
