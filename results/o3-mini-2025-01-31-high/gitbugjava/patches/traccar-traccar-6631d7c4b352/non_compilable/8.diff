diff --git a/tmp/7dffeb90-24b9-4072-b25d-82ab0bda88d9_buggy.java b/tmp/ad4cdea3-d8dd-4264-9a8a-2c8b718222da_fixed.java
index d87dd79..7e9731c 100644
--- a/tmp/7dffeb90-24b9-4072-b25d-82ab0bda88d9_buggy.java
+++ b/tmp/ad4cdea3-d8dd-4264-9a8a-2c8b718222da_fixed.java
@@ -1,47 +1,60 @@
 @Override
-    protected Object decode(
-            ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
+protected Object decode(ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
+    int startIndex = buf.readerIndex();
+    int frameEnd = -1;
 
-        int endIndex = -1;
-        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
-            if (buf.getByte(i) == ']') {
-                endIndex = i + 1;
+    // Scan forward for the first unescaped closing bracket.
+    // If we see an escape character ('}'), skip the following byte.
+    for (int i = startIndex; i < buf.writerIndex(); i++) {
+        byte b = buf.getByte(i);
+        if (b == ']') {
+            frameEnd = i + 1;
             break;
         }
+        if (b == '}') {
+            if (i + 1 >= buf.writerIndex()) {
+                // Incomplete escape sequence; wait for more data.
+                return null;
+            }
+            i++; // Skip escape code byte.
+        }
+    }
+    if (frameEnd < 0) {
+        return null;
     }
 
-        if (endIndex > 0) {
+    // Now decode the frame (including handling escape sequences)
     ByteBuf frame = Unpooled.buffer();
-            while (buf.readerIndex() < endIndex) {
-                byte b1 = buf.readByte();
-                if (b1 == '}') {
-                    byte b2 = buf.readByte();
-                    switch (b2) {
+    while (buf.readerIndex() < frameEnd) {
+        byte current = buf.readByte();
+        if (current == '}') {
+            if (buf.readerIndex() >= frameEnd) {
+                return null; // Incomplete escape sequence.
+            }
+            byte code = buf.readByte();
+            switch (code) {
                 case 0x01:
                     frame.writeByte('}');
                     break;
                 case 0x02:
                     frame.writeByte('[');
                     break;
                 case 0x03:
                     frame.writeByte(']');
                     break;
                 case 0x04:
                     frame.writeByte(',');
                     break;
                 case 0x05:
                     frame.writeByte('*');
                     break;
                 default:
-                            throw new IllegalArgumentException(String.format(
-                                    "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
+                    throw new IllegalArgumentException(
+                        String.format("unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, code));
             }
         } else {
-                    frame.writeByte(b1);
+            frame.writeByte(current);
         }
     }
     return frame;
 }
\ No newline at end of file
-
-        return null;
-    }
