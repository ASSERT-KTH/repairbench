diff --git a/tmp/c3f11761-0abb-4896-a378-bf28860d3dd6_buggy.java b/tmp/63846d8d-3b0e-44ae-a551-51d21b3aa0f0_fixed.java
index 2a0dceb..c4e595d 100644
--- a/tmp/c3f11761-0abb-4896-a378-bf28860d3dd6_buggy.java
+++ b/tmp/63846d8d-3b0e-44ae-a551-51d21b3aa0f0_fixed.java
@@ -1,68 +1,89 @@
 private Position decode4(
         Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
     int index = 0;
 
-        String type = values[index++].substring(5);
+    // If the header includes a numeric prefix (e.g. "ST410STT"), remove it;
+    // otherwise (e.g. "STT" or "ST910") use the header as is.
+    String header = values[index++];
+    String type = header.length() > 5 ? header.substring(5) : header;
 
-        if (!type.equals("STT") && !type.equals("ALT")) {
+    // Only process messages we support (for example, STT, ALT and ST910)
+    if (!(type.equals("STT") || type.equals("ALT") || type.equals("ST910"))) {
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_TYPE, type);
 
     position.set(Position.KEY_VERSION_FW, values[index++]);
-        index += 1; // model
+    index += 1; // skip model
 
     Network network = new Network();
 
     for (int i = 0; i < 7; i++) {
         int cid = Integer.parseInt(values[index++]);
         int mcc = Integer.parseInt(values[index++]);
         int mnc = Integer.parseInt(values[index++]);
         int lac, rssi;
         if (i == 0) {
+            // For the first cell tower, the order is: rssi then lac.
             rssi = Integer.parseInt(values[index++]);
             lac = Integer.parseInt(values[index++]);
         } else {
+            // For additional towers, the order is: lac then rssi.
             lac = Integer.parseInt(values[index++]);
             rssi = Integer.parseInt(values[index++]);
         }
-            index += 1; // timing advance
+        index += 1; // skip timing advance
+
         if (cid > 0) {
             network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
         }
     }
 
     position.setNetwork(network);
 
     position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
     position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
     position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
     position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
 
     if (values[index].length() == 3) {
-            index += 1; // collaborative network
+        index += 1; // skip collaborative network field if present
     }
 
     DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
 
+    // If both date and time fields are non-empty, parse the fix time
+    // Otherwise, leave the time unset (or set it to null)
+    if (index + 1 < values.length 
+            && !values[index].trim().isEmpty() 
+            && !values[index + 1].trim().isEmpty()) {
+        String datePart = values[index++].trim();
+        String timePart = values[index++].trim();
+        position.setTime(dateFormat.parse(datePart + timePart));
+
+        // Expecting positional data after the date/time only if available.
+        // Make sure there are enough tokens and they are not empty.
+        if (index + 5 <= values.length 
+                && !values[index].trim().isEmpty() 
+                && !values[index + 1].trim().isEmpty()) {
             position.setLatitude(Double.parseDouble(values[index++]));
             position.setLongitude(Double.parseDouble(values[index++]));
             position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
             position.setCourse(Double.parseDouble(values[index++]));
     
             position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-
             position.setValid(values[index++].equals("1"));
+        }
+    }
 
     return position;
 }
\ No newline at end of file
