diff --git a/tmp/65a73270-637b-4900-87ff-7038e43fb3be_buggy.java b/tmp/6bc1ab52-d69b-4538-a3d9-1cdeaa20a8da_fixed.java
index 2a0dceb..ddc0537 100644
--- a/tmp/65a73270-637b-4900-87ff-7038e43fb3be_buggy.java
+++ b/tmp/6bc1ab52-d69b-4538-a3d9-1cdeaa20a8da_fixed.java
@@ -1,68 +1,79 @@
 private Position decode4(
         Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
     int index = 0;
 
-        String type = values[index++].substring(5);
+    // Use the full header if itâ€™s short, otherwise assume first 5 characters are a prefix.
+    String header = values[index++];
+    String type = header.length() > 5 ? header.substring(5) : header;
 
+    // We only process STT or ALT messages in this method.
     if (!type.equals("STT") && !type.equals("ALT")) {
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_TYPE, type);
 
     position.set(Position.KEY_VERSION_FW, values[index++]);
-        index += 1; // model
+    index += 1; // Skip model token
 
     Network network = new Network();
 
+    // Extended (network) part: expect exactly 7 groups of 6 tokens each.
     for (int i = 0; i < 7; i++) {
         int cid = Integer.parseInt(values[index++]);
         int mcc = Integer.parseInt(values[index++]);
         int mnc = Integer.parseInt(values[index++]);
         int lac, rssi;
         if (i == 0) {
             rssi = Integer.parseInt(values[index++]);
             lac = Integer.parseInt(values[index++]);
         } else {
             lac = Integer.parseInt(values[index++]);
             rssi = Integer.parseInt(values[index++]);
         }
-            index += 1; // timing advance
+        index += 1; // Skip timing advance token
         if (cid > 0) {
             network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
         }
     }
 
     position.setNetwork(network);
 
     position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
     position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
     position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
     position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
 
+    // If the next token is exactly 3 characters, skip it (collaborative network field)
     if (values[index].length() == 3) {
-            index += 1; // collaborative network
+        index += 1;
     }
 
     DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
 
+    // Get date and time parts.
+    String datePart = values[index++];
+    String timePart = values[index++];
+
+    // Only parse fix date and following location fields if both date and time are non-empty.
+    if (!datePart.isEmpty() && !timePart.isEmpty()) {
+        position.setTime(dateFormat.parse(datePart + timePart));
         position.setLatitude(Double.parseDouble(values[index++]));
         position.setLongitude(Double.parseDouble(values[index++]));
         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
         position.setCourse(Double.parseDouble(values[index++]));
 
         position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-
         position.setValid(values[index++].equals("1"));
+    }
 
     return position;
 }
\ No newline at end of file
