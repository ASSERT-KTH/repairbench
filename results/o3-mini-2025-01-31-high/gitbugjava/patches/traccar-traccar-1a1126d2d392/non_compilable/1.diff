diff --git a/tmp/f79e1627-3b12-439a-b0f2-d334f66be718_buggy.java b/tmp/784745ae-bf6d-40e9-abef-a895b0fc170b_fixed.java
index 2a0dceb..f3073ba 100644
--- a/tmp/f79e1627-3b12-439a-b0f2-d334f66be718_buggy.java
+++ b/tmp/784745ae-bf6d-40e9-abef-a895b0fc170b_fixed.java
@@ -1,68 +1,78 @@
 private Position decode4(
         Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
     int index = 0;
 
-        String type = values[index++].substring(5);
-
+    // Fix: if the header is short, don’t take a substring.
+    String header = values[index++].trim();
+    String type = header.length() > 5 ? header.substring(5) : header;
     if (!type.equals("STT") && !type.equals("ALT")) {
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_TYPE, type);
 
+    // Set firmware version and skip model.
     position.set(Position.KEY_VERSION_FW, values[index++]);
-        index += 1; // model
+    index++; // skip model
 
+    // Process the network cell tower block.
+    // (For each cell tower, the extended protocol sends 6 numbers.)
     Network network = new Network();
 
     for (int i = 0; i < 7; i++) {
         int cid = Integer.parseInt(values[index++]);
         int mcc = Integer.parseInt(values[index++]);
         int mnc = Integer.parseInt(values[index++]);
         int lac, rssi;
         if (i == 0) {
             rssi = Integer.parseInt(values[index++]);
             lac = Integer.parseInt(values[index++]);
         } else {
             lac = Integer.parseInt(values[index++]);
             rssi = Integer.parseInt(values[index++]);
         }
-            index += 1; // timing advance
+        index++; // skip timing advance
         if (cid > 0) {
             network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
         }
     }
 
     position.setNetwork(network);
 
     position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
     position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
     position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
     position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
 
-        if (values[index].length() == 3) {
-            index += 1; // collaborative network
+    // Skip optional collaborative network field.
+    String collab = values[index].trim();
+    if (collab.length() == 3 || collab.isEmpty()) {
+        index++;
     }
 
+    // Parse date/time – trim tokens to avoid empty strings.
+    String datePart = values[index++].trim();
+    String timePart = values[index++].trim();
+    String dateTime = datePart + timePart;
     DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
+    position.setTime(dateFormat.parse(dateTime));
 
     position.setLatitude(Double.parseDouble(values[index++]));
     position.setLongitude(Double.parseDouble(values[index++]));
     position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
     position.setCourse(Double.parseDouble(values[index++]));
 
     position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
 
     position.setValid(values[index++].equals("1"));
 
     return position;
 }
\ No newline at end of file
