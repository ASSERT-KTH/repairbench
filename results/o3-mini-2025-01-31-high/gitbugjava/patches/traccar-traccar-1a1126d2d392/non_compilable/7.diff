diff --git a/tmp/52a1bbfd-7466-4aac-af7d-755476aa882b_buggy.java b/tmp/69fe7681-24f9-463b-b40c-86d36326b30c_fixed.java
index 2a0dceb..7bfffc7 100644
--- a/tmp/52a1bbfd-7466-4aac-af7d-755476aa882b_buggy.java
+++ b/tmp/69fe7681-24f9-463b-b40c-86d36326b30c_fixed.java
@@ -1,68 +1,82 @@
-    private Position decode4(
-            Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
+private Position decode4(Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
     int index = 0;
 
-        String type = values[index++].substring(5);
+    // Instead of assuming the incoming header is always at least 5 characters,
+    // extract the type from the last three characters if the header is longer than three,
+    // otherwise use the header as is.
+    String header = values[index++];
+    String type = header.length() > 3 ? header.substring(header.length() - 3) : header;
 
     if (!type.equals("STT") && !type.equals("ALT")) {
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_TYPE, type);
 
     position.set(Position.KEY_VERSION_FW, values[index++]);
-        index += 1; // model
+    index += 1; // skip model
 
     Network network = new Network();
 
     for (int i = 0; i < 7; i++) {
         int cid = Integer.parseInt(values[index++]);
         int mcc = Integer.parseInt(values[index++]);
         int mnc = Integer.parseInt(values[index++]);
         int lac, rssi;
         if (i == 0) {
             rssi = Integer.parseInt(values[index++]);
             lac = Integer.parseInt(values[index++]);
         } else {
             lac = Integer.parseInt(values[index++]);
             rssi = Integer.parseInt(values[index++]);
         }
-            index += 1; // timing advance
+        index += 1; // skip timing advance
         if (cid > 0) {
             network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
         }
     }
 
     position.setNetwork(network);
 
     position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
     position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
     position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
     position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
 
+    // Some messages include an extra collaborative network token of length 3.
+    // If the next tokenâ€™s length is exactly 3, skip it.
     if (values[index].length() == 3) {
-            index += 1; // collaborative network
+        index++;
     }
 
     DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
+    // Trim the date and time tokens so that stray whitespace or empty tokens do not cause a parse error.
+    String datePart = values[index++].trim();
+    String timePart = values[index++].trim();
+    String dateTime = datePart + timePart;
+    if (dateTime.isEmpty()) {
+        // Fallback if no valid date/time is provided.
+        position.setTime(new Date());
+    } else {
+        position.setTime(dateFormat.parse(dateTime));
+    }
 
     position.setLatitude(Double.parseDouble(values[index++]));
     position.setLongitude(Double.parseDouble(values[index++]));
     position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
     position.setCourse(Double.parseDouble(values[index++]));
 
     position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
 
     position.setValid(values[index++].equals("1"));
 
     return position;
 }
\ No newline at end of file
