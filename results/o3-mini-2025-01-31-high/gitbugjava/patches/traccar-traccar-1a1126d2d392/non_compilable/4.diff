diff --git a/tmp/a22ecce8-dc59-485a-9626-829ded44c817_buggy.java b/tmp/7e7bb9a6-dc26-40c1-aba2-85f6ecaaabc5_fixed.java
index 2a0dceb..6d181b4 100644
--- a/tmp/a22ecce8-dc59-485a-9626-829ded44c817_buggy.java
+++ b/tmp/7e7bb9a6-dc26-40c1-aba2-85f6ecaaabc5_fixed.java
@@ -1,68 +1,83 @@
 private Position decode4(
         Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
     int index = 0;
 
-        String type = values[index++].substring(5);
+    // Use the entire field if it is short, otherwise strip the first five characters.
+    String typeField = values[index++];
+    String type = typeField.length() > 5 ? typeField.substring(5) : typeField;
 
-        if (!type.equals("STT") && !type.equals("ALT")) {
+    if (!"STT".equals(type) && !"ALT".equals(type)) {
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_TYPE, type);
 
     position.set(Position.KEY_VERSION_FW, values[index++]);
-        index += 1; // model
+    index += 1; // skip model
 
     Network network = new Network();
 
     for (int i = 0; i < 7; i++) {
         int cid = Integer.parseInt(values[index++]);
         int mcc = Integer.parseInt(values[index++]);
         int mnc = Integer.parseInt(values[index++]);
         int lac, rssi;
         if (i == 0) {
             rssi = Integer.parseInt(values[index++]);
             lac = Integer.parseInt(values[index++]);
         } else {
             lac = Integer.parseInt(values[index++]);
             rssi = Integer.parseInt(values[index++]);
         }
-            index += 1; // timing advance
+        index += 1; // skip timing advance
         if (cid > 0) {
             network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
         }
     }
 
     position.setNetwork(network);
 
     position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
-        position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
+    // If the archive field is "0", set to true; otherwise leave it null.
+    position.set(Position.KEY_ARCHIVE, "0".equals(values[index++]) ? true : null);
     position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
     position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
 
-        if (values[index].length() == 3) {
-            index += 1; // collaborative network
+    // Optional collaborative network field: if present and exactly 3 characters, then skip it.
+    if (index < values.length && values[index].length() == 3) {
+        index += 1;
     }
 
+    // Parse date and time. If either token is missing or empty, use current time.
     DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
+    if (index + 1 < values.length) {
+        String dateToken = values[index++].trim();
+        String timeToken = values[index++].trim();
+        if (dateToken.isEmpty() || timeToken.isEmpty()) {
+            position.setTime(new Date());
+        } else {
+            position.setTime(dateFormat.parse(dateToken + timeToken));
+        }
+    } else {
+        position.setTime(new Date());
+    }
 
     position.setLatitude(Double.parseDouble(values[index++]));
     position.setLongitude(Double.parseDouble(values[index++]));
     position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
     position.setCourse(Double.parseDouble(values[index++]));
 
     position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
 
-        position.setValid(values[index++].equals("1"));
+    position.setValid("1".equals(values[index++]));
 
     return position;
 }
\ No newline at end of file
