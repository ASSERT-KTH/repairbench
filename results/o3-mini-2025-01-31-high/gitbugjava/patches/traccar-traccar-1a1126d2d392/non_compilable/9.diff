diff --git a/tmp/35ffdb44-e34f-426f-ae0d-e7ed819ef1e5_buggy.java b/tmp/2ab04829-8fdb-47f7-9f2a-9f037fd0282a_fixed.java
index 2a0dceb..4926f9f 100644
--- a/tmp/35ffdb44-e34f-426f-ae0d-e7ed819ef1e5_buggy.java
+++ b/tmp/2ab04829-8fdb-47f7-9f2a-9f037fd0282a_fixed.java
@@ -1,68 +1,108 @@
 private Position decode4(
         Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
     int index = 0;
 
-        String type = values[index++].substring(5);
-
-        if (!type.equals("STT") && !type.equals("ALT")) {
+    // Instead of blindly taking substring(5) we first get the header and then either take the suffix
+    // or use it as‐is. Also, allow several known types.
+    String header = values[index++];
+    String type = header.length() > 5 ? header.substring(5) : header;
+    if (!(type.equals("STT") || type.equals("ALT") || type.equals("UEX") ||
+          type.equals("BLE") || type.equals("EMG") || type.equals("ST910"))) {
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_TYPE, type);
 
     position.set(Position.KEY_VERSION_FW, values[index++]);
-        index += 1; // model
-
-        Network network = new Network();
+    index += 1; // skip model
 
+    // The original decoder expects an "extended" format with cell tower data.
+    // If there are enough tokens we assume the extended (tower) part; otherwise we skip it.
+    // Extended messages will have many tokens (typically >40) while minimal messages have far fewer.
+    if (values.length - index > 30) {
+        // Expect 7 cell tower records, each consisting of 3 values, plus 2 values (rssi and lac)
+        // for the first record and in reverse order for the others, plus one timing advance per record.
+        // That means each record consumes 6 tokens.
         for (int i = 0; i < 7; i++) {
             int cid = Integer.parseInt(values[index++]);
             int mcc = Integer.parseInt(values[index++]);
             int mnc = Integer.parseInt(values[index++]);
             int lac, rssi;
             if (i == 0) {
                 rssi = Integer.parseInt(values[index++]);
                 lac = Integer.parseInt(values[index++]);
             } else {
                 lac = Integer.parseInt(values[index++]);
                 rssi = Integer.parseInt(values[index++]);
             }
-            index += 1; // timing advance
+            index += 1; // skip timing advance
             if (cid > 0) {
-                network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
-            }
-        }
-
+                Network network = position.getNetwork();
+                if (network == null) {
+                    network = new Network();
                     position.setNetwork(network);
+                }
+                network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
+            }
+        }
+    }
+
+    // In any case, attempt to read these common fields.
+    // If the extended cell tower fields were not present (minimal message),
+    // the index will be at a lower value and subsequent tokens will match the minimal format.
+    if (values.length - index < 8) {
+        // not enough tokens for the remaining expected fields
+        return position;
+    }
 
     position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
     position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
     position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
     position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
 
-        if (values[index].length() == 3) {
-            index += 1; // collaborative network
+    // Some messages include a collaborative network field. If the next token has length 3
+    // (for example, "016"), then we skip it.
+    if (index < values.length && values[index].length() == 3) {
+        index += 1;
     }
 
+    // Concatenate date and time tokens. Check they are not empty.
+    String datePart = (index < values.length ? values[index++].trim() : "");
+    String timePart = (index < values.length ? values[index++].trim() : "");
+    if (datePart.isEmpty() || timePart.isEmpty()) {
+        throw new ParseException("Empty date/time", index);
+    }
     DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
+    position.setTime(dateFormat.parse(datePart + timePart));
 
+    if (index < values.length) {
         position.setLatitude(Double.parseDouble(values[index++]));
+    }
+    if (index < values.length) {
         position.setLongitude(Double.parseDouble(values[index++]));
+    }
+    if (index < values.length) {
         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
+    }
+    if (index < values.length) {
         position.setCourse(Double.parseDouble(values[index++]));
+    }
 
+    if (index < values.length) {
         position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+    }
 
-        position.setValid(values[index++].equals("1"));
+    if (index < values.length) {
+        position.setValid("1".equals(values[index++]));
+    }
 
     return position;
 }
\ No newline at end of file
