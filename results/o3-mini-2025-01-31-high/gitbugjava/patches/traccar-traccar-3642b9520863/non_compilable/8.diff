diff --git a/tmp/5ef08178-ceb3-4a5a-9b60-2e5f095f2443_buggy.java b/tmp/70e15979-59d2-4d98-bd95-588a69702846_fixed.java
index 568865c..ac5e58e 100644
--- a/tmp/5ef08178-ceb3-4a5a-9b60-2e5f095f2443_buggy.java
+++ b/tmp/70e15979-59d2-4d98-bd95-588a69702846_fixed.java
@@ -1,121 +1,188 @@
-    private Position decodePosition(
-            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
+private Position decodePosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     int status = buf.readUnsignedShort();
 
     position.setValid(BitUtil.check(status, 15));
-
     position.set(Position.KEY_STATUS, status);
     position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
     int event = buf.readUnsignedShort();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, event);
 
-        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
-
-        DateBuilder dateBuilder = new DateBuilder()
-                .setYear(Integer.parseInt(time.substring(0, 2)))
-                .setMonth(Integer.parseInt(time.substring(2, 4)))
-                .setDay(Integer.parseInt(time.substring(4, 6)))
-                .setHour(Integer.parseInt(time.substring(6, 8)))
-                .setMinute(Integer.parseInt(time.substring(8, 10)))
-                .setSecond(Integer.parseInt(time.substring(10, 12)));
-        position.setTime(dateBuilder.getDate());
+    // Read the time field; some devices send a fixed 12-digit (yyMMddHHmmss)
+    // timestamp while others omit leading zeroes, resulting in a variable-length string.
+    String timeString = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
+    Date time;
+    if (timeString.length() == 12) {
+        // Fixed format: yyMMddHHmmss
+        int year = Integer.parseInt(timeString.substring(0, 2));
+        int month = Integer.parseInt(timeString.substring(2, 4));
+        int day = Integer.parseInt(timeString.substring(4, 6));
+        int hour = Integer.parseInt(timeString.substring(6, 8));
+        int minute = Integer.parseInt(timeString.substring(8, 10));
+        int second = Integer.parseInt(timeString.substring(10, 12));
+        year += (year < 70 ? 2000 : 1900);
+        time = new DateBuilder()
+                .setYear(year)
+                .setMonth(month)
+                .setDay(day)
+                .setHour(hour)
+                .setMinute(minute)
+                .setSecond(second)
+                .getDate();
+    } else {
+        // Variable-length format, e.g. "137191681" representing 13, 7, 19, 16, 8, 1
+        int pos = 0;
+        int year = Integer.parseInt(timeString.substring(pos, pos + 2));
+        pos += 2;
+        int month;
+        if (pos + 2 <= timeString.length()
+                && Integer.parseInt(timeString.substring(pos, pos + 2)) <= 12) {
+            month = Integer.parseInt(timeString.substring(pos, pos + 2));
+            pos += 2;
+        } else {
+            month = Integer.parseInt(timeString.substring(pos, pos + 1));
+            pos += 1;
+        }
+        int day;
+        if (pos + 2 <= timeString.length()
+                && Integer.parseInt(timeString.substring(pos, pos + 2)) <= 31) {
+            day = Integer.parseInt(timeString.substring(pos, pos + 2));
+            pos += 2;
+        } else {
+            day = Integer.parseInt(timeString.substring(pos, pos + 1));
+            pos += 1;
+        }
+        int hour;
+        if (pos + 2 <= timeString.length()
+                && Integer.parseInt(timeString.substring(pos, pos + 2)) <= 23) {
+            hour = Integer.parseInt(timeString.substring(pos, pos + 2));
+            pos += 2;
+        } else {
+            hour = Integer.parseInt(timeString.substring(pos, pos + 1));
+            pos += 1;
+        }
+        int minute;
+        if (pos + 2 <= timeString.length()
+                && Integer.parseInt(timeString.substring(pos, pos + 2)) <= 59) {
+            minute = Integer.parseInt(timeString.substring(pos, pos + 2));
+            pos += 2;
+        } else {
+            minute = Integer.parseInt(timeString.substring(pos, pos + 1));
+            pos += 1;
+        }
+        int second = 0;
+        if (pos < timeString.length()) {
+            if (pos + 2 <= timeString.length()
+                    && Integer.parseInt(timeString.substring(pos, pos + 2)) <= 59) {
+                second = Integer.parseInt(timeString.substring(pos, pos + 2));
+            } else {
+                second = Integer.parseInt(timeString.substring(pos));
+            }
+        }
+        year += (year < 70 ? 2000 : 1900);
+        time = new DateBuilder()
+                .setYear(year)
+                .setMonth(month)
+                .setDay(day)
+                .setHour(hour)
+                .setMinute(minute)
+                .setSecond(second)
+                .getDate();
+    }
+    position.setTime(time);
 
     position.setLongitude(buf.readInt() * 0.00001);
     position.setLatitude(buf.readInt() * 0.00001);
 
     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
     position.setCourse(buf.readUnsignedShort());
     position.setAltitude(buf.readUnsignedShort());
 
     position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
     Network network = new Network();
 
     while (buf.readableBytes() > 4) {
         int subtype = buf.readUnsignedShort();
         int length = buf.readUnsignedShort() - 4;
         int endIndex = buf.readerIndex() + length;
         switch (subtype) {
             case 0x0001:
                 int coolantTemperature = buf.readUnsignedByte() - 40;
                 if (coolantTemperature <= 215) {
                     position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                 }
                 int rpm = buf.readUnsignedShort();
                 if (rpm <= 65535) {
                     position.set(Position.KEY_RPM, rpm);
                 }
                 position.set("averageSpeed", buf.readUnsignedByte());
                 buf.readUnsignedShort(); // interval fuel consumption
                 position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                 position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                 position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                 position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                 buf.readUnsignedInt(); // trip id
                 if (buf.readerIndex() < endIndex) {
                     position.set("adBlueLevel", buf.readUnsignedByte() * 0.4);
                 }
                 break;
             case 0x0005:
                 position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                 position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                 buf.readUnsignedInt(); // run time
                 break;
             case 0x0009:
-                    position.set(
-                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                position.set(Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
                 break;
             case 0x0011:
                 position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
                 break;
             case 0x0014:
                 position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                 position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                 position.set("airTemp", buf.readUnsignedByte() - 40);
                 position.set("airFlow", buf.readUnsignedShort() * 0.01);
                 position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
                 break;
             case 0x0020:
-                    String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                String[] cells = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().split("\\+");
                 for (String cell : cells) {
                     String[] values = cell.split("@");
                     network.addCellTower(CellTower.from(
                             Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                             Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
                 }
                 break;
             case 0x0021:
-                    String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                String[] points = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().split("\\+");
                 for (String point : points) {
                     String[] values = point.split("@");
                     network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
                 }
                 break;
             default:
                 buf.skipBytes(length);
                 break;
         }
         buf.readerIndex(endIndex);
     }
 
     if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
         position.setNetwork(network);
     }
 
     sendResponse(channel, MSG_POSITION_RSP, index, null);
 
     return position;
 }
\ No newline at end of file
