diff --git a/tmp/bb402a12-beeb-40dd-97d6-688dc60d8201_buggy.java b/tmp/20f78900-eb6d-4621-8ce6-da510bafa118_fixed.java
index 862c60c..3e16ccb 100644
--- a/tmp/bb402a12-beeb-40dd-97d6-688dc60d8201_buggy.java
+++ b/tmp/20f78900-eb6d-4621-8ce6-da510bafa118_fixed.java
@@ -1,25 +1,30 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
         trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                       parentNode instanceof Document;
         trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = this.nextSibling();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+                || (next instanceof TextNode && (((TextNode) next).isBlank()));
         if (couldSkip && isBlank()) return;
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+        // Instead of indenting on first-child (siblingIndex==0), only indent if the preceding node requests an indent,
+        // for example, after a <br> tag.
+        Node prev = siblingIndex > 0 ? siblingNodes().get(siblingIndex - 1) : null;
+        if (((prev instanceof Element && ((Element) prev).shouldIndent(out))
+                && parent != null && parent.tag().formatAsBlock() && !isBlank())
+                || (out.outline() && siblingNodes().size() > 0 && !isBlank())) {
             indent(accum, depth, out);
         }
+    }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
