diff --git a/tmp/e5fd7a13-d846-4543-b0ac-85df49c0328b_buggy.java b/tmp/d87d7fda-1161-4805-bc0b-deb4f42df853_fixed.java
index 862c60c..6e4d282 100644
--- a/tmp/e5fd7a13-d846-4543-b0ac-85df49c0328b_buggy.java
+++ b/tmp/d87d7fda-1161-4805-bc0b-deb4f42df853_fixed.java
@@ -1,25 +1,34 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
+        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock())
+                || parentNode instanceof Document;
         trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = this.nextSibling();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank()) return;
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+                || (next instanceof TextNode && ((TextNode) next).isBlank());
+        if (couldSkip && isBlank())
+            return;
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+        boolean previousIsBr = false;
+        if (siblingIndex > 0) {
+            Node prev = siblingNodes().get(siblingIndex - 1);
+            previousIsBr = (prev instanceof Element && ((Element) prev).tag().is("br"));
+        }
+
+        if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank())
+                || (previousIsBr && !isBlank())
+                || (out.outline() && siblingNodes().size() > 0 && !isBlank())) {
             indent(accum, depth, out);
         }
+    }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
