diff --git a/tmp/0fe8fae8-2e6b-454a-9849-7ff83e797927_buggy.java b/tmp/4175f68b-b210-4460-ac69-2bb9dcfd260b_fixed.java
index 862c60c..12abede 100644
--- a/tmp/0fe8fae8-2e6b-454a-9849-7ff83e797927_buggy.java
+++ b/tmp/4175f68b-b210-4460-ac69-2bb9dcfd260b_fixed.java
@@ -1,25 +1,33 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
+        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) || parentNode instanceof Document;
         trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = this.nextSibling();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank()) return;
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+            || (next instanceof TextNode && (((TextNode) next).isBlank()));
+        if (couldSkip && isBlank())
+            return;
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+        boolean shouldIndent = false;
+        // NEW: if the previous sibling is a <br> then force an indent.
+        Node prev = this.previousSibling();
+        if (prev instanceof Element && ((Element) prev).tag().getName().equals("br")) {
+            shouldIndent = true;
+        } else if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank())
+            || (out.outline() && siblingNodes().size() > 0 && !isBlank())) {
+            shouldIndent = true;
+        }
+        if (shouldIndent)
             indent(accum, depth, out);
     }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
