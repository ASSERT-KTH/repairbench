diff --git a/tmp/eb54d9ee-7bc7-4ce0-829c-4a0b02bdd3a2_buggy.java b/tmp/da8cbaa7-6314-4a3a-a683-e551c4e39cd8_fixed.java
index 2b96a40..6b88e49 100644
--- a/tmp/eb54d9ee-7bc7-4ce0-829c-4a0b02bdd3a2_buggy.java
+++ b/tmp/da8cbaa7-6314-4a3a-a683-e551c4e39cd8_fixed.java
@@ -1,101 +1,127 @@
 protected Object decodePosition(DeviceSession deviceSession, String content) throws Exception {
 
+    // Handle result messages which start with "&&:"
+    if (content.startsWith("&&:")) {
+        // Expected format: &&:<length>,<deviceId>,<resultCode>,<resultText>
+        // For example: "&&:23,860262050015424,129,OKA2" should yield KEY_RESULT = "129,OK"
+        String[] parts = content.split(",");
+        if (parts.length >= 4) {
+            Position position = new Position(getProtocolName());
+            position.setDeviceId(parts[1]);
+            String resultText = parts[3].length() > 2 ? parts[3].substring(0, parts[3].length() - 2) : parts[3];
+            position.set(Position.KEY_RESULT, parts[2] + "," + resultText);
+            return position;
+        }
+        return null;
+    }
+
     Parser parser = new Parser(PATTERN_POSITION, content);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     int event = parser.nextInt();
     String eventData = parser.next();
     position.set(Position.KEY_EVENT, event);
     if (event == 53) {
         position.set(Position.KEY_DRIVER_UNIQUE_ID, eventData);
     } else {
         position.set(Position.KEY_ALARM, decodeAlarm(event));
     }
 
     position.setTime(parser.nextDateTime());
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextDouble());
     position.setLongitude(parser.nextDouble());
 
     position.set(Position.KEY_SATELLITES, parser.nextInt());
     position.set(Position.KEY_HDOP, parser.nextDouble());
 
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
     position.setCourse(parser.nextInt());
     position.setAltitude(parser.nextInt());
 
-        position.set(Position.KEY_ODOMETER, parser.nextInt());
+    // FIX: Use nextLong() for odometer to support large numbers (e.g. "2286304571")
+    position.set(Position.KEY_ODOMETER, parser.nextLong());
 
     position.setNetwork(new Network(CellTower.from(
             parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt(), parser.nextInt())));
 
     position.set(Position.KEY_STATUS, parser.nextHexInt());
 
     int input = parser.nextHexInt();
     int output = parser.nextHexInt();
     position.set(Position.KEY_IGNITION, BitUtil.check(input, 1));
     position.set(Position.KEY_DOOR, BitUtil.check(input, 2));
     position.set(Position.KEY_INPUT, input);
     position.set(Position.KEY_OUTPUT, output);
 
     position.set(Position.KEY_POWER, parser.nextHexInt() * 0.01);
     position.set(Position.KEY_BATTERY, parser.nextHexInt() * 0.01);
 
     if (parser.hasNext()) {
         String[] adc = parser.next().split("\\|");
         for (int i = 1; i < adc.length; i++) {
             position.set(Position.PREFIX_ADC + (i + 1), Integer.parseInt(adc[i], 16) * 0.01);
         }
     }
 
     if (parser.hasNext()) {
         String[] fuels = parser.next().split("\\|");
         for (String fuel : fuels) {
+            // Only process fuel if the token length is sufficient (at least 2 characters for index)
+            if (fuel.length() < 2) {
+                continue;
+            }
             int index = Integer.parseInt(fuel.substring(0, 2));
             int value = Integer.parseInt(fuel.substring(2), 16);
             position.set("fuel" + index, value * 0.1);
         }
     }
 
     if (parser.hasNext()) {
         String[] temperatures = parser.next().split("\\|");
         for (String temperature : temperatures) {
             int index = Integer.parseInt(temperature.substring(0, 2));
             int value = Integer.parseInt(temperature.substring(2), 16);
             double convertedValue = BitUtil.to(value, 15);
             if (BitUtil.check(value, 15)) {
                 convertedValue = -convertedValue;
             }
             position.set(Position.PREFIX_TEMP + index, convertedValue * 0.1);
         }
     }
 
     if (parser.hasNextAny(9)) {
         position.set(Position.KEY_RPM, parser.nextInt());
         position.set(Position.KEY_ENGINE_LOAD, parser.nextInt());
         position.set("airFlow", parser.nextInt());
         position.set("airPressure", parser.nextInt());
         if (parser.hasNext()) {
                 position.set("airTemp", parser.nextInt() - 40);
         }
         position.set(Position.KEY_THROTTLE, parser.nextInt());
         if (parser.hasNext()) {
             position.set(Position.KEY_COOLANT_TEMP, parser.nextInt() - 40);
         }
         if (parser.hasNext()) {
             position.set(Position.KEY_FUEL_CONSUMPTION, parser.nextInt() * 0.1);
         }
-            position.set(Position.KEY_FUEL_LEVEL, parser.nextInt());
+        // Handle fuel level carefully: if the token is empty, do not set the attribute.
+        if (parser.hasNext()) {
+            String fuelLevelToken = parser.next();
+            if (!fuelLevelToken.isEmpty()) {
+                position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(fuelLevelToken));
+            }
+        }
     }
 
     if (parser.hasNext()) {
         position.set(Position.KEY_HOURS, parser.nextInt() * 1000L);
     }
 
     return position;
 }
\ No newline at end of file
