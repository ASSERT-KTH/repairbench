diff --git a/tmp/6922b6c6-4887-462b-b62c-b1112b64e3eb_buggy.java b/tmp/9d29a0d7-957c-4b20-8c18-4115d2e9bdcf_fixed.java
index 2b96a40..6252e85 100644
--- a/tmp/6922b6c6-4887-462b-b62c-b1112b64e3eb_buggy.java
+++ b/tmp/9d29a0d7-957c-4b20-8c18-4115d2e9bdcf_fixed.java
@@ -1,101 +1,150 @@
 protected Object decodePosition(DeviceSession deviceSession, String content) throws Exception {
 
+    // Special handling for response messages, e.g. "&&:23,860294050...,129,OKA2"
+    if (content.startsWith("&&:")) {
+        String[] parts = content.split(",");
+        if (parts.length >= 4) {
+            Position position = new Position(getProtocolName());
+            position.setDeviceId(deviceSession.getDeviceId());
+            // The third and fourth parts contain the result.
+            // Strip the last two characters from the fourth part (typically checksum)
+            String resultText = parts[3];
+            if (resultText.length() >= 2) {
+                resultText = resultText.substring(0, resultText.length() - 2);
+            }
+            position.set(Position.KEY_RESULT, parts[2] + "," + resultText);
+            return position;
+        }
+    }
+
     Parser parser = new Parser(PATTERN_POSITION, content);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     int event = parser.nextInt();
     String eventData = parser.next();
     position.set(Position.KEY_EVENT, event);
     if (event == 53) {
         position.set(Position.KEY_DRIVER_UNIQUE_ID, eventData);
     } else {
         position.set(Position.KEY_ALARM, decodeAlarm(event));
     }
 
     position.setTime(parser.nextDateTime());
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextDouble());
     position.setLongitude(parser.nextDouble());
 
     position.set(Position.KEY_SATELLITES, parser.nextInt());
     position.set(Position.KEY_HDOP, parser.nextDouble());
 
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
     position.setCourse(parser.nextInt());
     position.setAltitude(parser.nextInt());
 
-        position.set(Position.KEY_ODOMETER, parser.nextInt());
+    // FIX: Use nextLong() for odometer because the value can be larger than Integer.MAX_VALUE
+    position.set(Position.KEY_ODOMETER, parser.nextLong());
 
     position.setNetwork(new Network(CellTower.from(
             parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt(), parser.nextInt())));
 
     position.set(Position.KEY_STATUS, parser.nextHexInt());
 
     int input = parser.nextHexInt();
     int output = parser.nextHexInt();
     position.set(Position.KEY_IGNITION, BitUtil.check(input, 1));
     position.set(Position.KEY_DOOR, BitUtil.check(input, 2));
     position.set(Position.KEY_INPUT, input);
     position.set(Position.KEY_OUTPUT, output);
 
     position.set(Position.KEY_POWER, parser.nextHexInt() * 0.01);
     position.set(Position.KEY_BATTERY, parser.nextHexInt() * 0.01);
 
     if (parser.hasNext()) {
-            String[] adc = parser.next().split("\\|");
+        String adcText = parser.next();
+        if (!adcText.isEmpty()) {
+            String[] adc = adcText.split("\\|");
             for (int i = 1; i < adc.length; i++) {
                 position.set(Position.PREFIX_ADC + (i + 1), Integer.parseInt(adc[i], 16) * 0.01);
             }
         }
+    }
 
     if (parser.hasNext()) {
-            String[] fuels = parser.next().split("\\|");
+        String fuelsText = parser.next();
+        if (!fuelsText.isEmpty()) {
+            String[] fuels = fuelsText.split("\\|");
             for (String fuel : fuels) {
+                if (fuel.length() >= 2) {
                     int index = Integer.parseInt(fuel.substring(0, 2));
                     int value = Integer.parseInt(fuel.substring(2), 16);
                     position.set("fuel" + index, value * 0.1);
                 }
             }
+        }
+    }
 
     if (parser.hasNext()) {
-            String[] temperatures = parser.next().split("\\|");
+        String tempsText = parser.next();
+        if (!tempsText.isEmpty()) {
+            String[] temperatures = tempsText.split("\\|");
             for (String temperature : temperatures) {
+                if (temperature.length() >= 2) {
                     int index = Integer.parseInt(temperature.substring(0, 2));
                     int value = Integer.parseInt(temperature.substring(2), 16);
                     double convertedValue = BitUtil.to(value, 15);
                     if (BitUtil.check(value, 15)) {
                         convertedValue = -convertedValue;
                     }
                     position.set(Position.PREFIX_TEMP + index, convertedValue * 0.1);
                 }
             }
+        }
+    }
 
+    // Process advanced parameters if available
     if (parser.hasNextAny(9)) {
         position.set(Position.KEY_RPM, parser.nextInt());
         position.set(Position.KEY_ENGINE_LOAD, parser.nextInt());
         position.set("airFlow", parser.nextInt());
         position.set("airPressure", parser.nextInt());
         if (parser.hasNext()) {
-                position.set("airTemp", parser.nextInt() - 40);
+                String airTempText = parser.next();
+                if (!airTempText.isEmpty()) {
+                    position.set("airTemp", Integer.parseInt(airTempText) - 40);
+                }
         }
         position.set(Position.KEY_THROTTLE, parser.nextInt());
         if (parser.hasNext()) {
-                position.set(Position.KEY_COOLANT_TEMP, parser.nextInt() - 40);
+            String coolantText = parser.next();
+            if (!coolantText.isEmpty()) {
+                position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(coolantText) - 40);
+            }
         }
         if (parser.hasNext()) {
-                position.set(Position.KEY_FUEL_CONSUMPTION, parser.nextInt() * 0.1);
+            String fuelConsumptionText = parser.next();
+            if (!fuelConsumptionText.isEmpty()) {
+                position.set(Position.KEY_FUEL_CONSUMPTION, Integer.parseInt(fuelConsumptionText) * 0.1);
+            }
+        }
+        if (parser.hasNext()) {
+            String fuelLevelText = parser.next();
+            if (!fuelLevelText.isEmpty()) {
+                position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(fuelLevelText));
+            }
         }
-            position.set(Position.KEY_FUEL_LEVEL, parser.nextInt());
     }
 
     if (parser.hasNext()) {
-            position.set(Position.KEY_HOURS, parser.nextInt() * 1000L);
+        String hoursText = parser.next();
+        if (!hoursText.isEmpty()) {
+            position.set(Position.KEY_HOURS, Integer.parseInt(hoursText) * 1000L);
+        }
     }
 
     return position;
 }
\ No newline at end of file
