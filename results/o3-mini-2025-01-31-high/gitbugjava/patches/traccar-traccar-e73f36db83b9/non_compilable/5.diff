diff --git a/tmp/587cb1fa-3c96-486f-809f-399eaa92077b_buggy.java b/tmp/0d9901c3-9a08-4eab-b3bb-98d22a9565ea_fixed.java
index cd6f89c..982313f 100644
--- a/tmp/587cb1fa-3c96-486f-809f-399eaa92077b_buggy.java
+++ b/tmp/0d9901c3-9a08-4eab-b3bb-98d22a9565ea_fixed.java
@@ -1,102 +1,108 @@
 private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {
     Parser parser = new Parser(PATTERN_ERI, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());
     if (deviceSession == null) {
         return null;
     }
 
     long mask = parser.nextHexLong();
 
     LinkedList<Position> positions = new LinkedList<>();
 
     Integer power = parser.nextInt();
 
     Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());
     while (itemParser.find()) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         decodeLocation(position, itemParser);
 
         positions.add(position);
     }
 
     Position position = positions.getLast();
 
     skipLocation(parser);
 
     if (power != null) {
         position.set(Position.KEY_POWER, power * 0.001);
     }
 
     if (parser.hasNextAny(12)) {
 
         position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
         position.set(Position.KEY_HOURS, parseHours(parser.next()));
         position.set(Position.PREFIX_ADC + 1, parser.next());
         position.set(Position.PREFIX_ADC + 2, parser.next());
         position.set(Position.PREFIX_ADC + 3, parser.next());
         if (parser.hasNext(2)) {
             position.set(Position.KEY_INPUT, parser.nextHexInt());
             position.set(Position.KEY_OUTPUT, parser.nextHexInt());
         }
         if (parser.hasNext(4)) {
             position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
             decodeStatus(position, parser);
         }
 
         int index = 0;
         String[] data = parser.next().split(",");
 
-            index += 1; // device type
+        // Consume device type
+        index++;
 
+        // If digital fuel sensor data is present, use it to set fuel level.
         if (BitUtil.check(mask, 0)) {
-                index += 1; // digital fuel sensor data
+            String fuel = data[index++];
+            if (!fuel.isEmpty()) {
+                position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(fuel, 16));
+            }
         }
 
         if (BitUtil.check(mask, 1)) {
             int deviceCount = Integer.parseInt(data[index++]);
             for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // id
-                    index += 1; // type
+                index++; // skip sensor id
+                index++; // skip sensor type
                 if (!data[index++].isEmpty()) {
-                        position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index - 1], 16) * 0.0625);
+                    position.set(Position.PREFIX_TEMP + i,
+                            (short) (Integer.parseInt(data[index - 1], 16) * 0.0625));
                 }
             }
         }
 
         if (BitUtil.check(mask, 2)) {
-                index += 1; // can data
+            index++; // skip CAN data
         }
 
         if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {
             int deviceCount = Integer.parseInt(data[index++]);
             for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // type
+                index++; // skip sensor type
                 if (BitUtil.check(mask, 3)) {
                     position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index++]));
                 }
                 if (BitUtil.check(mask, 4)) {
-                        index += 1; // volume
+                    index++; // skip fuel volume
                 }
             }
         }
 
     }
 
     if (parser.hasNext()) {
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
     }
 
     decodeDeviceTime(position, parser);
     if (ignoreFixTime) {
         positions.clear();
         positions.add(position);
     }
 
     return positions;
 }
\ No newline at end of file
