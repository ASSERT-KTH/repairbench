diff --git a/tmp/309c5cf7-e3be-4a6e-8322-f0000d52c9c7_buggy.java b/tmp/6142df23-9ac2-4b73-ac12-a3f8bac165e9_fixed.java
index cd6f89c..5510190 100644
--- a/tmp/309c5cf7-e3be-4a6e-8322-f0000d52c9c7_buggy.java
+++ b/tmp/6142df23-9ac2-4b73-ac12-a3f8bac165e9_fixed.java
@@ -1,102 +1,111 @@
 private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {
     Parser parser = new Parser(PATTERN_ERI, sentence);
     if (!parser.matches()) {
         return null;
     }
-
+    // The first field in the message is a protocol‐specific header; skip it.
+    parser.next();
+    // Now the next field is the unique device id (IMEI)
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());
     if (deviceSession == null) {
         return null;
     }
-
-        long mask = parser.nextHexLong();
-
-        LinkedList<Position> positions = new LinkedList<>();
-
+    // The next field (originally read as a hex long) is not used for sensor data,
+    // so just read and ignore it.
+    parser.nextHexLong();
     Integer power = parser.nextInt();
 
+    LinkedList<Position> positions = new LinkedList<>();
+
+    // The next field contains location information which is parsed using a dedicated pattern.
     Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());
     while (itemParser.find()) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
-
         decodeLocation(position, itemParser);
-
         positions.add(position);
     }
 
     Position position = positions.getLast();
 
+    // Some protocols include an extra location token which must be skipped.
     skipLocation(parser);
 
     if (power != null) {
         position.set(Position.KEY_POWER, power * 0.001);
     }
 
     if (parser.hasNextAny(12)) {
 
         position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
         position.set(Position.KEY_HOURS, parseHours(parser.next()));
         position.set(Position.PREFIX_ADC + 1, parser.next());
         position.set(Position.PREFIX_ADC + 2, parser.next());
         position.set(Position.PREFIX_ADC + 3, parser.next());
         if (parser.hasNext(2)) {
             position.set(Position.KEY_INPUT, parser.nextHexInt());
             position.set(Position.KEY_OUTPUT, parser.nextHexInt());
         }
         if (parser.hasNext(4)) {
             position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
             decodeStatus(position, parser);
         }
 
-            int index = 0;
+        // For sensor readings the message contains a separate sensor mask.
+        long sensorMask = parser.nextHexLong();
+
+        // The remaining fields are provided as a comma‐separated string.
         String[] data = parser.next().split(",");
+        int index = 0;
 
-            index += 1; // device type
+        // First value in sensor data is the device type – ignore it.
+        index += 1;
 
-            if (BitUtil.check(mask, 0)) {
-                index += 1; // digital fuel sensor data
+        if (BitUtil.check(sensorMask, 0)) {
+            index += 1; // skip digital fuel sensor data if present
         }
 
-            if (BitUtil.check(mask, 1)) {
+        if (BitUtil.check(sensorMask, 1)) {
             int deviceCount = Integer.parseInt(data[index++]);
             for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // id
-                    index += 1; // type
+                index += 1; // skip sensor id
+                index += 1; // skip sensor type
                 if (!data[index++].isEmpty()) {
-                        position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index - 1], 16) * 0.0625);
+                    position.set(Position.PREFIX_TEMP + i,
+                            (short) (Integer.parseInt(data[index - 1], 16) * 0.0625));
                 }
             }
         }
 
-            if (BitUtil.check(mask, 2)) {
-                index += 1; // can data
+        if (BitUtil.check(sensorMask, 2)) {
+            index += 1; // skip CAN data
         }
 
-            if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {
+        // IMPORTANT: Fuel level is sent as a hexadecimal value.
+        if (BitUtil.check(sensorMask, 3) || BitUtil.check(sensorMask, 4)) {
             int deviceCount = Integer.parseInt(data[index++]);
             for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // type
-                    if (BitUtil.check(mask, 3)) {
-                        position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index++]));
+                index += 1; // skip sensor type
+                if (BitUtil.check(sensorMask, 3)) {
+                    // Parse fuel level in hexadecimal (e.g. "0099" becomes 0x99 == 153)
+                    position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(data[index++], 16));
                 }
-                    if (BitUtil.check(mask, 4)) {
-                        index += 1; // volume
+                if (BitUtil.check(sensorMask, 4)) {
+                    index += 1; // skip volume
                 }
             }
         }
-
     }
 
     if (parser.hasNext()) {
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
     }
 
     decodeDeviceTime(position, parser);
     if (ignoreFixTime) {
         positions.clear();
         positions.add(position);
     }
 
     return positions;
 }
\ No newline at end of file
