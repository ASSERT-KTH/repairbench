diff --git a/tmp/1a466681-20a1-4e0f-a2ba-a431a65afd60_buggy.java b/tmp/3d8a46a5-4aca-4702-a1d1-6a90488c8aa1_fixed.java
index 0a8838d..b9fa7ed 100644
--- a/tmp/1a466681-20a1-4e0f-a2ba-a431a65afd60_buggy.java
+++ b/tmp/3d8a46a5-4aca-4702-a1d1-6a90488c8aa1_fixed.java
@@ -1,61 +1,70 @@
 private List<Position> parseData(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {
     List<Position> positions = new LinkedList<>();
 
+    // The Teltonika TCP message contains an 8-byte header.
     if (!connectionless) {
-            buf.readUnsignedInt(); // data length
+        buf.readLong(); // skip 8-byte header (data length)
     }
 
     int codec = buf.readUnsignedByte();
     int count = buf.readUnsignedByte();
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
     String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
-
         position.setDeviceId(deviceSession.getDeviceId());
         position.setValid(true);
 
         if (codec == CODEC_13) {
+            // For CODEC_13, the message carries a driver unique id embedded in a pipe-delimited text string.
             buf.readUnsignedByte(); // type
             int length = buf.readInt() - 4;
             getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));
+            String data;
             if (isPrintable(buf, length)) {
-                    position.set(Position.KEY_RESULT,
-                            buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
+                data = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();
             } else {
-                    position.set(Position.KEY_RESULT,
-                            ByteBufUtil.hexDump(buf.readSlice(length)));
+                data = ByteBufUtil.hexDump(buf.readSlice(length));
+            }
+            // If the data is in the form "GTSLC|6|1|0|12749884|1|â€¦" then extract field 5 as the driver unique id.
+            if (data.contains("|")) {
+                String[] parts = data.split("\\|");
+                if (parts.length >= 5) {
+                    position.set(Position.KEY_DRIVER_UNIQUE_ID, parts[4]);
+                }
+            } else {
+                position.set(Position.KEY_RESULT, data);
             }
         } else if (codec == CODEC_12) {
             decodeSerial(channel, remoteAddress, deviceSession, position, buf);
         } else {
             decodeLocation(position, buf, codec, model);
         }
 
         if (!position.getOutdated() || !position.getAttributes().isEmpty()) {
             positions.add(position);
         }
     }
 
     if (channel != null && codec != CODEC_12 && codec != CODEC_13) {
         ByteBuf response = Unpooled.buffer();
         if (connectionless) {
             response.writeShort(5);
             response.writeShort(0);
             response.writeByte(0x01);
             response.writeByte(locationPacketId);
             response.writeByte(count);
         } else {
             response.writeInt(count);
         }
         channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
     }
 
     return positions.isEmpty() ? null : positions;
 }
\ No newline at end of file
