diff --git a/tmp/8d1068fa-1b93-4f3c-afa9-e5c107cd25af_buggy.java b/tmp/fb19e359-d43d-4c6d-8727-b653e96b05de_fixed.java
index c9c77a4..da459d8 100644
--- a/tmp/8d1068fa-1b93-4f3c-afa9-e5c107cd25af_buggy.java
+++ b/tmp/fb19e359-d43d-4c6d-8727-b653e96b05de_fixed.java
@@ -1,35 +1,40 @@
 URL build() {
     try {
-            // use the URI class to encode non-ascii in path
-            URI uri = new URI(
-                u.getProtocol(),
-                u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
-                u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
-            );
+        String protocol = u.getProtocol();
+        String userInfo = u.getUserInfo();
+        String host = IDN.toASCII(decodePart(u.getHost())); // puny-code
+        int port = u.getPort();
+        String path = u.getPath(); // don't decode the path, preserve the encoding
         
-            String normUrl = uri.toASCIIString();
-            if (q != null || u.getRef() != null) {
-                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
+        // Build the base URL (without query and fragment)
+        StringBuilder sb = StringUtil.borrowBuilder()
+            .append(protocol).append("://");
+        if (userInfo != null && !userInfo.isEmpty())
+            sb.append(userInfo).append('@');
+        sb.append(host);
+        if (port != -1)
+            sb.append(':').append(port);
+        if (path != null)
+            sb.append(path);
+        
+        // Append query and fragment
         if (q != null) {
             sb.append('?');
             appendToAscii(StringUtil.releaseBuilder(q), true, sb);
         }
         if (u.getRef() != null) {
             sb.append('#');
             appendToAscii(u.getRef(), false, sb);
         }
-                normUrl = StringUtil.releaseBuilder(sb);
-            }
+        
+        String normUrl = StringUtil.releaseBuilder(sb);
         u = new URL(normUrl);
         return u;
-        } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
+    } catch (MalformedURLException | UnsupportedEncodingException e) {
         // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
         // the remote end will be able to handle it, so in prod we just pass the original URL.
         // The UnsupportedEncodingException would never happen as always UTF8
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
\ No newline at end of file
