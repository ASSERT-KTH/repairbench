diff --git a/tmp/20ea5cef-ec81-4012-978e-9cc21d23bed9_buggy.java b/tmp/9981488c-b3b5-492b-a037-4b001b6c9c40_fixed.java
index c9c77a4..dfd4794 100644
--- a/tmp/20ea5cef-ec81-4012-978e-9cc21d23bed9_buggy.java
+++ b/tmp/9981488c-b3b5-492b-a037-4b001b6c9c40_fixed.java
@@ -1,35 +1,45 @@
 URL build() {
     try {
-            // use the URI class to encode non-ascii in path
-            URI uri = new URI(
-                u.getProtocol(),
-                u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
-                u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
-            );
-
-            String normUrl = uri.toASCIIString();
-            if (q != null || u.getRef() != null) {
-                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
+        // Pre-process the host using punycode
+        String host = IDN.toASCII(decodePart(u.getHost()));
+        
+        // Build a string URL manually instead of using URI to avoid re-encoding already encoded parts
+        StringBuilder sb = StringUtil.borrowBuilder()
+            .append(u.getProtocol())
+            .append("://");
+        
+        if (u.getUserInfo() != null) {
+            sb.append(u.getUserInfo()).append('@');
+        }
+        
+        sb.append(host);
+        
+        if (u.getPort() != -1) {
+            sb.append(':').append(u.getPort());
+        }
+        
+        if (u.getPath() != null) {
+            sb.append(u.getPath()); // Keep path as is without decoding
+        }
+        
         if (q != null) {
             sb.append('?');
             appendToAscii(StringUtil.releaseBuilder(q), true, sb);
         }
+        
         if (u.getRef() != null) {
             sb.append('#');
             appendToAscii(u.getRef(), false, sb);
         }
-                normUrl = StringUtil.releaseBuilder(sb);
-            }
+        
+        String normUrl = StringUtil.releaseBuilder(sb);
         u = new URL(normUrl);
         return u;
-        } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
+    } catch (MalformedURLException | UnsupportedEncodingException e) {
         // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
         // the remote end will be able to handle it, so in prod we just pass the original URL.
         // The UnsupportedEncodingException would never happen as always UTF8
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
\ No newline at end of file
