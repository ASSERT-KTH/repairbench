diff --git a/tmp/c5e57625-f24c-4ad3-806f-f117fadaafae_buggy.java b/tmp/2a777aa8-91a0-42b1-9b95-899dd94f0de0_fixed.java
index 27f2719..55e4442 100644
--- a/tmp/c5e57625-f24c-4ad3-806f-f117fadaafae_buggy.java
+++ b/tmp/2a777aa8-91a0-42b1-9b95-899dd94f0de0_fixed.java
@@ -1,90 +1,107 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
 
     if (sentence.startsWith("!1,")) {
         int index = sentence.indexOf(',', 3);
         if (index < 0) {
             index = sentence.length();
         }
         getDeviceSession(channel, remoteAddress, sentence.substring(3, index));
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
     if (deviceSession == null || !sentence.matches("![35A-D],.*")) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     String type = sentence.substring(1, 2);
     position.set(Position.KEY_TYPE, type);
 
     if (type.equals("3")) {
 
         getLastLocation(position, null);
 
         position.set(Position.KEY_RESULT, sentence.substring(3));
 
         return position;
 
     } else if (type.equals("5")) {
 
         String[] values = sentence.split(",");
 
         getLastLocation(position, null);
 
         position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));
         if (values.length >= 4) {
             position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
         }
 
         return position;
 
     } else if (type.equals("B") || type.equals("D")) {
 
         Parser parser = new Parser(PATTERN_BD, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));
         position.set(Position.KEY_HDOP, parser.nextDouble(0));
 
         return position;
 
     } else if (type.equals("C")) {
 
         Parser parser = new Parser(PATTERN_C, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
         return position;
 
     } else if (type.equals("A")) {
 
-            Parser parser = new Parser(PATTERN_A, sentence);
-            if (!parser.matches()) {
+        String[] values = sentence.substring(3).split(",");
+        if (values.length < 7) {
             return null;
         }
 
-            decodeFix(position, parser);
+        DateBuilder dateBuilder = new DateBuilder();
+        if (values[0].contains("/")) {
+            dateBuilder.setDateReverse(values[0]);
+        } else {
+            dateBuilder.setDate(values[0]);
+        }
+        dateBuilder.setTime(values[1]);
+        position.setTime(dateBuilder.getDate());
+
+        position.setLatitude(Double.parseDouble(values[2]));
+        position.setLongitude(Double.parseDouble(values[3]));
+        position.setSpeed(Double.parseDouble(values[4]));
+        if (values.length > 5) {
+            position.setCourse(values[5].isEmpty() ? 0.0 : Double.parseDouble(values[5]));
+        }
+        if (values.length > 6) {
+            position.setValid(values[6].isEmpty() || values[6].equals("1"));
+        }
 
         return position;
 
     }
 
     return null;
 }
\ No newline at end of file
