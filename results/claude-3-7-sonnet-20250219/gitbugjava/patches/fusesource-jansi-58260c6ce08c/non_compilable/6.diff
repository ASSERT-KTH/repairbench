diff --git a/tmp/37d8a5b2-d286-4e85-9d2b-7d8f0fcfb848_buggy.java b/tmp/fc5500a1-5d3e-4fb1-9f06-cc973750696c_fixed.java
index 712f277..58258f8 100644
--- a/tmp/37d8a5b2-d286-4e85-9d2b-7d8f0fcfb848_buggy.java
+++ b/tmp/fc5500a1-5d3e-4fb1-9f06-cc973750696c_fixed.java
@@ -1,48 +1,55 @@
 /**
  * Renders the given input to the target Appendable.
  *
  * @param input
  *            source to render
  * @param target
  *            render onto this target Appendable.
  * @return the given Appendable
  * @throws IOException
  *             If an I/O error occurs
  */
 public static Appendable render(final String input, Appendable target) throws IOException {
 
     int i = 0;
     int j, k;
 
     while (true) {
         j = input.indexOf(BEGIN_TOKEN, i);
+        k = input.indexOf(END_TOKEN, i);
+        
+        // Check if END_TOKEN appears before BEGIN_TOKEN or if BEGIN_TOKEN doesn't exist but END_TOKEN does
+        if ((j == -1 && k != -1) || (j != -1 && k != -1 && k < j)) {
+            throw new IllegalArgumentException("Invalid syntax: END_TOKEN before BEGIN_TOKEN");
+        }
+        
         if (j == -1) {
             if (i == 0) {
                 target.append(input);
                 return target;
             }
             target.append(input.substring(i));
             return target;
         }
         target.append(input.substring(i, j));
         k = input.indexOf(END_TOKEN, j);
 
         if (k == -1) {
             target.append(input);
             return target;
         }
         j += BEGIN_TOKEN_LEN;
         String spec = input.substring(j, k);
 
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
         if (items.length == 1) {
             target.append(input);
             return target;
         }
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
         target.append(replacement);
 
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
