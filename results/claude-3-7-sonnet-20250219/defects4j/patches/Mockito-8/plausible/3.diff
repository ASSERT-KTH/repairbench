diff --git a/tmp/0eead293-e1a4-425d-be3d-1e1a4ad9c191_buggy.java b/tmp/f684b27d-5e59-471f-984e-a94cb075e56e_fixed.java
index 42b58d0..65d1421 100644
--- a/tmp/0eead293-e1a4-425d-be3d-1e1a4ad9c191_buggy.java
+++ b/tmp/f684b27d-5e59-471f-984e-a94cb075e56e_fixed.java
@@ -1,19 +1,35 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    Type rawType = parameterizedType.getRawType();
+    // Check if rawType is a Class before trying to get type parameters
+    if (!(rawType instanceof Class)) {
+        return;
+    }
+    
+    TypeVariable[] typeParameters = ((Class<?>) rawType).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+    
     for (int i = 0; i < actualTypeArguments.length; i++) {
+        // Guard against index out of bounds
+        if (i >= typeParameters.length) {
+            continue;
+        }
+        
         TypeVariable typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
         
+        // Avoid storing recursive references - check if same type variable
+        if (actualTypeArgument == typeParameter) {
+            continue;
+        }
+        
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
