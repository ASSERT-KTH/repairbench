diff --git a/tmp/d59499fd-72b9-4734-b8e2-a4d299d34e75_buggy.java b/tmp/191a38ad-37f8-4e20-b4ea-329adbadf752_fixed.java
index 5481b94..27ed401 100644
--- a/tmp/d59499fd-72b9-4734-b8e2-a4d299d34e75_buggy.java
+++ b/tmp/191a38ad-37f8-4e20-b4ea-329adbadf752_fixed.java
@@ -1,49 +1,51 @@
 public Object handle(Invocation invocation) throws Throwable {
     if (invocationContainerImpl.hasAnswersForStubbing()) {
         // stubbing voids with stubVoid() or doAnswer() style
         InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress
                         .getArgumentMatcherStorage(), invocation);
         invocationContainerImpl.setMethodForStubbing(invocationMatcher);
         return null;
     }
     VerificationMode verificationMode = mockingProgress.pullVerificationMode();
 
     InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),
                     invocation);
 
     mockingProgress.validateState();
 
     //if verificationMode is not null then someone is doing verify()        
     if (verificationMode != null) {
         //We need to check if verification was started on the correct mock 
         // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
         if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
             VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            
             verificationMode.verify(data);
             return null;
+        } else {
             // this means there is an invocation on a different mock. Re-adding verification mode 
             // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
+            mockingProgress.verificationMode(verificationMode);
         }
     }
     
     invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
     OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
     mockingProgress.reportOngoingStubbing(ongoingStubbing);
 
     StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
 
     if (stubbedInvocation != null) {
         stubbedInvocation.captureArgumentsFrom(invocation);
         return stubbedInvocation.answer(invocation);
     } else {
         Object ret = mockSettings.getDefaultAnswer().answer(invocation);
 
         // redo setting invocation for potential stubbing in case of partial
         // mocks / spies.
         // Without it, the real method inside 'when' might have delegated
         // to other self method and overwrite the intended stubbed method
         // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
         invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
         return ret;
     }
 }
\ No newline at end of file
