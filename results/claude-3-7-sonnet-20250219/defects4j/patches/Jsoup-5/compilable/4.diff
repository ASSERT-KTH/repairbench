diff --git a/tmp/4c06f4ab-c536-4bd8-bff6-4922eba7cb7f_buggy.java b/tmp/1d35eae9-6836-448a-9737-3a095ddba9a2_fixed.java
index 39dd8e7..1d34654 100644
--- a/tmp/4c06f4ab-c536-4bd8-bff6-4922eba7cb7f_buggy.java
+++ b/tmp/1d35eae9-6836-448a-9737-3a095ddba9a2_fixed.java
@@ -1,30 +1,33 @@
 private Attribute parseAttribute() {
     tq.consumeWhitespace();
     String key = tq.consumeAttributeKey();
     String value = "";
+    
+    // Check if we have a valid key before proceeding
+    if (key.length() == 0) {
+        if (!tq.isEmpty())
+            tq.consume(); // consume one character and return null for invalid attribute
+        return null;
+    }
+    
     tq.consumeWhitespace();
     if (tq.matchChomp("=")) {
         tq.consumeWhitespace();
 
         if (tq.matchChomp(SQ)) {
             value = tq.chompTo(SQ);
         } else if (tq.matchChomp(DQ)) {
             value = tq.chompTo(DQ);
         } else {
             StringBuilder valueAccum = new StringBuilder();
             // no ' or " to look for, so scan to end tag or space (or end of stream)
             while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                 valueAccum.append(tq.consume());
             }
             value = valueAccum.toString();
         }
         tq.consumeWhitespace();
     }
-        if (key.length() != 0)
+    
     return Attribute.createFromEncoded(key, value);
-        else {
-            tq.consume();
-                
-            return null;
-        }
 }
\ No newline at end of file
