diff --git a/tmp/5508eee3-9d39-4560-9279-78c6d4d83a2a_buggy.java b/tmp/e4820be9-69c2-477d-8251-42058d87439d_fixed.java
index 4c1ed27..8d484b9 100644
--- a/tmp/5508eee3-9d39-4560-9279-78c6d4d83a2a_buggy.java
+++ b/tmp/e4820be9-69c2-477d-8251-42058d87439d_fixed.java
@@ -1,32 +1,31 @@
 /**
  * Translate an input onto a Writer. This is intentionally final as its algorithm is 
  * tightly coupled with the abstract method of this class. 
  *
  * @param input CharSequence that is being translated
  * @param out Writer to translate the text to
  * @throws IOException if and only if the Writer produces an IOException
  */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
     int len = input.length();
     while (pos < len) {
         int consumed = translate(input, pos, out);
         if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+            // Handle a single codepoint (which may be a surrogate pair)
+            int codePoint = Character.codePointAt(input, pos);
+            char[] c = Character.toChars(codePoint);
             out.write(c);
-                pos+= c.length;
-                continue;
-            }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+            pos += Character.charCount(codePoint);
+        } else {
+            // Move position forward by the number of chars consumed
+            pos += consumed;
         }
     }
 }
\ No newline at end of file
