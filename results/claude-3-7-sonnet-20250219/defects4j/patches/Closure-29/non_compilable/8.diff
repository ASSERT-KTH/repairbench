diff --git a/tmp/8012227a-27f8-45f7-92bd-c104ef5b25e3_buggy.java b/tmp/de0557f6-17b0-45c3-b8a3-4dc5a99fd0ac_fixed.java
index be9c8a3..5f54e4f 100644
--- a/tmp/8012227a-27f8-45f7-92bd-c104ef5b25e3_buggy.java
+++ b/tmp/de0557f6-17b0-45c3-b8a3-4dc5a99fd0ac_fixed.java
@@ -1,94 +1,100 @@
 /**
  * Counts the number of direct (full) references to an object.
  * Specifically we check for references of the following type:
  * <pre>
  *   x;
  *   x.fn();
  * </pre>
  */
 private boolean isInlinableObject(List<Reference> refs) {
   boolean ret = false;
+  // Create a set of all property names in all object literals assigned to the variable.
+  Set<String> propertyNames = new HashSet<>();
+  
   for (Reference ref : refs) {
     Node name = ref.getNode();
     Node parent = ref.getParent();
     Node gramps = ref.getGrandparent();
 
+    // First, find all properties defined in object literals
+    Node val = ref.getAssignedValue();
+    if (val != null && val.isObjectLit()) {
+      for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+        if (child.isStringKey()) {
+          propertyNames.add(child.getString());
+        }
+      }
+    }
+
     // Ignore indirect references, like x.y (except x.y(), since
     // the function referenced by y might reference 'this').
     //
     if (parent.isGetProp()) {
       Preconditions.checkState(parent.getFirstChild() == name);
       // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
+      if (gramps.isCall() && gramps.getFirstChild() == parent) {
         return false;
       }
 
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
+      // If we're accessing a property that isn't defined in any of the object literals,
+      // then we should not inline the object.
+      String propName = parent.getLastChild().getString();
+      if (!propertyNames.contains(propName)) {
+        return false;
+      }
       continue;
     }
 
     // Only rewrite VAR declarations or simple assignment statements
     if (!isVarOrAssignExprLhs(name)) {
       return false;
     }
 
-        Node val = ref.getAssignedValue();
     if (val == null) {
       // A var with no assignment.
       continue;
     }
 
     // We're looking for object literal assignments only.
     if (!val.isObjectLit()) {
       return false;
     }
 
-        // Make sure that the value is not self-refential. IOW,
+    // Make sure that the value is not self-referential. IOW,
     // disallow things like x = {b: x.a}.
     //
     // TODO: Only exclude unorderable self-referential
     // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
     // but x = {a: 1, b: x.a} is.
     //
     // Also, ES5 getters/setters aren't handled by this pass.
     for (Node child = val.getFirstChild(); child != null;
          child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
+      if (child.isGetterDef() || child.isSetterDef()) {
         // ES5 get/set not supported.
         return false;
       }
 
-
       Node childVal = child.getFirstChild();
       // Check if childVal is the parent of any of the passed in
       // references, as that is how self-referential assignments
       // will happen.
       for (Reference t : refs) {
         Node refNode = t.getParent();
-            while (!NodeUtil.isStatementBlock(refNode)) {
+        while (refNode != null && !NodeUtil.isStatementBlock(refNode)) {
           if (refNode == childVal) {
             // There's a self-referential assignment
             return false;
           }
           refNode = refNode.getParent();
         }
       }
     }
 
-
     // We have found an acceptable object literal assignment. As
     // long as there are no other assignments that mess things up,
     // we can inline.
     ret = true;
   }
   return ret;
 }
\ No newline at end of file
