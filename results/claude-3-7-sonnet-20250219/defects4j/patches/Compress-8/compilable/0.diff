diff --git a/tmp/a7a1c7a7-030f-4c90-857d-3ee1df7e0df6_buggy.java b/tmp/57f4afac-5ed0-4b99-a9cc-c7da9b45db25_fixed.java
index e087f95..43fe744 100644
--- a/tmp/a7a1c7a7-030f-4c90-857d-3ee1df7e0df6_buggy.java
+++ b/tmp/57f4afac-5ed0-4b99-a9cc-c7da9b45db25_fixed.java
@@ -1,53 +1,72 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
  * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length " + length + " must be at least 2");
+    }
+    
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
     
+    // Check if all bytes are NULs
+    boolean allNULs = true;
+    for (int i = start; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNULs = false;
+            break;
+        }
+    }
+    if (allNULs) {
+        return 0L;
+    }
+    
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
         if (currentByte == 0) {
             break;
         }
         
         // Skip leading spaces
         if (currentByte == (byte) ' ' || currentByte == '0') {
             if (stillPadding) {
                 continue;
             }
             if (currentByte == (byte) ' ') {
                 break;
             }
         }
         
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
         stillPadding = false;
         // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
         // CheckStyle:MagicNumber ON
     }
     
+    // Must have trailing NUL or space
+    if (!stillPadding && buffer[end - 1] != 0 && buffer[end - 1] != ' ') {
+        throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));
+    }
+    
     return result;
 }
\ No newline at end of file
