diff --git a/tmp/a968f36f-532d-4ea3-8a05-b5c2c0639db0_buggy.java b/tmp/b345ece5-3d7b-4438-8102-c5adcd27408d_fixed.java
index e087f95..23507ae 100644
--- a/tmp/a968f36f-532d-4ea3-8a05-b5c2c0639db0_buggy.java
+++ b/tmp/b345ece5-3d7b-4438-8102-c5adcd27408d_fixed.java
@@ -1,53 +1,87 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
  * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length " + length + " must be at least 2");
+    }
+    
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
     
+    boolean allNUL = true;
+    for (int i = start; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNUL = false;
+            break;
+        }
+    }
+    
+    if (allNUL) {
+        return 0L;
+    }
+    
+    boolean checkTrailer = true;
+    
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
         if (currentByte == 0) {
             break;
         }
         
         // Skip leading spaces
         if (currentByte == (byte) ' ' || currentByte == '0') {
             if (stillPadding) {
                 continue;
             }
             if (currentByte == (byte) ' ') {
+                checkTrailer = false;
                 break;
             }
         }
         
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
         stillPadding = false;
         // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
         // CheckStyle:MagicNumber ON
     }
     
+    if (checkTrailer && !stillPadding) {
+        // Must have valid trailer: trailing NUL or space
+        boolean foundTrailer = false;
+        for (int i = end - 1; i >= start; i--) {
+            byte currentByte = buffer[i];
+            if (currentByte == 0 || currentByte == ' ') {
+                foundTrailer = true;
+                break;
+            } else if (currentByte != 0 && currentByte != ' ') {
+                break;
+            }
+        }
+        if (!foundTrailer) {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, start, buffer[end - 1]));
+        }
+    }
+    
     return result;
 }
\ No newline at end of file
