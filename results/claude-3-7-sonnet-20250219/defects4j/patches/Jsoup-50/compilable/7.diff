diff --git a/tmp/fec3f791-eaa7-4b78-81ad-d2cab4eb0062_buggy.java b/tmp/356807cf-15e3-4181-8480-e8236febc4c8_fixed.java
index 25ca093..ff1f286 100644
--- a/tmp/fec3f791-eaa7-4b78-81ad-d2cab4eb0062_buggy.java
+++ b/tmp/356807cf-15e3-4181-8480-e8236febc4c8_fixed.java
@@ -1,52 +1,95 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
+    byteData.mark();
+    ByteOrderMark bom = detectCharsetFromBOM(byteData);
+    if (bom != null) {
+        charsetName = bom.charset();
+        byteData.position(bom.offset);
+    } else {
+        byteData.reset();
+    }
+
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
-
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
+
+private static ByteOrderMark detectCharsetFromBOM(ByteBuffer byteData) {
+    final int minLength = 4;
+    if (byteData.remaining() < minLength)
+        return null;
+    
+    byte[] bom = new byte[minLength];
+    byteData.get(bom, 0, minLength);
+    byteData.rewind();
+    
+    if ((bom[0] == (byte) 0xFE) && (bom[1] == (byte) 0xFF)) {
+        return new ByteOrderMark("UTF-16BE", 2);
+    } else if ((bom[0] == (byte) 0xFF) && (bom[1] == (byte) 0xFE)) {
+        if ((bom[2] == (byte) 0x00) && (bom[3] == (byte) 0x00)) {
+            return new ByteOrderMark("UTF-32LE", 4);
+        }
+        return new ByteOrderMark("UTF-16LE", 2);
+    } else if ((bom[0] == (byte) 0x00) && (bom[1] == (byte) 0x00) &&
+               (bom[2] == (byte) 0xFE) && (bom[3] == (byte) 0xFF)) {
+        return new ByteOrderMark("UTF-32BE", 4);
+    } else if ((bom[0] == (byte) 0xEF) && (bom[1] == (byte) 0xBB) && (bom[2] == (byte) 0xBF)) {
+        return new ByteOrderMark("UTF-8", 3);
+    }
+    return null;
+}
+
+private static class ByteOrderMark {
+    private final String charset;
+    private final int offset;
+    
+    public ByteOrderMark(String charset, int offset) {
+        this.charset = charset;
+        this.offset = offset;
+    }
+    
+    public String charset() {
+        return charset;
+    }
+    
+    public int offset() {
+        return offset;
+    }
+}
\ No newline at end of file
