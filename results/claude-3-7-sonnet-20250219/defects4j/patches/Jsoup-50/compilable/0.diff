diff --git a/tmp/dd7d18c6-b074-42b8-83e8-9d1338071529_buggy.java b/tmp/10876f8f-2662-4cfd-9ab9-3dbf286947dd_fixed.java
index 25ca093..e9c46b7 100644
--- a/tmp/dd7d18c6-b074-42b8-83e8-9d1338071529_buggy.java
+++ b/tmp/10876f8f-2662-4cfd-9ab9-3dbf286947dd_fixed.java
@@ -1,52 +1,105 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
+    // Detect BOM in the ByteBuffer
+    byteData.mark();
+    
+    // Check for BOM mark and determine charset
+    if (charsetName == null) {
+        charsetName = detectCharsetFromBOM(byteData);
+    }
+    
+    byteData.reset(); // Reset to beginning to read full data
+    
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
-
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
+    
+    // Handle UTF-8 BOM (kept for backward compatibility)
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
     }
+    
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
+
+// Helper method to detect charset from BOM
+private static String detectCharsetFromBOM(ByteBuffer byteData) {
+    if (byteData.remaining() >= 4) {
+        byte[] bom = new byte[4];
+        byteData.get(bom, 0, 4);
+        byteData.position(byteData.position() - 4); // Reset to start of data
+        
+        // UTF-32BE
+        if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {
+            return "UTF-32BE";
+        }
+        // UTF-32LE
+        if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00) {
+            return "UTF-32LE";
+        }
+    }
+    
+    if (byteData.remaining() >= 3) {
+        byte[] bom = new byte[3];
+        byteData.get(bom, 0, 3);
+        byteData.position(byteData.position() - 3); // Reset to start of data
+        
+        // UTF-8
+        if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {
+            byteData.position(byteData.position() + 3); // Skip BOM
+            return "UTF-8";
+        }
+    }
+    
+    if (byteData.remaining() >= 2) {
+        byte[] bom = new byte[2];
+        byteData.get(bom, 0, 2);
+        byteData.position(byteData.position() - 2); // Reset to start of data
+        
+        // UTF-16BE
+        if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {
+            return "UTF-16BE";
+        }
+        // UTF-16LE
+        if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {
+            return "UTF-16LE";
+        }
+    }
+    
+    return null; // No BOM detected
+}
\ No newline at end of file
