diff --git a/tmp/6c40bf4f-c5bb-4dfa-9085-b801b7ab309a_buggy.java b/tmp/ed263279-6820-4a9d-9fda-13f236557dbf_fixed.java
index 25ca093..4bc8900 100644
--- a/tmp/6c40bf4f-c5bb-4dfa-9085-b801b7ab309a_buggy.java
+++ b/tmp/ed263279-6820-4a9d-9fda-13f236557dbf_fixed.java
@@ -1,52 +1,98 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
+    byteData.mark();
+    // Look for BOM first - will override any other detection
+    BomCharset bomCharset = detectCharsetFromBOM(byteData);
+    if (bomCharset != null) {
+        charsetName = bomCharset.charset;
+    }
+    byteData.reset();
+    
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
-
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
+    
+    // Skip BOM if present in the string
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
     }
+    
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
+
+private static final class BomCharset {
+    private final String charset;
+    private final int offset;
+
+    public BomCharset(String charset, int offset) {
+        this.charset = charset;
+        this.offset = offset;
+    }
+}
+
+private static BomCharset detectCharsetFromBOM(ByteBuffer byteData) {
+    if (byteData.remaining() < 4) {
+        return null;
+    }
+    
+    byte[] bom = new byte[4];
+    byteData.get(bom, 0, 4);
+    byteData.position(0);
+    
+    // UTF-8 BOM (EF BB BF)
+    if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {
+        return new BomCharset("UTF-8", 3);
+    }
+    // UTF-16BE BOM (FE FF)
+    else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {
+        return new BomCharset("UTF-16BE", 2);
+    }
+    // UTF-16LE BOM (FF FE)
+    else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && !(bom[2] == 0x00 && bom[3] == 0x00)) {
+        return new BomCharset("UTF-16LE", 2);
+    }
+    // UTF-32BE BOM (00 00 FE FF)
+    else if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {
+        return new BomCharset("UTF-32BE", 4);
+    }
+    // UTF-32LE BOM (FF FE 00 00)
+    else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00) {
+        return new BomCharset("UTF-32LE", 4);
+    }
+    return null;
+}
\ No newline at end of file
