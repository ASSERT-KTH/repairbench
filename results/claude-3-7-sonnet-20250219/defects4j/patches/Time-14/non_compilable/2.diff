diff --git a/tmp/5435636d-d3f4-43db-9561-601ca046d89c_buggy.java b/tmp/646b0aeb-3d81-43eb-a609-ae6fa39345f7_fixed.java
index 10616db..ecc57b0 100644
--- a/tmp/5435636d-d3f4-43db-9561-601ca046d89c_buggy.java
+++ b/tmp/646b0aeb-3d81-43eb-a609-ae6fa39345f7_fixed.java
@@ -1,19 +1,48 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
+    
+    // If the partial contains both month and day fields, we need special handling
+    if (partial instanceof MonthDay) {
+        // Get current field types
+        DateTimeFieldType[] fieldTypes = new DateTimeFieldType[partial.size()];
+        for (int i = 0; i < fieldTypes.length; i++) {
+            fieldTypes[i] = partial.getFieldType(i);
+        }
+        
+        // Check if we're modifying month field in a MonthDay
+        if (fieldTypes[fieldIndex].equals(DateTimeFieldType.monthOfYear())) {
+            // Get a working chronology
+            Chronology chronology = DateTimeUtils.getChronology(iChronology);
+            
+            // Create a base year that will properly handle the leap year case
+            // Use a leap year (2000) as our base to allow Feb 29
+            int year = 2000;
+            
+            // Create a local datetime to work with
+            LocalDate date = new LocalDate(year, values[0], values[1], chronology);
+            
+            // Apply the value change
+            date = date.plusMonths(valueToAdd);
+            
+            // Return the updated values
+            return new int[] {date.getMonthOfYear(), date.getDayOfMonth()};
+        }
+    }
+    
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
