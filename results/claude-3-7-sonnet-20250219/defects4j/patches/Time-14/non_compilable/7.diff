diff --git a/tmp/fa5707a8-ba79-4315-9113-5e41a2dc22df_buggy.java b/tmp/218e3df1-9b85-4b09-9630-2dac5aa52b19_fixed.java
index 10616db..49ea6a6 100644
--- a/tmp/fa5707a8-ba79-4315-9113-5e41a2dc22df_buggy.java
+++ b/tmp/218e3df1-9b85-4b09-9630-2dac5aa52b19_fixed.java
@@ -1,19 +1,49 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
+    
+    if (partial instanceof MonthDay) {
+        // special case for MonthDay to ensure leap day handling works correctly
+        DateTimeField monthField = iChronology.monthOfYear();
+        DateTimeField dayField = iChronology.dayOfMonth();
+        
+        if (monthField.equals(partial.getFieldType(0).getField(iChronology))) {
+            // MonthDay is organized as month then day
+            int oldMonth = values[0];
+            int oldDay = values[1];
+            
+            // Add to the field at specified index
+            if (fieldIndex == 0) {
+                // We're adding to the month field
+                int newMonth = ((oldMonth - 1) + valueToAdd) % 12 + 1;
+                if (newMonth <= 0) {
+                    newMonth += 12;
+                }
+                
+                // Check if day is valid in the new month
+                int maxDay = dayField.getMaximumValue(newMonth);
+                int newDay = Math.min(oldDay, maxDay);
+                
+                values[0] = newMonth;
+                values[1] = newDay;
+                return values;
+            }
+        }
+    }
+    
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
