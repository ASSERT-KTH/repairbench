diff --git a/tmp/5c6f00ac-8e31-4e1c-acb9-98ba0c944150_buggy.java b/tmp/1aee4996-101b-4f90-9f6e-f1513deeec75_fixed.java
index 10616db..5938926 100644
--- a/tmp/5c6f00ac-8e31-4e1c-acb9-98ba0c944150_buggy.java
+++ b/tmp/1aee4996-101b-4f90-9f6e-f1513deeec75_fixed.java
@@ -1,19 +1,44 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
+    
+    if (partial instanceof MonthDay) {
+        // special case for MonthDay to ensure proper leap year handling
+        int[] newValues = new int[values.length];
+        System.arraycopy(values, 0, newValues, 0, values.length);
+        
+        DurationField field = getField(iChronology, fieldIndex).getDurationField();
+        int[] result = field.add(partial, fieldIndex, values, valueToAdd);
+        
+        // Ensure February 29 is respected when present in MonthDay values
+        if (partial.size() >= 2 && values[0] == 2 && values[1] == 29) {
+            int month = result[0];
+            int day = result[1];
+            
+            // if we've moved to a non-leap year and kept the day at 29
+            if (month != 2 && day == 29) {
+                DateTimeField dayField = partial.getFieldType(1).getField(iChronology);
+                if (dayField.getMaximumValue(month) < 29) {
+                    // if the new month doesn't have 29 days, adjust accordingly
+                    result[1] = Math.min(day, dayField.getMaximumValue(month));
+                }
+            }
+        }
+        return result;
+    }
     // month is largest field and being added to, such as month-day
-        if (DateTimeUtils.isContiguous(partial)) {
+    else if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
