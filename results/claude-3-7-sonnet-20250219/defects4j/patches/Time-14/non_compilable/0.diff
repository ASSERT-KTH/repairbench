diff --git a/tmp/50f960c1-b4ff-4673-a78e-2297cded579b_buggy.java b/tmp/c1804a3c-2ff3-45f0-940d-84e24a6a2a94_fixed.java
index 10616db..3449f14 100644
--- a/tmp/50f960c1-b4ff-4673-a78e-2297cded579b_buggy.java
+++ b/tmp/c1804a3c-2ff3-45f0-940d-84e24a6a2a94_fixed.java
@@ -1,19 +1,36 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
+    
+    // Use a temporary DateTime to handle the calculation
+    if (partial instanceof MonthDay) {
+        // Create a base year that's a leap year (2000 is a leap year)
+        int year = 2000;
+        
+        // Create a DateTime with the MonthDay values in the leap year
+        LocalDateTime dt = new LocalDateTime(
+            year, values[0], values[1], 0, 0, 0, 0, iChronology);
+        
+        // Perform the calculation
+        dt = dt.withFieldAdded(DurationFieldType.months(), valueToAdd);
+        
+        // Extract the results
+        return new int[] {dt.getMonthOfYear(), dt.getDayOfMonth()};
+    }
+    
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
