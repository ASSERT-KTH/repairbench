diff --git a/tmp/e5a6a903-6ed3-42b4-aca5-e66566e267bc_buggy.java b/tmp/79c18a99-239b-4a25-adf4-525d2fc8ee30_fixed.java
index 10616db..d4d2d98 100644
--- a/tmp/e5a6a903-6ed3-42b4-aca5-e66566e267bc_buggy.java
+++ b/tmp/79c18a99-239b-4a25-adf4-525d2fc8ee30_fixed.java
@@ -1,19 +1,47 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
-        if (DateTimeUtils.isContiguous(partial)) {
+    
+    if (partial instanceof MonthDay) {
+        // Special handling for MonthDay to properly handle leap years
+        // Create a copy of the values since we'll be modifying them
+        int[] newValues = new int[values.length];
+        System.arraycopy(values, 0, newValues, 0, values.length);
+        
+        // Update the month value
+        int curMonth = newValues[0];
+        curMonth = curMonth + valueToAdd;
+        
+        // Normalize the month value (1-12)
+        while (curMonth <= 0) {
+            curMonth += 12;
+        }
+        while (curMonth > 12) {
+            curMonth -= 12;
+        }
+        
+        newValues[0] = curMonth;
+        
+        // Check if day is valid in the new month
+        int day = newValues[1];
+        int maxDay = iChronology.dayOfMonth().getMaximumValue(0, newValues);
+        if (day > maxDay) {
+            newValues[1] = maxDay;
+        }
+        
+        return newValues;
+    } else if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
