diff --git a/tmp/0d7536fb-cc44-4789-a426-0bc1656310b3_buggy.java b/tmp/7ecc0936-495b-446b-94dd-8114a437d2f1_fixed.java
index 233a867..877beb6 100644
--- a/tmp/0d7536fb-cc44-4789-a426-0bc1656310b3_buggy.java
+++ b/tmp/7ecc0936-495b-446b-94dd-8114a437d2f1_fixed.java
@@ -1,73 +1,91 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+    
+    // Build a set of all the arguments that have side effects.
+    Set<String> sideEffectArgs = new HashSet<>();
+    Node argToCheck = cArg;
+    Node nameToCheck = fnParam;
+    while (argToCheck != null && nameToCheck != null) {
+      if (NodeUtil.mayEffectMutableState(argToCheck, compiler) ||
+          NodeUtil.mayHaveSideEffects(argToCheck, compiler)) {
+        sideEffectArgs.add(nameToCheck.getString());
+      }
+      argToCheck = argToCheck.getNext();
+      nameToCheck = nameToCheck.getNext();
+    }
+    
+    // Function body cannot have side-effects that might modify any of the function
+    // arguments with side-effects, or access the modified value.
+    if (!sideEffectArgs.isEmpty()) {
+      // Check if the function body modifies any of the side effect args
+      for (String argName : sideEffectArgs) {
+        if (NodeUtil.getNameReferenceCount(block, argName) > 1) {
+          return CanInlineResult.NO;
+        }
+      }
+      
+      // Check if the function body has any side effects that might conflict with the arguments
+      if (NodeUtil.mayEffectMutableState(block, compiler)) {
+        for (String argName : sideEffectArgs) {
+          return CanInlineResult.NO;
+        }
+      }
+    }
+
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
-
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a
           // parameter reference will be in a loop.
           if (NodeUtil.mayEffectMutableState(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
                   block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
         }
 
         // Move to the next name.
         fnParam = fnParam.getNext();
       }
 
       // For every call argument check for side-effects, even if there
       // isn't a named parameter to match.
       if (cArg != null) {
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
