diff --git a/tmp/610b2924-8b71-4a41-914f-faa755aa297a_buggy.java b/tmp/359a7611-1605-4a5c-8f2d-1ff810d13416_fixed.java
index 233a867..a64437c 100644
--- a/tmp/610b2924-8b71-4a41-914f-faa755aa297a_buggy.java
+++ b/tmp/359a7611-1605-4a5c-8f2d-1ff810d13416_fixed.java
@@ -1,73 +1,82 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
+    // Check if there are any side-effect-free parameters whose value may be
+    // affected by any other arguments. If so, inlining is not possible.
+    boolean checkModifiedArguments = false;
+    Node cSideEffectArg = cArg;
+    while (cSideEffectArg != null) {
+      if (NodeUtil.mayHaveSideEffects(cSideEffectArg, compiler)) {
+        checkModifiedArguments = true;
+        break;
+      }
+      cSideEffectArg = cSideEffectArg.getNext();
+    }
+
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
-
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a
           // parameter reference will be in a loop.
           if (NodeUtil.mayEffectMutableState(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
                   block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
+
+          // If an argument may have side effects, and the function
+          // contains an assignment to a parameter, then it's not safe to
+          // inline, since reordering might break the code.
+          if (checkModifiedArguments) {
+            if (NodeUtil.mayEffectMutableState(cArg, compiler) ||
+                NodeUtil.isAssignmentTarget(cArg) ||
+                NodeUtil.isAssignedValue(block, fnParam.getString())) {
+              return CanInlineResult.NO;
+            }
+          }
         }
 
         // Move to the next name.
         fnParam = fnParam.getNext();
       }
 
       // For every call argument check for side-effects, even if there
       // isn't a named parameter to match.
       if (cArg != null) {
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
