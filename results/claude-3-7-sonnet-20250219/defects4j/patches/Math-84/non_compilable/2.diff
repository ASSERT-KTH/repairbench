diff --git a/tmp/d1cceedf-6bc5-491e-b233-3ca1a266eb6f_buggy.java b/tmp/ebbd5538-2244-429f-a550-546fef6ff84e_fixed.java
index 5f1dcf2..e12defc 100644
--- a/tmp/d1cceedf-6bc5-491e-b233-3ca1a266eb6f_buggy.java
+++ b/tmp/ebbd5538-2244-429f-a550-546fef6ff84e_fixed.java
@@ -1,41 +1,50 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
-
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
-
             return;
-
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
-
-            // check convergence
             return;
         }
 
+        // if we cannot improve on the best point, we shrink the simplex
+        final RealPointValuePair[] newSimplex = new RealPointValuePair[simplex.length];
+        newSimplex[0] = original[0];
+        for (int i = 1; i < original.length; ++i) {
+            final double[] coordinatesI = original[i].getPointRef();
+            final double[] bestCoordinates = original[0].getPointRef();
+            final double[] contracted0 = new double[coordinatesI.length];
+            for (int k = 0; k < contracted0.length; ++k) {
+                contracted0[k] = sigma * coordinatesI[k] + (1.0 - sigma) * bestCoordinates[k];
+            }
+            newSimplex[i] = new RealPointValuePair(contracted0,
+                                                   evaluationFunction.value(contracted0),
+                                                   false);
+        }
+        simplex = newSimplex;
+        return;
     }
-
 }
\ No newline at end of file
