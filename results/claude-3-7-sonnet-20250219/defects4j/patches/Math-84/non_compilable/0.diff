diff --git a/tmp/90e57ce6-3c1b-4c07-8482-fb247a330989_buggy.java b/tmp/92abb96f-89b7-43cf-b76f-98fa9d013e34_fixed.java
index 5f1dcf2..e6da95a 100644
--- a/tmp/90e57ce6-3c1b-4c07-8482-fb247a330989_buggy.java
+++ b/tmp/92abb96f-89b7-43cf-b76f-98fa9d013e34_fixed.java
@@ -1,41 +1,58 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
-
         incrementIterationsCounter();
         
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
         
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
             
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+            if (comparator.compare(expanded, reflected) < 0) {
+                // accept the expanded simplex
+            } else {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
             
-                return;
-
-            }
+        } else {
             
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+            } else {
+                // perform a shrink step
+                final RealPointValuePair[] shrunkSimplex = new RealPointValuePair[simplex.length];
+                shrunkSimplex[0] = original[0];
+                for (int i = 1; i < simplex.length; ++i) {
+                    final double[] p = original[i].getPointRef();
+                    final double[] barycenter = original[0].getPointRef();
+                    final double[] direction = new double[p.length];
+                    for (int j = 0; j < p.length; ++j) {
+                        direction[j] = sigma * (p[j] - barycenter[j]);
+                    }
+                    shrunkSimplex[i] = evaluateNewPoint(original[0].getPointRef(), direction, comparator);
+                }
+                simplex = shrunkSimplex;
+            }
+            
+        }
         
         // check convergence
+        int iter = getIterations();
+        boolean converged = getConvergenceChecker().converged(iter, original[0], simplex[0]);
+        if (converged) {
             return;
         }
-
     }
-
 }
\ No newline at end of file
