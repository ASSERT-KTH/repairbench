diff --git a/tmp/d746ac70-5351-43c3-8a76-c013ca0e31a2_buggy.java b/tmp/7d2c119f-03b3-49cf-ac9b-46fc7c6edb3f_fixed.java
index 5f1dcf2..80c0eb0 100644
--- a/tmp/d746ac70-5351-43c3-8a76-c013ca0e31a2_buggy.java
+++ b/tmp/7d2c119f-03b3-49cf-ac9b-46fc7c6edb3f_fixed.java
@@ -1,41 +1,54 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
             
+            // Check if we've reached the maximum allowed iterations
             incrementIterationsCounter();
             
+            // Check for convergence
+            boolean converged = checkConvergence();
+            if (converged) {
+                return;
+            }
+
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
-
-                return;
-
+                // Continue with next iteration, don't return
+                continue;
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
+                // Accept the contracted simplex - no explicit update needed
+                // as evaluateNewSimplex already updated the simplex
+                continue;
             }
             
+            // Perform a sigma contraction of the simplex
+            RealPointValuePair[] points = new RealPointValuePair[simplex.length];
+            points[0] = simplex[0];
+            for (int i = 1; i < simplex.length; ++i) {
+                final double[] contractedCoordinates = contract(original[0], original[i]);
+                points[i] = new RealPointValuePair(contractedCoordinates,
+                                                   evaluate(contractedCoordinates), false);
+            }
+            simplex = points;
         }
-
     }
\ No newline at end of file
