diff --git a/tmp/f51ea1a6-24be-4bdb-a7e7-697b653795fe_buggy.java b/tmp/a48ced3b-265e-4784-b4ae-136dc5312e80_fixed.java
index 5f1dcf2..f91b7ac 100644
--- a/tmp/f51ea1a6-24be-4bdb-a7e7-697b653795fe_buggy.java
+++ b/tmp/a48ced3b-265e-4784-b4ae-136dc5312e80_fixed.java
@@ -1,41 +1,45 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    // Check if we've reached the allowed number of iterations
+    if (getIterations() >= getMaxIterations()) {
+        throw new OptimizationException(
+            new MaxIterationsExceededException(getMaxIterations()));
+    }
 
     incrementIterationsCounter();
 
     // save the original vertex
     final RealPointValuePair[] original = simplex;
     final RealPointValuePair best = original[0];
 
     // perform a reflection step
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
     if (comparator.compare(reflected, best) < 0) {
 
         // compute the expanded simplex
         final RealPointValuePair[] reflectedSimplex = simplex;
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
         if (comparator.compare(reflected, expanded) <= 0) {
             // accept the reflected simplex
             simplex = reflectedSimplex;
         }
 
         return;
 
     }
 
     // compute the contracted simplex
     final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
     if (comparator.compare(contracted, best) < 0) {
         // accept the contracted simplex
 
         // check convergence
         return;
     }
 
-        }
-
+    // perform a shrink step
+    evaluateNewSimplex(original, sigma, comparator);
 }
\ No newline at end of file
