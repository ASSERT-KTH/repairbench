diff --git a/tmp/ad7744c8-b5b8-4899-91c2-3e666fe03367_buggy.java b/tmp/e549df5f-2766-4c8b-8e20-11784e2429b0_fixed.java
index 5f1dcf2..6ba06b7 100644
--- a/tmp/ad7744c8-b5b8-4899-91c2-3e666fe03367_buggy.java
+++ b/tmp/e549df5f-2766-4c8b-8e20-11784e2429b0_fixed.java
@@ -1,41 +1,43 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    // Perform iterations until convergence is reached
+    while (!getConvergenceChecker().converged(getIterations(), simplex[0], simplex[0])) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
             
             return;
 
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
             
             // check convergence
             return;
         }
 
+        // perform a shrink step
+        evaluateNewSimplex(original, sigma, comparator);
     }
-
 }
\ No newline at end of file
