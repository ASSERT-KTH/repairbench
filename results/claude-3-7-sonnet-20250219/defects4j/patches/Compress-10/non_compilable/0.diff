diff --git a/tmp/61c9ca54-0b4e-4a4e-a9dc-d498a830ae96_buggy.java b/tmp/58e67b2f-5835-4580-81bb-394aa30ce9b6_fixed.java
index 85e6a42..0b8e245 100644
--- a/tmp/61c9ca54-0b4e-4a4e-a9dc-d498a830ae96_buggy.java
+++ b/tmp/58e67b2f-5835-4580-81bb-394aa30ce9b6_fixed.java
@@ -1,50 +1,60 @@
 /**
  * Walks through all recorded entries and adds the data available
  * from the local file header.
  *
  * <p>Also records the offsets for the data to read from the
  * entries.</p>
  */
 private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                         entriesWithoutUTF8Flag)
     throws IOException {
     // changing the name of a ZipArchiveEntry is going to change
     // the hashcode - see COMPRESS-164
     // Map needs to be reconstructed in order to keep central
     // directory order
     for (ZipArchiveEntry ze : entries.keySet()) {
         OffsetEntry offsetEntry = entries.get(ze);
         long offset = offsetEntry.headerOffset;
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
         byte[] b = new byte[SHORT];
         archive.readFully(b);
         int fileNameLen = ZipShort.getValue(b);
         archive.readFully(b);
         int extraFieldLen = ZipShort.getValue(b);
         int lenToSkip = fileNameLen;
         while (lenToSkip > 0) {
             int skipped = archive.skipBytes(lenToSkip);
             if (skipped <= 0) {
                 throw new RuntimeException("failed to skip file name in"
                                            + " local file header");
             }
             lenToSkip -= skipped;
         }
         byte[] localExtraData = new byte[extraFieldLen];
         archive.readFully(localExtraData);
+        
+        // Save the original extra data and general purpose bit flag before potentially overwriting them
+        byte[] originalExtra = ze.getExtra();
+        GeneralPurposeBit originalGPB = (GeneralPurposeBit) ze.getGeneralPurposeBit().clone();
+        
         ze.setExtra(localExtraData);
         offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
             + SHORT + SHORT + fileNameLen + extraFieldLen;
 
         if (entriesWithoutUTF8Flag.containsKey(ze)) {
             String orig = ze.getName();
             NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
             ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
                                                      nc.comment);
             if (!orig.equals(ze.getName())) {
                 nameMap.remove(orig);
                 nameMap.put(ze.getName(), ze);
             }
         }
+        
+        // Merge any UTF8 flag from the central directory
+        if (originalGPB.usesUTF8ForNames()) {
+            ze.getGeneralPurposeBit().useUTF8ForNames(true);
+        }
     }
 }
\ No newline at end of file
