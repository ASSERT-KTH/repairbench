diff --git a/tmp/5652dcb2-9d14-4729-a160-8b4fa26440ca_buggy.java b/tmp/2bbfd413-ee4e-4a33-a09b-92888c261aee_fixed.java
index 5f96616..f570beb 100644
--- a/tmp/5652dcb2-9d14-4729-a160-8b4fa26440ca_buggy.java
+++ b/tmp/2bbfd413-ee4e-4a33-a09b-92888c261aee_fixed.java
@@ -1,20 +1,29 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraint {{prop: (number|undefined)}}
   // function f(constraint) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
+  } else if (constraint.isUnionType()) {
+    // For union types like (string|{prop: string}), we need to extract
+    // and process any record types in the union
+    UnionType unionType = constraint.toMaybeUnionType();
+    for (JSType alternate : unionType.getAlternates()) {
+      if (alternate.isRecordType()) {
+        matchRecordTypeConstraint(alternate.toObjectType());
+      }
+    }
   }
 }
\ No newline at end of file
