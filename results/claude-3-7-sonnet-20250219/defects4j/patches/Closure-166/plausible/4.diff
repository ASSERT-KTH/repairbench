diff --git a/tmp/01c8ede5-d7a3-4226-b159-68ec2e9f9372_buggy.java b/tmp/b9b0e57f-e9a9-439b-bfb4-28ec078e82d3_fixed.java
index 5f96616..4f528f3 100644
--- a/tmp/01c8ede5-d7a3-4226-b159-68ec2e9f9372_buggy.java
+++ b/tmp/b9b0e57f-e9a9-439b-bfb4-28ec078e82d3_fixed.java
@@ -1,20 +1,28 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
-    // Handle the case where the constraint object is a record type.
+  // Handle the case where the constraint object is a record type or a union containing record types.
   //
   // param constraint {{prop: (number|undefined)}}
   // function f(constraint) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
+  } else if (constraint.isUnionType()) {
+    // For union types, match against each record type in the union
+    UnionType unionType = constraint.toMaybeUnionType();
+    for (JSType alternateType : unionType.getAlternates()) {
+      if (alternateType.isRecordType()) {
+        matchRecordTypeConstraint(alternateType.toObjectType());
+      }
+    }
   }
 }
\ No newline at end of file
