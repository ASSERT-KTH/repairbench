diff --git a/tmp/a106b213-601f-47b7-b763-06e22c176ee6_buggy.java b/tmp/e0cb9851-9a54-46b8-b1f7-5e239d445238_fixed.java
index 5f96616..5358f56 100644
--- a/tmp/a106b213-601f-47b7-b763-06e22c176ee6_buggy.java
+++ b/tmp/e0cb9851-9a54-46b8-b1f7-5e239d445238_fixed.java
@@ -1,20 +1,20 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+  // Handle the case where the constraint object is a record type or a union containing record types.
+  // Extract all record types from the constraint and match them.
   if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
+  } else if (constraint.isUnionType()) {
+    UnionType unionType = constraint.toMaybeUnionType();
+    for (JSType alternateType : unionType.getAlternates()) {
+      if (alternateType.isRecordType()) {
+        matchRecordTypeConstraint(alternateType.toObjectType());
+      }
+    }
   }
 }
\ No newline at end of file
