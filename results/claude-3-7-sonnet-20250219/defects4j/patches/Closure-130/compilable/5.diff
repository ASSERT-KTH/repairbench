diff --git a/tmp/4c85184c-3752-4fa0-9555-6cc8f140c2c6_buggy.java b/tmp/76bd7f1c-ee3a-49e3-a345-cd3b9303584e_fixed.java
index bb3193c..99e3433 100644
--- a/tmp/4c85184c-3752-4fa0-9555-6cc8f140c2c6_buggy.java
+++ b/tmp/76bd7f1c-ee3a-49e3-a345-cd3b9303584e_fixed.java
@@ -1,52 +1,59 @@
 /**
  * For each qualified name N in the global scope, we check if:
  * (a) No ancestor of N is ever aliased or assigned an unknown value type.
  *     (If N = "a.b.c", "a" and "a.b" are never aliased).
  * (b) N has exactly one write, and it lives in the global scope.
  * (c) N is aliased in a local scope.
  *
  * If (a) is true, then GlobalNamespace must know all the writes to N.
  * If (a) and (b) are true, then N cannot change during the execution of
  *    a local scope.
  * If (a) and (b) and (c) are true, then the alias can be inlined if the
  *    alias obeys the usual rules for how we decide whether a variable is
  *    inlineable.
  * @see InlineVariables
  */
 private void inlineAliases(GlobalNamespace namespace) {
   // Invariant: All the names in the worklist meet condition (a).
   Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());
   while (!workList.isEmpty()) {
     Name name = workList.pop();
 
     // Don't attempt to inline a getter or setter property as a variable.
     if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
       continue;
     }
 
     if (name.globalSets == 1 && name.localSets == 0 &&
         name.aliasingGets > 0) {
       // {@code name} meets condition (b). Find all of its local aliases
       // and try to inline them.
       List<Ref> refs = Lists.newArrayList(name.getRefs());
       for (Ref ref : refs) {
         if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
+          // Skip inlining if the reference is in a nested function
+          // where it might be referring to a formal parameter or a
+          // variable declared in an outer scope.
+          if (ref.scope.getVarCount() > 0) {
+            continue;
+          }
+          
           // {@code name} meets condition (c). Try to inline it.
           if (inlineAliasIfPossible(ref, namespace)) {
             name.removeRef(ref);
           }
         }
       }
     }
 
     // Check if {@code name} has any aliases left after the
     // local-alias-inlining above.
     if ((name.type == Name.Type.OBJECTLIT ||
          name.type == Name.Type.FUNCTION) &&
         name.aliasingGets == 0 && name.props != null) {
       // All of {@code name}'s children meet condition (a), so they can be
       // added to the worklist.
       workList.addAll(name.props);
     }
   }
 }
\ No newline at end of file
