diff --git a/tmp/fc6ef4ac-9b1b-4b13-981b-8b3f17843d7f_buggy.java b/tmp/bb5c2188-acec-4e66-a5dd-49da7bb947cb_fixed.java
index 3127f85..27ffd14 100644
--- a/tmp/fc6ef4ac-9b1b-4b13-981b-8b3f17843d7f_buggy.java
+++ b/tmp/bb5c2188-acec-4e66-a5dd-49da7bb947cb_fixed.java
@@ -1,24 +1,42 @@
 /**
  * For this distribution, {@code X}, this method returns {@code P(X < x)}.
  * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
  * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
  *
  * @param x Value at which the CDF is evaluated.
  * @return CDF evaluated at {@code x}.
  * @throws MathException if the algorithm fails to converge
  */
 public double cumulativeProbability(double x) throws MathException {
+    // Handle extreme values first
+    if (Double.isNaN(x)) {
+        return Double.NaN;
+    }
+    if (Double.isInfinite(x)) {
+        if (x > 0) {
+            return 1.0;
+        } else {
+            return 0.0;
+        }
+    }
+    
     final double dev = x - mean;
+    if (dev < -20 * standardDeviation) {
+        return 0.0;
+    }
+    if (dev > 20 * standardDeviation) {
+        return 1.0;
+    }
+    
     try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+        return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
     } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
+        if (x < (mean - 20 * standardDeviation)) {
+            return 0.0;
         } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
+            return 1.0;
         } else {
             throw ex;
         }
     }
 }
\ No newline at end of file
