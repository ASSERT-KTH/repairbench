You are an automatic program repair tool. Your task is to fix the provided buggy code.

The following code contains a buggy function:
```java
    /**
     * Computes the parsed datetime by setting the saved fields.
     * This method is idempotent, but it is not thread-safe.
     *
     * @param resetFields false by default, but when true, unsaved field values are cleared
     * @param text optional text being parsed, to be included in any error message
     * @return milliseconds since 1970-01-01T00:00:00Z
     * @throws IllegalArgumentException if any field is out of range
     * @since 1.3
     */
    public long computeMillis(boolean resetFields, String text) {
        SavedField[] savedFields = iSavedFields;
        int count = iSavedFieldsCount;
        if (iSavedFieldsShared) {
            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
            iSavedFieldsShared = false;
        }
        sort(savedFields, count);
        if (count > 0) {
            // alter base year for parsing if first field is month or day
            DurationField months = DurationFieldType.months().getField(iChrono);
            DurationField days = DurationFieldType.days().getField(iChrono);
            DurationField first = savedFields[0].iField.getDurationField();
            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
                saveField(DateTimeFieldType.year(), iDefaultYear);
                return computeMillis(resetFields, text);
            }
        }

        long millis = iMillis;
        try {
            for (int i = 0; i < count; i++) {
                millis = savedFields[i].set(millis, resetFields);
            }
        } catch (IllegalFieldValueException e) {
            if (text != null) {
                e.prependMessage("Cannot parse \"" + text + '"');
            }
            throw e;
        }
        
        if (iZone == null) {
            millis -= iOffset;
        } else {
            int offset = iZone.getOffsetFromLocal(millis);
            millis -= offset;
            if (offset != iZone.getOffset(millis)) {
                String message =
                    "Illegal instant due to time zone offset transition (" + iZone + ')';
                if (text != null) {
                    message = "Cannot parse \"" + text + "\": " + message;
                }
                throw new IllegalArgumentException(message);
            }
        }
        
        return millis;
    }

```

The code fails the following tests.

Test `org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_weekyear_month_week_2010`:
```java
    public void testParseLocalDate_weekyear_month_week_2010() {
        Chronology chrono = GJChronology.getInstanceUTC();
        DateTimeFormatter f = DateTimeFormat.forPattern("xxxx-MM-ww").withChronology(chrono);
        assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01"));
    }

```
Test `org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_weekyear_month_week_2010` error:
```
junit.framework.AssertionFailedError: expected:<2011-01-03> but was:<2010-01-04>;org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_weekyear_month_week_2012
```

Test `org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_weekyear_month_week_2011`:
```java
    public void testParseLocalDate_weekyear_month_week_2011() {
        Chronology chrono = GJChronology.getInstanceUTC();
        DateTimeFormatter f = DateTimeFormat.forPattern("xxxx-MM-ww").withChronology(chrono);
        assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate("2011-01-01"));
    }

```
Test `org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_weekyear_month_week_2011` error:
```
junit.framework.AssertionFailedError: expected:<2012-01-02> but was:<2011-01-03>;org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_year_month_week_2010
```

Test `org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_weekyear_month_week_2012`:
```java
    public void testParseLocalDate_weekyear_month_week_2012() {
        Chronology chrono = GJChronology.getInstanceUTC();
        DateTimeFormatter f = DateTimeFormat.forPattern("xxxx-MM-ww").withChronology(chrono);
        assertEquals(new LocalDate(2012, 1, 2, chrono), f.parseLocalDate("2012-01-01"));
    }

```
Test `org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_weekyear_month_week_2012` error:
```
junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>;org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_year_month_week_2011
```

Test `org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_year_month_week_2010`:
```java
    public void testParseLocalDate_year_month_week_2010() {
        Chronology chrono = GJChronology.getInstanceUTC();
        DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono);
        assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01"));
    }

```
Test `org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_year_month_week_2010` error:
```
junit.framework.AssertionFailedError: expected:<2011-01-03> but was:<2010-01-04>;org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_year_month_week_2012
```

Test `org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_year_month_week_2011`:
```java
    public void testParseLocalDate_year_month_week_2011() {
        Chronology chrono = GJChronology.getInstanceUTC();
        DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono);
        assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate("2011-01-01"));
    }

```
Test `org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_year_month_week_2011` error:
```
junit.framework.AssertionFailedError: expected:<2012-01-02> but was:<2011-01-03>;org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_year_month_week_2016
```

Test `org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_year_month_week_2012`:
```java
    public void testParseLocalDate_year_month_week_2012() {
        Chronology chrono = GJChronology.getInstanceUTC();
        DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono);
        assertEquals(new LocalDate(2012, 1, 2, chrono), f.parseLocalDate("2012-01-01"));
    }

```
Test `org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_year_month_week_2012` error:
```
junit.framework.AssertionFailedError: expected:<2016-01-04> but was:<2014-12-29>
```

Test `org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_year_month_week_2016`:
```java
    public void testParseLocalDate_year_month_week_2016() {
        Chronology chrono = GJChronology.getInstanceUTC();
        DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono);
        assertEquals(new LocalDate(2016, 1, 4, chrono), f.parseLocalDate("2016-01-01"));
    }

```
Test `org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_year_month_week_2016` error:
```
junit.framework.AssertionFailedError: expected:<2016-01-04> but was:<2014-12-29>
```


Please provide a fixed version of the buggy function, and only that function, inside a code block.
