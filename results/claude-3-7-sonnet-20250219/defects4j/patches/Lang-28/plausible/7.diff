diff --git a/tmp/4e7b7f66-63f7-4fb8-b252-b13464e8d229_buggy.java b/tmp/cb2f8911-7710-4e6c-ac8b-4c9a24661612_fixed.java
index 4bbd561..64c86eb 100644
--- a/tmp/4e7b7f66-63f7-4fb8-b252-b13464e8d229_buggy.java
+++ b/tmp/cb2f8911-7710-4e6c-ac8b-4c9a24661612_fixed.java
@@ -1,37 +1,54 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // Check if there are enough characters for a potential entity
+    if (index + 2 < input.length() && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        // Check if we're still within bounds before accessing the character
+        if (start < input.length()) {
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
+        }
 
+        // Find the semicolon that terminates the entity
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
 
+        // If we reached the end without finding a semicolon, it's not a valid entity
+        if (end == input.length()) {
+            return 0;
+        }
+
         int entityValue;
         try {
             if (isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
+        // Handle code points properly, especially supplementary characters
+        if (entityValue > 0xFFFF) {
+            // For supplementary characters, convert to surrogate pairs
+            char[] chrs = Character.toChars(entityValue);
+            out.write(chrs);
+        } else {
             out.write(entityValue);
+        }
+        
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
     return 0;
 }
\ No newline at end of file
