diff --git a/tmp/31a7460e-910b-40d6-8612-6627355d8246_buggy.java b/tmp/108f47a5-d9f2-49da-acf9-4bf0d82cc857_fixed.java
index 4bbd561..04ae3c5 100644
--- a/tmp/31a7460e-910b-40d6-8612-6627355d8246_buggy.java
+++ b/tmp/108f47a5-d9f2-49da-acf9-4bf0d82cc857_fixed.java
@@ -1,37 +1,59 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // Check for array bounds safety
+    if (index >= input.length() - 1 || input.charAt(index) != '&') {
+        return 0;
+    }
+    
+    if (input.charAt(index + 1) == '#') {
         int start = index + 2;
+        if (start >= input.length()) {
+            return 0;
+        }
+        
         boolean isHex = false;
         
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
+            if (start >= input.length()) {
+                return 0;
+            }
         }
         
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
         
+        if (end == input.length() || end == start) {
+            return 0;
+        }
+        
         int entityValue;
         try {
             if (isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch (NumberFormatException nfe) {
             return 0;
         }
         
+        // Handle supplementary characters (code points outside the BMP)
+        if (entityValue > 0xFFFF) {
+            char[] chars = Character.toChars(entityValue);
+            out.write(chars, 0, chars.length);
+        } else {
             out.write(entityValue);
+        }
+        
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
     return 0;
 }
\ No newline at end of file
