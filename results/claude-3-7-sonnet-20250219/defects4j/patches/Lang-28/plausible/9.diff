diff --git a/tmp/81474bd5-5758-4822-abb2-fd9a8abbfb9c_buggy.java b/tmp/b1d9015d-f491-4bd0-82b0-cc2634607e65_fixed.java
index 4bbd561..a5d7534 100644
--- a/tmp/81474bd5-5758-4822-abb2-fd9a8abbfb9c_buggy.java
+++ b/tmp/b1d9015d-f491-4bd0-82b0-cc2634607e65_fixed.java
@@ -1,37 +1,58 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // Check if we have enough characters for a numeric entity
+    if (index + 2 >= input.length() || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
+    
     int start = index + 2;
     boolean isHex = false;
     
+    if (start < input.length()) {
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
+            
+            // Check if we're now at the end of the input
+            if (start >= input.length()) {
+                return 0;
+            }
+        }
     }
     
     int end = start;
-            while(input.charAt(end) != ';') {
+    while (end < input.length() && input.charAt(end) != ';') {
         end++;
     }
     
+    // Check if we reached the end without finding a semicolon
+    if (end >= input.length()) {
+        return 0;
+    }
+    
     int entityValue;
     try {
         if (isHex) {
             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
         } else {
             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
         }
     } catch (NumberFormatException nfe) {
         return 0;
     }
     
+    if (entityValue > 0xFFFF) {
+        // Handle supplementary characters
+        char[] chars = Character.toChars(entityValue);
+        out.write(chars[0]);
+        out.write(chars[1]);
+    } else {
         out.write(entityValue);
+    }
+    
     return 2 + (end - start) + (isHex ? 1 : 0) + 1;
 }
\ No newline at end of file
-        return 0;
-    }
