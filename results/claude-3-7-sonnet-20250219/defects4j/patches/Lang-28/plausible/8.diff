diff --git a/tmp/26a28483-0ae7-4bea-8703-34c49e53c3ea_buggy.java b/tmp/26d2927a-ce4b-445c-9d78-1546b7d8c638_fixed.java
index 4bbd561..f212196 100644
--- a/tmp/26a28483-0ae7-4bea-8703-34c49e53c3ea_buggy.java
+++ b/tmp/26d2927a-ce4b-445c-9d78-1546b7d8c638_fixed.java
@@ -1,37 +1,61 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // Check to ensure we have enough characters
+    if (index + 1 >= input.length() || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
+    
     int start = index + 2;
     boolean isHex = false;
 
+    // Ensure we have at least one character after the &#
+    if (start >= input.length()) {
+        return 0;
+    }
+
     char firstChar = input.charAt(start);
     if (firstChar == 'x' || firstChar == 'X') {
         start++;
         isHex = true;
+        
+        // Ensure we have at least one character after the &#x
+        if (start >= input.length()) {
+            return 0;
+        }
     }
 
     int end = start;
-            while(input.charAt(end) != ';') {
+    // Look for the terminating semicolon while checking bounds
+    while (end < input.length() && input.charAt(end) != ';') {
         end++;
     }
     
+    // If we didn't find a semicolon or there's nothing between start and end
+    if (end >= input.length() || start == end) {
+        return 0;
+    }
+
     int entityValue;
     try {
         if (isHex) {
             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
         } else {
             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
         }
     } catch (NumberFormatException nfe) {
         return 0;
     }
 
+    // Handle supplementary characters (code points above 0xFFFF)
+    if (entityValue > 0xFFFF) {
+        char[] chrs = Character.toChars(entityValue);
+        out.write(chrs);
+    } else {
         out.write(entityValue);
+    }
+    
     return 2 + (end - start) + (isHex ? 1 : 0) + 1;
 }
\ No newline at end of file
-        return 0;
-    }
