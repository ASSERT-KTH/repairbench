diff --git a/tmp/8d4ec924-d0c7-41f1-a194-9fa23537c0ba_buggy.java b/tmp/c5d9bf7f-6851-4994-a8dc-af969053868d_fixed.java
index 4bbd561..8ae2bdb 100644
--- a/tmp/8d4ec924-d0c7-41f1-a194-9fa23537c0ba_buggy.java
+++ b/tmp/c5d9bf7f-6851-4994-a8dc-af969053868d_fixed.java
@@ -1,37 +1,52 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // Check if there's enough characters to potentially form an entity
+    if (index < input.length() - 3 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
         
+        // Make sure we're not out of bounds
+        if (start < input.length()) {
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
             
             int end = start;
-            while(input.charAt(end) != ';') {
+            // Find the closing semicolon, being careful of bounds
+            while (end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
             
+            // Check if we found a valid ending
+            if (end < input.length() && input.charAt(end) == ';') {
                 int entityValue;
                 try {
                     if (isHex) {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                     } else {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                     }
-            } catch(NumberFormatException nfe) {
-                return 0;
-            }
                     
+                    // Properly write the character based on its code point
+                    if (Character.isSupplementaryCodePoint(entityValue)) {
+                        // Write as surrogate pair for supplementary characters
+                        out.write(Character.toChars(entityValue));
+                    } else {
+                        // Write as single char for BMP characters
                         out.write(entityValue);
+                    }
+                    
                     return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                } catch (NumberFormatException nfe) {
+                    return 0;
+                }
+            }
+        }
     }
     return 0;
 }
\ No newline at end of file
