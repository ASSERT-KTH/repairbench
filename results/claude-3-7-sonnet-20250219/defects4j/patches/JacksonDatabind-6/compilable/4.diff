diff --git a/tmp/c941070e-4a4b-406a-957b-700baa7511c4_buggy.java b/tmp/26165bca-6d60-42cb-b1df-496030e77b5b_fixed.java
index cd412d2..d8d9f60 100644
--- a/tmp/c941070e-4a4b-406a-957b-700baa7511c4_buggy.java
+++ b/tmp/26165bca-6d60-42cb-b1df-496030e77b5b_fixed.java
@@ -1,76 +1,129 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
     /* 21-May-2009, tatu: DateFormat has very strict handling of
      * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
      */
 
     /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
      * quite simple because we already set date format timezone to be
      * GMT, and hence can just strip out 'Z' altogether
      */
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
+        } else {
+            // Check for partial milliseconds (less than 3 digits)
+            int msecIdx = dateStr.indexOf('.');
+            if (msecIdx >= 0) {
+                int msecLen = len - 1 - msecIdx - 1; // -1 for 'Z', -1 for the decimal point
+                if (msecLen < 3) {
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    // Pad with zeros
+                    for (int i = 0; i < 3 - msecLen; i++) {
+                        sb.insert(len - 1, '0');
+                    }
+                    dateStr = sb.toString();
+                }
+            }
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
+            // Check for missing seconds or partial milliseconds
+            int tzIndex = dateStr.indexOf('-', 10);
+            if (tzIndex < 0) {
+                tzIndex = dateStr.indexOf('+', 10);
+            }
+            
+            if (tzIndex > 0) {
+                // Check for missing seconds (e.g., "1997-07-16T19:20+01:00")
+                int secIndex = dateStr.lastIndexOf(':', tzIndex);
+                if (secIndex > 0) {
+                    char secNextChar = dateStr.charAt(secIndex + 1);
+                    // No seconds part, insert ":00"
+                    if (secNextChar == '+' || secNextChar == '-') {
+                        StringBuilder sb = new StringBuilder(dateStr);
+                        sb.insert(secIndex + 1, "00");
+                        dateStr = sb.toString();
+                        len = dateStr.length();
+                    }
+                }
+                
+                // Check for partial milliseconds (e.g., "2014-10-03T18:00:00.6-05:00")
+                int msecIdx = dateStr.indexOf('.', 10);
+                if (msecIdx > 0) {
+                    int msecLen = tzIndex - msecIdx - 1;
+                    if (msecLen < 3) {
+                        StringBuilder sb = new StringBuilder(dateStr);
+                        // Pad with zeros
+                        for (int i = 0; i < 3 - msecLen; i++) {
+                            sb.insert(tzIndex, '0');
+                        }
+                        dateStr = sb.toString();
+                        len = dateStr.length();
+                    }
+                }
+            }
+            
             c = dateStr.charAt(len-3);
             if (c == ':') { // remove optional colon
                 // remove colon
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len-3, len-2);
                 dateStr = sb.toString();
             } else if (c == '+' || c == '-') { // missing minutes
                 // let's just append '00'
                 dateStr += "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+            
+            // Milliseconds missing completely
+            if (dateStr.indexOf('.') < 0) {
+                // Find the position before timezone indicator
+                int timeEndPos = len - 5; // -5 for timezone like "-0500"
+                if (timeEndPos > 0 && Character.isDigit(dateStr.charAt(timeEndPos - 1))) {
                     StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                    sb.insert(timeEndPos, ".000");
                     dateStr = sb.toString();
                 }
+            }
+            
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
             // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
             if (timeLen <= 8) {
                     sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
