diff --git a/tmp/b3f331d6-c835-4d72-81b8-1bd5a6aa013e_buggy.java b/tmp/58b2e65c-2a5a-442d-a092-75c7511da0b5_fixed.java
index cd412d2..7f82871 100644
--- a/tmp/b3f331d6-c835-4d72-81b8-1bd5a6aa013e_buggy.java
+++ b/tmp/58b2e65c-2a5a-442d-a092-75c7511da0b5_fixed.java
@@ -1,76 +1,123 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
     /* 21-May-2009, tatu: DateFormat has very strict handling of
      * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
      */
 
     /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
      * quite simple because we already set date format timezone to be
      * GMT, and hence can just strip out 'Z' altogether
      */
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
+            // First, need to handle seconds and milliseconds
+            int timeIndex = dateStr.indexOf('T');
+            if (timeIndex > 0) {
+                int tzIndex = -1;
+                // Let's find timezone marker position
+                for (int i = len-6; i > timeIndex; i--) {
+                    char ch = dateStr.charAt(i);
+                    if (ch == '+' || ch == '-') {
+                        tzIndex = i;
+                        break;
+                    }
+                }
+                // Found timezone marker? Handle missing seconds and milliseconds
+                if (tzIndex > 0) {
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    String timeStr = dateStr.substring(timeIndex+1, tzIndex);
+                    // If we don't have seconds
+                    if (timeStr.indexOf(':') == timeStr.lastIndexOf(':')) {
+                        sb.insert(tzIndex, ":00");
+                        dateStr = sb.toString();
+                        len = dateStr.length();
+                        tzIndex += 3; // Adjust for inserted ":00"
+                    }
+                    // Check for partial milliseconds (if any)
+                    int millisPos = -1;
+                    for (int i = tzIndex-1; i > timeIndex; i--) {
+                        if (dateStr.charAt(i) == '.') {
+                            millisPos = i;
+                            break;
+                        }
+                    }
+                    if (millisPos > 0) {
+                        // Count digits in milliseconds
+                        int digitCount = tzIndex - millisPos - 1;
+                        // If less than 3 digits, pad with zeros
+                        if (digitCount < 3) {
+                            sb = new StringBuilder(dateStr);
+                            // Add the missing zeros
+                            for (int i = 0; i < (3 - digitCount); ++i) {
+                                sb.insert(tzIndex, "0");
+                            }
+                            dateStr = sb.toString();
+                            len = dateStr.length();
+                        }
+                    } else {
+                        // No milliseconds at all, add them
+                        sb = new StringBuilder(dateStr);
+                        sb.insert(tzIndex, ".000");
+                        dateStr = sb.toString();
+                        len = dateStr.length();
+                    }
+                }
+            }
+            
+            // Check if we need to fix the timezone format
             c = dateStr.charAt(len-3);
             if (c == ':') { // remove optional colon
                 // remove colon
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len-3, len-2);
                 dateStr = sb.toString();
             } else if (c == '+' || c == '-') { // missing minutes
                 // let's just append '00'
                 dateStr += "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
-                }
+            
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
             // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
             if (timeLen <= 8) {
                     sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
