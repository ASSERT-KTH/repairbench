diff --git a/tmp/64486a3c-508a-4359-9bee-402d23038f2e_buggy.java b/tmp/64c30a2c-d490-43a4-95bc-4cf7249d6cae_fixed.java
index cd412d2..5e0df1e 100644
--- a/tmp/64486a3c-508a-4359-9bee-402d23038f2e_buggy.java
+++ b/tmp/64c30a2c-d490-43a4-95bc-4cf7249d6cae_fixed.java
@@ -1,76 +1,126 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
     /* 21-May-2009, tatu: DateFormat has very strict handling of
      * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
      */
 
     /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
      * quite simple because we already set date format timezone to be
      * GMT, and hence can just strip out 'Z' altogether
      */
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
+            // Handle missing seconds - look for time zone marker after minutes
+            int tzsignIdx = dateStr.indexOf('-', 16); // default to not found
+            if (tzsignIdx < 0) { // try with '+' if not found
+                tzsignIdx = dateStr.indexOf('+', 16);
+            }
+            if (tzsignIdx >= 0) {
+                // Check if we're missing seconds
+                char secChar = dateStr.charAt(tzsignIdx-3);
+                if (secChar == ':' || Character.isDigit(secChar)) {
+                    // No problem, seconds exist
+                } else {
+                    // Missing seconds, insert ":00"
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    sb.insert(tzsignIdx, ":00");
+                    dateStr = sb.toString();
+                    // Update length after modification
+                    len = dateStr.length();
+                }
+            }
+            
+            // Now check for timezone formatting issues
             c = dateStr.charAt(len-3);
             if (c == ':') { // remove optional colon
                 // remove colon
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len-3, len-2);
                 dateStr = sb.toString();
+                len--; // update length after delete
             } else if (c == '+' || c == '-') { // missing minutes
                 // let's just append '00'
                 dateStr += "00";
+                len += 2; // update length after append
             }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+            
+            // Check for partial milliseconds (like .6 or .61 instead of .600 or .610)
+            int millisStart = dateStr.indexOf('.');
+            if (millisStart > 0) {
+                int tzIndex = Math.max(dateStr.indexOf('+', millisStart), dateStr.indexOf('-', millisStart));
+                if (tzIndex > 0) {
+                    int millisLen = tzIndex - millisStart - 1;
+                    if (millisLen > 0 && millisLen < 3) {
+                        // We have partial milliseconds, need to pad
                         StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                        while (millisLen < 3) {
+                            sb.insert(tzIndex, "0");
+                            millisLen++;
+                            tzIndex++;
+                        }
+                        dateStr = sb.toString();
+                        len = dateStr.length(); // update length
+                    }
+                }
+            } else {
+                // No milliseconds at all, do we need to add?
+                int timeIndex = dateStr.indexOf('T');
+                if (timeIndex > 0) {
+                    int tzIndex = Math.max(dateStr.indexOf('+', timeIndex), dateStr.indexOf('-', timeIndex));
+                    if (tzIndex > 0) {
+                        StringBuilder sb = new StringBuilder(dateStr);
+                        // Count characters between T and timezone to determine if we're missing milliseconds
+                        if (dateStr.charAt(tzIndex-1) == '0' && dateStr.charAt(tzIndex-2) == '0' && dateStr.charAt(tzIndex-3) == ':') {
+                            sb.insert(tzIndex, ".000");
                             dateStr = sb.toString();
+                            len = dateStr.length(); // update length
+                        }
+                    }
+                }
             }
+            
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
             // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
             if (timeLen <= 8) {
                 sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
