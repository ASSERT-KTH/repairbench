diff --git a/tmp/c86cfebd-8044-442f-b89f-74947cafb3a5_buggy.java b/tmp/3e71d9f2-920c-4054-958f-cacc7ee4c637_fixed.java
index 03b03d7..9556f5b 100644
--- a/tmp/c86cfebd-8044-442f-b89f-74947cafb3a5_buggy.java
+++ b/tmp/3e71d9f2-920c-4054-958f-cacc7ee4c637_fixed.java
@@ -1,25 +1,32 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
     // a bit messy, but will work in all non-pathological cases
     
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
     
     // work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
     
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    // Check if this instant is in the overlap
+    long beforeOffset = getOffset(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
+    long afterOffset = getOffset(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
+    
+    if (earlierOrLater) {
+        // Later offset (typically summer time)
+        return convertLocalToUTC(local, false, afterOffset);
+    } else {
+        // Earlier offset (typically winter time)
+        return convertLocalToUTC(local, false, beforeOffset);
+    }
 }
\ No newline at end of file
