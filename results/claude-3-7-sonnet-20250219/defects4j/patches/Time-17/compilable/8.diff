diff --git a/tmp/6262b030-380c-45a2-920c-9cb5661af8b9_buggy.java b/tmp/94b0bcb7-6f29-4aa2-9002-667deda299ad_fixed.java
index 03b03d7..d4acfd1 100644
--- a/tmp/6262b030-380c-45a2-920c-9cb5661af8b9_buggy.java
+++ b/tmp/94b0bcb7-6f29-4aa2-9002-667deda299ad_fixed.java
@@ -1,25 +1,34 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
     // a bit messy, but will work in all non-pathological cases
     
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
     
     // work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
     
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    // Find the actual offset we need
+    long offset = instant - local;
+    long offsetBefore = (instant - 3 * DateTimeConstants.MILLIS_PER_HOUR) - instantBefore;
+    long offsetAfter = (instant + 3 * DateTimeConstants.MILLIS_PER_HOUR) - instantAfter;
+    
+    // Calculate result
+    if (earlierOrLater) {
+        // Use later offset
+        return (offset == offsetBefore ? convertLocalToUTC(local, false, offsetAfter) : instant);
+    } else {
+        // Use earlier offset
+        return (offset == offsetAfter ? convertLocalToUTC(local, false, offsetBefore) : instant);
+    }
 }
\ No newline at end of file
