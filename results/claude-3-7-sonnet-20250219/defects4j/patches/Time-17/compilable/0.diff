diff --git a/tmp/a7cc7501-6a03-450a-8c90-d5aa8cb4cd49_buggy.java b/tmp/cf9d27c2-4692-446e-b823-d49fd7ffaa72_fixed.java
index 03b03d7..4a115f8 100644
--- a/tmp/a7cc7501-6a03-450a-8c90-d5aa8cb4cd49_buggy.java
+++ b/tmp/cf9d27c2-4692-446e-b823-d49fd7ffaa72_fixed.java
@@ -1,25 +1,42 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
     // a bit messy, but will work in all non-pathological cases
     
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
     
     // work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+    long beforeOffset = getOffset(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
+    long afterOffset = getOffset(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    if (afterOffset <= beforeOffset) {
+        // clock goes backwards (fall DST)
+        if (earlierOrLater) {
+            // later means earlier offset
+            return convertLocalToUTC(local, false, instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
+        } else {
+            // earlier means later offset
+            return convertLocalToUTC(local, false, instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
+        }
+    } else {
+        // clock goes forwards (spring DST)
+        if (earlierOrLater) {
+            // later means later offset
+            return convertLocalToUTC(local, false, instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
+        } else {
+            // earlier means earlier offset
+            return convertLocalToUTC(local, false, instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
+        }
+    }
 }
\ No newline at end of file
