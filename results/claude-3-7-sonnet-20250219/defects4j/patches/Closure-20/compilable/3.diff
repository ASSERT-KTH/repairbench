diff --git a/tmp/ce887d23-840f-4271-a5ee-6e4906a58173_buggy.java b/tmp/8bc8d9e5-2f6c-42e5-88e4-844a94c9b639_fixed.java
index d4e6d48..fe5125d 100644
--- a/tmp/ce887d23-840f-4271-a5ee-6e4906a58173_buggy.java
+++ b/tmp/8bc8d9e5-2f6c-42e5-88e4-844a94c9b639_fixed.java
@@ -1,23 +1,29 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
       // Fold String(a) to '' + (a) on immutable literals,
       // which allows further optimizations
       //
       // We can't do this in the general case, because String(a) has
       // slightly different semantics than '' + (a). See
       // http://code.google.com/p/closure-compiler/issues/detail?id=759
       Node value = callTarget.getNext();
       if (value != null) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
+      } else {
+        // String() with no arguments should be replaced with an empty string
+        Node emptyString = IR.string("").srcref(callTarget);
+        n.getParent().replaceChild(n, emptyString);
+        reportCodeChange();
+        return emptyString;
       }
     }
     return n;
   }
\ No newline at end of file
