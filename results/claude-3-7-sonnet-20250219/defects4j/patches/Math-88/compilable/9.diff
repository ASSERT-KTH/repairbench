diff --git a/tmp/77d9279d-aea3-4340-b825-246f280e04dd_buggy.java b/tmp/7a4c6355-6270-4384-98a7-5571d5bc7b0c_fixed.java
index 544303b..d38e586 100644
--- a/tmp/77d9279d-aea3-4340-b825-246f280e04dd_buggy.java
+++ b/tmp/7a4c6355-6270-4384-98a7-5571d5bc7b0c_fixed.java
@@ -1,29 +1,44 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     Integer basicRow =
         getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
     double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    Set<Integer> basicRows = new HashSet<Integer>();
+    
     for (int i = 0; i < coefficients.length; i++) {
         basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+        if (basicRow != null) {
+            basicRows.add(basicRow);
+        }
+    }
+    
+    for (int i = 0; i < coefficients.length; i++) {
+        basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+        if (basicRow == null) {
+            coefficients[i] = 0;
+        } else {
+            coefficients[i] = getEntry(basicRow, getRhsOffset()) -
+                (restrictToNonNegative ? 0 : mostNegative);
+            for (int j = 0; j < getNumObjectiveFunctions() + getOriginalNumDecisionVariables(); j++) {
+                if (j == getNumObjectiveFunctions() + i) {
+                    continue;
+                }
+                Integer otherBasicRow = getBasicRow(j);
+                if (otherBasicRow != null && otherBasicRow.equals(basicRow)) {
                     // if multiple variables can take a given value 
                     // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
                     coefficients[i] = 0;
+                    break;
                 }
             }
         }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
