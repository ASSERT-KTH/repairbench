diff --git a/tmp/b398194e-c805-4c65-a82d-e971ed0da635_buggy.java b/tmp/e0cb4bde-73cf-44ed-921b-d3f76c005835_fixed.java
index 544303b..db18673 100644
--- a/tmp/b398194e-c805-4c65-a82d-e971ed0da635_buggy.java
+++ b/tmp/e0cb4bde-73cf-44ed-921b-d3f76c005835_fixed.java
@@ -1,29 +1,26 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     Integer basicRow =
         getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
     double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    Set<Integer> usedBasicRows = new HashSet<Integer>();
+    
     for (int i = 0; i < coefficients.length; i++) {
         basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
+        if (basicRow != null && !usedBasicRows.contains(basicRow)) {
+            usedBasicRows.add(basicRow);
+            coefficients[i] = getEntry(basicRow, getRhsOffset()) -
                 (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+        } else {
             coefficients[i] = 0;
         }
     }
-            }
-        }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
