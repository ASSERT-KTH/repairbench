diff --git a/tmp/8e5d9171-b37d-4cc7-8483-446f378462db_buggy.java b/tmp/84d91620-884f-472d-a716-c6dd3a7b7533_fixed.java
index 544303b..a137c8f 100644
--- a/tmp/8e5d9171-b37d-4cc7-8483-446f378462db_buggy.java
+++ b/tmp/84d91620-884f-472d-a716-c6dd3a7b7533_fixed.java
@@ -1,29 +1,42 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     Integer basicRow =
         getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
     double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    Set<Integer> basicRows = new HashSet<Integer>();
+    
+    // Collect all basic rows
+    for (int i = 0; i < coefficients.length; i++) {
+        Integer row = getBasicRow(getNumObjectiveFunctions() + i);
+        if (row != null) {
+            basicRows.add(row);
+        }
+    }
+    
     for (int i = 0; i < coefficients.length; i++) {
         basicRow = getBasicRow(getNumObjectiveFunctions() + i);
         // if multiple variables can take a given value 
         // then we choose the first and set the rest equal to 0
         coefficients[i] =
             (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
             (restrictToNonNegative ? 0 : mostNegative);
+        
+        // If this basic row is used by other variables, set this coefficient to 0
         if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+            for (int j = 0; j < getOriginalNumDecisionVariables(); j++) {
+                if (j != i && tableau.getEntry(basicRow, getNumObjectiveFunctions() + j) != 0) {
                     coefficients[i] = 0;
+                    break;
                 }
             }
         }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
