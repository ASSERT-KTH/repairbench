diff --git a/tmp/9846f8d2-dfef-4829-9c62-dfdd6a1d9996_buggy.java b/tmp/37fa6ace-04fc-4e8b-b0e2-e17e93c68992_fixed.java
index 229b3e7..503cf99 100644
--- a/tmp/9846f8d2-dfef-4829-9c62-dfdd6a1d9996_buggy.java
+++ b/tmp/37fa6ace-04fc-4e8b-b0e2-e17e93c68992_fixed.java
@@ -1,55 +1,55 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
-
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
+    // adjust width to account for indent if needed
+    int adjustedWidth = width;
+    if (nextLineTabStop >= width) {
+        adjustedWidth = width;
+        // use width as the wrap position
+    }
+
     while (true)
     {
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        pos = findWrapPos(text, adjustedWidth, 0);
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
         }
         
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+        if ( (text.length() > adjustedWidth) && (pos == nextLineTabStop - 1) ) 
         {
-                pos = width;
+            pos = adjustedWidth;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
