diff --git a/tmp/3c86fba2-8c52-4d7c-9cb6-192547bcb568_buggy.java b/tmp/d2fde2f7-5158-49cc-adc2-bfaed95c0f40_fixed.java
index 229b3e7..64e15b4 100644
--- a/tmp/3c86fba2-8c52-4d7c-9cb6-192547bcb568_buggy.java
+++ b/tmp/d2fde2f7-5158-49cc-adc2-bfaed95c0f40_fixed.java
@@ -1,55 +1,61 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
-
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         text = padding + text.substring(pos).trim();
+        
+        // If the next line is too long, break it at the maximum width
+        if (nextLineTabStop >= width) {
+            pos = width - 1;
+        } else {
             pos = findWrapPos(text, width, 0);
             
-            if (pos == -1)
-            {
+            if (pos == -1) {
                 sb.append(text);
-
                 return sb;
             }
             
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
+            if ((text.length() > width) && (pos == nextLineTabStop - 1)) {
                 pos = width;
             }
+        }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        
+        // If we didn't find a proper wrapping position, handle one character at a time
+        if (nextLineTabStop >= width) {
+            text = text.substring(pos);
+            if (text.length() <= 0) {
+                break;
             }
         }
+    }
+    
+    return sb;
+}
\ No newline at end of file
