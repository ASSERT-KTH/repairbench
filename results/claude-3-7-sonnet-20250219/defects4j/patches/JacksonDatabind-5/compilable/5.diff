diff --git a/tmp/225beecc-df07-45af-ac14-0b8eb1e90834_buggy.java b/tmp/5a0b1a19-ef54-420c-a14e-73fd05e15ce9_fixed.java
index b2db1d6..cffabef 100644
--- a/tmp/225beecc-df07-45af-ac14-0b8eb1e90834_buggy.java
+++ b/tmp/5a0b1a19-ef54-420c-a14e-73fd05e15ce9_fixed.java
@@ -1,29 +1,29 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
             /* Do we already have a method to augment (from sub-class
              * that will mask this mixIn)? If so, add if visible
              * without masking (no such annotation)
              */
             if (am != null) {
                 _addMixUnders(m, am);
                 /* Otherwise will have precedence, but must wait
                  * until we find the real method (mixIn methods are
                  * just placeholder, can't be called)
                  */
-                } else {
+            }
             // Well, or, as per [Issue#515], multi-level merge within mixins...
+            // This should always be done, not just in the 'else' case
             mixIns.add(_constructMethod(m));
         }
     }
 }
\ No newline at end of file
-    }
