diff --git a/tmp/052a5df4-cc23-4a73-a2de-b6f2d8e8f0db_buggy.java b/tmp/bc096c2f-81a2-483b-b0f1-17c206078c60_fixed.java
index 46817a7..12884eb 100644
--- a/tmp/052a5df4-cc23-4a73-a2de-b6f2d8e8f0db_buggy.java
+++ b/tmp/bc096c2f-81a2-483b-b0f1-17c206078c60_fixed.java
@@ -1,16 +1,38 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
+  
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+  boolean areEquivalent = true;
+  
+  // Check if both record types have the same properties with equivalent types
   for (String property : properties.keySet()) {
     if (that.toMaybeRecordType().hasProperty(property) &&
         that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
             getPropertyType(property))) {
       builder.addProperty(property, getPropertyType(property),
           getPropertyNode(property));
+    } else {
+      areEquivalent = false;
+      break;
     }
   }
+  
+  // Check if the other record type has properties that this one doesn't
+  for (String property : that.toMaybeRecordType().getOwnPropertyNames()) {
+    if (!hasProperty(property)) {
+      areEquivalent = false;
+      break;
+    }
+  }
+  
+  // If they're equivalent, return the common structure
+  if (areEquivalent && !builder.isEmpty()) {
     return builder.build();
   }
+  
+  // Otherwise, return the union type
+  return registry.createUnionType(this, that);
+}
\ No newline at end of file
