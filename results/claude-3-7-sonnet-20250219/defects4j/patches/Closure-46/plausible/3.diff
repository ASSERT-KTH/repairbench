diff --git a/tmp/de515cfb-8c19-42e2-a6d7-edba7d4a9eb9_buggy.java b/tmp/0ae490a8-03ed-42f7-a49b-dc3bbecfc32d_fixed.java
index 46817a7..4127fd4 100644
--- a/tmp/de515cfb-8c19-42e2-a6d7-edba7d4a9eb9_buggy.java
+++ b/tmp/0ae490a8-03ed-42f7-a49b-dc3bbecfc32d_fixed.java
@@ -1,16 +1,40 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+  
+  // Check if the record types share all properties with equivalent types
+  RecordType thatRecord = that.toMaybeRecordType();
+  boolean hasAllProperties = true;
+  
+  // Check this record has all properties of that record with same types
+  for (String property : thatRecord.properties.keySet()) {
+    if (!hasProperty(property) || 
+        !getPropertyType(property).isEquivalentTo(
+            thatRecord.getPropertyType(property))) {
+      hasAllProperties = false;
+      break;
+    }
+  }
+  
+  // Check that record has all properties of this record with same types
+  if (hasAllProperties) {
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
+      if (!thatRecord.hasProperty(property) || 
+          !thatRecord.getPropertyType(property).isEquivalentTo(
               getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+        hasAllProperties = false;
+        break;
       }
     }
-    return builder.build();
+  }
+  
+  // If all properties match with equivalent types, return this (or that, they're equivalent)
+  if (hasAllProperties) {
+    return this;
+  }
+  
+  // Otherwise, create a union type
+  return registry.createUnionType(this, that);
 }
\ No newline at end of file
