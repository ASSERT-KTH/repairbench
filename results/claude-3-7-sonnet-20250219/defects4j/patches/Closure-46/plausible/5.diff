diff --git a/tmp/e2a075e7-501e-41fa-98b8-eba9d4d0c329_buggy.java b/tmp/0a137211-1a40-4415-b670-dff9d23dcdb9_fixed.java
index 46817a7..e741d75 100644
--- a/tmp/e2a075e7-501e-41fa-98b8-eba9d4d0c329_buggy.java
+++ b/tmp/0a137211-1a40-4415-b670-dff9d23dcdb9_fixed.java
@@ -1,16 +1,11 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
-      }
-    }
-    return builder.build();
+  
+  // For record types, the least supertype is the union of the two types
+  // This is because there's no common "parent" record type that can
+  // represent both structures properly
+  return registry.createUnionType(this, that);
 }
\ No newline at end of file
