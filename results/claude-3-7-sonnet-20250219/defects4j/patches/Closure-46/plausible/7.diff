diff --git a/tmp/f9ccb124-74d8-40fb-96a1-b3c49ec90a99_buggy.java b/tmp/c6c2950e-bf93-4038-ab1d-97f8292359f9_fixed.java
index 46817a7..d8d26f3 100644
--- a/tmp/f9ccb124-74d8-40fb-96a1-b3c49ec90a99_buggy.java
+++ b/tmp/c6c2950e-bf93-4038-ab1d-97f8292359f9_fixed.java
@@ -1,16 +1,27 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+    
+    RecordType thatRecord = that.toMaybeRecordType();
+    
+    // Check if the two record types have the exact same properties with equivalent types
+    boolean areEquivalent = properties.size() == thatRecord.properties.size();
+    if (areEquivalent) {
       for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+        if (!thatRecord.hasProperty(property) ||
+            !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {
+          areEquivalent = false;
+          break;
         }
       }
-    return builder.build();
+    }
+    
+    if (areEquivalent) {
+      return this;
+    } else {
+      // If they're not equivalent, return a union type
+      return registry.createUnionType(this, that);
+    }
   }
\ No newline at end of file
