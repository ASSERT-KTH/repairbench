diff --git a/tmp/50dbfcd2-1ef9-4121-892f-bd094bb778be_buggy.java b/tmp/e585a80e-2baa-4c28-8dc1-2dd104e5ea27_fixed.java
index 5abdeb5..cf45f4c 100644
--- a/tmp/50dbfcd2-1ef9-4121-892f-bd094bb778be_buggy.java
+++ b/tmp/e585a80e-2baa-4c28-8dc1-2dd104e5ea27_fixed.java
@@ -1,29 +1,23 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+              // We don't want to count the left side of an assignment as a use
+              !NodeUtil.isLhs(n, parent)) {
               numUsesWithinCfgNode++;
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
