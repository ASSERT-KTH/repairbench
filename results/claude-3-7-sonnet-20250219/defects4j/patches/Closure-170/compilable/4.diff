diff --git a/tmp/5623a815-6607-4c0d-b5e6-a3986b1be9cb_buggy.java b/tmp/ea687200-f458-4173-b564-dd528980314a_fixed.java
index 5abdeb5..f08ab15 100644
--- a/tmp/5623a815-6607-4c0d-b5e6-a3986b1be9cb_buggy.java
+++ b/tmp/ea687200-f458-4173-b564-dd528980314a_fixed.java
@@ -1,29 +1,30 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName)) {
+            // Don't count the variable when it's the direct left-hand side of an assignment
+            if (!(parent.isAssign() && parent.getFirstChild() == n)) {
+              // Also don't count when it's inside a hook (ternary) that's part of an assignment
+              if (!(NodeUtil.isExprAssign(parent) || 
+                   (parent.isHook() && parent.getParent() != null &&
+                    (NodeUtil.isExprAssign(parent.getParent()) ||
+                     parent.getParent().isAssign())))) {
                 numUsesWithinCfgNode++;
               }
             }
+          }
+        }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
