diff --git a/tmp/ebc50406-8d88-42db-93bf-f61387e005fc_buggy.java b/tmp/25183654-adf7-48f2-b25d-30735f7ed7b9_fixed.java
index 5abdeb5..ae165d5 100644
--- a/tmp/ebc50406-8d88-42db-93bf-f61387e005fc_buggy.java
+++ b/tmp/25183654-adf7-48f2-b25d-30735f7ed7b9_fixed.java
@@ -1,29 +1,26 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+      if (n.isName() && n.getString().equals(varName)) {
+        // Don't count the variable if it appears as the left side of an assignment
+        // that is a direct child of the CFG node (not nested in other expressions)
+        if (!(parent.isAssign() && parent.getFirstChild() == n && 
+             parent.getParent() == cfgNode)) {
           numUsesWithinCfgNode++;
         }
       }
+    }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
