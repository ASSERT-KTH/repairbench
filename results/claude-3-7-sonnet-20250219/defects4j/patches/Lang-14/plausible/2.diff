diff --git a/tmp/dc87d7fa-9d16-4cf8-acc8-c2f79c7162dc_buggy.java b/tmp/886c4199-431d-4b2e-81c3-ab2a8c7424fa_fixed.java
index c18eb8b..03fe44d 100644
--- a/tmp/dc87d7fa-9d16-4cf8-acc8-c2f79c7162dc_buggy.java
+++ b/tmp/886c4199-431d-4b2e-81c3-ab2a8c7424fa_fixed.java
@@ -1,30 +1,42 @@
 /**
  * <p>Compares two CharSequences, returning {@code true} if they represent
  * equal sequences of characters.</p>
  *
  * <p>{@code null}s are handled without exceptions. Two {@code null}
  * references are considered to be equal. The comparison is case sensitive.</p>
  *
  * <pre>
  * StringUtils.equals(null, null)   = true
  * StringUtils.equals(null, "abc")  = false
  * StringUtils.equals("abc", null)  = false
  * StringUtils.equals("abc", "abc") = true
  * StringUtils.equals("abc", "ABC") = false
  * </pre>
  *
  * @see java.lang.CharSequence#equals(Object)
  * @param cs1  the first CharSequence, may be {@code null}
  * @param cs2  the second CharSequence, may be {@code null}
  * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}
  * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)
  */
 public static boolean equals(CharSequence cs1, CharSequence cs2) {
     if (cs1 == cs2) {
         return true;
     }
     if (cs1 == null || cs2 == null) {
         return false;
     }
+    if (cs1.length() != cs2.length()) {
+        return false;
+    }
+    if (cs1 instanceof String && cs2 instanceof String) {
         return cs1.equals(cs2);
     }
+    // Compare character by character
+    for (int i = 0; i < cs1.length(); i++) {
+        if (cs1.charAt(i) != cs2.charAt(i)) {
+            return false;
+        }
+    }
+    return true;
+}
\ No newline at end of file
