diff --git a/tmp/d53ad6d4-7457-4341-9d26-b64ceb55e0b4_buggy.java b/tmp/7520d246-70d7-4ce5-8e71-da197353ae41_fixed.java
index 4e21866..d74a5a6 100644
--- a/tmp/d53ad6d4-7457-4341-9d26-b64ceb55e0b4_buggy.java
+++ b/tmp/7520d246-70d7-4ce5-8e71-da197353ae41_fixed.java
@@ -1,10 +1,36 @@
 /**
  * Computes the square-root of the weight matrix.
  *
  * @param m Symmetric, positive-definite (weight) matrix.
  * @return the square-root of the weight matrix.
  */
 private RealMatrix squareRoot(RealMatrix m) {
+    final int dimension = m.getRowDimension();
+    final RealMatrix sqrtM = MatrixUtils.createRealMatrix(dimension, dimension);
+    
+    // If the matrix is diagonal, we can avoid the expensive eigendecomposition
+    if (isDiagonal(m)) {
+        // Just take the square roots of the diagonal elements
+        for (int i = 0; i < dimension; i++) {
+            sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));
+        }
+        return sqrtM;
+    } else {
+        // Fall back to eigendecomposition for non-diagonal matrices
         final EigenDecomposition dec = new EigenDecomposition(m);
         return dec.getSquareRoot();
     }
+}
+
+// Helper method to check if a matrix is diagonal
+private boolean isDiagonal(RealMatrix m) {
+    final int dimension = m.getRowDimension();
+    for (int i = 0; i < dimension; i++) {
+        for (int j = 0; j < dimension; j++) {
+            if (i != j && m.getEntry(i, j) != 0.0) {
+                return false;
+            }
+        }
+    }
+    return true;
+}
\ No newline at end of file
