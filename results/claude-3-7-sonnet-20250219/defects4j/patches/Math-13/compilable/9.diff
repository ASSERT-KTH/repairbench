diff --git a/tmp/58f33d00-b3c9-48a6-9de4-cf4fe35a180a_buggy.java b/tmp/3fe4eb44-591c-4026-b678-8d98b0d2fb66_fixed.java
index 4e21866..f42b1be 100644
--- a/tmp/58f33d00-b3c9-48a6-9de4-cf4fe35a180a_buggy.java
+++ b/tmp/3fe4eb44-591c-4026-b678-8d98b0d2fb66_fixed.java
@@ -1,10 +1,34 @@
 /**
  * Computes the square-root of the weight matrix.
  *
  * @param m Symmetric, positive-definite (weight) matrix.
  * @return the square-root of the weight matrix.
  */
 private RealMatrix squareRoot(RealMatrix m) {
+    final int dimension = m.getRowDimension();
+    final RealMatrix sqrtM = MatrixUtils.createRealMatrix(dimension, dimension);
+    
+    // For a diagonal matrix, the square root is just the square root of each element
+    if (isDiagonal(m)) {
+        for (int i = 0; i < dimension; i++) {
+            sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));
+        }
+        return sqrtM;
+    }
+    
+    // Fall back to eigendecomposition for non-diagonal matrices
     final EigenDecomposition dec = new EigenDecomposition(m);
     return dec.getSquareRoot();
 }
+
+private boolean isDiagonal(RealMatrix m) {
+    final int dimension = m.getRowDimension();
+    for (int i = 0; i < dimension; i++) {
+        for (int j = 0; j < dimension; j++) {
+            if (i != j && FastMath.abs(m.getEntry(i, j)) > 1e-10) {
+                return false;
+            }
+        }
+    }
+    return true;
+}
\ No newline at end of file
