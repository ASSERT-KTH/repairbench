diff --git a/tmp/bc6adc5f-d2f2-4f4c-bf52-0dc9d1b844b8_buggy.java b/tmp/dadf30c8-73d2-4bb0-b126-def53a55cd8a_fixed.java
index 4e21866..6aa5da2 100644
--- a/tmp/bc6adc5f-d2f2-4f4c-bf52-0dc9d1b844b8_buggy.java
+++ b/tmp/dadf30c8-73d2-4bb0-b126-def53a55cd8a_fixed.java
@@ -1,10 +1,35 @@
 /**
  * Computes the square-root of the weight matrix.
  *
  * @param m Symmetric, positive-definite (weight) matrix.
  * @return the square-root of the weight matrix.
  */
 private RealMatrix squareRoot(RealMatrix m) {
+    final int dimension = m.getRowDimension();
+    final RealMatrix sqrtM = MatrixUtils.createRealMatrix(dimension, dimension);
+    
+    // For a diagonal matrix, we can just take the square root of each element
+    if (isDiagonal(m)) {
+        for (int i = 0; i < dimension; i++) {
+            sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));
+        }
+        return sqrtM;
+    }
+    
+    // For non-diagonal matrices, use EigenDecomposition
     final EigenDecomposition dec = new EigenDecomposition(m);
     return dec.getSquareRoot();
 }
+
+// Helper method to check if a matrix is diagonal
+private boolean isDiagonal(RealMatrix m) {
+    final int dimension = m.getRowDimension();
+    for (int i = 0; i < dimension; i++) {
+        for (int j = 0; j < dimension; j++) {
+            if (i != j && FastMath.abs(m.getEntry(i, j)) > 1e-12) {
+                return false;
+            }
+        }
+    }
+    return true;
+}
\ No newline at end of file
