diff --git a/tmp/65009560-4931-4e72-b99e-9cc0b118df55_buggy.java b/tmp/2f5aa17b-c3c2-4eef-ae4a-c37c67df7778_fixed.java
index 4e21866..635c817 100644
--- a/tmp/65009560-4931-4e72-b99e-9cc0b118df55_buggy.java
+++ b/tmp/2f5aa17b-c3c2-4eef-ae4a-c37c67df7778_fixed.java
@@ -1,10 +1,42 @@
 /**
  * Computes the square-root of the weight matrix.
  *
  * @param m Symmetric, positive-definite (weight) matrix.
  * @return the square-root of the weight matrix.
  */
 private RealMatrix squareRoot(RealMatrix m) {
+    final int dim = m.getRowDimension();
+    final RealMatrix sqrtM = MatrixUtils.createRealMatrix(dim, dim);
+    
+    // For a diagonal matrix, the square root is just the square root of each element
+    if (isDiagonal(m)) {
+        for (int i = 0; i < dim; i++) {
+            sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));
+        }
+        return sqrtM;
+    }
+    
+    // For non-diagonal matrices, use eigendecomposition
     final EigenDecomposition dec = new EigenDecomposition(m);
     return dec.getSquareRoot();
 }
+
+/**
+ * Checks if the matrix is diagonal (only diagonal elements are non-zero)
+ * 
+ * @param m Matrix to check
+ * @return true if the matrix is diagonal
+ */
+private boolean isDiagonal(RealMatrix m) {
+    final int rows = m.getRowDimension();
+    final int cols = m.getColumnDimension();
+    
+    for (int i = 0; i < rows; i++) {
+        for (int j = 0; j < cols; j++) {
+            if (i != j && FastMath.abs(m.getEntry(i, j)) > 1e-12) {
+                return false;
+            }
+        }
+    }
+    return true;
+}
\ No newline at end of file
