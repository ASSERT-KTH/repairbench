diff --git a/tmp/bf82ad3e-0cf9-49e1-b026-c7fba4472175_buggy.java b/tmp/e6f3a6c8-fda4-4c10-8588-f893c4223fce_fixed.java
index 4e21866..051f527 100644
--- a/tmp/bf82ad3e-0cf9-49e1-b026-c7fba4472175_buggy.java
+++ b/tmp/e6f3a6c8-fda4-4c10-8588-f893c4223fce_fixed.java
@@ -1,10 +1,33 @@
 /**
  * Computes the square-root of the weight matrix.
  *
  * @param m Symmetric, positive-definite (weight) matrix.
  * @return the square-root of the weight matrix.
  */
 private RealMatrix squareRoot(RealMatrix m) {
+    final int dim = m.getRowDimension();
+    final RealMatrix sqrtM = MatrixUtils.createRealMatrix(dim, dim);
+    
+    // If the matrix is diagonal, we can just take the square root of each element
+    boolean isDiagonal = true;
+    for (int i = 0; i < dim && isDiagonal; ++i) {
+        for (int j = 0; j < dim && isDiagonal; ++j) {
+            if (i != j && Math.abs(m.getEntry(i, j)) > 1e-15) {
+                isDiagonal = false;
+            }
+        }
+    }
+    
+    if (isDiagonal) {
+        // For diagonal matrices, just take square root of each diagonal element
+        for (int i = 0; i < dim; ++i) {
+            sqrtM.setEntry(i, i, Math.sqrt(m.getEntry(i, i)));
+        }
+    } else {
+        // Fall back to eigendecomposition for non-diagonal matrices
         final EigenDecomposition dec = new EigenDecomposition(m);
         return dec.getSquareRoot();
     }
+    
+    return sqrtM;
+}
\ No newline at end of file
