diff --git a/tmp/c36147f9-8671-4047-86a7-2de903751ea8_buggy.java b/tmp/8c6ccf89-a223-444f-a1a2-4a4a5766e1b0_fixed.java
index 4e21866..07515b0 100644
--- a/tmp/c36147f9-8671-4047-86a7-2de903751ea8_buggy.java
+++ b/tmp/8c6ccf89-a223-444f-a1a2-4a4a5766e1b0_fixed.java
@@ -1,10 +1,40 @@
 /**
  * Computes the square-root of the weight matrix.
  *
  * @param m Symmetric, positive-definite (weight) matrix.
  * @return the square-root of the weight matrix.
  */
 private RealMatrix squareRoot(RealMatrix m) {
+    final int dimension = m.getRowDimension();
+    final RealMatrix sqrtM = MatrixUtils.createRealMatrix(dimension, dimension);
+    
+    // For a diagonal matrix, we can just take the square root of each element
+    if (isDiagonal(m)) {
+        for (int i = 0; i < dimension; i++) {
+            sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));
+        }
+        return sqrtM;
+    }
+    
+    // For non-diagonal matrices, use eigen decomposition
+    try {
         final EigenDecomposition dec = new EigenDecomposition(m);
         return dec.getSquareRoot();
+    } catch (OutOfMemoryError e) {
+        // Fallback method for large matrices - Cholesky decomposition
+        final CholeskyDecomposition cholesky = new CholeskyDecomposition(m);
+        return cholesky.getL();
+    }
+}
+
+private boolean isDiagonal(RealMatrix m) {
+    final int dimension = m.getRowDimension();
+    for (int i = 0; i < dimension; i++) {
+        for (int j = 0; j < dimension; j++) {
+            if (i != j && FastMath.abs(m.getEntry(i, j)) > 1e-10) {
+                return false;
+            }
+        }
+    }
+    return true;
 }
\ No newline at end of file
