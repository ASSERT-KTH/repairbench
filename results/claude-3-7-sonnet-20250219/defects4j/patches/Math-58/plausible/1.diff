diff --git a/tmp/809d305f-f88a-4866-8b87-0fdcb543efe5_buggy.java b/tmp/db5b96d8-2bb6-48ec-b7d6-096e65bcf16e_fixed.java
index 3002587..0074163 100644
--- a/tmp/809d305f-f88a-4866-8b87-0fdcb543efe5_buggy.java
+++ b/tmp/db5b96d8-2bb6-48ec-b7d6-096e65bcf16e_fixed.java
@@ -1,10 +1,34 @@
 /**
  * Fits a Gaussian function to the observed points.
  *
  * @return the parameters of the Gaussian function that best fits the
  * observed points (in the same order as above).
  */
 public double[] fit() {
     final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+    
+    // Create a parametric Gaussian with bounds to ensure sigma remains positive
+    Gaussian.Parametric gaussian = new Gaussian.Parametric() {
+        @Override
+        public double value(double x, double[] parameters) {
+            // Ensure sigma is positive
+            double[] checkedParameters = parameters.clone();
+            if (checkedParameters[2] <= 0) {
+                checkedParameters[2] = Double.MIN_VALUE;
+            }
+            return super.value(x, checkedParameters);
+        }
+        
+        @Override
+        public double[] gradient(double x, double[] parameters) {
+            // Ensure sigma is positive
+            double[] checkedParameters = parameters.clone();
+            if (checkedParameters[2] <= 0) {
+                checkedParameters[2] = Double.MIN_VALUE;
+            }
+            return super.gradient(x, checkedParameters);
+        }
+    };
+    
+    return fit(gaussian, guess);
 }
\ No newline at end of file
