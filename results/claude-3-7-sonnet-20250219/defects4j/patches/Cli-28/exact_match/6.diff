diff --git a/tmp/0c4f4664-f0ef-4c0f-87e3-abaf7ea3e10f_buggy.java b/tmp/97226d24-eb0a-4b24-99e6-0d346bd876b9_fixed.java
index a7549f0..eb51881 100644
--- a/tmp/0c4f4664-f0ef-4c0f-87e3-abaf7ea3e10f_buggy.java
+++ b/tmp/97226d24-eb0a-4b24-99e6-0d346bd876b9_fixed.java
@@ -1,50 +1,50 @@
 /**
  * Sets the values of Options using the values in <code>properties</code>.
  *
  * @param properties The value properties to be processed.
  */
 protected void processProperties(Properties properties)
 {
     if (properties == null)
     {
         return;
     }
 
     for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)
     {
         String option = e.nextElement().toString();
 
         if (!cmd.hasOption(option))
         {
             Option opt = getOptions().getOption(option);
 
             // get the value from the properties instance
             String value = properties.getProperty(option);
 
             if (opt.hasArg())
             {
                 if (opt.getValues() == null || opt.getValues().length == 0)
                 {
                     try
                     {
                         opt.addValueForProcessing(value);
                     }
                     catch (RuntimeException exp)
                     {
                         // if we cannot add the value don't worry about it
                     }
                 }
             }
             else if (!("yes".equalsIgnoreCase(value)
                     || "true".equalsIgnoreCase(value)
                     || "1".equalsIgnoreCase(value)))
             {
                 // if the value is not yes, true or 1 then don't add the
                 // option to the CommandLine
-                    break;
+                continue; // Changed break to continue to process remaining properties
             }
 
             cmd.addOption(opt);
         }
     }
 }
\ No newline at end of file
