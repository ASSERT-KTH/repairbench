diff --git a/tmp/75842097-b536-4dd4-b4ab-4f8d1d85e658_buggy.java b/tmp/6d1279bf-2d03-4580-abe0-a778f7a4587a_fixed.java
index fb2b020..25fd2d7 100644
--- a/tmp/75842097-b536-4dd4-b4ab-4f8d1d85e658_buggy.java
+++ b/tmp/6d1279bf-2d03-4580-abe0-a778f7a4587a_fixed.java
@@ -1,27 +1,31 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
   // We only want to match contraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
+    // This map will be used to avoid adding the same property twice.
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+        if (hasProperty(prop)) {
+          // The property exists but has no declared type.
+          defineInferredProperty(prop, propType, null);
+        } else {
+          // The property does not exist, so declare it with an optional type.
+          JSType optionalType = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
+          defineInferredProperty(prop, optionalType, null);
         }
-          defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
