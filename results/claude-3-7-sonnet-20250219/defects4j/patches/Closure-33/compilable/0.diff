diff --git a/tmp/9ce773ad-cbd7-49ea-bfca-902fe7932113_buggy.java b/tmp/e127351d-5ec5-4ba2-bc75-de68ee25d093_fixed.java
index fb2b020..b9ddbcf 100644
--- a/tmp/9ce773ad-cbd7-49ea-bfca-902fe7932113_buggy.java
+++ b/tmp/e127351d-5ec5-4ba2-bc75-de68ee25d093_fixed.java
@@ -1,27 +1,36 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
   // We only want to match contraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
         }
         defineInferredProperty(prop, typeToInfer, null);
+      } else {
+        // Even if the property is declared, we may need to update its type
+        // to be compatible with the constraint
+        JSType existingType = getPropertyType(prop);
+        if (existingType != null && !existingType.isSubtype(propType) && 
+            !propType.isSubtype(existingType)) {
+          JSType newType = existingType.getLeastSupertype(propType);
+          defineInferredProperty(prop, newType, null);
+        }
       }
     }
   }
 }
\ No newline at end of file
