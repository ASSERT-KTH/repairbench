diff --git a/tmp/7de74189-2beb-4b19-b4e8-fd0f5d6efaec_buggy.java b/tmp/c0dd69b3-0960-4e70-b028-1e1ce86384f0_fixed.java
index fb2b020..502f03b 100644
--- a/tmp/7de74189-2beb-4b19-b4e8-fd0f5d6efaec_buggy.java
+++ b/tmp/c0dd69b3-0960-4e70-b028-1e1ce86384f0_fixed.java
@@ -1,27 +1,37 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
           }
           defineInferredProperty(prop, typeToInfer, null);
+        } else if (hasProperty(prop)) {
+          // If the property is declared but has a different type,
+          // try to match the constraints.
+          JSType thisType = getPropertyType(prop);
+          if (thisType != null && !thisType.equals(propType)) {
+            if (thisType instanceof ObjectType && propType instanceof ObjectType) {
+              ObjectType propObjType = (ObjectType) propType;
+              ((ObjectType) thisType).matchConstraint(propObjType);
+            }
+          }
         }
       }
     }
   }
\ No newline at end of file
