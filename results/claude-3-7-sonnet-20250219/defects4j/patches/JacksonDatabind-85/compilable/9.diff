diff --git a/tmp/e717b1ab-f16c-43d2-ad4f-cdde22fb17a9_buggy.java b/tmp/87aa97ed-2e97-43f6-b602-54e112bf1a61_fixed.java
index d926eea..7ccdcdf 100644
--- a/tmp/e717b1ab-f16c-43d2-ad4f-cdde22fb17a9_buggy.java
+++ b/tmp/87aa97ed-2e97-43f6-b602-54e112bf1a61_fixed.java
@@ -1,48 +1,66 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
     // Simple case first: serialize as numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
 
     // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
     // First: custom pattern will override things
     if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
                 || format.hasLocale() || format.hasTimeZone()) {
         TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
+        DateFormat df;
+        if (format.hasPattern()) {
+            final String pattern = format.getPattern();
             final Locale loc = format.hasLocale()
                         ? format.getLocale()
                         : serializers.getLocale();
-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
+            df = new SimpleDateFormat(pattern, loc);
+        } else {
+            df = serializers.getConfig().getDateFormat();
+            // 23-Nov-2018, tatu: Need to ensure we handle cloning here too
+            if (df instanceof StdDateFormat) {
+                df = ((StdDateFormat) df).clone();
+            } else {
+                df = (DateFormat) df.clone();
+            }
+            // Need to set specified locale?
+            if (format.hasLocale()) {
+                df = DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT,
+                        format.getLocale());
+                // And pattern from the original?
+                if (df instanceof SimpleDateFormat) {
+                    String pattern = ((SimpleDateFormat) serializers.getConfig().getDateFormat()).toPattern();
+                    ((SimpleDateFormat) df).applyPattern(pattern);
+                }
+            }
+        }
         if (tz == null) {
             tz = serializers.getTimeZone();
         }
         df.setTimeZone(tz);
         return withFormat(Boolean.FALSE, df);
     }
 
     // Otherwise, need one of these changes:
 
-
     // Jackson's own `StdDateFormat` is quite easy to deal with...
 
     // 08-Jun-2017, tatu: Unfortunately there's no generally usable
     //    mechanism for changing `DateFormat` instances (or even clone()ing)
     //    So: require it be `SimpleDateFormat`; can't config other types
 //        serializers.reportBadDefinition(handledType(), String.format(
     // Ugh. No way to change `Locale`, create copy; must re-crete completely:
     return this;
 }
\ No newline at end of file
