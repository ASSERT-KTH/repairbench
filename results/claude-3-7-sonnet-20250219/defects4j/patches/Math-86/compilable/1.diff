diff --git a/tmp/87ff7706-d0bf-439b-ae18-2248906984b0_buggy.java b/tmp/630e6882-bf01-4967-a05a-c08add68ee12_fixed.java
index 0eef537..9fc5c72 100644
--- a/tmp/87ff7706-d0bf-439b-ae18-2248906984b0_buggy.java
+++ b/tmp/630e6882-bf01-4967-a05a-c08add68ee12_fixed.java
@@ -1,74 +1,86 @@
 /**
  * Calculates the Cholesky decomposition of the given matrix.
  * @param matrix the matrix to decompose
  * @param relativeSymmetryThreshold threshold above which off-diagonal
  * elements are considered too different and matrix not symmetric
  * @param absolutePositivityThreshold threshold below which diagonal
  * elements are considered null and matrix not positive definite
  * @exception NonSquareMatrixException if matrix is not square
  * @exception NotSymmetricMatrixException if matrix is not symmetric
  * @exception NotPositiveDefiniteMatrixException if the matrix is not
  * strictly positive definite
  * @see #CholeskyDecompositionImpl(RealMatrix)
  * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
  * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
  */
 public CholeskyDecompositionImpl(final RealMatrix matrix,
                                  final double relativeSymmetryThreshold,
                                  final double absolutePositivityThreshold)
     throws NonSquareMatrixException,
            NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
     if (!matrix.isSquare()) {
         throw new NonSquareMatrixException(matrix.getRowDimension(),
                                            matrix.getColumnDimension());
     }
 
     final int order = matrix.getRowDimension();
     lTData   = matrix.getData();
     cachedL  = null;
     cachedLT = null;
 
     // check the matrix before transformation
     for (int i = 0; i < order; ++i) {
-
         final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
         // check off-diagonal elements (and reset them to 0)
         for (int j = i + 1; j < order; ++j) {
             final double[] lJ = lTData[j];
             final double lIJ = lI[j];
             final double lJI = lJ[i];
             final double maxDelta =
                 relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
             if (Math.abs(lIJ - lJI) > maxDelta) {
                 throw new NotSymmetricMatrixException();
             }
+            lI[j] = (lIJ + lJI) / 2;
             lJ[i] = 0;
         }
     }
 
     // transform the matrix
     for (int i = 0; i < order; ++i) {
-
         final double[] ltI = lTData[i];
         
         // check diagonal element
+        for (int j = 0; j < i; ++j) {
+            final double[] ltJ = lTData[j];
+            double sum = 0;
+            for (int k = 0; k < j; ++k) {
+                sum += ltI[k] * ltJ[k];
+            }
+            ltI[j] = (ltI[j] - sum) / ltJ[j];
+        }
+        
+        // Calculate diagonal element
+        double sum = 0;
+        for (int k = 0; k < i; ++k) {
+            sum += ltI[k] * ltI[k];
+        }
+        ltI[i] = ltI[i] - sum;
+        
+        if (ltI[i] <= absolutePositivityThreshold) {
+            throw new NotPositiveDefiniteMatrixException();
+        }
         
         ltI[i] = Math.sqrt(ltI[i]);
-            final double inverse = 1.0 / ltI[i];
         
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
+        // Update the rest of the row
+        for (int j = i + 1; j < order; ++j) {
+            double sum2 = 0;
+            for (int k = 0; k < i; ++k) {
+                sum2 += lTData[j][k] * ltI[k];
             }
+            lTData[j][i] = (lTData[j][i] - sum2) / ltI[i]; 
         }
-
     }
-
 }
\ No newline at end of file
