diff --git a/tmp/eaa91c78-f55d-425d-8781-e37dcbf2babc_buggy.java b/tmp/6a1bfe44-34fd-4c32-b0db-37bbfea1dbd7_fixed.java
index ec6c9ee..1e37601 100644
--- a/tmp/eaa91c78-f55d-425d-8781-e37dcbf2babc_buggy.java
+++ b/tmp/6a1bfe44-34fd-4c32-b0db-37bbfea1dbd7_fixed.java
@@ -1,21 +1,43 @@
 //-----------------------------------------------------------------------
 private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
     if (notPrinter && notParser) {
         throw new IllegalStateException("Builder has created neither a printer nor a parser");
     }
     int size = elementPairs.size();
     if (size >= 2 && elementPairs.get(0) instanceof Separator) {
         Separator sep = (Separator) elementPairs.get(0);
-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
+        if (size == 2) {
+            // There's only a separator and one more element
+            Object obj = elementPairs.get(1);
+            PeriodFormatter f = null;
+            if (obj instanceof PeriodFormatter) {
+                f = (PeriodFormatter) obj;
+            } else if (obj instanceof PeriodPrinter || obj instanceof PeriodParser) {
+                Object[] comp = createComposite(elementPairs.subList(1, size));
+                if (notPrinter) {
+                    f = new PeriodFormatter(null, (PeriodParser) comp[1]);
+                } else if (notParser) {
+                    f = new PeriodFormatter((PeriodPrinter) comp[0], null);
+                } else {
+                    f = new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
+                }
+            } else {
+                throw new IllegalStateException("Unexpected separator");
+            }
             sep = sep.finish(f.getPrinter(), f.getParser());
             return new PeriodFormatter(sep, sep);
+        } else {
+            PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);
+            sep = sep.finish(f.getPrinter(), f.getParser());
+            return new PeriodFormatter(sep, sep);
+        }
     }
     Object[] comp = createComposite(elementPairs);
     if (notPrinter) {
         return new PeriodFormatter(null, (PeriodParser) comp[1]);
     } else if (notParser) {
         return new PeriodFormatter((PeriodPrinter) comp[0], null);
     } else {
         return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
     }
 }
\ No newline at end of file
