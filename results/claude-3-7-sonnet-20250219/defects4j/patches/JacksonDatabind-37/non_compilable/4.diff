diff --git a/tmp/59a0f214-8c7d-4937-b8fb-53a161f8cb03_buggy.java b/tmp/171268e2-69c1-449c-ba8c-b1040b8ea7e6_fixed.java
index e5ad041..19bfb15 100644
--- a/tmp/59a0f214-8c7d-4937-b8fb-53a161f8cb03_buggy.java
+++ b/tmp/171268e2-69c1-449c-ba8c-b1040b8ea7e6_fixed.java
@@ -1,19 +1,18 @@
 @Override
 protected JavaType _narrow(Class<?> subclass)
 {
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
-        if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
+    // Instead of directly creating a new SimpleType, we should use proper construction
+    // to ensure all type information is correctly resolved and maintained
+    JavaType result = TypeFactory.defaultInstance().constructSpecializedType(this, subclass);
+    // Preserve handlers from original type
+    if (_valueHandler != null || _typeHandler != null) {
+        result = result.withHandlers(this);
     }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
-                _valueHandler, _typeHandler, _asStatic);
+    if (_asStatic) {
+        result = result.withStaticTyping();
+    }
+    return result;
 }
\ No newline at end of file
