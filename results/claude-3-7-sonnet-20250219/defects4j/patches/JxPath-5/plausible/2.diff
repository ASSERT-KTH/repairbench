diff --git a/tmp/8c2ba82f-67b0-4f9a-82d1-7589696d2d38_buggy.java b/tmp/58365d1b-90e1-4229-9818-2636aeb558ef_fixed.java
index 5f8ac1a..47209b9 100644
--- a/tmp/8c2ba82f-67b0-4f9a-82d1-7589696d2d38_buggy.java
+++ b/tmp/58365d1b-90e1-4229-9818-2636aeb558ef_fixed.java
@@ -1,34 +1,48 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    if (p1 == null && p2 == null) {
+        return 0;
+    }
+    
+    // If pointers are from different hierarchies/trees
+    if (depth1 == 1 && depth2 == 1 && p1 != null && p2 != null && 
+        !p1.equals(p2) && p1.getClass() != p2.getClass()) {
+        // Compare based on types - arbitrary but consistent ordering
+        return p1.getClass().getName().compareTo(p2.getClass().getName());
+    }
+
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
 
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
 
     if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        // Instead of throwing exception, establish an ordering between different trees
+        if (p1 == null) {
+            return -1;
         }
+        if (p2 == null) {
+            return 1;
+        }
+        return p1.toString().compareTo(p2.toString());
+    }
+    
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
