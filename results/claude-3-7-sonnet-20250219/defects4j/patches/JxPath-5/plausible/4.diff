diff --git a/tmp/f1d383d0-c8f5-4b20-ae9e-f97d524b35da_buggy.java b/tmp/a88fd1c9-08e8-428a-98d1-f6fd8824efae_fixed.java
index 5f8ac1a..68444d2 100644
--- a/tmp/f1d383d0-c8f5-4b20-ae9e-f97d524b35da_buggy.java
+++ b/tmp/a88fd1c9-08e8-428a-98d1-f6fd8824efae_fixed.java
@@ -1,34 +1,56 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    if (p1 == null && p2 == null) {
+        return 0;
+    }
+    
+    // Handle comparison between pointers from different trees
+    if (depth1 == 1 && depth2 == 1 && 
+        ((p1 != null && p2 != null && !p1.getClass().equals(p2.getClass())) || 
+         (p1 != null && p1.isAttribute()) || 
+         (p2 != null && p2.isAttribute()))) {
+        // Compare based on pointer type and values for different trees
+        if (p1 != null && p2 != null) {
+            // First compare by type name for different pointer types
+            int result = p1.getClass().getName().compareTo(p2.getClass().getName());
+            if (result != 0) {
+                return result;
+            }
+            // If same type, compare by their string values
+            return p1.toString().compareTo(p2.toString());
+        }
+        return p1 == null ? -1 : 1;
+    }
+    
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
 
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
 
     if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        // Instead of throwing exception, compare the pointers directly
+        if (p1 != null && p2 != null) {
+            return p1.toString().compareTo(p2.toString());
         }
+        return p1 == null ? -1 : 1;
+    }
+    
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
