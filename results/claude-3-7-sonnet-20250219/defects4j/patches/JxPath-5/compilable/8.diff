diff --git a/tmp/cbac307e-24f4-44ce-b1aa-0c5b3457512c_buggy.java b/tmp/fe788c2d-d7e0-41d3-9ec3-19775a4a62e4_fixed.java
index 5f8ac1a..0dd2c48 100644
--- a/tmp/cbac307e-24f4-44ce-b1aa-0c5b3457512c_buggy.java
+++ b/tmp/fe788c2d-d7e0-41d3-9ec3-19775a4a62e4_fixed.java
@@ -1,34 +1,54 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    // Handle null cases first
+    if (p1 == null && p2 == null) {
+        return 0;
+    }
+    
+    // If pointers are of different types (e.g., one is a variable, one is a node)
+    // We need a consistent ordering for these cases
+    if (p1 != null && p2 != null && !p1.getClass().equals(p2.getClass())) {
+        // Establish an arbitrary but consistent ordering based on class name
+        return p1.getClass().getName().compareTo(p2.getClass().getName());
+    }
+    
+    // Original recursion for different depths
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
 
+    // Handle equal pointers
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
 
-        if (depth1 == 1) {
+    // Only throw exception if we're at depth 1 and both pointers are in the same tree type
+    if (depth1 == 1 && p1 != null && p2 != null && p1.getClass().equals(p2.getClass())) {
         throw new JXPathException(
                 "Cannot compare pointers that do not belong to the same tree: '"
                         + p1 + "' and '" + p2 + "'");
     }
+    
+    // Continue with original comparison logic
+    if (depth1 > 1) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
             return r;
         }
         
         return p1.parent.compareChildNodePointers(p1, p2);
     }
+    
+    // For pointers at depth 1 that don't match but need comparison
+    // Establish an ordering based on string representation
+    return p1.toString().compareTo(p2.toString());
+}
\ No newline at end of file
