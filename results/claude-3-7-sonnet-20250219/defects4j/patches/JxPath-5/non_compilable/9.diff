diff --git a/tmp/1858e181-4862-493b-be4a-54ea0057bc0b_buggy.java b/tmp/3aed3484-91ef-4edb-90b0-21b0220d1882_fixed.java
index 5f8ac1a..b8e5d8f 100644
--- a/tmp/1858e181-4862-493b-be4a-54ea0057bc0b_buggy.java
+++ b/tmp/3aed3484-91ef-4edb-90b0-21b0220d1882_fixed.java
@@ -1,34 +1,45 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    if (p1 == null && p2 == null) {
+        return 0;
+    }
+    
+    if (p1 != null && p1.equals(p2)) {
+        return 0;
+    }
+    
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
+    
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
     
-        if (p1 != null && p1.equals(p2)) {
-            return 0;
+    // At this point depth1 == depth2
+    
+    if (depth1 == 0) {
+        // Both pointers are at the root, but they're not equal (checked above)
+        // Order them by their string representation as a last resort
+        return p1.toString().compareTo(p2.toString());
     }
     
-        if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+    // Check if pointers belong to different trees
+    if (p1.getRoot().getClass() != p2.getRoot().getClass()) {
+        // Different root types mean different trees - compare by string representation
+        return p1.toString().compareTo(p2.toString());
     }
+    
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
     
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
