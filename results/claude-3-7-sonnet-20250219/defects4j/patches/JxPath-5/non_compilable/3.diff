diff --git a/tmp/03aa3636-2d05-4242-b648-5a48857fbba9_buggy.java b/tmp/8a20a6cb-a213-4eca-9fd4-0451800b139a_fixed.java
index 5f8ac1a..4b06241 100644
--- a/tmp/03aa3636-2d05-4242-b648-5a48857fbba9_buggy.java
+++ b/tmp/8a20a6cb-a213-4eca-9fd4-0451800b139a_fixed.java
@@ -1,34 +1,54 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    if (p1 == null && p2 == null) {
+        return 0;
+    }
+    
+    // Handle comparison of pointers from different trees
+    if (depth1 == 1 && depth2 == 1 && !p1.equals(p2)) {
+        // When comparing root pointers that are not equal,
+        // use a consistent ordering based on pointer types or other properties
+        if (p1.getName() == null) {
+            return p2.getName() == null ? 0 : -1;
+        }
+        if (p2.getName() == null) {
+            return 1;
+        }
+        return p1.getName().compareTo(p2.getName());
+    }
+    
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
 
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
 
     if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        // Instead of throwing exception, compare the root pointers in some way
+        if (p1.getClass() != p2.getClass()) {
+            return p1.getClass().getName().compareTo(p2.getClass().getName());
         }
+        if (p1.hashCode() != p2.hashCode()) {
+            return p1.hashCode() < p2.hashCode() ? -1 : 1;
+        }
+        return 0; // As a last resort, consider them equal
+    }
+    
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
