diff --git a/tmp/80a2aa30-e951-46eb-9b4e-cabe64f610fa_buggy.java b/tmp/a78f9c96-e9e1-419a-9a85-1d6130184905_fixed.java
index c4b260c..845d1fd 100644
--- a/tmp/80a2aa30-e951-46eb-9b4e-cabe64f610fa_buggy.java
+++ b/tmp/a78f9c96-e9e1-419a-9a85-1d6130184905_fixed.java
@@ -1,51 +1,78 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    
+    // Check for BOM first - UTF-8 BOM indicator takes precedence over everything else
+    byteData.mark();
+    ByteBuffer firstBytes = byteData.duplicate();
+    firstBytes.limit(Math.min(firstBytes.remaining(), 4));
+    boolean hasBom = false;
+    String detectedCharset = null;
+    
+    if (firstBytes.remaining() >= 3) {
+        int b1 = firstBytes.get() & 0xFF;
+        int b2 = firstBytes.get() & 0xFF;
+        int b3 = firstBytes.get() & 0xFF;
+        
+        if (b1 == 0xEF && b2 == 0xBB && b3 == 0xBF) {
+            // UTF-8 BOM detected
+            hasBom = true;
+            detectedCharset = "UTF-8";
+            byteData.position(3); // Skip the BOM
+        }
+    }
+    byteData.reset();
+    
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        docData = Charset.forName(defaultCharset).decode(byteData.duplicate()).toString();
+        if (hasBom) {
+            docData = docData.substring(1);
+        }
+        
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
             } else {
                 foundCharset = meta.attr("charset");
             }
 
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
+                if (hasBom && "UTF-8".equals(charsetName))
+                    byteData.position(3); // Skip BOM for UTF-8
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
+            } else if (hasBom) {
+                charsetName = "UTF-8";
             }
+        } else if (hasBom) {
+            charsetName = "UTF-8";
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        if (hasBom && "UTF-8".equals(charsetName))
+            byteData.position(3); // Skip BOM for UTF-8
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-        }
+    
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
     }
     return doc;
 }
\ No newline at end of file
