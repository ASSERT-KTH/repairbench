diff --git a/tmp/696b0a17-a026-4b62-8bb2-32c3f2e6043c_buggy.java b/tmp/ae3944d0-9ede-48e9-914e-27e34e8080ee_fixed.java
index 72a422c..9a59b4f 100644
--- a/tmp/696b0a17-a026-4b62-8bb2-32c3f2e6043c_buggy.java
+++ b/tmp/ae3944d0-9ede-48e9-914e-27e34e8080ee_fixed.java
@@ -1,51 +1,63 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+    if(index < seqEnd - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if(start < seqEnd) {
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
-
                 // Check there's more than just an x after the &#
             }
+        } else {
+            return 0;
+        }
 
         int end = start;
         // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        while(end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
 
+        if(end == start) {
+            return 0;
+        }
+
+        // Adjust end for missing semicolon at the end of the string
+        if(end == seqEnd && input.charAt(end - 1) != ';') {
+            // No terminating semicolon found, still valid
+        } else if(end < seqEnd && input.charAt(end) == ';') {
+            end++; // Include the semicolon in the count when returning
+        }
+
         int entityValue;
         try {
             if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                entityValue = Integer.parseInt(input.subSequence(start, end == seqEnd ? end : end - 1).toString(), 16);
             } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                entityValue = Integer.parseInt(input.subSequence(start, end == seqEnd ? end : end - 1).toString(), 10);
             }
         } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            System.err.println("FAIL: " + input.subSequence(start, end == seqEnd ? end : end - 1) + "[" + start +"]["+ (end == seqEnd ? end : end - 1) +"]");
             return 0;
         }
 
         if(entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        return end - index;
     }
     return 0;
 }
\ No newline at end of file
