diff --git a/tmp/462168e0-2355-4330-a1eb-ec6f270d0056_buggy.java b/tmp/690cd7b9-548b-443e-99f0-0fc596d255bb_fixed.java
index 72a422c..ec3bf41 100644
--- a/tmp/462168e0-2355-4330-a1eb-ec6f270d0056_buggy.java
+++ b/tmp/690cd7b9-548b-443e-99f0-0fc596d255bb_fixed.java
@@ -1,51 +1,59 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+    if(index + 1 < seqEnd && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if(start >= seqEnd) {
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
             
-                // Check there's more than just an x after the &#
+            // If only '&#x' or '&#X' is left, return 0
+            if(start >= seqEnd) {
+                return 0;
+            }
         }
 
         int end = start;
         // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        while(end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
 
+        // Handle the case where we reached the end without finding a semicolon
+        boolean semiFound = (end < seqEnd);
+
         int entityValue;
         try {
             if(isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch(NumberFormatException nfe) {
             System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
 
         if(entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        return (end - index) + (semiFound ? 1 : 0);
     }
     return 0;
 }
\ No newline at end of file
