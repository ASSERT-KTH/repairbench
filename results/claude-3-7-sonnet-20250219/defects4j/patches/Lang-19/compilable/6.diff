diff --git a/tmp/c1d9f13a-925d-49ca-afc8-e590733804d1_buggy.java b/tmp/61882aaf-d8a8-46c9-9170-6bd9632dbb29_fixed.java
index 72a422c..fc145e1 100644
--- a/tmp/c1d9f13a-925d-49ca-afc8-e590733804d1_buggy.java
+++ b/tmp/61882aaf-d8a8-46c9-9170-6bd9632dbb29_fixed.java
@@ -1,51 +1,55 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
+    
     // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+    if (index < seqEnd - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
         
+        if (start < seqEnd) {  // Check if there's a character after &#
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
-
-                // Check there's more than just an x after the &#
             }
             
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            // Look for the ending semicolon, but don't go past the end of the string
+            while (end < seqEnd && input.charAt(end) != ';') {
                 end++;
             }
             
+            // If we have at least one digit to parse
+            if (end > start) {
                 int entityValue;
                 try {
                     if (isHex) {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                     } else {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                     }
                 } catch (NumberFormatException nfe) {
                     System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "][" + end + "]");
                     return 0;
                 }
                 
                 if (entityValue > 0xFFFF) {
                     char[] chrs = Character.toChars(entityValue);
                     out.write(chrs[0]);
                     out.write(chrs[1]);
                 } else {
                     out.write(entityValue);
                 }
                 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                // Return the number of characters consumed
+                // Add 1 only if we found a semicolon
+                return 2 + (end - start) + (isHex ? 1 : 0) + (end < seqEnd ? 1 : 0);
+            }
+        }
     }
     return 0;
 }
\ No newline at end of file
