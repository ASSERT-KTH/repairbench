diff --git a/tmp/52a91934-6fcd-4d3e-b146-bc31e04a9174_buggy.java b/tmp/1fe3ffa9-c82c-490f-83ce-08b4430cc2e3_fixed.java
index 72a422c..a591d48 100644
--- a/tmp/52a91934-6fcd-4d3e-b146-bc31e04a9174_buggy.java
+++ b/tmp/1fe3ffa9-c82c-490f-83ce-08b4430cc2e3_fixed.java
@@ -1,51 +1,53 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+    if(index < seqEnd - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if(start < seqEnd) {
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
-
                 // Check there's more than just an x after the &#
             }
+        }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        // Find the end of the entity or the end of the input
+        while(end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
 
+        // If we're at the end of the input without a semicolon, process anyway
+        if(end > start) {
             int entityValue;
             try {
                 if(isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch(NumberFormatException nfe) {
                 System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
                 return 0;
             }
 
             if(entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            return end - index + (end < seqEnd ? 1 : 0); // +1 for the semicolon if it exists
+        }
     }
     return 0;
 }
\ No newline at end of file
