diff --git a/tmp/0e85f34e-8d98-4658-93ba-8ca856c5945e_buggy.java b/tmp/84a3b2cb-27de-4575-b313-79b6a25f9c90_fixed.java
index 72a422c..a26243c 100644
--- a/tmp/0e85f34e-8d98-4658-93ba-8ca856c5945e_buggy.java
+++ b/tmp/84a3b2cb-27de-4575-b313-79b6a25f9c90_fixed.java
@@ -1,51 +1,67 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+    
+    // Check if there's enough characters for a potential numeric entity
+    if (index >= seqEnd - 1) {
+        return 0;
+    }
+    
+    // First check for '&#'
+    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
         
+        // Make sure we're not at the end of the input
+        if (start < seqEnd) {
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
+            }
+        }
         
-                // Check there's more than just an x after the &#
+        // Check if we still have characters to process
+        if (start >= seqEnd) {
+            return 0;
         }
         
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        // Find the end of the entity (either semicolon or end of input)
+        while (end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
         
+        // If we didn't find anything to parse, return 0
+        if (end == start) {
+            return 0;
+        }
+        
         int entityValue;
         try {
             if (isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch (NumberFormatException nfe) {
             System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
         
         if (entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
         
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // Return the length, adding 1 for semi-colon only if it was present
+        return 2 + (end - start) + (isHex ? 1 : 0) + (end < seqEnd ? 1 : 0);
     }
     return 0;
 }
\ No newline at end of file
