diff --git a/tmp/58648ed1-d911-4ab0-adf5-1cf3f1f5cc3b_buggy.java b/tmp/be00c816-581b-483f-a8ac-b91fe16fd194_fixed.java
index 6e05e4b..fbc74d6 100644
--- a/tmp/58648ed1-d911-4ab0-adf5-1cf3f1f5cc3b_buggy.java
+++ b/tmp/be00c816-581b-483f-a8ac-b91fe16fd194_fixed.java
@@ -1,51 +1,54 @@
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
       Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
       if (name == null) {
+        // Only unnamed function expressions are allowed, not statements.
+        // This error should be caught by the parser, not here.
         name = new Name();
         name.setIdentifier("");
-        isUnnamedFunction = true;
       }
       Node node = newNode(Token.FUNCTION);
       Node newName = transform(name);
-      if (isUnnamedFunction) {
+      
+      // Only set line/column info if this is an actual empty name node
+      // from an unnamed function expression (not statement)
+      if (name.getIdentifier().isEmpty()) {
         // Old Rhino tagged the empty name node with the line number of the
         // declaration.
         newName.setLineno(functionNode.getLineno());
         // TODO(bowdidge) Mark line number of paren correctly.
         // Same problem as below - the left paren might not be on the
         // same line as the function keyword.
         int lpColumn = functionNode.getAbsolutePosition() +
             functionNode.getLp();
         newName.setCharno(position2charno(lpColumn));
       }
 
       node.addChildToBack(newName);
       Node lp = newNode(Token.LP);
       // The left paren's complicated because it's not represented by an
       // AstNode, so there's nothing that has the actual line number that it
       // appeared on.  We know the paren has to appear on the same line as the
       // function name (or else a semicolon will be inserted.)  If there's no
       // function name, assume the paren was on the same line as the function.
       // TODO(bowdidge): Mark line number of paren correctly.
       Name fnName = functionNode.getFunctionName();
       if (fnName != null) {
         lp.setLineno(fnName.getLineno());
       } else {
         lp.setLineno(functionNode.getLineno());
       }
       int lparenCharno = functionNode.getLp() +
           functionNode.getAbsolutePosition();
 
       lp.setCharno(position2charno(lparenCharno));
       for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
       }
       node.addChildToBack(lp);
 
       Node bodyNode = transform(functionNode.getBody());
       parseDirectives(bodyNode);
       node.addChildToBack(bodyNode);
       return node;
     }
\ No newline at end of file
