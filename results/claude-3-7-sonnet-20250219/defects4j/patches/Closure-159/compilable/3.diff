diff --git a/tmp/331225de-db7f-400b-b52c-22f5a6f1156d_buggy.java b/tmp/6c8c1f3c-e2d2-4f6a-93c9-0fe6252ee839_fixed.java
index de9af32..a225580 100644
--- a/tmp/331225de-db7f-400b-b52c-22f5a6f1156d_buggy.java
+++ b/tmp/6c8c1f3c-e2d2-4f6a-93c9-0fe6252ee839_fixed.java
@@ -1,18 +1,25 @@
 /**
  * @see #findCalledFunctions(Node)
  */
 private void findCalledFunctions(
     Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
     Node child = node.getFirstChild();
     if (child.getType() == Token.NAME) {
       changed.add(child.getString());
+    } else if (child.getType() == Token.GETPROP && 
+              (child.getString().equals("call") || child.getString().equals("apply"))) {
+      // Handle cases like "initialize.call(...)" or "initialize.apply(...)"
+      Node callee = child.getFirstChild();
+      if (callee.getType() == Token.NAME) {
+        changed.add(callee.getString());
+      }
     }
   }
 
   for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
     findCalledFunctions(c, changed);
   }
 }
\ No newline at end of file
