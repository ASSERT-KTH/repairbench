diff --git a/tmp/9151d629-4cba-45e5-bc18-95b8a25f5dbe_buggy.java b/tmp/ecb8137f-0bae-4a85-bde8-b987f677726b_fixed.java
index 7e43c1c..74c55e1 100644
--- a/tmp/9151d629-4cba-45e5-bc18-95b8a25f5dbe_buggy.java
+++ b/tmp/ecb8137f-0bae-4a85-bde8-b987f677726b_fixed.java
@@ -1,19 +1,38 @@
   /**
    * Visits a NEW node.
    */
   private void visitNew(NodeTraversal t, Node n) {
     Node constructor = n.getFirstChild();
     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
       FunctionType fnType = type.toMaybeFunctionType();
       if (fnType != null) {
         visitParameterList(t, n, fnType);
         ensureTyped(t, n, fnType.getInstanceType());
       } else {
         ensureTyped(t, n);
       }
+    } else if (type.isUnionType()) {
+      // Handle union types that might contain constructor functions
+      JSType restrictedType = type.restrictByNotNullOrUndefined();
+      if (restrictedType.isUnionType()) {
+        ensureTyped(t, n);
+      } else if (restrictedType.isConstructor() || 
+                 restrictedType.isEmptyType() || 
+                 restrictedType.isUnknownType()) {
+        FunctionType fnType = restrictedType.toMaybeFunctionType();
+        if (fnType != null) {
+          visitParameterList(t, n, fnType);
+          ensureTyped(t, n, fnType.getInstanceType());
+        } else {
+          ensureTyped(t, n);
+        }
+      } else {
+        report(t, n, NOT_A_CONSTRUCTOR);
+        ensureTyped(t, n);
+      }
     } else {
       report(t, n, NOT_A_CONSTRUCTOR);
       ensureTyped(t, n);
     }
   }
\ No newline at end of file
