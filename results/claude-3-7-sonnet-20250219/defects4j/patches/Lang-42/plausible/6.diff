diff --git a/tmp/3d38a015-c4e2-4921-b1d5-8c0b299a62bb_buggy.java b/tmp/8090b9c0-81e9-49eb-a1da-4bbbcec493af_fixed.java
index 822447c..8075ba6 100644
--- a/tmp/3d38a015-c4e2-4921-b1d5-8c0b299a62bb_buggy.java
+++ b/tmp/8090b9c0-81e9-49eb-a1da-4bbbcec493af_fixed.java
@@ -1,37 +1,50 @@
 /**
  * <p>
  * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
  * passed.
  * </p>
  * 
  * @param writer
  *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
  * @param str
  *            The <code>String</code> to escape. Assumed to be a non-null value.
  * @throws IOException
  *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
  *             methods.
  * 
  * @see #escape(String)
  * @see Writer
  */
 public void escape(Writer writer, String str) throws IOException {
     int len = str.length();
     for (int i = 0; i < len; i++) {
         char c = str.charAt(i);
         String entityName = this.entityName(c);
         if (entityName == null) {
             if (c > 0x7F) {
+                // Check if this is a surrogate pair (Unicode character beyond BMP)
+                if (c >= 0xD800 && c <= 0xDBFF && i + 1 < len) {
+                    char low = str.charAt(i + 1);
+                    if (low >= 0xDC00 && low <= 0xDFFF) {
+                        // This is a surrogate pair, calculate the true codepoint
+                        int codePoint = ((c - 0xD800) << 10) + (low - 0xDC00) + 0x10000;
+                        writer.write("&#");
+                        writer.write(Integer.toString(codePoint, 10));
+                        writer.write(';');
+                        i++; // Skip the low surrogate as we've already processed it
+                        continue;
+                    }
+                }
                 writer.write("&#");
                 writer.write(Integer.toString(c, 10));
                 writer.write(';');
             } else {
                 writer.write(c);
             }
         } else {
             writer.write('&');
             writer.write(entityName);
             writer.write(';');
         }
     }
 }
\ No newline at end of file
