diff --git a/tmp/b317a57a-5ab1-4157-a541-88ce0c9d4520_buggy.java b/tmp/bf80479b-e0a6-404e-b46a-cdb12f90ce3e_fixed.java
index 822447c..7463d78 100644
--- a/tmp/b317a57a-5ab1-4157-a541-88ce0c9d4520_buggy.java
+++ b/tmp/bf80479b-e0a6-404e-b46a-cdb12f90ce3e_fixed.java
@@ -1,37 +1,51 @@
 /**
  * <p>
  * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
  * passed.
  * </p>
  * 
  * @param writer
  *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
  * @param str
  *            The <code>String</code> to escape. Assumed to be a non-null value.
  * @throws IOException
  *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
  *             methods.
  * 
  * @see #escape(String)
  * @see Writer
  */
 public void escape(Writer writer, String str) throws IOException {
     int len = str.length();
     for (int i = 0; i < len; i++) {
         char c = str.charAt(i);
         String entityName = this.entityName(c);
         if (entityName == null) {
             if (c > 0x7F) {
+                // Check if this is a surrogate pair (high Unicode code point)
+                if (c >= 0xD800 && c <= 0xDBFF && i + 1 < len) {
+                    // This is a high surrogate, check if next char is the low surrogate
+                    char low = str.charAt(i + 1);
+                    if (low >= 0xDC00 && low <= 0xDFFF) {
+                        // Combine the surrogate pair to get the actual code point
+                        int codePoint = ((c - 0xD800) << 10) + (low - 0xDC00) + 0x10000;
+                        writer.write("&#");
+                        writer.write(Integer.toString(codePoint, 10));
+                        writer.write(';');
+                        i++; // Skip the low surrogate in the next iteration
+                        continue;
+                    }
+                }
                 writer.write("&#");
                 writer.write(Integer.toString(c, 10));
                 writer.write(';');
             } else {
                 writer.write(c);
             }
         } else {
             writer.write('&');
             writer.write(entityName);
             writer.write(';');
         }
     }
 }
\ No newline at end of file
