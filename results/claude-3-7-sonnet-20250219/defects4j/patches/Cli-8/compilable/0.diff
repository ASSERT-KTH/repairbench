diff --git a/tmp/42a427aa-749c-40ce-87c1-8ecb91c53e90_buggy.java b/tmp/19d44fad-16f7-4408-a4e4-7b5794dbc59d_fixed.java
index 8e93a5e..4f8d484 100644
--- a/tmp/42a427aa-749c-40ce-87c1-8ecb91c53e90_buggy.java
+++ b/tmp/19d44fad-16f7-4408-a4e4-7b5794dbc59d_fixed.java
@@ -1,43 +1,53 @@
 /**
  * <p>Render the specified text and return the rendered Options
  * in a StringBuffer.</p>
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
+    String[] lines = text.split("\n");
+    
+    for (int i = 0; i < lines.length; i++) {
+        String line = lines[i];
+        renderWrappedTextLine(sb, width, nextLineTabStop, line);
+        
+        if (i < lines.length - 1) {
+            sb.append(defaultNewLine);
+        }
+    }
+    
+    return sb;
+}
+
+private void renderWrappedTextLine(StringBuffer sb, int width, int nextLineTabStop, String text) {
     int pos = findWrapPos(text, width, 0);
 
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
-            return sb;
+        return;
     }
+    
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // all following lines must be padded with nextLineTabStop space characters
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
+    while (true) {
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+        pos = findWrapPos(text, width, 0);
 
-            if (pos == -1)
-            {
+        if (pos == -1) {
             sb.append(text);
-
-                return sb;
+            return;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
