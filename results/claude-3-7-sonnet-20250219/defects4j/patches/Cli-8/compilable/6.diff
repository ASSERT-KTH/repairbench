diff --git a/tmp/58da8469-3709-4ffe-a68a-f3474c2e284f_buggy.java b/tmp/dbdc344a-f59b-471a-bdce-93d3d0de5f74_fixed.java
index 8e93a5e..36e53c8 100644
--- a/tmp/58da8469-3709-4ffe-a68a-f3474c2e284f_buggy.java
+++ b/tmp/dbdc344a-f59b-471a-bdce-93d3d0de5f74_fixed.java
@@ -1,43 +1,56 @@
 /**
  * <p>Render the specified text and return the rendered Options
  * in a StringBuffer.</p>
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
+    String[] lines = text.split("\n");
     
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
+    for (int i = 0; i < lines.length; i++) {
+        String line = lines[i];
+        
+        if (i > 0) {
+            sb.append(defaultNewLine);
+        }
+        
+        renderWrappedTextLine(sb, width, nextLineTabStop, line);
+    }
     
     return sb;
 }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+private void renderWrappedTextLine(StringBuffer sb, int width, 
+                                  int nextLineTabStop, String line)
+{
+    int pos = findWrapPos(line, width, 0);
+
+    if (pos == -1) {
+        sb.append(rtrim(line));
+        return;
+    }
+    
+    sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);
+
+    // all following lines must be padded with nextLineTabStop space characters
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+    while (true) {
+        line = padding + line.substring(pos).trim();
+        pos = findWrapPos(line, width, 0);
 
-            if (pos == -1)
-            {
-                sb.append(text);
-
-                return sb;
+        if (pos == -1) {
+            sb.append(line);
+            return;
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
