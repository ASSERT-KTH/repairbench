diff --git a/tmp/2fa6dade-4585-4f8e-82e4-9ce51ab8c0ae_buggy.java b/tmp/4e49fc81-7e81-4169-af8d-a046525a7d7b_fixed.java
index 63641d0..6fdd19a 100644
--- a/tmp/2fa6dade-4585-4f8e-82e4-9ce51ab8c0ae_buggy.java
+++ b/tmp/4e49fc81-7e81-4169-af8d-a046525a7d7b_fixed.java
@@ -1,33 +1,35 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
-
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+    JSType replacementType = fnType.visit(replacer);
+    FunctionType replacementFnType = replacementType.toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
-    n.setJSType(replacementFnType.getReturnType());
+    
+    // Set the call node type to the visited return type
+    JSType returnType = replacementFnType.getReturnType();
+    n.setJSType(returnType);
 
     return replacer.madeChanges;
   }
\ No newline at end of file
