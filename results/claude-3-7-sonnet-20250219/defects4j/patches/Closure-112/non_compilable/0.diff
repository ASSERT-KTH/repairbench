diff --git a/tmp/b8a120f7-cc7a-4a40-abe1-7b01d445d603_buggy.java b/tmp/b43331bd-b74f-4692-8c0d-d5e04ea2bb43_fixed.java
index 63641d0..67aecc9 100644
--- a/tmp/b8a120f7-cc7a-4a40-abe1-7b01d445d603_buggy.java
+++ b/tmp/b43331bd-b74f-4692-8c0d-d5e04ea2bb43_fixed.java
@@ -1,33 +1,42 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // We don't want to replace all template types, only the ones declared by
+    // the function itself, not those declared by its class.
+    // Filter the inferred template types to only include the ones from the keys list.
+    Map<TemplateType, JSType> filteredInferred = new HashMap<>();
+    for (TemplateType key : keys) {
+      if (inferred.containsKey(key)) {
+        filteredInferred.put(key, inferred.get(key));
+      }
+    }
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+        registry, filteredInferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
