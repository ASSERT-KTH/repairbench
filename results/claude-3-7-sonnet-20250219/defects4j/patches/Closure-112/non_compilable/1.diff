diff --git a/tmp/37fd9a07-86d9-493b-8b9c-aba87aad87ee_buggy.java b/tmp/aea78c85-44f0-43e4-98cb-15161de449cd_fixed.java
index 63641d0..c86217d 100644
--- a/tmp/37fd9a07-86d9-493b-8b9c-aba87aad87ee_buggy.java
+++ b/tmp/aea78c85-44f0-43e4-98cb-15161de449cd_fixed.java
@@ -1,33 +1,39 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
-
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
+    // Only update the type of the call target if it's not a member function.
+    // This prevents us from incorrectly updating method calls where the template type
+    // on the method may be different from the template type on the class.
+    if (!NodeUtil.isMemberFunctionDef(callTarget) && 
+        !NodeUtil.isGetProp(callTarget)) {
       callTarget.setJSType(replacementFnType);
+    }
+    
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
