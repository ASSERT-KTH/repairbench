diff --git a/tmp/3a808e0c-fc8c-4733-83fe-6c4b32edfbc3_buggy.java b/tmp/c75f79e5-9dd9-44f9-8577-d5e3c4c5bc19_fixed.java
index a7d0787..61e35fc 100644
--- a/tmp/3a808e0c-fc8c-4733-83fe-6c4b32edfbc3_buggy.java
+++ b/tmp/c75f79e5-9dd9-44f9-8577-d5e3c4c5bc19_fixed.java
@@ -1,54 +1,72 @@
 /**
  * Returns the <code>Object</code> of type <code>clazz</code>
  * with the value of <code>str</code>.
  *
  * @param str the command line value
  * @param clazz the type of argument
  * @return The instance of <code>clazz</code> initialised with
  * the value of <code>str</code>.
  * @throws ParseException if the value creation for the given class failed
  */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
     if (PatternOptionBuilder.STRING_VALUE == clazz)
     {
         return (T) str;
     }
     else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
     {
         return (T) createObject(str);
     }
     else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
     {
         return (T) createNumber(str);
     }
     else if (PatternOptionBuilder.DATE_VALUE == clazz)
     {
         return (T) createDate(str);
     }
     else if (PatternOptionBuilder.CLASS_VALUE == clazz)
     {
         return (T) createClass(str);
     }
     else if (PatternOptionBuilder.FILE_VALUE == clazz)
     {
         return (T) createFile(str);
     }
     else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
     {
         return (T) openFile(str);
     }
     else if (PatternOptionBuilder.FILES_VALUE == clazz)
     {
         return (T) createFiles(str);
     }
     else if (PatternOptionBuilder.URL_VALUE == clazz)
     {
         return (T) createURL(str);
     }
-        else
+    else if (Number.class.isAssignableFrom(clazz))
     {
-            return null;
+        try {
+            if (clazz == Integer.class) {
+                return (T) Integer.valueOf(str);
+            } else if (clazz == Long.class) {
+                return (T) Long.valueOf(str);
+            } else if (clazz == Double.class) {
+                return (T) Double.valueOf(str);
+            } else if (clazz == Float.class) {
+                return (T) Float.valueOf(str);
+            } else if (clazz == Short.class) {
+                return (T) Short.valueOf(str);
+            } else if (clazz == Byte.class) {
+                return (T) Byte.valueOf(str);
             }
+        } catch (NumberFormatException e) {
+            throw new ParseException("Unable to parse " + str + " as " + clazz.getName());
+        }
+    }
+    
+    throw new ParseException("Unable to handle " + clazz.getName() + " type.");
 }
\ No newline at end of file
