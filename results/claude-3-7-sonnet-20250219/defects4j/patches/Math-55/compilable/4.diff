diff --git a/tmp/b731217a-4b6e-40b2-bf92-3f2af63a3c52_buggy.java b/tmp/4bb6b300-e493-4cb4-b477-32dab196b996_fixed.java
index 1478ee1..a26193f 100644
--- a/tmp/b731217a-4b6e-40b2-bf92-3f2af63a3c52_buggy.java
+++ b/tmp/4bb6b300-e493-4cb4-b477-32dab196b996_fixed.java
@@ -1,24 +1,34 @@
 /** Compute the cross-product of two vectors.
  * @param v1 first vector
  * @param v2 second vector
  * @return the cross product v1 ^ v2 as a new Vector
  */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
-
-
     // rescale both vectors without losing precision,
     // to ensure their norm are the same order of magnitude
 
     // we reduce cancellation errors by preconditioning,
     // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
     // v3 without loss of precision. See Kahan lecture
     // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
     // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
     // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    final double x1 = v1.getX();
+    final double y1 = v1.getY();
+    final double z1 = v1.getZ();
+    final double x2 = v2.getX();
+    final double y2 = v2.getY();
+    final double z2 = v2.getZ();
     
+    final double v1Dotv2 = x1 * x2 + y1 * y2 + z1 * z2;
+    final double v2Dotv2 = x2 * x2 + y2 * y2 + z2 * z2;
+    final double rho = Math.rint(v1Dotv2 / v2Dotv2);
     
     // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    final double x3 = x1 - rho * x2;
+    final double y3 = y1 - rho * y2;
+    final double z3 = z1 - rho * z2;
     
+    return new Vector3D(y3 * z2 - z3 * y2, z3 * x2 - x3 * z2, x3 * y2 - y3 * x2);
 }
\ No newline at end of file
