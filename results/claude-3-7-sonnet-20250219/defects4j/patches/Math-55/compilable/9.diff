diff --git a/tmp/7b0fee93-94c0-4f25-8ce4-e6ffb5180512_buggy.java b/tmp/16e7500f-e74c-4126-b988-872bdbe524b6_fixed.java
index 1478ee1..a6fee10 100644
--- a/tmp/7b0fee93-94c0-4f25-8ce4-e6ffb5180512_buggy.java
+++ b/tmp/16e7500f-e74c-4126-b988-872bdbe524b6_fixed.java
@@ -1,24 +1,35 @@
 /** Compute the cross-product of two vectors.
  * @param v1 first vector
  * @param v2 second vector
  * @return the cross product v1 ^ v2 as a new Vector
  */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
-
-
     // rescale both vectors without losing precision,
     // to ensure their norm are the same order of magnitude
 
     // we reduce cancellation errors by preconditioning,
     // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
     // v3 without loss of precision. See Kahan lecture
     // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
     // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
     // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    final double v1x = v1.x;
+    final double v1y = v1.y;
+    final double v1z = v1.z;
+    final double v2x = v2.x;
+    final double v2y = v2.y;
+    final double v2z = v2.z;
     
+    final double v1Dotv2 = v1x * v2x + v1y * v2y + v1z * v2z;
+    final double v2Dotv2 = v2x * v2x + v2y * v2y + v2z * v2z;
+    final double rho     = (v2Dotv2 == 0) ? 0 : Math.floor(v1Dotv2 / v2Dotv2 * 256.0) / 256.0;
+    
+    // compute v3 = v1 - rho v2
+    final double v3x = v1x - rho * v2x;
+    final double v3y = v1y - rho * v2y;
+    final double v3z = v1z - rho * v2z;
 
     // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    return new Vector3D(v3y * v2z - v3z * v2y, v3z * v2x - v3x * v2z, v3x * v2y - v3y * v2x);
 }
\ No newline at end of file
