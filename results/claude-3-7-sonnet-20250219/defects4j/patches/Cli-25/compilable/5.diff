diff --git a/tmp/577408ee-240c-4ad3-83c1-aa4086aaf0b0_buggy.java b/tmp/3e139594-68b8-4b22-895a-ec6859388d87_fixed.java
index 875b31b..201335b 100644
--- a/tmp/577408ee-240c-4ad3-83c1-aa4086aaf0b0_buggy.java
+++ b/tmp/3e139594-68b8-4b22-895a-ec6859388d87_fixed.java
@@ -1,54 +1,52 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            nextLineTabStop = width - 1;
-        }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // all following lines must be padded with nextLineTabStop space characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         text = padding + text.substring(pos).trim();
+        
+        // If the text is longer than the width and would be broken at or before
+        // the start of the line, find a wrap position after the line start
+        if (text.length() > width && nextLineTabStop >= width)
+        {
+            pos = findWrapPos(text, width, nextLineTabStop);
+        }
+        else
+        {
             pos = findWrapPos(text, width, 0);
+        }
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
