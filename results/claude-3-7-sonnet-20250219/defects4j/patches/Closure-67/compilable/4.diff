diff --git a/tmp/2b131838-b40f-4f4e-b9d8-f4e482d55f41_buggy.java b/tmp/aff9d384-856c-4f5d-b1b8-9b105cdeceff_fixed.java
index 939f49b..dbac31d 100644
--- a/tmp/2b131838-b40f-4f4e-b9d8-f4e482d55f41_buggy.java
+++ b/tmp/aff9d384-856c-4f5d-b1b8-9b105cdeceff_fixed.java
@@ -1,21 +1,21 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)) {
     // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+    // Handle both GETPROP (dot notation) and GETELEM (bracket notation)
+    if (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM) {
+      Node firstChild = n.getFirstChild();
+      if (firstChild != null && 
+          (firstChild.getType() == Token.GETPROP || firstChild.getType() == Token.GETELEM)) {
+        Node child = firstChild.getFirstChild().getNext();
         
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+        if (child != null && 
+            ((child.getType() == Token.STRING && child.getString().equals("prototype")) ||
+             (child.getType() == Token.NAME && child.getString().equals("prototype")))) {
           return true;
         }
       }
     }
-
+  }
   return false;
 }
\ No newline at end of file
