diff --git a/tmp/eb1c3326-9fd5-4578-9b8b-57cb5738a1e3_buggy.java b/tmp/5ebbbda8-92f4-4f26-bd14-29f91f0cc5f0_fixed.java
index 939f49b..054fb71 100644
--- a/tmp/eb1c3326-9fd5-4578-9b8b-57cb5738a1e3_buggy.java
+++ b/tmp/5ebbbda8-92f4-4f26-bd14-29f91f0cc5f0_fixed.java
@@ -1,21 +1,32 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)) {
+    if (isPrototypeProperty(n)) {
+      return true;
+    }
+  }
+  return false;
+}
 
+private boolean isPrototypeProperty(Node n) {
+  if (n.getType() == Token.GETPROP) {
+    Node propObj = n.getFirstChild();
+    if (propObj.getType() == Token.GETPROP) {
+      Node child = propObj.getLastChild();
+      if (child.getType() == Token.STRING && 
+          child.getString().equals("prototype")) {
+        return true;
+      }
+    }
+  } else if (n.getType() == Token.GETELEM) {
+    Node propObj = n.getFirstChild();
+    if (propObj.getType() == Token.GETPROP) {
+      Node child = propObj.getLastChild();
       if (child.getType() == Token.STRING &&
           child.getString().equals("prototype")) {
         return true;
       }
     }
   }
-
   return false;
 }
\ No newline at end of file
