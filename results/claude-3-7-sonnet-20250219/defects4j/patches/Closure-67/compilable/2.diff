diff --git a/tmp/795ed513-b0fb-4881-a6ec-84830abf0a3e_buggy.java b/tmp/1015001b-c1d6-4c54-aa99-ef591a2f9362_fixed.java
index 939f49b..f8af6c8 100644
--- a/tmp/795ed513-b0fb-4881-a6ec-84830abf0a3e_buggy.java
+++ b/tmp/1015001b-c1d6-4c54-aa99-ef591a2f9362_fixed.java
@@ -1,21 +1,33 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)) {
+    // Check for a direct prototype property assign
+    if (n.getType() == Token.GETPROP) {
       // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+      boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;
 
       if (isChainedProperty) {
         Node child = n.getFirstChild().getFirstChild().getNext();
 
         if (child.getType() == Token.STRING &&
             child.getString().equals("prototype")) {
           return true;
         }
       }
     }
+    // Check for array notation: e.prototype['alias1']
+    else if (n.getType() == Token.GETELEM) {
+      Node firstChild = n.getFirstChild();
+      if (firstChild != null && firstChild.getType() == Token.GETPROP) {
+        Node propChild = firstChild.getFirstChild().getNext();
+        
+        if (propChild.getType() == Token.STRING &&
+            propChild.getString().equals("prototype")) {
+          return true;
+        }
+      }
+    }
+  }
 
   return false;
 }
\ No newline at end of file
