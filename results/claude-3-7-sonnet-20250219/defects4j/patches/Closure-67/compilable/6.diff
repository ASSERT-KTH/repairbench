diff --git a/tmp/002af68a-2ff9-4ce6-a1f8-8aebf1a1c22a_buggy.java b/tmp/ea834eec-4881-4ca8-8c46-45c62602a059_fixed.java
index 939f49b..5f6279e 100644
--- a/tmp/002af68a-2ff9-4ce6-a1f8-8aebf1a1c22a_buggy.java
+++ b/tmp/ea834eec-4881-4ca8-8c46-45c62602a059_fixed.java
@@ -1,21 +1,29 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+      && n.getType() == Token.GETPROP) {
     // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+    Node firstChild = n.getFirstChild();
     
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+    // Handle direct prototype property
+    if (firstChild.getType() == Token.GETPROP) {
+      Node child = firstChild.getFirstChild().getNext();
       
       if (child.getType() == Token.STRING &&
           child.getString().equals("prototype")) {
         return true;
       }
     }
+    
+    // Handle bracket notation
+    if (firstChild.getType() == Token.GETELEM) {
+      Node child = firstChild.getFirstChild().getNext();
+      if (firstChild.getFirstChild().getType() == Token.GETPROP &&
+          NodeUtil.isPrototypeProperty(firstChild.getFirstChild())) {
+        return true;
+      }
+    }
   }
   
   return false;
 }
\ No newline at end of file
