diff --git a/tmp/1cedfdad-1eac-4afc-9353-5bbd2ad4d8ac_buggy.java b/tmp/4f9b3e77-090f-4464-b24a-66d7df3a345e_fixed.java
index 2608424..de88be7 100644
--- a/tmp/1cedfdad-1eac-4afc-9353-5bbd2ad4d8ac_buggy.java
+++ b/tmp/4f9b3e77-090f-4464-b24a-66d7df3a345e_fixed.java
@@ -1,39 +1,30 @@
 /**
  * Convert to multidimensional counter.
  *
  * @param index Index in unidimensional counter.
  * @return the multidimensional counts.
  * @throws OutOfRangeException if {@code index} is not between
  * {@code 0} and the value returned by {@link #getSize()} (excluded).
  */
 public int[] getCounts(int index) {
     if (index < 0 ||
         index >= totalSize) {
         throw new OutOfRangeException(index, 0, totalSize);
     }
 
     final int[] indices = new int[dimension];
 
-        int count = 0;
-        for (int i = 0; i < last; i++) {
-            int idx = 0;
-            final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
+    int remaining = index;
+    for (int i = 0; i < dimension; i++) {
+        if (i < last) {
+            // For dimensions before the last one
+            indices[i] = remaining / uniCounterOffset[i];
+            remaining %= uniCounterOffset[i];
+        } else {
+            // For the last dimension
+            indices[i] = remaining;
         }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
     }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
-
     return indices;
 }
\ No newline at end of file
