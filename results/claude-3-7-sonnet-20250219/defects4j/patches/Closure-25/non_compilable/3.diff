diff --git a/tmp/f2766f34-b51b-40fd-b843-8a7d16298bd7_buggy.java b/tmp/fa9c85ac-b929-4d02-9443-7cc2469fbd72_fixed.java
index b98f0a7..5d58041 100644
--- a/tmp/f2766f34-b51b-40fd-b843-8a7d16298bd7_buggy.java
+++ b/tmp/fa9c85ac-b929-4d02-9443-7cc2469fbd72_fixed.java
@@ -1,29 +1,54 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+    
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                
+                // Apply backward inference to constructor parameters
+                int paramCount = ct.getParameters().size();
+                int argCount = n.getChildCount() - 1;
+                if (paramCount > 0 && argCount > 0) {
+                    Iterator<Parameter> parameters = ct.getParameters().iterator();
+                    Node arg = constructor.getNext();
+                    int i = 0;
+                    while (parameters.hasNext() && arg != null) {
+                        Parameter parameter = parameters.next();
+                        JSType paramType = parameter.getJSType();
+                        if (paramType != null) {
+                            scope = traverse(arg, scope);
+                            updateScopeForTypeChange(scope, arg, arg.getJSType(), paramType);
                         }
+                        arg = arg.getNext();
+                        i++;
                     }
                 }
+            }
+        }
+    }
+    
     n.setJSType(type);
+    
+    // Process any remaining arguments
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+        if (arg.getJSType() == null) {
             scope = traverse(arg, scope);
         }
+    }
+    
     return scope;
 }
\ No newline at end of file
