diff --git a/tmp/ef7dcf04-615f-433c-a020-a4136b1ba273_buggy.java b/tmp/54eb2e79-752b-4d9d-8167-43b3b813b5d0_fixed.java
index b98f0a7..7afa603 100644
--- a/tmp/ef7dcf04-615f-433c-a020-a4136b1ba273_buggy.java
+++ b/tmp/54eb2e79-752b-4d9d-8167-43b3b813b5d0_fixed.java
@@ -1,29 +1,51 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
+  
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
+      
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
+        
+        // Match actual parameters against formal parameters
+        for (Node arg = constructor.getNext(), param = ct.getParameters().listIterator(0);
+             arg != null && param != null;
+             arg = arg.getNext(), param = param.getNext()) {
+          scope = traverse(arg, scope);
+          JSType paramType = param.getJSType();
+          if (paramType != null) {
+            scope = reverseFlowTypeDetermination(arg, scope, paramType);
+          }
+        }
+        // Handle any remaining arguments
+        for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+          if (scope == null) {
+            scope = traverse(arg, scope);
+          }
+        }
+        n.setJSType(type);
+        return scope;
       }
     }
   }
+  
   n.setJSType(type);
+  // Process arguments if we couldn't determine the function
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
