diff --git a/tmp/3bbd9c4c-7b32-4912-a118-1f02a0c56324_buggy.java b/tmp/38fbb6b2-81c1-47a5-97cc-278d9edbdf26_fixed.java
index b98f0a7..048af5a 100644
--- a/tmp/3bbd9c4c-7b32-4912-a118-1f02a0c56324_buggy.java
+++ b/tmp/38fbb6b2-81c1-47a5-97cc-278d9edbdf26_fixed.java
@@ -1,29 +1,50 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+    
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                
+                // Handle constructor parameter types for backwards inference
+                int paramCount = ct.getParameters().size();
+                Node argNode = constructor.getNext();
+                for (int i = 0; i < paramCount && argNode != null; 
+                     i++, argNode = argNode.getNext()) {
+                    scope = traverse(argNode, scope);
+                    JSType paramType = ct.getParameters().get(i).getJSType();
+                    if (paramType != null) {
+                        scope = backwardTypeInference(argNode, paramType, scope);
                     }
                 }
+                
+                // Skip the arguments we've already traversed
+                for (Node arg = argNode; arg != null; arg = arg.getNext()) {
+                    scope = traverse(arg, scope);
                 }
+                
+                n.setJSType(type);
+                return scope;
+            }
+        }
+    }
+    
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
