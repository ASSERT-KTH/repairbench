diff --git a/tmp/951a8e63-c777-4267-85d9-902ac3766f76_buggy.java b/tmp/21a2f2b9-e540-4124-ab01-989e34169b92_fixed.java
index b98f0a7..66995f6 100644
--- a/tmp/951a8e63-c777-4267-85d9-902ac3766f76_buggy.java
+++ b/tmp/21a2f2b9-e540-4124-ab01-989e34169b92_fixed.java
@@ -1,29 +1,41 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
+  
+  FunctionType ct = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+      ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
+  
   n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+  
+  // Handle constructor arguments and apply backward inference
+  int i = 0;
+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), i++) {
     scope = traverse(arg, scope);
+    if (ct != null && i < ct.getParameterCount()) {
+      JSType paramType = ct.getParameterType(i);
+      if (paramType != null) {
+        scope = backwardComputation(arg, arg.getJSType(), paramType, scope);
       }
+    }
+  }
+  
   return scope;
 }
\ No newline at end of file
