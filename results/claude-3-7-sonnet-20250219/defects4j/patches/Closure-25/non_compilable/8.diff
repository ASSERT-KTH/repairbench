diff --git a/tmp/7757a2cb-80d6-47f8-a28f-234be04183cb_buggy.java b/tmp/e7443cdc-7ddb-4b0d-b3b3-81347465a6b1_fixed.java
index b98f0a7..3eb1116 100644
--- a/tmp/7757a2cb-80d6-47f8-a28f-234be04183cb_buggy.java
+++ b/tmp/e7443cdc-7ddb-4b0d-b3b3-81347465a6b1_fixed.java
@@ -1,29 +1,38 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                
+                // Handle backwards type inference for constructor parameters
+                for (Node arg = constructor.getNext(), param = ct.getParameters().iterator().next();
+                     arg != null && param != null;
+                     arg = arg.getNext(), param = param.getNext()) {
+                    if (arg.getJSType() != null && param.getJSType() != null) {
+                        scope = inferPropertyTypesToMatchConstraint(
+                            arg.getJSType(), param.getJSType(), arg, scope);
+                    }
+                }
             }
         }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
