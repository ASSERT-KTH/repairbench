diff --git a/tmp/50b4eb98-32a9-4a27-a169-9766b2c8ae3d_buggy.java b/tmp/d45ae5db-9951-42df-aa78-72c9aa695ee6_fixed.java
index b98f0a7..03d67f8 100644
--- a/tmp/50b4eb98-32a9-4a27-a169-9766b2c8ae3d_buggy.java
+++ b/tmp/d45ae5db-9951-42df-aa78-72c9aa695ee6_fixed.java
@@ -1,29 +1,53 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          
+          // Handle constructor parameters for backwards type inference
+          FunctionType functionType = ct;
+          Iterator<Node> arguments = NodeUtil.getInvocationArgsAsIterable(n).iterator();
+          Iterator<Node> parameters = functionType.getParameters().iterator();
+          FlowScope fnScope = scope;
+          
+          // Match arguments to parameters and infer types from the function declaration
+          while (arguments.hasNext() && parameters.hasNext()) {
+            Node arg = arguments.next();
+            Node parameter = parameters.next();
+            
+            fnScope = traverse(arg, fnScope);
+            JSType paramType = parameter.getJSType();
+            
+            if (paramType != null && arg.getJSType() != null) {
+              inferPropertyTypesToMatchConstraint(arg.getJSType(), paramType);
+            }
+          }
+          
+          // Process any remaining arguments
+          while (arguments.hasNext()) {
+            fnScope = traverse(arguments.next(), fnScope);
+          }
+          
+          scope = fnScope;
         }
       }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
-    }
+    
+    // Skip argument traversal as we've already done it above
     return scope;
   }
\ No newline at end of file
