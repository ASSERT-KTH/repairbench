diff --git a/tmp/7dfe253c-ddb2-4c38-ac4b-a9d1b798254b_buggy.java b/tmp/b78b8d55-226a-459a-9715-d80258123ff5_fixed.java
index b98f0a7..941d241 100644
--- a/tmp/7dfe253c-ddb2-4c38-ac4b-a9d1b798254b_buggy.java
+++ b/tmp/b78b8d55-226a-459a-9715-d80258123ff5_fixed.java
@@ -1,29 +1,35 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
+  
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
+        
+        // Handle constructor parameters for backwards inference
+        Iterator<Node> args = Arrays.asList(n.children()).iterator();
+        args.next(); // Skip the constructor
+        backwardsInferFromCallSite(n, ct, args, scope);
       }
     }
   }
+  
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
