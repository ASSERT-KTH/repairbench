diff --git a/tmp/cd29da10-814a-4d65-85cd-1ceeb7863589_buggy.java b/tmp/c9acd973-1df9-4258-8c5d-2087b9991730_fixed.java
index b98f0a7..fcdde92 100644
--- a/tmp/cd29da10-814a-4d65-85cd-1ceeb7863589_buggy.java
+++ b/tmp/c9acd973-1df9-4258-8c5d-2087b9991730_fixed.java
@@ -1,29 +1,52 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
+  
+  FunctionType ct = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+      ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
+  
   n.setJSType(type);
+  
+  // Handle constructor arguments
+  Node firstArg = constructor.getNext();
+  if (ct != null && firstArg != null) {
+    FunctionType.Parameter param = ct.getParameters().get(0);
+    if (param != null) {
+      scope = traverse(firstArg, scope);
+      JSType paramType = param.getJSType();
+      if (paramType != null) {
+        firstArg.setJSType(paramType);
+        scope = maybeBackwardInferenceFromRHS(firstArg, scope);
+      }
+      // Handle remaining arguments
+      for (Node arg = firstArg.getNext(); arg != null; arg = arg.getNext()) {
+        scope = traverse(arg, scope);
+      }
+      return scope;
+    }
+  }
+  
+  // If no constructor type is found or no parameters exist, just traverse the arguments
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
