diff --git a/tmp/463917b0-8b99-464c-9207-656e555a580c_buggy.java b/tmp/61273911-9d35-4c5e-a2d9-2e5cea0a5fd8_fixed.java
index b98f0a7..ecf73a7 100644
--- a/tmp/463917b0-8b99-464c-9207-656e555a580c_buggy.java
+++ b/tmp/61273911-9d35-4c5e-a2d9-2e5cea0a5fd8_fixed.java
@@ -1,29 +1,51 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
+        
+        // Apply backwards inference to match constructor parameters
+        Node firstArg = constructor.getNext();
+        if (firstArg != null) {
+          FunctionType.Parameter param = ct.getFirstParameter();
+          if (param != null) {
+            JSType paramType = param.getJSType();
+            if (paramType != null) {
+              scope = traverseWithinNew(firstArg, scope, paramType);
+            }
+          }
+          // Handle remaining parameters
+          Node arg = firstArg.getNext();
+          int i = 1;
+          while (arg != null) {
+            param = ct.getParameter(i);
+            if (param != null) {
+              JSType paramType = param.getJSType();
+              if (paramType != null) {
+                scope = traverseWithinNew(arg, scope, paramType);
+              }
+            }
+            arg = arg.getNext();
+            i++;
+          }
+        }
       }
     }
   }
   n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
-    }
   return scope;
 }
\ No newline at end of file
