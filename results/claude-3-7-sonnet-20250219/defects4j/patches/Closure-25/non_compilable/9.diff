diff --git a/tmp/652d1b2f-2019-4512-a31a-c05b6233cf2f_buggy.java b/tmp/4f22bc89-6ef4-418f-bb01-a1d343b067a3_fixed.java
index b98f0a7..f5878b6 100644
--- a/tmp/652d1b2f-2019-4512-a31a-c05b6233cf2f_buggy.java
+++ b/tmp/4f22bc89-6ef4-418f-bb01-a1d343b067a3_fixed.java
@@ -1,29 +1,46 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
+        
+        // Apply type information from the constructor parameters to the arguments
+        Iterator<Node> arguments = NodeUtil.getChildIterator(n, false);
+        arguments.next(); // Skip the constructor.
+        if (arguments.hasNext()) {
+          Iterator<Node> parameters = ct.getParameters().iterator();
+          while (arguments.hasNext() && parameters.hasNext()) {
+            Node arg = arguments.next();
+            JSType paramType = parameters.next().getJSType();
+            if (paramType != null) {
+              // Reverse-flow type information from parameter to argument
+              arg.setJSType(paramType);
+              scope = reverseFlow(scope, arg, paramType);
+            }
+          }
+        }
       }
     }
   }
   n.setJSType(type);
+  
+  // Still need to traverse the arguments to build scopes
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
