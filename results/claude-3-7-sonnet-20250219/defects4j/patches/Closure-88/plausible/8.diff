diff --git a/tmp/b98f2087-dd0b-4a46-8715-aaf59c54de23_buggy.java b/tmp/6d3b90c2-a7e1-49cf-a36d-5e922f67c6c9_fixed.java
index 9353941..5c64968 100644
--- a/tmp/b98f2087-dd0b-4a46-8715-aaf59c54de23_buggy.java
+++ b/tmp/6d3b90c2-a7e1-49cf-a36d-5e922f67c6c9_fixed.java
@@ -1,30 +1,42 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
+        
+        // Check if this is a compound assignment (e.g., x += 1)
+        // or if the parent of the parent is an AND/OR operation
+        Node parent = n.getParent();
+        if (parent.getType() == Token.ASSIGN &&
+            parent.getParent() != null &&
+            (parent.getParent().getType() == Token.AND ||
+             parent.getParent().getType() == Token.OR ||
+             parent.getParent().getType() == Token.SUB)) {
+          return VariableLiveness.READ;
+        }
+        
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
