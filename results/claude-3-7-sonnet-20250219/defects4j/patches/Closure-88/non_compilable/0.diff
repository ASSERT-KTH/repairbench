diff --git a/tmp/3068044b-6c90-4c6b-a95c-46466dc503f8_buggy.java b/tmp/8d423d0f-6f59-4f97-95f9-1c262e2749cb_fixed.java
index 9353941..4af2a85 100644
--- a/tmp/3068044b-6c90-4c6b-a95c-46466dc503f8_buggy.java
+++ b/tmp/8d423d0f-6f59-4f97-95f9-1c262e2749cb_fixed.java
@@ -1,30 +1,44 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
+      Node parent = n.getParent();
+      Node gramps = parent.getParent();
+      
+      // If the assignment is used as part of a larger expression,
+      // we need to treat it as a READ to avoid removing assignments
+      // that contribute to the expression's result
+      if (gramps != null && 
+          (gramps.isAnd() || gramps.isOr() || 
+           gramps.isComma() || gramps.isHook() ||
+           (NodeUtil.isBinaryOperator(gramps) && 
+            !gramps.isAssign()))) {
+        return VariableLiveness.READ;
+      }
+      
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
