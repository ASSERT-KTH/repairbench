diff --git a/tmp/48bc0bb5-461a-4d62-a62c-02c7dcf2679c_buggy.java b/tmp/04e92fc7-3c73-40fe-a0f7-a905893ea407_fixed.java
index 9353941..75fa9a4 100644
--- a/tmp/48bc0bb5-461a-4d62-a62c-02c7dcf2679c_buggy.java
+++ b/tmp/04e92fc7-3c73-40fe-a0f7-a905893ea407_fixed.java
@@ -1,30 +1,40 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
+      
+      // Special case, the variable is used as both an assignment and
+      // read in the same expression.
+      Node parent = n.getParent();
+      if (parent.isAssign() && parent.getLastChild().hasChildren()
+          && NodeUtil.has(parent.getLastChild(),
+              new NodeUtil.MatchNameNode(variable), 
+              NodeUtil.MATCH_NOT_FUNCTION)) {
+        return VariableLiveness.READ;
+      }
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
