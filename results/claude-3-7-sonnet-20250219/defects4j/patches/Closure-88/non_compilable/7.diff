diff --git a/tmp/3b34251d-efdb-45f7-81bc-9d095360a396_buggy.java b/tmp/5829b3ee-ac1d-4ba9-be50-8f698282898c_fixed.java
index 9353941..16e163b 100644
--- a/tmp/3b34251d-efdb-45f7-81bc-9d095360a396_buggy.java
+++ b/tmp/5829b3ee-ac1d-4ba9-be50-8f698282898c_fixed.java
@@ -1,30 +1,40 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
+
+        // Special case for assignments in a larger expression
+        Node parent = n.getParent();
+        Node grandparent = parent.getParent();
+        if (parent.isAssign() && grandparent != null && 
+            (grandparent.isAnd() || grandparent.isOr() || 
+             grandparent.isSub() || grandparent.isAdd() ||
+             !NodeUtil.isStatement(grandparent))) {
+          return VariableLiveness.READ;
+        }
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
