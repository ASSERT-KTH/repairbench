diff --git a/tmp/1160286e-90e4-4d50-b545-27d0b8253392_buggy.java b/tmp/66ca44e6-db76-4a5b-af7c-99b8b593bcb4_fixed.java
index 9353941..5ed497b 100644
--- a/tmp/1160286e-90e4-4d50-b545-27d0b8253392_buggy.java
+++ b/tmp/66ca44e6-db76-4a5b-af7c-99b8b593bcb4_fixed.java
@@ -1,30 +1,45 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
+        
+        // Special case for assignment within logical operators or expressions
+        // where the assigned value is also used elsewhere
+        Node parent = n.getParent();
+        if (parent.isAssign() && parent.getParent() != null) {
+          Node grandparent = parent.getParent();
+          int parentType = parent.getParent().getType();
+          if (NodeUtil.isAssignmentOp(grandparent) ||
+              parentType == Token.AND ||
+              parentType == Token.OR ||
+              parentType == Token.COMMA ||
+              parentType == Token.HOOK) {
+            return VariableLiveness.READ;
+          }
+        }
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
