diff --git a/tmp/3e89e3cd-c80d-43f6-b05f-32f72141a00e_buggy.java b/tmp/e48935ef-0645-4eb6-b3bc-09afa7b9ad57_fixed.java
index efa499e..4c681ba 100644
--- a/tmp/3e89e3cd-c80d-43f6-b05f-32f72141a00e_buggy.java
+++ b/tmp/e48935ef-0645-4eb6-b3bc-09afa7b9ad57_fixed.java
@@ -1,35 +1,36 @@
 /**
  * Get the current solution.
  *
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
   int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
   Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
   double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
   Set<Integer> basicRows = new HashSet<Integer>();
   double[] coefficients = new double[getOriginalNumDecisionVariables()];
   for (int i = 0; i < coefficients.length; i++) {
       int colIndex = columnLabels.indexOf("x" + i);
       if (colIndex < 0) {
         coefficients[i] = 0;
         continue;
       }
       Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
+      // Check if basicRow is null before trying to use it in contains()
+      if (basicRow != null && basicRows.contains(basicRow)) {
           // if multiple variables can take a given value
           // then we choose the first and set the rest equal to 0
           coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
       } else {
+          // Only add to basicRows if it's not null
+          if (basicRow != null) {
               basicRows.add(basicRow);
+          }
           coefficients[i] =
               (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
               (restrictToNonNegative ? 0 : mostNegative);
       }
   }
   return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
