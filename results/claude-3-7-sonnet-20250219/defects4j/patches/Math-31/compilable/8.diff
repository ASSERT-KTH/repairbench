diff --git a/tmp/6349e4e8-85ed-430e-84c1-d29bce32a737_buggy.java b/tmp/cd6beda7-db46-4a38-a859-9a740c282909_fixed.java
index 57d43b9..b1675b2 100644
--- a/tmp/6349e4e8-85ed-430e-84c1-d29bce32a737_buggy.java
+++ b/tmp/cd6beda7-db46-4a38-a859-9a740c282909_fixed.java
@@ -1,102 +1,106 @@
 /**
  * <p>
  * Evaluates the continued fraction at the value x.
  * </p>
  *
  * <p>
  * The implementation of this method is based on the modified Lentz algorithm as described
  * on page 18 ff. in:
  * <ul>
  * <li>
  *   I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
  *   <a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf">
  *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
  * </li>
  * </ul>
  * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
  * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction / MathWorld</a>.
  * </p>
  *
  * @param x the evaluation point.
  * @param epsilon maximum error allowed.
  * @param maxIterations maximum number of convergents
  * @return the value of the continued fraction evaluated at x.
  * @throws ConvergenceException if the algorithm fails to converge.
  */
 public double evaluate(double x, double epsilon, int maxIterations) {
     final double small = 1e-50;
     double hPrev = getA(0, x);
 
     // use the value of small as epsilon criteria for zero checks
     if (Precision.equals(hPrev, 0.0, small)) {
         hPrev = small;
     }
 
     int n = 1;
     double dPrev = 0.0;
-        double p0 = 1.0;
-        double q1 = 1.0;
     double cPrev = hPrev;
     double hN = hPrev;
+    double p0 = 1.0;
+    double q1 = 1.0;
 
     while (n < maxIterations) {
         final double a = getA(n, x);
         final double b = getB(n, x);
 
         double cN = a * hPrev + b * p0;
         double q2 = a * q1 + b * dPrev;
+        
+        // Try scaling if cN or q2 becomes infinite
+        if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
+            final double maxValue = Double.MAX_VALUE / Math.max(1.0, Math.max(Math.abs(a), Math.abs(b)));
+            if (Math.abs(hPrev) > maxValue || Math.abs(p0) > maxValue || 
+                Math.abs(q1) > maxValue || Math.abs(dPrev) > maxValue) {
+                double scaleFactor = Math.max(Math.abs(hPrev), Math.max(Math.abs(p0), 
+                                     Math.max(Math.abs(q1), Math.abs(dPrev))));
+                
+                // Scale down all values
+                hPrev /= scaleFactor;
+                p0 /= scaleFactor;
+                q1 /= scaleFactor;
+                dPrev /= scaleFactor;
+                
+                // Try computation again with scaled values
+                cN = a * hPrev + b * p0;
+                q2 = a * q1 + b * dPrev;
+            }
+            
             if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
-                double scaleFactor = 1d;
-                double lastScaleFactor = 1d;
-                final int maxPower = 5;
-                final double scale = FastMath.max(a,b);
-                if (scale <= 0) {  // Can't scale
                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
             }
-                for (int i = 0; i < maxPower; i++) {
-                    lastScaleFactor = scaleFactor;
-                    scaleFactor *= scale;
-                    if (a != 0.0 && a > b) {
-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
-                    } else if (b != 0) {
-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
-                    }
-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
-                        break;
-                    }
         }
+
+        // Normalize fraction when denominators are 0
+        if (q2 == 0.0) {
+            q2 = small;
         }
         
         final double deltaN = cN / q2 / cPrev;
         hN = cPrev * deltaN;
 
         if (Double.isInfinite(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
-                                               x);
+            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
         }
         if (Double.isNaN(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
-                                               x);
+            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);
         }
 
         if (FastMath.abs(deltaN - 1.0) < epsilon) {
             break;
         }
 
         dPrev = q1;
         cPrev = cN / q2;
         p0 = hPrev;
         hPrev = cN;
         q1 = q2;
         n++;
     }
 
     if (n >= maxIterations) {
         throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
                                             maxIterations, x);
     }
 
     return hN;
 }
\ No newline at end of file
