diff --git a/tmp/25091593-738f-4e0e-bd2b-37bb540009b1_buggy.java b/tmp/0f6ffaf8-2640-41ee-87d0-543324fcf767_fixed.java
index 1c875ad..494ad12 100644
--- a/tmp/25091593-738f-4e0e-bd2b-37bb540009b1_buggy.java
+++ b/tmp/0f6ffaf8-2640-41ee-87d0-543324fcf767_fixed.java
@@ -1,31 +1,31 @@
     public void captureArgumentsFrom(Invocation invocation) {
         if (invocation.getMethod().isVarArgs()) {
             int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
+            for (int position = 0; position < matchers.size(); position++) {
+                Matcher m = matchers.get(position);
+                if (m instanceof CapturesArguments) {
+                    if (position < indexOfVararg) {
+                        ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+                    } else if (position == indexOfVararg) {
+                        // Handle the varargs argument
+                        Object array = invocation.getRawArguments()[indexOfVararg];
+                        if (array != null && array.getClass().isArray()) {
+                            for (int i = 0; i < java.lang.reflect.Array.getLength(array); i++) {
+                                ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(array, i));
+                            }
+                        } else {
+                            // Null array or empty varargs
+                            ((CapturesArguments) m).captureFrom(array);
+                        }
+                    }
+                }
+            }
         } else {
             for (int position = 0; position < matchers.size(); position++) {
                 Matcher m = matchers.get(position);
                 if (m instanceof CapturesArguments) {
                     ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
                 }
             }
         }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
     }
\ No newline at end of file
