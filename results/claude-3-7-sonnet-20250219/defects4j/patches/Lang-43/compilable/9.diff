diff --git a/tmp/e99c5a2a-19ee-4ec4-acbc-e2b027f83cf9_buggy.java b/tmp/f695cb78-4e91-4886-9672-32f90968ed9c_fixed.java
index b6b11b6..86a82f1 100644
--- a/tmp/e99c5a2a-19ee-4ec4-acbc-e2b027f83cf9_buggy.java
+++ b/tmp/f695cb78-4e91-4886-9672-32f90968ed9c_fixed.java
@@ -1,38 +1,39 @@
 /**
  * Consume a quoted string, adding it to <code>appendTo</code> if
  * specified.
  * 
  * @param pattern pattern to parse
  * @param pos current parse position
  * @param appendTo optional StringBuffer to append
  * @param escapingOn whether to process escaped quotes
  * @return <code>appendTo</code>
  */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
     char[] c = pattern.toCharArray();
     if (escapingOn && c[start] == QUOTE) {
         return appendTo == null ? null : appendTo.append(QUOTE);
     }
     int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+    while (pos.getIndex() < pattern.length()) {
+        if (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {
+            if (appendTo != null) {
+                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);
+            }
+            pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());
             lastHold = pos.getIndex();
             continue;
         }
         switch (c[pos.getIndex()]) {
         case QUOTE:
             next(pos);
             return appendTo == null ? null : appendTo.append(c, lastHold,
                     pos.getIndex() - lastHold);
         default:
             next(pos);
         }
     }
     throw new IllegalArgumentException(
             "Unterminated quoted string at position " + start);
 }
\ No newline at end of file
