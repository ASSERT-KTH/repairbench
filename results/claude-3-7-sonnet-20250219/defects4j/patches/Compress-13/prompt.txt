You are an automatic program repair tool. Your task is to fix the provided buggy code.

The following code contains a buggy function:
```java
    /**
     * Set the name of the entry.
     * @param name the name to use
     */
    protected void setName(String name) {
        this.name = name;
    }

```

The code fails the following tests.

Test `org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest::winzipBackSlashWorkaround`:
```java
    /**
     * @see https://issues.apache.org/jira/browse/COMPRESS-176
     */
    @Test
    public void winzipBackSlashWorkaround() throws Exception {
        URL zip = getClass().getResource("/test-winzip.zip");
        ZipArchiveInputStream in = null;
        try {
            in = new ZipArchiveInputStream(new FileInputStream(new File(new URI(zip.toString()))));
            ZipArchiveEntry zae = in.getNextZipEntry();
            zae = in.getNextZipEntry();
            zae = in.getNextZipEntry();
            assertEquals("\u00e4/", zae.getName());
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }

```
Test `org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest::winzipBackSlashWorkaround` error:
```
junit.framework.AssertionFailedError: Expected: <null> but was: 채\체.txt
```

Test `org.apache.commons.compress.archivers.zip.ZipFileTest::testWinzipBackSlashWorkaround`:
```java
    /**
     * @see https://issues.apache.org/jira/browse/COMPRESS-176
     */
    public void testWinzipBackSlashWorkaround() throws Exception {
        URL zip = getClass().getResource("/test-winzip.zip");
        File archive = new File(new URI(zip.toString()));
        zf = new ZipFile(archive);
        assertNull(zf.getEntry("\u00e4\\\u00fc.txt"));
        assertNotNull(zf.getEntry("\u00e4/\u00fc.txt"));
    }

```
Test `org.apache.commons.compress.archivers.zip.ZipFileTest::testWinzipBackSlashWorkaround` error:
```
junit.framework.AssertionFailedError: Expected: <null> but was: 채\체.txt
```


Please provide a fixed version of the buggy function, and only that function, inside a code block.
