diff --git a/tmp/124058f0-75e6-4160-8bf1-7510352dbf7d_buggy.java b/tmp/fca1175f-f269-4ee8-9491-3e0a066763b4_fixed.java
index f650982..66c9d04 100644
--- a/tmp/124058f0-75e6-4160-8bf1-7510352dbf7d_buggy.java
+++ b/tmp/fca1175f-f269-4ee8-9491-3e0a066763b4_fixed.java
@@ -1,42 +1,56 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
 //    System.err.println("COMPARING: " +
 //        (l == null ? "null" : l.getClass().getName()) + " " +
 //        (r == null ? "null" : r.getClass().getName()));
 
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        Iterator iterator = (Iterator) l;
+        while (iterator.hasNext()) {
+            Object next = iterator.next();
+            if (equal(next, r)) {
+                return true;
+            }
+        }
+        return false;
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        Iterator iterator = (Iterator) r;
+        while (iterator.hasNext()) {
+            Object next = iterator.next();
+            if (equal(l, next)) {
+                return true;
+            }
+        }
+        return false;
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
     return equal(l, r);
 }
\ No newline at end of file
