diff --git a/tmp/8bfaedfe-f82e-4151-bb0a-c1b7fc9e0e4c_buggy.java b/tmp/328dd5ac-cbcc-498b-9409-306546384292_fixed.java
index 88647d1..d84306b 100644
--- a/tmp/8bfaedfe-f82e-4151-bb0a-c1b7fc9e0e4c_buggy.java
+++ b/tmp/328dd5ac-cbcc-498b-9409-306546384292_fixed.java
@@ -1,44 +1,51 @@
 /**
  * Find a zero in the given interval.
  * <p>
  * Requires that the values of the function at the endpoints have opposite
  * signs. An <code>IllegalArgumentException</code> is thrown if this is not
  * the case.</p>
  * 
  * @param min the lower bound for the interval.
  * @param max the upper bound for the interval.
  * @return the value where the function is zero
  * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
  * @throws FunctionEvaluationException if an error occurs evaluating the
  * function 
  * @throws IllegalArgumentException if min is not less than max or the
  * signs of the values of the function at the endpoints are not opposites
  */
 public double solve(double min, double max) throws MaxIterationsExceededException, 
     FunctionEvaluationException {
     
     clearResult();
     verifyInterval(min, max);
     
     double ret = Double.NaN;
     
     double yMin = f.value(min);
     double yMax = f.value(max);
     
     // Verify bracketing
     double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
+    
+    if (sign > 0 && Math.abs(yMin) > 1E-15 && Math.abs(yMax) > 1E-15) {
         // neither value is close to zero and min and max do not bracket root.
         throw new IllegalArgumentException
             ("Function values at endpoints do not have different signs." +
                     "  Endpoints: [" + min + "," + max + "]" + 
                     "  Values: [" + yMin + "," + yMax + "]");
+    } else if (Math.abs(yMin) <= 1E-15) {
+        // min is a root
+        setResult(min, 0);
+        ret = min;
+    } else if (Math.abs(yMax) <= 1E-15) {
+        // max is a root
+        setResult(max, 0);
+        ret = max;
     } else {
         // solve using only the first endpoint as initial guess
         ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
     }
 
     return ret;
 }
\ No newline at end of file
