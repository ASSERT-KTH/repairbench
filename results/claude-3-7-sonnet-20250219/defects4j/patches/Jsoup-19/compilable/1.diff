diff --git a/tmp/8c188f49-049c-42e6-9ab8-4f341b49a3e0_buggy.java b/tmp/2303f63e-0f30-4ecf-b021-119815110f0d_fixed.java
index 4aff4e4..1247f04 100644
--- a/tmp/8c188f49-049c-42e6-9ab8-4f341b49a3e0_buggy.java
+++ b/tmp/2303f63e-0f30-4ecf-b021-119815110f0d_fixed.java
@@ -1,15 +1,24 @@
 private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
+    String value = attr.getValue();
     // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
     // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
+    if (value.startsWith("//")) { // protocol-relative, so resolve to absolute (e.g. "//example.com/" => "http://example.com/")
+        value = el.absUrl(attr.getKey());
+    } else if (value.length() > 0 && !value.contains(":")) { // it's a relative path, resolve
+        value = el.absUrl(attr.getKey());
+    }
+    
+    if (!preserveRelativeLinks && value.length() > 0)
         attr.setValue(value);
     
+    if (value.length() == 0)
+        value = attr.getValue(); // if we couldn't resolve it, use the original value
+    
     for (Protocol protocol : protocols) {
         String prot = protocol.toString() + ":";
         if (value.toLowerCase().startsWith(prot)) {
             return true;
         }
     }
     return false;
 }
\ No newline at end of file
