diff --git a/tmp/b320aefb-b890-4267-87b6-7aebbc43cc93_buggy.java b/tmp/f4228400-2abc-4ed6-b399-b5a0497714b3_fixed.java
index 4aff4e4..1cf8d1e 100644
--- a/tmp/b320aefb-b890-4267-87b6-7aebbc43cc93_buggy.java
+++ b/tmp/f4228400-2abc-4ed6-b399-b5a0497714b3_fixed.java
@@ -1,15 +1,29 @@
 private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
+    String value = attr.getValue();
+    if (value.length() == 0)
+        return false;
+        
     // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
     // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
+    String absValue = el.absUrl(attr.getKey());
+    if (!preserveRelativeLinks && absValue.length() > 0)
+        attr.setValue(absValue);
     
+    // if it's a relative URL and we couldn't resolve it, return false unless the protocol is allowed
+    if (absValue.length() == 0 && !value.startsWith("#") && 
+        !(value.startsWith("data:") || value.startsWith("cid:") || value.startsWith("mailto:") || 
+          value.startsWith("tel:") || value.startsWith("magnet:"))) {
+        return false;
+    }
+    
+    // test if value starts with any allowed protocol
     for (Protocol protocol : protocols) {
-            String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
+        String prot = protocol.toString().toLowerCase() + ":";
+        if ((absValue.length() > 0 && absValue.toLowerCase().startsWith(prot)) || 
+            (absValue.length() == 0 && value.toLowerCase().startsWith(prot))) {
             return true;
         }
     }
+    
     return false;
 }
\ No newline at end of file
