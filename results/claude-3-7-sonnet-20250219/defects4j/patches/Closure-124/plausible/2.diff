diff --git a/tmp/ef34edcf-1ec6-4a7c-a94d-a48c631d0def_buggy.java b/tmp/9c1f2f63-583f-4b59-8df8-26a2fd26a0b3_fixed.java
index 2573d30..e4767e5 100644
--- a/tmp/ef34edcf-1ec6-4a7c-a94d-a48c631d0def_buggy.java
+++ b/tmp/9c1f2f63-583f-4b59-8df8-26a2fd26a0b3_fixed.java
@@ -1,20 +1,29 @@
 /**
  * Checks name referenced in node to determine if it might have
  * changed.
  * @return Whether the replacement can be made.
  */
 private boolean isSafeReplacement(Node node, Node replacement) {
   // No checks are needed for simple names.
   if (node.isName()) {
     return true;
   }
   Preconditions.checkArgument(node.isGetProp());
   
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+  // Check the object part of the getProp
+  Node current = node.getFirstChild();
+  // For property access chains like a.b.c, we need to check all parts
+  while (current != null) {
+    if (current.isName() && isNameAssignedTo(current.getString(), replacement)) {
       return false;
     }
+    // If it's a property access, continue checking the object
+    if (current.isGetProp()) {
+      current = current.getFirstChild();
+    } else {
+      break;
+    }
+  }
   
   return true;
 }
\ No newline at end of file
