diff --git a/tmp/fa576f65-c2d0-4c99-b3a4-648cd125fa2d_buggy.java b/tmp/1420b355-fb65-44ba-bcf9-6f01be7327db_fixed.java
index 210695a..a1dd36d 100644
--- a/tmp/fa576f65-c2d0-4c99-b3a4-648cd125fa2d_buggy.java
+++ b/tmp/1420b355-fb65-44ba-bcf9-6f01be7327db_fixed.java
@@ -1,32 +1,35 @@
 /**
  * Computes the subset of {@code this} and {@code that} types if inequality
  * is observed. If a value {@code v1} of type {@code number} is not equal to a
  * value {@code v2} of type {@code (undefined,number)}, we can infer that the
  * type of {@code v1} is {@code number} and the type of {@code v2} is
  * {@code number} as well.
  *
  * @return a pair containing the restricted type of {@code this} as the first
  *         component and the restricted type of {@code that} as the second
  *         element. The returned pair is never {@code null} even though its
  *         components may be {@code null}
  */
 public TypePair getTypesUnderInequality(JSType that) {
   // unions types
   if (that instanceof UnionType) {
     TypePair p = that.getTypesUnderInequality(this);
     return new TypePair(p.typeB, p.typeA);
   }
 
   // other types
   switch (this.testForEquality(that)) {
     case TRUE:
       return new TypePair(null, null);
 
     case FALSE:
     case UNKNOWN:
+      if (this.isVoidType() && that.isVoidType()) {
+        return new TypePair(null, null);
+      }
       return new TypePair(this, that);
   }
 
   // switch case is exhaustive
   throw new IllegalStateException();
 }
\ No newline at end of file
