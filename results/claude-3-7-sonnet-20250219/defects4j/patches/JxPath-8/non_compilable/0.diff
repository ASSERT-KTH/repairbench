diff --git a/tmp/3bfd6b8f-30fe-4b56-acf6-8bb279b0e48c_buggy.java b/tmp/4bc66404-8372-4aaa-acd6-88446325aabc_fixed.java
index 98d89dc..60c9780 100644
--- a/tmp/3bfd6b8f-30fe-4b56-acf6-8bb279b0e48c_buggy.java
+++ b/tmp/4bc66404-8372-4aaa-acd6-88446325aabc_fixed.java
@@ -1,23 +1,33 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+    
+    // Handle NaN values specially
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        if (getOperation() == GT || getOperation() == LT) {
+            return false;
+        } else if (getOperation() == EQ) {
+            return Double.isNaN(ld) && Double.isNaN(rd);
+        }
+    }
+    
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
