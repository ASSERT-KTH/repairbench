diff --git a/tmp/ca1161f2-7f60-4653-98f1-11dc27960b7d_buggy.java b/tmp/21fc496c-e301-4c39-8811-1e73d6051991_fixed.java
index e69de29..580271d 100644
--- a/tmp/ca1161f2-7f60-4653-98f1-11dc27960b7d_buggy.java
+++ b/tmp/21fc496c-e301-4c39-8811-1e73d6051991_fixed.java
@@ -0,0 +1,89 @@
+private class PrefixRangeMap extends AbstractBoundedMap {
+    private final String prefix;
+    
+    private PrefixRangeMap(final String prefix) {
+        super(prefixEnd(prefix), false);
+        this.prefix = prefix;
+    }
+    
+    @Override
+    public boolean containsKey(final Object key) {
+        if (key == null) {
+            return false;
+        }
+        if (!(key instanceof String)) {
+            return false;
+        }
+        final String s = (String) key;
+        return s.startsWith(prefix) && PatriciaTrie.this.containsKey(key);
+    }
+    
+    @Override
+    protected Set<Entry<K, V>> createEntrySet() {
+        return new PrefixRangeEntrySet();
+    }
+    
+    @Override
+    public K firstKey() {
+        return createTrieSet().first();
+    }
+    
+    @Override
+    protected SortedMap<K, V> createRangeMap(final K fromKey, final boolean fromInclusive,
+                                             final K toKey, final boolean toInclusive) {
+        return new RangeEntryMap(fromKey, fromInclusive, toKey, toInclusive);
+    }
+    
+    private class PrefixRangeEntrySet extends AbstractRangeEntrySet {
+        @Override
+        public Iterator<Entry<K, V>> iterator() {
+            return new PrefixRangeEntryIterator();
+        }
+        
+        @Override
+        public int size() {
+            int size = 0;
+            for (final Iterator<?> it = iterator(); it.hasNext(); it.next()) {
+                size++;
+            }
+            return size;
+        }
+        
+        @Override
+        public void clear() {
+            final Iterator<Entry<K, V>> it = iterator();
+            while (it.hasNext()) {
+                it.next();
+                it.remove();
+            }
+        }
+    }
+    
+    private class PrefixRangeEntryIterator extends AbstractRangeIterator {
+        @Override
+        protected void setNext() {
+            if (next.getKey() == null || !((String) next.getKey()).startsWith(prefix)) {
+                next = null;
+                return;
+            }
+            next = findNext(next);
+        }
+        
+        @Override
+        protected Entry<K, V> findNext(final Entry<K, V> prior) {
+            if (prior == null) {
+                throw new IllegalArgumentException();
+            }
+            return getNextEntry(prior.getKey());
+        }
+        
+        @Override
+        protected Entry<K, V> findFirst() {
+            final Entry<K, V> entry = getMatchingEntry(prefix);
+            if (entry != null && ((String) entry.getKey()).startsWith(prefix)) {
+                return entry;
+            }
+            return getNextEntry(prefix);
+        }
+    }
+}
\ No newline at end of file
