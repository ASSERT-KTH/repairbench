diff --git a/tmp/fdefa87a-c9a3-46e1-bfe6-cf1b33bf10d1_buggy.java b/tmp/d9ddb6ed-53d8-4290-88ac-f9339be47b60_fixed.java
index dc93be3..f22c4fa 100644
--- a/tmp/fdefa87a-c9a3-46e1-bfe6-cf1b33bf10d1_buggy.java
+++ b/tmp/d9ddb6ed-53d8-4290-88ac-f9339be47b60_fixed.java
@@ -1,14 +1,25 @@
 Element insert(Token.StartTag startTag) {
+    Tag tag = Tag.valueOf(startTag.name());
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
+        if (tag.isKnownTag() && !tag.isEmpty()) {
+            // handle as a normal tag, with an end tag coming
+            Element el = new Element(tag, baseUri, startTag.attributes);
+            insert(el);
+            return el;
+        } else {
+            // unknown or empty tag, handle as self-closing
             Element el = insertEmpty(startTag);
+            if (!tag.isKnownTag()) {
                 stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+                tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in
+            }
             return el;
         }
+    }
     
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+    Element el = new Element(tag, baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
