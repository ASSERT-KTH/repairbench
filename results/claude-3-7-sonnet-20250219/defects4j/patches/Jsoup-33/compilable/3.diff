diff --git a/tmp/418abf9f-138d-4bc2-9c90-3c12c4e068ca_buggy.java b/tmp/7de39b17-382e-47da-b957-c01d27682741_fixed.java
index dc93be3..eadec60 100644
--- a/tmp/418abf9f-138d-4bc2-9c90-3c12c4e068ca_buggy.java
+++ b/tmp/7de39b17-382e-47da-b957-c01d27682741_fixed.java
@@ -1,14 +1,21 @@
 Element insert(Token.StartTag startTag) {
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
         Element el = insertEmpty(startTag);
+        if (!el.tag().isKnownTag() || el.tag().isEmpty()) {
+            // For unknown tags or known empty tags, keep them self-closing
+            return el;
+        } else {
+            // For known non-empty tags that are self-closed in HTML, add them to the stack
+            // and emit an end tag to ensure proper state exit
             stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            tokeniser.emit(new Token.EndTag(el.tagName()));
             return el;
         }
+    }
     
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
