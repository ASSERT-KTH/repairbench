diff --git a/tmp/b56f1782-f141-44c8-822f-ac22d0243778_buggy.java b/tmp/25e79d44-a04f-48f5-943e-61e91c8321e0_fixed.java
index dc93be3..2779f41 100644
--- a/tmp/b56f1782-f141-44c8-822f-ac22d0243778_buggy.java
+++ b/tmp/25e79d44-a04f-48f5-943e-61e91c8321e0_fixed.java
@@ -1,14 +1,21 @@
 Element insert(Token.StartTag startTag) {
+    Tag tag = Tag.valueOf(startTag.name());
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
+        if (tag.isKnownTag() && !tag.isEmpty()) {
+            // handle self-closing for non-empty known tags
+            Element el = new Element(tag, baseUri, startTag.attributes);
+            insert(el);
+            return el;
+        } else {
+            // unknown or genuinely empty tag, e.g. <img/>
             Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
             return el;
         }
+    }
     
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+    Element el = new Element(tag, baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
