diff --git a/tmp/86ad1780-6664-4c45-be33-016dd13706c6_buggy.java b/tmp/88c61c19-e588-4f64-a81a-78880f9f6937_fixed.java
index dc93be3..8730c2a 100644
--- a/tmp/86ad1780-6664-4c45-be33-016dd13706c6_buggy.java
+++ b/tmp/88c61c19-e588-4f64-a81a-78880f9f6937_fixed.java
@@ -1,14 +1,19 @@
 Element insert(Token.StartTag startTag) {
+    Tag tag = Tag.valueOf(startTag.name());
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
+        if (tag.isKnownTag() && !tag.isEmpty()) { // known, non-empty tag, force an end tag
+            Element el = new Element(tag, baseUri, startTag.attributes);
+            insert(el);
+            return el;
+        } else { // unknown or empty tag, allow self closing
             Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
             return el;
         }
+    }
     
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+    Element el = new Element(tag, baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
