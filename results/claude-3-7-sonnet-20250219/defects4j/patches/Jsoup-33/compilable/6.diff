diff --git a/tmp/ee403de3-5cc4-4188-9112-e723ccf8acb8_buggy.java b/tmp/ebf0ec18-9396-4d30-8e52-f41dd49c841f_fixed.java
index dc93be3..1decd92 100644
--- a/tmp/ee403de3-5cc4-4188-9112-e723ccf8acb8_buggy.java
+++ b/tmp/ebf0ec18-9396-4d30-8e52-f41dd49c841f_fixed.java
@@ -1,14 +1,20 @@
 Element insert(Token.StartTag startTag) {
+    Tag tag = Tag.valueOf(startTag.name());
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        if (tag.isKnownTag() && !tag.isEmpty()) {
+            // treat self-closing tags of non-empty known tags as open tags with empty bodies
+            Element el = new Element(tag, baseUri, startTag.attributes);
+            insert(el);
             return el;
+        } else {
+            // self-closing unknown or empty known tag
+            return insertEmpty(startTag);
+        }
     }
     
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+    Element el = new Element(tag, baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
