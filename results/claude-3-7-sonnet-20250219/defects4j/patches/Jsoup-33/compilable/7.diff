diff --git a/tmp/ef92a605-c8e5-4c93-86c9-b31ef7aa0751_buggy.java b/tmp/5758721b-7e3f-47b7-81ba-dad29b44707c_fixed.java
index dc93be3..b8935b7 100644
--- a/tmp/ef92a605-c8e5-4c93-86c9-b31ef7aa0751_buggy.java
+++ b/tmp/5758721b-7e3f-47b7-81ba-dad29b44707c_fixed.java
@@ -1,14 +1,24 @@
 Element insert(Token.StartTag startTag) {
+    Tag tag = Tag.valueOf(startTag.name());
+    
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
+        if (tag.isKnownTag() && !tag.isEmpty()) {
+            // handle known tags that shouldn't be self-closing by ignoring the self-closing flag
+            Element el = new Element(tag, baseUri, startTag.attributes);
+            insert(el);
+            return el;
+        } else {
+            // unknown or correctly self-closing tags
             Element el = insertEmpty(startTag);
             stack.add(el);
             tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
             return el;
         }
+    }
     
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+    Element el = new Element(tag, baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
