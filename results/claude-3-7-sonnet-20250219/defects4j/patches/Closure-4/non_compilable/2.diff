diff --git a/tmp/89a84ffb-5af7-4ff8-be50-fe77e5065f27_buggy.java b/tmp/57329f9a-9832-4843-8d85-f4cd4f89b4ce_fixed.java
index d6a560a..64cbc16 100644
--- a/tmp/89a84ffb-5af7-4ff8-be50-fe77e5065f27_buggy.java
+++ b/tmp/57329f9a-9832-4843-8d85-f4cd4f89b4ce_fixed.java
@@ -1,33 +1,39 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
+    boolean inResolution = isBeingResolved();
+    setBeingResolved(true);
+    try {
       boolean resolved = resolveViaRegistry(t, enclosing);
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
       }
 
       if (resolved) {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
         return registry.isLastGeneration() ?
             getReferencedType() : this;
       }
 
       resolveViaProperties(t, enclosing);
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
       }
 
       super.resolveInternal(t, enclosing);
       if (isResolved()) {
         finishPropertyContinuations();
       }
       return registry.isLastGeneration() ?
           getReferencedType() : this;
+    } finally {
+      setBeingResolved(inResolution);
+    }
   }
\ No newline at end of file
