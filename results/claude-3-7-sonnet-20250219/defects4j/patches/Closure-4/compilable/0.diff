diff --git a/tmp/bd513160-151a-4cf1-b3a3-841314168613_buggy.java b/tmp/274c465c-1d10-43d3-80f1-9c5b313bd577_fixed.java
index d6a560a..dbef6b4 100644
--- a/tmp/bd513160-151a-4cf1-b3a3-841314168613_buggy.java
+++ b/tmp/274c465c-1d10-43d3-80f1-9c5b313bd577_fixed.java
@@ -1,33 +1,37 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
   // TODO(user): Investigate whether it is really necessary to keep two
   // different mechanisms for resolving named types, and if so, which order
   // makes more sense. Now, resolution via registry is first in order to
   // avoid triggering the warnings built into the resolution via properties.
+  
+  // Check for cycles early before doing any resolution
+  if (detectImplicitPrototypeCycle()) {
+    handleTypeCycle(t);
+    return this;
+  }
+  
   boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
   if (resolved) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
 
   resolveViaProperties(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    return this;
   }
 
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
     finishPropertyContinuations();
   }
   return registry.isLastGeneration() ?
       getReferencedType() : this;
 }
\ No newline at end of file
