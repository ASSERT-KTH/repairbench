diff --git a/tmp/b33d9afc-5e19-4120-91f6-7f236cf8aa6b_buggy.java b/tmp/4e7cdf8e-e6af-45e7-9dbb-f5c0cb2eeaeb_fixed.java
index d6a560a..e64ae4b 100644
--- a/tmp/b33d9afc-5e19-4120-91f6-7f236cf8aa6b_buggy.java
+++ b/tmp/4e7cdf8e-e6af-45e7-9dbb-f5c0cb2eeaeb_fixed.java
@@ -1,33 +1,39 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
   // TODO(user): Investigate whether it is really necessary to keep two
   // different mechanisms for resolving named types, and if so, which order
   // makes more sense. Now, resolution via registry is first in order to
   // avoid triggering the warnings built into the resolution via properties.
   boolean resolved = resolveViaRegistry(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    super.resolveInternal(t, enclosing);
+    return registry.isLastGeneration() ?
+        getReferencedType() : this;
   }
 
   if (resolved) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
 
   resolveViaProperties(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    super.resolveInternal(t, enclosing);
+    return registry.isLastGeneration() ?
+        getReferencedType() : this;
   }
 
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
     finishPropertyContinuations();
   }
   return registry.isLastGeneration() ?
       getReferencedType() : this;
 }
\ No newline at end of file
