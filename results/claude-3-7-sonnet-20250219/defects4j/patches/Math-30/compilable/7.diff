diff --git a/tmp/250253e0-5499-4d1d-8a1a-3aa8c65444a9_buggy.java b/tmp/8e19545c-0cd4-43f7-a751-bf6c0afa4e6a_fixed.java
index 3c69e10..d8d2697 100644
--- a/tmp/250253e0-5499-4d1d-8a1a-3aa8c65444a9_buggy.java
+++ b/tmp/8e19545c-0cd4-43f7-a751-bf6c0afa4e6a_fixed.java
@@ -1,27 +1,29 @@
 /**
  * @param Umin smallest Mann-Whitney U value
  * @param n1 number of subjects in first sample
  * @param n2 number of subjects in second sample
  * @return two-sided asymptotic p-value
  * @throws ConvergenceException if the p-value can not be computed
  * due to a convergence error
  * @throws MaxCountExceededException if the maximum number of
  * iterations is exceeded
  */
 private double calculateAsymptoticPValue(final double Umin,
                                          final int n1,
                                          final int n2)
     throws ConvergenceException, MaxCountExceededException {
 
     final int n1n2prod = n1 * n2;
 
     // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
     final double EU = n1n2prod / 2.0;
     final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
-        final double z = (Umin - EU) / FastMath.sqrt(VarU);
+    // The z statistic needs to use the absolute difference for a two-sided test
+    final double z = Math.abs(Umin - EU) / FastMath.sqrt(VarU);
 
     final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+    // For a two-sided test, we use 2 * the upper tail probability
+    return 2 * (1 - standardNormal.cumulativeProbability(z));
 }
\ No newline at end of file
