diff --git a/tmp/ff3832ab-93d6-40d1-90ea-86b27354bab9_buggy.java b/tmp/4b76f606-b42c-4ff9-811a-cffac4b582ac_fixed.java
index 3c69e10..17f6261 100644
--- a/tmp/ff3832ab-93d6-40d1-90ea-86b27354bab9_buggy.java
+++ b/tmp/4b76f606-b42c-4ff9-811a-cffac4b582ac_fixed.java
@@ -1,27 +1,28 @@
     /**
      * @param Umin smallest Mann-Whitney U value
      * @param n1 number of subjects in first sample
      * @param n2 number of subjects in second sample
      * @return two-sided asymptotic p-value
      * @throws ConvergenceException if the p-value can not be computed
      * due to a convergence error
      * @throws MaxCountExceededException if the maximum number of
      * iterations is exceeded
      */
     private double calculateAsymptoticPValue(final double Umin,
                                              final int n1,
                                              final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
         final int n1n2prod = n1 * n2;
 
         // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
         final double EU = n1n2prod / 2.0;
         final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
-        final double z = (Umin - EU) / FastMath.sqrt(VarU);
+        // The test statistic is Z = (U - EU) / sigma, where U is the maximum of U1 and U2
+        final double z = Math.abs(Umin - EU) / FastMath.sqrt(VarU);
 
         final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+        return 2 * standardNormal.cumulativeProbability(-z);
     }
\ No newline at end of file
