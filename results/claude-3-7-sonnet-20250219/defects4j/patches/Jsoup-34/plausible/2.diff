diff --git a/tmp/474ca222-98c0-46dd-929b-e51ca5fc2117_buggy.java b/tmp/f6b4214a-9f72-4a83-858d-aa4a40d3cdb8_fixed.java
index 21f64c6..c123700 100644
--- a/tmp/474ca222-98c0-46dd-929b-e51ca5fc2117_buggy.java
+++ b/tmp/f6b4214a-9f72-4a83-858d-aa4a40d3cdb8_fixed.java
@@ -1,23 +1,31 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
+    if (seq.length() == 0)
+        return 0;
+    
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
         // scan to first instance of startchar:
-            if (startChar != input[offset])
+        if (startChar != input[offset]) {
             while(++offset < length && startChar != input[offset]);
+            if (offset >= length)
+                break;
+        }
+        
         int i = offset + 1;
         int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        if (last <= length) { // Make sure the sequence can fit within remaining input
+            int j = 1;
+            for (; j < seq.length() && i < length && seq.charAt(j) == input[i]; i++, j++);
+            if (j == seq.length()) // found full sequence
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
