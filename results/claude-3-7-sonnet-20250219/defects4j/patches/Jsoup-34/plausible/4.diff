diff --git a/tmp/ff4a423a-effd-455c-804a-75a497a1fd4f_buggy.java b/tmp/37a598ef-8ebd-4f12-9b50-2cca96f8e2c9_fixed.java
index 21f64c6..4310844 100644
--- a/tmp/ff4a423a-effd-455c-804a-75a497a1fd4f_buggy.java
+++ b/tmp/37a598ef-8ebd-4f12-9b50-2cca96f8e2c9_fixed.java
@@ -1,23 +1,34 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
+    if (seq.length() == 0)
+        return 0;
+    
     char startChar = seq.charAt(0);
+    int seqLen = seq.length();
+    
     for (int offset = pos; offset < length; offset++) {
         // scan to first instance of startchar:
-            if (startChar != input[offset])
+        if (startChar != input[offset]) {
             while(++offset < length && startChar != input[offset]);
+            if (offset >= length)
+                break;
+        }
+        
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        int last = i + seqLen - 1;
+        
+        if (last <= length) { // check if the full sequence could potentially fit
+            int j = 1;
+            for (; j < seqLen && i < length && seq.charAt(j) == input[i]; i++, j++);
+            if (j == seqLen) // found full sequence
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
