diff --git a/tmp/56315da1-4d23-40ef-84f1-ac7d9d060119_buggy.java b/tmp/eabb187f-b5b5-476b-85ef-5e573764c035_fixed.java
index 21f64c6..efaa4be 100644
--- a/tmp/56315da1-4d23-40ef-84f1-ac7d9d060119_buggy.java
+++ b/tmp/eabb187f-b5b5-476b-85ef-5e573764c035_fixed.java
@@ -1,23 +1,33 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
+    if (seq.length() == 0)
+        return 0;
+    
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+    int searchLength = length - seq.length() + 1;
+    
+    for (int offset = pos; offset < searchLength; offset++) {
         // scan to first instance of startchar:
         if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            continue;
+            
+        // found first char, test rest of sequence
+        boolean match = true;
+        for (int i = 1; i < seq.length(); i++) {
+            if (input[offset + i] != seq.charAt(i)) {
+                match = false;
+                break;
+            }
+        }
+        
+        if (match)
             return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
