diff --git a/tmp/523c87f9-ed46-4ed4-8942-81e93c6e5d8f_buggy.java b/tmp/3244b682-d71f-47ed-8dd2-38aef7b813ce_fixed.java
index 21f64c6..a4e9eeb 100644
--- a/tmp/523c87f9-ed46-4ed4-8942-81e93c6e5d8f_buggy.java
+++ b/tmp/3244b682-d71f-47ed-8dd2-38aef7b813ce_fixed.java
@@ -1,23 +1,39 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
+    int seqLength = seq.length();
+    
+    // empty sequence check
+    if (seqLength == 0)
+        return 0;
+    
+    outer:
     for (int offset = pos; offset < length; offset++) {
         // scan to first instance of startchar:
-            if (startChar != input[offset])
+        if (startChar != input[offset]) {
             while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            if (offset >= length) // reached the end without finding start char
+                break;
+        }
+        
+        // check if we have enough room left to match the full sequence
+        if (offset + seqLength > length)
+            break;
+        
+        // attempt to match the full sequence
+        for (int j = 1; j < seqLength; j++) {
+            if (input[offset + j] != seq.charAt(j))
+                continue outer;
+        }
+        
+        // found full sequence
         return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
