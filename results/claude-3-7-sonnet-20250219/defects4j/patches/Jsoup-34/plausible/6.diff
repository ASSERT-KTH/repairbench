diff --git a/tmp/248cda20-9e91-4777-a868-47e88ccf30f6_buggy.java b/tmp/0e501a7d-ee06-49f6-841f-51c0afe3e83b_fixed.java
index 21f64c6..bd6b93a 100644
--- a/tmp/248cda20-9e91-4777-a868-47e88ccf30f6_buggy.java
+++ b/tmp/0e501a7d-ee06-49f6-841f-51c0afe3e83b_fixed.java
@@ -1,23 +1,39 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
+    int seqLen = seq.length();
+    
+    // Empty sequence or too long for the remaining input
+    if (seqLen == 0 || length - pos < seqLen)
+        return -1;
+        
+    outer:
     for (int offset = pos; offset < length; offset++) {
         // scan to first instance of startchar:
-            if (startChar != input[offset])
+        if (startChar != input[offset]) {
             while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            if (offset >= length) // reached the end without finding startChar
+                break;
+        }
+        
+        // Check if there's enough room for the full sequence
+        if (offset + seqLen > length)
+            break;
+            
+        // Try to match the full sequence
+        for (int j = 1; j < seqLen; j++) {
+            if (seq.charAt(j) != input[offset + j])
+                continue outer;
+        }
+        
+        // Found full sequence
         return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
