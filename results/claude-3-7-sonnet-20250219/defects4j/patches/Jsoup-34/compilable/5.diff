diff --git a/tmp/094203d4-a12c-4e6b-b3e7-1efded60ce77_buggy.java b/tmp/89d63322-f49b-4bbd-8802-a285f327f53f_fixed.java
index 21f64c6..4e1a1d1 100644
--- a/tmp/094203d4-a12c-4e6b-b3e7-1efded60ce77_buggy.java
+++ b/tmp/89d63322-f49b-4bbd-8802-a285f327f53f_fixed.java
@@ -1,23 +1,39 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
+    int seqLength = seq.length();
+    
+    // If the sequence is longer than the remaining input, it can't be found
+    if (seqLength > length - pos)
+        return -1;
+        
     for (int offset = pos; offset < length; offset++) {
         // scan to first instance of startchar:
-            if (startChar != input[offset])
+        if (startChar != input[offset]) {
             while(++offset < length && startChar != input[offset]);
+        }
+        
+        if (offset >= length) 
+            break;
+            
+        // Check if there's enough room for the full sequence
+        if (offset + seqLength > length)
+            break;
+            
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        int last = i + seqLength - 1;
+        
+        int j = 1;
+        for (; i < last && j < seqLength && seq.charAt(j) == input[i]; i++, j++);
+        
+        if (j == seqLength - 1) // found full sequence
             return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
