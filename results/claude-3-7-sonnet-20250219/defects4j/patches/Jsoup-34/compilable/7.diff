diff --git a/tmp/369208d4-a451-4902-8881-472ccb57fcf3_buggy.java b/tmp/a3ef6657-2f28-4a9f-a939-9fabba2668cf_fixed.java
index 21f64c6..7094fe6 100644
--- a/tmp/369208d4-a451-4902-8881-472ccb57fcf3_buggy.java
+++ b/tmp/a3ef6657-2f28-4a9f-a939-9fabba2668cf_fixed.java
@@ -1,23 +1,26 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
         // scan to first instance of startchar:
         if (startChar != input[offset])
             while(++offset < length && startChar != input[offset]);
+        if (offset < length) {
             int i = offset + 1;
             int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            if (last <= length) { // Check if the end of the sequence would be within bounds
+                int j = 1;
+                for (; i < last && j < seq.length() && seq.charAt(j) == input[i]; i++, j++);
+                if (i == last && j == seq.length() - 1 && seq.charAt(j) == input[i]) // found full sequence
                     return offset - pos;
             }
         }
+    }
     return -1;
 }
\ No newline at end of file
