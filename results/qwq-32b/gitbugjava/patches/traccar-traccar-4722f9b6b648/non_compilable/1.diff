diff --git a/tmp/44569906-3c79-47f4-a29d-89bc7de9c75d_buggy.java b/tmp/a8b0e81f-8d8e-4cf4-b3ce-b66f3f60c869_fixed.java
index c84c989..0df695f 100644
--- a/tmp/44569906-3c79-47f4-a29d-89bc7de9c75d_buggy.java
+++ b/tmp/a8b0e81f-8d8e-4cf4-b3ce-b66f3f60c869_fixed.java
@@ -1,27 +1,38 @@
 private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
     buf.readUnsignedShortLE(); // length
 
     buf.skipBytes(3); // identification header
     buf.readUnsignedIntLE(); // index
 
+    // Advance buffer after reading device ID
+    String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
+    buf.skipBytes(15); 
     DeviceSession deviceSession = getDeviceSession(
-                channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));
+            channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     buf.readUnsignedByte(); // session status
     buf.skipBytes(4); // reserved
-        buf.readUnsignedIntLE(); // date and time
+
+    long time = buf.readUnsignedIntLE(); // date and time
+    position.setTime(time * 1000L); // assuming timestamp is in seconds since epoch
 
     buf.skipBytes(23); // coordinates block
 
     buf.skipBytes(3); // data tag header
     decodeMinimalDataSet(position, buf);
 
     return position;
 }
+
+// Explanation:
+// Added buf.skipBytes(15) after reading the device ID to properly advance the buffer reader index,
+// avoiding overlapping reads with subsequent fields.  
+// Captured the timestamp and set it to position.setTime() to resolve the time mismatch error. 
+// Multiplied by 1000L to convert from seconds to milliseconds if the timestamp is in seconds.
\ No newline at end of file
