diff --git a/tmp/55186d76-0373-4cb9-ab50-4c016e9dc75f_buggy.java b/tmp/f490803d-afda-443b-81be-0913c169ea68_fixed.java
index 0a8838d..1d5978b 100644
--- a/tmp/55186d76-0373-4cb9-ab50-4c016e9dc75f_buggy.java
+++ b/tmp/f490803d-afda-443b-81be-0913c169ea68_fixed.java
@@ -1,61 +1,70 @@
 private List<Position> parseData(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {
     List<Position> positions = new LinkedList<>();
 
     if (!connectionless) {
         buf.readUnsignedInt(); // data length
     }
 
-        int codec = buf.readUnsignedByte();
-        int count = buf.readUnsignedByte();
+    // Read location packet ID first
+    int packetId = buf.readUnsignedByte(); // First byte after the data length skip
+    if (packetId != locationPacketId) { // Ensure packet ID matches the provided parameter
+        return null; 
+    }
 
+    int codec = buf.readUnsignedByte(); // Second byte is the correct codec value
+    int count = buf.readUnsignedByte(); // Third byte is the count
+
+    // Continuation of existing code for device session and position decoding
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
     String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
 
         position.setDeviceId(deviceSession.getDeviceId());
         position.setValid(true);
 
         if (codec == CODEC_13) {
             buf.readUnsignedByte(); // type
-                int length = buf.readInt() - 4;
+            int length = buf.readInt() - 4; // length of payload, excluding type and 4 bytes for length itself
             getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));
             if (isPrintable(buf, length)) {
                 position.set(Position.KEY_RESULT,
                         buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
             } else {
                 position.set(Position.KEY_RESULT,
                         ByteBufUtil.hexDump(buf.readSlice(length)));
             }
         } else if (codec == CODEC_12) {
             decodeSerial(channel, remoteAddress, deviceSession, position, buf);
         } else {
             decodeLocation(position, buf, codec, model);
         }
 
+        // Continue adding positions if valid or has attributes (now the correct paths would set attributes)
         if (!position.getOutdated() || !position.getAttributes().isEmpty()) {
             positions.add(position);
         }
     }
 
+    // Generating response as before (assuming codec was read correctly now)
     if (channel != null && codec != CODEC_12 && codec != CODEC_13) {
         ByteBuf response = Unpooled.buffer();
         if (connectionless) {
             response.writeShort(5);
             response.writeShort(0);
             response.writeByte(0x01);
             response.writeByte(locationPacketId);
             response.writeByte(count);
         } else {
             response.writeInt(count);
         }
         channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
     }
 
     return positions.isEmpty() ? null : positions;
 }
\ No newline at end of file
