diff --git a/tmp/ea620c2a-106b-4ac0-a46e-f8b257fdbfca_buggy.java b/tmp/c4f5d85f-a89f-4f0f-b0e7-bc3424865ca4_fixed.java
index 6d50be3..787fba8 100644
--- a/tmp/ea620c2a-106b-4ac0-a46e-f8b257fdbfca_buggy.java
+++ b/tmp/c4f5d85f-a89f-4f0f-b0e7-bc3424865ca4_fixed.java
@@ -1,194 +1,210 @@
 private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
     List<Position> positions = new LinkedList<>();
 
     buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
     String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
     buf.skipBytes(1 + 3 + 1);
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
     buf.readUnsignedIntLE(); // remaining cache
     int count = buf.readUnsignedShortLE();
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
-            buf.readUnsignedShortLE(); // length
-            buf.readUnsignedShortLE(); // index
+        // Read length and index for current position
+        int positionLength = buf.readUnsignedShortLE();
+        int index = buf.readUnsignedShortLE();
 
-            int paramCount = buf.readUnsignedByte();
+        // Create a slice for the current position data to avoid exceeding bounds
+        int dataAvailable = positionLength - 4; // Subtract 4 bytes for length and index
+        if (buf.readableBytes() < dataAvailable) {
+            break; // Insufficient data to proceed
+        }
+        ByteBuf posData = buf.readSlice(dataAvailable);
+        try {
+            // Process first parameters set
+            int paramCount = posData.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
-                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                boolean extension = posData.getUnsignedByte(posData.readerIndex()) == 0xFE;
+                int id = extension ? posData.readUnsignedShort() : posData.readUnsignedByte();
                 switch (id) {
                     case 0x01:
-                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());
+                        position.set(Position.KEY_EVENT, posData.readUnsignedByte());
                         break;
                     case 0x05:
-                        position.setValid(buf.readUnsignedByte() > 0);
+                        position.setValid(posData.readUnsignedByte() > 0);
                         break;
                     case 0x06:
-                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                        position.set(Position.KEY_SATELLITES, posData.readUnsignedByte());
                         break;
                     case 0x07:
-                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                        position.set(Position.KEY_RSSI, posData.readUnsignedByte());
                         break;
                     case 0x14:
-                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
+                        position.set(Position.KEY_OUTPUT, posData.readUnsignedByte());
                         break;
                     case 0x15:
-                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());
+                        position.set(Position.KEY_INPUT, posData.readUnsignedByte());
                         break;
                     case 0x47:
-                        int lockState = buf.readUnsignedByte();
+                        int lockState = posData.readUnsignedByte();
                         if (lockState > 0) {
                             position.set(Position.KEY_LOCK, lockState == 2);
                         }
                         break;
-                    case 0x97:
-                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
-                        break;
-                    case 0x9D:
-                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
-                        break;
                     case 0xFE69:
-                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                        position.set(Position.KEY_BATTERY_LEVEL, posData.readUnsignedByte());
                         break;
                     default:
-                        buf.readUnsignedByte();
+                        posData.readUnsignedByte();
                         break;
                 }
             }
 
-            paramCount = buf.readUnsignedByte();
+            // Process second parameters set
+            paramCount = posData.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
-                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                boolean extension = posData.getUnsignedByte(posData.readerIndex()) == 0xFE;
+                int id = extension ? posData.readUnsignedShort() : posData.readUnsignedByte();
                 switch (id) {
                     case 0x08:
-                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
+                        position.setSpeed(UnitsConverter.knotsFromKph(posData.readUnsignedShortLE()));
                         break;
                     case 0x09:
-                        position.setCourse(buf.readUnsignedShortLE());
+                        position.setCourse(posData.readUnsignedShortLE());
                         break;
                     case 0x0A:
-                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
+                        position.set(Position.KEY_HDOP, posData.readUnsignedShortLE());
                         break;
                     case 0x0B:
-                        position.setAltitude(buf.readShortLE());
+                        position.setAltitude(posData.readShortLE());
                         break;
                     case 0x16:
-                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
+                        position.set(Position.PREFIX_ADC + 1, posData.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x19:
-                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
+                        position.set(Position.KEY_BATTERY, posData.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x1A:
-                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
+                        position.set(Position.KEY_POWER, posData.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x40:
-                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
+                        position.set(Position.KEY_EVENT, posData.readUnsignedShortLE());
                         break;
                     case 0x91:
                     case 0x92:
-                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
+                        position.set(Position.KEY_OBD_SPEED, posData.readUnsignedShortLE());
                         break;
                     case 0x98:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
+                        position.set(Position.KEY_FUEL_USED, posData.readUnsignedShortLE());
                         break;
                     case 0x99:
-                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
+                        position.set(Position.KEY_RPM, posData.readUnsignedShortLE());
                         break;
                     case 0x9C:
-                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
+                        position.set(Position.KEY_COOLANT_TEMP, posData.readUnsignedShortLE());
                         break;
                     case 0x9F:
-                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
+                        position.set(Position.KEY_TEMP + 1, posData.readUnsignedShortLE());
                         break;
                     case 0xC9:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
+                        position.set(Position.KEY_FUEL_CONSUMPTION, posData.readUnsignedShortLE());
                         break;
                     default:
-                        buf.readUnsignedShortLE();
+                        posData.readUnsignedShortLE();
                         break;
                 }
             }
 
-            paramCount = buf.readUnsignedByte();
+            // Process third parameters set
+            paramCount = posData.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
-                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                boolean extension = posData.getUnsignedByte(posData.readerIndex()) == 0xFE;
+                int id = extension ? posData.readUnsignedShort() : posData.readUnsignedByte();
                 switch (id) {
                     case 0x02:
-                        position.setLatitude(buf.readIntLE() * 0.000001);
+                        position.setLatitude(posData.readIntLE() * 0.000001);
                         break;
                     case 0x03:
-                        position.setLongitude(buf.readIntLE() * 0.000001);
+                        position.setLongitude(posData.readIntLE() * 0.000001);
                         break;
                     case 0x04:
-                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
+                        position.setTime(new Date((946684800 + posData.readUnsignedIntLE()) * 1000)); // 2000-01-01
                         break;
                     case 0x0C:
                     case 0x9B:
-                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
+                        position.set(Position.KEY_ODOMETER, posData.readUnsignedIntLE());
                         break;
                     case 0x0D:
-                        position.set("runtime", buf.readUnsignedIntLE());
+                        position.set("runtime", posData.readUnsignedIntLE());
                         break;
                     case 0x25:
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
+                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(posData.readUnsignedIntLE()));
                         break;
                     case 0xA0:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
+                        position.set(Position.KEY_FUEL_USED, posData.readUnsignedIntLE() * 0.001);
                         break;
                     case 0xA2:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
+                        position.set(Position.KEY_FUEL_CONSUMPTION, posData.readUnsignedIntLE() * 0.01);
                         break;
                     default:
-                        buf.readUnsignedIntLE();
+                        posData.readUnsignedIntLE();
                         break;
                 }
             }
 
-            paramCount = buf.readUnsignedByte();
+            // Process fourth parameters set
+            paramCount = posData.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
-                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
-                int length = buf.readUnsignedByte();
+                boolean extension = posData.getUnsignedByte(posData.readerIndex()) == 0xFE;
+                int id = extension ? posData.readUnsignedShort() : posData.readUnsignedByte();
+                int length = posData.readUnsignedByte();
                 switch (id) {
                     case 0x2A:
                     case 0x2B:
                     case 0x2C:
                     case 0x2D:
                     case 0x2E:
                     case 0x2F:
                     case 0x30:
                     case 0x31:
-                        buf.readUnsignedByte(); // label
-                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                        posData.readUnsignedByte(); // label
+                        position.set(Position.PREFIX_TEMP + (id - 0x2A), posData.readShortLE() * 0.01);
                         break;
                     case 0xFE31:
-                        buf.readUnsignedByte(); // alarm protocol
-                        buf.readUnsignedByte(); // alarm type
-                        buf.skipBytes(length - 2);
+                        posData.readUnsignedByte(); // alarm protocol
+                        posData.readUnsignedByte(); // alarm type
+                        posData.skipBytes(length - 2);
                         break;
                     case 0xFEA8:
-                        buf.readUnsignedByte(); // battery status
-                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                        buf.readUnsignedByte(); // battery alert
+                        posData.readUnsignedByte(); // battery status
+                        position.set(Position.KEY_BATTERY_LEVEL, posData.readUnsignedByte());
+                        posData.readUnsignedByte(); // battery alert
                         break;
                     default:
-                        buf.skipBytes(length);
+                        posData.skipBytes(length);
                         break;
                 }
             }
 
+            // Ensure position data slice is exhausted (This might not be strictly necessary, but helps catch errors)
+            if (posData.readerIndex() != posData.writerIndex()) {
+                if (LOG.isWarnEnabled()) {
+                    LOG.warn("Partial data consumed for position binary in: " + HexDump.hexDump(posData.array()));
+                }
+            }
+
             positions.add(position);
+        } finally {
+            posData.release();
+        }
     }
 
     return positions;
 }
\ No newline at end of file
