diff --git a/tmp/984041a1-6075-41da-bd94-cb730f9b717d_buggy.java b/tmp/50b8eb64-08f2-4475-a34d-6eab3ebd583d_fixed.java
index 6d50be3..c15c40c 100644
--- a/tmp/984041a1-6075-41da-bd94-cb730f9b717d_buggy.java
+++ b/tmp/50b8eb64-08f2-4475-a34d-6eab3ebd583d_fixed.java
@@ -1,194 +1,253 @@
 private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
     List<Position> positions = new LinkedList<>();
 
-        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
+    // Find and skip the initial comma
+    int commaIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+    if (commaIndex == -1) {
+        return null; // No comma found, invalid message
+    }
+    buf.readerIndex(commaIndex + 1);
+
     String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
+
+    // Check remaining bytes before skipping after IMEI
+    if (buf.readableBytes() < 1 + 3 + 1) {
+        return null; // Not enough bytes to skip remaining fields
+    }
     buf.skipBytes(1 + 3 + 1);
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
     buf.readUnsignedIntLE(); // remaining cache
     int count = buf.readUnsignedShortLE();
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
+        // Skip the header fields (length & index) for each position
         buf.readUnsignedShortLE(); // length
         buf.readUnsignedShortLE(); // index
 
+        // First parameter group
         int paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+            int id = extension ? buf.readUnsignedShortLE() : buf.readUnsignedByte();
             switch (id) {
                 case 0x01:
                     position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                     break;
                 case 0x05:
-                        position.setValid(buf.readUnsignedByte() > 0);
-                        break;
-                    case 0x06:
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
+                case 0x06:
+                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                    break;
                 case 0x07:
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     break;
                 case 0x14:
                     position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                     break;
                 case 0x15:
                     position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                     break;
                 case 0x47:
                     int lockState = buf.readUnsignedByte();
                     if (lockState > 0) {
                         position.set(Position.KEY_LOCK, lockState == 2);
                     }
                     break;
-                    case 0x97:
-                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
-                        break;
-                    case 0x9D:
-                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
-                        break;
                 case 0xFE69:
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     break;
                 default:
-                        buf.readUnsignedByte();
+                    buf.readUnsignedByte(); // Assume 1 byte data
                     break;
             }
         }
 
+        // Second parameter group
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+            int id = extension ? buf.readUnsignedShortLE() : buf.readUnsignedByte();
             switch (id) {
                 case 0x08:
-                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
-                        break;
-                    case 0x09:
                     position.setCourse(buf.readUnsignedShortLE());
                     break;
+                case 0x09:
+                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
+                    break;
                 case 0x0A:
                     position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
                     break;
                 case 0x0B:
                     position.setAltitude(buf.readShortLE());
                     break;
                 case 0x16:
                     position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x19:
-                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
+                    position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                     break;
                 case 0x1A:
                     position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x40:
                     position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
                     break;
                 case 0x91:
                 case 0x92:
                     position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
                     break;
-                    case 0x98:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
+                case 0x97:
+                    position.set(Position.KEY_THROTTLE, buf.readUnsignedShortLE());
                     break;
                 case 0x99:
                     position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                     break;
                 case 0x9C:
                     position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
                     break;
+                case 0x9D:
+                    position.set("batteryMilliVolts", buf.readUnsignedShortLE());
+                    break;
                 case 0x9F:
-                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
+                    position.set(Position.KEY_TEMP + 1, buf.readUnsignedShortLE());
                     break;
-                    case 0xC9:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
+                case 0xFE31:
+                    // This was causing issues with the length, now handled properly
+                    int fe31DataLength = buf.readUnsignedByte();
+                    if (fe31DataLength < 2) {
+                        break; // Not enough data for alarm protocol and type
+                    }
+                    buf.readUnsignedByte(); // alarm protocol
+                    buf.readUnsignedByte(); // alarm type
+                    buf.skipBytes(fe31DataLength - 2);
+                    break;
+                case 0xFEA8:
+                    buf.readUnsignedByte(); // battery status
+                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                    buf.readUnsignedByte(); // battery alert
                     break;
                 default:
-                        buf.readUnsignedShortLE();
+                    // Ensure that the default path does not read beyond available bytes
+                    if (extension) { 
+                        // For extended ID with default case, ensure at least 2 bytes (default data)
+                        if (buf.readableBytes() < 2) {
+                            break;
+                        }
+                    } else {
+                        // For non-extended ID with default case
+                        if (buf.readableBytes() < 1) {
+                            break;
+                        }
+                    }
+                    buf.readUnsignedShortLE(); // default data handling
                     break;
             }
         }
 
+        // Third parameter group
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+            int id = extension ? buf.readUnsignedShortLE() : buf.readUnsignedByte();
             switch (id) {
                 case 0x02:
                     position.setLatitude(buf.readIntLE() * 0.000001);
                     break;
                 case 0x03:
                     position.setLongitude(buf.readIntLE() * 0.000001);
                     break;
                 case 0x04:
-                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
+                    position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000));
                     break;
                 case 0x0C:
                 case 0x9B:
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                     break;
                 case 0x0D:
                     position.set("runtime", buf.readUnsignedIntLE());
                     break;
                 case 0x25:
                     position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
                     break;
-                    case 0xA0:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
-                        break;
                 case 0xA2:
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
                     break;
                 default:
-                        buf.readUnsignedIntLE();
+                    if (buf.readableBytes() < 4) { // Ensure unsignedInt can be read
+                        break;
+                    }
+                    buf.readUnsignedIntLE(); //=default
                     break;
             }
         }
 
+        // Fourth parameter group
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+            int idSize = extension ? 2 : 1;
+            if (idSize + 1 > buf.readableBytes()) { // Check if we can read ID and length
+                break;
+            }
+            int id = extension ? buf.readUnsignedShortLE() : buf.readUnsignedByte();
             int length = buf.readUnsignedByte();
+            if (length > buf.readableBytes()) { // Check if data length is valid
+                break;
+            }
+
             switch (id) {
                 case 0x2A:
                 case 0x2B:
                 case 0x2C:
                 case 0x2D:
                 case 0x2E:
                 case 0x2F:
                 case 0x30:
                 case 0x31:
+                    // Label (1 byte) + shortLE (2 bytes), total 3 bytes
+                    if (length < 3) {
+                        break;
+                    }
                     buf.readUnsignedByte(); // label
                     position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                    buf.skipBytes(length - 3); // Skip any remaining bytes for this parameter
                     break;
                 case 0xFE31:
+                    // Alarm data requires 2 + (length-2)
+                    if (length < 2) {
+                        break;
+                    }
                     buf.readUnsignedByte(); // alarm protocol
                     buf.readUnsignedByte(); // alarm type
                     buf.skipBytes(length - 2);
                     break;
                 case 0xFEA8:
+                    // Battery data requires 3 bytes (status, level, alert)
+                    if (length != 3) {
+                        break;
+                    }
                     buf.readUnsignedByte(); // battery status
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     buf.readUnsignedByte(); // battery alert
                     break;
                 default:
+                    // Skip the whole length determined
                     buf.skipBytes(length);
                     break;
             }
         }
 
         positions.add(position);
     }
 
     return positions;
 }
\ No newline at end of file
