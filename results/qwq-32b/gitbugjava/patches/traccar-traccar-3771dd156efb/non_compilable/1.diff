diff --git a/tmp/45475a98-2711-482b-99fd-65c227124de6_buggy.java b/tmp/f9991ab5-c0aa-466c-a0d7-1135b3ee4263_fixed.java
index 3da904d..866d2fa 100644
--- a/tmp/45475a98-2711-482b-99fd-65c227124de6_buggy.java
+++ b/tmp/f9991ab5-c0aa-466c-a0d7-1135b3ee4263_fixed.java
@@ -1,73 +1,20 @@
-    private Position decodePosition(DeviceSession deviceSession, String data) {
-
-        Parser parser = new Parser(PATTERN_POSITION, data);
-        if (!parser.matches()) {
-            return null;
-        }
-
-        Position position = new Position(getProtocolName());
-        position.setDeviceId(deviceSession.getDeviceId());
-
-        position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
-
-        position.setValid(parser.next().equals("A"));
-        position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
-        position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
-        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
-        position.setCourse(parser.nextDouble(0));
-        position.setAltitude(parser.nextDouble(0));
-
-        position.set(Position.KEY_SATELLITES, parser.nextInt(0));
-        position.set(Position.KEY_RSSI, parser.nextInt(0));
-        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
-
-        position.set(Position.KEY_STEPS, parser.nextInt(0));
-
-        int status = parser.nextHexInt(0);
-        position.set(Position.KEY_ALARM, decodeAlarm(status));
-        if (BitUtil.check(status, 4)) {
-            position.set(Position.KEY_MOTION, true);
-        }
-
-        String[] values = parser.next().split(",");
-        int index = 0;
-
-        Network network = new Network();
-
-        int cellCount = Integer.parseInt(values[index++]);
-        if (cellCount > 0) {
-            index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-
-            for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
-                String rssi = values[index++];
-                if (!rssi.isEmpty()) {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
-                } else {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
-                }
-            }
-        }
-
-        if (index < values.length && !values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
-
-            for (int i = 0; i < wifiCount; i++) {
-                index += 1; // wifi name
-                String macAddress = values[index++];
-                String rssi = values[index++];
-                if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
-                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
-                }
-            }
-        }
-
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
-            position.setNetwork(network);
-        }
-
-        return position;
-    }
+     int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++], 16) : 0;
+     int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++], 16) : 0;
+     ```
+
+2. **Parse LAC and CID as Hexadecimal**:
+   - In the cell loop, `lac` and `cid` are parsed using `Integer.parseInt(values[index++])`, which also treats them as decimal.
+   - Add checks for empty strings and use `Integer.parseInt` with radix `16` for correct parsing.
+   - Example:
+     ```java
+     String lacStr = values[index++];
+     int lac = lacStr.isEmpty() ? 0 : Integer.parseInt(lacStr, 16);
+     String cidStr = values[index++];
+     int cid = cidStr.isEmpty() ? 0 : Integer.parseInt(cidStr, 16);
+     ```
+
+3. **Handle Empty Strings for LAC and CID**:
+   - Ensure empty values are treated as 0 to avoid exceptions.
+   - The code uses temporary variables (`lacStr`, `cidStr`) to handle empty checks and parse only non-empty values.
+
+**Fixed Code**:
\ No newline at end of file
