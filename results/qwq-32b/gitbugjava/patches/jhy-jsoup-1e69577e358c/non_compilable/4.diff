diff --git a/tmp/04977943-d26c-4e8c-8656-3a45b44c84d3_buggy.java b/tmp/aa4f0f6e-7c24-4ace-9676-6b0490980b6b_fixed.java
index c9c77a4..23465f9 100644
--- a/tmp/04977943-d26c-4e8c-8656-3a45b44c84d3_buggy.java
+++ b/tmp/aa4f0f6e-7c24-4ace-9676-6b0490980b6b_fixed.java
@@ -1,35 +1,39 @@
     URL build() {
         try {
-            // use the URI class to encode non-ascii in path
+            // extract parts and ensure host is Punycode ASCII
+            String hostASCII = IDN.toASCII(u.getHost());
+            String protocol = u.getProtocol();
+            String authority = u.getAuthority().replace(u.getHost(), hostASCII);
+            if (u.getPort() != -1) {
+                // port is included in authority already, so ensure it's correct
+                authority = authority.replace(":" + u.getHost(), ":" + hostASCII);
+            }
+            // rebuild URL with encoded path, query, fragment as original
             URI uri = new URI(
-                u.getProtocol(),
-                u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
-                u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
+                protocol,
+                authority,
+                null, null, null  // path must be separate to retain encoding
             );
+            String basicUrl = uri.toASCIIString(); // e.g., "https://example.com"
+            String fullUrl = basicUrl + u.toExternalForm().substring(basicUrl.length());
 
-            String normUrl = uri.toASCIIString();
-            if (q != null || u.getRef() != null) {
-                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
-                if (q != null) {
-                    sb.append('?');
-                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);
-                }
             if (u.getRef() != null) {
-                    sb.append('#');
-                    appendToAscii(u.getRef(), false, sb);
+                // Append fragment if needed (though it might already be included)
+                fullUrl = insertFragment(fullUrl, u.getRef());
             }
-                normUrl = StringUtil.releaseBuilder(sb);
-            }
-            u =  new URL(normUrl);
+
+            u = new URL(fullUrl);
             return u;
         } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
-            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
-            // the remote end will be able to handle it, so in prod we just pass the original URL.
-            // The UnsupportedEncodingException would never happen as always UTF8
             assert Validate.assertFail(e.toString());
             return u;
         }
     }
+
+    private String insertFragment(String url, String ref) {
+        int fragmentIndex = url.indexOf('#');
+        if (fragmentIndex != -1) {
+            return url.substring(0, fragmentIndex) + '#' + ref;
+        }
+        return url + '#' + ref;
+    }
\ No newline at end of file
