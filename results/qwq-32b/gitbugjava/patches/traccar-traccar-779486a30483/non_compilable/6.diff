diff --git a/tmp/797ac14d-184b-46c3-b4f8-95543eccf7db_buggy.java b/tmp/2456f7ee-007c-48fa-a6ac-a0860246370f_fixed.java
index f591bc6..58d7ee9 100644
--- a/tmp/797ac14d-184b-46c3-b4f8-95543eccf7db_buggy.java
+++ b/tmp/2456f7ee-007c-48fa-a6ac-a0860246370f_fixed.java
@@ -1,74 +1,90 @@
 protected Object decodeAvrmc(
         String sentence, Channel channel, SocketAddress remoteAddress) {
 
     Parser parser = new Parser(PATTERN_AVRMC, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     DeviceSession deviceSession =
         getDeviceSession(channel, remoteAddress, parser.next());
     if (deviceSession == null) {
         return null;
     }
 
     String deviceModel = null;
     Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
     if (device != null) {
         deviceModel = device.getModel();
     }
 
     Position position = new Position(getProtocolName());
-
     position.setDeviceId(deviceSession.getDeviceId());
-        DateBuilder dateBuilder = new DateBuilder()
-                .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
+
+    DateBuilder dateBuilder = new DateBuilder();
+
+    // Correctly parse the time string from a single 6-digit group
+    String timeStr = parser.next();
+    int hours = Integer.parseInt(timeStr.substring(0, 2));
+    int minutes = Integer.parseInt(timeStr.substring(2, 4));
+    int seconds = Integer.parseInt(timeStr.substring(4, 6));
+    dateBuilder.setTime(hours, minutes, seconds);
 
     String status = parser.next();
     String upperCaseStatus = status.toUpperCase();
     position.setValid(upperCaseStatus.equals("A") || upperCaseStatus.equals("R") || upperCaseStatus.equals("P"));
     position.set(Position.KEY_STATUS, status);
 
     position.setLatitude(parser.nextCoordinate());
     position.setLongitude(parser.nextCoordinate());
     position.setSpeed(parser.nextDouble(0));
     position.setCourse(parser.nextDouble(0));
 
+    // Parse date components using next groups for DD, MM, YY
     dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
     position.setTime(dateBuilder.getDate());
 
     String event = parser.next();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));
+
+    // Parse battery voltage (remove potential decimal points and scale)
     position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
+    // Parse odometer (scale to meters)
     position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
+    // Parse GPS quality 
     position.set(Position.KEY_GPS, parser.nextInt());
+
+    // ADC1 value
     position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);
 
     if ("AVL110".equals(deviceModel) || "AVL120".equals(deviceModel)) {
+        // ADC2 value for specified models
         position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);
     }
 
+    // Parse cell tower information (LAC, CID, MCC, MNC)
     Integer lac = parser.nextHexInt();
     Integer cid = parser.nextHexInt();
     Integer mcc = parser.nextInt();
     Integer mnc = parser.nextInt();
     if (lac != null && cid != null && mcc != null && mnc != null) {
         position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));
     }
 
-        parser.next(); // unused
+    // Skip unused field
+    parser.next();
 
+    // Parse checksum for validation
     String checksum = parser.next();
 
     if (channel != null) {
-
+        // Acknowledgment and event handling
         sendAcknowledge(status, event, checksum, channel, remoteAddress);
-
         String devicePassword = AttributeUtil.getDevicePassword(
                 getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);
         sendEventResponse(event, devicePassword, channel, remoteAddress);
     }
 
     return position;
 }
\ No newline at end of file
