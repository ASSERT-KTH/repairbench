diff --git a/tmp/1c32ad7e-ee84-4d2b-a389-a4a0bc9ef5a0_buggy.java b/tmp/fd70a9e5-e7d1-4b42-aa3e-b3403ac21f12_fixed.java
index acd5eb5..de1aaa4 100644
--- a/tmp/1c32ad7e-ee84-4d2b-a389-a4a0bc9ef5a0_buggy.java
+++ b/tmp/fd70a9e5-e7d1-4b42-aa3e-b3403ac21f12_fixed.java
@@ -1,32 +1,40 @@
 @Override
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
-            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
-
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+        // First declare/compute next and prev siblings
         Node next = nextSibling();
         Node prev = previousSibling();
         boolean isBlank = isBlank();
+
+        trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
+        trimTrailing = trimLikeBlock && next == null;
+
+        // Do not trim trailing whitespace if previous is <br> and it's the last sibling
+        if (next == null && prev instanceof Element && "br".equals(((Element) prev).tagName())) {
+            trimTrailing = false;
+        }
+
         boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, from re-parenting
-                || (prev instanceof Element && ((Element) prev).isBlock())
-                ;
+            || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text
+            || (prev instanceof Element && ((Element) prev).isBlock());
         if (couldSkip && isBlank) return;
 
+        // Indent if conditions met
         if (
             (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
             (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && isNode(prev, "br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+            (siblingIndex > 0 && prev instanceof TextNode && isNode(prev, "br")) // special handling for <br>
+        ) {
             indent(accum, depth, out);
         }
+    }
 
+    // Escaping text with adjusted trimTrailing for <br> prior case
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
