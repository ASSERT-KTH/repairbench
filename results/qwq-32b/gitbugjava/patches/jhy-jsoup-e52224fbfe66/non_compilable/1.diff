diff --git a/tmp/fd975dfb-cd36-429b-a6a4-2c6ecbc72c6f_buggy.java b/tmp/1f5e3d41-b15a-4434-bd3e-fd03c102996a_fixed.java
index acd5eb5..1d64ba2 100644
--- a/tmp/fd975dfb-cd36-429b-a6a4-2c6ecbc72c6f_buggy.java
+++ b/tmp/1f5e3d41-b15a-4434-bd3e-fd03c102996a_fixed.java
@@ -1,32 +1,38 @@
     @Override
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
-            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
-
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             Node prev = previousSibling();
             boolean isBlank = isBlank();
+
+            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
+            trimTrailing = trimLikeBlock && next == null;
+
+            // If this text is last in parent and preceded by a BR, do not trim trailing whitespace
+            if (trimTrailing && isNode(prev, "br")) {
+                trimTrailing = false;
+            }
+
+            // Skip this whitespace if it can be skipped
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, from re-parenting
-                || (prev instanceof Element && ((Element) prev).isBlock())
-                ;
+                || (next instanceof TextNode && ((TextNode) next).isBlank()) // next is blank text, from restructuring
+                || (prev instanceof Element && ((Element) prev).tag().isBlock()); // previous is a block element
             if (couldSkip && isBlank) return;
 
+            // Indent if it's a new line scenario or after a BR
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && isNode(prev, "br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+                (siblingIndex > 0 && isNode(prev, "br"))
             )
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
