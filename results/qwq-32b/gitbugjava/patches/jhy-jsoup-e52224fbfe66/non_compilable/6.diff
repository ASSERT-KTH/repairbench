diff --git a/tmp/c9659808-e2d8-4367-9473-203a237df351_buggy.java b/tmp/3fa4844f-fea3-408c-a238-e003709ea6fb_fixed.java
index acd5eb5..814959f 100644
--- a/tmp/c9659808-e2d8-4367-9473-203a237df351_buggy.java
+++ b/tmp/3fa4844f-fea3-408c-a238-e003709ea6fb_fixed.java
@@ -1,32 +1,32 @@
 @Override
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
-        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+    final boolean normalizeWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
-        if (normaliseWhite) {
-            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
-
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
     Node next = nextSibling();
     Node prev = previousSibling();
+
+    if (normalizeWhite) {
+        trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
+        // Add check that previous node is not 'br' to prevent trimming trailing whitespace after 'br'
+        trimTrailing = trimLikeBlock && next == null && (!isNode(prev, "br"));
+        
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, from re-parenting
-                || (prev instanceof Element && ((Element) prev).isBlock())
-                ;
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) 
+            || (next instanceof TextNode && ((TextNode) next).isBlank()) 
+            || (prev instanceof Element && ((Element) prev).tag().isBlock());
         if (couldSkip && isBlank) return;
 
         if (
             (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
             (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && isNode(prev, "br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+            (siblingIndex > 0 && isNode(prev, "br") && !isBlank)
         )
             indent(accum, depth, out);
     }
 
-        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
+    Entities.escape(accum, coreValue(), out, false, normalizeWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
