diff --git a/tmp/8bcfc4be-6a2b-4af6-9800-deefc1e80789_buggy.java b/tmp/1026759c-05e9-4469-b674-66b4674c6e42_fixed.java
index 7374e5f..b5403cc 100644
--- a/tmp/8bcfc4be-6a2b-4af6-9800-deefc1e80789_buggy.java
+++ b/tmp/1026759c-05e9-4469-b674-66b4674c6e42_fixed.java
@@ -1,61 +1,77 @@
 private Object decodeLocationNew(
     Channel channel, SocketAddress remoteAddress, String sentence) {
 
     Parser parser = new Parser(PATTERN_NEW, sentence);
     if (!parser.matches()) {
         return null;
     }
 
+    // Fix: swap index and imei parsing order
+    String index = parser.next();
     String imei = parser.next();
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
-        String index = parser.next();
-
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
-        position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
+    // Fix: use parser.next() instead of parser.nextInt()
+    position.set(Position.KEY_ALARM, decodeAlarm(parser.next()));
 
     position.setDeviceTime(parser.nextDateTime());
 
     Network network = new Network();
+
+    // Parse cell tower data from a single token containing | separators
+    if (parser.hasNext()) {
+        String cellData = parser.next();
+        if (cellData != null && !cellData.isEmpty()) {
+            String[] cellParts = cellData.split("\\|");
+            if (cellParts.length >= 4) {
                 network.addCellTower(CellTower.from(
-                parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
+                        Integer.parseInt(cellParts[0]), 
+                        Integer.parseInt(cellParts[1]), 
+                        Integer.parseInt(cellParts[2], 16), 
+                        Integer.parseInt(cellParts[3], 16)));
+            }
+        }
+    }
 
+    // Correct parser flow
     position.set(Position.KEY_BATTERY, parser.nextDouble());
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
     position.set(Position.KEY_STATUS, parser.nextHexInt());
 
     if (parser.hasNext(5)) {
-
         position.setValid(parser.next().equals("A"));
         position.setFixTime(position.getDeviceTime());
+        // Should now correctly retrieve the satellites count
         position.set(Position.KEY_SATELLITES, parser.nextInt()); 
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
         position.setLatitude(parser.nextDouble());
         position.setLongitude(parser.nextDouble());
-
     } else {
-
+        // Parse Wi-Fi access points which are in a single token
         String[] points = parser.next().split("\\|");
         for (String point : points) {
             String[] wifi = point.split(":");
+            if (wifi.length >= 2) {
                 String mac = wifi[0].replaceAll("(..)", "$1:");
                 network.addWifiAccessPoint(WifiAccessPoint.from(
-                        mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
+                        mac.substring(0, mac.length() - 1), 
+                        Integer.parseInt(wifi[1])));
+            }
         }
-
     }
 
     position.setNetwork(network);
 
     DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
     String response = index + ",A03," + dateFormat.format(new Date());
     sendResponse(channel, remoteAddress, imei, response);
 
     return position;
 }
\ No newline at end of file
