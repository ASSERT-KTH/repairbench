diff --git a/tmp/0e3c7030-e84b-4407-b1f3-73a891286692_buggy.java b/tmp/b0c9a37b-8a86-4d97-a61d-19bf8f4d272c_fixed.java
index f506479..3fc5137 100644
--- a/tmp/0e3c7030-e84b-4407-b1f3-73a891286692_buggy.java
+++ b/tmp/b0c9a37b-8a86-4d97-a61d-19bf8f4d272c_fixed.java
@@ -1,64 +1,66 @@
-        void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
-        {
+        void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments) {
             final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
-            final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
+            final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg,
+                    "Did not supply a value for %s in group " + groupArg.getName());
 
             processor.consume(groupArg.getIdentity(), arguments);
 
             final Map<String, SimpleDslArg> argsByName = new HashMap<>();
-            argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
-            for (SimpleDslArg dslArg : groupArg.getOtherArgs())
-            {
-                if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
-                {
+            argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity()); // Store identity name in lower case
+            for (SimpleDslArg dslArg : groupArg.getOtherArgs()) {
+                String key = dslArg.getName().toLowerCase();
+                if (argsByName.put(key, dslArg) != null) {
                     throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
                 }
             }
 
-            while (!arguments.isEmpty())
-            {
+            while (!arguments.isEmpty()) {
                 final NameValuePair argument = arguments.peekFirst();
-                if (argument == NameValuePair.NULL)
-                {
+                if (argument == NameValuePair.NULL) {
                     arguments.pollFirst();
                     continue;
                 }
 
-                if (argument.name == null)
-                {
+                if (argument.name == null) {
                     throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
                 }
 
-                final DslArg arg = argsByName.get(argument.name.toLowerCase());
-                if (arg == null)
-                {
+                final DslArg arg = argsByName.get(argument.name.toLowerCase()); // Lookup is case-insensitive
+                if (arg == null) {
                     break;
                 }
 
-                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
-                if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
-                {
+                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>()); // Get list for arg
+                if (!argValues.isEmpty() && !arg.isAllowMultipleValues()) {
                     break;
                 }
 
                 checkValidValue(arg, argument.value);
-                argValues.add(argument.value);
-                arguments.pollFirst();
+                
+                // Split value into multiple if allowed
+                String value = argument.value;
+                if (arg.isAllowMultipleValues()) {
+                    String[] parts = value.split("\\s*,\\s*");
+                    for (String part : parts) {
+                        argValues.add(part.trim());
+                    }
+                } else {
+                    argValues.add(value);
+                }
+                arguments.pollFirst(); // Remove processed argument
             }
 
-            // TODO: this whole thing here is a bit hacky!
             final Map<String, List<String>> valuesByName = new HashMap<>();
-            for (final SimpleDslArg simpleDslArg : argsByName.values())
-            {
+            for (final SimpleDslArg simpleDslArg : argsByName.values()) {
                 final SimpleDslParam param = processor.collect(simpleDslArg);
-                if (param.hasValue())
-                {
-                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
+                if (param.hasValue()) {
+                    valuesByName.put(simpleDslArg.getName().toLowerCase(), param.getValuesAsList());
                 }
             }
 
             final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
             dslArgs[0] = groupArg.getIdentity();
             System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
-            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
+            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(
+                    new RepeatingParamValues(dslArgs, valuesByName));
         }
\ No newline at end of file
