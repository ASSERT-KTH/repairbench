diff --git a/tmp/87410537-00bc-4e52-a065-6963a5c97102_buggy.java b/tmp/5b877a9b-dea5-4a04-95c7-429fdebf486d_fixed.java
index f506479..d3817fc 100644
--- a/tmp/87410537-00bc-4e52-a065-6963a5c97102_buggy.java
+++ b/tmp/5b877a9b-dea5-4a04-95c7-429fdebf486d_fixed.java
@@ -1,64 +1,75 @@
     void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
     {
         final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
         final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
         processor.consume(groupArg.getIdentity(), arguments);
 
         final Map<String, SimpleDslArg> argsByName = new HashMap<>();
-            argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
+        argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity()); // Lowercase identity name for consistency
         for (SimpleDslArg dslArg : groupArg.getOtherArgs())
         {
             if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
             {
                 throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
             }
         }
 
         while (!arguments.isEmpty())
         {
             final NameValuePair argument = arguments.peekFirst();
             if (argument == NameValuePair.NULL)
             {
                 arguments.pollFirst();
                 continue;
             }
 
             if (argument.name == null)
             {
                 throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
             }
 
             final DslArg arg = argsByName.get(argument.name.toLowerCase());
             if (arg == null)
             {
                 break;
             }
 
             final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
             if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
             {
                 break;
             }
             
-                checkValidValue(arg, argument.value);
-                argValues.add(argument.value);
+            // Split the argument value if multiple values are allowed for this parameter
+            String value = argument.value;
+            if (arg.isAllowMultipleValues()) {
+                String[] splitValues = value.split(",");
+                for (String v : splitValues) {
+                    v = v.trim();
+                    checkValidValue(arg, v);
+                    argValues.add(v);
+                } // No need to add the original argument.value in else clause; added only if not allowing multiple
+            } else {
+                checkValidValue(arg, value);
+                argValues.add(value);
+            }
+
             arguments.pollFirst();
         }
 
-            // TODO: this whole thing here is a bit hacky!
         final Map<String, List<String>> valuesByName = new HashMap<>();
         for (final SimpleDslArg simpleDslArg : argsByName.values())
         {
             final SimpleDslParam param = processor.collect(simpleDslArg);
             if (param.hasValue())
             {
-                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
+                valuesByName.put(simpleDslArg.getName().toLowerCase(), param.getValuesAsList());
             }
         }
 
         final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
         dslArgs[0] = groupArg.getIdentity();
         System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
         groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
     }
\ No newline at end of file
