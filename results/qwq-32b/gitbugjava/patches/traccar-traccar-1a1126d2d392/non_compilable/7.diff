diff --git a/tmp/48610ae2-d112-4a0d-bf28-10cd8ff6f2cb_buggy.java b/tmp/2cab2816-98d8-4e4e-83a5-6a3ca8239407_fixed.java
index 2a0dceb..f5799af 100644
--- a/tmp/48610ae2-d112-4a0d-bf28-10cd8ff6f2cb_buggy.java
+++ b/tmp/2cab2816-98d8-4e4e-83a5-6a3ca8239407_fixed.java
@@ -1,68 +1,79 @@
 private Position decode4(
         Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
     int index = 0;
 
-        String type = values[index++].substring(5);
+    // Correctly extract type from first element
+    String firstValue = values[index++];
+    String type;
+    if (firstValue.length() > 3) {
+        type = firstValue.substring(firstValue.length() - 3);
+    } else {
+        type = firstValue;
+    }
 
     if (!type.equals("STT") && !type.equals("ALT")) {
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_TYPE, type);
 
     position.set(Position.KEY_VERSION_FW, values[index++]);
     index += 1; // model
 
     Network network = new Network();
 
+    // Process cell towers only for STT types
+    if (type.equals("STT")) {
         for (int i = 0; i < 7; i++) {
             int cid = Integer.parseInt(values[index++]);
             int mcc = Integer.parseInt(values[index++]);
             int mnc = Integer.parseInt(values[index++]);
             int lac, rssi;
             if (i == 0) {
                 rssi = Integer.parseInt(values[index++]);
                 lac = Integer.parseInt(values[index++]);
             } else {
                 lac = Integer.parseInt(values[index++]);
                 rssi = Integer.parseInt(values[index++]);
             }
             index += 1; // timing advance
             if (cid > 0) {
                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
             }
         }
+    }
 
     position.setNetwork(network);
 
+    // Continue processing other fields
     position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
     position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
     position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
     position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
 
     if (values[index].length() == 3) {
         index += 1; // collaborative network
     }
 
     DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
     position.setTime(dateFormat.parse(values[index++] + values[index++]));
 
     position.setLatitude(Double.parseDouble(values[index++]));
     position.setLongitude(Double.parseDouble(values[index++]));
     position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
     position.setCourse(Double.parseDouble(values[index++]));
 
     position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
 
     position.setValid(values[index++].equals("1"));
 
     return position;
 }
\ No newline at end of file
