diff --git a/tmp/c01fdf47-60f0-41a3-beb3-8b617a57743c_buggy.java b/tmp/aca19a79-73fa-4bf8-a773-059ead1e0ff7_fixed.java
index 2a0dceb..409c62d 100644
--- a/tmp/c01fdf47-60f0-41a3-beb3-8b617a57743c_buggy.java
+++ b/tmp/aca19a79-73fa-4bf8-a773-059ead1e0ff7_fixed.java
@@ -1,68 +1,83 @@
 private Position decode4(
             Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
         int index = 0;
 
-        String type = values[index++].substring(5);
-
-        if (!type.equals("STT") && !type.equals("ALT")) {
+        // Correctly extract type from the last three characters of the first element
+        String firstPart = values[index++];
+        int startPos = Math.max(0, firstPart.length() - 3);
+        String type = firstPart.substring(startPos);
+        if (!"STT".equals(type) && !"ALT".equals(type)) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
         position.set(Position.KEY_TYPE, type);
 
         position.set(Position.KEY_VERSION_FW, values[index++]);
         index += 1; // model
 
         Network network = new Network();
 
+        // Cell tower loop with controlled iterations to avoid out of bounds
         for (int i = 0; i < 7; i++) {
+            if (index + 5 >= values.length) {
+                break;
+            }
+
             int cid = Integer.parseInt(values[index++]);
             int mcc = Integer.parseInt(values[index++]);
             int mnc = Integer.parseInt(values[index++]);
+
             int lac, rssi;
             if (i == 0) {
                 rssi = Integer.parseInt(values[index++]);
                 lac = Integer.parseInt(values[index++]);
             } else {
                 lac = Integer.parseInt(values[index++]);
                 rssi = Integer.parseInt(values[index++]);
             }
-            index += 1; // timing advance
+
+            index += 1; // timing advance (behind rssi and lac)
+
             if (cid > 0) {
                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
             }
         }
 
         position.setNetwork(network);
 
         position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
         position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
         position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
         position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
 
-        if (values[index].length() == 3) {
-            index += 1; // collaborative network
+        // Protect against out of bounds when checking collaborative network
+        if (index < values.length && values[index].length() == 3) {
+            index++;
         }
 
-        DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
-        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
+        // Parse time ensuring there are enough elements left
+        if (index + 1 >= values.length) {
+            throw new ParseException("Missing date/time fields", index);
+        }
         position.setTime(dateFormat.parse(values[index++] + values[index++]));
 
         position.setLatitude(Double.parseDouble(values[index++]));
         position.setLongitude(Double.parseDouble(values[index++]));
         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
         position.setCourse(Double.parseDouble(values[index++]));
 
+        if (index >= values.length) {
+            throw new ParseException("Satellites/Valid fields missing", index);
+        }
         position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-
-        position.setValid(values[index++].equals("1"));
+        position.setValid(values[index].equals("1") ? true : index < values.length);
 
         return position;
     }
\ No newline at end of file
