diff --git a/tmp/2c74a104-43c1-453f-94bb-eee020472b7c_buggy.java b/tmp/0101554b-9690-46a8-9edf-131a413518f7_fixed.java
index 712f277..7ced61e 100644
--- a/tmp/2c74a104-43c1-453f-94bb-eee020472b7c_buggy.java
+++ b/tmp/0101554b-9690-46a8-9edf-131a413518f7_fixed.java
@@ -1,48 +1,44 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
     public static Appendable render(final String input, Appendable target) throws IOException {
-
         int i = 0;
         int j, k;
 
         while (true) {
             j = input.indexOf(BEGIN_TOKEN, i);
+
+            // Check for END_TOKEN before any remaining BEGIN
             if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
+                int endIndex = input.indexOf(END_TOKEN, i);
+                if (endIndex != -1) {
+                    throw new IllegalArgumentException("Found \"" + END_TOKEN + "\" without a preceding \"" + BEGIN_TOKEN + "\" at position: " + endIndex);
                 }
                 target.append(input.substring(i));
                 return target;
             }
+
             target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
+
+            // The specification starts after the BEGIN_TOKEN
+            int specStart = j + BEGIN_TOKEN_LEN; 
+
+            k = input.indexOf(END_TOKEN, j); // Search for END_TOKEN from BEGIN's position
 
             if (k == -1) {
-                target.append(input);
-                return target;
+                throw new IllegalArgumentException("Unclosed BEGIN_TOKEN at position " + j);
             }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
 
+            // Ensure the END_TOKEN is after the BEGIN_TOKEN's closing
+            if (k < specStart) {
+                throw new IllegalArgumentException("Closing \"" + END_TOKEN + "\" at position " + k + " found before the spec starts at " + specStart);
+            }
+
+            String spec = input.substring(specStart, k);
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+            if (items.length != 2) {
+                throw new IllegalArgumentException("Invalid format in specifier: " + spec);
             }
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
             target.append(replacement);
-
             i = k + END_TOKEN_LEN;
         }
     }
\ No newline at end of file
