diff --git a/tmp/e05cc253-42ed-4438-a2c3-dc6cd85b96b9_buggy.java b/tmp/2bb016d9-a929-4be7-8a14-32d44ad2647f_fixed.java
index 712f277..a39f09d 100644
--- a/tmp/e05cc253-42ed-4438-a2c3-dc6cd85b96b9_buggy.java
+++ b/tmp/2bb016d9-a929-4be7-8a14-32d44ad2647f_fixed.java
@@ -1,48 +1,45 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
     public static Appendable render(final String input, Appendable target) throws IOException {
-
         int i = 0;
-        int j, k;
-
         while (true) {
-            j = input.indexOf(BEGIN_TOKEN, i);
+            int j = input.indexOf(BEGIN_TOKEN, i);
             if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
+                // Check if any end tokens are present in the remaining part
+                int endPresent = input.indexOf(END_TOKEN, i);
+                if (endPresent != -1) {
+                    throw new IllegalArgumentException("Found END_TOKEN at " + endPresent + " without preceding BEGIN_TOKEN.");
                 }
                 target.append(input.substring(i));
                 return target;
             }
+
+            // Check if any end tokens occurred before current BEGIN_TOKEN in the non-BEGIN range (i to j)
+            int endBefore = input.indexOf(END_TOKEN, i);
+            if (endBefore != -1 && endBefore < j) {
+                throw new IllegalArgumentException("Found END_TOKEN at " + endBefore + " before BEGIN_TOKEN at " + j);
+            }
+
             target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
-
+            int k = input.indexOf(END_TOKEN, j);
             if (k == -1) {
-                target.append(input);
-                return target;
+                throw new IllegalArgumentException("Unmatched BEGIN_TOKEN at " + j + " with no closing END_TOKEN found.");
             }
+
+            // Ensure END_TOKEN doesn't occur before the end of BEGIN_TOKEN
+            if (k < j + BEGIN_TOKEN_LEN) {
+                throw new IllegalArgumentException("END_TOKEN at " + k + " overlaps with or occurs before the end of BEGIN_TOKEN starting at " + j);
+            }
+
             j += BEGIN_TOKEN_LEN;
             String spec = input.substring(j, k);
 
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+            if (items.length != 2) {
+                throw new IllegalArgumentException("Invalid specification format. Expected to split into two parts.");
             }
+
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
             target.append(replacement);
 
             i = k + END_TOKEN_LEN;
         }
     }
\ No newline at end of file
