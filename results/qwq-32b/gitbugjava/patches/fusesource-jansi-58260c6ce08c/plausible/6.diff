diff --git a/tmp/bf76c2eb-7e59-46b9-ae29-1b69d3c94ca1_buggy.java b/tmp/a7c98f0e-6a75-4628-8c05-18d874516f5f_fixed.java
index 712f277..2880268 100644
--- a/tmp/bf76c2eb-7e59-46b9-ae29-1b69d3c94ca1_buggy.java
+++ b/tmp/a7c98f0e-6a75-4628-8c05-18d874516f5f_fixed.java
@@ -1,48 +1,34 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
     public static Appendable render(final String input, Appendable target) throws IOException {
-
         int i = 0;
-        int j, k;
 
         while (true) {
-            j = input.indexOf(BEGIN_TOKEN, i);
+            int j = input.indexOf(BEGIN_TOKEN, i);
             if (j == -1) {
                 if (i == 0) {
                     target.append(input);
-                    return target;
-                }
+                } else {
                     target.append(input.substring(i));
+                }
                 return target;
             }
             target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
 
+            int k = input.indexOf(END_TOKEN, j);
             if (k == -1) {
-                target.append(input);
-                return target;
+                throw new IllegalArgumentException("Missing end token for spec starting at position " + j);
+            }
+            if (k < (j + BEGIN_TOKEN_LEN)) {
+                throw new IllegalArgumentException("End token found before specification is complete in input: " + input);
             }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
 
+            String spec = input.substring(j + BEGIN_TOKEN_LEN, k);
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+            if (items.length != 2) {
+                throw new IllegalArgumentException("Specification must include exactly two parts separated by " + CODE_TEXT_SEPARATOR);
             }
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
             target.append(replacement);
-
             i = k + END_TOKEN_LEN;
         }
     }
\ No newline at end of file
