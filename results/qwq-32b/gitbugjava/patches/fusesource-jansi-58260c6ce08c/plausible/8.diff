diff --git a/tmp/89016dd7-2fe9-4d82-87bf-3eead3b82490_buggy.java b/tmp/6bf4d6df-35eb-406c-82bd-97aea0c8415c_fixed.java
index 712f277..7303a9a 100644
--- a/tmp/89016dd7-2fe9-4d82-87bf-3eead3b82490_buggy.java
+++ b/tmp/6bf4d6df-35eb-406c-82bd-97aea0c8415c_fixed.java
@@ -1,48 +1,41 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
     public static Appendable render(final String input, Appendable target) throws IOException {
-
         int i = 0;
         int j, k;
 
         while (true) {
             j = input.indexOf(BEGIN_TOKEN, i);
             if (j == -1) {
                 if (i == 0) {
+                    // If there are no BEGIN_TOKEN before an END_TOKEN, it's invalid.
+                    if (input.indexOf(END_TOKEN) != -1) {
+                        throw new IllegalArgumentException("END_TOKEN found before BEGIN_TOKEN");
+                    }
                     target.append(input);
                     return target;
                 }
+                // Check if there's any END_TOKEN in remaining string (which can't have corresponding BEGIN_TOKEN before)
+                if (input.substring(i).indexOf(END_TOKEN) != -1) {
+                    throw new IllegalArgumentException("END_TOKEN without corresponding BEGIN_TOKEN");
+                }
                 target.append(input.substring(i));
                 return target;
             }
             target.append(input.substring(i, j));
             k = input.indexOf(END_TOKEN, j);
-
             if (k == -1) {
-                target.append(input);
-                return target;
+                throw new IllegalArgumentException("Missing END_TOKEN for BEGIN_TOKEN at position " + j);
             }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
-
+            int specStart = j + BEGIN_TOKEN_LEN;
+            if (k < specStart) {
+                throw new IllegalArgumentException("END_TOKEN is before the end of BEGIN_TOKEN");
+            }
+            String spec = input.substring(specStart, k);
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+            if (items.length != 2) {
+                throw new IllegalArgumentException("Spec must contain two parts separated by " + CODE_TEXT_SEPARATOR);
             }
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
             target.append(replacement);
-
             i = k + END_TOKEN_LEN;
         }
     }
\ No newline at end of file
