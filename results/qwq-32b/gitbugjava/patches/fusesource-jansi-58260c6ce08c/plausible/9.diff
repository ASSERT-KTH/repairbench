diff --git a/tmp/82b452fa-7edc-43b2-926c-7c946678aedc_buggy.java b/tmp/55e8b8df-01f3-437c-a7b8-f90f6bb3e97c_fixed.java
index 712f277..ea0fd04 100644
--- a/tmp/82b452fa-7edc-43b2-926c-7c946678aedc_buggy.java
+++ b/tmp/55e8b8df-01f3-437c-a7b8-f90f6bb3e97c_fixed.java
@@ -1,48 +1,46 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
     int i = 0;
     int j, k;
 
     while (true) {
+        // Find the next BEGIN_TOKEN starting from the current position 'i'
         j = input.indexOf(BEGIN_TOKEN, i);
         if (j == -1) {
+            // If there are no more BEGIN_TOKENs but there's still an END_TOKEN left, throw an IllegalArgumentException
+            if (input.indexOf(END_TOKEN, i) != -1) {
+                throw new IllegalArgumentException("END_TOKEN found without a corresponding BEGIN_TOKEN");
+            }
+            // No more tokens found, append the remaining text
             if (i == 0) {
                 target.append(input);
-                    return target;
-                }
+            } else {
                 target.append(input.substring(i));
+            }
             return target;
         }
-            target.append(input.substring(i, j));
+
+        target.append(input.substring(i, j)); // Append text before the current BEGIN_TOKEN
+
         k = input.indexOf(END_TOKEN, j);
-
         if (k == -1) {
-                target.append(input);
-                return target;
+            throw new IllegalArgumentException("No matching END_TOKEN after " + BEGIN_TOKEN + " at position " + j);
         }
-            j += BEGIN_TOKEN_LEN;
+
+        // Ensure END_TOKEN comes after the specification section of the BEGIN_TOKEN
+        if (k < j + BEGIN_TOKEN_LEN) {
+            throw new IllegalArgumentException("END_TOKEN found before the specification section of a BEGIN_TOKEN starting at " + j);
+        }
+
+        j += BEGIN_TOKEN_LEN; // Move past the BEGIN_TOKEN
         String spec = input.substring(j, k);
-
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+        if (items.length != 2) {
+            throw new IllegalArgumentException("Invalid specification format, must be split into exactly two parts");
         }
+
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
         target.append(replacement);
 
-            i = k + END_TOKEN_LEN;
+        i = k + END_TOKEN_LEN; // Move past the END_TOKEN
     }
 }
\ No newline at end of file
