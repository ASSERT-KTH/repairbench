diff --git a/tmp/d76eb7ce-49fe-42d9-9ccb-b8ee479d2df7_buggy.java b/tmp/ec50ede7-6272-46a4-95d8-bbc5d2c03c4a_fixed.java
index 712f277..4462798 100644
--- a/tmp/d76eb7ce-49fe-42d9-9ccb-b8ee479d2df7_buggy.java
+++ b/tmp/ec50ede7-6272-46a4-95d8-bbc5d2c03c4a_fixed.java
@@ -1,48 +1,37 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
     public static Appendable render(final String input, Appendable target) throws IOException {
-
         int i = 0;
         int j, k;
 
         while (true) {
             j = input.indexOf(BEGIN_TOKEN, i);
             if (j == -1) {
                 if (i == 0) {
+                    // Check if any end token exists without being preceded by a begin
+                    int firstEndIndex = input.indexOf(END_TOKEN, 0);
+                    if (firstEndIndex != -1) {
+                        throw new IllegalArgumentException("END token found before any BEGIN token");
+                    } else {
                         target.append(input);
                         return target;
                     }
+                } else {
                     target.append(input.substring(i));
                     return target;
                 }
+            }
             target.append(input.substring(i, j));
             k = input.indexOf(END_TOKEN, j);
-
             if (k == -1) {
-                target.append(input);
-                return target;
+                throw new IllegalArgumentException("Missing closing END_TOKEN after " + BEGIN_TOKEN + " at position " + j);
             }
             j += BEGIN_TOKEN_LEN;
             String spec = input.substring(j, k);
-
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+            if (items.length != 2) {
+                throw new IllegalArgumentException("Spec \"" + spec + "\" must be split into exactly two parts");
             }
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
             target.append(replacement);
-
             i = k + END_TOKEN_LEN;
         }
     }
\ No newline at end of file
