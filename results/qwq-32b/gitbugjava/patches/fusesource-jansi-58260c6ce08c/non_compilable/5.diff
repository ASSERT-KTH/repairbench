diff --git a/tmp/605733b6-fa5c-444f-bbee-0ac522b8f628_buggy.java b/tmp/ae83a104-99b3-486e-9ae7-0ffd59b041ea_fixed.java
index 712f277..0f986db 100644
--- a/tmp/605733b6-fa5c-444f-bbee-0ac522b8f628_buggy.java
+++ b/tmp/ae83a104-99b3-486e-9ae7-0ffd59b041ea_fixed.java
@@ -1,48 +1,44 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
     int i = 0;
-        int j, k;
-
     while (true) {
-            j = input.indexOf(BEGIN_TOKEN, i);
-            if (j == -1) {
+        int j = input.indexOf(BEGIN_TOKEN, i);
+        if (j == -1) { // No more begin tokens.
+            // Check if there are any end tokens remaining after current i.
+            if (input.indexOf(END_TOKEN, i) != -1) {
+                throw new IllegalArgumentException("Unmatched end token found before any begin token.");
+            }
+            // No begin or end tokens remaining - append the remaining text
             if (i == 0) {
                 target.append(input);
-                    return target;
-                }
+            } else {
                 target.append(input.substring(i));
+            }
             return target;
         }
-            target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
         
+        // Check region before the next begin token for any end tokens (which would be invalid)
+        String beforeRegion = input.substring(i, j);
+        if (beforeRegion.indexOf(END_TOKEN) != -1) {
+            throw new IllegalArgumentException("Found end token before an enclosing begin token.");
+        }
+        target.append(beforeRegion);
+        
+        int k = input.indexOf(END_TOKEN, j);
         if (k == -1) {
-                target.append(input);
-                return target;
+            throw new IllegalArgumentException("Missing end token after the begin token starting at position " + j);
         }
+
         j += BEGIN_TOKEN_LEN;
         String spec = input.substring(j, k);
 
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+        if (items.length != 2) { // Require split into exactly two parts
+            throw new IllegalArgumentException("Invalid specification between token pairs, expecting two elements.");
         }
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
         
         target.append(replacement);
 
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
