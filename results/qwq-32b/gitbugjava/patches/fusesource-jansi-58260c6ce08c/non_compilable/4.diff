diff --git a/tmp/57d3e982-cac8-475b-8f50-382afddcc798_buggy.java b/tmp/7dc6c820-5302-4605-b845-d1df22ff3bb5_fixed.java
index 712f277..c7d0a1d 100644
--- a/tmp/57d3e982-cac8-475b-8f50-382afddcc798_buggy.java
+++ b/tmp/7dc6c820-5302-4605-b845-d1df22ff3bb5_fixed.java
@@ -1,48 +1,31 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
     int i = 0;
     int j, k;
 
     while (true) {
         j = input.indexOf(BEGIN_TOKEN, i);
         if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
+            // Check if the remaining text contains any end tokens without a preceding start
+            int remainingEndIndex = input.indexOf(END_TOKEN, i);
+            if (remainingEndIndex != -1) {
+                throw new IllegalArgumentException("End token found without matching start token");
             }
             target.append(input.substring(i));
             return target;
         }
         target.append(input.substring(i, j));
         k = input.indexOf(END_TOKEN, j);
-
         if (k == -1) {
-                target.append(input);
-                return target;
+            throw new IllegalArgumentException("Start token not followed by an end token");
         }
         j += BEGIN_TOKEN_LEN;
         String spec = input.substring(j, k);
-
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+        if (items.length != 2) {
+            throw new IllegalArgumentException("Malformed specification: missing parts separated by separator");
         }
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
         target.append(replacement);
-
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
