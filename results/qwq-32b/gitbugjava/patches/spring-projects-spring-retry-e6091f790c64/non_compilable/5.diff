diff --git a/tmp/86d98193-5734-4842-8a11-31f0733c3d54_buggy.java b/tmp/4f13dc5d-a6a5-4842-9ff0-92260afdb57b_fixed.java
index b8e3fa3..b6995d5 100644
--- a/tmp/86d98193-5734-4842-8a11-31f0733c3d54_buggy.java
+++ b/tmp/4f13dc5d-a6a5-4842-9ff0-92260afdb57b_fixed.java
@@ -1,65 +1,65 @@
-	/**
-	 * Builds the {@link BackOffPolicy} with the given parameters.
-	 * @return the {@link BackOffPolicy} instance
-	 */
     public BackOffPolicy build() {
         if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {
             ExponentialBackOffPolicy policy;
             if (Boolean.TRUE.equals(this.random)) {
                 policy = new ExponentialRandomBackOffPolicy();
-			}
-			else {
+            } else {
                 policy = new ExponentialBackOffPolicy();
             }
             if (this.delay != null) {
                 policy.setInitialInterval(this.delay);
             }
             if (this.delaySupplier != null) {
                 policy.initialIntervalSupplier(this.delaySupplier);
             }
             if (this.multiplier != null) {
                 policy.setMultiplier(this.multiplier);
             }
             if (this.multiplierSupplier != null) {
                 policy.multiplierSupplier(this.multiplierSupplier);
             }
-			if (this.maxDelay != null && this.delay != null) {
-				policy.setMaxInterval(
-						this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
+            // Fix: removed 'this.delay != null' from the condition and added nested checks for delay presence
+            if (this.maxDelay != null) {
+                if (this.delay != null) {
+                    policy.setMaxInterval(this.maxDelay > this.delay ? this.maxDelay 
+                            : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
+                } else {
+                    policy.setMaxInterval(this.maxDelay);
+                }
             }
             if (this.maxDelaySupplier != null) {
                 policy.maxIntervalSupplier(this.maxDelaySupplier);
             }
             if (this.sleeper != null) {
                 policy.setSleeper(this.sleeper);
             }
             return policy;
         }
         if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
             UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
             if (this.delay != null) {
                 policy.setMinBackOffPeriod(this.delay);
             }
             if (this.delaySupplier != null) {
                 policy.minBackOffPeriodSupplier(this.delaySupplier);
             }
             if (this.maxDelay != null) {
                 policy.setMaxBackOffPeriod(this.maxDelay);
             }
             if (this.maxDelaySupplier != null) {
                 policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
             }
             if (this.sleeper != null) {
                 policy.setSleeper(this.sleeper);
             }
             return policy;
         }
         FixedBackOffPolicy policy = new FixedBackOffPolicy();
         if (this.delay != null) {
             policy.setBackOffPeriod(this.delay);
         }
         if (this.sleeper != null) {
             policy.setSleeper(this.sleeper);
         }
         return policy;
     }
\ No newline at end of file
