diff --git a/tmp/d10936aa-fbea-4b73-b791-ebf37fa0c381_buggy.java b/tmp/294b9503-f0a1-4c3a-991d-cfd9a5aadff6_fixed.java
index 47a8941..180d2ef 100644
--- a/tmp/d10936aa-fbea-4b73-b791-ebf37fa0c381_buggy.java
+++ b/tmp/294b9503-f0a1-4c3a-991d-cfd9a5aadff6_fixed.java
@@ -1,53 +1,55 @@
 	/**
 	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
 	 */
 	private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
 		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
 		JClassContainer grandParent = parent.parentContainer();
+        
+        // Remove the class from its parent's container before moving to the grandparent
+		Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+		parentClasses.remove(clazz.name());
+
 		// Allows to track class name collisions:
 		Map<String, JDefinedClass> classes;
 
 		// FIXME: Pending https://java.net/jira/browse/JAXB-957
 		if (grandParent.isClass()) {
-			// Element class should be added as its container child:
 			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
 			classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+		} else {
 			JPackage grandParentPackage = (JPackage) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
 			classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
+			// Preserve this action: removing 'static' modifier when moving to a package
 			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
+			// Keep the loop to adjust the schema component
 			for (ClassOutline classOutline : outline.getClasses()) {
 				if (classOutline.implClass == clazz) {
 					XSComponent sc = classOutline.target.getSchemaComponent();
-
-					// FIXME: Inner class is always a local declaration.
 					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
 					setPrivateField(sc, "anonymous", Boolean.FALSE);
-
 					break;
 				}
 			}
 		}
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+		// Rename only if the new grandparent already has a class with this name
+		JDefinedClass existing = classes.get(clazz.name());
+		if (existing != null) {
+			writeSummary("\tRenaming class " + clazz.fullName() + " to " + grandParent.fullName() + "." + clazz.name());
+			String newName = parent.name() + clazz.name();
+			setPrivateField(clazz, "name", newName);
 		}
 
 		classes.put(clazz.name(), clazz);
 
-		// Finally modify the class so that it refers back the container:
+		// Make sure the class's outer container is updated to point to grandparent
 		setPrivateField(clazz, "outer", grandParent);
 	}
\ No newline at end of file
