diff --git a/tmp/6f577a03-d20b-456b-a6df-0a2d6cd6a87a_buggy.java b/tmp/5669c9df-6209-4c5e-82ba-b649e349a2cb_fixed.java
index 47a8941..7bdb8b2 100644
--- a/tmp/6f577a03-d20b-456b-a6df-0a2d6cd6a87a_buggy.java
+++ b/tmp/5669c9df-6209-4c5e-82ba-b649e349a2cb_fixed.java
@@ -1,53 +1,44 @@
-	/**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
-	 */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+    // Save the original parent and grandparent containers
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
     JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
+    
+    // Remove the class from its original parent's containers first.
+    Map<String, JDefinedClass> origParentMap = getPrivateField(parent, "classes");
+    origParentMap.remove(clazz.name());
+
+    // Get the grandparent's container map for adding this class
     Map<String, JDefinedClass> classes;
-
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
-			// Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
-
         classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+    } else {
         JPackage grandParentPackage = (JPackage) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
-
         classes = getPrivateField(grandParentPackage, "classes");
-
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
         setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
+        // Update schema component to reflect non-anonymous declaration
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
-
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+                assert sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal();
                 setPrivateField(sc, "anonymous", Boolean.FALSE);
-
                 break;
             }
         }
     }
 
+    // Check if name collision exists before putting into grandparent's map
     if (classes.containsKey(clazz.name())) {
         writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+        setPrivateField(clazz, "name", parent.name() + clazz.name()); // Set new name
     }
 
+    // Add updated name to grandparent's classes map
     classes.put(clazz.name(), clazz);
 
-		// Finally modify the class so that it refers back the container:
+    // Finally set outer container to grandparent
     setPrivateField(clazz, "outer", grandParent);
 }
\ No newline at end of file
