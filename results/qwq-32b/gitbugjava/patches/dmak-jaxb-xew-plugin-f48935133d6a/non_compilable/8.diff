diff --git a/tmp/754f40c9-bcda-4551-9974-516514e26b14_buggy.java b/tmp/8090c3ef-631e-4d41-a19f-d1599fc276bb_fixed.java
index 47a8941..a579a29 100644
--- a/tmp/754f40c9-bcda-4551-9974-516514e26b14_buggy.java
+++ b/tmp/8090c3ef-631e-4d41-a19f-d1599fc276bb_fixed.java
@@ -1,53 +1,65 @@
 	/**
 	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
 	 */
 	private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
 		// Modify the container so it now refers the class. Container can be a class or package.
 		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
 		JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
+		// Remove the original class from its parent's classes map first
+		Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+		parentClasses.remove(clazz.name());
+
 		Map<String, JDefinedClass> classes;
 
 		// FIXME: Pending https://java.net/jira/browse/JAXB-957
 		if (grandParent.isClass()) {
-			// Element class should be added as its container child:
 			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
 			classes = getPrivateField(grandParentClass, "classes");
 		}
 		else {
 			JPackage grandParentPackage = (JPackage) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
 			classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
+			// Must ensure that top-level class is not static
 			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
 			for (ClassOutline classOutline : outline.getClasses()) {
 				if (classOutline.implClass == clazz) {
 					XSComponent sc = classOutline.target.getSchemaComponent();
 
-					// FIXME: Inner class is always a local declaration.
+					// FIXME: Inner class is always a local declaration before moving
 					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
 
+					// Mark it as non-local (since moving to top level now)
 					setPrivateField(sc, "anonymous", Boolean.FALSE);
-
 					break;
 				}
 			}
 		}
 
-		if (classes.containsKey(clazz.name())) {
+		// Handle potential name collision in the new container's classes
+		String originalName = clazz.name();
+		boolean renamed = false;
+		if (classes.containsKey(originalName)) {
 			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
 			setPrivateField(clazz, "name", parent.name() + clazz.name());
+			renamed = true;
 		}
 
-		classes.put(clazz.name(), clazz);
+		classes.put(clazz.name(), clazz);  // Now using either original name or new renamed name
 
-		// Finally modify the class so that it refers back the container:
+		// Finally modify the class to refer back to the grandparent container
 		setPrivateField(clazz, "outer", grandParent);
+
+		// If renamed, we need to ensure the className in the schema component also reflects the new name
+		if (renamed) {
+			XSDeclaration sc = (XSDeclaration) clazz.outline().target.getSchemaComponent();
+			setPrivateField(sc, "name", clazz.name());
+		}
 	}
\ No newline at end of file
