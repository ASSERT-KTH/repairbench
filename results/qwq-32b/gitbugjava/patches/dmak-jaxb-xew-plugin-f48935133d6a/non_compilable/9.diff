diff --git a/tmp/a8291ba3-975b-4c79-a55a-c02f0fcd7db9_buggy.java b/tmp/7a662be3-b29a-4170-9ed1-d82ae47190f3_fixed.java
index 47a8941..8727def 100644
--- a/tmp/a8291ba3-975b-4c79-a55a-c02f0fcd7db9_buggy.java
+++ b/tmp/7a662be3-b29a-4170-9ed1-d82ae47190f3_fixed.java
@@ -1,53 +1,52 @@
 	/**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be an inner class.
 	 */
 	private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+		// Obtain the immediate parent and grandparent containers.
 		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
 		JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
+
+		// Remove the class from its current parent's container first to avoid duplicates.
+		Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+		parentClasses.remove(clazz.name());
+
 		Map<String, JDefinedClass> classes;
 
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
+		// Determine grandparent type and set the classes variable.
 		if (grandParent.isClass()) {
-			// Element class should be added as its container child:
 			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
-
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
-
 			classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+		} else {
 			JPackage grandParentPackage = (JPackage) grandParent;
-
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
-			classes = getPrivateField(grandParentPackage, "classes");
-
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
+			// Remove the static modifier for top-level classes in package contexts.
 			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
+			classes = getPrivateField(grandParentPackage, "classes");
+
+			// Update the schema component if needed.
 			for (ClassOutline classOutline : outline.getClasses()) {
 				if (classOutline.implClass == clazz) {
 					XSComponent sc = classOutline.target.getSchemaComponent();
-
-					// FIXME: Inner class is always a local declaration.
 					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
 					setPrivateField(sc, "anonymous", Boolean.FALSE);
-
 					break;
 				}
 			}
 		}
 
+		// Check for name collisions in the new parent and rename if necessary.
 		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+			String newName = parent.name() + clazz.name();
+			writeSummary("\tRenaming class " + clazz.fullName() + " to " + newName);
+			setPrivateField(clazz, "name", newName);
 		}
 
+		// Add the class to the new grandparent's container.
 		classes.put(clazz.name(), clazz);
 
-		// Finally modify the class so that it refers back the container:
+		// Update the outer container reference of the class.
 		setPrivateField(clazz, "outer", grandParent);
 	}
\ No newline at end of file
