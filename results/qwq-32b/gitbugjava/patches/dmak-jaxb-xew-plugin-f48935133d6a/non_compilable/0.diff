diff --git a/tmp/ac267465-8d99-4d5a-b475-3a280cc14565_buggy.java b/tmp/242d5e6e-59f4-476c-80a1-f534cdff555f_fixed.java
index 47a8941..d392471 100644
--- a/tmp/ac267465-8d99-4d5a-b475-3a280cc14565_buggy.java
+++ b/tmp/242d5e6e-59f4-476c-80a1-f534cdff555f_fixed.java
@@ -1,53 +1,52 @@
-	/**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
-	 */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
     JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
+
+    // Remove the class from its current container first
+    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+    parentClasses.remove(clazz.name());
+
     Map<String, JDefinedClass> classes;
 
     // FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
-			// Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
-
-			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
-
+        writeSummary("\tMoving inner class " + clazz.fullName() + " to class " 
+                   + grandParentClass.fullName());
         classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+    } else {
         JPackage grandParentPackage = (JPackage) grandParent;
-
-			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
-
+        writeSummary("\tMoving inner class " + clazz.fullName() + " to package " 
+                   + grandParentPackage.name());
         classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
-			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
+        // Remove static to prevent top-level class compilation error
+        setPrivateField(clazz.mods(), "mods", 
+                      Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
-
-					// FIXME: Inner class is always a local declaration.
                 assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
                 setPrivateField(sc, "anonymous", Boolean.FALSE);
-
                 break;
             }
         }
     }
 
+    // Check name collision in the destination container
     if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+        writeSummary("\tRenaming class " + clazz.fullName() + " to class " 
+                   + ((grandParent instanceof JDefinedClass)
+                   ? grandParent.fullName() + clazz.name()
+                   : grandParentPackage.name() + clazz.name()));
+        // Construct new unique name (parent's name + current name)
+        String newName = parent.name() + clazz.name();
+        setPrivateField(clazz, "name", newName); // Update class's name field
     }
 
-		classes.put(clazz.name(), clazz);
+    classes.put(clazz.name(), clazz); // Update the destination container's map
 
-		// Finally modify the class so that it refers back the container:
+    // Update the class's outer reference to the grandparent container
     setPrivateField(clazz, "outer", grandParent);
 }
\ No newline at end of file
