diff --git a/tmp/b643714e-65c7-4f5b-ac01-9ea5c1e8dcc5_buggy.java b/tmp/860158dc-3b2d-42cf-9594-a4b714c1543c_fixed.java
index 016a7f6..d2be7be 100644
--- a/tmp/b643714e-65c7-4f5b-ac01-9ea5c1e8dcc5_buggy.java
+++ b/tmp/860158dc-3b2d-42cf-9594-a4b714c1543c_fixed.java
@@ -1,29 +1,31 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
-            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
-
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+        Node prev = previousSibling();
         Node next = nextSibling();
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+        boolean couldSkip = 
+            (next instanceof Element && ((Element) next).shouldIndent(out)) ||
+            (next instanceof TextNode && (((TextNode) next).isBlank()));
         if (couldSkip && isBlank) return;
 
-            Node prev = previousSibling();
+        trimLeading = (trimLikeBlock && (siblingIndex == 0 || prev instanceof Element)) ||
+                     parentNode instanceof Document;
+        trimTrailing = trimLikeBlock && (next == null);
+
         if (
             (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
             (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+            (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))
+        ) {
             indent(accum, depth, out);
         }
+    }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
