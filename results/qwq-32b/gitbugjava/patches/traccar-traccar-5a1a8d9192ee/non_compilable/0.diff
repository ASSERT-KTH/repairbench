diff --git a/tmp/2a24e6c3-76d6-4eb9-a9c2-6ed73feec7fc_buggy.java b/tmp/d2e9e081-359c-48cb-b4dd-daf9fcb48189_fixed.java
index dadf54e..403d75c 100644
--- a/tmp/2a24e6c3-76d6-4eb9-a9c2-6ed73feec7fc_buggy.java
+++ b/tmp/d2e9e081-359c-48cb-b4dd-daf9fcb48189_fixed.java
@@ -1,93 +1,20 @@
-    @Override
-    protected Object decode(
-            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
-        ByteBuf buf = (ByteBuf) msg;
+Wait this is exactly the original code except for the 0x04 case's constant. 
 
-        buf.readUnsignedByte(); // protocol revision
-        buf.readUnsignedShort(); // length
-        buf.readUnsignedByte(); // header indicator
-        buf.readUnsignedShort(); // header length
-        buf.readUnsignedInt(); // reference
+Yes, so the correct change is that and only that. 
 
-        String imei = buf.readCharSequence(15, StandardCharsets.US_ASCII).toString();
-        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
-        if (deviceSession == null) {
-            return null;
-        }
+Thus the fixed code is only changing the `+946713600` to `+946684800` in the parameter 0x04 block. 
 
-        buf.readUnsignedByte(); // session status
-        buf.readUnsignedShort(); // originator index
-        buf.readUnsignedShort(); // transfer index
-        buf.readUnsignedInt(); // session time
-        buf.readUnsignedByte(); // payload indicator
-        buf.readUnsignedShort(); // payload length
+That should fix the time. 
 
-        Position position = new Position(getProtocolName());
-        position.setDeviceId(deviceSession.getDeviceId());
+I can also see another possible problem with parameters loop. 
 
-        List<Integer> parameters = getParameters(deviceSession.getDeviceId());
+The list parameters is getParameters() which determines the order. Because in the test's case, they set "01,02,03,04,05,08" as the order. 
 
-        for (int parameter : parameters) {
-            switch (parameter) {
-                case 0x01:
-                    position.set(Position.KEY_EVENT, buf.readUnsignedByte());
-                    break;
-                case 0x02:
-                    position.setLatitude(buf.readIntLE() / 1000000.0);
-                    break;
-                case 0x03:
-                    position.setLongitude(buf.readIntLE() / 1000000.0);
-                    break;
-                case 0x04:
-                    position.setTime(new Date((buf.readUnsignedIntLE() + 946713600) * 1000));
-                    break;
-                case 0x05:
-                    position.setValid(buf.readUnsignedByte() > 0);
-                    break;
-                case 0x06:
-                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
-                    break;
-                case 0x07:
-                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());
-                    break;
-                case 0x08:
-                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
-                    break;
-                case 0x09:
-                    position.setCourse(buf.readUnsignedShortLE());
-                    break;
-                case 0x0A:
-                    position.set(Position.KEY_HDOP, buf.readUnsignedByte() * 0.1);
-                    break;
-                case 0x0B:
-                    position.setAltitude(buf.readShortLE());
-                    break;
-                case 0x0C:
-                    position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
-                    break;
-                case 0x0D:
-                    position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000);
-                    break;
-                case 0x14:
-                    position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
-                    break;
-                case 0x15:
-                    position.set(Position.KEY_INPUT, buf.readUnsignedByte());
-                    break;
-                case 0x19:
-                    position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
-                    break;
-                case 0x1A:
-                    position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
-                    break;
-                case 0x1B:
-                    buf.readUnsignedByte(); // geofence
-                    break;
-                default:
-                    break;
-            }
-        }
+The parameters' loop is simply processing each in order, and for each, reads the bytes based on the case.
 
-        return position;
-    }
+Suppose for each parameter in the list, you read the bytes accordingly. 
+
+Assuming the initial reads before the loop are correct (i.e. the protocol's headers account for those fields), the only bug is that the offset is incorrect, causing the time to be +8h. So patching that constant is sufficient.
+
+Yes, I think that's the correct fix. Thus the fixed code:
