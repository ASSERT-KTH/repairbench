diff --git a/tmp/5fa478dc-1b9d-4524-9848-536444027011_buggy.java b/tmp/8f63e96f-0287-4c37-b1c6-c0900730c329_fixed.java
index fcb460f..fa3bf83 100644
--- a/tmp/5fa478dc-1b9d-4524-9848-536444027011_buggy.java
+++ b/tmp/8f63e96f-0287-4c37-b1c6-c0900730c329_fixed.java
@@ -1,183 +1,198 @@
 private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
     List<Position> positions = new LinkedList<>();
 
     buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
     String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
     buf.skipBytes(1 + 3 + 1);
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
     buf.readUnsignedIntLE(); // remaining cache
     int count = buf.readUnsignedShortLE();
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         buf.readUnsignedShortLE(); // length
         buf.readUnsignedShortLE(); // index
 
         int paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             switch (id) {
                 case 0x01:
                     position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                     break;
                 case 0x05:
                     position.setValid(buf.readUnsignedByte() > 0);
                     break;
                 case 0x06:
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
                 case 0x07:
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     break;
                 case 0x14:
                     position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                     break;
                 case 0x15:
-                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());
+                    int input = buf.readUnsignedByte();
+                    position.set(Position.KEY_INPUT, input);
+                    // 设置锁定状态，若输入值的最高位（第七位）设定了
+                    position.set(Position.KEY_LOCK, (input & 0x80) != 0);
                     break;
                 case 0x97:
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                     break;
                 case 0x9D:
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                     break;
                 case 0xFE69:
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     break;
                 default:
                     buf.readUnsignedByte();
                     break;
             }
         }
 
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             switch (id) {
                 case 0x08:
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                     break;
                 case 0x09:
                     position.setCourse(buf.readUnsignedShortLE());
                     break;
                 case 0x0A:
                     position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
                     break;
                 case 0x0B:
                     position.setAltitude(buf.readShortLE());
                     break;
                 case 0x16:
-                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
+                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x19:
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x1A:
                     position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x40:
                     position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
                     break;
                 case 0x91:
                 case 0x92:
                     position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
                     break;
                 case 0x98:
                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
                     break;
                 case 0x99:
                     position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                     break;
                 case 0x9C:
                     position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
                     break;
                 case 0x9F:
                     position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
                     break;
                 case 0xC9:
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
                     break;
                 default:
                     buf.readUnsignedShortLE();
                     break;
             }
         }
 
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             switch (id) {
                 case 0x02:
                     position.setLatitude(buf.readIntLE() * 0.000001);
                     break;
                 case 0x03:
                     position.setLongitude(buf.readIntLE() * 0.000001);
                     break;
                 case 0x04:
-                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
+                    position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01 timestamp
                     break;
                 case 0x0C:
                 case 0x9B:
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                     break;
                 case 0x0D:
                     position.set("runtime", buf.readUnsignedIntLE());
                     break;
                 case 0x25:
                     position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
                     break;
                 case 0xA0:
                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
                     break;
                 case 0xA2:
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
                     break;
                 default:
+                    // 如果未认真的的參水 number, 跳過其's值 (需占4 bytes in third param loop)
                     buf.readUnsignedIntLE();
                     break;
             }
         }
 
+        // 第四批参数处理
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
-                int length = buf.readUnsignedByte();
+            int length = buf.readUnsignedByte();  // 当前参数数据的长度
+
             switch (id) {
                 case 0x2A:
                 case 0x2B:
                 case 0x2C:
                 case 0x2D:
                 case 0x2E:
                 case 0x2F:
                 case 0x30:
                 case 0x31:
-                        buf.readUnsignedByte(); // label
-                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                    // 参考面板 includes a 1-byte label followed by 2-byte data
+                    int label = buf.readUnsignedByte();
+                    int data = buf.readShortLE();
+                    position.set(Position.PREFIX_TEMP + (id - 0x2A), data * 0.01);
                     break;
                 case 0xFE31:
-                        buf.readUnsignedByte(); // alarm protocol
-                        buf.readUnsignedByte(); // alarm type
+                    // 报警参数: 协议（1 byte）+ 类型（1 byte）
+                    // 如果报警类型是 0x01 （例如表示设备被锁定）
+                    int alarmProtocol = buf.readUnsignedByte();
+                    int alarmType = buf.readUnsignedByte();
+                    if (alarmType == 0x01) {
+                        position.set(Position.KEY_LOCK, true);
+                    }
+                    // 跳过剩余（length-2） bytes of theの parameter data
                     buf.skipBytes(length - 2);
                     break;
                 default:
+                    // 跳过该参数的剩余数据（已有 length 字节）
                     buf.skipBytes(length);
                     break;
             }
         }
 
         positions.add(position);
     }
 
     return positions;
 }
\ No newline at end of file
