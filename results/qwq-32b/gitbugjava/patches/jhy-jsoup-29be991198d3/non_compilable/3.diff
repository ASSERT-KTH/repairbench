diff --git a/tmp/88e4047e-893f-4cb0-a553-f4db8d534971_buggy.java b/tmp/4db7272c-57fe-45d6-81f8-81bcdc857d35_fixed.java
index 862c60c..99fee53 100644
--- a/tmp/88e4047e-893f-4cb0-a553-f4db8d534971_buggy.java
+++ b/tmp/4db7272c-57fe-45d6-81f8-81bcdc857d35_fixed.java
@@ -1,25 +1,39 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
             trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // Determine if the previous sibling is an element
+            boolean previousIsElement = false;
+            if (siblingIndex > 0 && parent != null) {
+                Node previousSibling = parent.childNodes().get(siblingIndex - 1);
+                previousIsElement = previousSibling instanceof Element;
+            }
+
+            // if this text is just whitespace, skip if next node requires indent or is blank
             Node next = this.nextSibling();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) ||
+                (next instanceof TextNode && ((TextNode) next).isBlank());
             if (couldSkip && isBlank()) return;
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+            // Adjust condition to call indent when preceding sibling is an element and in block formatting
+            if ((
+                (siblingIndex == 0 || previousIsElement) &&
+                parent != null && parent.tag().formatAsBlock() &&
+                !isBlank()
+            ) || (
+                out.outline() && siblingNodes().size() > 0 && !isBlank()
+            )) {
                 indent(accum, depth, out);
             }
+        }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
