diff --git a/tmp/b49737f9-1190-4f26-ab22-16609496d9df_buggy.java b/tmp/9275686a-2625-4466-800e-f5beff098d42_fixed.java
index 862c60c..8fea9b8 100644
--- a/tmp/b49737f9-1190-4f26-ab22-16609496d9df_buggy.java
+++ b/tmp/9275686a-2625-4466-800e-f5beff098d42_fixed.java
@@ -1,25 +1,38 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
+    boolean precedingElement = false;
+    
+    // Check if the previous sibling is an Element
+    if (siblingIndex > 0 && parent != null) {
+        Node previous = parent.childNode(siblingIndex - 1);
+        precedingElement = previous instanceof Element;
+    }
+
     if (normaliseWhite) {
         trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) || 
-                parentNode instanceof Document;
+                      (parentNode instanceof Document);
         trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+        // Skip if the text is blank and the next node could cause an indent or a blank text
         Node next = this.nextSibling();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) ||
+                            (next instanceof TextNode && ((TextNode) next).isBlank());
         if (couldSkip && isBlank()) return;
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+        // Now include the condition where trailing element may trigger indent
+        if (( (siblingIndex == 0 || precedingElement) && 
+               parent != null && 
+               parent.tag().isBlock() && 
+               !isBlank()) || 
+            (out.outline() && siblingNodes().size() > 0 && !isBlank())) {
             indent(accum, depth, out);
         }
+    }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
