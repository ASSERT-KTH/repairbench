diff --git a/tmp/a96b3b05-40b2-45cc-8c4e-d4c24b2de3a9_buggy.java b/tmp/9ae53661-680d-44e2-af3f-f8713648465d_fixed.java
index 862c60c..6f54b65 100644
--- a/tmp/a96b3b05-40b2-45cc-8c4e-d4c24b2de3a9_buggy.java
+++ b/tmp/9ae53661-680d-44e2-af3f-f8713648465d_fixed.java
@@ -1,25 +1,46 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
-        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
+    final Element parent = (parentNode instanceof Element) ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
+    boolean isPreviousElement = false;
+
     if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+        // determine if previous node is element when in block parent
+        if (parent != null && parent.tag().isBlock()) {
+            if (siblingIndex > 0) {
+                Node previous = siblingNodes().get(siblingIndex - 1);
+                isPreviousElement = previous instanceof Element;
+            }
+        }
+
+        // Update trimLeading condition to check previous node
+        trimLeading = (parent != null && parent.tag().isBlock()
+            && (siblingIndex == 0 || isPreviousElement)) 
+            || (parentNode instanceof Document);
+
+        trimTrailing = nextSibling() == null && 
+            (parent != null && parent.tag().isBlock());
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = this.nextSibling();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+            || (next instanceof TextNode && ((TextNode) next).isBlank());
         if (couldSkip && isBlank()) return;
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+        // Check if either first sibling, previous was element (in block parent), or outline conditions
+        if (
+            ( (siblingIndex == 0 || isPreviousElement) 
+             && parent != null 
+             && parent.tag().isBlock()
+             && !isBlank() )
+            || 
+            (out.outline() && siblingNodes().size() > 0 && !isBlank()) 
+        ) {
             indent(accum, depth, out);
         }
+    }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
