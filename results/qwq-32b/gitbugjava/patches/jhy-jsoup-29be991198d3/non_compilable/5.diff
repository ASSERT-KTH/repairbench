diff --git a/tmp/defd6ae7-db95-4200-8aac-33ca90c99b32_buggy.java b/tmp/b0f053ea-6d38-4b94-9643-3a17e6e5bd88_fixed.java
index 862c60c..6b06ead 100644
--- a/tmp/defd6ae7-db95-4200-8aac-33ca90c99b32_buggy.java
+++ b/tmp/b0f053ea-6d38-4b94-9643-3a17e6e5bd88_fixed.java
@@ -1,25 +1,54 @@
+    @Override
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
+        Node previousSiblingNode = null;
+        if (siblingIndex > 0) {
+            Element p = parentNode instanceof Element ? ((Element) parentNode) : null;
+            if (p != null && p.childNodeSize() > siblingIndex - 1) {
+                previousSiblingNode = p.childNode(siblingIndex - 1);
+            }
+        }
+
         if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+            trimLeading = (siblingIndex == 0 && (parent != null && parent.tag().isBlock()) || 
+                parentNode instanceof Document);
+            trimTrailing = (nextSibling() == null && parent != null && parent.tag().isBlock());
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // Check if this text node can be skipped due to next node
             Node next = this.nextSibling();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) || 
+                (next instanceof TextNode && (((TextNode) next)).isBlank());
             if (couldSkip && isBlank()) return;
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
-                indent(accum, depth, out);
+            boolean shouldIndent = false;
+            shouldIndent |= (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank());
+            shouldIndent |= (parentNode instanceof Document);
+            if (out.outline()) {
+                shouldIndent |= (siblingNodes().size() > 0 && !isBlank());
+            }
+            if (previousSiblingNode != null && previousSiblingNode instanceof Element) {
+                if (parent != null && parent.tag().isBlock() && !isBlank()) {
+                    shouldIndent = true;
+                }
+            }
+
+            if (shouldIndent) {
+                int indentDepth = depth;
+                // Adjust depth if after an element in a block parent
+                if (previousSiblingNode instanceof Element && 
+                    parent != null && parent.tag().isBlock() && 
+                    !isBlank() && 
+                    (siblingIndex == 0 || previousSiblingNode instanceof Element)) {
+            indentDepth--;
+        }
+                indent(accum, indentDepth, out);
+            }
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
