diff --git a/tmp/2bacb72a-bfbe-4efb-8a9e-9e9a34e3712d_buggy.java b/tmp/6412a650-f875-48e3-b835-b528f3271ebc_fixed.java
index d27c40c..7a153d4 100644
--- a/tmp/2bacb72a-bfbe-4efb-8a9e-9e9a34e3712d_buggy.java
+++ b/tmp/6412a650-f875-48e3-b835-b528f3271ebc_fixed.java
@@ -1,49 +1,93 @@
 /** Compute two arguments arc tangent of a derivative structure.
  * @param y array holding the first operand
  * @param yOffset offset of the first operand in its array
  * @param x array holding the second operand
  * @param xOffset offset of the second operand in its array
  * @param result array where result must be stored (for
  * two arguments arc tangent the result array <em>cannot</em>
  * be the input array)
  * @param resultOffset offset of the result in its array
  */
 public void atan2(final double[] y, final int yOffset,
                   final double[] x, final int xOffset,
                   final double[] result, final int resultOffset) {
 
+    // handle special cases with zeros and infinities for correct sign
+    final double y0 = y[yOffset];
+    final double x0 = x[xOffset];
+
+    // Special cases for zero arguments
+    if (Double.isNaN(y0) || Double.isNaN(x0)) {
+        result[resultOffset] = Double.NaN;
+        for (int i = 1; i < getSize(); ++i) {
+            result[resultOffset + i] = Double.NaN;
+        }
+        return;
+    }
+
+    if (y0 == 0.0 && x0 == 0.0) {
+        // atan2(±0, +0) = ±0
+        // atan2(+0, -0) = +π
+        // atan2(-0, -0) = -π
+        // See Math.atan2 javadoc
+        long yBits = Double.doubleToRawLongBits(y0);
+        long xBits = Double.doubleToRawLongBits(x0);
+
+        boolean yNeg = (yBits & 0x8000000000000000L) != 0;
+        boolean xNeg = (xBits & 0x8000000000000000L) != 0;
+
+        if (!xNeg) {
+            // x is +0.0
+            result[resultOffset] = y0; // return y (±0.0)
+        } else {
+            // x is -0.0
+            result[resultOffset] = yNeg ? -FastMath.PI : FastMath.PI;
+        }
+        for (int i = 1; i < getSize(); ++i) {
+            result[resultOffset + i] = 0.0;
+        }
+        return;
+    }
+
+    // Infinity handling, let Math.atan2 handle value
+    if (Double.isInfinite(y0) || Double.isInfinite(x0)) {
+        result[resultOffset] = Math.atan2(y0, x0);
+        for (int i = 1; i < getSize(); ++i) {
+            result[resultOffset + i] = 0.0;
+        }
+        return;
+    }
+
     // compute r = sqrt(x^2+y^2)
     double[] tmp1 = new double[getSize()];
     multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
     double[] tmp2 = new double[getSize()];
     multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
     add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
     rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
     if (x[xOffset] >= 0) {
 
         // compute atan2(y, x) = 2 atan(y / (r + x))
         add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
         divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
         atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
         for (int i = 0; i < tmp2.length; ++i) {
             result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
         }
 
     } else {
 
         // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
         subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
         divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
         atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
         result[resultOffset] =
                 ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
         for (int i = 1; i < tmp2.length; ++i) {
             result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
         }
 
     }
 
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
 }
\ No newline at end of file
