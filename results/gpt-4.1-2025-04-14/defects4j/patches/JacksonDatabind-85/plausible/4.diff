diff --git a/tmp/1ade8c9a-4d03-4bd6-8d73-6a934d362ce9_buggy.java b/tmp/31cc6b8e-359e-4fb8-b8f3-1328098a2ffe_fixed.java
index d926eea..1724ba3 100644
--- a/tmp/1ade8c9a-4d03-4bd6-8d73-6a934d362ce9_buggy.java
+++ b/tmp/31cc6b8e-359e-4fb8-b8f3-1328098a2ffe_fixed.java
@@ -1,48 +1,71 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
     // Simple case first: serialize as numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
 
     // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
     // First: custom pattern will override things
     if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
                     || format.hasLocale() || format.hasTimeZone()) {
         TimeZone tz = format.getTimeZone();
         final String pattern = format.hasPattern()
                         ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
+                        : null;
         final Locale loc = format.hasLocale()
                         ? format.getLocale()
                         : serializers.getLocale();
+
+        // If custom pattern is given, use it; otherwise, use contextual default formatter (from provider)
+        if (pattern != null) {
             SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
             if (tz == null) {
                 tz = serializers.getTimeZone();
             }
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
+        } else {
+            // if no explicit pattern, use provider's DateFormat, but adjust for locale/timezone overrides
+            DateFormat baseFormat = serializers.getConfig().getDateFormat();
+            DateFormat df;
+
+            if (baseFormat instanceof SimpleDateFormat) {
+                SimpleDateFormat sdf = (SimpleDateFormat) baseFormat;
+                SimpleDateFormat newSdf = new SimpleDateFormat(sdf.toPattern(), loc);
+                TimeZone tzToSet = (tz == null) ? newSdf.getTimeZone() : tz;
+                newSdf.setTimeZone(tzToSet);
+                df = newSdf;
+            } else {
+                // Try to clone and set timezone
+                df = (DateFormat) baseFormat.clone();
+                if (tz != null) {
+                    df.setTimeZone(tz);
+                }
+            }
+            return withFormat(Boolean.FALSE, df);
+        }
     }
 
     // Otherwise, need one of these changes:
 
 
     // Jackson's own `StdDateFormat` is quite easy to deal with...
 
     // 08-Jun-2017, tatu: Unfortunately there's no generally usable
     //    mechanism for changing `DateFormat` instances (or even clone()ing)
     //    So: require it be `SimpleDateFormat`; can't config other types
     // serializers.reportBadDefinition(handledType(), String.format(
     // Ugh. No way to change `Locale`, create copy; must re-crete completely:
     return this;
 }
\ No newline at end of file
