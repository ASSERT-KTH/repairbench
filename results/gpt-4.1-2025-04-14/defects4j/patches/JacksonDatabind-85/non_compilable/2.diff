diff --git a/tmp/60bea5a3-eef4-4511-a7ad-0199cb1a254e_buggy.java b/tmp/2f36da5a-3b1e-40a3-9efb-d2dfef28a24c_fixed.java
index d926eea..301dfe2 100644
--- a/tmp/60bea5a3-eef4-4511-a7ad-0199cb1a254e_buggy.java
+++ b/tmp/2f36da5a-3b1e-40a3-9efb-d2dfef28a24c_fixed.java
@@ -1,48 +1,63 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
     // Simple case first: serialize as numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
 
     // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
     // First: custom pattern will override things
     if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
                     || format.hasLocale() || format.hasTimeZone()) {
         TimeZone tz = format.getTimeZone();
         final String pattern = format.hasPattern()
                         ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
+                        : null;
         final Locale loc = format.hasLocale()
                         ? format.getLocale()
                         : serializers.getLocale();
+        if (pattern != null) {
             SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
             if (tz == null) {
                 tz = serializers.getTimeZone();
             }
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
+        } else {
+            // [databind#1648]: If no pattern specified, but time zone and/or locale is,
+            // clone the provider's DateFormat and adjust accordingly
+            DateFormat base = serializers.getConfig().getDateFormat();
+            DateFormat df;
+            // Must clone to avoid accidental state sharing.
+            if (base instanceof SimpleDateFormat) {
+                SimpleDateFormat sdf = (SimpleDateFormat) base.clone();
+                if (tz != null) {
+                    sdf.setTimeZone(tz);
+                }
+                if (format.hasLocale()) {
+                    sdf.setDateFormatSymbols(SimpleDateFormat.getInstance().
+                        getDateFormatSymbols());
+                    // Actually, DateFormatSymbols cannot be constructed for a given Locale,
+                    // but getInstance should use it.
+                }
+                df = sdf;
+            } else { // otherwise, fall back to whatever base is
+                // Unfortunately can't force locale/tz for arbitrary DateFormat implementations
+                df = base;
+            }
+            return withFormat(Boolean.FALSE, df);
+        }
     }
 
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
     return this;
 }
\ No newline at end of file
