diff --git a/tmp/e2fda9b3-272a-41fd-aa67-ff0d65739c3e_buggy.java b/tmp/fde8b823-f206-4283-b784-242eed3c6829_fixed.java
index d926eea..7608aef 100644
--- a/tmp/e2fda9b3-272a-41fd-aa67-ff0d65739c3e_buggy.java
+++ b/tmp/fde8b823-f206-4283-b784-242eed3c6829_fixed.java
@@ -1,48 +1,55 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
     // Simple case first: serialize as numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
 
     // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
     // First: custom pattern will override things
     if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
                     || format.hasLocale() || format.hasTimeZone()) {
         TimeZone tz = format.getTimeZone();
         final String pattern = format.hasPattern()
                         ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
+                        : null;
         final Locale loc = format.hasLocale()
                         ? format.getLocale()
                         : serializers.getLocale();
+        if (pattern != null) {
             SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
             if (tz == null) {
                 tz = serializers.getTimeZone();
             }
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
+        } else {
+            // [databind#1648]: No custom pattern; use contextual default DateFormat
+            DateFormat base = serializers.getConfig().getDateFormat();
+            DateFormat df = base;
+            if ((tz != null) && (base instanceof SimpleDateFormat)) {
+                // Need to clone to set TimeZone, Locale
+                SimpleDateFormat sdf = (SimpleDateFormat) base.clone();
+                sdf.setTimeZone(tz);
+                df = sdf;
+            } else if (format.hasLocale() && (base instanceof SimpleDateFormat)) {
+                SimpleDateFormat sdf = (SimpleDateFormat) base.clone();
+                sdf.setDateFormatSymbols(new DateFormatSymbols(loc));
+                df = sdf;
+            }
+            // else for things like StdDateFormat, rely on global settings
+            return withFormat(Boolean.FALSE, df);
+        }
     }
-
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
     return this;
 }
\ No newline at end of file
