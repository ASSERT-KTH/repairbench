diff --git a/tmp/0aea9396-6cf2-41b1-8561-319c6c62a0c5_buggy.java b/tmp/60974a20-5f1d-4eb2-a6b2-697491c1cd21_fixed.java
index a9a5e27..b551e8a 100644
--- a/tmp/0aea9396-6cf2-41b1-8561-319c6c62a0c5_buggy.java
+++ b/tmp/60974a20-5f1d-4eb2-a6b2-697491c1cd21_fixed.java
@@ -1,24 +1,24 @@
-    /**
-     * Multiply two values throwing an exception if overflow occurs.
-     * 
-     * @param val1  the first value
-     * @param val2  the second value
-     * @return the new total
-     * @throws ArithmeticException if the value is too big or too small
-     * @since 1.2
-     */
 public static long safeMultiply(long val1, int val2) {
     switch (val2) {
         case -1:
+            if (val1 == Long.MIN_VALUE) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
             return -val1;
         case 0:
             return 0L;
         case 1:
             return val1;
     }
+    // Special handling for MIN_VALUE because abs(MIN_VALUE) is still MIN_VALUE (negative)
+    if (val1 == Long.MIN_VALUE && (val2 == -1 || val2 == Integer.MIN_VALUE)) {
+        throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+    }
+
     long total = val1 * val2;
-        if (total / val2 != val1) {
+    // Only need to check when val2 != 0
+    if (val2 != 0 && total / val2 != val1) {
         throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
     }
     return total;
 }
\ No newline at end of file
