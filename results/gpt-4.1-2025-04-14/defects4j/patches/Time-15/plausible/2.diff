diff --git a/tmp/2d2d2169-fb52-4cc8-b5fe-0315cb4eb8a1_buggy.java b/tmp/731afa70-e5e6-4959-948e-230f7a0e8fa0_fixed.java
index a9a5e27..7143dd4 100644
--- a/tmp/2d2d2169-fb52-4cc8-b5fe-0315cb4eb8a1_buggy.java
+++ b/tmp/731afa70-e5e6-4959-948e-230f7a0e8fa0_fixed.java
@@ -1,24 +1,27 @@
-    /**
-     * Multiply two values throwing an exception if overflow occurs.
-     * 
-     * @param val1  the first value
-     * @param val2  the second value
-     * @return the new total
-     * @throws ArithmeticException if the value is too big or too small
-     * @since 1.2
-     */
 public static long safeMultiply(long val1, int val2) {
     switch (val2) {
         case -1:
+            if (val1 == Long.MIN_VALUE) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
             return -val1;
         case 0:
             return 0L;
         case 1:
             return val1;
     }
     long total = val1 * val2;
-        if (total / val2 != val1) {
+    // Only check for overflow if val2 != 0
+    // If val1 == 0, the result is always safe (0 no overflow)
+    // For nonzero, check reverse division
+    if (((val2 > 0) && (val1 > Long.MAX_VALUE / val2 || val1 < Long.MIN_VALUE / val2))
+        || ((val2 < 0) && ((val1 == Long.MIN_VALUE && val2 == -1)
+                           || (val1 > 0 && val1 > Long.MIN_VALUE / val2)
+                           || (val1 < 0 && val1 < Long.MAX_VALUE / val2)))) {
+        throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+    }
+    if (val2 != 0 && total / val2 != val1) {
         throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
     }
     return total;
 }
\ No newline at end of file
