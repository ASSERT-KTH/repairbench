diff --git a/tmp/5ae3d417-d818-4862-bc7f-ec7ed3a61c4c_buggy.java b/tmp/3bac7964-4db8-4345-b919-a14d982750f7_fixed.java
index 9976e43..b413699 100644
--- a/tmp/5ae3d417-d818-4862-bc7f-ec7ed3a61c4c_buggy.java
+++ b/tmp/3bac7964-4db8-4345-b919-a14d982750f7_fixed.java
@@ -1,76 +1,68 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
 
   ArrowType that = (ArrowType) other;
 
-    // This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.7: Subtyping Function Types.
-
   // this.returnType <: that.returnType (covariant)
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
-    // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
+  // We do not allow extra required parameters in the subtype (this).
+  // So "function(x, y)" is NOT a subtype of "function(x)".
+  // Required parameters in "this" must not outnumber required parameters in "that".
+
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
+
+  while (thisParam != null || thatParam != null) {
+    boolean thisIsVarArgs = thisParam != null && thisParam.isVarArgs();
+    boolean thatIsVarArgs = thatParam != null && thatParam.isVarArgs();
+
+    if (thisParam != null && thatParam != null) {
       JSType thisParamType = thisParam.getJSType();
       JSType thatParamType = thatParam.getJSType();
+
+      // Contravariant: that.paramType[i] <: this.paramType[i]
       if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
+        if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {
           return false;
         }
       }
 
-      boolean thisIsVarArgs = thisParam.isVarArgs();
-      boolean thatIsVarArgs = thatParam.isVarArgs();
-
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
-      // don't advance if we have variable arguments
+      // Move to next param unless we have varargs
       if (!thisIsVarArgs) {
         thisParam = thisParam.getNext();
       }
       if (!thatIsVarArgs) {
         thatParam = thatParam.getNext();
       }
-
-      // both var_args indicates the end
+      // If both are varargs, we're done with parameters
       if (thisIsVarArgs && thatIsVarArgs) {
         thisParam = null;
         thatParam = null;
       }
+      continue;
     }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+    // If "this" has remaining required parameters and "that" does not,
+    // then "this" is not a subtype of "that".
+    if (thisParam != null && !thisParam.isOptional() && !thisParam.isVarArgs()) {
+      return false;
+    }
+
+    // If "that" has remaining params, that's OK (fewer required in "this").
+    // So, just advance.
+    if (thisParam != null) {
+      thisParam = thisParam.getNext();
+    }
+    if (thatParam != null) {
+      thatParam = thatParam.getNext();
+    }
+  }
 
   return true;
 }
\ No newline at end of file
