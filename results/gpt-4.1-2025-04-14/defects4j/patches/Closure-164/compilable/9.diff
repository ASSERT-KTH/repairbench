diff --git a/tmp/4d56f219-573c-480d-b0ed-fa43d477ee28_buggy.java b/tmp/2cefd2ff-faca-451c-8d33-c3858748915b_fixed.java
index 9976e43..ee9eedb 100644
--- a/tmp/4d56f219-573c-480d-b0ed-fa43d477ee28_buggy.java
+++ b/tmp/2cefd2ff-faca-451c-8d33-c3858748915b_fixed.java
@@ -1,76 +1,68 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
 
   ArrowType that = (ArrowType) other;
 
   // This is described in Draft 2 of the ES4 spec,
   // Section 3.4.7: Subtyping Function Types.
 
   // this.returnType <: that.returnType (covariant)
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
-    // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
-      JSType thisParamType = thisParam.getJSType();
+
+  // We must check that every required parameter in the supertype (thatParam) is present
+  // and thatParamType <: thisParamType (contravariant).
+  while (thatParam != null) {
     JSType thatParamType = thatParam.getJSType();
-      if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
-          return false;
-        }
-      }
-
-      boolean thisIsVarArgs = thisParam.isVarArgs();
     boolean thatIsVarArgs = thatParam.isVarArgs();
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
-      // don't advance if we have variable arguments
+    // If thisParam is null, then this function does not have enough parameters
+    if (thisParam == null) {
+      // If the supertype is expecting a variable-arity argument, then that's fine.
+      if (!thatIsVarArgs) {
+        return false;
+      } else {
+        // we're done (no more parameters required)
+        break;
+      }
+    }
+
+    JSType thisParamType = thisParam.getJSType();
+    boolean thisIsVarArgs = thisParam.isVarArgs();
+
+    // If the supertype provides a type, that type should be a subtype of the matching
+    // parameter type in this function type (contravariant)
+    if (thatParamType != null) {
+      if (thisParamType == null ||
+          !thatParamType.isSubtype(thisParamType)) {
+        return false;
+      }
+    }
+
+    // If both sides are varargs, we're done.
+    if (thatIsVarArgs && thisIsVarArgs) {
+      break;
+    }
+
+    // Advance thisParam & thatParam unless they are varargs
     if (!thisIsVarArgs) {
       thisParam = thisParam.getNext();
     }
     if (!thatIsVarArgs) {
       thatParam = thatParam.getNext();
     }
 
-      // both var_args indicates the end
-      if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
-      }
+    // Both var_args indicates the end (handled above).
   }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+  // Any extra params in 'this' are okay (subtype can accept more arguments).
 
   return true;
 }
\ No newline at end of file
