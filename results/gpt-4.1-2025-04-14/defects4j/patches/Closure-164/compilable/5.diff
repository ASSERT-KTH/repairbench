diff --git a/tmp/7f05ec91-bda6-43b0-8985-2654b37f86f5_buggy.java b/tmp/33c39c0a-226f-4ff3-b241-19bd1a0471a5_fixed.java
index 9976e43..6bdf40c 100644
--- a/tmp/7f05ec91-bda6-43b0-8985-2654b37f86f5_buggy.java
+++ b/tmp/33c39c0a-226f-4ff3-b241-19bd1a0471a5_fixed.java
@@ -1,76 +1,102 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
 
   ArrowType that = (ArrowType) other;
 
-    // This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.7: Subtyping Function Types.
-
   // this.returnType <: that.returnType (covariant)
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
-    // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
+  // Parameter contravariance and arity checking.
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
-      JSType thisParamType = thisParam.getJSType();
-      JSType thatParamType = thatParam.getJSType();
-      if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
-          return false;
+
+  // Count the number of non-optional, non-varargs parameters (required params)
+  int thisRequired = 0;
+  for (Node n = thisParam; n != null; n = n.getNext()) {
+    if (n.isVarArgs() || n.isOptionalArg()) {
+      break;
+    }
+    thisRequired++;
   }
+  int thatRequired = 0;
+  for (Node n = thatParam; n != null; n = n.getNext()) {
+    if (n.isVarArgs() || n.isOptionalArg()) {
+      break;
+    }
+    thatRequired++;
+  }
+
+  // "that" can't be a supertype if it requires more parameters than "this" provides.
+  if (thisRequired < thatRequired) {
+    return false;
   }
 
-      boolean thisIsVarArgs = thisParam.isVarArgs();
-      boolean thatIsVarArgs = thatParam.isVarArgs();
+  // Compare parameter types contravariantly
+  Node thisIter = thisParam;
+  Node thatIter = thatParam;
+  while (thatIter != null) {
+    JSType thisParamType = thisIter != null ? thisIter.getJSType() : null;
+    JSType thatParamType = thatIter.getJSType();
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
+    boolean thisIsVarArgs = thisIter != null && thisIter.isVarArgs();
+    boolean thatIsVarArgs = thatIter.isVarArgs();
 
-      // don't advance if we have variable arguments
-      if (!thisIsVarArgs) {
-        thisParam = thisParam.getNext();
+    // In type-checking varargs: all remaining params must match varargs type
+    if (thatIsVarArgs) {
+      if (thisIsVarArgs) {
+        // Both have varargs, check vararg types contravariantly.
+        if (thatParamType != null) {
+          if (thisParamType == null || !thatParamType.isSubtype(thisParamType)) {
+            return false;
           }
-      if (!thatIsVarArgs) {
-        thatParam = thatParam.getNext();
         }
-
-      // both var_args indicates the end
-      if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
+        break; // both varargs end parameters
+      } else {
+        // "that" varargs, "this" might have several params, each should be matched
+        while (thisIter != null) {
+          JSType tpt = thisIter.getJSType();
+          if (thatParamType != null) {
+            if (tpt == null || !thatParamType.isSubtype(tpt)) {
+              return false;
+            }
+          }
+          thisIter = thisIter.getNext();
+        }
+        break;
+      }
+    } else if (thisIsVarArgs) {
+      // "this" has varargs, "that" doesn't, only the single type to check.
+      if (thatParamType != null) {
+        if (thisParamType == null || !thatParamType.isSubtype(thisParamType)) {
+          return false;
+        }
+      }
+      break; // Finished checking all "that" params, "this" may accept more params
+    } else {
+      // Neither has varargs, normal parameter position
+      if (thatParamType != null) {
+        if (thisParamType == null || !thatParamType.isSubtype(thisParamType)) {
+          return false;
+        }
+      }
+      thisIter = thisIter != null ? thisIter.getNext() : null;
+      thatIter = thatIter.getNext();
     }
   }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+  // If "that" still has required parameters but ran out of "this" parameters,
+  // it's not a supertype.
+  while (thatIter != null) {
+    if (!thatIter.isOptionalArg() && !thatIter.isVarArgs()) {
+      return false;
+    }
+    thatIter = thatIter.getNext();
+  }
 
   return true;
 }
\ No newline at end of file
