diff --git a/tmp/abc50fbb-c2d3-475c-91ef-9bf64eba6606_buggy.java b/tmp/33a959e9-a121-44d4-907c-23e0fb383597_fixed.java
index 9976e43..6574643 100644
--- a/tmp/abc50fbb-c2d3-475c-91ef-9bf64eba6606_buggy.java
+++ b/tmp/33a959e9-a121-44d4-907c-23e0fb383597_fixed.java
@@ -1,76 +1,71 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
 
   ArrowType that = (ArrowType) other;
 
   // This is described in Draft 2 of the ES4 spec,
   // Section 3.4.7: Subtyping Function Types.
 
   // this.returnType <: that.returnType (covariant)
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
-    // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
-      JSType thisParamType = thisParam.getJSType();
-      JSType thatParamType = thatParam.getJSType();
+
+  // Count parameters
+  int thisCount = 0;
+  for (Node n = thisParam; n != null; n = n.getNext()) thisCount++;
+  int thatCount = 0;
+  for (Node n = thatParam; n != null; n = n.getNext()) thatCount++;
+
+  // Subtype: contravariant parameter comparison
+  // To be a subtype, this function must have **no more required parameters** than "that".
+  // If "this" has more parameters than "that", "this" cannot be a subtype; too many required args.
+  int minParams = Math.min(thisCount, thatCount);
+
+  Node thisP = thisParam;
+  Node thatP = thatParam;
+
+  for (int i = 0; i < minParams; i++) {
+    JSType thisParamType = thisP.getJSType();
+    JSType thatParamType = thatP.getJSType();
     if (thisParamType != null) {
       if (thatParamType == null ||
           !thatParamType.isSubtype(thisParamType)) {
         return false;
       }
     }
+    boolean thisIsVarArgs = thisP.isVarArgs();
+    boolean thatIsVarArgs = thatP.isVarArgs();
 
-      boolean thisIsVarArgs = thisParam.isVarArgs();
-      boolean thatIsVarArgs = thatParam.isVarArgs();
-
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
+    // both var_args indicates the end
+    if (thisIsVarArgs && thatIsVarArgs) {
+      thisP = null;
+      thatP = null;
+      break;
+    }
 
     // don't advance if we have variable arguments
     if (!thisIsVarArgs) {
-        thisParam = thisParam.getNext();
+      thisP = thisP.getNext();
     }
     if (!thatIsVarArgs) {
-        thatParam = thatParam.getNext();
-      }
-
-      // both var_args indicates the end
-      if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
+      thatP = thatP.getNext();
     }
   }
+  // After the above, thisP or thatP may be non-null.
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+  // "this" is a subtype ONLY if it does not require more parameters than "that"
+  // So – if thisP != null (i.e. "this" still has required parameters left), but thatP == null,
+  // then "this" function requires more args than "that" – NOT a subtype.
+  if (thisP != null && thatP == null) {
+    return false;
+  }
 
   return true;
 }
\ No newline at end of file
