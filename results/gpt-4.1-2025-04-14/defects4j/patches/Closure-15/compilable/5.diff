diff --git a/tmp/c2fc42d0-24de-44de-bed0-83f0f06fe8ee_buggy.java b/tmp/b323a655-feb2-4e10-9e7f-beef7da7052a_fixed.java
index b56897c..e3d8d6f 100644
--- a/tmp/c2fc42d0-24de-44de-bed0-83f0f06fe8ee_buggy.java
+++ b/tmp/b323a655-feb2-4e10-9e7f-beef7da7052a_fixed.java
@@ -1,27 +1,32 @@
 @Override
 public boolean apply(Node n) {
   // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
+  // where the function returns (possibly without a return statement)
   if (n == null) {
     return false;
   }
 
-        // TODO(user): We only care about calls to functions that
+  // We only care about calls to functions that
   // passes one of the dependent variable to a non-side-effect free
   // function.
   if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
     return true;
   }
 
   if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
     return true;
   }
 
+  // Treat 'in' and 'instanceof' as having side effects, because their evaluation
+  // order can have observable outcomes (e.g., getters).
+  if (n.isIn() || n.isInstanceOf()) {
+    return true;
+  }
 
   for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
       return true;
     }
   }
   return false;
 }
\ No newline at end of file
