diff --git a/tmp/afb1f674-e896-4cb0-b811-bb565f44e8b2_buggy.java b/tmp/40020755-649f-49a4-b611-ae44d77da3a7_fixed.java
index b56897c..00e55a3 100644
--- a/tmp/afb1f674-e896-4cb0-b811-bb565f44e8b2_buggy.java
+++ b/tmp/40020755-649f-49a4-b611-ae44d77da3a7_fixed.java
@@ -1,27 +1,34 @@
 @Override
 public boolean apply(Node n) {
   // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
+  // where the function returns (possibly without a return statement)
   if (n == null) {
     return false;
   }
 
   // TODO(user): We only care about calls to functions that
   // passes one of the dependent variable to a non-side-effect free
   // function.
   if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
     return true;
   }
 
   if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
     return true;
   }
 
+  // For-IN detection: a "FOR" node with three children, and child 1 = Token.IN
+  if (n.isFor() && n.getChildCount() == 3) {
+    Node cond = n.getSecondChild();
+    if (cond != null && cond.isIn()) {
+      return true;
+    }
+  }
 
   for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
       return true;
     }
   }
   return false;
 }
\ No newline at end of file
