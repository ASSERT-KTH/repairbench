diff --git a/tmp/c691369f-a61f-456a-ab14-4d898c069196_buggy.java b/tmp/29657a3a-39f2-4c84-ac00-f8493203c7e4_fixed.java
index b56897c..bfa08af 100644
--- a/tmp/c691369f-a61f-456a-ab14-4d898c069196_buggy.java
+++ b/tmp/29657a3a-39f2-4c84-ac00-f8493203c7e4_fixed.java
@@ -1,27 +1,39 @@
 @Override
 public boolean apply(Node n) {
   // When the node is null it means, we reached the implicit return
   // where the function returns (possibly without an return statement)
   if (n == null) {
     return false;
   }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+  // Only care about calls or 'new' expressions, not FOR-IN/OF, etc.
   if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
     return true;
   }
 
   if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
     return true;
   }
 
+  // DO NOT consider FOR-IN/OF as having side-effects for our purposes.
+  // We need to skip the RHS of FOR-IN/OF in analysis.
+  if (n.isForIn() || n.isForOf()) {
+    // Only traverse the init and object/iterable expression, skip the body.
+    Node lhs = n.getFirstChild();
+    Node rhs = lhs != null ? lhs.getNext() : null;
+    if (lhs != null && apply(lhs)) {
+      return true;
+    }
+    if (rhs != null && apply(rhs)) {
+      return true;
+    }
+    return false;
+  }
 
   for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
       return true;
     }
   }
   return false;
 }
\ No newline at end of file
