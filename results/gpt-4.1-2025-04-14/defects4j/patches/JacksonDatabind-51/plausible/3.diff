diff --git a/tmp/770e737e-b4b3-4eec-8a6b-80268a7ea83a_buggy.java b/tmp/e04bc996-889e-412a-ac6b-f690696198b7_fixed.java
index a5e7b85..8e935d2 100644
--- a/tmp/770e737e-b4b3-4eec-8a6b-80268a7ea83a_buggy.java
+++ b/tmp/e04bc996-889e-412a-ac6b-f690696198b7_fixed.java
@@ -1,52 +1,44 @@
 protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,
         String typeId) throws IOException
 {
     JsonDeserializer<Object> deser = _deserializers.get(typeId);
     if (deser == null) {
-            /* As per [Databind#305], need to provide contextual info. But for
-             * backwards compatibility, let's start by only supporting this
-             * for base class, not via interface. Later on we can add this
-             * to the interface, assuming deprecation at base class helps.
-             */
         JavaType type = _idResolver.typeFromId(ctxt, typeId);
         if (type == null) {
             // As per [JACKSON-614], use the default impl if no type id available:
             deser = _findDefaultImplDeserializer(ctxt);
             if (deser == null) {
-                    // 10-May-2016, tatu: We may get some help...
                 JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);
-                    if (actual == null) { // what should this be taken to mean?
-                        // TODO: try to figure out something better
+                if (actual == null) {
                     return null;
                 }
-                    // ... would this actually work?
                 deser = ctxt.findContextualValueDeserializer(actual, _property);
             }
         } else {
-                /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,
+            /*
+             * 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,
              *   we actually now need to explicitly narrow from base type (which may have parameterization)
              *   using raw type.
-                 *
-                 *   One complication, though; can not change 'type class' (simple type to container); otherwise
-                 *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual
-                 *   type in process (getting SimpleType of Map.class which will not work as expected)
              */
-                if ((_baseType != null)
-                        && _baseType.getClass() == type.getClass()) {
-                    /* 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;
-                     *   but it appears to check that JavaType impl class is the same which is
-                     *   important for some reason?
-                     *   Disabling the check will break 2 Enum-related tests.
-                     */
-                    // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full
-                    //   generic type with custom type resolvers. If so, should try to retain them.
-                    //  Whether this is sufficient to avoid problems remains to be seen, but for
-                    //  now it should improve things.
+            if (_baseType != null) {
+                // [databind#1270]: Only specialize if type has no generic parameters from type id resolver,
+                // i.e., is a raw class type (no type parameters), but _baseType itself is parameterized
+                if (_baseType.getClass() == type.getClass()) {
+                    if (type.hasGenericTypes() || _baseType.hasGenericTypes()) {
+                        // If type from resolver has generics, use it as is, don't specialize from _baseType
+                        // else, specialize from _baseType to raw class
+                        if (!type.hasGenericTypes() && _baseType.hasGenericTypes()) {
+                            type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
+                        }
+                    } else {
+                        // If neither has generics, proceed to specialize as before
                         type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
                     }
+                }
+            }
             deser = ctxt.findContextualValueDeserializer(type, _property);
         }
         _deserializers.put(typeId, deser);
     }
     return deser;
 }
\ No newline at end of file
