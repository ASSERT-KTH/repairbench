diff --git a/tmp/acec5cdd-a45f-4ff5-9bbf-a0dc3288f7de_buggy.java b/tmp/49a5a3ba-4ef5-4962-8511-d4e59c242cc7_fixed.java
index 4b163f6..8b7a42c 100644
--- a/tmp/acec5cdd-a45f-4ff5-9bbf-a0dc3288f7de_buggy.java
+++ b/tmp/49a5a3ba-4ef5-4962-8511-d4e59c242cc7_fixed.java
@@ -1,28 +1,19 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
 public static long skip(InputStream input, long numToSkip) throws IOException {
     long available = numToSkip;
+    byte[] buffer = null;
     while (numToSkip > 0) {
         long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
-                break;
-            }
+        if (skipped > 0) {
             numToSkip -= skipped;
+        } else {
+            // skip() returned 0, need to read and discard a byte
+            int read = input.read();
+            if (read == -1) {
+                // end of stream
+                break;
+            }
+            numToSkip--;
+        }
     }
-            
     return available - numToSkip;
 }
\ No newline at end of file
