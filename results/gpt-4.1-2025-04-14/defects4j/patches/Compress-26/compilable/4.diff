diff --git a/tmp/9672b4d8-2250-4a7e-9cf0-8222350b9dac_buggy.java b/tmp/a6e2231d-339d-42ce-b26d-79998235330c_fixed.java
index 4b163f6..61b0346 100644
--- a/tmp/9672b4d8-2250-4a7e-9cf0-8222350b9dac_buggy.java
+++ b/tmp/a6e2231d-339d-42ce-b26d-79998235330c_fixed.java
@@ -1,28 +1,21 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
+    long remaining = numToSkip;
+    byte[] buf = null;
+    int readLen;
+    while (remaining > 0) {
+        long skipped = input.skip(remaining);
         if (skipped == 0) {
+            // Fallback to read a single byte (or buffered array for efficiency)
+            if (buf == null) {
+                buf = new byte[(int) Math.min(2048, remaining)];
+            }
+            readLen = input.read(buf, 0, (int) Math.min(buf.length, remaining));
+            if (readLen == -1) { // End of stream
                 break;
             }
-            numToSkip -= skipped;
+            skipped = readLen;
         }
-            
-        return available - numToSkip;
+        remaining -= skipped;
+    }
+    return numToSkip - remaining;
 }
\ No newline at end of file
