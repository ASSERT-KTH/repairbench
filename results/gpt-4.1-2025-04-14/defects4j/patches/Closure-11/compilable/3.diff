diff --git a/tmp/da20fd3d-60bf-40cd-bfde-57006b9f13e3_buggy.java b/tmp/8bb59c6c-e84a-497e-bd80-b2b9aab5ecf8_fixed.java
index 57c40b2..bbbf707 100644
--- a/tmp/da20fd3d-60bf-40cd-bfde-57006b9f13e3_buggy.java
+++ b/tmp/8bb59c6c-e84a-497e-bd80-b2b9aab5ecf8_fixed.java
@@ -1,27 +1,36 @@
   /**
    * Visits a GETPROP node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    * @param parent The parent of <code>n</code>
    */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
+    } else if (parent.isAssign() && n == parent.getFirstChild()) {
+      // Only skip property check if we're assigning to this property (l-value), not reading from it (r-value)
+      // Do not do an early return here, so even in assignment to null/undefined, errors are reported.
+      if (!validator.expectNotNullOrUndefined(t, n, childType,
+          "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+        ensureTyped(t, n);
         return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
+      }
+    } else if (!validator.expectNotNullOrUndefined(t, n, childType,
         "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+      ensureTyped(t, n);
+      return;
+    }
+
     checkPropertyAccess(childType, property.getString(), t, n);
-    }
     ensureTyped(t, n);
   }
\ No newline at end of file
