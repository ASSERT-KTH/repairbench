diff --git a/tmp/d212700d-0a50-4061-b765-6946ade4509c_buggy.java b/tmp/c9477cfb-6eb8-4840-beb8-466b0776211a_fixed.java
index be2af16..9642a23 100644
--- a/tmp/d212700d-0a50-4061-b765-6946ade4509c_buggy.java
+++ b/tmp/c9477cfb-6eb8-4840-beb8-466b0776211a_fixed.java
@@ -1,29 +1,44 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
+    // The original code always tries Gregorian first, which is not correct for dates pre-cutover.
+    // Instead, determine which calendar should be used by constructing the millis via both chronologies,
+    // and then choose the correct chronology based on the cutover and which one succeeds.
+
+    // Try Julian first; if the result is before the cutover, use it; otherwise, use Gregorian.
     long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+    try {
         instant = iJulianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        if (instant < iCutoverMillis) {
+            return instant;
+        }
+    } catch (IllegalArgumentException je) {
+        // Ignore and try Gregorian below.
+    }
+
+    // Try Gregorian
+    try {
+        instant = iGregorianChronology.getDateTimeMillis
+            (year, monthOfYear, dayOfMonth,
+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+            return instant;
+        }
+    } catch (IllegalArgumentException ge) {
+        // Ignore
+    }
+
+    // If neither calendar produces a valid instant, throw exception (cutover gap or invalid date).
     throw new IllegalArgumentException("Specified date does not exist");
 }
\ No newline at end of file
-        }
-        return instant;
-    }
