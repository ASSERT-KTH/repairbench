diff --git a/tmp/5b83a332-67a1-48ec-af44-44fb34642d43_buggy.java b/tmp/0877b43f-3c94-4662-bf7e-f78e9937e180_fixed.java
index be2af16..19f74b7 100644
--- a/tmp/5b83a332-67a1-48ec-af44-44fb34642d43_buggy.java
+++ b/tmp/0877b43f-3c94-4662-bf7e-f78e9937e180_fixed.java
@@ -1,29 +1,50 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        // Try Julian first, since before cutover those dates may only be valid in Julian.
+        long instant = 0;
+        IllegalArgumentException julianException = null;
+        try {
+            instant = iJulianChronology.getDateTimeMillis(
+                year, monthOfYear, dayOfMonth,
+                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond
+            );
             if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
-                throw new IllegalArgumentException("Specified date does not exist");
+                return instant;
+            }
+        } catch (IllegalArgumentException ex) {
+            julianException = ex;
+        }
+
+        // Try Gregorian next.
+        try {
+            instant = iGregorianChronology.getDateTimeMillis(
+                year, monthOfYear, dayOfMonth,
+                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond
+            );
+        } catch (IllegalArgumentException gregorianException) {
+            // If both failed, throw the Julian exception (to preserve old behavior).
+            if (julianException != null) {
+                throw julianException;
             }
+            throw gregorianException;
+        }
+
+        if (instant < iCutoverMillis) {
+            // It should have been handled by Julian branch.
+            // But if Julian branch failed, it means the date does not exist.
+            throw (julianException != null) ? julianException : 
+                new IllegalArgumentException("Specified date does not exist");
         }
+
         return instant;
     }
\ No newline at end of file
