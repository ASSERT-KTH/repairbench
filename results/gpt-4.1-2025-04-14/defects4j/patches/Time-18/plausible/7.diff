diff --git a/tmp/432852a7-8417-45fc-9575-9e4221542d9a_buggy.java b/tmp/4c78187e-5c35-4d5b-8a45-92128ff8a3d9_fixed.java
index be2af16..282e809 100644
--- a/tmp/432852a7-8417-45fc-9575-9e4221542d9a_buggy.java
+++ b/tmp/4c78187e-5c35-4d5b-8a45-92128ff8a3d9_fixed.java
@@ -1,29 +1,50 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
+        // First try the Julian chronology, since for dates before cutover
+        // or on cutover but invalid in Gregorian, we should support the Julian leap year rules.
         long instant;
+        try {
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+        } catch (IllegalArgumentException e) {
+            // Try Julian for leap years (e.g., 1500-02-29).
             instant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
             if (instant >= iCutoverMillis) {
                 // Okay, it's in the illegal cutover gap.
                 throw new IllegalArgumentException("Specified date does not exist");
             }
+            return instant;
+        }
+        if (instant < iCutoverMillis) {
+            // Maybe it's Julian.
+            long instantJulian;
+            try {
+                instantJulian = iJulianChronology.getDateTimeMillis
+                    (year, monthOfYear, dayOfMonth,
+                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            } catch (IllegalArgumentException e) {
+                // If the Julian calendar can't represent it as well, propagate the error.
+                return instant;
+            }
+            if (instantJulian < iCutoverMillis) {
+                return instantJulian;
+            } else {
+                // Okay, it's in the illegal cutover gap.
+                throw new IllegalArgumentException("Specified date does not exist");
+            }
         }
         return instant;
     }
\ No newline at end of file
