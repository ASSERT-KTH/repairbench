diff --git a/tmp/e0b46ec4-c7a4-48ae-a5ab-cc3ef21aa409_buggy.java b/tmp/7cc4686f-b735-41d8-b695-77510bb941a3_fixed.java
index be2af16..a69a76c 100644
--- a/tmp/e0b46ec4-c7a4-48ae-a5ab-cc3ef21aa409_buggy.java
+++ b/tmp/7cc4686f-b735-41d8-b695-77510bb941a3_fixed.java
@@ -1,29 +1,48 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
+        // Try Julian first, then Gregorian, since date could exist only in Julian (e.g., 1500-02-29)
         long instant;
+        try {
+            instant = iJulianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        } catch (IllegalArgumentException ex) {
+            // If not valid in Julian, try Gregorian
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
             if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+                // Invalid in both calendars before cutover
+                throw ex;
+            }
+            return instant;
+        }
         if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+            // After cutover, use Gregorian if valid, else illegal
+            long gregorianInstant;
+            try {
+                gregorianInstant = iGregorianChronology.getDateTimeMillis
+                    (year, monthOfYear, dayOfMonth,
+                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            } catch (IllegalArgumentException ex) {
+                // Not valid in Gregorian
+                throw new IllegalArgumentException("Specified date does not exist");
+            }
+            if (gregorianInstant >= iCutoverMillis) {
+                return gregorianInstant;
+            } else {
                 throw new IllegalArgumentException("Specified date does not exist");
             }
         }
         return instant;
     }
\ No newline at end of file
