diff --git a/tmp/88566004-f3df-4ebc-a9f9-978125316d90_buggy.java b/tmp/d407f7d8-5988-4643-a0b2-cd34e01493ab_fixed.java
index be2af16..82ffeba 100644
--- a/tmp/88566004-f3df-4ebc-a9f9-978125316d90_buggy.java
+++ b/tmp/d407f7d8-5988-4643-a0b2-cd34e01493ab_fixed.java
@@ -1,29 +1,48 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
+    // Try Julian first, in case date is only valid there (e.g. 1500-02-29).
     long instant;
+    try {
+        instant = iJulianChronology.getDateTimeMillis
+            (year, monthOfYear, dayOfMonth,
+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    } catch (IllegalArgumentException e) {
+        // Not valid in Julian, try Gregorian
         instant = iGregorianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            throw e; // not valid in Julian or Gregorian before cutover
+        }
+        return instant;
+    }
     if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+        // Check whether date is valid in Gregorian calendar, as the instant is after cutover.
+        long gregorianInstant;
+        try {
+            gregorianInstant = iGregorianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        } catch (IllegalArgumentException e) {
+            // Not valid in Gregorian calendar, but instant is after cutover; treat as gap.
+            throw new IllegalArgumentException("Specified date does not exist");
+        }
+        if (gregorianInstant >= iCutoverMillis) {
+            return gregorianInstant;
+        } else {
+            // In the cutover gap
             throw new IllegalArgumentException("Specified date does not exist");
         }
     }
     return instant;
 }
\ No newline at end of file
