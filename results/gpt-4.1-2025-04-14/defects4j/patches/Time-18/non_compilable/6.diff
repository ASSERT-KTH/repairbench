diff --git a/tmp/e3ba4a5e-cea4-4d2b-ae64-d16feee9e7d6_buggy.java b/tmp/380f289e-fa8c-4592-9cd8-cd3373ea609e_fixed.java
index be2af16..75b9b45 100644
--- a/tmp/e3ba4a5e-cea4-4d2b-ae64-d16feee9e7d6_buggy.java
+++ b/tmp/380f289e-fa8c-4592-9cd8-cd3373ea609e_fixed.java
@@ -1,29 +1,53 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
+    // First, try Julian chronology if the instant would be before the cutover
+    // according to year/month/day/hmsms, not millis.
+    // This is because "the day" as Gregorian may not exist but may as Julian.
     long instant;
+    boolean julianLeap = false;
+    if (year < iCutoverYear || (year == iCutoverYear && (monthOfYear < iCutoverMonth || (monthOfYear == iCutoverMonth && dayOfMonth < iCutoverDay)))) {
+        // The date is before (or possibly on the cutover day itself)
+        try {
+            instant = iJulianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        } catch (IllegalArgumentException ex) {
+            // Fallback to Gregorian to throw the original exception if not valid in Julian
+            instant = iGregorianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        }
+        if (instant >= iCutoverMillis) {
+            // The date exists in Julian but is after the cutover instant,
+            // so it's in the cutover gap. This is an illegal date.
+            throw new IllegalArgumentException("Specified date does not exist");
+        }
+        return instant;
+    } else {
+        // The date is after the cutover date: Use Gregorian
         instant = iGregorianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+            // The date does not exist as Gregorian but is before cutover: try Julian
             instant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
             if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+                // The date is in the cutover gap
                 throw new IllegalArgumentException("Specified date does not exist");
             }
         }
         return instant;
     }
+}
\ No newline at end of file
