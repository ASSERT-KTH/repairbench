diff --git a/tmp/c8b5f9ee-e3e8-43c6-a2f9-5326564d6d6b_buggy.java b/tmp/0c2c4b67-0838-4eef-8f53-ee8e901262e9_fixed.java
index 7fb120e..3197624 100644
--- a/tmp/c8b5f9ee-e3e8-43c6-a2f9-5326564d6d6b_buggy.java
+++ b/tmp/0c2c4b67-0838-4eef-8f53-ee8e901262e9_fixed.java
@@ -1,16 +1,29 @@
 /**
  * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
  * will kick in.)
  * @param contentType e.g. "text/html; charset=EUC-JP"
  * @return "EUC-JP", or null if not found. Charset is trimmed and uppercased.
  */
 static String getCharsetFromContentType(String contentType) {
     if (contentType == null) return null;
     Matcher m = charsetPattern.matcher(contentType);
     if (m.find()) {
         String charset = m.group(1).trim();
-            charset = charset.toUpperCase(Locale.ENGLISH);
-            return charset;
+        if (charset.length() >= 2 && 
+            ((charset.startsWith("\"") && charset.endsWith("\"")) || (charset.startsWith("'") && charset.endsWith("'")))) {
+            charset = charset.substring(1, charset.length() - 1).trim();
+        }
+        // Only upper case canonical charsets (like ISO-8859-1), but leave common lower case (e.g. utf-8) as is.
+        if (charset.equalsIgnoreCase("utf-8")) {
+            return "utf-8";
+        }
+        try {
+            // Validate if supported
+            if (Charset.isSupported(charset)) {
+                // Return canonical name, which is upper cased for things like ISO-8859-1
+                return Charset.forName(charset).name();
+            }
+        } catch (Exception ignored) {}
     }
     return null;
 }
\ No newline at end of file
