diff --git a/tmp/957b3c16-a118-40b3-aef2-730e90e5b1b2_buggy.java b/tmp/cc76eb58-e58f-4908-9d27-1163082582c6_fixed.java
index fb2b020..de1544d 100644
--- a/tmp/957b3c16-a118-40b3-aef2-730e90e5b1b2_buggy.java
+++ b/tmp/cc76eb58-e58f-4908-9d27-1163082582c6_fixed.java
@@ -1,27 +1,22 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
+  // Do not match a record type with another record type, as the user will supply
+  // an object literal to satisfy this constraint. Otherwise, we'd mess up
+  // object literals due to property-matching shenanigans.
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraintObj.isRecordType()) {
+  // Fix: Only perform property matching if THIS is not a record type.
+  if (!this.isRecordType() && constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
         }
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
