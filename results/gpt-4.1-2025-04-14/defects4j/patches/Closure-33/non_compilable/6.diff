diff --git a/tmp/a0d2de6f-7b81-4cc4-b743-c25cbf03e02c_buggy.java b/tmp/c7747b11-9274-4a8d-a9ca-2182aeec35af_fixed.java
index fb2b020..2f4b7b4 100644
--- a/tmp/a0d2de6f-7b81-4cc4-b743-c25cbf03e02c_buggy.java
+++ b/tmp/c7747b11-9274-4a8d-a9ca-2182aeec35af_fixed.java
@@ -1,27 +1,21 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
+
+  // Only proceed if both the current object and the constraint are anonymous types.
+  if (!isAnonymous() || !constraintObj.isRecordType()) {
+    return;
+  }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraintObj.isRecordType()) {
   for (String prop : constraintObj.getOwnPropertyNames()) {
     JSType propType = constraintObj.getPropertyType(prop);
     if (!isPropertyTypeDeclared(prop)) {
       JSType typeToInfer = propType;
       if (!hasProperty(prop)) {
         typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
             .getLeastSupertype(propType);
       }
       defineInferredProperty(prop, typeToInfer, null);
     }
   }
 }
\ No newline at end of file
-  }
