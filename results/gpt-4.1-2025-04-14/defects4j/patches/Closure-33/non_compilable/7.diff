diff --git a/tmp/9e980b37-cfa0-4ebe-a2d1-08a899ac0e60_buggy.java b/tmp/a321ed9f-8aa3-461d-99db-538b9a0c6aa8_fixed.java
index fb2b020..3007c8d 100644
--- a/tmp/9e980b37-cfa0-4ebe-a2d1-08a899ac0e60_buggy.java
+++ b/tmp/a321ed9f-8aa3-461d-99db-538b9a0c6aa8_fixed.java
@@ -1,27 +1,25 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
+
+  // Only match constraints if both the current object and the constraint
+  // object are anonymous (object literals).
+  if (!isUnnamedType() || !constraintObj.isUnnamedType()) {
+    return;
+  }
 
   // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
         }
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
