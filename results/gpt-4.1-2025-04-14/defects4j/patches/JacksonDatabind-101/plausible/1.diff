diff --git a/tmp/54be4f00-1fec-4e82-8f39-70cb07f787db_buggy.java b/tmp/090fd3cf-ad7f-4f91-8605-7055902e1dd8_fixed.java
index e81a2c6..8e2a2dc 100644
--- a/tmp/54be4f00-1fec-4e82-8f39-70cb07f787db_buggy.java
+++ b/tmp/090fd3cf-ad7f-4f91-8605-7055902e1dd8_fixed.java
@@ -1,102 +1,104 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)
     throws IOException
 {
-        // 01-Dec-2016, tatu: Note: This IS legal to call, but only when unwrapped
-        //    value itself is NOT passed via `CreatorProperty` (which isn't supported).
-        //    Ok however to pass via setter or field.
-        
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
+        t = p.nextToken(); // to point to value, and hold token for next loop/consumers
         // creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
             // Last creator property to set?
             if (buffer.assignParameter(creatorProp,
                     _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {
-                    t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
                 Object bean;
                 try {
                     bean = creator.build(ctxt, buffer);
                 } catch (Exception e) {
                     bean = wrapInstantiationProblem(e, ctxt);
                 }
                 // [databind#631]: Assign current value, to be accessible by custom serializers
                 p.setCurrentValue(bean);
                 // if so, need to copy all remaining tokens into buffer
+                //!!! [databind#2088] FIX: at this point, current token is not FIELD_NAME but the VALUE,
+                // so we must copy the property just deserialized, for unwrapped fields
+                // Copy the property name and its value (the value we just deserialized)
+                tokens.writeFieldName(propName);
+                tokens.copyCurrentStructure(p);
+
+                // Now continue to copy rest of fields if any
+                t = p.nextToken(); // needed to point to following FIELD_NAME/END_OBJECT
                 while (t == JsonToken.FIELD_NAME) {
-                        // NOTE: do NOT skip name as it needs to be copied; `copyCurrentStructure` does that
+                    String remPropName = p.getCurrentName();
                     p.nextToken();
+                    tokens.writeFieldName(remPropName);
                     tokens.copyCurrentStructure(p);
                     t = p.nextToken();
                 }
-                    // 28-Aug-2018, tatu: Let's add sanity check here, easier to catch off-by-some
-                    //    problems if we maintain invariants
                 tokens.writeEndObject();
                 if (bean.getClass() != _beanType.getRawClass()) {
-                        // !!! 08-Jul-2011, tatu: Could probably support; but for now
-                        //   it's too complicated, so bail out
                     ctxt.reportInputMismatch(creatorProp,
                             "Cannot create polymorphic instances with unwrapped values");
                     return null;
                 }
                 return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
             }
+            // Even if not last creator property, we must copy info for unwrapped properties
+            tokens.writeFieldName(propName);
+            tokens.copyCurrentStructure(p);
             continue;
         }
         // Object Id property?
         if (buffer.readIdProperty(propName)) {
+            tokens.writeFieldName(propName);
+            tokens.copyCurrentStructure(p);
             continue;
         }
         // regular property? needs buffering
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
             buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));
+            tokens.writeFieldName(propName);
+            tokens.copyCurrentStructure(p);
             continue;
         }
-            // Things marked as ignorable should not be passed to any setter
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
-            // 29-Nov-2016, tatu: probably should try to avoid sending content
-            //    both to any setter AND buffer... but, for now, the only thing
-            //    we can do.
         // how about any setter? We'll get copies but...
         if (_anySetter == null) {
-                // but... others should be passed to unwrapped property deserializers
             tokens.writeFieldName(propName);
             tokens.copyCurrentStructure(p);
         } else {
-                // Need to copy to a separate buffer first
             TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);
             tokens.writeFieldName(propName);
             tokens.append(b2);
             try {
                 buffer.bufferAnyProperty(_anySetter, propName,
                         _anySetter.deserialize(b2.asParserOnFirstToken(), ctxt));
             } catch (Exception e) {
                 wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
             }
             continue;
         }
     }
 
     // We hit END_OBJECT, so:
     Object bean;
     try {
         bean = creator.build(ctxt, buffer);
     } catch (Exception e) {
         wrapInstantiationProblem(e, ctxt);
         return null; // never gets here
     }
+    tokens.writeEndObject();
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
