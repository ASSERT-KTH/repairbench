diff --git a/tmp/ce2d0c77-8731-4b27-af2b-871bc405ff21_buggy.java b/tmp/883774d4-e0df-4ea0-a3ff-4f4c0c5c33c2_fixed.java
index b6b11b6..375f360 100644
--- a/tmp/ce2d0c77-8731-4b27-af2b-871bc405ff21_buggy.java
+++ b/tmp/883774d4-e0df-4ea0-a3ff-4f4c0c5c33c2_fixed.java
@@ -1,38 +1,32 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
         if (escapingOn && c[start] == QUOTE) {
+            next(pos); // advance past initial quote
             return appendTo == null ? null : appendTo.append(QUOTE);
         }
         int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
+        for (int i = pos.getIndex(); i < pattern.length(); ) {
+            if (escapingOn && pattern.startsWith(ESCAPED_QUOTE, i)) {
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, i - lastHold).append(QUOTE);
+                }
+                i += ESCAPED_QUOTE.length();
+                pos.setIndex(i);
+                lastHold = i;
                 continue;
             }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+            if (c[i] == QUOTE) {
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, i - lastHold);
                 }
+                next(pos); // advance past closing quote
+                return appendTo;
+            }
+            i++;
+            pos.setIndex(i);
         }
         throw new IllegalArgumentException(
                 "Unterminated quoted string at position " + start);
     }
\ No newline at end of file
