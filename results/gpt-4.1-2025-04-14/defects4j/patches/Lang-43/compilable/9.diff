diff --git a/tmp/14166913-37c9-44ab-ac0b-3626c144b859_buggy.java b/tmp/758161fa-f505-4fdb-b985-20995d449a66_fixed.java
index b6b11b6..10fae1e 100644
--- a/tmp/14166913-37c9-44ab-ac0b-3626c144b859_buggy.java
+++ b/tmp/758161fa-f505-4fdb-b985-20995d449a66_fixed.java
@@ -1,38 +1,55 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      * 
      * @param pattern pattern to parse
      * @param pos current parse position
      * @param appendTo optional StringBuffer to append
      * @param escapingOn whether to process escaped quotes
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
+        // Fix: only consume next char if the quote is not a start of escaped quote
         if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+            // If this is a double quote (''), it's an escaped quote, not the start of a quoted string
+            if ((start + 1) < c.length && c[start + 1] == QUOTE) {
+                // Do not treat as quoted string -- instead return or process normally
+                if (appendTo != null) {
+                    appendTo.append(QUOTE);
+                }
+                pos.setIndex(start + 2);
+                return appendTo;
+            }
+            // It is a lone quote, treat it as the start of a quoted string
         }
         int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+        for (int i = pos.getIndex(); i < pattern.length(); ) {
+            if (escapingOn && pattern.startsWith(ESCAPED_QUOTE, i)) {
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, i - lastHold);
+                    appendTo.append(QUOTE);
+                }
+                i += ESCAPED_QUOTE.length();
+                pos.setIndex(i);
                 lastHold = pos.getIndex();
                 continue;
             }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+            if (c[i] == QUOTE) {
+                // End of quoted string
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, i - lastHold);
+                }
+                i++; // consume quote
+                pos.setIndex(i);
+                return appendTo;
+            } else {
+                i++;
+                pos.setIndex(i);
             }
         }
         throw new IllegalArgumentException(
                 "Unterminated quoted string at position " + start);
     }
\ No newline at end of file
