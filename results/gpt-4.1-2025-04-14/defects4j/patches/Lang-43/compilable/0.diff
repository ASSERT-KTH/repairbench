diff --git a/tmp/fe413fd4-b920-4253-8297-8566e4e38eaf_buggy.java b/tmp/9e7f6253-e76c-4779-858c-0d94564a87d9_fixed.java
index b6b11b6..cf31d50 100644
--- a/tmp/fe413fd4-b920-4253-8297-8566e4e38eaf_buggy.java
+++ b/tmp/9e7f6253-e76c-4779-858c-0d94564a87d9_fixed.java
@@ -1,38 +1,48 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+        // LANG-477 fix: Only treat the leading single quote as an escaped quote if it's not the end of the pattern
+        if (escapingOn && start < pattern.length() && c[start] == QUOTE) {
+            // if next char is also QUOTE, it's an escaped quote
+            if (start + 1 < pattern.length() && c[start + 1] == QUOTE) {
+                pos.setIndex(start + 2);
+                if (appendTo != null) {
+                    appendTo.append(QUOTE);
+                }
+                return appendTo;
+            } else {
+                pos.setIndex(start + 1);
+                if (appendTo != null) {
+                    return appendTo;
+                } else {
+                    return null;
+                }
+            }
         }
         int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+        for (; pos.getIndex() < pattern.length(); ) {
+            int i = pos.getIndex();
+            // Check for escaped quote: two consecutive single quotes
+            if (escapingOn && i + 1 < pattern.length() && c[i] == QUOTE && c[i + 1] == QUOTE) {
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, i - lastHold);
+                    appendTo.append(QUOTE);
+                }
+                pos.setIndex(i + 2);
                 lastHold = pos.getIndex();
                 continue;
             }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+            // Check for end quote
+            if (c[i] == QUOTE) {
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, i - lastHold);
                 }
+                pos.setIndex(i + 1);
+                return appendTo;
+            }
+            pos.setIndex(i + 1);
         }
         throw new IllegalArgumentException(
                 "Unterminated quoted string at position " + start);
     }
\ No newline at end of file
