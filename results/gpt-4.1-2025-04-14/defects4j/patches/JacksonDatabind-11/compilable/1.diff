diff --git a/tmp/a8969b4d-5f5f-4031-a0b9-1f5a616b40df_buggy.java b/tmp/1379069a-5aac-4e5c-a4af-be07db530527_fixed.java
index fe73b81..4faeb04 100644
--- a/tmp/a8969b4d-5f5f-4031-a0b9-1f5a616b40df_buggy.java
+++ b/tmp/1379069a-5aac-4e5c-a4af-be07db530527_fixed.java
@@ -1,42 +1,43 @@
 protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)
 {
     final String name = type.getName();
     // 19-Mar-2015: Without context, all we can check are bounds.
     if (context == null) {
         // And to prevent infinite loops, now need this:
         return _unknownType();
     } else {
         // Ok: here's where context might come in handy!
         /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
          *   unresolved type variables to handle some cases where bounds
          *   are enough. Let's hope it does not hide real fail cases.
          */
         JavaType actualType = context.findType(name);
         if (actualType != null) {
             return actualType;
         }
+        // As per [databind#609]: Unresolved variable should be mapped to the first bound type (not fail)
+        // So, do NOT throw exception if not found in bindings, but proceed to check bounds instead
     }
 
-        /* 29-Jan-2010, tatu: We used to throw exception here, if type was
-         *   bound: but the problem is that this can occur for generic "base"
-         *   method, overridden by sub-class. If so, we will want to ignore
-         *   current type (for method) since it will be masked.
-         */
+    // Get the bounds (may be empty, in which case default to Object)
     Type[] bounds = type.getBounds();
 
     // With type variables we must use bound information.
     // Theoretically this gets tricky, as there may be multiple
     // bounds ("... extends A & B"); and optimally we might
     // want to choose the best match. Also, bounds are optional;
     // but here we are lucky in that implicit "Object" is
     // added as bounds if so.
     // Either way let's just use the first bound, for now, and
     // worry about better match later on if there is need.
 
+    // Defensive: If for some strange reason no bounds, use Object
+    Type bound = (bounds == null || bounds.length == 0) ? Object.class : bounds[0];
+
     /* 29-Jan-2010, tatu: One more problem are recursive types
      *   (T extends Comparable<T>). Need to add "placeholder"
      *   for resolution to catch those.
      */
     context._addPlaceholder(name);
-        return _constructType(bounds[0], context);
+    return _constructType(bound, context);
 }
\ No newline at end of file
