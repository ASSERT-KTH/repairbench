diff --git a/tmp/92d95495-cd1b-4e81-93e8-6be30923961d_buggy.java b/tmp/7905e978-42b9-4578-ad60-70bdd062c07b_fixed.java
index d5b1b52..4f7d7ee 100644
--- a/tmp/92d95495-cd1b-4e81-93e8-6be30923961d_buggy.java
+++ b/tmp/7905e978-42b9-4578-ad60-70bdd062c07b_fixed.java
@@ -1,36 +1,44 @@
-    /**
-     * <p>Adds all the elements of the given arrays into a new array.</p>
-     * <p>The new array contains all of the element of <code>array1</code> followed
-     * by all of the elements <code>array2</code>. When an array is returned, it is always
-     * a new array.</p>
-     *
-     * <pre>
-     * ArrayUtils.addAll(null, null)     = null
-     * ArrayUtils.addAll(array1, null)   = cloned copy of array1
-     * ArrayUtils.addAll(null, array2)   = cloned copy of array2
-     * ArrayUtils.addAll([], [])         = []
-     * ArrayUtils.addAll([null], [null]) = [null, null]
-     * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
-     * </pre>
-     *
-     * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
-     * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
-     * @return The new array, <code>null</code> if both arrays are <code>null</code>.
-     *      The type of the new array is the type of the first array,
-     *      unless the first array is null, in which case the type is the same as the second array.
-     * @since 2.1
-     */
 @SuppressWarnings("unchecked")
 public static <T> T[] addAll(T[] array1, T... array2) {
-        if (array1 == null) {
+    if (array1 == null && array2 == null) {
+        return null;
+    } else if (array1 == null) {
         return clone(array2);
     } else if (array2 == null) {
         return clone(array1);
     }
-        final Class<?> type1 = array1.getClass().getComponentType();
-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
-        System.arraycopy(array1, 0, joinedArray, 0, array1.length);
-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
+
+    // Determine component type to use
+    Class<?> type1 = array1.getClass().getComponentType();
+    Class<?> type2 = array2.getClass().getComponentType();
+    Class<?> newType = type1;
+
+    // If one of the arrays is empty, use other's type
+    int length1 = array1.length;
+    int length2 = array2.length;
+
+    // Determine most specific common supertype for non-empty arrays
+    if (length1 == 0 && length2 > 0) {
+        newType = type2;
+    } else if (length2 == 0 && length1 > 0) {
+        newType = type1;
+    } else if (length1 > 0 && length2 > 0) {
+        if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {
+            // Fallback: find common supertype (Object.class in general case)
+            // but here, as per test, should use the type of the first argument,
+            // and throw if an incompatible element is being stored.
+            if (!type1.isInstance(java.lang.reflect.Array.get(array2, 0)) && !type2.isInstance(java.lang.reflect.Array.get(array1, 0))) {
+                throw new IllegalArgumentException("array types are not compatible");
+            }
+        }
+    }
+
+    T[] joinedArray = (T[]) Array.newInstance(newType, length1 + length2);
+    try {
+        System.arraycopy(array1, 0, joinedArray, 0, length1);
+        System.arraycopy(array2, 0, joinedArray, length1, length2);
+    } catch (ArrayStoreException ase) {
+        throw new IllegalArgumentException("The component type of the first array is not assignable from the type of the second array", ase);
+    }
     return joinedArray;
 }
\ No newline at end of file
