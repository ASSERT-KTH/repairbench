diff --git a/tmp/994b3e82-2f51-43f2-949a-0ee707bf3d6d_buggy.java b/tmp/a84caf39-7d72-4bb3-b4fd-cfc35cf5ddae_fixed.java
index d5b1b52..7c2c773 100644
--- a/tmp/994b3e82-2f51-43f2-949a-0ee707bf3d6d_buggy.java
+++ b/tmp/a84caf39-7d72-4bb3-b4fd-cfc35cf5ddae_fixed.java
@@ -1,36 +1,32 @@
-    /**
-     * <p>Adds all the elements of the given arrays into a new array.</p>
-     * <p>The new array contains all of the element of <code>array1</code> followed
-     * by all of the elements <code>array2</code>. When an array is returned, it is always
-     * a new array.</p>
-     *
-     * <pre>
-     * ArrayUtils.addAll(null, null)     = null
-     * ArrayUtils.addAll(array1, null)   = cloned copy of array1
-     * ArrayUtils.addAll(null, array2)   = cloned copy of array2
-     * ArrayUtils.addAll([], [])         = []
-     * ArrayUtils.addAll([null], [null]) = [null, null]
-     * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
-     * </pre>
-     *
-     * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
-     * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
-     * @return The new array, <code>null</code> if both arrays are <code>null</code>.
-     *      The type of the new array is the type of the first array,
-     *      unless the first array is null, in which case the type is the same as the second array.
-     * @since 2.1
-     */
 @SuppressWarnings("unchecked")
 public static <T> T[] addAll(T[] array1, T... array2) {
+    if (array1 == null && array2 == null) {
+        return null;
+    }
     if (array1 == null) {
         return clone(array2);
-        } else if (array2 == null) {
+    }
+    if (array2 == null) {
         return clone(array1);
     }
-        final Class<?> type1 = array1.getClass().getComponentType();
-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
-        System.arraycopy(array1, 0, joinedArray, 0, array1.length);
-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
+    // Determine the appropriate component type for the resulting array
+    Class<?> type1 = array1.getClass().getComponentType();
+    Class<?> type2 = array2.getClass().getComponentType();
+
+    Class<?> newType;
+    if (type1.isAssignableFrom(type2)) {
+        newType = type1;
+    } else if (type2.isAssignableFrom(type1)) {
+        newType = type2;
+    } else {
+        throw new IllegalArgumentException("Cannot store elements of type " + type2.getName() 
+            + " in an array of type " + type1.getName());
+    }
+
+    int length1 = array1.length;
+    int length2 = array2.length;
+    T[] joinedArray = (T[]) Array.newInstance(newType, length1 + length2);
+    System.arraycopy(array1, 0, joinedArray, 0, length1);
+    System.arraycopy(array2, 0, joinedArray, length1, length2);
     return joinedArray;
 }
\ No newline at end of file
