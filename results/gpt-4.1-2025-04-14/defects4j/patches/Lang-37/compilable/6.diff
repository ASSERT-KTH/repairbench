diff --git a/tmp/495d9e90-f878-4240-a3ce-75cd0854efa2_buggy.java b/tmp/bf866f08-6dc0-4f6f-a176-e9ced299119e_fixed.java
index d5b1b52..814b155 100644
--- a/tmp/495d9e90-f878-4240-a3ce-75cd0854efa2_buggy.java
+++ b/tmp/bf866f08-6dc0-4f6f-a176-e9ced299119e_fixed.java
@@ -1,36 +1,52 @@
-    /**
-     * <p>Adds all the elements of the given arrays into a new array.</p>
-     * <p>The new array contains all of the element of <code>array1</code> followed
-     * by all of the elements <code>array2</code>. When an array is returned, it is always
-     * a new array.</p>
-     *
-     * <pre>
-     * ArrayUtils.addAll(null, null)     = null
-     * ArrayUtils.addAll(array1, null)   = cloned copy of array1
-     * ArrayUtils.addAll(null, array2)   = cloned copy of array2
-     * ArrayUtils.addAll([], [])         = []
-     * ArrayUtils.addAll([null], [null]) = [null, null]
-     * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
-     * </pre>
-     *
-     * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
-     * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
-     * @return The new array, <code>null</code> if both arrays are <code>null</code>.
-     *      The type of the new array is the type of the first array,
-     *      unless the first array is null, in which case the type is the same as the second array.
-     * @since 2.1
-     */
 @SuppressWarnings("unchecked")
 public static <T> T[] addAll(T[] array1, T... array2) {
-        if (array1 == null) {
+    if (array1 == null && array2 == null) {
+        return null;
+    } else if (array1 == null) {
         return clone(array2);
     } else if (array2 == null) {
         return clone(array1);
     }
-        final Class<?> type1 = array1.getClass().getComponentType();
-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
+
+    // If array1 and array2 are not the same type, determine the best common supertype
+    Class<?> type1 = array1.getClass().getComponentType();
+    Class<?> type2 = array2.getClass().getComponentType();
+
+    // If types differ, find common ancestor
+    Class<?> componentType;
+    if (type1.isAssignableFrom(type2)) {
+        componentType = type1;
+    } else if (type2.isAssignableFrom(type1)) {
+        componentType = type2;
+    } else {
+        // Find common superclass
+        Class<?> temp1 = type1;
+        while (temp1 != null && !temp1.isAssignableFrom(type2)) {
+            temp1 = temp1.getSuperclass();
+        }
+        if (temp1 == null) {
+            componentType = Object.class;
+        } else {
+            componentType = temp1;
+        }
+    }
+
+    // Prevent the case where array1 is e.g. Integer[], array2 is Long[], which cannot be combined
+    // as Integer[] and Long[] are incompatible
+    // The expected behavior is IllegalArgumentException as in the test
+    if (!(componentType.isAssignableFrom(type1) && componentType.isAssignableFrom(type2))) {
+        throw new IllegalArgumentException("Cannot store both types in one array: " +
+                type1.getName() + " and " + type2.getName());
+    }
+
+    T[] joinedArray = (T[]) Array.newInstance(componentType, array1.length + array2.length);
     System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+    try {
         System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
+    } catch (ArrayStoreException ex) {
+        // Happens when, for example, array1 is Integer[] and array2 is Long[], so throw a clearer exception
+        throw new IllegalArgumentException("Cannot store both types in one array: " +
+                type1.getName() + " and " + type2.getName(), ex);
+    }
     return joinedArray;
 }
\ No newline at end of file
