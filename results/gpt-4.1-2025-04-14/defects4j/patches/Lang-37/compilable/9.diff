diff --git a/tmp/65cf2f89-24d2-417a-8b73-5c82a1286640_buggy.java b/tmp/59c70328-9e7b-48d3-b8f2-05ba0f397383_fixed.java
index d5b1b52..a0701d0 100644
--- a/tmp/65cf2f89-24d2-417a-8b73-5c82a1286640_buggy.java
+++ b/tmp/59c70328-9e7b-48d3-b8f2-05ba0f397383_fixed.java
@@ -1,36 +1,27 @@
-    /**
-     * <p>Adds all the elements of the given arrays into a new array.</p>
-     * <p>The new array contains all of the element of <code>array1</code> followed
-     * by all of the elements <code>array2</code>. When an array is returned, it is always
-     * a new array.</p>
-     *
-     * <pre>
-     * ArrayUtils.addAll(null, null)     = null
-     * ArrayUtils.addAll(array1, null)   = cloned copy of array1
-     * ArrayUtils.addAll(null, array2)   = cloned copy of array2
-     * ArrayUtils.addAll([], [])         = []
-     * ArrayUtils.addAll([null], [null]) = [null, null]
-     * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
-     * </pre>
-     *
-     * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
-     * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
-     * @return The new array, <code>null</code> if both arrays are <code>null</code>.
-     *      The type of the new array is the type of the first array,
-     *      unless the first array is null, in which case the type is the same as the second array.
-     * @since 2.1
-     */
 @SuppressWarnings("unchecked")
 public static <T> T[] addAll(T[] array1, T... array2) {
-        if (array1 == null) {
+    if (array1 == null && array2 == null) {
+        return null;
+    } else if (array1 == null) {
         return clone(array2);
     } else if (array2 == null) {
         return clone(array1);
     }
-        final Class<?> type1 = array1.getClass().getComponentType();
-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
+    // Check for different component types
+    Class<?> type1 = array1.getClass().getComponentType();
+    Class<?> type2 = array2.getClass().getComponentType();
+    if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {
+        throw new IllegalArgumentException("Cannot store elements of type " + type2 + " in an array of type " + type1);
+    }
+    // If type2 is a subclass of type1, use type1 as the joined array type (safe)
+    // If type1 is a subclass of type2, use type2 as the joined array type (safe)
+    Class<?> newComponentType = type1.isAssignableFrom(type2) ? type2 : type1;
+    T[] joinedArray = (T[]) Array.newInstance(newComponentType, array1.length + array2.length);
+    try {
         System.arraycopy(array1, 0, joinedArray, 0, array1.length);
         System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
+    } catch (ArrayStoreException e) {
+        throw new IllegalArgumentException("Cannot store elements of different types in the resulting array", e);
+    }
     return joinedArray;
 }
\ No newline at end of file
