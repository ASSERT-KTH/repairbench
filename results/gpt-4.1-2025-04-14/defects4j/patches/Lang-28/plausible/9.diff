diff --git a/tmp/7565ac88-0c50-4d3d-90b5-f81ba5cd9b07_buggy.java b/tmp/225f40f9-53dc-4ced-9e32-b9e121d50f7a_fixed.java
index 4bbd561..5c6c90c 100644
--- a/tmp/7565ac88-0c50-4d3d-90b5-f81ba5cd9b07_buggy.java
+++ b/tmp/225f40f9-53dc-4ced-9e32-b9e121d50f7a_fixed.java
@@ -1,37 +1,67 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    int inputLength = input.length();
+    if(index >= inputLength - 2) {
+        // Not enough characters left for '&#;'
+        return 0;
+    }
     if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= inputLength) {
+            // Out of bounds
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
+            if (start >= inputLength) {
+                // Out of bounds
+                return 0;
+            }
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        // Scan to semi-colon or end of input
+        while (end < inputLength && input.charAt(end) != ';') {
             end++;
         }
+        if (end == inputLength || input.charAt(end) != ';') {
+            // No terminating ';'
+            return 0;
+        }
 
         int entityValue;
         try {
+            String entityStr = input.subSequence(start, end).toString();
+            if(entityStr.length() == 0) {
+                return 0;
+            }
             if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                entityValue = Integer.parseInt(entityStr, 16);
             } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                entityValue = Integer.parseInt(entityStr, 10);
             }
         } catch(NumberFormatException nfe) {
             return 0;
         }
 
+        // Write the corresponding character(s)
+        if(Character.isSupplementaryCodePoint(entityValue)) {
+            out.write(Character.toChars(entityValue));
+        } else {
             out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        }
+
+        // Length: '&#' + optional 'x' + [digits] + ';'
+        int len = end - index + 1;
+        return len;
     }
     return 0;
 }
\ No newline at end of file
