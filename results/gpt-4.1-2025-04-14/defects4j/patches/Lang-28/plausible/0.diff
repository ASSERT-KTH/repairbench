diff --git a/tmp/dc8cdef2-4a67-41e5-8ad0-83b82fe42e5b_buggy.java b/tmp/a351c960-a361-4527-a679-839b30879dc0_fixed.java
index 4bbd561..cde2975 100644
--- a/tmp/dc8cdef2-4a67-41e5-8ad0-83b82fe42e5b_buggy.java
+++ b/tmp/a351c960-a361-4527-a679-839b30879dc0_fixed.java
@@ -1,37 +1,62 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    // Protect from ArrayIndexOutOfBounds
+    if (index + 2 > input.length()) {
+        return 0;
+    }
     if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= input.length()) {
+            return 0;
+        }
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
+            if (start >= input.length()) {
+                return 0;
+            }
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        // Find the next ';'
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
+        if (end == input.length() || input.charAt(end) != ';') {
+            return 0;
+        }
 
         int entityValue;
         try {
+            String entityStr = input.subSequence(start, end).toString();
+            if (entityStr.isEmpty()) return 0;
             if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                entityValue = Integer.parseInt(entityStr, 16);
             } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                entityValue = Integer.parseInt(entityStr, 10);
             }
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // Correctly write supplementary characters
+        if (Character.isValidCodePoint(entityValue)) {
+            char[] chars = Character.toChars(entityValue);
+            out.write(chars);
+        } else {
+            // Not a valid Unicode code point
+            return 0;
+        }
+
+        // Calculate consumed chars: "&#" + optional x + digits + ';'
+        int consumed = end - index + 1;
+        return consumed;
     }
     return 0;
 }
\ No newline at end of file
