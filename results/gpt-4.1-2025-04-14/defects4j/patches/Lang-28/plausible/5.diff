diff --git a/tmp/51640589-e71e-429f-a7a0-5a19df68c42a_buggy.java b/tmp/b3e69109-e64f-403f-aaba-fb75fbad899b_fixed.java
index 4bbd561..bad6e02 100644
--- a/tmp/51640589-e71e-429f-a7a0-5a19df68c42a_buggy.java
+++ b/tmp/b3e69109-e64f-403f-aaba-fb75fbad899b_fixed.java
@@ -1,37 +1,56 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    // Protect from ArrayIndexOutOfBounds
+    if (index < 0 || index + 2 >= input.length()) {
+        return 0;
+    }
     if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= input.length()) {
+            return 0;
+        }
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        // Find the ending ';', guard bounds
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
+        if (end == input.length() || input.charAt(end) != ';') {
+            // no ';' found
+            return 0;
+        }
 
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+            String value = input.subSequence(start, end).toString();
+            if (value.isEmpty()) {
+                return 0;
             }
+            entityValue = Integer.parseInt(value, isHex ? 16 : 10);
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
+        // Output as one or two chars depending on Unicode codepoint
+        if (Character.isSupplementaryCodePoint(entityValue)) {
+            out.write(Character.toChars(entityValue));
+        } else {
             out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        }
+
+        // The number of consumed characters: 
+        // "&#" = 2 
+        // optional "x" = (isHex ? 1 : 0)
+        // value = (end - start)
+        // ';' = 1
+        return end + 1 - index;
     }
     return 0;
 }
\ No newline at end of file
