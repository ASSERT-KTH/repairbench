diff --git a/tmp/7884f9ee-2e00-437f-a959-19208ff135b4_buggy.java b/tmp/d810170d-02cd-4bdd-9812-81049a9a8693_fixed.java
index 4bbd561..f541051 100644
--- a/tmp/7884f9ee-2e00-437f-a959-19208ff135b4_buggy.java
+++ b/tmp/d810170d-02cd-4bdd-9812-81049a9a8693_fixed.java
@@ -1,37 +1,54 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    if (index + 2 < input.length() && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start < input.length()) {
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
+        } else {
+            return 0; // Not enough characters
+        }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        // Find the ending semicolon, but guard against index overflow
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
 
+        if (end == input.length() || input.charAt(end) != ';') {
+            // No ending semicolon found
+            return 0;
+        }
+
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+            String entity = input.subSequence(start, end).toString();
+            if (entity.isEmpty()) {
+                return 0;
             }
+            entityValue = Integer.parseInt(entity, isHex ? 16 : 10);
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
+        // Write chars for BMP or surrogate pair for supplementary character
+        if (entityValue > 0xFFFF) {
+            char[] chars = Character.toChars(entityValue);
+            out.write(chars);
+        } else {
             out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        }
+
+        return end - index + 1;
     }
     return 0;
 }
\ No newline at end of file
