diff --git a/tmp/96cb1ddd-118e-4ea8-910d-fdda6321f526_buggy.java b/tmp/fb8fe835-0203-45aa-a3e4-a337d9094c6e_fixed.java
index 4bbd561..69435ff 100644
--- a/tmp/96cb1ddd-118e-4ea8-910d-fdda6321f526_buggy.java
+++ b/tmp/fb8fe835-0203-45aa-a3e4-a337d9094c6e_fixed.java
@@ -1,37 +1,56 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    // Protect from ArrayIndexOutOfBounds
+    int inputLength = input.length();
+    if (index < 0 || index + 2 > inputLength) {
+        return 0;
+    }
     if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start < inputLength) {
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
+        }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        // Find the next ';', but don't go out of bounds
+        while (end < inputLength && input.charAt(end) != ';') {
             end++;
         }
+        // If we didn't find a ';', it's not a valid reference
+        if (end == inputLength || input.charAt(end) != ';') {
+            return 0;
+        }
 
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+            String entityStr = input.subSequence(start, end).toString();
+            if (entityStr.length() == 0) {
+                return 0;
             }
+            entityValue = Integer.parseInt(entityStr, isHex ? 16 : 10);
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
+        // Write correct chars: use surrogates for supplementary characters
+        if (entityValue > 0xFFFF) {
+            char[] chars = Character.toChars(entityValue);
+            out.write(chars);
+        } else {
             out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        }
+
+        // total length: "&#" [2] + ('x'/not) [isHex ? 1 : 0] + digits [end-start] + semicolon [1]
+        return end - index + 1;
     }
     return 0;
 }
\ No newline at end of file
