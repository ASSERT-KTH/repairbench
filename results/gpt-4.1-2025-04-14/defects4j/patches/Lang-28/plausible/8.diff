diff --git a/tmp/50cac099-bccf-4999-af94-e7e6bde734d5_buggy.java b/tmp/92458174-71d2-408d-b660-9bcc0811f954_fixed.java
index 4bbd561..e465c4e 100644
--- a/tmp/50cac099-bccf-4999-af94-e7e6bde734d5_buggy.java
+++ b/tmp/92458174-71d2-408d-b660-9bcc0811f954_fixed.java
@@ -1,37 +1,53 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    // Defensive checks for array bounds
+    int inputLength = input.length();
+    if (index < 0 || index + 2 > inputLength) {
+        return 0;
+    }
     if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start < inputLength) {
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
+        }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+
+        // Find the semicolon or end of the input
+        while (end < inputLength && input.charAt(end) != ';') {
             end++;
         }
+        // If semicolon not found, return 0, invalid entity
+        if (end == inputLength || input.charAt(end) != ';') {
+            return 0;
+        }
 
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+            String entity = input.subSequence(start, end).toString();
+            if (entity.isEmpty()) {
+                return 0;
             }
+            entityValue = Integer.parseInt(entity, isHex ? 16 : 10);
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // Correct handling for supplementary (outside BMP) code points
+        if (Character.isValidCodePoint(entityValue)) {
+            out.write(Character.toChars(entityValue));
+        } else {
+            return 0;
+        }
+        // Total length: '&#' + optional 'x' + digits + ';'
+        int consumed = end - index + 1;
+        return consumed;
     }
     return 0;
 }
\ No newline at end of file
