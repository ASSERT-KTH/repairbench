diff --git a/tmp/5f7d46f6-5492-471b-aa07-ed659a72aa96_buggy.java b/tmp/a12ca3ef-e610-4fae-a291-eeb024c65ef2_fixed.java
index 4bbd561..6a69fe9 100644
--- a/tmp/5f7d46f6-5492-471b-aa07-ed659a72aa96_buggy.java
+++ b/tmp/a12ca3ef-e610-4fae-a291-eeb024c65ef2_fixed.java
@@ -1,37 +1,55 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    // Defensive bounds checks
+    final int len = input.length();
+    if (index < 0 || index + 2 > len) {
+        return 0;
+    }
     if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start < len) {
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
+        }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        // Find the semicolon
+        while (end < len && input.charAt(end) != ';') {
             end++;
         }
+        if (end == len || input.charAt(end) != ';') {
+            // No terminating semicolon; not a valid entity
+            return 0;
+        }
 
         int entityValue;
         try {
+            String number = input.subSequence(start, end).toString();
+            if (number.isEmpty()) {
+                return 0;
+            }
             if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                entityValue = Integer.parseInt(number, 16);
             } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                entityValue = Integer.parseInt(number, 10);
             }
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // Write the correct number of chars for the codepoint
+        if (Character.isValidCodePoint(entityValue)) {
+            out.write(Character.toChars(entityValue));
+        } else {
+            return 0; // Not a valid Unicode codepoint
+        }
+        // total consumed: "&" + "#" + possible "x" + digits + ";"
+        return end - index + 1;
     }
     return 0;
 }
\ No newline at end of file
