diff --git a/tmp/e3f4e290-3a9a-4822-9693-7608a79bc433_buggy.java b/tmp/d7987fd6-f787-45cf-ad5f-7cc0bba050f3_fixed.java
index cd412d2..77846cd 100644
--- a/tmp/e3f4e290-3a9a-4822-9693-7608a79bc433_buggy.java
+++ b/tmp/d7987fd6-f787-45cf-ad5f-7cc0bba050f3_fixed.java
@@ -1,76 +1,125 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
+        } else if (dateStr.charAt(len-5) == 'T') {
+            // If missing milliseconds, add
+            StringBuilder sb = new StringBuilder(dateStr);
+            sb.insert(len-1, ".000");
+            dateStr = sb.toString();
+        } else if (dateStr.charAt(len-5) == ':') {
+            // partial seconds
+            int dotIdx = dateStr.indexOf('.', len - 9);
+            if (dotIdx > 0) {
+                int msLen = len - 1 - dotIdx - 1;
+                if (msLen < 3) {
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    for (int i = 0; i < 3 - msLen; ++i)
+                        sb.insert(len - 1, '0');
+                    dateStr = sb.toString();
+                }
+            }
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+            // Fix timezone: remove colon if present, also pad minutes if needed
+            int tzIndex = dateStr.length() - 6;
+            if (tzIndex > 0) {
+                if (dateStr.charAt(tzIndex) == '+' || dateStr.charAt(tzIndex) == '-') {
+                    // e.g., 2014-10-03T18:00:00.6-05:00
+                    // If minutes missing (like -05), append 00
+                    if (dateStr.charAt(dateStr.length()-3) == '+' || dateStr.charAt(dateStr.length()-3) == '-') {
                         dateStr += "00";
                     }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+                    // Remove colon in timezone
+                    else if (dateStr.charAt(dateStr.length()-3) == ':') {
                         StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                        sb.delete(dateStr.length()-3, dateStr.length()-2);
                         dateStr = sb.toString();
                     }
+                }
+            }
+            // Milliseconds handling (partial or missing)
+            // Find the 'T'
+            int tPos = dateStr.indexOf('T');
+            if (tPos >= 0) {
+                // Find index before timezone part
+                int tzSignIdx = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));
+                int tzIdx = (tzSignIdx > 0) ? tzSignIdx : dateStr.length();
+                int dotIdx = dateStr.indexOf('.', tPos);
+                if (dotIdx > 0 && dotIdx < tzIdx) {
+                    // partial milliseconds
+                    int msLen = tzIdx - dotIdx - 1;
+                    if (msLen < 3) {
+                        StringBuilder sb = new StringBuilder(dateStr);
+                        for (int i = 0; i < 3 - msLen; ++i)
+                            sb.insert(tzIdx, '0');
+                        dateStr = sb.toString();
+                    }
+                } else if (dotIdx < 0 && tPos < tzIdx) {
+                    // no milliseconds at all, add .000
+                    // Try to parse seconds position, see if no seconds
+                    int timeLen = tzIdx - tPos - 1;
+                    // If time string is HH:mm or HH:mm:ss we can add
+                    if (timeLen == 8 || timeLen == 5) {
+                        StringBuilder sb = new StringBuilder(dateStr);
+                        sb.insert(tzIdx, ".000");
+                        dateStr = sb.toString();
+                    }
+                }
+            }
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+            int tPos = dateStr.indexOf('T');
+            if (tPos >= 0) {
+                int timeLen = len - tPos - 1;
+                // e.g. 'YYYY-MM-DDTHH:mm' (5) or 'YYYY-MM-DDTHH:mm:ss' (8)
+                if (timeLen == 5 || timeLen == 8) {
                     sb.append(".000");
+                } else if (timeLen > 0) {
+                    // check if it contains partial milliseconds
+                    int dotIdx = dateStr.indexOf('.', tPos);
+                    if (dotIdx > 0) {
+                        int msLen = len - dotIdx - 1;
+                        if (msLen < 3) {
+                            for (int i = 0; i < 3 - msLen; ++i)
+                                sb.append('0');
+                        }
+                    }
+                }
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
