diff --git a/tmp/e5828597-b068-4985-a807-afb5b48ddd49_buggy.java b/tmp/17a60d81-4f29-4595-bddc-6a8b036a7b87_fixed.java
index cd412d2..bb7915d 100644
--- a/tmp/e5828597-b068-4985-a807-afb5b48ddd49_buggy.java
+++ b/tmp/17a60d81-4f29-4595-bddc-6a8b036a7b87_fixed.java
@@ -1,76 +1,121 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
+            // Fix optional colon in timezone
             c = dateStr.charAt(len-3);
             if (c == ':') { // remove optional colon
-                    // remove colon
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len-3, len-2);
                 dateStr = sb.toString();
+                len = dateStr.length();
             } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
                 dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
                 len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+            }
+
+            // Handle partial milliseconds, or missing seconds/milliseconds
+            // Find the time offset start
+            int tzIndex = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));
+            int milliStart = dateStr.lastIndexOf('.');
+            int colon2 = dateStr.lastIndexOf(':');
+            // The offset is always at the end (e.g., -0500 or +0230)
+            // Try to locate milliseconds or insert them
+            if (colon2 >= 0 && (tzIndex > colon2) && (milliStart == -1 || milliStart < colon2)) {
+                // No milliseconds: insert .000 before offset
                 StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                sb.insert(tzIndex, ".000");
+                dateStr = sb.toString();
+            } else if (milliStart > colon2) {
+                // Has . after seconds, see how many digits
+                int msDigits = 0;
+                int i = milliStart + 1;
+                while (i < tzIndex && Character.isDigit(dateStr.charAt(i))) {
+                    msDigits++;
+                    i++;
+                }
+                if (msDigits > 0 && msDigits < 3) {
+                    // Need to pad with zeros
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    for (int pad = 0; pad < 3 - msDigits; ++pad) {
+                        sb.insert(milliStart + 1 + msDigits + pad, '0');
+                    }
+                    dateStr = sb.toString();
+                } else if (msDigits == 0) {
+                    // Just a dot but no digits! Add 000.
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    sb.insert(milliStart + 1, "000");
+                    dateStr = sb.toString();
+                }
+            } else if (colon2 >= 0 && colon2 == tzIndex - 3) {
+                // Possibly missing seconds (e.g. 19:20+0100)
+                // Insert ':00.000' before offset
+                StringBuilder sb = new StringBuilder(dateStr);
+                sb.insert(tzIndex, ":00.000");
                 dateStr = sb.toString();
             }
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
             // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+            int tIndex = dateStr.lastIndexOf('T');
+            int timeLen = (tIndex < 0) ? 0 : (len - tIndex - 1);
+            if (timeLen > 0) {
+                int dotIndex = dateStr.indexOf('.', tIndex);
+                int colonCount = 0, idx = tIndex + 1;
+                for (; idx < len; ++idx) {
+                    if (dateStr.charAt(idx) == ':') ++colonCount;
+                }
+                if (colonCount == 1) {
+                    sb.append(":00.000");
+                } else {
+                    // has at least HH:mm:ss
+                    if (dotIndex < 0) {
                         sb.append(".000");
+                    } else {
+                        int msDigits = len - dotIndex - 1;
+                        if (msDigits > 0 && msDigits < 3) {
+                            for (int pad = 0; pad < 3 - msDigits; ++pad) {
+                                sb.append('0');
+                            }
+                        }
+                    }
+                }
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
