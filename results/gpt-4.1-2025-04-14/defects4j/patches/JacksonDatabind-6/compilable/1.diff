diff --git a/tmp/f61dac6c-6c9e-4fbf-8dd4-0620365a6a45_buggy.java b/tmp/45222e43-7e9c-451a-9a39-1fb1238643d9_fixed.java
index cd412d2..ef94d61 100644
--- a/tmp/f61dac6c-6c9e-4fbf-8dd4-0620365a6a45_buggy.java
+++ b/tmp/45222e43-7e9c-451a-9a39-1fb1238643d9_fixed.java
@@ -1,76 +1,115 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
+        if (dateStr.length() > 4 && dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
         }
+        // handle partial milliseconds: .S or .SS
+        dateStr = padMilliseconds(dateStr);
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
             c = dateStr.charAt(len-3);
             if (c == ':') { // remove optional colon
                 // remove colon
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len-3, len-2);
                 dateStr = sb.toString();
             } else if (c == '+' || c == '-') { // missing minutes
                 // let's just append '00'
                 dateStr += "00";
             }
             // Milliseconds partial or missing; and even seconds are optional
             len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+            // find if missing seconds part (i.e. ...T19:20+01:00) and pad :00 if so
+            int tzIndex = len - 5;
+            int sepT = dateStr.indexOf('T');
+            if (sepT > 0 && dateStr.charAt(sepT+3) == ':' && // Txx:yy...
+                (dateStr.charAt(sepT+6) == '+' || dateStr.charAt(sepT+6) == '-')) {
+                // only minutes provided, pad missing seconds as :00
                 StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                sb.insert(sepT+6, ":00");
                 dateStr = sb.toString();
+                len = dateStr.length();
             }
+            // handle partial milliseconds: .S or .SS
+            dateStr = padMilliseconds(dateStr);
+
+            // If no milliseconds or partial, pad zeros as necessary
+            // (now covered by padMilliseconds)
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
+            // And possibly also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+            if (timeLen > 0 && timeLen <= 8) {
+                int dotIdx = dateStr.indexOf('.', dateStr.lastIndexOf('T'));
+                if (dotIdx < 0) {
                     sb.append(".000");
                 }
+            }
             sb.append('Z');
             dateStr = sb.toString();
+            dateStr = padMilliseconds(dateStr);
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
+
+/**
+ * Pads milliseconds in ISO8601 string if present (.1, .12 -> .100, .120).
+ * Only applies to the last period of the date string (fractional sec).
+ */
+private String padMilliseconds(String dateStr) {
+    int tIndex = dateStr.lastIndexOf('T');
+    int dotIndex = dateStr.indexOf('.', tIndex > 0 ? tIndex : 0);
+    if (dotIndex >= 0) {
+        // Find end of number
+        int i = dotIndex + 1;
+        int length = dateStr.length();
+        while (i < length) {
+            char ch = dateStr.charAt(i);
+            if (ch < '0' || ch > '9') break;
+            i++;
+        }
+        int msDigits = i - (dotIndex + 1);
+        if (msDigits == 1) {
+            // .1 => .100
+            StringBuilder sb = new StringBuilder(dateStr);
+            sb.insert(dotIndex + 2, "00");
+            return sb.toString();
+        } else if (msDigits == 2) {
+            // .12 => .120
+            StringBuilder sb = new StringBuilder(dateStr);
+            sb.insert(dotIndex + 3, "0");
+            return sb.toString();
+        }
+    }
+    return dateStr;
+}
\ No newline at end of file
