diff --git a/tmp/5faf9b78-c8c1-42e2-b85e-7e66ffb17643_buggy.java b/tmp/797cdf6a-499d-4bcc-8c0a-e72f93721ced_fixed.java
index cd412d2..1c858b9 100644
--- a/tmp/5faf9b78-c8c1-42e2-b85e-7e66ffb17643_buggy.java
+++ b/tmp/797cdf6a-499d-4bcc-8c0a-e72f93721ced_fixed.java
@@ -1,76 +1,126 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len - 1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len - 4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len - 1, ".000");
             dateStr = sb.toString();
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            // Normalize the offset by removing the colon, if necessary, and ensure minutes is present
+            int zIndex = dateStr.length() - 6;
+            char tzSep = dateStr.charAt(dateStr.length() - 3);
             StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
+            if (tzSep == ':') {
+                sb.delete(dateStr.length() - 3, dateStr.length() - 2);
                 dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+            } else if (dateStr.charAt(dateStr.length() - 5) == '+' || dateStr.charAt(dateStr.length() - 5) == '-') {
+                // missing minutes, e.g. +01
                 dateStr += "00";
+                sb = new StringBuilder(dateStr);
             }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+
+            // At this point, offset is correct. Now handle missing seconds and fractional seconds.
+            // Find the time part:
+            int tIndex = dateStr.indexOf('T');
+            int dotIndex = dateStr.indexOf('.', tIndex);
+            int plusIndex = dateStr.indexOf('+', tIndex);
+            int minusIndex = dateStr.indexOf('-', tIndex);
+            int tzIndex = (plusIndex > 0) ? plusIndex : ((minusIndex > tIndex) ? minusIndex : -1);
+            if (tzIndex < 0) {
+                tzIndex = dateStr.length();
+            }
+
+            int firstColonIdx = dateStr.indexOf(':', tIndex);
+            int secondColonIdx = (firstColonIdx >= 0) ? dateStr.indexOf(':', firstColonIdx + 1) : -1;
+
+            // 1. Ensure seconds
+            if (secondColonIdx > 0 && (dotIndex == -1 || secondColonIdx < dotIndex)) {
+                // Have at least HH:mm:ss...
+                int secondsEnd = secondColonIdx + 3; // HH:mm:ss
+                if (secondsEnd > tzIndex) secondsEnd = tzIndex;
+            } else if (firstColonIdx > 0 && (secondColonIdx == -1 || secondColonIdx > tzIndex)) {
+                // Only have HH:mm, not HH:mm:ss
+                // Need to insert :00 after minutes
+                int insertPos = firstColonIdx + 3;
+                if (insertPos > tzIndex) insertPos = tzIndex;
+                sb.insert(insertPos, ":00");
+                dateStr = sb.toString();
+                // Recalc variables
+                dotIndex = dateStr.indexOf('.', tIndex);
+                plusIndex = dateStr.indexOf('+', tIndex);
+                minusIndex = dateStr.indexOf('-', tIndex);
+                tzIndex = (plusIndex > 0) ? plusIndex : ((minusIndex > tIndex) ? minusIndex : -1);
+                if (tzIndex < 0) {
+                    tzIndex = dateStr.length();
+                }
+            }
+
+            // 2. Pad milliseconds if present (e.g. .6, .61, .123)
+            dotIndex = dateStr.indexOf('.', tIndex);
+            if (dotIndex > 0 && dotIndex < tzIndex) {
+                int msEnd = dotIndex + 1;
+                while (msEnd < dateStr.length() && Character.isDigit(dateStr.charAt(msEnd)) && msEnd - dotIndex <= 3) {
+                    msEnd++;
+                }
+                int msDigits = msEnd - (dotIndex + 1);
+                if (msDigits < 3) {
+                    sb = new StringBuilder(dateStr);
+                    for (int i = 0; i < 3 - msDigits; ++i) {
+                        sb.insert(dotIndex + 1 + msDigits + i, '0');
+                    }
+                    dateStr = sb.toString();
+                }
+            } else if (dotIndex < 0 && tIndex >= 0) {
+                // No milliseconds; find where to insert
+                plusIndex = dateStr.indexOf('+', tIndex);
+                minusIndex = dateStr.indexOf('-', tIndex);
+                tzIndex = (plusIndex > 0) ? plusIndex : ((minusIndex > tIndex) ? minusIndex : -1);
+                if (tzIndex < 0) {
+                    tzIndex = dateStr.length();
+                }
+                // Insert ".000" before timezone
+                sb = new StringBuilder(dateStr);
+                sb.insert(tzIndex, ".000");
                 dateStr = sb.toString();
             }
+
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
             if (timeLen <= 8) {
                 sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
