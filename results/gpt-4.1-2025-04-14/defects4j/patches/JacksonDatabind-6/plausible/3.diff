diff --git a/tmp/e92fc87c-9801-4306-807c-4c236de96a22_buggy.java b/tmp/7d9f959b-2ca4-4e7b-8748-f53bcd2ebeb7_fixed.java
index cd412d2..92f7360 100644
--- a/tmp/e92fc87c-9801-4306-807c-4c236de96a22_buggy.java
+++ b/tmp/7d9f959b-2ca4-4e7b-8748-f53bcd2ebeb7_fixed.java
@@ -1,76 +1,148 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
+    /*
+     * 21-May-2009, tatu: DateFormat has very strict handling of
      * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
      */
 
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
+        } else {
+            // Patch partial or missing milliseconds, e.g. ".6", ".61", ".123"
+            dateStr = _padISO8601Millis(dateStr, len-1);
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
             c = dateStr.charAt(len-3);
             if (c == ':') { // remove optional colon
                 // remove colon
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len-3, len-2);
                 dateStr = sb.toString();
             } else if (c == '+' || c == '-') { // missing minutes
                 // let's just append '00'
                 dateStr += "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
+            // Now, patch partial or missing milliseconds
             len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+            // Try to locate milliseconds part in "yyyy-MM-dd'T'HH:mm:ss(.SSS)?Z"
+            // and pad as needed to ".SSS"
+            // Find start of timezone (either last '+' or '-' after time part)
+            int tzIndex = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));
+            int dotIndex = dateStr.lastIndexOf('.', tzIndex != -1 ? tzIndex : dateStr.length());
+            int tIndex = dateStr.indexOf('T');
+            int colon2 = dateStr.indexOf(':', tIndex > 0 ? tIndex : 0); // find first colon after 'T'
+            boolean hasSecs = false;
+            // Check if seconds component exists
+            if (tIndex >= 0 && colon2 > tIndex) {
+                int colon3 = dateStr.indexOf(':', colon2 + 1);
+                hasSecs = (colon3 > colon2);
+            }
+            // 'dotIndex' is milliseconds, between last '.' and tz
+            if (dotIndex > 0 && dotIndex > tIndex) {
+                // Patch, if needed
+                String msPart = dateStr.substring(dotIndex + 1, (tzIndex > 0) ? tzIndex : dateStr.length());
+                if (msPart.length() < 3) {
                     StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                    for (int i = msPart.length(); i < 3; ++i) {
+                        sb.insert(dotIndex + 1 + msPart.length(), '0');
+                    }
+                    dateStr = sb.toString();
+                }
+            } else if (hasSecs) { // has seconds, but missing milliseconds
+                // Insert ".000" before timezone
+                int insertPos = (tzIndex > 0) ? tzIndex : dateStr.length();
+                StringBuilder sb = new StringBuilder(dateStr);
+                sb.insert(insertPos, ".000");
+                dateStr = sb.toString();
+            } else if (tIndex > 0) { // Has time but missing seconds: "yyyy-MM-ddTHH:mm+01:00"
+                // Insert ":00.000" before timezone
+                int insertPos = (tzIndex > 0) ? tzIndex : dateStr.length();
+                StringBuilder sb = new StringBuilder(dateStr);
+                sb.insert(insertPos, ":00.000");
                 dateStr = sb.toString();
             }
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+            // Figure time part after 'T'
+            int tIndex = dateStr.indexOf('T');
+            int timeLen = (tIndex < 0) ? 0 : (len - tIndex - 1);
+            if (timeLen > 0) {
+                // Patch missing seconds
+                if (timeLen == 5) { // "HH:mm"
+                    sb.append(":00.000");
+                } else if (timeLen == 8) { // "HH:mm:ss"
                     sb.append(".000");
+                } else {
+                    // Patch possible missing/partial ms
+                    int dotIndex = dateStr.indexOf('.', tIndex);
+                    if (dotIndex > 0) {
+                        String msPart = dateStr.substring(dotIndex + 1);
+                        if (msPart.length() < 3) {
+                            for (int i = msPart.length(); i < 3; ++i) {
+                                sb.append('0');
+                            }
+                        }
+                    } else {
+                        sb.append(".000");
+                    }
+                }
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
+
+// Helper to pad or normalize milliseconds if present and partial, else no-op.
+// Expects to be called with index of timezone offset ('Z', '+' or '-') or string length.
+private String _padISO8601Millis(String dateStr, int tzStart) {
+    // tzStart: index of 'Z', '+', or '-' (or end of string)
+    int dot = dateStr.lastIndexOf('.', tzStart - 1);
+    if (dot < 0) {
+        return dateStr;
+    }
+    int afterDot = dot + 1;
+    int msLen = tzStart - afterDot;
+    if (msLen == 0) {
+        return dateStr.substring(0, dot) + ".000" + dateStr.substring(tzStart);
+    } else if (msLen == 1) {
+        return dateStr.substring(0, afterDot) + dateStr.charAt(afterDot) + "00" + dateStr.substring(tzStart);
+    } else if (msLen == 2) {
+        return dateStr.substring(0, afterDot) + dateStr.substring(afterDot, afterDot + 2) + "0" + dateStr.substring(tzStart);
+    } else if (msLen > 3) {
+        // truncate to three digits
+        return dateStr.substring(0, afterDot + 3) + dateStr.substring(tzStart);
+    }
+    return dateStr;
+}
\ No newline at end of file
