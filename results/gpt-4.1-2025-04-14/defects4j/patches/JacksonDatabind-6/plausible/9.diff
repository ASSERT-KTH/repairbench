diff --git a/tmp/5132f904-49fc-49b8-834e-8aff37fbc910_buggy.java b/tmp/159c4e77-af79-4f51-adfe-941521a14b74_fixed.java
index cd412d2..256d3d9 100644
--- a/tmp/5132f904-49fc-49b8-834e-8aff37fbc910_buggy.java
+++ b/tmp/159c4e77-af79-4f51-adfe-941521a14b74_fixed.java
@@ -1,76 +1,130 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
+    // Plain date (yyyy-MM-dd)
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
+        } else {
+            // check for partial milliseconds
+            int dotIndex = dateStr.lastIndexOf('.');
+            int zIndex = len - 1;
+            if (dotIndex != -1 && dotIndex < zIndex) {
+                int msLen = zIndex - dotIndex - 1;
+                if (msLen > 0 && msLen < 3) {
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    for (int i = 0; i < 3 - msLen; ++i) {
+                        sb.insert(zIndex, '0');
+                    }
+                    dateStr = sb.toString();
+                }
+            }
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
             c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            if (c == ':') { // remove optional colon in timezone offset
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len-3, len-2);
                 dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+            } else if (c == '+' || c == '-') { // missing minutes in offset
                 dateStr += "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
             len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+
+            // Handle milliseconds: ensure we have 3 digits if milliseconds are present, or add ".000" if missing
+            int tzIndex = len - 5; // after removing colon, timezone offset is always 5 chars
+            int dotIndex = dateStr.lastIndexOf('.', tzIndex-1);
+            if (dotIndex != -1 && dotIndex < tzIndex) {
+                int msLen = tzIndex - dotIndex - 1;
+                if (msLen > 0 && msLen < 3) {
                     StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                    for (int i = 0; i < 3 - msLen; ++i) {
+                        sb.insert(dotIndex + 1 + msLen, '0');
+                    }
                     dateStr = sb.toString();
                 }
+            } else {
+                // milliseconds missing, check if seconds are present
+                // find the position of the last ':' before timezone
+                int lastColon = dateStr.lastIndexOf(':', tzIndex-1);
+                if (lastColon != -1) {
+                    // if seconds are missing (i.e., there's only one colon in the time part)
+                    // e.g., "1997-07-16T19:20+01:00", needs to add ":00.000"
+                    boolean secondsPresent = dateStr.lastIndexOf(':', lastColon - 1) != -1;
+                    if (!secondsPresent) {
+                        StringBuilder sb = new StringBuilder(dateStr);
+                        sb.insert(tzIndex, ":00.000");
+                        dateStr = sb.toString();
+                    } else {
+                        // seconds present, just add ".000" after seconds
+                        StringBuilder sb = new StringBuilder(dateStr);
+                        sb.insert(tzIndex, ".000");
+                        dateStr = sb.toString();
+                    }
+                }
+            }
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
+            // No timezone: treat as if it's Zulu
             StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+            // find the position of 'T'
+            int tIndex = dateStr.indexOf('T');
+            int timeLen = len - tIndex - 1;
+            int dotIndex = dateStr.lastIndexOf('.');
+            int secSep = dateStr.lastIndexOf(':');
+            if (timeLen > 0) {
+                if (dotIndex > tIndex) {
+                    int msLen = len - dotIndex - 1;
+                    if (msLen > 0 && msLen < 3) {
+                        for (int i = 0; i < 3 - msLen; ++i) {
+                            sb.append('0');
+                        }
+                    }
+                } else {
+                    // add ".000" after the seconds (if present), or ":00.000" if seconds are missing
+                    int countColons = 0;
+                    for (int i = tIndex+1; i < len; ++i) {
+                        if (dateStr.charAt(i) == ':') {
+                            ++countColons;
+                        }
+                    }
+                    if (countColons == 1) {
+                        // only hours and minutes: add ":00.000"
+                        sb.append(":00.000");
+                    } else {
+                        // seconds present: add ".000"
                         sb.append(".000");
                     }
+                }
+            }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
