diff --git a/tmp/fb6c3f8f-2a52-481b-a89f-9e35be1d3ea0_buggy.java b/tmp/2ea6fb17-2ca1-44d8-9fb6-c4672f992b44_fixed.java
index cd412d2..d3dadbe 100644
--- a/tmp/fb6c3f8f-2a52-481b-a89f-9e35be1d3ea0_buggy.java
+++ b/tmp/2ea6fb17-2ca1-44d8-9fb6-c4672f992b44_fixed.java
@@ -1,76 +1,141 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
     /* 21-May-2009, tatu: DateFormat has very strict handling of
      * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
      */
 
     /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
      * quite simple because we already set date format timezone to be
      * GMT, and hence can just strip out 'Z' altogether
      */
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
+        } else {
+            // handle partial milliseconds, like "...:30.6Z" -> "...:30.600Z"
+            int dotIdx = dateStr.lastIndexOf('.');
+            int zIdx = len-1;
+            if (dotIdx > 0 && dotIdx < zIdx) {
+                int msLen = zIdx - dotIdx - 1;
+                if (msLen > 0 && msLen < 3) {
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    for (int i = 0; i < 3 - msLen; ++i) {
+                        sb.insert(zIdx, '0');
+                    }
+                    dateStr = sb.toString();
+                }
+            }
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
             c = dateStr.charAt(len-3);
             if (c == ':') { // remove optional colon
                 // remove colon
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len-3, len-2);
                 dateStr = sb.toString();
+                len = dateStr.length(); // update length as string is changed
             } else if (c == '+' || c == '-') { // missing minutes
                 // let's just append '00'
                 dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
                 len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+            }
+            // Milliseconds partial or missing; and even seconds are optional
+
+            // Find main time part without timezone
+            int tzIdx = -1;
+            for (int i = dateStr.length()-1; i > 0; --i) {
+                char cc = dateStr.charAt(i);
+                if (cc == '+' || cc == '-') {
+                    tzIdx = i;
+                    break;
+                }
+            }
+            int timeEnd = (tzIdx < 0) ? dateStr.length() : tzIdx;
+            int msDotIdx = dateStr.lastIndexOf('.', timeEnd);
+            if (msDotIdx >= 0) {
+                int msEnd = msDotIdx + 1;
+                // Find milliseconds length
+                while (msEnd < timeEnd && Character.isDigit(dateStr.charAt(msEnd))) {
+                    msEnd++;
+                }
+                int msLen = msEnd - msDotIdx - 1;
+                if (msLen < 3) {
                     StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                    for (int i = 0; i < 3 - msLen; ++i) {
+                        sb.insert(msEnd, '0');
+                        msEnd++;
+                    }
                     dateStr = sb.toString();
                 }
+            } else {
+                // Check if we have seconds
+                int tIdx = dateStr.indexOf('T');
+                if (tIdx >= 0) {
+                    int colon1 = dateStr.indexOf(':', tIdx);
+                    int colon2 = dateStr.indexOf(':', colon1 + 1);
+                    if (colon2 >= 0 && colon2 < timeEnd) {
+                        // Have seconds, just add ".000" after seconds
+                        StringBuilder sb = new StringBuilder(dateStr);
+                        sb.insert(colon2 + 3, ".000");
+                        dateStr = sb.toString();
+                    } else if (colon1 >= 0 && colon1 < timeEnd) {
+                        // No seconds, add ":00.000" after minutes
+                        StringBuilder sb = new StringBuilder(dateStr);
+                        sb.insert(colon1 + 3, ":00.000");
+                        dateStr = sb.toString();
+                    }
+                }
+            }
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
             // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
             if (timeLen <= 8) {
                 sb.append(".000");
+            } else {
+                // handle partial milliseconds: e.g. "2014-10-03T18:00:00.6"
+                int dotIdx = dateStr.lastIndexOf('.');
+                if (dotIdx > 0 && dotIdx == len - (timeLen) && timeLen > 0) {
+                    int msLen = len - dotIdx - 1;
+                    if (msLen < 3) {
+                        for (int i = 0; i < 3 - msLen; ++i) {
+                            sb.append('0');
+                        }
+                    }
+                }
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
