diff --git a/tmp/e881adf1-3c95-4faa-a2d1-f9bfdefa393b_buggy.java b/tmp/bb8aa278-9291-411e-b905-7417a10dae6e_fixed.java
index cd412d2..40ee5a7 100644
--- a/tmp/e881adf1-3c95-4faa-a2d1-f9bfdefa393b_buggy.java
+++ b/tmp/bb8aa278-9291-411e-b905-7417a10dae6e_fixed.java
@@ -1,76 +1,161 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
         }
+        // Patch for partial milliseconds: find millisecond part if present and pad it
+        int dotIdx = dateStr.lastIndexOf('.');
+        int zIdx = dateStr.length() - 1;
+        if (dotIdx > 0 && zIdx > dotIdx) {
+            int msLen = zIdx - dotIdx - 1;
+            if (msLen < 3) {
+                StringBuilder sb = new StringBuilder(dateStr);
+                for (int i = 0; i < 3 - msLen; ++i) {
+                    sb.insert(zIdx, '0');
+                }
+                dateStr = sb.toString();
+            }
+        }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            // Patch for partial milliseconds and missing seconds
+            // Find main time separator T
+            int tIdx = dateStr.indexOf('T');
+            if (tIdx > 0) {
+                // Find timezone offset: last + or - or Z, keeping in mind a colon time offset
+                int tzIdx = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));
+                if (tzIdx < tIdx) {
+                    tzIdx = -1;
+                }
+                if (tzIdx == -1) {
+                    tzIdx = dateStr.length();
+                }
+                String timeSection = dateStr.substring(tIdx + 1, tzIdx);
+
+                // Determine if seconds are missing
+                int firstColon = timeSection.indexOf(':');
+                int secondColon = timeSection.indexOf(':', firstColon + 1);
+                int dotIdx = timeSection.indexOf('.');
+
                 StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
+
+                // If secondColon == -1, seconds missing, insert ":00"
+                if (firstColon > -1 && secondColon == -1) {
+                    // Insert ":00" before timeZone
+                    int insertPos = tIdx + 1 + timeSection.length();
+                    sb.insert(insertPos, ":00");
                     dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+                    timeSection = sb.substring(tIdx + 1, tzIdx + 3); // re-evaluate timeSection with inserted ":00"
+                }
+
+                // Re-extract timeSection after seconds-fixed possibly
+                tIdx = dateStr.indexOf('T');
+                tzIdx = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));
+                if (tzIdx < tIdx) {
+                    tzIdx = -1;
+                }
+                if (tzIdx == -1) {
+                    tzIdx = dateStr.length();
+                }
+                timeSection = dateStr.substring(tIdx + 1, tzIdx);
+
+                dotIdx = timeSection.indexOf('.');
+
+                // If milliseconds present but partial, pad with zeroes to 3 digits
+                if (dotIdx > -1) {
+                    int msStart = tIdx + 1 + dotIdx + 1;
+                    int msEnd = msStart;
+                    while (msEnd < tzIdx && Character.isDigit(dateStr.charAt(msEnd))) {
+                        msEnd++;
+                    }
+                    int msLen = msEnd - msStart;
+                    if (msLen < 3) {
+                        StringBuilder padSb = new StringBuilder(dateStr);
+                        for (int i = 0; i < 3 - msLen; ++i) {
+                            padSb.insert(msEnd, '0');
+                        }
+                        dateStr = padSb.toString();
+                        // update tzIdx in case we've pushed it forward
+                        tzIdx += (3 - msLen);
+                    }
+                }
+
+                // If milliseconds missing, insert .000 after seconds
+                else if (timeSection.length() >= 8 &&
+                        (timeSection.charAt(2) == ':' && timeSection.charAt(5) == ':')) {
+                    // Add ".000" after seconds
+                    int insertMs = tIdx + 1 + 8;
+                    StringBuilder msSb = new StringBuilder(dateStr);
+                    msSb.insert(insertMs, ".000");
+                    dateStr = msSb.toString();
+                    // tzIdx += 4; // not needed
+                }
+            }
+
+            c = dateStr.charAt(dateStr.length()-3);
+            if (c == ':') { // remove optional colon from timezone
+                StringBuilder sb = new StringBuilder(dateStr);
+                sb.delete(dateStr.length() - 3, dateStr.length() - 2);
+                dateStr = sb.toString();
+            } else if (c == '+' || c == '-') { // missing minutes in timezone offset
                 dateStr += "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
-                }
+
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
             // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+            int tIdx = dateStr.lastIndexOf('T');
+            int timeLen = len - tIdx - 1;
+            // Check for partial or missing milliseconds
+            String timeSection = tIdx >= 0 ? dateStr.substring(tIdx + 1) : "";
+            int dotIdx = timeSection.indexOf('.');
+            if (dotIdx > -1) {
+                int msStart = tIdx + 1 + dotIdx + 1;
+                int msEnd = msStart;
+                while (msEnd < dateStr.length() && Character.isDigit(dateStr.charAt(msEnd))) {
+                    msEnd++;
+                }
+                int msLen = msEnd - msStart;
+                if (msLen < 3) {
+                    for (int i = 0; i < 3 - msLen; ++i) {
+                        sb.insert(msEnd, '0');
+                    }
+                }
+            } else if (timeLen <= 8) {
                 sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
