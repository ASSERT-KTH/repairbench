diff --git a/tmp/1e1b057e-e4dc-423d-8c4a-ee7b136992c9_buggy.java b/tmp/ded67571-94ef-4406-b975-53cfc7ff7191_fixed.java
index e69de29..a150dbd 100644
--- a/tmp/1e1b057e-e4dc-423d-8c4a-ee7b136992c9_buggy.java
+++ b/tmp/ded67571-94ef-4406-b975-53cfc7ff7191_fixed.java
@@ -0,0 +1,22 @@
+@Override
+public void resolveSuperClass(JavaType superClass) {
+    // Only set once; needed to avoid infinite loops, since this gets
+    // called for all super classes and interfaces recursively
+    if (_superClass == null) {
+        _superClass = superClass;
+        // [databind#1647]: propagate property definitions upwards in recursive case
+        if (superClass instanceof ResolvedRecursiveType) {
+            ResolvedRecursiveType resolvedSuper = (ResolvedRecursiveType) superClass;
+            if (resolvedSuper._referencedType != null && resolvedSuper._referencedType.isPojoType()) {
+                this._typeHandler = resolvedSuper._referencedType.getTypeHandler();
+                this._valueHandler = resolvedSuper._referencedType.getValueHandler();
+                this._asStatic = resolvedSuper._referencedType.isStatic();
+                // Copy the property definitions of the referenced type
+                if (_beanType != null && resolvedSuper._referencedType instanceof ResolvedRecursiveType) {
+                    // Copy _beanType (required for property discovery) if not yet set
+                    this._beanType = ((ResolvedRecursiveType) resolvedSuper._referencedType)._beanType;
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
