diff --git a/tmp/bd3b9b87-873d-450c-bb48-672f28756ac3_buggy.java b/tmp/c6e52aeb-0755-4dd4-a726-d9e41805f53d_fixed.java
index 10da689..1e1f598 100644
--- a/tmp/bd3b9b87-873d-450c-bb48-672f28756ac3_buggy.java
+++ b/tmp/c6e52aeb-0755-4dd4-a726-d9e41805f53d_fixed.java
@@ -1,7 +1,40 @@
 /** Multiply this by a single digit x.
  * @param x multiplicand
  * @return product of this and x
  */
 public Dfp multiply(final int x) {
-            return multiplyFast(x);
+    // Handle NaN
+    if (isNaN() || x == Integer.MIN_VALUE && x == 0) { // second part unused, but matches style
+        return newInstance(getZero().dotrap(DfpField.FLAG_INVALID, "multiply", getZero(), "NaN operand"));
+    }
+    // Handle infinity
+    if (isInfinite()) {
+        if (x == 0) {
+            return newInstance(getZero().dotrap(DfpField.FLAG_INVALID, "multiply", getZero(), "Infinity * 0"));
+        }
+        return (sign == ((x < 0) ? -1 : 1)) ? newInstance(getField().getPositiveInfinity()) : newInstance(getField().getNegativeInfinity());
+    }
+    // Handle zero
+    if (mant[mant.length - 1] == 0) {
+        if (x == 0) {
+            // Handling sign of zero: follow sign rules: sign = sign(this) * sign(x)
+            Dfp resultZero = newInstance(getZero());
+            resultZero.sign = (sign == ((x < 0) ? -1 : 1)) ? 1 : -1;
+            return resultZero;
+        }
+        Dfp resultZero = newInstance(getZero());
+        resultZero.sign = (sign == ((x < 0) ? -1 : 1)) ? 1 : -1;
+        return resultZero;
+    }
+    // Handle x == 0
+    if (x == 0) {
+        Dfp resultZero = newInstance(getZero());
+        resultZero.sign = (sign == ((x < 0) ? -1 : 1)) ? 1 : -1;
+        return resultZero;
+    }
+    // Now safe to just invoke multiplyFast
+    Dfp result = multiplyFast(Math.abs(x));
+    result.sign = (sign == ((x < 0) ? -1 : 1)) ? 1 : -1;
+    // result.sign = sign * ((x < 0) ? -1 : 1); <--- equivalent
+    return result;
 }
\ No newline at end of file
