diff --git a/tmp/89e21566-74be-455e-a1bb-f0c84e1aa757_buggy.java b/tmp/3ffb5751-3d79-46b2-9365-0b057e2220b2_fixed.java
index 10da689..3f4f9b7 100644
--- a/tmp/89e21566-74be-455e-a1bb-f0c84e1aa757_buggy.java
+++ b/tmp/3ffb5751-3d79-46b2-9365-0b057e2220b2_fixed.java
@@ -1,7 +1,29 @@
     /** Multiply this by a single digit x.
      * @param x multiplicand
      * @return product of this and x
      */
     public Dfp multiply(final int x) {
-            return multiplyFast(x);
+        // Handle special cases similarly to multiply(Dfp) for consistency and correct flags
+        if (isNaN()) {
+            return Dfp.copysign(getField().getNan(), this, x < 0);
+        }
+        if (x == 0) {
+            if (this.isInfinite()) {
+                DfpField field = getField();
+                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+                return field.getNan();
+            }
+            return Dfp.copysign(getField().getZero(), this, x < 0);
+        }
+        if (this.isInfinite()) {
+            // If this is infinity, result is +inf or -inf depending on sign
+            return Dfp.copysign(getField().getInf(), this, x < 0);
+        }
+
+        // Standard multiply
+        Dfp result = multiplyFast(Math.abs(x));
+        if (x < 0) {
+            result = result.negate();
+        }
+        return result;
     }
\ No newline at end of file
