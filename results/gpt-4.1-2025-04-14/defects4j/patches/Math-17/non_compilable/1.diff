diff --git a/tmp/6d86916f-e530-4326-98f4-6d36c7751059_buggy.java b/tmp/8b644a7a-f3cb-4775-885f-fc38f0d46b8c_fixed.java
index 10da689..80058b0 100644
--- a/tmp/6d86916f-e530-4326-98f4-6d36c7751059_buggy.java
+++ b/tmp/8b644a7a-f3cb-4775-885f-fc38f0d46b8c_fixed.java
@@ -1,7 +1,59 @@
     /** Multiply this by a single digit x.
      * @param x multiplicand
      * @return product of this and x
      */
     public Dfp multiply(final int x) {
-            return multiplyFast(x);
+        // we must check for special cases (NaN, Infinity, Zero) and sign handling just like the two-Dfp multiply method
+        if (isNaN()) {
+            return newInstance(DfpField.FLAG_NAN);
+        }
+
+        if (x == 0) {
+            // Multiply by zero: result is zero, sign is XOR
+            Dfp result = newInstance();
+            result.sign = (byte) ((sign == 0) ? 0 : (sign == 1 ? 1 : 0)); // Should preserve -0
+            if (sign == 1) {
+                result.sign = 1;
+            }
+            result.nans = nans;
+            if (isInfinite()) {
+                // INF * 0 = NaN, and signal invalid
+                result = newInstance(DfpField.FLAG_NAN);
+                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            }
+            return result;
+        }
+
+        if (isInfinite()) {
+            // Multiply inf by nonzero integer
+            Dfp result = newInstance();
+            result.nans = nans;
+            result.sign = (byte) ((x < 0) ? (sign == 0 ? 1 : 0) : sign); // flip sign if x<0
+            return result;
+        }
+
+        // If x==1 or x==-1, shortcut
+        if (x == 1) {
+            return this.copy();
+        } else if (x == -1) {
+            Dfp result = this.copy();
+            result.sign = (byte) (1 - sign);
+            return result;
+        }
+
+        // shortcut for x == Integer.MIN_VALUE, since Math.abs(Integer.MIN_VALUE) < 0
+        if (x == Integer.MIN_VALUE) {
+            return this.multiply(-1).multiply(-(x + 1)).add(this); // x = -2^31, so -(x + 1) = 2^31 - 1, multiply by -1, add one more instance
+        }
+
+        int absx = Math.abs(x);
+        Dfp result = multiplyFast(absx);  // underlying (fast) integer multiply
+
+        // fix the sign
+        if ((x < 0 && sign == 0) || (x > 0 && sign == 1)) {
+            result.sign = 1;
+        } else {
+            result.sign = 0;
+        }
+        return result;
     }
\ No newline at end of file
