diff --git a/tmp/c28b13e9-20dc-43bb-8783-b70e56bceeb8_buggy.java b/tmp/18deaa37-2899-4854-a9b7-174256b9b65d_fixed.java
index 10da689..978f4a7 100644
--- a/tmp/c28b13e9-20dc-43bb-8783-b70e56bceeb8_buggy.java
+++ b/tmp/18deaa37-2899-4854-a9b7-174256b9b65d_fixed.java
@@ -1,7 +1,34 @@
 /** Multiply this by a single digit x.
  * @param x multiplicand
  * @return product of this and x
  */
 public Dfp multiply(final int x) {
-            return multiplyFast(x);
+    // Handle special cases as in multiply(Dfp)
+    if (this.isNaN()) {
+        return this.newInstance(this).setToNaN();
+    }
+
+    if (x == 0) {
+        Dfp zero = this.newInstance(this);
+        zero.sign = this.sign * ((x < 0) ? -1 : 1);
+        zero.exp = 0;
+        Arrays.fill(zero.mant, 0);
+        if (this.isInfinite()) {
+            zero.field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            return zero.setToNaN();
+        }
+        return zero;
+    }
+
+    if (this.isInfinite()) {
+        if (x > 0) {
+            return this.newInstance(this).copySign(this.sign * 1);
+        } else {
+            return this.newInstance(this).copySign(this.sign * -1);
+        }
+    }
+
+    // Normal multiplication
+    Dfp result = this.multiply(this.getField().newDfp(x));
+    return result;
 }
\ No newline at end of file
