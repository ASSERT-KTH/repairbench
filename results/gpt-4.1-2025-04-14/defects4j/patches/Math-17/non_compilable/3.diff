diff --git a/tmp/c3d1fcd3-0e69-48f6-8877-57e780231643_buggy.java b/tmp/6c6eedbd-7833-4203-b3bc-80468ad628a1_fixed.java
index 10da689..2f94573 100644
--- a/tmp/c3d1fcd3-0e69-48f6-8877-57e780231643_buggy.java
+++ b/tmp/6c6eedbd-7833-4203-b3bc-80468ad628a1_fixed.java
@@ -1,7 +1,51 @@
 /** Multiply this by a single digit x.
  * @param x multiplicand
  * @return product of this and x
  */
 public Dfp multiply(final int x) {
+    // Handle special values: NaN, Infinity, Zero.
+    if (isNaN() || (x == 0 && isInfinite()) || (isZero() && !isNaN() && x == 0)) {
+        Dfp result = newInstance(this); // base return
+        if (isNaN() || (x == 0 && isInfinite()) || (isZero() && x == 0)) {
+            result = this.field.getZero();
+            result.nan = true;
+            this.field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+        }
+        return result;
+    }
+    if (isInfinite()) {
+        if (x == 0) {
+            Dfp result = this.field.getZero();
+            result.nan = true;
+            this.field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            return result;
+        }
+        // result is (infinity times nonzero int)
+        return (x > 0) ? copySign(this.field.getInfinity(), this) 
+                       : copySign(this.field.getInfinity(), this).negate();
+    }
+    if (isZero()) {
+        if (x == 0) {
+            Dfp result = this.field.getZero();
+            result.nan = true;
+            this.field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            return result;
+        }
+        // return signed zero
+        return (x >= 0) ? this.field.getZero(getSign()) 
+                        : this.field.getZero(-getSign());
+    }
+    if (x == 0) {
+        // x is zero, return signed zero
+        return (getSign() >= 0) ? this.field.getZero((x < 0) ? -1 : 1) 
+                               : this.field.getZero((x < 0) ? 1 : -1);
+    }
+    // Regular case
+    // Use multiplyFast for performance if x has at most 4 digits (as in multiplyFast's contract)
+    // Else, perform via multiply(Dfp) with a constructed Dfp
+    if (Math.abs(x) < 10000) {
         return multiplyFast(x);
+    } else {
+        return multiply(field.newDfp(x));
+    }
 }
\ No newline at end of file
