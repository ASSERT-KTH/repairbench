diff --git a/tmp/673f9ee3-f84c-4b1c-b28a-17cf7efe4b45_buggy.java b/tmp/7423c064-1657-48f8-b9a6-b80f07cc65eb_fixed.java
index 10da689..46bec59 100644
--- a/tmp/673f9ee3-f84c-4b1c-b28a-17cf7efe4b45_buggy.java
+++ b/tmp/7423c064-1657-48f8-b9a6-b80f07cc65eb_fixed.java
@@ -1,7 +1,40 @@
     /** Multiply this by a single digit x.
      * @param x multiplicand
      * @return product of this and x
      */
     public Dfp multiply(final int x) {
+        // Handle special cases as in multiply(Dfp)
+        if (this.isNaN()) {
+            return this.newInstance(Dfp.QNAN);
+        }
+        if (this.isInfinite()) {
+            if (x == 0) {
+                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+                return this.newInstance(Dfp.QNAN);
+            }
+            return (x > 0) ? this : this.negate();
+        }
+        if (this.isZero()) {
+            if (x == 0) {
+                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+                return this.newInstance(Dfp.QNAN);
+            }
+            if (Dfp.copysign(1, x) < 0) {
+                return this.negate();
+            }
+            return this.newInstance(this);
+        }
+        if (x == 0) {
+            Dfp result = newInstance(this);
+            result.sign = (this.sign == -1) ? -1 : 1;
+            result.exp = 0;
+            result.nWords = this.nWords;
+            for (int i = 0; i < result.nWords; i++) {
+                result.mant[i] = 0;
+            }
+            return result;
+        }
+
+        // Otherwise do the efficient multiplication
         return multiplyFast(x);
     }
\ No newline at end of file
