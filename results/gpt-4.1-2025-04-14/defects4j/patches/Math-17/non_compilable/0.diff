diff --git a/tmp/c7b31b96-2c3b-4677-a7ef-4fcc6417a67e_buggy.java b/tmp/18693aa2-40eb-47cc-906b-1e0d78f5b3ef_fixed.java
index 10da689..a21e1b2 100644
--- a/tmp/c7b31b96-2c3b-4677-a7ef-4fcc6417a67e_buggy.java
+++ b/tmp/18693aa2-40eb-47cc-906b-1e0d78f5b3ef_fixed.java
@@ -1,7 +1,37 @@
     /** Multiply this by a single digit x.
      * @param x multiplicand
      * @return product of this and x
      */
     public Dfp multiply(final int x) {
-            return multiplyFast(x);
+        // Special case handling for zero, infinity, and NaN
+        if (isNaN()) {
+            return newInstance(field.getZero().dotrap(DfpField.FLAG_INVALID, "multiply", field.getNaN(), this, field.newDfp(x)));
+        }
+        if (x == 0) {
+            // Determine the sign of zero
+            Dfp result = newInstance(getZero());
+            result.sign = (sign == -1 || x < 0 ? -1 : 1);
+            if (isInfinite()) {
+                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+                result = newInstance(field.getNaN());
+            }
+            return result;
+        }
+        if (isInfinite()) {
+            Dfp result = newInstance(this);
+            result.sign = (sign == -1 ^ x < 0) ? -1 : 1;
+            if (x != 0) {
+                return result;
+            }
+            // infinity * 0 = NaN
+            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            return newInstance(field.getNaN());
+        }
+        // Handle overflow and underflow could be inside multiplyFast()
+        Dfp result = multiplyFast(x);
+        // Correct sign for negative multipliers
+        if (x < 0) {
+            result.sign *= -1;
+        }
+        return result;
     }
\ No newline at end of file
