diff --git a/tmp/c36bf290-53b7-48c2-95fb-c37399fd7256_buggy.java b/tmp/795c3183-4c34-4420-855d-5902aabcaf15_fixed.java
index 72a422c..99cd0da 100644
--- a/tmp/c36bf290-53b7-48c2-95fb-c37399fd7256_buggy.java
+++ b/tmp/795c3183-4c34-4420-855d-5902aabcaf15_fixed.java
@@ -1,51 +1,65 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
+        if (start >= seqEnd) { // nothing after '&#'
+            return 0;
+        }
         boolean isHex = false;
 
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
-
-                // Check there's more than just an x after the &#
+            if (start >= seqEnd) { // nothing after '&#x'
+                return 0;
+            }
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        // Iterate through the characters for the entity value
+        while (end < seqEnd && input.charAt(end) != ';' &&
+               ((isHex && ((input.charAt(end) >= '0' && input.charAt(end) <= '9') || 
+                           (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') || 
+                           (input.charAt(end) >= 'A' && input.charAt(end) <= 'F'))) ||
+                (!isHex && (input.charAt(end) >= '0' && input.charAt(end) <= '9')))) {
             end++;
         }
 
+        if (end == start) { // No digits found
+            return 0;
+        }
+
+        // Now, end points to first non-number/non-hex char (may be ';' or end of string)
+        boolean hasSemiColon = (end < seqEnd && input.charAt(end) == ';');
+
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            String entity = input.subSequence(start, end).toString();
+            entityValue = Integer.parseInt(entity, isHex ? 16 : 10);
         } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            //System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
 
         if (entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        int consumed = 2 + (isHex ? 1 : 0) + (end - start);
+        if (hasSemiColon) {
+            consumed++; // for the ';'
+        }
+        return consumed;
     }
     return 0;
 }
\ No newline at end of file
