diff --git a/tmp/0cf79495-6ba9-4129-9993-bf0aa6ad9b5f_buggy.java b/tmp/8ef513a0-7175-42a2-aaa6-14ef11fbeb54_fixed.java
index 72a422c..59b6541 100644
--- a/tmp/0cf79495-6ba9-4129-9993-bf0aa6ad9b5f_buggy.java
+++ b/tmp/8ef513a0-7175-42a2-aaa6-14ef11fbeb54_fixed.java
@@ -1,51 +1,70 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        // Check that start is still in bounds
+        if (start >= seqEnd) {
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
-
             // Check there's more than just an x after the &#
+            if (start >= seqEnd) {
+                return 0;
+            }
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        // Scan for the end of numbers, either up to ; or until number sequence ends or input runs out
+        while (end < seqEnd && ((isHex && ((input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
+                                            (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
+                                            (input.charAt(end) >= 'A' && input.charAt(end) <= 'F')))
+                                || (!isHex && (input.charAt(end) >= '0' && input.charAt(end) <= '9')))) {
             end++;
         }
 
+        // Check if there are no digits
+        if (end == start) {
+            return 0;
+        }
+
+        // If there is a semicolon, include it
+        boolean semiNext = (end < seqEnd) && (input.charAt(end) == ';');
+        int endValue = end; // exclusive for parse
+
         int entityValue;
         try {
             if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                entityValue = Integer.parseInt(input.subSequence(start, endValue).toString(), 16);
             } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                entityValue = Integer.parseInt(input.subSequence(start, endValue).toString(), 10);
             }
         } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            //System.err.println("FAIL: " + input.subSequence(start, endValue) + "[" + start + "][" + endValue + "]");
             return 0;
         }
 
         if (entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // Calculate how many characters were consumed:
+        // 1 for &, 1 for #, [1 for x|X if present], N for digits, [1 for ; if present]
+        return 2 + (isHex ? 1 : 0) + (end - start) + (semiNext ? 1 : 0);
     }
     return 0;
 }
\ No newline at end of file
