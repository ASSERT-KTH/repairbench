diff --git a/tmp/3c3806ef-65b1-4d31-a0c8-2db4296386bd_buggy.java b/tmp/ddf1b477-9a4c-4d72-aa89-ffa8da70625c_fixed.java
index 72a422c..f9f23d3 100644
--- a/tmp/3c3806ef-65b1-4d31-a0c8-2db4296386bd_buggy.java
+++ b/tmp/ddf1b477-9a4c-4d72-aa89-ffa8da70625c_fixed.java
@@ -1,51 +1,82 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
+    // Uses -1 because at least "&#" must remain
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        // Sanity check: must be something after "&#"
+        if (start >= seqEnd) {
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
-
-                // Check there's more than just an x after the &#
+            // Must be something after "&#x"
+            if (start >= seqEnd) {
+                return 0;
+            }
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+
+        // Ensure that at least one digit follows
+        if (end >= seqEnd) {
+            return 0;
+        }
+
+        // scan the number part, until non-digit (or for hex: non-hex-digit) or ';' or end of input
+        while (end < seqEnd) {
+            char c = input.charAt(end);
+            if (c == ';') {
+                break;
+            }
+            if (isHex) {
+                if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))) {
+                    break;
+                }
+            } else {
+                if (!(c >= '0' && c <= '9')) {
+                    break;
+                }
+            }
             end++;
         }
 
+        // If there are no digits at all, it's not a valid entity
+        if (end == start) {
+            return 0;
+        }
+
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            entityValue = Integer.parseInt(input.subSequence(start, end).toString(), isHex ? 16 : 10);
         } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            // Failed to parse number
+            //System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
 
         if (entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // If ';' is present, skip it too
+        if (end < seqEnd && input.charAt(end) == ';') {
+            return end - index + 1;
+        } else {
+            return end - index;
+        }
     }
     return 0;
 }
\ No newline at end of file
