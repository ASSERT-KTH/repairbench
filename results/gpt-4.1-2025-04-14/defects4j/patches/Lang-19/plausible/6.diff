diff --git a/tmp/527fec1e-620f-42b0-b116-d805097a8cdd_buggy.java b/tmp/b40e96bc-5487-4502-8569-f6453637aeb4_fixed.java
index 72a422c..14f3a14 100644
--- a/tmp/527fec1e-620f-42b0-b116-d805097a8cdd_buggy.java
+++ b/tmp/b40e96bc-5487-4502-8569-f6453637aeb4_fixed.java
@@ -1,51 +1,74 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
+        if (start >= seqEnd) {
+            // nothing after '&#'
+            return 0;
+        }
         boolean isHex = false;
 
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
-
-                // Check there's more than just an x after the &#
+            if (start >= seqEnd) {
+                // nothing after '&#x'
+                return 0;
+            }
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+
+        // Now parse the digits
+        while (end < seqEnd && ((isHex && ((input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
+                                           (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
+                                           (input.charAt(end) >= 'A' && input.charAt(end) <= 'F')))
+                               || (!isHex && (input.charAt(end) >= '0' && input.charAt(end) <= '9')))) {
             end++;
         }
 
+        if (end == start) {
+            // no valid digits after '&#' or '&#x'
+            return 0;
+        }
+
+        boolean semicolon = false;
+        if (end < seqEnd && input.charAt(end) == ';') {
+            semicolon = true;
+        }
+
         int entityValue;
         try {
+            String number = input.subSequence(start, end).toString();
             if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                entityValue = Integer.parseInt(number, 16);
             } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                entityValue = Integer.parseInt(number, 10);
             }
         } catch (NumberFormatException nfe) {
             System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "][" + end + "]");
             return 0;
         }
 
         if (entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        int consumed = end - index;
+        if (semicolon) {
+            consumed++; // consume ;
+        }
+        return consumed;
     }
     return 0;
 }
\ No newline at end of file
