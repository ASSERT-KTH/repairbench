diff --git a/tmp/5540e886-89c5-48db-b92f-75d603a6ec96_buggy.java b/tmp/150e3f28-304f-4990-8278-e6004611076c_fixed.java
index 72a422c..41e40a5 100644
--- a/tmp/5540e886-89c5-48db-b92f-75d603a6ec96_buggy.java
+++ b/tmp/150e3f28-304f-4990-8278-e6004611076c_fixed.java
@@ -1,51 +1,64 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= seqEnd) { // No chars after '&#'
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
-
-                // Check there's more than just an x after the &#
+            if (start >= seqEnd) { // '&#x' or '&#X' at end of input
+                return 0;
+            }
         }
 
         int end = start;
         // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        while (end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
 
+        boolean foundSemi = (end < seqEnd && input.charAt(end) == ';');
+        int entityEnd = foundSemi ? end : end;
+
+        // if no numeric characters, ignore
+        if (start == end) {
+            return 0;
+        }
+
         int entityValue;
         try {
+            String entityStr = input.subSequence(start, end).toString();
             if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                entityValue = Integer.parseInt(entityStr, 16);
             } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                entityValue = Integer.parseInt(entityStr, 10);
             }
         } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            //System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
 
         if(entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        int consumed = 2 + (end - start) + (isHex ? 1 : 0);
+        if (foundSemi) {
+            consumed += 1; // for ';'
+        }
+        return consumed;
     }
     return 0;
 }
\ No newline at end of file
