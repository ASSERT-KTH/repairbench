diff --git a/tmp/0c91f80b-128f-4744-ae9e-1705d9b3a45f_buggy.java b/tmp/6d45a74c-51d7-4ce1-ab48-b1f8a8182b61_fixed.java
index 72a422c..4ddcf19 100644
--- a/tmp/0c91f80b-128f-4744-ae9e-1705d9b3a45f_buggy.java
+++ b/tmp/6d45a74c-51d7-4ce1-ab48-b1f8a8182b61_fixed.java
@@ -1,51 +1,63 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
+        if (start >= seqEnd) { // nothing after "&#"
+            return 0;
+        }
+
         boolean isHex = false;
 
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
-
-                // Check there's more than just an x after the &#
+            if (start >= seqEnd) { // only "&#x" or "&#X" at the end
+                return 0;
+            }
         }
 
         int end = start;
         // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        while (end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
+        // If we stopped at the end of input and did not find ';', that's OK
+
+        // Don't try to parse if there was nothing between start and end (no digits)
+        if (start == end) {
+            return 0;
+        }
 
         int entityValue;
         try {
             if(isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            //System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
 
         if(entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // Calculate consumed length:
+        // 2 for "&#", (end - start) for the digits, (isHex ? 1 for 'x'), (end<seqEnd && input.charAt(end)==';' ? 1 for ';')
+        int consumed = end - index;
+        if (end < seqEnd && input.charAt(end) == ';') {
+            consumed++; // include the ';'
+        }
+        return consumed;
     }
     return 0;
 }
\ No newline at end of file
