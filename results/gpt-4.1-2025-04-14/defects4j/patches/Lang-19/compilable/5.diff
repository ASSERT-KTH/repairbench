diff --git a/tmp/9c251b53-a0bb-4533-92a3-bbf897f24bda_buggy.java b/tmp/77c6548e-4967-4874-a337-94f231d02efe_fixed.java
index 72a422c..fe76005 100644
--- a/tmp/9c251b53-a0bb-4533-92a3-bbf897f24bda_buggy.java
+++ b/tmp/77c6548e-4967-4874-a337-94f231d02efe_fixed.java
@@ -1,51 +1,65 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= seqEnd) { // Prevent out of bounds access for just '&#' at end
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
+        }
 
-                // Check there's more than just an x after the &#
+        if (start >= seqEnd) { // Prevent out of bounds, i.e. input ends after '&#x'
+            return 0;
         }
 
         int end = start;
         // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        while (end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
 
+        // If we didn't find a semicolon, end will be seqEnd (out of bounds for charAt, so never actually read)
+        // Also, we want to ensure we have at least one digit
+        if (start == end) {
+            // No digits after "&#" or "&#x"
+            return 0;
+        }
+
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            String entityStr = input.subSequence(start, end).toString();
+            entityValue = Integer.parseInt(entityStr, isHex ? 16 : 10);
         } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            // Fallback for badly formatted number
             return 0;
         }
 
         if (entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // Calculate how many characters we consumed:
+        // 2 for "&#", plus (end - (index+2)): number of digits (or digits + x), plus 1 if semicolon, plus 1 if isHex ("x")
+        int consumed = end - index;
+        if (end < seqEnd && input.charAt(end) == ';') {
+            consumed++; // include semicolon
+        }
+        return consumed;
     }
     return 0;
 }
\ No newline at end of file
