diff --git a/tmp/abba5f7b-70cb-446e-881b-b7769b49df77_buggy.java b/tmp/4bc22e9d-03a9-4572-945c-c63c63d4acc2_fixed.java
index e8705ac..35391c6 100644
--- a/tmp/abba5f7b-70cb-446e-881b-b7769b49df77_buggy.java
+++ b/tmp/4bc22e9d-03a9-4572-945c-c63c63d4acc2_fixed.java
@@ -1,24 +1,28 @@
 /**
  * There are two types of calls we are interested in calls without explicit
  * "this" values (what we are call "free" calls) and direct call to eval.
  */
 private void annotateCalls(Node n) {
   Preconditions.checkState(n.isCall());
 
   // Keep track of of the "this" context of a call.  A call without an
   // explicit "this" is a free call.
   Node first = n.getFirstChild();
 
   // ignore cast nodes.
+  Node callee = first;
+  if (NodeUtil.isCast(callee)) {
+    callee = callee.getFirstChild();
+  }
 
-      if (!NodeUtil.isGet(first)) {
+  if (!NodeUtil.isGet(callee)) {
     n.putBooleanProp(Node.FREE_CALL, true);
   }
 
   // Keep track of the context in which eval is called. It is important
   // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+  if (callee.isName() &&
+      "eval".equals(callee.getString())) {
+    callee.putBooleanProp(Node.DIRECT_EVAL, true);
   }
 }
\ No newline at end of file
