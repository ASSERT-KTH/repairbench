diff --git a/tmp/eb81e0ad-e7f6-45d8-a071-5d6cb1578923_buggy.java b/tmp/0a61f8aa-496f-4153-ab0b-b6c07349cd80_fixed.java
index e8705ac..9ab441c 100644
--- a/tmp/eb81e0ad-e7f6-45d8-a071-5d6cb1578923_buggy.java
+++ b/tmp/0a61f8aa-496f-4153-ab0b-b6c07349cd80_fixed.java
@@ -1,24 +1,28 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
       // Keep track of of the "this" context of a call.  A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
 
       // ignore cast nodes.
+      Node callTarget = first;
+      while (callTarget.isCast()) {
+        callTarget = callTarget.getFirstChild();
+      }
 
-      if (!NodeUtil.isGet(first)) {
+      if (!NodeUtil.isGet(callTarget)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+      if (callTarget.isName() &&
+          "eval".equals(callTarget.getString())) {
+        callTarget.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
