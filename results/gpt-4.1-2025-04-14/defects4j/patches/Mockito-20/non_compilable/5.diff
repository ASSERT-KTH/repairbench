diff --git a/tmp/ad669ec6-dc28-4586-bbc7-bcf665cfb797_buggy.java b/tmp/0b641c0a-35ea-4ade-852b-a6465b7fa56d_fixed.java
index f9a9b5b..6313e1c 100644
--- a/tmp/ad669ec6-dc28-4586-bbc7-bcf665cfb797_buggy.java
+++ b/tmp/0b641c0a-35ea-4ade-852b-a6465b7fa56d_fixed.java
@@ -1,30 +1,56 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        if (settings.isUsingConstructor()) {
+            // Try to instantiate with constructor arguments as required
+            try {
+                mockInstance = classInstantiator.instantiate(
+                        mockedProxyType,
+                        settings.getOuterClassInstance(),
+                        settings.getConstructorArgs()
+                );
+            } catch (org.mockito.internal.creation.instance.InstantiationException e) {
+                // Enhance meaningfulness for missing default constructor or wrong outer instance
+                StringBuilder additionalInfo = new StringBuilder();
+                additionalInfo.append("Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.");
+                Throwable cause = e.getCause();
+                if (cause != null) {
+                    additionalInfo.append("\nCaused by: ").append(cause.getMessage());
+                }
+                MockitoException ex = new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+                ex.addSuppressed(new Throwable(additionalInfo.toString()));
+                throw ex;
+            }
+        } else {
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        String message = e.getMessage();
+        if (message == null || message.trim().isEmpty()) {
+            message = "Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'";
+        }
+        throw new MockitoException(message, e);
     }
 }
\ No newline at end of file
