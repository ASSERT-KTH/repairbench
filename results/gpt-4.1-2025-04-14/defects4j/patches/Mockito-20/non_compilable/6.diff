diff --git a/tmp/13401d0f-43ac-4135-b40a-16960530726b_buggy.java b/tmp/7706f9c6-b770-431b-b05b-2f0c183d078f_fixed.java
index f9a9b5b..7f1e2e4 100644
--- a/tmp/13401d0f-43ac-4135-b40a-16960530726b_buggy.java
+++ b/tmp/7706f9c6-b770-431b-b05b-2f0c183d078f_fixed.java
@@ -1,30 +1,51 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        // support useConstructor() settings for spy or mock with constructor
+        if (settings.isUsingConstructor()) {
+            // For inner classes, pass the 'outerInstance' if needed
+            mockInstance = classInstantiator.instantiate(
+                    mockedProxyType,
+                    settings.getOuterClassInstance(),
+                    settings.getConstructorArgs()
+            );
+        } else {
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        // Try to provide a more meaningful error message
+        StringBuilder msg = new StringBuilder();
+        msg.append("Unable to create mock instance of type '")
+           .append(mockedProxyType.getSuperclass() != null ? mockedProxyType.getSuperclass().getSimpleName() : mockedProxyType.getSimpleName())
+           .append("'");
+        Throwable cause = e.getCause();
+        if (cause != null && cause.getMessage() != null) {
+            msg.append("\n").append(cause.getMessage());
+        } else if (settings.isUsingConstructor()) {
+            msg.append("\nPlease ensure that the outer instance has correct type and that the target class has 0-arg constructor.");
+        }
+        throw new MockitoException(msg.toString(), e);
     }
 }
\ No newline at end of file
