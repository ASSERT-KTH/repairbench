diff --git a/tmp/3d0dbd70-c6f4-4aca-9c3c-914965cd8619_buggy.java b/tmp/bd0d5303-bd59-432b-9985-dbceeebda2e7_fixed.java
index f9a9b5b..7af4eb3 100644
--- a/tmp/3d0dbd70-c6f4-4aca-9c3c-914965cd8619_buggy.java
+++ b/tmp/bd0d5303-bd59-432b-9985-dbceeebda2e7_fixed.java
@@ -1,30 +1,57 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        // Use the instantiator, but if useConstructor is requested, pass the arguments if present.
+        if (settings.isUsingConstructor()) {
+            Object outerClassInstance = settings.getOuterClassInstance();
+            Object[] constructorArgs = settings.getConstructorArgs();
+            if (outerClassInstance != null && constructorArgs != null) {
+                // Handle inner class with explicit outer instance and constructor args
+                Object[] argsWithOuter = new Object[constructorArgs.length + 1];
+                argsWithOuter[0] = outerClassInstance;
+                System.arraycopy(constructorArgs, 0, argsWithOuter, 1, constructorArgs.length);
+                mockInstance = classInstantiator.instantiate(mockedProxyType, argsWithOuter);
+            } else if (outerClassInstance != null) {
+                // Handle inner class with outer instance and no additional args
+                mockInstance = classInstantiator.instantiate(mockedProxyType, outerClassInstance);
+            } else if (constructorArgs != null) {
+                // Handle explicit constructor args
+                mockInstance = classInstantiator.instantiate(mockedProxyType, constructorArgs);
+            } else {
+                // Try zero-arg constructor
                 mockInstance = classInstantiator.instantiate(mockedProxyType);
+            }
+        } else {
+            // Default: no constructor injection
+            mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ),cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        String message = "Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'";
+        if (e.getCause() != null && e.getCause().getMessage() != null) {
+            message += "\nCaused by: " + e.getCause().getMessage();
+        }
+        throw new MockitoException(message, e.getCause());
     }
 }
\ No newline at end of file
