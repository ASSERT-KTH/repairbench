diff --git a/tmp/e063277e-c7c5-4502-9bba-78a7cd337f51_buggy.java b/tmp/9a9c5764-ea4a-4738-a090-ad8e30eb3a3f_fixed.java
index f9a9b5b..d41df1a 100644
--- a/tmp/e063277e-c7c5-4502-9bba-78a7cd337f51_buggy.java
+++ b/tmp/9a9c5764-ea4a-4738-a090-ad8e30eb3a3f_fixed.java
@@ -1,30 +1,68 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
+
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        // SUPPORT CONSTRUCTOR MOCKING:
+        // - If useConstructor() is enabled, call instantiator.instantiate with constructorArgs and outerInstance (if set), otherwise default.
+        Object[] constructorArgs = null;
+        Object outerInstance = null;
+        boolean withConstructor = settings.isUsingConstructor();
+        if (withConstructor) {
+            constructorArgs = settings.getConstructorArgs();
+            outerInstance = settings.getOuterClassInstance();
+            if (constructorArgs != null && constructorArgs.length == 0) {
+                constructorArgs = null; // for convenience, treat empty arrays as null
+            }
+        }
+
+        if (withConstructor) {
+            // There are 3 cases:
+            // 1. outer instance (for inner classes) (required for non-static inner) is present
+            // 2. just constructor args (for top-level, static, or anonymous classes)
+            // 3. neither (use the zero-arg constructor)
+            if (outerInstance != null) {
+                // Inner class with outer instance
+                mockInstance = classInstantiator.instantiate(mockedProxyType, outerInstance, constructorArgs);
+            } else if (constructorArgs != null) {
+                mockInstance = classInstantiator.instantiate(mockedProxyType, constructorArgs);
+            } else {
                 mockInstance = classInstantiator.instantiate(mockedProxyType);
+            }
+        } else {
+            // no constructor mocking requested
+            mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
+
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ),cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        // Try to give better info if possible.
+        String mockedTypeName;
+        try {
+            mockedTypeName = mockedProxyType.getSuperclass().getSimpleName();
+        } catch (Throwable t) {
+            mockedTypeName = String.valueOf(mockedProxyType);
+        }
+        throw new MockitoException("Unable to create mock instance of type '" + mockedTypeName + "'", e);
     }
 }
\ No newline at end of file
