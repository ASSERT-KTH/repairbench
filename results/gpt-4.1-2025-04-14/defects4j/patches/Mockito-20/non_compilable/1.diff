diff --git a/tmp/23336358-9fad-4143-9686-f1e7684face6_buggy.java b/tmp/9089c9d3-8a34-4e0b-a22a-901bb8514e15_fixed.java
index f9a9b5b..009d241 100644
--- a/tmp/23336358-9fad-4143-9686-f1e7684face6_buggy.java
+++ b/tmp/9089c9d3-8a34-4e0b-a22a-901bb8514e15_fixed.java
@@ -1,30 +1,70 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
+
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        if (settings.isUseConstructor()) {
+            // Use constructor (possibly with outer instance)
+            Object outerClassInstance = settings.getOuterClassInstance();
+            Object[] constructorArgs = settings.getConstructorArgs();
+            try {
+                if (outerClassInstance != null) {
+                    mockInstance = classInstantiator.instantiate(mockedProxyType, outerClassInstance, constructorArgs);
+                } else {
+                    mockInstance = classInstantiator.instantiate(mockedProxyType, constructorArgs);
+                }
+            } catch (org.mockito.internal.creation.instance.InstantiationException e) {
+                Throwable cause = e.getCause();
+                StringBuilder additional = new StringBuilder();
+                if (mockedProxyType.getEnclosingClass() != null && !java.lang.reflect.Modifier.isStatic(mockedProxyType.getModifiers())) {
+                    additional.append("Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.");
+                } else {
+                    additional.append("Please ensure the target class has 0-arg constructor.");
+                }
+
+                String msg = "Unable to create mock instance of type '"
+                        + mockedProxyType.getSuperclass().getSimpleName() + "'";
+                MockitoException me = new MockitoException(msg, e);
+                if (cause != null && cause.getMessage() != null) {
+                    // inject context into the original cause message
+                    me.initCause(new Exception(cause.getMessage() + ". " + additional));
+                } else {
+                    me.initCause(new Exception(additional.toString()));
+                }
+                throw me;
+            }
+        } else {
+            // No-arg new instance
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ),cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        Throwable cause = e.getCause();
+        String msg = "Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'";
+        if (cause != null && cause.getMessage() != null) {
+            throw new MockitoException(msg, cause);
+        } else {
+            throw new MockitoException(msg, e);
+        }
     }
 }
\ No newline at end of file
