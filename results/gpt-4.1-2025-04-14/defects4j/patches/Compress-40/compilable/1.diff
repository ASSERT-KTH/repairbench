diff --git a/tmp/2e3615f6-2f1f-4b57-a3f2-baeb04b14197_buggy.java b/tmp/d57dc688-1221-480f-a954-cc0244211c9e_fixed.java
index 7116384..803479a 100644
--- a/tmp/2e3615f6-2f1f-4b57-a3f2-baeb04b14197_buggy.java
+++ b/tmp/d57dc688-1221-480f-a954-cc0244211c9e_fixed.java
@@ -1,39 +1,54 @@
 /**
  * Returns at most 63 bits read from the underlying stream.
  *
  * @param count the number of bits to read, must be a positive
  * number not bigger than 63.
  * @return the bits concatenated as a long using the stream's byte order.
  *         -1 if the end of the underlying stream has been reached before reading
  *         the requested number of bits
  * @throws IOException on error
  */
 public long readBits(final int count) throws IOException {
     if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
         throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
     }
+    // Special case: If count == 0, return 0 (or if not allowed, throw)
+    if (count == 0) {
+        return 0;
+    }
     while (bitsCachedSize < count) {
         final long nextByte = in.read();
         if (nextByte < 0) {
-                return nextByte;
+            return -1;
         }
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+            // avoid overflow: only cache up to 63 bits
+            if (bitsCachedSize >= 56) { // 56+8=64
+                break;
+            }
             bitsCached |= (nextByte << bitsCachedSize);
         } else {
             bitsCached <<= 8;
             bitsCached |= nextByte;
         }
         bitsCachedSize += 8;
     }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
+
+    // Now: bitsCached may not have count bits if EOF above and bitsCachedSize < count
+
+    if (bitsCachedSize < count) {
+        // Not enough bits
+        return -1;
+    }
 
     final long bitsOut;
     if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
         bitsOut = (bitsCached & MASKS[count]);
         bitsCached >>>= count;
     } else {
         bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+        bitsCached &= MASKS[bitsCachedSize - count];
     }
     bitsCachedSize -= count;
     return bitsOut;
 }
\ No newline at end of file
