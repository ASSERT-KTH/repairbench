diff --git a/tmp/b1ce9da4-90e0-4b6d-b950-31851d92d56b_buggy.java b/tmp/57b14326-4b56-4446-a0e8-0df51e7808b7_fixed.java
index 4aff4e4..8351293 100644
--- a/tmp/b1ce9da4-90e0-4b6d-b950-31851d92d56b_buggy.java
+++ b/tmp/57b14326-4b56-4446-a0e8-0df51e7808b7_fixed.java
@@ -1,15 +1,25 @@
 private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
+    String value = el.attr(attr.getKey());
+    if (!preserveRelativeLinks) {
         // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
+        String abs = el.absUrl(attr.getKey());
+        if (!abs.isEmpty()) value = abs;
         attr.setValue(value);
+    }
 
+    // Use original (possibly relative) value for protocol validation, as intended for custom schemes like cid: and data:
+    String checkVal = value.trim().toLowerCase();
+    int colonPos = checkVal.indexOf(':');
+    if (colonPos > 0) {
+        String prot = checkVal.substring(0, colonPos);
         for (Protocol protocol : protocols) {
-            String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
+            if (prot.equals(protocol.toString().toLowerCase())) {
                 return true;
             }
         }
         return false;
+    } else {
+        // No protocol - e.g. /path, //host/path
+        return protocols.contains(Protocol.RELATIVE);
+    }
 }
\ No newline at end of file
