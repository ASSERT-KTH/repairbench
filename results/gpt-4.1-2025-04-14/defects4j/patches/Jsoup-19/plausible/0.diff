diff --git a/tmp/528d0cc7-1db3-46e3-855f-b9159d2d0f08_buggy.java b/tmp/846743a5-d77f-468c-a0da-d1931fa373e1_fixed.java
index 4aff4e4..53fd006 100644
--- a/tmp/528d0cc7-1db3-46e3-855f-b9159d2d0f08_buggy.java
+++ b/tmp/846743a5-d77f-468c-a0da-d1931fa373e1_fixed.java
@@ -1,15 +1,36 @@
 private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
     // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
     // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
+    String attrValue = attr.getValue();
+    String absValue = el.absUrl(attr.getKey());
 
+    String value;
+    if (attrValue == null)
+        value = "";
+    else
+        value = attrValue.trim();
+
+    boolean isRelative = (absValue != null && !absValue.isEmpty() && !attrValue.equals(absValue));
+
+    // If preserveRelativeLinks is false and absValue is a proper absolute URL, update the attribute
+    if (!preserveRelativeLinks && isRelative)
+        attr.setValue(absValue);
+
+    // The protocol match must be against the ORIGINAL VALUE (e.g. "data:", "cid:")!
     for (Protocol protocol : protocols) {
-            String prot = protocol.toString() + ":";
+        String prot = protocol.toString().toLowerCase() + ":";
         if (value.toLowerCase().startsWith(prot)) {
             return true;
         }
     }
+    // If none matched and value is a valid absolute url, try to match its protocol too
+    if (!value.isEmpty() && isRelative) {
+        for (Protocol protocol : protocols) {
+            String prot = protocol.toString().toLowerCase() + ":";
+            if (absValue.toLowerCase().startsWith(prot)) {
+                return true;
+            }
+        }
+    }
     return false;
 }
\ No newline at end of file
