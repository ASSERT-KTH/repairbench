diff --git a/tmp/ffb1e224-33a7-4b31-8b46-a5834e259b47_buggy.java b/tmp/6e82020f-87bc-4ae0-a8cb-72dfb3660ab7_fixed.java
index 4aff4e4..a839fe6 100644
--- a/tmp/ffb1e224-33a7-4b31-8b46-a5834e259b47_buggy.java
+++ b/tmp/6e82020f-87bc-4ae0-a8cb-72dfb3660ab7_fixed.java
@@ -1,15 +1,27 @@
 private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
     // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
     // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
+    String value = attr.getValue(); // FIX: use the literal attr value for protocol check, not absUrl (which strips unknown protocols)
+    if (!preserveRelativeLinks) {
+        // Only update to abs url if it's http, https, or similar. 
+        // But for protocol validation, we check the actual input value.
+        String abs = el.absUrl(attr.getKey());
+        if (!abs.isEmpty()) { // only overwrite if it's a normal relative/abs
+            attr.setValue(abs);
+            value = abs; // for later protocol matching, if we're forcing abs
+        }
+    }
 
+    String check = value.trim().toLowerCase();
     for (Protocol protocol : protocols) {
-            String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
+        String prot = protocol.toString().toLowerCase() + ":";
+        if (check.startsWith(prot)) {
             return true;
         }
     }
+    // Allow protocol-less relative URLs, unless protocols are specified
+    if (protocols.isEmpty() && !check.contains(":")) {
+        return true;
+    }
     return false;
 }
\ No newline at end of file
