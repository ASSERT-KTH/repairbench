diff --git a/tmp/0383b545-3a7b-4ce5-8937-a8d2d72beed4_buggy.java b/tmp/3581ba76-bdb4-4808-ad1a-2c6c22cbb10b_fixed.java
index 08a41cf..97ac61e 100644
--- a/tmp/0383b545-3a7b-4ce5-8937-a8d2d72beed4_buggy.java
+++ b/tmp/3581ba76-bdb4-4808-ad1a-2c6c22cbb10b_fixed.java
@@ -1,12 +1,25 @@
 /**
  * Overloaded version of {@link #readValue(InputStream)}.
  */
 public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)
     throws IOException, JsonProcessingException
 {
     if (_dataFormatReaders != null) {
-            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);
+        // Must slice 'src' for correct offset/length handling on parser
+        byte[] newSrc = src;
+        if (offset != 0 || length != src.length) {
+            newSrc = new byte[length];
+            System.arraycopy(src, offset, newSrc, 0, length);
+            offset = 0;
         }
-        return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src),
-                true));
+        return _detectBindAndReadValues(_dataFormatReaders.findFormat(newSrc, offset, length), false);
+    }
+    // For parser, must also use a slice if offset/length != full array
+    JsonParser p;
+    if (offset == 0 && length == src.length) {
+        p = _parserFactory.createParser(src);
+    } else {
+        p = _parserFactory.createParser(src, offset, length);
+    }
+    return _bindAndReadValues(_considerFilter(p, true));
 }
\ No newline at end of file
