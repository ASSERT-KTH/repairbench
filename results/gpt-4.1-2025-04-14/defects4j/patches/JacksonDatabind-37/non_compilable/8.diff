diff --git a/tmp/115cd6a1-cdb2-457e-a30d-9d68ce7d8b0e_buggy.java b/tmp/a616cfff-a430-4d6f-abd7-929a286e450b_fixed.java
index e5ad041..8d2a5d1 100644
--- a/tmp/115cd6a1-cdb2-457e-a30d-9d68ce7d8b0e_buggy.java
+++ b/tmp/a616cfff-a430-4d6f-abd7-929a286e450b_fixed.java
@@ -1,19 +1,23 @@
 @Override
 protected JavaType _narrow(Class<?> subclass)
 {
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
-        if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
+    // When narrowing, we must properly resolve super-type and interfaces of the new subclass.
+    // Build new superClass and superInterfaces reflecting the actual class hierarchy of subclass.
+    JavaType superClass = null;
+    JavaType[] superInterfaces = null;
+    if (subclass.getSuperclass() != null) {
+        superClass = _bindings.resolveType(subclass.getGenericSuperclass());
     }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+    Class<?>[] interfaces = subclass.getInterfaces();
+    if (interfaces.length > 0) {
+        superInterfaces = new JavaType[interfaces.length];
+        for (int i = 0; i < interfaces.length; ++i) {
+            superInterfaces[i] = _bindings.resolveType(subclass.getGenericInterfaces()[i]);
+        }
+    }
+    return new SimpleType(subclass, _bindings, superClass, superInterfaces,
             _valueHandler, _typeHandler, _asStatic);
 }
\ No newline at end of file
