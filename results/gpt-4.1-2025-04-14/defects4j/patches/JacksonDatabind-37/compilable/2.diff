diff --git a/tmp/19ca0342-b3cc-4dac-a7e7-1cc64383e2e9_buggy.java b/tmp/db78417f-353d-4bd6-b7a9-887c4d5a5517_fixed.java
index e5ad041..87640b3 100644
--- a/tmp/19ca0342-b3cc-4dac-a7e7-1cc64383e2e9_buggy.java
+++ b/tmp/db78417f-353d-4bd6-b7a9-887c4d5a5517_fixed.java
@@ -1,19 +1,38 @@
 @Override
 protected JavaType _narrow(Class<?> subclass)
 {
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
-        if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-        }
-        */
     // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+    // But must update _superClass (and interfaces) references so that
+    // they correctly refer to subclass info instead of original _class.
+    // Fix: we should try to recalculate _superClass and _superInterfaces for subclass
+
+    // Re-resolve supertypes for the subclass:
+    // Only possible if bindings are passed along
+    return new SimpleType(subclass,
+            _bindings,
+            // Resolve super class and interfaces for subclass
+            _buildSuperClass(subclass),
+            _buildSuperInterfaces(subclass),
             _valueHandler, _typeHandler, _asStatic);
 }
+
+// Helper methods for recalculating superClass/superInterfaces
+protected JavaType _buildSuperClass(Class<?> subclass) {
+    Class<?> superClass = subclass.getSuperclass();
+    return (superClass == null) ? null : new SimpleType(superClass, _bindings, null, null, _valueHandler, _typeHandler, _asStatic);
+}
+
+protected JavaType[] _buildSuperInterfaces(Class<?> subclass) {
+    Class<?>[] interfaces = subclass.getInterfaces();
+    if (interfaces == null || interfaces.length == 0) {
+        return null;
+    }
+    JavaType[] result = new JavaType[interfaces.length];
+    for (int i = 0; i < interfaces.length; ++i) {
+        result[i] = new SimpleType(interfaces[i], _bindings, null, null, _valueHandler, _typeHandler, _asStatic);
+    }
+    return result;
+}
\ No newline at end of file
