diff --git a/tmp/5dd11e6b-8a0c-4519-90e7-4dfccc146084_buggy.java b/tmp/e6702e91-4bf8-4954-9c3d-2fbd0bdb1ffe_fixed.java
index e1fc51f..e427c0d 100644
--- a/tmp/5dd11e6b-8a0c-4519-90e7-4dfccc146084_buggy.java
+++ b/tmp/e6702e91-4bf8-4954-9c3d-2fbd0bdb1ffe_fixed.java
@@ -1,9 +1,33 @@
 public boolean hasSameMethod(Invocation candidate) {        
-        //not using method.equals() for 1 good reason:
-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
+    // Sometimes Java generates forwarding methods when generics are in play,
+    // so equals() may fail even if they are considered the same in practice.
     Method m1 = invocation.getMethod();
     Method m2 = candidate.getMethod();
 
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+    if (m1.equals(m2)) {
+        return true;
+    }
+
+    // compare by name and parameter types (and declaring class compatibility)
+    if (m1.getName().equals(m2.getName())) {
+        Class<?>[] params1 = m1.getParameterTypes();
+        Class<?>[] params2 = m2.getParameterTypes();
+        if (params1.length == params2.length) {
+            boolean sameParams = true;
+            for (int i = 0; i < params1.length; i++) {
+                if (!params1[i].equals(params2[i])) {
+                    sameParams = false;
+                    break;
+                }
+            }
+            if (sameParams) {
+                // check if one method can be seen as overriding the other (declaring classes)
+                if (m1.getDeclaringClass().isAssignableFrom(m2.getDeclaringClass()) ||
+                        m2.getDeclaringClass().isAssignableFrom(m1.getDeclaringClass())) {
+                    return true;
+                }
+            }
+        }
+    }
+    return false;
 }
\ No newline at end of file
