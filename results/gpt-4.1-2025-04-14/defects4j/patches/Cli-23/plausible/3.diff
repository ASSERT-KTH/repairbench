diff --git a/tmp/79fb9aa3-9e2a-47c6-98bc-b692b4339d3d_buggy.java b/tmp/aa501b7e-6eef-4929-ad63-fcaaa506d5e7_fixed.java
index 227a4ef..8cdc6b2 100644
--- a/tmp/79fb9aa3-9e2a-47c6-98bc-b692b4339d3d_buggy.java
+++ b/tmp/aa501b7e-6eef-4929-ad63-fcaaa506d5e7_fixed.java
@@ -1,48 +1,74 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         int lastPos = pos;
-            text = padding + text.substring(pos).trim();
+        // Strip leading whitespace after wrap, then pad
+        text = text.substring(lastPos).trim();
+        if (text.length() == 0)
+        {
+            break;
+        }
+        text = padding + text;
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
-            } else
-            if (pos == lastPos)
+        } 
+        // Fix for CLI-162: check for no forward progress after padding, skip to next possible wrap
+        if (pos <= padding.length())
         {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+            // If the first non-padding character is too long for the line, forcibly break
+            // just after the padding
+            pos = Math.max(pos, width);
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+
+        // Avoid infinite loop: if we've made no progress, break the line at max width forcibly
+        if (lastPos == pos)
+        {
+            // Instead of throw, forcibly move forward after padding
+            sb.append(rtrim(text.substring(0, width))).append(defaultNewLine);
+            text = text.substring(width);
+            if (text.length() == 0) {
+                break;
             }
+            text = padding + text.trim();
+            pos = findWrapPos(text, width, 0);
+            if (pos == -1) {
+                sb.append(text);
+                return sb;
+            }
+        }
+    }
+    return sb;
 }
\ No newline at end of file
