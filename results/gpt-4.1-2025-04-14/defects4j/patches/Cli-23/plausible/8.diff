diff --git a/tmp/646f5052-0bd1-4780-93ed-54d2adabeb27_buggy.java b/tmp/2941b68d-c1b4-4266-8078-74ce1ee3685a_fixed.java
index 227a4ef..a075279 100644
--- a/tmp/646f5052-0bd1-4780-93ed-54d2adabeb27_buggy.java
+++ b/tmp/2941b68d-c1b4-4266-8078-74ce1ee3685a_fixed.java
@@ -1,48 +1,67 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         int lastPos = pos;
-            text = padding + text.substring(pos).trim();
+        // Bugfix: Do not keep prepending padding + trim(), just append padding to original text after advancing pos
+        text = text.substring(lastPos);
+
+        // Remove leading spaces; don't trim trailing to preserve inner structure of text
+        while (text.length() > 0 && Character.isWhitespace(text.charAt(0))) {
+            text = text.substring(1);
+        }
+
+        // The text could be empty after trimming leading whitespace; if so, stop
+        if (text.length() == 0) {
+            return sb;
+        }
+
+        text = padding + text;
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+        }
+        // Remove infinite loop check. The 'lastPos == pos' situation can occur when the substring taken above starts with a long word.
+        // Instead, we'll forcibly break the line at the width if wrapping is not possible.
+        // Check if pos <= padding.length(), which would mean the next word does not fit on the line, so forcibly break after width chars.
+        if (pos <= padding.length()) {
+            // break after width chars
+            pos = width;
+            if (pos > text.length()) {
+                pos = text.length();
+            }
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
