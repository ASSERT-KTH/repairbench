diff --git a/tmp/ab85212b-50ad-4780-bb8a-44bfe1d8ed69_buggy.java b/tmp/c70a1182-de2b-4bc8-84ee-ca7dae821583_fixed.java
index 227a4ef..730394f 100644
--- a/tmp/ab85212b-50ad-4780-bb8a-44bfe1d8ed69_buggy.java
+++ b/tmp/c70a1182-de2b-4bc8-84ee-ca7dae821583_fixed.java
@@ -1,48 +1,72 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         int lastPos = pos;
-            text = padding + text.substring(pos).trim();
+        // Extract remainder (avoid adding infinite padding)
+        text = text.substring(lastPos).trim();
+        // If no text left, break out
+        if (text.length() == 0) {
+            break;
+        }
+        // Add padding unconditionally
+        text = padding + text;
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
-            } else
-            if (pos == lastPos)
+        }
+        // Protection: if no real progress in breaking lines, break to avoid infinite loop.
+        if (pos <= padding.length())
         {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+            // forcibly break the line at the allowed width after padding
+            int breakPos = Math.min(text.length(), width);
+            sb.append(rtrim(text.substring(0, breakPos))).append(defaultNewLine);
+            // If all consumed, stop; else continue with the remainder
+            if (breakPos >= text.length()) {
+                break;
             }
-
+            text = text.substring(breakPos).trim();
+            if (text.length() == 0) {
+                break;
+            }
+            text = padding + text;
+            pos = findWrapPos(text, width, 0);
+            if (pos == -1) {
+                sb.append(text);
+                return sb;
+            }
+            // else continue
+        } else {
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
+    return sb;
+}
\ No newline at end of file
