diff --git a/tmp/50e78ef9-e076-4945-bc89-77cf3c760144_buggy.java b/tmp/f8e8b48f-a445-45df-b7bf-243f6ab03bf2_fixed.java
index 227a4ef..b59d853 100644
--- a/tmp/50e78ef9-e076-4945-bc89-77cf3c760144_buggy.java
+++ b/tmp/f8e8b48f-a445-45df-b7bf-243f6ab03bf2_fixed.java
@@ -1,48 +1,65 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         int lastPos = pos;
+        // get the remainder of the text to wrap
         text = padding + text.substring(pos).trim();
+        // Defensive check: if the remaining text fits in one line, just append it and return
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+        } else if (pos == lastPos) {
+            // If the wrap position doesn't move forward, forcibly break the line
+            // at the maximum available width to avoid infinite loops.
+            // (Overflow-breaking force)
+            int breakPos = width;
+            if (breakPos > text.length()) {
+                breakPos = text.length();
+            }
+            sb.append(rtrim(text.substring(0, breakPos))).append(defaultNewLine);
+            if (breakPos >= text.length()) {
+                return sb;
+            }
+            text = text.substring(breakPos).trim();
+            if (text.length() == 0) {
+                return sb;
+            }
+            sb.append(padding);
+            sb.append(text); // last chunk
+            return sb;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
