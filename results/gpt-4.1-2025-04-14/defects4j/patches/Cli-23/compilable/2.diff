diff --git a/tmp/8bac7d8c-1973-4974-bce6-1c78e427e507_buggy.java b/tmp/2af58332-0013-44f8-a9db-49ea0474212b_fixed.java
index 227a4ef..169edd2 100644
--- a/tmp/8bac7d8c-1973-4974-bce6-1c78e427e507_buggy.java
+++ b/tmp/2af58332-0013-44f8-a9db-49ea0474212b_fixed.java
@@ -1,48 +1,70 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         int lastPos = pos;
-            text = padding + text.substring(pos).trim();
+        // The actual whitespace is taken from text.charAt(pos), after the substring.
+        boolean addPadding = false;
+
+        if (pos < text.length() && Character.isWhitespace(text.charAt(pos))) {
+            // If the character at the wrap position is whitespace,
+            // then we can safely trim it.
+            text = text.substring(pos).trim();
+            addPadding = true;
+        } else {
+            // Otherwise, just start at the wrap position (might be in the middle of a word).
+            text = text.substring(pos);
+            // If the new text starts with whitespace, trim it and add padding
+            if (text.length() > 0 && Character.isWhitespace(text.charAt(0))) {
+                text = text.trim();
+                addPadding = true;
+            }
+        }
+        if (addPadding) {
+            text = padding + text;
+        }
+
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
         } else
         if (pos == lastPos)
         {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+            // Rather than throwing, append the rest even if it's longer than width
+            sb.append(text);
+            return sb;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
