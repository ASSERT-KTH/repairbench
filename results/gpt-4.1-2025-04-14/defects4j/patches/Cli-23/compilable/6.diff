diff --git a/tmp/68efc4a4-5642-4f91-ab95-e8e4e3ab2a89_buggy.java b/tmp/efe04456-02f7-4561-a79c-7094c67daf36_fixed.java
index 227a4ef..4cd07d8 100644
--- a/tmp/68efc4a4-5642-4f91-ab95-e8e4e3ab2a89_buggy.java
+++ b/tmp/efe04456-02f7-4561-a79c-7094c67daf36_fixed.java
@@ -1,48 +1,65 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         int lastPos = pos;
-            text = padding + text.substring(pos).trim();
+
+        // Trim left side only (to avoid excessive whitespace); don't trim right for preserving line content.
+        String remainder = text.substring(pos);
+        // Remove leading spaces only
+        remainder = remainder.replaceFirst("^\\s+", "");
+        text = padding + remainder;
+        // Find wrap position AFTER the padding, so pass the actual text that appears visually.
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
-            } else
+        }
+        // Fix for infinite loop: If wrapped position does not progress, i.e. the available width < padding+first word,
+        // force one character to be appended to avoid hanging.
         if (pos == lastPos)
         {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+            // If even after adding padding we can't break, force a break to prevent infinite loop
+            if (width <= padding.length() + 1) {
+                // Append the rest as is
+                sb.append(text);
+                return sb;
+            }
+            // Otherwise, forcibly break at the next possible breakpoint, or just append the rest if we're stuck
+            pos++;
+            // But limit pos to text.length() to avoid StringIndexOutOfBoundsException
+            if (pos > text.length()) {
+                pos = text.length();
+            }
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
