diff --git a/tmp/681cff21-717e-4f38-b150-e2d9c2bc1a92_buggy.java b/tmp/a1745691-9411-4e97-8c3d-49cd00769a4e_fixed.java
index 1bd0d7e..bb69e3a 100644
--- a/tmp/681cff21-717e-4f38-b150-e2d9c2bc1a92_buggy.java
+++ b/tmp/a1745691-9411-4e97-8c3d-49cd00769a4e_fixed.java
@@ -1,31 +1,35 @@
 /**
  * Get the ns uri of the specified node.
  * @param node Node to check
  * @return String ns uri
  */
 public static String getNamespaceURI(Node node) {
     if (node instanceof Document) {
         node = ((Document) node).getDocumentElement();
     }
 
+    if (!(node instanceof Element)) {
+        return null;
+    }
+
     Element element = (Element) node;
 
     String uri = element.getNamespaceURI();
     if (uri == null) {
         String prefix = getPrefix(node);
         String qname = prefix == null ? "xmlns" : "xmlns:" + prefix;
 
         Node aNode = node;
-            while (aNode != null) {
-                if (aNode.getNodeType() == Node.ELEMENT_NODE) {
+        while (aNode != null && aNode.getNodeType() == Node.ELEMENT_NODE) {
             Attr attr = ((Element) aNode).getAttributeNode(qname);
             if (attr != null) {
-                        return attr.getValue();
-                    }
+                // Per DOM: xmlns="" (empty string) is valid and means no namespace
+                return "".equals(attr.getValue()) ? null : attr.getValue();
             }
             aNode = aNode.getParentNode();
         }
         return null;
     }
-        return uri;
+    // Per DOM, empty string is not a valid namespace URI, so return null.
+    return "".equals(uri) ? null : uri;
 }
\ No newline at end of file
