diff --git a/tmp/e54eaba7-3fa4-4945-8c68-9460513baa0d_buggy.java b/tmp/16b8b04f-1f34-4d35-9712-f24a60a53512_fixed.java
index e4d90e7..0c18727 100644
--- a/tmp/e54eaba7-3fa4-4945-8c68-9460513baa0d_buggy.java
+++ b/tmp/16b8b04f-1f34-4d35-9712-f24a60a53512_fixed.java
@@ -1,45 +1,52 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
     // Don't pretty print recursively.
     prettyPrint = false;
 
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this;
          current != null && !current.isNativeObjectType() &&
              propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
+    int numProps = propertyNames.size();
+    int max = MAX_PRETTY_PRINTED_PROPERTIES;
+
+    // forAnnotations disables ... truncation; we always show all properties
+    int stopAt = forAnnotations ? numProps : 
+      Math.min(max, numProps);
+
+    int shown = 0;
     for (String property : propertyNames) {
-        if (i > 0) {
+      if (shown > 0) {
         sb.append(", ");
       }
-
       sb.append(property);
       sb.append(": ");
       sb.append(getPropertyType(property).toString());
 
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+      ++shown;
+      if (!forAnnotations && shown == max && numProps > max) {
         sb.append(", ...");
         break;
       }
     }
 
     sb.append("}");
 
     prettyPrint = true;
     return sb.toString();
   } else {
     return "{...}";
   }
 }
\ No newline at end of file
