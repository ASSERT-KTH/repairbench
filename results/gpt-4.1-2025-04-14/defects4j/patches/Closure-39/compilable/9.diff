diff --git a/tmp/dc27565e-d312-4b8a-94ae-beab7f9be563_buggy.java b/tmp/15b2ddfe-fea7-4dbd-8927-c6b5cf25150c_fixed.java
index e4d90e7..2ed6023 100644
--- a/tmp/dc27565e-d312-4b8a-94ae-beab7f9be563_buggy.java
+++ b/tmp/15b2ddfe-fea7-4dbd-8927-c6b5cf25150c_fixed.java
@@ -1,45 +1,54 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
     // Don't pretty print recursively.
     prettyPrint = false;
 
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this;
          current != null && !current.isNativeObjectType() &&
              propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
+    int propertyCount = propertyNames.size();
     for (String property : propertyNames) {
+      if (forAnnotations || propertyCount <= MAX_PRETTY_PRINTED_PROPERTIES) {
+        // In annotation mode, or if not exceeding limit: print all properties
         if (i > 0) {
           sb.append(", ");
         }
-
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
-
+        sb.append(getPropertyType(property).toStringHelper(forAnnotations));
         ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+      } else if (i < MAX_PRETTY_PRINTED_PROPERTIES) {
+        if (i > 0) {
+          sb.append(", ");
+        }
+        sb.append(property);
+        sb.append(": ");
+        sb.append(getPropertyType(property).toStringHelper(forAnnotations));
+        ++i;
+      } else if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
         sb.append(", ...");
         break;
       }
     }
 
     sb.append("}");
 
     prettyPrint = true;
     return sb.toString();
   } else {
     return "{...}";
   }
 }
\ No newline at end of file
