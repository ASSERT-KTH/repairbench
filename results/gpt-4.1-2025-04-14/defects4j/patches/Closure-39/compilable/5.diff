diff --git a/tmp/c0bfb0f5-3ea7-4acd-b058-65a4b7cd0000_buggy.java b/tmp/d32a0eba-2a2a-4d8c-b89d-7698ad5ef56b_fixed.java
index e4d90e7..0828f53 100644
--- a/tmp/c0bfb0f5-3ea7-4acd-b058-65a4b7cd0000_buggy.java
+++ b/tmp/d32a0eba-2a2a-4d8c-b89d-7698ad5ef56b_fixed.java
@@ -1,45 +1,54 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
     // Don't pretty print recursively.
     prettyPrint = false;
 
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+         current != null && !current.isNativeObjectType();
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
+    int numProperties = propertyNames.size();
+
+    // Choose how many properties to print.
+    int toPrint = forAnnotations ? numProperties :
+        Math.min(MAX_PRETTY_PRINTED_PROPERTIES, numProperties);
+
+    int propIdx = 0;
     for (String property : propertyNames) {
-        if (i > 0) {
+      if (propIdx >= toPrint) {
+        break;
+      }
+      if (propIdx > 0) {
         sb.append(", ");
       }
 
       sb.append(property);
       sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+      sb.append(getPropertyType(property).toStringHelper(forAnnotations));
 
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+      ++propIdx;
+    }
+
+    if (!forAnnotations && numProperties > MAX_PRETTY_PRINTED_PROPERTIES) {
       sb.append(", ...");
-          break;
-        }
     }
 
     sb.append("}");
 
     prettyPrint = true;
     return sb.toString();
   } else {
     return "{...}";
   }
 }
\ No newline at end of file
