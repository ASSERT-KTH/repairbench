diff --git a/tmp/bffc6332-b64c-4769-9146-7d31e0a5c4fb_buggy.java b/tmp/24c8d2a8-3e89-4fdb-8a85-134492e5ff98_fixed.java
index e4d90e7..00527cd 100644
--- a/tmp/bffc6332-b64c-4769-9146-7d31e0a5c4fb_buggy.java
+++ b/tmp/24c8d2a8-3e89-4fdb-8a85-134492e5ff98_fixed.java
@@ -1,45 +1,52 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
     // Don't pretty print recursively.
     prettyPrint = false;
 
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+         current != null && !current.isNativeObjectType();
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
+    int count = 0;
+    for (String property : propertyNames) {
+      ++count;
+    }
+
+    int propertiesToShow = forAnnotations ? count : Math.min(count, MAX_PRETTY_PRINTED_PROPERTIES);
+
+    i = 0;
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
 
       sb.append(property);
       sb.append(": ");
       sb.append(getPropertyType(property).toString());
 
       ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+      if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
         sb.append(", ...");
         break;
       }
     }
 
     sb.append("}");
 
     prettyPrint = true;
     return sb.toString();
   } else {
     return "{...}";
   }
 }
\ No newline at end of file
