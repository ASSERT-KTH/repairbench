diff --git a/tmp/ee503fce-896c-479a-aeb1-9e1d0c2d0e1d_buggy.java b/tmp/e2ff694b-58b7-4a09-879d-9d396130a731_fixed.java
index 65c0e7b..34afee9 100644
--- a/tmp/ee503fce-896c-479a-aeb1-9e1d0c2d0e1d_buggy.java
+++ b/tmp/e2ff694b-58b7-4a09-879d-9d396130a731_fixed.java
@@ -1,127 +1,140 @@
 /** {@inheritDoc} */
 protected final double doSolve() {
     // Get initial solution
     double x0 = getMin();
     double x1 = getMax();
     double f0 = computeObjectiveValue(x0);
     double f1 = computeObjectiveValue(x1);
 
-        // If one of the bounds is the exact root, return it. Since these are
-        // not under-approximations or over-approximations, we can return them
-        // regardless of the allowed solutions.
+    // If one of the bounds is the exact root, return it.
     if (f0 == 0.0) {
         return x0;
     }
     if (f1 == 0.0) {
         return x1;
     }
 
     // Verify bracketing of initial solution.
     verifyBracketing(x0, x1);
 
     // Get accuracies.
     final double ftol = getFunctionValueAccuracy();
     final double atol = getAbsoluteAccuracy();
     final double rtol = getRelativeAccuracy();
 
     // Keep track of inverted intervals, meaning that the left bound is
     // larger than the right bound.
     boolean inverted = false;
 
+    // For Regula Falsi: Detect and prevent stagnation: if x == x1, we need a proper interval update
+    int stagnationCount = 0;
+    final int MAX_STAGNATION = 5;
+
     // Keep finding better approximations.
     while (true) {
         // Calculate the next approximation.
-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
+        final double denominator = (f1 - f0);
+        if (denominator == 0.0) {
+            // Prevent division by zero, bailout.
+            return x1;
+        }
+        final double x = x1 - ((f1 * (x1 - x0)) / denominator);
         final double fx = computeObjectiveValue(x);
 
-            // If the new approximation is the exact root, return it. Since
-            // this is not an under-approximation or an over-approximation,
-            // we can return it regardless of the allowed solutions.
+        // If the new approximation is the exact root, return it.
         if (fx == 0.0) {
             return x;
         }
 
         // Update the bounds with the new approximation.
         if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
+            // The value of x1 has switched to the other bound, thus inverting the interval.
             x0 = x1;
             f0 = f1;
             inverted = !inverted;
+            stagnationCount = 0;
         } else {
             switch (method) {
             case ILLINOIS:
                 f0 *= 0.5;
                 break;
             case PEGASUS:
                 f0 *= f1 / (f1 + fx);
                 break;
             case REGULA_FALSI:
-                    // Nothing.
+                // If x == x1, the interval is not shrinking, so move x0 closer to x1
                 if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
+                    stagnationCount++;
+                    if (stagnationCount > MAX_STAGNATION) {
+                        throw new org.apache.commons.math.exception.TooManyEvaluationsException(getMaxEvaluations());
+                    }
+                    // Move x0 a bit towards x1 to force progress
+                    x0 = 0.5 * (x0 + x1);
                     f0 = computeObjectiveValue(x0);
+                } else {
+                    stagnationCount = 0;
                 }
                 break;
             default:
                 // Should never happen.
                 throw new MathInternalError();
             }
         }
+
         // Update from [x0, x1] to [x0, x].
         x1 = x;
         f1 = fx;
 
         // If the function value of the last approximation is too small,
         // given the function value accuracy, then we can't get closer to
         // the root than we already are.
         if (FastMath.abs(f1) <= ftol) {
             switch (allowed) {
             case ANY_SIDE:
                 return x1;
             case LEFT_SIDE:
                 if (inverted) {
                     return x1;
                 }
                 break;
             case RIGHT_SIDE:
                 if (!inverted) {
                     return x1;
                 }
                 break;
             case BELOW_SIDE:
                 if (f1 <= 0) {
                     return x1;
                 }
                 break;
             case ABOVE_SIDE:
                 if (f1 >= 0) {
                     return x1;
                 }
                 break;
             default:
                 throw new MathInternalError();
             }
         }
 
         // If the current interval is within the given accuracies, we
         // are satisfied with the current approximation.
         if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                  atol)) {
             switch (allowed) {
             case ANY_SIDE:
                 return x1;
             case LEFT_SIDE:
                 return inverted ? x1 : x0;
             case RIGHT_SIDE:
                 return inverted ? x0 : x1;
             case BELOW_SIDE:
                 return (f1 <= 0) ? x1 : x0;
             case ABOVE_SIDE:
                 return (f1 >= 0) ? x1 : x0;
             default:
                 throw new MathInternalError();
             }
         }
     }
 }
\ No newline at end of file
