diff --git a/tmp/b7be14fb-a3de-4678-858e-9a1d16047b4c_buggy.java b/tmp/8d3e8ad0-f370-495b-b08c-233978a9969d_fixed.java
index 65c0e7b..5a84faf 100644
--- a/tmp/b7be14fb-a3de-4678-858e-9a1d16047b4c_buggy.java
+++ b/tmp/8d3e8ad0-f370-495b-b08c-233978a9969d_fixed.java
@@ -1,127 +1,135 @@
 /** {@inheritDoc} */
 protected final double doSolve() {
     // Get initial solution
     double x0 = getMin();
     double x1 = getMax();
     double f0 = computeObjectiveValue(x0);
     double f1 = computeObjectiveValue(x1);
 
     // If one of the bounds is the exact root, return it. Since these are
     // not under-approximations or over-approximations, we can return them
     // regardless of the allowed solutions.
     if (f0 == 0.0) {
         return x0;
     }
     if (f1 == 0.0) {
         return x1;
     }
 
     // Verify bracketing of initial solution.
     verifyBracketing(x0, x1);
 
     // Get accuracies.
     final double ftol = getFunctionValueAccuracy();
     final double atol = getAbsoluteAccuracy();
     final double rtol = getRelativeAccuracy();
 
     // Keep track of inverted intervals, meaning that the left bound is
     // larger than the right bound.
     boolean inverted = false;
 
-        // Keep finding better approximations.
+    int agingA = 0;
+    int agingB = 0;
+    double fa = f0;
+    double fb = f1;
+    double a = x0;
+    double b = x1;
+
     while (true) {
         // Calculate the next approximation.
-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
+        final double x = b - ((fb * (b - a)) / (fb - fa));
         final double fx = computeObjectiveValue(x);
 
         // If the new approximation is the exact root, return it. Since
         // this is not an under-approximation or an over-approximation,
         // we can return it regardless of the allowed solutions.
         if (fx == 0.0) {
             return x;
         }
 
-            // Update the bounds with the new approximation.
-            if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
-                x0 = x1;
-                f0 = f1;
+        if (fb * fx < 0) {
+            // Root is bracketed between b and x
+            a = b;
+            fa = fb;
+            agingA = 0;
+            b = x;
+            fb = fx;
+            agingB = 0;
             inverted = !inverted;
         } else {
+            // f(a) and f(x) have same sign: move a to x
             switch (method) {
             case ILLINOIS:
-                    f0 *= 0.5;
+                fa *= 0.5;
                 break;
             case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
+                fa *= fb / (fb + fx);
                 break;
             case REGULA_FALSI:
-                    // Nothing.
-                    if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
-                        f0 = computeObjectiveValue(x0);
+                // REGULA FALSI: no improvement, increase aging counter.
+                agingA++;
+                if (agingA >= 2) {
+                    fa *= 0.5;
+                    agingA = 0;
                 }
                 break;
             default:
-                    // Should never happen.
                 throw new MathInternalError();
             }
+            b = x;
+            fb = fx;
+            agingB = 0;
         }
-            // Update from [x0, x1] to [x0, x].
-            x1 = x;
-            f1 = fx;
 
         // If the function value of the last approximation is too small,
         // given the function value accuracy, then we can't get closer to
         // the root than we already are.
-            if (FastMath.abs(f1) <= ftol) {
+        if (FastMath.abs(fb) <= ftol) {
             switch (allowed) {
             case ANY_SIDE:
-                    return x1;
+                return b;
             case LEFT_SIDE:
                 if (inverted) {
-                        return x1;
+                    return b;
                 }
                 break;
             case RIGHT_SIDE:
                 if (!inverted) {
-                        return x1;
+                    return b;
                 }
                 break;
             case BELOW_SIDE:
-                    if (f1 <= 0) {
-                        return x1;
+                if (fb <= 0) {
+                    return b;
                 }
                 break;
             case ABOVE_SIDE:
-                    if (f1 >= 0) {
-                        return x1;
+                if (fb >= 0) {
+                    return b;
                 }
                 break;
             default:
                 throw new MathInternalError();
             }
         }
 
         // If the current interval is within the given accuracies, we
         // are satisfied with the current approximation.
-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                     atol)) {
+        if (FastMath.abs(b - a) < FastMath.max(rtol * FastMath.abs(b), atol)) {
             switch (allowed) {
             case ANY_SIDE:
-                    return x1;
+                return b;
             case LEFT_SIDE:
-                    return inverted ? x1 : x0;
+                return inverted ? b : a;
             case RIGHT_SIDE:
-                    return inverted ? x0 : x1;
+                return inverted ? a : b;
             case BELOW_SIDE:
-                    return (f1 <= 0) ? x1 : x0;
+                return (fb <= 0) ? b : a;
             case ABOVE_SIDE:
-                    return (f1 >= 0) ? x1 : x0;
+                return (fb >= 0) ? b : a;
             default:
                 throw new MathInternalError();
             }
         }
     }
 }
\ No newline at end of file
