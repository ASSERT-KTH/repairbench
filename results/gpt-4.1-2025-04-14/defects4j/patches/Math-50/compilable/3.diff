diff --git a/tmp/35bc4586-5e7c-4359-b3a7-cddc70964659_buggy.java b/tmp/8d79c1ec-0217-4714-b646-1c5dc782af58_fixed.java
index 65c0e7b..70c20e2 100644
--- a/tmp/35bc4586-5e7c-4359-b3a7-cddc70964659_buggy.java
+++ b/tmp/8d79c1ec-0217-4714-b646-1c5dc782af58_fixed.java
@@ -1,127 +1,176 @@
 /** {@inheritDoc} */
 protected final double doSolve() {
     // Get initial solution
     double x0 = getMin();
     double x1 = getMax();
     double f0 = computeObjectiveValue(x0);
     double f1 = computeObjectiveValue(x1);
 
     // If one of the bounds is the exact root, return it. Since these are
     // not under-approximations or over-approximations, we can return them
     // regardless of the allowed solutions.
     if (f0 == 0.0) {
         return x0;
     }
     if (f1 == 0.0) {
         return x1;
     }
 
     // Verify bracketing of initial solution.
     verifyBracketing(x0, x1);
 
     // Get accuracies.
     final double ftol = getFunctionValueAccuracy();
     final double atol = getAbsoluteAccuracy();
     final double rtol = getRelativeAccuracy();
 
     // Keep track of inverted intervals, meaning that the left bound is
     // larger than the right bound.
     boolean inverted = false;
 
+    // Prevent infinite loops by limiting how close the new guess can be to the old one
+    double prevX = x1;
+    int sameXCount = 0;
+    final int MAX_SAME_X = 5;
+
     // Keep finding better approximations.
     while (true) {
         // Calculate the next approximation.
-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
+        final double denominator = (f1 - f0);
+        if (denominator == 0.0) {
+            // Zero denominator means we cannot progress further.
+            // The interval is extremely small (or solver stuck) so just return best estimate.
+            return x1;
+        }
+        final double x = x1 - ((f1 * (x1 - x0)) / denominator);
         final double fx = computeObjectiveValue(x);
 
         // If the new approximation is the exact root, return it. Since
         // this is not an under-approximation or an over-approximation,
         // we can return it regardless of the allowed solutions.
         if (fx == 0.0) {
             return x;
         }
 
+        // Termination: protect against lack of progress (stagnation).
+        if (FastMath.abs(x - prevX) < atol) {
+            sameXCount++;
+        } else {
+            sameXCount = 0;
+        }
+        if (sameXCount >= MAX_SAME_X) {
+            // The new approximations are not changing--terminate.
+            switch (allowed) {
+            case ANY_SIDE:
+                return x;
+            case LEFT_SIDE:
+                return inverted ? x : prevX;
+            case RIGHT_SIDE:
+                return inverted ? prevX : x;
+            case BELOW_SIDE:
+                return (fx <= 0) ? x : prevX;
+            case ABOVE_SIDE:
+                return (fx >= 0) ? x : prevX;
+            default:
+                throw new MathInternalError();
+            }
+        }
+        prevX = x;
+
         // Update the bounds with the new approximation.
         if (f1 * fx < 0) {
             // The value of x1 has switched to the other bound, thus inverting
             // the interval.
             x0 = x1;
             f0 = f1;
             inverted = !inverted;
         } else {
             switch (method) {
             case ILLINOIS:
                 f0 *= 0.5;
                 break;
             case PEGASUS:
                 f0 *= f1 / (f1 + fx);
                 break;
             case REGULA_FALSI:
-                    // Nothing.
+                // Add stagnation check for regula falsi method
                 if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
-                        f0 = computeObjectiveValue(x0);
+                    // The approximation isn't improving; terminate to avoid infinite loop.
+                    switch (allowed) {
+                    case ANY_SIDE:
+                        return x;
+                    case LEFT_SIDE:
+                        return inverted ? x : x0;
+                    case RIGHT_SIDE:
+                        return inverted ? x0 : x;
+                    case BELOW_SIDE:
+                        return (fx <= 0) ? x : x0;
+                    case ABOVE_SIDE:
+                        return (fx >= 0) ? x : x0;
+                    default:
+                        throw new MathInternalError();
+                    }
                 }
                 break;
             default:
                 // Should never happen.
                 throw new MathInternalError();
             }
         }
         // Update from [x0, x1] to [x0, x].
         x1 = x;
         f1 = fx;
 
         // If the function value of the last approximation is too small,
         // given the function value accuracy, then we can't get closer to
         // the root than we already are.
         if (FastMath.abs(f1) <= ftol) {
             switch (allowed) {
             case ANY_SIDE:
                 return x1;
             case LEFT_SIDE:
                 if (inverted) {
                     return x1;
                 }
                 break;
             case RIGHT_SIDE:
                 if (!inverted) {
                     return x1;
                 }
                 break;
             case BELOW_SIDE:
                 if (f1 <= 0) {
                     return x1;
                 }
                 break;
             case ABOVE_SIDE:
                 if (f1 >= 0) {
                     return x1;
                 }
                 break;
             default:
                 throw new MathInternalError();
             }
         }
 
         // If the current interval is within the given accuracies, we
         // are satisfied with the current approximation.
         if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                  atol)) {
             switch (allowed) {
             case ANY_SIDE:
                 return x1;
             case LEFT_SIDE:
                 return inverted ? x1 : x0;
             case RIGHT_SIDE:
                 return inverted ? x0 : x1;
             case BELOW_SIDE:
                 return (f1 <= 0) ? x1 : x0;
             case ABOVE_SIDE:
                 return (f1 >= 0) ? x1 : x0;
             default:
                 throw new MathInternalError();
             }
         }
     }
 }
\ No newline at end of file
