diff --git a/tmp/2b10098b-9af9-47f4-b7dd-34afcba7314e_buggy.java b/tmp/98862c4f-1bce-4a30-a519-c8b5ad7911e1_fixed.java
index 5abdeb5..6cada00 100644
--- a/tmp/2b10098b-9af9-47f4-b7dd-34afcba7314e_buggy.java
+++ b/tmp/98862c4f-1bce-4a30-a519-c8b5ad7911e1_fixed.java
@@ -1,29 +1,32 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
         // We make a special exception when the entire cfgNode is a chain
         // of assignments, since in that case the assignment statements
         // will happen after the inlining of the right hand side.
         // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
         //   and remove this special case.
           !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+           (parent.getFirstChild() == n) &&
+           // Avoid skipping the lhs assignment if inside a HOOK node
+           !(parent.getParent() != null && parent.getParent().isHook()))) {
+          // Don't count lhs of top-level assignment chain,
+          // except when part of a HOOK (?:) construct
           numUsesWithinCfgNode++;
       }
     }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
