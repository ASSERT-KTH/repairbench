diff --git a/tmp/82bbe017-d0fd-4835-8e57-939ad1b227f3_buggy.java b/tmp/69666e80-c80c-420e-a586-3e3dc61836e6_fixed.java
index 5abdeb5..c45ce5d 100644
--- a/tmp/82bbe017-d0fd-4835-8e57-939ad1b227f3_buggy.java
+++ b/tmp/69666e80-c80c-420e-a586-3e3dc61836e6_fixed.java
@@ -1,29 +1,41 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
         // We make a special exception when the entire cfgNode is a chain
         // of assignments, since in that case the assignment statements
         // will happen after the inlining of the right hand side.
         // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
         //   and remove this special case.
           !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+             (parent.getFirstChild() == n) &&
+             // Do NOT make this exception if the assignment is nested inside a conditional/HOOK.
+             !isWithinHook(parent))) {
+          // Don't count lhs of top-level assignment chain, unless in hook
           numUsesWithinCfgNode++;
       }
     }
 
+    /** Returns true if the node is contained within a hook (conditional) expression. */
+    private boolean isWithinHook(Node node) {
+      for (Node cur = node.getParent(); cur != null; cur = cur.getParent()) {
+        if (cur.isHook()) {
+          return true;
+        }
+      }
+      return false;
+    }
+
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
