diff --git a/tmp/85b8da6d-3c4a-40e8-be23-bdb689299e0d_buggy.java b/tmp/1ca298ec-1d3d-447a-9b78-1d62393eb7a1_fixed.java
index 5abdeb5..16f2d64 100644
--- a/tmp/85b8da6d-3c4a-40e8-be23-bdb689299e0d_buggy.java
+++ b/tmp/1ca298ec-1d3d-447a-9b78-1d62393eb7a1_fixed.java
@@ -1,29 +1,35 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
         // We make a special exception when the entire cfgNode is a chain
         // of assignments, since in that case the assignment statements
         // will happen after the inlining of the right hand side.
         // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
         //   and remove this special case.
           !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+           (parent.getFirstChild() == n) &&
+           isRemovableAssignment(cfgNode, parent))) {
           // Don't count lhs of top-level assignment chain
           numUsesWithinCfgNode++;
       }
     }
 
+    // Checks if the assignment node is the root node of the cfgNode.
+    private boolean isRemovableAssignment(Node cfgNode, Node assignNode) {
+      // Only skip if the assignment is the root of the traversal (cfgNode)
+      return assignNode == cfgNode;
+    }
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
