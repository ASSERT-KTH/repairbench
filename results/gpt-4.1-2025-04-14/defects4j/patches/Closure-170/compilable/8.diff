diff --git a/tmp/b0754181-1088-4ef2-b931-7e4a2844deb1_buggy.java b/tmp/b25a880e-0e1a-41a6-b9b5-043481b59240_fixed.java
index 5abdeb5..ff1f51d 100644
--- a/tmp/b0754181-1088-4ef2-b931-7e4a2844deb1_buggy.java
+++ b/tmp/b25a880e-0e1a-41a6-b9b5-043481b59240_fixed.java
@@ -1,29 +1,32 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
               // We make a special exception when the entire cfgNode is a chain
               // of assignments, since in that case the assignment statements
               // will happen after the inlining of the right hand side.
               // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
               //   and remove this special case.
               !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+                (parent.getFirstChild() == n) &&
+                // Additional check: Exclude left-hand side of assignments
+                // only on the top level, not inside expressions (like hooks)
+                parent == cfgNode)) {
               // Don't count lhs of top-level assignment chain
               numUsesWithinCfgNode++;
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
