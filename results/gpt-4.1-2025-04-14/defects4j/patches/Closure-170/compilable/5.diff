diff --git a/tmp/82dd7129-bc20-4f6d-abcf-80728e286a96_buggy.java b/tmp/d970fa12-5f7b-4e51-9d69-39279c0d3d3f_fixed.java
index 5abdeb5..906d6c3 100644
--- a/tmp/82dd7129-bc20-4f6d-abcf-80728e286a96_buggy.java
+++ b/tmp/d970fa12-5f7b-4e51-9d69-39279c0d3d3f_fixed.java
@@ -1,29 +1,37 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
             // will happen after the inlining of the right hand side.
             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
             //   and remove this special case.
             !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+              parent.getFirstChild() == n &&
+              ((parent.getParent() == null) ||
+               parent.getParent().isExprResult() ||
+               parent.getParent().isComma() ||
+               parent.getParent().isBlock() ||
+               parent.getParent().isScript() ||
+               parent.getParent().isReturn() ||
+               parent.getParent().isHook()  // <-- Added this line
+              ))) {
               // Don't count lhs of top-level assignment chain
               numUsesWithinCfgNode++;
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
