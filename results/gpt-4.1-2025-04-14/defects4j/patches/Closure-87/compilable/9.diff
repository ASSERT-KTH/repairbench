diff --git a/tmp/9640ffeb-28f1-4cc3-b325-31c8e38e8b8b_buggy.java b/tmp/b96bc9fc-1492-4fd0-abb0-f0a074365880_fixed.java
index 19fd63e..cb10e35 100644
--- a/tmp/9640ffeb-28f1-4cc3-b325-31c8e38e8b8b_buggy.java
+++ b/tmp/b96bc9fc-1492-4fd0-abb0-f0a074365880_fixed.java
@@ -1,24 +1,42 @@
 /**
  * @return Whether the node is a block with a single statement that is
  *     an expression.
  */
 private boolean isFoldableExpressBlock(Node n) {
   if (n.getType() == Token.BLOCK) {
     if (n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
         // IE has a bug where event handlers behave differently when
         // their return value is used vs. when their return value is in
         // an EXPR_RESULT. It's pretty freaking weird. See:
         // http://code.google.com/p/closure-compiler/issues/detail?id=291
         // We try to detect this case, and not fold EXPR_RESULTs
         // into other expressions.
 
         // We only have to worry about methods with an implicit 'this'
         // param, or this doesn't happen.
 
-          return NodeUtil.isExpressionNode(maybeExpr);
+        // Do not fold f.onchange(); and f['x']();
+        if (NodeUtil.isExpressionNode(maybeExpr)) {
+          Node expr = maybeExpr.getFirstChild();
+          if (expr != null &&
+              (expr.getType() == Token.GETPROP ||
+               expr.getType() == Token.GETELEM)) {
+            String propName = null;
+            if (expr.getType() == Token.GETPROP) {
+              propName = expr.getLastChild().getString();
+            } else if (expr.getType() == Token.GETELEM) {
+              // Don't fold f['x']();
+              return false;
+            }
+            if ("onchange".equals(propName)) {
+              return false;
+            }
+          }
+          return true;
+        }
     }
   }
 
   return false;
 }
\ No newline at end of file
