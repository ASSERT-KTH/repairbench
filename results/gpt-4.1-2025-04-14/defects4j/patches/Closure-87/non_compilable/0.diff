diff --git a/tmp/a86245e6-8a2e-4795-91a0-7735bea45d6a_buggy.java b/tmp/a577df3a-8bfe-4e4b-92f5-96d86174f711_fixed.java
index 19fd63e..a9ec094 100644
--- a/tmp/a86245e6-8a2e-4795-91a0-7735bea45d6a_buggy.java
+++ b/tmp/a577df3a-8bfe-4e4b-92f5-96d86174f711_fixed.java
@@ -1,24 +1,35 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression, and safe to fold.
  */
 private boolean isFoldableExpressBlock(Node n) {
   if (n.getType() == Token.BLOCK) {
     if (n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
       // IE has a bug where event handlers behave differently when
       // their return value is used vs. when their return value is in
       // an EXPR_RESULT. It's pretty freaking weird. See:
       // http://code.google.com/p/closure-compiler/issues/detail?id=291
       // We try to detect this case, and not fold EXPR_RESULTs
       // into other expressions.
 
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+      // Specifically, avoid folding calls to .onchange, .onmouseover, etc.
+      if (NodeUtil.isExpressionNode(maybeExpr)) {
+        if (maybeExpr.getType() == Token.EXPR_RESULT) {
+          Node child = maybeExpr.getFirstChild();
+          if (child.isCall()) {
+            Node fn = child.getFirstChild();
+            if (fn != null && fn.isGetProp()) {
+              String propName = fn.getLastChild().getString();
+              if (propName.startsWith("on")) {
+                return false;
+              }
+            }
+          }
+        }
+        return true;
+      }
     }
   }
-
   return false;
 }
\ No newline at end of file
