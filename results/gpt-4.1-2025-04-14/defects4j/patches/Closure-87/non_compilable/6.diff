diff --git a/tmp/06b289f7-3796-4434-b6ac-f6827c14f286_buggy.java b/tmp/c1deb421-8180-4c2c-b56d-57ef11a20bbd_fixed.java
index 19fd63e..3f6cf23 100644
--- a/tmp/06b289f7-3796-4434-b6ac-f6827c14f286_buggy.java
+++ b/tmp/c1deb421-8180-4c2c-b56d-57ef11a20bbd_fixed.java
@@ -1,24 +1,30 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
         // IE has a bug where event handlers behave differently when
         // their return value is used vs. when their return value is in
         // an EXPR_RESULT. It's pretty freaking weird. See:
         // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
+        // Detect the suspicious case: a call to a property named 'onchange'.
+        if (maybeExpr.isExprResult()) {
+          Node call = maybeExpr.getFirstChild();
+          if (call != null && call.isCall()) {
+            Node callee = call.getFirstChild();
+            if (callee != null && callee.isGetProp()) {
+              Node prop = callee.getLastChild();
+              if (prop != null && prop.isString() && "onchange".equals(prop.getString())) {
+                return false;
+              }
+            }
+          }
+        }
         return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
-
     return false;
   }
\ No newline at end of file
