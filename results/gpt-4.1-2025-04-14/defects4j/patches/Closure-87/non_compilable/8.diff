diff --git a/tmp/0f66f627-1c34-4ae7-9556-9296b87df170_buggy.java b/tmp/0a0e3449-ef89-4ffe-be81-bc146627b1a8_fixed.java
index 19fd63e..ff8e796 100644
--- a/tmp/0f66f627-1c34-4ae7-9556-9296b87df170_buggy.java
+++ b/tmp/0a0e3449-ef89-4ffe-be81-bc146627b1a8_fixed.java
@@ -1,24 +1,45 @@
 /**
  * @return Whether the node is a block with a single statement that is
  *     an expression.
  */
 private boolean isFoldableExpressBlock(Node n) {
   if (n.getType() == Token.BLOCK) {
     if (n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
+
       // IE has a bug where event handlers behave differently when
       // their return value is used vs. when their return value is in
       // an EXPR_RESULT. It's pretty freaking weird. See:
       // http://code.google.com/p/closure-compiler/issues/detail?id=291
       // We try to detect this case, and not fold EXPR_RESULTs
       // into other expressions.
-
       // We only have to worry about methods with an implicit 'this'
       // param, or this doesn't happen.
 
-          return NodeUtil.isExpressionNode(maybeExpr);
+      // Don't fold if this is a call to an .onchange or .on... property,
+      // i.e. don't fold f.onchange(); but do fold f.bar();
+      if (NodeUtil.isExpressionNode(maybeExpr)) {
+        Node expr = maybeExpr.getFirstChild();
+        if (expr != null && expr.getType() == Token.CALL) {
+          Node fn = expr.getFirstChild();
+          if (fn != null && fn.getType() == Token.GETPROP) {
+            Node target = fn.getFirstChild();
+            Node prop = fn.getLastChild();
+            if (prop != null && prop.isString()) {
+              String propName = prop.getString();
+              if (propName.startsWith("on")) {
+                // Don't fold f.onXXX();
+                return false;
+              }
+            }
+          } else if (fn != null && fn.getType() == Token.GETELEM) {
+            // Don't fold f['x']();
+            return false;
+          }
+        }
+        return true;
+      }
     }
   }
-
   return false;
 }
\ No newline at end of file
