diff --git a/tmp/48df026b-75a1-49d8-896b-16d5f9a8f724_buggy.java b/tmp/133144a2-85b2-48be-947b-889f325870c9_fixed.java
index 19fd63e..105abfa 100644
--- a/tmp/48df026b-75a1-49d8-896b-16d5f9a8f724_buggy.java
+++ b/tmp/133144a2-85b2-48be-947b-889f325870c9_fixed.java
@@ -1,24 +1,39 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
         // IE has a bug where event handlers behave differently when
         // their return value is used vs. when their return value is in
         // an EXPR_RESULT. It's pretty freaking weird. See:
         // http://code.google.com/p/closure-compiler/issues/detail?id=291
         // We try to detect this case, and not fold EXPR_RESULTs
         // into other expressions.
 
         // We only have to worry about methods with an implicit 'this'
         // param, or this doesn't happen.
 
+        // Don't fold calls to a .onchange or .onclick property
+        // (which are special in IE, and can have observable effects
+        // if the return value is used).
+        if (NodeUtil.isExprCall(maybeExpr)) {
+          Node call = maybeExpr.getFirstChild();
+          if (call.isGetProp()) {
+            Node prop = call.getLastChild();
+            if (prop.isString()) {
+              String propName = prop.getString();
+              if ("onchange".equals(propName) || "onclick".equals(propName)) {
+                return false;
+              }
+            }
+          }
+        }
         return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
 
     return false;
   }
\ No newline at end of file
