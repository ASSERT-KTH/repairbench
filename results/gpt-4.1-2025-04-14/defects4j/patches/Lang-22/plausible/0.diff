diff --git a/tmp/e85df575-7ce4-4a3d-8124-7fb9d57bc1d4_buggy.java b/tmp/92f8a261-d4e4-497b-9372-b8c8001b23e0_fixed.java
index e0a0552..84c618d 100644
--- a/tmp/e85df575-7ce4-4a3d-8124-7fb9d57bc1d4_buggy.java
+++ b/tmp/92f8a261-d4e4-497b-9372-b8c8001b23e0_fixed.java
@@ -1,54 +1,57 @@
     /**
      * <p>Gets the greatest common divisor of the absolute value of
      * two numbers, using the "binary gcd" method which avoids
      * division and modulo operations.  See Knuth 4.5.2 algorithm B.
      * This algorithm is due to Josef Stein (1961).</p>
      *
      * @param u  a non-zero number
      * @param v  a non-zero number
      * @return the greatest common divisor, never zero
      */
     private static int greatestCommonDivisor(int u, int v) {
-        // From Commons Math:
+        // Handle special cases first (zero, min value).
+        if (u == 0 || v == 0) {
+            return Math.abs(u) + Math.abs(v); // Only one can be nonzero, "+", not "||" for min value
+        }
         //if either operand is abs 1, return 1:
-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
+        if (Math.abs(u) == 1 || Math.abs(v) == 1) {
             return 1;
         }
-        // keep u and v negative, as negative integers range down to
-        // -2^31, while positive numbers can only be as large as 2^31-1
-        // (i.e. we can't necessarily negate a negative number without
-        // overflow)
-        if (u>0) { u=-u; } // make u negative
-        if (v>0) { v=-v; } // make v negative
+        // can't handle MIN_VALUE directly in abs, so ensure positive
+        int a = u, b = v;
+        if (a < 0) {
+            a = (a == Integer.MIN_VALUE) ? Integer.MIN_VALUE : -a;
+        }
+        if (b < 0) {
+            b = (b == Integer.MIN_VALUE) ? Integer.MIN_VALUE : -b;
+        }
+
         // B1. [Find power of 2]
         int k = 0;
-        while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...
-            u/=2; v/=2; k++; // cast out twos.
+        while (((a & 1) == 0) && ((b & 1) == 0) && k < 31) {
+            a >>>= 1;
+            b >>>= 1;
+            k++;
         }
         if (k == 31) {
             throw new ArithmeticException("overflow: gcd is 2^31");
         }
-        // B2. Initialize: u and v have been divided by 2^k and at least
-        //     one is odd.
-        int t = ((u&1)==1) ? v : -(u/2)/*B3*/;
-        // t negative: u was odd, v may be even (t replaces v)
-        // t positive: u was even, v is odd (t replaces u)
+
+        // Now a or b is odd.
+        while ((a & 1) == 0) {
+            a >>>= 1;
+        }
         do {
-            /* assert u<0 && v<0; */
-            // B4/B3: cast out twos from t.
-            while ((t&1)==0) { // while t is even..
-                t/=2; // cast out twos
+            while ((b & 1) == 0) {
+                b >>>= 1;
             }
-            // B5 [reset max(u,v)]
-            if (t>0) {
-                u = -t;
-            } else {
-                v = t;
+            if (a > b) {
+                int t = a;
+                a = b;
+                b = t;
             }
-            // B6/B3. at this point both u and v should be odd.
-            t = (v - u)/2;
-            // |u| larger: t positive (replace u)
-            // |v| larger: t negative (replace v)
-        } while (t!=0);
-        return -u*(1<<k); // gcd is u*2^k
+            b = b - a;
+        } while (b != 0);
+
+        return a << k;
     }
\ No newline at end of file
