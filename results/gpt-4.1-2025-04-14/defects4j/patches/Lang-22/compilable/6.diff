diff --git a/tmp/e3bf58d2-0f39-4ed2-9d36-43c5d23fda2d_buggy.java b/tmp/01b67f3e-e9e2-48f7-bffc-05ed038d60b8_fixed.java
index e0a0552..7dc281d 100644
--- a/tmp/e3bf58d2-0f39-4ed2-9d36-43c5d23fda2d_buggy.java
+++ b/tmp/01b67f3e-e9e2-48f7-bffc-05ed038d60b8_fixed.java
@@ -1,54 +1,51 @@
 /**
  * <p>Gets the greatest common divisor of the absolute value of
  * two numbers, using the "binary gcd" method which avoids
  * division and modulo operations.  See Knuth 4.5.2 algorithm B.
  * This algorithm is due to Josef Stein (1961).</p>
  *
  * @param u  a non-zero number
  * @param v  a non-zero number
  * @return the greatest common divisor, never zero
  */
 private static int greatestCommonDivisor(int u, int v) {
-        // From Commons Math:
-        //if either operand is abs 1, return 1:
-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
-            return 1;
+    // Special cases (this is mainly for Integer.MIN_VALUE support):
+    if (u == 0 || v == 0) {
+        return Math.abs(u) + Math.abs(v);
     }
-        // keep u and v negative, as negative integers range down to
-        // -2^31, while positive numbers can only be as large as 2^31-1
-        // (i.e. we can't necessarily negate a negative number without
-        // overflow)
-        if (u>0) { u=-u; } // make u negative
-        if (v>0) { v=-v; } // make v negative
-        // B1. [Find power of 2]
-        int k=0;
-        while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...
-            u/=2; v/=2; k++; // cast out twos.
+
+    // Adapt to use positive inputs, as that allows correct halving
+    int a = Math.abs(u);
+    int b = Math.abs(v);
+
+    // Find common power of two for a and b
+    int shift = 0;
+    while (((a | b) & 1) == 0 && shift < 31) {
+        a >>= 1;
+        b >>= 1;
+        shift++;
     }
-        if (k==31) {
+    if (shift == 31) {
         throw new ArithmeticException("overflow: gcd is 2^31");
     }
-        // B2. Initialize: u and v have been divided by 2^k and at least
-        //     one is odd.
-        int t = ((u&1)==1) ? v : -(u/2)/*B3*/;
-        // t negative: u was odd, v may be even (t replaces v)
-        // t positive: u was even, v is odd (t replaces u)
+
+    // Remove remaining factors of 2 from a
+    while ((a & 1) == 0) {
+        a >>= 1;
+    }
+
+    // gcd(a, b) = gcd(|a|, |b|)
     do {
-            /* assert u<0 && v<0; */
-            // B4/B3: cast out twos from t.
-            while ((t&1)==0) { // while t is even..
-                t/=2; // cast out twos
+        while ((b & 1) == 0) {
+            b >>= 1;
         }
-            // B5 [reset max(u,v)]
-            if (t>0) {
-                u = -t;
-            } else {
-                v = t;
+        if (a > b) {
+            int tmp = a;
+            a = b;
+            b = tmp;
         }
-            // B6/B3. at this point both u and v should be odd.
-            t = (v - u)/2;
-            // |u| larger: t positive (replace u)
-            // |v| larger: t negative (replace v)
-        } while (t!=0);
-        return -u*(1<<k); // gcd is u*2^k
+        b = b - a;
+    } while (b != 0);
+
+    return a << shift;
 }
\ No newline at end of file
