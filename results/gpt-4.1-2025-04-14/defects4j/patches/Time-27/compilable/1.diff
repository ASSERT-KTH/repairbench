diff --git a/tmp/e1fdbcce-cef3-4f06-9130-ca021d12b6b8_buggy.java b/tmp/eeb8020f-1e6e-4fbf-8acc-1e545d849996_fixed.java
index ec6c9ee..0f6538d 100644
--- a/tmp/e1fdbcce-cef3-4f06-9130-ca021d12b6b8_buggy.java
+++ b/tmp/eeb8020f-1e6e-4fbf-8acc-1e545d849996_fixed.java
@@ -1,21 +1,30 @@
 //-----------------------------------------------------------------------
 private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
     if (notPrinter && notParser) {
         throw new IllegalStateException("Builder has created neither a printer nor a parser");
     }
     int size = elementPairs.size();
     if (size >= 2 && elementPairs.get(0) instanceof Separator) {
         Separator sep = (Separator) elementPairs.get(0);
-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
+        // Fix: pass correct notPrinter/notParser flags for remainder
+        boolean newNotPrinter = notPrinter;
+        boolean newNotParser = notParser;
+        if (sep.iAfterPrinter == null) {
+            newNotPrinter = true;
+        }
+        if (sep.iAfterParser == null) {
+            newNotParser = true;
+        }
+        PeriodFormatter f = toFormatter(elementPairs.subList(2, size), newNotPrinter, newNotParser);
         sep = sep.finish(f.getPrinter(), f.getParser());
         return new PeriodFormatter(sep, sep);
     }
     Object[] comp = createComposite(elementPairs);
     if (notPrinter) {
         return new PeriodFormatter(null, (PeriodParser) comp[1]);
     } else if (notParser) {
         return new PeriodFormatter((PeriodPrinter) comp[0], null);
     } else {
         return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
     }
 }
\ No newline at end of file
