diff --git a/tmp/9bc7c824-9468-4ab2-b736-1be3791f057d_buggy.java b/tmp/c8203954-05d6-4d2d-ac0b-8c5901016bd2_fixed.java
index ec6c9ee..a0f7600 100644
--- a/tmp/9bc7c824-9468-4ab2-b736-1be3791f057d_buggy.java
+++ b/tmp/c8203954-05d6-4d2d-ac0b-8c5901016bd2_fixed.java
@@ -1,21 +1,23 @@
 //-----------------------------------------------------------------------
 private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
     if (notPrinter && notParser) {
         throw new IllegalStateException("Builder has created neither a printer nor a parser");
     }
     int size = elementPairs.size();
     if (size >= 2 && elementPairs.get(0) instanceof Separator) {
         Separator sep = (Separator) elementPairs.get(0);
-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
+        // Important: must allow notPrinter/notParser to be 'false' below,
+        // so the correct printer/parser is constructed recursively
+        PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter && sep.iAfterPrinter == null, notParser && sep.iAfterParser == null);
         sep = sep.finish(f.getPrinter(), f.getParser());
         return new PeriodFormatter(sep, sep);
     }
     Object[] comp = createComposite(elementPairs);
     if (notPrinter) {
         return new PeriodFormatter(null, (PeriodParser) comp[1]);
     } else if (notParser) {
         return new PeriodFormatter((PeriodPrinter) comp[0], null);
     } else {
         return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
     }
 }
\ No newline at end of file
