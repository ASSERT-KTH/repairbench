diff --git a/tmp/237bdfdb-2988-423a-9b4d-cb87f7fc98d2_buggy.java b/tmp/84673a9d-f843-4555-bef2-3f29e557894b_fixed.java
index d6a560a..2b41f84 100644
--- a/tmp/237bdfdb-2988-423a-9b4d-cb87f7fc98d2_buggy.java
+++ b/tmp/84673a9d-f843-4555-bef2-3f29e557894b_fixed.java
@@ -1,33 +1,37 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
   // TODO(user): Investigate whether it is really necessary to keep two
   // different mechanisms for resolving named types, and if so, which order
   // makes more sense. Now, resolution via registry is first in order to
   // avoid triggering the warnings built into the resolution via properties.
   boolean resolved = resolveViaRegistry(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    // Return early to avoid further property resolution and stack overflows.
+    return this;
   }
 
   if (resolved) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
 
   resolveViaProperties(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    // Return early to avoid further property resolution and stack overflows.
+    return this;
   }
 
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
     finishPropertyContinuations();
   }
   return registry.isLastGeneration() ?
       getReferencedType() : this;
 }
\ No newline at end of file
