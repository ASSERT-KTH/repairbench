diff --git a/tmp/53814cf7-0cf0-4205-a219-f8fe86e926f7_buggy.java b/tmp/6a4daecf-15c2-4305-8dba-c0cf2fe42495_fixed.java
index d6a560a..f49746b 100644
--- a/tmp/53814cf7-0cf0-4205-a219-f8fe86e926f7_buggy.java
+++ b/tmp/6a4daecf-15c2-4305-8dba-c0cf2fe42495_fixed.java
@@ -1,33 +1,38 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
   // TODO(user): Investigate whether it is really necessary to keep two
   // different mechanisms for resolving named types, and if so, which order
   // makes more sense. Now, resolution via registry is first in order to
   // avoid triggering the warnings built into the resolution via properties.
+
+  // Detect cycles before doing anything, to prevent infinite recursion.
+  if (detectImplicitPrototypeCycle()) {
+    handleTypeCycle(t);
+    // Once a cycle is detected and handled, do not continue resolution.
+    // Return the "this" type (the unresolved type) to prevent further processing.
+    return this;
+  }
+
   boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
   if (resolved) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
 
   resolveViaProperties(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    // Same as above: do not continue if a cycle is detected.
+    return this;
   }
 
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
     finishPropertyContinuations();
   }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+  return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
