diff --git a/tmp/6c6e6dec-3dda-41db-b1ef-15333ebc014a_buggy.java b/tmp/4b8e881d-f341-4248-aba0-8fabd9f3ed82_fixed.java
index d6a560a..4e0948c 100644
--- a/tmp/6c6e6dec-3dda-41db-b1ef-15333ebc014a_buggy.java
+++ b/tmp/4b8e881d-f341-4248-aba0-8fabd9f3ed82_fixed.java
@@ -1,33 +1,40 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
   // TODO(user): Investigate whether it is really necessary to keep two
   // different mechanisms for resolving named types, and if so, which order
   // makes more sense. Now, resolution via registry is first in order to
   // avoid triggering the warnings built into the resolution via properties.
+
+  // Try resolving via registry.
   boolean resolved = resolveViaRegistry(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    // Return immediately to prevent further resolution attempts, avoiding recursion.
+    return this;
   }
 
   if (resolved) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
 
+  // Try resolving via properties if not resolved via registry.
   resolveViaProperties(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    // Return immediately to prevent further resolution attempts, avoiding recursion.
+    return this;
   }
 
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
     finishPropertyContinuations();
   }
   return registry.isLastGeneration() ?
       getReferencedType() : this;
 }
\ No newline at end of file
