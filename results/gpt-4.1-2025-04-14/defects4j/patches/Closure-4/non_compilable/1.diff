diff --git a/tmp/f11951c2-6dcc-4e0b-aab0-64854e5d21f8_buggy.java b/tmp/799fb4ad-8f44-4a34-aa09-aff9c8c37427_fixed.java
index d6a560a..5564938 100644
--- a/tmp/f11951c2-6dcc-4e0b-aab0-64854e5d21f8_buggy.java
+++ b/tmp/799fb4ad-8f44-4a34-aa09-aff9c8c37427_fixed.java
@@ -1,33 +1,45 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+  // Track whether we're already resolving this type to detect cycles and prevent recursion.
+  if (isResolving) {
+    // If we're already resolving, we've hit an inheritance cycle.
+    handleTypeCycle(t);
+    return registry.isLastGeneration() ? getReferencedType() : this;
+  }
+
+  // Guard against recursion by setting the resolving flag.
+  isResolving = true;
+  try {
+    // Try to resolve via the registry first.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
+    // If not resolved by registry, try to resolve via properties.
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
+  } finally {
+    // Always clear the resolving flag to allow future valid resolutions.
+    isResolving = false;
+  }
 }
\ No newline at end of file
