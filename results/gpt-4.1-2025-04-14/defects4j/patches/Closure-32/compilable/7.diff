diff --git a/tmp/3fb0f058-cb8e-449a-9b49-07013e2e11af_buggy.java b/tmp/5c9dd049-97ba-4270-9a61-d528bbf173bc_fixed.java
index 4be01ab..d43670b 100644
--- a/tmp/3fb0f058-cb8e-449a-9b49-07013e2e11af_buggy.java
+++ b/tmp/5c9dd049-97ba-4270-9a61-d528bbf173bc_fixed.java
@@ -1,115 +1,129 @@
 /**
  * Extracts the text found on the current line and all subsequent
  * until either an annotation, end of comment or end of file is reached.
  * Note that if this method detects an end of line as the first token, it
  * will quit immediately (indicating that there is no text where it was
  * expected).  Note that token = info.token; should be called after this
  * method is used to update the token properly in the parser.
  *
  * @param token The start token.
  * @param option How to handle whitespace.
  *
  * @return The extraction information.
  */
 @SuppressWarnings("fallthrough")
 private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                     WhitespaceOption option) {
 
   if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
       token == JsDocToken.EOF) {
     return new ExtractionInfo("", token);
   }
 
   stream.update();
   int startLineno = stream.getLineno();
   int startCharno = stream.getCharno() + 1;
 
   // Read the content from the first line.
   String line = stream.getRemainingJSDocLine();
   if (option != WhitespaceOption.PRESERVE) {
     line = line.trim();
   }
 
   StringBuilder builder = new StringBuilder();
   builder.append(line);
 
   state = State.SEARCHING_ANNOTATION;
   token = next();
 
   boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
+  boolean isFirstLine = true;
 
   do {
     switch (token) {
       case STAR:
         if (ignoreStar) {
           // Mark the position after the star as the new start of the line.
         } else {
           // The star is part of the comment.
-            if (builder.length() > 0) {
+          if (builder.length() > 0 && !isFirstLine) {
             builder.append(' ');
           }
-
           builder.append('*');
         }
 
         token = next();
         continue;
 
       case EOL:
         if (option != WhitespaceOption.SINGLE_LINE) {
           builder.append("\n");
         }
 
         ignoreStar = true;
         token = next();
+        isFirstLine = false;
         continue;
 
       default:
         ignoreStar = false;
         state = State.SEARCHING_ANNOTATION;
 
         // All tokens must be separated by a space.
 
         if (token == JsDocToken.EOC ||
             token == JsDocToken.EOF ||
             // When we're capturing a license block, annotations
             // in the block are ok.
             (token == JsDocToken.ANNOTATION &&
              option != WhitespaceOption.PRESERVE)) {
           String multilineText = builder.toString();
 
+          // Only trim trailing whitespace in PRESERVE mode,
+          // to allow preserving leading whitespace e.g. for ASCII art, etc.
           if (option != WhitespaceOption.PRESERVE) {
             multilineText = multilineText.trim();
+          } else {
+            multilineText = trimEndPreserve(multilineText);
           }
 
           int endLineno = stream.getLineno();
           int endCharno = stream.getCharno();
 
           if (multilineText.length() > 0) {
             jsdocBuilder.markText(multilineText, startLineno, startCharno,
                 endLineno, endCharno);
           }
 
           return new ExtractionInfo(multilineText, token);
         }
 
-          if (builder.length() > 0) {
+        if (builder.length() > 0 && !isFirstLine) {
           builder.append(' ');
         }
         builder.append(toString(token));
 
         line = stream.getRemainingJSDocLine();
 
         if (option != WhitespaceOption.PRESERVE) {
           line = trimEnd(line);
         }
-
         builder.append(line);
         token = next();
+        isFirstLine = false;
     }
   } while (true);
 }
+
+/**
+ * Helper method to trim only trailing whitespace (but not leading whitespace).
+ */
+private static String trimEndPreserve(String s) {
+  int len = s.length();
+  int st = 0;
+
+  while ((st < len) && (s.charAt(len - 1) <= ' ')) {
+    len--;
+  }
+  return s.substring(0, len);
+}
\ No newline at end of file
