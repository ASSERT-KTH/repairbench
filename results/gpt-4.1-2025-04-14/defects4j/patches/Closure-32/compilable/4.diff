diff --git a/tmp/4b54ddc1-9bf8-4831-836c-1ef278c252d8_buggy.java b/tmp/63c948c3-f25b-4f2f-b84f-d329ad6576ea_fixed.java
index 4be01ab..afa34ee 100644
--- a/tmp/4b54ddc1-9bf8-4831-836c-1ef278c252d8_buggy.java
+++ b/tmp/63c948c3-f25b-4f2f-b84f-d329ad6576ea_fixed.java
@@ -1,115 +1,140 @@
   /**
    * Extracts the text found on the current line and all subsequent
    * until either an annotation, end of comment or end of file is reached.
    * Note that if this method detects an end of line as the first token, it
    * will quit immediately (indicating that there is no text where it was
    * expected).  Note that token = info.token; should be called after this
    * method is used to update the token properly in the parser.
    *
    * @param token The start token.
    * @param option How to handle whitespace.
    *
    * @return The extraction information.
    */
   @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
 
     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
         token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
 
     stream.update();
     int startLineno = stream.getLineno();
     int startCharno = stream.getCharno() + 1;
 
     // Read the content from the first line.
     String line = stream.getRemainingJSDocLine();
+    // Only trim the end of the line, not start, for PRESERVE mode.
     if (option != WhitespaceOption.PRESERVE) {
       line = line.trim();
+    } else {
+      line = trimEnd(line);
     }
 
     StringBuilder builder = new StringBuilder();
     builder.append(line);
 
     state = State.SEARCHING_ANNOTATION;
     token = next();
 
     boolean ignoreStar = false;
+    boolean isFirstLine = true;
 
     // Track the start of the line to count whitespace that
     // the tokenizer skipped. Because this case is rare, it's easier
     // to do this here than in the tokenizer.
 
     do {
       switch (token) {
         case STAR:
           if (ignoreStar) {
             // Mark the position after the star as the new start of the line.
           } else {
             // The star is part of the comment.
             if (builder.length() > 0) {
               builder.append(' ');
             }
-
             builder.append('*');
           }
-
           token = next();
           continue;
 
         case EOL:
           if (option != WhitespaceOption.SINGLE_LINE) {
             builder.append("\n");
           }
-
           ignoreStar = true;
           token = next();
+          isFirstLine = false;
           continue;
 
         default:
           ignoreStar = false;
           state = State.SEARCHING_ANNOTATION;
 
           // All tokens must be separated by a space.
 
           if (token == JsDocToken.EOC ||
               token == JsDocToken.EOF ||
               // When we're capturing a license block, annotations
               // in the block are ok.
               (token == JsDocToken.ANNOTATION &&
                option != WhitespaceOption.PRESERVE)) {
             String multilineText = builder.toString();
 
             if (option != WhitespaceOption.PRESERVE) {
               multilineText = multilineText.trim();
+            } else {
+              // For PRESERVE, trim leading/trailing blank lines but preserve indentation
+              // and preserve internal blank lines
+              // Remove leading blank lines
+              int len = multilineText.length();
+              int start = 0;
+              while (start < len && Character.isWhitespace(multilineText.charAt(start)) &&
+                  multilineText.charAt(start) == '\n') {
+                start++;
+              }
+
+              // Remove leading newline only if first character is '\n'
+              while (multilineText.startsWith("\n")) {
+                multilineText = multilineText.substring(1);
+              }
+              // Remove trailing whitespace (usually newlines)
+              while (multilineText.endsWith("\n") || multilineText.endsWith(" ")) {
+                multilineText = multilineText.substring(0, multilineText.length() - 1);
+              }
+              // But preserve indentation and internal spacing
             }
 
             int endLineno = stream.getLineno();
             int endCharno = stream.getCharno();
 
             if (multilineText.length() > 0) {
               jsdocBuilder.markText(multilineText, startLineno, startCharno,
                   endLineno, endCharno);
             }
 
             return new ExtractionInfo(multilineText, token);
           }
 
-          if (builder.length() > 0) {
+          if (!isFirstLine && builder.length() > 0) {
             builder.append(' ');
           }
           builder.append(toString(token));
 
           line = stream.getRemainingJSDocLine();
 
           if (option != WhitespaceOption.PRESERVE) {
             line = trimEnd(line);
+          } else {
+            line = trimEnd(line);
           }
-
           builder.append(line);
+
           token = next();
+          isFirstLine = false;
       }
     } while (true);
   }
\ No newline at end of file
