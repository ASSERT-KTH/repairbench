diff --git a/tmp/5b43bf8a-822f-4af7-9378-a96967840ab1_buggy.java b/tmp/0dbcd67a-b76a-4d29-8cab-49283a894d9d_fixed.java
index 4be01ab..9dcb95d 100644
--- a/tmp/5b43bf8a-822f-4af7-9378-a96967840ab1_buggy.java
+++ b/tmp/0dbcd67a-b76a-4d29-8cab-49283a894d9d_fixed.java
@@ -1,115 +1,110 @@
 /**
  * Extracts the text found on the current line and all subsequent
  * until either an annotation, end of comment or end of file is reached.
  * Note that if this method detects an end of line as the first token, it
  * will quit immediately (indicating that there is no text where it was
  * expected).  Note that token = info.token; should be called after this
  * method is used to update the token properly in the parser.
  *
  * @param token The start token.
  * @param option How to handle whitespace.
  *
  * @return The extraction information.
  */
 @SuppressWarnings("fallthrough")
 private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                     WhitespaceOption option) {
 
   if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
       token == JsDocToken.EOF) {
     return new ExtractionInfo("", token);
   }
 
   stream.update();
   int startLineno = stream.getLineno();
   int startCharno = stream.getCharno() + 1;
 
-    // Read the content from the first line.
-    String line = stream.getRemainingJSDocLine();
-    if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
-    }
-
   StringBuilder builder = new StringBuilder();
-    builder.append(line);
-
-    state = State.SEARCHING_ANNOTATION;
-    token = next();
 
+  // WhitespaceOption.PRESERVE means preserve formatting of all comment lines,
+  // including leading whitespace and blank lines; otherwise, strip each line.
+  boolean isFirstLine = true;
   boolean ignoreStar = false;
 
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
   do {
+    String line = stream.getRemainingJSDocLine();
+
+    if (token == JsDocToken.EOC || token == JsDocToken.EOF ||
+        (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {
+      // Stop before EOC/EOF/ANNOTATION unless PRESERVE option is used.
+      if (option != WhitespaceOption.PRESERVE) {
+        String multilineText = builder.toString().trim();
+        int endLineno = stream.getLineno();
+        int endCharno = stream.getCharno();
+        if (multilineText.length() > 0) {
+          jsdocBuilder.markText(multilineText, startLineno, startCharno,
+              endLineno, endCharno);
+        }
+        return new ExtractionInfo(multilineText, token);
+      } else {
+        // For PRESERVE, end only at EOC or EOF.
+        if (token == JsDocToken.ANNOTATION) {
+          // Not terminal in PRESERVE, continue.
+        } else {
+          String multilineText = builder.toString();
+          int endLineno = stream.getLineno();
+          int endCharno = stream.getCharno();
+          if (multilineText.length() > 0) {
+            jsdocBuilder.markText(multilineText, startLineno, startCharno,
+                endLineno, endCharno);
+          }
+          return new ExtractionInfo(multilineText, token);
+        }
+      }
+    }
+
     switch (token) {
       case STAR:
-          if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
-          } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
-              builder.append(' ');
-            }
-
-            builder.append('*');
-          }
-
-          token = next();
-          continue;
-
-        case EOL:
-          if (option != WhitespaceOption.SINGLE_LINE) {
-            builder.append("\n");
-          }
-
+        // Handle case when parser splits leading '*'
+        // Don't add extra whitespace for purely decorative stars in PRESERVE mode.
         ignoreStar = true;
         token = next();
         continue;
 
-        default:
+      case EOL:
+        // Preserve blank lines if PRESERVE, otherwise newlines only between lines with text.
+        if (option == WhitespaceOption.PRESERVE) {
+          builder.append('\n');
+        } else if (builder.length() > 0 &&
+            // Avoid redundant trailing newlines for blank last line
+            !builder.toString().endsWith("\n")) {
+          builder.append('\n');
+        }
         ignoreStar = false;
-          state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
-
-          if (token == JsDocToken.EOC ||
-              token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
-            String multilineText = builder.toString();
-
-            if (option != WhitespaceOption.PRESERVE) {
-              multilineText = multilineText.trim();
-            }
-
-            int endLineno = stream.getLineno();
-            int endCharno = stream.getCharno();
-
-            if (multilineText.length() > 0) {
-              jsdocBuilder.markText(multilineText, startLineno, startCharno,
-                  endLineno, endCharno);
-            }
-
-            return new ExtractionInfo(multilineText, token);
-          }
-
-          if (builder.length() > 0) {
-            builder.append(' ');
+        token = next();
+        isFirstLine = false;
+        continue;
+
+      default:
+        // For PRESERVE, preserve line with whitespace and content as-is.
+        // For others, trim whitespace on each line (strip leading and trailing).
+        if (option == WhitespaceOption.PRESERVE) {
+          // Only add newline if not first and last wasn't a newline
+          if (!isFirstLine && builder.length() > 0 && !builder.toString().endsWith("\n")) {
+            builder.append('\n');
           }
-          builder.append(toString(token));
-
-          line = stream.getRemainingJSDocLine();
-
-          if (option != WhitespaceOption.PRESERVE) {
-            line = trimEnd(line);
-          }
-
           builder.append(line);
+        } else {
+          String trimmed = trimEnd(line).trim();
+          if (!trimmed.isEmpty()) {
+            if (builder.length() > 0 && !builder.toString().endsWith("\n")) {
+              builder.append('\n');
+            }
+            builder.append(trimmed);
+          }
+        }
         token = next();
+        isFirstLine = false;
     }
   } while (true);
 }
\ No newline at end of file
