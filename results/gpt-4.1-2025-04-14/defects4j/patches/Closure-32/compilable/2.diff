diff --git a/tmp/93c51166-7bc6-4709-b09f-552f75298cff_buggy.java b/tmp/0b1d20c8-92e9-4d80-8e5f-38d636509f45_fixed.java
index 4be01ab..0ea1ac8 100644
--- a/tmp/93c51166-7bc6-4709-b09f-552f75298cff_buggy.java
+++ b/tmp/0b1d20c8-92e9-4d80-8e5f-38d636509f45_fixed.java
@@ -1,115 +1,96 @@
   /**
    * Extracts the text found on the current line and all subsequent
    * until either an annotation, end of comment or end of file is reached.
    * Note that if this method detects an end of line as the first token, it
    * will quit immediately (indicating that there is no text where it was
    * expected).  Note that token = info.token; should be called after this
    * method is used to update the token properly in the parser.
    *
    * @param token The start token.
    * @param option How to handle whitespace.
    *
    * @return The extraction information.
    */
   @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
 
     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
         token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
 
     stream.update();
     int startLineno = stream.getLineno();
     int startCharno = stream.getCharno() + 1;
 
-    // Read the content from the first line.
-    String line = stream.getRemainingJSDocLine();
-    if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
-    }
-
     StringBuilder builder = new StringBuilder();
-    builder.append(line);
-
-    state = State.SEARCHING_ANNOTATION;
-    token = next();
 
+    boolean firstLine = true;
     boolean ignoreStar = false;
 
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
     do {
-      switch (token) {
-        case STAR:
-          if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
-          } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
-              builder.append(' ');
-            }
-
-            builder.append('*');
-          }
-
-          token = next();
-          continue;
-
-        case EOL:
+      String line = "";
+      // For the first iteration, read the remainder of the current line,
+      // otherwise, after EOL, read the next JSDoc line (including leading whitespace).
+      if (firstLine) {
+        // Read the content from the first line after the annotation.
+        line = stream.getRemainingJSDocLine();
+        firstLine = false;
+      } else if (token == JsDocToken.EOL) {
+        // After an EOL, go to the next line, respecting preservation rules.
         if (option != WhitespaceOption.SINGLE_LINE) {
           builder.append("\n");
         }
-
+        stream.update();
+        token = next();
         ignoreStar = true;
+        continue;
+      }
+
+      // At start of new line or just after EOL, skip a leading STAR if present
+      if (ignoreStar && token == JsDocToken.STAR) {
+        // skip this STAR
         token = next();
-          continue;
-
-        default:
         ignoreStar = false;
-          state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
+        // May be an EOL immediately after the STAR, in which case we continue loop
+        continue;
+      }
 
+      // At a valid token for content, check for end
       if (token == JsDocToken.EOC ||
           token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
           (token == JsDocToken.ANNOTATION &&
               option != WhitespaceOption.PRESERVE)) {
         String multilineText = builder.toString();
-
         if (option != WhitespaceOption.PRESERVE) {
           multilineText = multilineText.trim();
         }
 
         int endLineno = stream.getLineno();
         int endCharno = stream.getCharno();
 
         if (multilineText.length() > 0) {
           jsdocBuilder.markText(multilineText, startLineno, startCharno,
               endLineno, endCharno);
         }
 
         return new ExtractionInfo(multilineText, token);
       }
 
-          if (builder.length() > 0) {
-            builder.append(' ');
-          }
-          builder.append(toString(token));
-
-          line = stream.getRemainingJSDocLine();
-
-          if (option != WhitespaceOption.PRESERVE) {
-            line = trimEnd(line);
-          }
-
+      // For PRESERVE, keep the original line as is, unless it's the last line and only stars/EOL remain.
+      if (option == WhitespaceOption.PRESERVE) {
         builder.append(line);
+      } else {
+        // For other options, trim the line and separate with a space if needed.
+        String trimmedLine = line.trim();
+        if (builder.length() > 0 && trimmedLine.length() > 0) {
+          builder.append(' ');
+        }
+        builder.append(trimmedLine);
+      }
       token = next();
-      }
+      ignoreStar = false;
+
     } while (true);
   }
\ No newline at end of file
