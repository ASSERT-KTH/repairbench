diff --git a/tmp/327176b6-a167-43d9-8720-fed3b571d1e2_buggy.java b/tmp/9694a3c3-3578-4bd9-bac6-00b7a8a592f9_fixed.java
index d8b0158..d3db517 100644
--- a/tmp/327176b6-a167-43d9-8720-fed3b571d1e2_buggy.java
+++ b/tmp/9694a3c3-3578-4bd9-bac6-00b7a8a592f9_fixed.java
@@ -1,113 +1,140 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 private Node tryFoldArrayJoin(Node n) {
   Node callTarget = n.getFirstChild();
 
   if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
     return n;
   }
 
+  // Number of arguments
+  int argCount = n.getChildCount() - 1;
+  if (argCount > 1) {
+    // Only support zero or one argument to join.
+    return n;
+  }
+
   Node right = callTarget.getNext();
   if (right != null) {
     if (!NodeUtil.isImmutableValue(right)) {
       return n;
     }
   }
 
   Node arrayNode = callTarget.getFirstChild();
   Node functionName = arrayNode.getNext();
 
   if ((arrayNode.getType() != Token.ARRAYLIT) ||
       !functionName.getString().equals("join")) {
     return n;
   }
 
   // "," is the default, it doesn't need to be explicit
-
   String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
   StringBuilder sb = null;
   int foldedSize = 0;
   Node prev = null;
   Node elem = arrayNode.getFirstChild();
+  boolean sawNonString = false;
+
   // Merges adjacent String nodes.
   while (elem != null) {
     if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
       if (sb == null) {
         sb = new StringBuilder();
       } else {
         sb.append(joinString);
       }
       sb.append(NodeUtil.getArrayElementStringValue(elem));
     } else {
+      // Check if not a string literal node
       if (sb != null) {
         Preconditions.checkNotNull(prev);
         // + 2 for the quotes.
         foldedSize += sb.length() + 2;
         arrayFoldedChildren.add(
             Node.newString(sb.toString()).copyInformationFrom(prev));
         sb = null;
       }
       foldedSize += InlineCostEstimator.getCost(elem);
       arrayFoldedChildren.add(elem);
+      sawNonString = true;
     }
     prev = elem;
     elem = elem.getNext();
   }
 
   if (sb != null) {
     Preconditions.checkNotNull(prev);
     // + 2 for the quotes.
     foldedSize += sb.length() + 2;
     arrayFoldedChildren.add(
         Node.newString(sb.toString()).copyInformationFrom(prev));
   }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
+  // one for each join string.
+  foldedSize += Math.max(arrayFoldedChildren.size() - 1, 0);
 
   int originalSize = InlineCostEstimator.getCost(n);
+
   switch (arrayFoldedChildren.size()) {
     case 0:
       Node emptyStringNode = Node.newString("");
       n.getParent().replaceChild(n, emptyStringNode);
       reportCodeChange();
       return emptyStringNode;
     case 1:
       Node foldedStringNode = arrayFoldedChildren.remove(0);
       if (foldedSize > originalSize) {
         return n;
       }
       arrayNode.detachChildren();
       if (foldedStringNode.getType() != Token.STRING) {
         // If the Node is not a string literal, ensure that
         // it is coerced to a string.
         Node replacement = new Node(Token.ADD,
             Node.newString("").copyInformationFrom(n),
             foldedStringNode);
         foldedStringNode = replacement;
       }
       n.getParent().replaceChild(n, foldedStringNode);
       reportCodeChange();
       return foldedStringNode;
     default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return n;
+      // If there were no elements folded, skip.
+      boolean didFold = arrayFoldedChildren.size() != arrayNode.getChildCount();
+
+      // If the join string is not ",", we should only fold if we merged contiguous strings.
+      // Otherwise, folding should only be done for the exact match above.
+      if (!didFold) {
+        return n; // Nothing to fold.
       }
+
       int kJoinOverhead = "[].join()".length();
       foldedSize += kJoinOverhead;
       foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
       if (foldedSize > originalSize) {
         return n;
       }
+      // Standardize the join string to be explicit if not "," after folding, otherwise omit.
+      boolean useExplicitJoin = right != null; // keep explicit if supplied
       arrayNode.detachChildren();
       for (Node node : arrayFoldedChildren) {
         arrayNode.addChildToBack(node);
       }
+      // If the join string is "," after folding, we should remove the explicit argument.
+      if (right != null && ",".equals(joinString)) {
+        n.removeChild(right);
+      }
+      // If after folding we still need an explicit join string, but no argument, add it.
+      if (right == null && !"".equals(joinString) && !",".equals(joinString)) {
+        Node explicitJoinArg = Node.newString(joinString);
+        n.addChildToBack(explicitJoinArg);
+      }
       reportCodeChange();
       break;
   }
 
   return n;
 }
\ No newline at end of file
