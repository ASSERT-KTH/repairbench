diff --git a/tmp/8e333704-7342-4904-bc43-616baddee97a_buggy.java b/tmp/27b40039-439a-48e1-8f3b-2e313f4c9c74_fixed.java
index d8b0158..e3229e1 100644
--- a/tmp/8e333704-7342-4904-bc43-616baddee97a_buggy.java
+++ b/tmp/27b40039-439a-48e1-8f3b-2e313f4c9c74_fixed.java
@@ -1,113 +1,137 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   private Node tryFoldArrayJoin(Node n) {
     Node callTarget = n.getFirstChild();
 
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
       return n;
     }
 
     Node right = callTarget.getNext();
-    if (right != null) {
-      if (!NodeUtil.isImmutableValue(right)) {
+    Node joinArg = right;
+    Node secondArg = (right != null) ? right.getNext() : null;
+
+    // Only fold if no more than one argument is present and it is immutable (or absent).
+    if (secondArg != null) {
       return n;
     }
+    if (joinArg != null && !NodeUtil.isImmutableValue(joinArg)) {
+      return n;
     }
 
     Node arrayNode = callTarget.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return n;
     }
 
     // "," is the default, it doesn't need to be explicit
-
-    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
+    String joinString = (joinArg == null) ? "," : NodeUtil.getStringValue(joinArg);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = null;
     int foldedSize = 0;
     Node prev = null;
     Node elem = arrayNode.getFirstChild();
     // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
         if (sb == null) {
           sb = new StringBuilder();
         } else {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getArrayElementStringValue(elem));
       } else {
         if (sb != null) {
           Preconditions.checkNotNull(prev);
           // + 2 for the quotes.
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(
               Node.newString(sb.toString()).copyInformationFrom(prev));
           sb = null;
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       prev = elem;
       elem = elem.getNext();
     }
 
     if (sb != null) {
       Preconditions.checkNotNull(prev);
       // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(
           Node.newString(sb.toString()).copyInformationFrom(prev));
     }
     // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         n.getParent().replaceChild(n, emptyStringNode);
         reportCodeChange();
         return emptyStringNode;
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return n;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
           // If the Node is not a string literal, ensure that
           // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString("").copyInformationFrom(n),
               foldedStringNode);
           foldedStringNode = replacement;
         }
         n.getParent().replaceChild(n, foldedStringNode);
         reportCodeChange();
         return foldedStringNode;
       default:
         // No folding could actually be performed.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
           return n;
         }
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
+        foldedSize += (joinArg != null) ? InlineCostEstimator.getCost(joinArg) : 0;
         if (foldedSize > originalSize) {
           return n;
         }
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
+        // The default for .join() is ','; if the argument was omitted or was ',' we can elide it.
+        // Otherwise, must leave string as .join(<arg>)
+        // If the original had a join argument, and it was not ",", restore it.
+        boolean useDefaultJoin = (joinArg == null) ||
+            (NodeUtil.getStringValue(joinArg).equals(","));
+        Node newJoin = callTarget.cloneTree();
+        Node getPropArray = newJoin.getFirstChild();
+        getPropArray.detachChildren();
+        for (Node node : arrayFoldedChildren) {
+          getPropArray.addChildToBack(node.cloneTree());
+        }
+        Node callNode;
+        if (useDefaultJoin) {
+          // Fold to [a,"b",c].join()
+          callNode = new Node(Token.CALL, newJoin)
+            .copyInformationFrom(n);
+        } else {
+          // Fold to [a,"b",c].join(right)
+          callNode = new Node(Token.CALL, newJoin, joinArg.cloneTree())
+            .copyInformationFrom(n);
+        }
+        n.getParent().replaceChild(n, callNode);
         reportCodeChange();
-        break;
+        return callNode;
     }
-
-    return n;
   }
\ No newline at end of file
