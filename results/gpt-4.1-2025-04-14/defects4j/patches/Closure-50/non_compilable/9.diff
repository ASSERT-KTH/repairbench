diff --git a/tmp/25c4e4cf-1153-445b-9af0-e23f4e4359d1_buggy.java b/tmp/52259361-93c9-490b-b04c-fcf84a46f928_fixed.java
index d8b0158..f39d5c9 100644
--- a/tmp/25c4e4cf-1153-445b-9af0-e23f4e4359d1_buggy.java
+++ b/tmp/52259361-93c9-490b-b04c-fcf84a46f928_fixed.java
@@ -1,113 +1,149 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   private Node tryFoldArrayJoin(Node n) {
     Node callTarget = n.getFirstChild();
 
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
       return n;
     }
 
+    // Only optimize if there's one or zero parameters to join().
+    if (n.getChildCount() > 2) {
+      return n;
+    }
+
     Node right = callTarget.getNext();
     if (right != null) {
       if (!NodeUtil.isImmutableValue(right)) {
         return n;
       }
     }
 
     Node arrayNode = callTarget.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return n;
     }
 
     // "," is the default, it doesn't need to be explicit
-
     String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
+
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = null;
     int foldedSize = 0;
     Node prev = null;
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+    boolean canFoldAll = true;
+    int arraySize = 0;
+
+    // Try to merge maximal sequences of immutable values (including EMPTY)
+    // and preserve non-constant values.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
         if (sb == null) {
           sb = new StringBuilder();
         } else {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getArrayElementStringValue(elem));
       } else {
+        canFoldAll = false;
         if (sb != null) {
           Preconditions.checkNotNull(prev);
           // + 2 for the quotes.
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(
               Node.newString(sb.toString()).copyInformationFrom(prev));
           sb = null;
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       prev = elem;
       elem = elem.getNext();
+      arraySize++;
     }
 
     if (sb != null) {
       Preconditions.checkNotNull(prev);
       // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(
           Node.newString(sb.toString()).copyInformationFrom(prev));
     }
-    // one for each comma.
+    // one for each join string, between elements
     foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         n.getParent().replaceChild(n, emptyStringNode);
         reportCodeChange();
         return emptyStringNode;
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return n;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
           // If the Node is not a string literal, ensure that
           // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString("").copyInformationFrom(n),
               foldedStringNode);
           foldedStringNode = replacement;
         }
         n.getParent().replaceChild(n, foldedStringNode);
         reportCodeChange();
         return foldedStringNode;
       default:
         // No folding could actually be performed.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
           return n;
         }
+        // Only fold if there are no non-immutable values (canFoldAll)
+        // OR if the size win is there (as currently done)
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
         foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
-        if (foldedSize > originalSize) {
+        if (!canFoldAll && foldedSize > originalSize) {
           return n;
         }
+        // For case when we folded a maximal string at one or both ends,
+        // and left some non-immutable in the middle, switch to .join()
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
+
+        // If the join string is ',', it can be omitted.
+        Node joinFuncProp = callTarget;
+        Node newCall = null;
+        if (right == null || (right.isString() && ",".equals(right.getString()))) {
+          // omit .join(',') => .join()
+          newCall = new Node(Token.CALL,
+              NodeUtil.newQualifiedNameNode("Array.prototype.join").copyInformationFrom(joinFuncProp));
+          arrayNode = arrayNode.cloneTree(); // must reacquire after clone
+          newCall.addChildToBack(arrayNode);
+        } else {
+          newCall = new Node(Token.CALL,
+              NodeUtil.newQualifiedNameNode("Array.prototype.join").copyInformationFrom(joinFuncProp));
+          arrayNode = arrayNode.cloneTree();
+          newCall.addChildToBack(arrayNode);
+          newCall.addChildToBack(right.cloneTree());
+        }
+
+        // But, actually on replacement, try to just replace the array literal's children,
+        // and keep the original CALL node if possible.
+        // To preserve side effects for non-pure array elements: keep as .join() call.
         reportCodeChange();
         break;
     }
 
     return n;
   }
\ No newline at end of file
