diff --git a/tmp/3ce59791-a1f7-45de-9231-a6b4b2639838_buggy.java b/tmp/7eed720b-d0fe-4ff0-9457-9a1a8e2d85f4_fixed.java
index ef65dd9..b793024 100644
--- a/tmp/3ce59791-a1f7-45de-9231-a6b4b2639838_buggy.java
+++ b/tmp/7eed720b-d0fe-4ff0-9457-9a1a8e2d85f4_fixed.java
@@ -1,92 +1,124 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+
+    // Merges adjacent String nodes, ONLY merges when all adjacent elements are
+    // immutable values (i.e. literals), and leaves non-immutable elements as-is.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
         if (sb.length() > 0) {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getStringValue(elem));
       } else {
         if (sb.length() > 0) {
           // + 2 for the quotes.
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(Node.newString(sb.toString()));
           sb = new StringBuilder();
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       elem = elem.getNext();
     }
-
     if (sb.length() > 0) {
       // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
     // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
+
+    // When all children are strings AND the join-separator is a string/number/bool,
+    // then the join can fold into a single string.
+    boolean allStrings = true;
+    for (Node child : arrayFoldedChildren) {
+      if (child.getType() != Token.STRING) {
+        allStrings = false;
+        break;
+      }
+    }
+
     switch (arrayFoldedChildren.size()) {
       case 0:
+        // empty array joined => always empty string
         Node emptyStringNode = Node.newString("");
         parent.replaceChild(n, emptyStringNode);
         break;
 
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
+        int maybeStringNodeLen = foldedStringNode.getType() == Token.STRING
+                                 ? foldedStringNode.getString().length() + 2 : foldedSize;
+        if (maybeStringNodeLen > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString(""), foldedStringNode);
+          // If not a string, coerce to string.
+          Node replacement = new Node(Token.ADD, Node.newString(""), foldedStringNode);
           foldedStringNode = replacement;
         }
         parent.replaceChild(n, foldedStringNode);
         break;
 
       default:
-        // No folding could actually be performed.
+        // All folded children are now either strings OR are original non-immutable nodes.
+        // If the arrayFoldedChildren are all STRINGs, fully join.
+        if (allStrings) {
+          // Join them with joinString.
+          StringBuilder result = new StringBuilder();
+          for (int i = 0; i < arrayFoldedChildren.size(); i++) {
+            if (i > 0) {
+              result.append(joinString);
+            }
+            result.append(arrayFoldedChildren.get(i).getString());
+          }
+          Node joined = Node.newString(result.toString());
+          if ((result.length() + 2) > originalSize) {
+            // not a win
+            return;
+          }
+          parent.replaceChild(n, joined);
+        } else {
+          // No folding could actually be performed if array didn't reduce at all.
           if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
             return;
           }
           int kJoinOverhead = "[].join()".length();
           foldedSize += kJoinOverhead;
           foldedSize += InlineCostEstimator.getCost(right);
           if (foldedSize > originalSize) {
             return;
           }
           arrayNode.detachChildren();
           for (Node node : arrayFoldedChildren) {
             arrayNode.addChildToBack(node);
           }
+        }
         break;
     }
     t.getCompiler().reportCodeChange();
   }
\ No newline at end of file
