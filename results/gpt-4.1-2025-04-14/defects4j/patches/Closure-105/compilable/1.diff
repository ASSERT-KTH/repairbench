diff --git a/tmp/52d83f60-2b2d-4376-9b4a-dd6d68c1b10c_buggy.java b/tmp/e3dc7b41-6dd7-4255-879c-aadd3aa4e07f_fixed.java
index ef65dd9..6429ce7 100644
--- a/tmp/52d83f60-2b2d-4376-9b4a-dd6d68c1b10c_buggy.java
+++ b/tmp/e3dc7b41-6dd7-4255-879c-aadd3aa4e07f_fixed.java
@@ -1,92 +1,120 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                        Node parent) {
   if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
     return;
   }
 
   Node arrayNode = left.getFirstChild();
   Node functionName = arrayNode.getNext();
 
   if ((arrayNode.getType() != Token.ARRAYLIT) ||
       !functionName.getString().equals("join")) {
     return;
   }
 
   String joinString = NodeUtil.getStringValue(right);
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
   StringBuilder sb = new StringBuilder();
   int foldedSize = 0;
   Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+  boolean first = true;
+  // Merges adjacent String nodes, except when adjacent to non-string.
   while (elem != null) {
     if (NodeUtil.isImmutableValue(elem)) {
-        if (sb.length() > 0) {
+      if (!first) {
         sb.append(joinString);
       }
       sb.append(NodeUtil.getStringValue(elem));
     } else {
       if (sb.length() > 0) {
         // +2 for the quotes.
         foldedSize += sb.length() + 2;
         arrayFoldedChildren.add(Node.newString(sb.toString()));
         sb = new StringBuilder();
+        first = false;
       }
+      if (!arrayFoldedChildren.isEmpty())
+        foldedSize += joinString.length();
       foldedSize += InlineCostEstimator.getCost(elem);
       arrayFoldedChildren.add(elem);
+      first = false;
     }
     elem = elem.getNext();
+    if (first) first = false;
   }
 
   if (sb.length() > 0) {
     // +2 for the quotes.
+    if (!arrayFoldedChildren.isEmpty())
+      foldedSize += joinString.length();
     foldedSize += sb.length() + 2;
     arrayFoldedChildren.add(Node.newString(sb.toString()));
   }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
 
+  // foldedSize approximation: add (join.len)*(elements-1) for joined nodes above.
   int originalSize = InlineCostEstimator.getCost(n);
+
   switch (arrayFoldedChildren.size()) {
     case 0:
       Node emptyStringNode = Node.newString("");
       parent.replaceChild(n, emptyStringNode);
       break;
 
     case 1:
       Node foldedStringNode = arrayFoldedChildren.remove(0);
       if (foldedSize > originalSize) {
         return;
       }
       arrayNode.detachChildren();
       if (foldedStringNode.getType() != Token.STRING) {
         // If the Node is not a string literal, ensure that
         // it is coerced to a string.
         Node replacement = new Node(Token.ADD,
             Node.newString(""), foldedStringNode);
         foldedStringNode = replacement;
       }
       parent.replaceChild(n, foldedStringNode);
       break;
 
     default:
       // No folding could actually be performed.
+      int nonStringChildren = 0;
+      for (Node c : arrayFoldedChildren) {
+        if (c.getType() != Token.STRING) nonStringChildren++;
+      }
+      if (arrayFoldedChildren.size() == arrayNode.getChildCount() &&
+          nonStringChildren == 0) {
+        // All literals, just fold everything into a string!
+        StringBuilder fullString = new StringBuilder();
+        boolean isFirst = true;
+        for (Node c : arrayFoldedChildren) {
+          if (!isFirst) fullString.append(joinString);
+          fullString.append(NodeUtil.getStringValue(c));
+          isFirst = false;
+        }
+        Node newStr = Node.newString(fullString.toString());
+        if (newStr.toString().length() + 2 > originalSize) return;
+        parent.replaceChild(n, newStr);
+        t.getCompiler().reportCodeChange();
+        return;
+      }
       if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
         return;
       }
       int kJoinOverhead = "[].join()".length();
       foldedSize += kJoinOverhead;
       foldedSize += InlineCostEstimator.getCost(right);
       if (foldedSize > originalSize) {
         return;
       }
       arrayNode.detachChildren();
       for (Node node : arrayFoldedChildren) {
         arrayNode.addChildToBack(node);
       }
       break;
   }
   t.getCompiler().reportCodeChange();
 }
\ No newline at end of file
