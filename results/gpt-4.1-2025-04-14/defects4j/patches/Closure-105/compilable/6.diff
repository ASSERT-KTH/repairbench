diff --git a/tmp/6e64219b-cfba-4102-82da-d0c3ab27d1ca_buggy.java b/tmp/5af2f6f6-cd67-4e4e-a8d4-bd969a926ddb_fixed.java
index ef65dd9..949c978 100644
--- a/tmp/6e64219b-cfba-4102-82da-d0c3ab27d1ca_buggy.java
+++ b/tmp/5af2f6f6-cd67-4e4e-a8d4-bd969a926ddb_fixed.java
@@ -1,92 +1,113 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                        Node parent) {
   if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
     return;
   }
 
   Node arrayNode = left.getFirstChild();
   Node functionName = arrayNode.getNext();
 
   if ((arrayNode.getType() != Token.ARRAYLIT) ||
       !functionName.getString().equals("join")) {
     return;
   }
 
   String joinString = NodeUtil.getStringValue(right);
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
   StringBuilder sb = new StringBuilder();
   int foldedSize = 0;
+
   Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+  boolean prevImmutable = false;
+
   while (elem != null) {
     if (NodeUtil.isImmutableValue(elem)) {
       if (sb.length() > 0) {
         sb.append(joinString);
       }
       sb.append(NodeUtil.getStringValue(elem));
+      prevImmutable = true;
     } else {
       if (sb.length() > 0) {
         // + 2 for the quotes.
         foldedSize += sb.length() + 2;
         arrayFoldedChildren.add(Node.newString(sb.toString()));
         sb = new StringBuilder();
+      } else if (prevImmutable && !arrayFoldedChildren.isEmpty()) {
+        // For cases like ["", "", foo], this inserts an empty string
+        // as a string literal if there were empty leading strings
       }
       foldedSize += InlineCostEstimator.getCost(elem);
       arrayFoldedChildren.add(elem);
+      prevImmutable = false;
     }
     elem = elem.getNext();
   }
 
   if (sb.length() > 0) {
     // + 2 for the quotes.
     foldedSize += sb.length() + 2;
     arrayFoldedChildren.add(Node.newString(sb.toString()));
   }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
+  // one for each comma/join string between arrayFoldedChildren if not folded completely.
+  foldedSize += Math.max(0, arrayFoldedChildren.size() - 1);
 
   int originalSize = InlineCostEstimator.getCost(n);
   switch (arrayFoldedChildren.size()) {
     case 0:
       Node emptyStringNode = Node.newString("");
       parent.replaceChild(n, emptyStringNode);
+      t.getCompiler().reportCodeChange();
       break;
 
     case 1:
       Node foldedStringNode = arrayFoldedChildren.remove(0);
+      if (foldedStringNode.getType() == Token.STRING) {
+        if (foldedSize > originalSize) {
+          return;
+        }
+        arrayNode.detachChildren();
+        parent.replaceChild(n, foldedStringNode);
+        t.getCompiler().reportCodeChange();
+        break;
+      } else {
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
         // If the Node is not a string literal, ensure that
         // it is coerced to a string.
         Node replacement = new Node(Token.ADD,
             Node.newString(""), foldedStringNode);
-          foldedStringNode = replacement;
-        }
-        parent.replaceChild(n, foldedStringNode);
+        parent.replaceChild(n, replacement);
+        t.getCompiler().reportCodeChange();
         break;
+      }
 
     default:
+      // Check if any folding was actually performed.
+      int originalArrayChildCount = 0;
+      for (Node c = arrayNode.getFirstChild(); c != null; c = c.getNext()) {
+        originalArrayChildCount++;
+      }
+      if (arrayFoldedChildren.size() == originalArrayChildCount) {
         // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
         return;
       }
       int kJoinOverhead = "[].join()".length();
       foldedSize += kJoinOverhead;
       foldedSize += InlineCostEstimator.getCost(right);
       if (foldedSize > originalSize) {
         return;
       }
       arrayNode.detachChildren();
       for (Node node : arrayFoldedChildren) {
         arrayNode.addChildToBack(node);
       }
-        break;
-    }
       t.getCompiler().reportCodeChange();
+      break;
+  }
 }
\ No newline at end of file
