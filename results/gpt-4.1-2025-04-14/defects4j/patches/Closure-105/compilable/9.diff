diff --git a/tmp/611d0fe5-ff48-4965-bc09-e3ef5e0ea5c5_buggy.java b/tmp/831bbe9f-c3a6-4032-964a-91c21a055567_fixed.java
index ef65dd9..4fd4264 100644
--- a/tmp/611d0fe5-ff48-4965-bc09-e3ef5e0ea5c5_buggy.java
+++ b/tmp/831bbe9f-c3a6-4032-964a-91c21a055567_fixed.java
@@ -1,92 +1,111 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
+
+    boolean atLeastOneNonString = false;
+
     // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
+        String v = NodeUtil.getStringValue(elem);
         if (sb.length() > 0) {
           sb.append(joinString);
         }
-        sb.append(NodeUtil.getStringValue(elem));
+        sb.append(v);
       } else {
         if (sb.length() > 0) {
           // + 2 for the quotes.
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(Node.newString(sb.toString()));
           sb = new StringBuilder();
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
+        atLeastOneNonString = true;
       }
       elem = elem.getNext();
     }
 
     if (sb.length() > 0) {
       // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
     // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         parent.replaceChild(n, emptyStringNode);
         break;
 
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return;
-        }
+        // Only fold deeply if it's a string literal, or
+        // if it's a size reduction.
+        if (foldedStringNode.getType() == Token.STRING ||
+            foldedSize <= originalSize) {
           arrayNode.detachChildren();
           if (foldedStringNode.getType() != Token.STRING) {
             // If the Node is not a string literal, ensure that
             // it is coerced to a string.
             Node replacement = new Node(Token.ADD,
                 Node.newString(""), foldedStringNode);
             foldedStringNode = replacement;
           }
           parent.replaceChild(n, foldedStringNode);
+        }
         break;
 
       default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
+        // Don't fold at all if nothing could be folded.
+        if (arrayFoldedChildren.size() == arrayNode.getChildCount())
           return;
-        }
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
         foldedSize += InlineCostEstimator.getCost(right);
-        if (foldedSize > originalSize) {
+
+        // Only fold if it's a size win. However, if there are no non-string elements,
+        // then it's always safe to replace it by the string literal.
+        boolean canFold = (!atLeastOneNonString) || (foldedSize <= originalSize);
+
+        if (!canFold) {
           return;
         }
+
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
+
+        // If after folding, only a single element remains (all strings), we can return
+        // the string literal directly.
+        if (arrayFoldedChildren.size() == 1 && !atLeastOneNonString) {
+          Node single = arrayFoldedChildren.get(0);
+          parent.replaceChild(n, single);
+        }
         break;
     }
     t.getCompiler().reportCodeChange();
   }
\ No newline at end of file
