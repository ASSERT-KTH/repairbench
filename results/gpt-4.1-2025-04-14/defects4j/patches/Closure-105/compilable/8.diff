diff --git a/tmp/be9468a6-a748-4c79-8b2a-07da615e0d92_buggy.java b/tmp/5a2259e6-88cb-4b3b-9d35-390f3e7ba03e_fixed.java
index ef65dd9..54ac99c 100644
--- a/tmp/be9468a6-a748-4c79-8b2a-07da615e0d92_buggy.java
+++ b/tmp/5a2259e6-88cb-4b3b-9d35-390f3e7ba03e_fixed.java
@@ -1,92 +1,138 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                        Node parent) {
   if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
     return;
   }
 
   Node arrayNode = left.getFirstChild();
   Node functionName = arrayNode.getNext();
 
   if ((arrayNode.getType() != Token.ARRAYLIT) ||
       !functionName.getString().equals("join")) {
     return;
   }
 
   String joinString = NodeUtil.getStringValue(right);
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
   StringBuilder sb = new StringBuilder();
   int foldedSize = 0;
   Node elem = arrayNode.getFirstChild();
+
   // Merges adjacent String nodes.
   while (elem != null) {
     if (NodeUtil.isImmutableValue(elem)) {
       if (sb.length() > 0) {
         sb.append(joinString);
       }
       sb.append(NodeUtil.getStringValue(elem));
     } else {
       if (sb.length() > 0) {
         // + 2 for the quotes.
         foldedSize += sb.length() + 2;
         arrayFoldedChildren.add(Node.newString(sb.toString()));
         sb = new StringBuilder();
       }
       foldedSize += InlineCostEstimator.getCost(elem);
       arrayFoldedChildren.add(elem);
     }
     elem = elem.getNext();
   }
 
   if (sb.length() > 0) {
     // + 2 for the quotes.
     foldedSize += sb.length() + 2;
     arrayFoldedChildren.add(Node.newString(sb.toString()));
   }
   // one for each comma.
   foldedSize += arrayFoldedChildren.size() - 1;
 
   int originalSize = InlineCostEstimator.getCost(n);
+
+  // Check if we can fully fold to a string, e.g. all values were string/number/boolean/undefined/null
+  boolean allImmutable = true;
+  for (Node node : arrayFoldedChildren) {
+    if (node.getType() != Token.STRING) {
+      allImmutable = false;
+      break;
+    }
+  }
+
+  if (allImmutable) {
+    // Fold the whole join to a string literal
+    StringBuilder total = new StringBuilder();
+    for (int i = 0; i < arrayFoldedChildren.size(); i++) {
+      if (i > 0) {
+        total.append(joinString);
+      }
+      total.append(arrayFoldedChildren.get(i).getString());
+    }
+    Node foldedStringNode = Node.newString(total.toString());
+    if ((foldedStringNode.getString().length() + 2) > originalSize) {
+      return;
+    }
+    parent.replaceChild(n, foldedStringNode);
+    t.getCompiler().reportCodeChange();
+    return;
+  }
+
   switch (arrayFoldedChildren.size()) {
     case 0:
       Node emptyStringNode = Node.newString("");
       parent.replaceChild(n, emptyStringNode);
+      t.getCompiler().reportCodeChange();
       break;
 
     case 1:
       Node foldedStringNode = arrayFoldedChildren.remove(0);
       if (foldedSize > originalSize) {
         return;
       }
       arrayNode.detachChildren();
       if (foldedStringNode.getType() != Token.STRING) {
         // If the Node is not a string literal, ensure that
         // it is coerced to a string.
         Node replacement = new Node(Token.ADD,
             Node.newString(""), foldedStringNode);
         foldedStringNode = replacement;
       }
       parent.replaceChild(n, foldedStringNode);
+      t.getCompiler().reportCodeChange();
       break;
 
     default:
       // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
+      // If we couldn't merge any children, don't bother changing the code.
+      int oldChildCnt = arrayNode.getChildCount();
+      if (arrayFoldedChildren.size() == oldChildCnt) {
+        boolean changed = false;
+        // However, (['', '', foo, ''].join(',')) should become [',',foo,''].join(',')
+        // Only do folding if at least one merge happened (i.e., at least one child is a longer merged string or a ,), otherwise bail out.
+        elem = arrayNode.getFirstChild();
+        for (Node node : arrayFoldedChildren) {
+          if (node != elem) {
+            changed = true;
+            break;
+          }
+          elem = elem.getNext();
+        }
+        if (!changed) {
           return;
         }
+      }
       int kJoinOverhead = "[].join()".length();
       foldedSize += kJoinOverhead;
       foldedSize += InlineCostEstimator.getCost(right);
       if (foldedSize > originalSize) {
         return;
       }
       arrayNode.detachChildren();
       for (Node node : arrayFoldedChildren) {
         arrayNode.addChildToBack(node);
       }
-        break;
-    }
       t.getCompiler().reportCodeChange();
+      break;
+  }
 }
\ No newline at end of file
