diff --git a/tmp/bc25f0d1-d0f0-4ef1-87d4-0de18369309b_buggy.java b/tmp/1f5a4350-b744-4173-99ab-b15f6899190e_fixed.java
index ef65dd9..4097982 100644
--- a/tmp/bc25f0d1-d0f0-4ef1-87d4-0de18369309b_buggy.java
+++ b/tmp/1f5a4350-b744-4173-99ab-b15f6899190e_fixed.java
@@ -1,92 +1,125 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                        Node parent) {
   if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
     return;
   }
 
   Node arrayNode = left.getFirstChild();
   Node functionName = arrayNode.getNext();
 
   if ((arrayNode.getType() != Token.ARRAYLIT) ||
       !functionName.getString().equals("join")) {
     return;
   }
 
   String joinString = NodeUtil.getStringValue(right);
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
   StringBuilder sb = new StringBuilder();
   int foldedSize = 0;
   Node elem = arrayNode.getFirstChild();
+  boolean justMerged = false;
   // Merges adjacent String nodes.
   while (elem != null) {
     if (NodeUtil.isImmutableValue(elem)) {
       if (sb.length() > 0) {
         sb.append(joinString);
       }
       sb.append(NodeUtil.getStringValue(elem));
+      justMerged = true;
     } else {
       if (sb.length() > 0) {
         // + 2 for the quotes.
         foldedSize += sb.length() + 2;
         arrayFoldedChildren.add(Node.newString(sb.toString()));
         sb = new StringBuilder();
+        justMerged = false;
       }
       foldedSize += InlineCostEstimator.getCost(elem);
       arrayFoldedChildren.add(elem);
+      justMerged = false;
     }
     elem = elem.getNext();
   }
 
   if (sb.length() > 0) {
     // + 2 for the quotes.
     foldedSize += sb.length() + 2;
     arrayFoldedChildren.add(Node.newString(sb.toString()));
   }
   // one for each comma.
   foldedSize += arrayFoldedChildren.size() - 1;
 
   int originalSize = InlineCostEstimator.getCost(n);
+
+  // If all elements are immutable, fold to string directly, regardless of array size.
+  boolean allImmutable = true;
+  for (Node child = arrayNode.getFirstChild(); child != null; child = child.getNext()) {
+    if (!NodeUtil.isImmutableValue(child)) {
+      allImmutable = false;
+      break;
+    }
+  }
+  if (allImmutable) {
+    // Build the joined string.
+    StringBuilder literalJoin = new StringBuilder();
+    boolean first = true;
+    for (Node child = arrayNode.getFirstChild(); child != null; child = child.getNext()) {
+      if (!first) {
+        literalJoin.append(joinString);
+      }
+      literalJoin.append(NodeUtil.getStringValue(child));
+      first = false;
+    }
+    Node folded = Node.newString(literalJoin.toString());
+    parent.replaceChild(n, folded);
+    t.getCompiler().reportCodeChange();
+    return;
+  }
+
   switch (arrayFoldedChildren.size()) {
     case 0:
       Node emptyStringNode = Node.newString("");
       parent.replaceChild(n, emptyStringNode);
+      t.getCompiler().reportCodeChange();
       break;
 
-      case 1:
+    case 1: {
       Node foldedStringNode = arrayFoldedChildren.remove(0);
       if (foldedSize > originalSize) {
         return;
       }
       arrayNode.detachChildren();
       if (foldedStringNode.getType() != Token.STRING) {
         // If the Node is not a string literal, ensure that
         // it is coerced to a string.
         Node replacement = new Node(Token.ADD,
             Node.newString(""), foldedStringNode);
         foldedStringNode = replacement;
       }
       parent.replaceChild(n, foldedStringNode);
+      t.getCompiler().reportCodeChange();
       break;
+    }
 
     default:
       // No folding could actually be performed.
       if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
         return;
       }
       int kJoinOverhead = "[].join()".length();
       foldedSize += kJoinOverhead;
       foldedSize += InlineCostEstimator.getCost(right);
       if (foldedSize > originalSize) {
         return;
       }
       arrayNode.detachChildren();
       for (Node node : arrayFoldedChildren) {
         arrayNode.addChildToBack(node);
       }
-        break;
-    }
       t.getCompiler().reportCodeChange();
+      break;
+  }
 }
\ No newline at end of file
