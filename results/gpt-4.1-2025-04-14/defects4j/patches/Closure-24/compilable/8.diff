diff --git a/tmp/b63ed83e-3c7c-444a-be06-2480b971a225_buggy.java b/tmp/bb401871-ca4c-41ce-9d14-a1fad4a2111c_fixed.java
index 602226b..f369ddb 100644
--- a/tmp/b63ed83e-3c7c-444a-be06-2480b971a225_buggy.java
+++ b/tmp/bb401871-ca4c-41ce-9d14-a1fad4a2111c_fixed.java
@@ -1,26 +1,32 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
-        int type = n.getType();
     Node parent = n.getParent();
-        if (parent.isVar()) {
+    if (parent != null && parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
         aliases.put(name, aliasVar);
 
         String qualifiedName =
             aliasVar.getInitialValue().getQualifiedName();
         transformation.addAlias(name, qualifiedName);
         // Bleeding functions already get a BAD_PARAMETERS error, so just
         // do nothing.
         // Parameters of the scope function also get a BAD_PARAMETERS
         // error.
       } else {
         // TODO(robbyw): Support using locals for private variables.
         report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
       }
+    } else {
+      // Report if it's a function declaration or parameter, as they are not allowed inside goog.scope
+      // Function declarations: parent is SCRIPT or BLOCK, node is FUNCTION, and var is declared.
+      if (n.isFunction() && (parent != null) &&
+          (parent.isScript() || parent.isBlock())) {
+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+      }
     }
   }
 }
\ No newline at end of file
