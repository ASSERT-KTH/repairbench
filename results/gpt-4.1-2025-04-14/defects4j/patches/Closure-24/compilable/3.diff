diff --git a/tmp/7ace5685-6e79-46fa-b67b-3bda132b62e6_buggy.java b/tmp/0a2a5dc8-157d-45b8-bd74-4241bef01415_fixed.java
index 602226b..9c63c2a 100644
--- a/tmp/7ace5685-6e79-46fa-b67b-3bda132b62e6_buggy.java
+++ b/tmp/0a2a5dc8-157d-45b8-bd74-4241bef01415_fixed.java
@@ -1,26 +1,32 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
-        int type = n.getType();
+    // 'n' can sometimes be null for certain synthetic variables.
+    if (n == null) {
+      continue;
+    }
+    // Only process variable declarations of form "var x = ...".
     Node parent = n.getParent();
-        if (parent.isVar()) {
+    if (parent != null && parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
         aliases.put(name, aliasVar);
 
         String qualifiedName =
             aliasVar.getInitialValue().getQualifiedName();
         transformation.addAlias(name, qualifiedName);
         // Bleeding functions already get a BAD_PARAMETERS error, so just
         // do nothing.
         // Parameters of the scope function also get a BAD_PARAMETERS
         // error.
       } else {
-          // TODO(robbyw): Support using locals for private variables.
         report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
       }
+    } else if (n.isFunction()) {
+      // Function declarations in goog.scope should also report an error.
+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
