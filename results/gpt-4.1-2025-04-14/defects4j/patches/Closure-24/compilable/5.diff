diff --git a/tmp/f5e8d601-c919-4bdf-a907-2ac609a81cdd_buggy.java b/tmp/1d0ad977-2e87-49a2-9913-9988f3452a17_fixed.java
index 602226b..2063dfb 100644
--- a/tmp/f5e8d601-c919-4bdf-a907-2ac609a81cdd_buggy.java
+++ b/tmp/1d0ad977-2e87-49a2-9913-9988f3452a17_fixed.java
@@ -1,26 +1,33 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
-        int type = n.getType();
     Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+    // Only process VAR declarations; skip function declarations (bleeding functions)
+    if (parent != null && parent.isVar()) {
+      // Only suspicious when there is an initializer (var x = ...)
+      if (n.hasChildren()) {
+        Node initializer = n.getFirstChild();
+        if (initializer.isQualifiedName()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
           aliases.put(name, aliasVar);
 
           String qualifiedName =
               aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
           // Bleeding functions already get a BAD_PARAMETERS error, so just
           // do nothing.
           // Parameters of the scope function also get a BAD_PARAMETERS
           // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
+          // Not a qualified name initializer: error
+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+        }
+      } else {
+        // No initializer: error (e.g., var x;)
         report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
       }
     }
   }
 }
\ No newline at end of file
