diff --git a/tmp/28bd8d88-da0b-4ebe-9a16-93ee608ad1b4_buggy.java b/tmp/54626a4f-af52-4d8f-8f98-37194850ab2c_fixed.java
index 602226b..33076cd 100644
--- a/tmp/28bd8d88-da0b-4ebe-9a16-93ee608ad1b4_buggy.java
+++ b/tmp/54626a4f-af52-4d8f-8f98-37194850ab2c_fixed.java
@@ -1,26 +1,29 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
-        if (parent.isVar()) {
+    if (parent != null && parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
         aliases.put(name, aliasVar);
 
         String qualifiedName =
             aliasVar.getInitialValue().getQualifiedName();
         transformation.addAlias(name, qualifiedName);
         // Bleeding functions already get a BAD_PARAMETERS error, so just
         // do nothing.
         // Parameters of the scope function also get a BAD_PARAMETERS
         // error.
       } else {
-          // TODO(robbyw): Support using locals for private variables.
+        // Handles all non-alias locals and destructuring
         report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
       }
+    } else if (n.isFunction()) {
+      // Function declarations (bleeding functions or function statements)
+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
