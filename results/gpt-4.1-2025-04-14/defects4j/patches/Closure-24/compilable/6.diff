diff --git a/tmp/979745ed-74b8-4253-9f10-89023226e9ab_buggy.java b/tmp/60d19c28-b836-4454-8a8a-7973b251420e_fixed.java
index 602226b..43d8205 100644
--- a/tmp/979745ed-74b8-4253-9f10-89023226e9ab_buggy.java
+++ b/tmp/60d19c28-b836-4454-8a8a-7973b251420e_fixed.java
@@ -1,26 +1,33 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
-        int type = n.getType();
+    if (n == null) {
+      continue;
+    }
     Node parent = n.getParent();
+    if (parent == null) {
+      continue;
+    }
     if (parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
         aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+        Node init = aliasVar.getInitialValue();
+        if (init != null) {
+          String qualifiedName = init.getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+        }
+        // Bleeding functions and parameters are handled elsewhere.
       } else {
-          // TODO(robbyw): Support using locals for private variables.
+        // Non-alias local declarations in goog.scope bodies are not allowed.
         report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
       }
+    } else if (n.isFunction()) {
+      // Function declarations at the top of a goog.scope are not allowed.
+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
