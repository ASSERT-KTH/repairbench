diff --git a/tmp/2e49638d-c480-483f-ad32-7ecde317e434_buggy.java b/tmp/8441d47a-9575-4216-be8a-d746f23785c8_fixed.java
index 602226b..3d9c6f1 100644
--- a/tmp/2e49638d-c480-483f-ad32-7ecde317e434_buggy.java
+++ b/tmp/8441d47a-9575-4216-be8a-d746f23785c8_fixed.java
@@ -1,26 +1,28 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
-        int type = n.getType();
     Node parent = n.getParent();
-        if (parent.isVar()) {
+    if (parent != null && parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
         aliases.put(name, aliasVar);
 
         String qualifiedName =
             aliasVar.getInitialValue().getQualifiedName();
         transformation.addAlias(name, qualifiedName);
         // Bleeding functions already get a BAD_PARAMETERS error, so just
         // do nothing.
         // Parameters of the scope function also get a BAD_PARAMETERS
         // error.
       } else {
-          // TODO(robbyw): Support using locals for private variables.
+        // Variables that are not aliases for qualified names should report an error
         report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
       }
+    } else if (n.isFunction()) {
+      // Report error for functions defined in goog.scope
+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
