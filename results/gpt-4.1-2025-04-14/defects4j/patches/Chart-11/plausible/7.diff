diff --git a/tmp/09cefffd-d3be-43e2-9a80-e073e875c9dc_buggy.java b/tmp/3e402fb8-c9ab-4ecf-9aa7-924161adfa62_fixed.java
index ad7255c..5ad95d7 100644
--- a/tmp/09cefffd-d3be-43e2-9a80-e073e875c9dc_buggy.java
+++ b/tmp/3e402fb8-c9ab-4ecf-9aa7-924161adfa62_fixed.java
@@ -1,42 +1,56 @@
-    /**
-     * Tests two polygons for equality.  If both are <code>null</code> this
-     * method returns <code>true</code>.
-     *
-     * @param p1  path 1 (<code>null</code> permitted).
-     * @param p2  path 2 (<code>null</code> permitted).
-     *
-     * @return A boolean.
-     */
 public static boolean equal(GeneralPath p1, GeneralPath p2) {
     if (p1 == null) {
         return (p2 == null);
     }
     if (p2 == null) {
         return false;
     }
     if (p1.getWindingRule() != p2.getWindingRule()) {
         return false;
     }
     PathIterator iterator1 = p1.getPathIterator(null);
-        PathIterator iterator2 = p1.getPathIterator(null);
+    PathIterator iterator2 = p2.getPathIterator(null); // FIX: was p1.getPathIterator(null);
     double[] d1 = new double[6];
     double[] d2 = new double[6];
-        boolean done = iterator1.isDone() && iterator2.isDone();
-        while (!done) {
-            if (iterator1.isDone() != iterator2.isDone()) {
+    while (true) {
+        boolean done1 = iterator1.isDone();
+        boolean done2 = iterator2.isDone();
+        if (done1 && done2) {
+            return true;
+        }
+        if (done1 != done2) {
             return false;
         }
         int seg1 = iterator1.currentSegment(d1);
         int seg2 = iterator2.currentSegment(d2);
         if (seg1 != seg2) {
             return false;
         }
-            if (!Arrays.equals(d1, d2)) {
+        int numCoords;
+        switch (seg1) {
+            case PathIterator.SEG_MOVETO:
+            case PathIterator.SEG_LINETO:
+                numCoords = 2;
+                break;
+            case PathIterator.SEG_QUADTO:
+                numCoords = 4;
+                break;
+            case PathIterator.SEG_CUBICTO:
+                numCoords = 6;
+                break;
+            case PathIterator.SEG_CLOSE:
+                numCoords = 0;
+                break;
+            default:
+                // Shouldn't happen
                 return false;
         }
+        for (int i = 0; i < numCoords; ++i) {
+            if (Double.compare(d1[i], d2[i]) != 0) {
+                return false;
+            }
+        }
         iterator1.next();
         iterator2.next();
-            done = iterator1.isDone() && iterator2.isDone();
     }
-        return true;
 }
\ No newline at end of file
