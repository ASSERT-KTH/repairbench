diff --git a/tmp/7c34c8d4-67a2-4271-8edc-3c1e84da0f58_buggy.java b/tmp/35d09f5c-46c0-424c-96d9-e034dca4c7e7_fixed.java
index 730ab7d..8734c79 100644
--- a/tmp/7c34c8d4-67a2-4271-8edc-3c1e84da0f58_buggy.java
+++ b/tmp/35d09f5c-46c0-424c-96d9-e034dca4c7e7_fixed.java
@@ -1,48 +1,49 @@
 /**
  * Parses the raw bytes read from the central directory extra
  * field with knowledge which fields are expected to be there.
  *
  * <p>All four fields inside the zip64 extended information extra
  * field are optional and must only be present if their corresponding
  * entry inside the central directory contains the correct magic
  * value.</p>
  */
 public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                         boolean hasCompressedSize,
                                         boolean hasRelativeHeaderOffset,
                                         boolean hasDiskStart)
     throws ZipException {
     if (rawCentralDirectoryData != null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
+        int minimumLength = (hasUncompressedSize ? DWORD : 0)
             + (hasCompressedSize ? DWORD : 0)
             + (hasRelativeHeaderOffset ? DWORD : 0)
             + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+        if (rawCentralDirectoryData.length < minimumLength) {
             throw new ZipException("central directory zip64 extended"
                                    + " information extra field's length"
                                    + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
+                                   + " data.  Expected at least "
+                                   + minimumLength + " bytes but is "
                                    + rawCentralDirectoryData.length);
         }
         int offset = 0;
         if (hasUncompressedSize) {
             size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
             offset += DWORD;
         }
         if (hasCompressedSize) {
             compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                      offset);
             offset += DWORD;
         }
         if (hasRelativeHeaderOffset) {
             relativeHeaderOffset =
                 new ZipEightByteInteger(rawCentralDirectoryData, offset);
             offset += DWORD;
         }
         if (hasDiskStart) {
             diskStart = new ZipLong(rawCentralDirectoryData, offset);
             offset += WORD;
         }
+        // ignore any extra trailing bytes
     }
 }
\ No newline at end of file
