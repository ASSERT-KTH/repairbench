diff --git a/tmp/9882f989-647e-42a6-9c0b-6fee85fe9fdc_buggy.java b/tmp/feddfcb5-3b43-43bf-8407-c0792e2e5424_fixed.java
index 4e8b037..cc6a72b 100644
--- a/tmp/9882f989-647e-42a6-9c0b-6fee85fe9fdc_buggy.java
+++ b/tmp/feddfcb5-3b43-43bf-8407-c0792e2e5424_fixed.java
@@ -1,20 +1,43 @@
-    public List getValues(final Option option,
-                          List defaultValues) {
+public List getValues(final Option option, List defaultValues) {
     // initialize the return list
     List valueList = (List) values.get(option);
 
-        // grab the correct default values
-        if ((valueList == null) || valueList.isEmpty()) {
-            valueList = defaultValues;
+    // If valueList is null, try to get defaults from defaultValues or this.defaultValues
+    if (valueList == null || valueList.isEmpty()) {
+        // Try supplied defaultValues first
+        List computedDefaults = defaultValues;
+        if ((computedDefaults == null || computedDefaults.isEmpty()) && this.defaultValues != null) {
+            computedDefaults = (List) this.defaultValues.get(option);
         }
-
-        // augment the list with the default values
-        if ((valueList == null) || valueList.isEmpty()) {
-            valueList = (List) this.defaultValues.get(option);
-        }
-                // if there are more default values as specified, add them to
-                // the list.
-                    // copy the list first
-        
+        // Compose result: any present value(s) plus missing defaults
+        if (computedDefaults == null || computedDefaults.isEmpty()) {
             return valueList == null ? Collections.EMPTY_LIST : valueList;
+        } else {
+            return new ArrayList(computedDefaults);
+        }
+    } else {
+        // Value list has some user values, check if more needed from defaults
+        int userCount = valueList.size();
+        int max = Integer.MAX_VALUE;
+        if (option.getArgument() != null) {
+            if (option.getArgument().getMaximum() != null) {
+                max = option.getArgument().getMaximum().intValue();
+            }
+        }
+        List result = new ArrayList(valueList);
+        int totalNeeded = Math.min(max, result.size());
+        List computedDefaults = defaultValues;
+        if ((computedDefaults == null || computedDefaults.isEmpty()) && this.defaultValues != null) {
+            computedDefaults = (List) this.defaultValues.get(option);
+        }
+        if (computedDefaults != null && result.size() < max) {
+            // Only append enough defaults to reach the maximum
+            int remaining = max - result.size();
+            int i = 0;
+            for (Iterator it = computedDefaults.iterator(); it.hasNext() && i < remaining; i++) {
+                result.add(it.next());
+            }
+        }
+        return result;
+    }
 }
\ No newline at end of file
