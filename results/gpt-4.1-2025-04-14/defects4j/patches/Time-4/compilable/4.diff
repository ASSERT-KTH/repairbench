diff --git a/tmp/950e7bb1-fff5-48ed-938a-036241dcc77b_buggy.java b/tmp/6b7e8922-a950-4fd7-9d45-8857b93a7f1d_fixed.java
index 7ea7ac9..e342a8b 100644
--- a/tmp/950e7bb1-fff5-48ed-938a-036241dcc77b_buggy.java
+++ b/tmp/6b7e8922-a950-4fd7-9d45-8857b93a7f1d_fixed.java
@@ -1,63 +1,62 @@
-    /**
-     * Gets a copy of this date with the specified field set to a new value.
-     * <p>
-     * If this partial did not previously support the field, the new one will.
-     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
-     * <p>
-     * For example, if the field type is <code>dayOfMonth</code> then the day
-     * would be changed/added in the returned instance.
-     *
-     * @param fieldType  the field type to set, not null
-     * @param value  the value to set
-     * @return a copy of this instance with the field set
-     * @throws IllegalArgumentException if the value is null or invalid
-     */
 public Partial with(DateTimeFieldType fieldType, int value) {
     if (fieldType == null) {
         throw new IllegalArgumentException("The field type must not be null");
     }
     int index = indexOf(fieldType);
     if (index == -1) {
         DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
         int[] newValues = new int[newTypes.length];
 
         // find correct insertion point to keep largest-smallest order
         int i = 0;
         DurationField unitField = fieldType.getDurationType().getField(iChronology);
         if (unitField.isSupported()) {
             for (; i < iTypes.length; i++) {
                 DateTimeFieldType loopType = iTypes[i];
                 DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
                 if (loopUnitField.isSupported()) {
                     int compare = unitField.compareTo(loopUnitField);
                     if (compare > 0) {
                         break;
                     } else if (compare == 0) {
                         DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
                         DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
                         if (rangeField.compareTo(loopRangeField) > 0) {
                             break;
                         }
                     }
                 }
             }
         }
         System.arraycopy(iTypes, 0, newTypes, 0, i);
         System.arraycopy(iValues, 0, newValues, 0, i);
         newTypes[i] = fieldType;
         newValues[i] = value;
         System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
         System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
+
         // use public constructor to ensure full validation
         // this isn't overly efficient, but is safe
         Partial newPartial = new Partial(iChronology, newTypes, newValues);
+        // Validate *before* returning, which will throw if invalid
         iChronology.validate(newPartial, newValues);
         return newPartial;
     }
-        if (value == getValue(index)) {
-            return this;
-        }
+    // Validation must happen before setting the value and returning,
+    // even if the value is the same, to preserve invalid input rejection.
     int[] newValues = getValues();
     newValues = getField(index).set(this, index, newValues, value);
+
+    // If value unchanged, early return (optimization, so test works as expected)
+    boolean unchanged = true;
+    for (int j = 0; j < newValues.length; j++) {
+        if (newValues[j] != iValues[j]) {
+            unchanged = false;
+            break;
+        }
+    }
+    if (unchanged) {
+        return this;
+    }
     return new Partial(this, newValues);
 }
\ No newline at end of file
