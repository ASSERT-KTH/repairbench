diff --git a/tmp/820f492e-f277-42c9-a786-cd99cdea8d01_buggy.java b/tmp/6dd8354d-9d3e-4174-b1ab-79bd0d34e6aa_fixed.java
index 7ea7ac9..4a002dd 100644
--- a/tmp/820f492e-f277-42c9-a786-cd99cdea8d01_buggy.java
+++ b/tmp/6dd8354d-9d3e-4174-b1ab-79bd0d34e6aa_fixed.java
@@ -1,63 +1,68 @@
-    /**
-     * Gets a copy of this date with the specified field set to a new value.
-     * <p>
-     * If this partial did not previously support the field, the new one will.
-     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
-     * <p>
-     * For example, if the field type is <code>dayOfMonth</code> then the day
-     * would be changed/added in the returned instance.
-     *
-     * @param fieldType  the field type to set, not null
-     * @param value  the value to set
-     * @return a copy of this instance with the field set
-     * @throws IllegalArgumentException if the value is null or invalid
-     */
 public Partial with(DateTimeFieldType fieldType, int value) {
     if (fieldType == null) {
         throw new IllegalArgumentException("The field type must not be null");
     }
     int index = indexOf(fieldType);
     if (index == -1) {
         DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
         int[] newValues = new int[newTypes.length];
 
         // find correct insertion point to keep largest-smallest order
         int i = 0;
         DurationField unitField = fieldType.getDurationType().getField(iChronology);
         if (unitField.isSupported()) {
             for (; i < iTypes.length; i++) {
                 DateTimeFieldType loopType = iTypes[i];
                 DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
                 if (loopUnitField.isSupported()) {
                     int compare = unitField.compareTo(loopUnitField);
                     if (compare > 0) {
                         break;
                     } else if (compare == 0) {
                         DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
                         DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
                         if (rangeField.compareTo(loopRangeField) > 0) {
                             break;
                         }
                     }
                 }
             }
         }
         System.arraycopy(iTypes, 0, newTypes, 0, i);
         System.arraycopy(iValues, 0, newValues, 0, i);
         newTypes[i] = fieldType;
         newValues[i] = value;
         System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
         System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
+
         // use public constructor to ensure full validation
         // this isn't overly efficient, but is safe
         Partial newPartial = new Partial(iChronology, newTypes, newValues);
         iChronology.validate(newPartial, newValues);
+
+        // Ensure fields are consistent
+        for (int j = 0; j < newPartial.size(); j++) {
+            for (int k = j + 1; k < newPartial.size(); k++) {
+                if (newPartial.getFieldType(j).equals(newPartial.getFieldType(k))) {
+                    throw new IllegalArgumentException("Duplicate field types are not allowed");
+                }
+                if (!newPartial.getField(j).isSupported() || !newPartial.getField(k).isSupported()) {
+                    throw new IllegalArgumentException("Unsupported field");
+                }
+                // Check for overlaps: no two fields can refer to the same underlying data
+                if (newPartial.getField(j).getRangeDurationField() != null &&
+                    newPartial.getField(j).getRangeDurationField().equals(newPartial.getField(k).getDurationField())) {
+                    throw new IllegalArgumentException("Fields " + newPartial.getFieldType(j) +
+                        " and " + newPartial.getFieldType(k) + " overlap");
+                }
+            }
+        }
         return newPartial;
     }
     if (value == getValue(index)) {
         return this;
     }
     int[] newValues = getValues();
     newValues = getField(index).set(this, index, newValues, value);
     return new Partial(this, newValues);
 }
\ No newline at end of file
