diff --git a/tmp/32b720ce-58ba-4fa1-b0eb-86ea2df6b2a9_buggy.java b/tmp/d4c324bf-b8e2-41ff-a026-3429bb7bdfb9_fixed.java
index b4d4f38..828dda9 100644
--- a/tmp/32b720ce-58ba-4fa1-b0eb-86ea2df6b2a9_buggy.java
+++ b/tmp/d4c324bf-b8e2-41ff-a026-3429bb7bdfb9_fixed.java
@@ -1,123 +1,153 @@
 /** Accept a step, triggering events and step handlers.
  * @param interpolator step interpolator
  * @param y state vector at step end time, must be reset if an event
  * asks for resetting or if an events stops integration during the step
  * @param yDot placeholder array where to put the time derivative of the state vector
  * @param tEnd final integration time
  * @return time at end of step
  * @exception MaxCountExceededException if the interpolator throws one because
  * the number of functions evaluations is exceeded
  * @exception NoBracketingException if the location of an event cannot be bracketed
  * @exception DimensionMismatchException if arrays dimensions do not match equations settings
  * @since 2.2
  */
 protected double acceptStep(final AbstractStepInterpolator interpolator,
                             final double[] y, final double[] yDot, final double tEnd)
     throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {
 
     double previousT = interpolator.getGlobalPreviousTime();
     final double currentT = interpolator.getGlobalCurrentTime();
 
     // initialize the events states if needed
     if (! statesInitialized) {
         for (EventState state : eventsStates) {
             state.reinitializeBegin(interpolator);
         }
         statesInitialized = true;
     }
 
     // search for next events that may occur during the step
     final int orderingSign = interpolator.isForward() ? +1 : -1;
     SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
 
         /** {@inheritDoc} */
         public int compare(EventState es0, EventState es1) {
-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
+            int cmp = orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
+            if (cmp != 0) {
+                return cmp;
+            }
+            // If two events have the same event time, preserve original ordering to ensure determinism
+            // since TreeSet requires unique keys, but two events can legitimately occur at the same time
+            // So distinguish by hash, or object identity
+            return System.identityHashCode(es0) - System.identityHashCode(es1);
         }
 
     });
 
     for (final EventState state : eventsStates) {
         if (state.evaluateStep(interpolator)) {
             // the event occurs during the current step
             occuringEvents.add(state);
         }
     }
 
     while (!occuringEvents.isEmpty()) {
 
         // handle the chronologically first event
         final Iterator<EventState> iterator = occuringEvents.iterator();
         final EventState currentEvent = iterator.next();
         iterator.remove();
 
         // restrict the interpolator to the first part of the step, up to the event
         final double eventT = currentEvent.getEventTime();
         interpolator.setSoftPreviousTime(previousT);
         interpolator.setSoftCurrentTime(eventT);
 
         // get state at event time
         interpolator.setInterpolatedTime(eventT);
         final double[] eventY = interpolator.getInterpolatedState().clone();
 
-                // advance all event states to current time
-                currentEvent.stepAccepted(eventT, eventY);
-                isLastStep = currentEvent.stop();
+        // advance all event states to current time, including for events at the same time
+        // Accept all events that occur at the current event time
+        List<EventState> handledEvents = new ArrayList<EventState>();
+        handledEvents.add(currentEvent);
+        // add any other events in occuringEvents at the same event time
+        for (EventState evt : occuringEvents) {
+            if (Precision.equalsIncludingNaN(evt.getEventTime(), eventT, 1)) {
+                handledEvents.add(evt);
+            }
+        }
+
+        boolean stop = false;
+        boolean needReset = false;
+        for (EventState evt : handledEvents) {
+            evt.stepAccepted(eventT, eventY);
+            stop = stop || evt.stop();
+        }
 
         // handle the first part of the step, up to the event
         for (final StepHandler handler : stepHandlers) {
-                    handler.handleStep(interpolator, isLastStep);
+            handler.handleStep(interpolator, stop);
         }
 
-                if (isLastStep) {
-                    // the event asked to stop integration
+        if (stop) {
             System.arraycopy(eventY, 0, y, 0, y.length);
-                    for (final EventState remaining : occuringEvents) {
+            for (EventState remaining : eventsStates) {
+                if (!handledEvents.contains(remaining)) {
                     remaining.stepAccepted(eventT, eventY);
                 }
+            }
             return eventT;
         }
 
-                boolean needReset = currentEvent.reset(eventT, eventY);
+        for (EventState evt : handledEvents) {
+            needReset = needReset || evt.reset(eventT, eventY);
+        }
         if (needReset) {
-                    // some event handler has triggered changes that
-                    // invalidate the derivatives, we need to recompute them
+            // some event handler has triggered changes that invalidate the derivatives, we need to recompute them
             System.arraycopy(eventY, 0, y, 0, y.length);
             computeDerivatives(eventT, y, yDot);
             resetOccurred = true;
-                    for (final EventState remaining : occuringEvents) {
+            for (EventState remaining : eventsStates) {
+                if (!handledEvents.contains(remaining)) {
                     remaining.stepAccepted(eventT, eventY);
                 }
+            }
             return eventT;
         }
 
+        // Remove all handled events from occuringEvents (those at the same event time)
+        for (int i = 1; i < handledEvents.size(); ++i) {
+            occuringEvents.remove(handledEvents.get(i));
+        }
+
         // prepare handling of the remaining part of the step
         previousT = eventT;
         interpolator.setSoftPreviousTime(eventT);
         interpolator.setSoftCurrentTime(currentT);
 
-                // check if the same event occurs again in the remaining part of the step
-                if (currentEvent.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
-                    occuringEvents.add(currentEvent);
+        // check if any handled event occurs again in the remaining part of the step
+        for (EventState evt : handledEvents) {
+            if (evt.evaluateStep(interpolator)) {
+                occuringEvents.add(evt);
+            }
         }
-
     }
 
     // last part of the step, after the last event
     interpolator.setInterpolatedTime(currentT);
     final double[] currentY = interpolator.getInterpolatedState();
     for (final EventState state : eventsStates) {
         state.stepAccepted(currentT, currentY);
         isLastStep = isLastStep || state.stop();
     }
     isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
     // handle the remaining part of the step, after all events if any
     for (StepHandler handler : stepHandlers) {
         handler.handleStep(interpolator, isLastStep);
     }
 
     return currentT;
 
 }
\ No newline at end of file
