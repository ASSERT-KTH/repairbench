diff --git a/tmp/aa2aaadd-60fa-4413-838d-7f65699f4183_buggy.java b/tmp/1d88e3ce-f559-461e-a77f-594f756e4af9_fixed.java
index 66e3d01..0c0ab0d 100644
--- a/tmp/aa2aaadd-60fa-4413-838d-7f65699f4183_buggy.java
+++ b/tmp/1d88e3ce-f559-461e-a77f-594f756e4af9_fixed.java
@@ -1,34 +1,46 @@
 /**
  * Determines whether the given value may be assigned to a define.
  *
  * @param val The value being assigned.
  * @param defines The list of names of existing defines.
  */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
   switch (val.getType()) {
     case Token.STRING:
     case Token.NUMBER:
     case Token.TRUE:
     case Token.FALSE:
       return true;
 
     // Binary operators are only valid if both children are valid.
     case Token.BITAND:
-      case Token.BITNOT:
     case Token.BITOR:
     case Token.BITXOR:
+    case Token.ADD:
+      // Only support ADD for string and number, but here, we allow ADD like & and |.
+      // Only allow if both children are valid.
+      if (val.getFirstChild() != null && val.getSecondChild() != null) {
+        return isValidDefineValue(val.getFirstChild(), defines)
+            && isValidDefineValue(val.getSecondChild(), defines);
+      }
+      return false;
 
-      // Uniary operators are valid if the child is valid.
+    // Unary operators are valid if the child is valid.
     case Token.NOT:
     case Token.NEG:
+    case Token.BITNOT:
+      if (val.getFirstChild() != null) {
         return isValidDefineValue(val.getFirstChild(), defines);
+      }
+      return false;
 
     // Names are valid if and only if they are defines themselves.
     case Token.NAME:
     case Token.GETPROP:
       if (val.isQualifiedName()) {
         return defines.contains(val.getQualifiedName());
       }
+      return false;
   }
   return false;
 }
\ No newline at end of file
