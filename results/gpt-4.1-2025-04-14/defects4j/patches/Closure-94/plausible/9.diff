diff --git a/tmp/ad51b3d0-04e6-4eb5-8a65-c540cfc8913f_buggy.java b/tmp/5996565d-4f27-411e-af99-6f24111c7a95_fixed.java
index 66e3d01..780d08c 100644
--- a/tmp/ad51b3d0-04e6-4eb5-8a65-c540cfc8913f_buggy.java
+++ b/tmp/5996565d-4f27-411e-af99-6f24111c7a95_fixed.java
@@ -1,34 +1,48 @@
 /**
  * Determines whether the given value may be assigned to a define.
  *
  * @param val The value being assigned.
  * @param defines The list of names of existing defines.
  */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
   switch (val.getType()) {
     case Token.STRING:
     case Token.NUMBER:
     case Token.TRUE:
     case Token.FALSE:
       return true;
 
     // Binary operators are only valid if both children are valid.
     case Token.BITAND:
     case Token.BITNOT:
     case Token.BITOR:
     case Token.BITXOR:
+    case Token.ADD:
+      {
+        // Check that both children are valid (for binary ops: add, bit operators)
+        Node firstChild = val.getFirstChild();
+        Node secondChild = firstChild.getNext();
+        // Unary ops like BITNOT just have one child
+        if (secondChild == null) {
+          // treat as unary operator: bitnot
+          return isValidDefineValue(firstChild, defines);
+        } else {
+          return isValidDefineValue(firstChild, defines) && isValidDefineValue(secondChild, defines);
+        }
+      }
 
-      // Uniary operators are valid if the child is valid.
+    // Unary operators are valid if the child is valid.
     case Token.NOT:
     case Token.NEG:
       return isValidDefineValue(val.getFirstChild(), defines);
 
     // Names are valid if and only if they are defines themselves.
     case Token.NAME:
     case Token.GETPROP:
       if (val.isQualifiedName()) {
         return defines.contains(val.getQualifiedName());
       }
+      break;
   }
   return false;
 }
\ No newline at end of file
