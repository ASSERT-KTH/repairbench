diff --git a/tmp/fbf16110-813d-42b5-9f76-92680000a354_buggy.java b/tmp/030563aa-6b6a-40a8-87db-b9fcb078bde0_fixed.java
index 66e3d01..3c6308d 100644
--- a/tmp/fbf16110-813d-42b5-9f76-92680000a354_buggy.java
+++ b/tmp/030563aa-6b6a-40a8-87db-b9fcb078bde0_fixed.java
@@ -1,34 +1,42 @@
   /**
    * Determines whether the given value may be assigned to a define.
    *
    * @param val The value being assigned.
    * @param defines The list of names of existing defines.
    */
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
 
       // Binary operators are only valid if both children are valid.
       case Token.BITAND:
       case Token.BITNOT:
       case Token.BITOR:
       case Token.BITXOR:
+      case Token.ADD: // <-- FIX: Allow addition operator for define values.
+        // Binary operators: must have exactly two children, both valid
+        Node left = val.getFirstChild();
+        Node right = left != null ? left.getNext() : null;
+        return left != null && right != null &&
+            isValidDefineValue(left, defines) &&
+            isValidDefineValue(right, defines);
 
-      // Uniary operators are valid if the child is valid.
+      // Unary operators are valid if the child is valid.
       case Token.NOT:
       case Token.NEG:
-        return isValidDefineValue(val.getFirstChild(), defines);
+        Node child = val.getFirstChild();
+        return child != null && isValidDefineValue(child, defines);
 
       // Names are valid if and only if they are defines themselves.
       case Token.NAME:
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
     }
     return false;
   }
\ No newline at end of file
