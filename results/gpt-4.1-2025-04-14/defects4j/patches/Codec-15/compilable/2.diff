diff --git a/tmp/237bfa9c-fa62-4d96-9239-da7f1b3c6b72_buggy.java b/tmp/2ac7f161-8a91-49c9-96f2-eb8f373df6db_fixed.java
index b529d33..e52c603 100644
--- a/tmp/237bfa9c-fa62-4d96-9239-da7f1b3c6b72_buggy.java
+++ b/tmp/2ac7f161-8a91-49c9-96f2-eb8f373df6db_fixed.java
@@ -1,29 +1,17 @@
-    /**
-     * Used internally by the Soundex algorithm.
-     *
-     * Consonants from the same code group separated by W or H are treated as one.
-     *
-     * @param str
-     *                  the cleaned working string to encode (in upper case).
-     * @param index
-     *                  the character position to encode
-     * @return Mapping code for a particular character
-     * @throws IllegalArgumentException
-     *                  if the character is not mapped
-     */
 private char getMappingCode(final String str, final int index) {
     // map() throws IllegalArgumentException
     final char mappedChar = this.map(str.charAt(index));
     // HW rule check
     if (index > 1 && mappedChar != '0') {
         final char hwChar = str.charAt(index - 1);
         if ('H' == hwChar || 'W' == hwChar) {
             final char preHWChar = str.charAt(index - 2);
-                final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
-                    return 0;
+            final char preHWCode = this.map(preHWChar);
+            // Only zero out if preHWCode equals mappedChar and preHWCode != '0'
+            if (preHWCode == mappedChar && preHWCode != '0') {
+                return '0';
             }
         }
     }
     return mappedChar;
 }
\ No newline at end of file
