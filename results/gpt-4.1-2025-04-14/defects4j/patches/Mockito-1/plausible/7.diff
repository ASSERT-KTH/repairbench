diff --git a/tmp/eefb35bd-e512-43b6-8ddf-07fe36e4c107_buggy.java b/tmp/a3e1ca9c-33c6-4dde-8772-f5469badb457_fixed.java
index 1c875ad..23da015 100644
--- a/tmp/eefb35bd-e512-43b6-8ddf-07fe36e4c107_buggy.java
+++ b/tmp/a3e1ca9c-33c6-4dde-8772-f5469badb457_fixed.java
@@ -1,31 +1,25 @@
     public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        // Support for varargs
+        Object[] rawArguments = invocation.getRawArguments();
+        int rawArgsCount = rawArguments == null ? 0 : rawArguments.length;
+        int matcherCount = matchers.size();
 
-        } else {
-            for (int position = 0; position < matchers.size(); position++) {
+        for (int position = 0; position < matcherCount; position++) {
             Matcher m = matchers.get(position);
+
             if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+                Object toCapture = null;
+
+                // For varargs methods, capture argument array as whole for the last matcher, if needed
+                if (invocation.getMethod().isVarArgs() && position == matcherCount - 1 && rawArgsCount >= matcherCount) {
+                    // At this point, the last argument in rawArguments is the vararg array
+                    toCapture = rawArguments.length > position ? rawArguments[position] : null;
+                } else {
+                    // Non-vararg or other arguments: capture directly
+                    toCapture = rawArguments.length > position ? rawArguments[position] : null;
                 }
+
+                ((CapturesArguments) m).captureFrom(toCapture);
             }
         }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
     }
\ No newline at end of file
