diff --git a/tmp/c28a6fed-0983-4510-b0c5-85070ddef531_buggy.java b/tmp/f2cf9f3a-5bdd-46f8-9a5c-9172e0c17a3f_fixed.java
index 1c875ad..ae861ab 100644
--- a/tmp/c28a6fed-0983-4510-b0c5-85070ddef531_buggy.java
+++ b/tmp/f2cf9f3a-5bdd-46f8-9a5c-9172e0c17a3f_fixed.java
@@ -1,31 +1,32 @@
 public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+    Object[] rawArguments = invocation.getRawArguments();
+    int rawArgumentsLength = rawArguments.length;
+    boolean vararg = invocation.getMethod().isVarArgs();
+    int matcherSize = matchers.size();
 
-        } else {
-            for (int position = 0; position < matchers.size(); position++) {
+    for (int position = 0; position < matcherSize; position++) {
         Matcher m = matchers.get(position);
         if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+            if (vararg && position == matcherSize - 1 && rawArgumentsLength > position) {
+                // Last matcher for varargs method, handle varargs argument(s)
+                Object varargArray = rawArguments[position];
+                if (varargArray == null) {
+                    // handle null vararg array
+                    ((CapturesArguments) m).captureFrom(null);
+                } else if (varargArray.getClass().isArray()) {
+                    int len = Array.getLength(varargArray);
+                    for (int i = 0; i < len; i++) {
+                        ((CapturesArguments) m).captureFrom(Array.get(varargArray, i));
                     }
+                } else {
+                    // Defensive, should not happen. Just capture object itself.
+                    ((CapturesArguments) m).captureFrom(varargArray);
+                }
+            } else if (rawArgumentsLength > position) {
+                // Normal (non-vararg) argument, or before varargs
+                ((CapturesArguments) m).captureFrom(rawArguments[position]);
+            }
+            // else: more matchers than arguments, skip, nothing to capture
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
