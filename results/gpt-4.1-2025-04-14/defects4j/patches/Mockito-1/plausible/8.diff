diff --git a/tmp/8de4f3e2-1760-4a17-906a-ef98fd869a47_buggy.java b/tmp/8524739b-dde1-49c0-aade-93091c254332_fixed.java
index 1c875ad..9d06010 100644
--- a/tmp/8de4f3e2-1760-4a17-906a-ef98fd869a47_buggy.java
+++ b/tmp/8524739b-dde1-49c0-aade-93091c254332_fixed.java
@@ -1,31 +1,53 @@
 public void captureArgumentsFrom(Invocation invocation) {
+    // Handles varargs case
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        int rawArgCount = invocation.getRawArguments().length;
+        int matcherCount = matchers.size();
 
+        // The last parameter in the method is the vararg array.
+        int indexOfVararg = rawArgCount - 1;
+
+        for (int position = 0; position < matcherCount; position++) {
+            Matcher m = matchers.get(position);
+            if (m instanceof CapturesArguments) {
+                // If this is the matcher for the vararg parameter and matcherCount doesn't match rawArgCount,
+                // we need to capture all elements of the vararg array separately.
+                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {
+                    Object varargsArray = invocation.getRawArguments()[position];
+                    if (varargsArray != null && varargsArray.getClass().isArray()) {
+                        int length = Array.getLength(varargsArray);
+                        for (int i = 0; i < length; i++) {
+                            ((CapturesArguments) m).captureFrom(Array.get(varargsArray, i));
+                        }
                     } else {
-            for (int position = 0; position < matchers.size(); position++) {
+                        // handle null varargs: matcher should still see null
+                        ((CapturesArguments) m).captureFrom(varargsArray);
+                    }
+                    // We've captured all varargs, so we do not need to process further matchers
+                    return;
+                } else {
+                    Object arg = null;
+                    // Don't cause ArrayIndexOutOfBounds if there are fewer method args than matchers
+                    if (position < rawArgCount) {
+                        arg = invocation.getRawArguments()[position];
+                    }
+                    ((CapturesArguments) m).captureFrom(arg);
+                }
+            }
+        }
+    } else {
+        // non-varargs: simple, one-to-one capture
+        int argCount = invocation.getRawArguments().length;
+        int matcherCount = matchers.size();
+        for (int position = 0; position < matcherCount; position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+                Object arg = null;
+                if (position < argCount) {
+                    arg = invocation.getRawArguments()[position];
+                }
+                ((CapturesArguments) m).captureFrom(arg);
             }
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
