diff --git a/tmp/8f185473-5aeb-4c72-ac0e-a2762fed46db_buggy.java b/tmp/1ba2e7ef-4c40-4161-9ccf-3d0ae1ad8e1a_fixed.java
index 1c875ad..058fc00 100644
--- a/tmp/8f185473-5aeb-4c72-ac0e-a2762fed46db_buggy.java
+++ b/tmp/1ba2e7ef-4c40-4161-9ccf-3d0ae1ad8e1a_fixed.java
@@ -1,31 +1,27 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
+        // Handle varargs correctly when capturing arguments
+        int rawArgLength = invocation.getRawArguments().length;
+        int matcherCount = matchers.size();
+        for (int position = 0; position < matcherCount; position++) {
+            Matcher m = matchers.get(position);
+            if (m instanceof CapturesArguments) {
+                Object argumentValue;
+                if (rawArgLength > position) {
+                    argumentValue = invocation.getRawArguments()[position];
+                } else {
+                    // If there are more matchers than arguments, pass null (this can happen with varargs and nulls)
+                    argumentValue = null;
+                }
+                ((CapturesArguments) m).captureFrom(argumentValue);
+            }
+        }
     } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
