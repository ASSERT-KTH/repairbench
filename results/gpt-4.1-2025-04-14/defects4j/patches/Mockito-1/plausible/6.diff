diff --git a/tmp/b4810af3-2db4-4b4b-87f5-0d364d02765e_buggy.java b/tmp/ff802db4-a63f-4ecc-ba1e-06e089bf33d3_fixed.java
index 1c875ad..26a822e 100644
--- a/tmp/b4810af3-2db4-4b4b-87f5-0d364d02765e_buggy.java
+++ b/tmp/ff802db4-a63f-4ecc-ba1e-06e089bf33d3_fixed.java
@@ -1,31 +1,43 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
+        Object[] rawArguments = invocation.getRawArguments();
+        int matcherCount = matchers.size();
+        int argCount = rawArguments.length;
+        int varargPosition = invocation.getMethod().getParameterTypes().length - 1;
+        for (int position = 0; position < matcherCount; position++) {
+            Matcher m = matchers.get(position);
+            if (m instanceof CapturesArguments) {
+                // handle vararg argument
+                boolean isVarargParameter = (position == varargPosition);
+                boolean isRawVararg = isVarargParameter && argCount == matcherCount && rawArguments[position] != null && rawArguments[position].getClass().isArray();
+                // If it's the vararg parameter and the matcher is a vararg matcher, capture the array elements
+                boolean isVarargMatcher = isVarargParameter && m instanceof CapturesArguments;
+                // If position before varargs
+                if (!isVarargParameter) {
+                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+                } else {
+                    // Handle capturing from varargs
+                    Object varargArray = rawArguments.length > position ? rawArguments[position] : null;
+                    if (varargArray != null && varargArray.getClass().isArray()) {
+                        int varargLength = Array.getLength(varargArray);
+                        for (int i = 0; i < varargLength; i++) {
+                            ((CapturesArguments) m).captureFrom(Array.get(varargArray, i));
+                        }
+                    } else {
+                        // possibly called with null varargs -- skip or just capture null
+                        if (rawArguments.length > position) {
+                            ((CapturesArguments) m).captureFrom(rawArguments[position]);
+                        }
+                    }
+                }
+            }
+        }
     } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
