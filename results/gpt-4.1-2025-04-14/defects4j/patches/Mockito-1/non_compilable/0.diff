diff --git a/tmp/b2117e34-9da4-4688-8c40-508633094dfc_buggy.java b/tmp/1d7bd00c-bac0-4210-8452-e91809445889_fixed.java
index 1c875ad..7716282 100644
--- a/tmp/b2117e34-9da4-4688-8c40-508633094dfc_buggy.java
+++ b/tmp/1d7bd00c-bac0-4210-8452-e91809445889_fixed.java
@@ -1,31 +1,46 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        int rawArgCount = invocation.getRawArguments().length;
+        int matcherCount = matchers.size();
+        int indexOfVararg = rawArgCount - 1;
+        // In the vararg case, matchers.size() may be less, equal, or greater than rawArgCount
+        // The last matcher may be a vararg matcher; if so, and it implements CapturesArguments, we capture all items from the vararg array
+        for (int position = 0; position < matcherCount; position++) {
+            Matcher m = matchers.get(position);
 
+            if (m instanceof CapturesArguments) {
+                // handle the vararg matcher case
+                boolean isVarargMatcher = isVariableArgument(invocation, position) && isVarargMatcher(m);
+
+                if (isVarargMatcher) {
+                    Object varargArray = invocation.getRawArguments()[position];
+                    int len = varargArray == null ? 0 : java.lang.reflect.Array.getLength(varargArray);
+                    for (int i = 0; i < len; i++) {
+                        ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(varargArray, i));
+                    }
+                    // since we've captured all varargs already, it does not make sense to process other matchers.
+                    return;
+                } else if (rawArgCount > position) {
+                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
+                }
+            }
+        }
     } else {
+        // same logic as before for non-varargs
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
+}
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+// Helper methods (typically exist in enclosing class)
+private boolean isVariableArgument(Invocation invocation, int position) {
+    return invocation.getMethod().isVarArgs() && position == invocation.getRawArguments().length - 1;
+}
+private boolean isVarargMatcher(Matcher m) {
+    return m.getClass().getSimpleName().equals("LocalizedMatcher") &&
+            m.toString().contains("AnyVararg") || m.toString().contains("anyVararg()");
 }
\ No newline at end of file
