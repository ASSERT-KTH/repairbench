diff --git a/tmp/fb6828ab-b7d1-44e5-97c5-2e1a46a11a02_buggy.java b/tmp/9905d7c0-95f6-4056-a60c-0208680368cf_fixed.java
index 1c875ad..cd5b416 100644
--- a/tmp/fb6828ab-b7d1-44e5-97c5-2e1a46a11a02_buggy.java
+++ b/tmp/9905d7c0-95f6-4056-a60c-0208680368cf_fixed.java
@@ -1,31 +1,45 @@
 public void captureArgumentsFrom(Invocation invocation) {
+    Object[] rawArguments = invocation.getRawArguments();
+    int numMatchers = matchers.size();
+
+    // Handle varargs
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
+        int totalArgs = rawArguments == null ? 0 : rawArguments.length;
+        int indexOfVararg = totalArgs - 1;
+        for (int position = 0; position < numMatchers; position++) {
+            Matcher m = matchers.get(position);
+            if (m instanceof CapturesArguments) {
+                // If varargs and the matcher is for the varargs parameter (last matcher)
+                if (totalArgs > 0 && position == indexOfVararg && indexOfVararg >= 0) {
+                    Object varargArray = rawArguments[indexOfVararg];
+                    if (isVarargMatcher(m) && varargArray != null && varargArray.getClass().isArray()) {
+                        int varargLength = Array.getLength(varargArray);
+                        for (int i = 0; i < varargLength; i++) {
+                            ((CapturesArguments) m).captureFrom(Array.get(varargArray, i));
+                        }
+                        // since we've captured all varargs already, it does not make sense to process other matchers.
+                        return;
                     } else {
-            for (int position = 0; position < matchers.size(); position++) {
+                        ((CapturesArguments) m).captureFrom(varargArray);
+                    }
+                } else if (rawArguments != null && position < totalArgs) {
+                    ((CapturesArguments) m).captureFrom(rawArguments[position]);
+                }
+            }
+        }
+    } else {
+        for (int position = 0; position < numMatchers; position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
+}
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+// Helper method to determine if the matcher is intended for varargs
+private static boolean isVarargMatcher(Matcher matcher) {
+    // This implementation might need to be adjusted to your actual varargs matchers
+    // but in Mockito core internal it is often named as AnyVararg or similar
+    return matcher instanceof org.mockito.internal.matchers.VarargMatcher;
 }
\ No newline at end of file
