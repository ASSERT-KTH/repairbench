diff --git a/tmp/25ed3db5-adea-41ac-9a80-c3f141b7a1d7_buggy.java b/tmp/8119d6fd-9c1b-4934-85e3-04b2e72e5a5d_fixed.java
index 1c875ad..42ae288 100644
--- a/tmp/25ed3db5-adea-41ac-9a80-c3f141b7a1d7_buggy.java
+++ b/tmp/8119d6fd-9c1b-4934-85e3-04b2e72e5a5d_fixed.java
@@ -1,31 +1,44 @@
 public void captureArgumentsFrom(Invocation invocation) {
+    int rawArgsLen = invocation.getRawArguments().length;
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
+        // We need to handle varargs correctly for argument capturing
+        int paramLen = matchers.size(); // number of matchers (the way InvocationMatcher is constructed, this matches params)
+        // Usually paramLen == invocation.getRawArguments().length
+        for (int position = 0; position < matchers.size(); position++) {
+            Matcher m = matchers.get(position);
+            if (m instanceof CapturesArguments) {
+                // If vararg matcher, capture as array, otherwise capture as is
+                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {
+                    Object array = invocation.getRawArguments()[position];
+                    if (array != null && array.getClass().isArray()) {
+                        int arrayLength = java.lang.reflect.Array.getLength(array);
+                        for (int i = 0; i < arrayLength; i++) {
+                            ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(array, i));
+                        }
+                    }
+                    // Nothing to capture if array is null or 0 length
+                } else {
+                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
+                }
+            }
+        }
     } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
+}
+
+// Helper methods assumed to be present in class as per commented out code
+private boolean isVariableArgument(Invocation invocation, int index) {
+    // Returns true if this is the last parameter and is varargs
+    return invocation.getMethod().isVarArgs() && (index == invocation.getRawArguments().length - 1);
+}
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+private boolean isVarargMatcher(Matcher m) {
+    // matcher is for any vararg or any vararg style matcher, etc.
+    return m instanceof org.mockito.internal.matchers.VarargMatcher;
 }
\ No newline at end of file
