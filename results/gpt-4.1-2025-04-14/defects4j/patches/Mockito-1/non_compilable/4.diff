diff --git a/tmp/555fc356-0408-46a9-9649-d150afbe5e72_buggy.java b/tmp/9079fe67-cacc-446b-a62f-6a5980a5c25c_fixed.java
index 1c875ad..b4f8e75 100644
--- a/tmp/555fc356-0408-46a9-9649-d150afbe5e72_buggy.java
+++ b/tmp/9079fe67-cacc-446b-a62f-6a5980a5c25c_fixed.java
@@ -1,31 +1,38 @@
 public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+    // If the method is varargs, we need to handle the vararg parameters specially.
+    int rawArgsLength = invocation.getRawArguments().length;
+    int matchersSize = matchers.size();
 
-        } else {
-            for (int position = 0; position < matchers.size(); position++) {
+    for (int position = 0; position < matchersSize; position++) {
         Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+        if (!(m instanceof CapturesArguments)) continue;
+
+        // Only capture if there's a real argument at the position
+        if (rawArgsLength > position) {
+            // If this is a vararg method, and this argument is the vararg array, and matcher is a vararg matcher
+            boolean isVarArgs = invocation.getMethod().isVarArgs();
+            boolean isLastArg = position == (matchersSize - 1);
+            if (isVarArgs && isLastArg && isVarargMatcher(m)) {
+                Object array = invocation.getRawArguments()[position];
+                // Could be null if vararg passed as `null`
+                if (array != null && array.getClass().isArray()) {
+                    for (int i = 0; i < Array.getLength(array); i++) {
+                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
+                    }
+                } else {
+                    // If the vararg array is null, capture `null`
+                    ((CapturesArguments) m).captureFrom(array);
+                }
+            } else {
+                ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
+            }
         }
     }
 }
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+// Helper method, typically present in this class or base class
+private boolean isVarargMatcher(Matcher matcher) {
+    // This could check for a specific marker interface/class for vararg matchers.
+    // Here's an example (replace with actual logic from your codebase if different):
+    return matcher instanceof org.mockito.internal.matchers.VarargMatcher;
 }
\ No newline at end of file
