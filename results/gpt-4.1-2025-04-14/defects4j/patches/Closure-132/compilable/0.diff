diff --git a/tmp/1561a582-d4e0-4819-8188-27b6c58caf90_buggy.java b/tmp/04ec0e72-d121-49db-9c68-71e51f1c213f_fixed.java
index e4fca3c..3e62552 100644
--- a/tmp/1561a582-d4e0-4819-8188-27b6c58caf90_buggy.java
+++ b/tmp/04ec0e72-d121-49db-9c68-71e51f1c213f_fixed.java
@@ -1,239 +1,301 @@
   /**
    * Try turning IF nodes into smaller HOOKs
    *
    * Returns the replacement for n or the original if no replacement was
    * necessary.
    */
   private Node tryMinimizeIf(Node n) {
 
     Node parent = n.getParent();
 
     Node cond = n.getFirstChild();
 
     /* If the condition is a literal, we'll let other
      * optimizations try to remove useless code.
      */
     if (NodeUtil.isLiteralValue(cond, true)) {
       return n;
     }
 
     Node thenBranch = cond.getNext();
     Node elseBranch = thenBranch.getNext();
 
     if (elseBranch == null) {
       if (isFoldableExpressBlock(thenBranch)) {
         Node expr = getBlockExpression(thenBranch);
         if (!late && isPropertyAssignmentInExpression(expr)) {
           // Keep opportunities for CollapseProperties such as
           // a.longIdentifier || a.longIdentifier = ... -> var a = ...;
           // until CollapseProperties has been run.
           return n;
         }
 
         if (cond.isNot()) {
           // if(!x)bar(); -> x||bar();
           if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&
               isLowerPrecedenceInExpression(expr.getFirstChild(),
                   OR_PRECEDENCE)) {
             // It's not okay to add two sets of parentheses.
             return n;
           }
 
           Node or = IR.or(
               cond.removeFirstChild(),
               expr.removeFirstChild()).srcref(n);
           Node newExpr = NodeUtil.newExpr(or);
           parent.replaceChild(n, newExpr);
           reportCodeChange();
 
           return newExpr;
         }
 
         // if(x)foo(); -> x&&foo();
         if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
             isLowerPrecedenceInExpression(expr.getFirstChild(),
                 AND_PRECEDENCE)) {
           // One additional set of parentheses is worth the change even if
           // there is no immediate code size win. However, two extra pair of
           // {}, we would have to think twice. (unless we know for sure the
           // we can further optimize its parent.
           return n;
         }
 
         n.removeChild(cond);
         Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);
         Node newExpr = NodeUtil.newExpr(and);
         parent.replaceChild(n, newExpr);
         reportCodeChange();
 
         return newExpr;
       } else {
 
         // Try to combine two IF-ELSE
         if (NodeUtil.isStatementBlock(thenBranch) &&
             thenBranch.hasOneChild()) {
           Node innerIf = thenBranch.getFirstChild();
 
           if (innerIf.isIf()) {
             Node innerCond = innerIf.getFirstChild();
             Node innerThenBranch = innerCond.getNext();
             Node innerElseBranch = innerThenBranch.getNext();
 
             if (innerElseBranch == null &&
                  !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
                    isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {
               n.detachChildren();
               n.addChildToBack(
                   IR.and(
                       cond,
                       innerCond.detachFromParent())
                       .srcref(cond));
               n.addChildrenToBack(innerThenBranch.detachFromParent());
               reportCodeChange();
               // Not worth trying to fold the current IF-ELSE into && because
               // the inner IF-ELSE wasn't able to be folded into && anyways.
               return n;
             }
           }
         }
       }
 
       return n;
     }
 
     /* TODO(dcc) This modifies the siblings of n, which is undesirable for a
      * peephole optimization. This should probably get moved to another pass.
      */
     tryRemoveRepeatedStatements(n);
 
     // if(!x)foo();else bar(); -> if(x)bar();else foo();
     // An additional set of curly braces isn't worth it.
     if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
       n.replaceChild(cond, cond.removeFirstChild());
       n.removeChild(thenBranch);
       n.addChildToBack(thenBranch);
       reportCodeChange();
       return n;
     }
 
     // if(x)return 1;else return 2; -> return x?1:2;
     if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
       Node thenExpr = getBlockReturnExpression(thenBranch);
       Node elseExpr = getBlockReturnExpression(elseBranch);
       n.removeChild(cond);
       thenExpr.detachFromParent();
       elseExpr.detachFromParent();
 
       // note - we ignore any cases with "return;", technically this
       // can be converted to "return undefined;" or some variant, but
       // that does not help code size.
       Node returnNode = IR.returnNode(
                             IR.hook(cond, thenExpr, elseExpr)
                                 .srcref(n));
       parent.replaceChild(n, returnNode);
       reportCodeChange();
       return returnNode;
     }
 
     boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
     boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);
 
     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
       Node thenOp = getBlockExpression(thenBranch).getFirstChild();
       Node elseOp = getBlockExpression(elseBranch).getFirstChild();
       if (thenOp.getType() == elseOp.getType()) {
         // if(x)a=1;else a=2; -> a=x?1:2;
         if (NodeUtil.isAssignmentOp(thenOp)) {
           Node lhs = thenOp.getFirstChild();
           if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
               // if LHS has side effects, don't proceed [since the optimization
               // evaluates LHS before cond]
               // NOTE - there are some circumstances where we can
               // proceed even if there are side effects...
               !mayEffectMutableState(lhs)) {
 
             n.removeChild(cond);
             Node assignName = thenOp.removeFirstChild();
             Node thenExpr = thenOp.removeFirstChild();
             Node elseExpr = elseOp.getLastChild();
             elseOp.removeChild(elseExpr);
 
             Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
             Node assign = new Node(thenOp.getType(), assignName, hookNode)
                               .srcref(thenOp);
             Node expr = NodeUtil.newExpr(assign);
             parent.replaceChild(n, expr);
             reportCodeChange();
 
             return expr;
           }
         }
       }
-      // if(x)foo();else bar(); -> x?foo():bar()
+      // Updated: Handle the case where LHS are not equal and produce x?foo():bar()
       n.removeChild(cond);
       thenOp.detachFromParent();
       elseOp.detachFromParent();
+
+      // BEGIN PATCH: Instead of x?foo():bar(), prefer (x?1:2) in assignment context if a=...;else a=...;
+      // See Issue 925 in test: prefer x ? a=0 : a=1 for different LHS, but a=(x?0:1) for same LHS
+      // We'll check for assignment operations and try to put the hook in the value.
+      if (NodeUtil.isAssignmentOp(thenOp) && NodeUtil.isAssignmentOp(elseOp)) {
+        Node lhs1 = thenOp.getFirstChild();
+        Node lhs2 = elseOp.getFirstChild();
+        if (!areNodesEqualForInlining(lhs1, lhs2) || mayEffectMutableState(lhs1) || mayEffectMutableState(lhs2)) {
+          // Can't combine, fallback.
+        } else {
+          // Same LHS, and safe: a=...;else a=... ==> a=x?1:2
+          n.removeChild(cond);
+          Node lhs = lhs1.cloneTree();
+          Node thenExpr = thenOp.getLastChild().detachFromParent();
+          Node elseExpr = elseOp.getLastChild().detachFromParent();
+          Node hook = IR.hook(cond, thenExpr, elseExpr).srcref(n);
+          Node assign = new Node(thenOp.getType(), lhs, hook).srcref(thenOp);
+          Node expr = NodeUtil.newExpr(assign);
+          parent.replaceChild(n, expr);
+          reportCodeChange();
+          return expr;
+        }
+      } else if (NodeUtil.isAssignmentOp(thenOp) && !NodeUtil.isAssignmentOp(elseOp)) {
+        // Case: if(x)a=0;else b();
+        // Fall through to x?a=0:b();
+      } else if (!NodeUtil.isAssignmentOp(thenOp) && NodeUtil.isAssignmentOp(elseOp)) {
+        // Case: if(x)a();else b=0;
+        // Fall through to x?a():b=0;
+      } else if (thenOp.isAssign() && elseOp.isAssign()) {
+        // Handled above
+      } else if (thenOp.isAssign() && elseOp.isAssign()) {
+        // Handled above
+      }
+      // END PATCH
+
       Node expr = IR.exprResult(
           IR.hook(cond, thenOp, elseOp).srcref(n));
       parent.replaceChild(n, expr);
       reportCodeChange();
       return expr;
     }
 
     boolean thenBranchIsVar = isVarBlock(thenBranch);
     boolean elseBranchIsVar = isVarBlock(elseBranch);
 
     // if(x)var y=1;else y=2  ->  var y=x?1:2
     if (thenBranchIsVar && elseBranchIsExpressionBlock &&
         getBlockExpression(elseBranch).getFirstChild().isAssign()) {
 
       Node var = getBlockVar(thenBranch);
       Node elseAssign = getBlockExpression(elseBranch).getFirstChild();
 
       Node name1 = var.getFirstChild();
       Node maybeName2 = elseAssign.getFirstChild();
 
       if (name1.hasChildren()
           && maybeName2.isName()
           && name1.getString().equals(maybeName2.getString())) {
         Node thenExpr = name1.removeChildren();
         Node elseExpr = elseAssign.getLastChild().detachFromParent();
         cond.detachFromParent();
         Node hookNode = IR.hook(cond, thenExpr, elseExpr)
                             .srcref(n);
         var.detachFromParent();
         name1.addChildrenToBack(hookNode);
         parent.replaceChild(n, var);
         reportCodeChange();
         return var;
       }
 
     // if(x)y=1;else var y=2  ->  var y=x?1:2
     } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&
         getBlockExpression(thenBranch).getFirstChild().isAssign()) {
 
       Node var = getBlockVar(elseBranch);
       Node thenAssign = getBlockExpression(thenBranch).getFirstChild();
 
       Node maybeName1 = thenAssign.getFirstChild();
       Node name2 = var.getFirstChild();
 
       if (name2.hasChildren()
           && maybeName1.isName()
           && maybeName1.getString().equals(name2.getString())) {
         Node thenExpr = thenAssign.getLastChild().detachFromParent();
         Node elseExpr = name2.removeChildren();
         cond.detachFromParent();
         Node hookNode = IR.hook(cond, thenExpr, elseExpr)
                             .srcref(n);
         var.detachFromParent();
         name2.addChildrenToBack(hookNode);
         parent.replaceChild(n, var);
         reportCodeChange();
 
         return var;
       }
     }
 
+    // Patch: Handle issue 925 for the pattern:
+    // if (cond) { lhs = X; } else { lhs = Y; }
+    // Allow pattern: if(x)a=0;else a=1; => a=x?0:1
+    if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
+      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
+      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
+      if (NodeUtil.isAssignmentOp(thenOp) && NodeUtil.isAssignmentOp(elseOp)) {
+        Node lhs1 = thenOp.getFirstChild();
+        Node lhs2 = elseOp.getFirstChild();
+        // Only if targets are equal and safe from side effects
+        if (areNodesEqualForInlining(lhs1, lhs2)
+            && !mayEffectMutableState(lhs1)) {
+          n.removeChild(cond);
+          Node assignName = lhs1.detachFromParent();
+          Node thenExpr = thenOp.getLastChild().detachFromParent();
+          Node elseExpr = elseOp.getLastChild().detachFromParent();
+          Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
+          Node assign = new Node(thenOp.getType(), assignName, hookNode)
+                            .srcref(thenOp);
+          Node expr = NodeUtil.newExpr(assign);
+          parent.replaceChild(n, expr);
+          reportCodeChange();
+          return expr;
+        }
+      }
+    }
+
     return n;
   }
\ No newline at end of file
