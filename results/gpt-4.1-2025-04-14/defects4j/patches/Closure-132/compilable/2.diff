diff --git a/tmp/696be6f2-fe1d-48eb-96bf-8bc3a73f3524_buggy.java b/tmp/5b87f92e-c3ad-44cc-af7b-714432545b0c_fixed.java
index e4fca3c..26f7f0d 100644
--- a/tmp/696be6f2-fe1d-48eb-96bf-8bc3a73f3524_buggy.java
+++ b/tmp/5b87f92e-c3ad-44cc-af7b-714432545b0c_fixed.java
@@ -1,239 +1,273 @@
   /**
    * Try turning IF nodes into smaller HOOKs
    *
    * Returns the replacement for n or the original if no replacement was
    * necessary.
    */
   private Node tryMinimizeIf(Node n) {
 
     Node parent = n.getParent();
 
     Node cond = n.getFirstChild();
 
     /* If the condition is a literal, we'll let other
      * optimizations try to remove useless code.
      */
     if (NodeUtil.isLiteralValue(cond, true)) {
       return n;
     }
 
     Node thenBranch = cond.getNext();
     Node elseBranch = thenBranch.getNext();
 
     if (elseBranch == null) {
       if (isFoldableExpressBlock(thenBranch)) {
         Node expr = getBlockExpression(thenBranch);
         if (!late && isPropertyAssignmentInExpression(expr)) {
           // Keep opportunities for CollapseProperties such as
           // a.longIdentifier || a.longIdentifier = ... -> var a = ...;
           // until CollapseProperties has been run.
           return n;
         }
 
         if (cond.isNot()) {
           // if(!x)bar(); -> x||bar();
           if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&
               isLowerPrecedenceInExpression(expr.getFirstChild(),
                   OR_PRECEDENCE)) {
             // It's not okay to add two sets of parentheses.
             return n;
           }
 
           Node or = IR.or(
               cond.removeFirstChild(),
               expr.removeFirstChild()).srcref(n);
           Node newExpr = NodeUtil.newExpr(or);
           parent.replaceChild(n, newExpr);
           reportCodeChange();
 
           return newExpr;
         }
 
         // if(x)foo(); -> x&&foo();
         if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
             isLowerPrecedenceInExpression(expr.getFirstChild(),
                 AND_PRECEDENCE)) {
           // One additional set of parentheses is worth the change even if
           // there is no immediate code size win. However, two extra pair of
           // {}, we would have to think twice. (unless we know for sure the
           // we can further optimize its parent.
           return n;
         }
 
         n.removeChild(cond);
         Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);
         Node newExpr = NodeUtil.newExpr(and);
         parent.replaceChild(n, newExpr);
         reportCodeChange();
 
         return newExpr;
       } else {
 
         // Try to combine two IF-ELSE
         if (NodeUtil.isStatementBlock(thenBranch) &&
             thenBranch.hasOneChild()) {
           Node innerIf = thenBranch.getFirstChild();
 
           if (innerIf.isIf()) {
             Node innerCond = innerIf.getFirstChild();
             Node innerThenBranch = innerCond.getNext();
             Node innerElseBranch = innerThenBranch.getNext();
 
             if (innerElseBranch == null &&
                  !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
                    isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {
               n.detachChildren();
               n.addChildToBack(
                   IR.and(
                       cond,
                       innerCond.detachFromParent())
                       .srcref(cond));
               n.addChildrenToBack(innerThenBranch.detachFromParent());
               reportCodeChange();
               // Not worth trying to fold the current IF-ELSE into && because
               // the inner IF-ELSE wasn't able to be folded into && anyways.
               return n;
             }
           }
         }
       }
 
       return n;
     }
 
     /* TODO(dcc) This modifies the siblings of n, which is undesirable for a
      * peephole optimization. This should probably get moved to another pass.
      */
     tryRemoveRepeatedStatements(n);
 
     // if(!x)foo();else bar(); -> if(x)bar();else foo();
     // An additional set of curly braces isn't worth it.
     if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
       n.replaceChild(cond, cond.removeFirstChild());
       n.removeChild(thenBranch);
       n.addChildToBack(thenBranch);
       reportCodeChange();
       return n;
     }
 
     // if(x)return 1;else return 2; -> return x?1:2;
     if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
       Node thenExpr = getBlockReturnExpression(thenBranch);
       Node elseExpr = getBlockReturnExpression(elseBranch);
       n.removeChild(cond);
       thenExpr.detachFromParent();
       elseExpr.detachFromParent();
 
       // note - we ignore any cases with "return;", technically this
       // can be converted to "return undefined;" or some variant, but
       // that does not help code size.
       Node returnNode = IR.returnNode(
                             IR.hook(cond, thenExpr, elseExpr)
                                 .srcref(n));
       parent.replaceChild(n, returnNode);
       reportCodeChange();
       return returnNode;
     }
 
     boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
     boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);
 
+    // ==== BEGIN PATCH: Handle [a = ...] vs [a = ...] cases as assignment-to-hook as appropriate ====
     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
       Node thenOp = getBlockExpression(thenBranch).getFirstChild();
       Node elseOp = getBlockExpression(elseBranch).getFirstChild();
       if (thenOp.getType() == elseOp.getType()) {
         // if(x)a=1;else a=2; -> a=x?1:2;
         if (NodeUtil.isAssignmentOp(thenOp)) {
           Node lhs = thenOp.getFirstChild();
           if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
               // if LHS has side effects, don't proceed [since the optimization
               // evaluates LHS before cond]
               // NOTE - there are some circumstances where we can
               // proceed even if there are side effects...
               !mayEffectMutableState(lhs)) {
 
             n.removeChild(cond);
             Node assignName = thenOp.removeFirstChild();
             Node thenExpr = thenOp.removeFirstChild();
             Node elseExpr = elseOp.getLastChild();
             elseOp.removeChild(elseExpr);
 
             Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
             Node assign = new Node(thenOp.getType(), assignName, hookNode)
                               .srcref(thenOp);
             Node expr = NodeUtil.newExpr(assign);
             parent.replaceChild(n, expr);
             reportCodeChange();
 
             return expr;
           }
         }
       }
-      // if(x)foo();else bar(); -> x?foo():bar()
+      // --- [BUGGY PART PATCH] ---
+      // Additionally: 
+      // If both `thenOp` and `elseOp` are expressions with side effects (e.g. function calls, increments, etc), 
+      // but are not both assignments to the same LHS, then just produce `cond?thenOp:elseOp`
+      // Previous buggy code produced: x?foo():bar()
+      // But for e.g. 
+      // if (x[--y] === 1) { x[y] = 0; } else { x[y] = 1; }
+      // Previous output: (x[--y] === 1) ? x[y] = 0 : x[y] = 1;     (desired)
+      // For
+      // if (x[--y]) { a = 0; } else { a = 1; }
+      // desired output: a = (x[--y]) ? 0 : 1;
+      // This requires that if both sides are assignments to the same variable, but LHS can have side effects,
+      // the computation of the LHS cannot be moved, so fallback to cond?thenOp:elseOp; But when LHS is a name, 
+      // can factor assignment as a = cond?1:2; 
+
+      // In tricky case: 
+      // if (x[--y] === 1) { x[y] = 0; } else { x[y] = 1; }
+      // both thenOp/elseOp are assignments, but LHS are not strictly equal for inlining since [--y] vs y
+      
+      // New patch: If both are assignments of the same type to any l-value, and both are assignments to array access (or similar), 
+      // just combine into cond ? ... : ... assignment (like original code generated).
+      if (NodeUtil.isAssignmentOp(thenOp) && NodeUtil.isAssignmentOp(elseOp)
+          && thenOp.getType() == elseOp.getType()) {
         n.removeChild(cond);
         thenOp.detachFromParent();
         elseOp.detachFromParent();
         Node expr = IR.exprResult(
             IR.hook(cond, thenOp, elseOp).srcref(n));
         parent.replaceChild(n, expr);
         reportCodeChange();
         return expr;
       }
+      // --- normal fallback ---
+      n.removeChild(cond);
+      thenOp.detachFromParent();
+      elseOp.detachFromParent();
+      Node expr = IR.exprResult(
+          IR.hook(cond, thenOp, elseOp).srcref(n));
+      parent.replaceChild(n, expr);
+      reportCodeChange();
+      return expr;
+    }
+    // ==== END PATCH ====
 
     boolean thenBranchIsVar = isVarBlock(thenBranch);
     boolean elseBranchIsVar = isVarBlock(elseBranch);
 
     // if(x)var y=1;else y=2  ->  var y=x?1:2
     if (thenBranchIsVar && elseBranchIsExpressionBlock &&
         getBlockExpression(elseBranch).getFirstChild().isAssign()) {
 
       Node var = getBlockVar(thenBranch);
       Node elseAssign = getBlockExpression(elseBranch).getFirstChild();
 
       Node name1 = var.getFirstChild();
       Node maybeName2 = elseAssign.getFirstChild();
 
       if (name1.hasChildren()
           && maybeName2.isName()
           && name1.getString().equals(maybeName2.getString())) {
         Node thenExpr = name1.removeChildren();
         Node elseExpr = elseAssign.getLastChild().detachFromParent();
         cond.detachFromParent();
         Node hookNode = IR.hook(cond, thenExpr, elseExpr)
                             .srcref(n);
         var.detachFromParent();
         name1.addChildrenToBack(hookNode);
         parent.replaceChild(n, var);
         reportCodeChange();
         return var;
       }
 
     // if(x)y=1;else var y=2  ->  var y=x?1:2
     } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&
         getBlockExpression(thenBranch).getFirstChild().isAssign()) {
 
       Node var = getBlockVar(elseBranch);
       Node thenAssign = getBlockExpression(thenBranch).getFirstChild();
 
       Node maybeName1 = thenAssign.getFirstChild();
       Node name2 = var.getFirstChild();
 
       if (name2.hasChildren()
           && maybeName1.isName()
           && maybeName1.getString().equals(name2.getString())) {
         Node thenExpr = thenAssign.getLastChild().detachFromParent();
         Node elseExpr = name2.removeChildren();
         cond.detachFromParent();
         Node hookNode = IR.hook(cond, thenExpr, elseExpr)
                             .srcref(n);
         var.detachFromParent();
         name2.addChildrenToBack(hookNode);
         parent.replaceChild(n, var);
         reportCodeChange();
 
         return var;
       }
     }
 
     return n;
   }
\ No newline at end of file
