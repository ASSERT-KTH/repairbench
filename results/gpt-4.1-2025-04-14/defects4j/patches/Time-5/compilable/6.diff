diff --git a/tmp/e95a8a32-1525-432c-97cf-8f9b078e762a_buggy.java b/tmp/4f0fccde-e2e6-4da3-b663-2b62719b715e_fixed.java
index dbda381..61311d5 100644
--- a/tmp/e95a8a32-1525-432c-97cf-8f9b078e762a_buggy.java
+++ b/tmp/4f0fccde-e2e6-4da3-b663-2b62719b715e_fixed.java
@@ -1,54 +1,84 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
+    // If years or months are present and not supported by the PeriodType,
+    // they must be converted to months and added together.
     int years = getYears();
     int months = getMonths();
-        if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+    int totalMonths = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));
+    int weeks = getWeeks();
+    int days = getDays();
+    int hours = getHours();
+    int minutes = getMinutes();
+    int seconds = getSeconds();
+    int millis = getMillis();
+
+    // Now, collapse all time fields into millis
+    long totalMillis = millis;
+    totalMillis += ((long) seconds) * DateTimeConstants.MILLIS_PER_SECOND;
+    totalMillis += ((long) minutes) * DateTimeConstants.MILLIS_PER_MINUTE;
+    totalMillis += ((long) hours) * DateTimeConstants.MILLIS_PER_HOUR;
+    totalMillis += ((long) days) * DateTimeConstants.MILLIS_PER_DAY;
+    totalMillis += ((long) weeks) * DateTimeConstants.MILLIS_PER_WEEK;
+
+    // Now, re-expand fields according to 'type'
+    int[] values = new int[type.size()];
+
+    // months and higher handled specially
+    int idx;
+    if (type.isSupported(DurationFieldType.years())) {
+        int newYears = totalMonths / 12;
+        values[type.indexOf(DurationFieldType.years())] = newYears;
+        totalMonths = totalMonths % 12;
+    } else if (totalMonths != 0 && type.isSupported(DurationFieldType.months())) {
+        // Just pass all as months
+        // do nothing here, handled below
+    } else if (totalMonths != 0) {
+        // Type does not support years or months, throw
+        throw new UnsupportedOperationException("Field is not supported");
     }
-            if (months != 0) {
-                result = result.withMonths(months);
+
+    if (type.isSupported(DurationFieldType.months())) {
+        idx = type.indexOf(DurationFieldType.months());
+        values[idx] = totalMonths;
+    } else if (totalMonths != 0) {
+        // If we have months, but not supported, throw
+        throw new UnsupportedOperationException("Field is not supported");
     }
+
+    // Now assign the rest, from weeks downward, using the period
+    long remMillis = totalMillis;
+    if (type.isSupported(DurationFieldType.weeks())) {
+        idx = type.indexOf(DurationFieldType.weeks());
+        values[idx] = (int) (remMillis / DateTimeConstants.MILLIS_PER_WEEK);
+        remMillis = remMillis % DateTimeConstants.MILLIS_PER_WEEK;
     }
-        return result;
+    if (type.isSupported(DurationFieldType.days())) {
+        idx = type.indexOf(DurationFieldType.days());
+        values[idx] = (int) (remMillis / DateTimeConstants.MILLIS_PER_DAY);
+        remMillis = remMillis % DateTimeConstants.MILLIS_PER_DAY;
+    }
+    if (type.isSupported(DurationFieldType.hours())) {
+        idx = type.indexOf(DurationFieldType.hours());
+        values[idx] = (int) (remMillis / DateTimeConstants.MILLIS_PER_HOUR);
+        remMillis = remMillis % DateTimeConstants.MILLIS_PER_HOUR;
+    }
+    if (type.isSupported(DurationFieldType.minutes())) {
+        idx = type.indexOf(DurationFieldType.minutes());
+        values[idx] = (int) (remMillis / DateTimeConstants.MILLIS_PER_MINUTE);
+        remMillis = remMillis % DateTimeConstants.MILLIS_PER_MINUTE;
+    }
+    if (type.isSupported(DurationFieldType.seconds())) {
+        idx = type.indexOf(DurationFieldType.seconds());
+        values[idx] = (int) (remMillis / DateTimeConstants.MILLIS_PER_SECOND);
+        remMillis = remMillis % DateTimeConstants.MILLIS_PER_SECOND;
+    }
+    if (type.isSupported(DurationFieldType.millis())) {
+        idx = type.indexOf(DurationFieldType.millis());
+        values[idx] = (int) remMillis;
+    } else if (remMillis != 0) {
+        throw new UnsupportedOperationException("Field is not supported");
+    }
+
+    return new Period(values, type);
 }
\ No newline at end of file
