diff --git a/tmp/de291981-3f18-44a4-800c-c357642233ee_buggy.java b/tmp/c5b515af-6f28-4c0b-9762-c34af2a23c3a_fixed.java
index dbda381..4ff16e4 100644
--- a/tmp/de291981-3f18-44a4-800c-c357642233ee_buggy.java
+++ b/tmp/c5b515af-6f28-4c0b-9762-c34af2a23c3a_fixed.java
@@ -1,54 +1,51 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
+    // Convert all time-based fields to milliseconds
     long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
     millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
     millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
     millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
     millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
     millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
     int years = getYears();
     int months = getMonths();
-        if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+
+    // Check if type supports years or months
+    boolean typeSupportsYears = type.isSupported(DurationFieldType.years());
+    boolean typeSupportsMonths = type.isSupported(DurationFieldType.months());
+
+    // If years or months are present, normalize accordingly
+    int totalMonths = years * 12 + months;
+
+    // If type supports years or months, we need to normalize them, else
+    // if not supported, we move them all into months
+    int normalizedYears = 0;
+    int normalizedMonths = 0;
+    if (typeSupportsYears) {
+        normalizedYears = totalMonths / 12;
     }
-            if (months != 0) {
-                result = result.withMonths(months);
+    if (typeSupportsMonths) {
+        normalizedMonths = totalMonths % 12;
+    } else if (!typeSupportsYears && !typeSupportsMonths && totalMonths != 0) {
+        // If years/months aren't supported, but there are years/months, throw exception for years/months fields
+        throw new UnsupportedOperationException("Period does not support years or months");
+    } else if (!typeSupportsYears && typeSupportsMonths) {
+        // If years are not supported but months are supported, add all to months
+        normalizedMonths = totalMonths;
     }
+
+    // Create the normalized period with zero years and months for now
+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
+    // If type supports years, set them
+    if (typeSupportsYears && normalizedYears != 0) {
+        result = result.withYears(normalizedYears);
     }
+    // If type supports months, set them
+    if (typeSupportsMonths && normalizedMonths != 0) {
+        result = result.withMonths(normalizedMonths);
+    }
+
     return result;
 }
\ No newline at end of file
