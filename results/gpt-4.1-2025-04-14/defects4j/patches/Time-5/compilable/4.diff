diff --git a/tmp/f0d1f553-bf5e-415d-9468-752be9b7b4f3_buggy.java b/tmp/c280d2f6-be1a-48b4-94df-08c062cdec0a_fixed.java
index dbda381..b643073 100644
--- a/tmp/f0d1f553-bf5e-415d-9468-752be9b7b4f3_buggy.java
+++ b/tmp/c280d2f6-be1a-48b4-94df-08c062cdec0a_fixed.java
@@ -1,54 +1,133 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
     int years = getYears();
     int months = getMonths();
-        if (years != 0 || months != 0) {
+    int weeks = getWeeks();
+    int days = getDays();
+    int hours = getHours();
+    int minutes = getMinutes();
+    int seconds = getSeconds();
+    int millis = getMillis();
+
+    Period result;
+
+    // Check if years and months are supported
+    if ((years != 0 && type.isSupported(DurationFieldType.years())) ||
+        (months != 0 && type.isSupported(DurationFieldType.months()))) {
+
+        // If both years and months supported, normalize months to 0-11
+        if (type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {
             years = FieldUtils.safeAdd(years, months / 12);
             months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+            // in Java, -9 % 12 == -9; if negative months, adjust to range -11..11 style
+            if (months < 0 && years != 0) {
+                years = FieldUtils.safeAdd(years, -1);
+                months = months + 12;
             }
+            result = new Period(
+                years,
+                months,
+                type.isSupported(DurationFieldType.weeks()) ? weeks : 0,
+                type.isSupported(DurationFieldType.days()) ? days : 0,
+                type.isSupported(DurationFieldType.hours()) ? hours : 0,
+                type.isSupported(DurationFieldType.minutes()) ? minutes : 0,
+                type.isSupported(DurationFieldType.seconds()) ? seconds : 0,
+                type.isSupported(DurationFieldType.millis()) ? millis : 0,
+                type
+            );
+            // recompute time fields from weeks/days/hours...
+            long totalMillis = 0;
+            if (!type.isSupported(DurationFieldType.weeks()) ||
+                !type.isSupported(DurationFieldType.days()) ||
+                !type.isSupported(DurationFieldType.hours()) ||
+                !type.isSupported(DurationFieldType.minutes()) ||
+                !type.isSupported(DurationFieldType.seconds()) ||
+                !type.isSupported(DurationFieldType.millis())) {
+                totalMillis += ((long)weeks) * DateTimeConstants.MILLIS_PER_WEEK;
+                totalMillis += ((long)days) * DateTimeConstants.MILLIS_PER_DAY;
+                totalMillis += ((long)hours) * DateTimeConstants.MILLIS_PER_HOUR;
+                totalMillis += ((long)minutes) * DateTimeConstants.MILLIS_PER_MINUTE;
+                totalMillis += ((long)seconds) * DateTimeConstants.MILLIS_PER_SECOND;
+                totalMillis += (long)millis;
+
+                Period timeResult = new Period(totalMillis, type, ISOChronology.getInstanceUTC());
+                result = result
+                        .withWeeks(timeResult.getWeeks())
+                        .withDays(timeResult.getDays())
+                        .withHours(timeResult.getHours())
+                        .withMinutes(timeResult.getMinutes())
+                        .withSeconds(timeResult.getSeconds())
+                        .withMillis(timeResult.getMillis());
+            }
+            return result;
+        }
+
+        // If only months supported, add years as months
+        if (!type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {
+            months = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));
+            years = 0;
+            // Compose everything except months as millis
+            long totalMillis = 0;
+            totalMillis += ((long)weeks) * DateTimeConstants.MILLIS_PER_WEEK;
+            totalMillis += ((long)days) * DateTimeConstants.MILLIS_PER_DAY;
+            totalMillis += ((long)hours) * DateTimeConstants.MILLIS_PER_HOUR;
+            totalMillis += ((long)minutes) * DateTimeConstants.MILLIS_PER_MINUTE;
+            totalMillis += ((long)seconds) * DateTimeConstants.MILLIS_PER_SECOND;
+            totalMillis += (long)millis;
+
+            result = new Period(0, months, 0, 0, 0, 0, 0, 0, type);
+            Period timeResult = new Period(totalMillis, type, ISOChronology.getInstanceUTC());
+            result = result
+                    .withWeeks(timeResult.getWeeks())
+                    .withDays(timeResult.getDays())
+                    .withHours(timeResult.getHours())
+                    .withMinutes(timeResult.getMinutes())
+                    .withSeconds(timeResult.getSeconds())
+                    .withMillis(timeResult.getMillis());
+            return result;
+        }
+
+        // If years supported but not months (rare, not in official types), add months as years / 12
+        if (type.isSupported(DurationFieldType.years()) && !type.isSupported(DurationFieldType.months())) {
+            years = FieldUtils.safeAdd(years, months / 12);
+            months = months % 12;
             if (months != 0) {
-                result = result.withMonths(months);
+                throw new UnsupportedOperationException("Field is not supported");
             }
+            // Compose all remaining as fields and as millis
+            long totalMillis = 0;
+            totalMillis += ((long)weeks) * DateTimeConstants.MILLIS_PER_WEEK;
+            totalMillis += ((long)days) * DateTimeConstants.MILLIS_PER_DAY;
+            totalMillis += ((long)hours) * DateTimeConstants.MILLIS_PER_HOUR;
+            totalMillis += ((long)minutes) * DateTimeConstants.MILLIS_PER_MINUTE;
+            totalMillis += ((long)seconds) * DateTimeConstants.MILLIS_PER_SECOND;
+            totalMillis += (long)millis;
+
+            result = new Period(years, 0, 0, 0, 0, 0, 0, 0, type);
+            Period timeResult = new Period(totalMillis, type, ISOChronology.getInstanceUTC());
+            result = result
+                    .withWeeks(timeResult.getWeeks())
+                    .withDays(timeResult.getDays())
+                    .withHours(timeResult.getHours())
+                    .withMinutes(timeResult.getMinutes())
+                    .withSeconds(timeResult.getSeconds())
+                    .withMillis(timeResult.getMillis());
+            return result;
         }
+
+        // If neither years nor months supported but values present: error
+        throw new UnsupportedOperationException("Field is not supported");
+    } else {
+        // No years/months
+        long totalMillis = 0;
+        totalMillis += ((long)weeks) * DateTimeConstants.MILLIS_PER_WEEK;
+        totalMillis += ((long)days) * DateTimeConstants.MILLIS_PER_DAY;
+        totalMillis += ((long)hours) * DateTimeConstants.MILLIS_PER_HOUR;
+        totalMillis += ((long)minutes) * DateTimeConstants.MILLIS_PER_MINUTE;
+        totalMillis += ((long)seconds) * DateTimeConstants.MILLIS_PER_SECOND;
+        totalMillis += (long)millis;
+        result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());
         return result;
     }
+}
\ No newline at end of file
