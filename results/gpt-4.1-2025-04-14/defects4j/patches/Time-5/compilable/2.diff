diff --git a/tmp/e4ea08be-eb9c-4272-9e15-2829539bbb39_buggy.java b/tmp/b1d18387-c252-4a8e-a63d-608126bbc88a_fixed.java
index dbda381..4f2b9d6 100644
--- a/tmp/e4ea08be-eb9c-4272-9e15-2829539bbb39_buggy.java
+++ b/tmp/b1d18387-c252-4a8e-a63d-608126bbc88a_fixed.java
@@ -1,54 +1,62 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+    // If 'type' does not support years or months, accumulate years and months so they're merged as months,
+    // otherwise preserve them in their original fields
+    boolean hasYears = type.isSupported(DurationFieldType.years());
+    boolean hasMonths = type.isSupported(DurationFieldType.months());
+
     int years = getYears();
     int months = getMonths();
-        if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
+    int totalMonths = 0;
+    if (!hasYears && !hasMonths && (years != 0 || months != 0)) {
+        throw new UnsupportedOperationException("PeriodType does not support years or months but period contains non-zero years or months");
+    }
+
+    // if type doesn't support years but supports months, merge all years into months
+    if (!hasYears && hasMonths) {
+        totalMonths = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));
+        years = 0;
+        months = 0;
+    } else if (hasYears) {
+        // normalize months only if years are supported
+        int normYears = FieldUtils.safeAdd(years, months / 12);
+        int normMonths = months % 12;
+        // handle negatives for normMonths (keep them between -11 and 11)
+        if (normMonths < 0 && years > 0) {
+            normYears -= 1;
+            normMonths += 12;
+        } else if (normMonths < 0 && years < 0) {
+            normYears += 1;
+            normMonths -= 12;
+        }
+        years = normYears;
+        months = normMonths;
+    } else if (!hasYears && !hasMonths) {
+        // neither supported, checked above, unreachable here.
+    }
+
+    // Calculate millis for time fields
+    long millis = getMillis();
+    millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getSeconds(), (long) DateTimeConstants.MILLIS_PER_SECOND));
+    millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getMinutes(), (long) DateTimeConstants.MILLIS_PER_MINUTE));
+    millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getHours(), (long) DateTimeConstants.MILLIS_PER_HOUR));
+    millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getDays(), (long) DateTimeConstants.MILLIS_PER_DAY));
+    millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getWeeks(), (long) DateTimeConstants.MILLIS_PER_WEEK));
+
+    // Compose new period for the non-year/month fields in 'type'
+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
+    // Place months (if years not present)
+    if (!hasYears && hasMonths && totalMonths != 0) {
+        result = result.withMonths(totalMonths);
+    } else {
+        if (hasYears && years != 0) {
             result = result.withYears(years);
         }
-            if (months != 0) {
+        if (hasMonths && months != 0) {
             result = result.withMonths(months);
         }
     }
+
     return result;
 }
\ No newline at end of file
