diff --git a/tmp/55f32f61-e857-493d-9687-fdde89255fbb_buggy.java b/tmp/b1c2f373-6ed8-4561-89d6-31a1805745d8_fixed.java
index dbda381..58a0af4 100644
--- a/tmp/55f32f61-e857-493d-9687-fdde89255fbb_buggy.java
+++ b/tmp/b1c2f373-6ed8-4561-89d6-31a1805745d8_fixed.java
@@ -1,54 +1,80 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
+    int years = getYears();
+    int months = getMonths();
+    
+    // Handle periods with only months and/or years specially for types without years.
+    if ((years != 0 || months != 0) && type.isSupported(DurationFieldType.months()) && !type.isSupported(DurationFieldType.years())) {
+        // Collapse years to months and create a new period in specified period type.
+        int totalMonths = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));
+        // Build array of 8 values for all supported fields (years, months, weeks, days, hours, minutes, seconds, millis)
+        int[] values = new int[8];
+        values[1] = totalMonths; // months
+        values[2] = getWeeks();
+        values[3] = getDays();
+        values[4] = getHours();
+        values[5] = getMinutes();
+        values[6] = getSeconds();
+        values[7] = getMillis();
+        // Only use the fields supported in the input period type
+        int[] resultValues = new int[type.size()];
+        for (int i = 0; i < type.size(); i++) {
+            DurationFieldType t = type.getFieldType(i);
+            int idx = ISOChronology.getInstanceUTC().period().indexOf(t);
+            if (idx >= 0) {
+                resultValues[i] = values[idx];
+            } else {
+                // Shouldn't reach here per construction
+                resultValues[i] = 0;
+            }
+        }
+        return new Period(resultValues, type);
+    }
+
+    // Fallback to standard normalization
     long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
     millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
     millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
     millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
     millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
     millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
     Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
-        int years = getYears();
-        int months = getMonths();
     if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+        if (!type.isSupported(DurationFieldType.years()) && !type.isSupported(DurationFieldType.months())) {
+            // we cannot store years/months in this period type
+            if (years != 0 || months != 0) {
+                throw new UnsupportedOperationException("Field is not supported");
+            }
+        }
+        int normYears = years;
+        int normMonths = months;
+        if (type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {
+            normYears = FieldUtils.safeAdd(normYears, normMonths / 12);
+            normMonths = normMonths % 12;
+            if (normYears != 0) {
+                result = result.withYears(normYears);
+            }
+            if (normMonths != 0) {
+                result = result.withMonths(normMonths);
+            }
+        } else if (type.isSupported(DurationFieldType.years())) {
+            normYears = FieldUtils.safeAdd(normYears, normMonths / 12);
+            if (normYears != 0) {
+                result = result.withYears(normYears);
+            }
+            if ((normMonths % 12) != 0) {
+                throw new UnsupportedOperationException("Field is not supported");
+            }
+        } else if (type.isSupported(DurationFieldType.months())) {
+            int totalMonths = FieldUtils.safeAdd(normMonths, FieldUtils.safeMultiply(normYears, 12));
+            if (totalMonths != 0) {
+                result = result.withMonths(totalMonths);
+            }
+        } else {
+            if (normYears != 0 || normMonths != 0) {
+                throw new UnsupportedOperationException("Field is not supported");
             }
-            if (months != 0) {
-                result = result.withMonths(months);
         }
     }
     return result;
 }
\ No newline at end of file
