diff --git a/tmp/42b5770e-4e2f-4309-a728-cd525afe5012_buggy.java b/tmp/c0b6ac4b-6833-48c6-8175-099bb15952f6_fixed.java
index dbda381..4625cec 100644
--- a/tmp/42b5770e-4e2f-4309-a728-cd525afe5012_buggy.java
+++ b/tmp/c0b6ac4b-6833-48c6-8175-099bb15952f6_fixed.java
@@ -1,54 +1,68 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
     int years = getYears();
     int months = getMonths();
-        if (years != 0 || months != 0) {
+    int weeks = getWeeks();
+    int days = getDays();
+    int hours = getHours();
+    int minutes = getMinutes();
+    int seconds = getSeconds();
+    int millis = getMillis();
+
+    // If Years and Months fields are not supported, but are non-zero, collapse them into months
+    if ((years != 0 || months != 0) &&
+        (!type.isSupported(DurationFieldType.years()) || !type.isSupported(DurationFieldType.months()))) {
+
+        // If years field is supported but months is not, or neither is supported
+        if (!type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {
+            // All in months
+            months = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));
+            years = 0;
+        } else if (!type.isSupported(DurationFieldType.years()) && !type.isSupported(DurationFieldType.months())) {
+            // Months cannot be represented at all, fall through to collapsing into lower fields
+            throw new UnsupportedOperationException("Field is not supported");
+        } else if (type.isSupported(DurationFieldType.years()) && !type.isSupported(DurationFieldType.months())) {
+            // months cannot be represented but years can
+            throw new UnsupportedOperationException("Field is not supported");
+        }
+        // else: both supported, handled below
+    }
+
+    // If weeks are not supported, collapse to days
+    if (weeks != 0 && !type.isSupported(DurationFieldType.weeks())) {
+        days = FieldUtils.safeAdd(days, FieldUtils.safeMultiply(weeks, 7));
+        weeks = 0;
+    }
+
+    // Compose all smaller than days to millis, use this for 'timed' part
+    long totalMillis = millis
+        + ((long) seconds) * DateTimeConstants.MILLIS_PER_SECOND
+        + ((long) minutes) * DateTimeConstants.MILLIS_PER_MINUTE
+        + ((long) hours) * DateTimeConstants.MILLIS_PER_HOUR
+        + ((long) days) * DateTimeConstants.MILLIS_PER_DAY
+        + ((long) weeks) * DateTimeConstants.MILLIS_PER_WEEK;
+
+    Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());
+
+    // Normalize months into years if both types are supported
+    if (type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {
         years = FieldUtils.safeAdd(years, months / 12);
         months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+        // Java modulus can return negative, fix for negative months
+        if (months < 0) {
+            months += 12;
+            years = FieldUtils.safeAdd(years, -1);
         }
-            if (months != 0) {
+        result = result.withYears(years).withMonths(months);
+    } else if (type.isSupported(DurationFieldType.months()) && !type.isSupported(DurationFieldType.years())) {
+        // Only months supported, collapse all to months
+        months = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));
         result = result.withMonths(months);
+    } else if (years != 0 || months != 0) {
+        // period type doesn't support months or years, or only supports years but not months (irregular)
+        throw new UnsupportedOperationException("Field is not supported");
     }
-        }
+
     return result;
 }
\ No newline at end of file
