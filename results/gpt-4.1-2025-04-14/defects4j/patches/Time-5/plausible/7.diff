diff --git a/tmp/1aa15d0c-9776-478a-88c1-f1ffd496011f_buggy.java b/tmp/4e7fc677-581d-492a-98ff-83cd31de1264_fixed.java
index dbda381..4f2103c 100644
--- a/tmp/1aa15d0c-9776-478a-88c1-f1ffd496011f_buggy.java
+++ b/tmp/4e7fc677-581d-492a-98ff-83cd31de1264_fixed.java
@@ -1,54 +1,68 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
+
+    // Check if years or months are not supported in given PeriodType, and throw if values are nonzero.
+    int years = getYears();
+    int months = getMonths();
+    boolean typeSupportsYears = type.isSupported(DurationFieldType.years());
+    boolean typeSupportsMonths = type.isSupported(DurationFieldType.months());
+
+    if ((years != 0 && !typeSupportsYears) || (months != 0 && !typeSupportsMonths)) {
+        // Instead of splitting years/months into months (as per periodType),
+        // just convert all year and month values to months and place into months if months is supported
+        if (typeSupportsMonths) {
+            // Convert years to months and add to months field
+            int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);
+            // Build a period with just months
+            Period result = new Period(0, totalMonths, 0, 0, 0, 0, 0, 0, type);
+            // Add rest of fields as appropriate
+            if (type.isSupported(DurationFieldType.weeks())) {
+                result = result.withWeeks(getWeeks());
+            }
+            if (type.isSupported(DurationFieldType.days())) {
+                result = result.withDays(getDays());
+            }
+            if (type.isSupported(DurationFieldType.hours())) {
+                result = result.withHours(getHours());
+            }
+            if (type.isSupported(DurationFieldType.minutes())) {
+                result = result.withMinutes(getMinutes());
+            }
+            if (type.isSupported(DurationFieldType.seconds())) {
+                result = result.withSeconds(getSeconds());
+            }
+            if (type.isSupported(DurationFieldType.millis())) {
+                result = result.withMillis(getMillis());
+            }
+            return result.normalizedStandard(type); // For week/days/hours normalization
+        } else {
+            throw new UnsupportedOperationException("Field is not supported");
+        }
+    }
+
+    long millis = getMillis();
     millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
     millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
     millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
     millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
     millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
     Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
-        int years = getYears();
-        int months = getMonths();
+
+    if (typeSupportsYears || typeSupportsMonths) {
         if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+            int yearsToSet = years;
+            int monthsToSet = months;
+            if (typeSupportsYears && typeSupportsMonths) {
+                yearsToSet = FieldUtils.safeAdd(years, months / 12);
+                monthsToSet = months % 12;
+            }
+            if (typeSupportsYears && yearsToSet != 0) {
+                result = result.withYears(yearsToSet);
+            }
+            if (typeSupportsMonths && monthsToSet != 0) {
+                result = result.withMonths(monthsToSet);
             }
-            if (months != 0) {
-                result = result.withMonths(months);
         }
     }
     return result;
 }
\ No newline at end of file
