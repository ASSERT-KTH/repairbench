diff --git a/tmp/dc3ff73f-e3d4-4a34-b384-2aec202c649c_buggy.java b/tmp/341aabd0-08a2-4734-ba2a-3c39a3209aa5_fixed.java
index 4e21866..804e12a 100644
--- a/tmp/dc3ff73f-e3d4-4a34-b384-2aec202c649c_buggy.java
+++ b/tmp/341aabd0-08a2-4734-ba2a-3c39a3209aa5_fixed.java
@@ -1,10 +1,44 @@
 /**
  * Computes the square-root of the weight matrix.
  *
  * @param m Symmetric, positive-definite (weight) matrix.
  * @return the square-root of the weight matrix.
  */
 private RealMatrix squareRoot(RealMatrix m) {
+    // Avoid forming EigenDecomposition and matrix square root if weighting is identity
+    if (m instanceof DiagonalMatrix) {
+        // If the matrix is diagonal, just take square roots of the diagonal elements
+        double[] diag = ((DiagonalMatrix) m).getData();
+        double[] sqrtDiag = new double[diag.length];
+        for (int i = 0; i < diag.length; i++) {
+            sqrtDiag[i] = Math.sqrt(diag[i]);
+        }
+        return new DiagonalMatrix(sqrtDiag);
+    }
+    int n = m.getRowDimension();
+    // Check if m is (close to) identity
+    boolean isIdentity = true;
+    for (int i = 0; i < n && isIdentity; i++) {
+        for (int j = 0; j < n; j++) {
+            double v = m.getEntry(i, j);
+            if (i == j) {
+                if (Math.abs(v - 1.0) > 1e-14) {
+                    isIdentity = false;
+                    break;
+                }
+            } else {
+                if (Math.abs(v) > 1e-14) {
+                    isIdentity = false;
+                    break;
+                }
+            }
+        }
+    }
+    if (isIdentity) {
+        // If m is (close to) identity, just return a new identity matrix
+        return MatrixUtils.createRealIdentityMatrix(n);
+    }
+    // For general symmetric, positive-definite matrix, use EigenDecomposition
     final EigenDecomposition dec = new EigenDecomposition(m);
     return dec.getSquareRoot();
 }
\ No newline at end of file
