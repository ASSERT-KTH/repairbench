diff --git a/tmp/7f9d0416-c5fd-4a06-880d-63c32684ff57_buggy.java b/tmp/eb6e8b2d-8c09-4c43-ab53-e6922ca78a4e_fixed.java
index dc93be3..94597a7 100644
--- a/tmp/7f9d0416-c5fd-4a06-880d-63c32684ff57_buggy.java
+++ b/tmp/eb6e8b2d-8c09-4c43-ab53-e6922ca78a4e_fixed.java
@@ -1,14 +1,18 @@
 Element insert(Token.StartTag startTag) {
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
         Element el = insertEmpty(startTag);
+        // Don't add the element to the stack if it's a known self-closing tag (they are empty and shouldn't be added).
+        // But for unknown tags, they should be added to the stack, so only add if tag is unknown.
+        if (!el.tag().isKnownTag() || !el.tag().isSelfClosing()) {
             stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        }
+        // emit fake end tag for yielded processing
+        tokeniser.emit(new Token.EndTag(el.tagName()));
         return el;
     }
-        
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
