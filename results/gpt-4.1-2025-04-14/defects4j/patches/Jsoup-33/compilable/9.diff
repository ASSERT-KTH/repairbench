diff --git a/tmp/2e9d2b7c-f6b7-4b40-98d7-d1f09c1fc912_buggy.java b/tmp/0208c84d-3697-495a-a038-083e5e24c253_fixed.java
index dc93be3..8d7ed61 100644
--- a/tmp/2e9d2b7c-f6b7-4b40-98d7-d1f09c1fc912_buggy.java
+++ b/tmp/0208c84d-3697-495a-a038-083e5e24c253_fixed.java
@@ -1,14 +1,19 @@
 Element insert(Token.StartTag startTag) {
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
+        // If tag is known and not a formatting element, treat as normal paired element by emitting fake end tag (handled via stack.add & EndTag).
+        // If the tag is unknown, insert as empty (no stack add, nor fake end tag).
+        Tag tag = Tag.valueOf(startTag.name());
         Element el = insertEmpty(startTag);
+        if (tag.isKnownTag()) {
             stack.add(el);
             tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        }
         return el;
     }
     
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
