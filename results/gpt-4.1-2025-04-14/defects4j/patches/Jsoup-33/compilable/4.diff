diff --git a/tmp/a6553d41-abc9-4ac3-8e41-e2eb1db56ef1_buggy.java b/tmp/502cbc90-d56a-40a0-ae18-c417d3239f95_fixed.java
index dc93be3..dc8d120 100644
--- a/tmp/a6553d41-abc9-4ac3-8e41-e2eb1db56ef1_buggy.java
+++ b/tmp/502cbc90-d56a-40a0-ae18-c417d3239f95_fixed.java
@@ -1,14 +1,20 @@
 Element insert(Token.StartTag startTag) {
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
+        if (Tag.valueOf(startTag.name()).isSelfClosing()) {
+            // Known empty (void) tag: just insertEmpty, do NOT add to stack nor emit fake end tag
+            return insertEmpty(startTag);
+        } else {
+            // Unknown or not void: parse as empty, but force fake end tag as before for non-voids
             Element el = insertEmpty(startTag);
             stack.add(el);
             tokeniser.emit(new Token.EndTag(el.tagName())); // ensure we get out of whatever state we are in. emitted for yielded processing
             return el;
         }
+    }
 
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
