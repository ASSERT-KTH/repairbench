diff --git a/tmp/455cbaa1-bd34-4b4e-974a-4be16efe0d11_buggy.java b/tmp/a0f2990c-1f8a-4549-b550-168111161afe_fixed.java
index dc93be3..b4dd742 100644
--- a/tmp/455cbaa1-bd34-4b4e-974a-4be16efe0d11_buggy.java
+++ b/tmp/a0f2990c-1f8a-4549-b550-168111161afe_fixed.java
@@ -1,14 +1,23 @@
 Element insert(Token.StartTag startTag) {
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
+        // For known non-empty tags, treat as start + end
+        Tag tag = Tag.valueOf(startTag.name());
+        Element el = new Element(tag, baseUri, startTag.attributes);
+        insert(el);
+        if (tag.isSelfClosing()) {
+            // known empty (void) tags -- don't add to stack or emit end tag
+            return el;
+        } else {
+            // known non-empty tag written as self-closing: add to stack, then fake end tag to close it immediately
             stack.add(el);
             tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
             return el;
         }
+    }
 
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
