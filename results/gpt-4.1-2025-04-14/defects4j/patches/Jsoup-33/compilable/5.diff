diff --git a/tmp/3c27f0e8-a920-40f5-bd68-cb553fb23099_buggy.java b/tmp/92769bca-aa20-471a-a960-fc80dcb8db6c_fixed.java
index dc93be3..68646ce 100644
--- a/tmp/3c27f0e8-a920-40f5-bd68-cb553fb23099_buggy.java
+++ b/tmp/92769bca-aa20-471a-a960-fc80dcb8db6c_fixed.java
@@ -1,14 +1,20 @@
 Element insert(Token.StartTag startTag) {
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
+        // If the tag is a known empty tag (void tag), insert as empty and don't add to stack or emit end tag.
+        Tag tag = Tag.valueOf(startTag.name());
+        if (tag.isSelfClosing() && tag.isKnownTag() && tag.isEmpty()) {
+            return insertEmpty(startTag);
+        } else {
             Element el = insertEmpty(startTag);
             stack.add(el);
             tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
             return el;
         }
+    }
 
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
