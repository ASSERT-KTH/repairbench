diff --git a/tmp/a9d0208d-9aa3-4b1d-8f50-ba49c97279f2_buggy.java b/tmp/256b5759-d751-4b42-b2b2-5f4aacf080b7_fixed.java
index 800e6e1..ccc41e9 100644
--- a/tmp/a9d0208d-9aa3-4b1d-8f50-ba49c97279f2_buggy.java
+++ b/tmp/256b5759-d751-4b42-b2b2-5f4aacf080b7_fixed.java
@@ -1,32 +1,41 @@
 /**
  * Visit a node in a local scope, and add any local variables or catch
  * parameters into the local symbol table.
  *
  * @param t The node traversal.
  * @param n The node being visited.
  * @param parent The parent of n
  */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
+  // Attach literal types *BEFORE* defining VAR and FUNCTION,
+  // so stub properties like JSDoc on 'goog.foo;' are picked up.
   attachLiteralTypes(n);
+
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
+        // Do not define local function-expr as variable
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
+      // For stub property declaration, e.g. /** @param {number} x */ goog.foo;
+      // the JSDoc is attached to goog.foo which is an expr result in VAR child.
+      for (Node varChild = n.getFirstChild(); varChild != null; varChild = varChild.getNext()) {
+        attachLiteralTypes(varChild);
+      }
       break;
   }
 }
\ No newline at end of file
