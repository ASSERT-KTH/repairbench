diff --git a/tmp/a5f46f58-59a3-48e8-951c-9969df31e666_buggy.java b/tmp/6688f34f-893a-4a4f-87bd-d466fe347865_fixed.java
index 800e6e1..1717466 100644
--- a/tmp/a5f46f58-59a3-48e8-951c-9969df31e666_buggy.java
+++ b/tmp/6688f34f-893a-4a4f-87bd-d466fe347865_fixed.java
@@ -1,32 +1,41 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
+
+  // Fix: Define qualified and unqualified names with type information, even when not assigned
+  if (n.getType() == Token.NAME || n.getType() == Token.GETPROP) {
+    if ((parent != null && parent.getType() == Token.EXPR_RESULT)
+        && n.getJSDocInfo() != null
+        && !n.isQualifiedName()
+        && scope.isLocal()) {
+      // Unqualified local stub (function stub, constructor, etc)
+      defineSlot(n, parent, n.getJSDocInfo());
+    } else if ((parent != null && parent.getType() == Token.EXPR_RESULT)
+        && n.isQualifiedName()
+        && n.getJSDocInfo() != null) {
+      // Namespaced function stub, or qualified property definition
+      defineSlot(n, parent, n.getJSDocInfo());
+    }
+  }
+
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
   }
 }
\ No newline at end of file
