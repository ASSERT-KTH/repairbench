diff --git a/tmp/66387246-2101-403e-8f32-afe3806935a2_buggy.java b/tmp/3d755964-73a7-4715-9604-61ba8d7d680f_fixed.java
index 800e6e1..6a21e68 100644
--- a/tmp/66387246-2101-403e-8f32-afe3806935a2_buggy.java
+++ b/tmp/3d755964-73a7-4715-9604-61ba8d7d680f_fixed.java
@@ -1,32 +1,46 @@
 /**
  * Visit a node in a local scope, and add any local variables or catch
  * parameters into the local symbol table.
  *
  * @param t The node traversal.
  * @param n The node being visited.
  * @param parent The parent of n
  */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
+
+  // Handle function stubs and "this.foo;"-style property stubs
+  if (n.isExprResult()) {
+    Node expr = n.getFirstChild();
+    // Handle function stub: "goog.foo;"
+    if (expr != null && expr.isGetProp()) {
+      defineSlot(expr, n, expr.getJSDocInfo(), expr.getQualifiedName(), true);
+    }
+    // Handle property stub: "this.foo;"
+    else if (expr != null && expr.isGetProp() && expr.getFirstChild().isThis()) {
+      defineSlot(expr, n, expr.getJSDocInfo(), expr.getQualifiedName(), true);
+    }
+  }
+
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
   }
 }
\ No newline at end of file
