diff --git a/tmp/b02be75d-ccf6-4ddd-8f77-dfaa8658fb12_buggy.java b/tmp/fd15916c-c8ee-4b4a-a595-77e19b53cc1a_fixed.java
index 800e6e1..6a334f8 100644
--- a/tmp/b02be75d-ccf6-4ddd-8f77-dfaa8658fb12_buggy.java
+++ b/tmp/fd15916c-c8ee-4b4a-a595-77e19b53cc1a_fixed.java
@@ -1,32 +1,45 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
+
+      // Fix: Always define function stubs (variable names that are annotated as function types)
+      // even for assignments like "goog.foo;" or "this.foo;" with a JSDoc type/function type,
+      // as annotations may occur outside function declarations proper.
+      if (n.getType() == Token.GETPROP || n.getType() == Token.NAME) {
+        // Only if there is JSDoc info with a type or function parameters/return
+        JSDocInfo info = n.getJSDocInfo();
+        if (info != null &&
+            (info.hasType() || info.hasReturnType() || info.hasParameterType())) {
+          defineSlot(n, parent, info);
+        }
+      }
+
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
       }
     }
\ No newline at end of file
