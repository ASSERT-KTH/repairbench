diff --git a/tmp/c0b365d4-ddad-40b0-87b9-ba0c0352ef69_buggy.java b/tmp/368b7eb6-9746-480a-a58d-32310ffc2ad5_fixed.java
index 800e6e1..8f1629f 100644
--- a/tmp/c0b365d4-ddad-40b0-87b9-ba0c0352ef69_buggy.java
+++ b/tmp/368b7eb6-9746-480a-a58d-32310ffc2ad5_fixed.java
@@ -1,32 +1,37 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
+
+  // Handle FUNCTION STUBS (unassigned function types for object properties, etc)
+  if (n.getJSDocInfo() != null && n.getJSDocInfo().hasType()) {
+    // e.g. goog.foo; /** @param {number} x */ goog.foo;
+    Node nameNode = n;
+    if (n.getType() == Token.EXPR_RESULT) {
+      nameNode = n.getFirstChild();
+    }
+    if (nameNode != null && nameNode.getType() == Token.GETPROP) {
+      defineFunctionLiteral(nameNode, parent, n.getJSDocInfo());
+    }
+  }
+
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
   }
 }
\ No newline at end of file
