diff --git a/tmp/b9313091-e1b2-419f-9873-afec21c204a3_buggy.java b/tmp/ff5ef6d9-aa1a-4bdb-b77c-76c4b6059503_fixed.java
index 800e6e1..11f119d 100644
--- a/tmp/b9313091-e1b2-419f-9873-afec21c204a3_buggy.java
+++ b/tmp/ff5ef6d9-aa1a-4bdb-b77c-76c4b6059503_fixed.java
@@ -1,32 +1,44 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
+
+      // Always define stub declarations, even for assignment-style stubs.
+      // (This fixes goog.foo and this.foo stubs collected via JSDoc.)
+      if (n.getJSDocInfo() != null &&
+          (n.getJSDocInfo().containsFunctionDeclaration() ||
+           n.getJSDocInfo().containsConstructor())) {
+        if ((parent != null && parent.getType() == Token.EXPR_RESULT && n.getType() == Token.GETPROP) ||
+            (parent != null && parent.getType() == Token.EXPR_RESULT && n.getType() == Token.NAME)) {
+          defineDeclaredFunction(n, parent);
+        }
+      }
+
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
       }
     }
\ No newline at end of file
