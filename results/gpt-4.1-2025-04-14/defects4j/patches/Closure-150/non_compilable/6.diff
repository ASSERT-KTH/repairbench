diff --git a/tmp/9c7b9f58-0960-407d-aca1-530597107590_buggy.java b/tmp/570580a1-9351-4f92-9ce7-5b501404e53d_fixed.java
index 800e6e1..050a94f 100644
--- a/tmp/9c7b9f58-0960-407d-aca1-530597107590_buggy.java
+++ b/tmp/570580a1-9351-4f92-9ce7-5b501404e53d_fixed.java
@@ -1,32 +1,38 @@
 /**
  * Visit a node in a local scope, and add any local variables or catch
  * parameters into the local symbol table.
  *
  * @param t The node traversal.
  * @param n The node being visited.
  * @param parent The parent of n
  */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
-      switch (n.getType()) {
-        case Token.FUNCTION:
+
+  // Always define function stubs and function types on assignments and property declarations,
+  // regardless of their parent, to ensure local stubs are checked.
+  if (n.getType() == Token.FUNCTION) {
     if (parent.getType() == Token.NAME) {
+      // Do not define named function expressions as vars
       return;
     }
     defineDeclaredFunction(n, parent);
-          break;
-        case Token.CATCH:
+  } else if (n.getType() == Token.CATCH) {
     defineCatch(n, parent);
-          break;
-        case Token.VAR:
+  } else if (n.getType() == Token.VAR) {
     defineVar(n, parent);
-          break;
+  } else if (n.isExprResult()) {
+    Node child = n.getFirstChild();
+    // Handle function stubs like "goog.foo;" or "this.foo;" and JSDoc property declarations.
+    if (child != null && (child.isGetProp() || child.isName())) {
+      maybeDeclareStubTypedVar(child, n);
+    }
   }
 }
\ No newline at end of file
