diff --git a/tmp/65c50033-fbfb-4165-afef-eccefdad4ba4_buggy.java b/tmp/6ef69736-c56a-4d66-8f33-8b24e796e2d0_fixed.java
index 21f64c6..9f66397 100644
--- a/tmp/65c50033-fbfb-4165-afef-eccefdad4ba4_buggy.java
+++ b/tmp/6ef69736-c56a-4d66-8f33-8b24e796e2d0_fixed.java
@@ -1,23 +1,20 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+    int seqLen = seq.length();
+    int maxOffset = length - seqLen;
+    for (int offset = pos; offset <= maxOffset; offset++) {
         // scan to first instance of startchar:
         if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            while(++offset <= maxOffset && startChar != input[offset]);
+        if (offset > maxOffset)
+            break; // out of range, stop
+        int i = 1;
+        while (i < seqLen && seq.charAt(i) == input[offset + i]) {
+            i++;
+        }
+        if (i == seqLen) // found full sequence
             return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
