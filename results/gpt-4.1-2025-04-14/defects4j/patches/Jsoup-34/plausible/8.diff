diff --git a/tmp/60f28525-87e8-41e8-a40b-424d971ebf18_buggy.java b/tmp/406373c9-53eb-4316-bcff-69604b9b6722_fixed.java
index 21f64c6..ae676bf 100644
--- a/tmp/60f28525-87e8-41e8-a40b-424d971ebf18_buggy.java
+++ b/tmp/406373c9-53eb-4316-bcff-69604b9b6722_fixed.java
@@ -1,23 +1,27 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+    int seqLen = seq.length();
+
+    outer: for (int offset = pos; offset <= length - seqLen; offset++) {
         // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        if (startChar != input[offset]) {
+            while (++offset <= length - seqLen && startChar != input[offset]);
+            if (offset > length - seqLen)
+                break;
+        }
+        // Now at possible match
+        for (int j = 1; j < seqLen; j++) {
+            if (seq.charAt(j) != input[offset + j])
+                continue outer;
+        }
         return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
