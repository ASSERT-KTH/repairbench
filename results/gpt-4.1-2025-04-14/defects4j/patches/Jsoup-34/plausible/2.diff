diff --git a/tmp/6a4ad54f-d214-41bd-803d-c8cd6f5e7db9_buggy.java b/tmp/569d72ac-7900-45e8-9dbd-4f05415c4314_fixed.java
index 21f64c6..2ec5802 100644
--- a/tmp/6a4ad54f-d214-41bd-803d-c8cd6f5e7db9_buggy.java
+++ b/tmp/569d72ac-7900-45e8-9dbd-4f05415c4314_fixed.java
@@ -1,23 +1,21 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
+    int seqLen = seq.length();
+    if (seqLen == 0) return -1; // no empty matches
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+    int searchLimit = length - seqLen + 1; // make sure we don't scan past the end
+    for (int offset = pos; offset < searchLimit; offset++) {
         // scan to first instance of startchar:
         if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+            while (++offset < searchLimit && startChar != input[offset]);
+        if (offset < searchLimit) {
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            int last = i + seqLen - 1;
+            int j = 1;
+            for (; i < last && seq.charAt(j) == input[i]; i++, j++);
+            if (j == seqLen) // found full sequence
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
