diff --git a/tmp/e493576e-6860-4c96-81c7-09032d997c19_buggy.java b/tmp/eb44478d-c1dd-4f1b-ae33-887c3cbb6075_fixed.java
index 21f64c6..80e1eed 100644
--- a/tmp/e493576e-6860-4c96-81c7-09032d997c19_buggy.java
+++ b/tmp/eb44478d-c1dd-4f1b-ae33-887c3cbb6075_fixed.java
@@ -1,23 +1,23 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+    int seqLen = seq.length();
+    int maxOffset = length - seqLen + 1;
+    for (int offset = pos; offset < maxOffset; offset++) {
         // scan to first instance of startchar:
         if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+            while (++offset < maxOffset && startChar != input[offset]);
+        if (offset >= maxOffset)
+            break;
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
+        int last = i + seqLen - 1;
+        int j = 1;
+        while (i < last && seq.charAt(j) == input[i]) {
+            i++;
+            j++;
+        }
         if (i == last) // found full sequence
             return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
