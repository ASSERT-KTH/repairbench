diff --git a/tmp/4e04b376-ae93-4db4-a703-f80e8d57c5c6_buggy.java b/tmp/ab2a0bdf-4fdf-4111-be94-2bd2a297a8d9_fixed.java
index 21f64c6..e42793d 100644
--- a/tmp/4e04b376-ae93-4db4-a703-f80e8d57c5c6_buggy.java
+++ b/tmp/ab2a0bdf-4fdf-4111-be94-2bd2a297a8d9_fixed.java
@@ -1,23 +1,23 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
+    int seqLen = seq.length();
+    if (seqLen == 0) return -1;
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+    int maxOffset = length - seqLen; // stop point to avoid overflow
+
+    for (int offset = pos; offset <= maxOffset; offset++) {
         // scan to first instance of startchar:
         if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            while (++offset <= maxOffset && startChar != input[offset]);
+        if (offset > maxOffset) // boundary check
+            break;
+        int i = 1;
+        for (; i < seqLen; i++) {
+            if (seq.charAt(i) != input[offset + i])
+                break;
+        }
+        if (i == seqLen) // found full sequence
             return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
