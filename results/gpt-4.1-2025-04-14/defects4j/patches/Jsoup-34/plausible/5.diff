diff --git a/tmp/d1d5a7d8-8b5d-4055-87f5-206fc6e0b287_buggy.java b/tmp/16ff5f84-46b4-4876-a177-59309436362b_fixed.java
index 21f64c6..8660a3c 100644
--- a/tmp/d1d5a7d8-8b5d-4055-87f5-206fc6e0b287_buggy.java
+++ b/tmp/16ff5f84-46b4-4876-a177-59309436362b_fixed.java
@@ -1,23 +1,29 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+    int seqLen = seq.length();
+    int maxScan = length - seqLen + 1;
+    for (int offset = pos; offset < maxScan; offset++) {
         // scan to first instance of startchar:
         if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+            while(++offset < maxScan && startChar != input[offset]);
+        if (offset < maxScan) {
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
+            int last = i + seqLen - 1;
+            int j = 1;
+            while (i < last && seq.charAt(j) == input[i]) {
+                i++;
+                j++;
+            }
             if (i == last) // found full sequence
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
