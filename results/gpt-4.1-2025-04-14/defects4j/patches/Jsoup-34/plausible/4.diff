diff --git a/tmp/ae3ef11f-c347-45c0-b9ab-a4d615834635_buggy.java b/tmp/b9ea7a06-22b6-4c7b-a4ff-a59702c60bb9_fixed.java
index 21f64c6..8ba2252 100644
--- a/tmp/ae3ef11f-c347-45c0-b9ab-a4d615834635_buggy.java
+++ b/tmp/b9ea7a06-22b6-4c7b-a4ff-a59702c60bb9_fixed.java
@@ -1,23 +1,26 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
+    int seqLen = seq.length();
+    if (seqLen == 0)
+        return 0; // Empty sequence is always found at the current position
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+    int maxOffset = length - seqLen;
+    for (int offset = pos; offset <= maxOffset; offset++) {
         // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+        if (startChar != input[offset]) {
+            while(++offset <= maxOffset && startChar != input[offset]);
+            if (offset > maxOffset)
+                break;
+        }
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        int last = i + seqLen - 1;
+        int j = 1;
+        for (; j < seqLen; j++, i++) {
+            if (input[i] != seq.charAt(j)) 
+                break;
+        }
+        if (j == seqLen) // found full sequence
             return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
