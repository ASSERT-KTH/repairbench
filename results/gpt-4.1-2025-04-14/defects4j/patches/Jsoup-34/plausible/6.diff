diff --git a/tmp/ecf4f0ad-6a92-4ba3-86dd-8771413d654a_buggy.java b/tmp/cbbecb1a-0197-4d2b-8c01-07d20dec0867_fixed.java
index 21f64c6..777c69b 100644
--- a/tmp/ecf4f0ad-6a92-4ba3-86dd-8771413d654a_buggy.java
+++ b/tmp/cbbecb1a-0197-4d2b-8c01-07d20dec0867_fixed.java
@@ -1,23 +1,24 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
+    int seqLen = seq.length();
+    if (seqLen == 0) return -1;
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+    int lastPossible = length - seqLen;
+    for (int offset = pos; offset <= lastPossible; offset++) {
         // scan to first instance of startchar:
         if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+            while (++offset <= lastPossible && startChar != input[offset]);
+        if (offset > lastPossible) // not enough room for seq
+            break;
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        int last = i + seqLen - 1;
+        int j = 1;
+        for (; j < seqLen; i++, j++) {
+            if (seq.charAt(j) != input[i])
+                break;
+        }
+        if (j == seqLen) // found full sequence
             return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
