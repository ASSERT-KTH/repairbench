diff --git a/tmp/5e9c50e0-4d70-4a41-8a2a-3294be70f744_buggy.java b/tmp/9329ef21-2ca5-41c3-a255-6e247c313daf_fixed.java
index 2573d30..67be5ea 100644
--- a/tmp/5e9c50e0-4d70-4a41-8a2a-3294be70f744_buggy.java
+++ b/tmp/9329ef21-2ca5-41c3-a255-6e247c313daf_fixed.java
@@ -1,20 +1,41 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // The replaced value must not refer to a parent property more than once
+    // Otherwise it could be outdated after the previous assignment.
+    Node curr = node;
+    Node rep = replacement;
+
+    // Find the base object of the original and the replacement
+    while (curr.isGetProp()) {
+      curr = curr.getFirstChild();
+    }
+    while (rep != null && rep.isGetProp()) {
+      rep = rep.getFirstChild();
+    }
+
+    // If the base object is the same variable AND the property chain is the same,
+    // then it's unsafe to replace because the parent object may have changed.
+    if (curr.isName() && rep != null && rep.isName()
+        && curr.getString().equals(rep.getString()) 
+        && node.checkTreeEquals(replacement)) {
+      return false;
+    }
+
+    curr = node.getFirstChild();
+    if (curr.isName()
+        && isNameAssignedTo(curr.getString(), replacement)) {
       return false;
     }
 
     return true;
   }
\ No newline at end of file
