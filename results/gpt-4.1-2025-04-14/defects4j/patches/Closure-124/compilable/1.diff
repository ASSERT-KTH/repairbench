diff --git a/tmp/9ba0c590-2fff-4a32-a09a-3b34be04026c_buggy.java b/tmp/4d02f9ef-af64-445f-83c2-9566bfb39f7c_fixed.java
index 2573d30..a9adac4 100644
--- a/tmp/9ba0c590-2fff-4a32-a09a-3b34be04026c_buggy.java
+++ b/tmp/4d02f9ef-af64-445f-83c2-9566bfb39f7c_fixed.java
@@ -1,20 +1,32 @@
 /**
  * Checks name referenced in node to determine if it might have
  * changed.
  * @return Whether the replacement can be made.
  */
 private boolean isSafeReplacement(Node node, Node replacement) {
   // No checks are needed for simple names.
   if (node.isName()) {
     return true;
   }
   Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+  Node obj = node.getFirstChild();
+  String prop = node.getLastChild().getString();
+
+  // If the replacement may assign to the same property chain,
+  // we have to be conservative and disallow this replacement.
+  if (obj.isName() && replacement.isGetProp()) {
+    Node repObj = replacement.getFirstChild();
+    String repProp = replacement.getLastChild().getString();
+    if (repObj.isName() && obj.getString().equals(repObj.getString()) && prop.equals(repProp)) {
+      return false;
+    }
+  }
+
+  if (obj.isName()
+      && isNameAssignedTo(obj.getString(), replacement)) {
     return false;
   }
 
   return true;
 }
\ No newline at end of file
