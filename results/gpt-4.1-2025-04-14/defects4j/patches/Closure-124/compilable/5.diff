diff --git a/tmp/83fd54e0-8d51-4251-a9ad-c4f3fe5300cc_buggy.java b/tmp/0757e514-10e9-4453-a69f-f4809e5a29fc_fixed.java
index 2573d30..1a9af10 100644
--- a/tmp/83fd54e0-8d51-4251-a9ad-c4f3fe5300cc_buggy.java
+++ b/tmp/0757e514-10e9-4453-a69f-f4809e5a29fc_fixed.java
@@ -1,20 +1,31 @@
 /**
  * Checks name referenced in node to determine if it might have
  * changed.
  * @return Whether the replacement can be made.
  */
 private boolean isSafeReplacement(Node node, Node replacement) {
   // No checks are needed for simple names.
   if (node.isName()) {
     return true;
   }
   Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+  Node firstChild = node.getFirstChild();
+  if (firstChild.isName()
+      && isNameAssignedTo(firstChild.getString(), replacement)) {
+    // If the replacement is the same property access (e.g., x.parentNode)
+    // as in the original node, and that property is the same,
+    // we need to check the property chain for possible cycles.
+    if (replacement.isGetProp()) {
+      Node repFirstChild = replacement.getFirstChild();
+      // Check if chains are the same (e.g., x.parentNode <-> x.parentNode)
+      if (firstChild.isEquivalentTo(repFirstChild) &&
+          node.getLastChild().isEquivalentTo(replacement.getLastChild())) {
+        return false;
+      }
+    }
     return false;
   }
 
   return true;
 }
\ No newline at end of file
