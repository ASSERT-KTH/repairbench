diff --git a/tmp/1c75b132-0cb1-4049-80c3-b4f91b975ef5_buggy.java b/tmp/618d9800-850e-4b8b-b45d-4f52b45b1d63_fixed.java
index 2573d30..a9f3e9e 100644
--- a/tmp/1c75b132-0cb1-4049-80c3-b4f91b975ef5_buggy.java
+++ b/tmp/618d9800-850e-4b8b-b45d-4f52b45b1d63_fixed.java
@@ -1,20 +1,33 @@
 /**
  * Checks name referenced in node to determine if it might have
  * changed.
  * @return Whether the replacement can be made.
  */
 private boolean isSafeReplacement(Node node, Node replacement) {
   // No checks are needed for simple names.
   if (node.isName()) {
     return true;
   }
   Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+  Node child = node.getFirstChild();
+  if (child.isName()
+      && isNameAssignedTo(child.getString(), replacement)) {
+    // Disallow replacement if the root object is the same as the replaced value,
+    // e.g., x = x.parentNode.parentNode; replacing x.parentNode with x would be unsafe.
     return false;
   }
 
+  // Additional check: Disallow replacement if the replacement is a property access
+  // rooted at the same object as node (to avoid cascading unsafe replacements).
+  if (replacement.isGetProp()) {
+    Node replacementRoot = replacement.getFirstChild();
+    Node nodeRoot = node.getFirstChild();
+    if (replacementRoot.isName() && nodeRoot.isName()
+        && replacementRoot.getString().equals(nodeRoot.getString())) {
+      return false;
+    }
+  }
+
   return true;
 }
\ No newline at end of file
