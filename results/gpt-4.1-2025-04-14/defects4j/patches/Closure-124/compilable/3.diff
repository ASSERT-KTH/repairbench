diff --git a/tmp/677738dd-e6cf-4dda-bf96-8c9d954cae11_buggy.java b/tmp/711eb1ce-8e71-4127-ade9-ff3eef3b1cb7_fixed.java
index 2573d30..ef2d202 100644
--- a/tmp/677738dd-e6cf-4dda-bf96-8c9d954cae11_buggy.java
+++ b/tmp/711eb1ce-8e71-4127-ade9-ff3eef3b1cb7_fixed.java
@@ -1,20 +1,39 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // Ensure both node and replacement must access the same property of the same base.
+    // If the bases are not identical, unsafe to replace.
+    Node nodeBase = node.getFirstChild();
+    Node replacementBase = replacement.isGetProp() ? replacement.getFirstChild() : null;
+
+    // Check bases: both must be simple names, and match
+    if (nodeBase == null 
+        || !nodeBase.isName() 
+        || replacementBase == null 
+        || !replacementBase.isName() 
+        || !nodeBase.getString().equals(replacementBase.getString())) {
+      return false;
+    }
+
+    // Additionally, check properties must match
+    String nodeProp = node.getLastChild().getString();
+    String replacementProp = replacement.isGetProp() ? replacement.getLastChild().getString() : null;
+    if (replacementProp == null || !nodeProp.equals(replacementProp)) {
+      return false;
+    }
+
+    if (isNameAssignedTo(nodeBase.getString(), replacement)) {
       return false;
     }
 
     return true;
   }
\ No newline at end of file
