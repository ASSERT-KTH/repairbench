diff --git a/tmp/7b9b22b6-4106-4ef2-bb97-fefb02473df9_buggy.java b/tmp/5fafe45c-6862-4044-8716-6d6ddaaf514c_fixed.java
index 2573d30..2e42757 100644
--- a/tmp/7b9b22b6-4106-4ef2-bb97-fefb02473df9_buggy.java
+++ b/tmp/5fafe45c-6862-4044-8716-6d6ddaaf514c_fixed.java
@@ -1,20 +1,29 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    Node objNode = node.getFirstChild();
+    // If we're accessing a property of the same name as the replacement,
+    // it isn't safe if the replacement itself is the same property.
+    if (objNode.isName()
+        && isNameAssignedTo(objNode.getString(), replacement)) {
+      // But only if the property being accessed is the same as the property
+      // in the replacement. Prevents x = x.parentNode; x = x.parentNode;
+      // from being incorrectly replaced.
+      String prop1 = node.getLastChild().getString();
+      if (replacement.isGetProp() &&
+          prop1.equals(replacement.getLastChild().getString())) {
         return false;
       }
+    }
 
     return true;
   }
\ No newline at end of file
