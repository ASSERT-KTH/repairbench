diff --git a/tmp/8ff2edd8-6f44-42a6-9320-8e24aa4bd28a_buggy.java b/tmp/f2a4e939-b536-4ec7-a854-a2b39c6576e8_fixed.java
index 2573d30..703ba5b 100644
--- a/tmp/8ff2edd8-6f44-42a6-9320-8e24aa4bd28a_buggy.java
+++ b/tmp/f2a4e939-b536-4ec7-a854-a2b39c6576e8_fixed.java
@@ -1,20 +1,26 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // Check if the object of the property chain is being reassigned;
+    // if so, the replacement is unsafe.
+    Node obj = node.getFirstChild();
+    if (obj.isName() && isNameAssignedTo(obj.getString(), replacement)) {
+      return false;
+    }
+
+    // Recursively check parent properties of deeply nested property chains.
+    if (obj.isGetProp() && !isSafeReplacement(obj, replacement)) {
       return false;
     }
 
     return true;
   }
\ No newline at end of file
