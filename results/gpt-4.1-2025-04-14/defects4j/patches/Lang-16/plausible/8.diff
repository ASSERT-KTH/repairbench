diff --git a/tmp/5e935edd-db31-440a-a70b-7d183a1420a4_buggy.java b/tmp/c999c715-f3b3-40f2-8835-7a575f0fdeee_fixed.java
index d95d5a8..8a61ff5 100644
--- a/tmp/5e935edd-db31-440a-a70b-7d183a1420a4_buggy.java
+++ b/tmp/c999c715-f3b3-40f2-8835-7a575f0fdeee_fixed.java
@@ -1,177 +1,160 @@
-    /**
-     * <p>Turns a string value into a java.lang.Number.</p>
-     *
-     * <p>First, the value is examined for a type qualifier on the end
-     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts 
-     * trying to create successively larger types from the type specified
-     * until one is found that can represent the value.</p>
-     *
-     * <p>If a type specifier is not found, it will check for a decimal point
-     * and then try successively larger types from <code>Integer</code> to
-     * <code>BigInteger</code> and from <code>Float</code> to
-     * <code>BigDecimal</code>.</p>
-     *
-     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it
-     * will be interpreted as a hexadecimal integer.  Values with leading
-     * <code>0</code>'s will not be interpreted as octal.</p>
-     *
-     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
-     *
-     * <p>This method does not trim the input string, i.e., strings with leading
-     * or trailing spaces will generate NumberFormatExceptions.</p>
-     *
-     * @param str  String containing a number, may be null
-     * @return Number created from the string (or null if the input is null)
-     * @throws NumberFormatException if the value cannot be converted
-     */
 public static Number createNumber(String str) throws NumberFormatException {
     if (str == null) {
         return null;
     }
     if (StringUtils.isBlank(str)) {
         throw new NumberFormatException("A blank string is not a valid number");
     }
     if (str.startsWith("--")) {
-            // this is protection for poorness in java.lang.BigDecimal.
-            // it accepts this as a legal value, but it does not appear 
-            // to be in specification of class. OS X Java parses it to 
-            // a wrong value.
+        // protection for poorness in java.lang.BigDecimal.
         return null;
     }
-        if (str.startsWith("0x") || str.startsWith("-0x")) {
+    // Handle hex: 0x, 0X, -0x, -0X
+    int hexPrefixLen = 0;
+    if (str.startsWith("0x") || str.startsWith("0X")) {
+        hexPrefixLen = 2;
+    } else if (str.startsWith("-0x") || str.startsWith("-0X")) {
+        hexPrefixLen = 3;
+    }
+    if (hexPrefixLen > 0) {
         return createInteger(str);
     }
-        char lastChar = str.charAt(str.length() - 1);
+
+    int strLen = str.length();
+    char lastChar = str.charAt(strLen - 1);
+    int decPos = str.indexOf('.');
+    int expPos1 = str.indexOf('e');
+    int expPos2 = str.indexOf('E');
+    int expPos;
+    if (expPos1 > -1 && expPos2 > -1) {
+        expPos = Math.min(expPos1, expPos2); // pick the first occurrence
+    } else {
+        expPos = Math.max(expPos1, expPos2);
+    }
+
     String mant;
     String dec;
-        String exp;
-        int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+    String exp = null;
 
     if (decPos > -1) {
-
         if (expPos > -1) {
-                if (expPos < decPos || expPos > str.length()) {
+            if (expPos < decPos || expPos > strLen) {
                 throw new NumberFormatException(str + " is not a valid number.");
             }
             dec = str.substring(decPos + 1, expPos);
+            exp = str.substring(expPos + 1, strLen);
         } else {
             dec = str.substring(decPos + 1);
+            exp = null;
         }
         mant = str.substring(0, decPos);
     } else {
         if (expPos > -1) {
-                if (expPos > str.length()) {
+            if (expPos > strLen) {
                 throw new NumberFormatException(str + " is not a valid number.");
             }
             mant = str.substring(0, expPos);
+            exp = str.substring(expPos + 1, strLen);
         } else {
             mant = str;
+            exp = null;
         }
         dec = null;
     }
+
     if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
-            } else {
-                exp = null;
-            }
-            //Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
+        if ((lastChar == 'l') || (lastChar == 'L') ||
+            (lastChar == 'f') || (lastChar == 'F') ||
+            (lastChar == 'd') || (lastChar == 'D')) {
+            String numeric = str.substring(0, strLen - 1);
             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
             switch (lastChar) {
                 case 'l':
                 case 'L':
                     if (dec == null
                             && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                            && (numeric.length() > 0 &&
+                                ((numeric.charAt(0) == '-' && isDigits(numeric.substring(1))) || isDigits(numeric)))) {
                         try {
                             return createLong(numeric);
-                        } catch (NumberFormatException nfe) { // NOPMD
+                        } catch (NumberFormatException nfe) {
                             // Too big for a long
                         }
                         return createBigInteger(numeric);
-
                     }
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f':
                 case 'F':
                     try {
-                        Float f = NumberUtils.createFloat(numeric);
+                        Float f = createFloat(numeric);
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
-
-                    } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                    } catch (NumberFormatException nfe) {
+                        // ignore
                     }
-                    //$FALL-THROUGH$
+                    // Try BigDecimal for extreme exponents
+                    try {
+                        return createBigDecimal(numeric);
+                    } catch (NumberFormatException e) {
+                        // ignore
+                    }
+                    throw new NumberFormatException(str + " is not a valid number.");
                 case 'd':
                 case 'D':
                     try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        Double d = createDouble(numeric);
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                             return d;
                         }
-                    } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                    } catch (NumberFormatException nfe) {
+                        // ignore
                     }
                     try {
                         return createBigDecimal(numeric);
-                    } catch (NumberFormatException e) { // NOPMD
-                        // ignore the bad number
+                    } catch (NumberFormatException e) {
+                        // ignore
                     }
-                    //$FALL-THROUGH$
-                default :
                     throw new NumberFormatException(str + " is not a valid number.");
-
             }
-        } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
-            } else {
-                exp = null;
         }
+        throw new NumberFormatException(str + " is not a valid number.");
+    } else {
+        // No type qualifier
+        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
         if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+            // integer...
             try {
                 return createInteger(str);
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+            } catch (NumberFormatException nfe) {
+                // fall through
             }
             try {
                 return createLong(str);
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+            } catch (NumberFormatException nfe) {
+                // fall through
             }
             return createBigInteger(str);
-
         } else {
-                //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            // float/double/bigdecimal
             try {
                 Float f = createFloat(str);
                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                     return f;
                 }
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+            } catch (NumberFormatException nfe) {
+                // fall through
             }
             try {
                 Double d = createDouble(str);
                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                     return d;
                 }
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+            } catch (NumberFormatException nfe) {
+                // fall through
             }
-
             return createBigDecimal(str);
-
         }
     }
 }
\ No newline at end of file
