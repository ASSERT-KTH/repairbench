diff --git a/tmp/632d3feb-c4b3-4115-84de-2ec91aef3b8f_buggy.java b/tmp/e32dde11-c719-4e01-805d-f573a9072e2e_fixed.java
index 6cfa79b..624df28 100644
--- a/tmp/632d3feb-c4b3-4115-84de-2ec91aef3b8f_buggy.java
+++ b/tmp/e32dde11-c719-4e01-805d-f573a9072e2e_fixed.java
@@ -1,12 +1,17 @@
-    /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
-     * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
-     * @throws MathException if the algorithm fails to converge; unless
-     * x is more than 20 standard deviations from the mean, in which case the
-     * convergence exception is caught and 0 or 1 is returned.
-     */
 public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+    double dev = x - mean;
+    double sd = standardDeviation;
+    // Use 20 standard deviations as a cut-off for top-coding
+    if (dev < -20 * sd) {
+        return 0.0;
+    }
+    if (dev > 20 * sd) {
+        return 1.0;
+    }
+    try {
+        return 0.5 * (1.0 + Erf.erf(dev / (sd * Math.sqrt(2.0))));
+    } catch (MaxIterationsExceededException e) {
+        // If exception occurs within 20 sds, re-throw
+        throw new MathException(e);
+    }
 }
\ No newline at end of file
