diff --git a/tmp/e2520134-c62b-4600-b2fb-910fa4045aef_buggy.java b/tmp/65b55957-830e-442d-84f7-513cb9f5de21_fixed.java
index 6cfa79b..a09da90 100644
--- a/tmp/e2520134-c62b-4600-b2fb-910fa4045aef_buggy.java
+++ b/tmp/65b55957-830e-442d-84f7-513cb9f5de21_fixed.java
@@ -1,12 +1,32 @@
 /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+ * For this distribution, X, this method returns P(X &lt; <code>x</code>).
  * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
+ * @return CDF evaluated at <code>x</code>. 
  * @throws MathException if the algorithm fails to converge; unless
  * x is more than 20 standard deviations from the mean, in which case the
  * convergence exception is caught and 0 or 1 is returned.
  */
 public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+    double dev = x - mean;
+    double sd = standardDeviation;
+    double denom = sd * Math.sqrt(2.0);
+    double arg = dev / denom;
+
+    // if x is extremely far in the tail, avoid Erf calculation issues
+    if (dev < -20 * sd) {
+        return 0.0d;
+    }
+    if (dev > 20 * sd) {
+        return 1.0d;
+    }
+
+    try {
+        return 0.5 * (1.0 + Erf.erf(arg));
+    } catch (MaxIterationsExceededException ex) {
+        if (dev < 0) {
+            return 0.0d;
+        } else {
+            return 1.0d;
+        }
+    }
 }
\ No newline at end of file
