diff --git a/tmp/06f2e8ec-ad8b-48a0-a0f3-9f6393cc6387_buggy.java b/tmp/d5968d5b-2b9c-4728-83bf-4a3408dc353a_fixed.java
index 6c9090f..2753d05 100644
--- a/tmp/06f2e8ec-ad8b-48a0-a0f3-9f6393cc6387_buggy.java
+++ b/tmp/d5968d5b-2b9c-4728-83bf-4a3408dc353a_fixed.java
@@ -1,45 +1,54 @@
-    /**
-     * Method called to finalize setup of this deserializer,
-     * when it is known for which property deserializer is needed
-     * for.
-     */
 @Override
 public CollectionDeserializer createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
     // May need to resolve types for delegate-based creators:
     JsonDeserializer<Object> delegateDeser = null;
-        if (_valueInstantiator != null) {
-            if (_valueInstantiator.canCreateUsingDelegate()) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
-                if (delegateType == null) {
-                    throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
-                            +": value instantiator ("+_valueInstantiator.getClass().getName()
-                            +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
-                }
-                delegateDeser = findDeserializer(ctxt, delegateType, property);
-            }
-        }
+
     // [databind#1043]: allow per-property allow-wrapping of single overrides:
     // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
     //   comes down to "List vs Collection" I suppose... for now, pass Collection
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
+
     // also, often value deserializer is resolved here:
     JsonDeserializer<?> valueDeser = _valueDeserializer;
 
     // May have a content converter
     valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
     final JavaType vt = _collectionType.getContentType();
     if (valueDeser == null) {
         valueDeser = ctxt.findContextualValueDeserializer(vt, property);
     } else { // if directly assigned, probably not yet contextual, so:
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
     }
     // and finally, type deserializer needs context as well
     TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
     if (valueTypeDeser != null) {
         valueTypeDeser = valueTypeDeser.forProperty(property);
     }
+
+    // [databind#1888] DELEGATE: Delay resolving delegate deserializer *after* contextualization,
+    // so that the value deserializer above can be used if possible
+    if (_valueInstantiator != null) {
+        if (_valueInstantiator.canCreateUsingDelegate()) {
+            JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+            if (delegateType == null) {
+                throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
+                        +": value instantiator ("+_valueInstantiator.getClass().getName()
+                        +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
+            }
+            // 07-Feb-2020, tatu: [databind#1888] Special case: if the delegate type is exactly
+            // collection type, then need to use "this" (possibly contextualized) deserializer as
+            // delegate. This is necessary for cases like Java's "UnmodifiableList"/"UnmodifiableSet".
+            if (delegateType.hasRawClass(_collectionType.getRawClass())
+                    && _collectionType.isTypeOrSubTypeOf(Collection.class)) {
+                delegateDeser = this;
+            } else {
+                delegateDeser = findDeserializer(ctxt, delegateType, property);
+            }
+        }
+    }
+
     return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
 }
\ No newline at end of file
