diff --git a/tmp/324d5f07-dccc-487d-b9ee-95a2a5deafd3_buggy.java b/tmp/3c75f1f4-9768-4015-939e-8d1668fea709_fixed.java
index 1126687..0cfbe54 100644
--- a/tmp/324d5f07-dccc-487d-b9ee-95a2a5deafd3_buggy.java
+++ b/tmp/3c75f1f4-9768-4015-939e-8d1668fea709_fixed.java
@@ -1,65 +1,79 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
-      double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
-        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
-        return n;
-      }
-
       // only the lower 5 bits are used when shifting, so don't do anything
       // if the shift amount is outside [0,32)
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
-      // Convert the numbers to ints
-      int lvalInt = (int) lval;
-      if (lvalInt != lval) {
-        error(FRACTIONAL_BITWISE_OPERAND, left);
-        return n;
-      }
-
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
-      switch (n.getType()) {
+      int op = n.getType();
+
+      // Check ranges. For all shifts except >>>, the left operand must be in signed 32-bit range.
+      // For >>>, the operand is treated as an unsigned 32 bit integer.
+      if (op == Token.URSH) {
+        if (!(lval >= 0 && lval <= 0xFFFFFFFFL)) {
+          error(BITWISE_OPERAND_OUT_OF_RANGE, left);
+          return n;
+        }
+        if (lval != Math.floor(lval)) {
+          error(FRACTIONAL_BITWISE_OPERAND, left);
+          return n;
+        }
+      } else {
+        if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
+          error(BITWISE_OPERAND_OUT_OF_RANGE, left);
+          return n;
+        }
+        int lvalInt = (int) lval;
+        if (lvalInt != lval) {
+          error(FRACTIONAL_BITWISE_OPERAND, left);
+          return n;
+        }
+      }
+
+      double result;
+      switch (op) {
         case Token.LSH:
-          result = lvalInt << rvalInt;
+          result = ((int) lval) << rvalInt;
           break;
         case Token.RSH:
-          result = lvalInt >> rvalInt;
+          result = ((int) lval) >> rvalInt;
           break;
         case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          // In JavaScript, >>> is unsigned 32-bit. Java doesn't have unsigned ints,
+          // so use long to hold the unsigned value, and mask input to 32 bits.
+          // Careful: (int)0xFFFFFFFF == -1 in Java, so:
+          long leftUInt32 = ((long) lval) & 0xFFFFFFFFL;
+          long res = leftUInt32 >>> rvalInt;
+          // match JS >>>: result is unsigned 32-bit int, but JS number so as double.
+          result = (double) res;
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
