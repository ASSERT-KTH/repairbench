diff --git a/tmp/24fa76c3-fefa-4578-87c1-c81c1d35c96c_buggy.java b/tmp/3318bf62-1497-4d02-b866-c15ed54003e0_fixed.java
index 1126687..aba2728 100644
--- a/tmp/24fa76c3-fefa-4578-87c1-c81c1d35c96c_buggy.java
+++ b/tmp/3318bf62-1497-4d02-b866-c15ed54003e0_fixed.java
@@ -1,65 +1,71 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
-      double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
-        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
-        return n;
-      }
-
       // only the lower 5 bits are used when shifting, so don't do anything
       // if the shift amount is outside [0,32)
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
+      // check ranges.  We do not do anything that would clip the double to
+      // a 32-bit range, since the user likely does not intend that.
+      // But for >>>, JS treats operands as unsigned 32 bit (i.e., 0xffffffff).
+      boolean isUnsignedRightShift = n.getType() == Token.URSH;
+
+      if (!isUnsignedRightShift &&
+          !(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
+        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
+        return n;
+      }
+
       // Convert the numbers to ints
       int lvalInt = (int) lval;
       if (lvalInt != lval) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
+      double result;
       switch (n.getType()) {
         case Token.LSH:
           result = lvalInt << rvalInt;
           break;
         case Token.RSH:
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          // In Java, >>> acts on int, so negative numbers become positive, but in JS
+          // the result is *always* unsigned 32-bit, so cast to long and mask as needed.
+          // Treat operand as unsigned 32-bit.
+          long lvalLong = lvalInt & 0xFFFFFFFFL;
+          result = (lvalLong >>> rvalInt);
+          // Per JS semantics, >>> with 0 amount just returns the unsigned value as a double
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
