diff --git a/tmp/99fc161f-58a3-4020-828b-0987723506e7_buggy.java b/tmp/83bb4ddd-a32b-410e-addc-539b8e0a219f_fixed.java
index 1126687..b08de11 100644
--- a/tmp/99fc161f-58a3-4020-828b-0987723506e7_buggy.java
+++ b/tmp/83bb4ddd-a32b-410e-addc-539b8e0a219f_fixed.java
@@ -1,65 +1,79 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
-      double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
       // check ranges.  We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
+      // For URSH, JS allows full 32-bit unsigned; operands are always ToInt32.
+      // JavaScript applies ToInt32 to left operand for all shifts when folding.
+      // However, for error reporting, only values outside of valid integer range
+      // and that aren't exactly representable as an int should error.
+
+      // Only integers in the 32-bit range are valid for all bitwise/shift ops.
+      if (Double.isNaN(lval) || Double.isInfinite(lval) ||
+          lval < Integer.MIN_VALUE || lval > Integer.MAX_VALUE) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
-      if (!(rval >= 0 && rval < 32)) {
+      if (Double.isNaN(rval) || Double.isInfinite(rval) ||
+          rval < 0 || rval >= 32) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
-      // Convert the numbers to ints
       int lvalInt = (int) lval;
       if (lvalInt != lval) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
+      double result;
       switch (n.getType()) {
         case Token.LSH:
           result = lvalInt << rvalInt;
           break;
         case Token.RSH:
           result = lvalInt >> rvalInt;
           break;
-        case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+        case Token.URSH: {
+          // JS always ToUint32(left) >>> ToUint32(right)
+          // Need special handling because >>> in Java yields a signed int,
+          // but JavaScript >>> is unsigned (returns values up to 0xFFFFFFFF).
+          // So result needs to be long, then mask.
+          // But JS always processes left operand as ToInt32 (sign-extended).
+          // For negative int, >>> yields a large unsigned number.
+          // The correct way to mimic JS is:
+          // >>> operator returns a double, so we need to convert negative to unsigned
+          result = ((long) lvalInt & 0xFFFFFFFFL) >>> rvalInt;
+          // But, after >>> 0, JS returns a double (not int). Numbers >= 0x80000000
+          // are represented as positive doubles.
+          // So e.g. -1 >>> 0 = 4294967295
           break;
+        }
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
