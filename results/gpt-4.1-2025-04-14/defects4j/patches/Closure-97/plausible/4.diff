diff --git a/tmp/edc811c8-2598-41e8-93b6-cf70f2df51dd_buggy.java b/tmp/06caa4ae-2d14-4c00-8c54-22ffe4c8b69b_fixed.java
index 1126687..0e708af 100644
--- a/tmp/edc811c8-2598-41e8-93b6-cf70f2df51dd_buggy.java
+++ b/tmp/06caa4ae-2d14-4c00-8c54-22ffe4c8b69b_fixed.java
@@ -1,65 +1,70 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
-      double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
-        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
-        return n;
-      }
-
       // only the lower 5 bits are used when shifting, so don't do anything
       // if the shift amount is outside [0,32)
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
-      // Convert the numbers to ints
-      int lvalInt = (int) lval;
-      if (lvalInt != lval) {
-        error(FRACTIONAL_BITWISE_OPERAND, left);
-        return n;
-      }
-
+      // Convert the shift amount to int
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
+      // check ranges. We do not do anything that would clip the double to
+      // a 32-bit range, since the user likely does not intend that.
+      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
+        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
+        return n;
+      }
+
+      // Convert the number to int
+      int lvalInt = (int) lval;
+      if (lvalInt != lval) {
+        error(FRACTIONAL_BITWISE_OPERAND, left);
+        return n;
+      }
+
+      double result;
       switch (n.getType()) {
         case Token.LSH:
           result = lvalInt << rvalInt;
           break;
         case Token.RSH:
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
           // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          // Java as a Java int can not represent the unsigned 32-bit number
+          // where JavaScript can, so use a long here.
+          // Also, JavaScript >>> returns UNSIGNED 32-bit values!
+          // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift
+          result = ((long)lvalInt & 0xffffffffL) >>> rvalInt;
+          // JavaScript always returns a double for >>>, especially for
+          // values >= 2^31, which cannot fit in a signed int.
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
