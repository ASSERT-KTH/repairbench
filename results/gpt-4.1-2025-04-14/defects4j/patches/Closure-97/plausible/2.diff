diff --git a/tmp/cb98aef9-dc9e-468b-9020-77bde5983c3b_buggy.java b/tmp/1b4c22b8-f35a-419d-8a1d-12207348dfb3_fixed.java
index 1126687..e6be80d 100644
--- a/tmp/cb98aef9-dc9e-468b-9020-77bde5983c3b_buggy.java
+++ b/tmp/1b4c22b8-f35a-419d-8a1d-12207348dfb3_fixed.java
@@ -1,65 +1,72 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
-      double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
-        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
-        return n;
-      }
-
       // only the lower 5 bits are used when shifting, so don't do anything
       // if the shift amount is outside [0,32)
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
-      // Convert the numbers to ints
-      int lvalInt = (int) lval;
-      if (lvalInt != lval) {
-        error(FRACTIONAL_BITWISE_OPERAND, left);
-        return n;
-      }
-
+      // Convert the numbers to ints for shift operation
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
+      // For LSH and RSH, check that the double is within int range and integer-valued
+      double result;
       switch (n.getType()) {
         case Token.LSH:
-          result = lvalInt << rvalInt;
-          break;
         case Token.RSH:
+          if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
+            error(BITWISE_OPERAND_OUT_OF_RANGE, left);
+            return n;
+          }
+          int lvalInt = (int) lval;
+          if (lvalInt != lval) {
+            error(FRACTIONAL_BITWISE_OPERAND, left);
+            return n;
+          }
+          if (n.getType() == Token.LSH) {
+            result = lvalInt << rvalInt;
+          } else { // Token.RSH
             result = lvalInt >> rvalInt;
+          }
           break;
         case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          // For >>>, JS ToUint32 converts operand to unsigned int 32 bits.
+          // If not integer-valued, error.
+          if (lval != Math.floor(lval)) {
+            error(FRACTIONAL_BITWISE_OPERAND, left);
+            return n;
+          }
+          // ToUint32: lval modulo 2^32, in unsigned
+          long lvalLong = ((long) ((lval) % 4294967296L));
+          if (lvalLong < 0) {
+            lvalLong += 4294967296L;
+          }
+          result = (double)((lvalLong >>> rvalInt) & 0xFFFFFFFFL);
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
