diff --git a/tmp/75070423-7565-427c-8da1-4f827bc0ac3f_buggy.java b/tmp/0c6efcda-9cd8-4568-94e5-f989c611252f_fixed.java
index 388771b..e1653e4 100644
--- a/tmp/75070423-7565-427c-8da1-4f827bc0ac3f_buggy.java
+++ b/tmp/0c6efcda-9cd8-4568-94e5-f989c611252f_fixed.java
@@ -1,37 +1,28 @@
-    /**
-     * Creates a new timeseries by copying a subset of the data in this time
-     * series.
-     *
-     * @param start  the index of the first time period to copy.
-     * @param end  the index of the last time period to copy.
-     *
-     * @return A series containing a copy of this times series from start until
-     *         end.
-     *
-     * @throws CloneNotSupportedException if there is a cloning problem.
-     */
 public TimeSeries createCopy(int start, int end)
         throws CloneNotSupportedException {
     if (start < 0) {
         throw new IllegalArgumentException("Requires start >= 0.");
     }
     if (end < start) {
         throw new IllegalArgumentException("Requires start <= end.");
     }
     TimeSeries copy = (TimeSeries) super.clone();
     copy.data = new java.util.ArrayList();
     if (this.data.size() > 0) {
-            for (int index = start; index <= end; index++) {
+        int upper = Math.min(end, this.data.size() - 1);
+        for (int index = start; index <= upper; index++) {
             TimeSeriesDataItem item
                     = (TimeSeriesDataItem) this.data.get(index);
             TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
             try {
                 copy.add(clone);
             }
             catch (SeriesException e) {
                 e.printStackTrace();
             }
         }
     }
+    // recalculate minY and maxY to reflect the data in the copy
+    copy.updateMinMaxY();
     return copy;
 }
\ No newline at end of file
