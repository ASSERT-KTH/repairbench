diff --git a/tmp/5645baf8-9cfc-499f-ab92-5bb670c1eb56_buggy.java b/tmp/27d18d8f-554a-4e28-8948-a2e2e04d2b70_fixed.java
index 388771b..302d320 100644
--- a/tmp/5645baf8-9cfc-499f-ab92-5bb670c1eb56_buggy.java
+++ b/tmp/27d18d8f-554a-4e28-8948-a2e2e04d2b70_fixed.java
@@ -1,37 +1,43 @@
-    /**
-     * Creates a new timeseries by copying a subset of the data in this time
-     * series.
-     *
-     * @param start  the index of the first time period to copy.
-     * @param end  the index of the last time period to copy.
-     *
-     * @return A series containing a copy of this times series from start until
-     *         end.
-     *
-     * @throws CloneNotSupportedException if there is a cloning problem.
-     */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
         TimeSeries copy = (TimeSeries) super.clone();
         copy.data = new java.util.ArrayList();
         if (this.data.size() > 0) {
             for (int index = start; index <= end; index++) {
                 TimeSeriesDataItem item
                         = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                 try {
                     copy.add(clone);
                 }
                 catch (SeriesException e) {
                     e.printStackTrace();
                 }
             }
         }
+        // recalculate min/max Y values
+        copy.minY = Double.NaN;
+        copy.maxY = Double.NaN;
+        for (int i = 0; i < copy.data.size(); i++) {
+            TimeSeriesDataItem item = (TimeSeriesDataItem) copy.data.get(i);
+            Number y = item.getValue();
+            if (y != null) {
+                double value = y.doubleValue();
+                if (!Double.isNaN(value)) {
+                    if (Double.isNaN(copy.minY) || value < copy.minY) {
+                        copy.minY = value;
+                    }
+                    if (Double.isNaN(copy.maxY) || value > copy.maxY) {
+                        copy.maxY = value;
+                    }
+                }
+            }
+        }
         return copy;
     }
\ No newline at end of file
