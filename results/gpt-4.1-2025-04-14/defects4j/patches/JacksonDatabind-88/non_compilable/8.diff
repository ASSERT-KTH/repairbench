diff --git a/tmp/0e5e1fe4-f4db-495f-9f26-421cdc22f7ca_buggy.java b/tmp/563726d8-e2f4-4e8d-b829-b5e4fbd7e90b_fixed.java
index ae1f3a6..88c1e8e 100644
--- a/tmp/0e5e1fe4-f4db-495f-9f26-421cdc22f7ca_buggy.java
+++ b/tmp/563726d8-e2f4-4e8d-b829-b5e4fbd7e90b_fixed.java
@@ -1,34 +1,27 @@
 protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
 {
-        /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
-         *    check if any generics info is added; and only then ask factory
-         *    to do translation when necessary
-         */
     TypeFactory tf = ctxt.getTypeFactory();
+    JavaType javaType;
     if (id.indexOf('<') > 0) {
-            // note: may want to try combining with specialization (esp for EnumMap)?
-            // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
-            //    compatibility -- needed later anyway, and not doing so may open
-            //    security issues.
-            JavaType t = tf.constructFromCanonical(id);
-                // Probably cleaner to have a method in `TypeFactory` but can't add in patch
-            return t;
-        }
+        javaType = tf.constructFromCanonical(id);
+    } else {
         Class<?> cls;
         try {
             cls = tf.findClass(id);
         } catch (ClassNotFoundException e) {
-            // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
-            //   DeserializationContext, just playing it safe
             if (ctxt instanceof DeserializationContext) {
                 DeserializationContext dctxt = (DeserializationContext) ctxt;
-                // First: we may have problem handlers that can deal with it?
                 return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
             }
-            // ... meaning that we really should never get here.
             return null;
         } catch (Exception e) {
             throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
         }
-        return tf.constructSpecializedType(_baseType, cls);
+        javaType = tf.constructSpecializedType(_baseType, cls);
+    }
+    // Check assignment compatibility for security, as per [databind#1735]
+    if (!_baseType.isAssignableFrom(javaType)) {
+        throw new IllegalArgumentException("Type id '"+id+"' is not subtype of base type "+_baseType);
+    }
+    return javaType;
 }
\ No newline at end of file
