diff --git a/tmp/bcafa60c-73d5-4727-addd-a25626a507e5_buggy.java b/tmp/3e06d77c-d6c2-4b1d-b8f4-484dce033840_fixed.java
index 032fa8e..4993fcc 100644
--- a/tmp/bcafa60c-73d5-4727-addd-a25626a507e5_buggy.java
+++ b/tmp/3e06d77c-d6c2-4b1d-b8f4-484dce033840_fixed.java
@@ -1,108 +1,120 @@
 /** Evaluate the impact of the proposed step on the event handler.
  * @param interpolator step interpolator for the proposed step
  * @return true if the event handler triggers an event before
  * the end of the proposed step (this implies the step should be
  * rejected)
  * @exception DerivativeException if the interpolator fails to
  * compute the switching function somewhere within the step
  * @exception EventException if the switching function
  * cannot be evaluated
  * @exception ConvergenceException if an event cannot be located
  */
 public boolean evaluateStep(final StepInterpolator interpolator)
     throws DerivativeException, EventException, ConvergenceException {
 
     try {
 
         forward = interpolator.isForward();
         final double t1 = interpolator.getCurrentTime();
         final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
         final double h  = (t1 - t0) / n;
 
         double ta = t0;
         double ga = g0;
-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
         for (int i = 0; i < n; ++i) {
 
             // evaluate handler value at the end of the substep
-                tb += h;
+            final double tb = t0 + (i + 1) * h;
             interpolator.setInterpolatedTime(tb);
             final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
             // check events occurrence
             if (g0Positive ^ (gb >= 0)) {
                 // there is a sign change: an event is expected during this step
 
-                        // this is a corner case:
-                        // - there was an event near ta,
-                        // - there is another event between ta and tb
-                        // - when ta was computed, convergence was reached on the "wrong side" of the interval
-                        // this implies that the real sign of ga is the same as gb, so we need to slightly
-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain
-                        // about bracketing
-                            // this should never happen
-                         
                 // variation direction, with respect to the integration direction
                 increasing = gb >= ga;
 
+                double left = ta;
+                double right = tb;
+                double gl = ga;
+                double gr = gb;
+
+                // Avoid the edge case where ga and gb have the same sign due to a root just hit at an endpoint,
+                // this can happen for very close roots. This logic is similar to the "corner case" in the original code.
+                final double precision = Math.ulp(ta + tb);
+                while (Math.signum(gl) == Math.signum(gr) && Math.abs(right - left) > convergence) {
+                    // bisect interval until true sign change
+                    final double mid = 0.5 * (left + right);
+                    interpolator.setInterpolatedTime(mid);
+                    final double gm = handler.g(mid, interpolator.getInterpolatedState());
+                    if (Math.signum(gl) != Math.signum(gm)) {
+                        right = mid;
+                        gr = gm;
+                    } else {
+                        left = mid;
+                        gl = gm;
+                    }
+                }
+
                 final UnivariateRealFunction f = new UnivariateRealFunction() {
                     public double value(final double t) throws FunctionEvaluationException {
                         try {
                             interpolator.setInterpolatedTime(t);
                             return handler.g(t, interpolator.getInterpolatedState());
                         } catch (DerivativeException e) {
                             throw new FunctionEvaluationException(e, t);
                         } catch (EventException e) {
                             throw new FunctionEvaluationException(e, t);
                         }
                     }
                 };
                 final BrentSolver solver = new BrentSolver();
                 solver.setAbsoluteAccuracy(convergence);
                 solver.setMaximalIterationCount(maxIterationCount);
-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+                final double root = (left <= right) ? solver.solve(f, left, right) : solver.solve(f, right, left);
                 if ((Math.abs(root - ta) <= convergence) &&
                      (Math.abs(root - previousEventTime) <= convergence)) {
                     // we have either found nothing or found (again ?) a past event, we simply ignore it
                     ta = tb;
                     ga = gb;
                 } else if (Double.isNaN(previousEventTime) ||
                            (Math.abs(previousEventTime - root) > convergence)) {
                     pendingEventTime = root;
                     if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                         // we were already waiting for this event which was
                         // found during a previous call for a step that was
                         // rejected, this step must now be accepted since it
                         // properly ends exactly at the event occurrence
                         return false;
                     }
                     // either we were not waiting for the event or it has
                     // moved in such a way the step cannot be accepted
                     pendingEvent = true;
                     return true;
                 }
 
             } else {
                 // no sign change: there is no event for now
                 ta = tb;
                 ga = gb;
             }
 
         }
 
         // no event during the whole step
         pendingEvent     = false;
         pendingEventTime = Double.NaN;
         return false;
 
     } catch (FunctionEvaluationException e) {
         final Throwable cause = e.getCause();
         if ((cause != null) && (cause instanceof DerivativeException)) {
             throw (DerivativeException) cause;
         } else if ((cause != null) && (cause instanceof EventException)) {
             throw (EventException) cause;
         }
         throw new EventException(e);
     }
 
 }
\ No newline at end of file
