diff --git a/tmp/89a97710-9406-4d47-b212-c03015e23361_buggy.java b/tmp/1130ad48-0b38-43c8-a9ca-30846a7adcde_fixed.java
index 6f24eb6..96cf168 100644
--- a/tmp/89a97710-9406-4d47-b212-c03015e23361_buggy.java
+++ b/tmp/1130ad48-0b38-43c8-a9ca-30846a7adcde_fixed.java
@@ -1,99 +1,137 @@
   /**
    * Determines whether the given property is visible in the current context.
    * @param t The current traversal.
    * @param getprop The getprop node.
    */
   private void checkPropertyVisibility(NodeTraversal t,
       Node getprop, Node parent) {
     ObjectType objectType =
         ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
     String propertyName = getprop.getLastChild().getString();
 
     if (objectType != null) {
       // Is this a normal property access, or are we trying to override
       // an existing property?
       boolean isOverride = t.inGlobalScope() &&
           parent.getType() == Token.ASSIGN &&
           parent.getFirstChild() == getprop;
 
       // Find the lowest property defined on a class with visibility
       // information.
+      ObjectType lookupType = objectType;
       if (isOverride) {
-        objectType = objectType.getImplicitPrototype();
+        lookupType = lookupType.getImplicitPrototype();
       }
       JSDocInfo docInfo = null;
-      for (; objectType != null;
-           objectType = objectType.getImplicitPrototype()) {
-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
+      ObjectType foundType = lookupType;
+      for (; foundType != null;
+           foundType = foundType.getImplicitPrototype()) {
+        docInfo = foundType.getOwnPropertyJSDocInfo(propertyName);
         if (docInfo != null &&
             docInfo.getVisibility() != Visibility.INHERITED) {
           break;
         }
       }
 
-      if (objectType == null) {
+      if (foundType == null) {
         // We couldn't find a visibility modifier; assume it's public.
         return;
       }
 
       boolean sameInput =
           t.getInput().getName().equals(docInfo.getSourceName());
       Visibility visibility = docInfo.getVisibility();
-      JSType ownerType = normalizeClassType(objectType);
+      JSType ownerType = normalizeClassType(foundType);
+
       if (isOverride) {
         // Check an ASSIGN statement that's trying to override a property
         // on a superclass.
         JSDocInfo overridingInfo = parent.getJSDocInfo();
         Visibility overridingVisibility = overridingInfo == null ?
             Visibility.INHERITED : overridingInfo.getVisibility();
 
         // Check that (a) the property *can* be overridden, and
         // (b) that the visibility of the override is the same as the
         // visibility of the original property.
+
+        // The following check is not sufficient:
+        //   if (visibility == Visibility.PRIVATE && !sameInput)
+        // Instead, always check if the parent is overriding a private property
+        // defined in another file, and disallow it. This must be reported as
+        // BAD_PRIVATE_PROPERTY_ACCESS, not just PRIVATE_OVERRIDE.
+        //
+        // If overriding private property from different file, always error.
         if (visibility == Visibility.PRIVATE && !sameInput) {
           compiler.report(
-              t.makeError(getprop, PRIVATE_OVERRIDE,
-                  objectType.toString()));
+              t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,
+                  propertyName,
+                  validator.getReadableJSTypeName(
+                      getprop.getFirstChild(), true)));
         } else if (overridingVisibility != Visibility.INHERITED &&
             overridingVisibility != visibility) {
           compiler.report(
               t.makeError(getprop, VISIBILITY_MISMATCH,
-                  visibility.name(), objectType.toString(),
+                  visibility.name(), foundType.toString(),
                   overridingVisibility.name()));
+        } else if (visibility == Visibility.PRIVATE && sameInput) {
+          // In this case, check that the visibility on the override is also private.
+          if (overridingVisibility != Visibility.INHERITED &&
+              overridingVisibility != Visibility.PRIVATE) {
+            compiler.report(
+                t.makeError(getprop, VISIBILITY_MISMATCH,
+                    visibility.name(), foundType.toString(),
+                    overridingVisibility.name()));
+          }
+        }
+        // Regardless, for any override of a private property, if the
+        // parent is not in the same file as the docInfo, report PRIVATE_OVERRIDE.
+        // This is a separate error from BAD_PRIVATE_PROPERTY_ACCESS.
+        // For legacy reasons, report PRIVATE_OVERRIDE if the file is same,
+        // but the class is different.
+        if (visibility == Visibility.PRIVATE && !sameInput) {
+          // Already reported BAD_PRIVATE_PROPERTY_ACCESS above, so do not additionally report PRIVATE_OVERRIDE.
+        } else if (visibility == Visibility.PRIVATE) {
+          // Test if the owner type of the found original is different from the current class
+          // (or we're not in a class context).
+          if (currentClass == null || ownerType.differsFrom(currentClass)) {
+            compiler.report(
+                t.makeError(getprop, PRIVATE_OVERRIDE,
+                    foundType.toString()));
+          }
         }
       } else {
         if (sameInput) {
           // private access is always allowed in the same file.
           return;
         } else if (visibility == Visibility.PRIVATE &&
             (currentClass == null || ownerType.differsFrom(currentClass))) {
           if (docInfo.isConstructor() &&
               isValidPrivateConstructorAccess(parent)) {
             return;
           }
 
           // private access is not allowed outside the file from a different
           // enclosing class.
           compiler.report(
               t.makeError(getprop,
                   BAD_PRIVATE_PROPERTY_ACCESS,
                   propertyName,
                   validator.getReadableJSTypeName(
                       getprop.getFirstChild(), true)));
         } else if (visibility == Visibility.PROTECTED) {
           // There are 3 types of legal accesses of a protected property:
           // 1) Accesses in the same file
           // 2) Overriding the property in a subclass
           // 3) Accessing the property from inside a subclass
           // The first two have already been checked for.
           if (currentClass == null || !currentClass.isSubtype(ownerType)) {
             compiler.report(
                 t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,
                     propertyName,
                     validator.getReadableJSTypeName(
                         getprop.getFirstChild(), true)));
           }
         }
       }
     }
   }
\ No newline at end of file
