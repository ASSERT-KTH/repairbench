diff --git a/tmp/d25d916d-fcdc-4099-88a1-0d283e16d5ba_buggy.java b/tmp/71d8fed5-6ba4-436e-8724-8caa7f49beaa_fixed.java
index 6f24eb6..170b051 100644
--- a/tmp/d25d916d-fcdc-4099-88a1-0d283e16d5ba_buggy.java
+++ b/tmp/71d8fed5-6ba4-436e-8724-8caa7f49beaa_fixed.java
@@ -1,99 +1,123 @@
 /**
  * Determines whether the given property is visible in the current context.
  * @param t The current traversal.
  * @param getprop The getprop node.
  */
 private void checkPropertyVisibility(NodeTraversal t,
     Node getprop, Node parent) {
   ObjectType objectType =
       ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
   String propertyName = getprop.getLastChild().getString();
 
   if (objectType != null) {
     // Is this a normal property access, or are we trying to override
     // an existing property?
     boolean isOverride = t.inGlobalScope() &&
         parent.getType() == Token.ASSIGN &&
         parent.getFirstChild() == getprop;
 
     // Find the lowest property defined on a class with visibility
     // information.
+    ObjectType originalType = objectType;
     if (isOverride) {
       objectType = objectType.getImplicitPrototype();
     }
     JSDocInfo docInfo = null;
     for (; objectType != null;
          objectType = objectType.getImplicitPrototype()) {
       docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
       if (docInfo != null &&
           docInfo.getVisibility() != Visibility.INHERITED) {
         break;
       }
     }
 
     if (objectType == null) {
       // We couldn't find a visibility modifier; assume it's public.
       return;
     }
 
     boolean sameInput =
         t.getInput().getName().equals(docInfo.getSourceName());
     Visibility visibility = docInfo.getVisibility();
     JSType ownerType = normalizeClassType(objectType);
     if (isOverride) {
       // Check an ASSIGN statement that's trying to override a property
       // on a superclass.
       JSDocInfo overridingInfo = parent.getJSDocInfo();
       Visibility overridingVisibility = overridingInfo == null ?
           Visibility.INHERITED : overridingInfo.getVisibility();
 
       // Check that (a) the property *can* be overridden, and
       // (b) that the visibility of the override is the same as the
       // visibility of the original property.
       if (visibility == Visibility.PRIVATE && !sameInput) {
+        // For overrides, we must also warn if the new (overriding) property
+        // is in a subclass and tries to override a private property
+        // from a superclass, even if the new one is private.
         compiler.report(
             t.makeError(getprop, PRIVATE_OVERRIDE,
                 objectType.toString()));
       } else if (overridingVisibility != Visibility.INHERITED &&
           overridingVisibility != visibility) {
         compiler.report(
             t.makeError(getprop, VISIBILITY_MISMATCH,
                 visibility.name(), objectType.toString(),
                 overridingVisibility.name()));
+      } else if (visibility == Visibility.PRIVATE && sameInput) {
+        // Same file, but still check if new property is incorrectly overriding a private property in another class.
+        // Do nothing, this is allowed.
+      } else if (visibility == Visibility.PRIVATE && !sameInput) {
+        // Already handled above, but for clarity.
+        compiler.report(
+            t.makeError(getprop, PRIVATE_OVERRIDE,
+                objectType.toString()));
       }
+      // --- Fix: Check for any private property being overridden, even with a private property, if not allowed ---
+      // Even if BOTH are private, it is not allowed to override a private property from superclass.
+      // So, if we encounter an override (isOverride == true), and the ancestor defines a private property,
+      // and the subclass defines a property with the same name (no matter what the subclass visibility is),
+      // then this is an illegal override unless in the same file.
+      // (But 'visibility == Visibility.PRIVATE && !sameInput' already checks this.)
+
+      // --- Additional: The original bug missed reporting BAD_PRIVATE_PROPERTY_ACCESS when overriding a
+      // private property from another file in a subclass, even if overriding property is also private.
+      // Also, CheckAccessControlsTest expects BAD_PRIVATE_PROPERTY_ACCESS, not PRIVATE_OVERRIDE, in some cases! ---
+      // But the expected errors for private property override is PRIVATE_OVERRIDE.
+      // So, the above logic is sufficient.
     } else {
       if (sameInput) {
         // private access is always allowed in the same file.
         return;
       } else if (visibility == Visibility.PRIVATE &&
           (currentClass == null || ownerType.differsFrom(currentClass))) {
         if (docInfo.isConstructor() &&
             isValidPrivateConstructorAccess(parent)) {
           return;
         }
 
         // private access is not allowed outside the file from a different
         // enclosing class.
         compiler.report(
             t.makeError(getprop,
                 BAD_PRIVATE_PROPERTY_ACCESS,
                 propertyName,
                 validator.getReadableJSTypeName(
                     getprop.getFirstChild(), true)));
       } else if (visibility == Visibility.PROTECTED) {
         // There are 3 types of legal accesses of a protected property:
         // 1) Accesses in the same file
         // 2) Overriding the property in a subclass
         // 3) Accessing the property from inside a subclass
         // The first two have already been checked for.
         if (currentClass == null || !currentClass.isSubtype(ownerType)) {
           compiler.report(
               t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,
                   propertyName,
                   validator.getReadableJSTypeName(
                       getprop.getFirstChild(), true)));
         }
       }
     }
   }
 }
\ No newline at end of file
