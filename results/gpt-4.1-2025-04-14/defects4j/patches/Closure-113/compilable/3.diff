diff --git a/tmp/9879e80a-90fd-4c50-9914-198a6e339664_buggy.java b/tmp/77aee9f5-8606-4903-b531-9ce626d841db_fixed.java
index 29a9d2f..2ffda54 100644
--- a/tmp/9879e80a-90fd-4c50-9914-198a6e339664_buggy.java
+++ b/tmp/77aee9f5-8606-4903-b531-9ce626d841db_fixed.java
@@ -1,43 +1,45 @@
 /**
  * Handles a goog.require call.
  */
 private void processRequireCall(NodeTraversal t, Node n, Node parent) {
   Node left = n.getFirstChild();
   Node arg = left.getNext();
   if (verifyLastArgumentIsString(t, left, arg)) {
     String ns = arg.getString();
     ProvidedName provided = providedNames.get(ns);
     if (provided == null || !provided.isExplicitlyProvided()) {
       unrecognizedRequires.add(
           new UnrecognizedRequire(n, ns, t.getSourceName()));
     } else {
       JSModule providedModule = provided.explicitModule;
 
       // This must be non-null, because there was an explicit provide.
       Preconditions.checkNotNull(providedModule);
 
       JSModule module = t.getModule();
       if (moduleGraph != null &&
           module != providedModule &&
           !moduleGraph.dependsOn(module, providedModule)) {
         compiler.report(
             t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
                 providedModule.getName(),
                 module.getName()));
       }
     }
 
     maybeAddToSymbolTable(left);
     maybeAddStringNodeToSymbolTable(arg);
 
     // Requires should be removed before further processing.
     // Some clients run closure pass multiple times, first with
     // the checks for broken requires turned off. In these cases, we
     // allow broken requires to be preserved by the first run to
     // let them be caught in the subsequent run.
+    // Fix: Only remove the require call, not its parent (which may be EXPR_RESULT)
     if (provided != null) {
-        parent.detachFromParent();
+      // Remove the require call node 'n'.
+      n.detachFromParent();
       compiler.reportCodeChange();
     }
   }
 }
\ No newline at end of file
