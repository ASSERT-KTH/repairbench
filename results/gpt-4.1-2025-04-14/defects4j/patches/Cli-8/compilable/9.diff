diff --git a/tmp/a77bd32d-27ff-4837-94ad-13d6a328b3a1_buggy.java b/tmp/c19eabce-8754-493e-8ae1-7da9a2fd09a4_fixed.java
index 8e93a5e..9c8ec4d 100644
--- a/tmp/a77bd32d-27ff-4837-94ad-13d6a328b3a1_buggy.java
+++ b/tmp/c19eabce-8754-493e-8ae1-7da9a2fd09a4_fixed.java
@@ -1,43 +1,50 @@
 /**
  * <p>Render the specified text and return the rendered Options
  * in a StringBuffer.</p>
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
+    // handle lines separated by newlines individually
+    String[] lines = text.split("\\r?\\n");
+    for (int i = 0; i < lines.length; ++i) {
+        if (i > 0) {
+            sb.append(defaultNewLine);
+        }
+        String curText = lines[i];
 
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
+        int pos = findWrapPos(curText, width, 0);
 
-            return sb;
+        if (pos == -1) {
+            sb.append(rtrim(curText));
+            continue;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(rtrim(curText.substring(0, pos))).append(defaultNewLine);
 
         // all following lines must be padded with nextLineTabStop space
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+            curText = padding + curText.substring(pos).trim();
+            pos = findWrapPos(curText, width, nextLineTabStop);
 
             if (pos == -1)
             {
-                sb.append(text);
+                sb.append(curText);
+                break;
+            }
 
+            sb.append(rtrim(curText.substring(0, pos))).append(defaultNewLine);
+        }
+    }
     return sb;
 }
\ No newline at end of file
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
