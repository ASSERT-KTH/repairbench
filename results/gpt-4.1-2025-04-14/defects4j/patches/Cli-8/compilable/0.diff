diff --git a/tmp/91e47fdd-455c-47d0-b95f-3f0727811181_buggy.java b/tmp/46a06eea-aec9-4124-a3dc-fc333307b575_fixed.java
index 8e93a5e..5b265dc 100644
--- a/tmp/91e47fdd-455c-47d0-b95f-3f0727811181_buggy.java
+++ b/tmp/46a06eea-aec9-4124-a3dc-fc333307b575_fixed.java
@@ -1,43 +1,55 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
+    // Handle multiple lines: preserve any intentional line breaks
+    int lineStart = 0;
+    int textLen = text.length();
+    while (lineStart < textLen) {
+        // Find next newline (either '\n' or '\r\n')
+        int lineEnd = text.indexOf('\n', lineStart);
+        int crEnd = text.indexOf('\r', lineStart);
+        if (lineEnd == -1 || (crEnd != -1 && crEnd < lineEnd)) {
+            lineEnd = crEnd;
+        }
 
-        if (pos == -1)
-        {
+        if (lineEnd == -1) {
+            // This is the last line
+            renderWrappedLine(sb, width, nextLineTabStop, text.substring(lineStart));
+            break;
+        } else {
+            // render the current line up to lineEnd
+            renderWrappedLine(sb, width, nextLineTabStop, text.substring(lineStart, lineEnd));
+            sb.append(defaultNewLine);
+            // if it was a CRLF, skip the \n as well
+            if (lineEnd + 1 < textLen && text.charAt(lineEnd) == '\r' && text.charAt(lineEnd + 1) == '\n') {
+                lineStart = lineEnd + 2;
+            } else {
+                lineStart = lineEnd + 1;
+            }
+        }
+    }
+    return sb;
+}
+
+private void renderWrappedLine(StringBuffer sb, int width, int nextLineTabStop, String text) {
+    int pos = 0;
+    boolean firstLine = true;
+    final int textLen = text.length();
+    while (true) {
+        int wrapPos = findWrapPos(text, width, firstLine ? 0 : nextLineTabStop);
+        if (wrapPos == -1) {
+            if (!firstLine) {
+                sb.append(createPadding(nextLineTabStop));
+            }
             sb.append(rtrim(text));
-
-            return sb;
+            return;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
-
-            if (pos == -1)
-            {
-                sb.append(text);
-
-                return sb;
+        if (!firstLine) {
+            sb.append(createPadding(nextLineTabStop));
         }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(rtrim(text.substring(0, wrapPos)));
+        sb.append(defaultNewLine);
+        text = text.substring(wrapPos).trim();
+        firstLine = false;
     }
 }
\ No newline at end of file
