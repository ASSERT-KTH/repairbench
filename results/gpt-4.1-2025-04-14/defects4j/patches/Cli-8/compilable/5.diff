diff --git a/tmp/7b765eb9-5725-4f69-a781-813733313265_buggy.java b/tmp/049a591b-29c7-4d22-8bdb-114df69366ca_fixed.java
index 8e93a5e..41c49bc 100644
--- a/tmp/7b765eb9-5725-4f69-a781-813733313265_buggy.java
+++ b/tmp/049a591b-29c7-4d22-8bdb-114df69366ca_fixed.java
@@ -1,43 +1,40 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
+    String[] tokens = text.split(defaultNewLine);
+    boolean firstLine = true;
+    for (String line : tokens) {
+        if (!firstLine) {
+            sb.append(defaultNewLine);
+        }
+        firstLine = false;
 
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
+        int pos = findWrapPos(line, width, 0);
 
-            return sb;
+        if (pos == -1) {
+            sb.append(rtrim(line));
+            continue;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
+        String rest = line.substring(pos).trim();
         while (true)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+            rest = padding + rest;
+            pos = findWrapPos(rest, width, nextLineTabStop);
 
             if (pos == -1)
             {
-                sb.append(text);
-
+                sb.append(rest);
+                break;
+            }
+            sb.append(rtrim(rest.substring(0, pos))).append(defaultNewLine);
+            rest = rest.substring(pos).trim();
+        }
+    }
     return sb;
 }
\ No newline at end of file
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
