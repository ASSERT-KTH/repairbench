diff --git a/tmp/ee6699a6-a106-4943-8d28-03897f5dbc03_buggy.java b/tmp/688898ec-a621-4e5f-bb8b-52922d726cce_fixed.java
index 8e93a5e..607cd4c 100644
--- a/tmp/ee6699a6-a106-4943-8d28-03897f5dbc03_buggy.java
+++ b/tmp/688898ec-a621-4e5f-bb8b-52922d726cce_fixed.java
@@ -1,43 +1,34 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
+    String[] lines = text.split(defaultNewLine, -1);
 
-        if (pos == -1)
+    for (int i = 0; i < lines.length; ++i)
     {
-            sb.append(rtrim(text));
-
-            return sb;
-        }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+        String line = lines[i];
+        boolean firstLine = (i == 0);
+        int actualTabStop = firstLine ? 0 : nextLineTabStop;
+        final String padding = createPadding(actualTabStop);
 
-        while (true)
+        while (line.length() > 0)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+            int pos = findWrapPos(line, width, actualTabStop);
 
             if (pos == -1)
             {
-                sb.append(text);
+                sb.append(line);
+                break;
+            }
 
-                return sb;
+            sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);
+            line = padding + line.substring(pos).trim();
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        if (i != lines.length - 1)
+        {
+            sb.append(defaultNewLine);
+        }
     }
+
+    return sb;
 }
\ No newline at end of file
