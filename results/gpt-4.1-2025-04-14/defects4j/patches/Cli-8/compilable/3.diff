diff --git a/tmp/e79d66cf-f2db-4565-9374-f09aa604dc76_buggy.java b/tmp/bc645b33-6ad3-4178-b317-83e7741dec7a_fixed.java
index 8e93a5e..7816d3a 100644
--- a/tmp/e79d66cf-f2db-4565-9374-f09aa604dc76_buggy.java
+++ b/tmp/bc645b33-6ad3-4178-b317-83e7741dec7a_fixed.java
@@ -1,43 +1,39 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
+    // Support multi-line text by splitting on newlines and processing each line separately
+    String[] lines = text.split("\\r?\\n");
+    for (int i = 0; i < lines.length; i++) {
+        String line = lines[i];
+        int linePos = 0;
+        boolean firstLine = true;
+        do {
+            int availableWidth = width - (firstLine ? 0 : nextLineTabStop);
+            int pos = findWrapPos(line, availableWidth, linePos);
 
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
+            if (firstLine) {
+                firstLine = false;
             }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
-
-            if (pos == -1)
-            {
-                sb.append(text);
 
-                return sb;
+            if (pos == -1) {
+                if (!firstLine) {
+                    sb.append(createPadding(nextLineTabStop));
+                }
+                sb.append(rtrim(line));
+                break;
+            } else {
+                if (!firstLine) {
+                    sb.append(createPadding(nextLineTabStop));
+                }
+                sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);
+                line = line.substring(pos).trim();
             }
+        } while (line.length() > 0);
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        // Append a newline if it's not the last original line
+        if (i < lines.length - 1) {
+            sb.append(defaultNewLine);
         }
     }
+    return sb;
+}
\ No newline at end of file
