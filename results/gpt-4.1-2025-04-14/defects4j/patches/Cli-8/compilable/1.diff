diff --git a/tmp/7759ecad-065e-423e-bf21-89421c5188e0_buggy.java b/tmp/cfaa0682-eab7-4f18-9b1a-35da9874e5ac_fixed.java
index 8e93a5e..6acc683 100644
--- a/tmp/7759ecad-065e-423e-bf21-89421c5188e0_buggy.java
+++ b/tmp/cfaa0682-eab7-4f18-9b1a-35da9874e5ac_fixed.java
@@ -1,43 +1,75 @@
 /**
  * <p>Render the specified text and return the rendered Options
  * in a StringBuffer.</p>
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
+    int linePos = 0;
+    while (true) {
+        // handle embedded newlines in the input text
+        int newlinePos = text.indexOf(defaultNewLine, linePos);
+        String line;
+        if (newlinePos != -1) {
+            line = text.substring(linePos, newlinePos);
+        } else {
+            line = text.substring(linePos);
+        }
+
+        boolean firstLine = (linePos == 0);
+        int curWidth = width;
+        int curTab = nextLineTabStop;
 
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
+        int pos = findWrapPos(line, curWidth, firstLine ? 0 : curTab);
 
-            return sb;
+        if (pos == -1) {
+            // no more wrap required
+            if (!firstLine) {
+                sb.append(createPadding(curTab));
+            }
+            sb.append(rtrim(line));
+        } else {
+            if (!firstLine) {
+                sb.append(createPadding(curTab));
             }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);
 
             // all following lines must be padded with nextLineTabStop space
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+            final String padding = createPadding(curTab);
+            line = padding + line.substring(pos).trim();
 
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+            // process wrapped line for further breaking if required
+            while (true) {
+                pos = findWrapPos(line, width, curTab);
 
-            if (pos == -1)
-            {
-                sb.append(text);
+                if (pos == -1) {
+                    sb.append(line);
+                    break;
+                }
+
+                sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);
+                line = padding + line.substring(pos).trim();
+            }
+        }
+
+        // break if there are no more newlines
+        if (newlinePos == -1)
+            break;
+
+        // move to the next line after existing newline
+        sb.append(defaultNewLine);
+        linePos = newlinePos + defaultNewLine.length();
+        if (linePos >= text.length()) {
+            break;
+        }
+    }
 
     return sb;
 }
\ No newline at end of file
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
