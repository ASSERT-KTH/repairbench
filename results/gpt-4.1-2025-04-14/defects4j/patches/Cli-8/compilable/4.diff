diff --git a/tmp/23cfa7f7-f168-4177-a235-90e698e72dba_buggy.java b/tmp/b0ef4402-6684-4dc0-8c8f-e502fcafd368_fixed.java
index 8e93a5e..f3aa0d3 100644
--- a/tmp/23cfa7f7-f168-4177-a235-90e698e72dba_buggy.java
+++ b/tmp/b0ef4402-6684-4dc0-8c8f-e502fcafd368_fixed.java
@@ -1,43 +1,58 @@
 /**
  * <p>Render the specified text and return the rendered Options
  * in a StringBuffer.</p>
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
+    // Handle text with embedded newlines
+    int lineStart = 0;
+    while (true) {
+        int newline = text.indexOf(defaultNewLine, lineStart);
+        String line;
+        boolean lastLine = (newline == -1);
+        if (lastLine) {
+            line = text.substring(lineStart);
+        } else {
+            line = text.substring(lineStart, newline);
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+        // Process this 'line' with wrapping
+        boolean firstWrappedLine = true;
+        String curText = line;
+        int curWidth = width;
+        int curTabStop = nextLineTabStop;
+        while (true) {
+            int pos = findWrapPos(curText, curWidth, firstWrappedLine ? 0 : curTabStop);
 
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
-
-            if (pos == -1)
-            {
-                sb.append(text);
-
-                return sb;
+            if (pos == -1) {
+                if (!firstWrappedLine) {
+                    sb.append(createPadding(curTabStop));
+                }
+                sb.append(rtrim(curText));
+                break;
+            }
+            if (!firstWrappedLine) {
+                sb.append(createPadding(curTabStop));
+            }
+            sb.append(rtrim(curText.substring(0, pos))).append(defaultNewLine);
+            curText = curText.substring(pos).trim();
+            firstWrappedLine = false;
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        if (lastLine) {
+            break;
         }
+        sb.append(defaultNewLine);
+        lineStart = newline + defaultNewLine.length();
+    }
+
+    return sb;
 }
\ No newline at end of file
