diff --git a/tmp/7f2d7c40-ae51-43a9-b09a-1646cc14c4a5_buggy.java b/tmp/717dc73c-61fc-4017-a2fb-e534ab54435d_fixed.java
index 8e93a5e..b27224c 100644
--- a/tmp/7f2d7c40-ae51-43a9-b09a-1646cc14c4a5_buggy.java
+++ b/tmp/717dc73c-61fc-4017-a2fb-e534ab54435d_fixed.java
@@ -1,43 +1,61 @@
 /**
  * <p>Render the specified text and return the rendered Options
  * in a StringBuffer.</p>
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
+    // Split input text into lines
+    String[] lines = text.split("\\r?\\n");
 
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
+    for (int lineIdx = 0; lineIdx < lines.length; ++lineIdx) {
+        String line = lines[lineIdx];
+        boolean firstLine = (lineIdx == 0);
 
-            return sb;
-        }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+        int offset = 0;
 
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+        // On first line, no padding, others: add padding for the first line as well after first line
+        do {
+            int wrapWidth = width;
+            if (!firstLine || offset > 0) {
+                // lines after the very first overall AND first line after an explicit newline: indent
+                sb.append(createPadding(nextLineTabStop));
+                wrapWidth = width - nextLineTabStop;
+                if (wrapWidth <= 0) {
+                    wrapWidth = width; // fallback for invalid tab stop
+                }
+            }
 
-            if (pos == -1)
-            {
-                sb.append(text);
+            int pos = findWrapPos(line, wrapWidth, offset);
 
-                return sb;
+            if (pos == -1) {
+                // append the rest
+                sb.append(rtrim(line.substring(offset)));
+                break;
+            } else {
+                sb.append(rtrim(line.substring(offset, pos)));
+                sb.append(defaultNewLine);
+                offset = pos;
+                // Skip spaces at the start of next chunk
+                while (offset < line.length() && line.charAt(offset) == ' ') {
+                    offset++;
+                }
+                firstLine = false;
             }
+        } while (offset < line.length());
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        // If there are more lines, add a newline if not already (except for the last chunk per line)
+        if (lineIdx != lines.length - 1) {
+            sb.append(defaultNewLine);
+        }
     }
+
+    return sb;
 }
\ No newline at end of file
