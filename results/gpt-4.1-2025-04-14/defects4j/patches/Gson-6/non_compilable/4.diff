diff --git a/tmp/ffb1539a-ff6c-4ba2-b86e-2754a06e5ecc_buggy.java b/tmp/64ff30b6-8bc6-4584-916e-518813689052_fixed.java
index 1c53d31..a988a5b 100644
--- a/tmp/ffb1539a-ff6c-4ba2-b86e-2754a06e5ecc_buggy.java
+++ b/tmp/64ff30b6-8bc6-4584-916e-518813689052_fixed.java
@@ -1,20 +1,23 @@
 @SuppressWarnings("unchecked") // Casts guarded by conditionals.
 static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
     TypeToken<?> fieldType, JsonAdapter annotation) {
   Class<?> value = annotation.value();
-    TypeAdapter<?> typeAdapter;
+  Object instance;
   if (TypeAdapter.class.isAssignableFrom(value)) {
     Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
+    instance = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
+    // Use as-is; will add .nullSafe() below if non-null
   } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
     Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
-          .construct()
-          .create(gson, fieldType);
+    TypeAdapterFactory factory = constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();
+    instance = factory.create(gson, fieldType);
   } else {
     throw new IllegalArgumentException(
         "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
   }
+  TypeAdapter<?> typeAdapter = (TypeAdapter<?>) instance;
+  if (typeAdapter != null && annotation.nullSafe()) {
     typeAdapter = typeAdapter.nullSafe();
+  }
   return typeAdapter;
 }
\ No newline at end of file
