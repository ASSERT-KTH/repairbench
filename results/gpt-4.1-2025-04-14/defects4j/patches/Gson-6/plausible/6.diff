diff --git a/tmp/d0850850-8364-47d3-a199-23b8ca838b4b_buggy.java b/tmp/8c135671-81ed-4de8-971f-c2fc7ff3d40e_fixed.java
index 1c53d31..03a6c0b 100644
--- a/tmp/d0850850-8364-47d3-a199-23b8ca838b4b_buggy.java
+++ b/tmp/8c135671-81ed-4de8-971f-c2fc7ff3d40e_fixed.java
@@ -1,20 +1,22 @@
 @SuppressWarnings("unchecked") // Casts guarded by conditionals.
 static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
     TypeToken<?> fieldType, JsonAdapter annotation) {
   Class<?> value = annotation.value();
-    TypeAdapter<?> typeAdapter;
+  Object instance;
   if (TypeAdapter.class.isAssignableFrom(value)) {
     Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
+    instance = constructorConstructor.get(TypeToken.get((Class<?>) typeAdapterClass)).construct();
+    return ((TypeAdapter<?>) instance).nullSafe();
   } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
     Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
-          .construct()
-          .create(gson, fieldType);
+    instance = constructorConstructor.get(TypeToken.get((Class<?>) typeAdapterFactory)).construct();
+    TypeAdapter<?> typeAdapter = ((TypeAdapterFactory) instance).create(gson, fieldType);
+    if (typeAdapter == null) {
+      return null;
+    }
+    return typeAdapter.nullSafe();
   } else {
     throw new IllegalArgumentException(
         "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
   }
-      typeAdapter = typeAdapter.nullSafe();
-    return typeAdapter;
 }
\ No newline at end of file
