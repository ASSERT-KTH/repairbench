diff --git a/tmp/8de4c074-0179-4f96-9248-e6c910d8a913_buggy.java b/tmp/cce63ce7-b94a-4a4a-997e-3f10a4a8b6cd_fixed.java
index 1c53d31..b1d396e 100644
--- a/tmp/8de4c074-0179-4f96-9248-e6c910d8a913_buggy.java
+++ b/tmp/cce63ce7-b94a-4a4a-997e-3f10a4a8b6cd_fixed.java
@@ -1,20 +1,26 @@
 @SuppressWarnings("unchecked") // Casts guarded by conditionals.
 static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
     TypeToken<?> fieldType, JsonAdapter annotation) {
   Class<?> value = annotation.value();
+  Object instance;
+  try {
+    instance = constructorConstructor.get(TypeToken.get(value)).construct();
+  } catch (Exception e) {
+    throw new IllegalArgumentException("Failed to construct instance of " + value, e);
+  }
+
   TypeAdapter<?> typeAdapter;
-    if (TypeAdapter.class.isAssignableFrom(value)) {
-      Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
-    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
-      Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
-          .construct()
-          .create(gson, fieldType);
+  if (instance instanceof TypeAdapter) {
+    typeAdapter = (TypeAdapter<?>) instance;
+  } else if (instance instanceof TypeAdapterFactory) {
+    typeAdapter = ((TypeAdapterFactory) instance).create(gson, fieldType);
   } else {
     throw new IllegalArgumentException(
         "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
   }
+  if (typeAdapter == null) {
+    return null;
+  }
   typeAdapter = typeAdapter.nullSafe();
   return typeAdapter;
 }
\ No newline at end of file
