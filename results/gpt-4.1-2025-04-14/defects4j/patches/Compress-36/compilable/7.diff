diff --git a/tmp/9f739948-0be2-4579-a527-04f7ac85a770_buggy.java b/tmp/e3adaf4e-b6c4-4176-bc1a-2dc70acf8ea8_fixed.java
index d357c7e..ea91dc7 100644
--- a/tmp/9f739948-0be2-4579-a527-04f7ac85a770_buggy.java
+++ b/tmp/e3adaf4e-b6c4-4176-bc1a-2dc70acf8ea8_fixed.java
@@ -1,16 +1,27 @@
 private InputStream getCurrentStream() throws IOException {
     if (deferredBlockStreams.isEmpty()) {
-            throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
+        // Instead of throwing an exception, return a stream that always returns EOF,
+        // to handle empty entries correctly (zero-sized files).
+        return new InputStream() {
+            @Override
+            public int read() {
+                return -1;
+            }
+            @Override
+            public int read(byte[] b, int off, int len) {
+                return -1;
+            }
+        };
     }
 
     while (deferredBlockStreams.size() > 1) {
         // In solid compression mode we need to decompress all leading folder'
         // streams to get access to an entry. We defer this until really needed
         // so that entire blocks can be skipped without wasting time for decompression.
         final InputStream stream = deferredBlockStreams.remove(0);
         IOUtils.skip(stream, Long.MAX_VALUE);
         stream.close();
     }
 
     return deferredBlockStreams.get(0);
 }
\ No newline at end of file
