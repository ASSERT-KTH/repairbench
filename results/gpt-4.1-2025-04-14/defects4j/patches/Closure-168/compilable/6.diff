diff --git a/tmp/f513d0ba-a0e2-4210-9a5f-e6f95a98b971_buggy.java b/tmp/a4755232-29fa-49f2-a222-01ce726a33ac_fixed.java
index b12de99..ed28aea 100644
--- a/tmp/f513d0ba-a0e2-4210-9a5f-e6f95a98b971_buggy.java
+++ b/tmp/a4755232-29fa-49f2-a222-01ce726a33ac_fixed.java
@@ -1,52 +1,61 @@
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (t.inGlobalScope()) {
     return;
   }
 
   if (n.isReturn() && n.getFirstChild() != null) {
     data.get(t.getScopeRoot()).recordNonEmptyReturn();
   }
 
   if (t.getScopeDepth() <= 2) {
     // The first-order function analyzer looks at two types of variables:
     //
     // 1) Local variables that are assigned in inner scopes ("escaped vars")
     //
     // 2) Local variables that are assigned more than once.
     //
     // We treat all global variables as escaped by default, so there's
     // no reason to do this extra computation for them.
     return;
   }
 
   if (n.isName() && NodeUtil.isLValue(n) &&
       // Be careful of bleeding functions, which create variables
       // in the inner scope, not the scope where the name appears.
       !NodeUtil.isBleedingFunctionName(n)) {
     String name = n.getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordAssignedName(name);
       }
 
-          if (scope != ownerScope && ownerScope.isLocal()) {
+      // Fix: detect variable escaping into a deeper function,
+      // but not when used as a property (like obj.prop).
+      if (scope != ownerScope && ownerScope.isLocal()
+          && ownerScope.getParent() != null
+          && !ownerScope.getParent().isGlobal()) {
         data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
       }
     }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
-        String name = NodeUtil.getRootOfQualifiedName(n).getString();
+  } else if (n.isGetProp() && NodeUtil.isLValue(n)) {
+    // Only consider immediately top-level property references, not nested ones
+    Node root = NodeUtil.getRootOfQualifiedName(n);
+    if (root.isName()) {
+      String name = root.getString();
       Scope scope = t.getScope();
       Var var = scope.getVar(name);
       if (var != null) {
         Scope ownerScope = var.getScope();
-          if (scope != ownerScope && ownerScope.isLocal()) {
+        if (scope != ownerScope && ownerScope.isLocal()
+            && ownerScope.getParent() != null
+            && !ownerScope.getParent().isGlobal()) {
           data.get(ownerScope.getRootNode())
               .recordEscapedQualifiedName(n.getQualifiedName());
         }
       }
     }
   }
+}
\ No newline at end of file
