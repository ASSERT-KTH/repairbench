diff --git a/tmp/209545be-41ab-4886-b6f1-fe91619fd975_buggy.java b/tmp/a8016188-48cd-4a08-b081-93ae46dda1ab_fixed.java
index b12de99..c6010c1 100644
--- a/tmp/209545be-41ab-4886-b6f1-fe91619fd975_buggy.java
+++ b/tmp/a8016188-48cd-4a08-b081-93ae46dda1ab_fixed.java
@@ -1,52 +1,62 @@
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (t.inGlobalScope()) {
     return;
   }
 
   if (n.isReturn() && n.getFirstChild() != null) {
     data.get(t.getScopeRoot()).recordNonEmptyReturn();
   }
 
   if (t.getScopeDepth() <= 2) {
     // The first-order function analyzer looks at two types of variables:
     //
     // 1) Local variables that are assigned in inner scopes ("escaped vars")
     //
     // 2) Local variables that are assigned more than once.
     //
     // We treat all global variables as escaped by default, so there's
     // no reason to do this extra computation for them.
     return;
   }
 
   if (n.isName() && NodeUtil.isLValue(n) &&
       // Be careful of bleeding functions, which create variables
       // in the inner scope, not the scope where the name appears.
       !NodeUtil.isBleedingFunctionName(n)) {
     String name = n.getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordAssignedName(name);
       }
 
+      // Fix: Only consider "var" to have escaped if *assigned* in an inner scope,
+      // and the assignment is not to 'this' in an inner function
       if (scope != ownerScope && ownerScope.isLocal()) {
+        // Case for "this.foo = ..."
+        if (!("this".equals(name) && NodeUtil.isName(n) && NodeUtil.isLValue(n))) {
           data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
         }
       }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
-        String name = NodeUtil.getRootOfQualifiedName(n).getString();
+    }
+  } else if (n.isGetProp() && NodeUtil.isLValue(n) &&
+      n.isUnscopedQualifiedName()) {
+    // Fix: Do not treat assignment to a property of "this" (e.g., this.foo = ...)
+    // as an escape of a local variable.
+    Node root = NodeUtil.getRootOfQualifiedName(n);
+    if (!root.isThis()) {
+      String name = root.getString();
       Scope scope = t.getScope();
       Var var = scope.getVar(name);
       if (var != null) {
         Scope ownerScope = var.getScope();
         if (scope != ownerScope && ownerScope.isLocal()) {
           data.get(ownerScope.getRootNode())
               .recordEscapedQualifiedName(n.getQualifiedName());
         }
       }
     }
   }
+}
\ No newline at end of file
