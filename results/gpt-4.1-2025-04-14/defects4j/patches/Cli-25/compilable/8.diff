diff --git a/tmp/c69c2d10-0c9c-40e1-a466-49fb29dc7670_buggy.java b/tmp/c6a1b636-915d-45e6-b3c1-12a4f2cc3e53_fixed.java
index 875b31b..c9fc6c4 100644
--- a/tmp/c69c2d10-0c9c-40e1-a466-49fb29dc7670_buggy.java
+++ b/tmp/c6a1b636-915d-45e6-b3c1-12a4f2cc3e53_fixed.java
@@ -1,54 +1,65 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     if (nextLineTabStop >= width)
     {
         // stops infinite loop happening
         nextLineTabStop = width - 1;
     }
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
-            text = padding + text.substring(pos).trim();
+        // do not add padding if we are splitting a long word that started at col 0
+        boolean longWord = false;
+        String remainder = text.substring(pos).trim();
+        if (pos == width && remainder.length() > 0 && text.charAt(0) != ' ') {
+            longWord = true;
+        }
+
+        if (longWord) {
+            text = remainder;
+        } else {
+            text = padding + remainder;
+        }
+
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
         
         if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
         {
             pos = width;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
