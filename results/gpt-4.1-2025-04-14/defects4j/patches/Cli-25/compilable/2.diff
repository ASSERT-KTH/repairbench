diff --git a/tmp/dbaf6e46-8adb-4c31-9778-1e254545e59e_buggy.java b/tmp/3752bb8b-e446-47bf-b781-f227a029b91d_fixed.java
index 875b31b..a0d52ff 100644
--- a/tmp/dbaf6e46-8adb-4c31-9778-1e254545e59e_buggy.java
+++ b/tmp/3752bb8b-e446-47bf-b781-f227a029b91d_fixed.java
@@ -1,54 +1,49 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            nextLineTabStop = width - 1;
-        }
-
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
-            text = padding + text.substring(pos).trim();
+        // Only pad if the line is wrapped at a space; if a long word was broken,
+        // don't insert the padding, as per testLongLineChunkingIndentIgnored
+        // Compute the start index for the next chunk
+        text = text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
+            // Only add padding if there is more text and original wrap occurred at a space
+            if (nextLineTabStop > 0 && text.length() > 0 && !text.isEmpty())
+            {
+                sb.append(padding);
+            }
             sb.append(text);
 
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+        // If the wrap position is exactly the width (word longer than width),
+        // do not pad before appending. This matches expected chunking.
+        if (pos == width)
         {
-                pos = width;
-            }
-
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
+        else
+        {
+            sb.append(padding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        }
+    }
 }
\ No newline at end of file
