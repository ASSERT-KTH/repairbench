diff --git a/tmp/35de0b1d-8efd-47e9-affd-cd3cbb812de7_buggy.java b/tmp/00d1cfea-0890-4bf0-ba01-78fd23547eef_fixed.java
index 5f8ac1a..1cdfbb8 100644
--- a/tmp/35de0b1d-8efd-47e9-affd-cd3cbb812de7_buggy.java
+++ b/tmp/00d1cfea-0890-4bf0-ba01-78fd23547eef_fixed.java
@@ -1,34 +1,47 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
     {
+        // If both pointers are null, consider them equal
+        if (p1 == null && p2 == null) {
+            return 0;
+        }
+        // If one pointer is null, consider it less than the other
+        if (p1 == null) {
+            return -1;
+        }
+        if (p2 == null) {
+            return 1;
+        }
+
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
             return r == 0 ? 1 : r;
         }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
 
-        if (p1 != null && p1.equals(p2)) {
+        if (p1.equals(p2)) {
             return 0;
         }
 
+        // If reached top and pointers are not equal, return comparison by string value
         if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+            // Try to provide deterministic ordering rather than throwing exception
+            // Order by string to support heterogeneous sets ($var, nodes, etc.)
+            String s1 = String.valueOf(p1);
+            String s2 = String.valueOf(p2);
+            return s1.compareTo(s2);
         }
+
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
             return r;
         }
 
         return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
