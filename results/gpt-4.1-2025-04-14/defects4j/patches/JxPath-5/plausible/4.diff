diff --git a/tmp/6d9fe8d8-185e-4d1e-a96f-d7328e8d0a17_buggy.java b/tmp/a023fe01-1c39-436e-adb6-aa15d6091944_fixed.java
index 5f8ac1a..926bebb 100644
--- a/tmp/6d9fe8d8-185e-4d1e-a96f-d7328e8d0a17_buggy.java
+++ b/tmp/a023fe01-1c39-436e-adb6-aa15d6091944_fixed.java
@@ -1,34 +1,44 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    // If both are null, they're equal
+    if (p1 == null && p2 == null) {
+        return 0;
+    }
+    // If only one is null, define an ordering
+    if (p1 == null) {
+        return -1;
+    }
+    if (p2 == null) {
+        return 1;
+    }
+    // If same objects (including variables), return 0
+    if (p1.equals(p2)) {
+        return 0;
+    }
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
 
-        if (p1 != null && p1.equals(p2)) {
-            return 0;
-        }
+    // At this point depth1 == depth2, both not null, not equal
 
-        if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+    // If parents are both null or different trees, define ordering by toString comparison
+    if (depth1 == 1 || p1.parent == null || p2.parent == null) {
+        // Instead of throwing, define a fallback
+        int t = p1.toString().compareTo(p2.toString());
+        return t == 0 ? System.identityHashCode(p1) - System.identityHashCode(p2) : t;
     }
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
-
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
