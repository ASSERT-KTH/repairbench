diff --git a/tmp/77ac47e1-963a-4c86-a88a-f973f96c8296_buggy.java b/tmp/d2bd9ce2-d5aa-4e80-9bb6-a0bec1056b94_fixed.java
index 9d42346..fb5d2f4 100644
--- a/tmp/77ac47e1-963a-4c86-a88a-f973f96c8296_buggy.java
+++ b/tmp/d2bd9ce2-d5aa-4e80-9bb6-a0bec1056b94_fixed.java
@@ -1,37 +1,58 @@
   private ReflectiveTypeAdapterFactory.BoundField createBoundField(
       final Gson context, final Field field, final String name,
       final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
     // special casing primitives here saves ~5% on Android...
     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
     TypeAdapter<?> mapped = null;
     if (annotation != null) {
       mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
     }
     final boolean jsonAdapterPresent = mapped != null;
     if (mapped == null) mapped = context.getAdapter(fieldType);
 
     final TypeAdapter<?> typeAdapter = mapped;
     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
       @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
       @Override void write(JsonWriter writer, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
         TypeAdapter t =
           new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
         t.write(writer, fieldValue);
       }
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = typeAdapter.read(reader);
+        // Bug fix: for primitive fields, if fieldValue is null, set default value (e.g. 0 for int)
         if (fieldValue != null || !isPrimitive) {
           field.set(value, fieldValue);
+        } else if (isPrimitive) {
+          // Set the field to the default value of its primitive type
+          Class<?> fieldClass = field.getType();
+          if (fieldClass == boolean.class) {
+            field.setBoolean(value, false);
+          } else if (fieldClass == byte.class) {
+            field.setByte(value, (byte) 0);
+          } else if (fieldClass == char.class) {
+            field.setChar(value, (char) 0);
+          } else if (fieldClass == short.class) {
+            field.setShort(value, (short) 0);
+          } else if (fieldClass == int.class) {
+            field.setInt(value, 0);
+          } else if (fieldClass == long.class) {
+            field.setLong(value, 0L);
+          } else if (fieldClass == float.class) {
+            field.setFloat(value, 0f);
+          } else if (fieldClass == double.class) {
+            field.setDouble(value, 0d);
+          }
         }
       }
       @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
         if (!serialized) return false;
         Object fieldValue = field.get(value);
         return fieldValue != value; // avoid recursion for example for Throwable.cause
       }
     };
   }
\ No newline at end of file
