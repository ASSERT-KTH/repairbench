diff --git a/tmp/50fc8abf-2e67-407a-8fec-bd03ba787436_buggy.java b/tmp/4904d84e-2e7e-4521-8d19-2c6a3d9a91e7_fixed.java
index d9d2789..998704f 100644
--- a/tmp/50fc8abf-2e67-407a-8fec-bd03ba787436_buggy.java
+++ b/tmp/4904d84e-2e7e-4521-8d19-2c6a3d9a91e7_fixed.java
@@ -1,73 +1,51 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long    result = 0;
     int     end = offset + length;
     int     start = offset;
 
     if (length < 2){
         throw new IllegalArgumentException("Length "+length+" must be at least 2");
     }
 
-        if (buffer[start] == 0) {
-            return 0L;
-        }
-
-        // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+    // Skip leading spaces and NULs
+    while (start < end && (buffer[start] == ' ' || buffer[start] == 0)){
         start++;
+    }
+
+    // If after skipping, we're at the end, treat as 0
+    if (start == end) {
+        return 0L;
+    }
+
+    // Find first trailing NUL or space within the region [start, end)
+    int trailerIdx = end;
+    for (int i = end - 1; i >= start; i--) {
+        if (buffer[i] == 0 || buffer[i] == ' ') {
+            trailerIdx = i;
         } else {
             break;
         }
     }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
+    if (trailerIdx == end) {
         throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+            exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1])
+        );
     }
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
+
+    if (trailerIdx == start) { // only trailing NULs/spaces, so must be zero
+        return 0L;
     }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
+    // Now parse from start (inclusive) to trailerIdx (exclusive)
+    for (int i = start; i < trailerIdx; i++) {
+        final byte currentByte = buffer[i];
         if (currentByte < '0' || currentByte > '7'){
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
