diff --git a/tmp/04aaad22-6615-4860-a58d-577f88508f3c_buggy.java b/tmp/0dd7d395-fbbe-495d-8bdf-22dc89c3af69_fixed.java
index d9d2789..645772a 100644
--- a/tmp/04aaad22-6615-4860-a58d-577f88508f3c_buggy.java
+++ b/tmp/0dd7d395-fbbe-495d-8bdf-22dc89c3af69_fixed.java
@@ -1,73 +1,58 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
+    // skip leading NUL as well as the spec allows field to be all NULs
     if (buffer[start] == 0) {
+        // make sure all the remainder are NUL or space
+        for (int i = start + 1; i < end; i++) {
+            if (buffer[i] != 0 && buffer[i] != ' ') {
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, i, buffer[i]));
+            }
+        }
         return 0L;
     }
 
     // Skip leading spaces
     while (start < end) {
         if (buffer[start] == ' ') {
             start++;
         } else {
             break;
         }
     }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+    // Instead of requiring a trailing NUL or space, accept up to one such terminator,
+    // and treat it as non-numeric, truncating the octal parsing there for POSIX compatibility
+    int numericEnd = end;
+    if (numericEnd > start && (buffer[numericEnd - 1] == 0 || buffer[numericEnd - 1] == ' ')) {
+        numericEnd--;
+        // Eat second trailing NUL or space
+        if (numericEnd > start && (buffer[numericEnd - 1] == 0 || buffer[numericEnd - 1] == ' ')) {
+            numericEnd--;
         }
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
     }
 
-        for ( ;start < end; start++) {
+    // If after stripping we are empty (all spaces/NULs), return 0
+    if (start == numericEnd) {
+        return 0L;
+    }
+
+    for (; start < numericEnd; start++) {
         final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
+        // Check if valid octal digit
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
