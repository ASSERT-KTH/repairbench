diff --git a/tmp/b372a3cc-002a-4dc3-a531-b163b3174d57_buggy.java b/tmp/8182ecee-b994-456e-812a-ef5877e7238a_fixed.java
index d9d2789..2f13e11 100644
--- a/tmp/b372a3cc-002a-4dc3-a531-b163b3174d57_buggy.java
+++ b/tmp/8182ecee-b994-456e-812a-ef5877e7238a_fixed.java
@@ -1,73 +1,63 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2){
         throw new IllegalArgumentException("Length "+length+" must be at least 2");
     }
 
     if (buffer[start] == 0) {
         return 0L;
     }
 
     // Skip leading spaces
     while (start < end){
         if (buffer[start] == ' '){
             start++;
         } else {
             break;
         }
     }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
+    // Special case: field is all NUL or spaces, treat as 0
+    boolean allBlank = true;
+    for (int i = start; i < end; ++i) {
+        if (buffer[i] != 0 && buffer[i] != ' ') {
+            allBlank = false;
+            break;
+        }
+    }
+    if (allBlank) {
+        return 0L;
+    }
+
+    // Ustar and POSIX tar specs require a trailing NUL or space
+    // but some implementations use extra digit for big sizes/uids/gids
     byte trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
+    boolean hasTrailer = (trailer == 0 || trailer == ' ');
+    if (hasTrailer) {
         end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
     }
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
+
+    // Remove any trailing NULs and spaces except the "extra digit" case (no trailer)
+    while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {
         end--;
-            trailer = buffer[end - 1];
+    }
+
+    // If there was no trailer, allow one extra digit (like GNU tar etc)
+    if (!hasTrailer && end < offset + length) {
+        // Accept "overlength" octal
     }
 
     for (; start < end; start++) {
         final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7'){
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
