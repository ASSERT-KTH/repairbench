diff --git a/tmp/086ab4a0-c476-4c70-a05d-652439e7bb59_buggy.java b/tmp/7e4c7308-6787-4e50-a47a-b1bf066dee8e_fixed.java
index bfa2423..4b276f7 100644
--- a/tmp/086ab4a0-c476-4c70-a05d-652439e7bb59_buggy.java
+++ b/tmp/7e4c7308-6787-4e50-a47a-b1bf066dee8e_fixed.java
@@ -1,23 +1,26 @@
     /**
      * Generate a random sample from the distribution.
      *
      * @param sampleSize the number of random values to generate.
      * @return an array representing the random sample.
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not
      * positive.
      */
+    @SuppressWarnings("unchecked")
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+        // Use the runtime type of sample() to create the array
+        T firstSample = sample();
+        final T[] out = (T[]) java.lang.reflect.Array.newInstance(firstSample.getClass(), sampleSize);
+        out[0] = firstSample;
 
-        for (int i = 0; i < sampleSize; i++) {
+        for (int i = 1; i < sampleSize; i++) {
             out[i] = sample();
         }
 
         return out;
-
     }
\ No newline at end of file
