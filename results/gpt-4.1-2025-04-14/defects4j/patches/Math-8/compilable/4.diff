diff --git a/tmp/e5a0d63a-7f5c-48bb-95c0-f71664dfcbbd_buggy.java b/tmp/7fd384eb-8739-463a-aeb4-19896cf53943_fixed.java
index bfa2423..18dad03 100644
--- a/tmp/e5a0d63a-7f5c-48bb-95c0-f71664dfcbbd_buggy.java
+++ b/tmp/7fd384eb-8739-463a-aeb4-19896cf53943_fixed.java
@@ -1,23 +1,36 @@
 /**
  * Generate a random sample from the distribution.
  *
  * @param sampleSize the number of random values to generate.
  * @return an array representing the random sample.
  * @throws NotStrictlyPositiveException if {@code sampleSize} is not
  * positive.
  */
+@SuppressWarnings("unchecked")
 public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
     if (sampleSize <= 0) {
         throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                 sampleSize);
     }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+    // Determine the correct runtime class for the output array.
+    Class<?> clazz = null;
+    for (int i = 0; i < singletons.size(); i++) {
+        T singleton = singletons.get(i);
+        if (singleton != null) {
+            clazz = singleton.getClass();
+            break;
+        }
+    }
+    if (clazz == null) {
+        clazz = Object.class;
+    }
+
+    final T[] out = (T[]) java.lang.reflect.Array.newInstance(clazz, sampleSize);
 
     for (int i = 0; i < sampleSize; i++) {
         out[i] = sample();
     }
 
     return out;
-
 }
\ No newline at end of file
