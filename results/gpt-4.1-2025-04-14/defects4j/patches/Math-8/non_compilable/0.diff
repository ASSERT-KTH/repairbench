diff --git a/tmp/48060e38-0d6b-4597-ba22-bfdce929eaea_buggy.java b/tmp/46de24db-d43d-4251-8d64-d1835c5d787b_fixed.java
index bfa2423..f0db730 100644
--- a/tmp/48060e38-0d6b-4597-ba22-bfdce929eaea_buggy.java
+++ b/tmp/46de24db-d43d-4251-8d64-d1835c5d787b_fixed.java
@@ -1,23 +1,34 @@
 /**
  * Generate a random sample from the distribution.
  *
  * @param sampleSize the number of random values to generate.
  * @return an array representing the random sample.
  * @throws NotStrictlyPositiveException if {@code sampleSize} is not
  * positive.
  */
+@SuppressWarnings("unchecked")
 public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
     if (sampleSize <= 0) {
         throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                 sampleSize);
     }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+    // If singletons is empty, we cannot determine the runtime type. Use Object as a fallback.
+    Class<?> componentType;
+    if (singletons.size() > 0) {
+        // Find a common superclass among all singletons
+        componentType = singletons.get(0).getClass();
+        for (int i = 1; i < singletons.size(); i++) {
+            componentType = org.apache.commons.math3.util.MathUtils.safeClassCommonSuperType(componentType, singletons.get(i).getClass());
+        }
+    } else {
+        componentType = Object.class;
+    }
+    final T[] out = (T[]) java.lang.reflect.Array.newInstance(componentType, sampleSize);
 
     for (int i = 0; i < sampleSize; i++) {
         out[i] = sample();
     }
 
     return out;
-
 }
\ No newline at end of file
