diff --git a/tmp/9f0171c3-4b18-44c8-a120-f2491838678b_buggy.java b/tmp/4fb2147f-469b-4a21-b2fa-73a1e748da64_fixed.java
index 4b7e1e4..2e9b2f9 100644
--- a/tmp/9f0171c3-4b18-44c8-a120-f2491838678b_buggy.java
+++ b/tmp/4fb2147f-469b-4a21-b2fa-73a1e748da64_fixed.java
@@ -1,52 +1,89 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean foundLen = false;
+        // First, parse the length field (as ASCII digits terminated by space).
         while((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
+                foundLen = true;
+                break;
+            } else if (ch == '\n' || ch == '\r') {
+                // Malformed or blank line, skip to next line
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
+                }
+                break;
             } else {
-                                final byte[] rest = new byte[restLen];
-                                final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
-                                }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
-                                headers.put(keyword, value);
+                if (ch < '0' || ch > '9') {
+                    // Malformed line, skip it.
+                    while (ch != -1 && ch != '\n') {
+                        ch = i.read();
                     }
                     break;
                 }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
                 len *= 10;
                 len += ch - '0';
             }
-            if (ch == -1){ // EOF
+        }
+        if (ch == -1 || !foundLen) { // EOF or not found length (blank line/malformed)
             break;
         }
+        if (len <= 0) {
+            // skip line of invalid length
+            for (int skip = 0; skip < len - 1; skip++) {
+                if (i.read() == -1) break;
+            }
+            continue;
+        }
+        // We have len (the full size of the record including digits, space, keyword, value, newline)
+        // We already read 'read' bytes.
+        // Read the rest into a buffer
+        int restLen = len - read;
+        if (restLen <= 0) { // malformed
+            // skip line of invalid length
+            continue;
+        }
+        byte[] rest = new byte[restLen];
+        int got = IOUtils.readFully(i, rest);
+        if (got != restLen) {
+            throw new IOException("Failed to read Paxheader. Expected " + restLen + " bytes, read " + got);
+        }
+        // Find '=' separator
+        int eq = -1, nl = restLen - 1;
+        for (int j = 0; j < restLen; j++) {
+            if (rest[j] == '=' && eq == -1)
+                eq = j;
+        }
+        if (eq == -1) {
+            // Malformed entry, ignore
+            continue;
+        }
+        String keyword = new String(rest, 0, eq, CharsetNames.UTF_8);
+        String value = new String(rest, eq + 1, nl - eq, CharsetNames.UTF_8);
+        if (value.length() > 0 && value.charAt(value.length() - 1) == '\n') {
+            value = value.substring(0, value.length() - 1);
+        }
+        if (rest[nl] != '\n') {
+            // Malformed, entry should end in '\n' per pax spec
+            continue;
+        }
+        if (keyword.length() == 0) {
+            // skip bad entry (likely a blank line or misplaced NL)
+            continue;
+        }
+        if (len == read + 1) { // only NL after keyword, per old logic
+            headers.remove(keyword);
+        } else {
+            headers.put(keyword, value);
+        }
+        // continue parsing next header
     }
     return headers;
 }
\ No newline at end of file
