diff --git a/tmp/77bb601f-4f0e-49ff-ae1a-30f287cd890d_buggy.java b/tmp/20ec2f7a-8994-4586-a03d-1af0c0c9ac32_fixed.java
index 4b7e1e4..2049ba5 100644
--- a/tmp/77bb601f-4f0e-49ff-ae1a-30f287cd890d_buggy.java
+++ b/tmp/20ec2f7a-8994-4586-a03d-1af0c0c9ac32_fixed.java
@@ -1,52 +1,91 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean foundDigit = false;
+        // Skip leading whitespace and blank lines
         while ((ch = i.read()) != -1) {
-                read++;
+            if (ch == ' ' || ch == '\n' || ch == '\r' || ch == '\t') {
+                // skip blank lines and whitespace
+                if (foundDigit) {
+                    // If we already started reading len, break only on SPACE
                     if (ch == ' ') {
+                        break;
+                    } else {
+                        // It is format error but treat as per blank line, ignore
+                        continue;
+                    }
+                }
+                continue;
+            } else if (ch >= '0' && ch <= '9') {
+                len = len * 10 + (ch - '0');
+                foundDigit = true;
+                read++;
+            } else {
+                // not digit and not whitespace, ignore line (likely corrupt data)
+                // skip until the next line
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
+                }
+                // go to outer while again, try parsing next header
+                foundDigit = false;
+                len = 0;
+                read = 0;
+            }
+            if (foundDigit && ch == ' ') {
+                // already hit space: break out
+                break;
+            }
+        }
+        if (ch == -1) { // EOF
+            break;
+        }
+        if (!foundDigit) {
+            // skip blank/invalid line
+            continue;
+        }
+
         // Get keyword
         final ByteArrayOutputStream coll = new ByteArrayOutputStream();
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == '=') { // end of keyword
                 final String keyword = coll.toString(CharsetNames.UTF_8);
                 // Get rest of entry
                 final int restLen = len - read;
                 if (restLen == 1) { // only NL
                     headers.remove(keyword);
-                            } else {
+                    // read and discard NL
+                    if (i.read() != -1) { }
+                } else if (restLen > 1) {
                     final byte[] rest = new byte[restLen];
                     final int got = IOUtils.readFully(i, rest);
                     if (got != restLen) {
                         throw new IOException("Failed to read "
                                 + "Paxheader. Expected "
                                 + restLen
                                 + " bytes, read "
                                 + got);
                     }
                     // Drop trailing NL
                     final String value = new String(rest, 0,
                             restLen - 1, CharsetNames.UTF_8);
                     headers.put(keyword, value);
+                } else {
+                    // restLen <= 0, means nothing to read (likely blank or malformed line), ignore safely
                 }
                 break;
             }
             coll.write((byte) ch);
         }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
+        // Skip any leftover data until the end of the line to recover from malformed lines
         if (ch == -1) { // EOF
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
