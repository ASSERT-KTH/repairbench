diff --git a/tmp/7aad97b0-4721-415a-a4ab-d128437ce806_buggy.java b/tmp/36d98ba8-864e-4784-b88f-8854dc3f8476_fixed.java
index 4b7e1e4..49f3223 100644
--- a/tmp/7aad97b0-4721-415a-a4ab-d128437ce806_buggy.java
+++ b/tmp/36d98ba8-864e-4784-b88f-8854dc3f8476_fixed.java
@@ -1,52 +1,73 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean foundLen = false;
+        // Skip blank lines and parse number
         while((ch = i.read()) != -1) {
+            if (!foundLen && ch == '\n') {
+                // Skip blank or stray newline lines
+                continue;
+            }
             read++;
             if (ch == ' '){
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
-                            } else {
-                                final byte[] rest = new byte[restLen];
-                                final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
-                                }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
-                                headers.put(keyword, value);
-                            }
+                foundLen = true;
                 break;
             }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
+            if (ch < '0' || ch > '9') {
+                throw new IOException("Non-numeric character '" + (char)ch + "' found in Pax header length");
             }
             len *= 10;
             len += ch - '0';
         }
         if (ch == -1){ // EOF
             break;
         }
+        // Now parse header entry of the given "len"
+        // We have already read 'read' bytes for len part (including space)
+        // Read the remaining entry part (len - read bytes)
+        byte[] entry = new byte[len - read];
+        int got = IOUtils.readFully(i, entry);
+        if (got != entry.length) {
+            throw new IOException("Failed to read full Paxheader entry. Expected "+entry.length+" bytes, read "+got);
+        }
+        // Entire header line (including trailing newline) is: <len><space><keyword>=<value>\n
+        // So reconstruct line for parsing:
+        ByteArrayOutputStream lineBuf = new ByteArrayOutputStream();
+        // Reconstruct len part
+        String lenStr = Integer.toString(len);
+        lineBuf.write(lenStr.getBytes(CharsetNames.UTF_8), 0, lenStr.length());
+        lineBuf.write(' ');
+        lineBuf.write(entry, 0, entry.length);
+        String line = new String(lineBuf.toByteArray(), CharsetNames.UTF_8);
+        // Remove possible trailing '\n' or '\r\n'
+        if (line.endsWith("\r\n")) {
+            line = line.substring(0, line.length() - 2);
+        } else if (line.endsWith("\n")) {
+            line = line.substring(0, line.length() - 1);
+        }
+        // Now parse keyword and value
+        int eq = line.indexOf('=');
+        if (eq == -1) {
+            continue; // Malformed line, skip
+        }
+        // keyword is after the first space and up to '='
+        int space = line.indexOf(' ');
+        if (space == -1 || space >= eq) {
+            continue; // Malformed line, skip
+        }
+        String keyword = line.substring(space + 1, eq);
+        String value = line.substring(eq + 1);
+        if (value.isEmpty()) {
+            headers.remove(keyword);
+        } else {
+            headers.put(keyword, value);
+        }
     }
     return headers;
 }
\ No newline at end of file
