diff --git a/tmp/99ce56be-6989-4464-ae3b-c45ca9c89d44_buggy.java b/tmp/ff66841f-4c3d-424c-baae-00ad02cb6b25_fixed.java
index 4b7e1e4..18d1f7c 100644
--- a/tmp/99ce56be-6989-4464-ae3b-c45ca9c89d44_buggy.java
+++ b/tmp/ff66841f-4c3d-424c-baae-00ad02cb6b25_fixed.java
@@ -1,52 +1,86 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean sawDigit = false;
         while((ch = i.read()) != -1) {
             read++;
             if (ch == ' '){
-                    // Get keyword
+                break;
+            }
+            if ('0' <= ch && ch <= '9') {
+                len *= 10;
+                len += ch - '0';
+                sawDigit = true;
+            } else {
+                // skip invalid lines (including blank lines)
+                // skip until next NL
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
+                }
+                // continue to next header line
+                break;
+            }
+        }
+        if (ch == -1) { // EOF
+            break;
+        }
+        if (!sawDigit) {
+            // skip blank or invalid line and continue to next
+            continue;
+        }
+        // now process the rest of the line: 'keyword=value\n'
         final ByteArrayOutputStream coll = new ByteArrayOutputStream();
+        String keyword = null;
+        int valueStartRead = read;
+        int keywordLen = 0;
         while((ch = i.read()) != -1) {
             read++;
             if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
+                keyword = coll.toString(CharsetNames.UTF_8);
+                break;
+            }
+            coll.write((byte) ch);
+            keywordLen++;
+        }
+        if (ch == -1) { // EOF
+            break;
+        }
         final int restLen = len - read;
+        if (restLen < 0) {
+            // invalid line: length counts less than read bytes, likely a corrupted/blank/invalid header, skip it
+            // skip to next NL
+            while (ch != -1 && ch != '\n') {
+                ch = i.read();
+            }
+            continue;
+        }
         if (restLen == 1) { // only NL
             headers.remove(keyword);
-                            } else {
+            // also skip the trailing NL byte
+            i.read();
+        } else if (restLen > 1) {
             final byte[] rest = new byte[restLen];
             final int got = IOUtils.readFully(i, rest);
             if (got != restLen) {
                 throw new IOException("Failed to read "
                                       + "Paxheader. Expected "
                                       + restLen
                                       + " bytes, read "
                                       + got);
             }
             // Drop trailing NL
             final String value = new String(rest, 0,
                                             restLen - 1, CharsetNames.UTF_8);
             headers.put(keyword, value);
-                            }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
+        } else {
+            // restLen == 0, just skip
         }
     }
     return headers;
 }
\ No newline at end of file
