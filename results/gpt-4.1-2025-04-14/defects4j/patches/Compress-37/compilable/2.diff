diff --git a/tmp/bbccc5e0-db37-412b-a128-4ba896c7098e_buggy.java b/tmp/2f92f800-4289-4fc4-9916-627599b95714_fixed.java
index 4b7e1e4..cc30d46 100644
--- a/tmp/bbccc5e0-db37-412b-a128-4ba896c7098e_buggy.java
+++ b/tmp/2f92f800-4289-4fc4-9916-627599b95714_fixed.java
@@ -1,52 +1,84 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean foundLen = false;
         while ((ch = i.read()) != -1) {
             read++;
+            if (ch == '\n' || ch == '\r') {
+                // This handles possible blank lines in Pax headers;
+                // skip and try to read a new header.
+                continue;
+            }
             if (ch == ' ') {
-                    // Get keyword
+                foundLen = true;
+                break;
+            }
+            if (ch < '0' || ch > '9') {
+                // Invalid line (possibly blank or garbage), skip to next line
+                // Consume until newline or EOF
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
+                }
+                read = 0;
+                len = 0;
+                continue;
+            }
+            len *= 10;
+            len += ch - '0';
+        }
+        if (ch == -1) { // EOF
+            break;
+        }
+        if (!foundLen) {
+            // encountered EOF or error before length was found
+            break;
+        }
+        // Now, parse keyword
         final ByteArrayOutputStream coll = new ByteArrayOutputStream();
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == '=') { // end of keyword
                 final String keyword = coll.toString(CharsetNames.UTF_8);
                 // Get rest of entry
                 final int restLen = len - read;
+                if (restLen < 0) {
+                    // Malformed header, skip (e.g. blank line previously, or garbage header length)
+                    // skip remaining characters in line
+                    for(; read < len; read++) {
+                        if (i.read() == -1) {
+                            break;
+                        }
+                    }
+                    break; // move to next header
+                }
                 if (restLen == 1) { // only NL
                     headers.remove(keyword);
-                            } else {
+                } else if (restLen >= 1) {
                     final byte[] rest = new byte[restLen];
                     final int got = IOUtils.readFully(i, rest);
                     if (got != restLen) {
                         throw new IOException("Failed to read "
                                 + "Paxheader. Expected "
                                 + restLen
                                 + " bytes, read "
                                 + got);
                     }
                     // Drop trailing NL
                     final String value = new String(rest, 0,
                             restLen - 1, CharsetNames.UTF_8);
                     headers.put(keyword, value);
                 }
                 break;
             }
             coll.write((byte) ch);
         }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
+        // At this point, we should have processed one Pax header; continue to next one.
     }
     return headers;
 }
\ No newline at end of file
