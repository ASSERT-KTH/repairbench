diff --git a/tmp/7998de53-2ae6-411f-9391-57acbc0e8d91_buggy.java b/tmp/a5322277-152d-4884-8a6f-dbd0a7da101b_fixed.java
index 4b7e1e4..bbb2b0b 100644
--- a/tmp/7998de53-2ae6-411f-9391-57acbc0e8d91_buggy.java
+++ b/tmp/a5322277-152d-4884-8a6f-dbd0a7da101b_fixed.java
@@ -1,52 +1,90 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
+
         int ch;
         int len = 0;
         int read = 0;
+        boolean gotLen = false;
+
+        // Read length
         while((ch = i.read()) != -1) {
             read++;
             if (ch == ' '){
+                gotLen = true;
+                break;
+            }
+            // skip blanks, or handle blank lines
+            if ((ch < '0' || ch > '9')) {
+                // If the line is actually blank (e.g., just \n), skip to next
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
+                }
+                read = 0;
+                len = 0;
+                continue; // skip this line
+            }
+            len *= 10;
+            len += ch - '0';
+        }
+        if (ch == -1){ // EOF
+            break;
+        }
+        if (!gotLen) {
+            // didn't find a valid length, probably end of headers
+            break;
+        }
+        // check for blank or invalid lines
+        if (len <= 0) {
+            // skip this line
+            for (int skip = 0; skip < 8192; skip++) { // safety limit
+                ch = i.read();
+                if (ch == -1 || ch == '\n') break;
+            }
+            continue;
+        }
+
         // Get keyword
         final ByteArrayOutputStream coll = new ByteArrayOutputStream();
         while((ch = i.read()) != -1) {
             read++;
             if (ch == '='){ // end of keyword
                 final String keyword = coll.toString(CharsetNames.UTF_8);
                 // Get rest of entry
                 final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                if (restLen < 1) {
+                    // skip invalid entry and continue
+                    // finish reading to \n, if possible
+                    for (int skip = 0; skip < 8192 && (restLen - skip) > 0; skip++) {
+                        int nextCh = i.read();
+                        if (nextCh == -1 || nextCh == '\n') break;
+                    }
+                    break; // skip this header, try next
+                } else if (restLen == 1) { // only NL
                     headers.remove(keyword);
                 } else {
                     final byte[] rest = new byte[restLen];
                     final int got = IOUtils.readFully(i, rest);
                     if (got != restLen) {
                         throw new IOException("Failed to read "
                                               + "Paxheader. Expected "
                                               + restLen
                                               + " bytes, read "
                                               + got);
                     }
                     // Drop trailing NL
                     final String value = new String(rest, 0,
                                               restLen - 1, CharsetNames.UTF_8);
                     headers.put(keyword, value);
                 }
                 break;
             }
             coll.write((byte) ch);
         }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
+        // Continue to next header
     }
     return headers;
 }
\ No newline at end of file
