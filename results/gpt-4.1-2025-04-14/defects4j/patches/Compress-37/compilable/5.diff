diff --git a/tmp/7666c704-2e38-4527-be22-2c943e47724e_buggy.java b/tmp/2a9c48fe-2d9a-4530-ae3d-0955aa8af538_fixed.java
index 4b7e1e4..db82751 100644
--- a/tmp/7666c704-2e38-4527-be22-2c943e47724e_buggy.java
+++ b/tmp/2a9c48fe-2d9a-4530-ae3d-0955aa8af538_fixed.java
@@ -1,52 +1,78 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean sawDigit = false;
         while((ch = i.read()) != -1) {
             read++;
             if (ch == ' '){
+                // If we have not seen any digits, skip the line (blank/malformed)
+                if (!sawDigit) {
+                    // Skip until next newline
+                    while (ch != -1 && ch != '\n') {
+                        ch = i.read();
+                    }
+                    break;
+                }
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while((ch = i.read()) != -1) {
                     read++;
                     if (ch == '='){ // end of keyword
                         final String keyword = coll.toString(CharsetNames.UTF_8);
                         // Get rest of entry
                         final int restLen = len - read;
+                        // If restLen is invalid, skip this header
+                        if (restLen < 1) {
+                            // Skip rest of line
+                            for (; ch != -1 && ch != '\n'; ch = i.read()) {}
+                            break;
+                        }
                         if (restLen == 1) { // only NL
                             headers.remove(keyword);
+                            // Consume the newline
+                            i.read();
                         } else {
                             final byte[] rest = new byte[restLen];
                             final int got = IOUtils.readFully(i, rest);
                             if (got != restLen) {
                                 throw new IOException("Failed to read "
                                                       + "Paxheader. Expected "
                                                       + restLen
                                                       + " bytes, read "
                                                       + got);
                             }
                             // Drop trailing NL
                             final String value = new String(rest, 0,
                                                       restLen - 1, CharsetNames.UTF_8);
                             headers.put(keyword, value);
                         }
                         break;
                     }
                     coll.write((byte) ch);
                 }
                 break; // Processed single header
             }
+            if (ch >= '0' && ch <= '9') {
+                sawDigit = true;
                 len *= 10;
                 len += ch - '0';
+            } else {
+                // Malformed line, skip until newline
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
+                }
+                break;
+            }
         }
         if (ch == -1){ // EOF
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
