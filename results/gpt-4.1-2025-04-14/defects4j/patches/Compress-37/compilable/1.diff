diff --git a/tmp/c9e48969-e5c1-4c0a-9c4c-f5cf5db21b6c_buggy.java b/tmp/7b8b5956-5634-4e90-9597-f64ee9fe6ee0_fixed.java
index 4b7e1e4..5d89ef3 100644
--- a/tmp/c9e48969-e5c1-4c0a-9c4c-f5cf5db21b6c_buggy.java
+++ b/tmp/7b8b5956-5634-4e90-9597-f64ee9fe6ee0_fixed.java
@@ -1,52 +1,74 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean foundLen = false;
+
+        // Read length field
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
-                            } else {
-                                final byte[] rest = new byte[restLen];
-                                final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
-                                }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
-                                headers.put(keyword, value);
+                foundLen = true;
+                break;
             }
+            // ignore if starting with newline (blank line)
+            if (read == 1 && (ch == '\n' || ch == '\r')) {
                 break;
             }
-                        coll.write((byte) ch);
+            if (ch < '0' || ch > '9') {
+                // Invalid length, skip this line
+                // consume until newline or EOF
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
                 }
-                    break; // Processed single header
+                break;
             }
             len *= 10;
             len += ch - '0';
         }
         if (ch == -1) { // EOF
             break;
         }
+        if (!foundLen) { // Either '\n' or invalid length, skip
+            continue;
+        }
+        if (len <= 0) {
+            // Skip the line of non-positive length
+            for (int j = read; j < 8192; j++) { // avoid infinite loop
+                int b = i.read();
+                if (b == -1 || b == '\n') break;
+            }
+            continue;
+        }
+        final byte[] line = new byte[len - read];
+        final int got = IOUtils.readFully(i, line);
+        if (got != len - read) {
+            throw new IOException("Failed to read Paxheader. Expected " + (len - read)
+                + " bytes, read " + got);
+        }
+        int end = line.length - 1; // expect last '\n'
+        if (line.length > 0 && line[end] == '\n') {
+            // correct, trailing newline
+            end--;
+        }
+        String kv = new String(line, 0, end + 1, CharsetNames.UTF_8);
+        int eq = kv.indexOf('=');
+        if (eq == -1) {
+            // Malformed line; ignore
+            continue;
+        }
+        String keyword = kv.substring(0, eq);
+        String value = kv.substring(eq + 1);
+        if (value.length() == 0) {
+            headers.remove(keyword);
+        } else {
+            headers.put(keyword, value);
+        }
     }
     return headers;
 }
\ No newline at end of file
