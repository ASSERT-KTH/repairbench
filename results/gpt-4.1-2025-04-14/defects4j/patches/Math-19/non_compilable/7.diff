diff --git a/tmp/17fa100c-7e0c-4c30-898c-a5402612b29e_buggy.java b/tmp/d90630c3-a5e3-4c32-a88f-eb71e053b91f_fixed.java
index d80b7d0..85e7871 100644
--- a/tmp/17fa100c-7e0c-4c30-898c-a5402612b29e_buggy.java
+++ b/tmp/d90630c3-a5e3-4c32-a88f-eb71e053b91f_fixed.java
@@ -1,61 +1,74 @@
 /**
  * Checks dimensions and values of boundaries and inputSigma if defined.
  */
 private void checkParameters() {
     final double[] init = getStartPoint();
     final double[] lB = getLowerBound();
     final double[] uB = getUpperBound();
 
     // Checks whether there is at least one finite bound value.
     boolean hasFiniteBounds = false;
     for (int i = 0; i < lB.length; i++) {
         if (!Double.isInfinite(lB[i]) ||
             !Double.isInfinite(uB[i])) {
             hasFiniteBounds = true;
             break;
         }
     }
     // Checks whether there is at least one infinite bound value.
     boolean hasInfiniteBounds = false;
     if (hasFiniteBounds) {
         for (int i = 0; i < lB.length; i++) {
             if (Double.isInfinite(lB[i]) ||
                 Double.isInfinite(uB[i])) {
                 hasInfiniteBounds = true;
                 break;
             }
         }
 
         if (hasInfiniteBounds) {
             // If there is at least one finite bound, none can be infinite,
             // because mixed cases are not supported by the current code.
             throw new MathUnsupportedOperationException();
         } else {
             // Convert API to internal handling of boundaries.
             boundaries = new double[2][];
             boundaries[0] = lB;
             boundaries[1] = uB;
 
             // Abort early if the normalization will overflow (cf. "encode" method).
+            for (int i = 0; i < lB.length; i++) {
+                double diff = uB[i] - lB[i];
+                if (Double.isNaN(diff)) {
+                    throw new MathIllegalStateException();
+                }
+                // Check for underflow/overflow: diff must be finite and non-negative.
+                if (diff < 0) {
+                    throw new NumberIsTooLargeException(lB[i], uB[i], true);
+                }
+                if (!Double.isFinite(diff)) {
+                    throw new NumberIsTooLargeException(uB[i], lB[i], false);
+                }
+            }
         }
     } else {
         // Convert API to internal handling of boundaries.
         boundaries = null;
     }
 
     if (inputSigma != null) {
         if (inputSigma.length != init.length) {
             throw new DimensionMismatchException(inputSigma.length, init.length);
         }
         for (int i = 0; i < init.length; i++) {
             if (inputSigma[i] < 0) {
                 throw new NotPositiveException(inputSigma[i]);
             }
             if (boundaries != null) {
                 if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
                     throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);
                 }
             }
         }
     }
 }
\ No newline at end of file
