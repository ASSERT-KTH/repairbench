diff --git a/tmp/0468a6ab-8a3b-4bc4-9153-199cb0dc6113_buggy.java b/tmp/12fa646c-cec3-4868-9ddb-04f79cbab470_fixed.java
index 0eef537..7ccd3f9 100644
--- a/tmp/0468a6ab-8a3b-4bc4-9153-199cb0dc6113_buggy.java
+++ b/tmp/12fa646c-cec3-4868-9ddb-04f79cbab470_fixed.java
@@ -1,74 +1,91 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
         lTData   = matrix.getData();
         cachedL  = null;
         cachedLT = null;
 
         // check the matrix before transformation
         for (int i = 0; i < order; ++i) {
 
             final double[] lI = lTData[i];
 
+            // check for positive definiteness before decomposition
             if (lTData[i][i] < absolutePositivityThreshold) {
                 throw new NotPositiveDefiniteMatrixException();
             }
             // check off-diagonal elements (and reset them to 0)
             for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];
                 final double lIJ = lI[j];
                 final double lJI = lJ[i];
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
                 lJ[i] = 0;
            }
         }
 
         // transform the matrix
         for (int i = 0; i < order; ++i) {
 
             final double[] ltI = lTData[i];
 
+            // Recompute the diagonal entry for subtracting the squares
+            double sum = ltI[i];
+            for (int k = 0; k < i; ++k) {
+                sum -= lTData[k][i] * lTData[k][i];
+            }
+
             // check diagonal element
+            if (sum < absolutePositivityThreshold) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
+
+            ltI[i] = Math.sqrt(sum);
 
-            ltI[i] = Math.sqrt(ltI[i]);
             final double inverse = 1.0 / ltI[i];
 
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
+            for (int j = i + 1; j < order; ++j) {
+                double s = lTData[i][j];
+                for (int k = 0; k < i; ++k) {
+                    s -= lTData[k][i] * lTData[k][j];
                 }
+                lTData[i][j] = s * inverse;
             }
 
         }
 
+        // Fill lower triangle (column access makes for L being lower-triangle)
+        for (int i = 0; i < order; ++i) {
+            for (int j = i + 1; j < order; ++j) {
+                lTData[j][i] = 0.0;
+            }
+        }
     }
\ No newline at end of file
