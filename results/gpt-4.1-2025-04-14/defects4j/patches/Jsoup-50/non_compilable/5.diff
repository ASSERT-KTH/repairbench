diff --git a/tmp/452167e5-fc58-4d2a-847b-7f0e97a67d43_buggy.java b/tmp/0300fcbd-1d48-4d33-9da7-5aa8ed09ddf5_fixed.java
index 25ca093..a667186 100644
--- a/tmp/452167e5-fc58-4d2a-847b-7f0e97a67d43_buggy.java
+++ b/tmp/0300fcbd-1d48-4d33-9da7-5aa8ed09ddf5_fixed.java
@@ -1,52 +1,119 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    String detectedCharset = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM (Byte Order Mark) and override charset if found
+    // We'll look at the first few bytes without altering the original ByteBuffer (so mark & reset)
+    ByteOrderMark bom = null;
+    int[] bomLength = new int[1];
+    detectedCharset = detectCharsetFromBom(byteData, bomLength);
+    if (detectedCharset != null) {
+        charsetName = detectedCharset;
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        // use defaultCharset (usually UTF-8) for initial decode
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
+                if (bomLength[0] > 0) {
+                    byteData.position(bomLength[0]); // skip BOM if present
+                }
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        byteData.rewind();
+        if (bomLength[0] > 0) {
+            byteData.position(bomLength[0]); // skip BOM if present
+        }
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
+
+    // Handle case where still has BOM as char at text head (e.g. UTF-8)
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
     }
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
     }
     return doc;
 }
+
+// Helper function for BOM detection
+private static String detectCharsetFromBom(ByteBuffer byteData, int[] bomLength) {
+    // Save old position
+    int oldPos = byteData.position();
+    try {
+        if (byteData.remaining() >= 4) {
+            byte b0 = byteData.get();
+            byte b1 = byteData.get();
+            byte b2 = byteData.get();
+            byte b3 = byteData.get();
+            if (b0 == (byte)0x00 && b1 == (byte)0x00 && b2 == (byte)0xFE && b3 == (byte)0xFF) {
+                // UTF-32, big-endian BOM
+                bomLength[0] = 4;
+                return "UTF-32BE";
+            }
+            if (b0 == (byte)0xFF && b1 == (byte)0xFE && b2 == (byte)0x00 && b3 == (byte)0x00) {
+                // UTF-32, little-endian BOM
+                bomLength[0] = 4;
+                return "UTF-32LE";
+            }
+            if (b0 == (byte)0xEF && b1 == (byte)0xBB && b2 == (byte)0xBF) {
+                // UTF-8 BOM (3 bytes)
+                bomLength[0] = 3;
+                return "UTF-8";
+            }
+            if (b0 == (byte)0xFE && b1 == (byte)0xFF) {
+                // UTF-16, big-endian BOM (2 bytes)
+                bomLength[0] = 2;
+                return "UTF-16BE";
+            }
+            if (b0 == (byte)0xFF && b1 == (byte)0xFE) {
+                // UTF-16, little-endian BOM (2 bytes)
+                bomLength[0] = 2;
+                return "UTF-16LE";
+            }
+        }
+        // check for UTF-8 BOM alone
+        if (byteData.remaining() >= 3) {
+            byte b0 = byteData.get(0);
+            byte b1 = byteData.get(1);
+            byte b2 = byteData.get(2);
+            if (b0 == (byte)0xEF && b1 == (byte)0xBB && b2 == (byte)0xBF) {
+                bomLength[0] = 3;
+                return "UTF-8";
+            }
+        }
+    } finally {
+        // reset buffer position
+        byteData.position(oldPos);
+    }
+    bomLength[0] = 0;
+    return null;
+}
\ No newline at end of file
