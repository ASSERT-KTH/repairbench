diff --git a/tmp/2c37a18b-0ae3-44c3-9e15-0301d617b44f_buggy.java b/tmp/f5e96d20-4c1c-440b-9c10-701a8b34d674_fixed.java
index 25ca093..7e618b8 100644
--- a/tmp/2c37a18b-0ae3-44c3-9e15-0301d617b44f_buggy.java
+++ b/tmp/f5e96d20-4c1c-440b-9c10-701a8b34d674_fixed.java
@@ -1,52 +1,127 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // --- BOM detection and Charset determination ---
+    // See https://www.unicode.org/faq/utf_bom.html#bom5
+    final class BomCharset {
+        String charset;
+        int bomLength;
+        BomCharset(String charset, int bomLength) { this.charset = charset; this.bomLength = bomLength; }
+    }
+    BomCharset parseBOM(ByteBuffer byteData) {
+        // mark: do not change byteData position, it's the caller's job
+        if (byteData.remaining() >= 4) {
+            byte b0 = byteData.get(byteData.position());
+            byte b1 = byteData.get(byteData.position() + 1);
+            byte b2 = byteData.get(byteData.position() + 2);
+            byte b3 = byteData.get(byteData.position() + 3);
+
+            // UTF-32 BE
+            if ((b0 == 0x00) && (b1 == 0x00) && (b2 == (byte)0xFE) && (b3 == (byte)0xFF)) {
+                return new BomCharset("UTF-32BE", 4);
+            }
+            // UTF-32 LE
+            if ((b0 == (byte)0xFF) && (b1 == (byte)0xFE) && (b2 == 0x00) && (b3 == 0x00)) {
+                return new BomCharset("UTF-32LE", 4);
+            }
+        }
+        if (byteData.remaining() >= 3) {
+            byte b0 = byteData.get(byteData.position());
+            byte b1 = byteData.get(byteData.position() + 1);
+            byte b2 = byteData.get(byteData.position() + 2);
+
+            // UTF-8
+            if ((b0 == (byte)0xEF) && (b1 == (byte)0xBB) && (b2 == (byte)0xBF)) {
+                return new BomCharset("UTF-8", 3);
+            }
+        }
+        if (byteData.remaining() >= 2) {
+            byte b0 = byteData.get(byteData.position());
+            byte b1 = byteData.get(byteData.position() + 1);
+
+            // UTF-16 BE
+            if ((b0 == (byte)0xFE) && (b1 == (byte)0xFF)) {
+                return new BomCharset("UTF-16BE", 2);
+            }
+            // UTF-16 LE
+            if ((b0 == (byte)0xFF) && (b1 == (byte)0xFE)) {
+                return new BomCharset("UTF-16LE", 2);
+            }
+        }
+        return null;
+    }
+
+    String detectedCharset = null;
+    int bomOffset = 0;
+
+    byteData.mark();
+    BomCharset bom = parseBOM(byteData);
+    if (bom != null) {
+        detectedCharset = bom.charset;
+        bomOffset = bom.bomLength;
+        charsetName = detectedCharset;
+    }
+    byteData.reset();
+
+    // Set up a buffer without the BOM
+    ByteBuffer dataToDecode = byteData;
+    if (bomOffset > 0) {
+        // slice from bomOffset to limit
+        int oldPos = byteData.position();
+        int oldLimit = byteData.limit();
+        byteData.position(oldPos + bomOffset);
+        dataToDecode = byteData.slice();
+        byteData.position(oldPos);  // reset
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        docData = Charset.forName(defaultCharset).decode(dataToDecode).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+                dataToDecode = byteData;
+                bom = parseBOM(byteData);
+                if (bom != null) {
+                    int bomSkip = bom.bomLength;
+                    byteData.position(byteData.position() + bomSkip);
+                    dataToDecode = byteData.slice();
+                    byteData.position(0);  // reset
+                }
+                docData = Charset.forName(foundCharset).decode(dataToDecode).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
+        docData = Charset.forName(charsetName).decode(dataToDecode).toString();
     }
+
+    // No longer need to check if docData starts with BOM char here, already handled
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
