diff --git a/tmp/1a3b0966-8738-44fd-af3d-eadb5195046a_buggy.java b/tmp/cd0a7b8e-2a41-4e54-85ed-00cf40d62c56_fixed.java
index 25ca093..f87dded 100644
--- a/tmp/1a3b0966-8738-44fd-af3d-eadb5195046a_buggy.java
+++ b/tmp/cd0a7b8e-2a41-4e54-85ed-00cf40d62c56_fixed.java
@@ -1,52 +1,120 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // BOMs we know and their charsets
+    final byte[] BOM_UTF8 = new byte[]{(byte)0xEF, (byte)0xBB, (byte)0xBF};
+    final byte[] BOM_UTF16_BE = new byte[]{(byte)0xFE, (byte)0xFF};
+    final byte[] BOM_UTF16_LE = new byte[]{(byte)0xFF, (byte)0xFE};
+    final byte[] BOM_UTF32_BE = new byte[]{0x00, 0x00, (byte)0xFE, (byte)0xFF};
+    final byte[] BOM_UTF32_LE = new byte[]{(byte)0xFF, (byte)0xFE, 0x00, 0x00};
+
+    // Detect BOM encoding
+    String bomCharset = null;
+    int bomLength = 0;
+    if (byteData.remaining() >= 4) {
+        byteData.mark();
+        byte[] bytes = new byte[4];
+        byteData.get(bytes, 0, 4);
+
+        // BOM detection order: UTF-32, UTF-8, UTF-16
+        if (Arrays.equals(bytes, BOM_UTF32_BE)) {
+            bomCharset = "UTF-32BE";
+            bomLength = 4;
+        } else if (Arrays.equals(bytes, BOM_UTF32_LE)) {
+            bomCharset = "UTF-32LE";
+            bomLength = 4;
+        } else if (bytes[0] == BOM_UTF8[0] && bytes[1] == BOM_UTF8[1] && bytes[2] == BOM_UTF8[2]) {
+            bomCharset = "UTF-8";
+            bomLength = 3;
+        } else if (bytes[0] == BOM_UTF16_BE[0] && bytes[1] == BOM_UTF16_BE[1]) {
+            bomCharset = "UTF-16BE";
+            bomLength = 2;
+        } else if (bytes[0] == BOM_UTF16_LE[0] && bytes[1] == BOM_UTF16_LE[1]) {
+            bomCharset = "UTF-16LE";
+            bomLength = 2;
+        }
+        byteData.reset();
+    } else if (byteData.remaining() >= 3) {
+        byteData.mark();
+        byte[] bytes = new byte[3];
+        byteData.get(bytes, 0, 3);
+
+        if (bytes[0] == BOM_UTF8[0] && bytes[1] == BOM_UTF8[1] && bytes[2] == BOM_UTF8[2]) {
+            bomCharset = "UTF-8";
+            bomLength = 3;
+        } else if (bytes[0] == BOM_UTF16_BE[0] && bytes[1] == BOM_UTF16_BE[1]) {
+            bomCharset = "UTF-16BE";
+            bomLength = 2;
+        } else if (bytes[0] == BOM_UTF16_LE[0] && bytes[1] == BOM_UTF16_LE[1]) {
+            bomCharset = "UTF-16LE";
+            bomLength = 2;
+        }
+        byteData.reset();
+    } else if (byteData.remaining() >= 2) {
+        byteData.mark();
+        byte[] bytes = new byte[2];
+        byteData.get(bytes, 0, 2);
+
+        if (bytes[0] == BOM_UTF16_BE[0] && bytes[1] == BOM_UTF16_BE[1]) {
+            bomCharset = "UTF-16BE";
+            bomLength = 2;
+        } else if (bytes[0] == BOM_UTF16_LE[0] && bytes[1] == BOM_UTF16_LE[1]) {
+            bomCharset = "UTF-16LE";
+            bomLength = 2;
+        }
+        byteData.reset();
+    }
+
+    if (bomCharset != null) {
+        charsetName = bomCharset;
+        // skip BOM
+        int newPosition = byteData.position() + bomLength;
+        byteData.position(newPosition);
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
+                if (bomCharset != null) {
+                    // skip BOM again if present
+                    byteData.position(bomLength);
+                }
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+    // Do NOT check for a Unicode char (U+FEFF) at docData[0] for BOM; handled above.
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
