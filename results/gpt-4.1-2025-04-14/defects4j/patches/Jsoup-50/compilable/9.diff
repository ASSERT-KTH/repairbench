diff --git a/tmp/6b193af2-3ad4-4864-a205-4ac5930def09_buggy.java b/tmp/3f8e36b1-e1a1-4134-8859-756d739acbc1_fixed.java
index 25ca093..72675ef 100644
--- a/tmp/6b193af2-3ad4-4864-a205-4ac5930def09_buggy.java
+++ b/tmp/3f8e36b1-e1a1-4134-8859-756d739acbc1_fixed.java
@@ -1,52 +1,86 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM and pick up the charset if not specified
+    String bomCharset = null;
+    int bomLeft = -1;
+    if (byteData.remaining() >= 4) {
+        byte b0 = byteData.get(byteData.position());
+        byte b1 = byteData.get(byteData.position() + 1);
+        byte b2 = byteData.get(byteData.position() + 2);
+        byte b3 = byteData.get(byteData.position() + 3);
+
+        // Check BOMs for utf-8, utf-16, utf-32
+        if (b0 == (byte)0xEF && b1 == (byte)0xBB && b2 == (byte)0xBF) {
+            bomCharset = "UTF-8";
+            bomLeft = 3;
+        } else if (b0 == (byte)0xFE && b1 == (byte)0xFF) {
+            bomCharset = "UTF-16BE";
+            bomLeft = 2;
+        } else if (b0 == (byte)0xFF && b1 == (byte)0xFE) {
+            if (b2 == 0 && b3 == 0) {
+                bomCharset = "UTF-32LE";
+                bomLeft = 4;
+            } else {
+                bomCharset = "UTF-16LE";
+                bomLeft = 2;
+            }
+        } else if (b0 == 0 && b1 == 0 && b2 == (byte)0xFE && b3 == (byte)0xFF) {
+            bomCharset = "UTF-32BE";
+            bomLeft = 4;
+        }
+    }
+
+    if (bomCharset != null) {
+        charsetName = bomCharset;
+        byteData.position(byteData.position() + bomLeft); // skip BOM
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // decode as UTF-8 (or BOM detected)
+        Charset cs = Charset.forName(defaultCharset);
+        if (charsetName != null) {
+            cs = Charset.forName(charsetName);
+        }
+        docData = cs.decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(cs.name())) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
+                if (bomCharset != null && bomLeft != -1)
+                    byteData.position(byteData.position() + bomLeft); // skip BOM again if present
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+    // Not needed, BOM already handled, remove further special case
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName); // set doc charset to actual used
     }
     return doc;
 }
\ No newline at end of file
