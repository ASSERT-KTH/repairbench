diff --git a/tmp/a7dc500a-1717-44ef-b933-2723f94dbfcf_buggy.java b/tmp/5d2340b7-39f6-4bcd-b521-23c491722126_fixed.java
index 25ca093..9539e87 100644
--- a/tmp/a7dc500a-1717-44ef-b933-2723f94dbfcf_buggy.java
+++ b/tmp/5d2340b7-39f6-4bcd-b521-23c491722126_fixed.java
@@ -1,52 +1,188 @@
     // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
 
-        // look for BOM - overrides any other header or input
+        // examine for BOM
+        String bomCharset = null;
+        int[] bomBytes = new int[] { 0xEF, 0xBB, 0xBF,     // UTF-8
+                                     0xFE, 0xFF,           // UTF-16BE
+                                     0xFF, 0xFE,           // UTF-16LE
+                                     0x00, 0x00, 0xFE, 0xFF,   // UTF-32BE
+                                     0xFF, 0xFE, 0x00, 0x00    // UTF-32LE
+        };
+        //  UTF-8     EF BB BF
+        //  UTF-16BE  FE FF
+        //  UTF-16LE  FF FE
+        //  UTF-32BE  00 00 FE FF
+        //  UTF-32LE  FF FE 00 00
+        final int remaining = byteData.remaining();
+        byteData.mark();
+
+        if (remaining >= 4) {
+            int b0 = byteData.get() & 0xFF;
+            int b1 = byteData.get() & 0xFF;
+            int b2 = byteData.get() & 0xFF;
+            int b3 = byteData.get() & 0xFF;
+
+            if (b0 == 0x00 && b1 == 0x00 && b2 == 0xFE && b3 == 0xFF) {
+                bomCharset = "UTF-32BE";
+            } else if (b0 == 0xFF && b1 == 0xFE && b2 == 0x00 && b3 == 0x00) {
+                bomCharset = "UTF-32LE";
+            } else if (b0 == 0xEF && b1 == 0xBB && b2 == 0xBF) {
+                // UTF-8 BOM, but don't move position forward for b3
+                bomCharset = "UTF-8";
+                byteData.reset();
+                byteData.position(byteData.position() + 3);
+            } else if (b0 == 0xFE && b1 == 0xFF) {
+                bomCharset = "UTF-16BE";
+                byteData.reset();
+                byteData.position(byteData.position() + 2);
+            } else if (b0 == 0xFF && b1 == 0xFE) {
+                bomCharset = "UTF-16LE";
+                byteData.reset();
+                byteData.position(byteData.position() + 2);
+            } else {
+                byteData.reset();
+            }
+            if (bomCharset == null) {
+                // also check for UTF-8 BOM (less than 4 bytes)
+                if (b0 == 0xEF && b1 == 0xBB && b2 == 0xBF) {
+                    bomCharset = "UTF-8";
+                    byteData.reset();
+                    byteData.position(byteData.position() + 3);
+                } else if (b0 == 0xFE && b1 == 0xFF) {
+                    bomCharset = "UTF-16BE";
+                    byteData.reset();
+                    byteData.position(byteData.position() + 2);
+                } else if (b0 == 0xFF && b1 == 0xFE) {
+                    bomCharset = "UTF-16LE";
+                    byteData.reset();
+                    byteData.position(byteData.position() + 2);
+                } else {
+                    byteData.reset();
+                }
+            }
+        } else if (remaining >= 3) {
+            int b0 = byteData.get() & 0xFF;
+            int b1 = byteData.get() & 0xFF;
+            int b2 = byteData.get() & 0xFF;
+            if (b0 == 0xEF && b1 == 0xBB && b2 == 0xBF) {
+                bomCharset = "UTF-8";
+                byteData.reset();
+                byteData.position(byteData.position() + 3);
+            } else {
+                byteData.reset();
+            }
+        } else if (remaining >= 2) {
+            int b0 = byteData.get() & 0xFF;
+            int b1 = byteData.get() & 0xFF;
+
+            if (b0 == 0xFE && b1 == 0xFF) {
+                bomCharset = "UTF-16BE";
+                byteData.reset();
+                byteData.position(byteData.position() + 2);
+            } else if (b0 == 0xFF && b1 == 0xFE) {
+                bomCharset = "UTF-16LE";
+                byteData.reset();
+                byteData.position(byteData.position() + 2);
+            } else {
+                byteData.reset();
+            }
+        } else {
+            byteData.reset();
+        }
+
+        if (bomCharset != null) {
+            charsetName = bomCharset;
+        }
 
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
+                    // re-read BOM on rewind
+                    // skip BOM bytes if present for new charset
+                    if (bomCharset != null) {
+                        if (bomCharset.equalsIgnoreCase("UTF-8")) {
+                            if (byteData.remaining() >= 3) {
+                                int b0 = byteData.get() & 0xFF;
+                                int b1 = byteData.get() & 0xFF;
+                                int b2 = byteData.get() & 0xFF;
+                                if (b0 != 0xEF || b1 != 0xBB || b2 != 0xBF)
+                                    byteData.position(0); // Not a BOM
+                            }
+                        } else if (bomCharset.equalsIgnoreCase("UTF-16BE")) {
+                            if (byteData.remaining() >= 2) {
+                                int b0 = byteData.get() & 0xFF;
+                                int b1 = byteData.get() & 0xFF;
+                                if (b0 != 0xFE || b1 != 0xFF)
+                                    byteData.position(0); // Not a BOM
+                            }
+                        } else if (bomCharset.equalsIgnoreCase("UTF-16LE")) {
+                            if (byteData.remaining() >= 2) {
+                                int b0 = byteData.get() & 0xFF;
+                                int b1 = byteData.get() & 0xFF;
+                                if (b0 != 0xFF || b1 != 0xFE)
+                                    byteData.position(0); // Not a BOM
+                            }
+                        } else if (bomCharset.equalsIgnoreCase("UTF-32BE")) {
+                            if (byteData.remaining() >= 4) {
+                                int b0 = byteData.get() & 0xFF;
+                                int b1 = byteData.get() & 0xFF;
+                                int b2 = byteData.get() & 0xFF;
+                                int b3 = byteData.get() & 0xFF;
+                                if (b0 != 0x00 || b1 != 0x00 || b2 != 0xFE || b3 != 0xFF)
+                                    byteData.position(0); // Not a BOM
+                            }
+                        } else if (bomCharset.equalsIgnoreCase("UTF-32LE")) {
+                            if (byteData.remaining() >= 4) {
+                                int b0 = byteData.get() & 0xFF;
+                                int b1 = byteData.get() & 0xFF;
+                                int b2 = byteData.get() & 0xFF;
+                                int b3 = byteData.get() & 0xFF;
+                                if (b0 != 0xFF || b1 != 0xFE || b2 != 0x00 || b3 != 0x00)
+                                    byteData.position(0); // Not a BOM
+                            }
+                        }
+                    }
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
+        
         if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            // Should not really happen after BOM detection, but clean up just in case
             docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
         }
+
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
\ No newline at end of file
