diff --git a/tmp/3d0abe5e-0ff3-4475-8fde-da2b7640c126_buggy.java b/tmp/71bfc69c-0422-4965-b2bf-1ecef6187ade_fixed.java
index 25ca093..6ced7d4 100644
--- a/tmp/3d0abe5e-0ff3-4475-8fde-da2b7640c126_buggy.java
+++ b/tmp/71bfc69c-0422-4965-b2bf-1ecef6187ade_fixed.java
@@ -1,52 +1,106 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM, and use that to override charset if present
+    String bomCharset = null;
+    int[] bom = new int[] { 
+        0x00, 0x00, 0xFE, 0xFF, // UTF-32, big-endian BOM
+        0xFF, 0xFE, 0x00, 0x00, // UTF-32, little-endian BOM
+        0xFE, 0xFF,             // UTF-16, big-endian BOM
+        0xFF, 0xFE,             // UTF-16, little-endian BOM
+        0xEF, 0xBB, 0xBF        // UTF-8 BOM
+    };
 
+    // Save current buffer position so that we don't lose where we're at
+    byteData.mark();
+
+    // Detect BOM - check the first 4 bytes for known BOMs
+    if (byteData.remaining() >= 4) {
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        byte b3 = byteData.get();
+        byte b4 = byteData.get();
+        if ((b1 == (byte)0x00 && b2 == (byte)0x00 && b3 == (byte)0xFE && b4 == (byte)0xFF)) {
+            bomCharset = "UTF-32BE";
+        } else if ((b1 == (byte)0xFF && b2 == (byte)0xFE && b3 == (byte)0x00 && b4 == (byte)0x00)) {
+            bomCharset = "UTF-32LE";
+        }
+        byteData.reset();
+    }
+    if (bomCharset == null && byteData.remaining() >= 3) {
+        byteData.mark();
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        byte b3 = byteData.get();
+        if ((b1 == (byte)0xEF && b2 == (byte)0xBB && b3 == (byte)0xBF)) {
+            bomCharset = "UTF-8";
+        }
+        byteData.reset();
+    }
+    if (bomCharset == null && byteData.remaining() >= 2) {
+        byteData.mark();
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        if ((b1 == (byte)0xFE && b2 == (byte)0xFF)) {
+            bomCharset = "UTF-16BE";
+        } else if ((b1 == (byte)0xFF && b2 == (byte)0xFE)) {
+            bomCharset = "UTF-16LE";
+        }
+        byteData.reset();
+    }
+
+    if (bomCharset != null) {
+        charsetName = bomCharset;
+    }
+
+    // Decode using BOM if present, else by meta, else specified charset
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else { // specified by BOM or content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        byteData.rewind();
+        // For UTF-8, UTF-16, and UTF-32, if BOM present, strip it after decode
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        if (docData.length() > 0) {
+            if (charsetName.equalsIgnoreCase("UTF-8") && docData.charAt(0) == '\uFEFF') {
+                docData = docData.substring(1);
+            } else if ((charsetName.equalsIgnoreCase("UTF-16LE") || charsetName.equalsIgnoreCase("UTF-16BE")) && docData.charAt(0) == '\uFEFF') {
+                docData = docData.substring(1);
+            } else if ((charsetName.equalsIgnoreCase("UTF-32LE") || charsetName.equalsIgnoreCase("UTF-32BE")) && docData.charAt(0) == '\uFEFF') {
                 docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
             }
+        }
+    }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
     }
     return doc;
 }
\ No newline at end of file
