diff --git a/tmp/12de720c-a483-4904-a50b-631e050ca320_buggy.java b/tmp/9cd7d4a7-2242-4d14-b4a6-85069ec1ac82_fixed.java
index 25ca093..1b083cc 100644
--- a/tmp/12de720c-a483-4904-a50b-631e050ca320_buggy.java
+++ b/tmp/9cd7d4a7-2242-4d14-b4a6-85069ec1ac82_fixed.java
@@ -1,52 +1,124 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Detect and handle BOM (Byte Order Mark)
+    String bomCharset = null;
+    int bomLength = 0;
+    byteData.mark();
+    if (byteData.remaining() >= 4) {
+        byte b0 = byteData.get();
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        byte b3 = byteData.get();
+        // UTF-32, big-endian BOM 00 00 FE FF
+        if (b0 == 0x00 && b1 == 0x00 && b2 == (byte)0xFE && b3 == (byte)0xFF) {
+            bomCharset = "UTF-32BE";
+            bomLength = 4;
+        }
+        // UTF-32, little-endian BOM FF FE 00 00
+        else if (b0 == (byte)0xFF && b1 == (byte)0xFE && b2 == 0x00 && b3 == 0x00) {
+            bomCharset = "UTF-32LE";
+            bomLength = 4;
+        }
+        // UTF-16, big-endian BOM FE FF
+        else if (b0 == (byte)0xFE && b1 == (byte)0xFF) {
+            bomCharset = "UTF-16BE";
+            bomLength = 2;
+            byteData.position(byteData.position() - 2);
+        }
+        // UTF-16, little-endian BOM FF FE
+        else if (b0 == (byte)0xFF && b1 == (byte)0xFE) {
+            bomCharset = "UTF-16LE";
+            bomLength = 2;
+            byteData.position(byteData.position() - 2);
+        }
+        // UTF-8 BOM EF BB BF
+        else if (b0 == (byte)0xEF && b1 == (byte)0xBB && b2 == (byte)0xBF) {
+            bomCharset = "UTF-8";
+            bomLength = 3;
+        }
+        // Reset if no BOM found
+        else {
+            byteData.reset();
+        }
+        // If we detected BOM in first 2 or 3 bytes
+        if (bomLength > 0) {
+            byteData.reset();
+            byteData.position(byteData.position() + bomLength);
+            charsetName = bomCharset;
+        }
+    } else if (byteData.remaining() >= 2) {
+        byteData.mark();
+        byte b0 = byteData.get();
+        byte b1 = byteData.get();
+        if (b0 == (byte)0xFE && b1 == (byte)0xFF) {
+            bomCharset = "UTF-16BE";
+            bomLength = 2;
+        } else if (b0 == (byte)0xFF && b1 == (byte)0xFE) {
+            bomCharset = "UTF-16LE";
+            bomLength = 2;
+        }
+        if (bomLength > 0) {
+            byteData.reset();
+            byteData.position(byteData.position() + bomLength);
+            charsetName = bomCharset;
+        } else {
+            byteData.reset();
+        }
+    } else {
+        byteData.reset();
+    }
 
+    // continue as before, or as with possible BOM-overridden charsetName
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        docData = Charset.forName(defaultCharset).decode(byteData.asReadOnlyBuffer()).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+                // if original BOM present, skip its bytes again (for meta detected charset)
+                if (bomLength > 0) {
+                    byteData.position(bomLength);
+                }
+                docData = Charset.forName(foundCharset).decode(byteData.asReadOnlyBuffer()).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
+        // If we have a BOM, skip its bytes
+        if (bomLength > 0) {
+            byteData.position(bomLength);
         }
+        docData = Charset.forName(charsetName).decode(byteData.asReadOnlyBuffer()).toString();
+    }
+
+    // Remove a leftover BOM character if present in decoded string
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
     }
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
