diff --git a/tmp/5dbdff98-a3ce-49b3-8e9e-92e7f996572e_buggy.java b/tmp/e8468f13-919d-45a8-bbbd-693923f1b51d_fixed.java
index 25ca093..5ebda83 100644
--- a/tmp/5dbdff98-a3ce-49b3-8e9e-92e7f996572e_buggy.java
+++ b/tmp/e8468f13-919d-45a8-bbbd-693923f1b51d_fixed.java
@@ -1,52 +1,92 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // BOM detection
+    byte[] bom = new byte[4];
+    int bomLength = 0;
+    String bomCharset = null;
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    // Mark position
+    byteData.mark();
+
+    int len = Math.min(byteData.remaining(), 4);
+    for (int i = 0; i < len; i++) {
+        bom[i] = byteData.get();
+        bomLength++;
+    }
+
+    // Detect UTF BOMs
+    if (bomLength >= 3 && (bom[0] & 0xFF) == 0xEF && (bom[1] & 0xFF) == 0xBB && (bom[2] & 0xFF) == 0xBF) {
+        bomCharset = "UTF-8";
+        bomLength = 3;
+    } else if (bomLength >= 2 && (bom[0] & 0xFF) == 0xFE && (bom[1] & 0xFF) == 0xFF) {
+        bomCharset = "UTF-16BE";
+        bomLength = 2;
+    } else if (bomLength >= 2 && (bom[0] & 0xFF) == 0xFF && (bom[1] & 0xFF) == 0xFE) {
+        if (bomLength >= 4 && (bom[2] & 0xFF) == 0x00 && (bom[3] & 0xFF) == 0x00) {
+            bomCharset = "UTF-32LE";
+            bomLength = 4;
+        } else {
+            bomCharset = "UTF-16LE";
+            bomLength = 2;
+        }
+    } else if (bomLength >= 4 && (bom[0] & 0xFF) == 0x00 && (bom[1] & 0xFF) == 0x00
+            && (bom[2] & 0xFF) == 0xFE && (bom[3] & 0xFF) == 0xFF) {
+        bomCharset = "UTF-32BE";
+        bomLength = 4;
+    }
+
+    // Reset the position to after BOM (if any), or start
+    int bomEnd = (bomCharset != null) ? bomLength : 0;
+    byteData.reset();
+    byteData.position(byteData.position() + bomEnd);
+
+    // If BOM found, it overrides other charsetName
+    if (bomCharset != null) {
+        charsetName = bomCharset;
+    }
+
+    if (charsetName == null) { // determine from meta. safe parse as defaultCharset
+        docData = Charset.forName(defaultCharset).decode(byteData.asReadOnlyBuffer()).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) { // if not found, will keep defaultCharset as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+                if (bomEnd > 0) byteData.position(byteData.position() + bomEnd);
+                docData = Charset.forName(foundCharset).decode(byteData.asReadOnlyBuffer()).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
+        docData = Charset.forName(charsetName).decode(byteData.asReadOnlyBuffer()).toString();
     }
+    // in case of remaining BOM in string, remove it
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
     }
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
