diff --git a/tmp/a62e52b3-9b9f-4910-9de3-0759dcd782f7_buggy.java b/tmp/004a85f0-82a2-4163-9c42-c92db0710dde_fixed.java
index 86553f4..6fc3cef 100644
--- a/tmp/a62e52b3-9b9f-4910-9de3-0759dcd782f7_buggy.java
+++ b/tmp/004a85f0-82a2-4163-9c42-c92db0710dde_fixed.java
@@ -1,57 +1,91 @@
 /**
  * Since this pass reports errors only when a global {@code this} keyword
  * is encountered, there is no reason to traverse non global contexts.
  */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
   if (n.getType() == Token.FUNCTION) {
     // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
+    // or @override or @interface annotation.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc != null &&
         (jsDoc.isConstructor() ||
+         jsDoc.isInterface() ||
          jsDoc.hasThisType() ||
          jsDoc.isOverride())) {
       return false;
     }
 
     // Don't traverse functions unless they would normally
     // be able to have a @this annotation associated with them. e.g.,
     // var a = function() { }; // or
     // function a() {} // or
     // a.x = function() {};
     int pType = parent.getType();
     if (!(pType == Token.BLOCK ||
           pType == Token.SCRIPT ||
           pType == Token.NAME ||
           pType == Token.ASSIGN)) {
       return false;
     }
+
+    // Special case for prototype assignments:
+    // If parent is ASSIGN, check if LHS is a prototype property assignment,
+    // only skip if it's an exact assignment to "prototype" (not subproperty).
+    if (parent != null && parent.getType() == Token.ASSIGN) {
+      Node lhs = parent.getFirstChild();
+      // Only skip traversing the function if lhs is exactly "a.prototype.b",
+      // not if it's a property of prototype (like a.prototype.b.c)
+      if (lhs.getType() == Token.GETPROP) {
+        Node target = lhs;
+        boolean isPrototypeAssignment = false;
+        // Check if assigning directly to a property of "prototype"
+        if (target.getChildCount() == 3) {
+          // a.prototype.b  ==> GETPROP(GETPROP(NAME(a), STRING("prototype")), STRING("b"))
+          Node maybePrototype = target.getFirstChild().getNext();
+          if (maybePrototype != null &&
+              maybePrototype.isString() &&
+              maybePrototype.getString().equals("prototype")) {
+            isPrototypeAssignment = true;
+          }
+        } else if (target.getChildCount() == 2) {
+          // a.prototype  ==> GETPROP(NAME(a), STRING("prototype"))
+          Node last = target.getLastChild();
+          if (last.isString() && last.getString().equals("prototype")) {
+            isPrototypeAssignment = true;
+          }
+        }
+        if (isPrototypeAssignment) {
+          return true; // traverse function assigned to prototype property
+        }
+      }
+    }
   }
 
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
     Node rhs = lhs.getNext();
 
     if (n == lhs) {
       // Always traverse the left side of the assignment. To handle
       // nested assignments properly (e.g., (a = this).property = c;),
       // assignLhsChild should not be overridden.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
       // Only traverse the right side if it's not an assignment to a prototype
       // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+      // Fix: Only skip traversing if assigning directly to a prototype,
+      // NOT if it's a property of prototype or a property of a property of prototype, etc.
+      if (lhs.getType() == Token.GETPROP) {
+        Node propNode = lhs.getLastChild();
+        if (propNode.isString() && propNode.getString().equals("prototype")) {
           return false;
         }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
-            return false;
       }
     }
   }
 
   return true;
 }
\ No newline at end of file
