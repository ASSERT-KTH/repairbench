diff --git a/tmp/ddc24a73-9c98-45d8-94e9-d5ac762b3e29_buggy.java b/tmp/ec17e830-93e4-464a-8089-19177bc8de73_fixed.java
index 86553f4..20bd28b 100644
--- a/tmp/ddc24a73-9c98-45d8-94e9-d5ac762b3e29_buggy.java
+++ b/tmp/ec17e830-93e4-464a-8089-19177bc8de73_fixed.java
@@ -1,57 +1,58 @@
 /**
  * Since this pass reports errors only when a global {@code this} keyword
  * is encountered, there is no reason to traverse non global contexts.
  */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
   if (n.getType() == Token.FUNCTION) {
     // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
+    // or @override or @interface annotation.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc != null &&
         (jsDoc.isConstructor() ||
          jsDoc.hasThisType() ||
-           jsDoc.isOverride())) {
+         jsDoc.isOverride() ||
+         jsDoc.isInterface())) {
       return false;
     }
 
     // Don't traverse functions unless they would normally
     // be able to have a @this annotation associated with them. e.g.,
     // var a = function() { }; // or
     // function a() {} // or
     // a.x = function() {};
     int pType = parent.getType();
     if (!(pType == Token.BLOCK ||
           pType == Token.SCRIPT ||
           pType == Token.NAME ||
           pType == Token.ASSIGN)) {
       return false;
     }
   }
 
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
     Node rhs = lhs.getNext();
 
     if (n == lhs) {
       // Always traverse the left side of the assignment. To handle
       // nested assignments properly (e.g., (a = this).property = c;),
       // assignLhsChild should not be overridden.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
       // Only traverse the right side if it's not an assignment to a prototype
       // property or subproperty.
+      // Bug fix: Only block traversal when *direct* assignment to .prototype, not subprops.
       if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
-            return false;
-          }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
+          "prototype".equals(lhs.getLastChild().getString()) &&
+          lhs.getChildCount() == 2) {
+        // block for direct assignment to a.prototype = ...
         return false;
       }
     }
   }
 
   return true;
 }
\ No newline at end of file
