diff --git a/tmp/d664a3f7-783e-4366-a298-e5e7ee15bacb_buggy.java b/tmp/8454380c-1ea0-4e92-b95d-3cd1d9ccd60b_fixed.java
index 86553f4..6ee4e92 100644
--- a/tmp/d664a3f7-783e-4366-a298-e5e7ee15bacb_buggy.java
+++ b/tmp/8454380c-1ea0-4e92-b95d-3cd1d9ccd60b_fixed.java
@@ -1,57 +1,88 @@
   /**
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
     if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
+      // Don't traverse functions that are constructors, interfaces or have the @this, @interface,
       // or @override annotation.
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
            jsDoc.hasThisType() ||
-           jsDoc.isOverride())) {
+           jsDoc.isOverride() ||
+           jsDoc.isInterface())) {
         return false;
       }
 
       // Don't traverse functions unless they would normally
       // be able to have a @this annotation associated with them. e.g.,
       // var a = function() { }; // or
       // function a() {} // or
       // a.x = function() {};
       int pType = parent.getType();
       if (!(pType == Token.BLOCK ||
             pType == Token.SCRIPT ||
             pType == Token.NAME ||
             pType == Token.ASSIGN)) {
         return false;
       }
+
+      // Don't traverse functions assigned to prototype subproperties (e.g. a.prototype.b.c = ...)
+      if (parent != null && parent.getType() == Token.ASSIGN) {
+        Node lhs = parent.getFirstChild();
+        if (lhs.getType() == Token.GETPROP) {
+          // If the assigned property chain contains .prototype. (not just ends with .prototype), do not traverse
+          String qName = lhs.getQualifiedName();
+          if (qName != null && qName.contains(".prototype.")) {
+            return false;
+          }
+          // Also handle computed property (e.g., a.prototype['x' + 'y'])
+          Node obj = lhs;
+          while (obj.getType() == Token.GETPROP || obj.getType() == Token.GETELEM) {
+            if (obj.getType() == Token.GETPROP) {
+              if ("prototype".equals(obj.getLastChild().getString()) && obj != lhs) {
+                return false;
+              }
+            }
+            obj = obj.getFirstChild();
+          }
+        }
+      }
     }
 
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
 
       if (n == lhs) {
         // Always traverse the left side of the assignment. To handle
         // nested assignments properly (e.g., (a = this).property = c;),
         // assignLhsChild should not be overridden.
         if (assignLhsChild == null) {
           assignLhsChild = lhs;
         }
       } else {
         // Only traverse the right side if it's not an assignment to a prototype
         // property or subproperty.
         if (lhs.getType() == Token.GETPROP &&
             lhs.getLastChild().getString().equals("prototype")) {
           return false;
         }
         if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
           return false;
         }
+        // For computed property assignments: do not traverse if a.prototype[...]
+        if (lhs.getType() == Token.GETELEM) {
+          Node obj = lhs.getFirstChild();
+          if (obj != null && obj.getType() == Token.GETPROP &&
+              "prototype".equals(obj.getLastChild().getString())) {
+            return false;
+          }
+        }
       }
     }
 
     return true;
   }
\ No newline at end of file
