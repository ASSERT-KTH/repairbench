diff --git a/tmp/6427fa17-c271-493e-ae2b-72638d778845_buggy.java b/tmp/87c20ba1-c841-4918-bbd7-81b7d3dd3e82_fixed.java
index 56b2d66..fff23d1 100644
--- a/tmp/6427fa17-c271-493e-ae2b-72638d778845_buggy.java
+++ b/tmp/87c20ba1-c841-4918-bbd7-81b7d3dd3e82_fixed.java
@@ -1,45 +1,49 @@
 /**
  * Removes the phase 1 objective function, positive cost non-artificial variables,
  * and the non-basic artificial variables from this tableau.
  */
 protected void dropPhase1Objective() {
     if (getNumObjectiveFunctions() == 1) {
         return;
     }
 
     List<Integer> columnsToDrop = new ArrayList<Integer>();
     columnsToDrop.add(0);
 
-        // positive cost non-artificial variables
+    // positive cost non-artificial variables (skip dropping original variables!)
+    int origVars = getOriginalNumDecisionVariables();
     for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
+        // Only drop slack and surplus variables, NOT original decision variables
+        if (i >= origVars) {
             final double entry = tableau.getEntry(0, i);
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 columnsToDrop.add(i);
             }
         }
+    }
 
     // non-basic artificial variables
     for (int i = 0; i < getNumArtificialVariables(); i++) {
       int col = i + getArtificialVariableOffset();
       if (getBasicRow(col) == null) {
         columnsToDrop.add(col);
       }
     }
 
     double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
     for (int i = 1; i < getHeight(); i++) {
       int col = 0;
       for (int j = 0; j < getWidth(); j++) {
         if (!columnsToDrop.contains(j)) {
           matrix[i - 1][col++] = tableau.getEntry(i, j);
         }
       }
     }
 
     for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
       columnLabels.remove((int) columnsToDrop.get(i));
     }
 
     this.tableau = new Array2DRowRealMatrix(matrix);
     this.numArtificialVariables = 0;
 }
\ No newline at end of file
