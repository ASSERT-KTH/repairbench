diff --git a/tmp/8f6a0321-8420-43b3-8b21-b87acea2ba62_buggy.java b/tmp/b3deaaa4-0f9c-43c9-98e0-b757362c1c9d_fixed.java
index 49a5702..073152a 100644
--- a/tmp/8f6a0321-8420-43b3-8b21-b87acea2ba62_buggy.java
+++ b/tmp/b3deaaa4-0f9c-43c9-98e0-b757362c1c9d_fixed.java
@@ -1,66 +1,87 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
   // VOID nodes appear when there are extra semicolons at the BLOCK level.
   // I've been unable to think of any cases where this indicates a bug,
   // and apparently some people like keeping these semicolons around,
   // so we'll allow it.
   if (n.isEmpty() ||
       n.isComma()) {
     return;
   }
 
   if (parent == null) {
     return;
   }
 
   // Do not try to remove a block or an expr result. We already handle
   // these cases when we visit the child, and the peephole passes will
   // fix up the tree in more clever ways when these are removed.
   if (n.isExprResult()) {
     return;
   }
 
   // This no-op statement was there so that JSDoc information could
   // be attached to the name. This check should not complain about it.
   if (n.isQualifiedName() && n.getJSDocInfo() != null) {
     return;
   }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
+  // Revised logic to ensure we properly warn on useless code in all situations (esp. inside COMMA nodes).
   if (parent.getType() == Token.COMMA) {
+    // For all children EXCEPT the last child, always check.
+    if (n != parent.getLastChild()) {
+      // Continue to warning logic unless the result is used (extracted), in which case skip.
       if (isResultUsed) {
         return;
       }
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+    } else {
+      // For the last child, only warn if the result is not used and its value is not used higher up.
+      boolean lastIsExprResult = false;
+      Node ancestor = parent.getParent();
+      while (ancestor != null) {
+        int ancestorType = ancestor.getType();
+        if (ancestorType == Token.COMMA) {
+          ancestor = ancestor.getParent();
+          continue;
+        }
+        if (ancestorType == Token.EXPR_RESULT || ancestorType == Token.BLOCK) {
+          lastIsExprResult = true;
+        }
+        break;
+      }
+      if (lastIsExprResult) {
+        // do not warn or process the last child in an expression statement or block
+        return;
       }
     }
   } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+    // Treat child of FOR initializers/updates as expressions
+    if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4 &&
+          (n == parent.getFirstChild() ||
+           n == parent.getFirstChild().getNext().getNext()))) {
       return;
     }
   }
+
   if (
       (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
       msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
           "' operator is not being used.";
     }
 
     t.getCompiler().report(
         t.makeError(n, level, USELESS_CODE_ERROR, msg));
     // TODO(johnlenz): determine if it is necessary to
     // try to protect side-effect free statements as well.
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
 }
\ No newline at end of file
