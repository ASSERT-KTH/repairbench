diff --git a/tmp/52652ab6-d94a-471f-b9ff-feb4667a8f22_buggy.java b/tmp/e57b9306-9859-4630-a603-2619d44d69f0_fixed.java
index 49a5702..983a567 100644
--- a/tmp/52652ab6-d94a-471f-b9ff-feb4667a8f22_buggy.java
+++ b/tmp/e57b9306-9859-4630-a603-2619d44d69f0_fixed.java
@@ -1,66 +1,91 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
   // VOID nodes appear when there are extra semicolons at the BLOCK level.
   // I've been unable to think of any cases where this indicates a bug,
   // and apparently some people like keeping these semicolons around,
   // so we'll allow it.
   if (n.isEmpty() ||
       n.isComma()) {
     return;
   }
 
   if (parent == null) {
     return;
   }
 
   // Do not try to remove a block or an expr result. We already handle
   // these cases when we visit the child, and the peephole passes will
   // fix up the tree in more clever ways when these are removed.
   if (n.isExprResult()) {
     return;
   }
 
   // This no-op statement was there so that JSDoc information could
   // be attached to the name. This check should not complain about it.
   if (n.isQualifiedName() && n.getJSDocInfo() != null) {
     return;
   }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
+  // Handle comma; we want to warn on useless code in comma expressions specifically
   if (parent.getType() == Token.COMMA) {
-      if (isResultUsed) {
+    // Only want to warn about *non*-last children if they are useless
+    if (n != parent.getLastChild()) {
+      if (!isResultUsed) {
+        if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+          String msg = "This code lacks side-effects. Is there a bug?";
+          if (n.isString()) {
+            msg = "Is there a missing '+' on the previous line?";
+          } else if (isSimpleOp) {
+            msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
+                "' operator is not being used.";
+          }
+  
+          t.getCompiler().report(
+              t.makeError(n, level, USELESS_CODE_ERROR, msg));
+          // Try to protect side-effect free expressions that are not statements
+          if (!NodeUtil.isStatement(n)) {
+            problemNodes.add(n);
+          }
+        }
+      }
       return;
+    } else {
+      // Last child of comma: handle as in other code
+      // Only warn if we're in a BLOCK or EXPR_RESULT
+      Node ancestor = parent;
+      while (ancestor != null &&
+             (ancestor.getType() == Token.COMMA || ancestor.getType() == Token.EXPR_RESULT)) {
+        ancestor = ancestor.getParent();
       }
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+      if (ancestor == null || ancestor.getType() != Token.BLOCK) {
+        return;
       }
     }
   } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+    // Do not warn for expressions in other contexts, except for initializers in for loops
+    if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4 &&
+        (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
       return;
     }
   }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+
+  if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
       msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
           "' operator is not being used.";
     }
 
     t.getCompiler().report(
         t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
+    // Try to protect side-effect free expressions that are not statements
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
 }
\ No newline at end of file
