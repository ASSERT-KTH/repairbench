diff --git a/tmp/6be577cf-2109-4741-851b-3a3d8ead3191_buggy.java b/tmp/a2912c19-b0e2-4007-bb8f-67b97d9da9d8_fixed.java
index 49a5702..cacf465 100644
--- a/tmp/6be577cf-2109-4741-851b-3a3d8ead3191_buggy.java
+++ b/tmp/a2912c19-b0e2-4007-bb8f-67b97d9da9d8_fixed.java
@@ -1,66 +1,89 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
   // VOID nodes appear when there are extra semicolons at the BLOCK level.
   // I've been unable to think of any cases where this indicates a bug,
   // and apparently some people like keeping these semicolons around,
   // so we'll allow it.
   if (n.isEmpty() ||
       n.isComma()) {
     return;
   }
 
   if (parent == null) {
     return;
   }
 
   // Do not try to remove a block or an expr result. We already handle
   // these cases when we visit the child, and the peephole passes will
   // fix up the tree in more clever ways when these are removed.
   if (n.isExprResult()) {
     return;
   }
 
   // This no-op statement was there so that JSDoc information could
   // be attached to the name. This check should not complain about it.
   if (n.isQualifiedName() && n.getJSDocInfo() != null) {
     return;
   }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
   if (parent.getType() == Token.COMMA) {
-      if (isResultUsed) {
+    if (!isResultUsed) {
+      // Only report for nodes that are not the last child of the top-level
+      // COMMA tree or are inside an EXPR_RESULT/BLOCK, i.e. only signal
+      // for useless code unless part of a valid comma expression.
+      Node top = parent;
+      while (top.getParent() != null && top.getParent().getType() == Token.COMMA) {
+        top = top.getParent();
+      }
+      Node grand = top.getParent();
+      if (n != parent.getLastChild() ||
+          !(grand != null && (grand.getType() == Token.EXPR_RESULT || grand.getType() == Token.BLOCK))) {
+        // Mark code as useless only if it is not the last child of entire comma expression
+        // in an EXPR_RESULT or BLOCK.
+        if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+          String msg = "This code lacks side-effects. Is there a bug?";
+          if (n.isString()) {
+            msg = "Is there a missing '+' on the previous line?";
+          } else if (isSimpleOp) {
+            msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
+                "' operator is not being used.";
+          }
+
+          t.getCompiler().report(
+              t.makeError(n, level, USELESS_CODE_ERROR, msg));
+          if (!NodeUtil.isStatement(n)) {
+            problemNodes.add(n);
+          }
+        }
+      }
+    }
+    // Always return in the COMMA case.
     return;
-      }
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
-        }
-      }
   } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+    if (!(parent.getType() == Token.FOR &&
+          parent.getChildCount() == 4 &&
+          (n == parent.getFirstChild() ||
+           n == parent.getFirstChild().getNext().getNext()))) {
       return;
     }
   }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+
+  if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
       msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
           "' operator is not being used.";
     }
 
     t.getCompiler().report(
         t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
 }
\ No newline at end of file
