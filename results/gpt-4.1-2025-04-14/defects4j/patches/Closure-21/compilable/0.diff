diff --git a/tmp/bc4a7051-90c4-465f-9b4a-1dec9c553bca_buggy.java b/tmp/f53d2eed-ce18-40a6-a1cf-40edc9389ef6_fixed.java
index 49a5702..baccb19 100644
--- a/tmp/bc4a7051-90c4-465f-9b4a-1dec9c553bca_buggy.java
+++ b/tmp/f53d2eed-ce18-40a6-a1cf-40edc9389ef6_fixed.java
@@ -1,66 +1,94 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
   // VOID nodes appear when there are extra semicolons at the BLOCK level.
   // I've been unable to think of any cases where this indicates a bug,
   // and apparently some people like keeping these semicolons around,
   // so we'll allow it.
   if (n.isEmpty() ||
       n.isComma()) {
     return;
   }
 
   if (parent == null) {
     return;
   }
 
   // Do not try to remove a block or an expr result. We already handle
   // these cases when we visit the child, and the peephole passes will
   // fix up the tree in more clever ways when these are removed.
   if (n.isExprResult()) {
     return;
   }
 
   // This no-op statement was there so that JSDoc information could
   // be attached to the name. This check should not complain about it.
   if (n.isQualifiedName() && n.getJSDocInfo() != null) {
     return;
   }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
+
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
+  // Mark nodes that are children of a comma and NOT the last child
+  // as eligible for reporting if they have no side effects.
+  boolean allowUseless = false;
+
   if (parent.getType() == Token.COMMA) {
-      if (isResultUsed) {
-        return;
+    // Only the last element in a COMMA expression might have its value
+    // used. All other elements MUST have side effects.
+    if (n != parent.getLastChild()) {
+      allowUseless = false; // Useless code not allowed here
+    } else {
+      // Last item in the comma chain: its result may or may not be used
+      // depending on further ancestry.
+      Node ancestor = parent;
+      while (ancestor.getParent() != null && ancestor.getParent().getType() == Token.COMMA) {
+        ancestor = ancestor.getParent();
       }
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+      Node commaRootParent = ancestor.getParent();
+      if (commaRootParent != null &&
+          (commaRootParent.getType() == Token.EXPR_RESULT || commaRootParent.getType() == Token.BLOCK)) {
+        allowUseless = true; // The result here is not used; useless code allowed
+      } else if (commaRootParent != null && commaRootParent.getType() == Token.FOR) {
+        // Special handling for FOR-loop: For initialization or increment expressions.
+        int index = commaRootParent.getIndexOfChild(ancestor);
+        if (index == 0 || index == 2) {
+          allowUseless = true;
         }
+      } else {
+        allowUseless = false;
       }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
-        return;
     }
+  } else if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.BLOCK) {
+    allowUseless = true;
+  } else if (parent.getType() == Token.FOR) {
+    // For initializer or increment
+    int idx = parent.getIndexOfChild(n);
+    if (idx == 0 || idx == 2) {
+      allowUseless = true;
+    }
+  }
+
+  if (!allowUseless) {
+    return;
   }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+
+  if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
       msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
           "' operator is not being used.";
     }
 
     t.getCompiler().report(
         t.makeError(n, level, USELESS_CODE_ERROR, msg));
     // TODO(johnlenz): determine if it is necessary to
     // try to protect side-effect free statements as well.
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
 }
\ No newline at end of file
