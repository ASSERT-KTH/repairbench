diff --git a/tmp/a0263a14-0707-4c23-98f0-3c02ff88258e_buggy.java b/tmp/6ed2cf9f-fe6e-4b34-89ba-580d1538a531_fixed.java
index 0e110fe..0a7e3c2 100644
--- a/tmp/a0263a14-0707-4c23-98f0-3c02ff88258e_buggy.java
+++ b/tmp/6ed2cf9f-fe6e-4b34-89ba-580d1538a531_fixed.java
@@ -1,96 +1,125 @@
-  /** Build the rotation that transforms a pair of vector into another pair.
-
+  /**
+   * Build the rotation that transforms a pair of vector into another pair.
+   *
    * <p>Except for possible scale factors, if the instance were applied to
    * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair
    * (v<sub>1</sub>, v<sub>2</sub>).</p>
-
+   *
    * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
    * not the same as the angular separation between v<sub>1</sub> and
    * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than
    * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,
    * v<sub>2</sub>) plane.</p>
-
+   *
    * @param u1 first vector of the origin pair
    * @param u2 second vector of the origin pair
    * @param v1 desired image of u1 by the rotation
    * @param v2 desired image of u2 by the rotation
    * @exception IllegalArgumentException if the norm of one of the vectors is zero
    */
   public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
 
       // norms computation
       double u1u1 = u1.getNormSq();
       double u2u2 = u2.getNormSq();
       double v1v1 = v1.getNormSq();
       double v2v2 = v2.getNormSq();
       if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
           throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
       }
 
-  // normalize v1 in order to have (v1'|v1') = (u1|u1)
-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
+      // normalize u1 and v1 to unit vectors
+      Vector3D u1Unit = u1.normalize();
+      Vector3D u2Unit = u2.subtract(u1.scalarMultiply(u1.dotProduct(u2) / u1u1)).normalize();
 
-  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
-  double u1u2   = u1.dotProduct(u2);
-  double v1v2   = v1.dotProduct(v2);
-  double coeffU = u1u2 / u1u1;
-  double coeffV = v1v2 / u1u1;
-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
-  double alpha  = coeffU - beta * coeffV;
-  v2 = new Vector3D(alpha, v1, beta, v2);
+      Vector3D v1Unit = v1.normalize();
+      Vector3D v2Proj = v2.subtract(v1.scalarMultiply(v1.dotProduct(v2) / v1v1));
+      if (v2Proj.getNormSq() == 0) {
+          // (v1, v2) are parallel, choose arbitrary orthogonal
+          v2Proj = Vector3D.crossProduct(v1, Vector3D.PLUS_I);
+          if (v2Proj.getNormSq() == 0) {
+              v2Proj = Vector3D.crossProduct(v1, Vector3D.PLUS_J);
+          }
+      }
+      Vector3D v2Unit = v2Proj.normalize();
 
-  // preliminary computation
-  Vector3D uRef  = u1;
-  Vector3D vRef  = v1;
-  Vector3D v1Su1 = v1.subtract(u1);
-  Vector3D v2Su2 = v2.subtract(u2);
-  Vector3D k     = v1Su1.crossProduct(v2Su2);
-  Vector3D u3    = u1.crossProduct(u2);
-  double c       = k.dotProduct(u3);
-  if (c == 0) {
-    // the (q1, q2, q3) vector is close to the (u1, u2) plane
-    // we try other vectors
-    Vector3D v3 = Vector3D.crossProduct(v1, v2);
-    Vector3D v3Su3 = v3.subtract(u3);
-    k = v1Su1.crossProduct(v3Su3);
-    Vector3D u2Prime = u1.crossProduct(u3);
-    c = k.dotProduct(u2Prime);
+      // build bases
+      Vector3D u3Unit = Vector3D.crossProduct(u1Unit, u2Unit);
+      Vector3D v3Unit = Vector3D.crossProduct(v1Unit, v2Unit);
 
-    if (c == 0) {
-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
-
-      if (c == 0) {
-        // the (q1, q2, q3) vector is aligned with everything
-        // this is really the identity rotation
+      // Handle special case where the bases are close to being singular
+      double u3Norm = u3Unit.getNorm();
+      double v3Norm = v3Unit.getNorm();
+      if (u3Norm == 0.0 || v3Norm == 0.0) {
+          // fallback to identity
           q0 = 1.0;
           q1 = 0.0;
           q2 = 0.0;
           q3 = 0.0;
           return;
       }
+      u3Unit = u3Unit.scalarMultiply(1.0 / u3Norm);
+      v3Unit = v3Unit.scalarMultiply(1.0 / v3Norm);
 
-      // we will have to use u2 and v2 to compute the scalar part
-      uRef = u2;
-      vRef = v2;
+      // Build the matrix which transforms u basis to v basis
+      double[][] uMat = new double[][] {
+          { u1Unit.getX(), u2Unit.getX(), u3Unit.getX() },
+          { u1Unit.getY(), u2Unit.getY(), u3Unit.getY() },
+          { u1Unit.getZ(), u2Unit.getZ(), u3Unit.getZ() }
+      };
+      double[][] vMat = new double[][] {
+          { v1Unit.getX(), v2Unit.getX(), v3Unit.getX() },
+          { v1Unit.getY(), v2Unit.getY(), v3Unit.getY() },
+          { v1Unit.getZ(), v2Unit.getZ(), v3Unit.getZ() }
+      };
 
+      // Compute the rotation matrix: rM = vMat * uMat^T
+      double[][] rM = new double[3][3];
+      for (int i = 0; i < 3; ++i) {
+          for (int j = 0; j < 3; ++j) {
+              rM[i][j] = 0.0;
+              for (int k = 0; k < 3; ++k) {
+                  rM[i][j] += vMat[i][k] * uMat[j][k];
+              }
           }
-
       }
 
-  // compute the vectorial part
-  c = FastMath.sqrt(c);
-  double inv = 1.0 / (c + c);
-  q1 = inv * k.getX();
-  q2 = inv * k.getY();
-  q3 = inv * k.getZ();
+      // Now convert rotation matrix to quaternion
+      double r00 = rM[0][0];
+      double r11 = rM[1][1];
+      double r22 = rM[2][2];
+      double trace = r00 + r11 + r22;
 
-  // compute the scalar part
-   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
-                    uRef.getZ() * q1 - uRef.getX() * q3,
-                    uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
+      if (trace > 0.0) {
+          double s = FastMath.sqrt(trace + 1.0) * 2.0; // S=4*q0
+          q0 = 0.25 * s;
+          q1 = (rM[2][1] - rM[1][2]) / s;
+          q2 = (rM[0][2] - rM[2][0]) / s;
+          q3 = (rM[1][0] - rM[0][1]) / s;
+      } else if ((r00 > r11) && (r00 > r22)) {
+          double s = FastMath.sqrt(1.0 + r00 - r11 - r22) * 2.0; // S=4*q1
+          q0 = (rM[2][1] - rM[1][2]) / s;
+          q1 = 0.25 * s;
+          q2 = (rM[0][1] + rM[1][0]) / s;
+          q3 = (rM[0][2] + rM[2][0]) / s;
+      } else if (r11 > r22) {
+          double s = FastMath.sqrt(1.0 + r11 - r00 - r22) * 2.0; // S=4*q2
+          q0 = (rM[0][2] - rM[2][0]) / s;
+          q1 = (rM[0][1] + rM[1][0]) / s;
+          q2 = 0.25 * s;
+          q3 = (rM[1][2] + rM[2][1]) / s;
+      } else {
+          double s = FastMath.sqrt(1.0 + r22 - r00 - r11) * 2.0; // S=4*q3
+          q0 = (rM[1][0] - rM[0][1]) / s;
+          q1 = (rM[0][2] + rM[2][0]) / s;
+          q2 = (rM[1][2] + rM[2][1]) / s;
+          q3 = 0.25 * s;
+      }
 
+      // normalize quaternion (defensive, in case of numerical issues)
+      double norm = FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
+      q0 /= norm;
+      q1 /= norm;
+      q2 /= norm;
+      q3 /= norm;
   }
\ No newline at end of file
