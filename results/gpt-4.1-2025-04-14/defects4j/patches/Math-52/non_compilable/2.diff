diff --git a/tmp/b86d4c98-d876-4deb-9dc6-e5c940f35446_buggy.java b/tmp/7fb0bd1b-e532-451d-926f-49520fecac58_fixed.java
index 0e110fe..c4fcbbe 100644
--- a/tmp/b86d4c98-d876-4deb-9dc6-e5c940f35446_buggy.java
+++ b/tmp/7fb0bd1b-e532-451d-926f-49520fecac58_fixed.java
@@ -1,96 +1,128 @@
   /** Build the rotation that transforms a pair of vector into another pair.
 
    * <p>Except for possible scale factors, if the instance were applied to
    * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair
    * (v<sub>1</sub>, v<sub>2</sub>).</p>
 
    * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
    * not the same as the angular separation between v<sub>1</sub> and
    * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than
    * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,
    * v<sub>2</sub>) plane.</p>
 
    * @param u1 first vector of the origin pair
    * @param u2 second vector of the origin pair
    * @param v1 desired image of u1 by the rotation
    * @param v2 desired image of u2 by the rotation
    * @exception IllegalArgumentException if the norm of one of the vectors is zero
    */
   public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
 
     // norms computation
     double u1u1 = u1.getNormSq();
     double u2u2 = u2.getNormSq();
     double v1v1 = v1.getNormSq();
     double v2v2 = v2.getNormSq();
+
     if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
       throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
     }
 
-  // normalize v1 in order to have (v1'|v1') = (u1|u1)
-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
+    // normalize u1, u2, v1, v2
+    Vector3D u1N = u1.normalize();
+    Vector3D v1N = v1.normalize();
+    Vector3D u2Ortho = u2.subtract(u1.scalarMultiply(u1.dotProduct(u2) / u1u1)).normalize();
+    Vector3D v2Ortho = v2.subtract(v1.scalarMultiply(v1.dotProduct(v2) / v1v1)).normalize();
 
-  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
-  double u1u2   = u1.dotProduct(u2);
-  double v1v2   = v1.dotProduct(v2);
-  double coeffU = u1u2 / u1u1;
-  double coeffV = v1v2 / u1u1;
-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
-  double alpha  = coeffU - beta * coeffV;
-  v2 = new Vector3D(alpha, v1, beta, v2);
+    // Build a matrix M whose columns are u1N, u2Ortho, u1N x u2Ortho
+    // and a matrix N whose columns are v1N, v2Ortho, v1N x v2Ortho
+    double[][] m = new double[3][3];
+    double[][] n = new double[3][3];
+    Vector3D u3 = u1N.crossProduct(u2Ortho);
+    Vector3D v3 = v1N.crossProduct(v2Ortho);
 
-  // preliminary computation
-  Vector3D uRef  = u1;
-  Vector3D vRef  = v1;
-  Vector3D v1Su1 = v1.subtract(u1);
-  Vector3D v2Su2 = v2.subtract(u2);
-  Vector3D k     = v1Su1.crossProduct(v2Su2);
-  Vector3D u3    = u1.crossProduct(u2);
-  double c       = k.dotProduct(u3);
-  if (c == 0) {
-    // the (q1, q2, q3) vector is close to the (u1, u2) plane
-    // we try other vectors
-    Vector3D v3 = Vector3D.crossProduct(v1, v2);
-    Vector3D v3Su3 = v3.subtract(u3);
-    k = v1Su1.crossProduct(v3Su3);
-    Vector3D u2Prime = u1.crossProduct(u3);
-    c = k.dotProduct(u2Prime);
+    m[0][0] = u1N.getX();
+    m[1][0] = u1N.getY();
+    m[2][0] = u1N.getZ();
 
-    if (c == 0) {
-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
+    m[0][1] = u2Ortho.getX();
+    m[1][1] = u2Ortho.getY();
+    m[2][1] = u2Ortho.getZ();
 
-      if (c == 0) {
-        // the (q1, q2, q3) vector is aligned with everything
-        // this is really the identity rotation
-        q0 = 1.0;
-        q1 = 0.0;
-        q2 = 0.0;
-        q3 = 0.0;
-        return;
-      }
+    m[0][2] = u3.getX();
+    m[1][2] = u3.getY();
+    m[2][2] = u3.getZ();
 
-      // we will have to use u2 and v2 to compute the scalar part
-      uRef = u2;
-      vRef = v2;
+    n[0][0] = v1N.getX();
+    n[1][0] = v1N.getY();
+    n[2][0] = v1N.getZ();
 
-    }
+    n[0][1] = v2Ortho.getX();
+    n[1][1] = v2Ortho.getY();
+    n[2][1] = v2Ortho.getZ();
+
+    n[0][2] = v3.getX();
+    n[1][2] = v3.getY();
+    n[2][2] = v3.getZ();
 
+    // Compute the rotation matrix: N * M^T
+    double[][] r = new double[3][3];
+    for (int i = 0; i < 3; ++i) {
+      for (int j = 0; j < 3; ++j) {
+        r[i][j] = 0;
+        for (int k = 0; k < 3; ++k) {
+          r[i][j] += n[i][k] * m[j][k]; // m^T
+        }
+      }
     }
 
-  // compute the vectorial part
-  c = FastMath.sqrt(c);
-  double inv = 1.0 / (c + c);
-  q1 = inv * k.getX();
-  q2 = inv * k.getY();
-  q3 = inv * k.getZ();
+    // Now, turn this matrix into a quaternion
+    double s = r[0][0] + r[1][1] + r[2][2];
+    if (s > -0.99999999) {
+      double q0tmp = 0.5 * FastMath.sqrt(1.0 + r[0][0] + r[1][1] + r[2][2]);
+      double inv4q0 = 1.0 / (4.0 * q0tmp);
+      q0 = q0tmp;
+      q1 = inv4q0 * (r[2][1] - r[1][2]);
+      q2 = inv4q0 * (r[0][2] - r[2][0]);
+      q3 = inv4q0 * (r[1][0] - r[0][1]);
+    } else {
+      // The rotation is close to 180 degrees
+      int i = 0;
+      if (r[1][1] > r[0][0]) {
+        i = 1;
+      }
+      if (r[2][2] > r[i][i]) {
+        i = 2;
+      }
+      int j = (i + 1) % 3;
+      int k = (i + 2) % 3;
 
-  // compute the scalar part
-   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
-                    uRef.getZ() * q1 - uRef.getX() * q3,
-                    uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
+      double qi = FastMath.sqrt(r[i][i] - r[j][j] - r[k][k] + 1.0) * 0.5;
+      double inv2qi = 0.5 / qi;
 
+      double q0tmp = (r[k][j] - r[j][k]) * inv2qi;
+      double q1tmp, q2tmp, q3tmp;
+      if (i == 0) {
+        q0 = q0tmp;
+        q1 = qi;
+        q2 = (r[0][1] + r[1][0]) * inv2qi;
+        q3 = (r[0][2] + r[2][0]) * inv2qi;
+      } else if (i == 1) {
+        q0 = q0tmp;
+        q1 = (r[1][0] + r[0][1]) * inv2qi;
+        q2 = qi;
+        q3 = (r[1][2] + r[2][1]) * inv2qi;
+      } else {
+        q0 = q0tmp;
+        q1 = (r[2][0] + r[0][2]) * inv2qi;
+        q2 = (r[2][1] + r[1][2]) * inv2qi;
+        q3 = qi;
+      }
+    }
+    // Normalize the quaternion just in case (for robustness)
+    double norm = FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
+    q0 /= norm;
+    q1 /= norm;
+    q2 /= norm;
+    q3 /= norm;
   }
\ No newline at end of file
