diff --git a/tmp/3999aeea-6a59-4671-a6c3-adc86a3df74e_buggy.java b/tmp/67e55a09-fd54-47fb-a6c3-698aef150c2d_fixed.java
index 0e110fe..2b6700d 100644
--- a/tmp/3999aeea-6a59-4671-a6c3-adc86a3df74e_buggy.java
+++ b/tmp/67e55a09-fd54-47fb-a6c3-698aef150c2d_fixed.java
@@ -1,96 +1,79 @@
   /** Build the rotation that transforms a pair of vector into another pair.
 
    * <p>Except for possible scale factors, if the instance were applied to
    * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair
    * (v<sub>1</sub>, v<sub>2</sub>).</p>
 
    * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
    * not the same as the angular separation between v<sub>1</sub> and
    * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than
    * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,
    * v<sub>2</sub>) plane.</p>
 
    * @param u1 first vector of the origin pair
    * @param u2 second vector of the origin pair
    * @param v1 desired image of u1 by the rotation
    * @param v2 desired image of u2 by the rotation
    * @exception IllegalArgumentException if the norm of one of the vectors is zero
    */
   public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
 
     // norms computation
     double u1u1 = u1.getNormSq();
     double u2u2 = u2.getNormSq();
     double v1v1 = v1.getNormSq();
     double v2v2 = v2.getNormSq();
     if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
       throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
     }
 
-  // normalize v1 in order to have (v1'|v1') = (u1|u1)
-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
-
-  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
-  double u1u2   = u1.dotProduct(u2);
-  double v1v2   = v1.dotProduct(v2);
-  double coeffU = u1u2 / u1u1;
-  double coeffV = v1v2 / u1u1;
-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
-  double alpha  = coeffU - beta * coeffV;
-  v2 = new Vector3D(alpha, v1, beta, v2);
-
-  // preliminary computation
-  Vector3D uRef  = u1;
-  Vector3D vRef  = v1;
-  Vector3D v1Su1 = v1.subtract(u1);
-  Vector3D v2Su2 = v2.subtract(u2);
-  Vector3D k     = v1Su1.crossProduct(v2Su2);
-  Vector3D u3    = u1.crossProduct(u2);
-  double c       = k.dotProduct(u3);
-  if (c == 0) {
-    // the (q1, q2, q3) vector is close to the (u1, u2) plane
-    // we try other vectors
-    Vector3D v3 = Vector3D.crossProduct(v1, v2);
-    Vector3D v3Su3 = v3.subtract(u3);
-    k = v1Su1.crossProduct(v3Su3);
-    Vector3D u2Prime = u1.crossProduct(u3);
-    c = k.dotProduct(u2Prime);
-
-    if (c == 0) {
-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
-
-      if (c == 0) {
-        // the (q1, q2, q3) vector is aligned with everything
-        // this is really the identity rotation
-        q0 = 1.0;
-        q1 = 0.0;
-        q2 = 0.0;
-        q3 = 0.0;
-        return;
+    // normalize u1, u2, v1, v2
+    Vector3D u1N = u1.normalize();
+    Vector3D u2N = u2.normalize();
+    Vector3D v1N = v1.normalize();
+    Vector3D v2N = v2.normalize();
+
+    // compute the axis and angle that rotates u1N to v1N
+    Vector3D axis = Vector3D.crossProduct(u1N, v1N);
+    double axisNorm = axis.getNorm();
+    double dot = u1N.dotProduct(v1N);
+    // Clamp dot to [-1, 1] to avoid NaNs due to numerical errors
+    dot = Math.max(-1.0, Math.min(1.0, dot));
+    double angle = Math.acos(dot);
+
+    Rotation r1;
+    if (axisNorm < 1e-12) {
+      // u1N and v1N are aligned or opposite
+      if (dot > 0) {
+        r1 = Rotation.IDENTITY;
+      } else {
+        // 180 degree rotation around any axis perpendicular to u1N
+        Vector3D ortho = u1N.orthogonal();
+        r1 = new Rotation(ortho, Math.PI);
+      }
+    } else {
+      axis = axis.scalarMultiply(1.0 / axisNorm);
+      r1 = new Rotation(axis, angle);
     }
 
-      // we will have to use u2 and v2 to compute the scalar part
-      uRef = u2;
-      vRef = v2;
+    // rotate u2N using r1, compute required in-plane rotation to align with v2N
+    Vector3D pU2 = r1.applyTo(u2N);
+    Vector3D projV2 = v2N.subtract(v1N.scalarMultiply(v1N.dotProduct(v2N))).normalize();
+    Vector3D projPU2 = pU2.subtract(v1N.scalarMultiply(v1N.dotProduct(pU2))).normalize();
 
-    }
+    double inPlaneCos = Math.max(-1.0, Math.min(1.0, projPU2.dotProduct(projV2)));
+    double inPlaneAngle = Math.acos(inPlaneCos);
+    double sign = Vector3D.dotProduct(Vector3D.crossProduct(projPU2, projV2), v1N);
 
+    if (sign < 0) {
+      inPlaneAngle = -inPlaneAngle;
     }
 
-  // compute the vectorial part
-  c = FastMath.sqrt(c);
-  double inv = 1.0 / (c + c);
-  q1 = inv * k.getX();
-  q2 = inv * k.getY();
-  q3 = inv * k.getZ();
-
-  // compute the scalar part
-   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
-                    uRef.getZ() * q1 - uRef.getX() * q3,
-                    uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
+    Rotation r2 = new Rotation(v1N, inPlaneAngle);
+    Rotation total = r2.applyTo(r1);
 
+    this.q0 = total.q0;
+    this.q1 = total.q1;
+    this.q2 = total.q2;
+    this.q3 = total.q3;
   }
\ No newline at end of file
