diff --git a/tmp/2febbfbc-718c-45b7-adda-10b09d4ca4e8_buggy.java b/tmp/18c1324a-78f0-4ad3-b953-00c6e9495a4c_fixed.java
index 0e110fe..2ccf90c 100644
--- a/tmp/2febbfbc-718c-45b7-adda-10b09d4ca4e8_buggy.java
+++ b/tmp/18c1324a-78f0-4ad3-b953-00c6e9495a4c_fixed.java
@@ -1,96 +1,82 @@
   /** Build the rotation that transforms a pair of vector into another pair.
 
    * <p>Except for possible scale factors, if the instance were applied to
    * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair
    * (v<sub>1</sub>, v<sub>2</sub>).</p>
 
    * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
    * not the same as the angular separation between v<sub>1</sub> and
    * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than
    * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,
    * v<sub>2</sub>) plane.</p>
 
    * @param u1 first vector of the origin pair
    * @param u2 second vector of the origin pair
    * @param v1 desired image of u1 by the rotation
    * @param v2 desired image of u2 by the rotation
    * @exception IllegalArgumentException if the norm of one of the vectors is zero
    */
   public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
-
     // norms computation
     double u1u1 = u1.getNormSq();
     double u2u2 = u2.getNormSq();
     double v1v1 = v1.getNormSq();
     double v2v2 = v2.getNormSq();
     if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
       throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
     }
 
-  // normalize v1 in order to have (v1'|v1') = (u1|u1)
-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
-
-  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
-  double u1u2   = u1.dotProduct(u2);
-  double v1v2   = v1.dotProduct(v2);
-  double coeffU = u1u2 / u1u1;
-  double coeffV = v1v2 / u1u1;
-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
-  double alpha  = coeffU - beta * coeffV;
-  v2 = new Vector3D(alpha, v1, beta, v2);
-
-  // preliminary computation
-  Vector3D uRef  = u1;
-  Vector3D vRef  = v1;
-  Vector3D v1Su1 = v1.subtract(u1);
-  Vector3D v2Su2 = v2.subtract(u2);
-  Vector3D k     = v1Su1.crossProduct(v2Su2);
-  Vector3D u3    = u1.crossProduct(u2);
-  double c       = k.dotProduct(u3);
-  if (c == 0) {
-    // the (q1, q2, q3) vector is close to the (u1, u2) plane
-    // we try other vectors
-    Vector3D v3 = Vector3D.crossProduct(v1, v2);
-    Vector3D v3Su3 = v3.subtract(u3);
-    k = v1Su1.crossProduct(v3Su3);
-    Vector3D u2Prime = u1.crossProduct(u3);
-    c = k.dotProduct(u2Prime);
-
-    if (c == 0) {
-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
-
-      if (c == 0) {
-        // the (q1, q2, q3) vector is aligned with everything
-        // this is really the identity rotation
-        q0 = 1.0;
-        q1 = 0.0;
-        q2 = 0.0;
-        q3 = 0.0;
-        return;
-      }
-
-      // we will have to use u2 and v2 to compute the scalar part
-      uRef = u2;
-      vRef = v2;
-
-    }
-
+    // normalize vectors to improve numerical stability
+    Vector3D u1n = u1.normalize();
+    Vector3D u2n = u2.normalize();
+    Vector3D v1n = v1.normalize();
+    Vector3D v2n = v2.normalize();
+
+    // Build orthonormal bases {u1n,u2Ortho,u3Ortho} and {v1n,v2Ortho,v3Ortho}
+    Vector3D u2Ortho = u2n.subtract(u1n.scalarMultiply(u2n.dotProduct(u1n))).normalize();
+    Vector3D u3Ortho = u1n.crossProduct(u2Ortho);
+
+    Vector3D v2Ortho = v2n.subtract(v1n.scalarMultiply(v2n.dotProduct(v1n))).normalize();
+    Vector3D v3Ortho = v1n.crossProduct(v2Ortho);
+
+    // Compute rotation matrix mapping u-basis to v-basis:
+    // Each column is the image of the u-basis vector in the v-basis
+    double[][] m = new double[3][3];
+    m[0][0] = v1n.dotProduct(u1n);
+    m[0][1] = v1n.dotProduct(u2Ortho);
+    m[0][2] = v1n.dotProduct(u3Ortho);
+    m[1][0] = v2Ortho.dotProduct(u1n);
+    m[1][1] = v2Ortho.dotProduct(u2Ortho);
+    m[1][2] = v2Ortho.dotProduct(u3Ortho);
+    m[2][0] = v3Ortho.dotProduct(u1n);
+    m[2][1] = v3Ortho.dotProduct(u2Ortho);
+    m[2][2] = v3Ortho.dotProduct(u3Ortho);
+
+    // Now convert rotation matrix to quaternion
+    double trace = m[0][0] + m[1][1] + m[2][2];
+    if (trace > 0.0) {
+      double s = FastMath.sqrt(trace + 1.0) * 2.0;
+      q0 = 0.25 * s;
+      q1 = (m[2][1] - m[1][2]) / s;
+      q2 = (m[0][2] - m[2][0]) / s;
+      q3 = (m[1][0] - m[0][1]) / s;
+    } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {
+      double s = FastMath.sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]) * 2.0;
+      q0 = (m[2][1] - m[1][2]) / s;
+      q1 = 0.25 * s;
+      q2 = (m[0][1] + m[1][0]) / s;
+      q3 = (m[0][2] + m[2][0]) / s;
+    } else if (m[1][1] > m[2][2]) {
+      double s = FastMath.sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]) * 2.0;
+      q0 = (m[0][2] - m[2][0]) / s;
+      q1 = (m[0][1] + m[1][0]) / s;
+      q2 = 0.25 * s;
+      q3 = (m[1][2] + m[2][1]) / s;
+    } else {
+      double s = FastMath.sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]) * 2.0;
+      q0 = (m[1][0] - m[0][1]) / s;
+      q1 = (m[0][2] + m[2][0]) / s;
+      q2 = (m[1][2] + m[2][1]) / s;
+      q3 = 0.25 * s;
     }
-
-  // compute the vectorial part
-  c = FastMath.sqrt(c);
-  double inv = 1.0 / (c + c);
-  q1 = inv * k.getX();
-  q2 = inv * k.getY();
-  q3 = inv * k.getZ();
-
-  // compute the scalar part
-   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
-                    uRef.getZ() * q1 - uRef.getX() * q3,
-                    uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
-
   }
\ No newline at end of file
