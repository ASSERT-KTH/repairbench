diff --git a/tmp/94328f6f-921c-4fbb-9626-ba555a630ac7_buggy.java b/tmp/b66e648c-335c-4796-86ec-159db8f15185_fixed.java
index 1ad070d..d3b5c3c 100644
--- a/tmp/94328f6f-921c-4fbb-9626-ba555a630ac7_buggy.java
+++ b/tmp/b66e648c-335c-4796-86ec-159db8f15185_fixed.java
@@ -1,38 +1,47 @@
 /**
  * Handle an escape sequence.
  * The current character must be the escape character.
  * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
  * on the input stream.
  * 
  * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
  * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
  * the escape character is not allowed at end of strem
  */
 int readEscape() throws IOException {
     // the escape char has just been read (normally a backslash)
     final int c = in.read();
     switch (c) {
     case 'r':
         return CR;
     case 'n':
         return LF;
     case 't':
         return TAB;
     case 'b':
         return BACKSPACE;
     case 'f':
         return FF;
     case CR:
     case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
+    case FF:
+    case TAB:
+    case BACKSPACE:
         return c;
     case END_OF_STREAM:
         throw new IOException("EOF whilst processing escape sequence");
     default:
-            // Now check for meta-characters
-                return c;
-            // indicate unexpected char - available from in.getLastChar()
+        // For any other character, including unrecognized escape seq,
+        // return the escape char and then the char itself.
+        // This allows things like \N and \a to be treated as literal (e.g., backslash + N/a).
+        // This is according to CSVFormat.
+        // So, put back c as last char and return the escape character itself.
+        if (c != -1) {
+            in.setLastChar(c); // Push c back to be read next time
+        }
+        // Return the escape char as the literal char that was just escaped
+        // (e.g. '\' if escape character is '\'), so first the escape char
+        // then on next read, the actual char (N, a, etc).
+        return escape;
     }
 }
\ No newline at end of file
