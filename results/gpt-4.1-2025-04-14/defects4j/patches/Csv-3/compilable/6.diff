diff --git a/tmp/b7aece44-af93-4e4c-8e44-fc9aa860fbe4_buggy.java b/tmp/44c75b23-9c14-40a5-bb12-59482decd4e4_fixed.java
index 1ad070d..3922dfb 100644
--- a/tmp/b7aece44-af93-4e4c-8e44-fc9aa860fbe4_buggy.java
+++ b/tmp/44c75b23-9c14-40a5-bb12-59482decd4e4_fixed.java
@@ -1,38 +1,38 @@
     /**
      * Handle an escape sequence.
      * The current character must be the escape character.
      * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
      * on the input stream.
      * 
      * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
      * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
      * the escape character is not allowed at end of strem
      */
     int readEscape() throws IOException {
         // the escape char has just been read (normally a backslash)
         final int c = in.read();
         switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
-        case CR:
-        case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
-            return c;
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
+            // Only decode recognized escape chars. All others (e.g. \N or \a) should remain escaped!
+            // So, instead of returning the interpreted char, we return the escape char itself,
+            // and let the rest of the code handle literal escapes accordingly.
+            // Essentially, we want to preserve the escape character for unknown escapes.
+            // If using a backslash as escape char, this would append the backslash (already read) and the next char.
+            // To do so, we need to signal to the caller that this char should be treated as normal
+            // (aka: not consumed). But the code expects int return and lastChar unread.
+            // Solution: Return c, but the caller should append both escape char and c to result.
             return c;
-            // indicate unexpected char - available from in.getLastChar()
         }
     }
\ No newline at end of file
