diff --git a/tmp/88f2f4da-fb31-4acd-a8d1-75f01b4cb62a_buggy.java b/tmp/38713206-c697-4dbe-a597-89e5009bc1a5_fixed.java
index 1ad070d..c97b476 100644
--- a/tmp/88f2f4da-fb31-4acd-a8d1-75f01b4cb62a_buggy.java
+++ b/tmp/38713206-c697-4dbe-a597-89e5009bc1a5_fixed.java
@@ -1,38 +1,40 @@
     /**
      * Handle an escape sequence.
      * The current character must be the escape character.
      * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
      * on the input stream.
      * 
      * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
      * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
      * the escape character is not allowed at end of strem
      */
     int readEscape() throws IOException {
         // the escape char has just been read (normally a backslash)
         final int c = in.read();
         switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
         case CR:
         case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
+        case FF:
+        case TAB:
+        case BACKSPACE:
             return c;
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
+        // Allow escaping of the escape character and the quote character, and generic escaping:
         default:
-            // Now check for meta-characters
-                return c;
-            // indicate unexpected char - available from in.getLastChar()
+            // Only handle special escape sequences. 
+            // For all other characters, just treat '\' + c as the literal e.g. \N -> \N, \a -> \a, etc.
+            // So return -1 so the lexer includes the escape char itself as literal.
+            return END_OF_STREAM;
         }
     }
\ No newline at end of file
