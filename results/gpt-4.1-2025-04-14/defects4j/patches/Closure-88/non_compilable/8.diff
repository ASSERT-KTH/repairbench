diff --git a/tmp/06de780e-ac03-4a39-ad5b-d3ae68f0598d_buggy.java b/tmp/d5ad54dd-57a9-4869-bece-8a1fc32a5037_fixed.java
index 9353941..f76ab1e 100644
--- a/tmp/06de780e-ac03-4a39-ad5b-d3ae68f0598d_buggy.java
+++ b/tmp/d5ad54dd-57a9-4869-bece-8a1fc32a5037_fixed.java
@@ -1,30 +1,76 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
+    // Special handling for AND, OR, COALESCE and HOOK and COMMA operators,
+    // as their evaluation is not always all children, due to short-circuit.
+    if (n.isAnd() || n.isOr() || n.isCoalesce()) {
+      // Evaluate left side first, return if definite read/kill found.
+      Node left = n.getFirstChild();
+      VariableLiveness state = isVariableReadBeforeKill(left, variable);
+      if (state != VariableLiveness.MAYBE_LIVE) {
+        return state;
+      }
+      // Only evaluate right side if left did not terminate the search.
+      Node right = left.getNext();
+      return isVariableReadBeforeKill(right, variable);
+    } else if (n.isHook()) {
+      // condition ? then : else
+      Node cond = n.getFirstChild();
+      Node ifTrue = cond.getNext();
+      Node ifFalse = ifTrue.getNext();
+
+      VariableLiveness state = isVariableReadBeforeKill(cond, variable);
+      if (state != VariableLiveness.MAYBE_LIVE) {
+        return state;
+      }
+      // Both branches could be first reference, check both.
+      VariableLiveness trueState = isVariableReadBeforeKill(ifTrue, variable);
+      VariableLiveness falseState = isVariableReadBeforeKill(ifFalse, variable);
+
+      // Pick the most "killer" state.
+      if (trueState == VariableLiveness.KILL || falseState == VariableLiveness.KILL) {
+        return VariableLiveness.KILL;
+      }
+      if (trueState == VariableLiveness.READ || falseState == VariableLiveness.READ) {
+        return VariableLiveness.READ;
+      }
+      return VariableLiveness.MAYBE_LIVE;
+    } else if (n.isComma()) {
+      // Only the last child can provide a KILL or READ that is visible.
+      Node last = n.getLastChild();
+      Node c;
+      for (c = n.getFirstChild(); c != last; c = c.getNext()) {
+        VariableLiveness state = isVariableReadBeforeKill(c, variable);
+        if (state != VariableLiveness.MAYBE_LIVE) {
+          return state;
+        }
+        // else keep iterating to the last child
+      }
+      return isVariableReadBeforeKill(last, variable);
+    } else {
+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
         if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
           VariableLiveness state = isVariableReadBeforeKill(child, variable);
           if (state != VariableLiveness.MAYBE_LIVE) {
             return state;
           }
         }
       }
+    }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
