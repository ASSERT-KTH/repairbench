diff --git a/tmp/8db2f2b2-9bc6-4785-9ad9-295172b62f67_buggy.java b/tmp/038b504d-5ed2-4dba-a03d-43ab7b4785da_fixed.java
index 9353941..168d2b8 100644
--- a/tmp/8db2f2b2-9bc6-4785-9ad9-295172b62f67_buggy.java
+++ b/tmp/038b504d-5ed2-4dba-a03d-43ab7b4785da_fixed.java
@@ -1,30 +1,58 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+   *
+   * Fix: When figuring out if an assignment ("KILL") on LHS, only treat as KILL if we're processing assignment (first encounter) in the *RHS*.
+   * In an assignment node, always first process the LHS, then the RHS. The KILL occurs only after the RHS is evaluated.
+   * So, in the context of "x = foo()", the assignment ("KILL") occurs *after* foo() evaluates.
+   * Therefore, if x appears in the RHS, that's a "READ before KILL", but if our visit to LHS itself is the first occurrence, then it's "KILL".
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
+    // If this is a NAME node for the variable of interest...
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
+      // If its parent is an assignment and this NAME is the LHS,
+      // then we're considering "x = ..." and this is occurrence of "x" being set
+      // However, KILL happens only *after* the RHS is fully evaluated.
+      // So, the KILL should only be considered if we visit the LHS after visiting the RHS.
       if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+        // Only return KILL if this assignment's LHS is the first reference.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
+    if (n.isAssign()) {
+      Node lhs = n.getFirstChild();
+      Node rhs = lhs.getNext();
+
+      // Visit RHS first (right hand side may "read" the variable before it is "killed" by assignment).
+      VariableLiveness state = isVariableReadBeforeKill(rhs, variable);
+      if (state != VariableLiveness.MAYBE_LIVE) {
+        return state;
+      }
+
+      // Only after RHS, visit LHS. (We treat var read/write in this order.)
+      state = isVariableReadBeforeKill(lhs, variable);
+      if (state != VariableLiveness.MAYBE_LIVE) {
+        return state;
+      }
+
+      // No reference found.
+      return VariableLiveness.MAYBE_LIVE;
+    }
+
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
