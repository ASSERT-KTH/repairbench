diff --git a/tmp/a0f4831a-f836-470a-bdd2-3cae34065ecf_buggy.java b/tmp/178b8a6e-6338-44a6-a7a0-c34acb5f3934_fixed.java
index 9353941..03a42dd 100644
--- a/tmp/a0f4831a-f836-470a-bdd2-3cae34065ecf_buggy.java
+++ b/tmp/178b8a6e-6338-44a6-a7a0-c34acb5f3934_fixed.java
@@ -1,30 +1,33 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+      if (NodeUtil.isLhs(n, n.getParent()) &&
+          (n.getParent().isAssign() || n.getParent().isExprResult() ||
+           n.getParent().isVar())) {
+        // The variable is on the left side of an assignment or var declaration.
+        // The KILL occurs after the RHS is evaluated!
+        // But, for our purposes, if we see an assignment to the variable,
+        // that's a KILL.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
