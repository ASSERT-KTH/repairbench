diff --git a/tmp/3c35b3c0-740c-4927-9dce-0e186d6b3da1_buggy.java b/tmp/5347c877-32eb-4f7e-a11d-855ae3ab2f2c_fixed.java
index 9353941..5f7e875 100644
--- a/tmp/3c35b3c0-740c-4927-9dce-0e186d6b3da1_buggy.java
+++ b/tmp/5347c877-32eb-4f7e-a11d-855ae3ab2f2c_fixed.java
@@ -1,30 +1,37 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
+      // Only consider as KILL if this is a simple assignment (=), not a compound assignment (+=, etc).
+      Node parent = n.getParent();
+      if (parent != null && parent.isAssign() && parent.getFirstChild() == n) {
         return VariableLiveness.KILL;
+      } else {
+        // Uses as part of compound assignments (like x += 1) are both a read and a write, so treat as READ.
+        return VariableLiveness.READ;
+      }
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
        child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
