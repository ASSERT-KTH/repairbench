diff --git a/tmp/16159072-6885-4b23-a9bb-a8b88240fc4d_buggy.java b/tmp/b76990a4-0981-45c6-8da1-0577fccb31af_fixed.java
index 9353941..5a1d066 100644
--- a/tmp/16159072-6885-4b23-a9bb-a8b88240fc4d_buggy.java
+++ b/tmp/b76990a4-0981-45c6-8da1-0577fccb31af_fixed.java
@@ -1,30 +1,50 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
+        // Only consider it a KILL if this is not a simple read-modify assignment (e.g., x = x + 1)
+        Node parent = n.getParent();
+        if (parent != null && NodeUtil.isAssignmentOp(parent)) {
+          Node lhs = parent.getFirstChild();
+          Node rhs = parent.getLastChild();
+          // If the occurrence is in the LHS of simple assignment (=)
+          // It will be a KILL only if not also used in RHS
+          if (parent.getType() == Token.ASSIGN && lhs == n) {
+            // For `x = ...`, check if variable is read in RHS before this assignment
+            VariableLiveness state = isVariableReadBeforeKill(rhs, variable);
+            if (state == VariableLiveness.READ) {
+              return VariableLiveness.READ;
+            }
+            return VariableLiveness.KILL;
+          }
+          // For op-assign (like +=, -=), LHS is implicitly read
+          if (lhs == n) {
+            return VariableLiveness.READ;
+          }
+        }
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
