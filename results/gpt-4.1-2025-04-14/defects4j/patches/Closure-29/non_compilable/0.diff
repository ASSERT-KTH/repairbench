diff --git a/tmp/6c9a5429-dcf2-4967-83ef-feec9732161d_buggy.java b/tmp/c776f046-e83d-495b-8cca-de2be727186e_fixed.java
index be9c8a3..6ec7865 100644
--- a/tmp/6c9a5429-dcf2-4967-83ef-feec9732161d_buggy.java
+++ b/tmp/c776f046-e83d-495b-8cca-de2be727186e_fixed.java
@@ -1,94 +1,135 @@
     /**
      * Counts the number of direct (full) references to an object.
      * Specifically we check for references of the following type:
      * <pre>
      *   x;
      *   x.fn();
      * </pre>
      */
     private boolean isInlinableObject(List<Reference> refs) {
       boolean ret = false;
+
+      // Collect all property names ever used on this object (direct GET/SET/ASSIGN/VAR/DELETE/etc).
+      Set<String> propertyNames = new HashSet<>();
+
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
         Node gramps = ref.getGrandparent();
 
         // Ignore indirect references, like x.y (except x.y(), since
         // the function referenced by y might reference 'this').
         //
         if (parent.isGetProp()) {
           Preconditions.checkState(parent.getFirstChild() == name);
+
+          // record the property name
+          String propName = parent.getLastChild().getString();
+          propertyNames.add(propName);
+
           // A call target maybe using the object as a 'this' value.
           if (gramps.isCall()
               && gramps.getFirstChild() == parent) {
-            return false;
-          }
 
+            // Check for references to generic Object prototype properties (e.g., 'toString', 'hasOwnProperty', etc.)
+            // These should NOT be inlined, to avoid breaking prototype access.
+            // This handles issue724. If the property is not assigned in the object literal, bail.
+            if (!isPropertyDefinedByAssignment(refs, propName)) {
+              return false;
+            }
+            // Otherwise, continue; allowed to read e.g. x.toString() as long as object assigns it.
+          }
           // NOTE(nicksantos): This pass's object-splitting algorithm has
           // a blind spot. It assumes that if a property isn't defined on an
           // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
+          // Object.prototype can have arbitrary properties on it; see above for handling.
           continue;
         }
 
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
            return false;
         }
 
         Node val = ref.getAssignedValue();
         if (val == null) {
           // A var with no assignment.
           continue;
         }
 
         // We're looking for object literal assignments only.
         if (!val.isObjectLit()) {
           return false;
         }
 
         // Make sure that the value is not self-refential. IOW,
         // disallow things like x = {b: x.a}.
         //
         // TODO: Only exclude unorderable self-referential
         // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
         // but x = {a: 1, b: x.a} is.
         //
         // Also, ES5 getters/setters aren't handled by this pass.
         for (Node child = val.getFirstChild(); child != null;
              child = child.getNext()) {
           if (child.isGetterDef() ||
               child.isSetterDef()) {
             // ES5 get/set not supported.
             return false;
           }
 
 
           Node childVal = child.getFirstChild();
           // Check if childVal is the parent of any of the passed in
           // references, as that is how self-referential assignments
           // will happen.
           for (Reference t : refs) {
             Node refNode = t.getParent();
-            while (!NodeUtil.isStatementBlock(refNode)) {
+            while (refNode != null && !NodeUtil.isStatementBlock(refNode)) {
               if (refNode == childVal) {
                 // There's a self-referential assignment
                 return false;
               }
               refNode = refNode.getParent();
             }
           }
         }
 
+        // Accumulate all keys assigned in this object literal.
+        for (Node child = val.getFirstChild(); child != null;
+             child = child.getNext()) {
+          propertyNames.add(child.getString());
+        }
 
         // We have found an acceptable object literal assignment. As
         // long as there are no other assignments that mess things up,
         // we can inline.
         ret = true;
       }
+
+      // If any of the properties accessed (by GETPROP, SETPROP etc) were never defined in an assignment,
+      // cannot inline. This prevents inlining if there are accesses to unknown properties (testObject12, testObject10).
+      for (String propName : propertyNames) {
+        if (!isPropertyDefinedByAssignment(refs, propName)) {
+          return false;
+        }
+      }
+
       return ret;
     }
+
+    // Helper: Determines if a property is assigned/defined in any object literal assignment in refs.
+    private boolean isPropertyDefinedByAssignment(List<Reference> refs, String propName) {
+      for (Reference ref : refs) {
+        Node name = ref.getNode();
+        Node val = ref.getAssignedValue();
+        if (val != null && val.isObjectLit()) {
+          for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+            if (child.getString().equals(propName)) {
+              return true;
+            }
+          }
+        }
+      }
+      return false;
+    }
\ No newline at end of file
