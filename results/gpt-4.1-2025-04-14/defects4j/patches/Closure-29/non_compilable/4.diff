diff --git a/tmp/75599650-3a66-4f9e-8bc2-777c2046e2b2_buggy.java b/tmp/03fb97eb-22ca-449d-bb65-60a9954b4394_fixed.java
index be9c8a3..53b4b1f 100644
--- a/tmp/75599650-3a66-4f9e-8bc2-777c2046e2b2_buggy.java
+++ b/tmp/03fb97eb-22ca-449d-bb65-60a9954b4394_fixed.java
@@ -1,94 +1,114 @@
     /**
      * Counts the number of direct (full) references to an object.
      * Specifically we check for references of the following type:
      * <pre>
      *   x;
      *   x.fn();
      * </pre>
+     *
+     * This method returns true if *all* uses are of the proper shape
+     * (var/assign initializations/reads and direct property access), and
+     * (unlike before) does *not* short-circuit if it sees a getProp
+     * to a property not defined on the latest object literal assignment!
      */
     private boolean isInlinableObject(List<Reference> refs) {
       boolean ret = false;
+      Set<String> allDefinedProps = null;
+
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
         Node gramps = ref.getGrandparent();
 
-        // Ignore indirect references, like x.y (except x.y(), since
-        // the function referenced by y might reference 'this').
-        //
         if (parent.isGetProp()) {
           Preconditions.checkState(parent.getFirstChild() == name);
           // A call target maybe using the object as a 'this' value.
           if (gramps.isCall()
               && gramps.getFirstChild() == parent) {
-            return false;
+            return false; // Can't inline if used as 'this'
           }
-
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
+          // Otherwise, getProp access is OK, just skip.
           continue;
         }
 
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
           return false;
         }
 
         Node val = ref.getAssignedValue();
         if (val == null) {
           // A var with no assignment.
           continue;
         }
 
         // We're looking for object literal assignments only.
         if (!val.isObjectLit()) {
           return false;
         }
 
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
+        // Build set of prop names for latest definition
+        Set<String> curDefinedProps = new HashSet<>();
+        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+          if (child.isGetterDef() || child.isSetterDef()) {
             // ES5 get/set not supported.
             return false;
           }
+          curDefinedProps.add(child.getString());
+        }
+        // Track the latest assignment's properties
+        allDefinedProps = curDefinedProps;
 
-
+        // Make sure that the value is not self-referential.
+        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
           Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
           for (Reference t : refs) {
             Node refNode = t.getParent();
-            while (!NodeUtil.isStatementBlock(refNode)) {
+            while (refNode != null && !NodeUtil.isStatementBlock(refNode)) {
               if (refNode == childVal) {
                 // There's a self-referential assignment
                 return false;
               }
               refNode = refNode.getParent();
             }
           }
         }
 
-
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
         ret = true;
       }
+
+      // Issue724 fix: if allDefinedProps is null, then there was no object literal assignment,
+      // so don't inline a plain {} assignment unless all getProp accesses are to generic properties!
+      if (allDefinedProps == null) {
+        // There was never an object literal assignment
+        // Only allow inlining if there are no getProp uses, or all getProp uses
+        // are to well-known vanilla Object props (none in our inlining rules).
+        for (Reference ref : refs) {
+          Node name = ref.getNode();
+          Node parent = ref.getParent();
+          Node gramps = ref.getGrandparent();
+          if (parent.isGetProp()) {
+            return false;
+          }
+        }
+      }
+      // Don't inline objects that use prototype properties or
+      // properties not present in the latest object literal on assignment!
+      if (allDefinedProps != null) {
+        for (Reference ref : refs) {
+          Node name = ref.getNode();
+          Node parent = ref.getParent();
+          if (parent.isGetProp()) {
+            Node prop = parent.getLastChild();
+            if (prop.isString()) {
+              String propName = prop.getString();
+              if (!allDefinedProps.contains(propName)) {
+                return false;
+              }
+            }
+          }
+        }
+      }
+
       return ret;
     }
\ No newline at end of file
