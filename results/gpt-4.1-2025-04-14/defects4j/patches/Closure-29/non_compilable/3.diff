diff --git a/tmp/2f978411-1aee-4278-8445-648bf037fd56_buggy.java b/tmp/be84b0ea-d4f2-4409-961a-04968d8ca44c_fixed.java
index be9c8a3..a1ca4fa 100644
--- a/tmp/2f978411-1aee-4278-8445-648bf037fd56_buggy.java
+++ b/tmp/be84b0ea-d4f2-4409-961a-04968d8ca44c_fixed.java
@@ -1,94 +1,100 @@
     /**
      * Counts the number of direct (full) references to an object.
      * Specifically we check for references of the following type:
      * <pre>
      *   x;
      *   x.fn();
      * </pre>
+     *
+     * Returns true if x can be inlined (object literal), false otherwise.
      */
     private boolean isInlinableObject(List<Reference> refs) {
       boolean ret = false;
+      Set<String> definedProps = null;
+
+      // First, collect the set of all properties defined in any object literal assignment.
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
-        Node gramps = ref.getGrandparent();
 
-        // Ignore indirect references, like x.y (except x.y(), since
-        // the function referenced by y might reference 'this').
-        //
+        // Ignore GetProp except for x.y()
         if (parent.isGetProp()) {
-          Preconditions.checkState(parent.getFirstChild() == name);
-          // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
-            return false;
-          }
-
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
           continue;
         }
 
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
-           return false;
+          continue;
         }
 
         Node val = ref.getAssignedValue();
         if (val == null) {
           // A var with no assignment.
           continue;
         }
 
         // We're looking for object literal assignments only.
-        if (!val.isObjectLit()) {
-          return false;
+        if (val.isObjectLit()) {
+          if (definedProps == null) {
+            definedProps = new LinkedHashSet<>();
+          }
+          for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+            if (!child.isComputedProp() && child.getFirstChild() != null) { // avoid destructuring etc
+              definedProps.add(child.getString());
+            }
+          }
+          ret = true;
         }
+      }
+
+      // Now check all refs to x.prop (GetProp). All must be to defined property.
+      if (ret && definedProps != null) {
+        for (Reference ref : refs) {
+          Node name = ref.getNode();
+          Node parent = ref.getParent();
+          Node gramps = ref.getGrandparent();
 
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
-            // ES5 get/set not supported.
+          if (parent.isGetProp()) {
+            Preconditions.checkState(parent.getFirstChild() == name);
+            // A call target maybe using the object as a 'this' value.
+            if (gramps.isCall() && gramps.getFirstChild() == parent) {
               return false;
             }
+            // If property isn't in definedProps, bail out.
+            String prop = parent.getLastChild().getString();
+            if (!definedProps.contains(prop)) {
+              return false;
+            }
+          }
 
+          // Only rewrite VAR declarations or simple assignment statements
+          if (!parent.isGetProp() && !isVarOrAssignExprLhs(name)) {
+            return false;
+          }
 
+          Node val = ref.getAssignedValue();
+          if (val != null && val.isObjectLit()) {
+            for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+              // ES5 Getter/Setter is not handled
+              if (child.isGetterDef() || child.isSetterDef()) {
+                return false;
+              }
               Node childVal = child.getFirstChild();
               // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
+              // references, as that is how self-referential assignments will happen.
               for (Reference t : refs) {
                 Node refNode = t.getParent();
-            while (!NodeUtil.isStatementBlock(refNode)) {
+                while (refNode != null && !NodeUtil.isStatementBlock(refNode)) {
                   if (refNode == childVal) {
                     // There's a self-referential assignment
                     return false;
                   }
                   refNode = refNode.getParent();
                 }
               }
             }
-
-
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
-        ret = true;
+          }
+        }
       }
       return ret;
     }
\ No newline at end of file
