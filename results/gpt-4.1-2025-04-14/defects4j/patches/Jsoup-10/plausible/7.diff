diff --git a/tmp/9ac37de9-5a06-4c77-9ecf-09072777c5b9_buggy.java b/tmp/a3dab01e-fafe-4a16-ba65-e19d112b05bc_fixed.java
index b4e6f03..4e75832 100644
--- a/tmp/9ac37de9-5a06-4c77-9ecf-09072777c5b9_buggy.java
+++ b/tmp/a3dab01e-fafe-4a16-ba65-e19d112b05bc_fixed.java
@@ -1,44 +1,35 @@
-    /**
-     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
-     * <code>&lt;img src></code>).
-     * <p/>
-     * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
-     * <p/>
-     * If the attribute value is already absolute (i.e. it starts with a protocol, like
-     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
-     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
-     * absolute using that.
-     * <p/>
-     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
-     * <code>String absUrl = linkEl.attr("abs:href");</code>
-     *
-     * @param attributeKey The attribute key
-     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
-     * could not be made successfully into a URL.
-     * @see #attr
-     * @see java.net.URL#URL(java.net.URL, String)
-     */
 public String absUrl(String attributeKey) {
     Validate.notEmpty(attributeKey);
 
     String relUrl = attr(attributeKey);
-        if (!hasAttr(attributeKey)) {
-            return ""; // nothing to make absolute with
-        } else {
-            URL base;
+    if (!hasAttr(attributeKey))
+        return "";
+    // bugfix: handle cases like "?foo" specially, as per
+    // https://github.com/jhy/jsoup/issues/392
     try {
         try {
-                    base = new URL(baseUri);
+            URL base = new URL(baseUri);
+
+            // Java resolves base + "?foo" to just the path + "?foo", dropping existing path if base has query.
+            // To workaround, if the relUrl starts with '?', append to base path without its query/fragment.
+            if (relUrl.startsWith("?")) {
+                String basePath = base.getProtocol() + "://" + base.getHost();
+                if (base.getPort() != -1)
+                    basePath += ":" + base.getPort();
+                if (base.getPath() != null && !base.getPath().isEmpty())
+                    basePath += base.getPath();
+                basePath += relUrl;
+                return basePath;
+            }
+
+            URL abs = new URL(base, relUrl);
+            return abs.toExternalForm();
         } catch (MalformedURLException e) {
             // the base is unsuitable, but the attribute may be abs on its own, so try that
             URL abs = new URL(relUrl);
             return abs.toExternalForm();
         }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
-                URL abs = new URL(base, relUrl);
-                return abs.toExternalForm();
     } catch (MalformedURLException e) {
         return "";
     }
 }
\ No newline at end of file
-    }
