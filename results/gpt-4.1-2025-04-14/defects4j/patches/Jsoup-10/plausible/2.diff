diff --git a/tmp/1cf48735-4f7a-42d9-a327-800396388120_buggy.java b/tmp/b4c26e91-aa12-4401-be48-7aab4f0644ca_fixed.java
index b4e6f03..bd095f8 100644
--- a/tmp/1cf48735-4f7a-42d9-a327-800396388120_buggy.java
+++ b/tmp/b4c26e91-aa12-4401-be48-7aab4f0644ca_fixed.java
@@ -1,44 +1,68 @@
-    /**
-     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
-     * <code>&lt;img src></code>).
-     * <p/>
-     * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
-     * <p/>
-     * If the attribute value is already absolute (i.e. it starts with a protocol, like
-     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
-     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
-     * absolute using that.
-     * <p/>
-     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
-     * <code>String absUrl = linkEl.attr("abs:href");</code>
-     *
-     * @param attributeKey The attribute key
-     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
-     * could not be made successfully into a URL.
-     * @see #attr
-     * @see java.net.URL#URL(java.net.URL, String)
-     */
 public String absUrl(String attributeKey) {
     Validate.notEmpty(attributeKey);
 
     String relUrl = attr(attributeKey);
     if (!hasAttr(attributeKey)) {
         return ""; // nothing to make absolute with
     } else {
-            URL base;
         try {
-                try {
-                    base = new URL(baseUri);
-                } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
-                    URL abs = new URL(relUrl);
-                    return abs.toExternalForm();
+            URL base = new URL(baseUri);
+            // Special handling for relative query string against a base with a path and query:
+            // if relUrl starts with '?' and baseUri has path, build manually
+            if (relUrl.startsWith("?")) {
+                String path = base.getPath();
+                if (path == null || path.isEmpty()) {
+                    path = "/";
+                }
+                String protocol = base.getProtocol();
+                String host = base.getHost();
+                int port = base.getPort();
+                StringBuilder sb = new StringBuilder();
+                sb.append(protocol).append("://").append(host);
+                if (port != -1) {
+                    sb.append(":").append(port);
+                }
+                sb.append(path).append(relUrl);
+                return sb.toString();
+            }
+            // Fix for when a relative path with a query string loses its filename (Java's URL class issue)
+            if (relUrl.contains("?") && !relUrl.startsWith("http") && !relUrl.startsWith("/")) {
+                int qIdx = relUrl.indexOf('?');
+                String relPath = relUrl.substring(0, qIdx);
+                String relQuery = relUrl.substring(qIdx);
+
+                String basePath = base.getPath();
+                if (basePath == null || basePath.isEmpty()) {
+                    basePath = "/";
+                }
+                int lastSlash = basePath.lastIndexOf('/');
+                String resolvedPath;
+                if (lastSlash == -1) {
+                    resolvedPath = "/" + relPath;
+                } else {
+                    resolvedPath = basePath.substring(0, lastSlash+1) + relPath;
+                }
+                String protocol = base.getProtocol();
+                String host = base.getHost();
+                int port = base.getPort();
+                StringBuilder sb = new StringBuilder();
+                sb.append(protocol).append("://").append(host);
+                if (port != -1) {
+                    sb.append(":").append(port);
+                }
+                sb.append(resolvedPath).append(relQuery);
+                return sb.toString();
             }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
             URL abs = new URL(base, relUrl);
             return abs.toExternalForm();
         } catch (MalformedURLException e) {
+            // try if it's already absolute
+            try {
+                URL abs = new URL(relUrl);
+                return abs.toExternalForm();
+            } catch (MalformedURLException ex) {
                 return "";
             }
         }
     }
+}
\ No newline at end of file
