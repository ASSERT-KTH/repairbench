diff --git a/tmp/b0de4e83-e0d2-44e1-8614-be1fd6793085_buggy.java b/tmp/6070d2cb-0414-464b-b166-385f4790dc34_fixed.java
index 3075782..11624ca 100644
--- a/tmp/b0de4e83-e0d2-44e1-8614-be1fd6793085_buggy.java
+++ b/tmp/6070d2cb-0414-464b-b166-385f4790dc34_fixed.java
@@ -1,82 +1,91 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-    boolean hasSideEffects = false;
+    // Determine if the function's body contains a return statement with side effects.
+    boolean returnHasSideEffects = false;
+    Node returnValueNode = null;
     if (block.hasChildren()) {
       Preconditions.checkState(block.hasOneChild());
       Node stmt = block.getFirstChild();
       if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
+        returnValueNode = stmt.getFirstChild();
+        returnHasSideEffects = NodeUtil.mayHaveSideEffects(returnValueNode, compiler);
       }
     }
+
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
-    while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
-        if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+    Node fnParamIter = fnParam;
+    Node cArgIter = cArg;
+
+    while (fnParamIter != null || cArgIter != null) {
+      if (fnParamIter != null && cArgIter != null) {
+        // If the function returns the first parameter, allow expressions like a.x=2.
+        boolean paramIsModifiedOnce =
+            (returnValueNode != null && NodeUtil.isAssignmentToName(returnValueNode, fnParamIter.getString()));
+
+        // Prevent inlining if the argument can be side-effected and the parameter is referenced more than once,
+        // except for the special case when the parameter is assigned in a return (e.g. a.x=2, a[2]=2).
+        if (NodeUtil.mayEffectMutableState(cArgIter, compiler)
+            && NodeUtil.getNameReferenceCount(block, fnParamIter.getString()) > 1
+            && !paramIsModifiedOnce) {
           return CanInlineResult.NO;
         }
-        }
 
-        // Move to the next name.
-        fnParam = fnParam.getNext();
+        // If the function's return expression has side effects (e.g. calls a method), then don't inline if the corresponding argument can be side-effected.
+        if (returnHasSideEffects && NodeUtil.canBeSideEffected(cArgIter)) {
+          return CanInlineResult.NO;
         }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
-      if (cArg != null) {
-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+        fnParamIter = fnParamIter.getNext();
+        cArgIter = cArgIter.getNext();
+      } else if (fnParamIter != null) {
+        // No argument is passed for this parameter, move to next parameter.
+        fnParamIter = fnParamIter.getNext();
+      } else if (cArgIter != null) {
+        // If there are more arguments than parameters, ensure that extra arguments don't cause side effects.
+        if (NodeUtil.mayHaveSideEffects(cArgIter, compiler)) {
           return CanInlineResult.NO;
         }
-        cArg = cArg.getNext();
+        cArgIter = cArgIter.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
