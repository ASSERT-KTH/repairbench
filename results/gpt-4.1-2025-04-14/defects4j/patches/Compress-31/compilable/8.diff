diff --git a/tmp/ec1e7b2a-0483-404c-83d0-271696ccf385_buggy.java b/tmp/de1b2c97-0640-452a-a517-d798b9d549d9_fixed.java
index b91f7de..d718474 100644
--- a/tmp/ec1e7b2a-0483-404c-83d0-271696ccf385_buggy.java
+++ b/tmp/de1b2c97-0640-452a-a517-d798b9d549d9_fixed.java
@@ -1,69 +1,57 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
     if (buffer[start] == 0) {
         return 0L;
     }
 
     // Skip leading spaces
     while (start < end) {
         if (buffer[start] == ' ') {
             start++;
         } else {
             break;
         }
     }
 
     // Trim all trailing NULs and spaces.
     // The ustar and POSIX tar specs require a trailing NUL or
     // space but some implementations use the extra digit for big
     // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
+    int realEnd = end;
+    while (realEnd > start && (buffer[realEnd - 1] == 0 || buffer[realEnd - 1] == ' ')) {
+        realEnd--;
     }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            if (currentByte == 0) {
-                break;
+    boolean foundNonOctal = false;
+    for (int i = start; i < realEnd; i++) {
+        final byte currentByte = buffer[i];
+        // NUL or space in the middle is only legal padding at the END, not inside
+        if (currentByte == 0 || currentByte == ' ') {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, i, currentByte));
         }
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, currentByte));
+        }
+        result = (result << 3) + (currentByte - '0');
+    }
+
+    // Make sure all remaining chars are NUL or space (already checked at least one at the end)
+    for (int i = realEnd; i < end; i++) {
+        byte currentByte = buffer[i];
+        if (currentByte != 0 && currentByte != ' ') {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, i, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
