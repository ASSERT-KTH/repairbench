diff --git a/tmp/1abe3ed9-210c-49fc-b823-c9502f16848b_buggy.java b/tmp/13aaea16-1379-4707-a66b-80e5f8156237_fixed.java
index 5f1dcf2..050537e 100644
--- a/tmp/1abe3ed9-210c-49fc-b823-c9502f16848b_buggy.java
+++ b/tmp/13aaea16-1379-4707-a66b-80e5f8156237_fixed.java
@@ -1,41 +1,44 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
-            incrementIterationsCounter();
-
     // save the original vertex
     final RealPointValuePair[] original = simplex;
     final RealPointValuePair best = original[0];
 
     // perform a reflection step
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
     if (comparator.compare(reflected, best) < 0) {
 
         // compute the expanded simplex
         final RealPointValuePair[] reflectedSimplex = simplex;
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
         if (comparator.compare(reflected, expanded) <= 0) {
             // accept the reflected simplex
             simplex = reflectedSimplex;
         }
-
+        // else: expanded is better, so simplex is already set in evaluateNewSimplex(khi)
         return;
 
     }
 
     // compute the contracted simplex
     final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
     if (comparator.compare(contracted, best) < 0) {
         // accept the contracted simplex
-
-            // check convergence
+        // simplex has already been updated inside evaluateNewSimplex
         return;
     }
 
+    // If neither contracted nor reflected improved, shrink simplex towards best
+    for (int i = 1; i < simplex.length; ++i) {
+        final double[] bestPoint = best.getPointRef();
+        final double[] currPoint = simplex[i].getPointRef();
+        double[] newPoint = new double[bestPoint.length];
+        for (int j = 0; j < bestPoint.length; ++j) {
+            newPoint[j] = bestPoint[j] + sigma * (currPoint[j] - bestPoint[j]);
+        }
+        simplex[i] = new RealPointValuePair(newPoint, computeObjectiveValue(newPoint), false);
     }
-
 }
\ No newline at end of file
