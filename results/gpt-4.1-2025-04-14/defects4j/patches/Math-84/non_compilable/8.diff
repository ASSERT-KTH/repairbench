diff --git a/tmp/a3a1c0e9-4c85-44c7-a7be-19691e811a95_buggy.java b/tmp/4dcdec30-6950-4bb6-b622-aab9a5eed026_fixed.java
index 5f1dcf2..3239ad7 100644
--- a/tmp/a3a1c0e9-4c85-44c7-a7be-19691e811a95_buggy.java
+++ b/tmp/4dcdec30-6950-4bb6-b622-aab9a5eed026_fixed.java
@@ -1,41 +1,52 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    // Save a copy of the previous simplex for convergence check
+    final RealPointValuePair[] previous = simplex.clone();
 
     incrementIterationsCounter();
 
     // save the original vertex
-            final RealPointValuePair[] original = simplex;
+    final RealPointValuePair[] original = simplex.clone();
     final RealPointValuePair best = original[0];
 
     // perform a reflection step
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
     if (comparator.compare(reflected, best) < 0) {
 
         // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+        final RealPointValuePair[] reflectedSimplex = simplex.clone();
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
         if (comparator.compare(reflected, expanded) <= 0) {
             // accept the reflected simplex
             simplex = reflectedSimplex;
         }
+        // else, the expanded simplex is already set in simplex
 
+        // After making changes, check convergence and return if converged
+        if (getConvergenceChecker().converged(getIterations(), previous, simplex)) {
+            return;
+        }
         return;
 
     }
 
     // compute the contracted simplex
     final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
     if (comparator.compare(contracted, best) < 0) {
         // accept the contracted simplex
 
-            // check convergence
+        // After making changes, check convergence and return if converged
+        if (getConvergenceChecker().converged(getIterations(), previous, simplex)) {
             return;
         }
-
+        return;
     }
 
+    // If no improvement was found, check convergence before continuing
+    if (getConvergenceChecker().converged(getIterations(), previous, simplex)) {
+        return;
+    }
 }
\ No newline at end of file
