diff --git a/tmp/6aa0103b-f69b-4b4f-982a-3bce692ac4e1_buggy.java b/tmp/41e239f2-8c68-404a-9613-3cf1966c1906_fixed.java
index 5f1dcf2..b877842 100644
--- a/tmp/6aa0103b-f69b-4b4f-982a-3bce692ac4e1_buggy.java
+++ b/tmp/41e239f2-8c68-404a-9613-3cf1966c1906_fixed.java
@@ -1,41 +1,59 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
+    final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();
+    RealPointValuePair[] previous = null;
+    RealPointValuePair[] current = simplex;
+
     while (true) {
 
         incrementIterationsCounter();
 
+        if (previous != null && checker != null) {
+            boolean converged = true;
+            for (int i = 0; i < simplex.length; ++i) {
+                if (!checker.converged(getIterations(), previous[i], current[i])) {
+                    converged = false;
+                    break;
+                }
+            }
+            if (converged) {
+                return;
+            }
+        }
+
         // save the original vertex
-            final RealPointValuePair[] original = simplex;
+        final RealPointValuePair[] original = current.clone();
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
-
-                return;
-
+            previous = current;
+            current = simplex;
+            continue;
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            previous = current;
+            current = simplex;
+            continue;
+        }
 
-            // check convergence
+        // if no improvement, break
         return;
     }
-
-        }
-
 }
\ No newline at end of file
