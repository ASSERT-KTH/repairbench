diff --git a/tmp/31ca26db-7e60-411c-903d-c24773fd5631_buggy.java b/tmp/a1df677e-f506-4c0d-b271-69feb61cd8f4_fixed.java
index 5f1dcf2..8aa5a59 100644
--- a/tmp/31ca26db-7e60-411c-903d-c24773fd5631_buggy.java
+++ b/tmp/a1df677e-f506-4c0d-b271-69feb61cd8f4_fixed.java
@@ -1,41 +1,56 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
-            incrementIterationsCounter();
-
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
+    // Save the original vertex
+    final RealPointValuePair[] original = simplex.clone();
     final RealPointValuePair best = original[0];
+    final RealPointValuePair worst = original[original.length - 1];
 
-            // perform a reflection step
+    // --- Reflection step ---
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
     if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+        // Compute expanded simplex
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
         if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
-                    simplex = reflectedSimplex;
+            // Accept the reflected simplex
+            // 'simplex' already set by evaluateNewSimplex for reflected
+            // no action needed, just return
+        } else {
+            // Accept the expanded simplex
+            // 'simplex' already set by evaluateNewSimplex for expanded
         }
-
         return;
+    }
 
+    // If reflected point is not better than the best, try contraction
+    if (comparator.compare(reflected, worst) < 0) {
+        // Accept the reflected simplex (better than at least worst)
+        // 'simplex' already set by evaluateNewSimplex for reflected
+        return;
     }
 
-            // compute the contracted simplex
+    // Otherwise, perform contraction
     final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
+    if (comparator.compare(contracted, worst) < 0) {
+        // Accept the contracted simplex
+        // 'simplex' already set by evaluateNewSimplex for contracted
         return;
     }
 
+    // If contraction was not successful, shrink the simplex towards best
+    for (int i = 1; i < simplex.length; ++i) {
+        final double[] bestPoint = simplex[0].getPointRef();
+        final double[] currPoint = simplex[i].getPointRef();
+        double[] shrinked = new double[currPoint.length];
+        for (int j = 0; j < currPoint.length; ++j) {
+            shrinked[j] = bestPoint[j] + sigma * (currPoint[j] - bestPoint[j]);
+        }
+        simplex[i] = new RealPointValuePair(
+                shrinked, 
+                function.value(shrinked), 
+                false
+        );
     }
-
 }
\ No newline at end of file
