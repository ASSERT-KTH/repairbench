diff --git a/tmp/6fb0118d-30fc-4a6e-8762-a190541f7d1d_buggy.java b/tmp/e06f5c26-6327-4650-9c2e-af8b6b47deeb_fixed.java
index 5f1dcf2..a515072 100644
--- a/tmp/6fb0118d-30fc-4a6e-8762-a190541f7d1d_buggy.java
+++ b/tmp/e06f5c26-6327-4650-9c2e-af8b6b47deeb_fixed.java
@@ -1,41 +1,54 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    final RealPointValuePair[] previous = simplex.clone();
+    final RealPointValuePair bestPrevious = previous[0];
 
     incrementIterationsCounter();
 
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
-
     // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
-            if (comparator.compare(reflected, best) < 0) {
+    final RealPointValuePair reflected = evaluateNewSimplex(previous, 1.0, comparator);
+    final RealPointValuePair best = simplex[0];
 
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+    // if reflected point is better than the best, try expansion
+    if (comparator.compare(reflected, bestPrevious) < 0) {
+
+        final RealPointValuePair[] reflectedSimplex = simplex.clone();
+        final RealPointValuePair expanded = evaluateNewSimplex(previous, khi, comparator);
+
+        if (comparator.compare(expanded, reflected) < 0) {
+            // accept the expanded simplex
+            // simplex is already updated in evaluateNewSimplex
+        } else {
             // accept the reflected simplex
             simplex = reflectedSimplex;
         }
-
         return;
-
     }
 
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
+    // if reflected point is not better, try contraction
+    final RealPointValuePair contracted = evaluateNewSimplex(previous, gamma, comparator);
+    if (comparator.compare(contracted, bestPrevious) < 0) {
+        // accept the contracted simplex (already set by evaluateNewSimplex)
         return;
     }
 
+    // shrink simplex towards best point
+    final double[] bestPoint = previous[0].getPointRef();
+    for (int i = 1; i < simplex.length; i++) {
+        double[] curr = simplex[i].getPointRef();
+        double[] shrunk = new double[curr.length];
+        for (int j = 0; j < curr.length; ++j) {
+            shrunk[j] = bestPoint[j] + sigma * (curr[j] - bestPoint[j]);
         }
-
+        simplex[i] = new RealPointValuePair(
+            shrunk,
+            computeObjectiveValue(shrunk),
+            false
+        );
+    }
+    // after shrinking, sort simplex
+    Arrays.sort(simplex, comparator);
 }
\ No newline at end of file
