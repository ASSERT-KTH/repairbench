diff --git a/tmp/23ee1029-7ddb-46cd-a6c2-26567c251ed3_buggy.java b/tmp/7a321880-06e3-4d25-bce9-adce43603375_fixed.java
index 5f1dcf2..fdb4dfa 100644
--- a/tmp/23ee1029-7ddb-46cd-a6c2-26567c251ed3_buggy.java
+++ b/tmp/7a321880-06e3-4d25-bce9-adce43603375_fixed.java
@@ -1,41 +1,71 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    // Save a copy of the current simplex for convergence checking at the end
+    final RealPointValuePair[] previous = simplex.clone();
 
     incrementIterationsCounter();
 
     // save the original vertex
-            final RealPointValuePair[] original = simplex;
+    final RealPointValuePair[] original = simplex.clone();
     final RealPointValuePair best = original[0];
 
     // perform a reflection step
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
     if (comparator.compare(reflected, best) < 0) {
 
         // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+        final RealPointValuePair[] reflectedSimplex = simplex.clone();
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
         if (comparator.compare(reflected, expanded) <= 0) {
             // accept the reflected simplex
             simplex = reflectedSimplex;
         }
+        // else: expanded simplex is better, already set by evaluateNewSimplex(khi), so keep it
 
+        // check convergence
+        if (getConvergenceChecker() != null &&
+            getConvergenceChecker().converged(getIterations(), previous[0], simplex[0])) {
             return;
+        }
 
+        return;
     }
 
     // compute the contracted simplex
     final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
     if (comparator.compare(contracted, best) < 0) {
         // accept the contracted simplex
+        // already set by evaluateNewSimplex(gamma)
 
         // check convergence
+        if (getConvergenceChecker() != null &&
+            getConvergenceChecker().converged(getIterations(), previous[0], simplex[0])) {
             return;
         }
 
+        return;
+    }
+
+    // Reduction: shrink simplex towards best point
+    for (int i = 1; i < simplex.length; ++i) {
+        final double[] bestPoint = simplex[0].getPointRef();
+        final double[] currPoint = simplex[i].getPointRef();
+        double[] shrunk = new double[bestPoint.length];
+        for (int j = 0; j < bestPoint.length; ++j) {
+            shrunk[j] = bestPoint[j] + sigma * (currPoint[j] - bestPoint[j]);
+        }
+        simplex[i] = new RealPointValuePair(shrunk, computeObjectiveValue(shrunk), false);
     }
 
+    // sort simplex
+    Arrays.sort(simplex, comparator);
+
+    // check convergence
+    if (getConvergenceChecker() != null &&
+        getConvergenceChecker().converged(getIterations(), previous[0], simplex[0])) {
+        return;
+    }
 }
\ No newline at end of file
