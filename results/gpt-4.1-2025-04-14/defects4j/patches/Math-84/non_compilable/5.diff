diff --git a/tmp/1a31dfff-dbe9-4195-a0a7-0918c52a886a_buggy.java b/tmp/394d1836-7bc5-4b2a-ab54-49c419f799ae_fixed.java
index 5f1dcf2..6209003 100644
--- a/tmp/1a31dfff-dbe9-4195-a0a7-0918c52a886a_buggy.java
+++ b/tmp/394d1836-7bc5-4b2a-ab54-49c419f799ae_fixed.java
@@ -1,41 +1,48 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
-            incrementIterationsCounter();
-
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
+    final RealPointValuePair[] original = simplex.clone();
     final RealPointValuePair best = original[0];
 
     // perform a reflection step
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
     if (comparator.compare(reflected, best) < 0) {
 
         // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+        final RealPointValuePair[] reflectedSimplex = simplex.clone();
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+        if (comparator.compare(expanded, reflected) < 0) {
+            // accept the expanded simplex
+            simplex = simplex.clone();
+        } else {
             // accept the reflected simplex
             simplex = reflectedSimplex;
         }
-
         return;
-
     }
 
     // compute the contracted simplex
     final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
     if (comparator.compare(contracted, best) < 0) {
         // accept the contracted simplex
-
-            // check convergence
+        simplex = simplex.clone();
         return;
     }
 
+    // shrink simplex towards best point
+    for (int i = 1; i < simplex.length; ++i) {
+        final double[] bestPoint = simplex[0].getPoint();
+        final double[] curr = simplex[i].getPoint();
+        double[] shrunk = new double[bestPoint.length];
+        for (int j = 0; j < bestPoint.length; ++j) {
+            shrunk[j] = bestPoint[j] + sigma * (curr[j] - bestPoint[j]);
+        }
+        simplex[i] = new RealPointValuePair(
+            shrunk,
+            function.value(shrunk), 
+            false
+        );
     }
-
 }
\ No newline at end of file
