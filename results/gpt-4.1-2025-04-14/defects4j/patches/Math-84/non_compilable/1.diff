diff --git a/tmp/a006bd33-fe9c-4eee-9c7c-6cf0f3928469_buggy.java b/tmp/aa723e02-313a-4215-b5d0-35d6d7f52af3_fixed.java
index 5f1dcf2..6342d56 100644
--- a/tmp/a006bd33-fe9c-4eee-9c7c-6cf0f3928469_buggy.java
+++ b/tmp/aa723e02-313a-4215-b5d0-35d6d7f52af3_fixed.java
@@ -1,41 +1,47 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
-            incrementIterationsCounter();
-
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
+    // Save a copy of the current simplex to allow for comparison after moving
+    final RealPointValuePair[] original = simplex.clone();
     final RealPointValuePair best = original[0];
 
     // perform a reflection step
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
     if (comparator.compare(reflected, best) < 0) {
 
         // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+        final RealPointValuePair[] reflectedSimplex = simplex.clone();
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
         if (comparator.compare(reflected, expanded) <= 0) {
             // accept the reflected simplex
             simplex = reflectedSimplex;
+            // best point did not change since the best from reflected is at simplex[0]
         }
+        // else: expanded is better, the call to evaluateNewSimplex replaced the simplex already
 
         return;
-
     }
 
     // compute the contracted simplex
     final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
     if (comparator.compare(contracted, best) < 0) {
         // accept the contracted simplex
-
-            // check convergence
+        // the call to evaluateNewSimplex has replaced the simplex already
         return;
     }
 
+    // If no improvement, shrink the simplex towards the best point
+    for (int i = 1; i < simplex.length; ++i) {
+        final double[] bestPoint = simplex[0].getPointRef();
+        final double[] currPoint = simplex[i].getPointRef();
+        double[] newPoint = new double[bestPoint.length];
+        for (int j = 0; j < bestPoint.length; ++j) {
+            newPoint[j] = bestPoint[j] + sigma * (currPoint[j] - bestPoint[j]);
         }
-
+        simplex[i] = new RealPointValuePair(newPoint, computeObjectiveValue(newPoint), false);
+    }
+    // need to re-sort the simplex after shrink
+    Arrays.sort(simplex, comparator);
 }
\ No newline at end of file
