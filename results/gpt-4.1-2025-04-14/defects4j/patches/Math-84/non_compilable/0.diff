diff --git a/tmp/2ad7b9f4-c531-4eab-97dc-f235f0453056_buggy.java b/tmp/5b31a1b1-7796-4abc-be8e-f48d26f4a5e3_fixed.java
index 5f1dcf2..ae65530 100644
--- a/tmp/2ad7b9f4-c531-4eab-97dc-f235f0453056_buggy.java
+++ b/tmp/5b31a1b1-7796-4abc-be8e-f48d26f4a5e3_fixed.java
@@ -1,41 +1,53 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
-            incrementIterationsCounter();
-
-            // save the original vertex
+    // Save original simplex and best point for convergence check
     final RealPointValuePair[] original = simplex;
     final RealPointValuePair best = original[0];
 
     // perform a reflection step
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+
     if (comparator.compare(reflected, best) < 0) {
-
         // compute the expanded simplex
         final RealPointValuePair[] reflectedSimplex = simplex;
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
         if (comparator.compare(reflected, expanded) <= 0) {
             // accept the reflected simplex
             simplex = reflectedSimplex;
         }
-
+        // else simplex is already set to the expanded one in evaluateNewSimplex
+        // nothing to do
+        incrementIterationsCounter();
         return;
-
     }
 
     // compute the contracted simplex
     final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
     if (comparator.compare(contracted, best) < 0) {
         // accept the contracted simplex
-
-            // check convergence
+        // simplex already set in evaluateNewSimplex
+        incrementIterationsCounter();
         return;
     }
 
+    // If neither reflection nor contraction was better, shrink towards best
+    for (int i = 1; i < simplex.length; ++i) {
+        final double[] bestPoint = simplex[0].getPointRef();
+        final double[] curr = simplex[i].getPointRef();
+        double[] shrunk = new double[curr.length];
+        for (int j = 0; j < curr.length; ++j) {
+            shrunk[j] = bestPoint[j] + sigma * (curr[j] - bestPoint[j]);
+        }
+        simplex[i] = new RealPointValuePair(
+            shrunk,
+            computeObjectiveValue(shrunk),
+            false);
     }
 
+    // Sort simplex after shrink
+    Arrays.sort(simplex, comparator);
+    incrementIterationsCounter();
 }
\ No newline at end of file
