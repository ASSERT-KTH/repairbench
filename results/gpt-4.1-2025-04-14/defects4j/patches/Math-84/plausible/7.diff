diff --git a/tmp/17db9efe-6e3d-499f-a110-19f47e34d1dd_buggy.java b/tmp/69282a04-ff58-4395-9a14-0701b8568c93_fixed.java
index 5f1dcf2..21407da 100644
--- a/tmp/17db9efe-6e3d-499f-a110-19f47e34d1dd_buggy.java
+++ b/tmp/69282a04-ff58-4395-9a14-0701b8568c93_fixed.java
@@ -1,41 +1,55 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
-            incrementIterationsCounter();
-
-            // save the original vertex
+        // Keep a copy of previous simplex to check convergence
+        final RealPointValuePair[] previousSimplex = simplex.clone();
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
+        incrementIterationsCounter();
+
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
+            // If expanded is better, evaluateNewSimplex already updated simplex
+            // Otherwise, reflectedSimplex is better, already assigned above
+            // Return after expansion/reflection
+            // convergence check below
 
-                return;
-
-            }
-
+        } else {
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
-            // check convergence
-                return;
+                // evaluateNewSimplex already updated simplex
+                // Return after contraction
+            } else {
+                // shrink not implemented in MultiDirectional, so nothing to do
+                // Just return
             }
-
         }
 
+        // check convergence: compare previousSimplex and current simplex arrays
+        boolean converged = true;
+        for (int i = 0; i < simplex.length; ++i) {
+            if (!previousSimplex[i].equals(simplex[i])) {
+                converged = false;
+                break;
+            }
+        }
+        // If no improvement, throw exception to prevent infinite loop
+        if (converged) {
+            throw new OptimizationException("Simplex is stuck: no improvement in simplex");
+        }
+        // otherwise, return as the simplex has moved/improved
     }
\ No newline at end of file
