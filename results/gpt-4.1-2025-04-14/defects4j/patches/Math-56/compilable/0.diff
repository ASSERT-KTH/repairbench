diff --git a/tmp/0d7e9c54-92b3-4c69-ab9b-15b545300ea3_buggy.java b/tmp/08df07e5-7a1a-463e-9bca-691f4781349f_fixed.java
index 2608424..aa1cf8b 100644
--- a/tmp/0d7e9c54-92b3-4c69-ab9b-15b545300ea3_buggy.java
+++ b/tmp/08df07e5-7a1a-463e-9bca-691f4781349f_fixed.java
@@ -1,39 +1,22 @@
 /**
  * Convert to multidimensional counter.
  *
  * @param index Index in unidimensional counter.
  * @return the multidimensional counts.
  * @throws OutOfRangeException if {@code index} is not between
  * {@code 0} and the value returned by {@link #getSize()} (excluded).
  */
 public int[] getCounts(int index) {
-        if (index < 0 ||
-            index >= totalSize) {
-            throw new OutOfRangeException(index, 0, totalSize);
+    if (index < 0 || index >= totalSize) {
+        throw new OutOfRangeException(index, 0, totalSize - 1);
     }
 
     final int[] indices = new int[dimension];
-
-        int count = 0;
-        for (int i = 0; i < last; i++) {
-            int idx = 0;
-            final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
+    int remainder = index;
+    for (int i = 0; i < dimension; i++) {
+        indices[i] = remainder / uniCounterOffset[i];
+        remainder = remainder % uniCounterOffset[i];
     }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
-        }
-
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
 
     return indices;
 }
\ No newline at end of file
