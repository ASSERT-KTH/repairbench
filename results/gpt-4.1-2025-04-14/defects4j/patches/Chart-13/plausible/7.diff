diff --git a/tmp/8fb67e6d-df14-40b7-bef1-75fdd0d39ca9_buggy.java b/tmp/8e830a8a-11ed-49c1-a658-c85a01dcbf60_fixed.java
index 63a7c80..1641fc9 100644
--- a/tmp/8fb67e6d-df14-40b7-bef1-75fdd0d39ca9_buggy.java
+++ b/tmp/8e830a8a-11ed-49c1-a658-c85a01dcbf60_fixed.java
@@ -1,77 +1,93 @@
 /**
  * Arranges the items within a container.
  *
  * @param container  the container.
  * @param constraint the constraint.
  * @param g2         the graphics device.
-     *
  * @return The container size after the arrangement.
  */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
     double[] w = new double[5];
     double[] h = new double[5];
-        w[0] = constraint.getWidth();
+
+    w[0] = constraint.getWidth(); // total width
+
+    // --- Top block ---
+    h[0] = 0.0;
     if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
+        RectangleConstraint c1 = new RectangleConstraint(
+                w[0], null, LengthConstraintType.FIXED, 
+                0.0, null, LengthConstraintType.NONE);
         Size2D size = this.topBlock.arrange(g2, c1);
         h[0] = size.height;
     }
     w[1] = w[0];
+
+    // --- Bottom block ---
+    h[1] = 0.0;
     if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+        RectangleConstraint c2 = new RectangleConstraint(
+                w[0], null, LengthConstraintType.FIXED, 
+                0.0, null, LengthConstraintType.NONE);
         Size2D size = this.bottomBlock.arrange(g2, c2);
         h[1] = size.height;
     }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+
+    // Height left for center row (left/center/right)
+    h[2] = Math.max(constraint.getHeight() - h[0] - h[1], 0.0);
+
+    // --- Left block ---
+    w[2] = 0.0;
     if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
+        RectangleConstraint c3 = new RectangleConstraint(
+                0.0, new Range(0.0, w[0]),
                 LengthConstraintType.RANGE, h[2], null,
                 LengthConstraintType.FIXED);
         Size2D size = this.leftBlock.arrange(g2, c3);
         w[2] = size.width;
     }
-        h[3] = h[2];
+
+    // --- Right block ---
+    w[3] = 0.0;
+    double widthRightMax = Math.max(w[0] - w[2], 0.0);
     if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
+        RectangleConstraint c4 = new RectangleConstraint(
+                0.0, new Range(0.0, widthRightMax),
                 LengthConstraintType.RANGE, h[2], null,
                 LengthConstraintType.FIXED);
         Size2D size = this.rightBlock.arrange(g2, c4);
         w[3] = size.width;
     }
+
+    // Center width/height
     h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+    w[4] = Math.max(w[0] - w[2] - w[3], 0.0);
+
+    // --- Center block ---
+    if (this.centerBlock != null) {
         RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
-        if (this.centerBlock != null) {
         this.centerBlock.arrange(g2, c5);
     }
 
+    // --- Position the blocks ---
     if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));
     }
     if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));
     }
     if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));
     }
     if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+        this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[2]));
     }
     if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));
     }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+
+    // Compute requested height (in FF, height can be larger than request if blocks are larger)
+    double totalHeight = h[0] + h[2] + h[1];
+    return new Size2D(w[0], totalHeight);
 }
\ No newline at end of file
