diff --git a/tmp/7b95909d-00f9-4219-af61-3fa48a6bcc5c_buggy.java b/tmp/277222ea-edd7-42be-8f3d-d516aa8058de_fixed.java
index 63a7c80..4634e3d 100644
--- a/tmp/7b95909d-00f9-4219-af61-3fa48a6bcc5c_buggy.java
+++ b/tmp/277222ea-edd7-42be-8f3d-d516aa8058de_fixed.java
@@ -1,77 +1,106 @@
 /**
  * Arranges the items within a container.
  *
  * @param container  the container.
  * @param constraint  the constraint.
  * @param g2  the graphics device.
  *
  * @return The container size after the arrangement.
  */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
     double[] w = new double[5];
     double[] h = new double[5];
+    // w[0]: width for top, w[1]: width for bottom, w[2]: width for left,
+    // w[3]: width for right, w[4]: width for center
     w[0] = constraint.getWidth();
+    h[0] = 0.0;
+    h[1] = 0.0;
+    w[2] = 0.0;
+    w[3] = 0.0;
+    h[2] = 0.0;
+    h[3] = 0.0;
+    h[4] = 0.0;
+    w[4] = 0.0;
+
+    // Top block
     if (this.topBlock != null) {
         RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                 LengthConstraintType.FIXED, 0.0,
                 new Range(0.0, constraint.getHeight()),
                 LengthConstraintType.RANGE);
         Size2D size = this.topBlock.arrange(g2, c1);
         h[0] = size.height;
     }
+
+    // Bottom block
     w[1] = w[0];
     if (this.bottomBlock != null) {
+        double maxBottomHeight = constraint.getHeight() - h[0];
+        // Don't allow negative range, clamp to 0 if necessary
+        double bottomRangeMax = Math.max(0.0, maxBottomHeight);
         RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                LengthConstraintType.FIXED, 0.0, new Range(0.0, bottomRangeMax), LengthConstraintType.RANGE);
         Size2D size = this.bottomBlock.arrange(g2, c2);
         h[1] = size.height;
     }
+
+    // Central region height
     h[2] = constraint.getHeight() - h[1] - h[0];
+    double centralRegionHeight = Math.max(0.0, h[2]);
+
+    // Left block
     if (this.leftBlock != null) {
         RectangleConstraint c3 = new RectangleConstraint(0.0,
                 new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
+                LengthConstraintType.RANGE, centralRegionHeight, null,
                 LengthConstraintType.FIXED);
         Size2D size = this.leftBlock.arrange(g2, c3);
         w[2] = size.width;
     }
-        h[3] = h[2];
+
+    // Right block
+    h[3] = centralRegionHeight;
+    double availableRightWidth = constraint.getWidth() - w[2];
+    double rightRangeMax = Math.max(0.0, availableRightWidth);
     if (this.rightBlock != null) {
         RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
+                new Range(0.0, rightRangeMax),
+                LengthConstraintType.RANGE, centralRegionHeight, null,
                 LengthConstraintType.FIXED);
         Size2D size = this.rightBlock.arrange(g2, c4);
         w[3] = size.width;
     }
-        h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+
+    // Center block
+    h[4] = centralRegionHeight;
+    double availableCenterWidth = constraint.getWidth() - w[2] - w[3];
+    w[4] = Math.max(0.0, availableCenterWidth);
     RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
     if (this.centerBlock != null) {
         this.centerBlock.arrange(g2, c5);
     }
 
+    // Set bounds
     if (this.topBlock != null) {
         this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
                 h[0]));
     }
     if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
+        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + centralRegionHeight,
                 w[1], h[1]));
     }
     if (this.leftBlock != null) {
         this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+                centralRegionHeight));
     }
     if (this.rightBlock != null) {
         this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
                 w[3], h[3]));
     }
     if (this.centerBlock != null) {
         this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
                 h[4]));
     }
     return new Size2D(constraint.getWidth(), constraint.getHeight());
 }
\ No newline at end of file
