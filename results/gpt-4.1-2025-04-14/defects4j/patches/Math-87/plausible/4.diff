diff --git a/tmp/f299b41e-b3ac-4b9d-94f7-cd887e3a58f0_buggy.java b/tmp/b94d6f85-6d89-4c53-a867-9dd701540e04_fixed.java
index 70cafe0..d0de5cc 100644
--- a/tmp/f299b41e-b3ac-4b9d-94f7-cd887e3a58f0_buggy.java
+++ b/tmp/b94d6f85-6d89-4c53-a867-9dd701540e04_fixed.java
@@ -1,18 +1,35 @@
     /**
      * Checks whether the given column is basic.
      * @param col index of the column to check
      * @return the row that the variable is basic in.  null if the column is not basic
      */
     private Integer getBasicRow(final int col) {
         Integer row = null;
         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+            double entry = getEntry(i, col);
+            if (MathUtils.equals(entry, 1.0, epsilon)) {
                 if (row == null) {
+                    // Check all other rows in this column must be 0
+                    boolean isBasic = true;
+                    for (int j = getNumObjectiveFunctions(); j < getHeight(); j++) {
+                        if (j != i && !MathUtils.equals(getEntry(j, col), 0.0, epsilon)) {
+                            isBasic = false;
+                            break;
+                        }
+                    }
+                    if (isBasic) {
                         row = i;
                     } else {
                         return null;
                     }
+                } else {
+                    // More than one row with 1.0 in this column
+                    return null;
+                }
+            } else if (!MathUtils.equals(entry, 0.0, epsilon)) {
+                // Entry is not 1 or 0, cannot be basic column
+                return null;
             }
         }
         return row;
     }
\ No newline at end of file
