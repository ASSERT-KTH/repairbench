diff --git a/tmp/47e61b65-477a-456d-90b0-7c8587af65c1_buggy.java b/tmp/de2f8442-00f9-482c-9901-f2e046a4c6c1_fixed.java
index 233a867..8620b42 100644
--- a/tmp/47e61b65-477a-456d-90b0-7c8587af65c1_buggy.java
+++ b/tmp/de2f8442-00f9-482c-9901-f2e046a4c6c1_fixed.java
@@ -1,73 +1,89 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
-
           // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
+          // Note: Unlike block inlining, it is not possible that a
           // parameter reference will be in a loop.
+          // Only block inlining can inline calls where the argument
+          // has side effects and is referenced multiple times.
           if (NodeUtil.mayEffectMutableState(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
                   block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
+
+          // Fix: If the argument has side effects, and the parameter
+          // is assigned to or modified in the function body (even once),
+          // disallow direct inlining.
+          if (NodeUtil.mayEffectMutableState(cArg, compiler)
+              && NodeUtil.isNameAssignedTo(block, fnParam.getString())) {
+            return CanInlineResult.NO;
+          }
+
+          // Fix: If the argument has side effects, and the parameter
+          // is used in a context where it might be modified (e.g. passed
+          // to a function that might mutate it), disallow direct inlining.
+          if (NodeUtil.mayHaveSideEffects(cArg, compiler)
+              && NodeUtil.isParameterModified(block, fnParam.getString())) {
+            return CanInlineResult.NO;
+          }
         }
 
         // Move to the next name.
         fnParam = fnParam.getNext();
       }
 
       // For every call argument check for side-effects, even if there
       // isn't a named parameter to match.
       if (cArg != null) {
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
