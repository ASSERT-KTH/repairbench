diff --git a/tmp/55ac4046-ed53-4cc3-ad73-0d7e09db2c9e_buggy.java b/tmp/d9c5093b-bf01-4921-b4f9-c7389612d388_fixed.java
index 233a867..4b78016 100644
--- a/tmp/55ac4046-ed53-4cc3-ad73-0d7e09db2c9e_buggy.java
+++ b/tmp/d9c5093b-bf01-4921-b4f9-c7389612d388_fixed.java
@@ -1,73 +1,99 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
 
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a
           // parameter reference will be in a loop.
           if (NodeUtil.mayEffectMutableState(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
                   block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
+
+          // Additional fix: If the parameter is modified in the function body,
+          // do NOT consider the original argument as "changing", so do NOT 
+          // treat that like a side-effect. Allow inlining for 'a.x=2' or 'a[2]=2'.
+          if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+            // If parameter is mutated, it's fine; but if the parameter is not mutated, it's not.
+            if (!NodeUtil.isParameterModifiedDirectly(block, fnParam.getString())) {
+              return CanInlineResult.NO;
+            }
+          }
         }
 
         // Move to the next name.
         fnParam = fnParam.getNext();
       }
 
       // For every call argument check for side-effects, even if there
       // isn't a named parameter to match.
       if (cArg != null) {
-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+        if (NodeUtil.mayHaveSideEffects(cArg, compiler) && fnParam == null) {
+          // For extra actual arguments beyond formal parameters, if they
+          // have side effects, we cannot inline.
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       }
     }
 
+    // Now check for "parameter reassignment dependencies":
+    // For every parameter, if the actual argument is a mutable property access
+    // AND the parameter is assigned in the body, but NOT through the property,
+    // then disallow inlining.
+    Node paramNode = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+    Node argNode = callNode.getFirstChild().getNext();
+    while (paramNode != null && argNode != null) {
+      if ((NodeUtil.isAssignmentToProperty(argNode) || NodeUtil.isAssignmentToArrayElement(argNode))
+          && NodeUtil.isParameterAssignedInFunctionBodyOutsideProperty(block, paramNode.getString())) {
+        return CanInlineResult.NO;
+      }
+      paramNode = paramNode.getNext();
+      argNode = argNode.getNext();
+    }
+
     return CanInlineResult.YES;
   }
\ No newline at end of file
