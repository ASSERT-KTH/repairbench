diff --git a/tmp/b25714d5-4835-4541-9349-1e01e4f5790c_buggy.java b/tmp/e0440472-58e2-4613-832c-8d5b990e9960_fixed.java
index 233a867..9f28f6a 100644
--- a/tmp/b25714d5-4835-4541-9349-1e01e4f5790c_buggy.java
+++ b/tmp/e0440472-58e2-4613-832c-8d5b990e9960_fixed.java
@@ -1,73 +1,88 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
-
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a
           // parameter reference will be in a loop.
           if (NodeUtil.mayEffectMutableState(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
                   block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
-        }
 
-        // Move to the next name.
+          // Do not directly inline if argument mutates a parameter
+          // which exists in subsequent arguments or is modified in the body,
+          // unless it's a "shallow" modification allowed for object/array properties.
+          if (NodeUtil.mayEffectMutableState(cArg, compiler)
+              && NodeUtil.getNameReferenceCount(block, fnParam.getString()) == 1) {
+            // Check if the single use is in a modification to the parameter itself - e.g. a = mod()
+            Node paramUse = NodeUtil.getFunctionParameterUse(block, fnParam.getString());
+            if (paramUse != null && NodeUtil.isParameterModified(paramUse)) {
+              // Only allow if this modification is a property or element assignment (a.x=..., a[2]=...)
+              Node parent = paramUse.getParent();
+              if (!(parent.isAssign() &&
+                  (parent.getFirstChild() == paramUse) &&
+                  (NodeUtil.isGet(propType(parent.getFirstChild())) || NodeUtil.isGetElem(parent.getFirstChild())))) {
+                return CanInlineResult.NO;
+              }
+            }
+          }
+        }
         fnParam = fnParam.getNext();
       }
 
       // For every call argument check for side-effects, even if there
       // isn't a named parameter to match.
       if (cArg != null) {
-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+        // Do not inline arguments with side-effects if not consumed by a parameter.
+        if (fnParam == null && NodeUtil.mayHaveSideEffects(cArg, compiler)) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
