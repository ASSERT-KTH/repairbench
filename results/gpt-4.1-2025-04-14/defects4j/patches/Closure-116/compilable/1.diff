diff --git a/tmp/c41a4e3f-ee80-40d3-8875-65321310d9fc_buggy.java b/tmp/b4a5ac83-ae4c-47e5-84db-2152f6db5ea7_fixed.java
index 233a867..dc05e0e 100644
--- a/tmp/c41a4e3f-ee80-40d3-8875-65321310d9fc_buggy.java
+++ b/tmp/b4a5ac83-ae4c-47e5-84db-2152f6db5ea7_fixed.java
@@ -1,73 +1,93 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
 
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
+          // Check: If an argument may effect mutable state,
+          // it must be only referenced once *and must only be referenced as a LHS*.
+          // However, it's safe to inline *if* this parameter is only ever written to,
+          // i.e., the argument is only assigned within the function (not read nor returned).
+          // But for the direct inlining, if the parameter is used in a way that could
+          // be visibly changed by argument evaluation order or side effects,
+          // and the argument mutates state, reject.
+
+          // Fix: For bug #1101, do NOT inline if the argument may affect mutable state (including assignments and property writes)
+          // and more than one reference, *or* if the argument may have side effects and is referenced anywhere in the function
+          // outside of simple assignment to itself.
+          String paramName = fnParam.getString();
+          int refCount = NodeUtil.getNameReferenceCount(block, paramName);
+
+          // If the argument mutates state and is referenced more than once, NO.
           if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+              && refCount > 1) {
+            return CanInlineResult.NO;
+          }
+          // If the argument has side effects, and is referenced (for any use), NO.
+          if (NodeUtil.mayHaveSideEffects(cArg, compiler)
+              && refCount > 0) {
             return CanInlineResult.NO;
           }
         }
 
         // Move to the next name.
         fnParam = fnParam.getNext();
       }
 
       // For every call argument check for side-effects, even if there
       // isn't a named parameter to match.
       if (cArg != null) {
+        // Only check for extra arguments (args w/o corresponding param)
+        // If we have extra arguments (cArg != null && fnParam == null),
+        // and the argument has side effects, reject.
+        if (fnParam == null) {
           if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
             return CanInlineResult.NO;
           }
+        }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
