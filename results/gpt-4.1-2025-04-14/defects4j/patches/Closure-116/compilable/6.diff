diff --git a/tmp/81f2df3d-ae24-473c-ad42-a6b5498891a0_buggy.java b/tmp/345d90f2-84a9-4814-94e9-60a6a163a0d2_fixed.java
index 233a867..7330bcd 100644
--- a/tmp/81f2df3d-ae24-473c-ad42-a6b5498891a0_buggy.java
+++ b/tmp/345d90f2-84a9-4814-94e9-60a6a163a0d2_fixed.java
@@ -1,73 +1,71 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
-    while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
-        if (cArg != null) {
+    Node tmpCArg = cArg;
+    Node tmpFnParam = fnParam;
 
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+    // Check arguments with respect to parameters
+    while (tmpCArg != null && tmpFnParam != null) {
+      // If the parameter is used more than once and the argument expression can affect mutable state,
+      // inlining is not safe.
+      if (NodeUtil.mayEffectMutableState(tmpCArg, compiler)
+          && NodeUtil.getNameReferenceCount(block, tmpFnParam.getString()) > 1) {
         return CanInlineResult.NO;
       }
+      // If the parameter is used only once, any argument is fine,
+      // but if the parameter is not used at all, just continue.
+      tmpCArg = tmpCArg.getNext();
+      tmpFnParam = tmpFnParam.getNext();
     }
 
-        // Move to the next name.
-        fnParam = fnParam.getNext();
-      }
-
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
-      if (cArg != null) {
-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+    // If there are more parameters than arguments, skip extra parameters -- those are fine.
+    // If there are more arguments than parameters, e.g. extra arguments passed to rest parameterless functions,
+    // these extra arguments cannot have side effects, as they are not referenced,
+    // so conservatively forbid side-effecting expressions here.
+    while (tmpCArg != null) {
+      if (NodeUtil.mayHaveSideEffects(tmpCArg, compiler)) {
         return CanInlineResult.NO;
       }
-        cArg = cArg.getNext();
-      }
+      tmpCArg = tmpCArg.getNext();
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
