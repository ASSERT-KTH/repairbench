diff --git a/tmp/3475a33d-c8d1-40c9-9792-feeb0065f131_buggy.java b/tmp/ea4be58e-b04a-427b-a473-195283761864_fixed.java
index 8da6fb2..6373792 100644
--- a/tmp/3475a33d-c8d1-40c9-9792-feeb0065f131_buggy.java
+++ b/tmp/ea4be58e-b04a-427b-a473-195283761864_fixed.java
@@ -1,163 +1,207 @@
-    /**
-     * Parse a date from ISO-8601 formatted string. It expects a format
-     * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:mm]]]
-     * 
-     * @param date ISO string to parse in the appropriate format.
-     * @param pos The position to start parsing from, updated to where parsing stopped.
-     * @return the parsed date
-     * @throws ParseException if the date is not in the appropriate format
-     */
 public static Date parse(String date, ParsePosition pos) throws ParseException {
     Exception fail = null;
     try {
         int offset = pos.getIndex();
 
         // extract year
         int year = parseInt(date, offset, offset += 4);
         if (checkOffset(date, offset, '-')) {
             offset += 1;
         }
 
         // extract month
         int month = parseInt(date, offset, offset += 2);
         if (checkOffset(date, offset, '-')) {
             offset += 1;
         }
 
         // extract day
         int day = parseInt(date, offset, offset += 2);
         // default time value
         int hour = 0;
         int minutes = 0;
         int seconds = 0;
         int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time
 
         // if the value has no time component (and no time zone), we are done
         boolean hasT = checkOffset(date, offset, 'T');
         
         if (!hasT && (date.length() <= offset)) {
             Calendar calendar = new GregorianCalendar(year, month - 1, day);
 
             pos.setIndex(offset);
             return calendar.getTime();
         }
 
         if (hasT) {
 
             // extract hours, minutes, seconds and milliseconds
             hour = parseInt(date, offset += 1, offset += 2);
             if (checkOffset(date, offset, ':')) {
                 offset += 1;
             }
 
             minutes = parseInt(date, offset, offset += 2);
             if (checkOffset(date, offset, ':')) {
                 offset += 1;
             }
             // second and milliseconds can be optional
             if (date.length() > offset) {
                 char c = date.charAt(offset);
                 if (c != 'Z' && c != '+' && c != '-') {
                     seconds = parseInt(date, offset, offset += 2);
                     if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds
                     // milliseconds can be optional in the format
                     if (checkOffset(date, offset, '.')) {
                         offset += 1;
-                            int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit
+                        int endOffset = indexOfNonDigit(date, offset); // fix: offset, not offset + 1
                         int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits
                         int fraction = parseInt(date, offset, parseEndOffset);
                         // compensate for "missing" digits
                         switch (parseEndOffset - offset) { // number of digits parsed
                         case 2:
                             milliseconds = fraction * 10;
                             break;
                         case 1:
                             milliseconds = fraction * 100;
                             break;
                         default:
                             milliseconds = fraction;
                         }
                         offset = endOffset;
                     }
                 }
             }
         }
 
         // extract timezone
         if (date.length() <= offset) {
             throw new IllegalArgumentException("No time zone indicator");
         }
 
         TimeZone timezone = null;
         char timezoneIndicator = date.charAt(offset);
 
         if (timezoneIndicator == 'Z') {
             timezone = TIMEZONE_UTC;
             offset += 1;
         } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {
-                String timezoneOffset = date.substring(offset);
+            // Find the end of the timezone offset
+            int tzOffsetStart = offset;
+            int tzOffsetEnd = date.length();
 
-                // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00
+            // Acceptable forms: +hh, +hhmm, +hh:mm
+            // Find either '+hh', '+hhmm', '+hh:mm'
+            // Try to consume first two digits (hour)
+            if (date.length() - tzOffsetStart < 3) {
+                throw new IndexOutOfBoundsException("Invalid time zone indicator: "+date.substring(tzOffsetStart));
+            }
+            // Collect the timezone offset up to allowed form
+            // Always at least '+hh'
+            String sign = date.substring(offset, offset+1); // '+' or '-'
+            int tzHour = parseInt(date, offset+1, offset+3);
+
+            StringBuilder timezoneOffset = new StringBuilder(sign);
+            timezoneOffset.append(String.format("%02d", tzHour));
+            int newOffset = offset + 3;
+
+            if (newOffset < date.length()) {
+                char next = date.charAt(newOffset);
+                if (next == ':') {
+                    // '+hh:mm'
+                    if (date.length() < newOffset + 3) {
+                        throw new IndexOutOfBoundsException("Invalid time zone indicator, invalid mm in " + date.substring(offset));
+                    }
+                    int tzMin = parseInt(date, newOffset + 1, newOffset + 3);
+                    timezoneOffset.append(":").append(String.format("%02d", tzMin));
+                    newOffset = newOffset + 3;
+                } else if (Character.isDigit(next)) {
+                    // '+hhmm'
+                    if (date.length() < newOffset + 2) {
+                        throw new IndexOutOfBoundsException("Invalid time zone indicator, invalid mm in " + date.substring(offset));
+                    }
+                    int tzMin = parseInt(date, newOffset, newOffset + 2);
+                    timezoneOffset.append(String.format("%02d", tzMin));
+                    newOffset = newOffset + 2;
+                }
+                // else it is just '+hh'
+            }
+
+            offset = newOffset;
+
+            // Normalize "+01" to "+0100"
+            if (timezoneOffset.length() == 3) {
+                timezoneOffset.append("00");
+            } else if (timezoneOffset.length() == 6 && timezoneOffset.charAt(3) == ':') {
+                // already in format "+hh:mm"
+            } else if (timezoneOffset.length() == 5) {
+                // "+hhmm", so add colon to produce "+hh:mm"
+                timezoneOffset.insert(3, ':');
+            }
+
+            String tzId;
+            if (timezoneOffset.length() == 6 && timezoneOffset.charAt(3) == ':') {
+                tzId = "GMT" + timezoneOffset.toString();
+            } else if (timezoneOffset.length() == 5) {
+                tzId = "GMT" + timezoneOffset.substring(0, 3) + ":" + timezoneOffset.substring(3, 5);
+            } else if (timezoneOffset.length() == 7 && timezoneOffset.charAt(3) == ':') {
+                // e.g., "+01:00"
+                tzId = "GMT" + timezoneOffset.toString();
+            } else {
+                tzId = "GMT" + timezoneOffset.toString();
+            }
 
-                offset += timezoneOffset.length();
             // 18-Jun-2015, tatu: Minor simplification, skip offset of "+0000"/"+00:00"
-                if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {
+            if ("GMT+0000".equals(tzId) || "GMT+00:00".equals(tzId)) {
                 timezone = TIMEZONE_UTC;
             } else {
-                    // 18-Jun-2015, tatu: Looks like offsets only work from GMT, not UTC...
-                    //    not sure why, but that's the way it looks. Further, Javadocs for
-                    //    `java.util.TimeZone` specifically instruct use of GMT as base for
-                    //    custom timezones... odd.
-                    String timezoneId = "GMT" + timezoneOffset;
-//                    String timezoneId = "UTC" + timezoneOffset;
-
-                    timezone = TimeZone.getTimeZone(timezoneId);
+                timezone = TimeZone.getTimeZone(tzId);
 
                 String act = timezone.getID();
-                    if (!act.equals(timezoneId)) {
+                if (!act.equals(tzId)) {
                     /* 22-Jan-2015, tatu: Looks like canonical version has colons, but we may be given
                      *    one without. If so, don't sweat.
                      *   Yes, very inefficient. Hopefully not hit often.
                      *   If it becomes a perf problem, add 'loose' comparison instead.
                      */
                     String cleaned = act.replace(":", "");
-                        if (!cleaned.equals(timezoneId)) {
-                            throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+timezoneId+" given, resolves to "
+                    if (!cleaned.equals(tzId.replace(":", ""))) {
+                        throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+tzId+" given, resolves to "
                                 +timezone.getID());
                     }
                 }
             }
         } else {
             throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator+"'");
         }
 
         Calendar calendar = new GregorianCalendar(timezone);
         calendar.setLenient(false);
         calendar.set(Calendar.YEAR, year);
         calendar.set(Calendar.MONTH, month - 1);
         calendar.set(Calendar.DAY_OF_MONTH, day);
         calendar.set(Calendar.HOUR_OF_DAY, hour);
         calendar.set(Calendar.MINUTE, minutes);
         calendar.set(Calendar.SECOND, seconds);
         calendar.set(Calendar.MILLISECOND, milliseconds);
 
         pos.setIndex(offset);
         return calendar.getTime();
         // If we get a ParseException it'll already have the right message/offset.
         // Other exception types can convert here.
     } catch (IndexOutOfBoundsException e) {
         fail = e;
     } catch (NumberFormatException e) {
         fail = e;
     } catch (IllegalArgumentException e) {
         fail = e;
     }
     String input = (date == null) ? null : ('"' + date + "'");
     String msg = fail.getMessage();
     if (msg == null || msg.isEmpty()) {
         msg = "("+fail.getClass().getName()+")";
     }
     ParseException ex = new ParseException("Failed to parse date [" + input + "]: " + msg, pos.getIndex());
     ex.initCause(fail);
     throw ex;
 }
\ No newline at end of file
