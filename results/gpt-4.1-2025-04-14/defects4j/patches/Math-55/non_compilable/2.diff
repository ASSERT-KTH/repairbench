diff --git a/tmp/250e64b3-b7e6-45c0-8687-403b5dbd146c_buggy.java b/tmp/2314df5d-6d98-44a8-baee-8e067bf8b08b_fixed.java
index 1478ee1..42ac014 100644
--- a/tmp/250e64b3-b7e6-45c0-8687-403b5dbd146c_buggy.java
+++ b/tmp/2314df5d-6d98-44a8-baee-8e067bf8b08b_fixed.java
@@ -1,24 +1,19 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+    // Kahan's correction for cancellation errors in cross product computation
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+    // Compute rho as an 8-bit approximation of v1.v2 / v2.v2
+    double v1DotV2 = v1.dotProduct(v2);
+    double v2DotV2 = v2.dotProduct(v2);
+    double rho = (v2DotV2 == 0) ? 0 : Math.rint((256 * v1DotV2 / v2DotV2)) / 256.0;
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+    // Compute compensated v1: v3 = v1 - rho * v2
+    Vector3D v3 = v1.subtract(v2.scalarMultiply(rho));
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Return cross product of compensated v3 and v2
+    return new Vector3D(
+            v3.y * v2.z - v3.z * v2.y,
+            v3.z * v2.x - v3.x * v2.z,
+            v3.x * v2.y - v3.y * v2.x);
 
 }
\ No newline at end of file
