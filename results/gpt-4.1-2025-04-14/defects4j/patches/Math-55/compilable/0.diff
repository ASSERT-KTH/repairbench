diff --git a/tmp/9e704a34-f500-4be0-9f69-1441aea958fa_buggy.java b/tmp/6386e68e-173e-4bce-b892-beacbb4a485e_fixed.java
index 1478ee1..f1b7e70 100644
--- a/tmp/9e704a34-f500-4be0-9f69-1441aea958fa_buggy.java
+++ b/tmp/6386e68e-173e-4bce-b892-beacbb4a485e_fixed.java
@@ -1,24 +1,32 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+    // Implement Kahan's trick for precision: compute v3 = v1 - rho v2 with
+    // rho = nearestFloat(v1·v2 / v2·v2) (here, using 8 bits of mantissa for rho).
+    final double normV2Squared = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
+    double rho = (v1.x * v2.x + v1.y * v2.y + v1.z * v2.z) / normV2Squared;
+    if (Double.isNaN(rho) || Double.isInfinite(rho)) {
+        // cannot precondition, just do the straightforward cross product
+        return new Vector3D(
+            v1.y * v2.z - v1.z * v2.y,
+            v1.z * v2.x - v1.x * v2.z,
+            v1.x * v2.y - v1.y * v2.x
+        );
+    }
+    // round rho to 8 significant bits
+    final long bits = Double.doubleToRawLongBits(rho);
+    // zero-out lower bits for mantissa: 52-8=44 bits
+    final long mask = ~((1L << 44) - 1); // keep sign, exponent and first 8 bits of mantissa
+    final double rhoRounded = Double.longBitsToDouble(bits & mask);
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // v3 = v1 - rhoRounded * v2
+    final double v3x = v1.x - rhoRounded * v2.x;
+    final double v3y = v1.y - rhoRounded * v2.y;
+    final double v3z = v1.z - rhoRounded * v2.z;
 
+    // cross(v3, v2)
+    return new Vector3D(
+        v3y * v2.z - v3z * v2.y,
+        v3z * v2.x - v3x * v2.z,
+        v3x * v2.y - v3y * v2.x
+    );
 }
\ No newline at end of file
