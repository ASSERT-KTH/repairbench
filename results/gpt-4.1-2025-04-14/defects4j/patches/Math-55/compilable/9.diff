diff --git a/tmp/c46b1986-7571-4eb3-83e4-7f3c5b86e472_buggy.java b/tmp/a36b437c-a1c4-43d8-8ef5-6937e23cd648_fixed.java
index 1478ee1..00aba7c 100644
--- a/tmp/c46b1986-7571-4eb3-83e4-7f3c5b86e472_buggy.java
+++ b/tmp/a36b437c-a1c4-43d8-8ef5-6937e23cd648_fixed.java
@@ -1,24 +1,29 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+    // Kahan's robust cross product algorithm for improved cancellation
+    // See: http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
+    // Compute approximation of rho = (v1.v2)/(v2.v2)
+    double v2Norm2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
+    double dot = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
+    double rho = 0;
+    if (v2Norm2 != 0) {
+        // 8-bit approximation: Take high bits only, to limit cancellation
+        long dotBits = Double.doubleToRawLongBits(dot / v2Norm2);
+        // Clear all but the highest 8 exponent+magnitude bits (masking mantissa)
+        dotBits &= 0xFFF8000000000000L; // keep sign, exponent and top 8 mantissa bits
+        rho = Double.longBitsToDouble(dotBits);
+    }
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Compute v3 = v1 - rho * v2
+    double v3x = v1.x - rho * v2.x;
+    double v3y = v1.y - rho * v2.y;
+    double v3z = v1.z - rho * v2.z;
 
+    // Compute cross product from v3 and v2
+    return new Vector3D(
+        v3y * v2.z - v3z * v2.y,
+        v3z * v2.x - v3x * v2.z,
+        v3x * v2.y - v3y * v2.x
+    );
 }
\ No newline at end of file
