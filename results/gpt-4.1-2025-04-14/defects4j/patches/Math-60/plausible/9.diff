diff --git a/tmp/9a85dae9-d4e7-4f22-aa93-b4f2368a7fe3_buggy.java b/tmp/892a5a8c-84e4-4f2f-8931-3fab8f93583f_fixed.java
index 3127f85..edfa1d0 100644
--- a/tmp/9a85dae9-d4e7-4f22-aa93-b4f2368a7fe3_buggy.java
+++ b/tmp/892a5a8c-84e4-4f2f-8931-3fab8f93583f_fixed.java
@@ -1,24 +1,39 @@
 /**
  * For this distribution, {@code X}, this method returns {@code P(X < x)}.
  * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
  * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
  *
  * @param x Value at which the CDF is evaluated.
  * @return CDF evaluated at {@code x}.
  * @throws MathException if the algorithm fails to converge
  */
 public double cumulativeProbability(double x) throws MathException {
+    if (Double.isNaN(x)) {
+        return Double.NaN;
+    }
+    if (x == Double.POSITIVE_INFINITY) {
+        return 1.0;
+    }
+    if (x == Double.NEGATIVE_INFINITY) {
+        return 0.0;
+    }
     final double dev = x - mean;
+    // Top-code extreme values: 40 std deviations from the mean
+    if (dev < -40 * standardDeviation) {
+        return 0.0;
+    }
+    if (dev > 40 * standardDeviation) {
+        return 1.0;
+    }
     try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+        return 0.5 * (1.0 + Erf.erf((dev) / (standardDeviation * FastMath.sqrt(2.0))));
     } catch (MaxIterationsExceededException ex) {
         if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
+            return 0.0;
         } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
+            return 1.0;
         } else {
             throw ex;
         }
     }
 }
\ No newline at end of file
