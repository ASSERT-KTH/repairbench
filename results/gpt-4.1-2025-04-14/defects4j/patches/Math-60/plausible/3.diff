diff --git a/tmp/ad8e6cbc-57f9-4cfb-9b07-9db85229d23e_buggy.java b/tmp/8b2f5e6b-fe84-49ee-8d44-a8ac537753ce_fixed.java
index 3127f85..4804681 100644
--- a/tmp/ad8e6cbc-57f9-4cfb-9b07-9db85229d23e_buggy.java
+++ b/tmp/8b2f5e6b-fe84-49ee-8d44-a8ac537753ce_fixed.java
@@ -1,24 +1,24 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
 public double cumulativeProbability(double x) throws MathException {
+    if (Double.isNaN(x)) {
+        return Double.NaN;
+    }
+    if (x == Double.POSITIVE_INFINITY) {
+        return 1.0;
+    }
+    if (x == Double.NEGATIVE_INFINITY) {
+        return 0.0;
+    }
     final double dev = x - mean;
+    // Top-code for extreme values (compare to +/-40 stddev as in Javadoc)
+    if (dev < -40.0 * standardDeviation) {
+        return 0.0;
+    } else if (dev > 40.0 * standardDeviation) {
+        return 1.0;
+    }
     try {
         return 0.5 * (1.0 + Erf.erf((dev) /
                 (standardDeviation * FastMath.sqrt(2.0))));
     } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
-                throw ex;
-            }
+        throw new MathException(ex);
     }
 }
\ No newline at end of file
