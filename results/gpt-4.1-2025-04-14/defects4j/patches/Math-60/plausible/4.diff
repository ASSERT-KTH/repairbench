diff --git a/tmp/4a9a7449-104e-4d49-bbe7-538bef354a90_buggy.java b/tmp/4bd9872a-f950-4129-9790-7534be426b43_fixed.java
index 3127f85..c2a5db9 100644
--- a/tmp/4a9a7449-104e-4d49-bbe7-538bef354a90_buggy.java
+++ b/tmp/4bd9872a-f950-4129-9790-7534be426b43_fixed.java
@@ -1,24 +1,42 @@
 /**
  * For this distribution, {@code X}, this method returns {@code P(X < x)}.
  * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
  * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
  *
  * @param x Value at which the CDF is evaluated.
  * @return CDF evaluated at {@code x}.
  * @throws MathException if the algorithm fails to converge
  */
 public double cumulativeProbability(double x) throws MathException {
+    // Handle extreme values explicitly
+    if (Double.isNaN(x)) {
+        return Double.NaN;
+    }
+    if (x == Double.NEGATIVE_INFINITY) {
+        return 0.0;
+    }
+    if (x == Double.POSITIVE_INFINITY) {
+        return 1.0;
+    }
     final double dev = x - mean;
+    // Top-coding for extreme values (avoid numerical problems in erf)
+    if (x < (mean - 40 * standardDeviation)) {
+        return 0.0;
+    }
+    if (x > (mean + 40 * standardDeviation)) {
+        return 1.0;
+    }
     try {
         return 0.5 * (1.0 + Erf.erf((dev) /
                 (standardDeviation * FastMath.sqrt(2.0))));
     } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
+        // Retain prior handling for rare failures
+        if (x < (mean - 20 * standardDeviation)) {
+            return 0.0;
         } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
+            return 1.0;
         } else {
             throw ex;
         }
     }
 }
\ No newline at end of file
