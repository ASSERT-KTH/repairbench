diff --git a/tmp/61379c73-7dac-4b74-86f6-cf0a4c191baf_buggy.java b/tmp/f076800a-e13c-44fe-a858-4d6a4a2f5053_fixed.java
index 3127f85..d28fb40 100644
--- a/tmp/61379c73-7dac-4b74-86f6-cf0a4c191baf_buggy.java
+++ b/tmp/f076800a-e13c-44fe-a858-4d6a4a2f5053_fixed.java
@@ -1,24 +1,35 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
 public double cumulativeProbability(double x) throws MathException {
+    // Handle extreme values explicitly to avoid computation issues
+    if (Double.isNaN(x)) {
+        return Double.NaN;
+    }
+    if (x == Double.POSITIVE_INFINITY) {
+        return 1.0;
+    }
+    if (x == Double.NEGATIVE_INFINITY) {
+        return 0.0;
+    }
+
     final double dev = x - mean;
+    final double threshold = 40 * standardDeviation;
+    if (dev < -threshold) {
+        return 0.0;
+    }
+    if (dev > threshold) {
+        return 1.0;
+    }
+
     try {
         return 0.5 * (1.0 + Erf.erf((dev) /
                 (standardDeviation * FastMath.sqrt(2.0))));
     } catch (MaxIterationsExceededException ex) {
+        // Fallback is not likely needed anymore, but maintain for safety
         if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
             return 0;
         } else if (x > (mean + 20 * standardDeviation)) {
             return 1;
         } else {
             throw ex;
         }
     }
 }
\ No newline at end of file
