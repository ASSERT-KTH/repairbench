diff --git a/tmp/8105549a-69d8-4a88-885e-b22e60906395_buggy.java b/tmp/483596b8-550a-4482-925a-9c0db8e3e49b_fixed.java
index bb3193c..0b9c205 100644
--- a/tmp/8105549a-69d8-4a88-885e-b22e60906395_buggy.java
+++ b/tmp/483596b8-550a-4482-925a-9c0db8e3e49b_fixed.java
@@ -1,52 +1,65 @@
 /**
  * For each qualified name N in the global scope, we check if:
  * (a) No ancestor of N is ever aliased or assigned an unknown value type.
  *     (If N = "a.b.c", "a" and "a.b" are never aliased).
  * (b) N has exactly one write, and it lives in the global scope.
  * (c) N is aliased in a local scope.
  *
  * If (a) is true, then GlobalNamespace must know all the writes to N.
  * If (a) and (b) are true, then N cannot change during the execution of
  *    a local scope.
  * If (a) and (b) and (c) are true, then the alias can be inlined if the
  *    alias obeys the usual rules for how we decide whether a variable is
  *    inlineable.
  * @see InlineVariables
  */
 private void inlineAliases(GlobalNamespace namespace) {
   // Invariant: All the names in the worklist meet condition (a).
   Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());
   while (!workList.isEmpty()) {
     Name name = workList.pop();
 
     // Don't attempt to inline a getter or setter property as a variable.
     if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
       continue;
     }
 
+    // Skip if this is a function argument (like 'arguments').
+    // Do not attempt to inline aliases of variables in local scopes,
+    // especially function arguments (arguments object), which are not safe.
+    if (name.inExterns || name.isModule || (name.getDeclaration() != null &&
+        name.getDeclaration().isFunctionArgument())) {
+      continue;
+    }
+
     if (name.globalSets == 1 && name.localSets == 0 &&
         name.aliasingGets > 0) {
       // {@code name} meets condition (b). Find all of its local aliases
       // and try to inline them.
       List<Ref> refs = Lists.newArrayList(name.getRefs());
       for (Ref ref : refs) {
         if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
+          // Do not inline if the name refers to a function argument (like 'arguments')!
+          if (name.getDeclaration() != null &&
+              name.getDeclaration().isFunctionArgument()) {
+            continue;
+          }
           // {@code name} meets condition (c). Try to inline it.
           if (inlineAliasIfPossible(ref, namespace)) {
             name.removeRef(ref);
           }
         }
       }
     }
 
     // Check if {@code name} has any aliases left after the
     // local-alias-inlining above.
     if ((name.type == Name.Type.OBJECTLIT ||
          name.type == Name.Type.FUNCTION) &&
         name.aliasingGets == 0 && name.props != null) {
       // All of {@code name}'s children meet condition (a), so they can be
       // added to the worklist.
       workList.addAll(name.props);
     }
   }
 }
\ No newline at end of file
