diff --git a/tmp/9a14ccde-c18a-4b95-acec-318f45a41f93_buggy.java b/tmp/b3f3145d-a94a-4895-b2cb-d8f0e3feb6ae_fixed.java
index bf9c086..ec0464b 100644
--- a/tmp/9a14ccde-c18a-4b95-acec-318f45a41f93_buggy.java
+++ b/tmp/b3f3145d-a94a-4895-b2cb-d8f0e3feb6ae_fixed.java
@@ -1,54 +1,71 @@
 /**
  * Visits a CALL node.
  *
  * @param t The node traversal object that supplies context, such as the
  * scope chain to use in name lookups as well as error reporting.
  * @param n The node being visited.
  */
 private void visitCall(NodeTraversal t, Node n) {
   Node child = n.getFirstChild();
   JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
   if (!childType.canBeCalled()) {
     report(t, n, NOT_CALLABLE, childType.toString());
     ensureTyped(t, n);
     return;
   }
 
   // A couple of types can be called as if they were functions.
   // If it is a function type, then validate parameters.
   if (childType instanceof FunctionType) {
     FunctionType functionType = (FunctionType) childType;
 
     boolean isExtern = false;
     JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
     if(functionJSDocInfo != null) {
       String sourceName = functionJSDocInfo.getSourceName();
       CompilerInput functionSource = compiler.getInput(sourceName);
-        isExtern = functionSource.isExtern();
+      isExtern = functionSource != null && functionSource.isExtern();
     }
 
     // Non-native constructors should not be called directly
     // unless they specify a return type and are defined
     // in an extern.
     if (functionType.isConstructor() &&
         !functionType.isNativeObjectType() &&
         (functionType.getReturnType().isUnknownType() ||
          functionType.getReturnType().isVoidType() ||
          !isExtern)) {
       report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
     }
 
     // Functions with explcit 'this' types must be called in a GETPROP
     // or GETELEM.
+    ObjectType thisType = functionType.getTypeOfThis();
+    // Check if it's an explicit 'this' (not the default global one)
+    // When the function syntax explicitly declares a required this-type,
+    // and the call is not a property call (GETPROP, GETELEM), warn.
+    if (functionType.hasThisType() &&
+        !functionType.isInstanceType() &&
+        !NodeUtil.isGet(n.getFirstChild().getType())) {
+      // Only check when this type is not the default global object.
+      // In Closure Compiler, hasThisType() may return true for arrow functions (which are not "callable with explicit this").
+      // The logic, as in test, is to warn if this-type ≠ UNKNOWN and ≠ global, and call is not via GETPROP/GETELEM.
+      if (!functionType.getTypeOfThis().isUnknownType() &&
+          !functionType.getTypeOfThis().isAllType() &&
+          !NodeUtil.isGet(child.getType())) {
+        report(t, n, FUNCTION_THIS_ARG_EXPECTED,
+            childType.toString());
+      }
+    }
 
     visitParameterList(t, n, functionType);
     ensureTyped(t, n, functionType.getReturnType());
   } else {
     ensureTyped(t, n);
   }
 
   // TODO: Add something to check for calls of RegExp objects, which is not
   // supported by IE.  Either say something about the return type or warn
   // about the non-portability of the call or both.
 }
\ No newline at end of file
