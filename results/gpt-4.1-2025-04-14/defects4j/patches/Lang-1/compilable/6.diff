diff --git a/tmp/f812b7c9-31e9-444a-8947-fbd69a56ccb0_buggy.java b/tmp/b9d124f1-5104-40f3-b02e-44023a2dc920_fixed.java
index e1cbe77..999cdea 100644
--- a/tmp/f812b7c9-31e9-444a-8947-fbd69a56ccb0_buggy.java
+++ b/tmp/b9d124f1-5104-40f3-b02e-44023a2dc920_fixed.java
@@ -1,196 +1,224 @@
-    /**
-     * <p>Turns a string value into a java.lang.Number.</p>
-     *
-     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
-     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
-     * prefix is more than 8 - or BigInteger if there are more than 16 digits.
-     * </p>
-     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
-     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts 
-     * trying to create successively larger types from the type specified
-     * until one is found that can represent the value.</p>
-     *
-     * <p>If a type specifier is not found, it will check for a decimal point
-     * and then try successively larger types from <code>Integer</code> to
-     * <code>BigInteger</code> and from <code>Float</code> to
-    * <code>BigDecimal</code>.</p>
-    * 
-     * <p>
-     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
-     * be Integer, Long or BigDecimal as appropriate.
-     * </p>
-     *
-     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
-     *
-     * <p>This method does not trim the input string, i.e., strings with leading
-     * or trailing spaces will generate NumberFormatExceptions.</p>
-     *
-     * @param str  String containing a number, may be null
-     * @return Number created from the string (or null if the input is null)
-     * @throws NumberFormatException if the value cannot be converted
-     */
 public static Number createNumber(final String str) throws NumberFormatException {
     if (str == null) {
         return null;
     }
     if (StringUtils.isBlank(str)) {
         throw new NumberFormatException("A blank string is not a valid number");
     }
     // Need to deal with all possible hex prefixes here
     final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
     int pfxLen = 0;
+    String hexPfx = null;
     for(final String pfx : hex_prefixes) {
         if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+            pfxLen = pfx.length();
+            hexPfx = pfx;
             break;
         }
     }
     if (pfxLen > 0) { // we have a hex number
-            final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
-                return createBigInteger(str);
+        // Remove sign for digit count if present
+        int hexStartIdx = pfxLen;
+        boolean negative = false;
+        if (str.charAt(0) == '-') {
+            negative = true;
         }
-            if (hexDigits > 8) { // too many for an int
-                return createLong(str);
+        // The 0x or # prefix always comes after sign so counting hex digits after that
+        String rawDigits = str.substring(pfxLen);
+        // skip any leading zeros in digits for correct digit length test
+        int i=0;
+        while(i<rawDigits.length() && rawDigits.charAt(i)=='0') i++;
+        int hexDigits = rawDigits.length() - i;
+        // Now, Integer supports up to 8 hex digits (without sign), but if top digit is > 7, must use Long
+        // Long supports up to 16 hex digits; above that BigInteger
+
+        // Remove the prefix
+        String cleanStr = str.substring(0);
+
+        // Now, extract prefix for use below.
+        // For all, test cleanStr without sign
+        String hexDigitsStr = str.substring(pfxLen);
+
+        // Remove sign for bounds checks
+        String testDigits = hexDigitsStr;
+        if (testDigits.length() > 0 && (testDigits.charAt(0) == '+' || testDigits.charAt(0)=='-')) {
+            testDigits = testDigits.substring(1);
         }
+        // Remove leading zeros for actual digit length for bounds
+        testDigits = testDigits.replaceFirst("^0+", "");
+
+        // For hex numbers, the case is subtle:
+        // - If string (without prefix) is 1..8 digits -> Integer
+        // - If >8 and <=16 digits -> Long
+        // - If >16 digits -> BigInteger
+        //
+        // BUT:
+        // If the unsigned value doesn't fit Integer, must use Long.
+        // That is, 0xFFFFFFFF (> Integer.MAX_VALUE), is valid for Long.
+
+        // For Integer: #digits <=8
+        if (hexDigitsStr.length() <= 8) {
+            // Parse as Integer
+            try {
                 return createInteger(str);
+            } catch (NumberFormatException ex) {
+                // Fallback to Long
+                try {
+                    return createLong(str);
+                } catch(NumberFormatException ex2) {
+                    // Fallback to BigInteger
+                    return createBigInteger(str);
+                }
+            }
+        }
+        // For Long: #digits <=16
+        else if (hexDigitsStr.length() <= 16) {
+            // Actually, must parse as Long
+            try {
+                return createLong(str);
+            } catch(NumberFormatException ex) {
+                // Fallback to BigInteger
+                return createBigInteger(str);
+            }
+        }
+        // >16 digits: BigInteger
+        else {
+            return createBigInteger(str);
+        }
     }
     final char lastChar = str.charAt(str.length() - 1);
     String mant;
     String dec;
     String exp;
     final int decPos = str.indexOf('.');
     final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
-
     int numDecimals = 0; // Check required precision (LANG-693)
     if (decPos > -1) { // there is a decimal point
 
         if (expPos > -1) { // there is an exponent
             if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
                 throw new NumberFormatException(str + " is not a valid number.");
             }
             dec = str.substring(decPos + 1, expPos);
         } else {
             dec = str.substring(decPos + 1);
         }
         mant = str.substring(0, decPos);
         numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
     } else {
         if (expPos > -1) {
             if (expPos > str.length()) { // prevents double exponent causing IOOBE
                 throw new NumberFormatException(str + " is not a valid number.");
             }
             mant = str.substring(0, expPos);
         } else {
             mant = str;
         }
         dec = null;
     }
     if (!Character.isDigit(lastChar) && lastChar != '.') {
         if (expPos > -1 && expPos < str.length() - 1) {
             exp = str.substring(expPos + 1, str.length() - 1);
         } else {
             exp = null;
         }
         //Requesting a specific type..
         final String numeric = str.substring(0, str.length() - 1);
         final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
         switch (lastChar) {
             case 'l' :
             case 'L' :
                 if (dec == null
                     && exp == null
                     && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                     try {
                         return createLong(numeric);
                     } catch (final NumberFormatException nfe) { // NOPMD
                         // Too big for a long
                     }
                     return createBigInteger(numeric);
 
                 }
                 throw new NumberFormatException(str + " is not a valid number.");
             case 'f' :
             case 'F' :
                 try {
                     final Float f = NumberUtils.createFloat(numeric);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         //If it's too big for a float or the float value = 0 and the string
                         //has non-zeros in it, then float does not have the precision we want
                         return f;
                     }
 
                 } catch (final NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
                 //$FALL-THROUGH$
             case 'd' :
             case 'D' :
                 try {
                     final Double d = NumberUtils.createDouble(numeric);
                     if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (final NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
                 try {
                     return createBigDecimal(numeric);
                 } catch (final NumberFormatException e) { // NOPMD
                     // ignore the bad number
                 }
                 //$FALL-THROUGH$
             default :
                 throw new NumberFormatException(str + " is not a valid number.");
 
         }
     }
     //User doesn't have a preference on the return type, so let's start
     //small and go from there...
     if (expPos > -1 && expPos < str.length() - 1) {
         exp = str.substring(expPos + 1, str.length());
     } else {
         exp = null;
     }
     if (dec == null && exp == null) { // no decimal point and no exponent
         //Must be an Integer, Long, Biginteger
         try {
             return createInteger(str);
         } catch (final NumberFormatException nfe) { // NOPMD
             // ignore the bad number
         }
         try {
             return createLong(str);
         } catch (final NumberFormatException nfe) { // NOPMD
             // ignore the bad number
         }
         return createBigInteger(str);
     }
 
     //Must be a Float, Double, BigDecimal
     final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
     try {
         if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float
             final Float f = createFloat(str);
             if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                 return f;
             }
         }
     } catch (final NumberFormatException nfe) { // NOPMD
         // ignore the bad number
     }
     try {
         if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double
             final Double d = createDouble(str);
             if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                 return d;
             }
         }
     } catch (final NumberFormatException nfe) { // NOPMD
         // ignore the bad number
     }
 
     return createBigDecimal(str);
 }
\ No newline at end of file
