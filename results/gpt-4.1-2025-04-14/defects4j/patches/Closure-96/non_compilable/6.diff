diff --git a/tmp/8120be64-def3-4ec2-acab-bb7b42d7ebee_buggy.java b/tmp/f2e63133-c398-4d30-84bb-4cb7abc5763e_fixed.java
index e0ecec8..929dd88 100644
--- a/tmp/8120be64-def3-4ec2-acab-bb7b42d7ebee_buggy.java
+++ b/tmp/f2e63133-c398-4d30-84bb-4cb7abc5763e_fixed.java
@@ -1,35 +1,58 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+
+  boolean isVarArgs = functionType.isVarArgs();
+  JSType varArgsType = null;
+  if (isVarArgs) {
+    // Grab the type of the last parameter (the ... var_args)
+    // so we can match additional arguments against it.
+    Node lastParam = null;
+    for (Node paramNode : functionType.getParameters()) {
+      lastParam = paramNode;
+    }
+    if (lastParam != null) {
+      varArgsType = getJSType(lastParam);
+    }
+  }
+
+  // Match provided arguments to formal parameters.
+  while (arguments.hasNext()) {
+    if (parameters.hasNext()) {
       parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
-
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
+    } else if (isVarArgs) {
+      argument = arguments.next();
+      ordinal++;
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), varArgsType, call, ordinal);
+    } else {
+      // Extra argument; skip (error is reported below for argument count)
+      arguments.next();
+      ordinal++;
+    }
   }
 
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
             validator.getReadableJSTypeName(call.getFirstChild(), false),
             String.valueOf(numArgs), String.valueOf(minArgs),
             maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
