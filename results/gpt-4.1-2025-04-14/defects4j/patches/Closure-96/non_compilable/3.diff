diff --git a/tmp/7b953452-029e-4c80-b11d-d1e4d993de59_buggy.java b/tmp/b030d7b6-876d-411a-9f48-8c411ecb247d_fixed.java
index e0ecec8..1e0639d 100644
--- a/tmp/7b953452-029e-4c80-b11d-d1e4d993de59_buggy.java
+++ b/tmp/b030d7b6-876d-411a-9f48-8c411ecb247d_fixed.java
@@ -1,35 +1,56 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+
+    boolean isVarArgs = functionType.isVarArgs();
+    JSType varArgsType = null;
+    if (isVarArgs) {
+      // Get the last parameter's type for var_args
+      Node lastParam = null;
+      for (Node param : functionType.getParameters()) {
+        lastParam = param;
+      }
+      if (lastParam != null) {
+        varArgsType = getJSType(lastParam);
+      }
+    }
+
+    // Match fixed parameters
+    while (arguments.hasNext() && parameters.hasNext()) {
       parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
-
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
 
+    // Match remaining arguments against the var_args type
+    if (isVarArgs && varArgsType != null) {
+      while (arguments.hasNext()) {
+        argument = arguments.next();
+        ordinal++;
+        validator.expectArgumentMatchesParameter(t, argument,
+            getJSType(argument), varArgsType, call, ordinal);
+      }
+    }
+
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
