diff --git a/tmp/a7dc00c0-c10b-4dbe-a065-9fe08e1e0f0b_buggy.java b/tmp/a9ef7461-ce6d-487f-9420-985c14fd16bc_fixed.java
index e0ecec8..19bbd6f 100644
--- a/tmp/a7dc00c0-c10b-4dbe-a065-9fe08e1e0f0b_buggy.java
+++ b/tmp/a9ef7461-ce6d-487f-9420-985c14fd16bc_fixed.java
@@ -1,35 +1,61 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+
+    // Expand 'parameter' so that, for var_args, we keep passing the var_args parameter.
+    Node varArgsParameter = null;
+    boolean isVarArgs = functionType.isVarArgs();
+    int parametersCount = 0;
+    while (parameters.hasNext()) {
       parameter = parameters.next();
+      parametersCount++;
+      if (isVarArgs && !parameters.hasNext()) {
+        varArgsParameter = parameter;
+      }
+    }
+
+    // Reset the iterators.
+    arguments = call.children().iterator();
+    arguments.next(); // skip the function name
+    parameters = functionType.getParameters().iterator();
+
+    ordinal = 0;
+    int paramIndex = 0;
+    parameter = null;
+    while (arguments.hasNext()) {
       argument = arguments.next();
       ordinal++;
-
+      if (parameters.hasNext()) {
+        parameter = parameters.next();
+        paramIndex++;
+      } else if (isVarArgs && varArgsParameter != null) {
+        parameter = varArgsParameter;
+      } else {
+        parameter = null;
+      }
+      if (parameter != null) {
         validator.expectArgumentMatchesParameter(t, argument,
             getJSType(argument), getJSType(parameter), call, ordinal);
       }
+    }
 
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
