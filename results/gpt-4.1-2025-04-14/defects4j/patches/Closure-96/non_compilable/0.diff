diff --git a/tmp/4cde2639-355a-4ec2-b132-9e8a2eeb85e2_buggy.java b/tmp/348f2a5b-7823-42fe-988e-bd4d02a9cfbc_fixed.java
index e0ecec8..bfc9ea7 100644
--- a/tmp/4cde2639-355a-4ec2-b132-9e8a2eeb85e2_buggy.java
+++ b/tmp/348f2a5b-7823-42fe-988e-bd4d02a9cfbc_fixed.java
@@ -1,35 +1,43 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+  boolean isVarArgs = functionType.isVarArgs();
+
+  while (arguments.hasNext()) {
+    if (parameters.hasNext()) {
       parameter = parameters.next();
+    } else if (isVarArgs) {
+      // Use the last parameter for var_args
+      parameter = functionType.getParameters().isEmpty() ? null :
+          functionType.getParameters().getLast();
+    } else {
+      parameter = null; // No more parameters.
+    }
     argument = arguments.next();
     ordinal++;
-
+    if (parameter != null) {
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
+  }
 
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
             validator.getReadableJSTypeName(call.getFirstChild(), false),
             String.valueOf(numArgs), String.valueOf(minArgs),
             maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
