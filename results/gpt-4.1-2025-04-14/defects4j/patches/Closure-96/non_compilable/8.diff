diff --git a/tmp/65410a7d-00c8-4553-992a-4de9df404358_buggy.java b/tmp/de8e8ff8-3ee2-4d67-94bf-59273d547e9c_fixed.java
index e0ecec8..0648190 100644
--- a/tmp/65410a7d-00c8-4553-992a-4de9df404358_buggy.java
+++ b/tmp/de8e8ff8-3ee2-4d67-94bf-59273d547e9c_fixed.java
@@ -1,35 +1,56 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+
+    boolean isVarArgsFunction = functionType.isVarArgs();
+
+    // Use the last parameter for var_args, if any.
+    Node varArgsParameter = null;
+    if (isVarArgsFunction) {
+      // Find the last parameter node (the var_args node).
+      Iterator<Node> paramIter = functionType.getParameters().iterator();
+      while (paramIter.hasNext()) {
+        varArgsParameter = paramIter.next();
+      }
+    }
+
+    // Walk arguments and either advance parameters or hold at var_args
+    while (arguments.hasNext()) {
       argument = arguments.next();
       ordinal++;
 
+      if (parameters.hasNext()) {
+        parameter = parameters.next();
+      } else if (isVarArgsFunction && varArgsParameter != null) {
+        parameter = varArgsParameter;
+      } else {
+        // Extra arguments, don't try to match a parameter node
+        parameter = null;
+      }
+
+      if (parameter != null) {
         validator.expectArgumentMatchesParameter(t, argument,
             getJSType(argument), getJSType(parameter), call, ordinal);
       }
+    }
 
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
