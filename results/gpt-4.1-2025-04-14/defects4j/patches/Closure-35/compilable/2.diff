diff --git a/tmp/d9170f7f-ca0d-45dd-a16b-17f832652be0_buggy.java b/tmp/08fc4095-b7dc-48ee-b5a8-86f28a4be186_fixed.java
index d57736b..d0c35bf 100644
--- a/tmp/d9170f7f-ca0d-45dd-a16b-17f832652be0_buggy.java
+++ b/tmp/08fc4095-b7dc-48ee-b5a8-86f28a4be186_fixed.java
@@ -1,39 +1,42 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
+            JSType typeToInfer;
             if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+              // If the property is missing, make it (void|expectedType)
+              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
+            } else {
+              // If the property already exists, widen to the least supertype of current and expected.
+              typeToInfer = objType.getPropertyType(prop).getLeastSupertype(propType);
             }
             objType.defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
     }
   }
\ No newline at end of file
