diff --git a/tmp/15cc3f29-2417-4a93-a568-28f4ffcb3059_buggy.java b/tmp/fdc0823a-9c89-4cff-b661-d490707c1b1e_fixed.java
index 904dba7..cf2535b 100644
--- a/tmp/15cc3f29-2417-4a93-a568-28f4ffcb3059_buggy.java
+++ b/tmp/fdc0823a-9c89-4cff-b661-d490707c1b1e_fixed.java
@@ -1,46 +1,42 @@
 private String format(JSError error, boolean warning) {
   // extract source excerpt
   SourceExcerptProvider source = getSource();
   String sourceExcerpt = source == null ? null :
       excerpt.get(
           source, error.sourceName, error.lineNumber, excerptFormatter);
 
   // formatting the message
   StringBuilder b = new StringBuilder();
   if (error.sourceName != null) {
     b.append(error.sourceName);
     if (error.lineNumber > 0) {
       b.append(':');
       b.append(error.lineNumber);
     }
     b.append(": ");
   }
 
   b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));
   b.append(" - ");
 
   b.append(error.description);
   b.append('\n');
   if (sourceExcerpt != null) {
     b.append(sourceExcerpt);
     b.append('\n');
     int charno = error.getCharno();
 
     // padding equal to the excerpt and arrow at the end
-      // charno == sourceExpert.length() means something is missing
+    // charno == sourceExcerpt.length() means something is missing
     // at the end of the line
     if (excerpt.equals(LINE)
-          && 0 <= charno && charno < sourceExcerpt.length()) {
+        && 0 <= charno && charno <= sourceExcerpt.length()) {
       for (int i = 0; i < charno; i++) {
-          char c = sourceExcerpt.charAt(i);
-          if (Character.isWhitespace(c)) {
-            b.append(c);
-          } else {
+        // Always append a space, to ensure arrow aligns even after EOL whitespace
         b.append(' ');
       }
-        }
       b.append("^\n");
     }
   }
   return b.toString();
 }
\ No newline at end of file
