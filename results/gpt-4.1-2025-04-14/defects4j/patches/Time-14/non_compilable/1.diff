diff --git a/tmp/8b97639e-a6c3-4c0f-8c24-e98d16f052f3_buggy.java b/tmp/f74f7739-87d3-4916-b636-e73e8e5c946d_fixed.java
index 10616db..5e0fd5c 100644
--- a/tmp/8b97639e-a6c3-4c0f-8c24-e98d16f052f3_buggy.java
+++ b/tmp/f74f7739-87d3-4916-b636-e73e8e5c946d_fixed.java
@@ -1,19 +1,71 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
+        // Find a leap year as a safe base instant for MonthDay composition (year is not used/output)
+        // Use 2004 as a leap year
+        int baseYear = 2004;
+        // Compose a LocalDate with these values
+        int[] newValues = values.clone();
+        DurationFieldType type = partial.getFieldType(fieldIndex).getDurationType();
+        org.joda.time.LocalDate base = null;
+        if (partial.size() == 2 &&
+            partial.getFieldType(0) == DateTimeFieldType.monthOfYear() &&
+            partial.getFieldType(1) == DateTimeFieldType.dayOfMonth()) {
+            // Compose as LocalDate(month, day, in baseYear)
+            int month = values[0];
+            int day = values[1];
+
+            // Adjust month if we're adding months
+            if (type == DurationFieldType.months()) {
+                month += valueToAdd;
+            } else if (type == DurationFieldType.days()) {
+                // ok, we'll add via LocalDate.plusDays below
+            }
+
+            // Clamp for valid months
+            while (month < 1) {
+                month += 12;
+                baseYear -= 1;
+            }
+            while (month > 12) {
+                month -= 12;
+                baseYear += 1;
+            }
+
+            // Clamp for valid days in month (allow construction, fallback to end-of-month)
+            int maxDay = ISOChronology.getInstanceUTC().dayOfMonth().getMaximumValue(baseYear, month);
+            if (day > maxDay) day = maxDay;
+
+            base = new org.joda.time.LocalDate(baseYear, month, day, ISOChronology.getInstanceUTC());
+
+            if (type == DurationFieldType.months()) {
+                base = base.plusMonths(0); // already added above on 'month'
+            } else if (type == DurationFieldType.days()) {
+                base = base.plusDays(valueToAdd);
+            } else {
+                base = base.withFieldAdded(partial.getFieldType(fieldIndex), valueToAdd);
+            }
+
+            // Now, extract result
+            newValues[0] = base.getMonthOfYear();
+            newValues[1] = base.getDayOfMonth();
+            return newValues;
+        } else {
+            // fallback to using instant calculation as before
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
             return iChronology.get(partial, instant);
+        }
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
