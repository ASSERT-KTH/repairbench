diff --git a/tmp/b9eb8d50-f734-42ca-ae65-26f131835251_buggy.java b/tmp/ff2975e4-1f76-4089-a55d-dc2d76e7f100_fixed.java
index 10616db..a5a2867 100644
--- a/tmp/b9eb8d50-f734-42ca-ae65-26f131835251_buggy.java
+++ b/tmp/ff2975e4-1f76-4089-a55d-dc2d76e7f100_fixed.java
@@ -1,19 +1,64 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
+        // MonthDay and other partials might use a "dummy year", so use leap year (e.g. 2000) to allow Feb 29, and handle result mapping
         long instant = 0L;
+        // Use a known leap year to construct reference instant
+        int[] calcValues = values.clone();
+        int year = 2000;
+        boolean hasYear = false;
+        // Find if the partial has year field
         for (int i = 0, isize = partial.size(); i < isize; i++) {
-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
+            if ("year".equals(partial.getFieldType(i).getName())) {
+                hasYear = true;
+                break;
             }
+        }
+        // If no year, prepend year 2000 for calc
+        ReadablePartial calcPartial = partial;
+        if (!hasYear) {
+            // Create a LocalDate-like ReadablePartial with year
+            org.joda.time.Chronology chrono = iChronology.withUTC();
+            org.joda.time.field.FieldUtils.verifyValueBounds(values, 0, 1, partial.size() - 1);
+            org.joda.time.Partial temp = new org.joda.time.Partial(partial, values);
+            // Insert year at index 0, for calculations
+            org.joda.time.DateTimeFieldType[] newFieldTypes = new org.joda.time.DateTimeFieldType[partial.size() + 1];
+            int[] newValues = new int[partial.size() + 1];
+            newFieldTypes[0] = org.joda.time.DateTimeFieldType.year();
+            newValues[0] = year;
+            for (int i = 0; i < partial.size(); i++) {
+                newFieldTypes[i + 1] = partial.getFieldType(i);
+                newValues[i + 1] = values[i];
+            }
+            temp = temp.with(newFieldTypes[0], newValues[0]);
+            for (int i = 1; i < newFieldTypes.length; i++) {
+                temp = temp.with(newFieldTypes[i], newValues[i]);
+            }
+            calcPartial = temp;
+            calcValues = temp.getValues();
+        }
+        // Now, calcPartial has year, month, day, etc
+        // Build millis instant
+        instant = iChronology.set(calcPartial, calcValues);
+        // Add
         instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+        // Extract values back (year, month, day, etc)
+        int[] resultValues;
+        resultValues = iChronology.get(calcPartial, instant);
+        if (!hasYear) {
+            // Remove 'year' value at index 0
+            int[] ret = new int[resultValues.length - 1];
+            System.arraycopy(resultValues, 1, ret, 0, ret.length);
+            return ret;
+        } else {
+            return resultValues;
+        }
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
