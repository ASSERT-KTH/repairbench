diff --git a/tmp/de1a13f8-eba8-413d-91d6-1f1facd13719_buggy.java b/tmp/8d99206a-f4c4-43ca-aa7c-ff85b516c9ca_fixed.java
index 10616db..134b79b 100644
--- a/tmp/de1a13f8-eba8-413d-91d6-1f1facd13719_buggy.java
+++ b/tmp/8d99206a-f4c4-43ca-aa7c-ff85b516c9ca_fixed.java
@@ -1,19 +1,57 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
+        // In order to get proper end-of-month adjustments for day/month calculations,
+        // we need a base date with a legal year (e.g., a leap year for Feb 29).
+        // We use 2004 as the base (a leap year).
+        // We adjust fields in partial to build a 'synthetic' instant, perform the add, then
+        // extract the fields we care about.
+        long instant;
+        int year = 2004; // leap year
+
+        // Find the positions of month and day, if present
+        int monthFieldIndex = -1;
+        int dayFieldIndex = -1;
+        for (int i = 0; i < partial.size(); i++) {
+            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {
+                monthFieldIndex = i;
+            } else if (partial.getFieldType(i) == DateTimeFieldType.dayOfMonth()) {
+                dayFieldIndex = i;
+            }
+        }
+
+        // Build the synthetic instant
+        Chronology chrono = iChronology.withUTC();
+        // Set the base time to 2004-01-01
+        instant = chrono.getDateTimeMillis(year, 1, 1, 0, 0, 0, 0);
+        // Set month and day fields if present, otherwise set all fields
+        for (int i = 0, isize = partial.size(); i < isize; i++) {
+            DateTimeFieldType type = partial.getFieldType(i);
+            int value = values[i];
+            if (type == DateTimeFieldType.year()) {
+                // skip, use base year
+                continue;
+            }
+            instant = type.getField(chrono).set(instant, value);
+        }
+
+        // Add to the target field
+        instant = partial.getFieldType(fieldIndex).getField(chrono).add(instant, valueToAdd);
+
+        // Extract results
+        int[] newValues = new int[partial.size()];
         for (int i = 0, isize = partial.size(); i < isize; i++) {
-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
+            DateTimeFieldType type = partial.getFieldType(i);
+            newValues[i] = type.getField(chrono).get(instant);
         }
-            instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+        return newValues;
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
