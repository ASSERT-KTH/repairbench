diff --git a/tmp/9a87e703-2b8d-4cd0-98c9-6400410bce69_buggy.java b/tmp/fbabc68f-3f1d-41ef-878c-62121a60af94_fixed.java
index 10616db..6b879c9 100644
--- a/tmp/9a87e703-2b8d-4cd0-98c9-6400410bce69_buggy.java
+++ b/tmp/fbabc68f-3f1d-41ef-878c-62121a60af94_fixed.java
@@ -1,19 +1,56 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
+        // Use a reference year that is a leap year to allow 2/29 and 3/31, etc.
+        // 2008 is a leap year
+        int leapYear = 2008;
+        org.joda.time.chrono.BaseChronology chrono = (org.joda.time.chrono.BaseChronology) iChronology.withUTC();
+
+        // Fill array with extended fields (year + fields of partial)
+        org.joda.time.field.FieldUtils.verifyValueBounds(org.joda.time.DateTimeFieldType.year().getField(chrono), leapYear, leapYear, leapYear);
+        int[] newValues = new int[partial.size() + 1];
+        newValues[0] = leapYear;
+        System.arraycopy(values, 0, newValues, 1, values.length);
+
+        // Create a LocalDate using the leapYear + month/day (e.g., Feb 29 is valid in 2008)
+        org.joda.time.LocalDate tempDate = new org.joda.time.LocalDate(
+            leapYear,
+            (partial.size() > 0 ? values[0] : 1),                        // monthOfYear
+            (partial.size() > 1 ? values[1] : 1),                        // dayOfMonth
+            chrono
+        );
+
+        // Add using the correct field
+        org.joda.time.LocalDate added;
+        if (partial.getFieldType(fieldIndex) == org.joda.time.DateTimeFieldType.monthOfYear()) {
+            added = tempDate.plusMonths(valueToAdd);
+        } else if (partial.getFieldType(fieldIndex) == org.joda.time.DateTimeFieldType.dayOfMonth()) {
+            added = tempDate.plusDays(valueToAdd);
+        } else {
+            // fallback to instant-based calculation
+            instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
             return iChronology.get(partial, instant);
+        }
+
+        // Extract just the partial fields (ignore the year)
+        int[] result = new int[partial.size()];
+        for (int i = 0; i < partial.size(); i++) {
+            org.joda.time.DateTimeFieldType type = partial.getFieldType(i);
+            result[i] = added.get(type);
+        }
+        return result;
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
