diff --git a/tmp/b6698e33-c9bf-4cc3-9d4a-a726cb7ba4b4_buggy.java b/tmp/67df3a92-33d3-4107-bb9a-1e4c4921ab68_fixed.java
index a3709ee..3271c1b 100644
--- a/tmp/b6698e33-c9bf-4cc3-9d4a-a726cb7ba4b4_buggy.java
+++ b/tmp/67df3a92-33d3-4107-bb9a-1e4c4921ab68_fixed.java
@@ -1,71 +1,89 @@
 /**
  * @param locals A predicate to apply to unknown local values.
  * @return Whether the node is known to be a value that is not a reference
  *     outside the expression scope.
  */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
-        return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
-                && evaluatesToLocalValue(value.getLastChild(), locals));
+      // For normal assignment (=), the locality depends entirely on the rhs,
+      // if it is an immutable value. Otherwise, always false.
+      if (NodeUtil.isImmutableValue(value.getLastChild())) {
+        return true;
+      }
+      // If this is a compound assignment (+=, -=, etc.), they're handled below 
+      // in the default case as isAssignmentOp().
+      return false;
+
     case Token.COMMA:
       return evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.AND:
     case Token.OR:
       return evaluatesToLocalValue(value.getFirstChild(), locals)
          && evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.HOOK:
       return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
          && evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.INC:
     case Token.DEC:
+      // For ++x/--x (prefix), result is local (number); for x++/x-- (postfix), result is previous value (could be non-local).
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-          return evaluatesToLocalValue(value.getFirstChild(), locals);
+        // prefix
+        return true;
       } else {
-          return true;
+        // postfix
+        return false;
       }
+
     case Token.THIS:
       return locals.apply(value);
+
     case Token.NAME:
+      // Primitives are always local, otherwise apply locals.
       return isImmutableValue(value) || locals.apply(value);
+
     case Token.GETELEM:
     case Token.GETPROP:
-        // There is no information about the locality of object properties.
-        return locals.apply(value);
+      // There is no information about the locality of object propertiesâ€”cannot guarantee locality.
+      return false;
+
     case Token.CALL:
+      // Only pure calls, toString or known-pure locals are local.
       return callHasLocalResult(value)
           || isToStringMethodCall(value)
           || locals.apply(value);
+
     case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+      // "new SomeClass(...)" is only local if the result is not possibly escaped.
+      // If "locals" says so (typically for some known constructor) then allow it.
+      return locals.apply(value);
+
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+      // Function, regexp, literals, objects and arrays literals are always local values
       return true;
+
     case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+      // "foo in bar" always returns a boolean (primitive local)
       return true;
+
     default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+      // Assignment operators (+=, -=, etc) always produce local primitives.
+      // Simple operators (+, -, !, etc) always produce local primitives.
+      // Literals (numbers, strings, etc) are always local.
       if (isAssignmentOp(value)
           || isSimpleOperator(value)
           || isImmutableValue(value)) {
         return true;
       }
 
       throw new IllegalStateException(
           "Unexpected expression node" + value +
           "\n parent:" + value.getParent());
   }
 }
\ No newline at end of file
