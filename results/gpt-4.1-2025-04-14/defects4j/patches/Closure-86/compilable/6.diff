diff --git a/tmp/0cf2d000-ff7d-46f5-bd41-2db9efee8549_buggy.java b/tmp/6a87c7bc-f256-4a80-887f-a9122f2b48ad_fixed.java
index a3709ee..9b25442 100644
--- a/tmp/0cf2d000-ff7d-46f5-bd41-2db9efee8549_buggy.java
+++ b/tmp/6a87c7bc-f256-4a80-887f-a9122f2b48ad_fixed.java
@@ -1,71 +1,79 @@
   /**
    * @param locals A predicate to apply to unknown local values.
    * @return Whether the node is known to be a value that is not a reference
    *     outside the expression scope.
    */
   static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
       case Token.ASSIGN:
         // A result that is aliased by a non-local name, is the effectively the
         // same as returning a non-local name, but this doesn't matter if the
         // value is immutable.
+        // The result of an assignment is the left-hand side value, so it's only local
+        // if the left hand is local, or if the right side is an immutable value.
+        // See testLocalValue("x=1"): true; ("x=[]"): false; ("x=y"): false.
         return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
+            || (locals.apply(value.getFirstChild())
                 && evaluatesToLocalValue(value.getLastChild(), locals));
       case Token.COMMA:
         return evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.AND:
       case Token.OR:
         return evaluatesToLocalValue(value.getFirstChild(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.HOOK:
+        // condition ? ifTrue : ifFalse; only branches matter.
         return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.INC:
       case Token.DEC:
+        // Pre-increment (side effect, but result is always a local number)
+        // Post-increment (result is the original variable, may be not local)
         if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-          return evaluatesToLocalValue(value.getFirstChild(), locals);
+          // Pre increment/decrement: result is a primitive number
+          return true;
         } else {
-          return true;
+          // Post increment/decrement: result is value before update, may not be local
+          return false;
         }
       case Token.THIS:
         return locals.apply(value);
       case Token.NAME:
-        return isImmutableValue(value) || locals.apply(value);
+        return NodeUtil.isImmutableValue(value) || locals.apply(value);
       case Token.GETELEM:
       case Token.GETPROP:
         // There is no information about the locality of object properties.
-        return locals.apply(value);
+        return false;
       case Token.CALL:
-        return callHasLocalResult(value)
-            || isToStringMethodCall(value)
+        return NodeUtil.callHasLocalResult(value)
+            || NodeUtil.isToStringMethodCall(value)
             || locals.apply(value);
       case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+        // Only treat as a local value if the object isn't escaping.
+        // Otherwise, we can't assume this is a local value
+        // See PR and testLocalValue("new x()"): should be false.
+        return false;
       case Token.FUNCTION:
       case Token.REGEXP:
       case Token.ARRAYLIT:
       case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+        // Literal objects with non-literal children are allowed.
         return true;
       case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+        // The in operator always returns a boolean
         return true;
       default:
         // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
-        if (isAssignmentOp(value)
-            || isSimpleOperator(value)
-            || isImmutableValue(value)) {
+        //  x = '' + g (x is now a local string)
+        //  x -= g (x is now a local number)
+        if (NodeUtil.isAssignmentOp(value)
+            || NodeUtil.isSimpleOperator(value)
+            || NodeUtil.isImmutableValue(value)) {
           return true;
         }
 
         throw new IllegalStateException(
             "Unexpected expression node" + value +
             "\n parent:" + value.getParent());
     }
   }
\ No newline at end of file
