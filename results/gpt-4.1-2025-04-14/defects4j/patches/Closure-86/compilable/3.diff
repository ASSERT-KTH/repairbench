diff --git a/tmp/8beee6bd-cd3c-4515-87a7-7b2188944c05_buggy.java b/tmp/883aec86-3582-481d-a9a7-75d1a1dc7124_fixed.java
index a3709ee..f711407 100644
--- a/tmp/8beee6bd-cd3c-4515-87a7-7b2188944c05_buggy.java
+++ b/tmp/883aec86-3582-481d-a9a7-75d1a1dc7124_fixed.java
@@ -1,71 +1,73 @@
   /**
    * @param locals A predicate to apply to unknown local values.
    * @return Whether the node is known to be a value that is not a reference
    *     outside the expression scope.
    */
   static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
       case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
-        return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
-                && evaluatesToLocalValue(value.getLastChild(), locals));
+        // For basic assignments (not ASSIGN ops), the value is only local
+        // if the RHS is local and the LHS is not an alias or mutable value.
+        // Immutable RHS is local, but otherwise LHS must NOT be an alias.
+        // (x = 1) is local, but (x = y) is not local if y is not local.
+        return NodeUtil.isImmutableValue(value.getLastChild());
       case Token.COMMA:
         return evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.AND:
       case Token.OR:
         return evaluatesToLocalValue(value.getFirstChild(), locals)
             && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.HOOK:
         return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
             && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.INC:
       case Token.DEC:
+        // Only pre-increment/pre-decrement result in a local primitive value.
+        // Post-versions return the old value, so not always local.
         if (value.getBooleanProp(Node.INCRDECR_PROP)) {
           return evaluatesToLocalValue(value.getFirstChild(), locals);
         } else {
-          return true;
+          return false;
         }
       case Token.THIS:
-        return locals.apply(value);
+        // 'this' is never a local value except in inline function wrappers.
+        return false;
       case Token.NAME:
-        return isImmutableValue(value) || locals.apply(value);
+        // Only constants (immutables) are local.
+        return isImmutableValue(value);
       case Token.GETELEM:
       case Token.GETPROP:
-        // There is no information about the locality of object properties.
-        return locals.apply(value);
+        // Properties are aliases, so not local.
+        return false;
       case Token.CALL:
         return callHasLocalResult(value)
-            || isToStringMethodCall(value)
-            || locals.apply(value);
+            || isToStringMethodCall(value);
       case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+        // The result of 'new' is only local if it is not ever aliased
+        // or stored in a mutable place. We conservatively assume it is NOT local,
+        // unless explicitly known.
+        return false;
       case Token.FUNCTION:
       case Token.REGEXP:
       case Token.ARRAYLIT:
       case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+        // Object and array literals and their children do not leak.
         return true;
       case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+        // The result is always a boolean primitive.
         return true;
       default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+        // Other ops force a local value:
+        //  x = '' + g (x is now a local string)
+        //  x -= g (x is now a local number)
         if (isAssignmentOp(value)
             || isSimpleOperator(value)
             || isImmutableValue(value)) {
           return true;
         }
 
         throw new IllegalStateException(
             "Unexpected expression node" + value +
             "\n parent:" + value.getParent());
     }
   }
\ No newline at end of file
