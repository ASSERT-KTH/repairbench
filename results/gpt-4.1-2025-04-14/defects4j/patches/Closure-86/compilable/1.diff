diff --git a/tmp/6b086672-76f0-4f44-a430-7a3564d8de38_buggy.java b/tmp/e16542ac-e56c-497c-a08e-37a7309f4188_fixed.java
index a3709ee..d04ad75 100644
--- a/tmp/6b086672-76f0-4f44-a430-7a3564d8de38_buggy.java
+++ b/tmp/e16542ac-e56c-497c-a08e-37a7309f4188_fixed.java
@@ -1,71 +1,75 @@
   /**
    * @param locals A predicate to apply to unknown local values.
    * @return Whether the node is known to be a value that is not a reference
    *     outside the expression scope.
    */
   static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
       case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
+        // For plain assignment, the result is only local if the rhs is local and immutable.
+        // Otherwise, it may escape.
         return NodeUtil.isImmutableValue(value.getLastChild())
             || (locals.apply(value)
                 && evaluatesToLocalValue(value.getLastChild(), locals));
       case Token.COMMA:
+        // Only the value of the rightmost child matters.
         return evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.AND:
       case Token.OR:
+        // Both sides must be local values.
         return evaluatesToLocalValue(value.getFirstChild(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.HOOK:
+        // Only the true and false branches matter.
         return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.INC:
       case Token.DEC:
-        if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-          return evaluatesToLocalValue(value.getFirstChild(), locals);
+        // If pre increment/decrement, result is a primitive number (local)
+        // If post, the read result is the value before updating, which can escape.
+        if (value.getFirstChild() != null && value.getBooleanProp(Node.INCRDECR_PROP)) {
+          // Pre, always local
+          return true;
         } else {
-          return true;
+          // Post, not local
+          return false;
         }
       case Token.THIS:
+        // "this" is assumed to be non-local unless known otherwise.
         return locals.apply(value);
       case Token.NAME:
+        // Only if immutable value or known to be local.
         return isImmutableValue(value) || locals.apply(value);
       case Token.GETELEM:
       case Token.GETPROP:
-        // There is no information about the locality of object properties.
+        // Property access is only local if known.
         return locals.apply(value);
       case Token.CALL:
-        return callHasLocalResult(value)
-            || isToStringMethodCall(value)
-            || locals.apply(value);
+        // Only .toString() is local, others are not unless known.
+        return isToStringMethodCall(value) || locals.apply(value);
       case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+        // The result of 'new' is NOT guaranteed to be local unless 'locals.apply' determines it is.
+        // By default, 'new' may return an escaped value.
+        return locals.apply(value);
       case Token.FUNCTION:
       case Token.REGEXP:
       case Token.ARRAYLIT:
       case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+        // Literals and anonymous functions, regexps are local.
         return true;
       case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+        // "in" operator always returns a local boolean.
         return true;
       default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+        // Simple assignment ops (=, +=, -=, etc), comparisons, math, unary ops, etc, are local
         if (isAssignmentOp(value)
             || isSimpleOperator(value)
             || isImmutableValue(value)) {
           return true;
         }
 
         throw new IllegalStateException(
             "Unexpected expression node" + value +
             "\n parent:" + value.getParent());
     }
   }
\ No newline at end of file
