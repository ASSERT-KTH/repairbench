diff --git a/tmp/8965e3f9-3ea8-417a-9f4b-829dafa8e14e_buggy.java b/tmp/1a26121e-7eb7-4d76-a8d5-eb6aca583676_fixed.java
index 98d89dc..fdbda0b 100644
--- a/tmp/8965e3f9-3ea8-417a-9f4b-829dafa8e14e_buggy.java
+++ b/tmp/1a26121e-7eb7-4d76-a8d5-eb6aca583676_fixed.java
@@ -1,23 +1,34 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+    // Fix: Correctly handle NaN comparisons
+    if (Double.isNaN(ld) && Double.isNaN(rd)) {
+        // In XPath 1.0, NaN = NaN is true, but all other comparisons are false
+        // We rely on evaluateCompare for the operation, thus we must detect equality test (==)
+        // But since we don't know here, assume evaluateCompare(0) means equality
+        return evaluateCompare(0);
+    }
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // If either is NaN (but not both), then equality is false, all orderings are false
+        return false;
+    }
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
