diff --git a/tmp/bf95b655-d7af-40eb-90d4-a13fb9a196ad_buggy.java b/tmp/d5144a9f-f04f-41af-a25f-fb30c68d5ca8_fixed.java
index 98d89dc..fdc81b7 100644
--- a/tmp/bf95b655-d7af-40eb-90d4-a13fb9a196ad_buggy.java
+++ b/tmp/d5144a9f-f04f-41af-a25f-fb30c68d5ca8_fixed.java
@@ -1,23 +1,36 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // Fix: If either is NaN, comparison is false except for 'equals'
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // Here we must distinguish comparison versus equality
+        // evaluateCompare(0) is used for equality.
+        // For NaN = NaN, XPATH says true. For all other relations, false.
+        // We only return true if both are NaN and equality is being checked.
+        if (evaluateCompare(0)) {
+            return Double.isNaN(ld) && Double.isNaN(rd);
+        }
+        return false;
+    }
+
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
