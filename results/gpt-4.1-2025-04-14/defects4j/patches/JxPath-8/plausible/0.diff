diff --git a/tmp/9f9af707-5482-434e-a19e-64cb75e1c0b8_buggy.java b/tmp/40377b33-663c-41e0-b9d1-5ee47c37a0b5_fixed.java
index 98d89dc..fa83c1d 100644
--- a/tmp/9f9af707-5482-434e-a19e-64cb75e1c0b8_buggy.java
+++ b/tmp/40377b33-663c-41e0-b9d1-5ee47c37a0b5_fixed.java
@@ -1,23 +1,41 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // Fix: handle NaN comparisons per XPath semantics
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // Only '=' should return true for NaN=NaN, everything else returns false
+        // But we don't know which comparison, so delegate to evaluateCompare as follows:
+        // evaluateCompare expects 0 for eq, -1 for lt, 1 for gt
+        // But whatever operator, if any arg is NaN, only eq should be true if both are NaN
+        // So:
+        if (Double.isNaN(ld) && Double.isNaN(rd)) {
+            // Only for equality (evaluateCompare(0)) return true, others are false
+            return evaluateCompare(0);
+        } else {
+            // If only one is NaN, all comparisons are false (except !=); evaluateCompare(0) is false on eq
+            // (Assume evaluateCompare(0) for eq, otherwise produces false for gt or lt)
+            return false;
+        }
+    }
+
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
