diff --git a/tmp/f22fd5cc-4a21-4f0c-a633-c4564337a1bc_buggy.java b/tmp/d3b19501-7d1c-4344-ba4c-033f79b8fae2_fixed.java
index 98d89dc..83bfa23 100644
--- a/tmp/f22fd5cc-4a21-4f0c-a633-c4564337a1bc_buggy.java
+++ b/tmp/d3b19501-7d1c-4344-ba4c-033f79b8fae2_fixed.java
@@ -1,23 +1,58 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // Handle NaN values per XPath spec: all comparisons except = are false; NaN = NaN is true.
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        return evaluateNaNCompare(ld, rd);
+    }
+
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
+
+// Helper for NaN comparison (assume equals, <, > passed to this)
+private boolean evaluateNaNCompare(double ld, double rd) {
+    // This method should be implemented according to the operation type.
+    // For simplicity, let's assume evaluateCompare uses an operation type field:
+    // -1: less than, 0: equals, 1: greater than
+
+    // Let's assume there is a protected int operator field indicating the operation:
+    // (as is typical in CoreOperation subclasses)
+    // 0: '=', 1: '!=', 2: '<', 3: '<=', 4: '>', 5: '>='
+
+    // For =: NaN = NaN is true; otherwise false.
+    // For !=: NaN != NaN is false; otherwise true.
+    // For <, >, <=, >=: always false.
+
+    switch (operator) {
+        case 0: // '='
+            return Double.isNaN(ld) && Double.isNaN(rd);
+        case 1: // '!='
+            return !(Double.isNaN(ld) && Double.isNaN(rd));
+        case 2: // '<'
+        case 3: // '<='
+        case 4: // '>'
+        case 5: // '>='
+            return false;
+        default:
+            return false;
+    }
+}
\ No newline at end of file
