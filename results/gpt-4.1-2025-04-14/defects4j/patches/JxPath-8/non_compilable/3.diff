diff --git a/tmp/cc0b3db8-594b-4f35-b18b-d9290c1005ed_buggy.java b/tmp/3fdb18ce-8fca-4767-a3b4-bc2d2cd39e7a_fixed.java
index 98d89dc..cc61db6 100644
--- a/tmp/cc0b3db8-594b-4f35-b18b-d9290c1005ed_buggy.java
+++ b/tmp/3fdb18ce-8fca-4767-a3b4-bc2d2cd39e7a_fixed.java
@@ -1,23 +1,38 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // Fix: Handle NaN comparisons according to XPath 1.0/2.0 rules
+    if (Double.isNaN(ld) && Double.isNaN(rd)) {
+        // NaN = NaN is TRUE (XPath semantics)
+        // All relational ops (>, <, >=, <=) are FALSE, only = returns true here
+        // We need to delegate decision to evaluateCompare according to the comparison intended
+        // Assume evaluateCompare(0) means "equals", -1 means "<", 1 means ">"
+        return evaluateCompare(0); // Only = will return true, others will not
+    }
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // NaN compared to anything except NaN: = is FALSE, <, > are FALSE
+        // logical meaning: the only way we get true is equals between two NaNs above
+        return evaluateCompare(Double.NaN); // For =, this should return false, and so on
+    }
+
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
