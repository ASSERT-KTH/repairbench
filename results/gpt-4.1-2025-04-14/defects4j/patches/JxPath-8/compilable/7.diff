diff --git a/tmp/47755c35-519e-45f9-81a5-198ec12a7c3d_buggy.java b/tmp/6c9ae501-9e3c-4fd0-84d3-82f125902f3f_fixed.java
index 98d89dc..48a1809 100644
--- a/tmp/47755c35-519e-45f9-81a5-198ec12a7c3d_buggy.java
+++ b/tmp/6c9ae501-9e3c-4fd0-84d3-82f125902f3f_fixed.java
@@ -1,23 +1,30 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+    // Fix: handle NaN comparisons according to XPath rules
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // Only = should return true if both sides are NaN, otherwise false.
+        // But the operator is not accessible here, so we must handle via evaluateCompare
+        // evaluateCompare(0) == (ld == rd)
+        return evaluateCompare(Double.isNaN(ld) && Double.isNaN(rd) ? 0 : -2); // -2 = not equal/other
+    }
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
