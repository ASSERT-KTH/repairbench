diff --git a/tmp/38d100b7-05fe-4623-8bc2-943db10acbee_buggy.java b/tmp/be1db156-4d30-45cd-a0cf-ce6a123ec9a1_fixed.java
index 98d89dc..3d75525 100644
--- a/tmp/38d100b7-05fe-4623-8bc2-943db10acbee_buggy.java
+++ b/tmp/be1db156-4d30-45cd-a0cf-ce6a123ec9a1_fixed.java
@@ -1,23 +1,45 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // Fix: If either ld or rd is NaN and both operands are NaN and values are being equated
+    // then "$nan = $nan" should return true, but for comparisons, NaN always returns false.
+    // The old code used 'ld == rd', but NaN == NaN is false in Java.
+    // So, carefully handle accordingly
+
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // "$nan = $nan" should return true, the rest should be false
+        // The context of what is being compared (which operator) is unknown in 'compute',
+        // but it must be known, so evaluateCompare can decide. So we need to make sure
+        // that when both are NaN, and evaluating equality, evaluateCompare(0) is called.
+
+        if (Double.isNaN(ld) && Double.isNaN(rd)) {
+            // call evaluateCompare(0): "equal"
+            return evaluateCompare(0);
+        }
+        // Otherwise NaN involved, but not both => always false for compare
+        // (call evaluateCompare(other), but make sure it's never equal)
+        // We can use "1" or "-1", but evaluateCompare(0) is the only one for equals
+        // So call with -1 (which means left < right, but actually just means not equal)
+        return evaluateCompare(-1);
+    }
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
