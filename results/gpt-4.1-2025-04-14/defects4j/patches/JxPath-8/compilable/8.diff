diff --git a/tmp/055ddb00-b1c1-4760-8a80-324dd39e8522_buggy.java b/tmp/ef8a0d54-3a28-4484-9246-0f7a05ab1851_fixed.java
index 98d89dc..7670b64 100644
--- a/tmp/055ddb00-b1c1-4760-8a80-324dd39e8522_buggy.java
+++ b/tmp/ef8a0d54-3a28-4484-9246-0f7a05ab1851_fixed.java
@@ -1,23 +1,32 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+    // Fix handling of NaN comparisons according to XPath rules
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // Per XPath: NaN = NaN is true, all other comparisons are false
+        if (Double.isNaN(ld) && Double.isNaN(rd)) {
+            return evaluateCompare(0); // as if ld == rd
+        }
+        // NaN compared to anything else is always false
+        return evaluateCompare(Integer.MIN_VALUE); // Return false for < and > and = except for NaN = NaN above
+    }
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
