diff --git a/tmp/6843c674-b969-43f3-9dbc-84fae9592ca9_buggy.java b/tmp/b1e610d1-4fe5-48b6-9f94-a997679cd21e_fixed.java
index a7d0787..a3e833f 100644
--- a/tmp/6843c674-b969-43f3-9dbc-84fae9592ca9_buggy.java
+++ b/tmp/b1e610d1-4fe5-48b6-9f94-a997679cd21e_fixed.java
@@ -1,54 +1,99 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
+    try {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
+        // Handle standard Java number types
+        else if (clazz == Integer.class)
+        {
+            try {
+                return (T) Integer.valueOf(str);
+            } catch (Exception e) {
+                throw new ParseException("Could not create Integer: " + str);
+            }
+        }
+        else if (clazz == Long.class)
+        {
+            try {
+                return (T) Long.valueOf(str);
+            } catch (Exception e) {
+                throw new ParseException("Could not create Long: " + str);
+            }
+        }
+        else if (clazz == Short.class)
+        {
+            try {
+                return (T) Short.valueOf(str);
+            } catch (Exception e) {
+                throw new ParseException("Could not create Short: " + str);
+            }
+        }
+        else if (clazz == Byte.class)
+        {
+            try {
+                return (T) Byte.valueOf(str);
+            } catch (Exception e) {
+                throw new ParseException("Could not create Byte: " + str);
+            }
+        }
+        else if (clazz == Double.class)
+        {
+            try {
+                return (T) Double.valueOf(str);
+            } catch (Exception e) {
+                throw new ParseException("Could not create Double: " + str);
+            }
+        }
+        else if (clazz == Float.class)
+        {
+            try {
+                return (T) Float.valueOf(str);
+            } catch (Exception e) {
+                throw new ParseException("Could not create Float: " + str);
+            }
+        }
         else
         {
-            return null;
+            throw new ParseException("Unsupported type: " + clazz);
+        }
+    } catch (ParseException pe) {
+        throw pe;
+    } catch (Exception e) {
+        throw new ParseException("Unable to create value: " + e.getMessage());
     }
 }
\ No newline at end of file
