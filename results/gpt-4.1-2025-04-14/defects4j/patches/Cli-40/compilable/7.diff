diff --git a/tmp/bc53b1a9-aaef-4a72-bd44-6c33972c1f5c_buggy.java b/tmp/5865253d-f1cd-4486-b542-f533de44a20e_fixed.java
index a7d0787..bfd8800 100644
--- a/tmp/bc53b1a9-aaef-4a72-bd44-6c33972c1f5c_buggy.java
+++ b/tmp/5865253d-f1cd-4486-b542-f533de44a20e_fixed.java
@@ -1,54 +1,94 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
+    try {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
+        else if (clazz == Number.class || clazz == Integer.class || clazz == Long.class ||
+                 clazz == Double.class || clazz == Float.class || clazz == Short.class || clazz == Byte.class)
+        {
+            Number num = createNumber(str);
+            if (clazz == Integer.class) {
+                if (!(num instanceof Integer)) {
+                    throw new ParseException("Value \"" + str + "\" is not an Integer");
+                }
+                return (T) num;
+            }
+            if (clazz == Long.class) {
+                if (!(num instanceof Long)) {
+                    throw new ParseException("Value \"" + str + "\" is not a Long");
+                }
+                return (T) num;
+            }
+            if (clazz == Double.class) {
+                if (!(num instanceof Double)) {
+                    throw new ParseException("Value \"" + str + "\" is not a Double");
+                }
+                return (T) num;
+            }
+            if (clazz == Float.class) {
+                if (!(num instanceof Float)) {
+                    throw new ParseException("Value \"" + str + "\" is not a Float");
+                }
+                return (T) num;
+            }
+            if (clazz == Short.class) {
+                if (!(num instanceof Short)) {
+                    throw new ParseException("Value \"" + str + "\" is not a Short");
+                }
+                return (T) num;
+            }
+            if (clazz == Byte.class) {
+                if (!(num instanceof Byte)) {
+                    throw new ParseException("Value \"" + str + "\" is not a Byte");
+                }
+                return (T) num;
+            }
+            // fallback for generic Number:
+            return (T) num;
+        }
         else
         {
-            return null;
+            throw new ParseException("Unable to handle class: " + clazz);
+        }
+    } catch (Exception e) {
+        if (e instanceof ParseException) {
+            throw (ParseException) e;
+        }
+        throw new ParseException(e.getMessage());
     }
 }
\ No newline at end of file
