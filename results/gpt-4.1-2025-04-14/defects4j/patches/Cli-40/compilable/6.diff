diff --git a/tmp/a3c9bc30-15b4-4c92-a49a-4f5b5733dcf3_buggy.java b/tmp/d0b292f6-8cdc-47cd-be9b-b97ce04c905f_fixed.java
index a7d0787..8b25c69 100644
--- a/tmp/a3c9bc30-15b4-4c92-a49a-4f5b5733dcf3_buggy.java
+++ b/tmp/d0b292f6-8cdc-47cd-be9b-b97ce04c905f_fixed.java
@@ -1,54 +1,113 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
+{
+    try
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
+        else if (clazz == Number.class || clazz == Integer.class || clazz == Long.class ||
+                 clazz == Float.class || clazz == Double.class || clazz == Short.class ||
+                 clazz == Byte.class)
+        {
+            // Attempt to parse the number type
+            Number value = createNumber(str);
+            if (clazz == Integer.class)
+            {
+                if (value instanceof Integer) {
+                    return (T) value;
+                } else {
+                    return (T) Integer.valueOf(value.intValue());
+                }
+            }
+            else if (clazz == Long.class)
+            {
+                if (value instanceof Long) {
+                    return (T) value;
+                } else {
+                    return (T) Long.valueOf(value.longValue());
+                }
+            }
+            else if (clazz == Float.class)
+            {
+                if (value instanceof Float) {
+                    return (T) value;
+                } else {
+                    return (T) Float.valueOf(value.floatValue());
+                }
+            }
+            else if (clazz == Double.class)
+            {
+                if (value instanceof Double) {
+                    return (T) value;
+                } else {
+                    return (T) Double.valueOf(value.doubleValue());
+                }
+            }
+            else if (clazz == Short.class)
+            {
+                if (value instanceof Short) {
+                    return (T) value;
+                } else {
+                    return (T) Short.valueOf(value.shortValue());
+                }
+            }
+            else if (clazz == Byte.class)
+            {
+                if (value instanceof Byte) {
+                    return (T) value;
+                } else {
+                    return (T) Byte.valueOf(value.byteValue());
+                }
+            }
+            else // clazz == Number.class
+            {
+                return (T) value;
+            }
+        }
         else
         {
-            return null;
+            throw new ParseException("Unsupported type: " + clazz);
+        }
+    }
+    catch (Exception e)
+    {
+        if (e instanceof ParseException) {
+            throw (ParseException)e;
+        }
+        throw new ParseException("Failed to create value: " + e.getMessage());
     }
 }
\ No newline at end of file
