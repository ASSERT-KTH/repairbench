diff --git a/tmp/4e300cf6-29cc-4fbe-a859-a4aca9ee80cc_buggy.java b/tmp/d8618c22-5c01-4939-aa75-f750d4a76e41_fixed.java
index a7d0787..006cd49 100644
--- a/tmp/4e300cf6-29cc-4fbe-a859-a4aca9ee80cc_buggy.java
+++ b/tmp/d8618c22-5c01-4939-aa75-f750d4a76e41_fixed.java
@@ -1,54 +1,81 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
     if (PatternOptionBuilder.STRING_VALUE == clazz)
     {
         return (T) str;
     }
     else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
     {
         return (T) createObject(str);
     }
     else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
     {
         return (T) createNumber(str);
     }
     else if (PatternOptionBuilder.DATE_VALUE == clazz)
     {
         return (T) createDate(str);
     }
     else if (PatternOptionBuilder.CLASS_VALUE == clazz)
     {
         return (T) createClass(str);
     }
     else if (PatternOptionBuilder.FILE_VALUE == clazz)
     {
         return (T) createFile(str);
     }
     else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
     {
         return (T) openFile(str);
     }
     else if (PatternOptionBuilder.FILES_VALUE == clazz)
     {
         return (T) createFiles(str);
     }
     else if (PatternOptionBuilder.URL_VALUE == clazz)
     {
         return (T) createURL(str);
     }
+    // Fix: throw if clazz is a known value type but not matched above, or is a number type
+    else if (Number.class.isAssignableFrom(clazz)) // handles Integer.class, etc.
+    {
+        // Try to parse to the required number type, if fails throw ParseException
+        try {
+            Number num = createNumber(str);
+            // Cast to the correct type
+            if (clazz == Integer.class) {
+                if (!(num instanceof Integer)) {
+                    num = Integer.valueOf(num.intValue());
+                }
+            } else if (clazz == Long.class) {
+                if (!(num instanceof Long)) {
+                    num = Long.valueOf(num.longValue());
+                }
+            } else if (clazz == Short.class) {
+                if (!(num instanceof Short)) {
+                    num = Short.valueOf(num.shortValue());
+                }
+            } else if (clazz == Byte.class) {
+                if (!(num instanceof Byte)) {
+                    num = Byte.valueOf(num.byteValue());
+                }
+            } else if (clazz == Float.class) {
+                if (!(num instanceof Float)) {
+                    num = Float.valueOf(num.floatValue());
+                }
+            } else if (clazz == Double.class) {
+                if (!(num instanceof Double)) {
+                    num = Double.valueOf(num.doubleValue());
+                }
+            } // BigInteger and BigDecimal not handled as typically not expected
+            return (T) num;
+        } catch (Exception ex) {
+            throw new ParseException("Unable to parse value '" + str + "' to type " + clazz.getSimpleName());
+        }
+    }
     else
     {
-            return null;
+        throw new ParseException("Unable to create value for type: " + clazz);
     }
 }
\ No newline at end of file
