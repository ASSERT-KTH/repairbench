diff --git a/tmp/1c9540c3-8466-4006-a79f-f93e627c6359_buggy.java b/tmp/b8e27cc1-e35a-47ac-b7c9-386fbe445bfd_fixed.java
index a7d0787..b121c8c 100644
--- a/tmp/1c9540c3-8466-4006-a79f-f93e627c6359_buggy.java
+++ b/tmp/b8e27cc1-e35a-47ac-b7c9-386fbe445bfd_fixed.java
@@ -1,54 +1,77 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
     if (PatternOptionBuilder.STRING_VALUE == clazz)
     {
         return (T) str;
     }
     else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
     {
         return (T) createObject(str);
     }
     else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
     {
         return (T) createNumber(str);
     }
     else if (PatternOptionBuilder.DATE_VALUE == clazz)
     {
         return (T) createDate(str);
     }
     else if (PatternOptionBuilder.CLASS_VALUE == clazz)
     {
         return (T) createClass(str);
     }
     else if (PatternOptionBuilder.FILE_VALUE == clazz)
     {
         return (T) createFile(str);
     }
     else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
     {
         return (T) openFile(str);
     }
     else if (PatternOptionBuilder.FILES_VALUE == clazz)
     {
         return (T) createFiles(str);
     }
     else if (PatternOptionBuilder.URL_VALUE == clazz)
     {
         return (T) createURL(str);
     }
+    // Bug fix: attempt to handle explicit Java wrapper types for numbers.
+    else if (clazz == Number.class
+             || clazz == Integer.class
+             || clazz == Long.class
+             || clazz == Short.class
+             || clazz == Float.class
+             || clazz == Double.class
+             || clazz == Byte.class
+             || clazz == BigInteger.class
+             || clazz == BigDecimal.class) {
+        try {
+            Number num = createNumber(str);
+            // Return the specific wrapper if requested
+            if (clazz == Integer.class)
+                return (T) Integer.valueOf(num.intValue());
+            else if (clazz == Long.class)
+                return (T) Long.valueOf(num.longValue());
+            else if (clazz == Short.class)
+                return (T) Short.valueOf(num.shortValue());
+            else if (clazz == Float.class)
+                return (T) Float.valueOf(num.floatValue());
+            else if (clazz == Double.class)
+                return (T) Double.valueOf(num.doubleValue());
+            else if (clazz == Byte.class)
+                return (T) Byte.valueOf(num.byteValue());
+            else if (clazz == BigInteger.class)
+                return (T) (num instanceof BigInteger ? num : new BigInteger(str));
+            else if (clazz == BigDecimal.class)
+                return (T) (num instanceof BigDecimal ? num : new BigDecimal(str));
             else
-        {
-            return null;
+                return (T) num;
+        } catch (Exception e) {
+            throw new ParseException("Unable to create value for type: " + clazz.getName() + " from '" + str + "'");
         }
     }
+    // For unsupported classes, throw rather than return null
+    throw new ParseException("Unable to create value for type: " + clazz.getName());
+}
\ No newline at end of file
