diff --git a/tmp/e64a25fb-efc9-456d-b488-f5c4b02d1e60_buggy.java b/tmp/a95bd89b-819b-451e-92b7-12573e878944_fixed.java
index 30d7266..a53d33d 100644
--- a/tmp/e64a25fb-efc9-456d-b488-f5c4b02d1e60_buggy.java
+++ b/tmp/a95bd89b-819b-451e-92b7-12573e878944_fixed.java
@@ -1,69 +1,94 @@
 /**
  * Since this pass reports errors only when a global {@code this} keyword
  * is encountered, there is no reason to traverse non global contexts.
  */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
   if (n.getType() == Token.FUNCTION) {
     // Don't traverse functions that are constructors or have the @this
     // or @override annotation.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc != null &&
         (jsDoc.isConstructor() ||
          jsDoc.isInterface() ||
          jsDoc.hasThisType() ||
          jsDoc.isOverride())) {
       return false;
     }
 
     // Don't traverse functions unless they would normally
     // be able to have a @this annotation associated with them. e.g.,
     // var a = function() { }; // or
     // function a() {} // or
     // a.x = function() {}; // or
     // var a = {x: function() {}};
     int pType = parent.getType();
     if (!(pType == Token.BLOCK ||
           pType == Token.SCRIPT ||
           pType == Token.NAME ||
           pType == Token.ASSIGN ||
 
           // object literal keys
           pType == Token.STRING ||
           pType == Token.NUMBER)) {
       return false;
     }
 
     // Don't traverse functions that are getting lent to a prototype.
+    // Fix: Suppress for functions defined in object literals 
+    // with @lends annotation
+    if (parent != null && 
+        (parent.getType() == Token.OBJECTLIT || parent.getType() == Token.OBJECT_PATTERN)) {
+      Node potentialLendsObjLit = parent;
+      Node grandParent = parent.getParent();
+      if (grandParent != null && grandParent.getType() == Token.CALL) {
+        JSDocInfo callJSDoc = grandParent.getJSDocInfo();
+        if (callJSDoc == null) {
+          // Maybe the expression that returns the object literal has JSDoc.
+          // Example: dojo.declare(F, /** @lends {F.prototype} */ ({ ... } ));
+          Node argObj = parent;
+          Node callNode = grandParent;
+          if (argObj.getJSDocInfo() != null &&
+              argObj.getJSDocInfo().getLendsName() != null) {
+            return false;
+          }
+        } else if (callJSDoc.getLendsName() != null) {
+          return false;
+        }
+      } else if (potentialLendsObjLit.getJSDocInfo() != null &&
+          potentialLendsObjLit.getJSDocInfo().getLendsName() != null) {
+        return false;
+      }
+    }
   }
 
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
     Node rhs = lhs.getNext();
 
     if (n == lhs) {
       // Always traverse the left side of the assignment. To handle
       // nested assignments properly (e.g., (a = this).property = c;),
       // assignLhsChild should not be overridden.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
       // Only traverse the right side if it's not an assignment to a prototype
       // property or subproperty.
       if (NodeUtil.isGet(lhs)) {
         if (lhs.getType() == Token.GETPROP &&
             lhs.getLastChild().getString().equals("prototype")) {
           return false;
         }
         Node llhs = lhs.getFirstChild();
         if (llhs.getType() == Token.GETPROP &&
             llhs.getLastChild().getString().equals("prototype")) {
           return false;
         }
       }
     }
   }
 
   return true;
 }
\ No newline at end of file
