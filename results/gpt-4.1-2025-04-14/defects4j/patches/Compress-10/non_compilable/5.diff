diff --git a/tmp/e07c67ca-7633-46fb-9b29-a3fcb1daa321_buggy.java b/tmp/f6065676-1b8b-45da-993c-cdb6670366d1_fixed.java
index 85e6a42..be053a8 100644
--- a/tmp/e07c67ca-7633-46fb-9b29-a3fcb1daa321_buggy.java
+++ b/tmp/f6065676-1b8b-45da-993c-cdb6670366d1_fixed.java
@@ -1,50 +1,60 @@
 /**
  * Walks through all recorded entries and adds the data available
  * from the local file header.
  *
  * <p>Also records the offsets for the data to read from the
  * entries.</p>
  */
 private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                         entriesWithoutUTF8Flag)
     throws IOException {
     // changing the name of a ZipArchiveEntry is going to change
     // the hashcode - see COMPRESS-164
     // Map needs to be reconstructed in order to keep central
     // directory order
-        for (ZipArchiveEntry ze : entries.keySet()) {
+    for (ZipArchiveEntry ze : new ArrayList<ZipArchiveEntry>(entries.keySet())) {
         OffsetEntry offsetEntry = entries.get(ze);
         long offset = offsetEntry.headerOffset;
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
-            byte[] b = new byte[SHORT];
-            archive.readFully(b);
-            int fileNameLen = ZipShort.getValue(b);
-            archive.readFully(b);
-            int extraFieldLen = ZipShort.getValue(b);
-            int lenToSkip = fileNameLen;
-            while (lenToSkip > 0) {
-                int skipped = archive.skipBytes(lenToSkip);
-                if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip file name in"
-                                               + " local file header");
+        byte[] b1 = new byte[SHORT];
+        archive.readFully(b1);
+        int fileNameLen = ZipShort.getValue(b1);
+        archive.readFully(b1);
+        int extraFieldLen = ZipShort.getValue(b1);
+
+        byte[] fileNameData = new byte[fileNameLen];
+        int totalRead = 0;
+        while (totalRead < fileNameLen) {
+            int bytesRead = archive.read(fileNameData, totalRead, fileNameLen - totalRead);
+            if (bytesRead == -1) {
+                throw new RuntimeException("failed to read file name in local file header");
             }
-                lenToSkip -= skipped;
+            totalRead += bytesRead;
         }
+
         byte[] localExtraData = new byte[extraFieldLen];
-            archive.readFully(localExtraData);
+        totalRead = 0;
+        while (totalRead < extraFieldLen) {
+            int bytesRead = archive.read(localExtraData, totalRead, extraFieldLen - totalRead);
+            if (bytesRead == -1) {
+                throw new RuntimeException("failed to read extra field in local file header");
+            }
+            totalRead += bytesRead;
+        }
         ze.setExtra(localExtraData);
+
         offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
             + SHORT + SHORT + fileNameLen + extraFieldLen;
 
         if (entriesWithoutUTF8Flag.containsKey(ze)) {
             String orig = ze.getName();
             NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
             ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
                                                      nc.comment);
             if (!orig.equals(ze.getName())) {
                 nameMap.remove(orig);
                 nameMap.put(ze.getName(), ze);
             }
         }
     }
 }
\ No newline at end of file
