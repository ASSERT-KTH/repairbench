diff --git a/tmp/3c9a887c-7e76-4bcd-8dfc-1a597b8e2784_buggy.java b/tmp/fd0fb96c-fed1-47a0-8fa5-d3c5acc229cd_fixed.java
index 7b89a27..eedf493 100644
--- a/tmp/3c9a887c-7e76-4bcd-8dfc-1a597b8e2784_buggy.java
+++ b/tmp/fd0fb96c-fed1-47a0-8fa5-d3c5acc229cd_fixed.java
@@ -1,76 +1,67 @@
-    /**
-     * Determines whether a qualified name is inferred.
-     * NOTE(nicksantos): Determining whether a property is declared or not
-     * is really really obnoxious.
-     *
-     * The problem is that there are two (equally valid) coding styles:
-     *
-     * (function() {
-     *   /* The authoritative definition of goog.bar. /
-     *   goog.bar = function() {};
-     * })();
-     *
-     * function f() {
-     *   goog.bar();
-     *   /* Reset goog.bar to a no-op. /
-     *   goog.bar = function() {};
-     * }
-     *
-     * In a dynamic language with first-class functions, it's very difficult
-     * to know which one the user intended without looking at lots of
-     * contextual information (the second example demonstrates a small case
-     * of this, but there are some really pathological cases as well).
-     *
-     * The current algorithm checks if either the declaration has
-     * JsDoc type information, or @const with a known type,
-     * or a function literal with a name we haven't seen before.
-     */
 private boolean isQualifiedNameInferred(
     String qName, Node n, JSDocInfo info,
     Node rhsValue, JSType valueType) {
   if (valueType == null) {
     return true;
   }
 
-      // Prototypes of constructors and interfaces are always declared.
+  // Prototypes of constructors and interfaces are always declared,
+  // BUT: If the prototype property is NOT directly on some constructor,
+  // and is being set on an unknown or parameterized object, treat as inferred.
+  // That is: if qName ends with ".prototype" but this is not a normal qualified name.
   if (qName != null && qName.endsWith(".prototype")) {
+    // Heuristic: Infer if left side is NOT a simple qualified name (e.g. a.b.prototype).
+    // For assignments like a.prototype = ..., where a is a parameter/unknown,
+    // treat as inferred.
+    if (!n.isQualifiedName()) {
+      return true;
+    }
+    // Extra test: lhs is a name, but not a global/class name, or we're in a function param,
+    // In cases like f(a) { a.prototype = ... }  treat as inferred.
+    Node first = n;
+    while (first.isGetProp()) {
+      first = first.getFirstChild();
+    }
+    if (first.isName() && scope.isLocalScope() && scope.isDeclared(first.getString(), false)) {
+      return true;
+    }
     return false;
   }
 
   boolean inferred = true;
   if (info != null) {
     inferred = !(info.hasType()
         || info.hasEnumParameterType()
         || (isConstantSymbol(info, n) && valueType != null
             && !valueType.isUnknownType())
         || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
   }
 
   if (inferred && rhsValue != null && rhsValue.isFunction()) {
     if (info != null) {
       return false;
     } else if (!scope.isDeclared(qName, false) &&
         n.isUnscopedQualifiedName()) {
 
       // Check if this is in a conditional block.
       // Functions assigned in conditional blocks are inferred.
       for (Node current = n.getParent();
            !(current.isScript() || current.isFunction());
            current = current.getParent()) {
         if (NodeUtil.isControlStructure(current)) {
           return true;
         }
       }
 
       // Check if this is assigned in an inner scope.
       // Functions assigned in inner scopes are inferred.
       AstFunctionContents contents =
           getFunctionAnalysisResults(scope.getRootNode());
       if (contents == null ||
           !contents.getEscapedQualifiedNames().contains(qName)) {
         return false;
       }
     }
   }
   return inferred;
 }
\ No newline at end of file
