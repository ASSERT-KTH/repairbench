diff --git a/tmp/bb109565-3fb1-439d-aaa4-584e49f03c15_buggy.java b/tmp/afa11f24-0026-418b-b589-ec3fc7591d67_fixed.java
index 7b89a27..803ebdf 100644
--- a/tmp/bb109565-3fb1-439d-aaa4-584e49f03c15_buggy.java
+++ b/tmp/afa11f24-0026-418b-b589-ec3fc7591d67_fixed.java
@@ -1,76 +1,80 @@
-    /**
-     * Determines whether a qualified name is inferred.
-     * NOTE(nicksantos): Determining whether a property is declared or not
-     * is really really obnoxious.
-     *
-     * The problem is that there are two (equally valid) coding styles:
-     *
-     * (function() {
-     *   /* The authoritative definition of goog.bar. /
-     *   goog.bar = function() {};
-     * })();
-     *
-     * function f() {
-     *   goog.bar();
-     *   /* Reset goog.bar to a no-op. /
-     *   goog.bar = function() {};
-     * }
-     *
-     * In a dynamic language with first-class functions, it's very difficult
-     * to know which one the user intended without looking at lots of
-     * contextual information (the second example demonstrates a small case
-     * of this, but there are some really pathological cases as well).
-     *
-     * The current algorithm checks if either the declaration has
-     * JsDoc type information, or @const with a known type,
-     * or a function literal with a name we haven't seen before.
-     */
     private boolean isQualifiedNameInferred(
         String qName, Node n, JSDocInfo info,
         Node rhsValue, JSType valueType) {
       if (valueType == null) {
         return true;
       }
 
       // Prototypes of constructors and interfaces are always declared.
+      // EXCEPTION: If the qualified name is not a top-level static property,
+      // e.g., not X.prototype, but a.prototype in a function, it's still inferred.
       if (qName != null && qName.endsWith(".prototype")) {
+        // If the prototype property is not a static property (i.e. the root of the qName is not a global name)
+        // It's inferred if the left value is not a global or static prototype assignment.
+        // For example, a.prototype = ... where a is a parameter, not a constructor/class.
+        if (n.isGetProp()) {
+          Node target = n.getFirstChild();
+          // If target is not a NAME (i.e. it's a param, like a in function f(a))
+          // treat it as inferred.
+          if (!target.isName()) {
+            return true;
+          }
+        }
+        // Also check cases where prototype is assigned from a parameter or local variable.
+        // If 'a' is a parameter of the current function, treat as inferred
+        // since it's not a class-style prototype.
+        // To do that, walk up the scope to see if 'a' is a param
+        Node target = n.isGetProp() ? n.getFirstChild() : null;
+        if (target != null && target.isName()) {
+          String targetName = target.getString();
+          Node func = NodeUtil.getEnclosingFunction(n);
+          if (func != null) {
+            Node paramList = func.getSecondChild();
+            for (Node param = paramList.getFirstChild(); param != null; param = param.getNext()) {
+              if (param.isName() && param.getString().equals(targetName)) {
+                return true;
+              }
+            }
+          }
+        }
+        // Otherwise, treat constructor/interface prototype as declared.
         return false;
       }
 
       boolean inferred = true;
       if (info != null) {
         inferred = !(info.hasType()
             || info.hasEnumParameterType()
             || (isConstantSymbol(info, n) && valueType != null
                 && !valueType.isUnknownType())
             || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
       }
 
       if (inferred && rhsValue != null && rhsValue.isFunction()) {
         if (info != null) {
           return false;
         } else if (!scope.isDeclared(qName, false) &&
             n.isUnscopedQualifiedName()) {
 
           // Check if this is in a conditional block.
           // Functions assigned in conditional blocks are inferred.
           for (Node current = n.getParent();
                !(current.isScript() || current.isFunction());
                current = current.getParent()) {
             if (NodeUtil.isControlStructure(current)) {
               return true;
             }
           }
 
           // Check if this is assigned in an inner scope.
           // Functions assigned in inner scopes are inferred.
           AstFunctionContents contents =
               getFunctionAnalysisResults(scope.getRootNode());
           if (contents == null ||
               !contents.getEscapedQualifiedNames().contains(qName)) {
             return false;
           }
         }
       }
       return inferred;
     }
\ No newline at end of file
