diff --git a/tmp/feb42f12-9854-4a70-bb25-8eded4797c81_buggy.java b/tmp/2d509cff-dbd4-46ab-955f-37c7196a545e_fixed.java
index 7b89a27..fb50ad2 100644
--- a/tmp/feb42f12-9854-4a70-bb25-8eded4797c81_buggy.java
+++ b/tmp/2d509cff-dbd4-46ab-955f-37c7196a545e_fixed.java
@@ -1,76 +1,103 @@
 /**
  * Determines whether a qualified name is inferred.
  * NOTE(nicksantos): Determining whether a property is declared or not
  * is really really obnoxious.
  *
  * The problem is that there are two (equally valid) coding styles:
  *
  * (function() {
  *   /* The authoritative definition of goog.bar. /
  *   goog.bar = function() {};
  * })();
  *
  * function f() {
  *   goog.bar();
  *   /* Reset goog.bar to a no-op. /
  *   goog.bar = function() {};
  * }
  *
  * In a dynamic language with first-class functions, it's very difficult
  * to know which one the user intended without looking at lots of
  * contextual information (the second example demonstrates a small case
  * of this, but there are some really pathological cases as well).
  *
  * The current algorithm checks if either the declaration has
  * JsDoc type information, or @const with a known type,
  * or a function literal with a name we haven't seen before.
  */
 private boolean isQualifiedNameInferred(
     String qName, Node n, JSDocInfo info,
     Node rhsValue, JSType valueType) {
   if (valueType == null) {
     return true;
   }
 
-      // Prototypes of constructors and interfaces are always declared.
+  // Prototypes of constructors and interfaces are always declared,
+  // UNLESS the qualified name is of the form "<param>.prototype"
+  // (i.e., the prototype property of a function parameter), in which
+  // case the assignment should always be inferred.
   if (qName != null && qName.endsWith(".prototype")) {
+    Node target = n.getFirstChild();
+    if (target != null && target.isGetProp()) {
+      Node owner = target.getFirstChild();
+      if (owner != null && owner.isName() && owner.getOriginalName() != null) {
+        boolean isParam = false;
+        Node maybeFunction = n;
+        while (maybeFunction != null && !maybeFunction.isFunction()) {
+          maybeFunction = maybeFunction.getParent();
+        }
+        if (maybeFunction != null && maybeFunction.isFunction()) {
+          Node params = maybeFunction.getSecondChild();
+          for (Node param = params.getFirstChild(); param != null; param = param.getNext()) {
+            if (param.isName() && param.getString().equals(owner.getString())) {
+              isParam = true;
+              break;
+            }
+          }
+        }
+        if (isParam) {
+          return true;
+        }
+      }
+    }
+    // Regular prototype assignment, not to a parameter's prototype property.
     return false;
   }
 
   boolean inferred = true;
   if (info != null) {
     inferred = !(info.hasType()
         || info.hasEnumParameterType()
         || (isConstantSymbol(info, n) && valueType != null
             && !valueType.isUnknownType())
         || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
   }
 
   if (inferred && rhsValue != null && rhsValue.isFunction()) {
     if (info != null) {
       return false;
     } else if (!scope.isDeclared(qName, false) &&
         n.isUnscopedQualifiedName()) {
 
       // Check if this is in a conditional block.
       // Functions assigned in conditional blocks are inferred.
       for (Node current = n.getParent();
            !(current.isScript() || current.isFunction());
            current = current.getParent()) {
         if (NodeUtil.isControlStructure(current)) {
           return true;
         }
       }
 
       // Check if this is assigned in an inner scope.
       // Functions assigned in inner scopes are inferred.
       AstFunctionContents contents =
           getFunctionAnalysisResults(scope.getRootNode());
       if (contents == null ||
           !contents.getEscapedQualifiedNames().contains(qName)) {
         return false;
       }
     }
   }
   return inferred;
 }
\ No newline at end of file
