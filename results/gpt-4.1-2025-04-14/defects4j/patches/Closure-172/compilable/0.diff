diff --git a/tmp/f197810c-bf05-4a45-b2e8-da4df316ee89_buggy.java b/tmp/9da0cb82-4593-4974-b1ef-23d19d4aa3b8_fixed.java
index 7b89a27..9425b0d 100644
--- a/tmp/f197810c-bf05-4a45-b2e8-da4df316ee89_buggy.java
+++ b/tmp/9da0cb82-4593-4974-b1ef-23d19d4aa3b8_fixed.java
@@ -1,76 +1,64 @@
-    /**
-     * Determines whether a qualified name is inferred.
-     * NOTE(nicksantos): Determining whether a property is declared or not
-     * is really really obnoxious.
-     *
-     * The problem is that there are two (equally valid) coding styles:
-     *
-     * (function() {
-     *   /* The authoritative definition of goog.bar. /
-     *   goog.bar = function() {};
-     * })();
-     *
-     * function f() {
-     *   goog.bar();
-     *   /* Reset goog.bar to a no-op. /
-     *   goog.bar = function() {};
-     * }
-     *
-     * In a dynamic language with first-class functions, it's very difficult
-     * to know which one the user intended without looking at lots of
-     * contextual information (the second example demonstrates a small case
-     * of this, but there are some really pathological cases as well).
-     *
-     * The current algorithm checks if either the declaration has
-     * JsDoc type information, or @const with a known type,
-     * or a function literal with a name we haven't seen before.
-     */
     private boolean isQualifiedNameInferred(
         String qName, Node n, JSDocInfo info,
         Node rhsValue, JSType valueType) {
       if (valueType == null) {
         return true;
       }
 
-      // Prototypes of constructors and interfaces are always declared.
+      // Prototypes of constructors and interfaces are always declared,
+      // EXCEPT when the prototype property is assigned on an instance
+      // (like `a.prototype = ...`), not on a global/constructor (like `Foo.prototype = ...`).
       if (qName != null && qName.endsWith(".prototype")) {
+        // Only consider not inferred if qName is a declaration on a nominal type
+        // Do a basic check: if the qualified name has just one dot (e.g. "Foo.prototype")
+        // and the first part is a capitalized name (heuristic for constructor),
+        // consider it declared. Otherwise, inferred.
+        int idx = qName.lastIndexOf('.');
+        if (idx > 0) {
+          String lhs = qName.substring(0, idx);
+          // If this is a simple string like "Foo", not "x.prototype"
+          if (Character.isUpperCase(lhs.codePointAt(0)) && lhs.indexOf('.') < 0) {
             return false;
           }
+        }
+        // Otherwise, inferred (e.g. a.prototype, b.prototype)
+        return true;
+      }
 
       boolean inferred = true;
       if (info != null) {
         inferred = !(info.hasType()
             || info.hasEnumParameterType()
             || (isConstantSymbol(info, n) && valueType != null
                 && !valueType.isUnknownType())
             || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
       }
 
       if (inferred && rhsValue != null && rhsValue.isFunction()) {
         if (info != null) {
           return false;
         } else if (!scope.isDeclared(qName, false) &&
             n.isUnscopedQualifiedName()) {
 
           // Check if this is in a conditional block.
           // Functions assigned in conditional blocks are inferred.
           for (Node current = n.getParent();
                !(current.isScript() || current.isFunction());
                current = current.getParent()) {
             if (NodeUtil.isControlStructure(current)) {
               return true;
             }
           }
 
           // Check if this is assigned in an inner scope.
           // Functions assigned in inner scopes are inferred.
           AstFunctionContents contents =
               getFunctionAnalysisResults(scope.getRootNode());
           if (contents == null ||
               !contents.getEscapedQualifiedNames().contains(qName)) {
             return false;
           }
         }
       }
       return inferred;
     }
\ No newline at end of file
