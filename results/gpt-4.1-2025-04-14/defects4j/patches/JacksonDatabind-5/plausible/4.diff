diff --git a/tmp/30fcf795-fff2-451b-8129-814a682cae79_buggy.java b/tmp/730be4e6-4e2a-473e-be5e-952d9746c2e4_fixed.java
index b2db1d6..f731db9 100644
--- a/tmp/30fcf795-fff2-451b-8129-814a682cae79_buggy.java
+++ b/tmp/730be4e6-4e2a-473e-be5e-952d9746c2e4_fixed.java
@@ -1,29 +1,29 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
+    /* The following is the bug: collecting parent classes into 'parents' starts from 'mixInCls'
+     * but 'findSuperTypes' (as implemented) adds parents after the first element.
+     * The correct order is from Object down _to_ mixInCls.
+     * We must reverse to apply mix-ins from root to leaf (most-specific last).
+     */
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
+
+    // Reverse to ensure root mix-in methods are added first, leaves can override
+    Collections.reverse(parents);
+
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
             if (am != null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
                 mixIns.add(_constructMethod(m));
             }
         }
     }
 }
\ No newline at end of file
