diff --git a/tmp/8fd6a41e-0382-427c-85b5-8db2f85b629e_buggy.java b/tmp/e2e9e2d5-87a3-455a-97de-db9516e0dcef_fixed.java
index b2db1d6..9a3a6bb 100644
--- a/tmp/8fd6a41e-0382-427c-85b5-8db2f85b629e_buggy.java
+++ b/tmp/e2e9e2d5-87a3-455a-97de-db9516e0dcef_fixed.java
@@ -1,29 +1,25 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
-        parents.add(mixInCls);
+    // The "parents" list should be initialized as empty and ONLY populated by findSuperTypes.
+    // ClassUtil.findSuperTypes will add mixInCls as well as its super types up to (but not including) targetClass.
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
-        for (Class<?> mixin : parents) {
+    parents.add(mixInCls); // Add mixInCls LAST for proper override precedence
+
+    // Iterate in reverse order (from least specific to most specific - so mixInCls comes last)
+    for (int i = parents.size() - 1; i >= 0; --i) {
+        Class<?> mixin = parents.get(i);
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
             if (am != null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
                 mixIns.add(_constructMethod(m));
             }
         }
     }
 }
\ No newline at end of file
