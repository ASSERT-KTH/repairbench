diff --git a/tmp/4788c409-e25d-44fe-bb56-58c63361494f_buggy.java b/tmp/ae89f66a-e24b-4f1d-bff0-69f451907c83_fixed.java
index 03b03d7..d9efeb6 100644
--- a/tmp/4788c409-e25d-44fe-bb56-58c63361494f_buggy.java
+++ b/tmp/ae89f66a-e24b-4f1d-bff0-69f451907c83_fixed.java
@@ -1,25 +1,45 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
     // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+    long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
+    long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
+    long offsetBefore = getOffset(instantBefore);
+    long offsetAfter = getOffset(instantAfter);
+    if (offsetBefore == offsetAfter) {
+        return instant;  // not an overlap
     }
 
     // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+    long localInstant = convertUTCToLocal(instant);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    // Calculate candidate instants for both earlier and later offsets
+    long earlierOffset = Math.min(offsetBefore, offsetAfter);
+    long laterOffset = Math.max(offsetBefore, offsetAfter);
+
+    long earlierInstant = localInstant - earlierOffset;
+    long laterInstant = localInstant - laterOffset;
+
+    // Now, local time might map to two instants in UTC. Determine which is which.
+    // Pick the one that is closer to the supplied instant.
+    if (earlierOrLater) {
+        // later offset
+        if (instant != laterInstant && getOffset(laterInstant) == laterOffset) {
+            return laterInstant;
+        } else {
+            return instant;
+        }
+    } else {
+        // earlier offset
+        if (instant != earlierInstant && getOffset(earlierInstant) == earlierOffset) {
+            return earlierInstant;
+        } else {
+            return instant;
+        }
+    }
 }
\ No newline at end of file
