diff --git a/tmp/4b379050-ac61-4e0c-8525-3985d504fc93_buggy.java b/tmp/7c35111d-1cfa-4bc2-a365-7b6f585ff09a_fixed.java
index 03b03d7..0b87da1 100644
--- a/tmp/4b379050-ac61-4e0c-8525-3985d504fc93_buggy.java
+++ b/tmp/7c35111d-1cfa-4bc2-a365-7b6f585ff09a_fixed.java
@@ -1,25 +1,24 @@
-    /**
-     * Adjusts the offset to be the earlier or later one during an overlap.
-     * 
-     * @param instant  the instant to adjust
-     * @param earlierOrLater  false for earlier, true for later
-     * @return the adjusted instant millis
-     */
 public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
 
     // work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    // Find both instants that represent this local time
+    long first = convertLocalToUTC(local, false, instantBefore);
+    long second = convertLocalToUTC(local, false, instantAfter);
+
+    // Return the requested one
+    if (earlierOrLater) {
+        // return the later instant
+        return second > first ? second : first;
+    } else {
+        // return the earlier instant
+        return second < first ? second : first;
+    }
 }
\ No newline at end of file
