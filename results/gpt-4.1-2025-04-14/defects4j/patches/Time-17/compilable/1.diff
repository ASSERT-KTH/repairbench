diff --git a/tmp/de09fe79-15ce-435c-9bb3-f29b2b924b00_buggy.java b/tmp/f14ab5d1-4ea6-4d01-b117-6bb9d2f08253_fixed.java
index 03b03d7..8fa568a 100644
--- a/tmp/de09fe79-15ce-435c-9bb3-f29b2b924b00_buggy.java
+++ b/tmp/f14ab5d1-4ea6-4d01-b117-6bb9d2f08253_fixed.java
@@ -1,25 +1,33 @@
-    /**
-     * Adjusts the offset to be the earlier or later one during an overlap.
-     * 
-     * @param instant  the instant to adjust
-     * @param earlierOrLater  false for earlier, true for later
-     * @return the adjusted instant millis
-     */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
         
         // evaluate 3 hours before and after to work out if anything is happening
         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
 
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // Find the two offsets at this local time (earlier and later)
+        long earlierInstant = convertLocalToUTC(local, false, instantBefore);
+        long laterInstant = convertLocalToUTC(local, false, instantAfter);
+
+        // Choose which instant to return based on earlierOrLater
+        // In overlap, earlierInstant > laterInstant
+        // But we want 'earlier' to pick the earlier offset, which is the larger UTC instant (since earlier offset = more minutes ahead of UTC)
+        // So pick the one closer to the current instant in the right direction
+        if (instant - earlierInstant < 0 && instant - laterInstant > 0) {
+            // We are in the gap, just return as per earlierOrLater
+            return earlierOrLater ? laterInstant : earlierInstant;
+        }
+        if (earlierOrLater) {
+            // Return later offset
+            return laterInstant;
+        } else {
+            // Return earlier offset
+            return earlierInstant;
+        }
     }
\ No newline at end of file
