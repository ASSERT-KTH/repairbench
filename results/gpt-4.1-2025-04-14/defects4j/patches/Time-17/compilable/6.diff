diff --git a/tmp/b3ef4449-ae22-4625-8265-d38f3ff53e8f_buggy.java b/tmp/cdc0e30e-7840-4dba-bf78-bd82b69de448_fixed.java
index 03b03d7..6300fe4 100644
--- a/tmp/b3ef4449-ae22-4625-8265-d38f3ff53e8f_buggy.java
+++ b/tmp/cdc0e30e-7840-4dba-bf78-bd82b69de448_fixed.java
@@ -1,25 +1,33 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
         
         // evaluate 3 hours before and after to work out if anything is happening
         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
         
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // Find both possible instants for this local time
+        long instant1 = convertLocalToUTC(local, false, instantBefore);
+        long instant2 = convertLocalToUTC(local, false, instantAfter);
+
+        // Choose which is earlier/later
+        if (earlierOrLater) {
+            // Return later instant
+            return (instant1 > instant2) ? instant1 : instant2;
+        } else {
+            // Return earlier instant
+            return (instant1 < instant2) ? instant1 : instant2;
+        }
     }
\ No newline at end of file
