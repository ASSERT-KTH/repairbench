diff --git a/tmp/8681fed0-352b-4fc9-8fe5-4282fbce8275_buggy.java b/tmp/652469e8-c3b5-4eda-93b4-09dcb1240388_fixed.java
index 03b03d7..b533272 100644
--- a/tmp/8681fed0-352b-4fc9-8fe5-4282fbce8275_buggy.java
+++ b/tmp/652469e8-c3b5-4eda-93b4-09dcb1240388_fixed.java
@@ -1,25 +1,43 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
 
     // work out range of instants that have duplicate local times
+    // Find the two candidate UTC times for the same local time
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    // Since there is an overlap, find both possible instants for this local time
+    long earlierInstant = convertLocalToUTC(local, false, instantBefore);
+    long laterInstant = convertLocalToUTC(local, false, instantAfter);
+
+    // earlierInstant < laterInstant always in an overlap
+    // Decide which to pick based on the parameter, or pick the current instant if it's already at the right one
+
+    // Return the instant matching the desired offset
+    if (earlierOrLater) {
+        // prefer later offset
+        if (instant != laterInstant) {
+            return laterInstant;
+        } else {
+            return instant;
+        }
+    } else {
+        // prefer earlier offset
+        if (instant != earlierInstant) {
+            return earlierInstant;
+        } else {
+            return instant;
+        }
+    }
 }
\ No newline at end of file
