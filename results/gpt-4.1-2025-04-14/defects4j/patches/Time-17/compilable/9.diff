diff --git a/tmp/91d60640-0269-4698-8e86-bc51905047ec_buggy.java b/tmp/6f008788-1b44-446a-ada6-54fa5814657a_fixed.java
index 03b03d7..33652d9 100644
--- a/tmp/91d60640-0269-4698-8e86-bc51905047ec_buggy.java
+++ b/tmp/6f008788-1b44-446a-ada6-54fa5814657a_fixed.java
@@ -1,25 +1,34 @@
-    /**
-     * Adjusts the offset to be the earlier or later one during an overlap.
-     * 
-     * @param instant  the instant to adjust
-     * @param earlierOrLater  false for earlier, true for later
-     * @return the adjusted instant millis
-     */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
 
         // evaluate 3 hours before and after to work out if anything is happening
         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
 
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // find both UTC instants that map to this local time (during overlap)
+        long earlierInstant = convertLocalToUTC(local, false, instantBefore);
+        long laterInstant = convertLocalToUTC(local, false, instantAfter);
+
+        // multi-mapping: choose the correct instant based on earlierOrLater flag
+        if (earlierOrLater) {
+            // pick the *later* instant
+            if (laterInstant > earlierInstant) {
+                return laterInstant;
+            } else {
+                return earlierInstant;
+            }
+        } else {
+            // pick the *earlier* instant
+            if (earlierInstant < laterInstant) {
+                return earlierInstant;
+            } else {
+                return laterInstant;
+            }
+        }
     }
\ No newline at end of file
