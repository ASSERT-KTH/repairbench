diff --git a/tmp/db6ccc0e-c24f-44d3-a347-6879a36a4656_buggy.java b/tmp/acb7086b-157e-4a24-a9be-c5974cf728af_fixed.java
index c9da1b7..a703e5b 100644
--- a/tmp/db6ccc0e-c24f-44d3-a347-6879a36a4656_buggy.java
+++ b/tmp/acb7086b-157e-4a24-a9be-c5974cf728af_fixed.java
@@ -1,33 +1,29 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne != null) {
-
         if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
             if (!explicit) {
                 return;
             }
             // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+            // but avoid reporting as conflict if duplicate (same parameters)
+            if (oldOne.getClass() == newOne.getClass() &&
+                oldOne.getMember() == newOne.getMember()) {
+                // same underlying member, allow
+                // just replace (may have new annotations)
+            } else {
                 throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                         +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
             }
         }
+        // otherwise, allow replacing
+    }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
