diff --git a/tmp/d33a27d7-ef2a-4297-a4cf-3df8f7f8546b_buggy.java b/tmp/076cf82b-4500-47ba-bb01-2586f5852027_fixed.java
index c9da1b7..bf0e00c 100644
--- a/tmp/d33a27d7-ef2a-4297-a4cf-3df8f7f8546b_buggy.java
+++ b/tmp/076cf82b-4500-47ba-bb01-2586f5852027_fixed.java
@@ -1,33 +1,34 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
+
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+        if ((_explicitCreators & mask) != 0) {
+            // already had explicitly annotated, leave as-is
             if (!explicit) {
                 return;
             }
             // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+            // If equal, allow replacing (for cases like Java StringBuilder with multiple identical ctors)
+            if (oldOne.equals(newOne)) {
+                _creators[typeIndex] = _fixAccess(newOne);
+                return;
             }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
             throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                 +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
         }
+        // If not explicit before, but same as old, it's ok; just replace
+        if (oldOne.equals(newOne)) {
+            _creators[typeIndex] = _fixAccess(newOne);
+            return;
         }
+        // else fall-through, replace as below
+    }
+
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
