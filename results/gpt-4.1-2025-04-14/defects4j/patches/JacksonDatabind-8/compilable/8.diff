diff --git a/tmp/496f1aa8-0234-41be-883e-87556cf2f5f7_buggy.java b/tmp/0ae41434-bd54-4fec-b52a-b264dad0fc75_fixed.java
index c9da1b7..b0557f7 100644
--- a/tmp/496f1aa8-0234-41be-883e-87556cf2f5f7_buggy.java
+++ b/tmp/0ae41434-bd54-4fec-b52a-b264dad0fc75_fixed.java
@@ -1,33 +1,36 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne != null) {
 
         if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
             // but skip, if new one not annotated
             if (!explicit) {
                 return;
             }
             // both explicit: verify
             // otherwise only verify if neither explicitly annotated.
+            if (oldOne.getClass() == newOne.getClass()
+                    && oldOne.getMember().equals(newOne.getMember())) {
+                // Same member, just ignore duplicate
+                return;
             }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
             throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                     +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+        }
+
+        // one more thing: ok to override in sub-class
+        if (oldOne.getClass() == newOne.getClass()
+                && oldOne.getMember().equals(newOne.getMember())) {
+            // Same member, just ignore duplicate
+            return;
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
