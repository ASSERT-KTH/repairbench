diff --git a/tmp/86f0152f-955b-4046-9c71-508f6fa00dd7_buggy.java b/tmp/c6636afd-71cf-4bed-a728-a1299adb82b3_fixed.java
index c9da1b7..d01458f 100644
--- a/tmp/86f0152f-955b-4046-9c71-508f6fa00dd7_buggy.java
+++ b/tmp/c6636afd-71cf-4bed-a728-a1299adb82b3_fixed.java
@@ -1,33 +1,26 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+        // If both old and new are explicitly annotated creators
+        if ((_explicitCreators & mask) != 0) {
             if (!explicit) {
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+            // Only throw an exception if not the same member (i.e. different methods/constructors)
+            if (oldOne.getClass() == newOne.getClass() && !oldOne.equals(newOne)) {
                 throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
                         + " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
             }
+            // If same member, ignore duplicate
+            // (fall-through to update creator if needed)
+        }
+        // If not explicit, allow override
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
