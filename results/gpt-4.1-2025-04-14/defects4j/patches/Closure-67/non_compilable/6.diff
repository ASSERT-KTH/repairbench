diff --git a/tmp/d83dd337-2c8c-4466-9c1f-1ff3135e74c5_buggy.java b/tmp/a3892353-7915-4f2f-911a-b867ba6d8943_fixed.java
index 939f49b..0bc7190 100644
--- a/tmp/d83dd337-2c8c-4466-9c1f-1ff3135e74c5_buggy.java
+++ b/tmp/a3892353-7915-4f2f-911a-b867ba6d8943_fixed.java
@@ -1,21 +1,28 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+      && n.getType() == Token.GETPROP) {
+    // Match both obj.prototype.prop = ... and obj.prototype['prop'] = ...
+    Node target = n.getFirstChild();
+    if (target != null && target.getType() == Token.GETPROP) {
+      Node object = target.getFirstChild();
+      Node property = object != null ? object.getNext() : null;
+      if (property != null && property.getType() == Token.STRING &&
+          property.getString().equals("prototype")) {
+        return true;
+      }
+    }
+    // Also allow obj.prototype['prop'] = ...
+    Node obj = n.getFirstChild();
+    Node prop = obj != null ? obj.getNext() : null;
+    if (obj != null && obj.getType() == Token.GETPROP &&
+        prop != null && (prop.getType() == Token.STRING || prop.getType() == Token.STRING_KEY)) {
+      Node prototype = obj.getFirstChild() != null ? obj.getFirstChild().getNext() : null;
+      if (prototype != null && prototype.getType() == Token.STRING &&
+          prototype.getString().equals("prototype")) {
         return true;
       }
     }
   }
-
   return false;
 }
\ No newline at end of file
