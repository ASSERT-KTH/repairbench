diff --git a/tmp/6da7f904-01bd-4a85-a995-9f1e94949c46_buggy.java b/tmp/0bf7ad01-cc48-4e46-9a38-abf198316ed7_fixed.java
index 939f49b..dc770e4 100644
--- a/tmp/6da7f904-01bd-4a85-a995-9f1e94949c46_buggy.java
+++ b/tmp/0bf7ad01-cc48-4e46-9a38-abf198316ed7_fixed.java
@@ -1,21 +1,51 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
       && n.getType() == Token.GETPROP
       ) {
     // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+    boolean isPrototype =
+        n.getFirstChild() != null &&
+        n.getFirstChild().getType() == Token.GETPROP &&
+        n.getFirstChild().getFirstChild() != null &&
+        n.getFirstChild().getFirstChild().getNext() != null &&
+        n.getFirstChild().getFirstChild().getNext().getType() == Token.STRING &&
+        "prototype".equals(n.getFirstChild().getFirstChild().getNext().getString());
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+    // Also handle bracket notation: e.g., a.prototype['foo']
+    boolean isPrototypeBracket =
+        n.getFirstChild() != null &&
+        n.getFirstChild().getType() == Token.GETPROP &&
+        n.getFirstChild().getFirstChild() != null &&
+        n.getFirstChild().getFirstChild().getNext() != null &&
+        n.getFirstChild().getFirstChild().getNext().isString() &&
+        "prototype".equals(n.getFirstChild().getFirstChild().getNext().getString());
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+    // Additionally, handle direct: x.prototype.foo = ...
+    boolean directPrototype =
+        n.getFirstChild() != null &&
+        n.getFirstChild().getType() == Token.GETPROP &&
+        n.getFirstChild().getFirstChild() != null &&
+        n.getFirstChild().getFirstChild().getNext() != null &&
+        n.getFirstChild().getFirstChild().getNext().getType() == Token.STRING &&
+        "prototype".equals(n.getFirstChild().getFirstChild().getNext().getString());
+
+    // Handle x.prototype['foo'] = ...
+    boolean directBracketPrototype =
+        n.getFirstChild() != null &&
+        n.getFirstChild().getType() == Token.GETELEM &&
+        n.getFirstChild().getFirstChild() != null &&
+        n.getFirstChild().getFirstChild().getType() == Token.GETPROP &&
+        n.getFirstChild().getFirstChild().getFirstChild() != null &&
+        n.getFirstChild().getFirstChild().getFirstChild().getNext() != null &&
+        n.getFirstChild().getFirstChild().getFirstChild().getNext().getType() == Token.STRING &&
+        "prototype".equals(n.getFirstChild().getFirstChild().getFirstChild().getNext().getString());
+
+    // Accept x.prototype.foo = ... or x.prototype['foo'] = ...
+    if (isPrototype || isPrototypeBracket || directPrototype || directBracketPrototype) {
       return true;
     }
   }
-      }
 
   return false;
 }
\ No newline at end of file
