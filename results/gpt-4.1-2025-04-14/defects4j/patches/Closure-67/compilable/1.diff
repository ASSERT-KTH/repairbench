diff --git a/tmp/b58fb784-e94b-4cf1-8908-d49785dab3aa_buggy.java b/tmp/c1a41584-9ce8-4e67-81fd-698e02c286a7_fixed.java
index 939f49b..8171073 100644
--- a/tmp/b58fb784-e94b-4cf1-8908-d49785dab3aa_buggy.java
+++ b/tmp/c1a41584-9ce8-4e67-81fd-698e02c286a7_fixed.java
@@ -1,21 +1,48 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
+      && n.getType() == Token.GETPROP) {
+    // We want to include both chained (e.prototype.method = ...) and
+    // bracket notation (e.prototype['method'] = ...) assignments.
+    Node propAccess = n;
+    // Handle chained assign (e.g., e.prototype.method1 = ...)
+    Node obj = propAccess.getFirstChild();
+    if (obj != null) {
+      boolean isChainedProperty = obj.getType() == Token.GETPROP;
       if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+        Node maybeProto = obj.getFirstChild().getNext();
+        if (maybeProto != null &&
+            maybeProto.getType() == Token.STRING &&
+            maybeProto.getString().equals("prototype")) {
+          return true;
+        }
+      } else {
+        // Handle direct property access (e.g., e.prototype['x'] = ...)
+        // or (e.prototype.x = ...)
+        Node target = propAccess.getFirstChild();
+        if (target != null &&
+            target.getType() == Token.GETPROP) {
+          Node maybeProto = target.getFirstChild().getNext();
+          if (maybeProto != null &&
+              maybeProto.getType() == Token.STRING &&
+              maybeProto.getString().equals("prototype")) {
+            return true;
+          }
+        }
+      }
+    }
+    // For e.prototype['alias1'] = ... assignments
+    if (propAccess.getFirstChild() != null &&
+        propAccess.getFirstChild().getType() == Token.GETPROP) {
+      Node getter = propAccess.getFirstChild();
+      Node maybeProto = getter.getFirstChild().getNext();
+      if (maybeProto != null &&
+          maybeProto.getType() == Token.STRING &&
+          maybeProto.getString().equals("prototype")) {
         return true;
       }
     }
   }
 
   return false;
 }
\ No newline at end of file
