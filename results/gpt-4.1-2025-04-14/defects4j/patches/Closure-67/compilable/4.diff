diff --git a/tmp/bb0a806f-ba6e-455d-a246-f083feb8fd5c_buggy.java b/tmp/67fbbf81-ac96-461c-ad4a-e7e50798e4fd_fixed.java
index 939f49b..9bf6a6f 100644
--- a/tmp/bb0a806f-ba6e-455d-a246-f083feb8fd5c_buggy.java
+++ b/tmp/67fbbf81-ac96-461c-ad4a-e7e50798e4fd_fixed.java
@@ -1,21 +1,31 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
       && n.getType() == Token.GETPROP
       ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+    // Check if the property being assigned is a prototype property
+    Node propOwner = n.getFirstChild();
+    if (propOwner != null && propOwner.getType() == Token.GETPROP) {
+      Node middle = propOwner.getFirstChild();
+      Node right = middle != null ? middle.getNext() : null;
+      if (right != null && right.getType() == Token.STRING &&
+          "prototype".equals(right.getString())) {
+        return true;
+      }
+    }
+    // Also handle the quoted (string) property style: obj['prototype'].foo = ...
+    Node obj = n.getFirstChild();
+    Node prop = obj != null ? obj.getNext() : null;
+    if (obj != null && obj.getType() == Token.GETPROP) {
+      // already handled above
+    } else if (obj != null && obj.getType() == Token.GETELEM) {
+      Node objBase = obj.getFirstChild();
+      Node objProp = objBase != null ? objBase.getNext() : null;
+      if (objProp != null && objProp.getType() == Token.STRING &&
+          "prototype".equals(objProp.getString())) {
         return true;
       }
     }
   }
-
   return false;
 }
\ No newline at end of file
