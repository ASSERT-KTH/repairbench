diff --git a/tmp/de2f785c-cbec-41b6-9dae-5c75630b67a6_buggy.java b/tmp/6ff84db7-c5fc-4106-851c-be138999edef_fixed.java
index 939f49b..34e5705 100644
--- a/tmp/de2f785c-cbec-41b6-9dae-5c75630b67a6_buggy.java
+++ b/tmp/6ff84db7-c5fc-4106-851c-be138999edef_fixed.java
@@ -1,21 +1,27 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+      && n.getType() == Token.GETPROP) {
     // We want to exclude the assignment itself from the usage list
     boolean isChainedProperty =
         n.getFirstChild().getType() == Token.GETPROP;
 
     if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+      Node getPropNode = n.getFirstChild();
+      Node propNode = getPropNode.getFirstChild().getNext();
+      if (propNode != null && propNode.getType() == Token.STRING &&
+          propNode.getString().equals("prototype")) {
+        return true;
+      }
+    }
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+    // Fix: Also support bracket property access, like e.prototype['alias1']
+    Node propName = n.getFirstChild().getNext();
+    if (propName != null && propName.getType() == Token.STRING &&
+        propName.getString().equals("prototype")) {
       return true;
     }
   }
-      }
 
   return false;
 }
\ No newline at end of file
