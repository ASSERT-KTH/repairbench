diff --git a/tmp/0c43b3cf-98b9-4e6c-80fa-7cffbcd550f0_buggy.java b/tmp/867aafb1-0c1f-4f50-872b-ede9c397c94b_fixed.java
index de9af32..1255609 100644
--- a/tmp/0c43b3cf-98b9-4e6c-80fa-7cffbcd550f0_buggy.java
+++ b/tmp/867aafb1-0c1f-4f50-872b-ede9c397c94b_fixed.java
@@ -1,18 +1,26 @@
 /**
  * @see #findCalledFunctions(Node)
  */
 private void findCalledFunctions(
     Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
     Node child = node.getFirstChild();
+    // Only add if this is a direct function name call (not a method/property call)
     if (child.getType() == Token.NAME) {
       changed.add(child.getString());
     }
   }
 
-    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
+  // Don't traverse into the callee of CALL nodes (first child)
+  int startChildIndex = 0;
+  if (node.getType() == Token.CALL && node.hasChildren()) {
+    startChildIndex = 1; // skip first child (the callee)
+  }
+  int i = 0;
+  for (Node c = node.getFirstChild(); c != null; c = c.getNext(), i++) {
+    if (i < startChildIndex) continue;
     findCalledFunctions(c, changed);
   }
 }
\ No newline at end of file
