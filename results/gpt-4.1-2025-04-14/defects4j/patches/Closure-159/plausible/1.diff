diff --git a/tmp/84e93643-fd23-44fc-9cf5-ef79e2bd6dfe_buggy.java b/tmp/9ed9d376-ff55-4f0b-be9a-04921201ecd1_fixed.java
index de9af32..b010471 100644
--- a/tmp/84e93643-fd23-44fc-9cf5-ef79e2bd6dfe_buggy.java
+++ b/tmp/9ed9d376-ff55-4f0b-be9a-04921201ecd1_fixed.java
@@ -1,18 +1,23 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
       Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
+      if (child != null && child.getType() == Token.NAME) {
         changed.add(child.getString());
       }
     }
 
+    // Only traverse children if this node is not a CALL with a .call or .apply
+    // i.e. foo.call(...) or foo.apply(...)
+    // In the buggy code, we always traverse children, but for CALL nodes we should not
+    if (!(node.getType() == Token.CALL)) {
       for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
         findCalledFunctions(c, changed);
       }
     }
+  }
\ No newline at end of file
