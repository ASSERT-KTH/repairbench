diff --git a/tmp/e47e3014-dc42-488b-852c-92741ec21e69_buggy.java b/tmp/8a3b5b51-dab7-4acf-aa17-d682f76fe493_fixed.java
index de9af32..4670cd1 100644
--- a/tmp/e47e3014-dc42-488b-852c-92741ec21e69_buggy.java
+++ b/tmp/8a3b5b51-dab7-4acf-aa17-d682f76fe493_fixed.java
@@ -1,18 +1,25 @@
 /**
  * @see #findCalledFunctions(Node)
  */
 private void findCalledFunctions(
     Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
     Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
+    if (child != null && child.getType() == Token.NAME) {
       changed.add(child.getString());
     }
   }
 
+  // Only recurse over children that are not direct children of a CALL node's first child,
+  // since the CALLEE of a call is not "called" in the sense of named function calls,
+  // e.g., the 'foo' in (foo.bar)() or (function() {})()
   for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
+    // Skip the callee in a CALL node, as it may be an arbitrary expression (not a name)
+    if (node.getType() == Token.CALL && c == node.getFirstChild()) {
+      continue;
+    }
     findCalledFunctions(c, changed);
   }
 }
\ No newline at end of file
