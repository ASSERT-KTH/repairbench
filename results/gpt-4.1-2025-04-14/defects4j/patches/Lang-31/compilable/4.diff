diff --git a/tmp/3773d5e3-439b-4d00-987a-d63c84ae762d_buggy.java b/tmp/681a7d73-338e-487d-b720-e5cf5f758fc3_fixed.java
index eea9e73..ea0e9b8 100644
--- a/tmp/3773d5e3-439b-4d00-987a-d63c84ae762d_buggy.java
+++ b/tmp/681a7d73-338e-487d-b720-e5cf5f758fc3_fixed.java
@@ -1,41 +1,21 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
     int csLength = cs.length();
     int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
+
+    int i = 0;
+    while (i < csLength) {
+        final int cp = Character.codePointAt(cs, i);
         for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+            char searchChar = searchChars[j];
+            // Only match if cp is in BMP and equals searchChar
+            if (cp <= Character.MAX_VALUE && cp == searchChar) {
                 return true;
             }
         }
+        i += Character.charCount(cp);
     }
     return false;
 }
\ No newline at end of file
