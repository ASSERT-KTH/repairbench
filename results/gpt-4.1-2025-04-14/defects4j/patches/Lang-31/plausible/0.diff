diff --git a/tmp/9ad7a138-3ae6-48f3-992c-76f4af75631c_buggy.java b/tmp/f9f7c375-8978-41bf-9f77-e35182f5ce8d_fixed.java
index eea9e73..1a86be1 100644
--- a/tmp/9ad7a138-3ae6-48f3-992c-76f4af75631c_buggy.java
+++ b/tmp/f9f7c375-8978-41bf-9f77-e35182f5ce8d_fixed.java
@@ -1,41 +1,28 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
-		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+    int csLen = cs.length();
+    int searchLen = searchChars.length;
+    int i = 0;
+    while (i < csLen) {
+        int codePoint = Character.codePointAt(cs, i);
+        for (int j = 0; j < searchLen;) {
+            char c = searchChars[j++];
+            if (Character.isHighSurrogate(c) && j < searchLen &&
+                Character.isLowSurrogate(searchChars[j])) {
+                int searchCodePoint = Character.toCodePoint(c, searchChars[j]);
+                j++;
+                if (codePoint == searchCodePoint) {
                     return true;
                 }
+            } else {
+                if (c == codePoint) {
+                    return true;
+                }
+            }
         }
+        i += Character.charCount(codePoint);
     }
     return false;
 }
\ No newline at end of file
