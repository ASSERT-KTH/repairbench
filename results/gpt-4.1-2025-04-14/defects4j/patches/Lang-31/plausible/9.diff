diff --git a/tmp/89b74cc1-62b0-420c-9eae-2c8b82000c3d_buggy.java b/tmp/d365f030-d1cd-4a88-8e0b-6310585ae58b_fixed.java
index eea9e73..f212cd6 100644
--- a/tmp/89b74cc1-62b0-420c-9eae-2c8b82000c3d_buggy.java
+++ b/tmp/d365f030-d1cd-4a88-8e0b-6310585ae58b_fixed.java
@@ -1,41 +1,33 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
     int csLength = cs.length();
     int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
+
+    // handle supplementary (surrogate pair) case:
+    for (int i = 0; i < csLength; ) {
+        int cp = Character.codePointAt(cs, i);
+        int cpCharCount = Character.charCount(cp);
+        if (cpCharCount == 2) { // supplementary character
+            // try to match searchChars sequence as a surrogate pair
+            for (int j = 0; j < searchLength - 1; j++) {
+                if (Character.isSurrogatePair(searchChars[j], searchChars[j+1])) {
+                    int searchCp = Character.toCodePoint(searchChars[j], searchChars[j+1]);
+                    if (cp == searchCp) {
+                        return true;
+                    }
+                }
+            }
+        } else { // BMP
+            char ch = (char) cp;
             for (int j = 0; j < searchLength; j++) {
                 if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
                     return true;
                 }
             }
         }
+        i += cpCharCount;
+    }
     return false;
 }
\ No newline at end of file
