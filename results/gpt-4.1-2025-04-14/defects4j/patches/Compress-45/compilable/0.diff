diff --git a/tmp/b23c73a7-16ae-4c4c-8e74-4a2541702816_buggy.java b/tmp/0b9ddb46-0f4e-497a-adcb-07daeb6bc48c_fixed.java
index 1bbc082..ab197f9 100644
--- a/tmp/b23c73a7-16ae-4c4c-8e74-4a2541702816_buggy.java
+++ b/tmp/0b9ddb46-0f4e-497a-adcb-07daeb6bc48c_fixed.java
@@ -1,36 +1,40 @@
 /**
  * Write an long integer into a buffer as an octal string if this
  * will fit, or as a binary number otherwise.
  * 
  * Uses {@link #formatUnsignedOctalString} to format
  * the value as an octal string with leading zeros.
  * The converted number is followed by a space.
  * 
  * @param value The value to write into the buffer.
  * @param buf The destination buffer.
  * @param offset The starting offset into the buffer.
  * @param length The length of the buffer.
  * @return The updated offset.
  * @throws IllegalArgumentException if the value (and trailer)
  * will not fit in the buffer.
  * @since 1.4
  */
 public static int formatLongOctalOrBinaryBytes(
     final long value, final byte[] buf, final int offset, final int length) {
 
     // Check whether we are dealing with UID/GID or SIZE field
     final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
     final boolean negative = value < 0;
     if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
         return formatLongOctalBytes(value, buf, offset, length);
     }
 
+    // bug fix: if we already handled octal, we should try binary now.
+    // If the binary field is small enough, use the small-format, otherwise use big-integer
+
     if (length < 9) {
         formatLongBinary(value, buf, offset, length, negative);
-        }
+        return offset + length;
+    } else {
         formatBigIntegerBinary(value, buf, offset, length, negative);
-
         buf[offset] = (byte) (negative ? 0xff : 0x80);
         return offset + length;
     }
+}
\ No newline at end of file
