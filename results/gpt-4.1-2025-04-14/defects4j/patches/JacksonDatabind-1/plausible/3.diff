diff --git a/tmp/9907b6bf-302c-48ac-907e-68dbb0c18b8b_buggy.java b/tmp/2f7a7703-7ac8-46dd-80fc-bb8082169a5c_fixed.java
index dbadad4..f4a4d5d 100644
--- a/tmp/9907b6bf-302c-48ac-907e-68dbb0c18b8b_buggy.java
+++ b/tmp/2f7a7703-7ac8-46dd-80fc-bb8082169a5c_fixed.java
@@ -1,50 +1,62 @@
 /**
  * Alternative to {@link #serializeAsField} that is used when a POJO
  * is serialized as JSON Array; the difference is that no field names
  * are written.
  * 
  * @since 2.1
  */
 public void serializeAsColumn(Object bean, JsonGenerator jgen, SerializerProvider prov)
     throws Exception
 {
     Object value = get(bean);
     if (value == null) { // nulls need specialized handling
         if (_nullSerializer != null) {
             _nullSerializer.serialize(null, jgen, prov);
         } else { // can NOT suppress entries in tabular output
             jgen.writeNull();
         }
+        // Important: placeholder (extra separator/comma) must NOT be written for nulls
+        return;
     }
     // otherwise find serializer to use
     JsonSerializer<Object> ser = _serializer;
     if (ser == null) {
         Class<?> cls = value.getClass();
         PropertySerializerMap map = _dynamicSerializers;
         ser = map.serializerFor(cls);
         if (ser == null) {
             ser = _findAndAddDynamic(map, cls, prov);
         }
     }
     // and then see if we must suppress certain values (default, empty)
     if (_suppressableValue != null) {
         if (MARKER_FOR_EMPTY == _suppressableValue) {
             if (ser.isEmpty(value)) { // can NOT suppress entries in tabular output
-                    serializeAsPlaceholder(bean, jgen, prov);
+                // Do NOT write placeholder for empty
+                if (_nullSerializer != null) {
+                    _nullSerializer.serialize(null, jgen, prov);
+                } else {
+                    jgen.writeNull();
+                }
                 return;
             }
         } else if (_suppressableValue.equals(value)) { // can NOT suppress entries in tabular output
-                serializeAsPlaceholder(bean, jgen, prov);
+            // Do NOT write placeholder for suppressed
+            if (_nullSerializer != null) {
+                _nullSerializer.serialize(null, jgen, prov);
+            } else {
+                jgen.writeNull();
+            }
             return;
         }
     }
     // For non-nulls: simple check for direct cycles
     if (value == bean) {
         _handleSelfReference(bean, ser);
     }
     if (_typeSerializer == null) {
         ser.serialize(value, jgen, prov);
     } else {
         ser.serializeWithType(value, jgen, prov, _typeSerializer);
     }
 }
\ No newline at end of file
