diff --git a/tmp/25e0ea56-721d-4627-9247-7f9488dbbb8b_buggy.java b/tmp/0a3e8eb7-0fd8-4f3f-911a-c3cd7aa577ec_fixed.java
index 7e64f1d..343d182 100644
--- a/tmp/25e0ea56-721d-4627-9247-7f9488dbbb8b_buggy.java
+++ b/tmp/0a3e8eb7-0fd8-4f3f-911a-c3cd7aa577ec_fixed.java
@@ -1,78 +1,75 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
 protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
 {
     List tokens = new ArrayList();
 
     boolean eatTheRest = false;
 
     for (int i = 0; i < arguments.length; i++)
     {
         String arg = arguments[i];
 
         if ("--".equals(arg))
         {
             eatTheRest = true;
             tokens.add("--");
         }
         else if ("-".equals(arg))
         {
             tokens.add("-");
         }
         else if (arg.startsWith("-"))
         {
             String opt = Util.stripLeadingHyphens(arg);
 
+            // Handle --foo=bar or -foo=bar
+            int equalsIndex = arg.indexOf("=");
+            if ((arg.startsWith("--") && equalsIndex != -1) || (arg.startsWith("-") && !arg.startsWith("--") && equalsIndex != -1)) {
+                String optName = arg.substring(arg.startsWith("--") ? 2 : 1, equalsIndex);
+                String optWithPrefix = arg.startsWith("--") ? "--" + optName : "-" + optName;
+                String value = arg.substring(equalsIndex + 1);
+
+                if (options.hasOption(optName)) {
+                    tokens.add(optWithPrefix);
+                    tokens.add(value);
+                } else {
+                    // Unrecognized option, treat as is (previous fallback logic)
+                    eatTheRest = stopAtNonOption;
+                    tokens.add(arg);
+                }
+            }
+            // Handle special case like -Dproperty=value
+            else if (arg.length() > 2 && !arg.startsWith("--") && options.hasOption(arg.substring(1, 2)))
+            {
+                tokens.add(arg.substring(0, 2));
+                tokens.add(arg.substring(2));
+            }
+            else
+            {
                 if (options.hasOption(opt))
                 {
                     tokens.add(arg);
                 }
                 else
-                {
-                    if (options.hasOption(arg.substring(0, 2)))
-                    {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
-                    }
-                    else
                 {
                     eatTheRest = stopAtNonOption;
                     tokens.add(arg);
                 }
             }
         }
         else
         {
             tokens.add(arg);
         }
 
         if (eatTheRest)
         {
             for (i++; i < arguments.length; i++)
             {
                 tokens.add(arguments[i]);
             }
+            break;
         }
     }
 
     return (String[]) tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
