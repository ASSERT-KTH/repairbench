diff --git a/tmp/8de25472-8d90-4951-bb1e-3fa37f8aa13d_buggy.java b/tmp/27c1e42e-5afc-4abd-bb87-7e590c709a5f_fixed.java
index a7e6997..75bc2ab 100644
--- a/tmp/8de25472-8d90-4951-bb1e-3fa37f8aa13d_buggy.java
+++ b/tmp/27c1e42e-5afc-4abd-bb87-7e590c709a5f_fixed.java
@@ -1,12 +1,29 @@
 /**
  * Tells if the token looks like a short option.
  * 
  * @param token
  */
 private boolean isShortOption(String token)
 {
-        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        return token.startsWith("-") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));
+    // Accept -S, -SV, -S=V, -SV1=V2, -S1S2 where S* are known short options
+    if (!token.startsWith("-") || token.startsWith("--") || token.length() < 2) {
+        return false;
+    }
+    String t = token.substring(1);
+    // If token contains '=', get part before '='
+    String opt = t.contains("=") ? t.substring(0, t.indexOf('=')) : t;
+
+    // If the entire opt is a registered short option, return true
+    if (options.hasShortOption(opt)) {
+        return true;
+    }
 
-        // remove leading "-" and "=value"
+    // If opt is multi-character, check if all individual characters are short options
+    for (int i = 0; i < opt.length(); i++) {
+        String ch = String.valueOf(opt.charAt(i));
+        if (!options.hasShortOption(ch)) {
+            return false;
+        }
+    }
+    return true;
 }
\ No newline at end of file
