diff --git a/tmp/08aecaf1-b0ac-4f70-8a70-3c9b890ac3a5_buggy.java b/tmp/56068643-6258-4bff-bef7-62293d348f22_fixed.java
index 40f74f7..cc66c0e 100644
--- a/tmp/08aecaf1-b0ac-4f70-8a70-3c9b890ac3a5_buggy.java
+++ b/tmp/56068643-6258-4bff-bef7-62293d348f22_fixed.java
@@ -1,50 +1,56 @@
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
         if (node.getNodeType() != Node.ELEMENT_NODE) {
             return false;
         }
 
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName testName = nodeNameTest.getNodeName();
         String namespaceURI = nodeNameTest.getNamespaceURI();
         boolean wildcard = nodeNameTest.isWildcard();
-            String testPrefix = testName.getPrefix();
+        String testPrefix = testName != null ? testName.getPrefix() : null;
         if (wildcard && testPrefix == null) {
             return true;
         }
+        String nodeLocalName = DOMNodePointer.getLocalName(node);
+        String testLocalName = testName != null ? testName.getName() : null;
         if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+            || (testLocalName != null && testLocalName.equals(nodeLocalName))) {
             String nodeNS = DOMNodePointer.getNamespaceURI(node);
+            // If the test has a wildcard, namespace should match only when testPrefix is specified
+            if (wildcard && testPrefix == null) {
+                // Wildcard, no prefix: match any namespace
+                return true;
+            }
             return equalStrings(namespaceURI, nodeNS);
         }
         return false;
     }
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
             case Compiler.NODE_TYPE_NODE :
                 return nodeType == Node.ELEMENT_NODE
                         || nodeType == Node.DOCUMENT_NODE;
             case Compiler.NODE_TYPE_TEXT :
                 return nodeType == Node.CDATA_SECTION_NODE
                     || nodeType == Node.TEXT_NODE;
             case Compiler.NODE_TYPE_COMMENT :
                 return nodeType == Node.COMMENT_NODE;
             case Compiler.NODE_TYPE_PI :
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
         return false;
     }
     if (test instanceof ProcessingInstructionTest) {
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
             return testPI.equals(nodePI);
         }
     }
     return false;
 }
\ No newline at end of file
