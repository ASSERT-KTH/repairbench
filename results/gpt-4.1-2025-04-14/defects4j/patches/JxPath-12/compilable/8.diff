diff --git a/tmp/a3acde4e-5b5f-4ff9-897c-7ef9a128844a_buggy.java b/tmp/f4826ae3-e3e4-4928-a17f-3efc5f9b3e86_fixed.java
index 40f74f7..aedcecb 100644
--- a/tmp/a3acde4e-5b5f-4ff9-897c-7ef9a128844a_buggy.java
+++ b/tmp/f4826ae3-e3e4-4928-a17f-3efc5f9b3e86_fixed.java
@@ -1,50 +1,67 @@
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
         if (node.getNodeType() != Node.ELEMENT_NODE) {
             return false;
         }
 
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName testName = nodeNameTest.getNodeName();
         String namespaceURI = nodeNameTest.getNamespaceURI();
         boolean wildcard = nodeNameTest.isWildcard();
         String testPrefix = testName.getPrefix();
         if (wildcard && testPrefix == null) {
+            // Accept any element
             return true;
         }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+
+        // Bug fix: When a testName has a prefix, compare both local names and namespace URIs.
+        String testLocalName = testName.getName();
+        String nodeLocalName = DOMNodePointer.getLocalName(node);
         String nodeNS = DOMNodePointer.getNamespaceURI(node);
+
+        if (wildcard) {
+            // Wildcard, but with a prefix, so namespace must match
+            if (testPrefix != null) {
+                return equalStrings(namespaceURI, nodeNS);
+            }
+            // General wildcard matched above.
+            return true;
+        }
+        // Not wildcard: match local name and namespace
+        if (testLocalName.equals(nodeLocalName)) {
+            // Compare namespace URIs. If test has a namespace URI, require match. If test namespaceURI is null, accept empty or null nodeNS.
+            if (namespaceURI == null) {
+                return nodeNS == null || nodeNS.length() == 0;
+            }
             return equalStrings(namespaceURI, nodeNS);
         }
         return false;
     }
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
             case Compiler.NODE_TYPE_NODE :
                 return nodeType == Node.ELEMENT_NODE
                         || nodeType == Node.DOCUMENT_NODE;
             case Compiler.NODE_TYPE_TEXT :
                 return nodeType == Node.CDATA_SECTION_NODE
                     || nodeType == Node.TEXT_NODE;
             case Compiler.NODE_TYPE_COMMENT :
                 return nodeType == Node.COMMENT_NODE;
             case Compiler.NODE_TYPE_PI :
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
         return false;
     }
     if (test instanceof ProcessingInstructionTest) {
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
             return testPI.equals(nodePI);
         }
     }
     return false;
 }
\ No newline at end of file
