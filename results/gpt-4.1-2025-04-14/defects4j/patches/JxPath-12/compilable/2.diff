diff --git a/tmp/9d26829f-60fd-45f4-868a-0f1911ab01e8_buggy.java b/tmp/0f59dcee-b954-40c2-ab4c-fb5f2b9e46ad_fixed.java
index 40f74f7..b8fc12f 100644
--- a/tmp/9d26829f-60fd-45f4-868a-0f1911ab01e8_buggy.java
+++ b/tmp/0f59dcee-b954-40c2-ab4c-fb5f2b9e46ad_fixed.java
@@ -1,50 +1,63 @@
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
         if (node.getNodeType() != Node.ELEMENT_NODE) {
             return false;
         }
 
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName testName = nodeNameTest.getNodeName();
         String namespaceURI = nodeNameTest.getNamespaceURI();
         boolean wildcard = nodeNameTest.isWildcard();
         String testPrefix = testName.getPrefix();
-            if (wildcard && testPrefix == null) {
-                return true;
-            }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+
+        // Get node's local name and namespace
+        String nodeLocalName = DOMNodePointer.getLocalName(node);
         String nodeNS = DOMNodePointer.getNamespaceURI(node);
+
+        // Matching wildcard
+        if (wildcard) {
+            if (testPrefix == null) {
+                // Matches any element, regardless of namespace
+                return true;
+            } else {
+                // Wildcard with prefix - must match namespace
                 return equalStrings(namespaceURI, nodeNS);
             }
+        }
+
+        // Not wildcard: match local name and namespace
+        if (testName.getName().equals(nodeLocalName)
+            && equalStrings(namespaceURI, nodeNS)) {
+            return true;
+        }
+
         return false;
     }
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
             case Compiler.NODE_TYPE_NODE:
                 return nodeType == Node.ELEMENT_NODE
                         || nodeType == Node.DOCUMENT_NODE;
             case Compiler.NODE_TYPE_TEXT:
                 return nodeType == Node.CDATA_SECTION_NODE
                     || nodeType == Node.TEXT_NODE;
             case Compiler.NODE_TYPE_COMMENT:
                 return nodeType == Node.COMMENT_NODE;
             case Compiler.NODE_TYPE_PI:
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
         return false;
     }
     if (test instanceof ProcessingInstructionTest) {
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
             return testPI.equals(nodePI);
         }
     }
     return false;
 }
\ No newline at end of file
