diff --git a/tmp/998a1679-b41e-431b-a974-22fb19a18f42_buggy.java b/tmp/98ccb060-3bbf-4a6f-9b0e-18deae3f8b49_fixed.java
index 2c4ed06..bdf3951 100644
--- a/tmp/998a1679-b41e-431b-a974-22fb19a18f42_buggy.java
+++ b/tmp/98ccb060-3bbf-4a6f-9b0e-18deae3f8b49_fixed.java
@@ -1,111 +1,149 @@
 /** Accept a step, triggering events and step handlers.
  * @param interpolator step interpolator
  * @param y state vector at step end time, must be reset if an event
  * asks for resetting or if an events stops integration during the step
  * @param yDot placeholder array where to put the time derivative of the state vector
  * @param tEnd final integration time
  * @return time at end of step
  * @exception MathIllegalStateException if the value of one event state cannot be evaluated
  * @since 2.2
  */
 protected double acceptStep(final AbstractStepInterpolator interpolator,
                             final double[] y, final double[] yDot, final double tEnd)
     throws MathIllegalStateException {
 
         double previousT = interpolator.getGlobalPreviousTime();
         final double currentT = interpolator.getGlobalCurrentTime();
         resetOccurred = false;
 
         // initialize the events states if needed
         if (! statesInitialized) {
             for (EventState state : eventsStates) {
                 state.reinitializeBegin(interpolator);
             }
             statesInitialized = true;
         }
 
         // search for next events that may occur during the step
         final int orderingSign = interpolator.isForward() ? +1 : -1;
         SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
 
             /** {@inheritDoc} */
             public int compare(EventState es0, EventState es1) {
-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
+                // Be sure to NEVER return 0 unless it is the *SAME* event instance;
+                // otherwise, EventState are not equal! Otherwise TreeSet will drop duplicates.
+                if (es0 == es1) {
+                    return 0;
+                }
+                int cmp = orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
+                // If the event times are equal but these are separate EventState, we still ensure consistent ordering
+                if (cmp == 0) {
+                    // Fall back to identity hash or array index to break tie
+                    return System.identityHashCode(es0) - System.identityHashCode(es1);
+                }
+                return cmp;
             }
 
         });
 
         for (final EventState state : eventsStates) {
             if (state.evaluateStep(interpolator)) {
                 // the event occurs during the current step
                 occuringEvents.add(state);
             }
         }
 
         while (!occuringEvents.isEmpty()) {
 
             // handle the chronologically first event
             final Iterator<EventState> iterator = occuringEvents.iterator();
             final EventState currentEvent = iterator.next();
             iterator.remove();
 
             // restrict the interpolator to the first part of the step, up to the event
             final double eventT = currentEvent.getEventTime();
+            // Protection for floating point artifacts that break ordering
+            if (interpolator.isForward()) {
+                if (eventT <= previousT) {
+                    continue;
+                }
+            } else {
+                if (eventT >= previousT) {
+                    continue;
+                }
+            }
             interpolator.setSoftPreviousTime(previousT);
             interpolator.setSoftCurrentTime(eventT);
 
             // trigger the event
             interpolator.setInterpolatedTime(eventT);
             final double[] eventY = interpolator.getInterpolatedState();
             currentEvent.stepAccepted(eventT, eventY);
             isLastStep = currentEvent.stop();
 
             // handle the first part of the step, up to the event
             for (final StepHandler handler : stepHandlers) {
                 handler.handleStep(interpolator, isLastStep);
             }
 
             if (isLastStep) {
                 // the event asked to stop integration
                 System.arraycopy(eventY, 0, y, 0, y.length);
                 return eventT;
             }
 
             if (currentEvent.reset(eventT, eventY)) {
                 // some event handler has triggered changes that
                 // invalidate the derivatives, we need to recompute them
                 System.arraycopy(eventY, 0, y, 0, y.length);
                 computeDerivatives(eventT, y, yDot);
                 resetOccurred = true;
+                // Don't process further events in this step after a reset
                 return eventT;
             }
 
             // prepare handling of the remaining part of the step
             previousT = eventT;
             interpolator.setSoftPreviousTime(eventT);
             interpolator.setSoftCurrentTime(currentT);
 
+            // After handling, remove all events with occurred event time <= previousT
+            Iterator<EventState> occEvIter = occuringEvents.iterator();
+            while (occEvIter.hasNext()) {
+                EventState evt = occEvIter.next();
+                double tEvt = evt.getEventTime();
+                if (interpolator.isForward()) {
+                    if (tEvt <= previousT) {
+                        occEvIter.remove();
+                    }
+                } else {
+                    if (tEvt >= previousT) {
+                        occEvIter.remove();
+                    }
+                }
+            }
+
             // check if the same event occurs again in the remaining part of the step
             if (currentEvent.evaluateStep(interpolator)) {
                 // the event occurs during the current step
                 occuringEvents.add(currentEvent);
             }
 
         }
 
         interpolator.setInterpolatedTime(currentT);
         final double[] currentY = interpolator.getInterpolatedState();
         for (final EventState state : eventsStates) {
             state.stepAccepted(currentT, currentY);
             isLastStep = isLastStep || state.stop();
         }
         isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
         // handle the remaining part of the step, after all events if any
         for (StepHandler handler : stepHandlers) {
             handler.handleStep(interpolator, isLastStep);
         }
 
         return currentT;
 
 }
\ No newline at end of file
