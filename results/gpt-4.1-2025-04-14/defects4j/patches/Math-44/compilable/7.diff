diff --git a/tmp/c03fe9b6-dca4-49cc-b1f7-83025d3b6b43_buggy.java b/tmp/8480eb4a-bfa6-47fe-a340-17ae2ff71065_fixed.java
index 2c4ed06..5ec554f 100644
--- a/tmp/c03fe9b6-dca4-49cc-b1f7-83025d3b6b43_buggy.java
+++ b/tmp/8480eb4a-bfa6-47fe-a340-17ae2ff71065_fixed.java
@@ -1,111 +1,144 @@
     /** Accept a step, triggering events and step handlers.
      * @param interpolator step interpolator
      * @param y state vector at step end time, must be reset if an event
      * asks for resetting or if an events stops integration during the step
      * @param yDot placeholder array where to put the time derivative of the state vector
      * @param tEnd final integration time
      * @return time at end of step
      * @exception MathIllegalStateException if the value of one event state cannot be evaluated
      * @since 2.2
      */
     protected double acceptStep(final AbstractStepInterpolator interpolator,
                                 final double[] y, final double[] yDot, final double tEnd)
         throws MathIllegalStateException {
 
             double previousT = interpolator.getGlobalPreviousTime();
             final double currentT = interpolator.getGlobalCurrentTime();
             resetOccurred = false;
 
             // initialize the events states if needed
             if (! statesInitialized) {
                 for (EventState state : eventsStates) {
                     state.reinitializeBegin(interpolator);
                 }
                 statesInitialized = true;
             }
 
             // search for next events that may occur during the step
             final int orderingSign = interpolator.isForward() ? +1 : -1;
             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
 
                 /** {@inheritDoc} */
                 public int compare(EventState es0, EventState es1) {
-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
+                    int cmp = orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
+                    if (cmp == 0 && es0 != es1) {
+                        // Ensure no equal elements except for the same reference
+                        // This prevents TreeSet from discarding different EventStates with the same event time
+                        return System.identityHashCode(es0) - System.identityHashCode(es1);
+                    }
+                    return cmp;
                 }
 
             });
 
             for (final EventState state : eventsStates) {
                 if (state.evaluateStep(interpolator)) {
                     // the event occurs during the current step
                     occuringEvents.add(state);
                 }
             }
 
+            double stepEndT = currentT;
+            boolean firstTimeThrough = true;
+
             while (!occuringEvents.isEmpty()) {
 
                 // handle the chronologically first event
                 final Iterator<EventState> iterator = occuringEvents.iterator();
                 final EventState currentEvent = iterator.next();
                 iterator.remove();
 
                 // restrict the interpolator to the first part of the step, up to the event
                 final double eventT = currentEvent.getEventTime();
+
+                // Make sure we never go "backwards" in time
+                if ((interpolator.isForward() && eventT <= previousT + 1e-12) ||
+                    (!interpolator.isForward() && eventT >= previousT - 1e-12)) {
+                    // This can happen with back-to-back resets at the same location due to multiple events.
+                    continue;
+                }
+
                 interpolator.setSoftPreviousTime(previousT);
                 interpolator.setSoftCurrentTime(eventT);
 
                 // trigger the event
                 interpolator.setInterpolatedTime(eventT);
                 final double[] eventY = interpolator.getInterpolatedState();
                 currentEvent.stepAccepted(eventT, eventY);
                 isLastStep = currentEvent.stop();
 
                 // handle the first part of the step, up to the event
                 for (final StepHandler handler : stepHandlers) {
                     handler.handleStep(interpolator, isLastStep);
                 }
 
                 if (isLastStep) {
                     // the event asked to stop integration
                     System.arraycopy(eventY, 0, y, 0, y.length);
                     return eventT;
                 }
 
                 if (currentEvent.reset(eventT, eventY)) {
                     // some event handler has triggered changes that
                     // invalidate the derivatives, we need to recompute them
                     System.arraycopy(eventY, 0, y, 0, y.length);
                     computeDerivatives(eventT, y, yDot);
                     resetOccurred = true;
-                    return eventT;
+                    // Instead of returning here, as in the original code, we need to continue
+                    // the main while loop to detect other events at the same location (MATH-695)
+                    previousT = eventT;
+                    interpolator.setSoftPreviousTime(eventT);
+                    interpolator.setSoftCurrentTime(currentT);
+
+                    // re-evaluate ALL event states for possible events at EXACTLY this time
+                    occuringEvents.clear();
+                    for (final EventState state : eventsStates) {
+                        if (state.evaluateStep(interpolator)) {
+                            final double et = state.getEventTime();
+                            if (Precision.equalsIncludingNaN(et, eventT, 1)) {
+                                occuringEvents.add(state);
+                            }
+                        }
+                    }
+                    // Go to next candidate event at this location, or break if none remain
+                    continue;
                 }
 
                 // prepare handling of the remaining part of the step
                 previousT = eventT;
                 interpolator.setSoftPreviousTime(eventT);
                 interpolator.setSoftCurrentTime(currentT);
 
                 // check if the same event occurs again in the remaining part of the step
                 if (currentEvent.evaluateStep(interpolator)) {
                     // the event occurs during the current step
                     occuringEvents.add(currentEvent);
                 }
-
             }
 
             interpolator.setInterpolatedTime(currentT);
             final double[] currentY = interpolator.getInterpolatedState();
             for (final EventState state : eventsStates) {
                 state.stepAccepted(currentT, currentY);
                 isLastStep = isLastStep || state.stop();
             }
             isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
             // handle the remaining part of the step, after all events if any
             for (StepHandler handler : stepHandlers) {
                 handler.handleStep(interpolator, isLastStep);
             }
 
             return currentT;
 
     }
\ No newline at end of file
