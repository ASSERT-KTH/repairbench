diff --git a/tmp/31c7373b-dbb5-4e6b-ae9e-5c49c023e3b4_buggy.java b/tmp/32adc3cb-449d-4278-9474-7f1987871894_fixed.java
index 2c4ed06..18312af 100644
--- a/tmp/31c7373b-dbb5-4e6b-ae9e-5c49c023e3b4_buggy.java
+++ b/tmp/32adc3cb-449d-4278-9474-7f1987871894_fixed.java
@@ -1,111 +1,135 @@
 /** Accept a step, triggering events and step handlers.
  * @param interpolator step interpolator
  * @param y state vector at step end time, must be reset if an event
  * asks for resetting or if an events stops integration during the step
  * @param yDot placeholder array where to put the time derivative of the state vector
  * @param tEnd final integration time
  * @return time at end of step
  * @exception MathIllegalStateException if the value of one event state cannot be evaluated
  * @since 2.2
  */
 protected double acceptStep(final AbstractStepInterpolator interpolator,
                             final double[] y, final double[] yDot, final double tEnd)
     throws MathIllegalStateException {
 
         double previousT = interpolator.getGlobalPreviousTime();
         final double currentT = interpolator.getGlobalCurrentTime();
         resetOccurred = false;
 
         // initialize the events states if needed
         if (! statesInitialized) {
             for (EventState state : eventsStates) {
                 state.reinitializeBegin(interpolator);
             }
             statesInitialized = true;
         }
 
         // search for next events that may occur during the step
         final int orderingSign = interpolator.isForward() ? +1 : -1;
         SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
 
             /** {@inheritDoc} */
             public int compare(EventState es0, EventState es1) {
-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
+                int cmp = orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
+                if (cmp == 0) {
+                    // ensure no compareTo equals (TreeSet contract)
+                    // No two EventState objects are considered equal
+                    // unless they are the same object
+                    return System.identityHashCode(es0) - System.identityHashCode(es1);
+                }
+                return cmp;
             }
 
         });
 
+        // This list holds events that are due for evaluation in the current step
         for (final EventState state : eventsStates) {
             if (state.evaluateStep(interpolator)) {
                 // the event occurs during the current step
                 occuringEvents.add(state);
             }
         }
 
+        double stepEnd = currentT;
+        AbstractStepInterpolator restricted = interpolator;
+
         while (!occuringEvents.isEmpty()) {
 
             // handle the chronologically first event
             final Iterator<EventState> iterator = occuringEvents.iterator();
             final EventState currentEvent = iterator.next();
             iterator.remove();
 
             // restrict the interpolator to the first part of the step, up to the event
             final double eventT = currentEvent.getEventTime();
-                interpolator.setSoftPreviousTime(previousT);
-                interpolator.setSoftCurrentTime(eventT);
+
+            // create a secondary interpolator (possibly a copy if needed) restricted to [previousT, eventT]
+            restricted = interpolator.copy();
+            restricted.setSoftPreviousTime(previousT);
+            restricted.setSoftCurrentTime(eventT);
 
             // trigger the event
-                interpolator.setInterpolatedTime(eventT);
-                final double[] eventY = interpolator.getInterpolatedState();
+            restricted.setInterpolatedTime(eventT);
+            final double[] eventY = restricted.getInterpolatedState();
             currentEvent.stepAccepted(eventT, eventY);
             isLastStep = currentEvent.stop();
 
             // handle the first part of the step, up to the event
             for (final StepHandler handler : stepHandlers) {
-                    handler.handleStep(interpolator, isLastStep);
+                handler.handleStep(restricted, isLastStep);
             }
 
             if (isLastStep) {
                 // the event asked to stop integration
                 System.arraycopy(eventY, 0, y, 0, y.length);
                 return eventT;
             }
 
             if (currentEvent.reset(eventT, eventY)) {
                 // some event handler has triggered changes that
                 // invalidate the derivatives, we need to recompute them
                 System.arraycopy(eventY, 0, y, 0, y.length);
                 computeDerivatives(eventT, y, yDot);
                 resetOccurred = true;
+                // The documentation promises that in case of a reset,
+                // the rest of the step is not taken. We bail out as soon as reset is triggered.
+                // NOTE: stepEnd is eventT, not currentT!
                 return eventT;
             }
 
             // prepare handling of the remaining part of the step
             previousT = eventT;
-                interpolator.setSoftPreviousTime(eventT);
-                interpolator.setSoftCurrentTime(currentT);
+            // Don't "skip" events due to round-off
+            // reset the occuringEvents for the remaining interval in the step
+            occuringEvents.clear();
+            restricted = interpolator.copy();
+            restricted.setSoftPreviousTime(eventT);
+            restricted.setSoftCurrentTime(currentT);
 
-                // check if the same event occurs again in the remaining part of the step
-                if (currentEvent.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
-                    occuringEvents.add(currentEvent);
+            // recheck for all remaining events which may happen in [eventT, currentT]
+            for (final EventState state : eventsStates) {
+                // Re-run ONLY if event has not already occurred at eventT
+                // (Don't go back in time!)
+                if (state.evaluateStep(restricted)) {
+                    occuringEvents.add(state);
+                }
             }
 
         }
 
         interpolator.setInterpolatedTime(currentT);
         final double[] currentY = interpolator.getInterpolatedState();
         for (final EventState state : eventsStates) {
             state.stepAccepted(currentT, currentY);
             isLastStep = isLastStep || state.stop();
         }
         isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
         // handle the remaining part of the step, after all events if any
         for (StepHandler handler : stepHandlers) {
             handler.handleStep(interpolator, isLastStep);
         }
 
         return currentT;
 
 }
\ No newline at end of file
