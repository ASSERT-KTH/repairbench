diff --git a/tmp/a1a93377-93e1-4329-84a5-c4498aa91639_buggy.java b/tmp/cd8c7c55-ef35-44be-9c40-f06957df1056_fixed.java
index d4e6d48..4bed4a1 100644
--- a/tmp/a1a93377-93e1-4329-84a5-c4498aa91639_buggy.java
+++ b/tmp/cd8c7c55-ef35-44be-9c40-f06957df1056_fixed.java
@@ -1,23 +1,27 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
   Preconditions.checkState(n.isCall());
   Node callTarget = n.getFirstChild();
   if (callTarget != null && callTarget.isName() &&
         callTarget.getString().equals("String")) {
     // Fold String(a) to '' + (a) on immutable literals,
     // which allows further optimizations
     //
     // We can't do this in the general case, because String(a) has
     // slightly different semantics than '' + (a). See
     // http://code.google.com/p/closure-compiler/issues/detail?id=759
     Node value = callTarget.getNext();
-      if (value != null) {
+    // Only fold if there's exactly one argument.
+    if (value != null && value.getNext() == null) {
+      // String is foldable only if the argument is an immutable literal.
+      if (NodeUtil.isImmutableValue(value)) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
+  }
   return n;
 }
\ No newline at end of file
