diff --git a/tmp/6b2e9e91-3a59-49f2-816e-837d7fe1c68f_buggy.java b/tmp/1d58da89-9b72-430c-a990-502d8a7bbd52_fixed.java
index d4e6d48..016504d 100644
--- a/tmp/6b2e9e91-3a59-49f2-816e-837d7fe1c68f_buggy.java
+++ b/tmp/1d58da89-9b72-430c-a990-502d8a7bbd52_fixed.java
@@ -1,23 +1,22 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
   Preconditions.checkState(n.isCall());
   Node callTarget = n.getFirstChild();
+  // Only fold if it's String(single argument)
   if (callTarget != null && callTarget.isName() &&
         callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
     Node value = callTarget.getNext();
-      if (value != null) {
+    // Only fold if there is exactly one argument to String()
+    if (value != null && value.getNext() == null) {
+      // Only fold if argument is an immutable literal
+      if (NodeUtil.isImmutableValue(value)) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
+  }
   return n;
 }
\ No newline at end of file
