diff --git a/tmp/5f3e0e65-8763-483b-bef8-8f35415ed7c2_buggy.java b/tmp/cb4dd2f9-0d63-468c-9675-721c26d66502_fixed.java
index d4e6d48..fffa40a 100644
--- a/tmp/5f3e0e65-8763-483b-bef8-8f35415ed7c2_buggy.java
+++ b/tmp/cb4dd2f9-0d63-468c-9675-721c26d66502_fixed.java
@@ -1,23 +1,24 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
   Preconditions.checkState(n.isCall());
   Node callTarget = n.getFirstChild();
   if (callTarget != null && callTarget.isName() &&
         callTarget.getString().equals("String")) {
+    // Only fold String(a) if there is exactly one argument
+    Node firstArg = callTarget.getNext();
+    if (firstArg != null && firstArg.getNext() == null) {
       // Fold String(a) to '' + (a) on immutable literals,
       // which allows further optimizations
       //
       // We can't do this in the general case, because String(a) has
       // slightly different semantics than '' + (a). See
       // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
       Node addition = IR.add(
           IR.string("").srcref(callTarget),
-            value.detachFromParent());
+          firstArg.detachFromParent());
       n.getParent().replaceChild(n, addition);
       reportCodeChange();
       return addition;
     }
   }
   return n;
 }
\ No newline at end of file
