diff --git a/tmp/14967eea-8a85-4acb-9496-291782695b8c_buggy.java b/tmp/e2e32195-8e12-49d8-b0d1-8128ab63f752_fixed.java
index d4e6d48..0c2e158 100644
--- a/tmp/14967eea-8a85-4acb-9496-291782695b8c_buggy.java
+++ b/tmp/e2e32195-8e12-49d8-b0d1-8128ab63f752_fixed.java
@@ -1,23 +1,19 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
   Preconditions.checkState(n.isCall());
   Node callTarget = n.getFirstChild();
+  // Only fold String(x) if there is exactly one argument.
   if (callTarget != null && callTarget.isName() &&
         callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
+    Node arg1 = callTarget.getNext();
+    // Check *only one* argument, and no more.
+    if (arg1 != null && arg1.getNext() == null) {
       Node addition = IR.add(
           IR.string("").srcref(callTarget),
-            value.detachFromParent());
+          arg1.detachFromParent());
       n.getParent().replaceChild(n, addition);
       reportCodeChange();
       return addition;
     }
   }
   return n;
 }
\ No newline at end of file
