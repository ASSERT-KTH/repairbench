diff --git a/tmp/a4ad60ca-408d-46b9-9182-a6894bc6fa5f_buggy.java b/tmp/42d4332f-722f-4f6d-b729-5a966973f6a3_fixed.java
index 3b9a3c0..e005862 100644
--- a/tmp/a4ad60ca-408d-46b9-9182-a6894bc6fa5f_buggy.java
+++ b/tmp/42d4332f-722f-4f6d-b729-5a966973f6a3_fixed.java
@@ -1,71 +1,64 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
-        if (buffer[start] == 0) {
-            return 0L;
-        }
-
-        // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
-                start++;
-            } else {
+    // Allow all NULs, i.e., missing fields, also if the first and all subsequent bytes are NUL, return 0
+    boolean allNuls = true;
+    for (int i = start; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNuls = false;
             break;
         }
     }
+    if (allNuls) {
+        return 0L;
+    }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
+    // To work around some tar implementations that insert a leading NUL
+    // (for COMPRESS-197), treat as 0 ONLY if all bytes are NUL, otherwise skip leading NULs
+    while (start < end && (buffer[start] == 0 || buffer[start] == ' ')) { // skip leading NULs and spaces
+        start++;
+    }
+
+    // At this point, skip if all characters were skip chars
+    if (start == end) {
+        return 0L;
+    }
+
+    if (start >= end) {
+        throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, start - 1, buffer[start - 1]));
+    }
+
+    // Must have trailing NUL or space (at least one, possibly two)
+    byte trailer = buffer[end - 1];
     if (trailer == 0 || trailer == ' ') {
         end--;
     } else {
         throw new IllegalArgumentException(
                 exceptionMessage(buffer, offset, length, end - 1, trailer));
     }
     // May have additional NULs or spaces
+    if (end > start) {
         trailer = buffer[end - 1];
         if (trailer == 0 || trailer == ' ') {
             end--;
         }
+    }
 
     for (; start < end; start++) {
         final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
