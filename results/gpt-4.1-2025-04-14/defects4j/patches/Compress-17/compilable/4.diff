diff --git a/tmp/6d3d290e-ac66-491d-a2c5-4fb546ca287d_buggy.java b/tmp/85dcdba6-08bf-4a50-8471-6736c8d5ac56_fixed.java
index 3b9a3c0..1890a75 100644
--- a/tmp/6d3d290e-ac66-491d-a2c5-4fb546ca287d_buggy.java
+++ b/tmp/85dcdba6-08bf-4a50-8471-6736c8d5ac56_fixed.java
@@ -1,71 +1,77 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long    result = 0;
     int     end = offset + length;
     int     start = offset;
+    boolean foundDigit = false;
 
     if (length < 2){
         throw new IllegalArgumentException("Length "+length+" must be at least 2");
     }
 
-        if (buffer[start] == 0) {
+    // If entire field is all NULs, treat as missing (return 0)
+    boolean allNuls = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
         return 0L;
     }
 
+    // Work-around for tar implementations that insert a leading NUL (COMPRESS-197)
+    if (buffer[start] == 0) {
+        // Only skip a single leading NUL if the rest is not completely NULs
+        start++;
+    }
+
     // Skip leading spaces
     while (start < end){
         if (buffer[start] == ' '){
             start++;
         } else {
             break;
         }
     }
 
     // Must have trailing NUL or space
+    if (start >= end) {
+        throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, end-1, (byte)0));
+    }
+
     byte trailer;
     trailer = buffer[end-1];
     if (trailer == 0 || trailer == ' '){
         end--;
     } else {
         throw new IllegalArgumentException(
                 exceptionMessage(buffer, offset, length, end-1, trailer));
     }
     // May have additional NULs or spaces
+    if (end > start) {
         trailer = buffer[end - 1];
         if (trailer == 0 || trailer == ' '){
             end--;
         }
+    }
 
     for ( ;start < end; start++) {
         final byte currentByte = buffer[start];
         // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
-            }
+        if (currentByte >= '0' && currentByte <= '7'){
+            foundDigit = true;
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
+        } else if (currentByte == 0 || currentByte == ' ') {
+            // ignore embedded or extra NUL/space in value for robustness
+        } else {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, start, currentByte));
+        }
         // CheckStyle:MagicNumber ON
     }
 
+    // Accept octal value of 0 if field was spaces/NULs, per tar leniency.
     return result;
 }
\ No newline at end of file
