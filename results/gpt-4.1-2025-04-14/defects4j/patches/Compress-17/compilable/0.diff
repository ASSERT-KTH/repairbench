diff --git a/tmp/1c3dcd67-cc59-4b2c-87b2-139080e4f756_buggy.java b/tmp/b74d4a40-ed64-4762-bc26-7e093ad8e4f8_fixed.java
index 3b9a3c0..5e7cabd 100644
--- a/tmp/1c3dcd67-cc59-4b2c-87b2-139080e4f756_buggy.java
+++ b/tmp/b74d4a40-ed64-4762-bc26-7e093ad8e4f8_fixed.java
@@ -1,71 +1,64 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
-        if (buffer[start] == 0) {
+    // To work-around tar implementations that insert a
+    // leading NUL this method returns 0 if it detects a leading NUL
+    // But only if ALL the bytes are NUL, otherwise skips any leading NULs (see COMPRESS-197)
+    boolean allNuls = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
         return 0L;
     }
 
-        // Skip leading spaces
+    // Skip leading spaces or NULs (accept multiple leading NULs as whitespace-like, see COMPRESS-197)
     while (start < end) {
-            if (buffer[start] == ' '){
+        if (buffer[start] == ' ' || buffer[start] == 0) {
             start++;
         } else {
             break;
         }
     }
 
     // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
+    byte trailer = buffer[end - 1];
     if (trailer == 0 || trailer == ' ') {
         end--;
     } else {
         throw new IllegalArgumentException(
                 exceptionMessage(buffer, offset, length, end - 1, trailer));
     }
     // May have additional NULs or spaces
+    if (end > start) {
         trailer = buffer[end - 1];
         if (trailer == 0 || trailer == ' ') {
             end--;
         }
+    }
+
+    if (start == end) {
+        // Only found whitespace or NULs between start and end, means value is zero (missing field)
+        return 0L;
+    }
 
     for (; start < end; start++) {
         final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
