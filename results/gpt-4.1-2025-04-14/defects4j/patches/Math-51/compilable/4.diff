diff --git a/tmp/59560da5-8717-4bdf-83a3-8df370dd5d14_buggy.java b/tmp/b8fdf06e-a12f-40c9-8d2c-a1c88f064a5f_fixed.java
index 6b09955..ef51d68 100644
--- a/tmp/59560da5-8717-4bdf-83a3-8df370dd5d14_buggy.java
+++ b/tmp/b8fdf06e-a12f-40c9-8d2c-a1c88f064a5f_fixed.java
@@ -1,121 +1,184 @@
 /** {@inheritDoc} */
 protected final double doSolve() {
     // Get initial solution
     double x0 = getMin();
     double x1 = getMax();
     double f0 = computeObjectiveValue(x0);
     double f1 = computeObjectiveValue(x1);
 
     // If one of the bounds is the exact root, return it. Since these are
     // not under-approximations or over-approximations, we can return them
     // regardless of the allowed solutions.
     if (f0 == 0.0) {
         return x0;
     }
     if (f1 == 0.0) {
         return x1;
     }
 
     // Verify bracketing of initial solution.
     verifyBracketing(x0, x1);
 
     // Get accuracies.
     final double ftol = getFunctionValueAccuracy();
     final double atol = getAbsoluteAccuracy();
     final double rtol = getRelativeAccuracy();
 
     // Keep track of inverted intervals, meaning that the left bound is
     // larger than the right bound.
     boolean inverted = false;
 
+    // Added correction: if interval is already satisfactorily small before entering loop
+    if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
+        switch (allowed) {
+        case ANY_SIDE:
+            return x1;
+        case LEFT_SIDE:
+            return inverted ? x1 : x0;
+        case RIGHT_SIDE:
+            return inverted ? x0 : x1;
+        case BELOW_SIDE:
+            return (f1 <= 0) ? x1 : x0;
+        case ABOVE_SIDE:
+            return (f1 >= 0) ? x1 : x0;
+        default:
+            throw new MathInternalError();
+        }
+    }
+
     // Keep finding better approximations.
+    double prevX = Double.NaN;
+    int sameCount = 0;
     while (true) {
         // Calculate the next approximation.
-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
+        final double denominator = f1 - f0;
+        // Avoid division by zero (should not happen, as verifyBracketing requires f0 * f1 < 0)
+        if (denominator == 0.0) {
+            // Fallback to bisection-like step
+            final double mid = 0.5 * (x0 + x1);
+            final double fmid = computeObjectiveValue(mid);
+            if (fmid == 0.0) {
+                return mid;
+            }
+            // Determine new interval
+            if (f0 * fmid < 0.0) {
+                x1 = mid;
+                f1 = fmid;
+            } else {
+                x0 = mid;
+                f0 = fmid;
+            }
+            continue;
+        }
+
+        final double x = x1 - (f1 * (x1 - x0)) / denominator;
         final double fx = computeObjectiveValue(x);
 
+        // Protection against infinite loop (lack of progress)
+        if (x == prevX) {
+            sameCount++;
+            if (sameCount >= 2) { // stuck for two iterations
+                // Return best estimate based on allowed solution
+                switch (allowed) {
+                case ANY_SIDE:
+                    return x1;
+                case LEFT_SIDE:
+                    return inverted ? x1 : x0;
+                case RIGHT_SIDE:
+                    return inverted ? x0 : x1;
+                case BELOW_SIDE:
+                    return (f1 <= 0) ? x1 : x0;
+                case ABOVE_SIDE:
+                    return (f1 >= 0) ? x1 : x0;
+                default:
+                    throw new MathInternalError();
+                }
+            }
+        } else {
+            sameCount = 0;
+        }
+        prevX = x;
+
         // If the new approximation is the exact root, return it. Since
         // this is not an under-approximation or an over-approximation,
         // we can return it regardless of the allowed solutions.
         if (fx == 0.0) {
             return x;
         }
 
         // Update the bounds with the new approximation.
         if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
             x0 = x1;
             f0 = f1;
             inverted = !inverted;
         } else {
             switch (method) {
             case ILLINOIS:
                 f0 *= 0.5;
                 break;
             case PEGASUS:
                 f0 *= f1 / (f1 + fx);
                 break;
                     // Update formula cannot make any progress: Update the
                     // search interval.
             default:
                 // Should never happen.
             }
         }
         // Update from [x0, x1] to [x0, x].
         x1 = x;
         f1 = fx;
 
         // If the function value of the last approximation is too small,
         // given the function value accuracy, then we can't get closer to
         // the root than we already are.
         if (FastMath.abs(f1) <= ftol) {
             switch (allowed) {
             case ANY_SIDE:
                 return x1;
             case LEFT_SIDE:
                 if (inverted) {
                     return x1;
                 }
                 break;
             case RIGHT_SIDE:
                 if (!inverted) {
                     return x1;
                 }
                 break;
             case BELOW_SIDE:
                 if (f1 <= 0) {
                     return x1;
                 }
                 break;
             case ABOVE_SIDE:
                 if (f1 >= 0) {
                     return x1;
                 }
                 break;
             default:
                 throw new MathInternalError();
             }
         }
 
         // If the current interval is within the given accuracies, we
         // are satisfied with the current approximation.
         if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                  atol)) {
             switch (allowed) {
             case ANY_SIDE:
                 return x1;
             case LEFT_SIDE:
                 return inverted ? x1 : x0;
             case RIGHT_SIDE:
                 return inverted ? x0 : x1;
             case BELOW_SIDE:
                 return (f1 <= 0) ? x1 : x0;
             case ABOVE_SIDE:
                 return (f1 >= 0) ? x1 : x0;
             default:
                 throw new MathInternalError();
             }
         }
     }
 }
\ No newline at end of file
