diff --git a/tmp/49d17347-ec8e-40d2-81a8-585e4e810bb0_buggy.java b/tmp/eb1d6bd8-4ded-4631-b47b-1f28f320634a_fixed.java
index 6b09955..104ab42 100644
--- a/tmp/49d17347-ec8e-40d2-81a8-585e4e810bb0_buggy.java
+++ b/tmp/eb1d6bd8-4ded-4631-b47b-1f28f320634a_fixed.java
@@ -1,121 +1,126 @@
 /** {@inheritDoc} */
 protected final double doSolve() {
     // Get initial solution
     double x0 = getMin();
     double x1 = getMax();
     double f0 = computeObjectiveValue(x0);
     double f1 = computeObjectiveValue(x1);
 
-        // If one of the bounds is the exact root, return it. Since these are
-        // not under-approximations or over-approximations, we can return them
-        // regardless of the allowed solutions.
+    // If one of the bounds is the exact root, return it.
     if (f0 == 0.0) {
         return x0;
     }
     if (f1 == 0.0) {
         return x1;
     }
 
     // Verify bracketing of initial solution.
     verifyBracketing(x0, x1);
 
     // Get accuracies.
     final double ftol = getFunctionValueAccuracy();
     final double atol = getAbsoluteAccuracy();
     final double rtol = getRelativeAccuracy();
 
     // Keep track of inverted intervals, meaning that the left bound is
     // larger than the right bound.
     boolean inverted = false;
 
     // Keep finding better approximations.
+    double prevX = x0;
     while (true) {
         // Calculate the next approximation.
         final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
         final double fx = computeObjectiveValue(x);
 
-            // If the new approximation is the exact root, return it. Since
-            // this is not an under-approximation or an over-approximation,
-            // we can return it regardless of the allowed solutions.
+        // If the new approximation is the exact root, return it.
         if (fx == 0.0) {
             return x;
         }
 
         // Update the bounds with the new approximation.
         if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
             x0 = x1;
             f0 = f1;
             inverted = !inverted;
         } else {
-                switch (method) {
-                case ILLINOIS:
+            if (method == Method.ILLINOIS) {
                 f0 *= 0.5;
-                    break;
-                case PEGASUS:
+            } else if (method == Method.PEGASUS) {
                 f0 *= f1 / (f1 + fx);
-                    break;
-                        // Update formula cannot make any progress: Update the
-                        // search interval.
-                default:
-                    // Should never happen.
             }
+            // Note: For Regula Falsi, no f0 adjustment is made.
         }
         // Update from [x0, x1] to [x0, x].
         x1 = x;
         f1 = fx;
 
         // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
+        // given the function value accuracy, then we can't get closer.
         if (FastMath.abs(f1) <= ftol) {
             switch (allowed) {
             case ANY_SIDE:
                 return x1;
             case LEFT_SIDE:
                 if (inverted) {
                     return x1;
                 }
                 break;
             case RIGHT_SIDE:
                 if (!inverted) {
                     return x1;
                 }
                 break;
             case BELOW_SIDE:
                 if (f1 <= 0) {
                     return x1;
                 }
                 break;
             case ABOVE_SIDE:
                 if (f1 >= 0) {
                     return x1;
                 }
                 break;
             default:
                 throw new MathInternalError();
             }
         }
 
         // If the current interval is within the given accuracies, we
         // are satisfied with the current approximation.
         if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                  atol)) {
             switch (allowed) {
             case ANY_SIDE:
                 return x1;
             case LEFT_SIDE:
                 return inverted ? x1 : x0;
             case RIGHT_SIDE:
                 return inverted ? x0 : x1;
             case BELOW_SIDE:
                 return (f1 <= 0) ? x1 : x0;
             case ABOVE_SIDE:
                 return (f1 >= 0) ? x1 : x0;
             default:
                 throw new MathInternalError();
             }
         }
+
+        // Additional safeguard for Regula Falsi stagnation (fix for issue 631):
+        // If the new approximation x is equal to the last approximation (within accuracies),
+        // we may be stuck (root is not being bracketed any further due to non-inverted endpoints).
+        // In this case, return the current best estimate.
+        if (method == Method.REGULA_FALSI) {
+            if (FastMath.abs(x1 - prevX) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
+                // Check function value accuracy as well before breaking
+                if (FastMath.abs(f1) <= ftol) {
+                    return x1;
+                }
+                // Optionally, after so many repeats, break out and return the best so far
+                // For now, return the current estimate if 'stuck'
+                return x1;
+            }
+            prevX = x1;
+        }
     }
 }
\ No newline at end of file
