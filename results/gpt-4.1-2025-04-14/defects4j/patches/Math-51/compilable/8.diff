diff --git a/tmp/fd504b1c-64ff-493a-889c-ff771bd564a0_buggy.java b/tmp/c29b2c30-58c5-42a2-a38c-92bc345a8ee2_fixed.java
index 6b09955..6da54b2 100644
--- a/tmp/fd504b1c-64ff-493a-889c-ff771bd564a0_buggy.java
+++ b/tmp/c29b2c30-58c5-42a2-a38c-92bc345a8ee2_fixed.java
@@ -1,121 +1,158 @@
 /** {@inheritDoc} */
 protected final double doSolve() {
     // Get initial solution
     double x0 = getMin();
     double x1 = getMax();
     double f0 = computeObjectiveValue(x0);
     double f1 = computeObjectiveValue(x1);
 
     // If one of the bounds is the exact root, return it. Since these are
     // not under-approximations or over-approximations, we can return them
     // regardless of the allowed solutions.
     if (f0 == 0.0) {
         return x0;
     }
     if (f1 == 0.0) {
         return x1;
     }
 
     // Verify bracketing of initial solution.
     verifyBracketing(x0, x1);
 
     // Get accuracies.
     final double ftol = getFunctionValueAccuracy();
     final double atol = getAbsoluteAccuracy();
     final double rtol = getRelativeAccuracy();
 
     // Keep track of inverted intervals, meaning that the left bound is
     // larger than the right bound.
     boolean inverted = false;
 
+    // Copy the starting values for Illinois/Pegasus tricks
+    double prevF0 = f0;
+    double prevF1 = f1;
+
     // Keep finding better approximations.
     while (true) {
         // Calculate the next approximation.
         final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
         final double fx = computeObjectiveValue(x);
 
         // If the new approximation is the exact root, return it. Since
         // this is not an under-approximation or an over-approximation,
         // we can return it regardless of the allowed solutions.
         if (fx == 0.0) {
             return x;
         }
 
         // Update the bounds with the new approximation.
-            if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
-                x0 = x1;
-                f0 = f1;
-                inverted = !inverted;
+        if ((f0 * fx) < 0) {
+            // The sign change happens between x0 and x: [x0, x]
+            x1 = x;
+            f1 = fx;
+            // No need to update f0
+            inverted = false;
+        } else if ((f1 * fx) < 0) {
+            // The sign change happens between x and x1: [x, x1]
+            x0 = x;
+            f0 = fx;
+            inverted = true;
         } else {
+            // Root not bracketed: extremely rare edge case for pathological functions.
+            throw new org.apache.commons.math.exception.NoBracketingException(x0, x1, f0, f1);
+        }
+
+        // Illinois and Pegasus "trick"
         switch (method) {
             case ILLINOIS:
+                if (prevF0 == f0) {
                     f0 *= 0.5;
+                } else if (prevF1 == f1) {
+                    f1 *= 0.5;
+                }
                 break;
             case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
+                if (prevF0 == f0) {
+                    f0 *= f1 / (f1 + f0);
+                } else if (prevF1 == f1) {
+                    f1 *= f0 / (f0 + f1);
+                }
                 break;
-                        // Update formula cannot make any progress: Update the
-                        // search interval.
             default:
-                    // Should never happen.
+                // REGULA_FALSI: do nothing
         }
-            }
-            // Update from [x0, x1] to [x0, x].
-            x1 = x;
-            f1 = fx;
+        prevF0 = f0;
+        prevF1 = f1;
 
         // If the function value of the last approximation is too small,
         // given the function value accuracy, then we can't get closer to
         // the root than we already are.
-            if (FastMath.abs(f1) <= ftol) {
+        if (FastMath.abs(f1) <= ftol || FastMath.abs(f0) <= ftol) {
+            double root;
+            if (FastMath.abs(f1) <= FastMath.abs(f0)) {
+                root = x1;
+            } else {
+                root = x0;
+            }
             switch (allowed) {
                 case ANY_SIDE:
-                    return x1;
+                    return root;
                 case LEFT_SIDE:
                     if (inverted) {
-                        return x1;
+                        return root;
                     }
                     break;
                 case RIGHT_SIDE:
                     if (!inverted) {
-                        return x1;
+                        return root;
                     }
                     break;
                 case BELOW_SIDE:
-                    if (f1 <= 0) {
-                        return x1;
+                    double fr = (root == x1) ? f1 : f0;
+                    if (fr <= 0) {
+                        return root;
                     }
                     break;
                 case ABOVE_SIDE:
-                    if (f1 >= 0) {
-                        return x1;
+                    double fr2 = (root == x1) ? f1 : f0;
+                    if (fr2 >= 0) {
+                        return root;
                     }
                     break;
                 default:
                     throw new MathInternalError();
             }
         }
 
         // If the current interval is within the given accuracies, we
         // are satisfied with the current approximation.
-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                     atol)) {
+        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.max(FastMath.abs(x1), FastMath.abs(x0)), atol)) {
             switch (allowed) {
                 case ANY_SIDE:
-                    return x1;
+                    return FastMath.abs(f1) < FastMath.abs(f0) ? x1 : x0;
                 case LEFT_SIDE:
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
-                    return (f1 <= 0) ? x1 : x0;
+                    if (f1 <= 0) {
+                        return x1;
+                    }
+                    if (f0 <= 0) {
+                        return x0;
+                    }
+                    break;
                 case ABOVE_SIDE:
-                    return (f1 >= 0) ? x1 : x0;
+                    if (f1 >= 0) {
+                        return x1;
+                    }
+                    if (f0 >= 0) {
+                        return x0;
+                    }
+                    break;
                 default:
                     throw new MathInternalError();
             }
         }
     }
 }
\ No newline at end of file
