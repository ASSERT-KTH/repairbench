diff --git a/tmp/0267041c-9598-4ce6-9b2d-475f9c11c206_buggy.java b/tmp/7077c192-9ab8-48d8-b1e6-6d664992f84a_fixed.java
index 139579d..e1eb1a9 100644
--- a/tmp/0267041c-9598-4ce6-9b2d-475f9c11c206_buggy.java
+++ b/tmp/7077c192-9ab8-48d8-b1e6-6d664992f84a_fixed.java
@@ -1,43 +1,30 @@
 // performance sensitive
 public boolean hasClass(String className) {
     final String classAttr = attributes.get("class");
+    if (classAttr == null) return false; // handle null class attribute
     final int len = classAttr.length();
     final int wantLen = className.length();
 
     if (len == 0 || len < wantLen) {
         return false;
     }
 
-        // if both lengths are equal, only need compare the className with the attribute
-        if (len == wantLen) {
-            return className.equalsIgnoreCase(classAttr);
-        }
-
-        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
-        boolean inClass = false;
     int start = 0;
     for (int i = 0; i < len; i++) {
+        // consider all Unicode whitespace as separator
         if (Character.isWhitespace(classAttr.charAt(i))) {
-                if (inClass) {
-                    // white space ends a class name, compare it with the requested one, ignore case
+            if (i > start) {
                 if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
                     return true;
                 }
-                    inClass = false;
             }
-            } else {
-                if (!inClass) {
-                    // we're in a class name : keep the start of the substring
-                    inClass = true;
-                    start = i;
+            start = i + 1;
         }
     }
-        }
-
     // check the last entry
-        if (inClass && len - start == wantLen) {
-            return classAttr.regionMatches(true, start, className, 0, wantLen);
+    if (len > start && len - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
+        return true;
     }
 
     return false;
 }
\ No newline at end of file
