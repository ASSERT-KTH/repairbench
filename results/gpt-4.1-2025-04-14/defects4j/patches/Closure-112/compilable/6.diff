diff --git a/tmp/b503396f-5496-4bc3-b37f-e1fee8d8f5c2_buggy.java b/tmp/57e28d43-e1e9-4418-aeb5-c7c407272af6_fixed.java
index 63641d0..932be3f 100644
--- a/tmp/b503396f-5496-4bc3-b37f-e1fee8d8f5c2_buggy.java
+++ b/tmp/57e28d43-e1e9-4418-aeb5-c7c407272af6_fixed.java
@@ -1,33 +1,39 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // Fill in missing template types with UNKNOWN
+    for (TemplateType key : keys) {
+      if (!inferred.containsKey(key)) {
+        inferred.put(key, getNativeType(JSTypeNative.UNKNOWN_TYPE));
+      }
+    }
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
