diff --git a/tmp/b0bbdb65-3254-409e-82a0-e9bc2cdf7314_buggy.java b/tmp/cbcf7b4a-c11c-4b63-9776-aa84f628e075_fixed.java
index 63641d0..2fc7d0e 100644
--- a/tmp/b0bbdb65-3254-409e-82a0-e9bc2cdf7314_buggy.java
+++ b/tmp/cbcf7b4a-c11c-4b63-9776-aa84f628e075_fixed.java
@@ -1,33 +1,50 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // If not all template types are inferred, do not replace with UNKNOWN.
+    // Only set the type on the call if all inferred template types are found, or leave as-is.
+    boolean allInferred = true;
+    for (TemplateType key : keys) {
+      if (!inferred.containsKey(key)) {
+        allInferred = false;
+        break;
+      }
+    }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+    if (!allInferred) {
+      // If some template types remain uninstantiated, do not force them to UNKNOWN.
+      // Just set the node's type to the original fnType return value, don't instantiate.
+      Node callTarget = n.getFirstChild();
+      callTarget.setJSType(fnType);
+      n.setJSType(fnType.getReturnType());
+      return false;
+    }
+
+    // Replace all template types.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
