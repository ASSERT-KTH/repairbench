diff --git a/tmp/a87faa29-81a8-4e6e-90c2-7510a8fa99c8_buggy.java b/tmp/e37c9c4e-1e6b-4aa2-9bf1-947f773a4db1_fixed.java
index 63641d0..99b1322 100644
--- a/tmp/a87faa29-81a8-4e6e-90c2-7510a8fa99c8_buggy.java
+++ b/tmp/e37c9c4e-1e6b-4aa2-9bf1-947f773a4db1_fixed.java
@@ -1,33 +1,40 @@
 /**
  * For functions with function(this: T, ...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
  * the actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // Make a full inferred map, filling in UNKNOWN for missing ones.
+  Map<TemplateType, JSType> fullInferred = new LinkedHashMap<>();
+  for (TemplateType key : keys) {
+    JSType t = inferred.get(key);
+    fullInferred.put(key, t == null ? registry.getNativeType(JSTypeNative.UNKNOWN_TYPE) : t);
+  }
 
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+      registry, fullInferred);
+
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
       .toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
