diff --git a/tmp/0d495f93-516a-48cb-a48f-37fbb6b74bc4_buggy.java b/tmp/feb157ee-f5fa-491a-9db7-3b98e41dbb67_fixed.java
index 63641d0..1a8e638 100644
--- a/tmp/0d495f93-516a-48cb-a48f-37fbb6b74bc4_buggy.java
+++ b/tmp/feb157ee-f5fa-491a-9db7-3b98e41dbb67_fixed.java
@@ -1,33 +1,46 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // Some template types may not be inferrable from the function parameters,
+    // e.g., function<T>(x: T|K):T, when passed a 1 (number), K remains unresolved.
+    // This leads to failing to instantiate the return type (T) properly for union cases.
+    // So, ensure the inference fills all required template keys.
+    if (inferred == null) {
+      inferred = new HashMap<>();
+    }
+    for (TemplateType key : keys) {
+      if (!inferred.containsKey(key)) {
+        // For missing inference, fill in UNKNOWN for that template key.
+        inferred.put(key, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
+      }
+    }
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
