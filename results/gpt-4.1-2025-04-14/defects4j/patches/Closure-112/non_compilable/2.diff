diff --git a/tmp/6004bef8-fe9e-4725-a564-797be8922424_buggy.java b/tmp/6702de90-e5bd-4094-bee8-a2a7d6c81ba4_fixed.java
index 63641d0..ce6ff0f 100644
--- a/tmp/6004bef8-fe9e-4725-a564-797be8922424_buggy.java
+++ b/tmp/6702de90-e5bd-4094-bee8-a2a7d6c81ba4_fixed.java
@@ -1,33 +1,50 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // Make sure to include any template types from outer scopes that
+    // were already specified in the template type map.
+    // This matters for cases like:
+    //   /** @template T */
+    //   function f() {
+    //     /** @template K */
+    //     function g(param: T|K): T {}
+    //   }
+    TemplateTypeMap fnTypeTemplates = fnType.getTemplateTypeMap();
+    for (TemplateType templateKey : keys) {
+      if (!inferred.containsKey(templateKey)) {
+        JSType currentBinding = fnTypeTemplates.getResolvedTemplateType(templateKey);
+        if (currentBinding != null && !currentBinding.isUnknownType() && !currentBinding.isTemplateType()) {
+          inferred.put(templateKey, currentBinding);
+        }
+      }
+    }
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
