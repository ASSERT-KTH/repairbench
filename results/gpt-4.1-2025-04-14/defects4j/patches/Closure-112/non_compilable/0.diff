diff --git a/tmp/30e3a1fb-b86a-4a75-ba4d-372d52b04447_buggy.java b/tmp/643da40f-6143-4922-ad81-41f6b6b4b5ad_fixed.java
index 63641d0..a0d745f 100644
--- a/tmp/30e3a1fb-b86a-4a75-ba4d-372d52b04447_buggy.java
+++ b/tmp/643da40f-6143-4922-ad81-41f6b6b4b5ad_fixed.java
@@ -1,33 +1,36 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
-
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+    // When we could not infer a template, do not substitute UNKNOWN,
+    // keep the template in place. This is what callers expect since
+    // replacing with UNKNOWN can lose information and force downstream
+    // code to see too weak a type.
+    // See b/13261838 and testTemplatized11.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+        registry, inferred, /* replaceUninferred= */ false);
+
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
