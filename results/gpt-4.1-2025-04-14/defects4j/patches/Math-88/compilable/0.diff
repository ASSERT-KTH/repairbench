diff --git a/tmp/d4437352-ea0e-4c3d-83c6-b96805000ce4_buggy.java b/tmp/110f6423-1d0f-4d3b-8369-5c2ecb9e068f_fixed.java
index 544303b..916250e 100644
--- a/tmp/d4437352-ea0e-4c3d-83c6-b96805000ce4_buggy.java
+++ b/tmp/110f6423-1d0f-4d3b-8369-5c2ecb9e068f_fixed.java
@@ -1,29 +1,36 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    Integer basicRow;
+    // Identify the most negative variable for unrestricted problems (used for shifting)
+    double mostNegative = Double.POSITIVE_INFINITY;
+    if (!restrictToNonNegative) {
+        for (int i = 0; i < coefficients.length; i++) {
+            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+            double value = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+            if (value < mostNegative) {
+                mostNegative = value;
+            }
+        }
+        if (mostNegative == Double.POSITIVE_INFINITY) {
+            mostNegative = 0;
+        }
+    } else {
+        mostNegative = 0;
+    }
+
     for (int i = 0; i < coefficients.length; i++) {
         basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
         coefficients[i] =
             (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
             (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
-                    }
-                }
-            }
     }
+
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
