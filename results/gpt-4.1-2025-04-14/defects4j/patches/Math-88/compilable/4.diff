diff --git a/tmp/98963ec1-43dd-4df8-9abc-dd3a1f4a0283_buggy.java b/tmp/99783337-75ea-40d0-b3f2-ea2c5d9c20a2_fixed.java
index 544303b..b26caf4 100644
--- a/tmp/98963ec1-43dd-4df8-9abc-dd3a1f4a0283_buggy.java
+++ b/tmp/99783337-75ea-40d0-b3f2-ea2c5d9c20a2_fixed.java
@@ -1,29 +1,36 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    double mostNegative = 0;
+    // Find the most negative variable (for unrestricted variables)
+    Integer basicRowForMostNegative = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
+    if (basicRowForMostNegative != null) {
+        mostNegative = getEntry(basicRowForMostNegative, getRhsOffset());
+    }
+    // Compute the solution
     for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+        boolean setToZero = false;
         if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+            // If this basic row is basic for more than one variable, only one should take the value.
+            for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + coefficients.length; j++) {
+                if (j != (getNumObjectiveFunctions() + i) && getBasicRow(j) != null && getBasicRow(j).equals(basicRow)) {
+                    setToZero = true;
+                    break;
+                }
+            }
+        }
+        if (setToZero || basicRow == null) {
             coefficients[i] = 0;
-                    }
-                }
+        } else {
+            coefficients[i] = getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);
         }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
