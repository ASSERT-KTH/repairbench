diff --git a/tmp/155f443a-77f4-4f32-b990-5257f1a39d4e_buggy.java b/tmp/ef254784-ee81-4263-9b58-9ea0221a5f9a_fixed.java
index 544303b..ba18361 100644
--- a/tmp/155f443a-77f4-4f32-b990-5257f1a39d4e_buggy.java
+++ b/tmp/ef254784-ee81-4263-9b58-9ea0221a5f9a_fixed.java
@@ -1,29 +1,45 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     Integer basicRow =
         getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
     double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
     for (int i = 0; i < coefficients.length; i++) {
         basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+
+        // Default: variable = 0
+        double value = 0;
+
+        // If this column is a basic variable
         if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
+            // Check if column for this variable is a basic column:
+            boolean isBasic = true;
+            for (int row = 0; row < getHeight(); row++) {
+                double entry = tableau.getEntry(row, getNumObjectiveFunctions() + i);
+                if (row == basicRow) {
+                    if (entry != 1.0) {
+                        isBasic = false;
+                        break;
                     }
+                } else {
+                    if (entry != 0.0) {
+                        isBasic = false;
+                        break;
                     }
                 }
             }
+            if (isBasic) {
+                value = getEntry(basicRow, getRhsOffset());
+            }
+        }
+
+        coefficients[i] = value - (restrictToNonNegative ? 0 : mostNegative);
+    }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
