diff --git a/tmp/f7624c40-8ca0-4377-a604-19acdb9c0dd0_buggy.java b/tmp/1b5d759b-c57a-45fe-86d0-ae09570e4ba5_fixed.java
index 544303b..bdf2126 100644
--- a/tmp/f7624c40-8ca0-4377-a604-19acdb9c0dd0_buggy.java
+++ b/tmp/1b5d759b-c57a-45fe-86d0-ae09570e4ba5_fixed.java
@@ -1,29 +1,35 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    double mostNegative = Double.POSITIVE_INFINITY;
+    for (int i = 0; i < getWidth() - 1; i++) {
+        // Find the minimum (most negative) basic variable RHS for dual simplex correction
+        Integer basicRow = getBasicRow(i);
+        if (basicRow != null) {
+            double entry = getEntry(basicRow, getRhsOffset());
+            if (entry < mostNegative) {
+                mostNegative = entry;
+            }
+        }
+    }
+    if (mostNegative == Double.POSITIVE_INFINITY) {
+        mostNegative = 0;
+    }
+
     for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
         // if multiple variables can take a given value 
         // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
+        coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                         (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
-                    }
-                }
-            }
+        // Remove the logic that sets coefficients[i] to 0 if any previous basic variables appear in this row
+        // This is incorrect for problems with alternate optimal basic solutions
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
