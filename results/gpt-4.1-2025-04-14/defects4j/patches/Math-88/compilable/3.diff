diff --git a/tmp/bb0aa10e-782a-4eb1-85e3-826e7602f186_buggy.java b/tmp/02d6a0b7-146e-4ed5-af54-e006a90d345c_fixed.java
index 544303b..bc535f8 100644
--- a/tmp/bb0aa10e-782a-4eb1-85e3-826e7602f186_buggy.java
+++ b/tmp/02d6a0b7-146e-4ed5-af54-e006a90d345c_fixed.java
@@ -1,29 +1,37 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     Integer basicRow =
         getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
     double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
     for (int i = 0; i < coefficients.length; i++) {
         basicRow = getBasicRow(getNumObjectiveFunctions() + i);
         // if multiple variables can take a given value 
         // then we choose the first and set the rest equal to 0
+        boolean isBasic = basicRow != null;
         coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
+            (isBasic ? getEntry(basicRow, getRhsOffset()) : 0) -
             (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+        // To prevent setting basic variable to 0 if another basic variable shares the same row
+        if (isBasic) {
+            boolean otherBasicFound = false;
+            for (int j = 0; j < getOriginalNumDecisionVariables(); j++) {
+                if (j != i && getBasicRow(getNumObjectiveFunctions() + j) != null &&
+                    getBasicRow(getNumObjectiveFunctions() + j).equals(basicRow)) {
+                    otherBasicFound = true;
+                    break;
+                }
+            }
+            if (otherBasicFound) {
                 coefficients[i] = 0;
             }
         }
     }
-        }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
