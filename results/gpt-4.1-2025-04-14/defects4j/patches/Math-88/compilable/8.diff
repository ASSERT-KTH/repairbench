diff --git a/tmp/998a2c08-d079-4e11-8d64-0fcaf4812ed5_buggy.java b/tmp/4c65a7c7-4f2e-4af1-9a43-8c40486c608e_fixed.java
index 544303b..f56ba3f 100644
--- a/tmp/998a2c08-d079-4e11-8d64-0fcaf4812ed5_buggy.java
+++ b/tmp/4c65a7c7-4f2e-4af1-9a43-8c40486c608e_fixed.java
@@ -1,29 +1,50 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+
+    // Compute the most negative value once for shifting if unrestricted
+    double mostNegative = 0.0;
+    if (!restrictToNonNegative) {
+        for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {
+            Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+            double entry = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()));
+            if (entry < mostNegative) {
+                mostNegative = entry;
+            }
+        }
+    }
+
     for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+        boolean isBasic = false;
         if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+            // Check if this variable column is a basic variable in this row
+            if (Math.abs(getEntry(basicRow, getNumObjectiveFunctions() + i) - 1.0) < 1e-8) {
+                // Check all other columns: must be 0 for basicness
+                boolean onlyOne = true;
+                for (int col = getNumObjectiveFunctions(); col < getNumObjectiveFunctions() + getOriginalNumDecisionVariables(); col++) {
+                    if (col != getNumObjectiveFunctions() + i &&
+                        Math.abs(getEntry(basicRow, col)) > 1e-8) {
+                        onlyOne = false;
+                        break;
+                    }
+                }
+                if (onlyOne) {
+                    isBasic = true;
+                }
+            }
+        }
+        if (isBasic) {
+            coefficients[i] = getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);
+        } else {
             coefficients[i] = 0;
         }
     }
-            }
-        }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
