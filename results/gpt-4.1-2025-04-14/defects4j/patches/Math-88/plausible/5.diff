diff --git a/tmp/583fac8f-3fe0-4206-8970-f055dce2f629_buggy.java b/tmp/dd92b8d3-b071-4707-9e33-93074048d8f0_fixed.java
index 544303b..b83e944 100644
--- a/tmp/583fac8f-3fe0-4206-8970-f055dce2f629_buggy.java
+++ b/tmp/dd92b8d3-b071-4707-9e33-93074048d8f0_fixed.java
@@ -1,29 +1,34 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    double mostNegative = 0;
+    Integer negativeVarBasicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
+    if (negativeVarBasicRow != null) {
+        mostNegative = getEntry(negativeVarBasicRow, getRhsOffset());
+    }
     for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+        coefficients[i] = 0;
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
         if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+            coefficients[i] = getEntry(basicRow, getRhsOffset());
+            // check if any previous variable also uses this basic row
+            for (int j = 0; j < i; j++) {
+                Integer previousBasicRow = getBasicRow(getNumObjectiveFunctions() + j);
+                if (previousBasicRow != null && previousBasicRow.intValue() == basicRow.intValue()) {
                     coefficients[i] = 0;
+                    break;
                 }
             }
         }
+        if (!restrictToNonNegative) {
+            coefficients[i] -= mostNegative;
+        }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
