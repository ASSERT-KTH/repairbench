diff --git a/tmp/ed382e02-61eb-402a-956e-c18be39f3f97_buggy.java b/tmp/f834ddaa-522b-44c8-9450-837a3ebc9bf0_fixed.java
index 1a63a66..64d21f5 100644
--- a/tmp/ed382e02-61eb-402a-956e-c18be39f3f97_buggy.java
+++ b/tmp/f834ddaa-522b-44c8-9450-837a3ebc9bf0_fixed.java
@@ -1,21 +1,20 @@
 @Override
 @Deprecated
 protected JavaType _narrow(Class<?> subclass)
 {
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
-        // TODO: fix in 2.8
-            /*
+    // For the specific problem with placeholders (like Void, NoClass), only enforce sub-type if subclass is not Object
+    // or one of special placeholder types; otherwise allow
+    if (!_class.isAssignableFrom(subclass)) {
+        // 16-Jun-2024: PATCH: Allow subtypes of Object (including interface; and for default implementation)
+        if (_class != Object.class) {
+            // See comment in original for not throwing always due to special placeholder types
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
-                    */
+        }
+    }
     return new SimpleType(subclass, _bindings, this, _superInterfaces,
             _valueHandler, _typeHandler, _asStatic);
-        // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
-        // should not get here but...
 }
\ No newline at end of file
