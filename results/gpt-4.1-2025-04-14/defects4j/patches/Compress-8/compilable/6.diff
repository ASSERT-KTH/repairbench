diff --git a/tmp/21aa9813-e831-4a2f-ab93-4d4b880fb891_buggy.java b/tmp/98cf12bb-8a11-44ee-87e3-cb94f4d2bf9a_fixed.java
index e087f95..ebe0655 100644
--- a/tmp/21aa9813-e831-4a2f-ab93-4d4b880fb891_buggy.java
+++ b/tmp/98cf12bb-8a11-44ee-87e3-cb94f4d2bf9a_fixed.java
@@ -1,53 +1,61 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    // Check minimal length
+    if (length < 2 || buffer == null || buffer.length < offset + length) {
+        throw new IllegalArgumentException("Buffer too small for parseOctal");
+    }
     long    result = 0;
     boolean stillPadding = true;
     int     end = offset + length;
     int     start = offset;
+    int     i = start;
 
-        for (int i = start; i < end; i++){
+    // Check if buffer is all NULs: allowed
+    boolean allNuls = true;
+    for (int j = start; j < end; j++) {
+        if (buffer[j] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
+        return 0L;
+    }
+
+    // Find the position of the first trailing space or NUL
+    int trailerIdx = end - 1;
+    while (trailerIdx >= start && (buffer[trailerIdx] == 0 || buffer[trailerIdx] == (byte) ' ')) {
+        trailerIdx--;
+    }
+    trailerIdx++; // at first trailing space or NUL
+
+    // There must be at least one trailing NUL or space, and trailerIdx > start
+    if (trailerIdx >= end || trailerIdx == start) {
+        throw new IllegalArgumentException("Missing trailing space or NUL for parseOctal");
+    }
+
+    // Now check if there are any non-final NULs or spaces in the digits
+    for (i = start; i < trailerIdx; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
-
-        // Skip leading spaces
         if (currentByte == (byte) ' ' || currentByte == '0') {
             if (stillPadding) {
                 continue;
             }
-                if (currentByte == (byte) ' ') {
-                break;
         }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                 exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    }
+
+    // After any digits, from trailerIdx to end, only spaces or NULs allowed
+    for (int j = trailerIdx; j < end; j++) {
+        if (buffer[j] != 0 && buffer[j] != (byte) ' ') {
+            throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, start, buffer[j]));
+        }
     }
 
     return result;
 }
\ No newline at end of file
