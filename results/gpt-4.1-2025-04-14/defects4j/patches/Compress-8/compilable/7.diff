diff --git a/tmp/1fa0246a-1f2a-4d2d-b596-51debf6a1ad7_buggy.java b/tmp/ee6a8b2c-cace-4c28-9387-bf12892051ff_fixed.java
index e087f95..6f8fc62 100644
--- a/tmp/1fa0246a-1f2a-4d2d-b596-51debf6a1ad7_buggy.java
+++ b/tmp/ee6a8b2c-cace-4c28-9387-bf12892051ff_fixed.java
@@ -1,53 +1,68 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes");
+    }
+    if (buffer == null || buffer.length < offset + length) {
+        throw new IllegalArgumentException("Buffer is too small for the requested offset and length");
+    }
+
     int start = offset;
+    int end = offset + length;
 
+    // Check if buffer consists only of NULs (per spec, this means zero)
+    boolean allNuls = true;
     for (int i = start; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
+        return 0L;
+    }
+
+    // If not all NULs, must have exactly one or two trailing NULs or spaces, rest valid
+    // Find last non space/NUL character: to validate trailing space/NUL
+    int trailerIdx = end - 1;
+    while (trailerIdx >= start && (buffer[trailerIdx] == 0 || buffer[trailerIdx] == (byte)' ')) {
+        trailerIdx--;
+    }
+    int octalEnd = trailerIdx + 1; // exclusive
+
+    // The last character *must* be a space or NUL, or (second last must if last char is another trailer)
+    // Must be at least one trailing space or NUL
+    if (octalEnd >= end || octalEnd < start + 1) {
+        // No data before all trailers, or no octal digits
+        throw new IllegalArgumentException("No octal digits found in buffer");
+    }
+    int trailersCount = end - octalEnd;
+    if (trailersCount < 1 || trailersCount > 2) {
+        throw new IllegalArgumentException("Buffer must have one or two trailing space or NUL");
+    }
+
+    long result = 0;
+    boolean stillPadding = true;
+    for (int i = start; i < octalEnd; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
 
+        if (stillPadding) {
             // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
             if (currentByte == (byte) ' ') {
-                break;
+                continue;
             }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+        }
+
+        if (currentByte >= '0' && currentByte <= '7') {
+            result = (result << 3) + (currentByte - '0');
+        } else {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
-
+    // If we never got a non-padding digit, that's a parse error (no digits)
+    if (stillPadding) {
+        throw new IllegalArgumentException("No octal digits found in buffer");
+    }
     return result;
 }
\ No newline at end of file
