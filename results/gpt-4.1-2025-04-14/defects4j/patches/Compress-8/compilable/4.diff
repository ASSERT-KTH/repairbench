diff --git a/tmp/763ac634-bdd6-4339-af30-f0334553af14_buggy.java b/tmp/49b2c34c-4d40-4e32-8c7c-27050792ae02_fixed.java
index e087f95..eebd66f 100644
--- a/tmp/763ac634-bdd6-4339-af30-f0334553af14_buggy.java
+++ b/tmp/49b2c34c-4d40-4e32-8c7c-27050792ae02_fixed.java
@@ -1,53 +1,77 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes, but was " + length);
+    }
+    if (buffer == null || buffer.length < offset + length) {
+        throw new IllegalArgumentException("Buffer too small for parseOctal");
+    }
+
     int end = offset + length;
     int start = offset;
 
+    // Check for all NULs special case
+    boolean allNuls = true;
     for (int i = start; i < end; i++) {
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+        if (buffer[i] != 0) {
+            allNuls = false;
             break;
         }
+    }
+    if (allNuls) {
+        return 0L;
+    }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+    // Otherwise, not all NULs: must have trailing space or NUL
+    if (buffer[end - 1] != 0 && buffer[end - 1] != (byte) ' ') {
+        throw new IllegalArgumentException("Trailing space or NUL missing in buffer");
+    }
+
+    // Accept an optional extra trailing space/NUL
+    int trailerPos = end - 1;
+    int preTrailerPos = trailerPos - 1;
+    if (preTrailerPos < start) {
+        throw new IllegalArgumentException("Not enough length for parseOctal field");
+    }
+
+    // If the last two bytes are both trailing chars, skip the last one
+    // as the spec allows one or two
+    if (buffer[trailerPos] == 0 || buffer[trailerPos] == (byte) ' ') {
+        if (buffer[preTrailerPos] == 0 || buffer[preTrailerPos] == (byte) ' ') {
+            trailerPos = preTrailerPos;
+        }
+    }
+    // Now trailerPos is at the real trailer (must be ' ' or 0)
+
+    // Parse
+    long result = 0;
+    boolean stillPadding = true;
+    int i = start;
+    while (i < trailerPos) {
+        byte currentByte = buffer[i];
+        if (currentByte == 0 || currentByte == (byte) ' ') {
             if (stillPadding) {
+                i++;
                 continue;
+            } else {
+                // Embedded space/NUL is not allowed
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, start, currentByte));
             }
-                if (currentByte == (byte) ' ') {
-                break;
         }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        result = (result << 3) + (currentByte - '0');
+        i++;
+    }
+
+    // If no digits were parsed, that's invalid
+    if (stillPadding) {
+        throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, start, buffer[start]));
     }
 
     return result;
 }
\ No newline at end of file
