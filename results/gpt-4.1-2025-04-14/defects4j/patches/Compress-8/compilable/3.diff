diff --git a/tmp/1983df34-b56c-4fbf-ac15-4a82bd644b9a_buggy.java b/tmp/149a1d92-42e6-49ff-8569-e9bdceba3a86_fixed.java
index e087f95..05d4eef 100644
--- a/tmp/1983df34-b56c-4fbf-ac15-4a82bd644b9a_buggy.java
+++ b/tmp/149a1d92-42e6-49ff-8569-e9bdceba3a86_fixed.java
@@ -1,53 +1,80 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2, got: " + length);
+    }
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
+    int i = start;
+    boolean foundDigit = false;
+    boolean allNuls = true;
 
-        for (int i = start; i < end; i++){
+    for (; i < end; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+        if (currentByte != 0) {
+            allNuls = false;
+        }
+        if (currentByte == 0) { // NUL stops parsing
             break;
         }
-
         // Skip leading spaces
         if (currentByte == (byte) ' ' || currentByte == '0') {
             if (stillPadding) {
                 continue;
             }
             if (currentByte == (byte) ' ') {
                 break;
             }
         }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                 exceptionMessage(buffer, offset, length, start, currentByte));
         }
+        foundDigit = true;
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    }
+
+    // If the whole buffer is NULs, accept as zero
+    if (allNuls) {
+        return 0L;
+    }
+
+    // Otherwise buffer must contain at least one digit and a valid trailer
+    if (!foundDigit) {
+        throw new IllegalArgumentException(
+            exceptionMessage(buffer, offset, length, start, (byte)0));
+    }
+    // At this point, i points to either end or trailer (space or NUL)
+    // The buffer must contain a trailing space or NUL, and may contain one additional space or NUL
+    // e.g., the last 1 or 2 bytes must be space or NUL
+
+    // For this, we check that the remaining bytes are either NUL or space
+    // and there are not more than 2 trailer bytes
+    int trailers = end - i;
+    if (trailers == 0) {
+        throw new IllegalArgumentException(
+            exceptionMessage(buffer, offset, length, start, (byte)0));
+    }
+    if (trailers > 2) {
+        throw new IllegalArgumentException(
+            exceptionMessage(buffer, offset, length, start, (byte)0));
+    }
+    for (int j = i; j < end; j++) {
+        byte c = buffer[j];
+        if (c != 0 && c != (byte)' ') {
+            throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, start, c));
+        }
+    }
+    // Invalid if there are non-trailer NUL/space in between digits
+    // (i.e. the parsing loop stops early when it encounters an embedded NUL/space, so this is already covered)
+    // Additional test: If embedded NUL/space is found before trailer, then the loop would have stopped and all non-trailer bytes after first non-padding NUL/space in digits are forbidden
+    if (i < end - trailers) {
+        throw new IllegalArgumentException(
+            exceptionMessage(buffer, offset, length, start, buffer[i]));
     }
 
     return result;
 }
\ No newline at end of file
