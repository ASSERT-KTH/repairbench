diff --git a/tmp/214f1b8e-21b1-4030-85e4-dd189e67112d_buggy.java b/tmp/cd300f73-3668-47d2-a89a-c9e9446fb238_fixed.java
index e087f95..f38df0b 100644
--- a/tmp/214f1b8e-21b1-4030-85e4-dd189e67112d_buggy.java
+++ b/tmp/cd300f73-3668-47d2-a89a-c9e9446fb238_fixed.java
@@ -1,53 +1,75 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
+    if (buffer == null) {
+        throw new IllegalArgumentException("buffer is null");
+    }
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2");
+    }
+    if (offset < 0 || length > buffer.length - offset) {
+        throw new IllegalArgumentException("Invalid offset/length");
+    }
+
+    final int end = offset + length;
+
+    // Check if all NULs (special case: return 0)
+    boolean allNuls = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
+        return 0L;
+    }
+
     int start = offset;
 
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
-
     // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
+    while (start < end && buffer[start] == (byte) ' ') {
+        start++;
     }
-                if (currentByte == (byte) ' ') {
+
+    // Now, must be at least one digit, and up to one or two trailer
+    int pos = start;
+    long result = 0;
+    boolean digitSeen = false;
+    for (; pos < end; pos++) {
+        byte curr = buffer[pos];
+        if (curr >= '0' && curr <= '7') {
+            result = (result << 3) + (curr - '0');
+            digitSeen = true;
+        } else {
             break;
         }
     }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+    if (!digitSeen) {
+        throw new IllegalArgumentException("No octal digits found: " + exceptionMessage(buffer, offset, length, start, pos < end ? buffer[pos] : 0));
+    }
 
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
-            }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    // After digits, must be a trailer: space or NUL
+    // Up to two trailing spaces/NULs are allowed (POSIX)
+    int trailers = 0;
+    for (int i = pos; i < end && trailers < 2; i++) {
+        byte curr = buffer[i];
+        if (curr == (byte) ' ' || curr == 0) {
+            trailers++;
+        } else {
+            // Any other data is illegal
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, curr));
+        }
+    }
+    if (trailers == 0) {
+        throw new IllegalArgumentException("Missing trailing space or NUL: " + exceptionMessage(buffer, offset, length, pos, pos < end ? buffer[pos] : 0));
+    }
+    // After (pos+trailers), there must be nothing else than trailers up to end
+    for (int i = pos + trailers; i < end; i++) {
+        byte curr = buffer[i];
+        if (curr != (byte) ' ' && curr != 0) {
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, curr));
+        }
     }
 
     return result;
 }
\ No newline at end of file
