diff --git a/tmp/a7d5897c-6290-490d-94fa-a0b179297489_buggy.java b/tmp/821c1f0b-33c9-43f9-ad2f-1a2a99087960_fixed.java
index e087f95..fbe30b4 100644
--- a/tmp/a7d5897c-6290-490d-94fa-a0b179297489_buggy.java
+++ b/tmp/821c1f0b-33c9-43f9-ad2f-1a2a99087960_fixed.java
@@ -1,53 +1,69 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2 || buffer == null || buffer.length < offset + length) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes and buffer must be sufficient");
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
+    boolean foundNonNul = false;
 
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+    // Check if all bytes are NUL
+    boolean allNul = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNul = false;
             break;
         }
+    }
+    if (allNul) {
+        return 0L;
+    }
 
+    int i = start;
     // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
+    while (i < end && (buffer[i] == (byte) ' ')) {
+        i++;
     }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
+    int digitsStart = i;
+    // Now read octal digits
+    for (; i < end; i++) {
+        final byte currentByte = buffer[i];
+        if (currentByte >= '0' && currentByte <= '7') {
+            foundNonNul = true;
+            result = (result << 3) + (currentByte - '0');
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+        } else if (currentByte == (byte) ' ' || currentByte == 0) {
+            // Trailer or possible padding -- break and check
+            break;
+        } else {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                exceptionMessage(buffer, offset, length, i, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    }
+
+    int trailerLen = end - i;
+    // Must have at least 1 and at most 2 trailing chars in the remaining range
+    // (Either [SPACE|NUL][SPACE|NUL], but not more than 2)
+    if (i == start) { // nothing parsed at all
+        throw new IllegalArgumentException("No octal digits found");
+    }
+    // Only allow trailing [SPACE|NUL]{1,2}
+    int trailerCount = 0;
+    for (; i < end; i++) {
+        final byte c = buffer[i];
+        if (c != (byte) ' ' && c != 0) {
+            throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, i, c));
+        }
+        trailerCount++;
+    }
+    if (trailerCount < 1 || trailerCount > 2) {
+        throw new IllegalArgumentException(
+            "Missing or invalid trailing space/NUL");
     }
 
     return result;
 }
\ No newline at end of file
