diff --git a/tmp/7e51cbb6-1a00-4658-9f5d-74cca9b44608_buggy.java b/tmp/78b07e11-6bbe-45b1-8da6-9d54cf95d888_fixed.java
index e087f95..67bbe97 100644
--- a/tmp/7e51cbb6-1a00-4658-9f5d-74cca9b44608_buggy.java
+++ b/tmp/78b07e11-6bbe-45b1-8da6-9d54cf95d888_fixed.java
@@ -1,53 +1,59 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
+    // Must be at least 2 bytes long
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 but was " + length);
+    }
+
+    if (buffer == null || buffer.length < offset + length) {
+        throw new IllegalArgumentException("Buffer too small for offset + length");
+    }
+
+    // Check for all NULs: if so, return 0L
+    boolean allNuls = true;
+    for (int i = offset; i < offset + length; i++) {
+        if (buffer[i] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
+        return 0L;
+    }
+
+    // There must be a trailing NUL or space at the end or second-to-last position
+    int last = offset + length - 1;
+    int trailIdx = last;
+    if (buffer[trailIdx] != 0 && buffer[trailIdx] != (byte) ' ') {
+        trailIdx--;
+        if (trailIdx < offset || (buffer[trailIdx] != 0 && buffer[trailIdx] != (byte) ' ')) {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, trailIdx, buffer[trailIdx < offset ? offset : trailIdx]));
+        }
+    }
+
+    // The parse region is offset to trailIdx (exclusive)
     int start = offset;
-
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
+    int end = trailIdx;
 
     // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
+    while (start < end && buffer[start] == (byte) ' ') {
+        start++;
     }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+    long result = 0L;
+    boolean digitSeen = false;
+    for (int i = start; i < end; i++) {
+        byte b = buffer[i];
+        if (b < '0' || b > '7') {
+            // Embedded space or NUL or invalid char, error
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, b));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        digitSeen = true;
+        result = (result << 3) + (b - (byte) '0');
     }
+    // No digits found - treat as zero (like in traditional tar behavior)
+    // But usually length >= 2 and at least trailing NUL/space exists; test-case driven.
 
     return result;
 }
\ No newline at end of file
