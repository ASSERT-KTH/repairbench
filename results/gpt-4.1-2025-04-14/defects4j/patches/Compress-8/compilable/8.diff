diff --git a/tmp/21c6b8b9-e3c2-4011-903e-6a35a8c806b6_buggy.java b/tmp/5a7e0ecf-70fb-472c-99e5-287fd774f779_fixed.java
index e087f95..de99d41 100644
--- a/tmp/21c6b8b9-e3c2-4011-903e-6a35a8c806b6_buggy.java
+++ b/tmp/5a7e0ecf-70fb-472c-99e5-287fd774f779_fixed.java
@@ -1,53 +1,70 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2");
+    }
+    // Check for all NULs
+    boolean allNuls = true;
+    for (int i = offset; i < offset + length; i++) {
+        if (buffer[i] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
+        return 0L;
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
-
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
-
+    int i = start;
     // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
-                if (currentByte == (byte) ' ') {
+    for (; i < end; i++) {
+        if (buffer[i] == (byte) ' ' || buffer[i] == 0) {
+            // still leading padding
+        } else {
             break;
         }
     }
+    // Now i points at first non-space/non-NUL char or end
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
+    int digitsStart = i;
+    int digitsEnd = end;
+    boolean foundTrailer = false;
+    // Parse octal digits
+    for (; i < end; i++) {
+        byte currentByte = buffer[i];
+        if (currentByte >= '0' && currentByte <= '7') {
+            result = (result << 3) + (currentByte - '0');
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+        } else if (currentByte == (byte) ' ' || currentByte == 0) {
+            foundTrailer = true;
+            digitsEnd = i;
+            // There may be at most one more trailing space or NUL
+            i++;
+            if (i < end && (buffer[i] == (byte) ' ' || buffer[i] == 0)) {
+                i++;
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            // Any remaining chars must also be only NULs or spaces
+            while (i < end) {
+                if (buffer[i] != (byte) ' ' && buffer[i] != 0) {
+                    throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, buffer[i]));
+                }
+                i++;
+            }
+            break;
+        } else {
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
+        }
+    }
+    // Check for mandatory trailer (space or NUL)
+    if (!foundTrailer) {
+        throw new IllegalArgumentException("Invalid octal byte at offset " + (end - 1) + ", no trailing space or NUL");
+    }
+    // There must be at least one octal digit
+    if (digitsStart == digitsEnd) {
+        throw new IllegalArgumentException("No octal digits found");
     }
-
     return result;
 }
\ No newline at end of file
