diff --git a/tmp/7ccfc939-1ac1-4fb4-87da-08fc9ca2fb0c_buggy.java b/tmp/bfc2134a-ae89-41a8-8bde-3880dc816cf8_fixed.java
index e087f95..ea218e7 100644
--- a/tmp/7ccfc939-1ac1-4fb4-87da-08fc9ca2fb0c_buggy.java
+++ b/tmp/bfc2134a-ae89-41a8-8bde-3880dc816cf8_fixed.java
@@ -1,53 +1,64 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    // Check for min length
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes");
+    }
+    int end = offset + length;
+
+    // Check if all zeros case
+    boolean allNuls = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
+        return 0L;
+    }
+
+    // If not all NULs, make sure first and second-last bytes are not NUL (to catch cases like {0,0,' '})
+    // But actually: make sure either last or second-last byte is a space or NUL, per trailer requirement.
+    // We'll check the trailer after parsing digits.
+
     long result = 0;
     boolean stillPadding = true;
-        int     end = offset + length;
-        int     start = offset;
-
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+    int i = offset;
+    int lastDigit = -1;
+    // Skip leading spaces or zeros
+    while (i < end) {
+        byte currentByte = buffer[i];
+        if (currentByte == (byte) ' ' || currentByte == (byte) '0') {
             if (stillPadding) {
+                i++;
                 continue;
             }
-                if (currentByte == (byte) ' ') {
-                break;
         }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+            break;
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        result = (result << 3) + (currentByte - '0');
+        lastDigit = i;
+        i++;
     }
 
+    // Now i is at first non-octal byte or end
+    // There must be at least one ending byte (space or NUL) after digits, and nothing but space/NUL after digits
+    // The rest must be only spaces or NULs
+    boolean foundTrailer = false;
+    for (; i < end; i++) {
+        byte b = buffer[i];
+        if (b == 0 || b == (byte) ' ') {
+            foundTrailer = true;
+        } else {
+            throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, i, b));
+        }
+    }
+    if (!foundTrailer || lastDigit == -1) {
+        throw new IllegalArgumentException(
+            exceptionMessage(buffer, offset, length, offset, buffer[offset]));
+    }
     return result;
 }
\ No newline at end of file
