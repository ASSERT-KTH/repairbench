diff --git a/tmp/2f59b855-be5c-4b8a-9b0f-46f367c83f17_buggy.java b/tmp/a994c76a-bc23-433f-8624-0287936431fe_fixed.java
index e087f95..d188300 100644
--- a/tmp/2f59b855-be5c-4b8a-9b0f-46f367c83f17_buggy.java
+++ b/tmp/a994c76a-bc23-433f-8624-0287936431fe_fixed.java
@@ -1,53 +1,72 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    // Length must be at least 2 bytes
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes");
+    }
+    if (buffer == null) {
+        throw new IllegalArgumentException("Buffer is null");
+    }
+    if (offset < 0 || length < 0 || offset + length > buffer.length) {
+        throw new IllegalArgumentException("Invalid offset/length for buffer");
+    }
+    // Check for all-NULs early for auto-missing field case
+    boolean allNuls = true;
+    for (int i = offset; i < offset + length; i++) {
+        if (buffer[i] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
+        return 0L;
+    }
+    // Otherwise, trailing character must be space or NUL, possibly an additional one as well
+    int trailerCount = 0;
+    int end = offset + length;
+    // Last byte
+    int trailer1 = buffer[end - 1] & 0xFF;
+    if (trailer1 == 0 || trailer1 == (byte) ' ') {
+        trailerCount++;
+    }
+    // Check for one more if possible
+    if (length >= 2) {
+        int trailer2 = buffer[end - 2] & 0xFF;
+        if ((trailer2 == 0 || trailer2 == (byte) ' ') && trailer2 != trailer1) {
+            trailerCount++;
+        }
+    }
+    // Valid trailer must be at least one space/NUL at the end
+    int numericEnd = end;
+    if (trailer1 == 0 || trailer1 == (byte) ' ') {
+        numericEnd--;
+        if (numericEnd > offset && (buffer[numericEnd - 1] == 0 || buffer[numericEnd - 1] == (byte) ' ')) {
+            numericEnd--;
+        }
+    } else {
+        // no trailing NUL/space - error
+        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, offset, (byte)trailer1));
+    }
     long result = 0;
     boolean stillPadding = true;
-        int     end = offset + length;
-        int     start = offset;
-
-        for (int i = start; i < end; i++){
+    for (int i = offset; i < numericEnd; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+        if (currentByte == (byte) ' ' || currentByte == (byte) '0') {
             if (stillPadding) {
                 continue;
             }
             if (currentByte == (byte) ' ') {
-                break;
+                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
             }
         }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        result = (result << 3) + (currentByte - '0');
+    }
+    // If there are no digits, that's invalid (only allowed to be all NULs case)
+    if (stillPadding) {
+        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, offset, (byte) 0));
     }
-
     return result;
 }
\ No newline at end of file
