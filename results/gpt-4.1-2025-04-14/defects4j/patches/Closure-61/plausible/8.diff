diff --git a/tmp/183882fb-bf0d-4583-92b5-dd5cf4240aca_buggy.java b/tmp/9d5fbdaf-3685-4ccb-bd9b-943bdf85d349_fixed.java
index b36c3f0..58aefea 100644
--- a/tmp/183882fb-bf0d-4583-92b5-dd5cf4240aca_buggy.java
+++ b/tmp/9d5fbdaf-3685-4ccb-bd9b-943bdf85d349_fixed.java
@@ -1,58 +1,66 @@
 /**
  * Returns true if calls to this function have side effects.
  *
  * @param callNode The call node to inspected.
  * @param compiler A compiler object to provide program state changing
  *     context information. Can be null.
  */
 static boolean functionCallHasSideEffects(
     Node callNode, @Nullable AbstractCompiler compiler) {
   if (callNode.getType() != Token.CALL) {
     throw new IllegalStateException(
         "Expected CALL node, got " + Token.name(callNode.getType()));
   }
 
   if (callNode.isNoSideEffectsCall()) {
     return false;
   }
 
   Node nameNode = callNode.getFirstChild();
 
   // Built-in functions with no side effects.
   if (nameNode.getType() == Token.NAME) {
     String name = nameNode.getString();
     if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
       return false;
     }
   } else if (nameNode.getType() == Token.GETPROP) {
+    // Fix: check for Math namespace with method known to be side-effect free
+    Node objNode = nameNode.getFirstChild();
+    Node propNode = nameNode.getLastChild();
+    if (objNode != null && propNode != null) {
+      if (objNode.getType() == Token.NAME && "Math".equals(objNode.getString())) {
+        // All Math methods are assumed side-effect-free
+        return false;
+      }
+      // Other built-in methods
       if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
-                nameNode.getLastChild().getString())) {
+          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(propNode.getString())) {
         return false;
       }
 
       if (callNode.isOnlyModifiesThisCall()
-          && evaluatesToLocalValue(nameNode.getFirstChild())) {
+          && evaluatesToLocalValue(objNode)) {
         return false;
       }
 
       // Functions in the "Math" namespace have no side effects.
-
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
-        if (nameNode.getFirstChild().getType() == Token.REGEXP
-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+        if (objNode.getType() == Token.REGEXP
+            && REGEXP_METHODS.contains(propNode.getString())) {
           return false;
-        } else if (nameNode.getFirstChild().getType() == Token.STRING
+        } else if (objNode.getType() == Token.STRING
             && STRING_REGEXP_METHODS.contains(
-                nameNode.getLastChild().getString())) {
+                propNode.getString())) {
           Node param = nameNode.getNext();
           if (param != null &&
               (param.getType() == Token.STRING
                   || param.getType() == Token.REGEXP))
             return false;
         }
       }
     }
+  }
 
   return true;
 }
\ No newline at end of file
