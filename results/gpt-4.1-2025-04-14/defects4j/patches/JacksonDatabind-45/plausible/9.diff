diff --git a/tmp/211d91e8-f780-4b43-a59a-6ca8b98bdb19_buggy.java b/tmp/23eb7b58-051a-4693-a065-8b36f883f0e3_fixed.java
index 0dbce00..c5cf131 100644
--- a/tmp/211d91e8-f780-4b43-a59a-6ca8b98bdb19_buggy.java
+++ b/tmp/23eb7b58-051a-4693-a065-8b36f883f0e3_fixed.java
@@ -1,33 +1,41 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
     if (property != null) {
         JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());
         if (format != null) {
 
             // Simple case first: serialize as numeric timestamp?
             JsonFormat.Shape shape = format.getShape();
-                if (shape.isNumeric()) {
+            if (shape == JsonFormat.Shape.NUMBER || shape == JsonFormat.Shape.NUMBER_INT) {
                 return withFormat(Boolean.TRUE, null);
             }
 
-                if (format.getShape() == JsonFormat.Shape.STRING) {
+            // If shape is STRING, or if pattern/locale/timezone are specified, use textual/formatting
+            boolean useString = (shape == JsonFormat.Shape.STRING)
+                || format.hasPattern()
+                || format.hasLocale()
+                || format.hasTimeZone();
+
+            if (useString) {
                 TimeZone tz = format.getTimeZone();
                 final String pattern = format.hasPattern()
                                 ? format.getPattern()
                                 : StdDateFormat.DATE_FORMAT_STR_ISO8601;
                 final Locale loc = format.hasLocale()
                                 ? format.getLocale()
                                 : serializers.getLocale();
                 SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
                 if (tz == null) {
                     tz = serializers.getTimeZone();
                 }
                 df.setTimeZone(tz);
                 return withFormat(Boolean.FALSE, df);
             }
+            // If format specifies shape as default (ANY, null, or default), do not override global config
+            // Could fall through to returning 'this'
         }
     }
     return this;
 }
\ No newline at end of file
