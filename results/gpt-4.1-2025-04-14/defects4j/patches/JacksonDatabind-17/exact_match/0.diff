diff --git a/tmp/c7715501-92a6-4c83-8080-0b1f71b542ab_buggy.java b/tmp/3030344b-b725-450e-ac6f-4a97c39ae0f2_fixed.java
index 01967cc..da23e5c 100644
--- a/tmp/c7715501-92a6-4c83-8080-0b1f71b542ab_buggy.java
+++ b/tmp/3030344b-b725-450e-ac6f-4a97c39ae0f2_fixed.java
@@ -1,35 +1,36 @@
 /**
  * Method called to check if the default type handler should be
  * used for given type.
  * Note: "natural types" (String, Boolean, Integer, Double) will never
  * use typing; that is both due to them being concrete and final,
  * and since actual serializers and deserializers will also ignore any
  * attempts to enforce typing.
  */
 public boolean useForType(JavaType t)
 {
     switch (_appliesFor) {
     case NON_CONCRETE_AND_ARRAYS:
         while (t.isArrayType()) {
             t = t.getContentType();
         }
         // fall through
     case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
+        // Fix: should NOT match TreeNode types for default typing!
+        // (typing not needed or wanted for POJONode/ArrayNode/ObjectNode, etc)
+        // return (t.getRawClass() == Object.class) 
+        //        || (!t.isConcrete() || TreeNode.class.isAssignableFrom(t.getRawClass()));
         return (t.getRawClass() == Object.class)
                 || (!t.isConcrete()
-                                // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
-
+                    && !TreeNode.class.isAssignableFrom(t.getRawClass()));
     case NON_FINAL:
         while (t.isArrayType()) {
             t = t.getContentType();
         }
         // [Issue#88] Should not apply to JSON tree models:
         return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
     default:
         //case JAVA_LANG_OBJECT:
         //    return t.isJavaLangObject();
         return (t.getRawClass() == Object.class);
     }
 }
\ No newline at end of file
