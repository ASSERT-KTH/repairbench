diff --git a/tmp/2a80091f-c99c-466a-a17d-56a17f402674_buggy.java b/tmp/d53388ac-a6fc-48ee-8663-b168545fd9d7_fixed.java
index f650982..247dcfd 100644
--- a/tmp/2a80091f-c99c-466a-a17d-56a17f402674_buggy.java
+++ b/tmp/d53388ac-a6fc-48ee-8663-b168545fd9d7_fixed.java
@@ -1,42 +1,51 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+    // Unwrap EvalContext to node pointer
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
-
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
-        if (l instanceof Collection) {
+    // Convert Collection to Iterator for comparison if needed
+    if (l instanceof Collection && !(l instanceof List && ((List) l).size() == 1)) {
         l = ((Collection) l).iterator();
     }
-
-        if (r instanceof Collection) {
+    if (r instanceof Collection && !(r instanceof List && ((List) r).size() == 1)) {
         r = ((Collection) r).iterator();
     }
 
+    // If either is an Iterator, handle as a collection
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
+
+    // If either is a collection (including a List), handle similarly to Iterator
+    if (l instanceof Collection && !(r instanceof Collection)) {
+        return contains(((Collection) l).iterator(), r);
+    }
+    if (!(l instanceof Collection) && r instanceof Collection) {
+        return contains(((Collection) r).iterator(), l);
+    }
+    if (l instanceof Collection && r instanceof Collection) {
+        return findMatch(((Collection) l).iterator(), ((Collection) r).iterator());
+    }
+
     return equal(l, r);
 }
\ No newline at end of file
