diff --git a/tmp/47ef426f-ae0c-45c4-b590-4e28414ea46a_buggy.java b/tmp/02a2a8ec-cf7a-4e1d-a96e-def53dad5ebe_fixed.java
index f650982..bd70280 100644
--- a/tmp/47ef426f-ae0c-45c4-b590-4e28414ea46a_buggy.java
+++ b/tmp/02a2a8ec-cf7a-4e1d-a96e-def53dad5ebe_fixed.java
@@ -1,42 +1,57 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
 //    System.err.println("COMPARING: " +
 //        (l == null ? "null" : l.getClass().getName()) + " " +
 //        (r == null ? "null" : r.getClass().getName()));
 
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
+    // If either side is a Collection, treat as Iterator
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
+    // Fix: If one side is an Iterator, compare to item equality (contains)
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        Iterator li = (Iterator) l;
+        // FIX: if r is NOT an iterator, we must restart the iterator each call
+        List lList = new ArrayList<>();
+        li.forEachRemaining(lList::add);
+        return contains(lList.iterator(), r); // Always recreate iterator (so it's not exhausted)
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        Iterator ri = (Iterator) r;
+        List rList = new ArrayList<>();
+        ri.forEachRemaining(rList::add);
+        return contains(rList.iterator(), l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+        Iterator li = (Iterator) l;
+        Iterator ri = (Iterator) r;
+        List lList = new ArrayList<>();
+        List rList = new ArrayList<>();
+        li.forEachRemaining(lList::add);
+        ri.forEachRemaining(rList::add);
+        return findMatch(lList.iterator(), rList.iterator());
     }
     return equal(l, r);
 }
\ No newline at end of file
