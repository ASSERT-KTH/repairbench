diff --git a/tmp/926fa950-e2bd-43d1-b8ae-02f7754584e0_buggy.java b/tmp/d3559246-a135-4311-bb3a-d3a4e8b2bfa4_fixed.java
index f650982..d885990 100644
--- a/tmp/926fa950-e2bd-43d1-b8ae-02f7754584e0_buggy.java
+++ b/tmp/d3559246-a135-4311-bb3a-d3a4e8b2bfa4_fixed.java
@@ -1,42 +1,58 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
-        if (l instanceof Collection) {
+    if (l instanceof Collection && !(l instanceof List)) { // Only wrap if not List, so List is not turned to Iterator
         l = ((Collection) l).iterator();
     }
 
-        if (r instanceof Collection) {
+    if (r instanceof Collection && !(r instanceof List)) {
         r = ((Collection) r).iterator();
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+    if (l instanceof Iterator && !(r instanceof Iterator)) {
+        return contains((Iterator) cloneIterator((Iterator) l), r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        return contains((Iterator) cloneIterator((Iterator) r), l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+        return findMatch((Iterator) cloneIterator((Iterator) l), (Iterator) cloneIterator((Iterator) r));
+    }
+    // Special fix: if any side is a Collection (especially List), treat as iterator for equal-comparison
+    if (l instanceof Collection && !(r instanceof Collection)) {
+        return contains(((Collection) l).iterator(), r);
+    }
+    if (!(l instanceof Collection) && r instanceof Collection) {
+        return contains(((Collection) r).iterator(), l);
+    }
+    if (l instanceof Collection && r instanceof Collection) {
+        return findMatch(((Collection) l).iterator(), ((Collection) r).iterator());
     }
     return equal(l, r);
 }
+
+// Helper method to clone an iterator so that multiple usages don't interfere
+private Iterator<?> cloneIterator(Iterator<?> it) {
+    // Attempt to clone known iterators via constructing new ones from a List, else return original (possibly dangerous)
+    List<Object> items = new java.util.ArrayList<Object>();
+    while (it.hasNext()) {
+        items.add(it.next());
+    }
+    return items.iterator();
+}
\ No newline at end of file
