diff --git a/tmp/05715716-d49f-4ab8-8119-66d41374c33a_buggy.java b/tmp/58290e6d-7d4c-4047-ad00-452f9fa435ec_fixed.java
index f650982..5cf515c 100644
--- a/tmp/05715716-d49f-4ab8-8119-66d41374c33a_buggy.java
+++ b/tmp/58290e6d-7d4c-4047-ad00-452f9fa435ec_fixed.java
@@ -1,42 +1,56 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
-        if (l instanceof Collection) {
+    // Only convert to iterator if the collection is NOT a String (which is Iterable in Java)
+    if (l instanceof Collection && !(l instanceof String)) {
         l = ((Collection) l).iterator();
     }
 
-        if (r instanceof Collection) {
+    if (r instanceof Collection && !(r instanceof String)) {
         r = ((Collection) r).iterator();
     }
 
+    // Fix: When only one side is an Iterator, iterate through its elements and compare to the other side.
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        Iterator lit = (Iterator) l;
+        // Find if r equals ANY element
+        while (lit.hasNext()) {
+            Object elem = lit.next();
+            if (equal(elem, r)) {
+                return true;
+            }
+        }
+        return false;
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        Iterator rit = (Iterator) r;
+        // Find if l equals ANY element
+        while (rit.hasNext()) {
+            Object elem = rit.next();
+            if (equal(l, elem)) {
+                return true;
+            }
+        }
+        return false;
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
     return equal(l, r);
 }
\ No newline at end of file
