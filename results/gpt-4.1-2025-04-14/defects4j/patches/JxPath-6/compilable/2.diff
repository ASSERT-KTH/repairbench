diff --git a/tmp/dc07577c-559e-4425-a1a6-3c4b580f05ce_buggy.java b/tmp/559900c3-2456-4985-88c7-b6213c8c82cc_fixed.java
index f650982..d58a95d 100644
--- a/tmp/dc07577c-559e-4425-a1a6-3c4b580f05ce_buggy.java
+++ b/tmp/559900c3-2456-4985-88c7-b6213c8c82cc_fixed.java
@@ -1,42 +1,52 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
+        // Only convert to iterator if this is a node set or similar,
+        // do NOT convert simple variable collections to iterators because
+        // they represent atomic values, not sets
+        // However, in the current behavior, "$d" is a variable set to ["a", "b"].
+        // For variable comparisons, we want to check if the right value is contained in left collection.
+
+        // If one is a Collection, and the other is not, test membership
+        if (l instanceof Collection && !(r instanceof Collection) && !(r instanceof Iterator)) {
+            return contains(((Collection) l).iterator(), r);
+        }
+        if (r instanceof Collection && !(l instanceof Collection) && !(l instanceof Iterator)) {
+            return contains(((Collection) r).iterator(), l);
+        }
+
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
             return contains((Iterator) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
         return equal(l, r);
     }
\ No newline at end of file
