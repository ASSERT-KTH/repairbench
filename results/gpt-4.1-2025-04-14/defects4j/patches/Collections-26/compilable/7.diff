diff --git a/tmp/184c040b-03df-44b1-ba74-d196312ded81_buggy.java b/tmp/9e839c58-bcc9-42ef-8541-7a5679ce5c0a_fixed.java
index a667cbe..0389946 100644
--- a/tmp/184c040b-03df-44b1-ba74-d196312ded81_buggy.java
+++ b/tmp/9e839c58-bcc9-42ef-8541-7a5679ce5c0a_fixed.java
@@ -1,10 +1,38 @@
     /**
      * Recalculate the hash code after deserialization. The hash code of some
      * keys might have change (hash codes based on the system hash code are
      * only stable for the same process).
      * @return the instance with recalculated hash code
      */
     private Object readResolve() {
-        calculateHashCode(keys);
+        calculateHashCode(this.keys);
+        if (getClass() != MultiKey.class) {
+            // For subclasses, super.readResolve() is not called automatically,
+            // so recalculate hash code on subclass fields as well
+            try {
+                java.lang.reflect.Field hashCodeField = null;
+                Class<?> clazz = getClass();
+                while (clazz != null) {
+                    try {
+                        hashCodeField = clazz.getDeclaredField("hashCode");
+                        hashCodeField.setAccessible(true);
+                        break;
+                    } catch (NoSuchFieldException e) {
+                        clazz = clazz.getSuperclass();
+                    }
+                }
+                if (hashCodeField != null) {
+                    int hash = 0;
+                    for (final Object key : this.keys) {
+                        if (key != null) {
+                            hash ^= key.hashCode();
+                        }
+                    }
+                    hashCodeField.setInt(this, hash);
+                }
+            } catch (Exception ignore) {
+                // ignore any reflection errors
+            }
+        }
         return this;
     }
\ No newline at end of file
