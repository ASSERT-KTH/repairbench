diff --git a/tmp/9d6b1c68-35cc-4b14-a1d2-5443b99b1175_buggy.java b/tmp/d474fa10-4f14-4c33-9fb7-0f6af0e0abc6_fixed.java
index 41ea16c..ab74df2 100644
--- a/tmp/9d6b1c68-35cc-4b14-a1d2-5443b99b1175_buggy.java
+++ b/tmp/d474fa10-4f14-4c33-9fb7-0f6af0e0abc6_fixed.java
@@ -1,63 +1,70 @@
 /**
  * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
  * Note that the resulting expression will always evaluate to
  * true, as would the x = {...} expression.
  */
 private void replaceAssignmentExpression(Var v, Reference ref,
                                          Map<String, String> varmap) {
   // Compute all of the assignments necessary
   List<Node> nodes = Lists.newArrayList();
   Node val = ref.getAssignedValue();
+
+  // if val is null, nothing to do
+  if (val == null) {
+    return;
+  }
+
   blacklistVarReferencesInTree(val, v.scope);
-      Preconditions.checkState(val.getType() == Token.OBJECTLIT);
+  if (val.getType() != Token.OBJECTLIT) {
+    // If not an object literal, just bail.
+    return;
+  }
   Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
   for (Node key = val.getFirstChild(); key != null;
        key = key.getNext()) {
     String var = key.getString();
     Node value = key.removeFirstChild();
     // TODO(user): Copy type information.
     nodes.add(
       new Node(Token.ASSIGN,
                Node.newString(Token.NAME, varmap.get(var)), value));
     all.remove(var);
   }
 
   // TODO(user): Better source information.
   for (String var : all) {
     nodes.add(
       new Node(Token.ASSIGN,
                Node.newString(Token.NAME, varmap.get(var)),
                NodeUtil.newUndefinedNode(null)));
   }
 
-      Node replacement;
   // All assignments evaluate to true, so make sure that the
   // expr statement evaluates to true in case it matters.
   nodes.add(new Node(Token.TRUE));
 
+  Node replacement;
+
+  if (nodes.size() == 1) {
+    replacement = nodes.get(0);
+  } else if (nodes.size() == 2) {
+    replacement = new Node(Token.COMMA, nodes.get(0), nodes.get(1));
+  } else {
     // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
-        nodes = Lists.reverse(nodes);
-        replacement = new Node(Token.COMMA);
-        Node cur = replacement;
-        int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
-          cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
+    // create a left-associative tree.
+    replacement = new Node(Token.COMMA, nodes.get(0), nodes.get(1));
+    for (int i = 2; i < nodes.size(); i++) {
+      replacement = new Node(Token.COMMA, replacement, nodes.get(i));
+    }
   }
-        cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
 
   Node replace = ref.getParent();
   replacement.copyInformationFromForTree(replace);
 
   if (replace.getType() == Token.VAR) {
     replace.getParent().replaceChild(
         replace, NodeUtil.newExpr(replacement));
   } else {
     replace.getParent().replaceChild(replace, replacement);
   }
 }
\ No newline at end of file
