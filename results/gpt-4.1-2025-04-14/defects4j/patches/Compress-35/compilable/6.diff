diff --git a/tmp/4667b56f-6b68-48d8-9699-e2f9fa861ab9_buggy.java b/tmp/96c6e794-0c6a-4f06-b1c6-39dc6ffdef64_fixed.java
index 9d69396..4856c2f 100644
--- a/tmp/4667b56f-6b68-48d8-9699-e2f9fa861ab9_buggy.java
+++ b/tmp/96c6e794-0c6a-4f06-b1c6-39dc6ffdef64_fixed.java
@@ -1,46 +1,37 @@
-    /**
-     * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
-     * <blockquote>
-     * The checksum is calculated by taking the sum of the unsigned byte values
-     * of the header block with the eight checksum bytes taken to be ascii
-     * spaces (decimal value 32). It is stored as a six digit octal number with
-     * leading zeroes followed by a NUL and then a space. Various
-     * implementations do not adhere to this format. For better compatibility,
-     * ignore leading and trailing whitespace, and get the first six digits. In
-     * addition, some historic tar implementations treated bytes as signed.
-     * Implementations typically calculate the checksum both ways, and treat it
-     * as good if either the signed or unsigned sum matches the included
-     * checksum.
-     * </blockquote>
-     * <p>
-     * The return value of this method should be treated as a best-effort
-     * heuristic rather than an absolute and final truth. The checksum
-     * verification logic may well evolve over time as more special cases
-     * are encountered.
-     *
-     * @param header tar header
-     * @return whether the checksum is reasonably good
-     * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
-     * @since 1.5
-     */
 public static boolean verifyCheckSum(byte[] header) {
     long storedSum = 0;
     long unsignedSum = 0;
     long signedSum = 0;
 
     int digits = 0;
+    boolean foundDigit = false;
+
+    // Parse stored checksum according to octal digits in header
+    for (int i = CHKSUM_OFFSET; i < CHKSUM_OFFSET + CHKSUMLEN; i++) {
+        byte b = header[i];
+        if (digits < 6 && b >= '0' && b <= '7') {
+            storedSum = storedSum * 8 + (b - '0');
+            digits++;
+            foundDigit = true;
+        } else if (digits > 0) {
+            // stop at first non-digit after digits started
+            break;
+        }
+    }
+
+    // Treated as a "best effort", so if no digits found, return false
+    if (!foundDigit) {
+        return false;
+    }
+
+    // Compute checksums: set chksum field bytes to space (ASCII 32)
     for (int i = 0; i < header.length; i++) {
         byte b = header[i];
         if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
-                } else if (digits > 0) {
-                    digits = 6;
-                }
-                b = ' ';
+            b = (byte) ' ';
         }
         unsignedSum += 0xff & b;
         signedSum += b;
     }
     return storedSum == unsignedSum || storedSum == signedSum;
 }
\ No newline at end of file
