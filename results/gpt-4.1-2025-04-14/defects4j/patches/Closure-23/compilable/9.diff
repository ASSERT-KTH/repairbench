diff --git a/tmp/c23fcc40-4360-4ef0-bdca-0b4ff7e4aab0_buggy.java b/tmp/3952429f-e4f0-4a69-abf2-0e07a2094c6e_fixed.java
index cfdcd9c..6f5579a 100644
--- a/tmp/c23fcc40-4360-4ef0-bdca-0b4ff7e4aab0_buggy.java
+++ b/tmp/3952429f-e4f0-4a69-abf2-0e07a2094c6e_fixed.java
@@ -1,51 +1,89 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node current = left.getFirstChild();
     Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
+    int i = 0;
 
+    // Correct logic: find the i-th non-empty initializer.
+    while (current != null) {
+      if (!current.isEmpty()) {
+        if (i == intIndex) {
+          elem = current;
+          break;
+        }
+        i++;
+      } else {
+        if (i == intIndex) {
+          elem = current;
+          break;
+        }
+        i++;
+      }
       current = current.getNext();
     }
 
+    // If the index is out of bounds (sparse array),
+    // count total number of slots in the array.
+    int totalCount = 0;
+    for (Node c = left.getFirstChild(); c != null; c = c.getNext()) {
+      totalCount++;
+    }
+    if (intIndex >= totalCount) {
+      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+      return n;
+    }
+
+    // If elem is null, it must be an empty slot (hole)
+    if (elem == null) {
+      // Find the empty slot at intIndex
+      Node cur = left.getFirstChild();
+      int idx = 0;
+      while (cur != null) {
+        if (idx == intIndex) {
+          elem = cur;
+          break;
+        }
+        cur = cur.getNext();
+        idx++;
+      }
       if (elem == null) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
       }
+    }
 
     if (elem.isEmpty()) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
-    // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
\ No newline at end of file
