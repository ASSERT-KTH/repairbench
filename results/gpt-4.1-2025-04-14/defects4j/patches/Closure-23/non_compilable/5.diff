diff --git a/tmp/50f31ba7-f3ef-47bc-883f-75527e51c44a_buggy.java b/tmp/1ee10af6-82b6-4035-9feb-676a0ad2b27a_fixed.java
index cfdcd9c..2d7b03e 100644
--- a/tmp/50f31ba7-f3ef-47bc-883f-75527e51c44a_buggy.java
+++ b/tmp/1ee10af6-82b6-4035-9feb-676a0ad2b27a_fixed.java
@@ -1,51 +1,70 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
         return n;
     }
 
     if (!right.isNumber()) {
         // Sometimes people like to use complex expressions to index into
         // arrays, or strings to index into array methods.
         return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
         error(INVALID_GETELEM_INDEX_ERROR, right);
         return n;
     }
 
     if (intIndex < 0) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
     Node current = left.getFirstChild();
+    int curIndex = 0;
     Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
+    // Traverse through the array literal, skipping empty slots
+    while (current != null) {
+        if (!current.isEmpty()) {
+            if (curIndex == intIndex) {
                 elem = current;
-
+                break;
+            }
+            curIndex++;
+        } else {
+            if (curIndex == intIndex) {
+                elem = current;
+                break;
+            }
+            curIndex++;
+        }
         current = current.getNext();
     }
 
+    // If we didn't reach the desired index, it's out of bounds
     if (elem == null) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
+    Node toReplace;
     if (elem.isEmpty()) {
-      elem = NodeUtil.newUndefinedNode(elem);
+        toReplace = NodeUtil.newUndefinedNode(elem);
+    } else if (NodeUtil.mayHaveSideEffects(elem, compiler)) {
+        // Don't fold if the element may have side-effects
+        return n;
     } else {
-      left.removeChild(elem);
+        // Remove the node from the array and use it
+        toReplace = elem.cloneTree();
     }
 
     // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+    parent.replaceChild(n, toReplace);
     reportCodeChange();
-    return elem;
+    return toReplace;
 }
\ No newline at end of file
