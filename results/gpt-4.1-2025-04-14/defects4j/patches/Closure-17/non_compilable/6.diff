diff --git a/tmp/68549679-6a0e-46e7-9e17-3b6f6dacfb22_buggy.java b/tmp/694e03e4-7431-4885-8b07-718e7af2c437_fixed.java
index eb9ce9f..b1a73dc 100644
--- a/tmp/68549679-6a0e-46e7-9e17-3b6f6dacfb22_buggy.java
+++ b/tmp/694e03e4-7431-4885-8b07-718e7af2c437_fixed.java
@@ -1,60 +1,75 @@
 /**
  * Look for a type declaration on a property assignment
  * (in an ASSIGN or an object literal key).
  *
  * @param info The doc info for this property.
  * @param lValue The l-value node.
  * @param rValue The node that {@code n} is being initialized to,
  *     or {@code null} if this is a stub declaration.
  */
 private JSType getDeclaredType(String sourceName, JSDocInfo info,
     Node lValue, @Nullable Node rValue) {
   if (info != null && info.hasType()) {
     return getDeclaredTypeInAnnotation(sourceName, lValue, info);
   } else if (rValue != null && rValue.isFunction() &&
       shouldUseFunctionLiteralType(
           JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
     return rValue.getJSType();
   } else if (info != null) {
     if (info.hasEnumParameterType()) {
       if (rValue != null && rValue.isObjectLit()) {
         return rValue.getJSType();
       } else {
         return createEnumTypeFromNodes(
             rValue, lValue.getQualifiedName(), info, lValue);
       }
     } else if (info.isConstructor() || info.isInterface()) {
       return createFunctionTypeFromNodes(
           rValue, lValue.getQualifiedName(), info, lValue);
     } else {
       // Check if this is constant, and if it has a known type.
       if (info.isConstant()) {
         JSType knownType = null;
         if (rValue != null) {
           if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
             // If rValue has a type-cast, we use the type in the type-cast.
             // If rValue's type was already computed during scope creation,
             // then we can safely use that.
-                return rValue.getJSType();
+            // If type was declared with @type on the rValue, do not use the JSType of rValue.
+            if (!rValue.isCast()) {
+              knownType = rValue.getJSType();
+              // If the assigned value is an object literal with a type-cast,
+              // we want to use that type-cast, not the structural type of the
+              // object literal.
+              if (knownType != null && rValue.isObjectLit() && rValue.getJSDocInfo() != null 
+                  && rValue.getJSDocInfo().hasType()) {
+                knownType = rValue.getJSDocInfo().getType().evaluate(null, null);
+              }
+            } else {
+              // If it IS a cast, use the type in the type-cast.
+              knownType = rValue.getJSType();
+            }
+            return knownType;
           } else if (rValue.isOr()) {
             // Check for a very specific JS idiom:
             // var x = x || TYPE;
             // This is used by Closure's base namespace for esoteric
             // reasons.
             Node firstClause = rValue.getFirstChild();
             Node secondClause = firstClause.getNext();
             boolean namesMatch = firstClause.isName()
                 && lValue.isName()
                 && firstClause.getString().equals(lValue.getString());
             if (namesMatch && secondClause.getJSType() != null
                 && !secondClause.getJSType().isUnknownType()) {
               return secondClause.getJSType();
             }
           }
         }
       }
     }
   }
 
+  // Only use a type annotation if present; do not infer a type from previous assignments.
   return getDeclaredTypeInAnnotation(sourceName, lValue, info);
 }
\ No newline at end of file
