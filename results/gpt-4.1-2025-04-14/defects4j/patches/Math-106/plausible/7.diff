diff --git a/tmp/0eea05b3-5767-4572-bbe4-ba14fe3f956f_buggy.java b/tmp/0ff3149c-f279-41c0-a559-d68f78383f6e_fixed.java
index 42c5923..0907fc5 100644
--- a/tmp/0eea05b3-5767-4572-bbe4-ba14fe3f956f_buggy.java
+++ b/tmp/0ff3149c-f279-41c0-a559-d68f78383f6e_fixed.java
@@ -1,89 +1,110 @@
-    /**
-     * Parses a string to produce a {@link Fraction} object.  This method
-     * expects the string to be formatted as a proper fraction.
-     * <p>
-     * Minus signs are only allowed in the whole number part - i.e.,
-     * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
-     * will result in a <code>ParseException</code>.
-     * 
-     * @param source the string to parse
-     * @param pos input/ouput parsing parameter.
-     * @return the parsed {@link Fraction} object.
-     */
 public Fraction parse(String source, ParsePosition pos) {
     // try to parse improper fraction
     Fraction ret = super.parse(source, pos);
     if (ret != null) {
         return ret;
     }
     
     int initialIndex = pos.getIndex();
 
     // parse whitespace
     parseAndIgnoreWhitespace(source, pos);
 
     // parse whole
     Number whole = getWholeFormat().parse(source, pos);
     if (whole == null) {
         // invalid integer number
         // set index back to initial, error index should already be set
         // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
 
+    // Check if whole contains a minus sign not at the beginning.
+    String sourceSubstrWhole = source.substring(initialIndex, pos.getIndex());
+    int firstDigitIdx = -1;
+    for (int i = 0; i < sourceSubstrWhole.length(); ++i) {
+        char ch = sourceSubstrWhole.charAt(i);
+        if (Character.isDigit(ch)) {
+            firstDigitIdx = i;
+            break;
+        }
+    }
+    if (firstDigitIdx > 0) {
+        // there is something before first digit, make sure only valid minus is at the start
+        if (sourceSubstrWhole.trim().charAt(0) != '-' && sourceSubstrWhole.substring(0, firstDigitIdx).contains("-")) {
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(initialIndex);
+            return null;
+        }
+    }
+
     // parse whitespace
     parseAndIgnoreWhitespace(source, pos);
     
     // parse numerator
+    int numStartIndex = pos.getIndex();
     Number num = getNumeratorFormat().parse(source, pos);
+    int numEndIndex = pos.getIndex();
     if (num == null) {
         // invalid integer number
         // set index back to initial, error index should already be set
         // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
-        
-            // minus signs should be leading, invalid expression
+    // Check for minus sign in the numerator
+    String numPart = source.substring(numStartIndex, numEndIndex).trim();
+    if (numPart.contains("-")) {
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(numStartIndex);
+        return null;
+    }
     
     // parse '/'
     int startIndex = pos.getIndex();
     char c = parseNextCharacter(source, pos);
     switch (c) {
     case 0 :
         // no '/'
         // return num as a fraction
         return new Fraction(num.intValue(), 1);
     case '/' :
         // found '/', continue parsing denominator
         break;
     default :
         // invalid '/'
         // set index back to initial, error index should be the last
         // character examined.
         pos.setIndex(initialIndex);
         pos.setErrorIndex(startIndex);
         return null;
     }
 
     // parse whitespace
     parseAndIgnoreWhitespace(source, pos);
 
     // parse denominator
+    int denStartIndex = pos.getIndex();
     Number den = getDenominatorFormat().parse(source, pos);
+    int denEndIndex = pos.getIndex();
     if (den == null) {
         // invalid integer number
         // set index back to initial, error index should already be set
         // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
-        
-            // minus signs must be leading, invalid
+    // Check for minus sign in the denominator
+    String denPart = source.substring(denStartIndex, denEndIndex).trim();
+    if (denPart.contains("-")) {
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(denStartIndex);
+        return null;
+    }
 
     int w = whole.intValue();
     int n = num.intValue();
     int d = den.intValue();
     return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
 }
\ No newline at end of file
