diff --git a/tmp/65cb4f89-3ebf-4f94-b59d-4cf06e51f5b6_buggy.java b/tmp/2b59e755-a76e-4c7c-b6f0-6d99e84833c2_fixed.java
index 42c5923..1ef358a 100644
--- a/tmp/65cb4f89-3ebf-4f94-b59d-4cf06e51f5b6_buggy.java
+++ b/tmp/2b59e755-a76e-4c7c-b6f0-6d99e84833c2_fixed.java
@@ -1,89 +1,95 @@
-    /**
-     * Parses a string to produce a {@link Fraction} object.  This method
-     * expects the string to be formatted as a proper fraction.
-     * <p>
-     * Minus signs are only allowed in the whole number part - i.e.,
-     * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
-     * will result in a <code>ParseException</code>.
-     * 
-     * @param source the string to parse
-     * @param pos input/ouput parsing parameter.
-     * @return the parsed {@link Fraction} object.
-     */
 public Fraction parse(String source, ParsePosition pos) {
     // try to parse improper fraction
     Fraction ret = super.parse(source, pos);
     if (ret != null) {
         return ret;
     }
     
     int initialIndex = pos.getIndex();
 
     // parse whitespace
     parseAndIgnoreWhitespace(source, pos);
 
     // parse whole
+    int wholeStart = pos.getIndex();
     Number whole = getWholeFormat().parse(source, pos);
     if (whole == null) {
         // invalid integer number
         // set index back to initial, error index should already be set
         // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
 
+    int w = whole.intValue();
+
     // parse whitespace
     parseAndIgnoreWhitespace(source, pos);
 
     // parse numerator
+    int numeratorStart = pos.getIndex();
     Number num = getNumeratorFormat().parse(source, pos);
     if (num == null) {
         // invalid integer number
         // set index back to initial, error index should already be set
         // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
 
-            // minus signs should be leading, invalid expression
+    int n = num.intValue();
+    // Check if numerator has a minus sign, which is invalid
+    String numStr = source.substring(numeratorStart, pos.getIndex()).trim();
+    if (numStr.startsWith("-")) {
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(numeratorStart);
+        return null;
+    }
 
     // parse '/'
     int startIndex = pos.getIndex();
     char c = parseNextCharacter(source, pos);
     switch (c) {
     case 0 :
         // no '/'
         // return num as a fraction
-            return new Fraction(num.intValue(), 1);
+        return new Fraction(n, 1);
     case '/' :
         // found '/', continue parsing denominator
         break;
     default :
         // invalid '/'
         // set index back to initial, error index should be the last
         // character examined.
         pos.setIndex(initialIndex);
         pos.setErrorIndex(startIndex);
         return null;
     }
 
     // parse whitespace
     parseAndIgnoreWhitespace(source, pos);
 
     // parse denominator
+    int denominatorStart = pos.getIndex();
     Number den = getDenominatorFormat().parse(source, pos);
     if (den == null) {
         // invalid integer number
         // set index back to initial, error index should already be set
         // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
 
-            // minus signs must be leading, invalid
-
-        int w = whole.intValue();
-        int n = num.intValue();
     int d = den.intValue();
+    // Check if denominator has a minus sign, which is invalid
+    String denStr = source.substring(denominatorStart, pos.getIndex()).trim();
+    if (denStr.startsWith("-")) {
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(denominatorStart);
+        return null;
+    }
+
+    // minus signs must be leading, invalid
+
     return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
 }
\ No newline at end of file
