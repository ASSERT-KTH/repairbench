diff --git a/tmp/38f62826-e854-40ca-8484-d8e1a5a95b52_buggy.java b/tmp/0588d1c7-a6b6-4a88-abee-7ba85d5c32be_fixed.java
index 5f96616..fd84a6f 100644
--- a/tmp/38f62826-e854-40ca-8484-d8e1a5a95b52_buggy.java
+++ b/tmp/0588d1c7-a6b6-4a88-abee-7ba85d5c32be_fixed.java
@@ -1,20 +1,20 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
+  // If the constraint is a union, try to match all alternates.
+  if (constraint.isUnionType()) {
+    for (JSType alt : constraint.toMaybeUnionType().getAlternates()) {
+      matchConstraint(alt);
+    }
+    return;
+  }
+
   // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
   }
 }
\ No newline at end of file
