diff --git a/tmp/8c4e17fb-e669-432d-8bb6-25e0476a9034_buggy.java b/tmp/0705781a-ffeb-4cc4-9df3-079409593fc4_fixed.java
index fecb896..c7a6c55 100644
--- a/tmp/8c4e17fb-e669-432d-8bb6-25e0476a9034_buggy.java
+++ b/tmp/0705781a-ffeb-4cc4-9df3-079409593fc4_fixed.java
@@ -1,34 +1,38 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
     public String chompBalanced(char open, char close) {
-        int start = -1;
-        int end = -1;
         int depth = 0;
+        int start = -1;
+        boolean inQuote = false;
+        char quoteChar = 0;
         char last = 0;
 
-        do {
-            if (isEmpty()) break;
+        while (!isEmpty()) {
             Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+            if (last == ESC) {
+                last = 0;
+                continue;
+            }
+            if (c == '\'' || c == '"') {
+                if (!inQuote) {
+                    inQuote = true;
+                    quoteChar = c;
+                } else if (quoteChar == c) {
+                    inQuote = false;
+                }
+            } else if (!inQuote) {
+                if (c == open) {
                     depth++;
-                    if (start == -1)
+                    if (start == -1) {
                         start = pos;
                     }
-                else if (c.equals(close))
+                } else if (c == close) {
                     depth--;
+                    if (depth == 0) {
+                        int end = pos - 1;
+                        return queue.substring(start, end);
+                    }
+                }
             }
-
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
             last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+        }
+        return "";
     }
\ No newline at end of file
