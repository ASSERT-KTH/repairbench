diff --git a/tmp/7a723f80-25bf-4209-93c2-006abde01bd6_buggy.java b/tmp/da01ac0d-e4cc-413b-bacc-cdf5ac7ccdb0_fixed.java
index fecb896..5e44d5f 100644
--- a/tmp/7a723f80-25bf-4209-93c2-006abde01bd6_buggy.java
+++ b/tmp/da01ac0d-e4cc-413b-bacc-cdf5ac7ccdb0_fixed.java
@@ -1,34 +1,42 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
-        char last = 0;
+    boolean inSingleQuote = false;
+    boolean inDoubleQuote = false;
+    boolean escaped = false;
+    int len = queue.length();
 
-        do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+    for (int i = pos; i < len; i++) {
+        char c = queue.charAt(i);
+
+        if (escaped) {
+            escaped = false;
+        } else if (c == '\\') {
+            escaped = true;
+        } else if (c == '\'' && !inDoubleQuote) {
+            inSingleQuote = !inSingleQuote;
+        } else if (c == '"' && !inSingleQuote) {
+            inDoubleQuote = !inDoubleQuote;
+        } else if (!inSingleQuote && !inDoubleQuote) {
+            if (c == open) {
+                if (depth == 0)
+                    start = i + 1;
                 depth++;
-                    if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+            } else if (c == close) {
                 depth--;
+                if (depth == 0) {
+                    end = i;
+                    pos = i + 1;
+                    break;
+                }
+            }
+        }
     }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+    // If we didn't find a balanced close, return empty
+    if (start != -1 && end != -1 && start < end)
+        return queue.substring(start, end);
+    else
+        return "";
 }
\ No newline at end of file
