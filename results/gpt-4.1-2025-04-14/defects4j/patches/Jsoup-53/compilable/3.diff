diff --git a/tmp/74289a5f-0ed0-4d09-97c0-fa72bc14b25d_buggy.java b/tmp/05d7a5c3-ee1d-4639-9e54-788aedfb9fdb_fixed.java
index fecb896..b6ea7e4 100644
--- a/tmp/74289a5f-0ed0-4d09-97c0-fa72bc14b25d_buggy.java
+++ b/tmp/05d7a5c3-ee1d-4639-9e54-788aedfb9fdb_fixed.java
@@ -1,34 +1,30 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
-        int end = -1;
     int depth = 0;
+    boolean inSingle = false, inDouble = false;
     char last = 0;
-
-        do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+    int length = queue.length();
+    for (int i = 0; pos < length; pos++) {
+        char c = queue.charAt(pos);
+        if (c == '\'' && last != '\\' && !inDouble)
+            inSingle = !inSingle;
+        else if (c == '"' && last != '\\' && !inSingle)
+            inDouble = !inDouble;
+        if (!inSingle && !inDouble) {
+            if (c == open) {
                 depth++;
                 if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+                    start = pos + 1;
+            } else if (c == close) {
                 depth--;
             }
-
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+        }
         last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+        if (depth == 0 && start != -1) {
+            String out = queue.substring(start, pos);
+            pos++; // move past the close
+            return out;
+        }
+    }
+    return "";
 }
\ No newline at end of file
