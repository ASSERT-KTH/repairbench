diff --git a/tmp/aeec7e08-9540-493e-acbe-d987310ab1e2_buggy.java b/tmp/0f3fda61-dd3e-4a9f-8cb0-7f33b51e833d_fixed.java
index fecb896..72e91eb 100644
--- a/tmp/aeec7e08-9540-493e-acbe-d987310ab1e2_buggy.java
+++ b/tmp/0f3fda61-dd3e-4a9f-8cb0-7f33b51e833d_fixed.java
@@ -1,34 +1,43 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
-        int end = -1;
     int depth = 0;
-        char last = 0;
+    boolean inSingleQuote = false;
+    boolean inDoubleQuote = false;
+    boolean escapeNext = false;
+    int length = queue.length();
+    int i = pos;
+    for (; i < length; i++) {
+        char c = queue.charAt(i);
 
-        do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        if (escapeNext) {
+            escapeNext = false;
+            continue;
+        }
+
+        if (c == '\\') {
+            escapeNext = true;
+            continue;
+        }
+
+        if (c == '\'' && !inDoubleQuote)
+            inSingleQuote = !inSingleQuote;
+        else if (c == '"' && !inSingleQuote)
+            inDoubleQuote = !inDoubleQuote;
+        else if (!inSingleQuote && !inDoubleQuote) {
+            if (c == open) {
+                if (depth == 0)
+                    start = i + 1;
                 depth++;
-                    if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+            } else if (c == close) {
                 depth--;
+                if (depth == 0) {
+                    // we've reached the end of balanced
+                    String out = queue.substring(start, i);
+                    pos = i + 1; // consume through close
+                    return out;
                 }
-
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+            }
+        }
+    }
+    return "";
 }
\ No newline at end of file
