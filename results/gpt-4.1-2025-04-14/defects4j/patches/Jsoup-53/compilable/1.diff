diff --git a/tmp/8d618791-bc01-4a87-bc4c-5dbdc8f2a3d8_buggy.java b/tmp/4de8747f-a40a-4aee-803d-00f871b4f495_fixed.java
index fecb896..917eaee 100644
--- a/tmp/8d618791-bc01-4a87-bc4c-5dbdc8f2a3d8_buggy.java
+++ b/tmp/4de8747f-a40a-4aee-803d-00f871b4f495_fixed.java
@@ -1,34 +1,33 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
+        boolean inSingleQuote = false;
+        boolean inDoubleQuote = false;
 
         do {
             if (isEmpty()) break;
             Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+            if (last == ESC) {
+                // Escaped: just skip, don't toggle quotes or brackets
+            } else if (c == '\'') {
+                inSingleQuote = !inSingleQuote && !inDoubleQuote;
+            } else if (c == '"') {
+                inDoubleQuote = !inDoubleQuote && !inSingleQuote;
+            } else if (!inSingleQuote && !inDoubleQuote) {
+                if (c == open) {
                     depth++;
                     if (start == -1)
                         start = pos;
-                }
-                else if (c.equals(close))
+                } else if (c == close) {
                     depth--;
                 }
-
+            }
             if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+                end = pos;
             last = c;
         } while (depth > 0);
+
         return (end >= 0) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
