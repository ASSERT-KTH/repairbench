diff --git a/tmp/65a80fde-36ac-433f-99b7-e9755c93aa2c_buggy.java b/tmp/4466a9ce-fd05-444b-ac48-771594821cbb_fixed.java
index fecb896..44e4b1d 100644
--- a/tmp/65a80fde-36ac-433f-99b7-e9755c93aa2c_buggy.java
+++ b/tmp/4466a9ce-fd05-444b-ac48-771594821cbb_fixed.java
@@ -1,34 +1,40 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
-        int end = -1;
     int depth = 0;
-        char last = 0;
+    boolean inQuote = false;
+    char quoteChar = 0;
+    boolean inEscape = false;
+    int lastChar = -1; // to check last char for edge case
 
-        do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
-                    depth++;
-                    if (start == -1)
+    for (int i = 0; !isEmpty(); i++) {
+        char c = consume();
+        if (start == -1 && c == open && !inQuote && !inEscape) {
             start = pos;
+            depth = 1;
+            continue;
         }
-                else if (c.equals(close))
+        if (start != -1) {
+            if (inEscape) {
+                inEscape = false;
+            } else if (c == '\\') {
+                inEscape = true;
+            } else if (inQuote) {
+                if (c == quoteChar) {
+                    inQuote = false;
+                }
+            } else if (c == '"' || c == '\'') {
+                inQuote = true;
+                quoteChar = c;
+            } else if (c == open) {
+                depth++;
+            } else if (c == close) {
                 depth--;
+                if (depth == 0) {
+                    return queue.substring(start, pos - 1); // exclude close
                 }
-
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+            }
+        }
+        lastChar = c;
+    }
+    return "";
 }
\ No newline at end of file
