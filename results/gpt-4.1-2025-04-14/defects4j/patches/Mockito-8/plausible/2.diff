diff --git a/tmp/f31b38a3-1dd4-4a37-9b81-43887493815c_buggy.java b/tmp/70abbe91-1b84-4c6b-bf85-3e8ad582739d_fixed.java
index 42b58d0..3638f2b 100644
--- a/tmp/f31b38a3-1dd4-4a37-9b81-43887493815c_buggy.java
+++ b/tmp/70abbe91-1b84-4c6b-bf85-3e8ad582739d_fixed.java
@@ -1,19 +1,31 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
     TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+
+    // Protect against infinite loops and erroneous usage by not recursing for self-referencing types
+    if (typeParameters.length != actualTypeArguments.length) {
+        // Should not happen in well-formed generics, but guard just in case.
+        return;
+    }
+
     for (int i = 0; i < actualTypeArguments.length; i++) {
         TypeVariable typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
+        // Prevent mapping a type variable to itself (which can cause StackOverflowError)
+        if (typeParameter.equals(actualTypeArgument)) {
+            continue;
+        }
+
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
         // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
