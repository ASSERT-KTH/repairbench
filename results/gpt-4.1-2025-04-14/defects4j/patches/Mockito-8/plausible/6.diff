diff --git a/tmp/13b88443-8fc4-417a-ae81-56127e668e41_buggy.java b/tmp/3baae7a9-827e-4782-928b-00e4669ef850_fixed.java
index 42b58d0..4ce584e 100644
--- a/tmp/13b88443-8fc4-417a-ae81-56127e668e41_buggy.java
+++ b/tmp/3baae7a9-827e-4782-928b-00e4669ef850_fixed.java
@@ -1,19 +1,28 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    Type rawType = parameterizedType.getRawType();
+    if (!(rawType instanceof Class)) {
+        return;
+    }
+    TypeVariable[] typeParameters = ((Class<?>) rawType).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
-        for (int i = 0; i < actualTypeArguments.length; i++) {
+    int limit = Math.min(typeParameters.length, actualTypeArguments.length);
+    for (int i = 0; i < limit; i++) {
         TypeVariable typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
+        // Prevent self-referencing type variable to avoid infinite recursion
+        if (actualTypeArgument.equals(typeParameter)) {
+            continue;
+        }
+
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
