diff --git a/tmp/91720fce-b1e6-4911-b2c6-187c93efcc57_buggy.java b/tmp/b60ec861-8b10-4947-96b2-f6262d0443d6_fixed.java
index 99141e0..a1fb4f9 100644
--- a/tmp/91720fce-b1e6-4911-b2c6-187c93efcc57_buggy.java
+++ b/tmp/b60ec861-8b10-4947-96b2-f6262d0443d6_fixed.java
@@ -1,33 +1,39 @@
 static String unescape(String string) {
     if (!string.contains("&"))
         return string;
 
     Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+    StringBuffer accum = new StringBuffer(string.length());
 
     while (m.find()) {
         int charval = -1;
         String num = m.group(3);
         if (num != null) {
             try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
+                int base = m.group(2) != null ? 16 : 10;
                 charval = Integer.valueOf(num, base);
             } catch (NumberFormatException e) {
             } // skip
         } else {
             String name = m.group(1);
             if (full.containsKey(name))
                 charval = full.get(name);
         }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+        // FIXED: Only replace when charval is a valid Unicode code point (>= 0, <= 0x10FFFF).
+        // Used Matcher.quoteReplacement to avoid IllegalArgumentException for special chars.
+        if (charval != -1 && charval <= 0x10FFFF) {
+            String c;
+            if (charval > 0xFFFF) { // handle supplementary characters
+                c = new String(Character.toChars(charval));
             } else {
-                m.appendReplacement(accum, m.group(0));
+                c = Character.toString((char) charval);
+            }
+            m.appendReplacement(accum, Matcher.quoteReplacement(c));
+        } else {
+            m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));
         }
     }
     m.appendTail(accum);
     return accum.toString();
 }
\ No newline at end of file
