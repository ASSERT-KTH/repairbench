diff --git a/tmp/b2b8ae6d-7bc8-4249-a289-551feff38966_buggy.java b/tmp/5e26af8d-8b96-4d80-8399-6135c0e3d3c7_fixed.java
index c4b260c..a768ebf 100644
--- a/tmp/b2b8ae6d-7bc8-4249-a289-551feff38966_buggy.java
+++ b/tmp/5e26af8d-8b96-4d80-8399-6135c0e3d3c7_fixed.java
@@ -1,51 +1,57 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        // 1. Decode as defaultCharset (likely "UTF-8")
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // 2. Remove leading BOM, if present
+        if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+            docData = docData.substring(1);
+        }
+        // 3. Parse document
         doc = parser.parseInput(docData, baseUri);
+        // 4. Check for meta charset
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+            String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
             } else {
                 foundCharset = meta.attr("charset");
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                // Remove BOM again in re-decoded content, if present
+                if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+                    docData = docData.substring(1);
+                }
+                doc = null; // force reparse
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // Remove BOM if present
+        if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
             docData = docData.substring(1);
-            charsetName = defaultCharset;
         }
+    }
+    // At this point, docData has BOM removed if present, and is decoded fully
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
     }
     return doc;
 }
\ No newline at end of file
