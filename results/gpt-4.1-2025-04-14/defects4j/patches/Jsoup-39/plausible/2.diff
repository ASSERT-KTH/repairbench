diff --git a/tmp/8e662d08-6178-4c24-87e4-9c12c556f2a1_buggy.java b/tmp/40f2dff1-519a-4f3c-bdaf-23ce58d8fbbf_fixed.java
index c4b260c..b7683a1 100644
--- a/tmp/8e662d08-6178-4c24-87e4-9c12c556f2a1_buggy.java
+++ b/tmp/40f2dff1-519a-4f3c-bdaf-23ce58d8fbbf_fixed.java
@@ -1,51 +1,62 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    boolean charsetBom = false;
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // Check BOM early -- if present, skip for parsing (avoids failing to find meta due to BOM)
+        if (docData.length() > 0 && docData.charAt(0) == 0xFEFF) {
+            docData = docData.substring(1);
+            charsetBom = true;
+        }
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+            String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
             } else {
                 foundCharset = meta.attr("charset");
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
+                // Again check BOM for new charset
+                if (docData.length() > 0 && docData.charAt(0) == 0xFEFF) {
+                    docData = docData.substring(1);
+                    charsetBom = true;
+                }
                 doc = null;
             }
         }
+        // else: keep doc and possibly charsetBom already set
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
+        if (docData.length() > 0 && docData.charAt(0) == 0xFEFF) {
+            docData = docData.substring(1);
+            charsetBom = true;
+        }
     }
     // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-        }
+    // (The BOM has already been handled above per decode.)
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
     }
     return doc;
 }
\ No newline at end of file
