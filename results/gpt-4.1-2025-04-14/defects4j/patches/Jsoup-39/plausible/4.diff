diff --git a/tmp/f5e7bb32-41a9-486d-b0b8-b1c50bd1c24f_buggy.java b/tmp/9c3f1f12-d55d-4079-b5b1-720605f783eb_fixed.java
index c4b260c..7a1139c 100644
--- a/tmp/f5e7bb32-41a9-486d-b0b8-b1c50bd1c24f_buggy.java
+++ b/tmp/9c3f1f12-d55d-4079-b5b1-720605f783eb_fixed.java
@@ -1,51 +1,73 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    boolean hasBOM = false;
+    // always detect BOM first (for UTF-8), even if charsetName is provided or not
+    if (byteData.remaining() >= 3) {
+        byte b1 = byteData.get(byteData.position());
+        byte b2 = byteData.get(byteData.position() + 1);
+        byte b3 = byteData.get(byteData.position() + 2);
+        if ((b1 == (byte)0xEF) && (b2 == (byte)0xBB) && (b3 == (byte)0xBF)) {
+            hasBOM = true;
+            charsetName = defaultCharset; // UTF-8 BOM, force use UTF-8
+        }
+    }
+
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // Remove BOM after decoding
+        if (docData.length() > 0 && docData.charAt(0) == 65279) {
+            docData = docData.substring(1);
+        }
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+            String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
-                } else {
+            } else if (meta.hasAttr("charset")) {
                 foundCharset = meta.attr("charset");
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
+                // Remove BOM after decoding
+                if (docData.length() > 0 && docData.charAt(0) == 65279) {
+                    docData = docData.substring(1);
+                }
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
+        // Remove BOM after decoding
         if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
             docData = docData.substring(1);
-            charsetName = defaultCharset;
         }
+    }
+    // UTF-8 BOM indicator. This is now handled after decoding above; this block now redundant.
+    // if (docData.length() > 0 && docData.charAt(0) == 65279) {
+    //     byteData.rewind();
+    //     docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    //     docData = docData.substring(1);
+    //     charsetName = defaultCharset;
+    // }
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
     }
     return doc;
 }
\ No newline at end of file
