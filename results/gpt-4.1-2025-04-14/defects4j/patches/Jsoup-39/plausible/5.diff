diff --git a/tmp/ad2ab9c0-9f07-4bfd-9094-e4722e4c91c3_buggy.java b/tmp/662a5ef2-c60d-4465-9b9f-1b80651a9b7b_fixed.java
index c4b260c..68697f1 100644
--- a/tmp/ad2ab9c0-9f07-4bfd-9094-e4722e4c91c3_buggy.java
+++ b/tmp/662a5ef2-c60d-4465-9b9f-1b80651a9b7b_fixed.java
@@ -1,51 +1,65 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    boolean hasBom = false;
+    final char BOM_CHAR = '\uFEFF';
+
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        // decode as UTF-8 for meta sniffing
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // check BOM *before* parsing, strip if present
+        if (docData.length() > 0 && docData.charAt(0) == BOM_CHAR) {
+            hasBom = true;
+            docData = docData.substring(1);
+        }
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+            String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
             } else {
                 foundCharset = meta.attr("charset");
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 &&
+                !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
+                if (docData.length() > 0 && docData.charAt(0) == BOM_CHAR) {
+                    hasBom = true;
+                    docData = docData.substring(1);
+                }
                 doc = null;
             }
+        } else {
+            charsetName = defaultCharset;
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        if (docData.length() > 0 && docData.charAt(0) == BOM_CHAR) {
+            hasBom = true;
             docData = docData.substring(1);
-            charsetName = defaultCharset;
         }
+    }
+
+    // Output settings BOM/charset precedence: forcibly remove BOM if present.
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
     }
     return doc;
 }
\ No newline at end of file
