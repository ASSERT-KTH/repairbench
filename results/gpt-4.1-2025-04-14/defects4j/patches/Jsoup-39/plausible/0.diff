diff --git a/tmp/d202bf91-8c7d-46c9-985a-f9ead4afaa88_buggy.java b/tmp/4dceece3-5927-431d-be96-5c82b6f60a55_fixed.java
index c4b260c..a76f213 100644
--- a/tmp/d202bf91-8c7d-46c9-985a-f9ead4afaa88_buggy.java
+++ b/tmp/4dceece3-5927-431d-be96-5c82b6f60a55_fixed.java
@@ -1,51 +1,91 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    boolean hasBom = false;
+    // Pre-check for BOM if charset undetermined
+    if (charsetName == null && byteData.remaining() >= 3) {
+        byteData.mark();
+        byte b0 = byteData.get();
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        if ((b0 & 0xFF) == 0xEF && (b1 & 0xFF) == 0xBB && (b2 & 0xFF) == 0xBF) {
+            // UTF-8 BOM found; skip
+            hasBom = true;
+        } else {
+            byteData.reset();
+        }
+    }
+
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        // Don't directly decode with BOM included, if present
+        if (hasBom) {
+            // BOM removed by advancing position above
+        } else {
+            byteData.rewind();
+        }
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+            String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
-                } else {
+            } else if (meta.hasAttr("charset")) {
                 foundCharset = meta.attr("charset");
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
+                // If BOM was present, skip it again
+                if (charsetName.equalsIgnoreCase("UTF-8") && byteData.remaining() >= 3) {
+                    byteData.mark();
+                    byte b0 = byteData.get();
+                    byte b1 = byteData.get();
+                    byte b2 = byteData.get();
+                    if (!((b0 & 0xFF) == 0xEF && (b1 & 0xFF) == 0xBB && (b2 & 0xFF) == 0xBF)) {
+                        byteData.reset();
+                    }
+                }
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        byteData.rewind();
+        // If decoding via UTF-8 and BOM present, skip it
+        if (charsetName.equalsIgnoreCase("UTF-8") && byteData.remaining() >= 3) {
+            byteData.mark();
+            byte b0 = byteData.get();
+            byte b1 = byteData.get();
+            byte b2 = byteData.get();
+            if (!((b0 & 0xFF) == 0xEF && (b1 & 0xFF) == 0xBB && (b2 & 0xFF) == 0xBF)) {
+                byteData.reset();
+            }
+        }
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    // Remove UTF-8 BOM indicator from string if still present after decoding
+    if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
         docData = docData.substring(1);
-            charsetName = defaultCharset;
+        // charsetName is already set
     }
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
     }
     return doc;
 }
\ No newline at end of file
