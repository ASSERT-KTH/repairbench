diff --git a/tmp/b7b266c1-446f-4c16-82a5-87d931ba93e9_buggy.java b/tmp/d574803a-28ba-4373-b8e9-1440bc1ed201_fixed.java
index c4b260c..0283e56 100644
--- a/tmp/b7b266c1-446f-4c16-82a5-87d931ba93e9_buggy.java
+++ b/tmp/d574803a-28ba-4373-b8e9-1440bc1ed201_fixed.java
@@ -1,51 +1,59 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    boolean hasBOM = false;
+
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
+        if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+            hasBOM = true;
+            docData = docData.substring(1); // strip BOM
+        }
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+            String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
             } else {
                 foundCharset = meta.attr("charset");
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
+                if (!foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                    if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+                        docData = docData.substring(1); // strip BOM
+                    }
+                    doc = null; // will re-parse later
+                }
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
+        if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+            docData = docData.substring(1); // strip BOM
         }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
     }
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
     }
     return doc;
 }
\ No newline at end of file
