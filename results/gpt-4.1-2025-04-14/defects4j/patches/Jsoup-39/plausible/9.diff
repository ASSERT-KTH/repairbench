diff --git a/tmp/4edb9708-4065-423f-bb89-197b34feeb66_buggy.java b/tmp/ad0cf99d-a342-41f9-ae10-2fa5da6be199_fixed.java
index c4b260c..efa497c 100644
--- a/tmp/4edb9708-4065-423f-bb89-197b34feeb66_buggy.java
+++ b/tmp/ad0cf99d-a342-41f9-ae10-2fa5da6be199_fixed.java
@@ -1,51 +1,66 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    boolean bomHandled = false;
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
+        if (docData.length() > 0 && docData.charAt(0) == 65279) {
+            byteData.rewind();
+            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            docData = docData.substring(1);
+            bomHandled = true;
+            charsetName = defaultCharset;
+        }
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+            String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
-                } else {
+            } else if (meta.hasAttr("charset")) {
                 foundCharset = meta.attr("charset");
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
+                if (!foundCharset.equalsIgnoreCase(defaultCharset) && !(bomHandled && foundCharset.equalsIgnoreCase(charsetName))) {
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                    // handle BOM again after meta-determined charset
+                    if (docData.length() > 0 && docData.charAt(0) == 65279) {
+                        docData = docData.substring(1);
+                        // set charsetName to defaultCharset as BOM takes precedence
+                        charsetName = defaultCharset;
+                    }
+                    doc = parser.parseInput(docData, baseUri);
+                }
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
+        // Handle BOM for explicit charsetName as well
         if (docData.length() > 0 && docData.charAt(0) == 65279) {
             byteData.rewind();
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             docData = docData.substring(1);
             charsetName = defaultCharset;
         }
-        if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
+    }
+    if (doc != null && charsetName != null) {
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
