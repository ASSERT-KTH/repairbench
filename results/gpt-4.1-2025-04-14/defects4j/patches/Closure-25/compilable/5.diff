diff --git a/tmp/3dfd86aa-6452-495c-a113-3263de4dfdd6_buggy.java b/tmp/103ac30b-2dde-42bb-a682-219cabd57aa4_fixed.java
index b98f0a7..d9ff505 100644
--- a/tmp/3dfd86aa-6452-495c-a113-3263de4dfdd6_buggy.java
+++ b/tmp/103ac30b-2dde-42bb-a682-219cabd57aa4_fixed.java
@@ -1,29 +1,61 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
+  FunctionType ct = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+      ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
+
+  // Perform backwards inference from the constructor parameter types to the arguments
+  if (ct != null && ct.isConstructor()) {
+    Node arg = constructor.getNext();
+    int i = 0;
+    while (arg != null) {
+      JSType paramType = null;
+      if (ct.getParameterType() != null) {
+        Node paramNode = ct.getParametersNode().getFirstChild();
+        int j = 0;
+        while (paramNode != null && j < i) {
+          paramNode = paramNode.getNext();
+          j++;
+        }
+        if (paramNode != null) {
+          paramType = paramNode.getJSType();
+        } else {
+          paramType = null;
+        }
+      }
+      if (paramType != null && !paramType.isUnknownType()) {
+        // Set expected type for better backwards inference
+        arg.setJSType(paramType);
+      }
+      scope = traverse(arg, scope);
+      arg = arg.getNext();
+      i++;
+    }
+  } else {
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
+  }
+
   return scope;
 }
\ No newline at end of file
