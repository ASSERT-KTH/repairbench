diff --git a/tmp/d88826de-f5b2-46bc-9dcc-54666734025e_buggy.java b/tmp/9e1ffbbe-d7ba-48bb-a0ef-f4cade671b80_fixed.java
index b98f0a7..2646e04 100644
--- a/tmp/d88826de-f5b2-46bc-9dcc-54666734025e_buggy.java
+++ b/tmp/9e1ffbbe-d7ba-48bb-a0ef-f4cade671b80_fixed.java
@@ -1,29 +1,47 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+    Node firstArg = constructor.getNext();
+    FunctionType ct = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
+
+    // Backward propagation: propagate formal parameter type backwards to actual arguments in 'new'.
+    if (ct != null && firstArg != null) {
+      Node argNode = firstArg;
+      ImmutableList<JSType> paramTypes = ct.getParameters();
+      int paramIndex = 0;
+      while (argNode != null && paramIndex < paramTypes.size()) {
+        // Get the formal parameter type.
+        JSType paramType = paramTypes.get(paramIndex);
+        // Use backwards inference to restrict the argument node type.
+        backwardsInferType(argNode, scope, paramType, paramType);
+        argNode = argNode.getNext();
+        paramIndex++;
+      }
+    }
+
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
