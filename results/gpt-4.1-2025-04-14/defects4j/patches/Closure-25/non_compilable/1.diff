diff --git a/tmp/ec2812b9-5540-4652-a13f-1d6719b084d8_buggy.java b/tmp/20977a5a-ee77-4c90-aee9-1a3347c71bf2_fixed.java
index b98f0a7..2d9b043 100644
--- a/tmp/ec2812b9-5540-4652-a13f-1d6719b084d8_buggy.java
+++ b/tmp/20977a5a-ee77-4c90-aee9-1a3347c71bf2_fixed.java
@@ -1,29 +1,41 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+    FunctionType ct = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+    // Enable backward inference for arguments to constructor
+    Node callTarget = constructor;
+    int i = 0;
+    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), i++) {
+      JSType paramType = null;
+      if (ct != null) {
+        // Use getParameterType, which applies the function parameter logic
+        paramType = ct.getParameterType(i);
+      }
       scope = traverse(arg, scope);
+      if (paramType != null) {
+        updateScopeForTypeInference(arg, paramType, scope);
+      }
     }
     return scope;
   }
\ No newline at end of file
