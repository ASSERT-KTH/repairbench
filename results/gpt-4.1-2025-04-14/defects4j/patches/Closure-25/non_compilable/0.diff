diff --git a/tmp/d1544577-c93e-44f0-a6f7-440e2cb4846a_buggy.java b/tmp/c1340b0a-623b-4e50-8652-0127c89d9e5c_fixed.java
index b98f0a7..bf99533 100644
--- a/tmp/d1544577-c93e-44f0-a6f7-440e2cb4846a_buggy.java
+++ b/tmp/c1340b0a-623b-4e50-8652-0127c89d9e5c_fixed.java
@@ -1,29 +1,49 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
   Node constructor = n.getFirstChild();
+  // Get the arguments *before* traversing children
+  List<Node> arguments = new ArrayList<>();
+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+    arguments.add(arg);
+  }
+
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
+
+        // Backwards type inference: propagate constructor argument types
+        // from the FunctionType's parameter types to the provided arguments
+        // (if present and type information is known)
+        Node paramNode = ct.getParameters() == null ? null : ct.getParameters().getFirstChild();
+        for (int i = 0; i < arguments.size() && paramNode != null; i++, paramNode = paramNode.getNext()) {
+          Node arg = arguments.get(i);
+          JSType paramType = paramNode.getJSType();
+          if (paramType != null) {
+            backwardInferenceFromCallSite(arg, paramType, scope);
+          }
+        }
       }
     }
   }
   n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+
+  // Traverse the argument children after backward type inference
+  for (Node arg : arguments) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
