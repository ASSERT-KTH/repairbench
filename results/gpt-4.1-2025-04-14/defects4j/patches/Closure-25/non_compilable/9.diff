diff --git a/tmp/6b80d830-d60f-4deb-8b07-ab6c2bc62283_buggy.java b/tmp/e81133fc-ebe2-45ed-a7da-3703b98b99e5_fixed.java
index b98f0a7..f639b21 100644
--- a/tmp/6b80d830-d60f-4deb-8b07-ab6c2bc62283_buggy.java
+++ b/tmp/e81133fc-ebe2-45ed-a7da-3703b98b99e5_fixed.java
@@ -1,29 +1,46 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
+    // Backwards argument type inference for constructors
+    if (constructorType instanceof FunctionType) {
+      FunctionType funType = (FunctionType) constructorType;
+      Node arg = constructor.getNext();
+      int i = 0;
+      while (arg != null) {
+        ObjectType callThisType = null;
+        JSType paramType = funType.getCallTypeOfParam(i);
+        if (paramType != null) {
+          backwardInferType(arg, scope, paramType);
+        }
+        scope = traverse(arg, scope);
+        arg = arg.getNext();
+        i++;
+      }
+    } else {
       for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
       }
+    }
     return scope;
   }
\ No newline at end of file
