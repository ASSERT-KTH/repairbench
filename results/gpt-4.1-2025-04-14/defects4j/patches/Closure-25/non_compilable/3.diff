diff --git a/tmp/662465aa-ff9d-48bf-8232-5eaf71e07614_buggy.java b/tmp/069e5ed6-8d13-4ede-83e2-139dae9ca682_fixed.java
index b98f0a7..de9e99d 100644
--- a/tmp/662465aa-ff9d-48bf-8232-5eaf71e07614_buggy.java
+++ b/tmp/069e5ed6-8d13-4ede-83e2-139dae9ca682_fixed.java
@@ -1,29 +1,49 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+    FunctionType ct = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
+
+    // If ct is constructor, run backward inference on arguments.
+    if (ct != null && ct.isConstructor()) {
+      // ParameterType for constructor includes 'this'
+      // so we getParametersNode().getSecondChild()
+      Node paramNode = ct.getParametersNode();
+      Node arg = constructor.getNext();
+      Node param = paramNode.getFirstChild();
+      while (arg != null && param != null) {
+        JSType paramType = param.getJSType();
+        if (paramType != null && !paramType.isUnknownType()) {
+          n.getParent().putProp(Node.FUNCTION_INVOKE_ARGUMENT, Boolean.TRUE);
+          reverseInterpreter.inferArgumentType(arg, paramType, scope);
+        }
+        arg = arg.getNext();
+        param = param.getNext();
+      }
+    }
+
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
