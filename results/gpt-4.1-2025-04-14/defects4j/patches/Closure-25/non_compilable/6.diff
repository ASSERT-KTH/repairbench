diff --git a/tmp/20946209-1cf4-4839-828e-c05d0e0543df_buggy.java b/tmp/1e36ca38-318e-49af-a053-1cd95133c40a_fixed.java
index b98f0a7..8b46de2 100644
--- a/tmp/20946209-1cf4-4839-828e-c05d0e0543df_buggy.java
+++ b/tmp/1e36ca38-318e-49af-a053-1cd95133c40a_fixed.java
@@ -1,29 +1,56 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+    FunctionType ct = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+
+    Node callTarget = constructor;
+    int argIndex = 0;
+    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), argIndex++) {
+      // If we know the constructor and its parameter types, do backwards inference.
+      if (ct != null && ct.isConstructor()) {
+        JSType paramType = null;
+        // For backward inference, match parameters to arguments.
+        if (ct.getParameters() != null) {
+          Node paramNode = ct.getParameters().getFirstChild();
+          for (int i = 0; i < argIndex && paramNode != null; ++i) {
+            paramNode = paramNode.getNext();
+          }
+          if (paramNode != null) {
+            paramType = paramNode.getJSType();
+          } else {
+            // If there are less parameters than arguments, the trailing params
+            // may be a var_args node; use its declared type if so.
+            if (ct.getParameters().hasVarArgs()) {
+              paramType = ct.getParameters().getJSType();
+            }
+          }
+        }
+        scope = traverseWithExpectedType(arg, paramType, scope);
+      } else {
+        // No known param type; regular traversal.
         scope = traverse(arg, scope);
       }
+    }
     return scope;
   }
\ No newline at end of file
