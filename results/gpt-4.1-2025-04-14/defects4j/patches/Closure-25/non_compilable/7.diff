diff --git a/tmp/def77c9b-d0bb-4429-9b79-c96f78e29448_buggy.java b/tmp/b6ec2084-1d9e-4d3e-8a2d-1f8c59713be5_fixed.java
index b98f0a7..b5f81ae 100644
--- a/tmp/def77c9b-d0bb-4429-9b79-c96f78e29448_buggy.java
+++ b/tmp/b6ec2084-1d9e-4d3e-8a2d-1f8c59713be5_fixed.java
@@ -1,29 +1,46 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+
+          // Backwards inference for arguments to the constructor.
+          // Propagate expected type information from function param.
+          Node arg = constructor.getNext();
+          for (int i = 0; arg != null; i++, arg = arg.getNext()) {
+            JSType paramType = ct.getTypeOfThis();
+            if (ct.getParameters() != null) {
+              Node paramNode = ct.getParameters().getFirstChild();
+              for (int pi = 0; pi < i && paramNode != null; pi++) {
+                paramNode = paramNode.getNext();
+              }
+              if (paramNode != null && paramNode.getJSType() != null) {
+                paramType = paramNode.getJSType();
+              }
+            }
+            scope = traverseWithinFunction(arg, scope, paramType);
+          }
+          // Finished processing args above
+          n.setJSType(type);
+          return scope;
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
