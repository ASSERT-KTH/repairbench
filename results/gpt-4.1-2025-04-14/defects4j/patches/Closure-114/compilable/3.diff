diff --git a/tmp/1e3e18fd-1fdd-43e4-b8cd-02366b0b0a73_buggy.java b/tmp/0287bd69-6e6d-4be6-82aa-1ee4e0e961a1_fixed.java
index c51c8b1..9096583 100644
--- a/tmp/1e3e18fd-1fdd-43e4-b8cd-02366b0b0a73_buggy.java
+++ b/tmp/0287bd69-6e6d-4be6-82aa-1ee4e0e961a1_fixed.java
@@ -1,31 +1,33 @@
 private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
   Node nameNode = n.getFirstChild();
   Node parent = n.getParent();
   NameInformation ns = createNameInformation(t, nameNode);
   if (ns != null) {
     if (parent.isFor() && !NodeUtil.isForIn(parent)) {
       // Patch for assignments that appear in the init,
       // condition or iteration part of a FOR loop.  Without
       // this change, all 3 of those parts try to claim the for
       // loop as their dependency scope.  The last assignment in
       // those three fields wins, which can result in incorrect
       // reference edges between referenced and assigned variables.
       //
       // TODO(user) revisit the dependency scope calculation
       // logic.
       if (parent.getFirstChild().getNext() != n) {
         recordDepScope(recordNode, ns);
       } else {
         recordDepScope(nameNode, ns);
       }
     } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
+      // Fix: Only record the rhs as the scope if the assignment is not an assignment to a function expression
+      // For (fun = function(){ x; })();, we want to associate the function expression itself as the scope,
+      // not the recordNode (i.e., the CALL node).
+      Node rhs = nameNode.getNext();
+      if (rhs != null && rhs.isFunction()) {
+        recordDepScope(rhs, ns);
+      } else {
         recordDepScope(recordNode, ns);
       }
     }
   }
+}
\ No newline at end of file
