diff --git a/tmp/77f1be86-8f08-4375-b909-292d51fa18b2_buggy.java b/tmp/25f7d213-1615-477e-8e30-eb289eaf2fc4_fixed.java
index 3effef5..bab01b9 100644
--- a/tmp/77f1be86-8f08-4375-b909-292d51fa18b2_buggy.java
+++ b/tmp/25f7d213-1615-477e-8e30-eb289eaf2fc4_fixed.java
@@ -1,73 +1,102 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
         DeserializationContext ctxt)
     throws IOException, JsonProcessingException
 {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
+    Object bean = null;
+
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
         p.nextToken(); // to point to value
         // creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
-                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
-                    Object bean;
+            Object value = creatorProp.deserialize(p, ctxt);
+            if (buffer.assignParameter(creatorProp, value)) {
+                // creator parameters are all assigned: build the bean!
                 try {
                     bean = creator.build(ctxt, buffer);
                 } catch (Exception e) {
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
+                    continue; // should not reach but keeps compiler happy
                 }
+                // Now, continue to read remaining properties and buffer them, including unwrapped
+                t = p.nextToken();
                 while (t == JsonToken.FIELD_NAME) {
+                    String remPropName = p.getCurrentName();
                     p.nextToken();
+                    // regular property?
+                    SettableBeanProperty prop = _beanProperties.find(remPropName);
+                    if (prop != null) {
+                        prop.deserializeAndSet(p, ctxt, bean);
+                    } else if (_ignorableProps != null && _ignorableProps.contains(remPropName)) {
+                        handleIgnoredProperty(p, ctxt, handledType(), remPropName);
+                    } else {
+                        tokens.writeFieldName(remPropName);
                         tokens.copyCurrentStructure(p);
+                        // "any property"?
+                        if (_anySetter != null) {
+                            _anySetter.deserializeAndSet(p, ctxt, bean, remPropName);
+                        }
+                    }
                     t = p.nextToken();
                 }
                 tokens.writeEndObject();
                 if (bean.getClass() != _beanType.getRawClass()) {
                     ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                     return null;
                 }
                 return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
             }
             continue;
         }
         // Object Id property?
         if (buffer.readIdProperty(propName)) {
             continue;
         }
-            // regular property? needs buffering
+        // regular property? needs buffering if bean not yet constructed
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
+            if (bean == null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
+            } else {
+                prop.deserializeAndSet(p, ctxt, bean);
+            }
             continue;
         }
+        // ignorable property?
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
         tokens.writeFieldName(propName);
         tokens.copyCurrentStructure(p);
         // "any property"?
         if (_anySetter != null) {
+            if (bean == null) {
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+            } else {
+                _anySetter.deserializeAndSet(p, ctxt, bean, propName);
+            }
         }
     }
 
     // We hit END_OBJECT, so:
-        Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
+    if (bean == null) {
+        // hasn't been built yet
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }
+    }
+    tokens.writeEndObject();
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
