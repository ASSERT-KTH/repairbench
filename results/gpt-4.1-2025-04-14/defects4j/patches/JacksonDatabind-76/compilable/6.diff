diff --git a/tmp/f8930050-b9f1-4ba8-b2ab-0dbc0299696f_buggy.java b/tmp/cc83cd7d-718d-4613-9c05-a47ea080c6e0_fixed.java
index 3effef5..74c2a51 100644
--- a/tmp/f8930050-b9f1-4ba8-b2ab-0dbc0299696f_buggy.java
+++ b/tmp/cc83cd7d-718d-4613-9c05-a47ea080c6e0_fixed.java
@@ -1,73 +1,112 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
         DeserializationContext ctxt)
     throws IOException, JsonProcessingException
 {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
+    List<String> bufferedFieldNames = new ArrayList<>();
+    List<Object> bufferedFieldValues = new ArrayList<>();
+    List<SettableBeanProperty> bufferedFieldProperties = new ArrayList<>();
+
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
-            // creator property?
+        p.nextToken();
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
-                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
+            Object value = creatorProp.deserialize(p, ctxt);
+            if (buffer.assignParameter(creatorProp, value)) {
+                // assignParameter returns true when all creator params assigned!
+                // *But* we should consume the rest of the fields and process them as properties
                 Object bean;
                 try {
                     bean = creator.build(ctxt, buffer);
                 } catch (Exception e) {
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                     continue;
                 }
-                    while (t == JsonToken.FIELD_NAME) {
+                // [Issue]: We need to process already-read but unprocessed properties:
+                // buffer properties that were seen before instantiating bean
+                for (int i = 0; i < bufferedFieldProperties.size(); ++i) {
+                    SettableBeanProperty prop = bufferedFieldProperties.get(i);
+                    prop.set(bean, bufferedFieldValues.get(i));
+                }
+                // process rest
+                while ((t = p.nextToken()) == JsonToken.FIELD_NAME) {
+                    String name = p.getCurrentName();
                     p.nextToken();
+                    SettableBeanProperty prop = _beanProperties.find(name);
+                    if (prop != null) {
+                        prop.deserializeAndSet(p, ctxt, bean);
+                    } else if (_ignorableProps != null && _ignorableProps.contains(name)) {
+                        handleIgnoredProperty(p, ctxt, handledType(), name);
+                    } else {
+                        tokens.writeFieldName(name);
                         tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
+                        if (_anySetter != null) {
+                            _anySetter.deserializeAndSet(p, ctxt, bean, name);
+                        }
+                    }
                 }
                 tokens.writeEndObject();
                 if (bean.getClass() != _beanType.getRawClass()) {
                     ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                     return null;
                 }
                 return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+            } else {
+                // Buffer for use after bean instantiation if needed
+                bufferedFieldNames.add(propName);
+                bufferedFieldProperties.add(creatorProp);
+                bufferedFieldValues.add(value);
             }
             continue;
         }
         // Object Id property?
         if (buffer.readIdProperty(propName)) {
             continue;
         }
-            // regular property? needs buffering
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
-                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
+            Object value = prop.deserialize(p, ctxt);
+            bufferedFieldNames.add(propName);
+            bufferedFieldProperties.add(prop);
+            bufferedFieldValues.add(value);
             continue;
         }
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
         tokens.writeFieldName(propName);
         tokens.copyCurrentStructure(p);
-            // "any property"?
         if (_anySetter != null) {
-                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+            bufferedFieldNames.add(propName);
+            bufferedFieldProperties.add(null);
+            bufferedFieldValues.add(_anySetter.deserialize(p, ctxt));
         }
     }
-
-        // We hit END_OBJECT, so:
+    // We hit END_OBJECT
     Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
     try {
         bean = creator.build(ctxt, buffer);
     } catch (Exception e) {
         return wrapInstantiationProblem(e, ctxt);
     }
+    // apply properties buffered prior bean instantiation, including regular and unknown/any-setter
+    for (int i = 0, len = bufferedFieldProperties.size(); i < len; ++i) {
+        SettableBeanProperty prop = bufferedFieldProperties.get(i);
+        if (prop != null) {
+            prop.set(bean, bufferedFieldValues.get(i));
+        } else if (_anySetter != null) {
+            _anySetter.set(bean, bufferedFieldNames.get(i), bufferedFieldValues.get(i));
+        }
+    }
+    tokens.writeEndObject();
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
