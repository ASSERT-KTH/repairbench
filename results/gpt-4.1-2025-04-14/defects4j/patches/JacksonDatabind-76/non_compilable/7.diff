diff --git a/tmp/de7aa48f-8704-4d8b-a78c-6fe691b46be3_buggy.java b/tmp/84672cd4-e012-4c3a-a581-08392a949cfe_fixed.java
index 3effef5..8a189d8 100644
--- a/tmp/de7aa48f-8704-4d8b-a78c-6fe691b46be3_buggy.java
+++ b/tmp/84672cd4-e012-4c3a-a581-08392a949cfe_fixed.java
@@ -1,73 +1,113 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
         DeserializationContext ctxt)
     throws IOException, JsonProcessingException
 {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
-        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
+    // Keep track of properties seen before creator is satisfied
+    List<String> seenProperties = new ArrayList<>();
+    List<JsonNode> seenValues = new ArrayList<>();
+    while (t == JsonToken.FIELD_NAME) {
         String propName = p.getCurrentName();
         p.nextToken(); // to point to value
+
         // creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
-                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
+            // save the property in case the creator isn't yet satisfied
+            Object value = creatorProp.deserialize(p, ctxt);
+            if (buffer.assignParameter(creatorProp, value)) {
+                // Creator is now satisfied, build bean
                 Object bean;
                 try {
                     bean = creator.build(ctxt, buffer);
                 } catch (Exception e) {
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
+                    return null; // unreachable but keeps old structure
                 }
+                // replay buffered properties (before satisfaction)
+                // First, write all buffered tokens
+                for (int i = 0, len = seenProperties.size(); i < len; ++i) {
+                    String bufferedPropName = seenProperties.get(i);
+                    JsonNode bufferedValue = seenValues.get(i);
+                    tokens.writeFieldName(bufferedPropName);
+                    tokens.copyCurrentStructure(ctxt.getParser().codec().treeAsTokens(bufferedValue));
+                }
+                // Now, handle the remaining of current structure
+                t = p.nextToken();
                 while (t == JsonToken.FIELD_NAME) {
+                    String nextName = p.getCurrentName();
                     p.nextToken();
+                    tokens.writeFieldName(nextName);
                     tokens.copyCurrentStructure(p);
                     t = p.nextToken();
                 }
                 tokens.writeEndObject();
                 if (bean.getClass() != _beanType.getRawClass()) {
                     ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                     return null;
                 }
                 return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
             }
+            // creator not yet satisfied, buffer for later
+            try {
+                // JsonToken is pointing to value after .nextToken()
+                seenProperties.add(propName);
+                seenValues.add(ctxt.readTree(p));
+            } catch (Exception e) {
+                wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+            }
+            t = p.getCurrentToken();
             continue;
         }
         // Object Id property?
         if (buffer.readIdProperty(propName)) {
+            try {
+                seenProperties.add(propName);
+                seenValues.add(ctxt.readTree(p));
+            } catch (Exception e) {
+                wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+            }
+            t = p.getCurrentToken();
             continue;
         }
         // regular property? needs buffering
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
-                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
+            Object value = prop.deserialize(p, ctxt);
+            buffer.bufferProperty(prop, value);
+            tokens.writeFieldName(propName);
+            prop.serializeAsField(value, tokens, ctxt); // Write the value into the tokens
+            t = p.getCurrentToken();
             continue;
         }
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
+            t = p.getCurrentToken();
             continue;
         }
         tokens.writeFieldName(propName);
         tokens.copyCurrentStructure(p);
         // "any property"?
         if (_anySetter != null) {
             buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
         }
+        t = p.getCurrentToken();
     }
 
     // We hit END_OBJECT, so:
     Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
     try {
         bean = creator.build(ctxt, buffer);
     } catch (Exception e) {
         return wrapInstantiationProblem(e, ctxt);
     }
+    tokens.writeEndObject();
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
