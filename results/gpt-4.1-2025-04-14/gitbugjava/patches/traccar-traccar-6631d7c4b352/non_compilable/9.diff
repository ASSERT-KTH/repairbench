diff --git a/tmp/54dfdd84-5a38-4a72-a056-3c324eea2308_buggy.java b/tmp/41b41256-010a-4aa1-956e-1c81fba69203_fixed.java
index d87dd79..b24dd47 100644
--- a/tmp/54dfdd84-5a38-4a72-a056-3c324eea2308_buggy.java
+++ b/tmp/41b41256-010a-4aa1-956e-1c81fba69203_fixed.java
@@ -1,47 +1,77 @@
 @Override
 protected Object decode(
         ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
 
+    // Look for a complete frame starting and ending with '[' and ']'
+    int readerIndex = buf.readerIndex();
+    int writerIndex = buf.writerIndex();
+
+    // Find the first '['
+    int startIndex = -1;
+    for (int i = readerIndex; i < writerIndex; i++) {
+        if (buf.getByte(i) == '[') {
+            startIndex = i;
+            break;
+        }
+    }
+
+    if (startIndex == -1) {
+        return null;
+    }
+
+    // Find the matching ']'
     int endIndex = -1;
-        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
+    for (int i = startIndex + 1; i < writerIndex; i++) {
         if (buf.getByte(i) == ']') {
-                endIndex = i + 1;
+            endIndex = i;
             break;
         }
     }
 
-        if (endIndex > 0) {
-            ByteBuf frame = Unpooled.buffer();
-            while (buf.readerIndex() < endIndex) {
+    if (endIndex == -1) {
+        return null;
+    }
+
+    // Set readerIndex to startIndex to only consume the current frame
+    buf.readerIndex(startIndex);
+
+    ByteBuf frame = Unpooled.buffer(endIndex - startIndex + 1);
+    while (buf.readerIndex() <= endIndex) {
         byte b1 = buf.readByte();
         if (b1 == '}') {
+            if (buf.readerIndex() > endIndex) {
+                // Not enough data for escape sequence, reset reader index and exit
+                buf.readerIndex(startIndex);
+                return null;
+            }
             byte b2 = buf.readByte();
             switch (b2) {
                 case 0x01:
                     frame.writeByte('}');
                     break;
                 case 0x02:
                     frame.writeByte('[');
                     break;
                 case 0x03:
                     frame.writeByte(']');
                     break;
                 case 0x04:
                     frame.writeByte(',');
                     break;
                 case 0x05:
                     frame.writeByte('*');
                     break;
                 default:
                     throw new IllegalArgumentException(String.format(
                             "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
             }
         } else {
             frame.writeByte(b1);
         }
     }
+
+    // Discard everything up to endIndex + 1 (inclusive)
+    buf.discardReadBytes();
+
     return frame;
 }
\ No newline at end of file
-
-        return null;
-    }
