diff --git a/tmp/bcb65f7b-f873-4017-b434-627e70fcd15c_buggy.java b/tmp/447a14a3-0e45-4348-b6d8-6e7d52bc9949_fixed.java
index ee599aa..67e197b 100644
--- a/tmp/bcb65f7b-f873-4017-b434-627e70fcd15c_buggy.java
+++ b/tmp/447a14a3-0e45-4348-b6d8-6e7d52bc9949_fixed.java
@@ -1,50 +1,58 @@
 private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {
 
     int length = 0;
     if (hasLength) {
         length = buf.readUnsignedByte();
         if (length == 0) {
             boolean zeroedData = true;
-                for (int i = buf.readerIndex() + 9; i < buf.readerIndex() + 45 && i < buf.writerIndex(); i++) {
+            // The buggy code incorrectly checked some future bytes, skipping LBS when there *is* valid MCC/MNC/LAC/CID.
+            // Instead, for LBS to be treated as zero, ALL *next* LBS bytes should be zero.
+            // The usual size of LBS = 9 bytes (mcc:2, mnc:1, lac:2, cid:3), for certain types more.
+            // We'll conservatively check the next 9 bytes; if they're all zero, skip this LBS.
+            int size = 9;
+            boolean allZero = true;
+            int max = Math.min(buf.readerIndex() + size, buf.writerIndex());
+            for (int i = buf.readerIndex(); i < max; i++) {
                 if (buf.getByte(i) != 0) {
-                        zeroedData = false;
+                    allZero = false;
                     break;
                 }
             }
-                if (zeroedData) {
-                    buf.skipBytes(Math.min(buf.readableBytes(), 45));
-                }
+            if (allZero) {
+                buf.skipBytes(Math.min(buf.readableBytes(), size));
                 return false;
             }
+            // Not all zero: proceed (it's real LBS data even if length is 0)
+        }
     }
 
     int mcc = buf.readUnsignedShort();
     int mnc;
     if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {
         mnc = buf.readUnsignedShort();
     } else {
         mnc = buf.readUnsignedByte();
     }
     int lac;
     if (type == MSG_LBS_ALARM) {
         lac = buf.readInt();
     } else {
         lac = buf.readUnsignedShort();
     }
     long cid;
     if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {
         cid = buf.readLong();
     } else if (type == MSG_GPS_LBS_6) {
         cid = buf.readUnsignedInt();
     } else {
         cid = buf.readUnsignedMedium();
     }
 
     position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));
 
     if (length > 9) {
         buf.skipBytes(length - 9);
     }
 
     return true;
 }
\ No newline at end of file
