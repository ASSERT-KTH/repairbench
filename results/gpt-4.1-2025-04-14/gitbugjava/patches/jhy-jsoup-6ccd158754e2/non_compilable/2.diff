diff --git a/tmp/0b963eec-e2fc-42bd-8112-68cd9f6d3713_buggy.java b/tmp/67f647b9-d85c-434e-8f36-5f5902744e68_fixed.java
index 23f078d..0814973 100644
--- a/tmp/0b963eec-e2fc-42bd-8112-68cd9f6d3713_buggy.java
+++ b/tmp/67f647b9-d85c-434e-8f36-5f5902744e68_fixed.java
@@ -1,14 +1,22 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+    for (int i = 0; i < s.length(); ) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
+            i++;
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            String encoded = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());
+            // URLEncoder encodes spaces as '+', so replace '+' with "%20" if needed
+            if (spaceAsPlus) {
+                sb.append(encoded);
+            } else {
+                sb.append(encoded.replace("+", "%20"));
+            }
+            i += Character.charCount(c);
         } else {
             sb.append((char) c);
+            i++;
         }
     }
 }
\ No newline at end of file
