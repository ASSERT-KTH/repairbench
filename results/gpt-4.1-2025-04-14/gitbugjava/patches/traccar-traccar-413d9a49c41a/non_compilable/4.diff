diff --git a/tmp/50224c85-c371-45d7-b935-9ae30f8181b2_buggy.java b/tmp/1c1f7f62-80dc-487c-a6dc-2b2d675aa271_fixed.java
index 9240541..b1ee61c 100644
--- a/tmp/50224c85-c371-45d7-b935-9ae30f8181b2_buggy.java
+++ b/tmp/1c1f7f62-80dc-487c-a6dc-2b2d675aa271_fixed.java
@@ -1,121 +1,211 @@
 private Position decodePosition(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     int status = buf.readUnsignedShort();
 
     position.setValid(BitUtil.check(status, 15));
 
     position.set(Position.KEY_STATUS, status);
     position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
     int event = buf.readUnsignedShort();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, event);
 
     String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
     DateBuilder dateBuilder = new DateBuilder()
             .setYear(Integer.parseInt(time.substring(0, 2)))
             .setMonth(Integer.parseInt(time.substring(2, 4)))
             .setDay(Integer.parseInt(time.substring(4, 6)))
             .setHour(Integer.parseInt(time.substring(6, 8)))
             .setMinute(Integer.parseInt(time.substring(8, 10)))
             .setSecond(Integer.parseInt(time.substring(10, 12)));
     position.setTime(dateBuilder.getDate());
 
     position.setLongitude(buf.readInt() * 0.00001);
     position.setLatitude(buf.readInt() * 0.00001);
 
+    // The odometer can sometimes appear in the next bytes after the latitude/longitude block, before the sub-blocks
+    // This value may be zero if not present, so we will capture it regardless
+    int odometerHigh = buf.readUnsignedShort();
+    int odometerLow = buf.readUnsignedShort();
+
+    long odometer = ((long) odometerHigh << 16 | odometerLow) * 1000L;
+
+    // Advance to speed, course, altitude as before
     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
     position.setCourse(buf.readUnsignedShort());
     position.setAltitude(buf.readUnsignedShort());
 
-        position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
+    // In some cases, protocols like HuaSheng use these two bytes as odometer, 
+    // but in some cases the KEY_ODOMETER field is repeated as a sub-block, 
+    // so only set KEY_ODOMETER here if it's not later overwritten
+    position.set(Position.KEY_ODOMETER, odometer);
 
     Network network = new Network();
 
     while (buf.readableBytes() > 4) {
         int subtype = buf.readUnsignedShort();
         int length = buf.readUnsignedShort() - 4;
         int endIndex = buf.readerIndex() + length;
         switch (subtype) {
             case 0x0001:
                 int coolantTemperature = buf.readUnsignedByte() - 40;
                 if (coolantTemperature <= 215) {
                     position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                 }
                 int rpm = buf.readUnsignedShort();
                 if (rpm <= 65535) {
                     position.set(Position.KEY_RPM, rpm);
                 }
                 position.set("averageSpeed", buf.readUnsignedByte());
                 buf.readUnsignedShort(); // interval fuel consumption
                 position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                 position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                 position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                 position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                 buf.readUnsignedInt(); // trip id
                 if (buf.readerIndex() < endIndex) {
                     position.set("adBlueLevel", buf.readUnsignedByte() * 0.4);
                 }
                 break;
             case 0x0005:
                 position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                 position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                 buf.readUnsignedInt(); // run time
                 break;
             case 0x0009:
                 position.set(
                         Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
                 break;
+            case 0x000F:
+                // DTC codes
+                String dtcs = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                if (!dtcs.isEmpty()) {
+                    // Each code consists of 5 characters
+                    StringBuilder result = new StringBuilder();
+                    for (int i = 0; i + 5 <= dtcs.length(); i += 5) {
+                        if (result.length() > 0) {
+                            result.append(" ");
+                        }
+                        // Convert first char (0-5 A-F) to prefix, rest is the number.
+                        String code = dtcs.substring(i, i + 5);
+                        char prefix;
+                        switch (code.charAt(0)) {
+                            case '0':
+                                prefix = 'P';
+                                break;
+                            case '1':
+                                prefix = 'C';
+                                break;
+                            case '2':
+                                prefix = 'B';
+                                break;
+                            case '3':
+                                prefix = 'U';
+                                break;
+                            case '4':
+                                prefix = 'P';
+                                break;
+                            case '5':
+                                prefix = 'C';
+                                break;
+                            case '6':
+                                prefix = 'B';
+                                break;
+                            case '7':
+                                prefix = 'U';
+                                break;
+                            case 'A':
+                            case 'a':
+                                prefix = 'P';
+                                break;
+                            case 'B':
+                            case 'b':
+                                prefix = 'C';
+                                break;
+                            case 'C':
+                            case 'c':
+                                prefix = 'B';
+                                break;
+                            case 'D':
+                            case 'd':
+                                prefix = 'U';
+                                break;
+                            case 'E':
+                            case 'e':
+                                prefix = 'P';
+                                break;
+                            case 'F':
+                            case 'f':
+                                prefix = 'C';
+                                break;
+                            default:
+                                prefix = code.charAt(0);
+                        }
+                        result.append(prefix).append(code.substring(1));
+                    }
+                    position.set(Position.KEY_DTCS, result.toString());
+                }
+                break;
             case 0x0011:
                 position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
                 break;
             case 0x0014:
                 position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                 position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                 position.set("airTemp", buf.readUnsignedByte() - 40);
                 position.set("airFlow", buf.readUnsignedShort() * 0.01);
                 position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
                 break;
             case 0x0020:
                 String[] cells = buf.readCharSequence(
                         length, StandardCharsets.US_ASCII).toString().split("\\+");
                 for (String cell : cells) {
                     String[] values = cell.split("@");
                     network.addCellTower(CellTower.from(
                             Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                             Integer.parseInt(values[2], 16), Long.parseLong(values[3], 16)));
                 }
                 break;
             case 0x0021:
                 String[] points = buf.readCharSequence(
                         length, StandardCharsets.US_ASCII).toString().split("\\+");
                 for (String point : points) {
                     String[] values = point.split("@");
                     network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
                 }
                 break;
+            case 0x0010:
+                // Some devices send odometer here as double-word (4 bytes, meters)
+                if (length >= 4) {
+                    long odoMeters = buf.readUnsignedInt();
+                    position.set(Position.KEY_ODOMETER, odoMeters * 1.0);
+                } else {
+                    buf.skipBytes(length);
+                }
+                break;
             default:
                 buf.skipBytes(length);
                 break;
         }
         buf.readerIndex(endIndex);
     }
 
     if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
         position.setNetwork(network);
     }
 
     sendResponse(channel, MSG_POSITION_RSP, index, null);
 
     return position;
 }
\ No newline at end of file
