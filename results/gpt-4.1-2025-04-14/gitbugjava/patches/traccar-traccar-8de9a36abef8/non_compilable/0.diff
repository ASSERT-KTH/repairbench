diff --git a/tmp/53c2961d-cc22-4498-b814-beb83b2226da_buggy.java b/tmp/55811f34-a698-45ce-b4fe-1fc634dc8a0f_fixed.java
index ad77f15..ccddb7e 100644
--- a/tmp/53c2961d-cc22-4498-b814-beb83b2226da_buggy.java
+++ b/tmp/55811f34-a698-45ce-b4fe-1fc634dc8a0f_fixed.java
@@ -1,112 +1,279 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
-        if (fragment.length() == dataIndex + 1) {
+    if (dataIndex == -1) {
+        values = new String[0];
+    } else if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
-        switch (fragment.substring(0, dataIndex)) {
+    String fragmentType = dataIndex == -1 ? fragment : fragment.substring(0, dataIndex);
+
+    switch (fragmentType) {
         case "GPS":
+            if (values.length >= 5) {
                 position.setValid(values[index++].equals("A"));
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
-                    position.setLatitude(-position.getLatitude());
+                } else {
+                    index++;
                 }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
-                    position.setLongitude(-position.getLongitude());
+                if (index < values.length && !values[index].isEmpty()) {
+                    String latStr = values[index];
+                    double latitude = Double.parseDouble(latStr.substring(1));
+                    if (latStr.charAt(0) == 'S') {
+                        latitude = -latitude;
                     }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                    position.setLatitude(latitude);
                 }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                    String lonStr = values[index];
+                    double longitude = Double.parseDouble(lonStr.substring(1));
+                    if (lonStr.charAt(0) == 'W') {
+                        longitude = -longitude;
+                    }
+                    position.setLongitude(longitude);
+                }
+                index++;
+                // speed
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
+                        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index])));
+                    } catch (NumberFormatException e) {
+                        // ignore invalid speed
+                    }
+                }
+                index++;
+                // course
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
+                        position.setCourse(Double.parseDouble(values[index]));
+                    } catch (NumberFormatException e) {
+                        // ignore invalid course
+                    }
+                }
+                index++;
+                // altitude
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
+                        position.setAltitude(Double.parseDouble(values[index]));
+                    } catch (NumberFormatException e) {
+                        // ignore invalid altitude
+                    }
+                }
+                index++;
+                // HDOP
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
+                        position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));
+                    } catch (NumberFormatException e) {
+                        // ignore invalid HDOP
+                    }
+                }
+                index++;
+                // VDOP
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
+                        position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));
+                    } catch (NumberFormatException e) {
+                        // ignore invalid VDOP
                     }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
             }
             break;
         case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
+            // This handles multiple cell towers, gracefully skip on empty fields
+            int gsmIndex = 0;
+            while (gsmIndex + 6 < values.length) {
+                // It's possible that some records are empty, skip those
+                if (!values[gsmIndex + 2].isEmpty() && !values[gsmIndex + 3].isEmpty()
+                        && !values[gsmIndex + 4].isEmpty() && !values[gsmIndex + 5].isEmpty()
+                        && !values[gsmIndex + 6].isEmpty()) {
+                    try {
                         position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                                Integer.parseInt(values[gsmIndex + 2]), Integer.parseInt(values[gsmIndex + 3]),
+                                Integer.parseInt(values[gsmIndex + 4], 16), Integer.parseInt(values[gsmIndex + 5], 16),
+                                Integer.parseInt(values[gsmIndex + 6]))));
+                    } catch (NumberFormatException e) {
+                        // Just skip this tower
+                    }
+                }
+                gsmIndex += 7;
+            }
             break;
         case "COT":
-                if (index < values.length) {
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                } catch (NumberFormatException e) {
+                    index++;
                 }
-                if (index < values.length) {
+            } else {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
                 String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                try {
+                    int h = Integer.parseInt(hours[0]);
+                    int m = hours.length > 1 ? Integer.parseInt(hours[1]) : 0;
+                    int s = hours.length > 2 ? Integer.parseInt(hours[2]) : 0;
+                    position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000L);
+                } catch (NumberFormatException e) {
+                    // ignore
+                }
             }
             break;
         case "ADC":
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
+                } catch (NumberFormatException e) {
+                    index++;
+                }
+            } else {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                } catch (NumberFormatException e) {
+                    index++;
                 }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+            } else {
+                index++;
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+            // ADC channels
+            int adcChannel = 1;
+            while (index < values.length) {
+                if (!values[index].isEmpty()) {
+                    try {
+                        position.set(Position.PREFIX_ADC + adcChannel, Double.parseDouble(values[index]));
+                    } catch (NumberFormatException e) {
+                        // ignore
+                    }
+                }
+                adcChannel++;
+                index++;
             }
             break;
         case "DTT":
+            // status
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                } catch (NumberFormatException e) {
+                    index++;
+                }
+            } else {
+                index++;
+            }
+            // event
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_EVENT, Integer.parseInt(values[index], 16));
+                } catch (NumberFormatException e) {
+                    // ignore
+                }
+            }
+            index++;
+            // digital io
+            int io = -1;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    io = Integer.parseInt(values[index], 16);
+                } catch (NumberFormatException e) {
+                    // ignore
+                }
+            }
+            index++;
+            if (io != -1) {
                 position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                 position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                 position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                 position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                 position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                 position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                 position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                 position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
             }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
-                if (index < values.length) {
-                    position.set("packetType", values[index++]);
+            // geofence
+            StringBuilder geofence = new StringBuilder();
+            for (int i = 0; i < 2 && index < values.length; i++, index++) {
+                if (!values[index].isEmpty()) {
+                    geofence.append(values[index]);
+                }
+            }
+            if (geofence.length() > 0) {
+                position.set(Position.KEY_GEOFENCE, geofence.toString());
+            }
+            // eventStatus
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("eventStatus", values[index]);
+            }
+            index++;
+            // packetType
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("packetType", values[index]);
             }
             break;
         case "ETD":
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set("eventData", values[index++]);
+            }
             break;
         case "OBD":
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set("obd", values[index++]);
+            }
             break;
         case "TAG":
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set("tagData", values[index++]);
+            }
             break;
         case "IWD":
             while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+                // Protect against incomplete triple/quadruple sets
+                if (index + 1 >= values.length) break;
+                int sensorIndex;
+                int dataType;
+                try {
+                    sensorIndex = Integer.parseInt(values[index++]);
+                    dataType = Integer.parseInt(values[index++]);
+                } catch (NumberFormatException e) {
+                    // Skip past these
+                    continue;
+                }
                 if (dataType == 0) {
+                    // driver id
+                    if (index < values.length && !values[index].isEmpty()) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    } else {
+                        index++;
+                    }
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
+                    // temperature probe
+                    if (index < values.length) index++; // skip serial number
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try {
                             position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                        } catch (NumberFormatException e) {
+                            index++;
+                        }
+                    } else {
+                        index++;
+                    }
+                } else {
+                    // unknown type, skip
                 }
             }
             break;
         default:
             break;
     }
 }
\ No newline at end of file
