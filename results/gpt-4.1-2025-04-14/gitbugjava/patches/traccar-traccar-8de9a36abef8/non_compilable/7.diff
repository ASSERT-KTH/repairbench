diff --git a/tmp/9f70f8c8-9a79-4194-b2bb-fcf54620dc92_buggy.java b/tmp/4bdef567-a943-4393-be85-096357f8e676_fixed.java
index ad77f15..97c1218 100644
--- a/tmp/9f70f8c8-9a79-4194-b2bb-fcf54620dc92_buggy.java
+++ b/tmp/4bdef567-a943-4393-be85-096357f8e676_fixed.java
@@ -1,112 +1,222 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+            position.setValid(values.length > index && values[index++].equals("A"));
+            if (values.length > index) {
+                position.set(Position.KEY_SATELLITES, tryParseInt(values[index++]));
+            } else {
+                index++;
+            }
+            if (values.length > index) {
+                position.setLatitude(tryParseDouble(values[index].substring(1)));
+                if (values[index].length() > 0 && values[index].charAt(0) == 'S') {
                     position.setLatitude(-position.getLatitude());
                 }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                index++;
+            } else {
+                index++;
+            }
+            if (values.length > index) {
+                position.setLongitude(tryParseDouble(values[index].substring(1)));
+                if (values[index].length() > 0 && values[index].charAt(0) == 'W') {
                     position.setLongitude(-position.getLongitude());
                 }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                index++;
+            } else {
+                index++;
             }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+            if (values.length > index) {
+                String speedStr = values[index++];
+                if (!speedStr.isEmpty()) {
+                    position.setSpeed(UnitsConverter.knotsFromKph(tryParseDouble(speedStr)));
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+            } else {
+                index++;
             }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+            if (values.length > index) {
+                position.setCourse(tryParseDouble(values[index++]));
+            } else {
+                index++;
+            }
+            if (values.length > index) {
+                position.setAltitude(tryParseDouble(values[index++]));
+            }
+            if (values.length > index) {
+                position.set(Position.KEY_HDOP, tryParseDouble(values[index++]));
+            }
+            if (values.length > index) {
+                position.set(Position.KEY_VDOP, tryParseDouble(values[index++]));
             }
             break;
         case "GSM":
             index += 1; // registration status
             index += 1; // signal strength
+            if (values.length > index + 4) {
                 position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                        tryParseInt(values[index++]), tryParseInt(values[index++]),
+                        tryParseInt(values[index++], 16), tryParseInt(values[index++], 16),
+                        tryParseInt(values[index++])
+                )));
+            }
             break;
         case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_ODOMETER, tryParseLong(values[index++]));
+            } else if (index < values.length) {
+                index++;
             }
-                if (index < values.length) {
+            if (index < values.length && !values[index].isEmpty()) {
                 String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                int h = 0, m = 0, s = 0;
+                if (hours.length > 0 && !hours[0].isEmpty()) h = tryParseInt(hours[0]);
+                if (hours.length > 1 && !hours[1].isEmpty()) m = tryParseInt(hours[1]);
+                if (hours.length > 2 && !hours[2].isEmpty()) s = tryParseInt(hours[2]);
+                position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);
             }
             break;
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+            if (values.length > index && !values[index].isEmpty()) {
+                position.set(Position.KEY_POWER, tryParseDouble(values[index++]));
+            } else {
+                index++;
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+            if (values.length > index && !values[index].isEmpty()) {
+                position.set(Position.KEY_BATTERY, tryParseDouble(values[index++]));
+            } else {
+                index++;
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+            if (values.length > index && !values[index].isEmpty()) {
+                position.set(Position.PREFIX_ADC + 1, tryParseDouble(values[index++]));
+            } else {
+                index++;
+            }
+            if (values.length > index && !values[index].isEmpty()) {
+                position.set(Position.PREFIX_ADC + 2, tryParseDouble(values[index++]));
+            } else {
+                index++;
             }
             break;
         case "DTT":
+            if (values.length > index && !values[index].isEmpty()) {
+                try {
                     position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                } catch (NumberFormatException e) {
+                    index++;
+                }
+            } else {
+                index++;
+            }
+            if (values.length > index && !values[index].isEmpty()) {
+                try {
+                    int io = Integer.parseInt(values[index++], 16);
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
+                } catch (NumberFormatException e) {
+                    // skip io decode
                 }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+            } else {
+                index++;
+            }
+            if (values.length > index) {
+                String geo1 = values[index++] != null ? values[index - 1] : "";
+                String geo2 = index < values.length && values[index] != null ? values[index++] : "";
+                position.set(Position.KEY_GEOFENCE, geo1 + geo2);
+            }
+            if (values.length > index) {
                 position.set("eventStatus", values[index++]);
-                if (index < values.length) {
+            }
+            if (values.length > index) {
                 position.set("packetType", values[index++]);
             }
             break;
         case "ETD":
+            if (values.length > index) {
                 position.set("eventData", values[index++]);
+            }
             break;
         case "OBD":
+            if (values.length > index) {
                 position.set("obd", values[index++]);
+            }
             break;
         case "TAG":
+            if (values.length > index) {
                 position.set("tagData", values[index++]);
+            }
             break;
         case "IWD":
             while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+                // Defensive to avoid out of bounds
+                if (index + 1 >= values.length) break;
+                int sensorIndex = tryParseInt(values[index++]);
+                int dataType = tryParseInt(values[index++]);
                 if (dataType == 0) {
+                    if (index < values.length) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    }
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    index++; // skip temperature sensor serial number
+                    if (index < values.length && !values[index].isEmpty()) {
+                        position.set(Position.PREFIX_TEMP + sensorIndex, tryParseDouble(values[index++]));
+                    } else {
+                        index++;
+                    }
                 }
             }
             break;
         default:
             break;
     }
 }
+
+private static Integer tryParseInt(String s) {
+    if (s == null || s.isEmpty()) return null;
+    try {
+        return Integer.parseInt(s);
+    } catch (NumberFormatException e) {
+        return null;
+    }
+}
+
+private static Integer tryParseInt(String s, int radix) {
+    if (s == null || s.isEmpty()) return null;
+    try {
+        return Integer.parseInt(s, radix);
+    } catch (NumberFormatException e) {
+        return null;
+    }
+}
+
+private static Double tryParseDouble(String s) {
+    if (s == null || s.isEmpty()) return null;
+    try {
+        return Double.parseDouble(s);
+    } catch (NumberFormatException e) {
+        return null;
+    }
+}
+
+private static Long tryParseLong(String s) {
+    if (s == null || s.isEmpty()) return null;
+    try {
+        return Long.parseLong(s);
+    } catch (NumberFormatException e) {
+        return null;
+    }
+}
\ No newline at end of file
