diff --git a/tmp/9d36f98b-7058-4844-8a3d-7b1ad9140a4d_buggy.java b/tmp/9c947b4f-08d6-41c2-9e15-c3bfcefd8b48_fixed.java
index ad77f15..0ddd4c4 100644
--- a/tmp/9d36f98b-7058-4844-8a3d-7b1ad9140a4d_buggy.java
+++ b/tmp/9c947b4f-08d6-41c2-9e15-c3bfcefd8b48_fixed.java
@@ -1,112 +1,263 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
+    if (dataIndex < 0) {
+        // No ':' found, nothing to decode
+        return;
+    }
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
+            if (values.length == 0) {
+                break;
+            }
+            position.setValid(index < values.length && values[index++].equals("A"));
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+            } else {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
                 position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+                if (values[index].charAt(0) == 'S') {
                     position.setLatitude(-position.getLatitude());
                 }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
                 position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                if (values[index].charAt(0) == 'W') {
                     position.setLongitude(-position.getLongitude());
                 }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
             }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index])));
+                } catch (NumberFormatException e) {
+                    // Ignore speed if it's not a valid number
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
             }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.setCourse(Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) {
+                    // Ignore course if not valid
+                }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.setAltitude(Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) {
+                    // Ignore altitude if not valid
+                }
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) {
+                    // ignore
+                }
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) {
+                    // ignore
+                }
+                index++;
             }
             break;
         case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+            // registration status & signal strength
+            index += 2;
+            // Accept from 5 up to 7 cell parameters (each cell is mcc, mnc, lac, cid, rssi)
+            java.util.List<CellTower> cellTowers = new java.util.ArrayList<>();
+            while (index + 4 < values.length && !values[index].isEmpty() && !values[index + 2].isEmpty() && !values[index + 3].isEmpty()
+                    && !values[index + 4].isEmpty()) {
+                try {
+                    int mcc = Integer.parseInt(values[index++]);
+                    int mnc = Integer.parseInt(values[index++]);
+                    int lac = Integer.parseInt(values[index++], 16);
+                    int cid = Integer.parseInt(values[index++], 16);
+                    int rssi = Integer.parseInt(values[index++]);
+                    cellTowers.add(CellTower.from(mcc, mnc, lac, cid, rssi));
+                } catch (NumberFormatException e) {
+                    break; // Stop on parsing error
+                }
+            }
+            if (!cellTowers.isEmpty()) {
+                position.setNetwork(new Network(cellTowers));
+            }
             break;
         case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));
+                } catch (NumberFormatException e) {
+                    // ignore
                 }
-                if (index < values.length) {
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
                 String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                try {
+                    int totalSeconds = (hours.length > 0 && !hours[0].isEmpty() ? Integer.parseInt(hours[0]) * 3600 : 0)
+                            + (hours.length > 1 && !hours[1].isEmpty() ? Integer.parseInt(hours[1]) * 60 : 0)
+                            + (hours.length > 2 && !hours[2].isEmpty() ? Integer.parseInt(hours[2]) : 0);
+                    position.set(Position.KEY_HOURS, totalSeconds * 1000);
+                } catch (NumberFormatException e) {
+                    // ignore
+                }
             }
             break;
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_POWER, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) {
+                    // ignore
                 }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) {
+                    // ignore
+                }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) {
+                    // ignore
+                }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) {
+                    // ignore
+                }
             }
             break;
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));
+                } catch (NumberFormatException e) {
+                    // ignore
+                }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    int io = Integer.parseInt(values[index], 16);
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
+                } catch (NumberFormatException e) {
+                    // ignore
                 }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
-                if (index < values.length) {
-                    position.set("packetType", values[index++]);
+            }
+            index++;
+            if (index + 1 < values.length) {
+                String geofence1 = !values[index].isEmpty() ? values[index] : "";
+                index++;
+                String geofence2 = !values[index].isEmpty() ? values[index] : "";
+                position.set(Position.KEY_GEOFENCE, geofence1 + geofence2);
+                index++;
+            } else if (index < values.length) {
+                String geofence = !values[index].isEmpty() ? values[index] : "";
+                position.set(Position.KEY_GEOFENCE, geofence);
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("eventStatus", values[index]);
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("packetType", values[index]);
             }
             break;
         case "ETD":
-                position.set("eventData", values[index++]);
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("eventData", values[index]);
+            }
             break;
         case "OBD":
-                position.set("obd", values[index++]);
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("obd", values[index]);
+            }
             break;
         case "TAG":
-                position.set("tagData", values[index++]);
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("tagData", values[index]);
+            }
             break;
         case "IWD":
             while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+                if (index + 1 >= values.length) break;
+                String sensorIndexStr = values[index++];
+                String dataTypeStr = values[index++];
+                if (sensorIndexStr.isEmpty() || dataTypeStr.isEmpty()) {
+                    continue;
+                }
+                int sensorIndex;
+                int dataType;
+                try {
+                    sensorIndex = Integer.parseInt(sensorIndexStr);
+                    dataType = Integer.parseInt(dataTypeStr);
+                } catch (NumberFormatException e) {
+                    continue;
+                }
                 if (dataType == 0) {
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    // uniqueId
+                    if (index < values.length && !values[index].isEmpty()) {
+                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index]);
+                    }
+                    index++;
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    // temperature
+                    // sometimes there is one serial number string between dataType and value
+                    if (index < values.length && values[index].length() == 16) {
+                        // skip temperature sensor serial number
+                        index++;
+                    }
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try {
+                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index]));
+                        } catch (NumberFormatException e) {
+                            // ignore
+                        }
+                    }
+                    index++;
+                } else {
+                    // unknown data
+                    index++;
                 }
             }
             break;
         default:
             break;
     }
 }
\ No newline at end of file
