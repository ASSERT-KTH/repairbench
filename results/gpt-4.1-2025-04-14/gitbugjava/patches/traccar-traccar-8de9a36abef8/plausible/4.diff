diff --git a/tmp/9dbcd8ec-ef9f-4a6f-a4ed-2a2fa83a10c3_buggy.java b/tmp/5b602338-d63e-48dd-a96c-3a05e89b1cec_fixed.java
index ad77f15..a375baf 100644
--- a/tmp/9dbcd8ec-ef9f-4a6f-a4ed-2a2fa83a10c3_buggy.java
+++ b/tmp/5b602338-d63e-48dd-a96c-3a05e89b1cec_fixed.java
@@ -1,112 +1,224 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
-        if (fragment.length() == dataIndex + 1) {
+    if (dataIndex == -1 || fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
-        switch (fragment.substring(0, dataIndex)) {
+    switch (fragment.substring(0, dataIndex != -1 ? dataIndex : fragment.length())) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+            if (values.length > index) {
+                position.setValid(values[index++].equals("A") || values[index - 1].equals("L"));
+            } else {
+                break;
+            }
+            if (values.length > index) {
+                position.set(Position.KEY_SATELLITES, parseSafeInt(values[index++]));
+            }
+            if (values.length > index) {
+                String lat = values[index];
+                if (lat.length() > 1) {
+                    position.setLatitude(parseSafeDouble(lat.substring(1)));
+                    if (lat.charAt(0) == 'S') {
                         position.setLatitude(-position.getLatitude());
                     }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                }
+                index++;
+            }
+            if (values.length > index) {
+                String lon = values[index];
+                if (lon.length() > 1) {
+                    position.setLongitude(parseSafeDouble(lon.substring(1)));
+                    if (lon.charAt(0) == 'W') {
                         position.setLongitude(-position.getLongitude());
                     }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
                 }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                index++;
             }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+            if (values.length > index) {
+                String speed = values[index];
+                if (!speed.isEmpty()) {
+                    position.setSpeed(UnitsConverter.knotsFromKph(parseSafeDouble(speed)));
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                index++;
+            }
+            if (values.length > index) {
+                String course = values[index];
+                if (!course.isEmpty()) {
+                    position.setCourse(parseSafeDouble(course));
+                }
+                index++;
+            }
+            if (values.length > index) {
+                String alt = values[index];
+                if (!alt.isEmpty()) {
+                    position.setAltitude(parseSafeDouble(alt));
+                }
+                index++;
+            }
+            if (values.length > index) {
+                String hdop = values[index];
+                if (!hdop.isEmpty()) {
+                    position.set(Position.KEY_HDOP, parseSafeDouble(hdop));
+                }
+                index++;
+            }
+            if (values.length > index) {
+                String vdop = values[index];
+                if (!vdop.isEmpty()) {
+                    position.set(Position.KEY_VDOP, parseSafeDouble(vdop));
+                }
+                index++;
             }
             break;
         case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
+            index += 2; // registration status and signal strength (may be empty)
+            if (values.length > index + 4) {
                 position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                        parseSafeInt(values[index++]), // MCC
+                        parseSafeInt(values[index++]), // MNC
+                        parseSafeInt(values[index++], 16), // LAC
+                        parseSafeInt(values[index++], 16), // CID
+                        parseSafeInt(values[index++]) // RSSI or similar
+                )));
+            }
             break;
         case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+            if (values.length > index) {
+                String odo = values[index++];
+                if (!odo.isEmpty()) {
+                    position.set(Position.KEY_ODOMETER, parseSafeLong(odo));
                 }
-                if (index < values.length) {
+            }
+            if (values.length > index) {
                 String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                int hour = 0, minute = 0, second = 0;
+                if (hours.length > 0 && !hours[0].isEmpty()) hour = parseSafeInt(hours[0]);
+                if (hours.length > 1 && !hours[1].isEmpty()) minute = parseSafeInt(hours[1]);
+                if (hours.length > 2 && !hours[2].isEmpty()) second = parseSafeInt(hours[2]);
+                position.set(Position.KEY_HOURS, (hour * 3600 + minute * 60 + second) * 1000);
             }
             break;
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+            if (values.length > index) {
+                String power = values[index++];
+                if (!power.isEmpty()) position.set(Position.KEY_POWER, parseSafeDouble(power));
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+            if (values.length > index) {
+                String battery = values[index++];
+                if (!battery.isEmpty()) position.set(Position.KEY_BATTERY, parseSafeDouble(battery));
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+            if (values.length > index) {
+                String adc1 = values[index++];
+                if (!adc1.isEmpty()) position.set(Position.PREFIX_ADC + 1, parseSafeDouble(adc1));
+            }
+            if (values.length > index) {
+                String adc2 = values[index++];
+                if (!adc2.isEmpty()) position.set(Position.PREFIX_ADC + 2, parseSafeDouble(adc2));
             }
             break;
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            if (values.length > index) {
+                String status = values[index++];
+                if (!status.isEmpty()) {
+                    position.set(Position.KEY_STATUS, parseSafeInt(status, 16));
+                }
+            }
+            if (values.length > index) {
+                String ioStr = values[index++];
+                if (!ioStr.isEmpty()) {
+                    int io = parseSafeInt(ioStr, 16);
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                 }
+            }
+            if (values.length > index + 1) {
                 position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
-                if (index < values.length) {
+            } else if (values.length > index) {
+                position.set(Position.KEY_GEOFENCE, values[index++]);
+            }
+            if (values.length > index) {
+                String eventStatus = values[index++];
+                position.set("eventStatus", eventStatus);
+            }
+            if (values.length > index) {
                 position.set("packetType", values[index++]);
             }
             break;
         case "ETD":
+            if (values.length > index) {
                 position.set("eventData", values[index++]);
+            }
             break;
         case "OBD":
+            if (values.length > index) {
                 position.set("obd", values[index++]);
+            }
             break;
         case "TAG":
+            if (values.length > index) {
                 position.set("tagData", values[index++]);
+            }
             break;
         case "IWD":
-                while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
-                    if (dataType == 0) {
+            while (values.length > index + 1) {
+                int sensorIndex = parseSafeInt(values[index++]);
+                int dataType = parseSafeInt(values[index++]);
+                if (dataType == 0 && values.length > index) {
                     position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
-                    } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                } else if (dataType == 1 && values.length > index + 1) {
+                    index++; // skip serial number
+                    String temp = values[index++];
+                    if (!temp.isEmpty()) {
+                        position.set(Position.PREFIX_TEMP + sensorIndex, parseSafeDouble(temp));
+                    }
                 }
             }
             break;
         default:
             break;
     }
 }
+
+// Helper parsing functions to handle empty strings gracefully
+
+private static int parseSafeInt(String str) {
+    return parseSafeInt(str, 10);
+}
+
+private static int parseSafeInt(String str, int radix) {
+    if (str == null || str.isEmpty()) return 0;
+    try {
+        return Integer.parseInt(str, radix);
+    } catch (NumberFormatException e) {
+        return 0;
+    }
+}
+
+private static long parseSafeLong(String str) {
+    if (str == null || str.isEmpty()) return 0L;
+    try {
+        return Long.parseLong(str);
+    } catch (NumberFormatException e) {
+        return 0L;
+    }
+}
+
+private static double parseSafeDouble(String str) {
+    if (str == null || str.isEmpty()) return 0.0;
+    try {
+        return Double.parseDouble(str);
+    } catch (NumberFormatException e) {
+        return 0.0;
+    }
+}
\ No newline at end of file
