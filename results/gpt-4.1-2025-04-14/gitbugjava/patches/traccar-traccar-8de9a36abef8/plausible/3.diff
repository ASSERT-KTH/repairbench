diff --git a/tmp/8c70076e-84d5-4699-859a-4eb8cc9af144_buggy.java b/tmp/c71036d0-a128-4273-b630-8224e441f1be_fixed.java
index ad77f15..a05191c 100644
--- a/tmp/8c70076e-84d5-4699-859a-4eb8cc9af144_buggy.java
+++ b/tmp/c71036d0-a128-4273-b630-8224e441f1be_fixed.java
@@ -1,112 +1,227 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+            // Defensive: Make sure values are long enough before accessing
+            position.setValid(index < values.length && values[index++].equals("A"));
+            if (index < values.length) {
+                position.set(Position.KEY_SATELLITES, parseIntSafe(values[index++]));
+            }
+            if (index < values.length) {
+                String latValue = values[index];
+                double lat = 0.0;
+                if (!latValue.isEmpty()) {
+                    lat = Double.parseDouble(latValue.substring(1));
+                }
+                position.setLatitude(lat);
+                if (latValue.length() > 0 && latValue.charAt(0) == 'S') {
                     position.setLatitude(-position.getLatitude());
                 }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                index++;
+            }
+            if (index < values.length) {
+                String lonValue = values[index];
+                double lon = 0.0;
+                if (!lonValue.isEmpty()) {
+                    lon = Double.parseDouble(lonValue.substring(1));
+                }
+                position.setLongitude(lon);
+                if (lonValue.length() > 0 && lonValue.charAt(0) == 'W') {
                     position.setLongitude(-position.getLongitude());
                 }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                index++;
             }
-                position.setCourse(Integer.parseInt(values[index++]));
             if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                String speedValue = values[index++];
+                if (!speedValue.isEmpty()) {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(speedValue)));
+                }
             }
             if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                String courseValue = values[index++];
+                if (!courseValue.isEmpty()) {
+                    position.setCourse(Double.parseDouble(courseValue));
+                }
+            }
+            if (index < values.length) {
+                String altitudeValue = values[index++];
+                if (!altitudeValue.isEmpty()) {
+                    position.setAltitude(Double.parseDouble(altitudeValue));
+                }
             }
             if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                String hdopValue = values[index++];
+                if (!hdopValue.isEmpty()) {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(hdopValue));
+                }
+            }
+            if (index < values.length) {
+                String vdopValue = values[index++];
+                if (!vdopValue.isEmpty()) {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(vdopValue));
+                }
             }
             break;
         case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+            // Defensive skip
+            index += 2; // registration status and signal strength
+            // Handle cell tower chains: allow groups of 5 (MCC, MNC, LAC, CID, RSSI) and skip incomplete
+            while (index + 4 < values.length) {
+                try {
+                    int mcc = parseIntSafe(values[index++]);
+                    int mnc = parseIntSafe(values[index++]);
+                    int lac = parseIntSafe(values[index++], 16);
+                    int cid = parseIntSafe(values[index++], 16);
+                    int rssi = parseIntSafe(values[index++]);
+                    position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));
+                } catch (NumberFormatException e) {
+                    // skip bad cell
+                }
+            }
             break;
         case "COT":
             if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                String odo = values[index++];
+                if (!odo.isEmpty()) {
+                    position.set(Position.KEY_ODOMETER, Long.parseLong(odo));
+                }
             }
             if (index < values.length) {
-                    String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                String hoursStr = values[index];
+                if (!hoursStr.isEmpty()) {
+                    String[] hours = hoursStr.split("-");
+                    int seconds =
+                            (hours.length > 0 && !hours[0].isEmpty() ? Integer.parseInt(hours[0]) * 3600 : 0)
+                            + (hours.length > 1 && !hours[1].isEmpty() ? Integer.parseInt(hours[1]) * 60 : 0)
+                            + (hours.length > 2 && !hours[2].isEmpty() ? Integer.parseInt(hours[2]) : 0);
+                    position.set(Position.KEY_HOURS, seconds * 1000L);
+                }
             }
             break;
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
             if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                String power = values[index++];
+                if (!power.isEmpty()) {
+                    position.set(Position.KEY_POWER, Double.parseDouble(power));
                 }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
             }
             if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                String battery = values[index++];
+                if (!battery.isEmpty()) {
+                    position.set(Position.KEY_BATTERY, Double.parseDouble(battery));
+                }
+            }
+            // Some models supply more ADCs (e.g., 0.01 for voltage channels)
+            int adcChannel = 1;
+            while (index < values.length) {
+                String adc = values[index++];
+                if (!adc.isEmpty()) {
+                    position.set(Position.PREFIX_ADC + adcChannel, Double.parseDouble(adc));
+                }
+                adcChannel++;
             }
             break;
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            if (index < values.length) {
+                String status = values[index++];
+                if (!status.isEmpty()) {
+                    // status is often hexadecimal, but sometimes decimal, keep as string
+                    try {
+                        position.set(Position.KEY_STATUS, Integer.parseInt(status, 16));
+                    } catch (NumberFormatException e) {
+                        position.set(Position.KEY_STATUS, parseIntSafe(status));
+                    }
+                }
+            }
+            if (index < values.length) {
+                String ioVal = values[index++];
+                if (!ioVal.isEmpty()) {
+                    int io;
+                    try {
+                        io = Integer.parseInt(ioVal, 16);
+                    } catch (NumberFormatException ex) {
+                        io = 0;
+                    }
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                 }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
+            }
+            // Make sure we don't join empty strings
+            String geofenceA = index < values.length ? values[index++] : "";
+            String geofenceB = index < values.length ? values[index++] : "";
+            position.set(Position.KEY_GEOFENCE, geofenceA + geofenceB);
+
+            String eventStatus = index < values.length ? values[index++] : "";
+            position.set("eventStatus", eventStatus);
+
             if (index < values.length) {
-                    position.set("packetType", values[index++]);
+                String packetType = values[index++];
+                position.set("packetType", packetType);
             }
             break;
         case "ETD":
+            if (index < values.length) {
                 position.set("eventData", values[index++]);
+            }
             break;
         case "OBD":
+            if (index < values.length) {
                 position.set("obd", values[index++]);
+            }
             break;
         case "TAG":
+            if (index < values.length) {
                 position.set("tagData", values[index++]);
+            }
             break;
         case "IWD":
-                while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+            while (index + 1 < values.length) {
+                int sensorIndex = parseIntSafe(values[index++]);
+                int dataType = parseIntSafe(values[index++]);
                 if (dataType == 0) {
+                    if (index < values.length) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    }
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    if (index < values.length) {
+                        index++; // skip temperature sensor serial number
+                    }
+                    if (index < values.length) {
+                        String temp = values[index++];
+                        if (!temp.isEmpty()) {
+                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(temp));
+                        }
+                    }
                 }
             }
             break;
         default:
             break;
     }
 }
+
+// Helper to avoid exceptions on empty strings
+private int parseIntSafe(String v) {
+    return parseIntSafe(v, 10);
+}
+private int parseIntSafe(String v, int radix) {
+    if (v == null || v.isEmpty()) {
+        return 0;
+    }
+    return Integer.parseInt(v, radix);
+}
\ No newline at end of file
