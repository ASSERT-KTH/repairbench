diff --git a/tmp/5083bc14-77dd-4e28-8b54-4ee6ca3ec01a_buggy.java b/tmp/f9d6790f-ecf5-4832-8fe0-bbf00ef9442f_fixed.java
index ad77f15..35c3b94 100644
--- a/tmp/5083bc14-77dd-4e28-8b54-4ee6ca3ec01a_buggy.java
+++ b/tmp/f9d6790f-ecf5-4832-8fe0-bbf00ef9442f_fixed.java
@@ -1,112 +1,288 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
-        if (fragment.length() == dataIndex + 1) {
+    if (dataIndex == -1) {
+        // No colon, treat everything as the type, no values
+        values = new String[0];
+    } else if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
-        switch (fragment.substring(0, dataIndex)) {
+    String type = dataIndex == -1 ? fragment : fragment.substring(0, dataIndex);
+
+    switch (type) {
         case "GPS":
+            if (values.length > 0 && index < values.length) {
                 position.setValid(values[index++].equals("A"));
+            }
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+            } else {
+                index++; // skip
+            }
+            if (index < values.length && !values[index].isEmpty()) {
                 position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+                if (values[index].charAt(0) == 'S') {
                     position.setLatitude(-position.getLatitude());
                 }
+                index++;
+            } else {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
                 position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                if (values[index].charAt(0) == 'W') {
                     position.setLongitude(-position.getLongitude());
                 }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                index++;
+            } else {
+                index++;
             }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+            // Speed
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index])));
+                } catch (NumberFormatException error) {
+                    // ignore
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
             }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+            index++;
+            // Course
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.setCourse(Double.parseDouble(values[index]));
+                } catch (NumberFormatException error) {
+                    // ignore
+                }
+            }
+            index++;
+            // Altitude (optional)
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.setAltitude(Double.parseDouble(values[index]));
+                } catch (NumberFormatException error) {
+                    // ignore
+                }
+                index++;
+            } else if (index < values.length) {
+                index++;
+            }
+            // HDOP
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));
+                } catch (NumberFormatException error) {
+                    // ignore
+                }
+                index++;
+            } else if (index < values.length) {
+                index++;
+            }
+            // VDOP
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));
+                } catch (NumberFormatException error) {
+                    // ignore
+                }
             }
             break;
+
         case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+            index += 2; // registration status and signal strength
+            // Multiple cell info possible, parse in sequence (normally groups of 6 or 7 fields per cell)
+            while (index + 4 < values.length) {
+                try {
+                    int mcc = Integer.parseInt(values[index++]);
+                    int mnc = Integer.parseInt(values[index++]);
+                    int lac = Integer.parseInt(values[index++], 16);
+                    int cid = Integer.parseInt(values[index++], 16);
+                    int rssi = Integer.parseInt(values[index++]);
+                    // Optionally may have extra fields (e.g., NB-IoT/TAC), but basic parsing should work
+                    position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));
+                } catch (Exception error) {
+                    // ignore.
                     break;
+                }
+            }
+            break;
+
         case "COT":
-                if (index < values.length) {
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                } catch (NumberFormatException error) {
+                    // ignore
+                    index++;
                 }
-                if (index < values.length) {
+            } else if (index < values.length) {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
                 String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                try {
+                    long totalMillis =
+                        (Long.parseLong(hours[0]) * 3600 +
+                            (hours.length > 1 ? Long.parseLong(hours[1]) * 60 : 0) +
+                            (hours.length > 2 ? Long.parseLong(hours[2]) : 0)) * 1000;
+                    position.set(Position.KEY_HOURS, totalMillis);
+                } catch (NumberFormatException error) {
+                    // ignore
+                }
             }
             break;
+
         case "ADC":
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
+                } catch (NumberFormatException error) {
+                    index++;
+                }
+            } else if (index < values.length) {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                } catch (NumberFormatException error) {
+                    index++;
                 }
-                if (index < values.length) {
+            } else if (index < values.length) {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                } catch (NumberFormatException error) {
+                    index++;
                 }
-                if (index < values.length) {
+            } else if (index < values.length) {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                } catch (NumberFormatException error) {
+                    index++;
+                }
             }
             break;
+
         case "DTT":
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                } catch (NumberFormatException error) {
+                    index++;
+                }
+            } else if (index < values.length) {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    int io = Integer.parseInt(values[index], 16);
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
+                } catch (NumberFormatException error) {
+                    // ignore
                 }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+                index++;
+            } else if (index < values.length) {
+                index++;
+            }
+            // Geofence: can be one or two non-empty fields (concatenate them if present)
+            String geofence = "";
+            if (index < values.length && !values[index].isEmpty()) {
+                geofence += values[index++];
+            } else if (index < values.length) {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                geofence += values[index++];
+            } else if (index < values.length) {
+                index++;
+            }
+            if (!geofence.isEmpty()) {
+                position.set(Position.KEY_GEOFENCE, geofence);
+            }
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set("eventStatus", values[index++]);
-                if (index < values.length) {
+            } else if (index < values.length) {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set("packetType", values[index++]);
             }
             break;
+
         case "ETD":
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set("eventData", values[index++]);
+            }
             break;
+
         case "OBD":
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set("obd", values[index++]);
+            }
             break;
+
         case "TAG":
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set("tagData", values[index++]);
+            }
             break;
+
         case "IWD":
-                while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+            while (index + 1 < values.length) {
+                // Defensive to avoid IndexOutOfBounds
+                int sensorIndex;
+                int dataType;
+                try {
+                    sensorIndex = Integer.parseInt(values[index++]);
+                    dataType = Integer.parseInt(values[index++]);
+                } catch (NumberFormatException error) {
+                    break;
+                }
                 if (dataType == 0) {
+                    if (index < values.length && !values[index].isEmpty()) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    } else if (index < values.length) {
+                        index++;
+                    }
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
+                    // temperature sensor serial number, can be skipped (always present), then value
+                    if (index < values.length) {
+                        index++; // skip serial number
+                    }
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try {
                             position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                        } catch (NumberFormatException error) {
+                            index++;
+                        }
+                    } else if (index < values.length) {
+                        index++;
+                    }
+                } else {
+                    // skip unknown dataType
+                    index++;
                 }
             }
             break;
+        // case fallback for other types
         default:
             break;
     }
 }
\ No newline at end of file
