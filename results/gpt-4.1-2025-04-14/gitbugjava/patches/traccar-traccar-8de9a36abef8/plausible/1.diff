diff --git a/tmp/3cfe566e-2408-4d03-bc1a-42d724255f95_buggy.java b/tmp/5426b1fc-7dde-475c-9be1-9a5cb870eaf0_fixed.java
index ad77f15..1cfe2e6 100644
--- a/tmp/3cfe566e-2408-4d03-bc1a-42d724255f95_buggy.java
+++ b/tmp/5426b1fc-7dde-475c-9be1-9a5cb870eaf0_fixed.java
@@ -1,112 +1,238 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
+
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
+            if (values.length < 6) {
+                // Not enough values, skip parsing GPS
+                break;
+            }
             position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+            position.set(Position.KEY_SATELLITES, values[index].isEmpty() ? 0 : Integer.parseInt(values[index]));
+            index++;
+            position.setLatitude(values[index].isEmpty() ? 0 : Double.parseDouble(values[index].substring(1)));
+            if (values[index].length() > 0 && values[index].charAt(0) == 'S') {
                 position.setLatitude(-position.getLatitude());
             }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+            index++;
+            position.setLongitude(values[index].isEmpty() ? 0 : Double.parseDouble(values[index].substring(1)));
+            if (values[index].length() > 0 && values[index].charAt(0) == 'W') {
                 position.setLongitude(-position.getLongitude());
             }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+            index++;
+            // Speed
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index])));
+                } catch (NumberFormatException e) {
+                    // ignore speed
                 }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
             }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+            index++;
+            // Course
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.setCourse(Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) {
+                    // ignore course
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+            }
+            index++;
+            // Altitude
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.setAltitude(Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) {
+                    // ignore altitude
+                }
+                index++;
+            }
+            // HDOP
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) {
+                    // ignore hdop
+                }
+                index++;
+            }
+            // VDOP
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) {
+                    // ignore vdop
+                }
+                index++;
             }
             break;
         case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
+            index += 2; // registration status and signal strength
+            // Try to parse network if enough values
+            if (index + 5 <= values.length) {
+                try {
                     position.setNetwork(new Network(CellTower.from(
                         Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
                         Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
                         Integer.parseInt(values[index++]))));
+                } catch (Exception e) {
+                    // ignore error, not enough or malformed values
+                }
+            }
             break;
         case "COT":
-                if (index < values.length) {
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                } catch (NumberFormatException e) {
+                    index++;
                 }
-                if (index < values.length) {
+            } else {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
                 String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                int h = hours.length > 0 && !hours[0].isEmpty() ? Integer.parseInt(hours[0]) : 0;
+                int m = hours.length > 1 && !hours[1].isEmpty() ? Integer.parseInt(hours[1]) : 0;
+                int s = hours.length > 2 && !hours[2].isEmpty() ? Integer.parseInt(hours[2]) : 0;
+                position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);
             }
             break;
         case "ADC":
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
+                } catch (NumberFormatException e) {
+                    index++;
+                }
+            } else {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                } catch (NumberFormatException e) {
+                    index++;
                 }
-                if (index < values.length) {
+            } else if (index < values.length) {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                } catch (NumberFormatException e) {
+                    index++;
                 }
-                if (index < values.length) {
+            } else if (index < values.length) {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                } catch (NumberFormatException e) {
+                    index++;
+                }
             }
             break;
         case "DTT":
+            // KEY_STATUS
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                } catch (NumberFormatException e) {
+                    index++;
+                }
+            } else {
+                index++;
+            }
+            // IO event
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    int io = Integer.parseInt(values[index++], 16);
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
+                } catch (NumberFormatException e) {
+                    // ignore missing IO
                 }
+            } else if (index < values.length) {
+                index++;
+            }
+            // KEY_GEOFENCE = next 2 values concatenated
+            if (index + 1 < values.length) {
                 position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+            } else if (index < values.length) {
+                position.set(Position.KEY_GEOFENCE, values[index++]);
+            }
+            // "eventStatus"
+            if (index < values.length) {
                 position.set("eventStatus", values[index++]);
+            }
+            // "packetType"
             if (index < values.length) {
                 position.set("packetType", values[index++]);
             }
             break;
         case "ETD":
+            if (index < values.length) {
                 position.set("eventData", values[index++]);
+            }
             break;
         case "OBD":
+            if (index < values.length) {
                 position.set("obd", values[index++]);
+            }
             break;
         case "TAG":
+            if (index < values.length) {
                 position.set("tagData", values[index++]);
+            }
             break;
         case "IWD":
-                while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+            while (index < values.length - 1) {
+                String sensorIdxStr = values[index++];
+                String dataTypeStr = values[index++];
+                if (sensorIdxStr.isEmpty() || dataTypeStr.isEmpty()) {
+                    continue;
+                }
+                int sensorIndex = Integer.parseInt(sensorIdxStr);
+                int dataType = Integer.parseInt(dataTypeStr);
                 if (dataType == 0) {
+                    if (index < values.length) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    }
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
+                    if (index < values.length) index++; // temperature sensor serial number
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try {
                             position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                        } catch (NumberFormatException e) {
+                            index++;
+                        }
+                    } else if (index < values.length) {
+                        index++;
+                    }
+                } else {
+                    // unknown type, advance index to avoid infinite loop
+                    if (index < values.length) index++;
                 }
             }
             break;
         default:
             break;
     }
 }
\ No newline at end of file
