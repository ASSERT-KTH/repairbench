diff --git a/tmp/6489c5e7-7392-490c-9604-37d7ef8cc6b9_buggy.java b/tmp/56b76702-f124-48ff-a730-9565c5ed605a_fixed.java
index 3b47cfa..61d2990 100644
--- a/tmp/6489c5e7-7392-490c-9604-37d7ef8cc6b9_buggy.java
+++ b/tmp/56b76702-f124-48ff-a730-9565c5ed605a_fixed.java
@@ -1,141 +1,187 @@
 private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
 
     int type = buf.readUnsignedByte();
 
     if (type == 0xF0) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));
 
         if (buf.readUnsignedByte() > 0) {
             position.set(Position.KEY_ARCHIVE, true);
         }
 
         buf.readUnsignedByte(); // vehicle type
 
         int count;
         int subtype = buf.readUnsignedByte();
         switch (subtype) {
             case 0x01:
                 count = buf.readUnsignedByte();
                 for (int i = 0; i < count; i++) {
                     int id = buf.readUnsignedShort();
                     int length = buf.readUnsignedByte();
                     switch (id) {
                         case 0x0102:
                         case 0x0528:
                         case 0x0546:
+                            if (length >= 4) {
                                 position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                            } else {
+                                buf.skipBytes(length);
+                            }
                             break;
                         case 0x0103:
+                            if (length >= 4) {
                                 position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);
+                            } else {
+                                buf.skipBytes(length);
+                            }
                             break;
                         case 0x052A:
+                            if (length >= 2) {
                                 position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);
+                            } else {
+                                buf.skipBytes(length);
+                            }
                             break;
                         case 0x0105:
                         case 0x052C:
+                            if (length >= 4) {
                                 position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);
+                            } else {
+                                buf.skipBytes(length);
+                            }
                             break;
                         case 0x014A:
                         case 0x0537:
                         case 0x0538:
                         case 0x0539:
+                            if (length >= 2) {
                                 position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
+                            } else {
+                                buf.skipBytes(length);
+                            }
                             break;
                         case 0x052D:
+                            if (length >= 1) {
                                 position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
+                            } else {
+                                buf.skipBytes(length);
+                            }
                             break;
                         case 0x0530:
+                            if (length >= 2) {
                                 position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
+                            } else {
+                                buf.skipBytes(length);
+                            }
                             break;
                         case 0x0535:
+                            if (length >= 2) {
                                 position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
+                            } else {
+                                buf.skipBytes(length);
+                            }
                             break;
                         case 0x0536:
+                            if (length >= 2) {
                                 position.set(Position.KEY_RPM, buf.readUnsignedShort());
+                            } else {
+                                buf.skipBytes(length);
+                            }
                             break;
                         case 0x0547:
                         case 0x0548:
+                            if (length >= 1) {
                                 position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
+                            } else {
+                                buf.skipBytes(length);
+                            }
                             break;
                         default:
                             switch (length) {
                                 case 1:
                                     position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());
                                     break;
                                 case 2:
                                     position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());
                                     break;
                                 case 4:
                                     position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());
                                     break;
                                 default:
                                     buf.skipBytes(length);
                                     break;
                             }
                             break;
                     }
                 }
-                    getLastLocation(position, time);
                 decodeCoordinates(position, buf);
+                getLastLocation(position, time);
                 break;
             case 0x02:
                 count = buf.readUnsignedByte();
                 for (int i = 0; i < count; i++) {
                     buf.readUnsignedInt(); // system id
                     int codeCount = buf.readUnsignedShort();
                     for (int j = 0; j < codeCount; j++) {
                         buf.skipBytes(16); // code
                     }
                 }
-                    getLastLocation(position, time);
                 decodeCoordinates(position, buf);
+                getLastLocation(position, time);
                 break;
             case 0x03:
                 count = buf.readUnsignedByte();
                 for (int i = 0; i < count; i++) {
                     int id = buf.readUnsignedByte();
                     int length = buf.readUnsignedByte();
                     switch (id) {
                         case 0x1A:
                             position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                             break;
                         case 0x1B:
                             position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                             break;
                         case 0x1C:
                             position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                             break;
                         case 0x1D:
                         case 0x1E:
                         case 0x1F:
                             position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);
                             break;
                         case 0x23:
                             position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);
                             break;
                         default:
                             break;
                     }
                     buf.skipBytes(length);
                 }
-                    getLastLocation(position, time);
                 decodeCoordinates(position, buf);
+                getLastLocation(position, time);
                 break;
             case 0x0B:
                 if (buf.readUnsignedByte() > 0) {
-                        position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());
+                    // FIX: Some VIN data is not actually ASCII but BCD or binary -- need to validate and trim padding.
+                    // So, read all 17 bytes and trim trailing zero/space and non-ASCII.
+                    CharSequence seq = buf.readCharSequence(17, StandardCharsets.US_ASCII);
+                    String vin = seq.toString().trim();
+                    // Remove trailing nulls or spaces
+                    vin = vin.replaceAll("[\u0000 ]+$", "");
+                    position.set(Position.KEY_VIN, vin);
                 }
                 getLastLocation(position, time);
                 break;
             default:
                 return null;
         }
 
         return position;
     }
 
     return null;
 }
\ No newline at end of file
