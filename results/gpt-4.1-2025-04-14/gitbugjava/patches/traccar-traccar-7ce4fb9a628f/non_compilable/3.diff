diff --git a/tmp/f1e59fe8-6228-41a4-86ef-af52af2e4683_buggy.java b/tmp/5dd09082-d589-497d-9c10-cc779d84b6bf_fixed.java
index 2b96a40..927d51d 100644
--- a/tmp/f1e59fe8-6228-41a4-86ef-af52af2e4683_buggy.java
+++ b/tmp/5dd09082-d589-497d-9c10-cc779d84b6bf_fixed.java
@@ -1,101 +1,123 @@
 protected Object decodePosition(DeviceSession deviceSession, String content) throws Exception {
 
     Parser parser = new Parser(PATTERN_POSITION, content);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     int event = parser.nextInt();
     String eventData = parser.next();
     position.set(Position.KEY_EVENT, event);
     if (event == 53) {
         position.set(Position.KEY_DRIVER_UNIQUE_ID, eventData);
     } else {
         position.set(Position.KEY_ALARM, decodeAlarm(event));
     }
 
     position.setTime(parser.nextDateTime());
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextDouble());
     position.setLongitude(parser.nextDouble());
 
     position.set(Position.KEY_SATELLITES, parser.nextInt());
     position.set(Position.KEY_HDOP, parser.nextDouble());
 
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
     position.setCourse(parser.nextInt());
     position.setAltitude(parser.nextInt());
 
-        position.set(Position.KEY_ODOMETER, parser.nextInt());
+    // Fix: use Long for odometer to avoid int overflow and handle large values
+    String odometerStr = parser.next();
+    long odometerValue;
+    try {
+        odometerValue = Long.parseLong(odometerStr);
+    } catch (NumberFormatException e) {
+        odometerValue = 0L;
+    }
+    position.set(Position.KEY_ODOMETER, odometerValue);
 
-        position.setNetwork(new Network(CellTower.from(
-                parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt(), parser.nextInt())));
+    // MCC, MNC, LAC, Cell, Signal
+    String[] cellData = parser.next().split("\\|");
+    if (cellData.length >= 5) {
+        int mcc = Integer.parseInt(cellData[0]);
+        int mnc = Integer.parseInt(cellData[1]);
+        int lac = Integer.parseInt(cellData[2], 16);
+        int cell = Integer.parseInt(cellData[3], 16);
+        int signal = Integer.parseInt(cellData[4]);
+        position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cell, signal)));
+    }
 
     position.set(Position.KEY_STATUS, parser.nextHexInt());
 
     int input = parser.nextHexInt();
     int output = parser.nextHexInt();
     position.set(Position.KEY_IGNITION, BitUtil.check(input, 1));
     position.set(Position.KEY_DOOR, BitUtil.check(input, 2));
     position.set(Position.KEY_INPUT, input);
     position.set(Position.KEY_OUTPUT, output);
 
     position.set(Position.KEY_POWER, parser.nextHexInt() * 0.01);
     position.set(Position.KEY_BATTERY, parser.nextHexInt() * 0.01);
 
     if (parser.hasNext()) {
         String[] adc = parser.next().split("\\|");
-            for (int i = 1; i < adc.length; i++) {
+        for (int i = 0; i < adc.length; i++) {
+            if (!adc[i].isEmpty()) {
                 position.set(Position.PREFIX_ADC + (i + 1), Integer.parseInt(adc[i], 16) * 0.01);
             }
         }
+    }
 
     if (parser.hasNext()) {
         String[] fuels = parser.next().split("\\|");
         for (String fuel : fuels) {
+            if (!fuel.isEmpty()) {
                 int index = Integer.parseInt(fuel.substring(0, 2));
                 int value = Integer.parseInt(fuel.substring(2), 16);
                 position.set("fuel" + index, value * 0.1);
             }
         }
+    }
 
     if (parser.hasNext()) {
         String[] temperatures = parser.next().split("\\|");
         for (String temperature : temperatures) {
+            if (!temperature.isEmpty()) {
                 int index = Integer.parseInt(temperature.substring(0, 2));
                 int value = Integer.parseInt(temperature.substring(2), 16);
                 double convertedValue = BitUtil.to(value, 15);
                 if (BitUtil.check(value, 15)) {
                     convertedValue = -convertedValue;
                 }
                 position.set(Position.PREFIX_TEMP + index, convertedValue * 0.1);
             }
         }
+    }
 
     if (parser.hasNextAny(9)) {
         position.set(Position.KEY_RPM, parser.nextInt());
         position.set(Position.KEY_ENGINE_LOAD, parser.nextInt());
         position.set("airFlow", parser.nextInt());
         position.set("airPressure", parser.nextInt());
         if (parser.hasNext()) {
             position.set("airTemp", parser.nextInt() - 40);
         }
         position.set(Position.KEY_THROTTLE, parser.nextInt());
         if (parser.hasNext()) {
             position.set(Position.KEY_COOLANT_TEMP, parser.nextInt() - 40);
         }
         if (parser.hasNext()) {
             position.set(Position.KEY_FUEL_CONSUMPTION, parser.nextInt() * 0.1);
         }
         position.set(Position.KEY_FUEL_LEVEL, parser.nextInt());
     }
 
     if (parser.hasNext()) {
         position.set(Position.KEY_HOURS, parser.nextInt() * 1000L);
     }
 
     return position;
 }
\ No newline at end of file
