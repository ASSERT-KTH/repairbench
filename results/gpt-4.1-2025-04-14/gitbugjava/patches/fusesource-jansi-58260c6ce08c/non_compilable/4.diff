diff --git a/tmp/fe79e9fb-f68a-4aaf-9879-895e359de5d4_buggy.java b/tmp/093a4b03-c994-445c-80c3-e26afe223c2e_fixed.java
index 712f277..d55c2d3 100644
--- a/tmp/fe79e9fb-f68a-4aaf-9879-895e359de5d4_buggy.java
+++ b/tmp/093a4b03-c994-445c-80c3-e26afe223c2e_fixed.java
@@ -1,48 +1,43 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
 
     int i = 0;
     int j, k;
 
     while (true) {
         j = input.indexOf(BEGIN_TOKEN, i);
         if (j == -1) {
             if (i == 0) {
                 target.append(input);
                 return target;
             }
             target.append(input.substring(i));
             return target;
         }
+
+        // Check for END_TOKEN before BEGIN_TOKEN -- invalid input like "@|@" (END_TOKEN at start)
+        int earliestEnd = input.indexOf(END_TOKEN, i);
+        if (earliestEnd != -1 && earliestEnd < j) {
+            throw new IllegalArgumentException("END_TOKEN found before BEGIN_TOKEN at: " + earliestEnd);
+        }
+
         target.append(input.substring(i, j));
         k = input.indexOf(END_TOKEN, j);
 
         if (k == -1) {
-                target.append(input);
-                return target;
+            // Check for END_TOKEN only after BEGIN_TOKEN, else throw
+            throw new IllegalArgumentException("BEGIN_TOKEN without matching END_TOKEN at: " + j);
         }
         j += BEGIN_TOKEN_LEN;
         String spec = input.substring(j, k);
 
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
         if (items.length == 1) {
-                target.append(input);
-                return target;
+            throw new IllegalArgumentException("Missing CODE_TEXT_SEPARATOR in: '" + spec + "'");
         }
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
         target.append(replacement);
 
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
