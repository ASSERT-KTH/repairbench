diff --git a/tmp/94188ccf-f19b-4d4f-b9e7-ef03af2292fd_buggy.java b/tmp/32fc650a-bdc2-4b43-86ae-760160103296_fixed.java
index 712f277..caf39cd 100644
--- a/tmp/94188ccf-f19b-4d4f-b9e7-ef03af2292fd_buggy.java
+++ b/tmp/32fc650a-bdc2-4b43-86ae-760160103296_fixed.java
@@ -1,48 +1,46 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
 
     int i = 0;
     int j, k;
 
     while (true) {
         j = input.indexOf(BEGIN_TOKEN, i);
+
+        // No BEGIN_TOKEN found
         if (j == -1) {
             if (i == 0) {
                 target.append(input);
                 return target;
             }
             target.append(input.substring(i));
             return target;
         }
+
         target.append(input.substring(i, j));
+
         k = input.indexOf(END_TOKEN, j);
 
+        // END_TOKEN missing: handle per spec, should throw IllegalArgumentException
         if (k == -1) {
-                target.append(input);
-                return target;
+            throw new IllegalArgumentException("END_TOKEN found before BEGIN_TOKEN or missing END_TOKEN.");
         }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
+
+        // Check for case where tokens are adjacent (e.g., "@|@") -> empty code specification
+        int codeSpecStart = j + BEGIN_TOKEN_LEN;
+        if (codeSpecStart == k) {
+            throw new IllegalArgumentException("Missing code specification between tokens");
+        }
+
+        String spec = input.substring(codeSpecStart, k);
 
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
         if (items.length == 1) {
-                target.append(input);
-                return target;
+            throw new IllegalArgumentException("Invalid format: missing text after code");
         }
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
         target.append(replacement);
 
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
