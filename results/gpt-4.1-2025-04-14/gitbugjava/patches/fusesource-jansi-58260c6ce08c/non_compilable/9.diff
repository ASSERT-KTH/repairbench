diff --git a/tmp/96b0fa18-a70b-48c2-b090-fa6d72756b82_buggy.java b/tmp/e0f55e1b-3dcc-47a4-8693-df19b1fe5b43_fixed.java
index 712f277..98ec04a 100644
--- a/tmp/96b0fa18-a70b-48c2-b090-fa6d72756b82_buggy.java
+++ b/tmp/e0f55e1b-3dcc-47a4-8693-df19b1fe5b43_fixed.java
@@ -1,48 +1,49 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
 
     int i = 0;
     int j, k;
 
     while (true) {
         j = input.indexOf(BEGIN_TOKEN, i);
         if (j == -1) {
             if (i == 0) {
                 target.append(input);
                 return target;
             }
             target.append(input.substring(i));
             return target;
         }
         target.append(input.substring(i, j));
         k = input.indexOf(END_TOKEN, j);
         
+        // Fix: If END_TOKEN comes before BEGIN_TOKEN or is at the wrong place (i.e., right after BEGIN_TOKEN)
         if (k == -1) {
+            // Check for "@|@" (BEGIN immediately followed by END)
+            if (j + BEGIN_TOKEN_LEN == input.length() - END_TOKEN_LEN && 
+                input.substring(j, j + BEGIN_TOKEN_LEN + END_TOKEN_LEN).equals(BEGIN_TOKEN + END_TOKEN)) {
+                throw new IllegalArgumentException("Invalid input: END_TOKEN before BEGIN_TOKEN or no code/text provided.");
+            }
             target.append(input);
             return target;
         }
+        
+        // If the matched closing END_TOKEN is immediately after BEGIN_TOKEN, e.g., "@|@", that's invalid.
+        if (k == j + BEGIN_TOKEN_LEN) {
+            throw new IllegalArgumentException("END_TOKEN immediately after BEGIN_TOKEN: no code/text in between.");
+        }
+
         j += BEGIN_TOKEN_LEN;
         String spec = input.substring(j, k);
 
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
         if (items.length == 1) {
-                target.append(input);
-                return target;
+            // No CODE_TEXT_SEPARATOR in the block, invalid, e.g., "@|foo|@"
+            throw new IllegalArgumentException("No CODE_TEXT_SEPARATOR found in block.");
         }
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
         target.append(replacement);
 
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
