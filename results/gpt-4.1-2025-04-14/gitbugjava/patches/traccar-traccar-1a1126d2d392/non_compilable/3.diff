diff --git a/tmp/26e6ca1a-7a65-4d1e-b6e3-15d64b88a08a_buggy.java b/tmp/03dc90cb-25a5-41b4-8b99-3fe696fa8cd0_fixed.java
index 2a0dceb..9f51f5c 100644
--- a/tmp/26e6ca1a-7a65-4d1e-b6e3-15d64b88a08a_buggy.java
+++ b/tmp/03dc90cb-25a5-41b4-8b99-3fe696fa8cd0_fixed.java
@@ -1,68 +1,165 @@
 private Position decode4(
         Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
+
     int index = 0;
 
     String type = values[index++].substring(5);
 
     if (!type.equals("STT") && !type.equals("ALT")) {
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_TYPE, type);
 
     position.set(Position.KEY_VERSION_FW, values[index++]);
     index += 1; // model
 
     Network network = new Network();
 
+    // Robustly handle number of cell towers and avoid unparseable or missing fields
     for (int i = 0; i < 7; i++) {
-            int cid = Integer.parseInt(values[index++]);
-            int mcc = Integer.parseInt(values[index++]);
-            int mnc = Integer.parseInt(values[index++]);
-            int lac, rssi;
+        // Not enough values left? Break.
+        if (index + 4 > values.length) {
+            break;
+        }
+        int cid, mcc, mnc, lac = 0, rssi = 0;
+        try {
+            cid = Integer.parseInt(values[index++]);
+            mcc = Integer.parseInt(values[index++]);
+            mnc = Integer.parseInt(values[index++]);
             if (i == 0) {
                 rssi = Integer.parseInt(values[index++]);
                 lac = Integer.parseInt(values[index++]);
             } else {
                 lac = Integer.parseInt(values[index++]);
                 rssi = Integer.parseInt(values[index++]);
             }
             index += 1; // timing advance
             if (cid > 0) {
                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
             }
+        } catch (Exception error) {
+            // Defensive: skip invalid/missing cell fields
+            break;
+        }
     }
 
     position.setNetwork(network);
 
+    // Battery
+    if (index < values.length) {
+        try {
             position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
-        position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
+        } catch (Exception ex) {
+            index++;
+        }
+    }
+
+    // Archive
+    if (index < values.length) {
+        String archive = values[index++];
+        // Accept both 1 and 0 as values, older protocol sometimes is simply "1"
+        if (archive.equals("0")) {
+            position.set(Position.KEY_ARCHIVE, true);
+        } else if (archive.equals("1")) {
+            position.set(Position.KEY_ARCHIVE, false);
+        } else {
+            position.set(Position.KEY_ARCHIVE, null);
+        }
+    }
+
+    // Index
+    if (index < values.length) {
+        try {
             position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
+        } catch (Exception ex) {
+            index++;
+        }
+    }
+
+    // Status
+    if (index < values.length) {
+        try {
             position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
+        } catch (Exception ex) {
+            index++;
+        }
+    }
 
-        if (values[index].length() == 3) {
-            index += 1; // collaborative network
+    // If collaborative network present, skip one field
+    if (index < values.length && values[index].length() == 3) {
+        index += 1;
     }
 
+    // Date/time: two fields expected: date (yyyyMMdd), time (HH:mm:ss)
+    String date = index < values.length ? values[index++] : "";
+    String time = index < values.length ? values[index++] : "";
+
+    if (!date.isEmpty() && !time.isEmpty()) {
         DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
+        position.setTime(dateFormat.parse(date + time));
+    } else {
+        // Defensive: If missing date/time, do not throw exception, use current time or set null
+        position.setTime(new Date());
+    }
 
+    // Latitude, Longitude
+    if (index < values.length) {
+        try {
             position.setLatitude(Double.parseDouble(values[index++]));
+        } catch (Exception ex) {
+            index++;
+        }
+    }
+    if (index < values.length) {
+        try {
             position.setLongitude(Double.parseDouble(values[index++]));
+        } catch (Exception ex) {
+            index++;
+        }
+    }
+    // Speed (in kph, must convert to knots), Course
+    if (index < values.length) {
+        try {
             position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
+        } catch (Exception ex) {
+            index++;
+        }
+    }
+    if (index < values.length) {
+        try {
             position.setCourse(Double.parseDouble(values[index++]));
-
+        } catch (Exception ex) {
+            index++;
+        }
+    }
+    // Satellites
+    if (index < values.length) {
+        try {
             position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-
-        position.setValid(values[index++].equals("1"));
+        } catch (Exception ex) {
+            index++;
+        }
+    }
+    // Valid
+    if (index < values.length) {
+        String valid = values[index++];
+        if (valid.equals("1")) {
+            position.setValid(true);
+        } else {
+            position.setValid(false);
+        }
+    } else {
+        position.setValid(false);
+    }
 
     return position;
 }
\ No newline at end of file
