diff --git a/tmp/a3d5bb4f-8b03-4b6e-bfab-d2788448c612_buggy.java b/tmp/e70a055e-83f3-44c9-b591-bd01b5f213f8_fixed.java
index 2a0dceb..26c391c 100644
--- a/tmp/a3d5bb4f-8b03-4b6e-bfab-d2788448c612_buggy.java
+++ b/tmp/e70a055e-83f3-44c9-b591-bd01b5f213f8_fixed.java
@@ -1,68 +1,112 @@
 private Position decode4(
         Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
     int index = 0;
 
     String type = values[index++].substring(5);
 
     if (!type.equals("STT") && !type.equals("ALT")) {
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_TYPE, type);
 
     position.set(Position.KEY_VERSION_FW, values[index++]);
     index += 1; // model
 
     Network network = new Network();
 
     for (int i = 0; i < 7; i++) {
-            int cid = Integer.parseInt(values[index++]);
-            int mcc = Integer.parseInt(values[index++]);
-            int mnc = Integer.parseInt(values[index++]);
-            int lac, rssi;
+        int cid = 0, mcc = 0, mnc = 0, lac = 0, rssi = 0;
+
+        // Safely check array bounds before parsing
+        if (index < values.length) cid = parseIntSafe(values[index++]);
+        if (index < values.length) mcc = parseIntSafe(values[index++]);
+        if (index < values.length) mnc = parseIntSafe(values[index++]);
         if (i == 0) {
-                rssi = Integer.parseInt(values[index++]);
-                lac = Integer.parseInt(values[index++]);
+            if (index < values.length) rssi = parseIntSafe(values[index++]);
+            if (index < values.length) lac = parseIntSafe(values[index++]);
         } else {
-                lac = Integer.parseInt(values[index++]);
-                rssi = Integer.parseInt(values[index++]);
+            if (index < values.length) lac = parseIntSafe(values[index++]);
+            if (index < values.length) rssi = parseIntSafe(values[index++]);
         }
         index += 1; // timing advance
         if (cid > 0) {
             network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
         }
     }
 
     position.setNetwork(network);
 
-        position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
-        position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
-        position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
-        position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
+    // Defensive parse for optional trailing fields
+    position.set(Position.KEY_BATTERY, parseDoubleSafe(values, index++));
+    Boolean archive = null;
+    if (index < values.length) {
+        String archiveVal = values[index++];
+        archive = archiveVal.equals("0") ? true : null;
+    }
+    position.set(Position.KEY_ARCHIVE, archive);
 
-        if (values[index].length() == 3) {
+    if (index < values.length)
+        position.set(Position.KEY_INDEX, parseIntSafe(values[index++]));
+    if (index < values.length)
+        position.set(Position.KEY_STATUS, parseIntSafe(values[index++]));
+
+    // Check for optional collaborative network length field
+    if (index < values.length && values[index].length() == 3) {
         index += 1; // collaborative network
     }
 
+    // Defensive: ensure enough fields remain for date
+    if (index + 1 >= values.length) {
+        return position; // or return null if you prefer fail fast
+    }
+
     DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
 
-        position.setLatitude(Double.parseDouble(values[index++]));
-        position.setLongitude(Double.parseDouble(values[index++]));
-        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
-        position.setCourse(Double.parseDouble(values[index++]));
+    String dateStr = values[index++] + values[index++];
+    position.setTime(dateFormat.parse(dateStr));
 
-        position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+    if (index < values.length)
+        position.setLatitude(parseDoubleSafe(values, index++));
+    if (index < values.length)
+        position.setLongitude(parseDoubleSafe(values, index++));
+    if (index < values.length)
+        position.setSpeed(UnitsConverter.knotsFromKph(parseDoubleSafe(values, index++)));
+    if (index < values.length)
+        position.setCourse(parseDoubleSafe(values, index++));
 
+    if (index < values.length)
+        position.set(Position.KEY_SATELLITES, parseIntSafe(values[index++]));
+
+    if (index < values.length)
         position.setValid(values[index++].equals("1"));
 
     return position;
 }
+
+// Utility safe parse methods
+private static int parseIntSafe(String value) {
+    try {
+        return Integer.parseInt(value);
+    } catch (Exception e) {
+        return 0;
+    }
+}
+private static double parseDoubleSafe(String[] values, int index) {
+    if (index < values.length) {
+        try {
+            return Double.parseDouble(values[index]);
+        } catch (Exception e) {
+            return 0.0;
+        }
+    }
+    return 0.0;
+}
\ No newline at end of file
