diff --git a/tmp/e94b9903-93da-4cab-bfc7-05cc52cae208_buggy.java b/tmp/7cf35120-2f93-488a-a561-5f734d57c2fe_fixed.java
index 2a0dceb..779a534 100644
--- a/tmp/e94b9903-93da-4cab-bfc7-05cc52cae208_buggy.java
+++ b/tmp/7cf35120-2f93-488a-a561-5f734d57c2fe_fixed.java
@@ -1,68 +1,160 @@
 private Position decode4(
         Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
     int index = 0;
 
     String type = values[index++].substring(5);
 
     if (!type.equals("STT") && !type.equals("ALT")) {
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_TYPE, type);
 
     position.set(Position.KEY_VERSION_FW, values[index++]);
     index += 1; // model
 
     Network network = new Network();
 
+    // Adjusted: Don't try to parse empty or missing cell fields
     for (int i = 0; i < 7; i++) {
-            int cid = Integer.parseInt(values[index++]);
-            int mcc = Integer.parseInt(values[index++]);
-            int mnc = Integer.parseInt(values[index++]);
-            int lac, rssi;
+        // If not enough values left or field is empty, break
+        if (index >= values.length || values[index].isEmpty()) {
+            // skip remaining cell towers
+            // Still advance the index by correct amount to keep parsing in sync
+            for (; i < 7; i++) {
+                // On protocol, each cell: cid, mcc, mnc, (lac,rssi), timing advance = 6 values per cell
+                index += 6;
+            }
+            break;
+        }
+        int cid = 0, mcc = 0, mnc = 0, lac = 0, rssi = 0;
+        try {
+            cid = Integer.parseInt(values[index++]);
+        } catch (Exception e) {
+            index++;
+            continue;
+        }
+        try {
+            mcc = Integer.parseInt(values[index++]);
+        } catch (Exception e) {
+            index++;
+            continue;
+        }
+        try {
+            mnc = Integer.parseInt(values[index++]);
+        } catch (Exception e) {
+            index++;
+            continue;
+        }
+
         if (i == 0) {
+            try {
                 rssi = Integer.parseInt(values[index++]);
+            } catch (Exception e) {
+                index++;
+            }
+            try {
                 lac = Integer.parseInt(values[index++]);
+            } catch (Exception e) {
+                index++;
+            }
         } else {
+            try {
                 lac = Integer.parseInt(values[index++]);
+            } catch (Exception e) {
+                index++;
+            }
+            try {
                 rssi = Integer.parseInt(values[index++]);
+            } catch (Exception e) {
+                index++;
+            }
         }
         index += 1; // timing advance
+
         if (cid > 0) {
             network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
         }
     }
 
     position.setNetwork(network);
 
+    // Defensive: check if enough fields remain before parse
+    if (index < values.length && !values[index].isEmpty()) {
         position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+    } else {
+        index++;
+    }
+    if (index < values.length && !values[index].isEmpty()) {
         position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
+    } else {
+        index++;
+    }
+    if (index < values.length && !values[index].isEmpty()) {
         position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
+    } else {
+        index++;
+    }
+    if (index < values.length && !values[index].isEmpty()) {
         position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
+    } else {
+        index++;
+    }
 
-        if (values[index].length() == 3) {
-            index += 1; // collaborative network
+    // Defensive: skip collaborative network field if it's present and 3 chars
+    if (index < values.length && values[index].length() == 3) {
+        index += 1;
     }
 
+    // Defensive: only parse date/time if present and not empty
     DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
+    if (index + 1 < values.length && !values[index].isEmpty() && !values[index + 1].isEmpty()) {
         position.setTime(dateFormat.parse(values[index++] + values[index++]));
+    } else {
+        // Not enough data for date/time; bail out with a null position
+        return null;
+    }
 
+    if (index < values.length && !values[index].isEmpty()) {
         position.setLatitude(Double.parseDouble(values[index++]));
+    } else {
+        index++;
+    }
+    if (index < values.length && !values[index].isEmpty()) {
         position.setLongitude(Double.parseDouble(values[index++]));
+    } else {
+        index++;
+    }
+    if (index < values.length && !values[index].isEmpty()) {
         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
+    } else {
+        index++;
+    }
+    if (index < values.length && !values[index].isEmpty()) {
         position.setCourse(Double.parseDouble(values[index++]));
+    } else {
+        index++;
+    }
 
+    if (index < values.length && !values[index].isEmpty()) {
         position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+    } else {
+        index++;
+    }
 
+    if (index < values.length && !values[index].isEmpty()) {
         position.setValid(values[index++].equals("1"));
+    } else {
+        index++;
+    }
 
     return position;
 }
\ No newline at end of file
