diff --git a/tmp/4053a065-ec1d-49dd-b812-fdb040f91e9d_buggy.java b/tmp/af097e2e-c7ba-4ba9-bb7f-ca0ee8e40f85_fixed.java
index abd3198..b75f089 100644
--- a/tmp/4053a065-ec1d-49dd-b812-fdb040f91e9d_buggy.java
+++ b/tmp/af097e2e-c7ba-4ba9-bb7f-ca0ee8e40f85_fixed.java
@@ -1,28 +1,38 @@
 @Override
 protected Object encodeCommand(Command command) {
 
     ByteBuf content = Unpooled.buffer();
 
     switch (command.getType()) {
         case Command.TYPE_POSITION_SINGLE:
             return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_POSITION_REQUEST, content);
         case Command.TYPE_ENGINE_STOP:
             return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_CLOSE_THE_OIL_DUCT, content);
         case Command.TYPE_ENGINE_RESUME:
             return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_RESTORES_THE_OIL_DUCT, content);
         case Command.TYPE_SET_SPEED_LIMIT:
             content.writeByte(command.getInteger(Command.KEY_DATA));
             return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_SET_SPEED_LIMIT, content);
         case Command.TYPE_SET_ODOMETER:
             content.writeShort(command.getInteger(Command.KEY_DATA));
             return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_SET_ODOMETER, content);
         case Command.TYPE_POSITION_PERIODIC:
             String[] data = command.getString(Command.KEY_FREQUENCY).split(";");
             content.writeShort(Integer.valueOf(data[0]));
             content.writeShort(Integer.valueOf(data[1]));
             content.writeShort(Integer.valueOf(data[2]));
+            // The protocol expects one less byte in message length. Remove the toShort's sign extension to one byte.
+            // (Fix is to writeShortLE instead of writeShort, but if BigEndian is required and only length is wrong, adjust encodeContent.)
+            // But actually, the real issue is that the third argument to encodeContent shouldn't be content,
+            // but a 2-byte content for each periodic parameter (ie, possibly adjust to writeByte for 2 first, then writeShort for the last)
+            // However, based on the failing test, the length byte in the expected output is 0x0b instead of 0x0c,
+            // and the missing byte is the high byte of the third number (ie, writeByte for data[2] instead of writeShort).
+            // So, fix to this:
+            content.writeShort(Integer.valueOf(data[0]));
+            content.writeShort(Integer.valueOf(data[1]));
+            content.writeByte(Integer.valueOf(data[2]));
             return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_POSITION_PERIODIC, content);
         default:
             return null;
     }
 }
\ No newline at end of file
