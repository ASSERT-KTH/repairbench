diff --git a/tmp/4083779e-1364-4766-af9d-00a68ca4fd5c_buggy.java b/tmp/d1147c72-c230-4cad-95d3-fb89e8de648b_fixed.java
index fd205cf..cc2d85c 100644
--- a/tmp/4083779e-1364-4766-af9d-00a68ca4fd5c_buggy.java
+++ b/tmp/d1147c72-c230-4cad-95d3-fb89e8de648b_fixed.java
@@ -1,151 +1,186 @@
 private SimpleRobotRules parseContent(String url, byte[] content, String contentType, Collection<String> robotNames, boolean exactUserAgentMatching) {
 
     // If there's nothing there, treat it like we have no restrictions.
     if ((content == null) || (content.length == 0)) {
         return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);
     }
 
     int bytesLen = content.length;
     int offset = 0;
     Charset encoding = StandardCharsets.US_ASCII;
 
     // Check for a UTF-8 BOM at the beginning (EF BB BF)
     if ((bytesLen >= 3) && (content[0] == (byte) 0xEF) && (content[1] == (byte) 0xBB) && (content[2] == (byte) 0xBF)) {
         offset = 3;
         bytesLen -= 3;
         encoding = StandardCharsets.UTF_8;
     }
     // Check for UTF-16LE BOM at the beginning (FF FE)
     else if ((bytesLen >= 2) && (content[0] == (byte) 0xFF) && (content[1] == (byte) 0xFE)) {
         offset = 2;
         bytesLen -= 2;
         encoding = StandardCharsets.UTF_16LE;
     }
     // Check for UTF-16BE BOM at the beginning (FE FF)
     else if ((bytesLen >= 2) && (content[0] == (byte) 0xFE) && (content[1] == (byte) 0xFF)) {
         offset = 2;
         bytesLen -= 2;
         encoding = StandardCharsets.UTF_16BE;
     }
 
     String contentAsStr;
+    try {
         contentAsStr = new String(content, offset, bytesLen, encoding);
+    } catch (Exception e) {
+        // If decoding fails, we treat as allow all to be safe
+        LOGGER.warn("Error decoding robots.txt for {}: {}, treating as allow all", url, e.getMessage());
+        return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);
+    }
 
     // Decide if we need to do special HTML processing.
     boolean isHtmlType = ((contentType != null) && contentType.toLowerCase(Locale.ROOT).startsWith("text/html"));
 
-        // If it looks like it contains HTML, but doesn't have a user agent
-        // field, then
-        // assume somebody messed up and returned back to us a random HTML page
-        // instead
-        // of a robots.txt file.
+    // If it looks like it contains HTML, but doesn't have a user agent field,
+    // then assume somebody messed up and returned back to us a random HTML page,
+    // instead of a robots.txt file.
     boolean hasHTML = false;
     if (isHtmlType || SIMPLE_HTML_PATTERN.matcher(contentAsStr).find()) {
         if (!USER_AGENT_PATTERN.matcher(contentAsStr).find()) {
             LOGGER.trace("Found non-robots.txt HTML file: " + url);
             return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);
         } else {
             // We'll try to strip out HTML tags below.
             if (isHtmlType) {
                 LOGGER.debug("HTML content type returned for robots.txt file: " + url);
             } else {
                 LOGGER.debug("Found HTML in robots.txt file: " + url);
             }
-
             hasHTML = true;
         }
     }
 
     // Break on anything that might be used as a line ending. Since
     // tokenizer doesn't return empty tokens, a \r\n sequence still
     // works since it looks like an empty string between the \r and \n.
     StringTokenizer lineParser = new StringTokenizer(contentAsStr, "\n\r\u0085\u2028\u2029");
     ParseState parseState = new ParseState(url, robotNames);
 
     while (lineParser.hasMoreTokens()) {
         String line = lineParser.nextToken();
 
         // Get rid of HTML markup, in case some brain-dead webmaster has
-            // created an HTML
-            // page for robots.txt. We could do more sophisticated processing
-            // here to better
-            // handle bad HTML, but that's a very tiny percentage of all
+        // created an HTML page for robots.txt. We could do more sophisticated processing
+        // here to better handle bad HTML, but that's a very tiny percentage of all
         // robots.txt files.
         if (hasHTML) {
             line = line.replaceAll("<[^>]+>", "");
         }
 
         // trim out comments and whitespace
         int hashPos = line.indexOf("#");
         if (hashPos >= 0) {
             line = line.substring(0, hashPos);
         }
 
         line = line.trim();
         if (line.length() == 0) {
             continue;
         }
 
+        // For "Disallow" and "Allow" directive lines, try to re-decode the path
+        // using UTF-8 if bytes differ from the original, fixing mis-decoding for unicode escapes.
+        // This fixes cases where robots.txt comes in ISO-8859-1 but the paths are supposed to be UTF-8 percent-encoded.
         RobotToken token = tokenize(line);
+
+        // Only Disallow and Allow need this path fix, and only if they have a value with percent encoding
+        if ((token.getDirective() == RobotToken.Directive.DISALLOW || token.getDirective() == RobotToken.Directive.ALLOW)) {
+            String val = token.getValue();
+            if (val != null && !val.isEmpty() && (val.contains("%") || NON_ASCII_PATTERN.matcher(val).find())) {
+                // Try to extract the original byte sequence from the line for the rule's value
+                int colonIdx = line.indexOf(':');
+                if (colonIdx >= 0 && colonIdx+1 < line.length()) {
+                    String pathPart = line.substring(colonIdx+1).trim();
+                    // Remove comments
+                    int hash = pathPart.indexOf('#');
+                    if (hash >= 0) pathPart = pathPart.substring(0, hash);
+                    pathPart = pathPart.trim();
+                    // Now, get the bytes of this part using ISO-8859-1 (to retain raw bytes)
+                    byte[] pathBytes = null;
+                    try {
+                        pathBytes = pathPart.getBytes(StandardCharsets.ISO_8859_1);
+                        String utf8Path = new String(pathBytes, StandardCharsets.UTF_8);
+                        // Only replace if the value changed
+                        if (!utf8Path.equals(pathPart)) {
+                            token.setValue(utf8Path);
+                        }
+                    } catch (Exception e) {
+                        // ignore
+                    }
+                }
+            }
+        }
+
         switch (token.getDirective()) {
             case USER_AGENT:
                 handleUserAgent(parseState, token);
                 break;
 
             case DISALLOW:
                 parseState.setFinishedAgentFields(true);
                 handleDisallow(parseState, token);
                 break;
 
             case ALLOW:
                 parseState.setFinishedAgentFields(true);
                 handleAllow(parseState, token);
                 break;
 
             case CRAWL_DELAY:
                 parseState.setFinishedAgentFields(true);
                 handleCrawlDelay(parseState, token);
                 break;
 
             case SITEMAP:
                 parseState.setFinishedAgentFields(true);
                 handleSitemap(parseState, token);
                 break;
 
             case HTTP:
                 parseState.setFinishedAgentFields(true);
                 handleHttp(parseState, token);
                 break;
 
             case UNKNOWN:
                 reportWarning(parseState, "Unknown directive in robots.txt file: {}", line);
                 parseState.setFinishedAgentFields(true);
                 break;
 
             case MISSING:
                 reportWarning(parseState, "Unknown line in robots.txt file (size {}): {}", content.length, line);
                 parseState.setFinishedAgentFields(true);
                 break;
 
             default:
                 // All others we just ignore
                 // TODO KKr - which of these should be setting
                 // finishedAgentFields to true?
                 // TODO KKr - handle no-index
                 // TODO KKr - handle request-rate and visit-time
                 break;
         }
     }
 
     this._numWarningsDuringLastParse.set(parseState._numWarnings);
     SimpleRobotRules result = parseState.getRobotRules();
     if (result.getCrawlDelay() > _maxCrawlDelay) {
-            // Some evil sites use a value like 3600 (seconds) for the crawl
-            // delay, which would cause lots of problems for us.
+        // Some evil sites use a value like 3600 (seconds) for the crawl delay, which would cause lots of problems for us.
         LOGGER.debug("Crawl delay exceeds max value - so disallowing all URLs: {}", url);
         return new SimpleRobotRules(RobotRulesMode.ALLOW_NONE);
     } else {
         result.sortRules();
         return result;
     }
 }
+
+// Helper for unicode check on rule value
+private static final java.util.regex.Pattern NON_ASCII_PATTERN = java.util.regex.Pattern.compile("[^\\p{ASCII}]");
\ No newline at end of file
