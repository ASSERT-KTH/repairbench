diff --git a/tmp/58717346-c78a-4cea-a683-ca0c6c0bf2f3_buggy.java b/tmp/e440bb7b-220e-4731-abaa-83ce275e4a0c_fixed.java
index fd205cf..239c11c 100644
--- a/tmp/58717346-c78a-4cea-a683-ca0c6c0bf2f3_buggy.java
+++ b/tmp/e440bb7b-220e-4731-abaa-83ce275e4a0c_fixed.java
@@ -1,151 +1,178 @@
 private SimpleRobotRules parseContent(String url, byte[] content, String contentType, Collection<String> robotNames, boolean exactUserAgentMatching) {
 
     // If there's nothing there, treat it like we have no restrictions.
     if ((content == null) || (content.length == 0)) {
         return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);
     }
 
     int bytesLen = content.length;
     int offset = 0;
     Charset encoding = StandardCharsets.US_ASCII;
 
     // Check for a UTF-8 BOM at the beginning (EF BB BF)
     if ((bytesLen >= 3) && (content[0] == (byte) 0xEF) && (content[1] == (byte) 0xBB) && (content[2] == (byte) 0xBF)) {
         offset = 3;
         bytesLen -= 3;
         encoding = StandardCharsets.UTF_8;
     }
     // Check for UTF-16LE BOM at the beginning (FF FE)
     else if ((bytesLen >= 2) && (content[0] == (byte) 0xFF) && (content[1] == (byte) 0xFE)) {
         offset = 2;
         bytesLen -= 2;
         encoding = StandardCharsets.UTF_16LE;
     }
     // Check for UTF-16BE BOM at the beginning (FE FF)
     else if ((bytesLen >= 2) && (content[0] == (byte) 0xFE) && (content[1] == (byte) 0xFF)) {
         offset = 2;
         bytesLen -= 2;
         encoding = StandardCharsets.UTF_16BE;
     }
 
     String contentAsStr;
+    try {
         contentAsStr = new String(content, offset, bytesLen, encoding);
+    } catch (Exception e) {
+        // If there's an encoding issue, fall back to ISO_8859_1, as robots.txt is often Latin-1 or broken
+        contentAsStr = new String(content, offset, bytesLen, StandardCharsets.ISO_8859_1);
+    }
 
     // Decide if we need to do special HTML processing.
     boolean isHtmlType = ((contentType != null) && contentType.toLowerCase(Locale.ROOT).startsWith("text/html"));
 
     // If it looks like it contains HTML, but doesn't have a user agent
     // field, then
     // assume somebody messed up and returned back to us a random HTML page
     // instead
     // of a robots.txt file.
     boolean hasHTML = false;
     if (isHtmlType || SIMPLE_HTML_PATTERN.matcher(contentAsStr).find()) {
         if (!USER_AGENT_PATTERN.matcher(contentAsStr).find()) {
             LOGGER.trace("Found non-robots.txt HTML file: " + url);
             return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);
         } else {
             // We'll try to strip out HTML tags below.
             if (isHtmlType) {
                 LOGGER.debug("HTML content type returned for robots.txt file: " + url);
             } else {
                 LOGGER.debug("Found HTML in robots.txt file: " + url);
             }
 
             hasHTML = true;
         }
     }
 
     // Break on anything that might be used as a line ending. Since
     // tokenizer doesn't return empty tokens, a \r\n sequence still
     // works since it looks like an empty string between the \r and \n.
     StringTokenizer lineParser = new StringTokenizer(contentAsStr, "\n\r\u0085\u2028\u2029");
     ParseState parseState = new ParseState(url, robotNames);
 
     while (lineParser.hasMoreTokens()) {
         String line = lineParser.nextToken();
 
         // Get rid of HTML markup, in case some brain-dead webmaster has
         // created an HTML
         // page for robots.txt. We could do more sophisticated processing
         // here to better
         // handle bad HTML, but that's a very tiny percentage of all
         // robots.txt files.
         if (hasHTML) {
             line = line.replaceAll("<[^>]+>", "");
         }
 
         // trim out comments and whitespace
         int hashPos = line.indexOf("#");
         if (hashPos >= 0) {
             line = line.substring(0, hashPos);
         }
 
         line = line.trim();
         if (line.length() == 0) {
             continue;
         }
 
+        // Patch: Re-encode Disallow/Allow/Sitemap/HTTP values to UTF-8 if the
+        // original encoding was not UTF-8, so that escaped UTF-8 sequences can be correctly processed.
+        // This is especially important for byte[] inputs in ISO-8859-1.
         RobotToken token = tokenize(line);
+
+        if (token.getDirective() == RobotDirective.DISALLOW ||
+            token.getDirective() == RobotDirective.ALLOW ||
+            token.getDirective() == RobotDirective.SITEMAP ||
+            token.getDirective() == RobotDirective.HTTP) {
+
+            String value = token.getValue();
+            if (value != null && encoding != StandardCharsets.UTF_8) {
+                // Try to decode percent-encoded UTF-8 sequences for matching
+                try {
+                    String utf8Value = new String(value.getBytes(encoding), StandardCharsets.UTF_8);
+                    // Only overwrite if utf8Value is a valid transformation (no unconvertable chars)
+                    token = new RobotToken(token.getDirective(), utf8Value);
+                } catch (Exception e) {
+                    // If conversion fails, leave as is. Ignore intentionally.
+                }
+            }
+        }
+
         switch (token.getDirective()) {
             case USER_AGENT:
             handleUserAgent(parseState, token);
                 break;
 
             case DISALLOW:
             parseState.setFinishedAgentFields(true);
             handleDisallow(parseState, token);
                 break;
 
             case ALLOW:
             parseState.setFinishedAgentFields(true);
             handleAllow(parseState, token);
                 break;
 
             case CRAWL_DELAY:
             parseState.setFinishedAgentFields(true);
             handleCrawlDelay(parseState, token);
                 break;
 
             case SITEMAP:
             parseState.setFinishedAgentFields(true);
             handleSitemap(parseState, token);
                 break;
 
             case HTTP:
             parseState.setFinishedAgentFields(true);
             handleHttp(parseState, token);
                 break;
 
             case UNKNOWN:
             reportWarning(parseState, "Unknown directive in robots.txt file: {}", line);
             parseState.setFinishedAgentFields(true);
                 break;
 
             case MISSING:
             reportWarning(parseState, "Unknown line in robots.txt file (size {}): {}", content.length, line);
             parseState.setFinishedAgentFields(true);
                 break;
 
             default:
                 // All others we just ignore
                 // TODO KKr - which of these should be setting
                 // finishedAgentFields to true?
                 // TODO KKr - handle no-index
                 // TODO KKr - handle request-rate and visit-time
                 break;
         }
     }
 
     this._numWarningsDuringLastParse.set(parseState._numWarnings);
     SimpleRobotRules result = parseState.getRobotRules();
     if (result.getCrawlDelay() > _maxCrawlDelay) {
         // Some evil sites use a value like 3600 (seconds) for the crawl
         // delay, which would cause lots of problems for us.
         LOGGER.debug("Crawl delay exceeds max value - so disallowing all URLs: {}", url);
         return new SimpleRobotRules(RobotRulesMode.ALLOW_NONE);
     } else {
         result.sortRules();
         return result;
     }
 }
\ No newline at end of file
