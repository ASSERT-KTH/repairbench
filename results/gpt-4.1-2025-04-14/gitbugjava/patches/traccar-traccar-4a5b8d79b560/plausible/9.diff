diff --git a/tmp/6c7db9f3-4833-4bb7-aae5-78d4b667833a_buggy.java b/tmp/932422c8-1594-48e0-b123-26a2a8647669_fixed.java
index 1c732f4..38dea30 100644
--- a/tmp/6c7db9f3-4833-4bb7-aae5-78d4b667833a_buggy.java
+++ b/tmp/932422c8-1594-48e0-b123-26a2a8647669_fixed.java
@@ -1,88 +1,108 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
-        sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
+    int first = sentence.indexOf('|');
+    int last = sentence.lastIndexOf('|');
+    if (first < 0 || last < 0 || last <= first) {
+        return null;
+    }
+    sentence = sentence.substring(first + 1, last);
 
     Position position = new Position();
     position.setProtocol(getProtocolName());
 
     for (String entry : sentence.split(",")) {
         int delimiter = entry.indexOf('=');
+        if (delimiter <= 0 || delimiter + 1 >= entry.length()) {
+            continue; // skip malformed entries
+        }
         String key = entry.substring(0, delimiter);
         String value = entry.substring(delimiter + 1);
         switch (key) {
             case "unit":
                 DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
                 if (deviceSession != null) {
                     position.setDeviceId(deviceSession.getDeviceId());
                 }
                 break;
             case "gps_valid":
                 position.setValid(Integer.parseInt(value) != 0);
                 break;
             case "datetime_actual":
                 position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
                 break;
             case "latitude":
                 position.setLatitude(Double.parseDouble(value));
                 break;
             case "longitude":
                 position.setLongitude(Double.parseDouble(value));
                 break;
             case "altitude":
                 position.setAltitude(Double.parseDouble(value));
                 break;
             case "velocity":
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
                 break;
             case "heading":
-                    position.setCourse(Integer.parseInt(value));
+                position.setCourse(Double.parseDouble(value));
                 break;
             case "eventid":
                 position.set(Position.KEY_EVENT, Integer.parseInt(value));
                 break;
             case "mileage":
                 position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
                 break;
+            case "odometer":
+                position.set(Position.KEY_ODOMETER, Long.parseLong(value));
+                break;
             case "satellites":
                 position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                 break;
             case "ignition":
                 position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
                 break;
             case "door":
                 position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
                 break;
             case "arm":
                 position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
                 break;
             case "fuel":
                 position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
                 break;
             case "rpm":
                 position.set(Position.KEY_RPM, Integer.parseInt(value));
                 break;
             case "main_voltage":
                 position.set(Position.KEY_POWER, Double.parseDouble(value));
                 break;
             case "backup_voltage":
                 position.set(Position.KEY_BATTERY, Double.parseDouble(value));
                 break;
             case "analog1":
             case "analog2":
             case "analog3":
                 position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
                 break;
             case "extra1":
             case "extra2":
             case "extra3":
+                position.set(key, value);
+                break;
             default:
                 position.set(key, value);
                 break;
         }
     }
 
+    // Only return position if device id and coordinates are valid
+    if (position.getDeviceId() != 0 && position.getLatitude() != 0.0 && position.getLongitude() != 0.0) {
         return position;
+    } else if (position.getDeviceId() != 0) {
+        // return attributes (no location) for events and status messages
+        return position;
+    }
+    return null;
 }
\ No newline at end of file
