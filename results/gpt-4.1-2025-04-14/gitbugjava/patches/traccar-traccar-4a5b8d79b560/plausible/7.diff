diff --git a/tmp/40290d75-991c-4d86-8fa0-aa5b1907d055_buggy.java b/tmp/fa8fe3c7-14c2-44f5-9dc8-93265ba3fdeb_fixed.java
index 1c732f4..d503d87 100644
--- a/tmp/40290d75-991c-4d86-8fa0-aa5b1907d055_buggy.java
+++ b/tmp/fa8fe3c7-14c2-44f5-9dc8-93265ba3fdeb_fixed.java
@@ -1,88 +1,122 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
-        sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
+
+    int first = sentence.indexOf('|');
+    int last = sentence.lastIndexOf('|');
+    if (first >= 0 && last >= 0 && last > first) {
+        sentence = sentence.substring(first + 1, last);
+    } else {
+        // Fallback: remove start/end delimiters if present
+        sentence = sentence.replaceAll("^\\|", "");
+        sentence = sentence.replaceAll("\\|$", "");
+    }
 
     Position position = new Position();
     position.setProtocol(getProtocolName());
 
+    boolean hasLatitude = false;
+    boolean hasLongitude = false;
+
     for (String entry : sentence.split(",")) {
         int delimiter = entry.indexOf('=');
+        if (delimiter < 0) continue; // skip invalid entries
+
         String key = entry.substring(0, delimiter);
         String value = entry.substring(delimiter + 1);
         switch (key) {
             case "unit":
                 DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
                 if (deviceSession != null) {
                     position.setDeviceId(deviceSession.getDeviceId());
                 }
                 break;
             case "gps_valid":
                 position.setValid(Integer.parseInt(value) != 0);
                 break;
             case "datetime_actual":
                 position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
                 break;
             case "latitude":
                 position.setLatitude(Double.parseDouble(value));
+                hasLatitude = true;
                 break;
             case "longitude":
                 position.setLongitude(Double.parseDouble(value));
+                hasLongitude = true;
                 break;
             case "altitude":
                 position.setAltitude(Double.parseDouble(value));
                 break;
             case "velocity":
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
                 break;
             case "heading":
-                    position.setCourse(Integer.parseInt(value));
+                position.setCourse(Double.parseDouble(value));
                 break;
             case "eventid":
                 position.set(Position.KEY_EVENT, Integer.parseInt(value));
                 break;
             case "mileage":
                 position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
                 break;
             case "satellites":
                 position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                 break;
             case "ignition":
                 position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
                 break;
             case "door":
                 position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
                 break;
             case "arm":
                 position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
                 break;
             case "fuel":
                 position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
                 break;
             case "rpm":
                 position.set(Position.KEY_RPM, Integer.parseInt(value));
                 break;
             case "main_voltage":
                 position.set(Position.KEY_POWER, Double.parseDouble(value));
                 break;
             case "backup_voltage":
                 position.set(Position.KEY_BATTERY, Double.parseDouble(value));
                 break;
             case "analog1":
             case "analog2":
             case "analog3":
                 position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
                 break;
             case "extra1":
             case "extra2":
             case "extra3":
+                // Store as integer for extra keys, not as string
+                position.set(key, Integer.parseInt(value));
+                break;
             default:
+                // Try to store as integer or double if possible, else string
+                try {
+                    if (value.contains(".")) {
+                        position.set(key, Double.parseDouble(value));
+                    } else {
+                        position.set(key, Integer.parseInt(value));
+                    }
+                } catch (NumberFormatException e) {
                     position.set(key, value);
+                }
                 break;
         }
     }
 
+    // Only return position object if both latitude and longitude are present
+    if (hasLatitude && hasLongitude) {
         return position;
+    } else {
+        // Return attributes only
+        return position.getAttributes();
+    }
 }
\ No newline at end of file
