diff --git a/tmp/4de615e7-be3a-4121-b024-139c53284df8_buggy.java b/tmp/f035f42c-f0b8-4051-a6f9-afd0331dba0b_fixed.java
index 1c732f4..cee404a 100644
--- a/tmp/4de615e7-be3a-4121-b024-139c53284df8_buggy.java
+++ b/tmp/f035f42c-f0b8-4051-a6f9-afd0331dba0b_fixed.java
@@ -1,88 +1,110 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
-        sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
+    int firstIdx = sentence.indexOf('|');
+    int lastIdx = sentence.lastIndexOf('|');
+    if (firstIdx >= 0 && lastIdx > firstIdx) {
+        sentence = sentence.substring(firstIdx + 1, lastIdx);
+    }
 
     Position position = new Position();
     position.setProtocol(getProtocolName());
 
+    // set a flag, so we know if we have a device id or not
+    boolean hasDeviceId = false;
+
     for (String entry : sentence.split(",")) {
         int delimiter = entry.indexOf('=');
-            String key = entry.substring(0, delimiter);
-            String value = entry.substring(delimiter + 1);
+        String key;
+        String value;
+        if (delimiter >= 0) {
+            key = entry.substring(0, delimiter);
+            value = entry.substring(delimiter + 1);
+        } else {
+            key = entry;
+            value = "";
+        }
         switch (key) {
             case "unit":
                 DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
                 if (deviceSession != null) {
                     position.setDeviceId(deviceSession.getDeviceId());
+                    hasDeviceId = true;
                 }
                 break;
             case "gps_valid":
                 position.setValid(Integer.parseInt(value) != 0);
                 break;
             case "datetime_actual":
                 position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
                 break;
             case "latitude":
                 position.setLatitude(Double.parseDouble(value));
                 break;
             case "longitude":
                 position.setLongitude(Double.parseDouble(value));
                 break;
             case "altitude":
                 position.setAltitude(Double.parseDouble(value));
                 break;
             case "velocity":
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
                 break;
             case "heading":
-                    position.setCourse(Integer.parseInt(value));
+                position.setCourse(Double.parseDouble(value));
                 break;
             case "eventid":
                 position.set(Position.KEY_EVENT, Integer.parseInt(value));
                 break;
             case "mileage":
                 position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
                 break;
+            case "odometer":
+                position.set(Position.KEY_ODOMETER, Long.parseLong(value));
+                break;
             case "satellites":
                 position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                 break;
             case "ignition":
                 position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
                 break;
             case "door":
                 position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
                 break;
             case "arm":
                 position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
                 break;
             case "fuel":
                 position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
                 break;
             case "rpm":
                 position.set(Position.KEY_RPM, Integer.parseInt(value));
                 break;
             case "main_voltage":
                 position.set(Position.KEY_POWER, Double.parseDouble(value));
                 break;
             case "backup_voltage":
                 position.set(Position.KEY_BATTERY, Double.parseDouble(value));
                 break;
             case "analog1":
             case "analog2":
             case "analog3":
-                    position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
+                position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '1' + 1), Double.parseDouble(value));
                 break;
             case "extra1":
             case "extra2":
             case "extra3":
+                position.set(key, value);
+                break;
             default:
+                if (!key.isEmpty()) {
                     position.set(key, value);
+                }
                 break;
         }
     }
 
-        return position;
+    return hasDeviceId ? position : null;
 }
\ No newline at end of file
