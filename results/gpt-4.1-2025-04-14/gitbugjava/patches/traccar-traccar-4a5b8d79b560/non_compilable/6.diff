diff --git a/tmp/a131f8c4-cfc0-4bfa-8489-fcfc79577a9f_buggy.java b/tmp/d909c5ac-4bf3-414f-9205-3d1af0752485_fixed.java
index 1c732f4..f128e09 100644
--- a/tmp/a131f8c4-cfc0-4bfa-8489-fcfc79577a9f_buggy.java
+++ b/tmp/d909c5ac-4bf3-414f-9205-3d1af0752485_fixed.java
@@ -1,88 +1,110 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
-        sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
+    // Fix: Do not trim trailing | if it's absent, and handle missing | gracefully
+    int first = sentence.indexOf('|');
+    int last = sentence.lastIndexOf('|');
+    if (first >= 0 && last > first) {
+        sentence = sentence.substring(first + 1, last);
+    } else if (first >= 0) {
+        sentence = sentence.substring(first + 1);
+    }
 
     Position position = new Position();
     position.setProtocol(getProtocolName());
 
     for (String entry : sentence.split(",")) {
         int delimiter = entry.indexOf('=');
+        if (delimiter == -1) {
+            continue; // skip malformed entries
+        }
         String key = entry.substring(0, delimiter);
         String value = entry.substring(delimiter + 1);
         switch (key) {
             case "unit":
                 DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
                 if (deviceSession != null) {
                     position.setDeviceId(deviceSession.getDeviceId());
                 }
                 break;
             case "gps_valid":
                 position.setValid(Integer.parseInt(value) != 0);
                 break;
             case "datetime_actual":
+                // Fix: If datetime_actual is "1899/12/30 00:00:00" treat as invalid time
+                if (!value.equals("1899/12/30 00:00:00")) {
                     position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
+                }
                 break;
             case "latitude":
                 position.setLatitude(Double.parseDouble(value));
                 break;
             case "longitude":
                 position.setLongitude(Double.parseDouble(value));
                 break;
             case "altitude":
                 position.setAltitude(Double.parseDouble(value));
                 break;
             case "velocity":
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
                 break;
             case "heading":
-                    position.setCourse(Integer.parseInt(value));
+                position.setCourse(Double.parseDouble(value));
                 break;
             case "eventid":
                 position.set(Position.KEY_EVENT, Integer.parseInt(value));
                 break;
             case "mileage":
                 position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
                 break;
             case "satellites":
                 position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                 break;
             case "ignition":
                 position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
                 break;
             case "door":
                 position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
                 break;
             case "arm":
                 position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
                 break;
             case "fuel":
                 position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
                 break;
             case "rpm":
                 position.set(Position.KEY_RPM, Integer.parseInt(value));
                 break;
             case "main_voltage":
                 position.set(Position.KEY_POWER, Double.parseDouble(value));
                 break;
             case "backup_voltage":
                 position.set(Position.KEY_BATTERY, Double.parseDouble(value));
                 break;
             case "analog1":
             case "analog2":
             case "analog3":
-                    position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
+                // analog1 -> adc1, analog2 -> adc2, etc.
+                position.set(Position.PREFIX_ADC + key.substring(key.length() - 1), Double.parseDouble(value));
                 break;
             case "extra1":
             case "extra2":
             case "extra3":
+                position.set(key, value);
+                break;
             default:
+                // Fix: Do NOT set arbitrary string fields to position, but only as attributes
                 position.set(key, value);
                 break;
         }
     }
 
+    // Fix: If the device id was not set, return null so Traccar doesn't record an incomplete Position
+    if (position.getDeviceId() == 0) {
+        return null;
+    }
+
     return position;
 }
\ No newline at end of file
