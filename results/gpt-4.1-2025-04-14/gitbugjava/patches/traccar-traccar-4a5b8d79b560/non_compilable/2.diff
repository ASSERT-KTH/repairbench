diff --git a/tmp/ee0d27e1-3830-46b5-8a63-f715154858aa_buggy.java b/tmp/56ed316a-bd3f-4b98-80e5-3f5954e9f648_fixed.java
index 1c732f4..36833ff 100644
--- a/tmp/ee0d27e1-3830-46b5-8a63-f715154858aa_buggy.java
+++ b/tmp/56ed316a-bd3f-4b98-80e5-3f5954e9f648_fixed.java
@@ -1,88 +1,111 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
-        sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
+
+    int first = sentence.indexOf('|');
+    int last = sentence.lastIndexOf('|');
+    if (first < 0 || last < 0 || last <= first) {
+        return null;
+    }
+    sentence = sentence.substring(first + 1, last);
 
     Position position = new Position();
     position.setProtocol(getProtocolName());
 
     for (String entry : sentence.split(",")) {
         int delimiter = entry.indexOf('=');
+        if (delimiter < 0) {
+            continue; // skip if '=' not found
+        }
         String key = entry.substring(0, delimiter);
         String value = entry.substring(delimiter + 1);
         switch (key) {
             case "unit":
                 DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
                 if (deviceSession != null) {
                     position.setDeviceId(deviceSession.getDeviceId());
+                } else {
+                    // If device session is not found, don't return position, avoid marking as valid
+                    return null;
                 }
                 break;
             case "gps_valid":
                 position.setValid(Integer.parseInt(value) != 0);
                 break;
             case "datetime_actual":
                 position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
                 break;
             case "latitude":
                 position.setLatitude(Double.parseDouble(value));
                 break;
             case "longitude":
                 position.setLongitude(Double.parseDouble(value));
                 break;
             case "altitude":
                 position.setAltitude(Double.parseDouble(value));
                 break;
             case "velocity":
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
                 break;
             case "heading":
-                    position.setCourse(Integer.parseInt(value));
+                position.setCourse(Double.parseDouble(value));
                 break;
             case "eventid":
                 position.set(Position.KEY_EVENT, Integer.parseInt(value));
                 break;
             case "mileage":
                 position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
                 break;
+            case "odometer": // sometimes present, use as odometer in meters
+                position.set(Position.KEY_ODOMETER, Long.parseLong(value));
+                break;
             case "satellites":
                 position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                 break;
             case "ignition":
                 position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
                 break;
             case "door":
                 position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
                 break;
             case "arm":
                 position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
                 break;
             case "fuel":
                 position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
                 break;
             case "rpm":
                 position.set(Position.KEY_RPM, Integer.parseInt(value));
                 break;
             case "main_voltage":
                 position.set(Position.KEY_POWER, Double.parseDouble(value));
                 break;
             case "backup_voltage":
                 position.set(Position.KEY_BATTERY, Double.parseDouble(value));
                 break;
             case "analog1":
             case "analog2":
             case "analog3":
-                    position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
+                position.set(Position.PREFIX_ADC + String.valueOf(key.charAt(key.length() - 1)), Double.parseDouble(value));
                 break;
-                case "extra1":
-                case "extra2":
-                case "extra3":
             default:
                 position.set(key, value);
                 break;
         }
     }
 
+    // Mark position as valid if latitude/longitude and deviceId are present
+    if (position.getLatitude() != 0 && position.getLongitude() != 0 && position.getDeviceId() != 0) {
+        if (!position.hasValid(Position.KEY_VALID)) {
+            position.setValid(true);
+        }
+        return position;
+    } else if (position.getDeviceId() != 0) {
+        // For attribute-only records
         return position;
+    } else {
+        return null;
+    }
 }
\ No newline at end of file
