diff --git a/tmp/f6b9554f-e770-461a-938b-425646e7c7fa_buggy.java b/tmp/7eb2c65a-9493-4268-9770-566c34f8954e_fixed.java
index 1c732f4..2580d7a 100644
--- a/tmp/f6b9554f-e770-461a-938b-425646e7c7fa_buggy.java
+++ b/tmp/7eb2c65a-9493-4268-9770-566c34f8954e_fixed.java
@@ -1,88 +1,124 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
-        sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
+    int first = sentence.indexOf('|');
+    int last = sentence.lastIndexOf('|');
+
+    // Defensive: Find first '|' and last '|', if not found, use start/end of string
+    if (first == -1) {
+        first = 0;
+    } else {
+        first += 1;
+    }
+    if (last == -1) {
+        last = sentence.length();
+    }
+
+    sentence = sentence.substring(first, last);
 
     Position position = new Position();
     position.setProtocol(getProtocolName());
 
     for (String entry : sentence.split(",")) {
         int delimiter = entry.indexOf('=');
-            String key = entry.substring(0, delimiter);
-            String value = entry.substring(delimiter + 1);
+        // Defensive: skip entries without '='
+        if (delimiter < 0) {
+            continue;
+        }
+        String key = entry.substring(0, delimiter).trim();
+        String value = entry.substring(delimiter + 1).trim();
         switch (key) {
             case "unit":
                 DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
                 if (deviceSession != null) {
                     position.setDeviceId(deviceSession.getDeviceId());
                 }
                 break;
             case "gps_valid":
                 position.setValid(Integer.parseInt(value) != 0);
                 break;
             case "datetime_actual":
                 position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
                 break;
             case "latitude":
                 position.setLatitude(Double.parseDouble(value));
                 break;
             case "longitude":
                 position.setLongitude(Double.parseDouble(value));
                 break;
             case "altitude":
                 position.setAltitude(Double.parseDouble(value));
                 break;
             case "velocity":
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                // Starcom uses kph in this field
+                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
                 break;
             case "heading":
-                    position.setCourse(Integer.parseInt(value));
+                position.setCourse(Double.parseDouble(value));
                 break;
             case "eventid":
                 position.set(Position.KEY_EVENT, Integer.parseInt(value));
                 break;
             case "mileage":
+                // Some records have float mileage
                 position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
                 break;
+            case "odometer":
+                position.set(Position.KEY_ODOMETER, Long.parseLong(value));
+                break;
             case "satellites":
                 position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                 break;
             case "ignition":
                 position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
                 break;
             case "door":
                 position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
                 break;
             case "arm":
                 position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
                 break;
             case "fuel":
                 position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
                 break;
             case "rpm":
                 position.set(Position.KEY_RPM, Integer.parseInt(value));
                 break;
             case "main_voltage":
                 position.set(Position.KEY_POWER, Double.parseDouble(value));
                 break;
             case "backup_voltage":
                 position.set(Position.KEY_BATTERY, Double.parseDouble(value));
                 break;
             case "analog1":
             case "analog2":
             case "analog3":
                 position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
                 break;
             case "extra1":
             case "extra2":
             case "extra3":
+                // These are extra fields, set as attributes, not default
+                position.set(key, value);
+                break;
             default:
                 position.set(key, value);
                 break;
         }
     }
 
+    // If valid could not be set, check for coordinates to set as valid
+    if (!position.hasValid()) {
+        Double lat = position.getLatitude();
+        Double lon = position.getLongitude();
+        position.setValid(lat != null && lon != null && lat != 0.0 && lon != 0.0);
+    }
+
+    if (position.getDeviceId() == null) {
+        return null;
+    }
+
     return position;
 }
\ No newline at end of file
