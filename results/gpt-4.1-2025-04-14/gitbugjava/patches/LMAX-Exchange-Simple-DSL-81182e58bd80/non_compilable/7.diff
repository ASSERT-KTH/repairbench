diff --git a/tmp/dcabe0a2-d976-4b9c-9a72-4882b7432429_buggy.java b/tmp/405b32d7-5d02-42cc-afff-c6190e6a5eb3_fixed.java
index f506479..72a5c59 100644
--- a/tmp/dcabe0a2-d976-4b9c-9a72-4882b7432429_buggy.java
+++ b/tmp/405b32d7-5d02-42cc-afff-c6190e6a5eb3_fixed.java
@@ -1,64 +1,67 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
-            argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
+    argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
+    // Iterate over all params in the group, not just until a param can't consume more
+    for (SimpleDslArg dslArg : groupArg.getOtherArgs())
+    {
         while (!arguments.isEmpty())
         {
             final NameValuePair argument = arguments.peekFirst();
             if (argument == NameValuePair.NULL)
             {
                 arguments.pollFirst();
                 continue;
             }
 
             if (argument.name == null)
             {
                 throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
             }
 
-                final DslArg arg = argsByName.get(argument.name.toLowerCase());
-                if (arg == null)
+            if (!argument.name.equalsIgnoreCase(dslArg.getName()))
             {
                 break;
             }
 
-                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
-                if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
+            final List<String> argValues = valuesByArg.computeIfAbsent(dslArg, k -> new ArrayList<>());
+            if (!argValues.isEmpty() && !dslArg.isAllowMultipleValues())
             {
                 break;
             }
 
-                checkValidValue(arg, argument.value);
+            checkValidValue(dslArg, argument.value);
             argValues.add(argument.value);
             arguments.pollFirst();
         }
+    }
 
     // TODO: this whole thing here is a bit hacky!
     final Map<String, List<String>> valuesByName = new HashMap<>();
     for (final SimpleDslArg simpleDslArg : argsByName.values())
     {
         final SimpleDslParam param = processor.collect(simpleDslArg);
         if (param.hasValue())
         {
             valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
         }
     }
 
     final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
     dslArgs[0] = groupArg.getIdentity();
     System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
     groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
 }
\ No newline at end of file
