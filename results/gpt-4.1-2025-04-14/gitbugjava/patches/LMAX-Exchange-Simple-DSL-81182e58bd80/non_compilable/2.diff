diff --git a/tmp/8de8c74e-4577-41da-a569-7489a89db3f5_buggy.java b/tmp/38e0f103-15c3-4e6a-990f-84b09f6b6e02_fixed.java
index f506479..5bb092b 100644
--- a/tmp/8de8c74e-4577-41da-a569-7489a89db3f5_buggy.java
+++ b/tmp/38e0f103-15c3-4e6a-990f-84b09f6b6e02_fixed.java
@@ -1,64 +1,79 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
-            argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
+    argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
+    // Fix: accumulate all extra parameters that follow immediately after group identity
     while (!arguments.isEmpty())
     {
         final NameValuePair argument = arguments.peekFirst();
         if (argument == NameValuePair.NULL)
         {
             arguments.pollFirst();
             continue;
         }
 
         if (argument.name == null)
         {
             throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
         }
 
+        // Only allow other args for this group, not for some other param that may be coming (stop at other param)
+        if (!argsByName.containsKey(argument.name.toLowerCase()))
+        {
+            break;
+        }
+
         final DslArg arg = argsByName.get(argument.name.toLowerCase());
-                if (arg == null)
-                {
-                    break;
-                }
-
         final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
-                if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
+
+        // For group identity, do not allow more than one value (i.e., do not allow e.g. "group: Joe", "group: Jenny" in the same iteration)
+        if (arg == groupArg.getIdentity())
+        {
+            // only one value allowed for group identity per group instance, stop if already present
+            if (!argValues.isEmpty())
+            {
+                break;
+            }
+        }
+        else
+        {
+            if (!arg.isAllowMultipleValues() && !argValues.isEmpty())
             {
                 break;
             }
+        }
 
         checkValidValue(arg, argument.value);
         argValues.add(argument.value);
         arguments.pollFirst();
     }
 
-            // TODO: this whole thing here is a bit hacky!
+    // Build valuesByName map for this group instance
     final Map<String, List<String>> valuesByName = new HashMap<>();
     for (final SimpleDslArg simpleDslArg : argsByName.values())
     {
         final SimpleDslParam param = processor.collect(simpleDslArg);
         if (param.hasValue())
         {
             valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
         }
     }
 
     final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
     dslArgs[0] = groupArg.getIdentity();
     System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
     groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
 }
\ No newline at end of file
