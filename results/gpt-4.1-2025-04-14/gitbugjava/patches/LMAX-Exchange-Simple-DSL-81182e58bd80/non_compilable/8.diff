diff --git a/tmp/d25f78ae-0aae-41e7-a106-384236da4c6c_buggy.java b/tmp/69f1e1b6-dc36-4d89-89d9-70510e0222b7_fixed.java
index f506479..2208e16 100644
--- a/tmp/d25f78ae-0aae-41e7-a106-384236da4c6c_buggy.java
+++ b/tmp/69f1e1b6-dc36-4d89-89d9-70510e0222b7_fixed.java
@@ -1,64 +1,79 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
-            argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
+    argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
+    // Start of FIX: loop to allow "repeating" over argument blocks for this group
+    outer:
+    while (true)
+    {
+        // Find the first non-consumed argument for the group (otherArgs)
         while (!arguments.isEmpty())
         {
             final NameValuePair argument = arguments.peekFirst();
             if (argument == NameValuePair.NULL)
             {
                 arguments.pollFirst();
                 continue;
             }
 
             if (argument.name == null)
             {
                 throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
             }
 
+            // If the argument matches one of the group's args
             final DslArg arg = argsByName.get(argument.name.toLowerCase());
             if (arg == null)
             {
+                break outer; // No more group arguments for this group
+            }
+
+            if (arg == groupArg.getIdentity())
+            {
+                // If we see the identity argument again, then start a new group occurrence
                 break;
             }
 
             final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
             if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
             {
-                    break;
+                break outer;
             }
 
             checkValidValue(arg, argument.value);
             argValues.add(argument.value);
             arguments.pollFirst();
         }
+        break;
+    }
+    // End of FIX
 
     // TODO: this whole thing here is a bit hacky!
     final Map<String, List<String>> valuesByName = new HashMap<>();
     for (final SimpleDslArg simpleDslArg : argsByName.values())
     {
         final SimpleDslParam param = processor.collect(simpleDslArg);
         if (param.hasValue())
         {
             valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
         }
     }
 
     final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
     dslArgs[0] = groupArg.getIdentity();
     System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
     groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
 }
\ No newline at end of file
