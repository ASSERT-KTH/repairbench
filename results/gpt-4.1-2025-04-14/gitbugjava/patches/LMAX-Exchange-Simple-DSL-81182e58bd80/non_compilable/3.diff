diff --git a/tmp/576ecbe4-bc42-4456-8a47-ffd835b2c074_buggy.java b/tmp/dbfd1b80-3ba5-4de7-8c1d-86e7391f479c_fixed.java
index f506479..fbcdd06 100644
--- a/tmp/576ecbe4-bc42-4456-8a47-ffd835b2c074_buggy.java
+++ b/tmp/dbfd1b80-3ba5-4de7-8c1d-86e7391f479c_fixed.java
@@ -1,64 +1,100 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
     argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
+    // For each group, parse ONLY ONE group instance at a time.
+    // Process one block of parameters, i.e., consume for only this group instance.
+    while (true)
+    {
+        // Values for this group instance
+        final Map<DslArg, List<String>> groupInstanceValues = new HashMap<>();
+        // Parse identity (already consumed above at method entry)
+        groupInstanceValues.put(groupArg.getIdentity(), new ArrayList<>(valuesByArg.getOrDefault(groupArg.getIdentity(), Collections.emptyList())));
+
+        // For each parameter in group(other than identity)
+        boolean parsedAny = false;
+        for (SimpleDslArg arg : groupArg.getOtherArgs())
+        {
+            List<String> argValues = new ArrayList<>();
             while (!arguments.isEmpty())
             {
                 final NameValuePair argument = arguments.peekFirst();
                 if (argument == NameValuePair.NULL)
                 {
                     arguments.pollFirst();
                     continue;
                 }
 
                 if (argument.name == null)
                 {
                     throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
                 }
 
-                final DslArg arg = argsByName.get(argument.name.toLowerCase());
-                if (arg == null)
-                {
-                    break;
-                }
-
-                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
-                if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
+                if (!arg.getName().equalsIgnoreCase(argument.name))
                 {
                     break;
                 }
 
                 checkValidValue(arg, argument.value);
                 argValues.add(argument.value);
                 arguments.pollFirst();
+                parsedAny = true;
+                if (!arg.isAllowMultipleValues())
+                {
+                    break;
+                }
+            }
+            if (!argValues.isEmpty())
+            {
+                groupInstanceValues.put(arg, argValues);
+            }
         }
 
         // TODO: this whole thing here is a bit hacky!
         final Map<String, List<String>> valuesByName = new HashMap<>();
         for (final SimpleDslArg simpleDslArg : argsByName.values())
         {
-                final SimpleDslParam param = processor.collect(simpleDslArg);
-                if (param.hasValue())
+            if (groupInstanceValues.containsKey(simpleDslArg) && !groupInstanceValues.get(simpleDslArg).isEmpty())
             {
-                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
+                valuesByName.put(simpleDslArg.getName().toLowerCase(), groupInstanceValues.get(simpleDslArg));
             }
         }
 
         final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
         dslArgs[0] = groupArg.getIdentity();
         System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
         groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
+
+        // Now check if the next argument is another group identity, otherwise break loop
+        if (!arguments.isEmpty())
+        {
+            final NameValuePair nextArgument = arguments.peekFirst();
+            if (nextArgument == NameValuePair.NULL)
+            {
+                arguments.pollFirst();
+                continue;
+            }
+            if (nextArgument.name != null && groupArg.getIdentity().getName().equalsIgnoreCase(nextArgument.name))
+            {
+                // Start a new instance; parser.consume(groupArg.getIdentity(), ...) must be called as in the original method
+                valuesByArg.clear();
+                processor.consume(groupArg.getIdentity(), arguments);
+                continue;
+            }
+        }
+        break;
+    }
 }
\ No newline at end of file
