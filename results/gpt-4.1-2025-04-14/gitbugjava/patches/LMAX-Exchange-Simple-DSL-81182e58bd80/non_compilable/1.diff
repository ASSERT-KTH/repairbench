diff --git a/tmp/e504a243-5a5e-4f85-905c-33d65963a206_buggy.java b/tmp/08f5d3d9-80b0-4b45-9ee1-e75a3271740d_fixed.java
index f506479..ff26d1e 100644
--- a/tmp/e504a243-5a5e-4f85-905c-33d65963a206_buggy.java
+++ b/tmp/08f5d3d9-80b0-4b45-9ee1-e75a3271740d_fixed.java
@@ -1,64 +1,102 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
+    // Consuming the identity argument for the first group
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
-            argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
+    argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
+    boolean firstGroupParsed = false;
+    while (true)
+    {
+        // For each group instance, collect values for its args
+        final Map<DslArg, List<String>> valuesForThisGroup = new HashMap<>();
+        final SimpleArgumentProcessor groupProcessor = new SimpleArgumentProcessor(valuesForThisGroup, "Did not supply a value for %s in group " + groupArg.getName());
+
+        if (!firstGroupParsed) {
+            // The first group already had its identity argument consumed
+            for (Map.Entry<DslArg, List<String>> entry : valuesByArg.entrySet()) {
+                valuesForThisGroup.put(entry.getKey(), new ArrayList<>(entry.getValue()));
+            }
+            firstGroupParsed = true;
+        } else {
+            // For subsequent groups, require identity arg
+            if (arguments.isEmpty())
+                break;
+
+            final NameValuePair arg0 = arguments.peekFirst();
+            if (arg0 == NameValuePair.NULL || arg0.name == null || !arg0.name.equalsIgnoreCase(groupArg.getIdentity().getName()))
+                break;
+
+            groupProcessor.consume(groupArg.getIdentity(), arguments);
+        }
+
+        // Now try to parse 0..* other args for this group
         while (!arguments.isEmpty())
         {
             final NameValuePair argument = arguments.peekFirst();
             if (argument == NameValuePair.NULL)
             {
                 arguments.pollFirst();
                 continue;
             }
 
             if (argument.name == null)
             {
                 throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
             }
 
             final DslArg arg = argsByName.get(argument.name.toLowerCase());
-                if (arg == null)
+            if (arg == null || arg == groupArg.getIdentity())
             {
+                // either a parameter not belonging to this group or the identity arg, which signals next group
                 break;
             }
 
-                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
+            final List<String> argValues = valuesForThisGroup.computeIfAbsent(arg, k -> new ArrayList<>());
             if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
             {
                 break;
             }
 
             checkValidValue(arg, argument.value);
             argValues.add(argument.value);
             arguments.pollFirst();
         }
 
-            // TODO: this whole thing here is a bit hacky!
+        // build valuesByName for this group
         final Map<String, List<String>> valuesByName = new HashMap<>();
         for (final SimpleDslArg simpleDslArg : argsByName.values())
         {
-                final SimpleDslParam param = processor.collect(simpleDslArg);
+            final SimpleDslParam param = groupProcessor.collect(simpleDslArg);
             if (param.hasValue())
             {
                 valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
             }
         }
 
         final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
         dslArgs[0] = groupArg.getIdentity();
         System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
         groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
+
+        // If the next argument is not a new group, exit, else loop for next group
+        if (arguments.isEmpty())
+            break;
+
+        final NameValuePair next = arguments.peekFirst();
+        if (next == NameValuePair.NULL || next.name == null || !next.name.equalsIgnoreCase(groupArg.getIdentity().getName()))
+            break;
+        // else: loop, will consume identity arg and parse more group parameters
+    }
 }
\ No newline at end of file
