diff --git a/tmp/bdad054d-3678-472b-8c76-73aad14f2330_buggy.java b/tmp/008b6181-dfbc-479e-a79b-45746a33405b_fixed.java
index f506479..99a4925 100644
--- a/tmp/bdad054d-3678-472b-8c76-73aad14f2330_buggy.java
+++ b/tmp/008b6181-dfbc-479e-a79b-45746a33405b_fixed.java
@@ -1,64 +1,106 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
     argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
+    boolean groupStarted = true;
+    while (groupStarted)
+    {
+        groupStarted = false;
+
+        final Map<DslArg, List<String>> groupValuesByArg = new HashMap<>();
+        // Consume group identity
+        processor.consume(groupArg.getIdentity(), arguments);
+        final NameValuePair firstArg = (arguments.isEmpty() ? null : arguments.peekFirst());
+        if (firstArg != null && firstArg != NameValuePair.NULL && firstArg.name != null &&
+            groupArg.getIdentity().getName().equalsIgnoreCase(firstArg.name))
+        {
+            // Group identity value already added
+            groupStarted = true;
+            arguments.pollFirst();
+            groupValuesByArg.put(groupArg.getIdentity(), valuesByArg.get(groupArg.getIdentity()));
+        }
+        else if (!valuesByArg.containsKey(groupArg.getIdentity()))
+        {
+            break;
+        }
+        else
+        {
+            groupStarted = true;
+            groupValuesByArg.put(groupArg.getIdentity(), valuesByArg.get(groupArg.getIdentity()));
+        }
+
         while (!arguments.isEmpty())
         {
             final NameValuePair argument = arguments.peekFirst();
             if (argument == NameValuePair.NULL)
             {
                 arguments.pollFirst();
                 continue;
             }
 
             if (argument.name == null)
             {
                 throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
             }
 
+            // If it's another instance of the group identity parameter, break to allow a new group to be constructed
+            if (argument.name.equalsIgnoreCase(groupArg.getIdentity().getName()))
+            {
+                break;
+            }
+
             final DslArg arg = argsByName.get(argument.name.toLowerCase());
             if (arg == null)
             {
                 break;
             }
-
-                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
+            if (arg == groupArg.getIdentity())
+            {
+                break;
+            }
+            final List<String> argValues = groupValuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
             if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
             {
                 break;
             }
-
             checkValidValue(arg, argument.value);
             argValues.add(argument.value);
             arguments.pollFirst();
         }
 
-            // TODO: this whole thing here is a bit hacky!
         final Map<String, List<String>> valuesByName = new HashMap<>();
         for (final SimpleDslArg simpleDslArg : argsByName.values())
         {
-                final SimpleDslParam param = processor.collect(simpleDslArg);
-                if (param.hasValue())
+            final DslArg k = simpleDslArg;
+            List<String> vals = groupValuesByArg.get(k);
+            if (vals == null)
             {
-                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
+                vals = Collections.emptyList();
+            }
+            if (!vals.isEmpty() || simpleDslArg == groupArg.getIdentity())
+            {
+                valuesByName.put(simpleDslArg.getName().toLowerCase(), vals);
             }
         }
 
         final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
         dslArgs[0] = groupArg.getIdentity();
         System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
         groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
+
+        valuesByArg.clear();
+    }
 }
\ No newline at end of file
