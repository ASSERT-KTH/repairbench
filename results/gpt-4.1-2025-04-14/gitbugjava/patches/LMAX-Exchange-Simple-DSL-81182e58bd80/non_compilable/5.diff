diff --git a/tmp/1243da82-cde4-45b3-9c62-9e12c3b62a1d_buggy.java b/tmp/8bcc2a12-b8eb-4515-96ae-b6a0cf1ec8c8_fixed.java
index f506479..93ec6de 100644
--- a/tmp/1243da82-cde4-45b3-9c62-9e12c3b62a1d_buggy.java
+++ b/tmp/8bcc2a12-b8eb-4515-96ae-b6a0cf1ec8c8_fixed.java
@@ -1,64 +1,99 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
-            argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
+    argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
-            while (!arguments.isEmpty())
-            {
-                final NameValuePair argument = arguments.peekFirst();
-                if (argument == NameValuePair.NULL)
-                {
+    // --- Fixed loop to allow for zero-or-many group instantiations ---
+    while (true) {
+        // group instance valuesByArg for this iteration
+        final Map<DslArg, List<String>> thisGroupValues = new HashMap<>();
+        final SimpleArgumentProcessor thisProcessor = new SimpleArgumentProcessor(thisGroupValues, "Did not supply a value for %s in group " + groupArg.getName());
+        // Each group instance MUST start with the group identity
+        if (arguments.isEmpty())
+            break;
+        NameValuePair argument = arguments.peekFirst();
+        if (argument == NameValuePair.NULL) {
             arguments.pollFirst();
             continue;
         }
-
-                if (argument.name == null)
-                {
+        if (argument.name == null) {
             throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
         }
+        // Must match identity at this moment for valid group
+        if (!argument.name.equalsIgnoreCase(groupArg.getIdentity().getName())) {
+            break;
+        }
+        thisProcessor.consume(groupArg.getIdentity(), arguments);
 
+        // For each possible group argument after identity
+        final Set<String> matchedAlready = new HashSet<>();
+        matchedAlready.add(groupArg.getIdentity().getName().toLowerCase());
+        while (!arguments.isEmpty()) {
+            argument = arguments.peekFirst();
+            if (argument == NameValuePair.NULL) {
+                arguments.pollFirst();
+                continue;
+            }
+            if (argument.name == null) {
+                throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
+            }
             final DslArg arg = argsByName.get(argument.name.toLowerCase());
-                if (arg == null)
-                {
+            if (arg == null || matchedAlready.contains(argument.name.toLowerCase())) {
                 break;
             }
-
-                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
-                if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
-                {
+            final List<String> argValues = thisGroupValues.computeIfAbsent(arg, k -> new ArrayList<>());
+            if (!argValues.isEmpty() && !arg.isAllowMultipleValues()) {
                 break;
             }
-
             checkValidValue(arg, argument.value);
-                argValues.add(argument.value);
+            argValues.addAll(splitValueOnSeparatorIfMultiple(arg, argument.value));
             arguments.pollFirst();
+            matchedAlready.add(argument.name.toLowerCase());
         }
 
-            // TODO: this whole thing here is a bit hacky!
+        // Now collect parameters for this group instance and add to groupsByArg
         final Map<String, List<String>> valuesByName = new HashMap<>();
         for (final SimpleDslArg simpleDslArg : argsByName.values())
         {
-                final SimpleDslParam param = processor.collect(simpleDslArg);
+            final SimpleDslParam param = thisProcessor.collect(simpleDslArg);
             if (param.hasValue())
             {
                 valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
             }
         }
 
         final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
         dslArgs[0] = groupArg.getIdentity();
         System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
         groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
     }
+}
+
+// Helper function to split values correctly for multiple-allowed args
+private List<String> splitValueOnSeparatorIfMultiple(DslArg arg, String value) {
+    if (arg.isAllowMultipleValues()) {
+        // comma-separated list (default separator)
+        String[] split = value.split(",");
+        List<String> list = new ArrayList<>();
+        for (String s : split) {
+            String trimmed = s.trim();
+            if (!trimmed.isEmpty())
+                list.add(trimmed);
+        }
+        return list;
+    } else {
+        return Collections.singletonList(value);
+    }
+}
\ No newline at end of file
