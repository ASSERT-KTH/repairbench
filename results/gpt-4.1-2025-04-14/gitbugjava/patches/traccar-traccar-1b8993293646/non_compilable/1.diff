diff --git a/tmp/7612e1ce-048d-4e51-95dc-8820323dfa8c_buggy.java b/tmp/a6be10f7-a07d-4150-9fc3-c380cc961c8a_fixed.java
index 7374e5f..b4a5173 100644
--- a/tmp/7612e1ce-048d-4e51-95dc-8820323dfa8c_buggy.java
+++ b/tmp/a6be10f7-a07d-4150-9fc3-c380cc961c8a_fixed.java
@@ -1,61 +1,69 @@
 private Object decodeLocationNew(
         Channel channel, SocketAddress remoteAddress, String sentence) {
 
     Parser parser = new Parser(PATTERN_NEW, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     String imei = parser.next();
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
     String index = parser.next();
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
 
     position.setDeviceTime(parser.nextDateTime());
 
     Network network = new Network();
     network.addCellTower(CellTower.from(
             parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
 
     position.set(Position.KEY_BATTERY, parser.nextDouble());
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
     position.set(Position.KEY_STATUS, parser.nextHexInt());
 
-        if (parser.hasNext(5)) {
+    // fix: check A/V marker to decide if it's GPS or WiFi/LBS data
+    if (parser.hasNext() && (parser.nextContent().equals("A") || parser.nextContent().equals("V"))) {
 
         position.setValid(parser.next().equals("A"));
         position.setFixTime(position.getDeviceTime());
         position.set(Position.KEY_SATELLITES, parser.nextInt());
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
         position.setLatitude(parser.nextDouble());
         position.setLongitude(parser.nextDouble());
 
     } else {
 
-            String[] points = parser.next().split("\\|");
+        // WiFi part
+        String wifiString = parser.next();
+        if (wifiString != null && !wifiString.isEmpty()) {
+            String[] points = wifiString.split("\\|");
             for (String point : points) {
                 String[] wifi = point.split(":");
-                String mac = wifi[0].replaceAll("(..)", "$1:");
+                if (wifi.length >= 2) {
+                    String mac = wifi[0].replaceAll("([0-9A-Fa-f]{2})(?!$)", "$1:");
                     network.addWifiAccessPoint(WifiAccessPoint.from(
-                        mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
+                            mac, Integer.parseInt(wifi[1])
+                    ));
+                }
+            }
         }
 
     }
 
     position.setNetwork(network);
 
     DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
     String response = index + ",A03," + dateFormat.format(new Date());
     sendResponse(channel, remoteAddress, imei, response);
 
     return position;
 }
\ No newline at end of file
