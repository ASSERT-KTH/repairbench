diff --git a/tmp/23748ec5-d33c-4a0c-b778-769722aee876_buggy.java b/tmp/b150f266-6a49-4f70-a824-2e9933156740_fixed.java
index acd5eb5..7142153 100644
--- a/tmp/23748ec5-d33c-4a0c-b778-769722aee876_buggy.java
+++ b/tmp/b150f266-6a49-4f70-a824-2e9933156740_fixed.java
@@ -1,32 +1,35 @@
 @Override
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
         trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
         trimTrailing = trimLikeBlock && nextSibling() == null;
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
         Node prev = previousSibling();
         boolean isBlank = isBlank();
         boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
             || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, from re-parenting
             || (prev instanceof Element && ((Element) prev).isBlock())
             ;
         if (couldSkip && isBlank) return;
 
-            if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && isNode(prev, "br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+        // FIX: do not indent before trailing text nodes that contain only whitespace in a block-level element,
+        // and next is null or is <br>.
+        // This ensures trailing space (that will become empty line) is not indented.
+        boolean isTrailingWhiteSpace = isBlank && trimTrailing;
+        boolean specialBr = siblingIndex > 0 && isNode(prev, "br");
+        if ((!isTrailingWhiteSpace && 
+                ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank)
+                || (out.outline() && siblingNodes().size() > 0 && !isBlank)
+                || specialBr)))
             indent(accum, depth, out);
     }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
