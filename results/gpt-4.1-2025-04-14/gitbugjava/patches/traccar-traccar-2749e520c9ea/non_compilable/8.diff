diff --git a/tmp/f1dcda57-f83c-4147-827c-6355d6c57ec0_buggy.java b/tmp/bcadad27-3cd3-4c34-967d-4baa28196953_fixed.java
index 7b9216c..9adaaf5 100644
--- a/tmp/f1dcda57-f83c-4147-827c-6355d6c57ec0_buggy.java
+++ b/tmp/bcadad27-3cd3-4c34-967d-4baa28196953_fixed.java
@@ -1,47 +1,60 @@
 private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
     position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
 
     int battery = buf.readUnsignedByte();
     if (battery <= 100) {
         position.set(Position.KEY_BATTERY_LEVEL, battery);
-        } else if (battery == 0xAA) {
+    }
+    // Important: Charging status byte value can be 0xAA
+    if (battery == 0xAA) {
         position.set(Position.KEY_CHARGE, true);
     }
 
     position.setNetwork(new Network(CellTower.fromCidLac(
             getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
 
     int product = buf.readUnsignedByte();
     int status = buf.readUnsignedShort();
     int alarm = buf.readUnsignedShort();
 
     if (product == 1 || product == 2) {
         if (BitUtil.check(alarm, 0)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
         }
     } else if (product == 3) {
         position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
         if (BitUtil.check(alarm, 1)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
         }
         if (BitUtil.check(alarm, 2)) {
             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
         }
         if (BitUtil.check(alarm, 3)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
         }
     }
 
     position.set(Position.KEY_STATUS, status);
 
+    // Remaining bytes - if present, save as 'gyro' attribute
+    if (buf.readableBytes() > 0) {
+        // Copy all remaining data as a hex string
+        byte[] gyro = new byte[buf.readableBytes()];
+        buf.readBytes(gyro);
+        // Defensive: Only set attribute if data isn't empty
+        if (gyro.length > 0) {
+            position.set("gyro", ByteBufUtil.hexDump(gyro));
+        }
+    }
+
     return position;
 }
\ No newline at end of file
