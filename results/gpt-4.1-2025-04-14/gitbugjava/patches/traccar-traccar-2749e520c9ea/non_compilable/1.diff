diff --git a/tmp/468ecefe-8fcd-4c01-848b-8943fe3bb276_buggy.java b/tmp/e6f43292-25d0-4040-805d-d8f57c5e8837_fixed.java
index 7b9216c..62b496a 100644
--- a/tmp/468ecefe-8fcd-4c01-848b-8943fe3bb276_buggy.java
+++ b/tmp/e6f43292-25d0-4040-805d-d8f57c5e8837_fixed.java
@@ -1,47 +1,68 @@
 private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
     position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
 
     int battery = buf.readUnsignedByte();
     if (battery <= 100) {
         position.set(Position.KEY_BATTERY_LEVEL, battery);
     } else if (battery == 0xAA) {
         position.set(Position.KEY_CHARGE, true);
     }
 
+    // Some older messages may not have cell info
+    if (buf.readableBytes() >= 6) {
         position.setNetwork(new Network(CellTower.fromCidLac(
                 getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
+    }
 
-        int product = buf.readUnsignedByte();
-        int status = buf.readUnsignedShort();
-        int alarm = buf.readUnsignedShort();
+    // In some messages there may not be these fields
+    int product = 0;
+    int status = 0;
+    int alarm = 0;
+    if (buf.readableBytes() >= 5) {
+        product = buf.readUnsignedByte();
+        status = buf.readUnsignedShort();
+        alarm = buf.readUnsignedShort();
 
         if (product == 1 || product == 2) {
             if (BitUtil.check(alarm, 0)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
             }
         } else if (product == 3) {
             position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
             if (BitUtil.check(alarm, 1)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
             }
             if (BitUtil.check(alarm, 2)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
             }
             if (BitUtil.check(alarm, 3)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
             }
         }
 
         position.set(Position.KEY_STATUS, status);
+    }
+
+    // Check for optional extra data (like gyro/hex)
+    // Some Huabao variants (such as acceleration sensors) have extra tail data
+    // We check for a 7-byte block at the tail and expose it as "gyro" hex string attribute
+    if (buf.readableBytes() == 7) {
+        // Save as lowercase hex string
+        StringBuilder gyro = new StringBuilder();
+        for (int i = 0; i < 7; i++) {
+            gyro.append(String.format("%02x", buf.readUnsignedByte()));
+        }
+        position.set("gyro", gyro.toString());
+    }
 
     return position;
 }
\ No newline at end of file
