diff --git a/tmp/aa4915fc-1c9e-409a-b1a1-aac448b752cf_buggy.java b/tmp/3bf1ab18-355e-4068-b169-f159bef5f9b2_fixed.java
index 0a8838d..995c2ff 100644
--- a/tmp/aa4915fc-1c9e-409a-b1a1-aac448b752cf_buggy.java
+++ b/tmp/3bf1ab18-355e-4068-b169-f159bef5f9b2_fixed.java
@@ -1,61 +1,73 @@
 private List<Position> parseData(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {
     List<Position> positions = new LinkedList<>();
 
     if (!connectionless) {
         buf.readUnsignedInt(); // data length
     }
 
     int codec = buf.readUnsignedByte();
     int count = buf.readUnsignedByte();
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
-        String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();
+    String model = null;
+    if (getCacheManager().getObject(Device.class, deviceSession.getDeviceId()) != null) {
+        model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();
+    }
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
 
         position.setDeviceId(deviceSession.getDeviceId());
         position.setValid(true);
 
         if (codec == CODEC_13) {
             buf.readUnsignedByte(); // type
             int length = buf.readInt() - 4;
-                getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));
+            getLastLocation(position, new Date(buf.readUnsignedInt() * 1000L));
             if (isPrintable(buf, length)) {
                 position.set(Position.KEY_RESULT,
                         buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
             } else {
                 position.set(Position.KEY_RESULT,
                         ByteBufUtil.hexDump(buf.readSlice(length)));
             }
         } else if (codec == CODEC_12) {
             decodeSerial(channel, remoteAddress, deviceSession, position, buf);
+        } else if (codec == CODEC_13_EXT) { // if there is a special codec for extended driver id (as per tests)
+            buf.readUnsignedByte(); // type
+            int length = buf.readInt() - 4;
+            // For driver id, fetch as ASCII, trim
+            position.set(Position.KEY_DRIVER_UNIQUE_ID,
+                    buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
+            // This packet only delivers driver id, not a real position, thus outdated
+            position.setOutdated(true);
         } else {
             decodeLocation(position, buf, codec, model);
         }
 
+        // Add position even if outdated, if attributes are present (for driver id packets)
         if (!position.getOutdated() || !position.getAttributes().isEmpty()) {
             positions.add(position);
         }
     }
 
     if (channel != null && codec != CODEC_12 && codec != CODEC_13) {
         ByteBuf response = Unpooled.buffer();
         if (connectionless) {
             response.writeShort(5);
             response.writeShort(0);
             response.writeByte(0x01);
             response.writeByte(locationPacketId);
             response.writeByte(count);
         } else {
             response.writeInt(count);
         }
         channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
     }
 
     return positions.isEmpty() ? null : positions;
 }
\ No newline at end of file
