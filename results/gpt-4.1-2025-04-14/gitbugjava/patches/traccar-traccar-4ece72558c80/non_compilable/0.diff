diff --git a/tmp/7b2eab73-b3c7-4fa6-b485-d7e5f31e6f27_buggy.java b/tmp/2df399cc-d844-4fe2-a0b2-fb648bcbf453_fixed.java
index 0a8838d..638ca6b 100644
--- a/tmp/7b2eab73-b3c7-4fa6-b485-d7e5f31e6f27_buggy.java
+++ b/tmp/2df399cc-d844-4fe2-a0b2-fb648bcbf453_fixed.java
@@ -1,61 +1,71 @@
 private List<Position> parseData(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {
     List<Position> positions = new LinkedList<>();
 
     if (!connectionless) {
         buf.readUnsignedInt(); // data length
     }
 
     int codec = buf.readUnsignedByte();
     int count = buf.readUnsignedByte();
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
-        String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();
+    String model = null;
+    Object deviceObj = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
+    if (deviceObj != null) {
+        Device device = (Device) deviceObj;
+        model = device.getModel();
+    }
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
 
         position.setDeviceId(deviceSession.getDeviceId());
         position.setValid(true);
 
         if (codec == CODEC_13) {
             buf.readUnsignedByte(); // type
             int length = buf.readInt() - 4;
-                getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));
+            getLastLocation(position, new Date(buf.readUnsignedInt() * 1000L));
             if (isPrintable(buf, length)) {
                 position.set(Position.KEY_RESULT,
                         buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
             } else {
                 position.set(Position.KEY_RESULT,
                         ByteBufUtil.hexDump(buf.readSlice(length)));
             }
         } else if (codec == CODEC_12) {
             decodeSerial(channel, remoteAddress, deviceSession, position, buf);
         } else {
             decodeLocation(position, buf, codec, model);
         }
 
-            if (!position.getOutdated() || !position.getAttributes().isEmpty()) {
+        // Fix: Accept positions that have a non-null unique id attribute, even if otherwise they are marked as outdated
+        // (original: if (!position.getOutdated() || !position.getAttributes().isEmpty()))
+        // but we need to accept for CODEC_13 (and similar), where the KEY_DRIVER_UNIQUE_ID is extracted, but location is outdated
+        // So, if position has KEY_DRIVER_UNIQUE_ID, always add
+        if (!position.getOutdated() || !position.getAttributes().isEmpty()
+                || position.getString(Position.KEY_DRIVER_UNIQUE_ID) != null) {
             positions.add(position);
         }
     }
 
     if (channel != null && codec != CODEC_12 && codec != CODEC_13) {
         ByteBuf response = Unpooled.buffer();
         if (connectionless) {
             response.writeShort(5);
             response.writeShort(0);
             response.writeByte(0x01);
             response.writeByte(locationPacketId);
             response.writeByte(count);
         } else {
             response.writeInt(count);
         }
         channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
     }
 
     return positions.isEmpty() ? null : positions;
 }
\ No newline at end of file
