diff --git a/tmp/78eab78f-2196-48d4-b24b-efff47960da2_buggy.java b/tmp/f4a5d760-023e-4cac-9ca1-ea362a065a01_fixed.java
index 30eba92..1b439d8 100644
--- a/tmp/78eab78f-2196-48d4-b24b-efff47960da2_buggy.java
+++ b/tmp/f4a5d760-023e-4cac-9ca1-ea362a065a01_fixed.java
@@ -1,113 +1,237 @@
 private Object decodePosition(
         Channel channel, SocketAddress remoteAddress, String sentence, String id) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
 
     List<Position> positions = new LinkedList<>();
     Position position = null;
     DateBuilder dateBuilder = null;
 
     for (String pair : sentence.split(",")) {
         String[] data = pair.split("[=:]");
-            int key;
-            try {
-                key = Integer.parseInt(data[0], 16);
-            } catch (NumberFormatException e) {
+        if (data.length < 2) {
             continue;
         }
+        int key;
         String value = data[1];
-            if (key == 0x0) {
+        boolean isHexKey = true;
+        try {
+            key = Integer.parseInt(data[0], 16);
+        } catch (NumberFormatException nfe) {
+            // If data[0] is not a valid hex, handle as possible key letters (A, B, ...)
+            isHexKey = false;
+            key = -1; // sentinel, switch on key letter instead.
+        }
+
+        if (isHexKey && key == 0x0) {
             if (position != null) {
                 position.setTime(dateBuilder.getDate());
                 positions.add(position);
             }
             position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             dateBuilder = new DateBuilder(new Date());
-            } else if (position != null) {
+        } else if ((isHexKey && position != null) || (!isHexKey && position != null)) {
+            if (isHexKey) {
                 switch (key) {
                     case 0x11:
                         value = ("000000" + value).substring(value.length());
                         dateBuilder.setDateReverse(
                                 Integer.parseInt(value.substring(0, 2)),
                                 Integer.parseInt(value.substring(2, 4)),
                                 Integer.parseInt(value.substring(4)));
                         break;
                     case 0x10:
                         value = ("00000000" + value).substring(value.length());
                         dateBuilder.setTime(
                                 Integer.parseInt(value.substring(0, 2)),
                                 Integer.parseInt(value.substring(2, 4)),
                                 Integer.parseInt(value.substring(4, 6)),
                                 Integer.parseInt(value.substring(6)) * 10);
                         break;
-                    case 0xA:
+                    case 0xA: // LATITUDE
+                        try {
                             position.setValid(true);
                             position.setLatitude(Double.parseDouble(value));
+                        } catch (NumberFormatException e) {
+                            // ignore invalid latitude
+                        }
                         break;
-                    case 0xB:
+                    case 0xB: // LONGITUDE
+                        try {
                             position.setValid(true);
                             position.setLongitude(Double.parseDouble(value));
+                        } catch (NumberFormatException e) {
+                            // ignore invalid longitude
+                        }
                         break;
                     case 0xC:
+                        try {
                             position.setAltitude(Double.parseDouble(value));
+                        } catch (NumberFormatException e) {
+                            // ignore invalid altitude
+                        }
                         break;
                     case 0xD:
+                        try {
                             position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
+                        } catch (NumberFormatException e) {
+                            // ignore invalid speed
+                        }
                         break;
                     case 0xE:
+                        try {
                             position.setCourse(Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // ignore invalid course
+                        }
                         break;
                     case 0xF:
+                        try {
                             position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // ignore invalid satellites
+                        }
                         break;
                     case 0x12:
+                        try {
                             position.set(Position.KEY_HDOP, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // ignore invalid hdop
+                        }
                         break;
                     case 0x20:
                         position.set(Position.KEY_ACCELERATION, value);
                         break;
                     case 0x24:
+                        try {
                             position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);
+                        } catch (NumberFormatException e) {
+                            // ignore invalid battery
+                        }
                         break;
                     case 0x81:
+                        try {
                             position.set(Position.KEY_RSSI, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // ignore invalid rssi
+                        }
                         break;
                     case 0x82:
+                        try {
                             position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
+                        } catch (NumberFormatException e) {
+                            // ignore invalid device temp
+                        }
                         break;
                     case 0x104:
+                        try {
                             position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // ignore invalid engine load
+                        }
                         break;
                     case 0x105:
+                        try {
                             position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // ignore invalid coolant temp
+                        }
                         break;
                     case 0x10c:
+                        try {
                             position.set(Position.KEY_RPM, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // ignore invalid rpm
+                        }
                         break;
                     case 0x10d:
+                        try {
                             position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                        } catch (NumberFormatException e) {
+                            // ignore invalid obd speed
+                        }
                         break;
                     case 0x111:
+                        try {
                             position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // ignore invalid throttle
+                        }
                         break;
                     default:
                         position.set(Position.PREFIX_IO + key, value);
                         break;
                 }
+            } else {
+                // Key is not hex, fallback to key letter (e.g. "A", "B", "C" ...)
+                switch (data[0]) {
+                    case "A":
+                        try {
+                            position.setValid(true);
+                            position.setLatitude(Double.parseDouble(value));
+                        } catch (NumberFormatException e) {
+                            // ignore
+                        }
+                        break;
+                    case "B":
+                        try {
+                            position.setValid(true);
+                            position.setLongitude(Double.parseDouble(value));
+                        } catch (NumberFormatException e) {
+                            // ignore
+                        }
+                        break;
+                    case "C":
+                        try {
+                            position.setAltitude(Double.parseDouble(value));
+                        } catch (NumberFormatException e) {
+                            // ignore
+                        }
+                        break;
+                    case "D":
+                        try {
+                            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
+                        } catch (NumberFormatException e) {
+                            // ignore
+                        }
+                        break;
+                    case "E":
+                        try {
+                            position.setCourse(Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // ignore
+                        }
+                        break;
+                    case "F":
+                        try {
+                            position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // ignore
+                        }
+                        break;
+                    default:
+                        position.set(Position.PREFIX_IO + data[0], value);
+                        break;
+                }
+            }
         }
     }
 
     if (position != null) {
         if (!position.getValid()) {
             getLastLocation(position, null);
         }
+        if (dateBuilder != null) {
             position.setTime(dateBuilder.getDate());
+        } else {
+            position.setTime(new Date());
+        }
         positions.add(position);
     }
 
     return positions.isEmpty() ? null : positions;
 }
\ No newline at end of file
