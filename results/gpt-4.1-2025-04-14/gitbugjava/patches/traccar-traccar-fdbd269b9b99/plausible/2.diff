diff --git a/tmp/d5a2fa07-bba6-45c8-89d0-38bff97a80f0_buggy.java b/tmp/31daedbc-ab0f-4da5-a4c0-cb1df19c7a4f_fixed.java
index 30eba92..8462df5 100644
--- a/tmp/d5a2fa07-bba6-45c8-89d0-38bff97a80f0_buggy.java
+++ b/tmp/31daedbc-ab0f-4da5-a4c0-cb1df19c7a4f_fixed.java
@@ -1,113 +1,256 @@
 private Object decodePosition(
         Channel channel, SocketAddress remoteAddress, String sentence, String id) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
 
     List<Position> positions = new LinkedList<>();
     Position position = null;
     DateBuilder dateBuilder = null;
 
     for (String pair : sentence.split(",")) {
         String[] data = pair.split("[=:]");
-            int key;
+        if (data.length < 2) {
+            continue;
+        }
+        int key = -1;
+        boolean keyIsHex = false;
         try {
             key = Integer.parseInt(data[0], 16);
-            } catch (NumberFormatException e) {
-                continue;
+            keyIsHex = true;
+        } catch (NumberFormatException hexE) {
+            // Not hexadecimal, try decimal keys for 'A', 'B', 'C', 'D', 'E', 'F'
         }
         String value = data[1];
+        if (!keyIsHex) {
+            // attempt to process plain character keys (A, B, C...) or skip keys we don't recognize
+            String strKey = data[0].trim().toUpperCase();
+            switch (strKey) {
+                case "A":
+                    if (position != null) {
+                        position.setValid(true);
+                        try {
+                            position.setLatitude(Double.parseDouble(value));
+                        } catch (NumberFormatException ex) {
+                            // skip
+                        }
+                    }
+                    continue;
+                case "B":
+                    if (position != null) {
+                        position.setValid(true);
+                        try {
+                            position.setLongitude(Double.parseDouble(value));
+                        } catch (NumberFormatException ex) {
+                            // skip
+                        }
+                    }
+                    continue;
+                case "C":
+                    if (position != null) {
+                        try {
+                            position.setAltitude(Double.parseDouble(value));
+                        } catch (NumberFormatException ex) {
+                            // skip
+                        }
+                    }
+                    continue;
+                case "D":
+                    if (position != null) {
+                        try {
+                            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
+                        } catch (NumberFormatException ex) {
+                            // skip
+                        }
+                    }
+                    continue;
+                case "E":
+                    if (position != null) {
+                        try {
+                            position.setCourse(Integer.parseInt(value));
+                        } catch (NumberFormatException ex) {
+                            // skip
+                        }
+                    }
+                    continue;
+                case "F":
+                    if (position != null) {
+                        try {
+                            position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                        } catch (NumberFormatException ex) {
+                            // skip
+                        }
+                    }
+                    continue;
+                default:
+                    // If non hex and not a known single char key, skip
+                    continue;
+            }
+        }
+        // main hex key handling
         if (key == 0x0) {
             if (position != null) {
+                if (dateBuilder != null) {
                     position.setTime(dateBuilder.getDate());
+                }
                 positions.add(position);
             }
             position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             dateBuilder = new DateBuilder(new Date());
         } else if (position != null) {
             switch (key) {
                 case 0x11:
                     value = ("000000" + value).substring(value.length());
+                    try {
                         dateBuilder.setDateReverse(
                                 Integer.parseInt(value.substring(0, 2)),
                                 Integer.parseInt(value.substring(2, 4)),
                                 Integer.parseInt(value.substring(4)));
+                    } catch (Exception ex) {
+                        // skip
+                    }
                     break;
                 case 0x10:
                     value = ("00000000" + value).substring(value.length());
+                    try {
                         dateBuilder.setTime(
                                 Integer.parseInt(value.substring(0, 2)),
                                 Integer.parseInt(value.substring(2, 4)),
                                 Integer.parseInt(value.substring(4, 6)),
                                 Integer.parseInt(value.substring(6)) * 10);
+                    } catch (Exception ex) {
+                        // skip
+                    }
                     break;
                 case 0xA:
                     position.setValid(true);
+                    try {
                         position.setLatitude(Double.parseDouble(value));
+                    } catch (NumberFormatException ex) {
+                        // skip
+                    }
                     break;
                 case 0xB:
                     position.setValid(true);
+                    try {
                         position.setLongitude(Double.parseDouble(value));
+                    } catch (NumberFormatException ex) {
+                        // skip
+                    }
                     break;
                 case 0xC:
+                    try {
                         position.setAltitude(Double.parseDouble(value));
+                    } catch (NumberFormatException ex) {
+                        // skip
+                    }
                     break;
                 case 0xD:
+                    try {
                         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
+                    } catch (NumberFormatException ex) {
+                        // skip
+                    }
                     break;
                 case 0xE:
+                    try {
                         position.setCourse(Integer.parseInt(value));
+                    } catch (NumberFormatException ex) {
+                        // skip
+                    }
                     break;
                 case 0xF:
+                    try {
                         position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                    } catch (NumberFormatException ex) {
+                        // skip
+                    }
                     break;
                 case 0x12:
+                    try {
                         position.set(Position.KEY_HDOP, Integer.parseInt(value));
+                    } catch (NumberFormatException ex) {
+                        // skip
+                    }
                     break;
                 case 0x20:
                     position.set(Position.KEY_ACCELERATION, value);
                     break;
                 case 0x24:
+                    try {
                         position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);
+                    } catch (NumberFormatException ex) {
+                        // skip
+                    }
                     break;
                 case 0x81:
+                    try {
                         position.set(Position.KEY_RSSI, Integer.parseInt(value));
+                    } catch (NumberFormatException ex) {
+                        // skip
+                    }
                     break;
                 case 0x82:
+                    try {
                         position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
+                    } catch (NumberFormatException ex) {
+                        // skip
+                    }
                     break;
                 case 0x104:
+                    try {
                         position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));
+                    } catch (NumberFormatException ex) {
+                        // skip
+                    }
                     break;
                 case 0x105:
+                    try {
                         position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
+                    } catch (NumberFormatException ex) {
+                        // skip
+                    }
                     break;
                 case 0x10c:
+                    try {
                         position.set(Position.KEY_RPM, Integer.parseInt(value));
+                    } catch (NumberFormatException ex) {
+                        // skip
+                    }
                     break;
                 case 0x10d:
+                    try {
                         position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                    } catch (NumberFormatException ex) {
+                        // skip
+                    }
                     break;
                 case 0x111:
+                    try {
                         position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
+                    } catch (NumberFormatException ex) {
+                        // skip
+                    }
                     break;
                 default:
                     position.set(Position.PREFIX_IO + key, value);
                     break;
             }
         }
     }
 
     if (position != null) {
         if (!position.getValid()) {
             getLastLocation(position, null);
         }
+        if (dateBuilder != null) {
             position.setTime(dateBuilder.getDate());
+        }
         positions.add(position);
     }
 
     return positions.isEmpty() ? null : positions;
 }
\ No newline at end of file
