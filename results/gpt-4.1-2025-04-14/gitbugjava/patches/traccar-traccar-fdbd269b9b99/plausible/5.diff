diff --git a/tmp/641821c4-818a-49be-b335-13058aa56d77_buggy.java b/tmp/4c7e4cda-f243-4ce8-899c-14872c42ec04_fixed.java
index 30eba92..23c201b 100644
--- a/tmp/641821c4-818a-49be-b335-13058aa56d77_buggy.java
+++ b/tmp/4c7e4cda-f243-4ce8-899c-14872c42ec04_fixed.java
@@ -1,113 +1,225 @@
 private Object decodePosition(
         Channel channel, SocketAddress remoteAddress, String sentence, String id) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
 
     List<Position> positions = new LinkedList<>();
     Position position = null;
     DateBuilder dateBuilder = null;
 
     for (String pair : sentence.split(",")) {
-            String[] data = pair.split("[=:]");
-            int key;
-            try {
-                key = Integer.parseInt(data[0], 16);
-            } catch (NumberFormatException e) {
-                continue;
+        String[] data = pair.split("[=:]", 2);  // Only split into 2 parts to avoid errors if value contains "=" or ":"
+        if (data.length < 2) {
+            continue; // skip invalid pairs
         }
+        String keyString = data[0];
         String value = data[1];
+        int key = -1;
+        boolean keyParsed = false;
+        // Try parse key as hex if digits, decimal otherwise, or single char
+        try {
+            key = Integer.parseInt(keyString, 16);
+            keyParsed = true;
+        } catch (NumberFormatException e1) {
+            try {
+                key = Integer.parseInt(keyString); // fallback to decimal
+                keyParsed = true;
+            } catch (NumberFormatException e2) {
+                // Not a number, fallback to single character keys ('A','B',...)
+            }
+        }
+
+        if (keyParsed) {
             if (key == 0x0) {
                 if (position != null) {
-                    position.setTime(dateBuilder.getDate());
+                    if (dateBuilder != null) position.setTime(dateBuilder.getDate());
                     positions.add(position);
                 }
                 position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
                 dateBuilder = new DateBuilder(new Date());
             } else if (position != null) {
                 switch (key) {
                     case 0x11:
                         value = ("000000" + value).substring(value.length());
                         dateBuilder.setDateReverse(
                                 Integer.parseInt(value.substring(0, 2)),
                                 Integer.parseInt(value.substring(2, 4)),
                                 Integer.parseInt(value.substring(4)));
                         break;
                     case 0x10:
                         value = ("00000000" + value).substring(value.length());
                         dateBuilder.setTime(
                                 Integer.parseInt(value.substring(0, 2)),
                                 Integer.parseInt(value.substring(2, 4)),
                                 Integer.parseInt(value.substring(4, 6)),
                                 Integer.parseInt(value.substring(6)) * 10);
                         break;
                     case 0xA:
                         position.setValid(true);
+                        try {
                             position.setLatitude(Double.parseDouble(value));
+                        } catch (NumberFormatException e) {
+                            // ignore invalid values
+                        }
                         break;
                     case 0xB:
                         position.setValid(true);
+                        try {
                             position.setLongitude(Double.parseDouble(value));
+                        } catch (NumberFormatException e) {
+                            // ignore invalid values
+                        }
                         break;
                     case 0xC:
+                        try {
                             position.setAltitude(Double.parseDouble(value));
+                        } catch (NumberFormatException e) {
+                            // ignore invalid values
+                        }
                         break;
                     case 0xD:
+                        try {
                             position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
+                        } catch (NumberFormatException e) {
+                            // ignore invalid values
+                        }
                         break;
                     case 0xE:
+                        try {
                             position.setCourse(Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // ignore invalid values
+                        }
                         break;
                     case 0xF:
+                        try {
                             position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                        }
                         break;
                     case 0x12:
+                        try {
                             position.set(Position.KEY_HDOP, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                        }
                         break;
                     case 0x20:
                         position.set(Position.KEY_ACCELERATION, value);
                         break;
                     case 0x24:
+                        try {
                             position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);
+                        } catch (NumberFormatException e) {
+                        }
                         break;
                     case 0x81:
+                        try {
                             position.set(Position.KEY_RSSI, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                        }
                         break;
                     case 0x82:
+                        try {
                             position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
+                        } catch (NumberFormatException e) {
+                        }
                         break;
                     case 0x104:
+                        try {
                             position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                        }
                         break;
                     case 0x105:
+                        try {
                             position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                        }
                         break;
                     case 0x10c:
+                        try {
                             position.set(Position.KEY_RPM, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                        }
                         break;
                     case 0x10d:
+                        try {
                             position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                        } catch (NumberFormatException e) {
+                        }
                         break;
                     case 0x111:
+                        try {
                             position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                        }
                         break;
                     default:
                         position.set(Position.PREFIX_IO + key, value);
                         break;
                 }
             }
+        } else if (position != null && keyString.length() == 1) {
+            // If not keyParsed and keyString is a single character (likely is "A","B", etc)
+            char letterKey = keyString.charAt(0);
+            switch (letterKey) {
+                case 'A':
+                    position.setValid(true);
+                    try {
+                        position.setLatitude(Double.parseDouble(value));
+                    } catch (NumberFormatException e) {
+                    }
+                    break;
+                case 'B':
+                    position.setValid(true);
+                    try {
+                        position.setLongitude(Double.parseDouble(value));
+                    } catch (NumberFormatException e) {
+                    }
+                    break;
+                case 'C':
+                    try {
+                        position.setAltitude(Double.parseDouble(value));
+                    } catch (NumberFormatException e) {
+                    }
+                    break;
+                case 'D':
+                    try {
+                        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
+                    } catch (NumberFormatException e) {
+                    }
+                    break;
+                case 'E':
+                    try {
+                        position.setCourse(Integer.parseInt(value));
+                    } catch (NumberFormatException e) {
+                    }
+                    break;
+                case 'F':
+                    try {
+                        position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                    } catch (NumberFormatException e) {
+                    }
+                    break;
+                default:
+                    position.set(Position.PREFIX_IO + letterKey, value);
+                    break;
+            }
+        }
+
     }
 
     if (position != null) {
         if (!position.getValid()) {
             getLastLocation(position, null);
         }
-            position.setTime(dateBuilder.getDate());
+        if (dateBuilder != null) position.setTime(dateBuilder.getDate());
         positions.add(position);
     }
 
     return positions.isEmpty() ? null : positions;
 }
\ No newline at end of file
