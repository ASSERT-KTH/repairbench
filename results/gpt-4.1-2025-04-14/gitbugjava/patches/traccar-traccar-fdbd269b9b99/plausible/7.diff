diff --git a/tmp/81a6e425-87d2-41b0-866a-dc7868e181fb_buggy.java b/tmp/898afeff-1a13-44ac-bc88-aff60cd61688_fixed.java
index 30eba92..0b6dd07 100644
--- a/tmp/81a6e425-87d2-41b0-866a-dc7868e181fb_buggy.java
+++ b/tmp/898afeff-1a13-44ac-bc88-aff60cd61688_fixed.java
@@ -1,113 +1,195 @@
 private Object decodePosition(
         Channel channel, SocketAddress remoteAddress, String sentence, String id) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
 
     List<Position> positions = new LinkedList<>();
     Position position = null;
     DateBuilder dateBuilder = null;
 
     for (String pair : sentence.split(",")) {
-            String[] data = pair.split("[=:]");
-            int key;
-            try {
-                key = Integer.parseInt(data[0], 16);
-            } catch (NumberFormatException e) {
+        String[] data = pair.split("[=:]", 2);
+        if (data.length < 2) {
             continue;
         }
+        String keyString = data[0];
         String value = data[1];
-            if (key == 0x0) {
+
+        int key;
+        // Try parsing key as hex first, if fails, try as decimal, if still fails, treat as string key
+        try {
+            key = Integer.parseInt(keyString, 16);
+        } catch (NumberFormatException e1) {
+            try {
+                key = Integer.parseInt(keyString, 10);
+            } catch (NumberFormatException e2) {
+                // Might be letter keys: A, B, C, D, E, F, etc.
+                key = -1;
+            }
+        }
+
+        if (keyString.equalsIgnoreCase("0")) {
             if (position != null) {
+                if (dateBuilder != null) {
                     position.setTime(dateBuilder.getDate());
+                }
                 positions.add(position);
             }
             position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             dateBuilder = new DateBuilder(new Date());
         } else if (position != null) {
-                switch (key) {
-                    case 0x11:
+            if (key == 0x11) {
                 value = ("000000" + value).substring(value.length());
                 dateBuilder.setDateReverse(
                         Integer.parseInt(value.substring(0, 2)),
                         Integer.parseInt(value.substring(2, 4)),
                         Integer.parseInt(value.substring(4)));
-                        break;
-                    case 0x10:
+            } else if (key == 0x10) {
                 value = ("00000000" + value).substring(value.length());
                 dateBuilder.setTime(
                         Integer.parseInt(value.substring(0, 2)),
                         Integer.parseInt(value.substring(2, 4)),
                         Integer.parseInt(value.substring(4, 6)),
                         Integer.parseInt(value.substring(6)) * 10);
-                        break;
-                    case 0xA:
+            } else if (key == 0xA || keyString.equalsIgnoreCase("A")) {
                 position.setValid(true);
+                try {
                     position.setLatitude(Double.parseDouble(value));
-                        break;
-                    case 0xB:
+                } catch (NumberFormatException ignore) {
+                }
+            } else if (key == 0xB || keyString.equalsIgnoreCase("B")) {
                 position.setValid(true);
+                try {
                     position.setLongitude(Double.parseDouble(value));
-                        break;
-                    case 0xC:
+                } catch (NumberFormatException ignore) {
+                }
+            } else if (key == 0xC || keyString.equalsIgnoreCase("C")) {
+                try {
                     position.setAltitude(Double.parseDouble(value));
-                        break;
-                    case 0xD:
+                } catch (NumberFormatException ignore) {
+                }
+            } else if (key == 0xD || keyString.equalsIgnoreCase("D")) {
+                try {
                     position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
-                        break;
-                    case 0xE:
+                } catch (NumberFormatException ignore) {
+                }
+            } else if (key == 0xE || keyString.equalsIgnoreCase("E")) {
+                try {
                     position.setCourse(Integer.parseInt(value));
-                        break;
-                    case 0xF:
+                } catch (NumberFormatException ignore) {
+                }
+            } else if (key == 0xF || keyString.equalsIgnoreCase("F")) {
+                try {
                     position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
-                        break;
-                    case 0x12:
+                } catch (NumberFormatException ignore) {
+                }
+            } else if (key == 0x12) {
+                try {
                     position.set(Position.KEY_HDOP, Integer.parseInt(value));
-                        break;
-                    case 0x20:
+                } catch (NumberFormatException ignore) {
+                }
+            } else if (key == 0x20) {
                 position.set(Position.KEY_ACCELERATION, value);
-                        break;
-                    case 0x24:
+            } else if (key == 0x24) {
+                try {
                     position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);
-                        break;
-                    case 0x81:
+                } catch (NumberFormatException ignore) {
+                }
+            } else if (key == 0x81) {
+                try {
                     position.set(Position.KEY_RSSI, Integer.parseInt(value));
-                        break;
-                    case 0x82:
+                } catch (NumberFormatException ignore) {
+                }
+            } else if (key == 0x82) {
+                try {
                     position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
-                        break;
-                    case 0x104:
+                } catch (NumberFormatException ignore) {
+                }
+            } else if (key == 0x104) {
+                try {
                     position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));
-                        break;
-                    case 0x105:
+                } catch (NumberFormatException ignore) {
+                }
+            } else if (key == 0x105) {
+                try {
                     position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
-                        break;
-                    case 0x10c:
+                } catch (NumberFormatException ignore) {
+                }
+            } else if (key == 0x10c) {
+                try {
                     position.set(Position.KEY_RPM, Integer.parseInt(value));
-                        break;
-                    case 0x10d:
+                } catch (NumberFormatException ignore) {
+                }
+            } else if (key == 0x10d) {
+                try {
                     position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
-                        break;
-                    case 0x111:
+                } catch (NumberFormatException ignore) {
+                }
+            } else if (key == 0x111) {
+                try {
                     position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
-                        break;
-                    default:
-                        position.set(Position.PREFIX_IO + key, value);
-                        break;
+                } catch (NumberFormatException ignore) {
+                }
+            } else if (key == -1) {
+                // Letter or symbolic keys; try as string keys (A, B, C, D, F etc.)
+                // This guard is mostly for cases which the device sends e.g. "A:..." or "B:..."
+                // Already handled above, but fallback here
+                String upperKey = keyString.toUpperCase();
+                if (upperKey.equals("A")) {
+                    position.setValid(true);
+                    try {
+                        position.setLatitude(Double.parseDouble(value));
+                    } catch (NumberFormatException ignore) {
+                    }
+                } else if (upperKey.equals("B")) {
+                    position.setValid(true);
+                    try {
+                        position.setLongitude(Double.parseDouble(value));
+                    } catch (NumberFormatException ignore) {
+                    }
+                } else if (upperKey.equals("C")) {
+                    try {
+                        position.setAltitude(Double.parseDouble(value));
+                    } catch (NumberFormatException ignore) {
+                    }
+                } else if (upperKey.equals("D")) {
+                    try {
+                        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
+                    } catch (NumberFormatException ignore) {
+                    }
+                } else if (upperKey.equals("E")) {
+                    try {
+                        position.setCourse(Integer.parseInt(value));
+                    } catch (NumberFormatException ignore) {
+                    }
+                } else if (upperKey.equals("F")) {
+                    try {
+                        position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                    } catch (NumberFormatException ignore) {
+                    }
+                } else {
+                    position.set(Position.PREFIX_IO + keyString, value);
+                }
+            } else {
+                // Other keys, store as I/O
+                position.set(Position.PREFIX_IO + keyString, value);
             }
         }
     }
 
     if (position != null) {
         if (!position.getValid()) {
             getLastLocation(position, null);
         }
+        if (dateBuilder != null) {
             position.setTime(dateBuilder.getDate());
+        }
         positions.add(position);
     }
 
     return positions.isEmpty() ? null : positions;
 }
\ No newline at end of file
