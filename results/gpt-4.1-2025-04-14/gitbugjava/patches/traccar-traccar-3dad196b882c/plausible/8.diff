diff --git a/tmp/f2109f2a-363d-492e-96dd-80a72ba39529_buggy.java b/tmp/00a27f61-23e7-43fd-8122-0ca8678a0e8c_fixed.java
index c6164f1..5e6cbfd 100644
--- a/tmp/f2109f2a-363d-492e-96dd-80a72ba39529_buggy.java
+++ b/tmp/00a27f61-23e7-43fd-8122-0ca8678a0e8c_fixed.java
@@ -1,116 +1,164 @@
 private Position decodePosition(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     int status = buf.readUnsignedShort();
 
     position.setValid(BitUtil.check(status, 15));
 
     position.set(Position.KEY_STATUS, status);
     position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
     int event = buf.readUnsignedShort();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, event);
 
     String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
     DateBuilder dateBuilder = new DateBuilder()
             .setYear(Integer.parseInt(time.substring(0, 2)))
             .setMonth(Integer.parseInt(time.substring(2, 4)))
             .setDay(Integer.parseInt(time.substring(4, 6)))
             .setHour(Integer.parseInt(time.substring(6, 8)))
             .setMinute(Integer.parseInt(time.substring(8, 10)))
             .setSecond(Integer.parseInt(time.substring(10, 12)));
     position.setTime(dateBuilder.getDate());
 
     position.setLongitude(buf.readInt() * 0.00001);
     position.setLatitude(buf.readInt() * 0.00001);
 
     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
     position.setCourse(buf.readUnsignedShort());
     position.setAltitude(buf.readUnsignedShort());
 
     position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
     Network network = new Network();
 
-        while (buf.readableBytes() > 4) {
+    // Ensure at least 4 bytes remain before reading subtype and length
+    while (buf.readableBytes() >= 4) {
         int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
+        int length = buf.readUnsignedShort();
+
+        // length includes the 4 bytes for subtype and length, so adjustment:
+        int contentLength = length - 4;
+
+        // Defensive check: if not enough data, stop
+        if (contentLength < 0 || buf.readableBytes() < contentLength) {
+            // Not enough bytes to read content, stop parsing to avoid error
+            break;
+        }
+
         switch (subtype) {
             case 0x0001:
+                if (contentLength >= 15) { // bytes accessed in this block
                     int coolantTemperature = buf.readUnsignedByte() - 40;
                     if (coolantTemperature <= 215) {
                         position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                     }
                     int rpm = buf.readUnsignedShort();
                     if (rpm <= 65535) {
                         position.set(Position.KEY_RPM, rpm);
                     }
                     position.set("averageSpeed", buf.readUnsignedByte());
                     buf.readUnsignedShort(); // interval fuel consumption
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                     buf.readUnsignedInt(); // trip id
+                } else {
+                    buf.skipBytes(contentLength);
+                }
                 break;
             case 0x0005:
+                if (contentLength >= 6) {
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                     buf.readUnsignedInt(); // run time
+                } else {
+                    buf.skipBytes(contentLength);
+                }
                 break;
             case 0x0009:
+                if (contentLength > 0 && buf.readableBytes() >= contentLength) {
                     position.set(
-                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                            Position.KEY_VIN, buf.readCharSequence(contentLength, StandardCharsets.US_ASCII).toString());
+                } else {
+                    buf.skipBytes(contentLength);
+                }
                 break;
             case 0x0011:
+                if (contentLength >= 4) {
                     position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                } else {
+                    buf.skipBytes(contentLength);
+                }
                 break;
             case 0x0014:
+                if (contentLength >= 7) {
                     position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                     position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                     position.set("airTemp", buf.readUnsignedByte() - 40);
                     position.set("airFlow", buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                } else {
+                    buf.skipBytes(contentLength);
+                }
                 break;
             case 0x0020:
+                if (contentLength > 0 && buf.readableBytes() >= contentLength) {
                     String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                            contentLength, StandardCharsets.US_ASCII).toString().split("\\+");
                     for (String cell : cells) {
+                        if (!cell.isEmpty()) {
                             String[] values = cell.split("@");
+                            if (values.length == 4) {
                                 network.addCellTower(CellTower.from(
                                         Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                         Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
                             }
+                        }
+                    }
+                } else {
+                    buf.skipBytes(contentLength);
+                }
                 break;
             case 0x0021:
+                if (contentLength > 0 && buf.readableBytes() >= contentLength) {
                     String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                            contentLength, StandardCharsets.US_ASCII).toString().split("\\+");
                     for (String point : points) {
+                        if (!point.isEmpty()) {
                             String[] values = point.split("@");
+                            if (values.length == 2) {
                                 network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
                             }
+                        }
+                    }
+                } else {
+                    buf.skipBytes(contentLength);
+                }
                 break;
             default:
-                    buf.skipBytes(length);
+                buf.skipBytes(contentLength);
                 break;
         }
     }
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+    if ((network.getCellTowers() != null && !network.getCellTowers().isEmpty())
+            || (network.getWifiAccessPoints() != null && !network.getWifiAccessPoints().isEmpty())) {
         position.setNetwork(network);
     }
 
     sendResponse(channel, MSG_POSITION_RSP, index, null);
 
     return position;
 }
\ No newline at end of file
