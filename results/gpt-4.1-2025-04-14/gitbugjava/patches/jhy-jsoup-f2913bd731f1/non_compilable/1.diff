diff --git a/tmp/f0961555-aa65-46d0-b611-5f9bb2ce1c8b_buggy.java b/tmp/990fa4e1-ec13-4329-af2e-73b67e033efc_fixed.java
index 016a7f6..09823bd 100644
--- a/tmp/f0961555-aa65-46d0-b611-5f9bb2ce1c8b_buggy.java
+++ b/tmp/990fa4e1-ec13-4329-af2e-73b67e033efc_fixed.java
@@ -1,29 +1,35 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
         trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
         trimTrailing = trimLikeBlock && nextSibling() == null;
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
         boolean isBlank = isBlank();
         boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
             || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
         if (couldSkip && isBlank) return;
 
         Node prev = previousSibling();
+        // Only indent if NOT between two inline nodes (i.e. no indent for normal inline flow)
+        boolean prevIsInline = prev instanceof Element && !((Element) prev).tag().isBlock();
+        boolean nextIsInline = next instanceof Element && !((Element) next).tag().isBlock();
+        // Don't indent if inside block and both prev and next are inline (fixes spanInBlockTrims test)
         if (
+            (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))
+            ) && !(prevIsInline && nextIsInline)
         )
             indent(accum, depth, out);
     }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
