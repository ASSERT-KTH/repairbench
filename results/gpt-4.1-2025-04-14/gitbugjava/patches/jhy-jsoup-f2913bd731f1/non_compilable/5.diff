diff --git a/tmp/5747f0c0-9c2d-47a2-8539-4ccc8aa87afa_buggy.java b/tmp/254af002-ce78-438b-afe5-84b31c6ebea9_fixed.java
index 016a7f6..680c17b 100644
--- a/tmp/5747f0c0-9c2d-47a2-8539-4ccc8aa87afa_buggy.java
+++ b/tmp/254af002-ce78-438b-afe5-84b31c6ebea9_fixed.java
@@ -1,29 +1,35 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
         trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
         trimTrailing = trimLikeBlock && nextSibling() == null;
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+            || (next instanceof TextNode && (((TextNode) next).isBlank()));
         if (couldSkip && isBlank) return;
 
         Node prev = previousSibling();
+        // Only indent if not in inline context next to block-sibling (like the case in <p>...<span>...</span>)
         if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+            (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank)
+            || (out.outline() && siblingNodes().size() > 0 && !isBlank)
+            || (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))
+        ) {
+            // Do not insert the indent if the next sibling is an inline element
+            Node ns = nextSibling();
+            if (!(ns instanceof Element && !((Element) ns).tag().isBlock())) {
                 indent(accum, depth, out);
             }
+        }
+    }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
