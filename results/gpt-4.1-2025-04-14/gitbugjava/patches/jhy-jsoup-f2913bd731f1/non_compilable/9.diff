diff --git a/tmp/987e44da-c1db-45ff-926d-740913dce2d3_buggy.java b/tmp/6b27755d-4e5e-4140-a740-e7c4f2c51b17_fixed.java
index 016a7f6..94ee757 100644
--- a/tmp/987e44da-c1db-45ff-926d-740913dce2d3_buggy.java
+++ b/tmp/6b27755d-4e5e-4140-a740-e7c4f2c51b17_fixed.java
@@ -1,29 +1,42 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
         trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
-
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+        // Fix: do not trimTrailing when nextSibling() is a span or inline element.
         Node next = nextSibling();
+        if (trimLikeBlock) {
+            if (next == null) {
+                trimTrailing = true;
+            } else if (next instanceof Element) {
+                Element nextEl = (Element) next;
+                if (nextEl.tag().isBlock() || nextEl.tag().formatAsBlock()) {
+                    trimTrailing = true;
+                } else {
+                    trimTrailing = false;
+                }
+            } else {
+                trimTrailing = false;
+            }
+        }
+
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+            || (next instanceof TextNode && (((TextNode) next).isBlank()));
         if (couldSkip && isBlank) return;
 
         Node prev = previousSibling();
         if (
             (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
             (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+            (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))
         )
             indent(accum, depth, out);
     }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
