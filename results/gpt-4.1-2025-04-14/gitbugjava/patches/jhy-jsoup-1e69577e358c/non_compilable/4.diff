diff --git a/tmp/1f15fb88-a423-466d-be18-909c3c9e5e0a_buggy.java b/tmp/6ba3af6b-13ac-4388-84e3-b5a2ed25d07a_fixed.java
index c9c77a4..708bf91 100644
--- a/tmp/1f15fb88-a423-466d-be18-909c3c9e5e0a_buggy.java
+++ b/tmp/6ba3af6b-13ac-4388-84e3-b5a2ed25d07a_fixed.java
@@ -1,35 +1,66 @@
 URL build() {
     try {
         // use the URI class to encode non-ascii in path
+        String path = u.getPath();
+        // if the path contains percent-encodings, we want to preserve them:
+        boolean preservePath = path != null && path.contains("%");
+        if (preservePath) {
+            // Do not decode or re-encode the path, preserve as-is
+            URI uri = new URI(
+                u.getProtocol(),
+                u.getUserInfo(),
+                IDN.toASCII(decodePart(u.getHost())), // puny-code
+                u.getPort(),
+                path,
+                null, null // query and fragment appended later so as not to encode
+            );
+
+            String normUrl = uri.toASCIIString();
+            if (q != null || u.getRef() != null) {
+                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
+                if (q != null) {
+                    sb.append('?');
+                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);
+                }
+                if (u.getRef() != null) {
+                    sb.append('#');
+                    appendToAscii(u.getRef(), false, sb);
+                }
+                normUrl = StringUtil.releaseBuilder(sb);
+            }
+            u = new URL(normUrl);
+            return u;
+        } else {
             URI uri = new URI(
                 u.getProtocol(),
                 u.getUserInfo(),
                 IDN.toASCII(decodePart(u.getHost())), // puny-code
                 u.getPort(),
                 decodePart(u.getPath()),
                 null, null // query and fragment appended later so as not to encode
             );
 
             String normUrl = uri.toASCIIString();
             if (q != null || u.getRef() != null) {
                 StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
                 if (q != null) {
                     sb.append('?');
                     appendToAscii(StringUtil.releaseBuilder(q), true, sb);
                 }
                 if (u.getRef() != null) {
                     sb.append('#');
                     appendToAscii(u.getRef(), false, sb);
                 }
                 normUrl = StringUtil.releaseBuilder(sb);
             }
             u = new URL(normUrl);
             return u;
+        }
     } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
         // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
         // the remote end will be able to handle it, so in prod we just pass the original URL.
         // The UnsupportedEncodingException would never happen as always UTF8
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
\ No newline at end of file
