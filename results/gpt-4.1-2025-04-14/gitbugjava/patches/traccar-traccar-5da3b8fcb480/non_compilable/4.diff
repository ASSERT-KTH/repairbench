diff --git a/tmp/a69c6dd3-87d2-4f2e-b0b4-a3dd756177f8_buggy.java b/tmp/d129cd08-2a21-4f31-a4aa-f4237c69a3b9_fixed.java
index 7c577e7..4a7fe88 100644
--- a/tmp/a69c6dd3-87d2-4f2e-b0b4-a3dd756177f8_buggy.java
+++ b/tmp/d129cd08-2a21-4f31-a4aa-f4237c69a3b9_fixed.java
@@ -1,298 +1,475 @@
 private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));
 
     decodeCoordinates(position, buf);
 
     position.setAltitude(buf.readShort());
     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));
     position.setCourse(buf.readUnsignedShort());
     position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));
 
     if (buf.readableBytes() == 20) {
 
         buf.skipBytes(4); // remaining battery and mileage
         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);
         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
         buf.readUnsignedInt(); // area id
         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
         buf.skipBytes(3); // reserved
 
         return position;
 
     }
 
-        while (buf.readableBytes() > 2) {
+    while (buf.readableBytes() > 1) {
 
         int subtype = buf.readUnsignedByte();
+
+        // Defensive:
+        if (!buf.isReadable()) {
+            break;
+        }
+
         int length = buf.readUnsignedByte();
         int endIndex = buf.readerIndex() + length;
-            String stringValue;
+        String stringValue = null;
         switch (subtype) {
             case 0x01:
+                if (buf.readableBytes() >= 4) {
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                } else {
+                    buf.skipBytes(length);
+                }
                 break;
             case 0x02:
+                if (buf.readableBytes() >= 2) {
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);
+                } else {
+                    buf.skipBytes(length);
+                }
                 break;
             case 0x2b:
+                if (buf.readableBytes() >= 4) {
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
+                } else {
+                    buf.skipBytes(length);
+                }
                 break;
             case 0x30:
+                if (buf.readableBytes() >= 1) {
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                } else {
+                    buf.skipBytes(length);
+                }
                 break;
             case 0x31:
+                if (buf.readableBytes() >= 1) {
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                } else {
+                    buf.skipBytes(length);
+                }
                 break;
             case 0x33:
                 stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
-                    if (stringValue.startsWith("*M00")) {
+                if (stringValue.startsWith("*M00") && stringValue.length() >= 15) {
                     String lockStatus = stringValue.substring(8, 8 + 7);
+                    try {
                         position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);
+                    } catch (NumberFormatException e) {
+                        // ignore parse error
+                    }
                 }
                 break;
             case 0x80:
                 buf.readUnsignedByte(); // content
                 endIndex = buf.writerIndex() - 2;
                 decodeExtension(position, buf, endIndex);
                 break;
             case 0x91:
+                if (length >= 11 && buf.readableBytes() >= 11) {
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
                     position.set(Position.KEY_RPM, buf.readUnsignedShort());
                     position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);
                     position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);
                     position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
                     buf.readUnsignedShort();
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                     buf.readUnsignedShort();
                     buf.readUnsignedInt();
                     buf.readUnsignedShort();
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);
+                    }
+                } else {
+                    buf.skipBytes(length);
+                }
                 break;
             case 0x94:
-                    if (length > 0) {
+                if (length > 0 && buf.readableBytes() >= length) {
                     stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                     position.set(Position.KEY_VIN, stringValue);
+                } else {
+                    buf.skipBytes(length);
                 }
                 break;
             case 0xA7:
+                if (buf.readableBytes() >= 4) {
                     position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
                     position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());
+                } else {
+                    buf.skipBytes(length);
+                }
                 break;
             case 0xAC:
+                if (buf.readableBytes() >= 4) {
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
+                } else {
+                    buf.skipBytes(length);
+                }
                 break;
             case 0xBC:
                 stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                 position.set("driver", stringValue.trim());
                 break;
             case 0xBD:
                 stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                 position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);
                 break;
             case 0xD0:
+                if (buf.readableBytes() >= 4) {
                     long userStatus = buf.readUnsignedInt();
                     if (BitUtil.check(userStatus, 3)) {
                         position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
                     }
+                } else {
+                    buf.skipBytes(length);
+                }
                 break;
             case 0xD3:
+                if (buf.readableBytes() >= 2) {
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
+                } else {
+                    buf.skipBytes(length);
+                }
                 break;
             case 0xD4:
+                if (buf.readableBytes() >= 1) {
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                } else {
+                    buf.skipBytes(length);
+                }
                 break;
             case 0xD5:
-                    if (length == 2) {
+                if (length == 2 && buf.readableBytes() >= 2) {
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
-                    } else {
+                } else if (buf.readableBytes() >= 1) {
                     int count = buf.readUnsignedByte();
                     for (int i = 1; i <= count; i++) {
-                            position.set("lock" + i + "Id", ByteBufUtil.hexDump(buf.readSlice(5)));
-                            position.set("lock" + i + "Card", ByteBufUtil.hexDump(buf.readSlice(5)));
-                            position.set("lock" + i + "Battery", buf.readUnsignedByte());
+                        if (buf.readableBytes() >= 5) position.set("lock" + i + "Id", ByteBufUtil.hexDump(buf.readSlice(5)));
+                        if (buf.readableBytes() >= 5) position.set("lock" + i + "Card", ByteBufUtil.hexDump(buf.readSlice(5)));
+                        if (buf.readableBytes() >= 1) position.set("lock" + i + "Battery", buf.readUnsignedByte());
+                        if (buf.readableBytes() >= 2) {
                             int status = buf.readUnsignedShort();
                             position.set("lock" + i + "Locked", !BitUtil.check(status, 5));
                         }
                     }
+                } else {
+                    buf.skipBytes(length);
+                }
                 break;
             case 0xDA:
+                if (buf.readableBytes() >= 3) {
                     buf.readUnsignedShort(); // string cut count
                     int deviceStatus = buf.readUnsignedByte();
                     position.set("string", BitUtil.check(deviceStatus, 0));
                     position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));
                     position.set("cover", BitUtil.check(deviceStatus, 3));
+                } else {
+                    buf.skipBytes(length);
+                }
                 break;
             case 0xE6:
                 while (buf.readerIndex() < endIndex) {
+                    if (buf.readableBytes() < 1 + 6 + (2 * 3)) break;
                     int sensorIndex = buf.readUnsignedByte();
                     buf.skipBytes(6); // mac
                     position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));
                     position.set("humidity" + sensorIndex, decodeCustomDouble(buf));
                 }
                 break;
             case 0xEB:
+                if (buf.readableBytes() >= 2) {
                     if (buf.getUnsignedShort(buf.readerIndex()) > 200) {
                         Network network = new Network();
                         int mcc = buf.readUnsignedShort();
                         int mnc = buf.readUnsignedByte();
-                        while (buf.readerIndex() < endIndex) {
+                        while (buf.readerIndex() < endIndex && buf.readableBytes() >= 7) {
                             network.addCellTower(CellTower.from(
                                     mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),
                                     buf.readUnsignedByte()));
                         }
                         position.setNetwork(network);
                     } else {
-                        while (buf.readerIndex() < endIndex) {
+                        while (buf.readerIndex() < endIndex && buf.readableBytes() >= 4) {
                             int extendedLength = buf.readUnsignedShort();
                             int extendedType = buf.readUnsignedShort();
                             switch (extendedType) {
                                 case 0x0001:
+                                    if (buf.readableBytes() >= 2) {
                                         position.set("fuel1", buf.readUnsignedShort() * 0.1);
-                                    buf.readUnsignedByte(); // unused
+                                        if (buf.readableBytes() >= 1) buf.readUnsignedByte();
+                                    } else {
+                                        buf.skipBytes(extendedLength - 2);
+                                    }
                                     break;
                                 case 0x0023:
+                                    if (buf.readableBytes() >= 6) {
                                         position.set("fuel2", Double.parseDouble(
                                                 buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));
+                                    } else {
+                                        buf.skipBytes(extendedLength - 2);
+                                    }
                                     break;
                                 case 0x00CE:
+                                    if (buf.readableBytes() >= 2) {
                                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
+                                    } else {
+                                        buf.skipBytes(extendedLength - 2);
+                                    }
                                     break;
                                 case 0x00D8:
+                                    if (buf.readableBytes() >= 9) {
                                         Network network = new Network();
                                         network.addCellTower(CellTower.from(
                                                 buf.readUnsignedShort(), buf.readUnsignedByte(),
                                                 buf.readUnsignedShort(), buf.readUnsignedInt()));
                                         position.setNetwork(network);
+                                    } else {
+                                        buf.skipBytes(extendedLength - 2);
+                                    }
                                     break;
                                 case 0xE1:
+                                    if (buf.readableBytes() >= 1) {
                                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                                    } else {
+                                        buf.skipBytes(extendedLength - 2);
+                                    }
                                     break;
                                 default:
                                     buf.skipBytes(extendedLength - 2);
                                     break;
                             }
                         }
                     }
+                } else {
+                    buf.skipBytes(length);
+                }
                 break;
             case 0xED:
                 stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                 position.set(Position.KEY_CARD, stringValue.trim());
                 break;
             case 0xEE:
+                if (buf.readableBytes() >= 6) {
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                } else {
+                    buf.skipBytes(length);
+                }
                 break;
             case 0xF3:
-                    while (buf.readerIndex() < endIndex) {
+                while (buf.readerIndex() < endIndex && buf.readableBytes() >= 3) {
                     int extendedType = buf.readUnsignedShort();
                     int extendedLength = buf.readUnsignedByte();
                     switch (extendedType) {
                         case 0x0002:
+                            if (buf.readableBytes() >= 2) {
                                 position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
+                            } else {
+                                buf.skipBytes(extendedLength);
+                            }
                             break;
                         case 0x0003:
+                            if (buf.readableBytes() >= 2) {
                                 position.set(Position.KEY_RPM, buf.readUnsignedShort());
+                            } else {
+                                buf.skipBytes(extendedLength);
+                            }
                             break;
                         case 0x0004:
+                            if (buf.readableBytes() >= 2) {
                                 position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
+                            } else {
+                                buf.skipBytes(extendedLength);
+                            }
                             break;
                         case 0x0005:
+                            if (buf.readableBytes() >= 4) {
                                 position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);
+                            } else {
+                                buf.skipBytes(extendedLength);
+                            }
                             break;
                         case 0x0007:
+                            if (buf.readableBytes() >= 2) {
                                 position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);
+                            } else {
+                                buf.skipBytes(extendedLength);
+                            }
                             break;
                         case 0x0008:
+                            if (buf.readableBytes() >= 2) {
                                 position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);
+                            } else {
+                                buf.skipBytes(extendedLength);
+                            }
                             break;
                         case 0x0009:
+                            if (buf.readableBytes() >= 2) {
                                 position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);
+                            } else {
+                                buf.skipBytes(extendedLength);
+                            }
                             break;
                         case 0x000B:
+                            if (buf.readableBytes() >= 2) {
                                 position.set("intakePressure", buf.readUnsignedShort());
+                            } else {
+                                buf.skipBytes(extendedLength);
+                            }
                             break;
                         case 0x000C:
+                            if (buf.readableBytes() >= 2) {
                                 position.set("intakeTemp", buf.readUnsignedShort() - 40);
+                            } else {
+                                buf.skipBytes(extendedLength);
+                            }
                             break;
                         case 0x000D:
+                            if (buf.readableBytes() >= 2) {
                                 position.set("intakeFlow", buf.readUnsignedShort());
+                            } else {
+                                buf.skipBytes(extendedLength);
+                            }
                             break;
                         case 0x000E:
+                            if (buf.readableBytes() >= 2) {
                                 position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);
+                            } else {
+                                buf.skipBytes(extendedLength);
+                            }
                             break;
                         case 0x0050:
+                            if (buf.readableBytes() >= 17) {
                                 position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));
+                            } else {
+                                buf.skipBytes(extendedLength);
+                            }
                             break;
                         case 0x0100:
+                            if (buf.readableBytes() >= 2) {
                                 position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);
+                            } else {
+                                buf.skipBytes(extendedLength);
+                            }
                             break;
                         case 0x0102:
+                            if (buf.readableBytes() >= 2) {
                                 position.set("tripFuel", buf.readUnsignedShort() * 0.1);
+                            } else {
+                                buf.skipBytes(extendedLength);
+                            }
                             break;
                         case 0x0112:
+                            if (buf.readableBytes() >= 2) {
                                 position.set("hardAccelerationCount", buf.readUnsignedShort());
+                            } else {
+                                buf.skipBytes(extendedLength);
+                            }
                             break;
                         case 0x0113:
+                            if (buf.readableBytes() >= 2) {
                                 position.set("hardDecelerationCount", buf.readUnsignedShort());
+                            } else {
+                                buf.skipBytes(extendedLength);
+                            }
                             break;
                         case 0x0114:
+                            if (buf.readableBytes() >= 2) {
                                 position.set("hardCorneringCount", buf.readUnsignedShort());
+                            } else {
+                                buf.skipBytes(extendedLength);
+                            }
                             break;
                         default:
                             buf.skipBytes(extendedLength);
                             break;
                     }
                 }
                 break;
             case 0xFE:
                 if (length == 1) {
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     } else {
+                        buf.skipBytes(length);
+                    }
+                } else if (buf.readableBytes() >= 1) {
                     int mark = buf.readUnsignedByte();
                     if (mark == 0x7C) {
-                            while (buf.readerIndex() < endIndex) {
+                        while (buf.readerIndex() < endIndex && buf.readableBytes() >= 2) {
                             int extendedType = buf.readUnsignedByte();
                             int extendedLength = buf.readUnsignedByte();
                             switch (extendedType) {
                                 case 0x01:
+                                    if (buf.readableBytes() >= 4) {
                                         long alarms = buf.readUnsignedInt();
                                         if (BitUtil.check(alarms, 0)) {
                                             position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                                         }
                                         if (BitUtil.check(alarms, 1)) {
                                             position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                                         }
                                         if (BitUtil.check(alarms, 2)) {
                                             position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                                         }
                                         if (BitUtil.check(alarms, 3)) {
                                             position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);
                                         }
                                         if (BitUtil.check(alarms, 4)) {
                                             position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);
                                         }
+                                    } else {
+                                        buf.skipBytes(extendedLength);
+                                    }
                                     break;
                                 default:
                                     buf.skipBytes(extendedLength);
                                     break;
                             }
                         }
                     }
+                    if (buf.readerIndex() < endIndex && buf.readableBytes() >= 1) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     }
+                } else {
+                    buf.skipBytes(length);
+                }
                 break;
             default:
+                buf.skipBytes(length);
                 break;
         }
+
         buf.readerIndex(endIndex);
     }
 
     return position;
 }
\ No newline at end of file
