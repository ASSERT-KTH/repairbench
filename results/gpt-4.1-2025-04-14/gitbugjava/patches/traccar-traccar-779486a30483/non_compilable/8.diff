diff --git a/tmp/d6626172-6f92-405b-8419-e990956ac49f_buggy.java b/tmp/4b912f07-00ee-4727-92e6-faec93bb7d04_fixed.java
index f591bc6..6afadc2 100644
--- a/tmp/d6626172-6f92-405b-8419-e990956ac49f_buggy.java
+++ b/tmp/4b912f07-00ee-4727-92e6-faec93bb7d04_fixed.java
@@ -1,74 +1,117 @@
 protected Object decodeAvrmc(
         String sentence, Channel channel, SocketAddress remoteAddress) {
 
     Parser parser = new Parser(PATTERN_AVRMC, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     DeviceSession deviceSession =
         getDeviceSession(channel, remoteAddress, parser.next());
     if (deviceSession == null) {
         return null;
     }
 
     String deviceModel = null;
     Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
     if (device != null) {
         deviceModel = device.getModel();
     }
 
     Position position = new Position(getProtocolName());
 
     position.setDeviceId(deviceSession.getDeviceId());
     DateBuilder dateBuilder = new DateBuilder()
             .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
 
     String status = parser.next();
     String upperCaseStatus = status.toUpperCase();
-        position.setValid(upperCaseStatus.equals("A") || upperCaseStatus.equals("R") || upperCaseStatus.equals("P"));
+    // Accept any one-letter status as valid, except for 'V' (void)
+    position.setValid(
+        (status.length() == 1 && !"V".equalsIgnoreCase(status))
+        || upperCaseStatus.equals("A")
+        || upperCaseStatus.equals("R")
+        || upperCaseStatus.equals("P"));
     position.set(Position.KEY_STATUS, status);
 
     position.setLatitude(parser.nextCoordinate());
     position.setLongitude(parser.nextCoordinate());
     position.setSpeed(parser.nextDouble(0));
     position.setCourse(parser.nextDouble(0));
 
     dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
     position.setTime(dateBuilder.getDate());
 
     String event = parser.next();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));
-        position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
+
+    String battery = parser.next(); // can be double or integer or not present
+    if (battery != null) {
+        try {
+            position.set(Position.KEY_BATTERY, Double.parseDouble(battery.replaceAll("\\.", "")) * 0.001);
+        } catch (NumberFormatException e) {
+            // ignore if can't parse, just skip
+        }
+    }
+
     position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
     position.set(Position.KEY_GPS, parser.nextInt());
     position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);
 
     if ("AVL110".equals(deviceModel) || "AVL120".equals(deviceModel)) {
         position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);
     }
 
     Integer lac = parser.nextHexInt();
     Integer cid = parser.nextHexInt();
     Integer mcc = parser.nextInt();
     Integer mnc = parser.nextInt();
-        if (lac != null && cid != null && mcc != null && mnc != null) {
+    if (lac != null && cid != null && mcc != null && mnc != null
+            && (lac != 0 || cid != 0 || mcc != 0 || mnc != 0)) {
         position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));
     }
 
-        parser.next(); // unused
+    // Skip any parameters remaining until the checksum as there may be a variable count of them
+    String lastValue = null;
+    while (parser.hasNext()) {
+        String value = parser.next();
+        if (value.startsWith("*") || (value.length() > 0 && value.charAt(value.length() - 1) == '*')) {
+            lastValue = value;
+            break;
+        }
+        lastValue = value;
+    }
 
-        String checksum = parser.next();
+    // Separate the checksum if necessary
+    String checksum = null;
+    if (lastValue != null) {
+        if (lastValue.contains("*")) {
+            int idx = lastValue.indexOf('*');
+            // Possibility: value before * is a valid field, after * is checksum
+            if (idx == lastValue.length() - 1) { // no characters after star
+                checksum = parser.hasNext() ? parser.next() : "";
+            } else {
+                checksum = lastValue.substring(idx + 1);
+            }
+        } else if (parser.hasNext()) {
+            String possibleChecksum = parser.next();
+            if (possibleChecksum.startsWith("*")) {
+                checksum = possibleChecksum.substring(1);
+            } else {
+                checksum = possibleChecksum;
+            }
+        }
+    }
 
     if (channel != null) {
 
         sendAcknowledge(status, event, checksum, channel, remoteAddress);
 
         String devicePassword = AttributeUtil.getDevicePassword(
                 getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);
         sendEventResponse(event, devicePassword, channel, remoteAddress);
     }
 
     return position;
 }
\ No newline at end of file
