diff --git a/tmp/8469ff46-24df-4bea-995e-49ed03d15e2f_buggy.java b/tmp/76d14c0e-ad07-4437-b334-eb830e0da279_fixed.java
index f591bc6..687c796 100644
--- a/tmp/8469ff46-24df-4bea-995e-49ed03d15e2f_buggy.java
+++ b/tmp/76d14c0e-ad07-4437-b334-eb830e0da279_fixed.java
@@ -1,74 +1,110 @@
 protected Object decodeAvrmc(
         String sentence, Channel channel, SocketAddress remoteAddress) {
 
     Parser parser = new Parser(PATTERN_AVRMC, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     DeviceSession deviceSession =
         getDeviceSession(channel, remoteAddress, parser.next());
     if (deviceSession == null) {
         return null;
     }
 
     String deviceModel = null;
     Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
     if (device != null) {
         deviceModel = device.getModel();
     }
 
     Position position = new Position(getProtocolName());
 
     position.setDeviceId(deviceSession.getDeviceId());
     DateBuilder dateBuilder = new DateBuilder()
             .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
 
     String status = parser.next();
     String upperCaseStatus = status.toUpperCase();
-        position.setValid(upperCaseStatus.equals("A") || upperCaseStatus.equals("R") || upperCaseStatus.equals("P"));
+    // Accept any single letter or digit as valid except 'V'
+    position.setValid((status.length() == 1 && !"V".equalsIgnoreCase(status)));
     position.set(Position.KEY_STATUS, status);
 
     position.setLatitude(parser.nextCoordinate());
     position.setLongitude(parser.nextCoordinate());
     position.setSpeed(parser.nextDouble(0));
     position.setCourse(parser.nextDouble(0));
 
     dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
     position.setTime(dateBuilder.getDate());
 
     String event = parser.next();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));
-        position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
+    String batteryString = parser.next();
+    if (batteryString != null && !batteryString.isEmpty()) {
+        // if contains dot, treat as already in volts, otherwise treat as millivolts
+        double battery;
+        if (batteryString.contains(".")) {
+            try {
+                battery = Double.parseDouble(batteryString);
+            } catch (NumberFormatException e) {
+                battery = 0.0;
+            }
+        } else {
+            try {
+                battery = Double.parseDouble(batteryString) * 0.001;
+            } catch (NumberFormatException e) {
+                battery = 0.0;
+            }
+        }
+        position.set(Position.KEY_BATTERY, battery);
+    }
+
     position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
     position.set(Position.KEY_GPS, parser.nextInt());
     position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);
 
     if ("AVL110".equals(deviceModel) || "AVL120".equals(deviceModel)) {
         position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);
     }
 
-        Integer lac = parser.nextHexInt();
-        Integer cid = parser.nextHexInt();
-        Integer mcc = parser.nextInt();
-        Integer mnc = parser.nextInt();
-        if (lac != null && cid != null && mcc != null && mnc != null) {
+    Integer lac = null, cid = null, mcc = null, mnc = null;
+
+    // These fields may or may not exist depending on the record
+    if (parser.hasNext(4)) {
+        lac = parser.nextHexInt();
+        cid = parser.nextHexInt();
+        mcc = parser.nextInt();
+        mnc = parser.nextInt();
+        if (lac != null && cid != null && mcc != null && mnc != null
+                && (lac != 0 || cid != 0 || mcc != 0 || mnc != 0)) {
             position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));
         }
+    }
 
+    // There may be extra fields before the checksum
+    // Consume until only the checksum remains
+    int remaining = parser.count() - parser.getIndex();
+    if (remaining > 1) {
+        // skip all but last (checksum)
+        for (int i = 0; i < remaining - 1; i++) {
+            parser.next();
+        }
+    } else if (remaining == 1) {
         parser.next(); // unused
+    }
 
     String checksum = parser.next();
 
     if (channel != null) {
 
         sendAcknowledge(status, event, checksum, channel, remoteAddress);
 
         String devicePassword = AttributeUtil.getDevicePassword(
                 getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);
         sendEventResponse(event, devicePassword, channel, remoteAddress);
     }
 
     return position;
 }
\ No newline at end of file
