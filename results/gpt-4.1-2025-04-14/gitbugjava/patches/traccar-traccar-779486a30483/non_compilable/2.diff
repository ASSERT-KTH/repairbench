diff --git a/tmp/55f74232-2d46-4c53-bb2c-49a919e6c5c8_buggy.java b/tmp/478ee488-8986-4406-927d-f3dbb0c6a02d_fixed.java
index f591bc6..5502f02 100644
--- a/tmp/55f74232-2d46-4c53-bb2c-49a919e6c5c8_buggy.java
+++ b/tmp/478ee488-8986-4406-927d-f3dbb0c6a02d_fixed.java
@@ -1,74 +1,97 @@
 protected Object decodeAvrmc(
         String sentence, Channel channel, SocketAddress remoteAddress) {
 
     Parser parser = new Parser(PATTERN_AVRMC, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     DeviceSession deviceSession =
         getDeviceSession(channel, remoteAddress, parser.next());
     if (deviceSession == null) {
         return null;
     }
 
     String deviceModel = null;
     Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
     if (device != null) {
         deviceModel = device.getModel();
     }
 
     Position position = new Position(getProtocolName());
 
     position.setDeviceId(deviceSession.getDeviceId());
     DateBuilder dateBuilder = new DateBuilder()
             .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
 
     String status = parser.next();
     String upperCaseStatus = status.toUpperCase();
-        position.setValid(upperCaseStatus.equals("A") || upperCaseStatus.equals("R") || upperCaseStatus.equals("P"));
+    // Accept *any* single letter/status as valid except 'v'/'V', which means invalid
+    // In original test, both lower- and uppercase are accepted, except 'v'
+    position.setValid(!upperCaseStatus.equals("V"));
     position.set(Position.KEY_STATUS, status);
 
     position.setLatitude(parser.nextCoordinate());
     position.setLongitude(parser.nextCoordinate());
     position.setSpeed(parser.nextDouble(0));
     position.setCourse(parser.nextDouble(0));
 
     dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
     position.setTime(dateBuilder.getDate());
 
     String event = parser.next();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));
-        position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
+
+    // Battery voltage field may use dot, but we need to handle integer values without dot as well
+    String battery = parser.next();
+    Double batteryLevel;
+    try {
+        // Try to parse directly
+        batteryLevel = Double.parseDouble(battery);
+    } catch (NumberFormatException error) {
+        // Try un-dotting: e.g. "3727" => "3.727"
+        if (battery.length() > 3) {
+            batteryLevel = Double.parseDouble(battery.substring(0, battery.length() - 3) + "." + battery.substring(battery.length() - 3));
+        } else {
+            batteryLevel = 0.0;
+        }
+    }
+    position.set(Position.KEY_BATTERY, batteryLevel);
+
     position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
     position.set(Position.KEY_GPS, parser.nextInt());
     position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);
 
     if ("AVL110".equals(deviceModel) || "AVL120".equals(deviceModel)) {
         position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);
     }
 
     Integer lac = parser.nextHexInt();
     Integer cid = parser.nextHexInt();
     Integer mcc = parser.nextInt();
     Integer mnc = parser.nextInt();
-        if (lac != null && cid != null && mcc != null && mnc != null) {
+    if (lac != null && cid != null && mcc != null && mnc != null
+            && (lac != 0 || cid != 0 || mcc != 0 || mnc != 0)) {
         position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));
     }
 
-        parser.next(); // unused
-
-        String checksum = parser.next();
+    // There may be more trailing parameters which should be skipped (see test)
+    // Skip until the last field (checksum)
+    String value = null;
+    while (parser.hasNext()) {
+        value = parser.next();
+    }
+    String checksum = value; // last value is the checksum, as per NMEA/Laipac
 
     if (channel != null) {
 
         sendAcknowledge(status, event, checksum, channel, remoteAddress);
 
         String devicePassword = AttributeUtil.getDevicePassword(
                 getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);
         sendEventResponse(event, devicePassword, channel, remoteAddress);
     }
 
     return position;
 }
\ No newline at end of file
