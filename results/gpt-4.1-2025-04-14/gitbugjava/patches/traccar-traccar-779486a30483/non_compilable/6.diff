diff --git a/tmp/cb676501-c3b4-46a7-92dc-3e136bf44362_buggy.java b/tmp/42ac8b55-bcb5-4d7d-9933-284adc35e5e4_fixed.java
index f591bc6..bfaaa3e 100644
--- a/tmp/cb676501-c3b4-46a7-92dc-3e136bf44362_buggy.java
+++ b/tmp/42ac8b55-bcb5-4d7d-9933-284adc35e5e4_fixed.java
@@ -1,74 +1,136 @@
 protected Object decodeAvrmc(
         String sentence, Channel channel, SocketAddress remoteAddress) {
 
     Parser parser = new Parser(PATTERN_AVRMC, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     DeviceSession deviceSession =
         getDeviceSession(channel, remoteAddress, parser.next());
     if (deviceSession == null) {
         return null;
     }
 
     String deviceModel = null;
     Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
     if (device != null) {
         deviceModel = device.getModel();
     }
 
     Position position = new Position(getProtocolName());
 
     position.setDeviceId(deviceSession.getDeviceId());
     DateBuilder dateBuilder = new DateBuilder()
             .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
 
     String status = parser.next();
     String upperCaseStatus = status.toUpperCase();
+
+    // FIX: The status V (void) must be considered as invalid
+    // Only status A, R, P, a, r, p (Active, Real-time, Panic) should be valid (case insensitive)
+    // All others, including V|v (void), are invalid
     position.setValid(upperCaseStatus.equals("A") || upperCaseStatus.equals("R") || upperCaseStatus.equals("P"));    
+
     position.set(Position.KEY_STATUS, status);
 
     position.setLatitude(parser.nextCoordinate());
     position.setLongitude(parser.nextCoordinate());
     position.setSpeed(parser.nextDouble(0));
     position.setCourse(parser.nextDouble(0));
 
     dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
     position.setTime(dateBuilder.getDate());
 
     String event = parser.next();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));
-        position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
-        position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
-        position.set(Position.KEY_GPS, parser.nextInt());
-        position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);
+    // Battery can be missing or possibly invalid. Add check before parsing
+    String batteryString = parser.next();
+    if (batteryString != null && !batteryString.isEmpty()) {
+        try {
+            // sometimes battery can include ".", sometimes not;
+            // original code tried to strip all '.', but that would cause "3.727" â†’ "3727" which is odd
+            // In fact, the value should be parsed as-is
+            position.set(Position.KEY_BATTERY, Double.parseDouble(batteryString));
+        } catch (NumberFormatException ex) {
+            // skip battery if parsing fails
+        }
+    }
+
+    if (parser.hasNext()) { // Odometer
+        Double odometer = parser.nextDouble();
+        if (odometer != null) {
+            position.set(Position.KEY_ODOMETER, odometer * 1000);
+        }
+    }
+
+    if (parser.hasNext()) { // Gps signal bars
+        Integer gps = parser.nextInt();
+        if (gps != null) {
+            position.set(Position.KEY_GPS, gps);
+        }
+    }
+
+    if (parser.hasNext()) { // Adc1
+        Double adc1 = parser.nextDouble();
+        if (adc1 != null) {
+            position.set(Position.PREFIX_ADC + 1, adc1 * 0.001);
+        }
+    }
 
     if ("AVL110".equals(deviceModel) || "AVL120".equals(deviceModel)) {
-            position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);
+        if (parser.hasNext()) { // Adc2 for AVL110/AVL120
+            Double adc2 = parser.nextDouble();
+            if (adc2 != null) {
+                position.set(Position.PREFIX_ADC + 2, adc2 * 0.001);
+            }
+        }
     }
 
-        Integer lac = parser.nextHexInt();
-        Integer cid = parser.nextHexInt();
-        Integer mcc = parser.nextInt();
-        Integer mnc = parser.nextInt();
-        if (lac != null && cid != null && mcc != null && mnc != null) {
+    Integer lac = null, cid = null, mcc = null, mnc = null;
+
+    if (parser.hasNext()) {
+        lac = parser.nextHexInt();
+    }
+    if (parser.hasNext()) {
+        cid = parser.nextHexInt();
+    }
+    if (parser.hasNext()) {
+        mcc = parser.nextInt();
+    }
+    if (parser.hasNext()) {
+        mnc = parser.nextInt();
+    }
+    if (lac != null && cid != null && mcc != null && mnc != null
+            && (lac != 0 || cid != 0 || mcc != 0 || mnc != 0)) {
         position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));
     }
 
-        parser.next(); // unused
+    // The protocol might have more unused params before checksum, skip until you find the checksum
+    String unused = null;
+    // Keep skipping until the last field (checksum) - which always starts with "*"
+    String checksum = null;
+    while (parser.hasNext()) {
+        String value = parser.next();
+        if (value.startsWith("*")) {
+            checksum = value.replace("*", "");
+            break;
+        }
+        unused = value;
+    }
 
-        String checksum = parser.next();
+    if (checksum == null && unused != null && unused.startsWith("*")) {
+        checksum = unused.replace("*", "");
+    }
 
     if (channel != null) {
-
         sendAcknowledge(status, event, checksum, channel, remoteAddress);
 
         String devicePassword = AttributeUtil.getDevicePassword(
                 getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);
         sendEventResponse(event, devicePassword, channel, remoteAddress);
     }
 
     return position;
 }
\ No newline at end of file
