diff --git a/tmp/7a09c3f6-ab87-4906-99ff-f145c2461efe_buggy.java b/tmp/1ff2735a-9532-4f70-b3d8-eb095ccd2a5a_fixed.java
index 27f2719..904c455 100644
--- a/tmp/7a09c3f6-ab87-4906-99ff-f145c2461efe_buggy.java
+++ b/tmp/1ff2735a-9532-4f70-b3d8-eb095ccd2a5a_fixed.java
@@ -1,90 +1,117 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
 
     if (sentence.startsWith("!1,")) {
         int index = sentence.indexOf(',', 3);
         if (index < 0) {
             index = sentence.length();
         }
-            getDeviceSession(channel, remoteAddress, sentence.substring(3, index));
+        // If device session cannot be found, just return null
+        if (getDeviceSession(channel, remoteAddress, sentence.substring(3, index)) == null) {
+            return null;
+        }
+        // Additional parsing for "!1," type messages if needed, but for now just return null
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
-        if (deviceSession == null || !sentence.matches("![35A-D],.*")) {
+    if (deviceSession == null || !sentence.matches("![35ABCD],.*")) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     String type = sentence.substring(1, 2);
     position.set(Position.KEY_TYPE, type);
 
     if (type.equals("3")) {
 
         getLastLocation(position, null);
 
         position.set(Position.KEY_RESULT, sentence.substring(3));
 
         return position;
 
     } else if (type.equals("5")) {
 
         String[] values = sentence.split(",");
 
         getLastLocation(position, null);
 
+        if (values.length > 1 && !values[1].isEmpty()) {
+            try {
                 position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));
-            if (values.length >= 4) {
+            } catch (NumberFormatException error) {
+                // ignore
+            }
+        }
+        if (values.length >= 4 && !values[3].isEmpty()) {
+            try {
                 position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
+            } catch (NumberFormatException error) {
+                // ignore
+            }
         }
 
+        // For MiniFinder protocol, "!5,<rssi>,V,<battery>" or "!5,<rssi>,V"
         return position;
 
     } else if (type.equals("B") || type.equals("D")) {
 
         Parser parser = new Parser(PATTERN_BD, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));
         position.set(Position.KEY_HDOP, parser.nextDouble(0));
 
         return position;
 
     } else if (type.equals("C")) {
 
         Parser parser = new Parser(PATTERN_C, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
         return position;
 
     } else if (type.equals("A")) {
 
         Parser parser = new Parser(PATTERN_A, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
 
         return position;
 
+    } else if (type.equals("4")) { // handle "!4,..." report phone numbers
+
+        String[] values = sentence.split(",", -1); // allow trailing empty strings
+        // Typical: !4,10,040123,,,1.0,110,0,0S,33
+        if (values.length >= 3) {
+            String phone = values[2];
+            if (!phone.isEmpty()) {
+                position.set("phone1", phone);
+            }
+        }
+        return position;
+
     }
 
     return null;
 }
\ No newline at end of file
