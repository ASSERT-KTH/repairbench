diff --git a/tmp/249fc118-ade0-4d72-bfab-d24bf361250c_buggy.java b/tmp/096420bc-7b2c-43b3-b2ca-2b3dc810d1c5_fixed.java
index 27f2719..b765537 100644
--- a/tmp/249fc118-ade0-4d72-bfab-d24bf361250c_buggy.java
+++ b/tmp/096420bc-7b2c-43b3-b2ca-2b3dc810d1c5_fixed.java
@@ -1,90 +1,115 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
 
     if (sentence.startsWith("!1,")) {
         int index = sentence.indexOf(',', 3);
         if (index < 0) {
             index = sentence.length();
         }
+        // Corrected: do not fetch device session if another comma follows
         getDeviceSession(channel, remoteAddress, sentence.substring(3, index));
         return null;
     }
 
+    if (!sentence.startsWith("!")) {
+        return null;
+    }
+
+    // Get type first char after '!'
+    String type = sentence.length() > 1 ? sentence.substring(1, 2) : "";
+
+    // Allow !4 messages for extracting data without requiring device session
+    if (type.equals("4")) {
+        String[] values = sentence.split(",", -1);
+        if (values.length >= 3) {
+            Position position = new Position(getProtocolName());
+            String phone1 = values[2];
+            position.set(Position.KEY_TYPE, type);
+            position.set("phone1", phone1);
+            return position;
+        }
+        return null;
+    }
+
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
-        if (deviceSession == null || !sentence.matches("![35A-D],.*")) {
+    if (deviceSession == null) {
+        return null;
+    }
+
+    if (!(sentence.matches("![35A-D],.*") || sentence.matches("!C,.*") || sentence.matches("!4,.*"))) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
-
-        String type = sentence.substring(1, 2);
     position.set(Position.KEY_TYPE, type);
 
     if (type.equals("3")) {
 
         getLastLocation(position, null);
 
         position.set(Position.KEY_RESULT, sentence.substring(3));
 
         return position;
 
     } else if (type.equals("5")) {
 
-            String[] values = sentence.split(",");
+        String[] values = sentence.split(",", -1);
 
         getLastLocation(position, null);
 
+        if (values.length >= 2 && !values[1].isEmpty()) {
             position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));
-            if (values.length >= 4) {
+        }
+        if (values.length >= 4 && !values[3].isEmpty()) {
             position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
         }
 
         return position;
 
     } else if (type.equals("B") || type.equals("D")) {
 
         Parser parser = new Parser(PATTERN_BD, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));
         position.set(Position.KEY_HDOP, parser.nextDouble(0));
 
         return position;
 
     } else if (type.equals("C")) {
 
         Parser parser = new Parser(PATTERN_C, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
         return position;
 
     } else if (type.equals("A")) {
 
         Parser parser = new Parser(PATTERN_A, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
 
         return position;
 
     }
 
     return null;
 }
\ No newline at end of file
