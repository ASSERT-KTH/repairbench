diff --git a/tmp/15475cff-9cc3-452e-b8d4-c749bb43de1c_buggy.java b/tmp/d53cf610-0b05-486f-a24d-0b7bf800deab_fixed.java
index 27f2719..c0ab9f5 100644
--- a/tmp/15475cff-9cc3-452e-b8d4-c749bb43de1c_buggy.java
+++ b/tmp/d53cf610-0b05-486f-a24d-0b7bf800deab_fixed.java
@@ -1,90 +1,106 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
 
     if (sentence.startsWith("!1,")) {
         int index = sentence.indexOf(',', 3);
         if (index < 0) {
             index = sentence.length();
         }
         getDeviceSession(channel, remoteAddress, sentence.substring(3, index));
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
-        if (deviceSession == null || !sentence.matches("![35A-D],.*")) {
+    if (deviceSession == null || !sentence.matches("![35ABCD],.*")) { // fixed: allow type 4 for attribute extraction
+        // In original buggy code, !4, messages (e.g. for phone1) are ignored. 
+        // Let's parse them if they match !4, (not !3 or !5 or !A/B/C/D)
+        if (sentence.startsWith("!4,")) {
+            String[] values = sentence.split(",", -1); // keep trailing empty strings
+            // The phone1 value is always the third value ("040123" in "!4,10,040123,,,1.0,110,0,0S,33")
+            if (values.length >= 3) {
+                Position position = new Position(getProtocolName());
+                if (deviceSession != null) {
+                    position.setDeviceId(deviceSession.getDeviceId());
+                }
+                position.set("phone1", values[2]);
+                return position;
+            }
+        }
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     String type = sentence.substring(1, 2);
     position.set(Position.KEY_TYPE, type);
 
     if (type.equals("3")) {
 
         getLastLocation(position, null);
 
         position.set(Position.KEY_RESULT, sentence.substring(3));
 
         return position;
 
     } else if (type.equals("5")) {
 
-            String[] values = sentence.split(",");
+        String[] values = sentence.split(",", -1);
 
         getLastLocation(position, null);
 
+        if (values.length >= 2 && !values[1].isEmpty()) {
             position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));
-            if (values.length >= 4) {
+        }
+        if (values.length >= 4 && !values[3].isEmpty()) {
             position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
         }
 
         return position;
 
     } else if (type.equals("B") || type.equals("D")) {
 
         Parser parser = new Parser(PATTERN_BD, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));
         position.set(Position.KEY_HDOP, parser.nextDouble(0));
 
         return position;
 
     } else if (type.equals("C")) {
 
         Parser parser = new Parser(PATTERN_C, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
         return position;
 
     } else if (type.equals("A")) {
 
         Parser parser = new Parser(PATTERN_A, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
 
         return position;
 
     }
 
     return null;
 }
\ No newline at end of file
