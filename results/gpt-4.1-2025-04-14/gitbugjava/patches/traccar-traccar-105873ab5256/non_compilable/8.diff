diff --git a/tmp/32188d32-e079-411c-8d4f-acfa61955b64_buggy.java b/tmp/8c650730-c065-43ed-a03e-87771dbeb0dc_fixed.java
index 4722599..2f6a563 100644
--- a/tmp/32188d32-e079-411c-8d4f-acfa61955b64_buggy.java
+++ b/tmp/8c650730-c065-43ed-a03e-87771dbeb0dc_fixed.java
@@ -1,194 +1,279 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     ByteBuf buf = (ByteBuf) msg;
 
     buf.readUnsignedByte(); // header
     int flags = buf.readUnsignedByte();
     buf.readUnsignedShortLE(); // length
     buf.readUnsignedShortLE(); // checksum
     int index = buf.readUnsignedShortLE();
     int type = buf.readUnsignedByte();
 
     if (BitUtil.check(flags, 4)) {
         sendResponse(channel, remoteAddress, index, type, buf.slice());
     }
 
     if (type == MSG_DATA || type == MSG_SERVICES) {
 
         List<Position> positions = new LinkedList<>();
         Set<Integer> keys = new HashSet<>();
         boolean hasLocation = false;
         Position position = new Position(getProtocolName());
 
         DeviceSession deviceSession = null;
 
         while (buf.isReadable()) {
-                int endIndex = buf.readUnsignedByte() + buf.readerIndex();
+            int length = buf.readUnsignedByte();
+            int endIndex = buf.readerIndex() + length;
+            if (endIndex > buf.writerIndex()) {
+                // Not enough bytes for TLV value, break to avoid IndexOutOfBounds
+                break;
+            }
+            if (!buf.isReadable()) break; // prevent from exception
             int key = buf.readUnsignedByte();
 
             if (keys.contains(key)) {
                 if (!hasLocation) {
                     getLastLocation(position, null);
                 }
                 positions.add(position);
                 keys.clear();
                 hasLocation = false;
                 position = new Position(getProtocolName());
             }
             keys.add(key);
 
             switch (key) {
                 case 0x01:
+                    if (endIndex - buf.readerIndex() < 15) {
+                        buf.readerIndex(endIndex);
+                        break;
+                    }
                     deviceSession = getDeviceSession(
                             channel, remoteAddress, buf.readCharSequence(15, StandardCharsets.US_ASCII).toString());
                     if (deviceSession == null) {
                         return null;
                     }
                     break;
                 case 0x02:
+                    if (endIndex - buf.readerIndex() < 4) {
+                        buf.readerIndex(endIndex);
+                        break;
+                    }
                     long alarm = buf.readUnsignedIntLE();
                     position.set(Position.KEY_ALARM, decodeAlarm(alarm));
                     if (BitUtil.check(alarm, 31)) {
                         position.set("bark", true);
                     }
                     break;
                 case 0x14:
+                    if (endIndex - buf.readerIndex() < 3) {
+                        buf.readerIndex(endIndex);
+                        break;
+                    }
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.001);
                     break;
                 case 0x20:
+                    if (endIndex - buf.readerIndex() < 23) {
+                        buf.readerIndex(endIndex);
+                        break;
+                    }
                     hasLocation = true;
                     position.setLatitude(buf.readIntLE() * 0.0000001);
                     position.setLongitude(buf.readIntLE() * 0.0000001);
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                     position.setCourse(buf.readUnsignedShortLE());
                     position.setAltitude(buf.readShortLE());
                     int hdop = buf.readUnsignedShortLE();
                     position.setValid(hdop > 0);
                     position.set(Position.KEY_HDOP, hdop * 0.1);
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
-                    case 0x21:
+                case 0x21: {
+                    if (endIndex - buf.readerIndex() < 3) {
+                        buf.readerIndex(endIndex);
+                        break;
+                    }
                     int mcc = buf.readUnsignedShortLE();
                     int mnc = buf.readUnsignedByte();
                     if (position.getNetwork() == null) {
                         position.setNetwork(new Network());
                     }
-                        while (buf.readerIndex() < endIndex) {
+                    while (buf.readerIndex() + 5 <= endIndex) {
                         int rssi = buf.readByte();
                         position.getNetwork().addCellTower(CellTower.from(
                                 mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE(), rssi));
                     }
-                        break;
-                    case 0x22:
+                    buf.readerIndex(endIndex);
+                    continue;
+                }
+                case 0x22: {
                     if (position.getNetwork() == null) {
                         position.setNetwork(new Network());
                     }
-                        while (buf.readerIndex() < endIndex) {
+                    while (buf.readerIndex() + 7 <= endIndex) {
                         int rssi = buf.readByte();
                         String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll("(..)", "$1:");
                         position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(
                                 mac.substring(0, mac.length() - 1), rssi));
                     }
-                        break;
+                    buf.readerIndex(endIndex);
+                    continue;
+                }
                 case 0x23:
+                    if (endIndex - buf.readerIndex() < 8) {
+                        buf.readerIndex(endIndex);
+                        break;
+                    }
                     position.set("tagId", readTagId(buf));
                     position.setLatitude(buf.readIntLE() * 0.0000001);
                     position.setLongitude(buf.readIntLE() * 0.0000001);
                     position.setValid(true);
                     hasLocation = true;
                     break;
                 case 0x24:
+                    if (endIndex - buf.readerIndex() < 8) {
+                        buf.readerIndex(endIndex);
+                        break;
+                    }
                     position.setTime(new Date(buf.readUnsignedIntLE() * 1000));
                     long status = buf.readUnsignedIntLE();
                     if (BitUtil.check(status, 4)) {
                         position.set(Position.KEY_CHARGE, true);
                     }
                     if (BitUtil.check(status, 7)) {
                         position.set(Position.KEY_ARCHIVE, true);
                     }
                     position.set(Position.KEY_MOTION, BitUtil.check(status, 9));
                     position.set(Position.KEY_RSSI, BitUtil.between(status, 19, 24));
                     position.set(Position.KEY_BATTERY_LEVEL, BitUtil.from(status, 24));
                     position.set(Position.KEY_STATUS, status);
                     break;
-                    case 0x28:
+                case 0x28: {
+                    if (endIndex - buf.readerIndex() < 4) {
+                        buf.readerIndex(endIndex);
+                        break;
+                    }
                     int beaconFlags = buf.readUnsignedByte();
                     position.set("tagId", readTagId(buf));
                     position.set("tagRssi", (int) buf.readByte());
                     position.set("tag1mRssi", (int) buf.readByte());
                     if (BitUtil.check(beaconFlags, 7)) {
+                        if (endIndex - buf.readerIndex() < 8) {
+                            buf.readerIndex(endIndex);
+                            break;
+                        }
                         position.setLatitude(buf.readIntLE() * 0.0000001);
                         position.setLongitude(buf.readIntLE() * 0.0000001);
                         position.setValid(true);
                         hasLocation = true;
                     }
                     if (BitUtil.check(beaconFlags, 6)) {
+                        int descLen = endIndex - buf.readerIndex();
+                        if (descLen > 0 && buf.isReadable(descLen)) {
                             position.set("description", buf.readCharSequence(
-                                    endIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString());
+                                    descLen, StandardCharsets.US_ASCII).toString());
+                        }
                     }
                     break;
+                }
                 case 0x2A:
+                    if (endIndex - buf.readerIndex() < 12) {
+                        buf.readerIndex(endIndex);
+                        break;
+                    }
                     buf.readUnsignedByte(); // flags
                     buf.skipBytes(6); // mac
                     buf.readUnsignedByte(); // rssi
                     position.setLatitude(buf.readIntLE() * 0.0000001);
                     position.setLongitude(buf.readIntLE() * 0.0000001);
                     position.setValid(true);
                     hasLocation = true;
                     break;
                 case 0x30:
+                    if (endIndex - buf.readerIndex() < 8) {
+                        buf.readerIndex(endIndex);
+                        break;
+                    }
                     buf.readUnsignedIntLE(); // timestamp
                     position.set(Position.KEY_STEPS, buf.readUnsignedIntLE());
                     break;
-                    case 0x31:
+                case 0x31: {
                     int i = 1;
-                        while (buf.readerIndex() < endIndex) {
+                    while (buf.readerIndex() + 8 <= endIndex) {
                         position.set("activity" + i + "Time", buf.readUnsignedIntLE());
                         position.set("activity" + i, buf.readUnsignedIntLE());
                         i += 1;
                     }
                     break;
+                }
                 case 0x37:
+                    if (endIndex - buf.readerIndex() < 8) {
+                        buf.readerIndex(endIndex);
+                        break;
+                    }
                     buf.readUnsignedIntLE(); // timestamp
                     long barking = buf.readUnsignedIntLE();
                     if (BitUtil.check(barking, 31)) {
                         position.set("barkStop", true);
                     }
                     position.set("barkCount", BitUtil.to(barking, 31));
                     break;
                 case 0x40:
+                    if (endIndex - buf.readerIndex() < 5) {
+                        buf.readerIndex(endIndex);
+                        break;
+                    }
                     buf.readUnsignedIntLE(); // timestamp
                     int heartRate = buf.readUnsignedByte();
                     if (heartRate > 1) {
                         position.set(Position.KEY_HEART_RATE, heartRate);
                     }
                     break;
                 default:
+                    // skip unknown TLV
                     break;
             }
             buf.readerIndex(endIndex);
         }
 
         if (!hasLocation) {
             getLastLocation(position, null);
         }
         positions.add(position);
 
         if (deviceSession != null) {
             for (Position p : positions) {
                 p.setDeviceId(deviceSession.getDeviceId());
             }
         } else {
             return null;
         }
 
         return positions;
 
     }
 
+    // in RESP packets (type=0) there is a KEY_RESULT TLV in the body
+    if (type == MSG_RESPONSE) {
+        // Try extract result TLV if present
+        while (buf.isReadable()) {
+            int len = buf.readUnsignedByte();
+            int key = buf.readUnsignedByte();
+            if (key == 0x10 && len >= 1) {
+                String result = String.valueOf(buf.readUnsignedByte());
+                Position position = new Position(getProtocolName());
+                position.set(Position.KEY_RESULT, result);
+                return position;
+            } else {
+                buf.skipBytes(len - 1);
+            }
+        }
+    }
+
     return null;
 }
\ No newline at end of file
