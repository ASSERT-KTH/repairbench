diff --git a/tmp/df798a2f-79e3-43e9-8174-0a02deca82b8_buggy.java b/tmp/2c68d019-6fdf-4be2-bb6b-07cee25af671_fixed.java
index 7b8ee38..55525c8 100644
--- a/tmp/df798a2f-79e3-43e9-8174-0a02deca82b8_buggy.java
+++ b/tmp/2c68d019-6fdf-4be2-bb6b-07cee25af671_fixed.java
@@ -1,179 +1,239 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     ByteBuf buf = (ByteBuf) msg;
 
-        buf.skipBytes(1); // '[' header
-        manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
+    // '[' header
+    buf.skipBytes(1);
+
+    String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
     buf.skipBytes(1); // '*' delimiter
 
     int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+    if (idIndex < 0) {
+        return null;
+    }
     String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
 
     buf.skipBytes(1); // '*' delimiter
 
     String index = null;
+    boolean hasIndex = false;
+
+    // Peek ahead for optional index field
     int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
+    if (contentIndex != -1 && contentIndex + 5 < buf.writerIndex()) {
+        if (buf.getByte(contentIndex + 5) == '*'
                 && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
             int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
             hasIndex = true;
             index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
             buf.skipBytes(1); // '*' delimiter
-        }
-
+            // skip length, delimiter
             buf.skipBytes(4); // length
             buf.skipBytes(1); // '*' delimiter
-
-        buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
-
-        contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-        if (contentIndex < 0) {
-            contentIndex = buf.writerIndex();
+        } else {
+            // The next 4 bytes might be length, then delimiter, then type follows.
+            int lengthLen = 4;
+            if (buf.readableBytes() > lengthLen + 1) {
+                buf.skipBytes(lengthLen); // length
+                buf.skipBytes(1); // '*' delimiter
+            }
+        }
+    } else {
+        int lengthLen = 4;
+        if (buf.readableBytes() > lengthLen + 1) {
+            buf.skipBytes(lengthLen); // length
+            buf.skipBytes(1); // '*' delimiter
+        }
     }
     
-        String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
+    // The last character is ']', ignore ending
+    if (buf.writerIndex() > buf.readerIndex() && buf.getByte(buf.writerIndex() - 1) == ']') {
+        buf.writerIndex(buf.writerIndex() - 1);
+    }
 
-        if (contentIndex < buf.writerIndex()) {
-            buf.readerIndex(contentIndex + 1);
+    // Find the first comma for the type
+    int typeEnd = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+    String type;
+    if (typeEnd < 0) {
+        type = buf.readSlice(buf.writerIndex() - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
+    } else {
+        type = buf.readSlice(typeEnd - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
+        // Move readerIndex after comma
+        if (buf.readerIndex() < buf.writerIndex()) {
+            buf.readerIndex(buf.readerIndex() + 1);
+        }
     }
 
     if (type.equals("INIT")) {
 
         sendResponse(channel, id, index, "INIT,1");
 
     } else if (type.equals("LK")) {
 
         sendResponse(channel, id, index, "LK");
 
         if (buf.isReadable()) {
             String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
             if (values.length >= 3) {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
 
                 getLastLocation(position, null);
 
                 position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
                 position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
 
                 return position;
             }
         }
 
     } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
 
         Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
 
         if (type.startsWith("AL")) {
             if (position != null) {
+                // Some alarms have specific types
+                if (position.getAttributes().containsKey(Position.KEY_ALARM)) {
+                    // already set
+                } else if (buf.toString(StandardCharsets.US_ASCII).contains(",221121,")) {
+                    position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);
+                } else {
                     position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
                 }
+            }
             sendResponse(channel, id, index, "AL");
         }
 
         return position;
 
     } else if (type.equals("TKQ") || type.equals("TKQ2")) {
 
         sendResponse(channel, id, index, type);
 
+    } else if (type.equalsIgnoreCase("TEMP")) {
+
+        // Example: "[ZJ*5678901234*0001*0009*TEMP,36.5]"
+        if (buf.isReadable()) {
+            String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
+            if (values.length >= 2) {
+                Position position = new Position(getProtocolName());
+                position.setDeviceId(deviceSession.getDeviceId());
+                getLastLocation(position, null);
+                double temp = Double.parseDouble(values[1]);
+                position.set(Position.PREFIX_TEMP + 1, temp);
+                return position;
+            }
+        }
+
     } else if (type.equalsIgnoreCase("PULSE")
             || type.equalsIgnoreCase("HEART")
             || type.equalsIgnoreCase("BLOOD")
             || type.equalsIgnoreCase("BPHRT")
             || type.equalsIgnoreCase("btemp2")) {
 
         if (buf.isReadable()) {
 
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             getLastLocation(position, new Date());
 
             String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
             int valueIndex = 0;
 
             if (type.equalsIgnoreCase("btemp2")) {
-                    if (Integer.parseInt(values[valueIndex++]) > 0) {
-                        position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
+                if (values.length > 1 && Integer.parseInt(values[valueIndex++].trim()) > 0) {
+                    if (values.length > valueIndex) {
+                        position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex].trim()));
+                    }
                 }
             } else {
                 if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
-                        position.set("pressureHigh", values[valueIndex++]);
-                        position.set("pressureLow", values[valueIndex++]);
+                    if (values.length > valueIndex)
+                        position.set("pressureHigh", values[valueIndex++].trim());
+                    if (values.length > valueIndex)
+                        position.set("pressureLow", values[valueIndex++].trim());
                 }
-                    if (valueIndex <= values.length - 1) {
-                        position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
+                if (values.length > valueIndex && !values[valueIndex].trim().isEmpty()) {
+                    position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex].trim()));
                 }
             }
 
             return position;
 
         }
 
     } else if (type.equals("img")) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         getLastLocation(position, null);
 
         int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+        if (timeIndex >= 0 && buf.readableBytes() > (timeIndex - buf.readerIndex()) + 12 + 2) {
             buf.readerIndex(timeIndex + 12 + 2);
             position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
+        } else {
+            // cannot find or not enough data, skip
+        }
 
         return position;
 
     } else if (type.equals("JXTK")) {
 
         int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
+        if (dataIndex > 0) {
             String[] values = buf.readCharSequence(
                     dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
 
             int current = Integer.parseInt(values[2]);
             int total = Integer.parseInt(values[3]);
 
             if (audio == null) {
                 audio = Unpooled.buffer();
             }
             audio.writeBytes(buf);
 
             sendResponse(channel, id, index, "JXTKR,1");
 
             if (current < total) {
                 return null;
             } else {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
                 getLastLocation(position, null);
                 position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
                 audio.release();
                 audio = null;
                 return position;
             }
+        }
 
     } else if (type.equals("TK")) {
 
         if (buf.readableBytes() == 1) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         getLastLocation(position, null);
 
         position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
 
         return position;
 
     }
 
     return null;
 }
\ No newline at end of file
