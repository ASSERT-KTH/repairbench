diff --git a/tmp/9c33b06a-4b71-4710-83e2-74302386b557_buggy.java b/tmp/bfe702a9-b249-49f1-a850-2beefe49bee4_fixed.java
index 7b8ee38..f0fbe07 100644
--- a/tmp/9c33b06a-4b71-4710-83e2-74302386b557_buggy.java
+++ b/tmp/bfe702a9-b249-49f1-a850-2beefe49bee4_fixed.java
@@ -1,179 +1,211 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     ByteBuf buf = (ByteBuf) msg;
 
     buf.skipBytes(1); // '[' header
-        manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
+    String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
     buf.skipBytes(1); // '*' delimiter
 
     int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
     String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
 
     buf.skipBytes(1); // '*' delimiter
 
     String index = null;
-        int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
-                && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
-            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
+    boolean hasIndex = false;
+    int nextAsterisk = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+    if (nextAsterisk != -1 && nextAsterisk + 5 < buf.writerIndex()) {
+        String possibleLen = buf.toString(nextAsterisk + 1, 4, StandardCharsets.US_ASCII);
+        if (buf.getByte(nextAsterisk + 5) == '*' && possibleLen.matches("\\p{XDigit}+")) {
+            int indexLength = nextAsterisk - buf.readerIndex();
             hasIndex = true;
             index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
             buf.skipBytes(1); // '*' delimiter
+            nextAsterisk = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+        }
     }
 
+    // Skip length and delimiter
     buf.skipBytes(4); // length
     buf.skipBytes(1); // '*' delimiter
 
-        buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
-
-        contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-        if (contentIndex < 0) {
-            contentIndex = buf.writerIndex();
+    // Remove trailing ']' (writerIndex points after ']', so we can just set it back)
+    if (buf.writerIndex() > buf.readerIndex() && buf.getByte(buf.writerIndex() - 1) == ']') {
+        buf.writerIndex(buf.writerIndex() - 1);
     }
 
-        String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
+    // Extract type
+    int commaIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+    int typeEnd = commaIndex != -1 ? commaIndex : buf.writerIndex();
+    String type = buf.readSlice(typeEnd - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
 
-        if (contentIndex < buf.writerIndex()) {
-            buf.readerIndex(contentIndex + 1);
+    // Advance readerIndex to consume comma if there is one
+    if (commaIndex != -1 && commaIndex < buf.writerIndex()) {
+        buf.readerIndex(commaIndex + 1);
     }
 
-        if (type.equals("INIT")) {
+    // ============ PROTOCOL HANDLERS ============
+
+    if (type.equalsIgnoreCase("INIT")) {
 
         sendResponse(channel, id, index, "INIT,1");
 
-        } else if (type.equals("LK")) {
+    } else if (type.equalsIgnoreCase("LK")) {
 
         sendResponse(channel, id, index, "LK");
 
         if (buf.isReadable()) {
             String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
             if (values.length >= 3) {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
 
                 getLastLocation(position, null);
 
                 position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
                 position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
 
                 return position;
             }
         }
 
     } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
 
-            Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
+        String bufString = buf.toString(StandardCharsets.US_ASCII);
+        Position position = decodePosition(deviceSession, bufString);
 
         if (type.startsWith("AL")) {
             if (position != null) {
+                // Some alarm types can be derived by analysis
+                if (bufString.contains(",00100000,")) {
+                    position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);
+                } else {
                     position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
                 }
+            }
             sendResponse(channel, id, index, "AL");
         }
 
         return position;
 
-        } else if (type.equals("TKQ") || type.equals("TKQ2")) {
+    } else if (type.equalsIgnoreCase("TKQ") || type.equalsIgnoreCase("TKQ2")) {
 
         sendResponse(channel, id, index, type);
 
     } else if (type.equalsIgnoreCase("PULSE")
             || type.equalsIgnoreCase("HEART")
             || type.equalsIgnoreCase("BLOOD")
             || type.equalsIgnoreCase("BPHRT")
-                || type.equalsIgnoreCase("btemp2")) {
+            || type.equalsIgnoreCase("btemp2")
+            || type.equalsIgnoreCase("TEMP")) {
 
         if (buf.isReadable()) {
 
+            String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
+
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
-
             getLastLocation(position, new Date());
 
-                String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
             int valueIndex = 0;
 
+            if (type.equalsIgnoreCase("btemp2") || type.equalsIgnoreCase("TEMP")) {
+                // [3G*2104326058*000E*btemp2,1,35.29]
+                // [ZJ*5678901234*0001*0009*TEMP,36.5]
                 if (type.equalsIgnoreCase("btemp2")) {
-                    if (Integer.parseInt(values[valueIndex++]) > 0) {
+                    // [btemp2,1,35.29]
+                    if (values.length >= 3 && Integer.parseInt(values[valueIndex++]) > 0) {
                         position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
                     }
-                } else {
-                    if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
+                } else if (type.equalsIgnoreCase("TEMP")) {
+                    // [TEMP,36.5]
+                    if (values.length >= 1) {
+                        position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[0]));
+                    }
+                }
+            } else if (type.equalsIgnoreCase("HEART") || type.equalsIgnoreCase("PULSE")) {
+                // [PULSE,72] or [heart,71]
+                if (values.length >= 1 && !values[0].isEmpty()) {
+                    position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[0]));
+                }
+            } else if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
+                // [bphrt,120,79,73,,,,] or [BLOOD,109,68]
+                if (values.length >= 2) {
                     position.set("pressureHigh", values[valueIndex++]);
                     position.set("pressureLow", values[valueIndex++]);
                 }
-                    if (valueIndex <= values.length - 1) {
+                if (values.length > valueIndex && !values[valueIndex].isEmpty()) {
+                    try {
                         position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
+                    } catch (NumberFormatException ignored) {}
                 }
             }
-
             return position;
-
         }
 
-        } else if (type.equals("img")) {
+    } else if (type.equalsIgnoreCase("img")) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         getLastLocation(position, null);
 
         int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-            buf.readerIndex(timeIndex + 12 + 2);
+        // This logic is not robust; adapt as appropriate for your protocol
+        buf.readerIndex(timeIndex + 12 + 2); // jump over time and sequence(?)
         position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
 
         return position;
 
-        } else if (type.equals("JXTK")) {
+    } else if (type.equalsIgnoreCase("JXTK")) {
 
         int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
         String[] values = buf.readCharSequence(
                 dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
 
         int current = Integer.parseInt(values[2]);
         int total = Integer.parseInt(values[3]);
 
         if (audio == null) {
             audio = Unpooled.buffer();
         }
         audio.writeBytes(buf);
 
         sendResponse(channel, id, index, "JXTKR,1");
 
         if (current < total) {
             return null;
         } else {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             getLastLocation(position, null);
             position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
             audio.release();
             audio = null;
             return position;
         }
 
-        } else if (type.equals("TK")) {
+    } else if (type.equalsIgnoreCase("TK")) {
 
         if (buf.readableBytes() == 1) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         getLastLocation(position, null);
 
         position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
 
         return position;
-
     }
 
     return null;
 }
\ No newline at end of file
