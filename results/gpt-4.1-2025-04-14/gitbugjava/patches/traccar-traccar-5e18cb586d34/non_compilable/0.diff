diff --git a/tmp/bf830d90-d3a4-4ca7-b462-e6c42ab969f5_buggy.java b/tmp/8f63b337-f726-4140-b0f1-969074dc0bb6_fixed.java
index e883360..11cfa8a 100644
--- a/tmp/bf830d90-d3a4-4ca7-b462-e6c42ab969f5_buggy.java
+++ b/tmp/8f63b337-f726-4140-b0f1-969074dc0bb6_fixed.java
@@ -1,196 +1,277 @@
 private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {
     Position position = new Position(getProtocolName());
 
     int index = 0;
-        String[] values = sentence.split(",");
+    String[] values = sentence.split(",", -1); // Use -1 so trailing empty fields are NOT truncated
 
     index += 1; // header
     index += 1; // protocol version
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     position.setDeviceId(deviceSession.getDeviceId());
 
     index += 1; // device name
     index += 1; // report type
     index += 1; // canbus state
-        long reportMask = Long.parseLong(values[index++], 16);
+
+    // Prevent empty string parse exception for reportMask
+    long reportMask = 0;
+    if (index < values.length && !values[index].isEmpty()) {
+        reportMask = Long.parseLong(values[index], 16);
+    }
+    index++;
+
     long reportMaskExt = 0;
 
-        if (BitUtil.check(reportMask, 0)) {
-            position.set(Position.KEY_VIN, values[index++]);
+    if (BitUtil.check(reportMask, 0) && index < values.length && !values[index].isEmpty()) {
+        position.set(Position.KEY_VIN, values[index]);
     }
-        if (BitUtil.check(reportMask, 1)) {
-            position.set(Position.KEY_IGNITION, Integer.parseInt(values[index++]) > 0);
+    if (BitUtil.check(reportMask, 0)) index++;
+    if (BitUtil.check(reportMask, 1) && index < values.length && !values[index].isEmpty()) {
+        position.set(Position.KEY_IGNITION, Integer.parseInt(values[index]) > 0);
     }
-        if (BitUtil.check(reportMask, 2)) {
-            position.set(Position.KEY_OBD_ODOMETER, values[index++]);
+    if (BitUtil.check(reportMask, 1)) index++;
+    if (BitUtil.check(reportMask, 2) && index < values.length && !values[index].isEmpty()) {
+        position.set(Position.KEY_OBD_ODOMETER, values[index]);
     }
-        if (BitUtil.check(reportMask, 3) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index - 1]));
+    if (BitUtil.check(reportMask, 2)) index++;
+    if (BitUtil.check(reportMask, 3)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index]));
         }
-        if (BitUtil.check(reportMask, 5) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_RPM, Integer.parseInt(values[index - 1]));
+        index++;
     }
-        if (BitUtil.check(reportMask, 4) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+    if (BitUtil.check(reportMask, 4)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));
         }
-        if (BitUtil.check(reportMask, 6) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index - 1]));
+        index++;
     }
-        if (BitUtil.check(reportMask, 7) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index - 1].substring(1)));
+    if (BitUtil.check(reportMask, 5)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_RPM, Integer.parseInt(values[index]));
         }
-        if (BitUtil.check(reportMask, 8) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index - 1].substring(1)));
+        index++;
     }
-        if (BitUtil.check(reportMask, 9) && !values[index++].isEmpty()) {
-            position.set("range", Long.parseLong(values[index - 1]) * 100);
+    if (BitUtil.check(reportMask, 6)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index]));
         }
-        if (BitUtil.check(reportMask, 10) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index - 1]));
+        index++;
     }
-        if (BitUtil.check(reportMask, 11) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index - 1])));
+    if (BitUtil.check(reportMask, 7)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            String val = values[index];
+            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(val.charAt(0) == 'P' || val.charAt(0) == 'H' ? val.substring(1) : val));
+        }
+        index++;
+    }
+    if (BitUtil.check(reportMask, 8)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            String val = values[index];
+            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(val.charAt(0) == 'P' || val.charAt(0) == 'H' ? val.substring(1) : val));
+        }
+        index++;
+    }
+    if (BitUtil.check(reportMask, 9)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("range", Long.parseLong(values[index]) * 100);
+        }
+        index++;
+    }
+    if (BitUtil.check(reportMask, 10)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index]));
+        }
+        index++;
+    }
+    if (BitUtil.check(reportMask, 11)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index])));
+        }
+        index++;
     }
     if (BitUtil.check(reportMask, 12)) {
-            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index++]));
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index]));
+        }
+        index++;
     }
     if (BitUtil.check(reportMask, 13)) {
-            position.set("idleHours", Double.parseDouble(values[index++]));
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("idleHours", Double.parseDouble(values[index]));
         }
-        if (BitUtil.check(reportMask, 14) && !values[index++].isEmpty()) {
-            position.set("idleFuelConsumption", Double.parseDouble(values[index - 1]));
+        index++;
     }
-        if (BitUtil.check(reportMask, 15) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index - 1]));
+    if (BitUtil.check(reportMask, 14)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("idleFuelConsumption", Double.parseDouble(values[index]));
         }
-        if (BitUtil.check(reportMask, 16) && !values[index++].isEmpty()) {
-            position.set("tachographInfo", Integer.parseInt(values[index - 1], 16));
+        index++;
     }
-        if (BitUtil.check(reportMask, 17) && !values[index++].isEmpty()) {
-            position.set("indicators", Integer.parseInt(values[index - 1], 16));
+    if (BitUtil.check(reportMask, 15)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index]));
         }
-        if (BitUtil.check(reportMask, 18) && !values[index++].isEmpty()) {
-            position.set("lights", Integer.parseInt(values[index - 1], 16));
+        index++;
     }
-        if (BitUtil.check(reportMask, 19) && !values[index++].isEmpty()) {
-            position.set("doors", Integer.parseInt(values[index - 1], 16));
+    if (BitUtil.check(reportMask, 16)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("tachographInfo", Integer.parseInt(values[index], 16));
         }
-        if (BitUtil.check(reportMask, 20) && !values[index++].isEmpty()) {
-            position.set("vehicleOverspeed", Double.parseDouble(values[index - 1]));
+        index++;
     }
-        if (BitUtil.check(reportMask, 21) && !values[index++].isEmpty()) {
-            position.set("engineOverspeed", Double.parseDouble(values[index - 1]));
+    if (BitUtil.check(reportMask, 17)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("indicators", Integer.parseInt(values[index], 16));
+        }
+        index++;
+    }
+    if (BitUtil.check(reportMask, 18)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("lights", Integer.parseInt(values[index], 16));
+        }
+        index++;
+    }
+    if (BitUtil.check(reportMask, 19)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("doors", Integer.parseInt(values[index], 16));
+        }
+        index++;
+    }
+    if (BitUtil.check(reportMask, 20)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("vehicleOverspeed", Double.parseDouble(values[index]));
+        }
+        index++;
+    }
+    if (BitUtil.check(reportMask, 21)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("engineOverspeed", Double.parseDouble(values[index]));
+        }
+        index++;
     }
     if (BitUtil.check(reportMask, 29)) {
-            reportMaskExt = Long.parseLong(values[index++], 16);
+        if (index < values.length && !values[index].isEmpty()) {
+            reportMaskExt = Long.parseLong(values[index], 16);
         }
-        if (BitUtil.check(reportMaskExt, 0) && !values[index++].isEmpty()) {
-            position.set("adBlueLevel", Integer.parseInt(values[index - 1]));
+        index++;
     }
-        if (BitUtil.check(reportMaskExt, 1) && !values[index++].isEmpty()) {
-            position.set("axleWeight1", Integer.parseInt(values[index - 1]));
+
+    // Extension mask
+    if (BitUtil.check(reportMaskExt, 0)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("adBlueLevel", Integer.parseInt(values[index]));
         }
-        if (BitUtil.check(reportMaskExt, 2) && !values[index++].isEmpty()) {
-            position.set("axleWeight3", Integer.parseInt(values[index - 1]));
+        index++;
     }
-        if (BitUtil.check(reportMaskExt, 3) && !values[index++].isEmpty()) {
-            position.set("axleWeight4", Integer.parseInt(values[index - 1]));
+    if (BitUtil.check(reportMaskExt, 1)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("axleWeight1", Integer.parseInt(values[index]));
         }
-        if (BitUtil.check(reportMaskExt, 4)) {
-            index += 1; // tachograph overspeed
+        index++;
     }
-        if (BitUtil.check(reportMaskExt, 5)) {
-            index += 1; // tachograph motion
+    if (BitUtil.check(reportMaskExt, 2)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("axleWeight3", Integer.parseInt(values[index]));
         }
-        if (BitUtil.check(reportMaskExt, 6)) {
-            index += 1; // tachograph direction
+        index++;
     }
-        if (BitUtil.check(reportMaskExt, 7) && !values[index++].isEmpty()) {
-            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index - 1]) * 0.001);
+    if (BitUtil.check(reportMaskExt, 3)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("axleWeight4", Integer.parseInt(values[index]));
         }
-        if (BitUtil.check(reportMaskExt, 8)) {
-            index += 1; // pedal breaking factor
+        index++;
     }
-        if (BitUtil.check(reportMaskExt, 9)) {
-            index += 1; // engine breaking factor
+    if (BitUtil.check(reportMaskExt, 4)) index++;
+    if (BitUtil.check(reportMaskExt, 5)) index++;
+    if (BitUtil.check(reportMaskExt, 6)) index++;
+    if (BitUtil.check(reportMaskExt, 7)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index]) * 0.001);
         }
-        if (BitUtil.check(reportMaskExt, 10)) {
-            index += 1; // total accelerator kick-downs
+        index++;
     }
-        if (BitUtil.check(reportMaskExt, 11)) {
-            index += 1; // total effective engine speed
+    if (BitUtil.check(reportMaskExt, 8)) index++;
+    if (BitUtil.check(reportMaskExt, 9)) index++;
+    if (BitUtil.check(reportMaskExt, 10)) index++;
+    if (BitUtil.check(reportMaskExt, 11)) index++;
+    if (BitUtil.check(reportMaskExt, 12)) index++;
+    if (BitUtil.check(reportMaskExt, 13)) index++;
+    if (BitUtil.check(reportMaskExt, 14)) index++;
+    if (BitUtil.check(reportMaskExt, 15)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("driver1Card", values[index]);
         }
-        if (BitUtil.check(reportMaskExt, 12)) {
-            index += 1; // total cruise control time
+        index++;
     }
-        if (BitUtil.check(reportMaskExt, 13)) {
-            index += 1; // total accelerator kick-down time
+    if (BitUtil.check(reportMaskExt, 16)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("driver2Card", values[index]);
         }
-        if (BitUtil.check(reportMaskExt, 14)) {
-            index += 1; // total brake application
+        index++;
     }
-        if (BitUtil.check(reportMaskExt, 15) && !values[index++].isEmpty()) {
-            position.set("driver1Card", values[index - 1]);
+    if (BitUtil.check(reportMaskExt, 17)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("driver1Name", values[index]);
         }
-        if (BitUtil.check(reportMaskExt, 16) && !values[index++].isEmpty()) {
-            position.set("driver2Card", values[index - 1]);
+        index++;
     }
-        if (BitUtil.check(reportMaskExt, 17) && !values[index++].isEmpty()) {
-            position.set("driver1Name", values[index - 1]);
+    if (BitUtil.check(reportMaskExt, 18)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("driver2Name", values[index]);
         }
-        if (BitUtil.check(reportMaskExt, 18) && !values[index++].isEmpty()) {
-            position.set("driver2Name", values[index - 1]);
+        index++;
     }
-        if (BitUtil.check(reportMaskExt, 19) && !values[index++].isEmpty()) {
-            position.set("registration", values[index - 1]);
+    if (BitUtil.check(reportMaskExt, 19)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("registration", values[index]);
         }
-        if (BitUtil.check(reportMaskExt, 20)) {
-            index += 1; // expansion information
-        }
-        if (BitUtil.check(reportMaskExt, 21)) {
-            index += 1; // rapid brakings
-        }
-        if (BitUtil.check(reportMaskExt, 22)) {
-            index += 1; // rapid accelerations
-        }
-        if (BitUtil.check(reportMaskExt, 23)) {
-            index += 1; // engine torque
+        index++;
     }
+    if (BitUtil.check(reportMaskExt, 20)) index++;
+    if (BitUtil.check(reportMaskExt, 21)) index++;
+    if (BitUtil.check(reportMaskExt, 22)) index++;
+    if (BitUtil.check(reportMaskExt, 23)) index++;
 
     DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
 
     if (BitUtil.check(reportMask, 30)) {
-            while (values[index].isEmpty()) {
+        while (index < values.length && values[index].isEmpty()) {
             index += 1;
         }
+        if (index < values.length) {
             position.setValid(Integer.parseInt(values[index++]) > 0);
-            if (!values[index].isEmpty()) {
+        }
+        // Check if location fields available
+        if (index + 5 < values.length && !values[index].isEmpty()) {
             position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
             position.setCourse(Integer.parseInt(values[index++]));
             position.setAltitude(Double.parseDouble(values[index++]));
             position.setLongitude(Double.parseDouble(values[index++]));
             position.setLatitude(Double.parseDouble(values[index++]));
             position.setTime(dateFormat.parse(values[index++]));
         } else {
-                index += 6; // no location
+            index += 6; // skip location fields
             getLastLocation(position, null);
         }
     } else {
         getLastLocation(position, null);
     }
 
     if (BitUtil.check(reportMask, 31)) {
         index += 4; // cell
         index += 1; // reserved
     }
 
+    if (index < values.length) {
         if (ignoreFixTime) {
             position.setTime(dateFormat.parse(values[index]));
         } else {
             position.setDeviceTime(dateFormat.parse(values[index]));
         }
+    }
 
     return position;
 }
\ No newline at end of file
