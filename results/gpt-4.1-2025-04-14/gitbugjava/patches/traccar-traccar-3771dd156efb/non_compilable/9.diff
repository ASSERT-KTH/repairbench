diff --git a/tmp/11fd4d09-bdbc-4018-9bc2-230b97fd7dbe_buggy.java b/tmp/0b4ff691-6771-49cf-b88b-f2e3158f4bcb_fixed.java
index 3da904d..0730f92 100644
--- a/tmp/11fd4d09-bdbc-4018-9bc2-230b97fd7dbe_buggy.java
+++ b/tmp/0b4ff691-6771-49cf-b88b-f2e3158f4bcb_fixed.java
@@ -1,73 +1,148 @@
 private Position decodePosition(DeviceSession deviceSession, String data) {
 
     Parser parser = new Parser(PATTERN_POSITION, data);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
     position.setCourse(parser.nextDouble(0));
     position.setAltitude(parser.nextDouble(0));
 
     position.set(Position.KEY_SATELLITES, parser.nextInt(0));
     position.set(Position.KEY_RSSI, parser.nextInt(0));
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
     position.set(Position.KEY_STEPS, parser.nextInt(0));
 
     int status = parser.nextHexInt(0);
     position.set(Position.KEY_ALARM, decodeAlarm(status));
     if (BitUtil.check(status, 4)) {
         position.set(Position.KEY_MOTION, true);
     }
 
-        String[] values = parser.next().split(",");
+    String[] values = parser.next().split(",", -1); // -1 to keep trailing empty fields
     int index = 0;
 
     Network network = new Network();
 
-        int cellCount = Integer.parseInt(values[index++]);
+    // Cell Towers
+    if (values.length > 0 && !values[index].isEmpty()) {
+        int cellCount = 0;
+        try {
+            cellCount = Integer.parseInt(values[index]);
+        } catch (NumberFormatException e) {
+            cellCount = 0;
+        }
+        index++;
+
         if (cellCount > 0) {
-            index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+            // skip timing advance or other field if present (sometimes 1 field)
+            if (index < values.length && !values[index].isEmpty()) {
+                // In some protocols, it's timing advance or some placeholder
+                index++; 
+            }
+
+            // Parse MCC/MNC
+            int mcc = 0;
+            int mnc = 0;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    mcc = Integer.parseInt(values[index]);
+                } catch (NumberFormatException e) {
+                    mcc = 0;
+                }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    mnc = Integer.parseInt(values[index]);
+                } catch (NumberFormatException e) {
+                    mnc = 0;
+                }
+            }
+            index++;
 
             for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
-                String rssi = values[index++];
+                if (index + 2 >= values.length) break; // Not enough fields left
+                int lac = 0;
+                int cid = 0;
+                try {
+                    lac = Integer.parseInt(values[index]);
+                } catch (NumberFormatException e) {
+                    lac = 0;
+                }
+                index++;
+                try {
+                    cid = Integer.parseInt(values[index]);
+                } catch (NumberFormatException e) {
+                    cid = 0;
+                }
+                index++;
+                String rssi = "";
+                if (index < values.length) {
+                    rssi = values[index++];
+                }
                 if (!rssi.isEmpty()) {
+                    try {
                         network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+                    } catch (NumberFormatException e) {
+                        network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
+                    }
                 } else {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                 }
             }
         }
+    }
 
+    // Wifi APs
     if (index < values.length && !values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
+        int wifiCount = 0;
+        try {
+            wifiCount = Integer.parseInt(values[index]);
+        } catch (NumberFormatException e) {
+            wifiCount = 0;
+        }
+        index++;
 
         for (int i = 0; i < wifiCount; i++) {
-                index += 1; // wifi name
-                String macAddress = values[index++];
-                String rssi = values[index++];
+            // wifi name (may be empty)
+            if (index < values.length) {
+                index++;
+            }
+            // mac address
+            String macAddress = "";
+            if (index < values.length) {
+                macAddress = values[index++];
+            }
+            // rssi
+            String rssi = "";
+            if (index < values.length) {
+                rssi = values[index++];
+            }
             if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
+                try {
                     network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+                } catch (NumberFormatException e) {
+                    // skip invalid wifi, continue
+                }
             }
         }
     }
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+    if ((network.getCellTowers() != null && !network.getCellTowers().isEmpty())
+            || (network.getWifiAccessPoints() != null && !network.getWifiAccessPoints().isEmpty())) {
         position.setNetwork(network);
     }
 
     return position;
 }
\ No newline at end of file
