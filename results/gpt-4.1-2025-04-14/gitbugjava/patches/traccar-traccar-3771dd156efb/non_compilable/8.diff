diff --git a/tmp/c336087c-c5b6-44df-9801-bf964f146436_buggy.java b/tmp/35469cfc-bf52-4dd3-91aa-fb29c2343592_fixed.java
index 3da904d..aaa4159 100644
--- a/tmp/c336087c-c5b6-44df-9801-bf964f146436_buggy.java
+++ b/tmp/35469cfc-bf52-4dd3-91aa-fb29c2343592_fixed.java
@@ -1,73 +1,132 @@
 private Position decodePosition(DeviceSession deviceSession, String data) {
 
     Parser parser = new Parser(PATTERN_POSITION, data);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
     position.setCourse(parser.nextDouble(0));
     position.setAltitude(parser.nextDouble(0));
 
     position.set(Position.KEY_SATELLITES, parser.nextInt(0));
     position.set(Position.KEY_RSSI, parser.nextInt(0));
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
     position.set(Position.KEY_STEPS, parser.nextInt(0));
 
     int status = parser.nextHexInt(0);
     position.set(Position.KEY_ALARM, decodeAlarm(status));
     if (BitUtil.check(status, 4)) {
         position.set(Position.KEY_MOTION, true);
     }
 
     String[] values = parser.next().split(",");
     int index = 0;
 
     Network network = new Network();
 
-        int cellCount = Integer.parseInt(values[index++]);
+    // Helper methods to safely parse integers, ignore empty/FFFF/FFFE/FF values.
+    java.util.function.Function<String, Integer> safeParseInt = s -> {
+        if (s == null || s.isEmpty() 
+            || s.equalsIgnoreCase("FFFF") || s.equalsIgnoreCase("FFFE") || s.equalsIgnoreCase("FF")) {
+            return 0;
+        }
+        try {
+            // Handle some cell fields like LAC/CID can be hex (with only digits/letters)
+            // but usually they are decimal. Let Integer.parseInt auto failover.
+            if (s.startsWith("0x") || s.startsWith("0X")) {
+                return Integer.parseInt(s.substring(2), 16);
+            }
+            return Integer.parseInt(s);
+        } catch (NumberFormatException e) {
+            try {
+                // try hex if can't parse as decimal
+                return Integer.parseInt(s, 16);
+            } catch (NumberFormatException e2) {
+                return 0;
+            }
+        }
+    };
+
+    int cellCount = 0;
+    if (index < values.length && !values[index].isEmpty()) {
+        cellCount = safeParseInt.apply(values[index++]);
+    }
     if (cellCount > 0) {
-            index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+        index += 1; // timing advance, skip one
+        int mcc = 0, mnc = 0;
+        if (index < values.length && !values[index].isEmpty()) {
+            mcc = safeParseInt.apply(values[index++]);
+        }
+        if (index < values.length && !values[index].isEmpty()) {
+            mnc = safeParseInt.apply(values[index++]);
+        }
 
         for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
-                String rssi = values[index++];
-                if (!rssi.isEmpty()) {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+            Integer lac = 0;
+            Integer cid = 0;
+            String rssi = null;
+            if (index < values.length) {
+                lac = safeParseInt.apply(values[index++]);
+            }
+            if (index < values.length) {
+                cid = safeParseInt.apply(values[index++]);
+            }
+            if (index < values.length) {
+                rssi = values[index++];
+            }
+            if (rssi != null && !rssi.isEmpty()
+                    && !rssi.equalsIgnoreCase("FFFF") && !rssi.equalsIgnoreCase("FFFE") && !rssi.equalsIgnoreCase("FF")) {
+                network.addCellTower(CellTower.from(mcc, mnc, lac, cid, safeParseInt.apply(rssi)));
             } else {
                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
             }
         }
     }
 
-        if (index < values.length && !values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
+    // If there are more values, next could be wifi count (could be omitted/missing)
+    if (index < values.length && !values[index].isEmpty()
+            && !values[index].equalsIgnoreCase("FFFF")
+            && !values[index].equalsIgnoreCase("FFFE")
+            && !values[index].equalsIgnoreCase("FF")) {
+
+        int wifiCount = safeParseInt.apply(values[index++]);
 
         for (int i = 0; i < wifiCount; i++) {
-                index += 1; // wifi name
-                String macAddress = values[index++];
-                String rssi = values[index++];
-                if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
+            index += 1; // skip wifi name/SSID
+            String macAddress = "";
+            String rssi = "";
+            if (index < values.length) {
+                macAddress = values[index++];
+            }
+            if (index < values.length) {
+                rssi = values[index++];
+            }
+            if (macAddress != null && !macAddress.isEmpty() && !macAddress.equals("0")
+                    && rssi != null && !rssi.isEmpty()
+                    && !rssi.equalsIgnoreCase("FFFF") && !rssi.equalsIgnoreCase("FFFE") && !rssi.equalsIgnoreCase("FF")) {
+                try {
                     network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+                } catch (NumberFormatException e) {
+                    // just skip this wifi if rssi invalid
+                }
             }
         }
     }
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+    if ((network.getCellTowers() != null && !network.getCellTowers().isEmpty()) ||
+        (network.getWifiAccessPoints() != null && !network.getWifiAccessPoints().isEmpty())) {
         position.setNetwork(network);
     }
 
     return position;
 }
\ No newline at end of file
