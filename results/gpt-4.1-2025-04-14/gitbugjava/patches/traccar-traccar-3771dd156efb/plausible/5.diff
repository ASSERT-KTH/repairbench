diff --git a/tmp/aa511e4a-3bf9-420f-aeac-60498ec799c2_buggy.java b/tmp/8ae5cb64-a6dc-49ad-843f-be7f076a5af9_fixed.java
index 3da904d..f36cb19 100644
--- a/tmp/aa511e4a-3bf9-420f-aeac-60498ec799c2_buggy.java
+++ b/tmp/8ae5cb64-a6dc-49ad-843f-be7f076a5af9_fixed.java
@@ -1,73 +1,125 @@
 private Position decodePosition(DeviceSession deviceSession, String data) {
 
     Parser parser = new Parser(PATTERN_POSITION, data);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
     position.setCourse(parser.nextDouble(0));
     position.setAltitude(parser.nextDouble(0));
 
     position.set(Position.KEY_SATELLITES, parser.nextInt(0));
     position.set(Position.KEY_RSSI, parser.nextInt(0));
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
     position.set(Position.KEY_STEPS, parser.nextInt(0));
 
     int status = parser.nextHexInt(0);
     position.set(Position.KEY_ALARM, decodeAlarm(status));
     if (BitUtil.check(status, 4)) {
         position.set(Position.KEY_MOTION, true);
     }
 
     String[] values = parser.next().split(",");
     int index = 0;
 
     Network network = new Network();
 
-        int cellCount = Integer.parseInt(values[index++]);
+    try {
+        // Parse cell towers
+        int cellCount = 0;
+        if (index < values.length && !values[index].isEmpty()) {
+            cellCount = Integer.parseInt(values[index++]);
+        } else {
+            index++;
+        }
+
         if (cellCount > 0) {
             index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-
+            int mcc = 0, mnc = 0;
+            if (index < values.length && !values[index].isEmpty()) {
+                mcc = Integer.parseInt(values[index++]);
+            } else {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                mnc = Integer.parseInt(values[index++]);
+            } else {
+                index++;
+            }
             for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
-                String rssi = values[index++];
+                int lac = 0, cid = 0;
+                if (index < values.length && !values[index].isEmpty()) {
+                    lac = Integer.parseInt(values[index++]);
+                } else {
+                    index++;
+                }
+                if (index < values.length && !values[index].isEmpty()) {
+                    cid = Integer.parseInt(values[index++]);
+                } else {
+                    index++;
+                }
+                String rssi = "";
+                if (index < values.length) {
+                    rssi = values[index++];
+                }
                 if (!rssi.isEmpty()) {
+                    try {
                         network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+                    } catch (NumberFormatException e) {
+                        network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
+                    }
                 } else {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                 }
             }
         }
 
+        // Parse wifi access points
         if (index < values.length && !values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
-
+            int wifiCount = 0;
+            try {
+                wifiCount = Integer.parseInt(values[index++]);
+            } catch (NumberFormatException e) {
+                wifiCount = 0;
+                index++;
+            }
             for (int i = 0; i < wifiCount; i++) {
                 index += 1; // wifi name
-                String macAddress = values[index++];
-                String rssi = values[index++];
+                String macAddress = "";
+                String rssi = "";
+                if (index < values.length) {
+                    macAddress = values[index++];
+                }
+                if (index < values.length) {
+                    rssi = values[index++];
+                }
                 if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
+                    try {
                         network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+                    } catch (NumberFormatException e) {
+                        // Ignore malformed RSSI
                     }
                 }
             }
+        }
+    } catch (Exception err) {
+        // Defensive, skip malformed network block
+    }
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+    if ((network.getCellTowers() != null && !network.getCellTowers().isEmpty())
+            || (network.getWifiAccessPoints() != null && !network.getWifiAccessPoints().isEmpty())) {
         position.setNetwork(network);
     }
 
     return position;
 }
\ No newline at end of file
