diff --git a/tmp/a4eb3ca4-8598-4910-a76f-fe2f76a357e4_buggy.java b/tmp/5f9b1419-b609-4b62-830a-db91052589e2_fixed.java
index 3da904d..37ec26a 100644
--- a/tmp/a4eb3ca4-8598-4910-a76f-fe2f76a357e4_buggy.java
+++ b/tmp/5f9b1419-b609-4b62-830a-db91052589e2_fixed.java
@@ -1,73 +1,113 @@
 private Position decodePosition(DeviceSession deviceSession, String data) {
 
     Parser parser = new Parser(PATTERN_POSITION, data);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
     position.setCourse(parser.nextDouble(0));
     position.setAltitude(parser.nextDouble(0));
 
     position.set(Position.KEY_SATELLITES, parser.nextInt(0));
     position.set(Position.KEY_RSSI, parser.nextInt(0));
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
     position.set(Position.KEY_STEPS, parser.nextInt(0));
 
     int status = parser.nextHexInt(0);
     position.set(Position.KEY_ALARM, decodeAlarm(status));
     if (BitUtil.check(status, 4)) {
         position.set(Position.KEY_MOTION, true);
     }
 
     String[] values = parser.next().split(",");
     int index = 0;
 
     Network network = new Network();
 
-        int cellCount = Integer.parseInt(values[index++]);
-        if (cellCount > 0) {
-            index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-
+    // Parse cell towers
+    if (index < values.length && !values[index].isEmpty()) {
+        int cellCount = 0;
+        try {
+            cellCount = Integer.parseInt(values[index++]);
+        } catch (NumberFormatException e) {
+            cellCount = 0;
+            index++;
+        }
+        if (cellCount > 0 && index < values.length) {
+            index += 1; // timing advance (skip)
+            int mcc = 0, mnc = 0;
+            if (index < values.length && !values[index].isEmpty()) {
+                try { mcc = Integer.parseInt(values[index]); } catch (NumberFormatException ignored) {}
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try { mnc = Integer.parseInt(values[index]); } catch (NumberFormatException ignored) {}
+            }
+            index++;
             for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
+                if (index + 2 < values.length) {
+                    Integer lac = null, cid = null, rssiInt = null;
+                    try { lac = Integer.parseInt(values[index]); } catch (NumberFormatException ignored) {}
+                    index++;
+                    try { cid = Integer.parseInt(values[index]); } catch (NumberFormatException ignored) {}
+                    index++;
                     String rssi = values[index++];
+                    if (lac != null && cid != null) {
                         if (!rssi.isEmpty()) {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+                            try {
+                                rssiInt = Integer.parseInt(rssi);
+                                network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssiInt));
+                            } catch (NumberFormatException nfe) {
+                                network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
+                            }
                         } else {
                             network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                         }
                     }
                 }
+            }
+        }
+    }
 
+    // Parse wifi access points
     if (index < values.length && !values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
+        int wifiCount = 0;
+        try {
+            wifiCount = Integer.parseInt(values[index++]);
+        } catch (NumberFormatException e) {
+            wifiCount = 0;
+            index++;
+        }
 
         for (int i = 0; i < wifiCount; i++) {
-                index += 1; // wifi name
-                String macAddress = values[index++];
-                String rssi = values[index++];
+            // Some protocols provide wifi network name, others don't, so check safely
+            if (index < values.length) {
+                index += 1; // wifi name (SSID), skip
+            }
+            String macAddress = (index < values.length) ? values[index++] : "";
+            String rssi = (index < values.length) ? values[index++] : "";
             if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
+                try {
                     network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+                } catch (NumberFormatException ignored) {}
             }
         }
     }
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+    if ((network.getCellTowers() != null && !network.getCellTowers().isEmpty()) ||
+        (network.getWifiAccessPoints() != null && !network.getWifiAccessPoints().isEmpty())) {
         position.setNetwork(network);
     }
 
     return position;
 }
\ No newline at end of file
