diff --git a/tmp/0cf9a2c9-31bc-4145-b4fa-3da60d1bd7c1_buggy.java b/tmp/24dd9f73-162e-4ee0-a599-14aac8bb0f81_fixed.java
index 855afa5..d47f795 100644
--- a/tmp/0cf9a2c9-31bc-4145-b4fa-3da60d1bd7c1_buggy.java
+++ b/tmp/24dd9f73-162e-4ee0-a599-14aac8bb0f81_fixed.java
@@ -1,13 +1,23 @@
     static URL encodeUrl(URL u) {
-	    u = punyUrl(u);
+	    u = punyUrl(u); // Assume punyUrl correctly handles IDN and returns a new URL object if modified.
         try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
+            // Extract components from the URL. The get* methods return decoded parts.
+            String scheme = u.getProtocol();
+            String userInfo = u.getUserInfo();
+            String host = u.getHost();
+            int port = u.getPort(); // -1 if default port
+            String path = u.getPath();
+            String query = u.getQuery();
+            String fragment = u.getRef(); // getRef() is for the fragment (part after #)
+
+            // Construct a URI using the components.
+            // The URI constructor automatically applies appropriate percent-encoding to path, query, and fragment.
+            final URI uri = new URI(scheme, userInfo, host, port, path, query, fragment);
+
+            // Convert the URI back to a URL. uri.toURL() creates a URL from the URI's ASCII string form.
+            return uri.toURL();
         } catch (URISyntaxException | MalformedURLException e) {
-            // give up and return the original input
+            // If encoding fails, return the original input URL as per the original behavior.
             return u;
         }
     }
\ No newline at end of file
