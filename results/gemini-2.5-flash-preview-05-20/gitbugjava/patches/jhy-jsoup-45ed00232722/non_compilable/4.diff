diff --git a/tmp/678e5680-e6f3-4709-a885-fa7f0985d3a5_buggy.java b/tmp/52daf026-498e-421c-a9c2-bb917307d8df_fixed.java
index 855afa5..bc7ffa3 100644
--- a/tmp/678e5680-e6f3-4709-a885-fa7f0985d3a5_buggy.java
+++ b/tmp/52daf026-498e-421c-a9c2-bb917307d8df_fixed.java
@@ -1,13 +1,23 @@
     static URL encodeUrl(URL u) {
 	    u = punyUrl(u);
         try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
+            // The URI constructor handles the necessary encoding of characters
+            // within the path, query, and fragment components. This is the correct
+            // and robust way to encode URLs, as opposed to manual string replacements.
+            final URI uri = new URI(
+                u.getProtocol(),    // scheme
+                u.getUserInfo(),    // userInfo (e.g., username:password)
+                u.getHost(),        // host (should already be punycode if punyUrl worked)
+                u.getPort(),        // port
+                u.getPath(),        // path (will be encoded, e.g., ' ' to %20, '[' to %5B)
+                u.getQuery(),       // query (will be encoded, e.g., ' ' to %20)
+                u.getRef()          // fragment (will be encoded)
+            );
+            return uri.toURL(); // Convert the properly encoded URI back to a URL object
         } catch (URISyntaxException | MalformedURLException e) {
-            // give up and return the original input
+            // If the URL's components are fundamentally malformed such that a URI
+            // cannot be constructed, or if the URI cannot be converted back to a URL,
+            // we fall back to returning the original, unencoded URL.
             return u;
         }
     }
\ No newline at end of file
