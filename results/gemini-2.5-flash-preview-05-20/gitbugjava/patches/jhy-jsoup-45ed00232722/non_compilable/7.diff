diff --git a/tmp/c4bddbd0-9ac6-44c3-a240-378fc402f835_buggy.java b/tmp/c8e8d7e1-0818-44fe-8a4e-bf24b24bedae_fixed.java
index 855afa5..03a0a27 100644
--- a/tmp/c4bddbd0-9ac6-44c3-a240-378fc402f835_buggy.java
+++ b/tmp/c8e8d7e1-0818-44fe-8a4e-bf24b24bedae_fixed.java
@@ -1,13 +1,20 @@
     static URL encodeUrl(URL u) {
-	    u = punyUrl(u);
+	    u = punyUrl(u); // Handles Punycode conversion for internationalized domain names
         try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
+            // Convert the URL to a URI object. The URL.toURI() method is designed
+            // to produce a syntactically correct URI from the URL, handling existing
+            // components and preparing for proper encoding.
+            final URI uri = u.toURI();
+
+            // Use uri.toASCIIString() to get the fully percent-encoded URI string.
+            // This method correctly encodes characters that are not permitted in a URI
+            // component (like spaces, square brackets in the path/query/fragment)
+            // or non-ASCII characters, ensuring the result is valid and safe.
             return new URL(uri.toASCIIString());
         } catch (URISyntaxException | MalformedURLException e) {
-            // give up and return the original input
+            // If conversion to URI fails (e.g., the original URL was severely malformed)
+            // or if the resulting URI string cannot be converted back to a URL,
+            // return the original input URL as a fallback.
             return u;
         }
     }
\ No newline at end of file
