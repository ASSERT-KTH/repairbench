diff --git a/tmp/b51a1326-b2da-47ee-acbf-572b51cf7715_buggy.java b/tmp/53817911-7419-49ad-a06d-06578308798e_fixed.java
index 855afa5..ae38e7d 100644
--- a/tmp/b51a1326-b2da-47ee-acbf-572b51cf7715_buggy.java
+++ b/tmp/53817911-7419-49ad-a06d-06578308798e_fixed.java
@@ -1,13 +1,26 @@
     static URL encodeUrl(URL u) {
-	    u = punyUrl(u);
+	    u = punyUrl(u); // Assumed to handle internationalized domain names
         try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
+            // Extract components from the URL.
+            // URL.getPath(), getQuery(), getRef() return the *decoded* forms.
+            String scheme = u.getProtocol();
+            String userInfo = u.getUserInfo();
+            String host = u.getHost();
+            int port = u.getPort();
+            String path = u.getPath();
+            String query = u.getQuery();
+            String fragment = u.getRef();
+
+            // Construct a new URI using the multi-argument constructor.
+            // This constructor automatically encodes unsafe characters in path, query, and fragment.
+            // For example, spaces will be encoded to %20, and [ to %5B, ] to %5D.
+            final URI uri = new URI(scheme, userInfo, host, port, path, query, fragment);
+
+            // Convert the correctly encoded URI back to a URL.
             return new URL(uri.toASCIIString());
         } catch (URISyntaxException | MalformedURLException e) {
-            // give up and return the original input
+            // In case of any fundamental issue that prevents URI/URL construction
+            // from the extracted components, return the original input URL as a fallback.
             return u;
         }
     }
\ No newline at end of file
