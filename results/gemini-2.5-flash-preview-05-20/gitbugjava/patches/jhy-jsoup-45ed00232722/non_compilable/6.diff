diff --git a/tmp/066469be-4150-447f-aac9-27fe6894d72c_buggy.java b/tmp/e9cb6793-922b-43d4-ae80-6a85fa275c57_fixed.java
index 855afa5..43c48e0 100644
--- a/tmp/066469be-4150-447f-aac9-27fe6894d72c_buggy.java
+++ b/tmp/e9cb6793-922b-43d4-ae80-6a85fa275c57_fixed.java
@@ -1,13 +1,24 @@
     static URL encodeUrl(URL u) {
-	    u = punyUrl(u);
+	    u = punyUrl(u); // Retain existing punyUrl call
         try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
+            // Get URL components. These methods return the unencoded (raw) components.
+            String protocol = u.getProtocol();
+            String authority = u.getAuthority(); // e.g., "user:pass@host:port" or "host:port" or "host"
+            String path = u.getPath();
+            String query = u.getQuery();
+            String fragment = u.getRef(); // URL.getRef() is for the fragment part
+
+            // Construct a URI using the components.
+            // The URI(scheme, authority, path, query, fragment) constructor is designed
+            // to automatically URI-encode any illegal characters within the path, query,
+            // fragment, and authority components. This correctly handles spaces, brackets,
+            // and other characters that need percent-encoding.
+            final URI uri = new URI(protocol, authority, path, query, fragment);
+
+            // Convert the properly encoded URI back to a URL.
+            return uri.toURL();
         } catch (URISyntaxException | MalformedURLException e) {
-            // give up and return the original input
+            // In case of any encoding or URL conversion error, return the original URL
             return u;
         }
     }
\ No newline at end of file
