diff --git a/tmp/df450855-a528-4503-bb9a-cadba9f28187_buggy.java b/tmp/a10c1d2c-7a02-4837-86f7-82871b95ac1b_fixed.java
index d87dd79..e5e41c4 100644
--- a/tmp/df450855-a528-4503-bb9a-cadba9f28187_buggy.java
+++ b/tmp/a10c1d2c-7a02-4837-86f7-82871b95ac1b_fixed.java
@@ -1,47 +1,87 @@
     @Override
     protected Object decode(
             ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
 
-        int endIndex = -1;
-        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
-            if (buf.getByte(i) == ']') {
-                endIndex = i + 1;
+        int readerIndex = buf.readerIndex();
+        int writerIndex = buf.writerIndex();
+
+        // Search for the first unescaped ']'
+        int frameEndByteIndex = -1;
+        for (int i = readerIndex; i < writerIndex; i++) {
+            byte currentByte = buf.getByte(i);
+            if (currentByte == '}') {
+                // Check if this is an escape sequence
+                if (i + 1 < writerIndex) {
+                    byte nextByte = buf.getByte(i + 1);
+                    if (nextByte >= 0x01 && nextByte <= 0x05) {
+                        // This is a recognized escape sequence, skip both bytes for the delimiter search
+                        i++; // Skip the next byte as well
+                        continue; // Continue searching for ']'
+                    }
+                }
+                // If '}' is not part of a recognized escape sequence, or is the last byte,
+                // it's treated as a literal byte and cannot be a frame delimiter.
+                // Continue scanning.
+            } else if (currentByte == ']') {
+                // Found an unescaped ']' which marks the end of the current frame
+                frameEndByteIndex = i;
                 break;
             }
         }
 
-        if (endIndex > 0) {
+        if (frameEndByteIndex == -1) {
+            // No complete frame found yet, wait for more data
+            return null;
+        }
+
+        // The frame ends at frameEndByteIndex (inclusive ']')
+        // The total length of the frame is (frameEndByteIndex - readerIndex + 1)
+        int endIndex = frameEndByteIndex + 1;
+
+        // Now, extract the frame content and handle escaping
         ByteBuf frame = Unpooled.buffer();
         while (buf.readerIndex() < endIndex) {
             byte b1 = buf.readByte();
             if (b1 == '}') {
+                // Check if there's a next byte for the escape sequence within the frame boundary.
+                // Also, ensure it's a recognized escape code.
+                if (buf.readerIndex() < endIndex) {
                     byte b2 = buf.readByte();
                     switch (b2) {
                         case 0x01:
                             frame.writeByte('}');
                             break;
                         case 0x02:
                             frame.writeByte('[');
                             break;
                         case 0x03:
                             frame.writeByte(']');
                             break;
                         case 0x04:
                             frame.writeByte(',');
                             break;
                         case 0x05:
                             frame.writeByte('*');
                             break;
                         default:
-                            throw new IllegalArgumentException(String.format(
-                                    "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
+                            // If b2 is not a recognized escape code, write both b1 ('}') and b2 literally
+                            frame.writeByte(b1);
+                            frame.writeByte(b2);
+                            break;
+                    }
+                } else {
+                    // This scenario means '}' was the last byte in the frame,
+                    // implying a truncated escape sequence or a literal '}' at the end.
+                    // Based on test cases, treat it as a literal '}'.
+                    frame.writeByte(b1);
                 }
             } else {
+                // Not '}', just write the byte literally
                 frame.writeByte(b1);
             }
         }
+
+        // Return the decoded frame. The buf.readerIndex() has been advanced
+        // to point past the end of the returned frame.
         return frame;
     }
\ No newline at end of file
-
-        return null;
-    }
