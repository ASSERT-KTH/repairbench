diff --git a/tmp/dcd3a5c5-1e74-4330-b813-0731c6c02933_buggy.java b/tmp/be9012f4-84de-4292-bf05-8820f2785d07_fixed.java
index d87dd79..8ec56f6 100644
--- a/tmp/dcd3a5c5-1e74-4330-b813-0731c6c02933_buggy.java
+++ b/tmp/be9012f4-84de-4292-bf05-8820f2785d07_fixed.java
@@ -1,47 +1,67 @@
     @Override
     protected Object decode(
             ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
 
         int endIndex = -1;
-        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
+        // Search for the first occurrence of ']' starting from the current readerIndex.
+        // This is crucial for correctly splitting frames when multiple frames are present in the buffer.
+        // The original code searched backwards from the end of the buffer, which would find the last ']'
+        // and cause the decoder to read multiple complete frames as a single one.
+        for (int i = buf.readerIndex(); i < buf.writerIndex(); i++) {
             if (buf.getByte(i) == ']') {
-                endIndex = i + 1;
+                endIndex = i + 1; // endIndex is the position *after* the ']' character
                 break;
             }
         }
 
+        // If no ']' is found, or if it's found but there's not enough data yet (shouldn't happen with endIndex > 0),
+        // return null to indicate that no complete frame is available and wait for more data.
         if (endIndex > 0) {
+            // We have found a complete frame ending at 'endIndex'.
             ByteBuf frame = Unpooled.buffer();
+            
+            // Read bytes from the input buffer up to the calculated endIndex.
+            // This loop correctly consumes the bytes of the current frame from 'buf'.
+            // The readerIndex of 'buf' will be advanced to 'endIndex' after this loop,
+            // positioning it for the next frame or incoming data.
             while (buf.readerIndex() < endIndex) {
-                byte b1 = buf.readByte();
+                byte b1 = buf.readByte(); // Read the current byte
                 if (b1 == '}') {
-                    byte b2 = buf.readByte();
+                    // This is an escape sequence. We need to read the next byte to decode it.
+                    // Check if there is a byte available to be read for the escape sequence within the frame boundary.
+                    // If not, it means the escape character '}' is the last byte of the frame, which is a malformed sequence.
+                    if (buf.readerIndex() >= endIndex) {
+                        throw new IllegalArgumentException(String.format(
+                                "Malformed frame: dangling escape character '}' at index %d", buf.readerIndex() - 1));
+                    }
+                    byte b2 = buf.readByte(); // Read the escaped byte
                     switch (b2) {
                         case 0x01:
                             frame.writeByte('}');
                             break;
                         case 0x02:
                             frame.writeByte('[');
                             break;
                         case 0x03:
                             frame.writeByte(']');
                             break;
                         case 0x04:
                             frame.writeByte(',');
                             break;
                         case 0x05:
                             frame.writeByte('*');
                             break;
                         default:
                             throw new IllegalArgumentException(String.format(
                                     "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
                     }
                 } else {
-                    frame.writeByte(b1);
+                    frame.writeByte(b1); // Not an escape sequence, write the byte directly to the frame
                 }
             }
-            return frame;
+            return frame; // Return the successfully decoded frame
         }
 
+        // No complete frame found in the current buffer, wait for more data.
         return null;
     }
\ No newline at end of file
