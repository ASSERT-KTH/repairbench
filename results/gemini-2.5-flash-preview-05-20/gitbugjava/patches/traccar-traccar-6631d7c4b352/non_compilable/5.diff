diff --git a/tmp/0aee6489-d8c8-44b8-9623-c8fea988c546_buggy.java b/tmp/30548dfe-41f1-4b53-9b14-dbe68feeab11_fixed.java
index d87dd79..ab65aa4 100644
--- a/tmp/0aee6489-d8c8-44b8-9623-c8fea988c546_buggy.java
+++ b/tmp/30548dfe-41f1-4b53-9b14-dbe68feeab11_fixed.java
@@ -1,47 +1,84 @@
     @Override
     protected Object decode(
             ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
 
-        int endIndex = -1;
-        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
-            if (buf.getByte(i) == ']') {
-                endIndex = i + 1;
-                break;
+        // Find the start delimiter '[' from the current reader index
+        int startIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), '[');
+
+        if (startIndex == -1) {
+            // No start delimiter found in the current buffer.
+            // No frame can be decoded yet. Do not modify readerIndex, wait for more data.
+            return null;
         }
+
+        // If the start delimiter is not at the current reader index,
+        // it means there might be leading garbage. Discard it by advancing readerIndex.
+        // This ensures we always start looking for a frame from a '['.
+        if (startIndex > buf.readerIndex()) {
+            buf.readerIndex(startIndex);
         }
 
-        if (endIndex > 0) {
-            ByteBuf frame = Unpooled.buffer();
-            while (buf.readerIndex() < endIndex) {
-                byte b1 = buf.readByte();
+        // Now, find the end delimiter ']' for the current frame,
+        // starting the search from the identified 'startIndex' (which is now buf.readerIndex()).
+        int rawEndIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), ']');
+
+        if (rawEndIndex == -1) {
+            // No end delimiter found. The frame is incomplete.
+            // Do not modify readerIndex, wait for more data.
+            return null;
+        }
+
+        // The 'frameEndIndex' is the exclusive end position in the input buffer for the current frame.
+        // It includes the ']' character itself, so we add 1 to its index.
+        int frameEndIndex = rawEndIndex + 1;
+
+        // Allocate a new buffer for the decoded frame.
+        // Approximate initial capacity for efficiency.
+        ByteBuf frame = Unpooled.buffer(frameEndIndex - buf.readerIndex());
+        
+        // Read bytes from the input buffer up to the identified frame's end
+        while (buf.readerIndex() < frameEndIndex) {
+            byte b1 = buf.readByte(); // Read a byte and advance input buffer's readerIndex
             if (b1 == '}') {
-                    byte b2 = buf.readByte();
+                // Handle escaped characters
+                // Ensure there's a subsequent byte for the escape sequence
+                if (buf.readerIndex() >= frameEndIndex) {
+                    // This means '}' was the last byte in the frame, but it was an escape character
+                    // requiring a follow-up byte, indicating a malformed frame.
+                    throw new IllegalArgumentException(String.format(
+                            "malformed frame: incomplete escape sequence at end of frame before index %d",
+                            buf.readerIndex() - 1)); // -1 because b1 was just read
+                }
+                byte b2 = buf.readByte(); // Read the escaped byte and advance input buffer's readerIndex
                 switch (b2) {
                     case 0x01:
                         frame.writeByte('}');
                         break;
                     case 0x02:
                         frame.writeByte('[');
                         break;
                     case 0x03:
                         frame.writeByte(']');
                         break;
                     case 0x04:
                         frame.writeByte(',');
                         break;
                     case 0x05:
                         frame.writeByte('*');
                         break;
                     default:
+                        // Unexpected byte after escape character.
+                        // buf.readerIndex() - 1 points to the position of b2 in the original buffer.
                         throw new IllegalArgumentException(String.format(
                                 "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
                 }
             } else {
+                // Not an escape character, just copy the byte to the frame.
                 frame.writeByte(b1);
             }
         }
+        // Return the successfully decoded frame.
+        // The buf.readerIndex() is now correctly positioned at frameEndIndex,
+        // ready for the next call to decode.
         return frame;
     }
\ No newline at end of file
-
-        return null;
-    }
