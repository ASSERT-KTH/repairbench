diff --git a/tmp/ad56172e-60db-4036-9fac-87813c7deca9_buggy.java b/tmp/8b96fa6b-a608-4b94-b580-ff5ed04ef678_fixed.java
index d87dd79..019efe7 100644
--- a/tmp/ad56172e-60db-4036-9fac-87813c7deca9_buggy.java
+++ b/tmp/8b96fa6b-a608-4b94-b580-ff5ed04ef678_fixed.java
@@ -1,47 +1,63 @@
     @Override
     protected Object decode(
             ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
 
+        // Search for the first occurrence of ']' starting from the current readerIndex.
+        // This is crucial for correctly decoding one frame at a time, especially
+        // when the input buffer contains multiple concatenated frames.
         int endIndex = -1;
-        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
+        for (int i = buf.readerIndex(); i < buf.writerIndex(); i++) {
             if (buf.getByte(i) == ']') {
-                endIndex = i + 1;
-                break;
+                endIndex = i + 1; // endIndex will be the position *after* the ']' character.
+                break; // Found the first ']', so we can stop searching.
             }
         }
 
+        // If a complete frame (ending with ']') is found
         if (endIndex > 0) {
             ByteBuf frame = Unpooled.buffer();
+
+            // Read bytes from the input buffer up to the calculated endIndex
             while (buf.readerIndex() < endIndex) {
                 byte b1 = buf.readByte();
                 if (b1 == '}') {
+                    // If an escape character '}' is encountered, read the next byte
+                    // and translate it according to the protocol.
                     byte b2 = buf.readByte();
                     switch (b2) {
                         case 0x01:
                             frame.writeByte('}');
                             break;
                         case 0x02:
                             frame.writeByte('[');
                             break;
                         case 0x03:
                             frame.writeByte(']');
                             break;
                         case 0x04:
                             frame.writeByte(',');
                             break;
                         case 0x05:
                             frame.writeByte('*');
                             break;
                         default:
+                            // If an unknown escape sequence is encountered, throw an exception.
+                            // buf.readerIndex() - 1 points to the position of b2.
                             throw new IllegalArgumentException(String.format(
                                     "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
                     }
                 } else {
+                    // If not an escape character, write the byte directly to the frame
                     frame.writeByte(b1);
                 }
             }
+            // After the loop, buf.readerIndex() will be equal to endIndex,
+            // effectively consuming the frame from the input buffer.
             return frame;
         }
 
+        // If no complete frame is found, return null.
+        // The readerIndex of `buf` will not be advanced in this case,
+        // allowing Netty to accumulate more data before retrying decoding.
         return null;
     }
\ No newline at end of file
