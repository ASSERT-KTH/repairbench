diff --git a/tmp/b0c53d3a-b9b8-400b-8999-52f6dcaf562a_buggy.java b/tmp/e1991825-febd-4cba-832a-fcf251df80c6_fixed.java
index d87dd79..210ab65 100644
--- a/tmp/b0c53d3a-b9b8-400b-8999-52f6dcaf562a_buggy.java
+++ b/tmp/e1991825-febd-4cba-832a-fcf251df80c6_fixed.java
@@ -1,47 +1,115 @@
     @Override
     protected Object decode(
             ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
 
-        int endIndex = -1;
-        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
-            if (buf.getByte(i) == ']') {
-                endIndex = i + 1;
+        int initialReaderIndex = buf.readerIndex();
+
+        // Step 1: Find the opening bracket '['
+        // Skip any leading bytes that are not '[' (considered garbage or incomplete header)
+        int frameStartIndex = -1;
+        for (int i = initialReaderIndex; i < buf.writerIndex(); i++) {
+            if (buf.getByte(i) == '[') {
+                frameStartIndex = i;
                 break;
             }
+            // Discard this byte as it's not the start of a frame
+            buf.readByte();
+            initialReaderIndex = buf.readerIndex(); // Update initialReaderIndex to reflect discarded bytes
         }
 
-        if (endIndex > 0) {
-            ByteBuf frame = Unpooled.buffer();
-            while (buf.readerIndex() < endIndex) {
-                byte b1 = buf.readByte();
+        if (frameStartIndex == -1) {
+            // No opening bracket '[' found in the current buffer, or all leading bytes were discarded.
+            // Wait for more data.
+            return null;
+        }
+
+        // At this point, buf.readerIndex() is at frameStartIndex (the '[' character).
+        // Now, scan from this point to find the *first unescaped* closing bracket ']'.
+        int currentScanIndex = buf.readerIndex();
+        int frameEndByteIndex = -1; // This will be the index of the closing ']' character
+
+        while (currentScanIndex < buf.writerIndex()) {
+            byte currentByte = buf.getByte(currentScanIndex);
+
+            if (currentByte == '}') {
+                // Potential escape sequence, check the next byte
+                if (currentScanIndex + 1 < buf.writerIndex()) {
+                    byte nextByte = buf.getByte(currentScanIndex + 1);
+                    if (nextByte >= 0x01 && nextByte <= 0x05) {
+                        // This is an escaped character. Skip both bytes.
+                        currentScanIndex++; // Increment to skip the escaped byte
+                    }
+                    // else: it's a literal '}' not followed by an escape code, just advance currentScanIndex normally
+                }
+                // else: '}' is the last byte in the buffer, not part of an escape sequence, treat as literal '}'
+            } else if (currentByte == ']') {
+                // Found an unescaped ']' - this marks the end of the current frame.
+                frameEndByteIndex = currentScanIndex;
+                break; // Found the end of the frame
+            }
+            currentScanIndex++;
+        }
+
+        if (frameEndByteIndex == -1) {
+            // No complete frame (no unescaped ']') found after the opening '['.
+            // Revert readerIndex to its state before processing this potential frame (after discarding garbage).
+            // This is effectively handled by not advancing readerIndex beyond frameStartIndex until a full frame is found.
+            // So, just return null and wait for more data.
+            return null;
+        }
+
+        // A complete frame is found from buf.readerIndex() (which is frameStartIndex)
+        // up to frameEndByteIndex (the closing ']').
+        // The length of the frame including '[' and ']' is `frameEndByteIndex - buf.readerIndex() + 1`.
+        int frameLength = frameEndByteIndex - buf.readerIndex() + 1;
+
+        // Create a new buffer to hold the decoded frame.
+        ByteBuf frame = Unpooled.buffer(frameLength); // Pre-allocate size for efficiency
+
+        // Now, read the bytes from the original buffer and apply the unescaping logic.
+        // The loop reads exactly `frameLength` bytes from `buf`.
+        int bytesToRead = frameLength;
+        while (bytesToRead > 0) {
+            byte b1 = buf.readByte(); // Read byte from input buffer, advances its readerIndex
+            bytesToRead--;
+
             if (b1 == '}') {
-                    byte b2 = buf.readByte();
+                // Check if there's a next byte available within the current frame's boundaries for an escape sequence
+                if (bytesToRead > 0) {
+                    byte b2 = buf.readByte(); // Read the next byte for escape sequence
+                    bytesToRead--;
                     switch (b2) {
                         case 0x01:
                             frame.writeByte('}');
                             break;
                         case 0x02:
                             frame.writeByte('[');
                             break;
                         case 0x03:
                             frame.writeByte(']');
                             break;
                         case 0x04:
                             frame.writeByte(',');
                             break;
                         case 0x05:
                             frame.writeByte('*');
                             break;
                         default:
+                            // This indicates an invalid escape sequence. Throw an exception.
+                            // The original code had a similar default behavior.
                             throw new IllegalArgumentException(String.format(
                                     "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
                     }
+                } else {
+                    // '}' is the last byte within the frame, and not part of a full escape sequence.
+                    // Treat it as a literal '}'.
+                    frame.writeByte(b1);
+                }
             } else {
                 frame.writeByte(b1);
             }
         }
+        
+        // Return the successfully decoded frame.
         return frame;
     }
\ No newline at end of file
-
-        return null;
-    }
