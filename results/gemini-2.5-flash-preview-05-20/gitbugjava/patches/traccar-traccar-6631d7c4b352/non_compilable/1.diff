diff --git a/tmp/8258dbe3-1cde-4df5-8f59-ef93dc2bb633_buggy.java b/tmp/21e58af1-e1ae-4ff5-aac1-5ee84b5dede9_fixed.java
index d87dd79..a7918e1 100644
--- a/tmp/8258dbe3-1cde-4df5-8f59-ef93dc2bb633_buggy.java
+++ b/tmp/21e58af1-e1ae-4ff5-aac1-5ee84b5dede9_fixed.java
@@ -1,47 +1,73 @@
     @Override
     protected Object decode(
             ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
 
-        int endIndex = -1;
-        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
-            if (buf.getByte(i) == ']') {
-                endIndex = i + 1;
-                break;
+        int initialReaderIndex = buf.readerIndex();
+        int frameEndPos = -1; // This will store the index of the *unescaped* ']' character
+
+        int currentScanIndex = initialReaderIndex;
+        // Iterate through the buffer to find the end of the current frame, respecting escape sequences
+        while (currentScanIndex < buf.writerIndex()) {
+            byte b = buf.getByte(currentScanIndex);
+            if (b == '}') { // Possible escape sequence
+                if (currentScanIndex + 1 < buf.writerIndex()) {
+                    // This is an escaped sequence, consume both bytes by advancing the scan index by 2
+                    currentScanIndex += 2;
+                } else {
+                    // Incomplete escape sequence at the very end of the buffer.
+                    // We don't have enough data for a full frame yet.
+                    // Do not advance readerIndex, return null.
+                    return null;
+                }
+            } else if (b == ']') { // Found an unescaped ']'
+                frameEndPos = currentScanIndex;
+                break; // Found the end of the frame
+            } else { // Regular byte, just advance the scan index by 1
+                currentScanIndex++;
             }
         }
 
-        if (endIndex > 0) {
+        if (frameEndPos == -1) {
+            // No unescaped ']' found in the current buffer.
+            // A full frame is not yet available.
+            // Do not advance readerIndex, return null.
+            return null;
+        }
+
+        // At this point, `frameEndPos` holds the index of the closing ']' for the current frame.
+        // We now need to read and decode the bytes from `initialReaderIndex` up to `frameEndPos` (inclusive).
+        // The `buf.readerIndex()` will be advanced by `buf.readByte()`.
         ByteBuf frame = Unpooled.buffer();
-            while (buf.readerIndex() < endIndex) {
+
+        // Read bytes from the original buffer and apply escape decoding
+        // The loop reads up to and including the ']' character
+        while (buf.readerIndex() < frameEndPos + 1) {
             byte b1 = buf.readByte();
             if (b1 == '}') {
+                // Ensure there's a byte to read after '}' for the escape sequence.
+                // `buf.readerIndex()` has already advanced past `b1`.
+                // Check if the next byte of the escape sequence is within the frame boundaries.
+                if (buf.readerIndex() < frameEndPos + 1) {
                     byte b2 = buf.readByte();
                     switch (b2) {
-                        case 0x01:
-                            frame.writeByte('}');
-                            break;
-                        case 0x02:
-                            frame.writeByte('[');
-                            break;
-                        case 0x03:
-                            frame.writeByte(']');
-                            break;
-                        case 0x04:
-                            frame.writeByte(',');
-                            break;
-                        case 0x05:
-                            frame.writeByte('*');
-                            break;
+                        case 0x01: frame.writeByte('}'); break;
+                        case 0x02: frame.writeByte('['); break;
+                        case 0x03: frame.writeByte(']'); break;
+                        case 0x04: frame.writeByte(','); break;
+                        case 0x05: frame.writeByte('*'); break;
                         default:
                             throw new IllegalArgumentException(String.format(
                                     "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
                     }
+                } else {
+                    // This case should ideally be caught by the initial scan if the data is well-formed,
+                    // but it acts as a defensive check for malformed frames ending with an incomplete escape.
+                    throw new IllegalArgumentException("Incomplete escape sequence at the end of the frame.");
+                }
             } else {
                 frame.writeByte(b1);
             }
         }
+        // After this loop, `buf.readerIndex()` is correctly advanced past the extracted frame.
         return frame;
     }
-
-        return null;
-    }
