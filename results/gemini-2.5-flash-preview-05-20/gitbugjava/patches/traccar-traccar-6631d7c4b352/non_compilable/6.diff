diff --git a/tmp/5e3e901d-34e9-43f2-9baa-db367c52ce15_buggy.java b/tmp/be1b8d22-32c9-47be-8f32-b1cc2d00c36e_fixed.java
index d87dd79..e97f1f9 100644
--- a/tmp/5e3e901d-34e9-43f2-9baa-db367c52ce15_buggy.java
+++ b/tmp/be1b8d22-32c9-47be-8f32-b1cc2d00c36e_fixed.java
@@ -1,47 +1,81 @@
     @Override
     protected Object decode(
             ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
 
-        int endIndex = -1;
-        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
-            if (buf.getByte(i) == ']') {
-                endIndex = i + 1;
+        int initialReaderIndex = buf.readerIndex();
+        int frameEndAbsoluteIndex = -1; // This will be the absolute index of the ']' character
+        boolean escaped = false;
+
+        // Search for the *first* unescaped ']' from the current readerIndex
+        for (int i = initialReaderIndex; i < buf.writerIndex(); i++) {
+            byte currentByte = buf.getByte(i);
+            if (escaped) {
+                // This byte is part of an escape sequence, not a delimiter
+                escaped = false;
+                continue;
+            }
+            if (currentByte == '}') {
+                // Ensure there is a byte following '}' for the escape sequence itself
+                if (i + 1 >= buf.writerIndex()) {
+                    // Not enough data for a complete escape sequence at the end of the buffer.
+                    // This frame is incomplete, so we need to wait for more data.
+                    buf.readerIndex(initialReaderIndex); // Reset reader index as nothing was consumed
+                    return null;
+                }
+                escaped = true;
+            } else if (currentByte == ']') {
+                frameEndAbsoluteIndex = i;
                 break;
             }
         }
 
-        if (endIndex > 0) {
-            ByteBuf frame = Unpooled.buffer();
-            while (buf.readerIndex() < endIndex) {
-                byte b1 = buf.readByte();
+        // If no complete frame (no unescaped ']') is found, return null.
+        // This tells the decoder to wait for more data.
+        if (frameEndAbsoluteIndex == -1) {
+            return null;
+        }
+
+        // At this point, `frameEndAbsoluteIndex` holds the absolute index of the *first* ']' character.
+        // The `targetEndIndex` defines the point *after* the frame has been fully read.
+        int targetEndIndex = frameEndAbsoluteIndex + 1;
+
+        // Pre-allocate buffer with the exact size of the raw frame data for efficiency.
+        ByteBuf frame = Unpooled.buffer(targetEndIndex - initialReaderIndex);
+
+        // Read bytes and decode escape sequences only up to the determined frame end.
+        while (buf.readerIndex() < targetEndIndex) {
+            byte b1 = buf.readByte(); // This advances buf.readerIndex()
             if (b1 == '}') {
-                    byte b2 = buf.readByte();
+                // The byte following '}' must be within the frame boundaries.
+                // If this condition is met, it indicates an incomplete escape sequence at the very end of the frame,
+                // which signifies a malformed frame according to the protocol.
+                if (buf.readerIndex() >= targetEndIndex) {
+                    throw new IllegalArgumentException("Incomplete escape sequence at end of frame at index: " + (buf.readerIndex() - 1));
+                }
+                byte b2 = buf.readByte(); // This advances buf.readerIndex()
                 switch (b2) {
                     case 0x01:
                         frame.writeByte('}');
                         break;
                     case 0x02:
                         frame.writeByte('[');
                         break;
                     case 0x03:
                         frame.writeByte(']');
                         break;
                     case 0x04:
                         frame.writeByte(',');
                         break;
                     case 0x05:
                         frame.writeByte('*');
                         break;
                     default:
                         throw new IllegalArgumentException(String.format(
                                 "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
                 }
             } else {
                 frame.writeByte(b1);
             }
         }
         return frame;
     }
\ No newline at end of file
-
-        return null;
-    }
