diff --git a/tmp/00a3931f-6cd6-4b58-8f7d-d162d5a4b1c2_buggy.java b/tmp/379f28c3-66a9-429f-8a33-7ab2dd23c259_fixed.java
index d87dd79..1643975 100644
--- a/tmp/00a3931f-6cd6-4b58-8f7d-d162d5a4b1c2_buggy.java
+++ b/tmp/379f28c3-66a9-429f-8a33-7ab2dd23c259_fixed.java
@@ -1,47 +1,65 @@
     @Override
     protected Object decode(
             ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
 
         int endIndex = -1;
-        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
+        // Search for the first ']' from the current readerIndex.
+        // A FrameDecoder should extract one complete frame at a time.
+        // Searching backward for the last ']' would cause multiple frames
+        // to be concatenated if the input buffer contains more than one.
+        for (int i = buf.readerIndex(); i < buf.writerIndex(); i++) {
             if (buf.getByte(i) == ']') {
-                endIndex = i + 1;
-                break;
+                endIndex = i + 1; // endIndex should be the position AFTER the ']' character
+                break; // Found the first ']', this defines the boundary of the current frame
             }
         }
 
-        if (endIndex > 0) {
+        if (endIndex > 0) { // If a complete frame is found
             ByteBuf frame = Unpooled.buffer();
+            // Read bytes from the input buffer up to the calculated endIndex.
+            // This loop correctly advances buf.readerIndex() as bytes are read.
             while (buf.readerIndex() < endIndex) {
                 byte b1 = buf.readByte();
-                if (b1 == '}') {
+                if (b1 == '}') { // Check for escape character '}'
+                    if (buf.readerIndex() < endIndex) { // Ensure there's a byte to read for the escape sequence
                         byte b2 = buf.readByte();
                         switch (b2) {
                             case 0x01:
                                 frame.writeByte('}');
                                 break;
                             case 0x02:
                                 frame.writeByte('[');
                                 break;
                             case 0x03:
                                 frame.writeByte(']');
                                 break;
                             case 0x04:
                                 frame.writeByte(',');
                                 break;
                             case 0x05:
                                 frame.writeByte('*');
                                 break;
                             default:
+                                // The index for the error message should point to the unexpected byte (b2).
+                                // Since buf.readByte() was called for b2, buf.readerIndex() is now past b2,
+                                // so buf.readerIndex() - 1 points to b2.
                                 throw new IllegalArgumentException(String.format(
                                         "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
                         }
                     } else {
-                    frame.writeByte(b1);
+                        // If '}' is the last byte in the detected frame, it's an incomplete escape sequence.
+                        // This case might signify a corrupted frame or an incomplete buffer.
+                        // For this specific protocol, it implies malformed data or a partial frame.
+                        // We can either throw an exception or return null to wait for more data.
+                        // Given it's within a determined frame, throwing an exception is safer.
+                        throw new IllegalArgumentException("incomplete escape sequence at end of frame");
                     }
+                } else {
+                    frame.writeByte(b1); // Write non-escaped byte directly
                 }
-            return frame;
+            }
+            return frame; // Return the decoded frame
         }
 
-        return null;
+        return null; // No complete frame found yet, wait for more data
     }
\ No newline at end of file
