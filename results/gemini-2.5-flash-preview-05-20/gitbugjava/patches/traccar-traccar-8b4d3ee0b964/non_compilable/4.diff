diff --git a/tmp/a0b78370-61c2-4822-8c67-9051b26a0d80_buggy.java b/tmp/80b22a7b-48d3-432c-9d60-8a6d5b0c6f03_fixed.java
index 27f2719..1c146f4 100644
--- a/tmp/a0b78370-61c2-4822-8c67-9051b26a0d80_buggy.java
+++ b/tmp/80b22a7b-48d3-432c-9d60-8a6d5b0c6f03_fixed.java
@@ -1,90 +1,131 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
+        // Defensive check: ensure msg is a String and not null or empty
+        if (!(msg instanceof String)) {
+            return null;
+        }
         String sentence = (String) msg;
+        if (sentence == null || sentence.isEmpty()) {
+            return null;
+        }
 
+        // Handle "!1," messages for device session registration
         if (sentence.startsWith("!1,")) {
             int index = sentence.indexOf(',', 3);
             if (index < 0) {
                 index = sentence.length();
             }
             getDeviceSession(channel, remoteAddress, sentence.substring(3, index));
-            return null;
+            return null; // These messages typically don't report position data
         }
 
+        // Retrieve device session. If it's null, return null as we cannot proceed without a session.
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
-        if (deviceSession == null || !sentence.matches("![35A-D],.*")) {
+        if (deviceSession == null) {
             return null;
         }
 
+        // Validate the sentence format against expected message types.
+        // The original regex "![35A-D],.*" did not include type '4' messages,
+        // causing them to be incorrectly filtered out. '4' is now added.
+        if (!sentence.matches("![345A-D],.*")) {
+            return null;
+        }
+
+        // Create a new Position object and set the device ID from the session.
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         String type = sentence.substring(1, 2);
         position.set(Position.KEY_TYPE, type);
 
         if (type.equals("3")) {
-
-            getLastLocation(position, null);
+            // Handle type "3" messages (e.g., command results)
+            getLastLocation(position, null); // Get the last known location for context
 
             position.set(Position.KEY_RESULT, sentence.substring(3));
 
             return position;
 
+        } else if (type.equals("4")) {
+            // Handle type "4" messages (e.g., device status, includes phone number)
+            // Example: !4,10,040123,,,1.0,110,0,0S,33
+            String[] values = sentence.split(",");
+
+            getLastLocation(position, null); // Get the last known location for context
+
+            // Parse specific fields based on the message structure
+            if (values.length > 2 && !values[2].isEmpty()) {
+                position.set(Position.KEY_PHONE, values[2]); // values[2] typically holds the phone number
+            }
+            if (values.length > 5 && !values[5].isEmpty()) {
+                position.set(Position.KEY_BATTERY_LEVEL, Double.parseDouble(values[5]));
+            }
+            if (values.length > 6 && !values[6].isEmpty()) {
+                position.set(Position.KEY_GPS_STATUS, Integer.parseInt(values[6]));
+            }
+            if (values.length > 7 && !values[7].isEmpty()) {
+                position.set(Position.KEY_GSM_SIGNAL, Integer.parseInt(values[7]));
+            }
+
+            return position;
+
         } else if (type.equals("5")) {
-
+            // Handle type "5" messages (e.g., RSSI and battery status)
             String[] values = sentence.split(",");
 
-            getLastLocation(position, null);
+            getLastLocation(position, null); // Get the last known location for context
 
             position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));
-            if (values.length >= 4) {
+            if (values.length >= 4) { // Check for battery level, typically at values[3]
                 position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
             }
 
             return position;
 
         } else if (type.equals("B") || type.equals("D")) {
-
+            // Handle type "B" or "D" messages (detailed GPS reports)
             Parser parser = new Parser(PATTERN_BD, sentence);
             if (!parser.matches()) {
                 return null;
             }
 
-            decodeFix(position, parser);
-            decodeState(position, parser);
+            decodeFix(position, parser); // Decode GPS fix information
+            decodeState(position, parser); // Decode device state
 
             position.set(Position.KEY_SATELLITES, parser.nextInt(0));
             position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));
             position.set(Position.KEY_HDOP, parser.nextDouble(0));
 
             return position;
 
         } else if (type.equals("C")) {
-
+            // Handle type "C" messages (compact GPS reports)
             Parser parser = new Parser(PATTERN_C, sentence);
             if (!parser.matches()) {
                 return null;
             }
 
-            decodeFix(position, parser);
-            decodeState(position, parser);
+            decodeFix(position, parser); // Decode GPS fix information
+            decodeState(position, parser); // Decode device state
 
             return position;
 
         } else if (type.equals("A")) {
-
+            // Handle type "A" messages (basic GPS reports)
             Parser parser = new Parser(PATTERN_A, sentence);
             if (!parser.matches()) {
                 return null;
             }
 
-            decodeFix(position, parser);
+            decodeFix(position, parser); // Decode GPS fix information
 
             return position;
 
         }
 
+        // If the message type is not recognized or handled, return null
         return null;
     }
\ No newline at end of file
