diff --git a/tmp/cbe6c54a-ddec-46d1-8d65-4afe57434c78_buggy.java b/tmp/97cc4b09-1f90-4e4c-b0ad-5d3f581036e5_fixed.java
index 27f2719..4604db1 100644
--- a/tmp/cbe6c54a-ddec-46d1-8d65-4afe57434c78_buggy.java
+++ b/tmp/97cc4b09-1f90-4e4c-b0ad-5d3f581036e5_fixed.java
@@ -1,90 +1,120 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         String sentence = (String) msg;
 
         if (sentence.startsWith("!1,")) {
             int index = sentence.indexOf(',', 3);
             if (index < 0) {
                 index = sentence.length();
             }
             getDeviceSession(channel, remoteAddress, sentence.substring(3, index));
             return null;
         }
 
+        // Handle !4 messages explicitly, as they are not covered by the general regex
+        // and are expected to set device attributes and return a Position.
+        if (sentence.startsWith("!4,")) {
+            DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
+            if (deviceSession == null) {
+                // If device session is not found, return null as we cannot associate attributes
+                return null;
+            }
+
+            Position position = new Position(getProtocolName());
+            position.setDeviceId(deviceSession.getDeviceId());
+
+            String[] values = sentence.split(",");
+            // The format is typically: !4,version,phone1,speedLimit,...
+            // Based on the test, `values[2]` should be the phone number.
+            if (values.length > 1) { // Check for "version" part
+                position.set(Position.KEY_VERSION_FW, values[1]);
+            }
+            if (values.length > 2) { // Check for "phone1" part
+                position.set("phone1", values[2]);
+            }
+
+            // Return the position object, even if it's just for attribute verification
+            return position;
+        }
+
+        // General message handling for types 3, 5, A, B, C, D
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null || !sentence.matches("![35A-D],.*")) {
+            // Return null if device session is not found or message type is not supported by this block.
+            // Message types like !4 are handled above this check.
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         String type = sentence.substring(1, 2);
         position.set(Position.KEY_TYPE, type);
 
         if (type.equals("3")) {
 
             getLastLocation(position, null);
 
             position.set(Position.KEY_RESULT, sentence.substring(3));
 
             return position;
 
         } else if (type.equals("5")) {
 
             String[] values = sentence.split(",");
 
             getLastLocation(position, null);
 
             position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));
-            if (values.length >= 4) {
+            if (values.length >= 4) { // Check if battery level value exists
                 position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
             }
 
             return position;
 
         } else if (type.equals("B") || type.equals("D")) {
 
+            // Assuming PATTERN_BD, PATTERN_C, PATTERN_A are static final Pattern fields defined elsewhere in the class.
             Parser parser = new Parser(PATTERN_BD, sentence);
             if (!parser.matches()) {
                 return null;
             }
 
             decodeFix(position, parser);
             decodeState(position, parser);
 
             position.set(Position.KEY_SATELLITES, parser.nextInt(0));
             position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));
             position.set(Position.KEY_HDOP, parser.nextDouble(0));
 
             return position;
 
         } else if (type.equals("C")) {
 
             Parser parser = new Parser(PATTERN_C, sentence);
             if (!parser.matches()) {
                 return null;
             }
 
             decodeFix(position, parser);
             decodeState(position, parser);
 
             return position;
 
         } else if (type.equals("A")) {
 
             Parser parser = new Parser(PATTERN_A, sentence);
             if (!parser.matches()) {
                 return null;
             }
 
             decodeFix(position, parser);
 
             return position;
 
         }
 
         return null;
     }
\ No newline at end of file
