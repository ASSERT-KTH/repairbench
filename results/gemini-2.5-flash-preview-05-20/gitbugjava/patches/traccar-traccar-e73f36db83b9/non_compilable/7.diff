diff --git a/tmp/8bdad843-5fff-44e8-8ef8-103a0193e373_buggy.java b/tmp/e6d6d3c6-1bb2-48db-81cd-d21187ff9997_fixed.java
index cd6f89c..8b50029 100644
--- a/tmp/8bdad843-5fff-44e8-8ef8-103a0193e373_buggy.java
+++ b/tmp/e6d6d3c6-1bb2-48db-81cd-d21187ff9997_fixed.java
@@ -1,102 +1,109 @@
     private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {
         Parser parser = new Parser(PATTERN_ERI, sentence);
         if (!parser.matches()) {
             return null;
         }
 
-        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());
+        parser.next(); // Consume Index (group 1)
+        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next()); // Consume IMEI (group 2)
         if (deviceSession == null) {
             return null;
         }
 
-        long mask = parser.nextHexLong();
+        parser.next(); // Consume Device Name (group 3)
+        long mask = parser.nextHexLong(); // Consume Mask (group 4)
+
+        parser.next(); // Consume Reserved (group 5)
+        Integer power = parser.nextInt(); // Consume Power (group 6)
+
+        int count = parser.nextInt(); // Consume Number of locations (group 7)
 
         LinkedList<Position> positions = new LinkedList<>();
 
-        Integer power = parser.nextInt();
-
-        Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());
-        while (itemParser.find()) {
+        for (int i = 0; i < count; i++) { // Loop for each location
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
-            decodeLocation(position, itemParser);
+            decodeLocation(position, parser); // Use the main parser to decode location
 
             positions.add(position);
         }
 
+        if (positions.isEmpty()) { // Handle case where no positions were decoded
+            return null;
+        }
         Position position = positions.getLast();
 
-        skipLocation(parser);
+        // skipLocation(parser); // This line is no longer necessary as decodeLocation consumes fields
 
         if (power != null) {
             position.set(Position.KEY_POWER, power * 0.001);
         }
 
-        if (parser.hasNextAny(12)) {
+        if (parser.hasNextAny(12)) { // Check if enough fields remain for extended data
 
             position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
             position.set(Position.KEY_HOURS, parseHours(parser.next()));
             position.set(Position.PREFIX_ADC + 1, parser.next());
             position.set(Position.PREFIX_ADC + 2, parser.next());
             position.set(Position.PREFIX_ADC + 3, parser.next());
             if (parser.hasNext(2)) {
                 position.set(Position.KEY_INPUT, parser.nextHexInt());
                 position.set(Position.KEY_OUTPUT, parser.nextHexInt());
             }
             if (parser.hasNext(4)) {
                 position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
                 decodeStatus(position, parser);
             }
 
             int index = 0;
-            String[] data = parser.next().split(",");
+            String[] data = parser.next().split(","); // This assumes a single field for 'data' which is then split
 
-            index += 1; // device type
+            index += 1; // device type (data[0])
 
             if (BitUtil.check(mask, 0)) {
-                index += 1; // digital fuel sensor data
+                index += 1; // digital fuel sensor data (data[1])
             }
 
             if (BitUtil.check(mask, 1)) {
                 int deviceCount = Integer.parseInt(data[index++]);
                 for (int i = 1; i <= deviceCount; i++) {
                     index += 1; // id
                     index += 1; // type
                     if (!data[index++].isEmpty()) {
                         position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index - 1], 16) * 0.0625);
                     }
                 }
             }
 
             if (BitUtil.check(mask, 2)) {
                 index += 1; // can data
             }
 
             if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {
                 int deviceCount = Integer.parseInt(data[index++]);
                 for (int i = 1; i <= deviceCount; i++) {
                     index += 1; // type
                     if (BitUtil.check(mask, 3)) {
                         position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index++]));
                     }
                     if (BitUtil.check(mask, 4)) {
                         index += 1; // volume
                     }
                 }
             }
 
         }
 
         if (parser.hasNext()) {
             position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
         }
 
         decodeDeviceTime(position, parser);
         if (ignoreFixTime) {
             positions.clear();
             positions.add(position);
         }
 
         return positions;
     }
\ No newline at end of file
