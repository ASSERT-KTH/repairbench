diff --git a/tmp/791dcba5-80f6-4ab0-ae88-8ebadddff8f3_buggy.java b/tmp/ae648365-aa80-4fdc-90e4-c2c7ab27197f_fixed.java
index cd6f89c..5b0d084 100644
--- a/tmp/791dcba5-80f6-4ab0-ae88-8ebadddff8f3_buggy.java
+++ b/tmp/ae648365-aa80-4fdc-90e4-c2c7ab27197f_fixed.java
@@ -1,102 +1,129 @@
     private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {
         Parser parser = new Parser(PATTERN_ERI, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());
         if (deviceSession == null) {
             return null;
         }
 
         long mask = parser.nextHexLong();
 
         LinkedList<Position> positions = new LinkedList<>();
 
         Integer power = parser.nextInt();
 
+        // The parser.next() here consumes group 5 from PATTERN_ERI, which contains all location and optional data.
         Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());
         while (itemParser.find()) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             decodeLocation(position, itemParser);
 
             positions.add(position);
         }
 
         Position position = positions.getLast();
 
-        skipLocation(parser);
+        // Removed: skipLocation(parser);
+        // This is incorrect for GTERI as itemParser now holds the remaining data.
 
         if (power != null) {
             position.set(Position.KEY_POWER, power * 0.001);
         }
 
-        if (parser.hasNextAny(12)) {
+        // All subsequent parsing should use itemParser as it holds the remaining fields from group 5.
+        // Changed hasNextAny(12) to hasNext() to be more flexible with variable message lengths.
+        if (itemParser.hasNext()) {
 
-            position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
-            position.set(Position.KEY_HOURS, parseHours(parser.next()));
-            position.set(Position.PREFIX_ADC + 1, parser.next());
-            position.set(Position.PREFIX_ADC + 2, parser.next());
-            position.set(Position.PREFIX_ADC + 3, parser.next());
-            if (parser.hasNext(2)) {
-                position.set(Position.KEY_INPUT, parser.nextHexInt());
-                position.set(Position.KEY_OUTPUT, parser.nextHexInt());
+            // Odometer, Hours, ADC values
+            if (itemParser.hasNext(5)) { // Check if at least 5 fields (odometer, hours, adc1-3) are available
+                position.set(Position.KEY_ODOMETER, itemParser.nextDouble() * 1000);
+                position.set(Position.KEY_HOURS, parseHours(itemParser.next()));
+                position.set(Position.PREFIX_ADC + 1, itemParser.next());
+                position.set(Position.PREFIX_ADC + 2, itemParser.next());
+                position.set(Position.PREFIX_ADC + 3, itemParser.next());
             }
-            if (parser.hasNext(4)) {
-                position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
-                decodeStatus(position, parser);
+
+            // Input/Output values
+            if (itemParser.hasNext(2)) {
+                position.set(Position.KEY_INPUT, itemParser.nextHexInt());
+                position.set(Position.KEY_OUTPUT, itemParser.nextHexInt());
+            }
+
+            // Battery Level and Status
+            if (itemParser.hasNext(4)) { // Assuming Battery Level and Status take 4 fields total (Battery, Status parts)
+                position.set(Position.KEY_BATTERY_LEVEL, itemParser.nextInt());
+                decodeStatus(position, itemParser);
             }
 
+            // Sensor data based on mask
+            if (itemParser.hasNext()) { // Check if there's a next field for sensor data string
                 int index = 0;
-            String[] data = parser.next().split(",");
+                String[] data = itemParser.next().split(",");
 
+                if (data.length > index) { // Ensure data array has elements
                     index += 1; // device type
 
-            if (BitUtil.check(mask, 0)) {
+                    if (BitUtil.check(mask, 0) && data.length > index) {
                         index += 1; // digital fuel sensor data
                     }
 
-            if (BitUtil.check(mask, 1)) {
+                    if (BitUtil.check(mask, 1) && data.length > index) {
                         int deviceCount = Integer.parseInt(data[index++]);
                         for (int i = 1; i <= deviceCount; i++) {
+                            if (data.length > index) {
                                 index += 1; // id
+                            }
+                            if (data.length > index) {
                                 index += 1; // type
-                    if (!data[index++].isEmpty()) {
-                        position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index - 1], 16) * 0.0625);
+                            }
+                            if (data.length > index && !data[index].isEmpty()) {
+                                position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index++], 16) * 0.0625);
+                            } else {
+                                index += 1; // Skip empty field
                             }
                         }
                     }
 
-            if (BitUtil.check(mask, 2)) {
+                    if (BitUtil.check(mask, 2) && data.length > index) {
                         index += 1; // can data
                     }
 
-            if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {
+                    if ((BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) && data.length > index) {
                         int deviceCount = Integer.parseInt(data[index++]);
                         for (int i = 1; i <= deviceCount; i++) {
+                            if (data.length > index) {
                                 index += 1; // type
-                    if (BitUtil.check(mask, 3)) {
+                            }
+                            if (BitUtil.check(mask, 3) && data.length > index) {
                                 position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index++]));
                             }
-                    if (BitUtil.check(mask, 4)) {
+                            if (BitUtil.check(mask, 4) && data.length > index) {
                                 index += 1; // volume
                             }
                         }
                     }
-
+                }
+            }
         }
 
+        // This final battery level might be an alternative or fallback in some messages,
+        // or for older formats. It uses the main parser's remaining field if any.
+        // It's still possible for itemParser to be exhausted but parser has a final field.
         if (parser.hasNext()) {
             position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
         }
 
+        // decodeDeviceTime and positions management still use the main parser or existing position
         decodeDeviceTime(position, parser);
         if (ignoreFixTime) {
             positions.clear();
             positions.add(position);
         }
 
         return positions;
     }
\ No newline at end of file
