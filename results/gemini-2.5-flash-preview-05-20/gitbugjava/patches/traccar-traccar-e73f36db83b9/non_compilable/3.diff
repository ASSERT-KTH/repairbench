diff --git a/tmp/08407293-ae23-407c-9a65-e8181fbf0ff0_buggy.java b/tmp/df11190b-fb1e-421c-86a1-0273e9d85c2d_fixed.java
index cd6f89c..fef45a5 100644
--- a/tmp/08407293-ae23-407c-9a65-e8181fbf0ff0_buggy.java
+++ b/tmp/df11190b-fb1e-421c-86a1-0273e9d85c2d_fixed.java
@@ -1,102 +1,163 @@
     private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {
         Parser parser = new Parser(PATTERN_ERI, sentence);
         if (!parser.matches()) {
             return null;
         }
 
-        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());
+        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next()); // Consumes IMEI (group 2)
         if (deviceSession == null) {
             return null;
         }
 
-        long mask = parser.nextHexLong();
+        long mask = parser.nextHexLong(); // Consumes Mask (group 3)
 
-        LinkedList<Position> positions = new LinkedList<>();
+        // The parser automatically skips non-capturing groups (like Device Name, GPS Quality)
+        // and advances to the next capturing group (Report Type, group 4).
+        Integer reportType = parser.nextInt(); // Consumes Report Type (group 4)
 
-        Integer power = parser.nextInt();
-
-        Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());
-        while (itemParser.find()) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
-            decodeLocation(position, itemParser);
+        // GPS Fix (group 5) and GPS Valid (group 6)
+        position.setValid(parser.nextInt() == 1); // Consumes GPS Fix (group 5)
+        position.setValid(parser.nextInt() == 1 && position.getValid()); // Consumes GPS Valid (group 6)
 
+        // Location fields (groups 7-12: Speed, Course, Altitude, Longitude, Latitude, Date/Time)
+        // `decodeLocation` consumes these fields directly from the main parser.
+        // The original `itemParser` loop was incorrect for GTERI messages.
+        decodeLocation(position, parser); // Consumes groups 7-12
+
+        // Add the parsed position to the list. GTERI typically yields a single position.
         positions.add(position);
-        }
 
-        Position position = positions.getLast();
+        // Process fields after location, following the order in PATTERN_ERI (starting from group 13: MCC)
 
-        skipLocation(parser);
-
-        if (power != null) {
-            position.set(Position.KEY_POWER, power * 0.001);
-        }
-
-        if (parser.hasNextAny(12)) {
-
-            position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
-            position.set(Position.KEY_HOURS, parseHours(parser.next()));
-            position.set(Position.PREFIX_ADC + 1, parser.next());
-            position.set(Position.PREFIX_ADC + 2, parser.next());
-            position.set(Position.PREFIX_ADC + 3, parser.next());
-            if (parser.hasNext(2)) {
-                position.set(Position.KEY_INPUT, parser.nextHexInt());
-                position.set(Position.KEY_OUTPUT, parser.nextHexInt());
-            }
+        // Network info (groups 13-16)
         if (parser.hasNext(4)) {
-                position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
-                decodeStatus(position, parser);
+            position.set(Position.KEY_MCC, parser.nextInt()); // Consumes MCC (group 13)
+            position.set(Position.KEY_MNC, parser.nextInt()); // Consumes MNC (group 14)
+            position.set(Position.KEY_LAC, parser.nextHexInt()); // Consumes LAC (group 15)
+            position.set(Position.KEY_CID, parser.nextHexInt()); // Consumes CID (group 16)
         }
 
-            int index = 0;
-            String[] data = parser.next().split(",");
+        // IO State (group 17)
+        if (parser.hasNext()) {
+            decodeStatus(position, parser.next()); // Consumes IO State (group 17)
+        }
+
+        // ADC values (groups 18-21)
+        for (int i = 0; i < 4; i++) {
+            if (parser.hasNext()) {
+                position.set(Position.PREFIX_ADC + i, parser.nextDouble()); // Consumes ADC, ADC2, ADC3, ADC4 (groups 18-21)
+            }
+        }
+
+        // Battery level (group 22)
+        if (parser.hasNext()) {
+            position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt()); // Consumes Battery level (group 22)
+        }
+
+        // Digital input/output status (group 23)
+        // PATTERN_ERI defines this as a single field. Original code's `hasNext(2)` for two distinct fields was incorrect.
+        if (parser.hasNext()) {
+            position.set(Position.KEY_INPUT, parser.nextHexInt()); // Consumes Digital input/output status (group 23)
+            // If KEY_OUTPUT is also expected, it should be derived from the same value (e.g., bitwise operations)
+            // or there should be another field in PATTERN_ERI. Based on PATTERN_ERI, there's only one.
+            // Removing `position.set(Position.KEY_OUTPUT, parser.nextHexInt());` as it would consume the next field (Odometer) incorrectly.
+        }
 
-            index += 1; // device type
+        // Odometer (group 24)
+        if (parser.hasNext()) {
+            position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000); // Consumes Odometer (group 24)
+        }
+
+        // Hour meter (group 25)
+        if (parser.hasNext()) {
+            position.set(Position.KEY_HOURS, parseHours(parser.next())); // Consumes Hour meter (group 25)
+        }
+
+        // Custom data (group 26) - This section processes sub-fields based on the mask
+        if (parser.hasNext()) {
+            String[] data = parser.next().split(","); // Consumes Custom data (group 26)
+
+            int dataIndex = 0; // Index for navigating the 'data' array
+
+            // Device type (data[0])
+            if (dataIndex < data.length) {
+                dataIndex += 1;
+            }
 
+            // Digital Fuel Sensor Data (data[1])
             if (BitUtil.check(mask, 0)) {
-                index += 1; // digital fuel sensor data
+                if (dataIndex < data.length) {
+                    dataIndex += 1;
+                }
             }
 
+            // Temperature Sensor Data (based on mask bit 1)
             if (BitUtil.check(mask, 1)) {
-                int deviceCount = Integer.parseInt(data[index++]);
+                if (dataIndex < data.length) {
+                    int deviceCount = Integer.parseInt(data[dataIndex++]);
                     for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // id
-                    index += 1; // type
-                    if (!data[index++].isEmpty()) {
-                        position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index - 1], 16) * 0.0625);
+                        if (dataIndex < data.length) {
+                            dataIndex += 1; // id
+                        }
+                        if (dataIndex < data.length) {
+                            dataIndex += 1; // type
+                        }
+                        if (dataIndex < data.length && !data[dataIndex].isEmpty()) {
+                            position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[dataIndex++], 16) * 0.0625);
+                        } else if (dataIndex < data.length) {
+                            // Consume the empty field if it exists, to maintain correct index for subsequent fields
+                            dataIndex++;
+                        }
                     }
                 }
             }
 
+            // CANBUS Data (based on mask bit 2)
             if (BitUtil.check(mask, 2)) {
-                index += 1; // can data
+                if (dataIndex < data.length) {
+                    dataIndex += 1; // can data
+                }
             }
 
+            // Fuel Level Sensor Data (based on mask bit 3) or Fuel Volume Sensor Data (based on mask bit 4)
             if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {
-                int deviceCount = Integer.parseInt(data[index++]);
+                if (dataIndex < data.length) {
+                    int deviceCount = Integer.parseInt(data[dataIndex++]);
                     for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // type
-                    if (BitUtil.check(mask, 3)) {
-                        position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index++]));
+                        if (dataIndex < data.length) {
+                            dataIndex += 1; // type
+                        }
+                        if (BitUtil.check(mask, 3)) { // Fuel Level
+                            if (dataIndex < data.length) {
+                                position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[dataIndex++]));
+                            }
+                        }
+                        if (BitUtil.check(mask, 4)) { // Fuel Volume
+                            if (dataIndex < data.length) {
+                                dataIndex += 1; // volume
+                            }
                         }
-                    if (BitUtil.check(mask, 4)) {
-                        index += 1; // volume
                     }
                 }
             }
-
         }
 
-        if (parser.hasNext()) {
-            position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
+        // Apply KEY_POWER based on `reportType`. Original code had `power`.
+        if (reportType != null) {
+            position.set(Position.KEY_POWER, reportType * 0.001);
         }
 
-        decodeDeviceTime(position, parser);
+        // The final `if (parser.hasNext())` block for `KEY_BATTERY_LEVEL` and `decodeDeviceTime` are removed.
+        // `KEY_BATTERY_LEVEL` is already handled at group 22.
+        // `decodeDeviceTime` is already implicitly handled by `decodeLocation` for the fix time.
+
         if (ignoreFixTime) {
             positions.clear();
             positions.add(position);
         }
 
         return positions;
     }
\ No newline at end of file
