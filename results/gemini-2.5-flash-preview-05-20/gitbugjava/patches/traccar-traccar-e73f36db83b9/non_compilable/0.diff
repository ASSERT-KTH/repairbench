diff --git a/tmp/ead8bf2e-0ce4-4d7e-b58f-e9fbfbf8dabc_buggy.java b/tmp/e93e46d5-62d5-433d-9475-9ab9dedab22d_fixed.java
index cd6f89c..a314ce6 100644
--- a/tmp/ead8bf2e-0ce4-4d7e-b58f-e9fbfbf8dabc_buggy.java
+++ b/tmp/e93e46d5-62d5-433d-9475-9ab9dedab22d_fixed.java
@@ -1,102 +1,174 @@
     private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {
         Parser parser = new Parser(PATTERN_ERI, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());
         if (deviceSession == null) {
             return null;
         }
 
         long mask = parser.nextHexLong();
 
         LinkedList<Position> positions = new LinkedList<>();
 
         Integer power = parser.nextInt();
 
         Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());
         while (itemParser.find()) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             decodeLocation(position, itemParser);
 
             positions.add(position);
         }
 
         Position position = positions.getLast();
 
-        skipLocation(parser);
+        skipLocation(parser); // In Gl200TextProtocolDecoder, this is a no-op for GTERI/GTFRI,
+                              // so 'parser' remains positioned at the group containing additional fields.
 
         if (power != null) {
             position.set(Position.KEY_POWER, power * 0.001);
         }
 
-        if (parser.hasNextAny(12)) {
-
-            position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
-            position.set(Position.KEY_HOURS, parseHours(parser.next()));
-            position.set(Position.PREFIX_ADC + 1, parser.next());
-            position.set(Position.PREFIX_ADC + 2, parser.next());
-            position.set(Position.PREFIX_ADC + 3, parser.next());
-            if (parser.hasNext(2)) {
-                position.set(Position.KEY_INPUT, parser.nextHexInt());
-                position.set(Position.KEY_OUTPUT, parser.nextHexInt());
+        // The additional fields (Odometer, Hours, ADCs, Inputs, Outputs, Battery, Status,
+        // Device Type, and masked data like DFSD, Temperature, CAN, Fuel Level) are
+        // captured by PATTERN_ERI as a single regex group (group 7).
+        // The original code's `if (parser.hasNextAny(12))` was incorrect as it checks for
+        // 12 more regex groups, while there's only one large group (group 7) left for this data.
+        // Instead, we extract this single group and parse its comma-separated content.
+
+        String additionalDataString = null;
+        if (parser.hasNext(1)) { // Check if Group 7 (additional fields) exists
+            additionalDataString = parser.next(); // Consume Group 7, e.g., ",,,,100,110000,1,0099"
+        }
+
+        if (additionalDataString != null && !additionalDataString.isEmpty()) {
+            String[] data = additionalDataString.split(",");
+            int dataIndex = 0; // Tracks the current position within the 'data' array
+
+            // Parse Odometer
+            if (dataIndex < data.length) {
+                position.set(Position.KEY_ODOMETER, Parser.parseDouble(data[dataIndex++]) * 1000);
+            } else { dataIndex++; } // Advance index even if field is missing, to keep alignment
+
+            // Parse Hours
+            if (dataIndex < data.length) {
+                position.set(Position.KEY_HOURS, parseHours(data[dataIndex++]));
+            } else { dataIndex++; }
+
+            // Parse ADC1, ADC2, ADC3
+            for (int i = 1; i <= 3; i++) {
+                if (dataIndex < data.length) {
+                    position.set(Position.PREFIX_ADC + i, Parser.parseDouble(data[dataIndex++]));
+                } else { dataIndex++; }
             }
-            if (parser.hasNext(4)) {
-                position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
-                decodeStatus(position, parser);
+
+            // Parse Digital Input, Digital Output
+            if (dataIndex + 1 < data.length) { // Check if both fields exist
+                position.set(Position.KEY_INPUT, Parser.parseHexInt(data[dataIndex++]));
+                position.set(Position.KEY_OUTPUT, Parser.parseHexInt(data[dataIndex++]));
+            } else if (dataIndex < data.length) { // Only input is present
+                position.set(Position.KEY_INPUT, Parser.parseHexInt(data[dataIndex++]));
+                dataIndex++; // Consume for output even if empty/missing
+            } else { // Both missing
+                dataIndex += 2;
             }
 
-            int index = 0;
-            String[] data = parser.next().split(",");
+            // Parse Battery Level, Status
+            if (dataIndex + 1 < data.length) { // Check if both fields exist
+                position.set(Position.KEY_BATTERY_LEVEL, Parser.parseInt(data[dataIndex++]));
+                // The original decodeStatus uses a Parser object, so we inline the logic here
+                position.set(Position.KEY_STATUS, Parser.parseHexInt(data[dataIndex++]));
+            } else if (dataIndex < data.length) { // Only battery is present
+                position.set(Position.KEY_BATTERY_LEVEL, Parser.parseInt(data[dataIndex++]));
+                dataIndex++; // Consume for status even if empty/missing
+            } else { // Both missing
+                dataIndex += 2;
+            }
 
-            index += 1; // device type
+            // Parse Device Type
+            if (dataIndex < data.length) {
+                dataIndex++; // Consume device type
+            } else { dataIndex++; }
 
+            // Parse Digital Fuel Sensor Data (depends on mask bit 0)
             if (BitUtil.check(mask, 0)) {
-                index += 1; // digital fuel sensor data
+                if (dataIndex < data.length) {
+                    dataIndex++; // Consume DFSD data
+                } else { dataIndex++; } // Advance index to maintain alignment
             }
 
+            // Parse Temperature Sensor Data (depends on mask bit 1)
             if (BitUtil.check(mask, 1)) {
-                int deviceCount = Integer.parseInt(data[index++]);
+                if (dataIndex < data.length) {
+                    int deviceCount = Parser.parseInt(data[dataIndex++]);
                     for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // id
-                    index += 1; // type
-                    if (!data[index++].isEmpty()) {
-                        position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index - 1], 16) * 0.0625);
+                        if (dataIndex + 1 < data.length) { // id, type
+                            dataIndex++; // Consume id
+                            dataIndex++; // Consume type
+                        } else if (dataIndex < data.length) { // id only
+                            dataIndex++; // Consume id
+                            dataIndex++; // Consume for type even if empty/missing
+                        } else { // Both missing
+                            dataIndex += 2;
+                        }
+
+                        if (dataIndex < data.length && !data[dataIndex].isEmpty()) {
+                            position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[dataIndex++], 16) * 0.0625);
+                        } else {
+                            dataIndex++; // Consume field even if empty or missing
                         }
                     }
+                } else { dataIndex++; } // Missing deviceCount field, advance index
             }
 
+            // Parse CAN Data (depends on mask bit 2)
             if (BitUtil.check(mask, 2)) {
-                index += 1; // can data
+                if (dataIndex < data.length) {
+                    dataIndex++; // Consume CAN data
+                } else { dataIndex++; }
             }
 
+            // Parse Fuel Level Sensor Data (depends on mask bit 3 or 4)
             if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {
-                int deviceCount = Integer.parseInt(data[index++]);
+                if (dataIndex < data.length) {
+                    int deviceCount = Parser.parseInt(data[dataIndex++]);
                     for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // type
+                        if (dataIndex < data.length) {
+                            dataIndex++; // Consume type
+                        } else { dataIndex++; }
+
                         if (BitUtil.check(mask, 3)) {
-                        position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index++]));
+                            if (dataIndex < data.length) {
+                                position.set(Position.KEY_FUEL_LEVEL, Parser.parseDouble(data[dataIndex++]));
+                            } else { dataIndex++; }
                         }
                         if (BitUtil.check(mask, 4)) {
-                        index += 1; // volume
+                            if (dataIndex < data.length) {
+                                dataIndex++; // Consume volume
+                            } else { dataIndex++; }
                         }
                     }
+                } else { dataIndex++; } // Missing deviceCount field, advance index
             }
-
         }
 
-        if (parser.hasNext()) {
-            position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
-        }
+        // This line was problematic as it would attempt to parse the time field or a non-existent field
+        // as a battery level, potentially leading to errors or incorrect data.
+        // Battery level is already handled within the additional fields parsing block.
+        // if (parser.hasNext()) {
+        //     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
+        // }
 
-        decodeDeviceTime(position, parser);
+        decodeDeviceTime(position, parser); // This should correctly parse Group 8 (time)
         if (ignoreFixTime) {
             positions.clear();
             positions.add(position);
         }
 
         return positions;
     }
\ No newline at end of file
