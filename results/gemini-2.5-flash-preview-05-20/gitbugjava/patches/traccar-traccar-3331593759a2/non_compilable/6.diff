diff --git a/tmp/41983830-eb48-4680-b029-57b34de5c1e9_buggy.java b/tmp/78a5e4d0-6e62-4b4e-b42e-265b30ff1b0a_fixed.java
index 2189af9..ef868e1 100644
--- a/tmp/41983830-eb48-4680-b029-57b34de5c1e9_buggy.java
+++ b/tmp/78a5e4d0-6e62-4b4e-b42e-265b30ff1b0a_fixed.java
@@ -1,113 +1,143 @@
     private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
 
         int type = buf.readUnsignedByte();
 
         if (type == 0xF0) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));
 
             if (buf.readUnsignedByte() > 0) {
                 position.set(Position.KEY_ARCHIVE, true);
             }
 
             buf.readUnsignedByte(); // vehicle type
 
             int count;
             int subtype = buf.readUnsignedByte();
             switch (subtype) {
                 case 0x01:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
+
+                        // Read the data segment defined by 'length' into a temporary buffer.
+                        // This ensures the main buffer's read index is always advanced correctly by 'length' bytes.
+                        ByteBuf data = buf.readBytes(length);
+
+                        try { // Use try-finally to ensure the temporary buffer is released
                             switch (id) {
                                 case 0x0102:
                                 case 0x0528:
                                 case 0x0546:
-                                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                                    // Check if the data buffer has enough bytes for an UnsignedInt (4 bytes)
+                                    if (data.readableBytes() >= 4) {
+                                        position.set(Position.KEY_ODOMETER, data.readUnsignedInt() * 100);
+                                    }
                                     break;
                                 case 0x0103:
-                                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);
+                                    if (data.readableBytes() >= 4) {
+                                        position.set(Position.KEY_FUEL_LEVEL, data.readUnsignedInt() * 0.01);
+                                    }
                                     break;
                                 case 0x052A:
-                                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);
+                                    if (data.readableBytes() >= 2) {
+                                        position.set(Position.KEY_FUEL_LEVEL, data.readUnsignedShort() * 0.01);
+                                    }
                                     break;
                                 case 0x0105:
                                 case 0x052C:
-                                position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);
+                                    if (data.readableBytes() >= 4) {
+                                        position.set(Position.KEY_FUEL_USED, data.readUnsignedInt() * 0.01);
+                                    }
                                     break;
                                 case 0x014A:
                                 case 0x0537:
                                 case 0x0538:
                                 case 0x0539:
-                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
+                                    if (data.readableBytes() >= 2) {
+                                        position.set(Position.KEY_FUEL_CONSUMPTION, data.readUnsignedShort() * 0.01);
+                                    }
                                     break;
                                 default:
+                                    // For other IDs, determine how to read based on the 'length'.
+                                    // The 'data' buffer already contains exactly 'length' bytes.
                                     switch (length) {
                                         case 1:
-                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());
+                                            if (data.readableBytes() >= 1) {
+                                                position.set(Position.PREFIX_IO + id, data.readUnsignedByte());
+                                            }
                                             break;
                                         case 2:
-                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());
+                                            if (data.readableBytes() >= 2) {
+                                                position.set(Position.PREFIX_IO + id, data.readUnsignedShort());
+                                            }
                                             break;
                                         case 4:
-                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());
+                                            if (data.readableBytes() >= 4) {
+                                                position.set(Position.PREFIX_IO + id, data.readUnsignedInt());
+                                            }
                                             break;
                                         default:
-                                        buf.skipBytes(length);
+                                            // If length is not 1, 2, or 4, or if data is not fully consumed,
+                                            // simply ignore the remaining bytes in the 'data' buffer.
+                                            // The main 'buf' is already correctly aligned.
                                             break;
                                     }
                                     break;
                             }
+                        } finally {
+                            data.release(); // Release the temporary buffer to prevent memory leaks
+                        }
                     }
                     decodeCoordinates(position, buf);
                     position.setTime(time);
                     break;
                 case 0x03:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
                         switch (id) {
                             case 0x1A:
                                 position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                                 break;
                             case 0x1B:
                                 position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                                 break;
                             case 0x1C:
                                 position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                                 break;
                             case 0x1D:
                             case 0x1E:
                             case 0x1F:
                                 position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);
                                 break;
                             case 0x23:
                                 position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);
                                 break;
                             default:
                                 break;
                         }
                         buf.skipBytes(length);
                     }
                     decodeCoordinates(position, buf);
                     position.setTime(time);
                     break;
                 case 0x0B:
                     if (buf.readUnsignedByte() > 0) {
                         position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());
                     }
                     getLastLocation(position, time);
                     break;
                 default:
                     return null;
             }
 
             return position;
         }
 
         return null;
     }
\ No newline at end of file
