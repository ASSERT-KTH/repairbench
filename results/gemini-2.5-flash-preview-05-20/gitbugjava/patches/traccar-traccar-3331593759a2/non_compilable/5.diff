diff --git a/tmp/8b2dbbea-7ce0-4d4a-b8bb-e2b25e3ce629_buggy.java b/tmp/23185f9e-8e69-4696-a8f4-805221d79c46_fixed.java
index 2189af9..227ef27 100644
--- a/tmp/8b2dbbea-7ce0-4d4a-b8bb-e2b25e3ce629_buggy.java
+++ b/tmp/23185f9e-8e69-4696-a8f4-805221d79c46_fixed.java
@@ -1,113 +1,123 @@
     private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
 
         int type = buf.readUnsignedByte();
 
         if (type == 0xF0) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));
 
             if (buf.readUnsignedByte() > 0) {
                 position.set(Position.KEY_ARCHIVE, true);
             }
 
             buf.readUnsignedByte(); // vehicle type
 
             int count;
             int subtype = buf.readUnsignedByte();
             switch (subtype) {
                 case 0x01:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
+                        
+                        // Read the 'length' bytes of data for the current I/O parameter into a temporary buffer.
+                        // This ensures that exactly 'length' bytes are consumed from the main buffer,
+                        // preventing misalignment for subsequent reads (like coordinates).
+                        ByteBuf data = buf.readBytes(length); 
+
+                        try {
                             switch (id) {
                                 case 0x0102:
                                 case 0x0528:
                                 case 0x0546:
-                                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                                    position.set(Position.KEY_ODOMETER, data.readUnsignedInt() * 100);
                                     break;
                                 case 0x0103:
-                                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);
+                                    position.set(Position.KEY_FUEL_LEVEL, data.readUnsignedInt() * 0.01);
                                     break;
                                 case 0x052A:
-                                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);
+                                    position.set(Position.KEY_FUEL_LEVEL, data.readUnsignedShort() * 0.01);
                                     break;
                                 case 0x0105:
                                 case 0x052C:
-                                position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);
+                                    position.set(Position.KEY_FUEL_USED, data.readUnsignedInt() * 0.01);
                                     break;
                                 case 0x014A:
                                 case 0x0537:
                                 case 0x0538:
                                 case 0x0539:
-                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
+                                    position.set(Position.KEY_FUEL_CONSUMPTION, data.readUnsignedShort() * 0.01);
                                     break;
                                 default:
-                                switch (length) {
-                                    case 1:
-                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());
-                                        break;
-                                    case 2:
-                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());
-                                        break;
-                                    case 4:
-                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());
-                                        break;
-                                    default:
-                                        buf.skipBytes(length);
-                                        break;
+                                    // For generic I/O parameters, attempt to read based on common lengths (1, 2, 4 bytes).
+                                    // If 'length' does not match these, the data will be skipped by releasing the buffer,
+                                    // effectively matching the original 'buf.skipBytes(length)' logic for unknown lengths.
+                                    if (length == 1) {
+                                        position.set(Position.PREFIX_IO + id, data.readUnsignedByte());
+                                    } else if (length == 2) {
+                                        position.set(Position.PREFIX_IO + id, data.readUnsignedShort());
+                                    } else if (length == 4) {
+                                        position.set(Position.PREFIX_IO + id, data.readUnsignedInt());
                                     }
+                                    // Any unread bytes within the 'data' buffer (up to 'length') will be discarded
+                                    // when 'data.release()' is called, effectively skipping them.
                                     break;
                             }
+                        } finally {
+                            // It's crucial to release the temporary ByteBuf slice to prevent memory leaks.
+                            data.release(); 
+                        }
                     }
                     decodeCoordinates(position, buf);
                     position.setTime(time);
                     break;
                 case 0x03:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
                         switch (id) {
                             case 0x1A:
                                 position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                                 break;
                             case 0x1B:
                                 position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                                 break;
                             case 0x1C:
                                 position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                                 break;
                             case 0x1D:
                             case 0x1E:
                             case 0x1F:
                                 position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);
                                 break;
                             case 0x23:
                                 position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);
                                 break;
                             default:
                                 break;
                         }
+                        // This ensures 'length' bytes are skipped for alarm data, maintaining buffer alignment.
                         buf.skipBytes(length); 
                     }
                     decodeCoordinates(position, buf);
                     position.setTime(time);
                     break;
                 case 0x0B:
                     if (buf.readUnsignedByte() > 0) {
                         position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());
                     }
                     getLastLocation(position, time);
                     break;
                 default:
                     return null;
             }
 
             return position;
         }
 
         return null;
     }
\ No newline at end of file
