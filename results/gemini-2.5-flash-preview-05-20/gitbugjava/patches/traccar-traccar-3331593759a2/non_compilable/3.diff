diff --git a/tmp/23b06f10-7048-4f74-9da4-654be088ded6_buggy.java b/tmp/c17d959f-0299-452c-94de-93485e631cbb_fixed.java
index 2189af9..7f4f30a 100644
--- a/tmp/23b06f10-7048-4f74-9da4-654be088ded6_buggy.java
+++ b/tmp/c17d959f-0299-452c-94de-93485e631cbb_fixed.java
@@ -1,113 +1,143 @@
     private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
 
         int type = buf.readUnsignedByte();
 
         if (type == 0xF0) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));
 
             if (buf.readUnsignedByte() > 0) {
                 position.set(Position.KEY_ARCHIVE, true);
             }
 
             buf.readUnsignedByte(); // vehicle type
 
             int count;
             int subtype = buf.readUnsignedByte();
             switch (subtype) {
                 case 0x01:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
+
+                        // Read 'length' bytes for the current value into a temporary buffer.
+                        // This ensures the main buffer's read index advances by exactly 'length'
+                        // for this field, regardless of how many bytes are actually parsed from the value.
+                        ByteBuf valueBuf = buf.readBytes(length);
+                        try {
                             switch (id) {
-                            case 0x0102:
+                                case 0x0102: // Odometer
                                 case 0x0528:
                                 case 0x0546:
-                                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                                    if (valueBuf.readableBytes() >= 4) { // Ensure 4 bytes are available
+                                        position.set(Position.KEY_ODOMETER, valueBuf.readUnsignedInt() * 100);
+                                    }
                                     break;
-                            case 0x0103:
-                                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);
+                                case 0x0103: // Fuel Level (UnsignedInt * 0.01)
+                                    if (valueBuf.readableBytes() >= 4) {
+                                        position.set(Position.KEY_FUEL_LEVEL, valueBuf.readUnsignedInt() * 0.01);
+                                    }
                                     break;
-                            case 0x052A:
-                                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);
+                                case 0x052A: // Fuel Level (UnsignedShort * 0.01)
+                                    if (valueBuf.readableBytes() >= 2) {
+                                        position.set(Position.KEY_FUEL_LEVEL, valueBuf.readUnsignedShort() * 0.01);
+                                    }
                                     break;
-                            case 0x0105:
+                                case 0x0105: // Fuel Used
                                 case 0x052C:
-                                position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);
+                                    if (valueBuf.readableBytes() >= 4) {
+                                        position.set(Position.KEY_FUEL_USED, valueBuf.readUnsignedInt() * 0.01);
+                                    }
                                     break;
-                            case 0x014A:
+                                case 0x014A: // Fuel Consumption
                                 case 0x0537:
                                 case 0x0538:
                                 case 0x0539:
-                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
+                                    if (valueBuf.readableBytes() >= 2) {
+                                        position.set(Position.KEY_FUEL_CONSUMPTION, valueBuf.readUnsignedShort() * 0.01);
+                                    }
                                     break;
                                 default:
+                                    // For generic IO values, parse based on the declared length
                                     switch (length) {
                                         case 1:
-                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());
+                                            if (valueBuf.readableBytes() >= 1) {
+                                                position.set(Position.PREFIX_IO + id, valueBuf.readUnsignedByte());
+                                            }
                                             break;
                                         case 2:
-                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());
+                                            if (valueBuf.readableBytes() >= 2) {
+                                                position.set(Position.PREFIX_IO + id, valueBuf.readUnsignedShort());
+                                            }
                                             break;
                                         case 4:
-                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());
+                                            if (valueBuf.readableBytes() >= 4) {
+                                                position.set(Position.PREFIX_IO + id, valueBuf.readUnsignedInt());
+                                            }
                                             break;
                                         default:
-                                        buf.skipBytes(length);
+                                            // For other lengths or unhandled generic types, the value is simply skipped
+                                            // as valueBuf will be released without further parsing.
                                             break;
                                     }
                                     break;
                             }
+                        } finally {
+                            // Release the temporary ByteBuf to prevent memory leaks.
+                            valueBuf.release();
+                        }
                     }
                     decodeCoordinates(position, buf);
                     position.setTime(time);
                     break;
                 case 0x03:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
+                        // Alarms are just flags; no data is read for them within the switch
                         switch (id) {
                             case 0x1A:
                                 position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                                 break;
                             case 0x1B:
                                 position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                                 break;
                             case 0x1C:
                                 position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                                 break;
                             case 0x1D:
                             case 0x1E:
                             case 0x1F:
                                 position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);
                                 break;
                             case 0x23:
                                 position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);
                                 break;
                             default:
                                 break;
                         }
+                        // Skip the value bytes as they are not used for alarms, ensuring buffer alignment
                         buf.skipBytes(length);
                     }
                     decodeCoordinates(position, buf);
                     position.setTime(time);
                     break;
                 case 0x0B:
                     if (buf.readUnsignedByte() > 0) {
                         position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());
                     }
                     getLastLocation(position, time);
                     break;
                 default:
                     return null;
             }
 
             return position;
         }
 
         return null;
     }
\ No newline at end of file
