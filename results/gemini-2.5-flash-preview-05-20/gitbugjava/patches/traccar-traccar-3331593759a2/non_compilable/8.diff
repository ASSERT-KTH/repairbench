diff --git a/tmp/16038ee4-50b9-43f9-88cf-cd36cb315641_buggy.java b/tmp/06e4b3a7-bd9e-4e55-8b2a-45d71f80dc4a_fixed.java
index 2189af9..66a5a43 100644
--- a/tmp/16038ee4-50b9-43f9-88cf-cd36cb315641_buggy.java
+++ b/tmp/06e4b3a7-bd9e-4e55-8b2a-45d71f80dc4a_fixed.java
@@ -1,113 +1,158 @@
     private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
 
         int type = buf.readUnsignedByte();
 
         if (type == 0xF0) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));
 
             if (buf.readUnsignedByte() > 0) {
                 position.set(Position.KEY_ARCHIVE, true);
             }
 
             buf.readUnsignedByte(); // vehicle type
 
             int count;
             int subtype = buf.readUnsignedByte();
             switch (subtype) {
-                case 0x01:
+                case 0x01: // I/O parameters
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
+                        
+                        // Create a slice containing exactly 'length' bytes for the value.
+                        // This ensures the main buffer's reader index is always advanced correctly,
+                        // preventing misalignment for subsequent reads (e.g., coordinates).
+                        ByteBuf valueBuf = buf.readSlice(length);
+
                         switch (id) {
-                            case 0x0102:
+                            case 0x0102: // Odometer
                             case 0x0528:
                             case 0x0546:
-                                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                                // Read 'length' bytes into a long and interpret as unsigned int.
+                                // This handles cases where 'length' might be less than 4 bytes.
+                                long odometerValue = 0;
+                                for (int j = 0; j < length; j++) {
+                                    odometerValue = (odometerValue << 8) | valueBuf.readUnsignedByte();
+                                }
+                                position.set(Position.KEY_ODOMETER, odometerValue * 100);
                                 break;
-                            case 0x0103:
-                                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);
+                            case 0x0103: // Fuel Level (Unsigned Int)
+                                long fuelLevelInt = 0;
+                                for (int j = 0; j < length; j++) {
+                                    fuelLevelInt = (fuelLevelInt << 8) | valueBuf.readUnsignedByte();
+                                }
+                                position.set(Position.KEY_FUEL_LEVEL, fuelLevelInt * 0.01);
                                 break;
-                            case 0x052A:
-                                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);
+                            case 0x052A: // Fuel Level (Unsigned Short)
+                                long fuelLevelShort = 0;
+                                for (int j = 0; j < length; j++) {
+                                    fuelLevelShort = (fuelLevelShort << 8) | valueBuf.readUnsignedByte();
+                                }
+                                position.set(Position.KEY_FUEL_LEVEL, fuelLevelShort * 0.01);
                                 break;
-                            case 0x0105:
+                            case 0x0105: // Fuel Used
                             case 0x052C:
-                                position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);
+                                long fuelUsed = 0;
+                                for (int j = 0; j < length; j++) {
+                                    fuelUsed = (fuelUsed << 8) | valueBuf.readUnsignedByte();
+                                }
+                                position.set(Position.KEY_FUEL_USED, fuelUsed * 0.01);
                                 break;
-                            case 0x014A:
+                            case 0x014A: // Fuel Consumption
                             case 0x0537:
                             case 0x0538:
                             case 0x0539:
-                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
+                                long fuelConsumption = 0;
+                                for (int j = 0; j < length; j++) {
+                                    fuelConsumption = (fuelConsumption << 8) | valueBuf.readUnsignedByte();
+                                }
+                                position.set(Position.KEY_FUEL_CONSUMPTION, fuelConsumption * 0.01);
                                 break;
                             default:
+                                // For generic I/O parameters, the 'length' byte dictates the value size.
+                                // 'valueBuf' already contains exactly 'length' bytes.
+                                // We read from 'valueBuf' to get the value for the position attribute.
                                 switch (length) {
                                     case 1:
-                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());
+                                        position.set(Position.PREFIX_IO + id, valueBuf.readUnsignedByte());
                                         break;
                                     case 2:
-                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());
+                                        position.set(Position.PREFIX_IO + id, valueBuf.readUnsignedShort());
                                         break;
                                     case 4:
-                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());
+                                        position.set(Position.PREFIX_IO + id, valueBuf.readUnsignedInt());
                                         break;
                                     default:
-                                        buf.skipBytes(length);
+                                        // If length is not 1, 2, or 4, and it's not a special ID,
+                                        // the bytes in valueBuf are consumed by the slice but not interpreted.
+                                        // If the protocol requires specific interpretation (e.g., as a string),
+                                        // that logic would be added here.
                                         break;
                                 }
                                 break;
                         }
                     }
                     decodeCoordinates(position, buf);
                     position.setTime(time);
                     break;
-                case 0x03:
+                case 0x03: // Alarm parameters
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
+                        
+                        // Create a slice for the value. This ensures 'length' bytes are consumed
+                        // from the main buffer, maintaining alignment.
+                        ByteBuf valueBuf = buf.readSlice(length); 
+
                         switch (id) {
                             case 0x1A:
                                 position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                                 break;
                             case 0x1B:
                                 position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                                 break;
                             case 0x1C:
                                 position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                                 break;
                             case 0x1D:
                             case 0x1E:
                             case 0x1F:
                                 position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);
                                 break;
                             case 0x23:
                                 position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);
                                 break;
                             default:
+                                // For unknown alarm IDs, the value bytes are consumed by readSlice,
+                                // but their content is ignored for alarm processing.
                                 break;
                         }
-                        buf.skipBytes(length);
+                        // The original `buf.skipBytes(length)` is no longer needed here,
+                        // as `readSlice(length)` already advanced the buffer's reader index.
                     }
                     decodeCoordinates(position, buf);
                     position.setTime(time);
                     break;
-                case 0x0B:
+                case 0x0B: // VIN
                     if (buf.readUnsignedByte() > 0) {
                         position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());
                     }
                     getLastLocation(position, time);
                     break;
                 default:
+                    // If subtype is unrecognized, return null, effectively discarding this transparent message.
+                    // No explicit byte skipping for the rest of the 0xF0 block is done here,
+                    // assuming the containing decoder (if any) would handle the remainder of the overall message.
                     return null;
             }
 
             return position;
         }
 
         return null;
     }
\ No newline at end of file
