diff --git a/tmp/aee9a963-c8b2-470f-8492-c4b91ba03375_buggy.java b/tmp/1c397cdf-1e34-4bca-9714-cf3ff1d4f019_fixed.java
index e883360..4a2e86d 100644
--- a/tmp/aee9a963-c8b2-470f-8492-c4b91ba03375_buggy.java
+++ b/tmp/1c397cdf-1e34-4bca-9714-cf3ff1d4f019_fixed.java
@@ -1,196 +1,328 @@
     private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {
         Position position = new Position(getProtocolName());
 
         int index = 0;
         String[] values = sentence.split(",");
 
         index += 1; // header
         index += 1; // protocol version
 
-        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
+        // Ensure bounds before accessing values[index++]
+        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress,
+                index < values.length ? values[index++] : "");
         position.setDeviceId(deviceSession.getDeviceId());
 
         index += 1; // device name
         index += 1; // report type
         index += 1; // canbus state
-        long reportMask = Long.parseLong(values[index++], 16);
+
+        // Fix: Add isEmpty check for reportMask
+        long reportMask = 0;
+        if (index < values.length) {
+            String reportMaskString = values[index++];
+            if (!reportMaskString.isEmpty()) {
+                reportMask = Long.parseLong(reportMaskString, 16);
+            }
+        }
+
         long reportMaskExt = 0;
 
         if (BitUtil.check(reportMask, 0)) {
+            if (index < values.length) {
                 position.set(Position.KEY_VIN, values[index++]);
+            } else {
+                index++; // Consume index even if out of bounds to match expected increment
             }
+        }
+        // Fix: Add isEmpty check for KEY_IGNITION
         if (BitUtil.check(reportMask, 1)) {
-            position.set(Position.KEY_IGNITION, Integer.parseInt(values[index++]) > 0);
+            if (index < values.length) {
+                String value = values[index++];
+                if (!value.isEmpty()) {
+                    position.set(Position.KEY_IGNITION, Integer.parseInt(value) > 0);
+                }
+            } else {
+                index++;
+            }
         }
         if (BitUtil.check(reportMask, 2)) {
+            if (index < values.length) {
                 position.set(Position.KEY_OBD_ODOMETER, values[index++]);
+            } else {
+                index++;
             }
-        if (BitUtil.check(reportMask, 3) && !values[index++].isEmpty()) {
+        }
+        // These already have !values[index++].isEmpty() which ensures the string is not empty before parsing
+        if (BitUtil.check(reportMask, 3) && index < values.length && !values[index++].isEmpty()) {
             position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index - 1]));
         }
-        if (BitUtil.check(reportMask, 5) && !values[index++].isEmpty()) {
+        if (BitUtil.check(reportMask, 5) && index < values.length && !values[index++].isEmpty()) {
             position.set(Position.KEY_RPM, Integer.parseInt(values[index - 1]));
         }
-        if (BitUtil.check(reportMask, 4) && !values[index++].isEmpty()) {
+        if (BitUtil.check(reportMask, 4) && index < values.length && !values[index++].isEmpty()) {
             position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
         }
-        if (BitUtil.check(reportMask, 6) && !values[index++].isEmpty()) {
+        if (BitUtil.check(reportMask, 6) && index < values.length && !values[index++].isEmpty()) {
             position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index - 1]));
         }
-        if (BitUtil.check(reportMask, 7) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index - 1].substring(1)));
+        // Fix: Improved check for substring and parsing for fuel consumption
+        if (BitUtil.check(reportMask, 7)) {
+            if (index < values.length) {
+                String fuelConsumptionValue = values[index++];
+                if (fuelConsumptionValue.length() > 1) { // Ensure string is long enough for substring(1)
+                    String parsedValue = fuelConsumptionValue.substring(1);
+                    if (!parsedValue.isEmpty()) { // Check if the substring result is not empty
+                        position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(parsedValue));
                     }
-        if (BitUtil.check(reportMask, 8) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index - 1].substring(1)));
                 }
-        if (BitUtil.check(reportMask, 9) && !values[index++].isEmpty()) {
+            } else {
+                index++;
+            }
+        }
+        // Fix: Improved check for substring and parsing for fuel level
+        if (BitUtil.check(reportMask, 8)) {
+            if (index < values.length) {
+                String fuelLevelValue = values[index++];
+                if (fuelLevelValue.length() > 1) { // Ensure string is long enough for substring(1)
+                    String parsedValue = fuelLevelValue.substring(1);
+                    if (!parsedValue.isEmpty()) { // Check if the substring result is not empty
+                        position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(parsedValue));
+                    }
+                }
+            } else {
+                index++;
+            }
+        }
+        if (BitUtil.check(reportMask, 9) && index < values.length && !values[index++].isEmpty()) {
             position.set("range", Long.parseLong(values[index - 1]) * 100);
         }
-        if (BitUtil.check(reportMask, 10) && !values[index++].isEmpty()) {
+        if (BitUtil.check(reportMask, 10) && index < values.length && !values[index++].isEmpty()) {
             position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index - 1]));
         }
-        if (BitUtil.check(reportMask, 11) && !values[index++].isEmpty()) {
+        if (BitUtil.check(reportMask, 11) && index < values.length && !values[index++].isEmpty()) {
             position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index - 1])));
         }
+        // Fix: Add isEmpty check for KEY_DRIVING_TIME
         if (BitUtil.check(reportMask, 12)) {
-            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index++]));
+            if (index < values.length) {
+                String value = values[index++];
+                if (!value.isEmpty()) {
+                    position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(value));
                 }
+            } else {
+                index++;
+            }
+        }
+        // Fix: Add isEmpty check for idleHours
         if (BitUtil.check(reportMask, 13)) {
-            position.set("idleHours", Double.parseDouble(values[index++]));
+            if (index < values.length) {
+                String value = values[index++];
+                if (!value.isEmpty()) {
+                    position.set("idleHours", Double.parseDouble(value));
                 }
-        if (BitUtil.check(reportMask, 14) && !values[index++].isEmpty()) {
+            } else {
+                index++;
+            }
+        }
+        if (BitUtil.check(reportMask, 14) && index < values.length && !values[index++].isEmpty()) {
             position.set("idleFuelConsumption", Double.parseDouble(values[index - 1]));
         }
-        if (BitUtil.check(reportMask, 15) && !values[index++].isEmpty()) {
+        if (BitUtil.check(reportMask, 15) && index < values.length && !values[index++].isEmpty()) {
             position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index - 1]));
         }
-        if (BitUtil.check(reportMask, 16) && !values[index++].isEmpty()) {
+        if (BitUtil.check(reportMask, 16) && index < values.length && !values[index++].isEmpty()) {
             position.set("tachographInfo", Integer.parseInt(values[index - 1], 16));
         }
-        if (BitUtil.check(reportMask, 17) && !values[index++].isEmpty()) {
+        if (BitUtil.check(reportMask, 17) && index < values.length && !values[index++].isEmpty()) {
             position.set("indicators", Integer.parseInt(values[index - 1], 16));
         }
-        if (BitUtil.check(reportMask, 18) && !values[index++].isEmpty()) {
+        if (BitUtil.check(reportMask, 18) && index < values.length && !values[index++].isEmpty()) {
             position.set("lights", Integer.parseInt(values[index - 1], 16));
         }
-        if (BitUtil.check(reportMask, 19) && !values[index++].isEmpty()) {
+        if (BitUtil.check(reportMask, 19) && index < values.length && !values[index++].isEmpty()) {
             position.set("doors", Integer.parseInt(values[index - 1], 16));
         }
-        if (BitUtil.check(reportMask, 20) && !values[index++].isEmpty()) {
+        if (BitUtil.check(reportMask, 20) && index < values.length && !values[index++].isEmpty()) {
             position.set("vehicleOverspeed", Double.parseDouble(values[index - 1]));
         }
-        if (BitUtil.check(reportMask, 21) && !values[index++].isEmpty()) {
+        if (BitUtil.check(reportMask, 21) && index < values.length && !values[index++].isEmpty()) {
             position.set("engineOverspeed", Double.parseDouble(values[index - 1]));
         }
+
+        // Fix: Add isEmpty check for reportMaskExt
         if (BitUtil.check(reportMask, 29)) {
-            reportMaskExt = Long.parseLong(values[index++], 16);
+            if (index < values.length) {
+                String reportMaskExtString = values[index++];
+                if (!reportMaskExtString.isEmpty()) {
+                    reportMaskExt = Long.parseLong(reportMaskExtString, 16);
                 }
-        if (BitUtil.check(reportMaskExt, 0) && !values[index++].isEmpty()) {
+            } else {
+                index++;
+            }
+        }
+        if (BitUtil.check(reportMaskExt, 0) && index < values.length && !values[index++].isEmpty()) {
             position.set("adBlueLevel", Integer.parseInt(values[index - 1]));
         }
-        if (BitUtil.check(reportMaskExt, 1) && !values[index++].isEmpty()) {
+        if (BitUtil.check(reportMaskExt, 1) && index < values.length && !values[index++].isEmpty()) {
             position.set("axleWeight1", Integer.parseInt(values[index - 1]));
         }
-        if (BitUtil.check(reportMaskExt, 2) && !values[index++].isEmpty()) {
+        if (BitUtil.check(reportMaskExt, 2) && index < values.length && !values[index++].isEmpty()) {
             position.set("axleWeight3", Integer.parseInt(values[index - 1]));
         }
-        if (BitUtil.check(reportMaskExt, 3) && !values[index++].isEmpty()) {
+        if (BitUtil.check(reportMaskExt, 3) && index < values.length && !values[index++].isEmpty()) {
             position.set("axleWeight4", Integer.parseInt(values[index - 1]));
         }
         if (BitUtil.check(reportMaskExt, 4)) {
-            index += 1; // tachograph overspeed
+            if (index < values.length) { index += 1; }
         }
         if (BitUtil.check(reportMaskExt, 5)) {
-            index += 1; // tachograph motion
+            if (index < values.length) { index += 1; }
         }
         if (BitUtil.check(reportMaskExt, 6)) {
-            index += 1; // tachograph direction
+            if (index < values.length) { index += 1; }
         }
-        if (BitUtil.check(reportMaskExt, 7) && !values[index++].isEmpty()) {
+        if (BitUtil.check(reportMaskExt, 7) && index < values.length && !values[index++].isEmpty()) {
             position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index - 1]) * 0.001);
         }
         if (BitUtil.check(reportMaskExt, 8)) {
-            index += 1; // pedal breaking factor
+            if (index < values.length) { index += 1; }
         }
         if (BitUtil.check(reportMaskExt, 9)) {
-            index += 1; // engine breaking factor
+            if (index < values.length) { index += 1; }
         }
         if (BitUtil.check(reportMaskExt, 10)) {
-            index += 1; // total accelerator kick-downs
+            if (index < values.length) { index += 1; }
         }
         if (BitUtil.check(reportMaskExt, 11)) {
-            index += 1; // total effective engine speed
+            if (index < values.length) { index += 1; }
         }
         if (BitUtil.check(reportMaskExt, 12)) {
-            index += 1; // total cruise control time
+            if (index < values.length) { index += 1; }
         }
         if (BitUtil.check(reportMaskExt, 13)) {
-            index += 1; // total accelerator kick-down time
+            if (index < values.length) { index += 1; }
         }
         if (BitUtil.check(reportMaskExt, 14)) {
-            index += 1; // total brake application
+            if (index < values.length) { index += 1; }
         }
-        if (BitUtil.check(reportMaskExt, 15) && !values[index++].isEmpty()) {
+        if (BitUtil.check(reportMaskExt, 15) && index < values.length && !values[index++].isEmpty()) {
             position.set("driver1Card", values[index - 1]);
         }
-        if (BitUtil.check(reportMaskExt, 16) && !values[index++].isEmpty()) {
+        if (BitUtil.check(reportMaskExt, 16) && index < values.length && !values[index++].isEmpty()) {
             position.set("driver2Card", values[index - 1]);
         }
-        if (BitUtil.check(reportMaskExt, 17) && !values[index++].isEmpty()) {
+        if (BitUtil.check(reportMaskExt, 17) && index < values.length && !values[index++].isEmpty()) {
             position.set("driver1Name", values[index - 1]);
         }
-        if (BitUtil.check(reportMaskExt, 18) && !values[index++].isEmpty()) {
+        if (BitUtil.check(reportMaskExt, 18) && index < values.length && !values[index++].isEmpty()) {
             position.set("driver2Name", values[index - 1]);
         }
-        if (BitUtil.check(reportMaskExt, 19) && !values[index++].isEmpty()) {
+        if (BitUtil.check(reportMaskExt, 19) && index < values.length && !values[index++].isEmpty()) {
             position.set("registration", values[index - 1]);
         }
         if (BitUtil.check(reportMaskExt, 20)) {
-            index += 1; // expansion information
+            if (index < values.length) { index += 1; }
         }
         if (BitUtil.check(reportMaskExt, 21)) {
-            index += 1; // rapid brakings
+            if (index < values.length) { index += 1; }
         }
         if (BitUtil.check(reportMaskExt, 22)) {
-            index += 1; // rapid accelerations
+            if (index < values.length) { index += 1; }
         }
         if (BitUtil.check(reportMaskExt, 23)) {
-            index += 1; // engine torque
+            if (index < values.length) { index += 1; }
         }
 
         DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
 
         if (BitUtil.check(reportMask, 30)) {
-            while (values[index].isEmpty()) {
+            while (index < values.length && values[index].isEmpty()) { // Add bounds check
                 index += 1;
             }
-            position.setValid(Integer.parseInt(values[index++]) > 0);
-            if (!values[index].isEmpty()) {
-                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
-                position.setCourse(Integer.parseInt(values[index++]));
-                position.setAltitude(Double.parseDouble(values[index++]));
-                position.setLongitude(Double.parseDouble(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index++]));
-                position.setTime(dateFormat.parse(values[index++]));
+            // Fix: Add isEmpty check for 'valid' field
+            if (index < values.length) {
+                String validValue = values[index++];
+                if (!validValue.isEmpty()) {
+                    position.setValid(Integer.parseInt(validValue) > 0);
+                }
             } else {
-                index += 6; // no location
+                index++; // Consume index even if out of bounds
+            }
+
+            // Fix: Check each location field for emptiness
+            // The condition `!values[index].isEmpty()` for the first field determines if the block is processed.
+            // Ensure there are enough fields for all 6 location parameters (speed, course, alt, long, lat, time).
+            // We check `index + 5 < values.length` for 6 fields (current index + 0 to 5)
+            if (index + 5 < values.length && !values[index].isEmpty()) {
+                String speedString = values[index++];
+                if (!speedString.isEmpty()) {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(speedString)));
+                }
+
+                String courseString = values[index++];
+                if (!courseString.isEmpty()) {
+                    position.setCourse(Integer.parseInt(courseString));
+                }
+
+                String altitudeString = values[index++];
+                if (!altitudeString.isEmpty()) {
+                    position.setAltitude(Double.parseDouble(altitudeString));
+                }
+
+                String longitudeString = values[index++];
+                if (!longitudeString.isEmpty()) {
+                    position.setLongitude(Double.parseDouble(longitudeString));
+                }
+
+                String latitudeString = values[index++];
+                if (!latitudeString.isEmpty()) {
+                    position.setLatitude(Double.parseDouble(latitudeString));
+                }
+
+                String timeString = values[index++];
+                if (!timeString.isEmpty()) {
+                    position.setTime(dateFormat.parse(timeString));
+                }
+            } else {
+                // If the initial field is empty or not enough fields, skip all 6 location fields.
+                // Loop to consume up to 6 fields if they exist to keep index accurate.
+                for (int i = 0; i < 6; i++) {
+                    if (index < values.length) {
+                        index++;
+                    } else {
+                        break; // No more values to skip
+                    }
+                }
                 getLastLocation(position, null);
             }
         } else {
             getLastLocation(position, null);
         }
 
         if (BitUtil.check(reportMask, 31)) {
-            index += 4; // cell
-            index += 1; // reserved
+            // These are just advancing index, not parsing. Ensure bounds.
+            if (index + 3 < values.length) { // 4 fields for cell (index, index+1, index+2, index+3)
+                index += 4;
+            } else {
+                index = values.length; // Move to end if not enough
+            }
+            if (index < values.length) { // reserved field
+                index += 1;
+            }
         }
 
+        // Fix: Add bounds check and isEmpty check for the final time field
+        if (index < values.length) {
+            String finalTimeString = values[index];
+            if (!finalTimeString.isEmpty()) {
                 if (ignoreFixTime) {
-            position.setTime(dateFormat.parse(values[index]));
+                    position.setTime(dateFormat.parse(finalTimeString));
                 } else {
-            position.setDeviceTime(dateFormat.parse(values[index]));
+                    position.setDeviceTime(dateFormat.parse(finalTimeString));
+                }
+            }
         }
 
         return position;
     }
\ No newline at end of file
