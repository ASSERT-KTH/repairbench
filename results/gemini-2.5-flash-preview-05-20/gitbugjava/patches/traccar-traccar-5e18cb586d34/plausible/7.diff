diff --git a/tmp/837dd66e-cbb3-4e08-bbc5-9edde8fedd2e_buggy.java b/tmp/df6ee89f-fabd-41bc-b23a-2172d116a9e2_fixed.java
index e883360..d16c1fb 100644
--- a/tmp/837dd66e-cbb3-4e08-bbc5-9edde8fedd2e_buggy.java
+++ b/tmp/df6ee89f-fabd-41bc-b23a-2172d116a9e2_fixed.java
@@ -1,196 +1,382 @@
     private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {
         Position position = new Position(getProtocolName());
 
         int index = 0;
         String[] values = sentence.split(",");
 
         index += 1; // header
         index += 1; // protocol version
 
+        // Device ID - Assumed mandatory and non-empty for getDeviceSession.
+        // If it can be empty, getDeviceSession should handle it or it implies an invalid message format.
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
         position.setDeviceId(deviceSession.getDeviceId());
 
         index += 1; // device name
         index += 1; // report type
         index += 1; // canbus state
-        long reportMask = Long.parseLong(values[index++], 16);
+
+        long reportMask = 0;
+        String field; // Reusable variable for current field value
+
+        // Report Mask
+        field = (index < values.length) ? values[index] : "";
+        if (!field.isEmpty()) {
+            reportMask = Long.parseLong(field, 16);
+        }
+        index++; // Consume reportMask field
+
         long reportMaskExt = 0;
 
-        if (BitUtil.check(reportMask, 0)) {
-            position.set(Position.KEY_VIN, values[index++]);
+        // Fields controlled by reportMask
+        if (BitUtil.check(reportMask, 0)) { // KEY_VIN
+            field = (index < values.length) ? values[index] : "";
+            position.set(Position.KEY_VIN, field); // String field, can be empty
+            index++;
         }
-        if (BitUtil.check(reportMask, 1)) {
-            position.set(Position.KEY_IGNITION, Integer.parseInt(values[index++]) > 0);
+        if (BitUtil.check(reportMask, 1)) { // KEY_IGNITION
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.set(Position.KEY_IGNITION, Integer.parseInt(field) > 0);
             }
-        if (BitUtil.check(reportMask, 2)) {
-            position.set(Position.KEY_OBD_ODOMETER, values[index++]);
+            index++;
         }
-        if (BitUtil.check(reportMask, 3) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index - 1]));
+        if (BitUtil.check(reportMask, 2)) { // KEY_OBD_ODOMETER
+            field = (index < values.length) ? values[index] : "";
+            position.set(Position.KEY_OBD_ODOMETER, field); // String field, can be empty
+            index++;
         }
-        if (BitUtil.check(reportMask, 5) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_RPM, Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMask, 3)) { // KEY_FUEL_USED
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.set(Position.KEY_FUEL_USED, Double.parseDouble(field));
             }
-        if (BitUtil.check(reportMask, 4) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+            index++;
         }
-        if (BitUtil.check(reportMask, 6) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMask, 5)) { // KEY_RPM (comes before 4 in original code)
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.set(Position.KEY_RPM, Integer.parseInt(field));
             }
-        if (BitUtil.check(reportMask, 7) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index - 1].substring(1)));
+            index++;
         }
-        if (BitUtil.check(reportMask, 8) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index - 1].substring(1)));
+        if (BitUtil.check(reportMask, 4)) { // KEY_OBD_SPEED (comes after 5 in original code)
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(field)));
             }
-        if (BitUtil.check(reportMask, 9) && !values[index++].isEmpty()) {
-            position.set("range", Long.parseLong(values[index - 1]) * 100);
+            index++;
         }
-        if (BitUtil.check(reportMask, 10) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMask, 6)) { // KEY_COOLANT_TEMP
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(field));
             }
-        if (BitUtil.check(reportMask, 11) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index - 1])));
+            index++;
         }
-        if (BitUtil.check(reportMask, 12)) {
-            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index++]));
+        if (BitUtil.check(reportMask, 7)) { // KEY_FUEL_CONSUMPTION
+            field = (index < values.length) ? values[index] : "";
+            // Check length to avoid StringIndexOutOfBoundsException on empty or single-char string
+            if (!field.isEmpty() && field.length() > 1) {
+                position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(field.substring(1)));
             }
-        if (BitUtil.check(reportMask, 13)) {
-            position.set("idleHours", Double.parseDouble(values[index++]));
+            index++;
         }
-        if (BitUtil.check(reportMask, 14) && !values[index++].isEmpty()) {
-            position.set("idleFuelConsumption", Double.parseDouble(values[index - 1]));
+        if (BitUtil.check(reportMask, 8)) { // KEY_FUEL_LEVEL
+            field = (index < values.length) ? values[index] : "";
+            // Check length to avoid StringIndexOutOfBoundsException on empty or single-char string
+            if (!field.isEmpty() && field.length() > 1) {
+                position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(field.substring(1)));
             }
-        if (BitUtil.check(reportMask, 15) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index - 1]));
+            index++;
         }
-        if (BitUtil.check(reportMask, 16) && !values[index++].isEmpty()) {
-            position.set("tachographInfo", Integer.parseInt(values[index - 1], 16));
+        if (BitUtil.check(reportMask, 9)) { // range
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.set("range", Long.parseLong(field) * 100);
             }
-        if (BitUtil.check(reportMask, 17) && !values[index++].isEmpty()) {
-            position.set("indicators", Integer.parseInt(values[index - 1], 16));
+            index++;
         }
-        if (BitUtil.check(reportMask, 18) && !values[index++].isEmpty()) {
-            position.set("lights", Integer.parseInt(values[index - 1], 16));
+        if (BitUtil.check(reportMask, 10)) { // KEY_THROTTLE
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.set(Position.KEY_THROTTLE, Integer.parseInt(field));
             }
-        if (BitUtil.check(reportMask, 19) && !values[index++].isEmpty()) {
-            position.set("doors", Integer.parseInt(values[index - 1], 16));
+            index++;
         }
-        if (BitUtil.check(reportMask, 20) && !values[index++].isEmpty()) {
-            position.set("vehicleOverspeed", Double.parseDouble(values[index - 1]));
+        if (BitUtil.check(reportMask, 11)) { // KEY_HOURS
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(field)));
             }
-        if (BitUtil.check(reportMask, 21) && !values[index++].isEmpty()) {
-            position.set("engineOverspeed", Double.parseDouble(values[index - 1]));
+            index++;
         }
-        if (BitUtil.check(reportMask, 29)) {
-            reportMaskExt = Long.parseLong(values[index++], 16);
+        if (BitUtil.check(reportMask, 12)) { // KEY_DRIVING_TIME
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(field));
             }
-        if (BitUtil.check(reportMaskExt, 0) && !values[index++].isEmpty()) {
-            position.set("adBlueLevel", Integer.parseInt(values[index - 1]));
+            index++;
         }
-        if (BitUtil.check(reportMaskExt, 1) && !values[index++].isEmpty()) {
-            position.set("axleWeight1", Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMask, 13)) { // idleHours
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.set("idleHours", Double.parseDouble(field));
             }
-        if (BitUtil.check(reportMaskExt, 2) && !values[index++].isEmpty()) {
-            position.set("axleWeight3", Integer.parseInt(values[index - 1]));
+            index++;
         }
-        if (BitUtil.check(reportMaskExt, 3) && !values[index++].isEmpty()) {
-            position.set("axleWeight4", Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMask, 14)) { // idleFuelConsumption
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.set("idleFuelConsumption", Double.parseDouble(field));
             }
-        if (BitUtil.check(reportMaskExt, 4)) {
-            index += 1; // tachograph overspeed
+            index++;
         }
-        if (BitUtil.check(reportMaskExt, 5)) {
-            index += 1; // tachograph motion
+        if (BitUtil.check(reportMask, 15)) { // KEY_AXLE_WEIGHT
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(field));
             }
-        if (BitUtil.check(reportMaskExt, 6)) {
-            index += 1; // tachograph direction
+            index++;
         }
-        if (BitUtil.check(reportMaskExt, 7) && !values[index++].isEmpty()) {
-            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index - 1]) * 0.001);
+        if (BitUtil.check(reportMask, 16)) { // tachographInfo
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.set("tachographInfo", Integer.parseInt(field, 16));
             }
-        if (BitUtil.check(reportMaskExt, 8)) {
-            index += 1; // pedal breaking factor
+            index++;
         }
-        if (BitUtil.check(reportMaskExt, 9)) {
-            index += 1; // engine breaking factor
+        if (BitUtil.check(reportMask, 17)) { // indicators
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.set("indicators", Integer.parseInt(field, 16));
             }
-        if (BitUtil.check(reportMaskExt, 10)) {
-            index += 1; // total accelerator kick-downs
+            index++;
         }
-        if (BitUtil.check(reportMaskExt, 11)) {
-            index += 1; // total effective engine speed
+        if (BitUtil.check(reportMask, 18)) { // lights
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.set("lights", Integer.parseInt(field, 16));
             }
-        if (BitUtil.check(reportMaskExt, 12)) {
-            index += 1; // total cruise control time
+            index++;
         }
-        if (BitUtil.check(reportMaskExt, 13)) {
-            index += 1; // total accelerator kick-down time
+        if (BitUtil.check(reportMask, 19)) { // doors
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.set("doors", Integer.parseInt(field, 16));
             }
-        if (BitUtil.check(reportMaskExt, 14)) {
-            index += 1; // total brake application
+            index++;
         }
-        if (BitUtil.check(reportMaskExt, 15) && !values[index++].isEmpty()) {
-            position.set("driver1Card", values[index - 1]);
+        if (BitUtil.check(reportMask, 20)) { // vehicleOverspeed
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.set("vehicleOverspeed", Double.parseDouble(field));
             }
-        if (BitUtil.check(reportMaskExt, 16) && !values[index++].isEmpty()) {
-            position.set("driver2Card", values[index - 1]);
+            index++;
         }
-        if (BitUtil.check(reportMaskExt, 17) && !values[index++].isEmpty()) {
-            position.set("driver1Name", values[index - 1]);
+        if (BitUtil.check(reportMask, 21)) { // engineOverspeed
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.set("engineOverspeed", Double.parseDouble(field));
             }
-        if (BitUtil.check(reportMaskExt, 18) && !values[index++].isEmpty()) {
-            position.set("driver2Name", values[index - 1]);
+            index++;
         }
-        if (BitUtil.check(reportMaskExt, 19) && !values[index++].isEmpty()) {
-            position.set("registration", values[index - 1]);
+        if (BitUtil.check(reportMask, 29)) { // reportMaskExt
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                reportMaskExt = Long.parseLong(field, 16);
             }
-        if (BitUtil.check(reportMaskExt, 20)) {
-            index += 1; // expansion information
+            index++;
         }
-        if (BitUtil.check(reportMaskExt, 21)) {
-            index += 1; // rapid brakings
+
+        // Fields controlled by reportMaskExt
+        if (BitUtil.check(reportMaskExt, 0)) { // adBlueLevel
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.set("adBlueLevel", Integer.parseInt(field));
             }
-        if (BitUtil.check(reportMaskExt, 22)) {
-            index += 1; // rapid accelerations
+            index++;
         }
-        if (BitUtil.check(reportMaskExt, 23)) {
-            index += 1; // engine torque
+        if (BitUtil.check(reportMaskExt, 1)) { // axleWeight1
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.set("axleWeight1", Integer.parseInt(field));
+            }
+            index++;
+        }
+        if (BitUtil.check(reportMaskExt, 2)) { // axleWeight3
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.set("axleWeight3", Integer.parseInt(field));
+            }
+            index++;
+        }
+        if (BitUtil.check(reportMaskExt, 3)) { // axleWeight4
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.set("axleWeight4", Integer.parseInt(field));
+            }
+            index++;
+        }
+        if (BitUtil.check(reportMaskExt, 4)) { // tachograph overspeed
+            index = Math.min(index + 1, values.length);
+        }
+        if (BitUtil.check(reportMaskExt, 5)) { // tachograph motion
+            index = Math.min(index + 1, values.length);
+        }
+        if (BitUtil.check(reportMaskExt, 6)) { // tachograph direction
+            index = Math.min(index + 1, values.length);
+        }
+        if (BitUtil.check(reportMaskExt, 7)) { // ADC + 1
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.set(Position.PREFIX_ADC + 1, Integer.parseInt(field) * 0.001);
+            }
+            index++;
+        }
+        if (BitUtil.check(reportMaskExt, 8)) { // pedal breaking factor
+            index = Math.min(index + 1, values.length);
+        }
+        if (BitUtil.check(reportMaskExt, 9)) { // engine breaking factor
+            index = Math.min(index + 1, values.length);
+        }
+        if (BitUtil.check(reportMaskExt, 10)) { // total accelerator kick-downs
+            index = Math.min(index + 1, values.length);
+        }
+        if (BitUtil.check(reportMaskExt, 11)) { // total effective engine speed
+            index = Math.min(index + 1, values.length);
+        }
+        if (BitUtil.check(reportMaskExt, 12)) { // total cruise control time
+            index = Math.min(index + 1, values.length);
+        }
+        if (BitUtil.check(reportMaskExt, 13)) { // total accelerator kick-down time
+            index = Math.min(index + 1, values.length);
+        }
+        if (BitUtil.check(reportMaskExt, 14)) { // total brake application
+            index = Math.min(index + 1, values.length);
+        }
+        if (BitUtil.check(reportMaskExt, 15)) { // driver1Card
+            field = (index < values.length) ? values[index] : "";
+            position.set("driver1Card", field); // String field, can be empty
+            index++;
+        }
+        if (BitUtil.check(reportMaskExt, 16)) { // driver2Card
+            field = (index < values.length) ? values[index] : "";
+            position.set("driver2Card", field); // String field, can be empty
+            index++;
+        }
+        if (BitUtil.check(reportMaskExt, 17)) { // driver1Name
+            field = (index < values.length) ? values[index] : "";
+            position.set("driver1Name", field); // String field, can be empty
+            index++;
+        }
+        if (BitUtil.check(reportMaskExt, 18)) { // driver2Name
+            field = (index < values.length) ? values[index] : "";
+            position.set("driver2Name", field); // String field, can be empty
+            index++;
+        }
+        if (BitUtil.check(reportMaskExt, 19)) { // registration
+            field = (index < values.length) ? values[index] : "";
+            position.set("registration", field); // String field, can be empty
+            index++;
+        }
+        if (BitUtil.check(reportMaskExt, 20)) { // expansion information
+            index = Math.min(index + 1, values.length);
+        }
+        if (BitUtil.check(reportMaskExt, 21)) { // rapid brakings
+            index = Math.min(index + 1, values.length);
+        }
+        if (BitUtil.check(reportMaskExt, 22)) { // rapid accelerations
+            index = Math.min(index + 1, values.length);
+        }
+        if (BitUtil.check(reportMaskExt, 23)) { // engine torque
+            index = Math.min(index + 1, values.length);
         }
 
         DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
 
+        // GPS data block (controlled by reportMask bit 30)
         if (BitUtil.check(reportMask, 30)) {
-            while (values[index].isEmpty()) {
+            // Skip leading empty fields for 'valid'
+            while (index < values.length && values[index].isEmpty()) {
                 index += 1;
             }
-            position.setValid(Integer.parseInt(values[index++]) > 0);
-            if (!values[index].isEmpty()) {
-                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
-                position.setCourse(Integer.parseInt(values[index++]));
-                position.setAltitude(Double.parseDouble(values[index++]));
-                position.setLongitude(Double.parseDouble(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index++]));
-                position.setTime(dateFormat.parse(values[index++]));
+            // Parse 'valid' status
+            field = (index < values.length) ? values[index] : "";
+            if (!field.isEmpty()) {
+                position.setValid(Integer.parseInt(field) > 0);
+            }
+            index++; // Consume 'valid' field
+
+            // Check if speed field is present and not empty, indicating presence of location data
+            boolean locationPresent = (index < values.length && !values[index].isEmpty());
+
+            if (locationPresent) {
+                // Speed
+                field = (index < values.length) ? values[index] : "";
+                if (!field.isEmpty()) {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(field)));
+                }
+                index++;
+                // Course
+                field = (index < values.length) ? values[index] : "";
+                if (!field.isEmpty()) {
+                    position.setCourse(Integer.parseInt(field));
+                }
+                index++;
+                // Altitude
+                field = (index < values.length) ? values[index] : "";
+                if (!field.isEmpty()) {
+                    position.setAltitude(Double.parseDouble(field));
+                }
+                index++;
+                // Longitude
+                field = (index < values.length) ? values[index] : "";
+                if (!field.isEmpty()) {
+                    position.setLongitude(Double.parseDouble(field));
+                }
+                index++;
+                // Latitude
+                field = (index < values.length) ? values[index] : "";
+                if (!field.isEmpty()) {
+                    position.setLatitude(Double.parseDouble(field));
+                }
+                index++;
+                // Time
+                field = (index < values.length) ? values[index] : "";
+                if (!field.isEmpty()) {
+                    position.setTime(dateFormat.parse(field));
+                }
+                index++;
             } else {
-                index += 6; // no location
+                // If speed field is empty or missing, skip the next 6 fields conceptually.
+                // The original code implies skipping them all if the speed field is empty.
+                index = Math.min(index + 6, values.length);
                 getLastLocation(position, null);
             }
         } else {
             getLastLocation(position, null);
         }
 
+        // Cell data block (controlled by reportMask bit 31)
         if (BitUtil.check(reportMask, 31)) {
-            index += 4; // cell
-            index += 1; // reserved
+            index = Math.min(index + 4, values.length); // cell
+            index = Math.min(index + 1, values.length); // reserved
         }
 
+        // Final time field at the end of the sentence
+        if (index < values.length) {
+            field = values[index]; // Get value from current index
+            if (!field.isEmpty()) {
                 if (ignoreFixTime) {
-            position.setTime(dateFormat.parse(values[index]));
+                    position.setTime(dateFormat.parse(field));
                 } else {
-            position.setDeviceTime(dateFormat.parse(values[index]));
+                    position.setDeviceTime(dateFormat.parse(field));
+                }
+            }
+            index++; // Consume this last field
         }
 
         return position;
     }
\ No newline at end of file
