diff --git a/tmp/2929e17a-58ca-4d29-b64c-357ee843bfd8_buggy.java b/tmp/2d07e6ac-bb5c-4543-99e4-b2698164baf6_fixed.java
index c6164f1..98ea32e 100644
--- a/tmp/2929e17a-58ca-4d29-b64c-357ee843bfd8_buggy.java
+++ b/tmp/2d07e6ac-bb5c-4543-99e4-b2698164baf6_fixed.java
@@ -1,116 +1,166 @@
     private Position decodePosition(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int status = buf.readUnsignedShort();
 
         position.setValid(BitUtil.check(status, 15));
 
         position.set(Position.KEY_STATUS, status);
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
         int event = buf.readUnsignedShort();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, event);
 
         String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
         DateBuilder dateBuilder = new DateBuilder()
                 .setYear(Integer.parseInt(time.substring(0, 2)))
                 .setMonth(Integer.parseInt(time.substring(2, 4)))
                 .setDay(Integer.parseInt(time.substring(4, 6)))
                 .setHour(Integer.parseInt(time.substring(6, 8)))
                 .setMinute(Integer.parseInt(time.substring(8, 10)))
                 .setSecond(Integer.parseInt(time.substring(10, 12)));
         position.setTime(dateBuilder.getDate());
 
         position.setLongitude(buf.readInt() * 0.00001);
         position.setLatitude(buf.readInt() * 0.00001);
 
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
         position.setCourse(buf.readUnsignedShort());
         position.setAltitude(buf.readUnsignedShort());
 
         position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
         Network network = new Network();
 
-        while (buf.readableBytes() > 4) {
+        while (buf.readableBytes() > 4) { // Ensure enough bytes for subtype (2) and rawLength (2)
             int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
+            int rawLength = buf.readUnsignedShort(); // This is the total length of the block
+
+            // Calculate payload length: rawLength minus the 4 bytes for subtype and rawLength itself.
+            int payloadLength = rawLength - 4;
+
+            // Critical validation check for malformed or truncated blocks:
+            // 1. If payloadLength is negative (meaning rawLength < 4), the header is contradictory.
+            // 2. If payloadLength is greater than the remaining readable bytes, the packet is truncated.
+            // In either case, the packet is malformed, and we cannot reliably parse further blocks.
+            // It's safer to break out of the loop.
+            if (payloadLength < 0 || payloadLength > buf.readableBytes()) {
+                break;
+            }
+
+            // Create a slice representing only the payload data for the current block.
+            // This automatically advances the main buffer's reader index by payloadLength.
+            // All subsequent reads for this specific block should happen from `blockData`.
+            ByteBuf blockData = buf.readSlice(payloadLength);
+
             switch (subtype) {
-                case 0x0001:
-                    int coolantTemperature = buf.readUnsignedByte() - 40;
+                case 0x0001: // Expected payload length: 1 (coolant) + 2 (rpm) + 1 (avgSpeed) + 2 (intervalFuel) + 2 (fuelCons) + 2 (odomTrip) + 2 (power) + 1 (fuelLevel) + 4 (tripId) = 17 bytes
+                    if (blockData.readableBytes() < 17) {
+                        break; // Not enough data for all expected fields in this block type
+                    }
+                    int coolantTemperature = blockData.readUnsignedByte() - 40;
                     if (coolantTemperature <= 215) {
                         position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                     }
-                    int rpm = buf.readUnsignedShort();
+                    int rpm = blockData.readUnsignedShort();
                     if (rpm <= 65535) {
                         position.set(Position.KEY_RPM, rpm);
                     }
-                    position.set("averageSpeed", buf.readUnsignedByte());
-                    buf.readUnsignedShort(); // interval fuel consumption
-                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
-                    position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
-                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
-                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
-                    buf.readUnsignedInt(); // trip id
+                    position.set("averageSpeed", blockData.readUnsignedByte());
+                    blockData.readUnsignedShort(); // interval fuel consumption
+                    position.set(Position.KEY_FUEL_CONSUMPTION, blockData.readUnsignedShort() * 0.01);
+                    position.set(Position.KEY_ODOMETER_TRIP, blockData.readUnsignedShort());
+                    position.set(Position.KEY_POWER, blockData.readUnsignedShort() * 0.01);
+                    position.set(Position.KEY_FUEL_LEVEL, blockData.readUnsignedByte() * 0.4);
+                    blockData.readUnsignedInt(); // trip id
                     break;
-                case 0x0005:
-                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());
-                    position.set(Position.KEY_HDOP, buf.readUnsignedByte());
-                    buf.readUnsignedInt(); // run time
+                case 0x0005: // Expected payload length: 1 (RSSI) + 1 (HDOP) + 4 (runTime) = 6 bytes
+                    if (blockData.readableBytes() < 6) {
+                        break;
+                    }
+                    position.set(Position.KEY_RSSI, blockData.readUnsignedByte());
+                    position.set(Position.KEY_HDOP, blockData.readUnsignedByte());
+                    blockData.readUnsignedInt(); // run time
                     break;
                 case 0x0009:
+                    // Length is dynamic, taken from blockData's current readable bytes
                     position.set(
-                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                            Position.KEY_VIN, blockData.readCharSequence(
+                                    blockData.readableBytes(), StandardCharsets.US_ASCII).toString());
                     break;
-                case 0x0011:
-                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                case 0x0011: // Expected payload length: 4 bytes
+                    if (blockData.readableBytes() < 4) {
                         break;
-                case 0x0014:
-                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
-                    position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
-                    position.set("airTemp", buf.readUnsignedByte() - 40);
-                    position.set("airFlow", buf.readUnsignedShort() * 0.01);
-                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                    }
+                    position.set(Position.KEY_HOURS, blockData.readUnsignedInt() * 0.05);
+                    break;
+                case 0x0014: // Expected payload length: 1 (engineLoad) + 1 (timingAdvance) + 1 (airTemp) + 2 (airFlow) + 1 (throttle) = 6 bytes
+                    if (blockData.readableBytes() < 6) {
+                        break;
+                    }
+                    position.set(Position.KEY_ENGINE_LOAD, blockData.readUnsignedByte() / 255.0);
+                    position.set("timingAdvance", blockData.readUnsignedByte() * 0.5);
+                    position.set("airTemp", blockData.readUnsignedByte() - 40);
+                    position.set("airFlow", blockData.readUnsignedShort() * 0.01);
+                    position.set(Position.KEY_THROTTLE, blockData.readUnsignedByte() / 255.0);
                     break;
                 case 0x0020:
-                    String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                case 0x0021:
+                    // Length is dynamic, taken from blockData's current readable bytes
+                    String data = blockData.readCharSequence(
+                            blockData.readableBytes(), StandardCharsets.US_ASCII).toString();
+                    if (subtype == 0x0020) {
+                        String[] cells = data.split("\\+");
                         for (String cell : cells) {
                             String[] values = cell.split("@");
+                            if (values.length >= 4) { // Ensure enough parts for parsing
+                                try {
                                     network.addCellTower(CellTower.from(
                                             Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                             Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
+                                } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
+                                    // Log or handle parsing errors for malformed cell tower data
                                 }
-                    break;
-                case 0x0021:
-                    String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                            }
+                        }
+                    } else { // 0x0021
+                        String[] points = data.split("\\+");
                         for (String point : points) {
                             String[] values = point.split("@");
+                            if (values.length >= 2) { // Ensure enough parts for parsing
+                                try {
                                     network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
+                                } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
+                                    // Log or handle parsing errors for malformed wifi data
+                                }
+                            }
+                        }
                     }
                     break;
                 default:
-                    buf.skipBytes(length);
+                    // If readSlice was used, the bytes for this block are already consumed from the main buffer.
+                    // Any unconsumed bytes within `blockData` (e.g., if a fixed-length case was skipped due to
+                    // insufficient data) are automatically discarded when `blockData` goes out of scope.
+                    // No explicit `buf.skipBytes(length)` is needed here.
                     break;
             }
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         sendResponse(channel, MSG_POSITION_RSP, index, null);
 
         return position;
     }
\ No newline at end of file
