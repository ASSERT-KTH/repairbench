diff --git a/tmp/b541325d-2038-4d26-a658-f946f3fef722_buggy.java b/tmp/154ebf12-0779-4175-90c4-7e9aeb5973d0_fixed.java
index c6164f1..4b8c568 100644
--- a/tmp/b541325d-2038-4d26-a658-f946f3fef722_buggy.java
+++ b/tmp/154ebf12-0779-4175-90c4-7e9aeb5973d0_fixed.java
@@ -1,116 +1,153 @@
     private Position decodePosition(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int status = buf.readUnsignedShort();
 
         position.setValid(BitUtil.check(status, 15));
 
         position.set(Position.KEY_STATUS, status);
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
         int event = buf.readUnsignedShort();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, event);
 
         String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
         DateBuilder dateBuilder = new DateBuilder()
                 .setYear(Integer.parseInt(time.substring(0, 2)))
                 .setMonth(Integer.parseInt(time.substring(2, 4)))
                 .setDay(Integer.parseInt(time.substring(4, 6)))
                 .setHour(Integer.parseInt(time.substring(6, 8)))
                 .setMinute(Integer.parseInt(time.substring(8, 10)))
                 .setSecond(Integer.parseInt(time.substring(10, 12)));
         position.setTime(dateBuilder.getDate());
 
         position.setLongitude(buf.readInt() * 0.00001);
         position.setLatitude(buf.readInt() * 0.00001);
 
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
         position.setCourse(buf.readUnsignedShort());
         position.setAltitude(buf.readUnsignedShort());
 
         position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
         Network network = new Network();
 
-        while (buf.readableBytes() > 4) {
+        while (buf.readableBytes() > 4) { // Ensure enough bytes for subtype and length
             int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
+            int length = buf.readUnsignedShort() - 4; // Calculate payload length
+
+            // FIX: Prevent negative length from causing IllegalArgumentException.
+            // If the reported length is less than 4 (the size of subtype + length fields),
+            // it indicates a malformed or corrupted block. Break the loop.
+            if (length < 0) {
+                break; // Stop parsing optional data if block is malformed
+            }
+
+            // FIX: Ensure that the reported 'length' does not exceed available readable bytes.
+            // If it does, the packet is truncated or malformed, so we skip remaining bytes
+            // and stop processing this section to prevent IndexOutOfBoundsException.
+            if (buf.readableBytes() < length) {
+                buf.skipBytes(buf.readableBytes()); // Skip what's left
+                break; // Stop parsing optional data
+            }
+
+            int bytesReadInCase = 0; // To track bytes consumed within the case for length adjustment
+
             switch (subtype) {
                 case 0x0001:
+                    int startReaderIndex0001 = buf.readerIndex();
+
                     int coolantTemperature = buf.readUnsignedByte() - 40;
                     if (coolantTemperature <= 215) {
                         position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                     }
                     int rpm = buf.readUnsignedShort();
-                    if (rpm <= 65535) {
                     position.set(Position.KEY_RPM, rpm);
-                    }
                     position.set("averageSpeed", buf.readUnsignedByte());
                     buf.readUnsignedShort(); // interval fuel consumption
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                     buf.readUnsignedInt(); // trip id
+
+                    bytesReadInCase = buf.readerIndex() - startReaderIndex0001;
                     break;
                 case 0x0005:
+                    int startReaderIndex0005 = buf.readerIndex();
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                     buf.readUnsignedInt(); // run time
+                    bytesReadInCase = buf.readerIndex() - startReaderIndex0005;
                     break;
                 case 0x0009:
                     position.set(
                             Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                    bytesReadInCase = length;
                     break;
                 case 0x0011:
+                    int startReaderIndex0011 = buf.readerIndex();
                     position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                    bytesReadInCase = buf.readerIndex() - startReaderIndex0011;
                     break;
                 case 0x0014:
+                    int startReaderIndex0014 = buf.readerIndex();
                     position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                     position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                     position.set("airTemp", buf.readUnsignedByte() - 40);
                     position.set("airFlow", buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                    bytesReadInCase = buf.readerIndex() - startReaderIndex0014;
                     break;
                 case 0x0020:
                     String[] cells = buf.readCharSequence(
                             length, StandardCharsets.US_ASCII).toString().split("\\+");
                     for (String cell : cells) {
                         String[] values = cell.split("@");
                         network.addCellTower(CellTower.from(
                                 Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                 Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
                     }
+                    bytesReadInCase = length;
                     break;
                 case 0x0021:
                     String[] points = buf.readCharSequence(
                             length, StandardCharsets.US_ASCII).toString().split("\\+");
                     for (String point : points) {
                         String[] values = point.split("@");
                         network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
                     }
+                    bytesReadInCase = length;
                     break;
                 default:
-                    buf.skipBytes(length);
+                    bytesReadInCase = 0; // Default case starts with 0 bytes read for its specific logic
                     break;
             }
+
+            // After processing a case, if not all 'length' bytes were consumed, skip the remainder.
+            // This ensures alignment for the next block. If 'length' was shorter than bytesReadInCase,
+            // an IndexOutOfBoundsException might have already occurred from the reads inside the case,
+            // which Traccar's decoder typically handles by returning null.
+            if (length > bytesReadInCase) {
+                buf.skipBytes(length - bytesReadInCase);
+            }
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         sendResponse(channel, MSG_POSITION_RSP, index, null);
 
         return position;
     }
\ No newline at end of file
