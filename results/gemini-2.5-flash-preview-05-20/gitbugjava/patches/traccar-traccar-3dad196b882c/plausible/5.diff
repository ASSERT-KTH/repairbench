diff --git a/tmp/6186121a-b012-4f7f-b6b9-425c639ed11b_buggy.java b/tmp/063c4044-93a4-427a-85aa-bb83b274a822_fixed.java
index c6164f1..fe30e4e 100644
--- a/tmp/6186121a-b012-4f7f-b6b9-425c639ed11b_buggy.java
+++ b/tmp/063c4044-93a4-427a-85aa-bb83b274a822_fixed.java
@@ -1,116 +1,178 @@
     private Position decodePosition(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int status = buf.readUnsignedShort();
 
         position.setValid(BitUtil.check(status, 15));
 
         position.set(Position.KEY_STATUS, status);
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
         int event = buf.readUnsignedShort();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, event);
 
         String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
         DateBuilder dateBuilder = new DateBuilder()
                 .setYear(Integer.parseInt(time.substring(0, 2)))
                 .setMonth(Integer.parseInt(time.substring(2, 4)))
                 .setDay(Integer.parseInt(time.substring(4, 6)))
                 .setHour(Integer.parseInt(time.substring(6, 8)))
                 .setMinute(Integer.parseInt(time.substring(8, 10)))
                 .setSecond(Integer.parseInt(time.substring(10, 12)));
         position.setTime(dateBuilder.getDate());
 
         position.setLongitude(buf.readInt() * 0.00001);
         position.setLatitude(buf.readInt() * 0.00001);
 
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
         position.setCourse(buf.readUnsignedShort());
         position.setAltitude(buf.readUnsignedShort());
 
         position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
         Network network = new Network();
 
-        while (buf.readableBytes() > 4) {
+        while (buf.readableBytes() > 4) { // Ensure there are at least 4 bytes for subtype and blockLength
             int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
+            int blockLength = buf.readUnsignedShort(); // This is the total length of the block (including header)
+
+            // Validate the blockLength. It must be at least 4 (for subtype and its own length field).
+            // If it's less than 4, the block is malformed, and we cannot determine the data length correctly.
+            // Also, ensure there are enough readable bytes remaining in the buffer for the declared data length.
+            // If not, it means the buffer is truncated or malformed.
+            int dataLength = blockLength - 4;
+            if (blockLength < 4 || buf.readableBytes() < dataLength) {
+                // Log a warning or error for malformed packet data.
+                // To prevent further exceptions, skip the rest of the buffer and break the loop.
+                buf.skipBytes(buf.readableBytes());
+                break;
+            }
+
+            // Now, dataLength is guaranteed to be non-negative and less than or equal to buf.readableBytes()
+
             switch (subtype) {
                 case 0x0001:
+                    // Fixed-length block: 1 byte + 2 bytes + 1 byte + 2 bytes + 2 bytes + 2 bytes + 2 bytes + 1 byte + 4 bytes = 17 bytes for data.
+                    if (dataLength < 17) { // Malformed fixed-length block (truncated)
+                        buf.skipBytes(dataLength); // Skip remaining data for this block
+                        break;
+                    }
                     int coolantTemperature = buf.readUnsignedByte() - 40;
-                    if (coolantTemperature <= 215) {
+                    if (coolantTemperature <= 215) { // Check value range
                         position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                     }
                     int rpm = buf.readUnsignedShort();
-                    if (rpm <= 65535) {
+                    // if (rpm <= 65535) { // This condition is always true for an unsigned short
                     position.set(Position.KEY_RPM, rpm);
-                    }
+                    // }
                     position.set("averageSpeed", buf.readUnsignedByte());
                     buf.readUnsignedShort(); // interval fuel consumption
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                     buf.readUnsignedInt(); // trip id
+                    if (dataLength > 17) { // If dataLength was larger than 17, skip the excess bytes for this block
+                        buf.skipBytes(dataLength - 17);
+                    }
                     break;
                 case 0x0005:
+                    // Fixed-length block: 1 byte + 1 byte + 4 bytes = 6 bytes for data.
+                    if (dataLength < 6) {
+                        buf.skipBytes(dataLength);
+                        break;
+                    }
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                     buf.readUnsignedInt(); // run time
+                    if (dataLength > 6) {
+                        buf.skipBytes(dataLength - 6);
+                    }
                     break;
                 case 0x0009:
+                    // Variable length block, use dataLength directly for reading char sequence
                     position.set(
-                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                            Position.KEY_VIN, buf.readCharSequence(dataLength, StandardCharsets.US_ASCII).toString());
                     break;
                 case 0x0011:
+                    // Fixed-length block: 4 bytes for data.
+                    if (dataLength < 4) {
+                        buf.skipBytes(dataLength);
+                        break;
+                    }
                     position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                    if (dataLength > 4) {
+                        buf.skipBytes(dataLength - 4);
+                    }
                     break;
                 case 0x0014:
+                    // Fixed-length block: 1 byte + 1 byte + 1 byte + 2 bytes + 1 byte = 6 bytes for data.
+                    if (dataLength < 6) {
+                        buf.skipBytes(dataLength);
+                        break;
+                    }
                     position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                     position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                     position.set("airTemp", buf.readUnsignedByte() - 40);
                     position.set("airFlow", buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                    if (dataLength > 6) {
+                        buf.skipBytes(dataLength - 6);
+                    }
                     break;
                 case 0x0020:
+                    // Variable length block, use dataLength directly for reading char sequence
                     String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                            dataLength, StandardCharsets.US_ASCII).toString().split("\\+");
                     for (String cell : cells) {
                         String[] values = cell.split("@");
+                        if (values.length >= 4) { // Ensure enough elements before parsing
+                            try {
                                 network.addCellTower(CellTower.from(
                                         Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                         Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
+                            } catch (NumberFormatException ignore) {
+                                // Ignore malformed cell tower data and continue processing other cells
+                            }
+                        }
                     }
                     break;
                 case 0x0021:
+                    // Variable length block, use dataLength directly for reading char sequence
                     String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                            dataLength, StandardCharsets.US_ASCII).toString().split("\\+");
                     for (String point : points) {
                         String[] values = point.split("@");
+                        if (values.length >= 2) { // Ensure enough elements before parsing
+                            try {
                                 network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
+                            } catch (NumberFormatException ignore) {
+                                // Ignore malformed Wi-Fi access point data and continue processing other points
+                            }
+                        }
                     }
                     break;
                 default:
-                    buf.skipBytes(length);
+                    buf.skipBytes(dataLength); // Use dataLength for unknown subtypes
                     break;
             }
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         sendResponse(channel, MSG_POSITION_RSP, index, null);
 
         return position;
     }
\ No newline at end of file
