diff --git a/tmp/383287ef-dd81-4e57-9ebc-d412462d0b06_buggy.java b/tmp/342d3e4f-f7d9-4d18-8211-f64b694104f7_fixed.java
index c6164f1..8170e35 100644
--- a/tmp/383287ef-dd81-4e57-9ebc-d412462d0b06_buggy.java
+++ b/tmp/342d3e4f-f7d9-4d18-8211-f64b694104f7_fixed.java
@@ -1,116 +1,157 @@
     private Position decodePosition(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int status = buf.readUnsignedShort();
 
         position.setValid(BitUtil.check(status, 15));
 
         position.set(Position.KEY_STATUS, status);
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
         int event = buf.readUnsignedShort();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, event);
 
         String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
         DateBuilder dateBuilder = new DateBuilder()
                 .setYear(Integer.parseInt(time.substring(0, 2)))
                 .setMonth(Integer.parseInt(time.substring(2, 4)))
                 .setDay(Integer.parseInt(time.substring(4, 6)))
                 .setHour(Integer.parseInt(time.substring(6, 8)))
                 .setMinute(Integer.parseInt(time.substring(8, 10)))
                 .setSecond(Integer.parseInt(time.substring(10, 12)));
         position.setTime(dateBuilder.getDate());
 
         position.setLongitude(buf.readInt() * 0.00001);
         position.setLatitude(buf.readInt() * 0.00001);
 
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
         position.setCourse(buf.readUnsignedShort());
         position.setAltitude(buf.readUnsignedShort());
 
         position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
         Network network = new Network();
 
-        while (buf.readableBytes() > 4) {
+        while (buf.readableBytes() > 4) { // Ensure enough bytes for subtype (2) and totalLengthFieldValue (2)
             int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
+            int totalLengthFieldValue = buf.readUnsignedShort();
+
+            // If the total declared length of the block is less than its own header (4 bytes),
+            // it's a malformed packet. Consume remaining buffer and stop processing this message.
+            if (totalLengthFieldValue < 4) {
+                buf.skipBytes(buf.readableBytes());
+                break; // Exit the loop
+            }
+
+            int length = totalLengthFieldValue - 4; // This is the actual payload length
+
+            // If there are not enough bytes for the declared payload, the packet is truncated or malformed.
+            // Consume remaining buffer and stop processing this message.
+            if (buf.readableBytes() < length) {
+                buf.skipBytes(buf.readableBytes());
+                break; // Exit the loop
+            }
+
+            // Store the reader index to ensure exactly 'length' bytes are consumed for this block
+            int startIndex = buf.readerIndex();
+
             switch (subtype) {
                 case 0x0001:
+                    // Expected payload length for 0x0001 is 17 bytes (1+2+1+2+2+2+2+1+4)
+                    if (length >= 17) {
                         int coolantTemperature = buf.readUnsignedByte() - 40;
                         if (coolantTemperature <= 215) {
                             position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                         }
                         int rpm = buf.readUnsignedShort();
                         if (rpm <= 65535) {
                             position.set(Position.KEY_RPM, rpm);
                         }
                         position.set("averageSpeed", buf.readUnsignedByte());
                         buf.readUnsignedShort(); // interval fuel consumption
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                         buf.readUnsignedInt(); // trip id
+                    }
                     break;
                 case 0x0005:
+                    // Expected payload length for 0x0005 is 6 bytes (1+1+4)
+                    if (length >= 6) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                         buf.readUnsignedInt(); // run time
+                    }
                     break;
                 case 0x0009:
                     position.set(
                             Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
                     break;
                 case 0x0011:
+                    // Expected payload length for 0x0011 is 4 bytes (for UnsignedInt)
+                    if (length >= 4) {
                         position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                    }
                     break;
                 case 0x0014:
+                    // Expected payload length for 0x0014 is 6 bytes (1+1+1+2+1)
+                    if (length >= 6) {
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                         position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                         position.set("airTemp", buf.readUnsignedByte() - 40);
                         position.set("airFlow", buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                    }
                     break;
                 case 0x0020:
                     String[] cells = buf.readCharSequence(
                             length, StandardCharsets.US_ASCII).toString().split("\\+");
                     for (String cell : cells) {
                         String[] values = cell.split("@");
                         network.addCellTower(CellTower.from(
                                 Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                 Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
                     }
                     break;
                 case 0x0021:
                     String[] points = buf.readCharSequence(
                             length, StandardCharsets.US_ASCII).toString().split("\\+");
                     for (String point : points) {
                         String[] values = point.split("@");
                         network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
                     }
                     break;
                 default:
-                    buf.skipBytes(length);
+                    // Unknown subtype or subtype handled by an `if` condition that wasn't met.
+                    // The remaining bytes for this block will be skipped below.
                     break;
             }
+
+            // After processing a case, ensure the reader index has advanced by exactly 'length' bytes.
+            // If the case logic consumed fewer bytes (e.g., due to its own internal checks or unknown subtype),
+            // skip the remaining bytes for this block to maintain correct buffer alignment.
+            int bytesConsumedInCase = buf.readerIndex() - startIndex;
+            if (bytesConsumedInCase < length) {
+                buf.skipBytes(length - bytesConsumedInCase);
+            }
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         sendResponse(channel, MSG_POSITION_RSP, index, null);
 
         return position;
     }
\ No newline at end of file
