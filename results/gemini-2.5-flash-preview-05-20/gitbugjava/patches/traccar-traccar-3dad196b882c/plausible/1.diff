diff --git a/tmp/08c260d5-8c0f-4abd-81ce-ef7a579bf78a_buggy.java b/tmp/eb019a88-8d61-4b92-a400-7a1b0f07a95b_fixed.java
index c6164f1..fc4b7c0 100644
--- a/tmp/08c260d5-8c0f-4abd-81ce-ef7a579bf78a_buggy.java
+++ b/tmp/eb019a88-8d61-4b92-a400-7a1b0f07a95b_fixed.java
@@ -1,116 +1,171 @@
     private Position decodePosition(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int status = buf.readUnsignedShort();
 
         position.setValid(BitUtil.check(status, 15));
 
         position.set(Position.KEY_STATUS, status);
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
         int event = buf.readUnsignedShort();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, event);
 
         String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
         DateBuilder dateBuilder = new DateBuilder()
                 .setYear(Integer.parseInt(time.substring(0, 2)))
                 .setMonth(Integer.parseInt(time.substring(2, 4)))
                 .setDay(Integer.parseInt(time.substring(4, 6)))
                 .setHour(Integer.parseInt(time.substring(6, 8)))
                 .setMinute(Integer.parseInt(time.substring(8, 10)))
                 .setSecond(Integer.parseInt(time.substring(10, 12)));
         position.setTime(dateBuilder.getDate());
 
         position.setLongitude(buf.readInt() * 0.00001);
         position.setLatitude(buf.readInt() * 0.00001);
 
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
         position.setCourse(buf.readUnsignedShort());
         position.setAltitude(buf.readUnsignedShort());
 
         position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
         Network network = new Network();
 
-        while (buf.readableBytes() > 4) {
-            int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
+        // Loop through additional information blocks (Type-Length-Value)
+        while (buf.readableBytes() > 4) { // Ensure there are at least 4 bytes for subtype and length field
+            int subtype = buf.readUnsignedShort(); // Read the subtype (2 bytes)
+            int length = buf.readUnsignedShort() - 4; // Read the total block length, then subtract 4 for header to get payload length
+
+            // Validate the calculated payload length
+            // 1. If length is negative, it indicates a malformed header (total length < 4).
+            // 2. If length is greater than remaining readable bytes, the message is truncated or malformed.
+            if (length < 0 || length > buf.readableBytes()) {
+                // In case of malformed or truncated data, skip the rest of the buffer
+                // to prevent further read errors and break out of the loop.
+                buf.skipBytes(buf.readableBytes());
+                break;
+            }
+
+            // Store the reader index before processing the block's payload.
+            // This allows us to ensure exactly 'length' bytes are consumed for this block.
+            int bytesReadBeforeBlock = buf.readerIndex();
+
             switch (subtype) {
                 case 0x0001:
+                    // Expected length for this block is 17 bytes (1+2+1+2+2+2+2+1+4)
+                    if (length >= 17) {
                         int coolantTemperature = buf.readUnsignedByte() - 40;
-                    if (coolantTemperature <= 215) {
+                        if (coolantTemperature <= 215) { // Protocol specific range check
                             position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                         }
                         int rpm = buf.readUnsignedShort();
-                    if (rpm <= 65535) {
+                        if (rpm <= 65535) { // Protocol specific range check
                             position.set(Position.KEY_RPM, rpm);
                         }
                         position.set("averageSpeed", buf.readUnsignedByte());
-                    buf.readUnsignedShort(); // interval fuel consumption
+                        buf.readUnsignedShort(); // interval fuel consumption (skip)
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
-                    buf.readUnsignedInt(); // trip id
+                        buf.readUnsignedInt(); // trip id (skip)
+                    }
                     break;
                 case 0x0005:
+                    // Expected length for this block is 6 bytes (1+1+4)
+                    if (length >= 6) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         position.set(Position.KEY_HDOP, buf.readUnsignedByte());
-                    buf.readUnsignedInt(); // run time
+                        buf.readUnsignedInt(); // run time (skip)
+                    }
                     break;
-                case 0x0009:
+                case 0x0009: // VIN string
+                    if (length > 0) { // Only read if there's actual data for the string
                         position.set(
                                 Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                    }
                     break;
-                case 0x0011:
+                case 0x0011: // Hours
+                    if (length >= 4) { // UnsignedInt is 4 bytes
                         position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                    }
                     break;
                 case 0x0014:
+                    // Expected length for this block is 6 bytes (1+1+1+2+1)
+                    if (length >= 6) {
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                         position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                         position.set("airTemp", buf.readUnsignedByte() - 40);
                         position.set("airFlow", buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                    }
                     break;
-                case 0x0020:
+                case 0x0020: // Cell Towers string
+                    if (length > 0) {
                         String[] cells = buf.readCharSequence(
                                 length, StandardCharsets.US_ASCII).toString().split("\\+");
                         for (String cell : cells) {
                             String[] values = cell.split("@");
+                            if (values.length == 4) { // Ensure all 4 parts are present for a valid cell tower
+                                try {
                                     network.addCellTower(CellTower.from(
                                             Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                             Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
+                                } catch (NumberFormatException e) {
+                                    // Log or ignore malformed cell tower data, continue parsing
+                                }
+                            }
+                        }
                     }
                     break;
-                case 0x0021:
+                case 0x0021: // Wifi Access Points string
+                    if (length > 0) {
                         String[] points = buf.readCharSequence(
                                 length, StandardCharsets.US_ASCII).toString().split("\\+");
                         for (String point : points) {
                             String[] values = point.split("@");
+                            if (values.length == 2) { // Ensure both parts are present for a valid Wi-Fi AP
+                                try {
                                     network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
+                                } catch (NumberFormatException e) {
+                                    // Log or ignore malformed Wi-Fi data, continue parsing
+                                }
+                            }
+                        }
                     }
                     break;
                 default:
-                    buf.skipBytes(length);
+                    // For unknown or unhandled subtypes, simply skip the declared 'length' bytes.
+                    // The `bytesToSkip` logic below will handle this.
                     break;
             }
+
+            // Ensure that exactly 'length' bytes are consumed for the current block's payload.
+            // If the `switch` case read fewer bytes (e.g., due to `if (length >= N)` conditions
+            // or parsing errors within the case), skip the remaining bytes for this block.
+            int bytesConsumedInThisBlock = buf.readerIndex() - bytesReadBeforeBlock;
+            int bytesToSkip = length - bytesConsumedInThisBlock;
+            if (bytesToSkip > 0) {
+                buf.skipBytes(bytesToSkip);
+            }
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         sendResponse(channel, MSG_POSITION_RSP, index, null);
 
         return position;
     }
\ No newline at end of file
