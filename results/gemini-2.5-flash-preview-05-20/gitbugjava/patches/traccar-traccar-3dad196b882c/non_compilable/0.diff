diff --git a/tmp/66aca8fd-00c2-4369-9e6b-fb00c926ccae_buggy.java b/tmp/9f73ccaa-1577-442c-a5af-334afd9289b5_fixed.java
index c6164f1..ce1ed79 100644
--- a/tmp/66aca8fd-00c2-4369-9e6b-fb00c926ccae_buggy.java
+++ b/tmp/9f73ccaa-1577-442c-a5af-334afd9289b5_fixed.java
@@ -1,116 +1,165 @@
     private Position decodePosition(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int status = buf.readUnsignedShort();
 
         position.setValid(BitUtil.check(status, 15));
 
         position.set(Position.KEY_STATUS, status);
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
         int event = buf.readUnsignedShort();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, event);
 
         String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
         DateBuilder dateBuilder = new DateBuilder()
                 .setYear(Integer.parseInt(time.substring(0, 2)))
                 .setMonth(Integer.parseInt(time.substring(2, 4)))
                 .setDay(Integer.parseInt(time.substring(4, 6)))
                 .setHour(Integer.parseInt(time.substring(6, 8)))
                 .setMinute(Integer.parseInt(time.substring(8, 10)))
                 .setSecond(Integer.parseInt(time.substring(10, 12)));
         position.setTime(dateBuilder.getDate());
 
         position.setLongitude(buf.readInt() * 0.00001);
         position.setLatitude(buf.readInt() * 0.00001);
 
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
         position.setCourse(buf.readUnsignedShort());
         position.setAltitude(buf.readUnsignedShort());
 
         position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
         Network network = new Network();
 
         while (buf.readableBytes() > 4) {
             int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
+            int blockLength = buf.readUnsignedShort(); // This is the total reported length of the block
+
+            // Calculate the actual data payload length
+            int dataLength = blockLength - 4; // Subtract 4 bytes for subtype and blockLength fields themselves
+
+            // Bug fix: If dataLength is negative, it means the reported blockLength was invalid (less than 4).
+            // This indicates a malformed packet, so we return null.
+            if (dataLength < 0) {
+                return null;
+            }
+            // Robustness check: Ensure there are enough bytes remaining in the buffer for the reported dataLength
+            if (buf.readableBytes() < dataLength) {
+                return null;
+            }
+
             switch (subtype) {
                 case 0x0001:
+                    // Check if reported dataLength is sufficient for this subtype's fields
+                    if (dataLength < 17) { // 1 (coolant) + 2 (rpm) + 1 (averageSpeed) + 2 (fuel consumption interval) + 2 (fuel consumption) + 2 (odometer trip) + 2 (power) + 1 (fuel level) + 4 (trip id) = 17
+                        buf.skipBytes(dataLength); // Skip remaining data for this block if malformed but positive
+                        break;
+                    }
                     int coolantTemperature = buf.readUnsignedByte() - 40;
                     if (coolantTemperature <= 215) {
                         position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                     }
                     int rpm = buf.readUnsignedShort();
                     if (rpm <= 65535) {
                         position.set(Position.KEY_RPM, rpm);
                     }
                     position.set("averageSpeed", buf.readUnsignedByte());
                     buf.readUnsignedShort(); // interval fuel consumption
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                     buf.readUnsignedInt(); // trip id
                     break;
                 case 0x0005:
+                    // Check if reported dataLength is sufficient for this subtype's fields
+                    if (dataLength < 6) { // 1 (rssi) + 1 (hdop) + 4 (run time) = 6
+                        buf.skipBytes(dataLength);
+                        break;
+                    }
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                     buf.readUnsignedInt(); // run time
                     break;
                 case 0x0009:
+                    // dataLength is used directly for reading char sequence
                     position.set(
-                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                            Position.KEY_VIN, buf.readCharSequence(dataLength, StandardCharsets.US_ASCII).toString());
                     break;
                 case 0x0011:
+                    // Check if reported dataLength is sufficient for this subtype's fields
+                    if (dataLength < 4) { // 4 bytes for unsigned int
+                        buf.skipBytes(dataLength);
+                        break;
+                    }
                     position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
                     break;
                 case 0x0014:
+                    // Check if reported dataLength is sufficient for this subtype's fields
+                    if (dataLength < 6) { // 1 (engine_load) + 1 (timingAdvance) + 1 (airTemp) + 2 (airFlow) + 1 (throttle) = 6
+                        buf.skipBytes(dataLength);
+                        break;
+                    }
                     position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                     position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                     position.set("airTemp", buf.readUnsignedByte() - 40);
                     position.set("airFlow", buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
                     break;
                 case 0x0020:
                     String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                            dataLength, StandardCharsets.US_ASCII).toString().split("\\+");
                     for (String cell : cells) {
                         String[] values = cell.split("@");
+                        if (values.length >= 4) { // Add safety check for array length
+                            try {
                                 network.addCellTower(CellTower.from(
                                         Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                         Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
+                            } catch (NumberFormatException e) {
+                                // Malformed cell entry, continue to next
+                            }
+                        }
                     }
                     break;
                 case 0x0021:
                     String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                            dataLength, StandardCharsets.US_ASCII).toString().split("\\+");
                     for (String point : points) {
                         String[] values = point.split("@");
+                        if (values.length >= 2) { // Add safety check for array length
+                            try {
                                 network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
+                            } catch (NumberFormatException e) {
+                                // Malformed wifi entry, continue to next
+                            }
+                        }
                     }
                     break;
                 default:
-                    buf.skipBytes(length);
+                    // For unknown subtypes, or if dataLength was positive but not enough for a known type's full fields,
+                    // just skip the indicated number of bytes to move to the next block.
+                    buf.skipBytes(dataLength);
                     break;
             }
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         sendResponse(channel, MSG_POSITION_RSP, index, null);
 
         return position;
     }
