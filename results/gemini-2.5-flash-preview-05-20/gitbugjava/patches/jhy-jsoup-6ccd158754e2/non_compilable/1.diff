diff --git a/tmp/9a126fbb-878d-4103-a963-7edeb78401a8_buggy.java b/tmp/ecc39eb6-966f-42d5-85fc-c7f23405a439_fixed.java
index 23f078d..f604e38 100644
--- a/tmp/9a126fbb-878d-4103-a963-7edeb78401a8_buggy.java
+++ b/tmp/ecc39eb6-966f-42d5-85fc-c7f23405a439_fixed.java
@@ -1,14 +1,22 @@
     private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
         // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
-            int c = s.codePointAt(i);
+        // The original loop iterated character by character, but code points can be composed of two chars (surrogates).
+        // This caused incorrect re-encoding of the second surrogate of a supplementary character.
+        // We need to advance the index by the number of chars consumed by the code point.
+        for (int i = 0; i < s.length(); /* increment inside loop */) {
+            int c = s.codePointAt(i); // Get the code point starting at index i
             if (c == ' ') {
                 sb.append(spaceAsPlus ? '+' : "%20");
             } else if (c > 127) { // out of ascii range
+                // For a supplementary character, Character.toChars(c) returns two chars,
+                // which correctly forms the String for encoding.
                 sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
             } else {
+                // For basic multilingual plane (BMP) characters (single char),
+                // (char)c is correct.
                 sb.append((char) c);
             }
+            // Advance the index by the number of char units this code point occupied.
+            i += Character.charCount(c);
         }
     }
\ No newline at end of file
