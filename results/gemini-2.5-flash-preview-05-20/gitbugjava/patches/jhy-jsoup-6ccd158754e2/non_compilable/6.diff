diff --git a/tmp/7c36072b-655e-4df6-b88f-5470a907eedf_buggy.java b/tmp/b5b1488e-ba32-4f3f-8789-299b667939a7_fixed.java
index 23f078d..3c926d2 100644
--- a/tmp/7c36072b-655e-4df6-b88f-5470a907eedf_buggy.java
+++ b/tmp/b5b1488e-ba32-4f3f-8789-299b667939a7_fixed.java
@@ -1,14 +1,23 @@
     private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
         // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
-            int c = s.codePointAt(i);
+        for (int i = 0; i < s.length(); /* increment handled inside */) {
+            int c = s.codePointAt(i); // Get the Unicode code point at the current index
+            int charCount = Character.charCount(c); // Determine how many 'char' units this code point occupies
+
             if (c == ' ') {
                 sb.append(spaceAsPlus ? '+' : "%20");
             } else if (c > 127) { // out of ascii range
+                // For non-ASCII characters, including supplementary characters, encode them.
+                // Character.toChars(c) correctly handles both BMP and supplementary characters,
+                // returning one or two chars respectively.
                 sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
                 // ^^ is a bit heavy-handed - if perf critical, we could optimize
             } else {
                 sb.append((char) c);
             }
+            // Advance the index by the number of 'char' units consumed by the current code point.
+            // This is crucial for handling supplementary characters (which take 2 'char' units)
+            // to prevent processing the second surrogate as a separate character.
+            i += charCount;
         }
     }
\ No newline at end of file
