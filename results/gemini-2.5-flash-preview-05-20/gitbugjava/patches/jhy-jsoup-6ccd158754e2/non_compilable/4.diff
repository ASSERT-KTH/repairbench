diff --git a/tmp/80e86786-6902-484a-a887-23e43c366698_buggy.java b/tmp/23656e83-4811-407b-b378-e6c0555d1b2f_fixed.java
index 23f078d..2e59f37 100644
--- a/tmp/80e86786-6902-484a-a887-23e43c366698_buggy.java
+++ b/tmp/23656e83-4811-407b-b378-e6c0555d1b2f_fixed.java
@@ -1,14 +1,19 @@
     private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
         // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+        for (int i = 0; i < s.length(); /* i incremented in loop */ ) {
             int c = s.codePointAt(i);
             if (c == ' ') {
                 sb.append(spaceAsPlus ? '+' : "%20");
             } else if (c > 127) { // out of ascii range
+                // For supplementary characters (those > 0xFFFF), Character.toChars(c)
+                // returns a char array of two surrogates. URLEncoder.encode
+                // correctly handles these surrogate pairs when converted to a String.
                 sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
             } else {
                 sb.append((char) c);
             }
+            // Advance the loop index by the number of char units consumed by the current code point.
+            // This is crucial for correctly handling supplementary characters which use two char units.
+            i += Character.charCount(c);
         }
     }
\ No newline at end of file
