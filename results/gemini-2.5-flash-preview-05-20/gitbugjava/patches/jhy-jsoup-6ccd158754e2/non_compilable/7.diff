diff --git a/tmp/2ac5710a-3408-4c69-9676-0a3b373658fe_buggy.java b/tmp/ab98cb92-8201-4a03-9f01-2846a12c8cbb_fixed.java
index 23f078d..259942b 100644
--- a/tmp/2ac5710a-3408-4c69-9676-0a3b373658fe_buggy.java
+++ b/tmp/ab98cb92-8201-4a03-9f01-2846a12c8cbb_fixed.java
@@ -1,14 +1,20 @@
     private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
         // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+        for (int i = 0; i < s.length(); ) { // Loop condition changed: removed i++ from here
             int c = s.codePointAt(i);
             if (c == ' ') {
                 sb.append(spaceAsPlus ? '+' : "%20");
             } else if (c > 127) { // out of ascii range
+                // For supplementary characters, Character.toChars(c) returns a surrogate pair.
+                // URLEncoder.encode will correctly encode this pair to UTF-8.
+                // The previous loop increment `i++` would incorrectly process the trailing surrogate
+                // as a new character, leading to malformed sequence encoding (like '%3F').
                 sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
                 // ^^ is a bit heavy-handed - if perf critical, we could optimize
             } else {
                 sb.append((char) c);
             }
+            // Correctly advance the index by the number of char units consumed by the codePointAt(i) call.
+            i += Character.charCount(c); // Added: advance i by the actual character length (1 or 2)
         }
     }
\ No newline at end of file
