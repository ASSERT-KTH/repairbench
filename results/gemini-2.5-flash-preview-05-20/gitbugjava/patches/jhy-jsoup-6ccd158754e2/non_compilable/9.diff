diff --git a/tmp/2a627415-5a52-43c1-8531-bf90bfd3f60d_buggy.java b/tmp/3709afa4-592e-48bd-b8eb-cb87ef15e9dd_fixed.java
index 23f078d..d5c9a42 100644
--- a/tmp/2a627415-5a52-43c1-8531-bf90bfd3f60d_buggy.java
+++ b/tmp/3709afa4-592e-48bd-b8eb-cb87ef15e9dd_fixed.java
@@ -1,14 +1,19 @@
     private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
         // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+        for (int i = 0; i < s.length(); /* i is advanced inside the loop */) {
             int c = s.codePointAt(i);
             if (c == ' ') {
                 sb.append(spaceAsPlus ? '+' : "%20");
             } else if (c > 127) { // out of ascii range
+                // URLEncoder.encode expects a String that represents the *character sequence* to be encoded.
+                // For a supplementary character, Character.toChars(c) correctly returns the surrogate pair,
+                // which new String() converts into a String that URLEncoder can handle.
                 sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
             } else {
                 sb.append((char) c);
             }
+            // Advance the index by the number of char values consumed by Character.codePointAt(i)
+            // This is 1 for BMP characters and 2 for supplementary characters.
+            i += Character.charCount(c);
         }
     }
\ No newline at end of file
