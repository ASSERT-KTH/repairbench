diff --git a/tmp/97063032-66d2-4090-9d77-b1a9675593cb_buggy.java b/tmp/531a92d5-1666-428e-ae36-a90b30a06eb4_fixed.java
index 23f078d..6882e64 100644
--- a/tmp/97063032-66d2-4090-9d77-b1a9675593cb_buggy.java
+++ b/tmp/531a92d5-1666-428e-ae36-a90b30a06eb4_fixed.java
@@ -1,14 +1,19 @@
     private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
         // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+        // Fix: The loop increment needs to account for code points that consume two char units (supplementary characters).
+        // s.codePointAt(i) correctly gets the code point, but i needs to be advanced by Character.charCount(c).
+        for (int i = 0; i < s.length(); /* i is incremented inside the loop */) {
             int c = s.codePointAt(i);
             if (c == ' ') {
                 sb.append(spaceAsPlus ? '+' : "%20");
             } else if (c > 127) { // out of ascii range
                 sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
                 // ^^ is a bit heavy-handed - if perf critical, we could optimize
             } else {
                 sb.append((char) c);
             }
+            // Advance the index by the number of char values consumed by this code point.
+            // This is 1 for BMP characters, 2 for supplementary characters.
+            i += Character.charCount(c);
         }
     }
\ No newline at end of file
