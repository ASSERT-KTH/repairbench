diff --git a/tmp/73077438-41a7-4af9-bb4e-c65167323573_buggy.java b/tmp/99e05c20-4877-4790-afa5-701f2bd90bad_fixed.java
index 23f078d..28a87fc 100644
--- a/tmp/73077438-41a7-4af9-bb4e-c65167323573_buggy.java
+++ b/tmp/99e05c20-4877-4790-afa5-701f2bd90bad_fixed.java
@@ -1,14 +1,23 @@
     private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
         // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
-            int c = s.codePointAt(i);
+        // Fix: Correctly iterate over code points, handling supplementary characters.
+        for (int i = 0; i < s.length(); /* i is advanced inside the loop */) {
+            int c = s.codePointAt(i); // Get the code point at the current index
+            
             if (c == ' ') {
                 sb.append(spaceAsPlus ? '+' : "%20");
             } else if (c > 127) { // out of ascii range
+                // If the code point is a supplementary character (occupies two char units),
+                // Character.toChars(c) will return two chars.
+                // If it's a BMP character > 127 (e.g., é, ä), it returns one char.
                 sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
                 // ^^ is a bit heavy-handed - if perf critical, we could optimize
-            } else {
+            } else { // ASCII range <= 127, and not space
                 sb.append((char) c);
             }
+            
+            // Advance the index by the number of char units this code point occupied.
+            // For BMP characters, this is 1. For supplementary characters, this is 2.
+            i += Character.charCount(c);
         }
     }
\ No newline at end of file
