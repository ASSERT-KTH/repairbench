diff --git a/tmp/8981b67c-3ba6-4b29-838d-726ab0ab688c_buggy.java b/tmp/84ca1136-a95f-4918-a176-2541641b703b_fixed.java
index 23f078d..f5173c9 100644
--- a/tmp/8981b67c-3ba6-4b29-838d-726ab0ab688c_buggy.java
+++ b/tmp/84ca1136-a95f-4918-a176-2541641b703b_fixed.java
@@ -1,14 +1,30 @@
     private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
         // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
-            int c = s.codePointAt(i);
+        // The original loop (for i = 0; i < s.length(); i++) increments the index by 1 in each iteration.
+        // However, s.codePointAt(i) correctly extracts a Unicode code point, which might consume one or two char units
+        // (for BMP or supplementary characters, respectively).
+        // If a supplementary character (like an emoji) is encountered, it is represented by a surrogate pair (two 'char's).
+        // After processing the full code point at index 'i', the loop's automatic 'i++' would lead to the next iteration
+        // starting at 'i+1', which would be the second 'char' of the just-processed surrogate pair.
+        // This unpaired surrogate would then be incorrectly interpreted and encoded (often as '%3F' for replacement character).
+        // The fix is to advance the index 'i' by Character.charCount(c) to correctly skip the second surrogate char
+        // when a supplementary character is processed.
+        for (int i = 0; i < s.length(); /* increment handled inside */) {
+            int c = s.codePointAt(i); // Get the Unicode code point at the current index
+
             if (c == ' ') {
                 sb.append(spaceAsPlus ? '+' : "%20");
-            } else if (c > 127) { // out of ascii range
+            } else if (c > 127) { // Character is outside of the ASCII range, requires encoding
+                // Character.toChars(c) converts the code point into a char array.
+                // For BMP characters, it returns a single char. For supplementary characters, it returns a surrogate pair (two chars).
+                // URLEncoder.encode then correctly encodes this char sequence to UTF-8.
                 sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
-            } else {
+            } else { // ASCII character, append directly
                 sb.append((char) c);
             }
+
+            // Advance the index by the number of Java char units consumed by the current code point.
+            // This is 1 for BMP characters and 2 for supplementary characters.
+            i += Character.charCount(c);
         }
     }
\ No newline at end of file
