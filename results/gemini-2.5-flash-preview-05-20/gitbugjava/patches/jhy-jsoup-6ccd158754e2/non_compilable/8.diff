diff --git a/tmp/0f7bae03-a779-462b-a018-a08d54b03ad6_buggy.java b/tmp/3275fa74-9a8f-4a3f-b2ff-3b4ffcfd33c9_fixed.java
index 23f078d..1e9c4fe 100644
--- a/tmp/0f7bae03-a779-462b-a018-a08d54b03ad6_buggy.java
+++ b/tmp/3275fa74-9a8f-4a3f-b2ff-3b4ffcfd33c9_fixed.java
@@ -1,14 +1,16 @@
     private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
         // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
-            int c = s.codePointAt(i);
+        for (int i = 0; i < s.length(); ) { // Loop increment moved inside to handle code points
+            int c = s.codePointAt(i); // Get the code point at the current index
             if (c == ' ') {
                 sb.append(spaceAsPlus ? '+' : "%20");
             } else if (c > 127) { // out of ascii range
+                // Encode the entire code point (which might be a supplementary character)
                 sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
             } else {
                 sb.append((char) c);
             }
+            // Advance the index by the number of char values consumed by the code point
+            i += Character.charCount(c);
         }
     }
\ No newline at end of file
