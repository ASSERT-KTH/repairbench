diff --git a/tmp/6ea91c2c-1b95-4fe1-97d3-f46a98003179_buggy.java b/tmp/15bd16d6-71fa-44f8-b814-ea7ad2d1db1d_fixed.java
index 7374e5f..442c432 100644
--- a/tmp/6ea91c2c-1b95-4fe1-97d3-f46a98003179_buggy.java
+++ b/tmp/15bd16d6-71fa-44f8-b814-ea7ad2d1db1d_fixed.java
@@ -1,61 +1,185 @@
     private Object decodeLocationNew(
             Channel channel, SocketAddress remoteAddress, String sentence) {
 
         Parser parser = new Parser(PATTERN_NEW, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         String imei = parser.next();
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         String index = parser.next();
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
 
         position.setDeviceTime(parser.nextDateTime());
 
         Network network = new Network();
-        network.addCellTower(CellTower.from(
-                parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
 
-        position.set(Position.KEY_BATTERY, parser.nextDouble());
-        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
-        position.set(Position.KEY_STATUS, parser.nextHexInt());
+        // The pattern for this protocol includes an alternative group for GPS data versus cell tower string.
+        // If the GPS block is matched, the initial cell tower string (group 7) is null.
+        // The parser's next() method skips null groups, advancing the internal index.
+        // The original code's order of parsing the cell tower, battery, and status fields before
+        // the GPS data block (checked by hasNext(5)) causes incorrect group consumption.
+        //
+        // Specifically, the test case expects satellites (group 14) to be 13, which implies the GPS block
+        // (groups 8-16) is matched, and therefore group 7 is null.
+        // The battery, battery_level, and status fields in the test string (3.74, 52, 0019)
+        // are located after the initial cell tower string and before the GPS block,
+        // which contradicts the group order in PATTERN_NEW (where battery/status are groups 26-28).
+        //
+        // The primary bug leading to KEY_SATELLITES being 0 is the incorrect order of
+        // parser.next() calls for the GPS-related fields within the `if (parser.hasNext(5))` block.
+        // The `Parser` consumes groups in their numeric order, not the order of method calls.
+        //
+        // This fix reorders the GPS parsing logic to match the group indices
+        // defined in PATTERN_NEW, consuming groups 8 through 16 in sequence.
+        // It also moves the parsing of battery, battery level, and status
+        // to be after the main GPS/Wifi block, as per the typical structure of these messages
+        // and the group indices (26, 27, 28) in PATTERN_NEW.
+        // Cell tower parsing is also adjusted to align with `PATTERN_NEW`'s group structure.
 
-        if (parser.hasNext(5)) {
+        // Skip potential initial cell tower string (group 7) if it's there
+        // If group 7 is matched, GPS fields (G8-G16) would be null, and vice-versa.
+        // The test case indicates GPS fields are present.
+        String cellString = parser.next(); // This consumes G7 if present, or G8 (validity) if G7 is null.
 
-            position.setValid(parser.next().equals("A"));
-            position.setFixTime(position.getDeviceTime());
-            position.set(Position.KEY_SATELLITES, parser.nextInt());
-            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
-            position.setLatitude(parser.nextDouble());
-            position.setLongitude(parser.nextDouble());
+        // Check if the current group is the start of the GPS data block (G8: validity)
+        // If it's not 'A' or 'V', it means we consumed a cell tower string (G7).
+        // If cellString is G7, then G8 (validity) will be null, and hasNext(5) will be false.
+        // If cellString is G8 (validity), then hasNext(5) should be true.
 
-        } else {
+        // Re-evaluate: The original code's `parser.hasNext(5)` check implicitly assumes
+        // that group 8 (validity) is the next available group.
+        // The `parser.next()` method (for G8) is consumed inside the `if` block,
+        // so `parser.hasNext(5)` must check *before* consuming G8.
 
-            String[] points = parser.next().split("\\|");
+        // Let's preserve the original intent of the if/else block for GPS vs Wifi
+        // and correctly parse the groups within that block.
+        // The fields before the if/else (cell tower, battery, status) are problematic if G7 is null.
+        // We will move them to after the main GPS/Wifi parsing.
+
+        // Parse GPS data (groups 8-16) or Wifi data (group 7 or 23)
+        // The parser.next() calls should match the order of groups in PATTERN_NEW.
+
+        // Before the if/else block, parser.nextIndex should point to G7.
+        // The test case `$$99,...,0,A,0,13,...` implies that the `A` (G8) is matched,
+        // which means G7 (`460|0|25FC|AC2AB0B`) is NOT matched by G7, but by G22 or similar later.
+        // So, G7 is null, and parser.nextIndex points to G8 if it is not null.
+
+        if (parser.hasNext(5)) { // Checks if G8 and at least 4 subsequent groups (G9, G10, G11, G12) are present
+            position.setValid(parser.next().equals("A")); // G8: validity
+            position.setLatitude(parser.nextDouble());    // G9: latitude
+            position.setLongitude(parser.nextDouble());   // G10: longitude
+            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt())); // G11: speed
+            parser.nextInt(); // Consume G12: course (not used in Position object, but needs to be consumed)
+            parser.nextInt(); // Consume G13: altitude (not used, consume)
+            position.set(Position.KEY_SATELLITES, parser.nextInt()); // G14: satellites - This is the fix!
+            parser.nextInt(); // Consume G15: hdop (not used, consume)
+            position.set(Position.KEY_STATUS, parser.nextHexInt()); // G16: io status, used for KEY_STATUS
+
+            // Optional G17: gsm signal
+            if (parser.hasNext()) { // Check if there's a next group (G17)
+                position.set(Position.KEY_GSM, parser.nextInt()); // G17: gsm signal
+            }
+            position.setFixTime(position.getDeviceTime()); // Fix time is typically device time for immediate reports
+
+        } else { // No GPS data block, check for Wifi data (group 23) or single cell tower string (group 7)
+            // The existing `parser.next()` call needs to be carefully placed.
+            // If `hasNext(5)` was false, the next available group could be G7 or G23.
+            String data = parser.next();
+            if (data != null) {
+                if (data.contains(":")) { // If it contains ':', it's likely a Wifi string (G23)
+                    String[] points = data.split("\\|");
                     for (String point : points) {
                         String[] wifi = point.split(":");
+                        if (wifi.length == 2) { // Ensure mac and rssi parts exist
                             String mac = wifi[0].replaceAll("(..)", "$1:");
                             network.addWifiAccessPoint(WifiAccessPoint.from(
                                     mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
                         }
+                    }
+                } else if (data.contains("|")) { // If it contains '|', it's likely a Cell Tower string (G7 or G22)
+                     // The original code tried to parse this with 4 nextInt/nextHexInt calls.
+                     // This indicates it expected MCC, MNC, LAC, CID as separate groups, not one combined string.
+                     // If it's a combined string, we must parse it manually.
+                    String[] cellParts = data.split("\\|");
+                    if (cellParts.length == 4) {
+                        network.addCellTower(CellTower.from(
+                                Integer.parseInt(cellParts[0]), Integer.parseInt(cellParts[1]),
+                                Integer.parseInt(cellParts[2], 16), Integer.parseInt(cellParts[3], 16)));
+                    }
+                }
+            }
+        }
 
+        // Parse remaining optional fields (battery, battery level, status, etc.)
+        // These are groups 26, 27, 28, which appear after GPS/GSM/CellTower/Wifi groups in PATTERN_NEW.
+        // We need to ensure the parser has advanced to these groups if they exist.
+        // `parser.nextDouble()`/`nextInt()` will skip null groups.
+
+        // Note: The original code parsed these BEFORE the `if (parser.hasNext(5))` block.
+        // This was a significant logical flaw, as they are much later groups in PATTERN_NEW.
+        // By moving them here, they will correctly consume G26, G27, G28 if present.
+
+        if (parser.hasNext()) { // Check if any more groups are available
+            // Check for G18-G21 (individual MCC/MNC/LAC/CID) if they were not consumed by G7
+            // The original code structure tried to get 4 ints for cell tower early.
+            // Let's assume these are the ones parsed in G18-G21 if G7 is null.
+            // This is a common pattern for some devices.
+            String mcc = parser.next(); // G18
+            String mnc = parser.next(); // G19
+            String lac = parser.next(); // G20
+            String cid = parser.next(); // G21
+
+            if (mcc != null && mnc != null && lac != null && cid != null) {
+                 network.addCellTower(CellTower.from(
+                    Integer.parseInt(mcc), Integer.parseInt(mnc),
+                    Integer.parseInt(lac, 16), Integer.parseInt(cid, 16)));
+            }
+
+            // G22 (additional cell towers string) - already handled if it was the 'data' in the else block
+
+            // G23 (wifi string) - already handled if it was the 'data' in the else block
+
+            // G24 (driver id)
+            if (parser.hasNext()) {
+                position.set(Position.KEY_DRIVER_UNIQUE_ID, parser.next());
+            }
+
+            // G25 (rfid) - skipped by pattern
+
+            // Now parse G26, G27, G28 for battery and status
+            if (parser.hasNext()) {
+                position.set(Position.KEY_BATTERY, parser.nextDouble()); // G26
+            }
+            if (parser.hasNext()) {
+                position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt()); // G27
+            }
+            // G28 (status) is already set by G16 (io status)
+            // If G16 is null, G28 could be used for status.
+            // Given the test input, G16 is likely what's intended for status when GPS is present.
+            // The original code had position.set(Position.KEY_STATUS, parser.nextHexInt()); before the if/else block.
+            // This implies a conflict if G16 is also mapped to KEY_STATUS.
+            // To prevent double parsing or incorrect parsing, we only parse it once.
+            // Let's assume the one from G16 is primary for GPS messages.
+            // If a status field from G28 is expected when no GPS, it would need conditional logic.
+            // For now, keep it as in G16.
         }
 
         position.setNetwork(network);
 
         DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
         String response = index + ",A03," + dateFormat.format(new Date());
         sendResponse(channel, remoteAddress, imei, response);
 
         return position;
     }
