diff --git a/tmp/7589f30d-bf8e-4ac7-a5a0-843e8cc42d5c_buggy.java b/tmp/f7693050-959f-494e-b143-ce4c8b11c781_fixed.java
index 7374e5f..12e6f25 100644
--- a/tmp/7589f30d-bf8e-4ac7-a5a0-843e8cc42d5c_buggy.java
+++ b/tmp/f7693050-959f-494e-b143-ce4c8b11c781_fixed.java
@@ -1,61 +1,77 @@
     private Object decodeLocationNew(
             Channel channel, SocketAddress remoteAddress, String sentence) {
 
         Parser parser = new Parser(PATTERN_NEW, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         String imei = parser.next();
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         String index = parser.next();
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
 
         position.setDeviceTime(parser.nextDateTime());
 
         Network network = new Network();
+        // The PATTERN_NEW and current parsing for CellTower (MCC, MNC, LAC, CID) suggests
+        // that these are parsed as individual integer fields, even if the regex captures them as a single string.
+        // Assuming the Parser correctly handles the split and individual value extraction for these.
         network.addCellTower(CellTower.from(
                 parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
 
         position.set(Position.KEY_BATTERY, parser.nextDouble());
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
         position.set(Position.KEY_STATUS, parser.nextHexInt());
 
-        if (parser.hasNext(5)) {
+        // The issue lies within this conditional block.
+        // The test data for GPS position is typically in the format:
+        // `...,0,A,0,13,22.643466,114.018211*74`
+        // - The first '0' is an unknown field that needs to be consumed.
+        // - 'A' is the validity status.
+        // - The second '0' is the speed.
+        // - '13' is the number of satellites.
+        // - Followed by latitude and longitude.
+        // The original code was attempting to set validity with the first '0',
+        // and then satellites with 'A', leading to parsing errors (A cannot be parsed as int, resulting in 0).
+        if (parser.hasNext(5)) { // Check if there are enough fields for GPS data
+            parser.next(); // Consume the first field (e.g., '0' in the example) which is not used for position attributes.
+            position.setValid(parser.next().equals("A")); // Consume 'A' or 'V' for validity
+            position.setFixTime(position.getDeviceTime()); // Fix time is typically same as device time for real fixes.
+
+            // The order of parsing speed and satellites was swapped relative to the data.
+            // Consume speed first, then satellites.
+            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt())); // Consume '0' for speed
+            position.set(Position.KEY_SATELLITES, parser.nextInt()); // Consume '13' for satellites
 
-            position.setValid(parser.next().equals("A"));
-            position.setFixTime(position.getDeviceTime());
-            position.set(Position.KEY_SATELLITES, parser.nextInt());
-            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
             position.setLatitude(parser.nextDouble());
             position.setLongitude(parser.nextDouble());
 
         } else {
-
+            // This block handles Wi-Fi access point data
             String[] points = parser.next().split("\\|");
             for (String point : points) {
                 String[] wifi = point.split(":");
                 String mac = wifi[0].replaceAll("(..)", "$1:");
                 network.addWifiAccessPoint(WifiAccessPoint.from(
                         mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
             }
-
         }
 
         position.setNetwork(network);
 
         DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
         String response = index + ",A03," + dateFormat.format(new Date());
         sendResponse(channel, remoteAddress, imei, response);
 
         return position;
     }
\ No newline at end of file
