diff --git a/tmp/19a4c3f8-1c2e-414c-8fc1-f3a5faf2b3f6_buggy.java b/tmp/ef0df03d-cb84-4fb2-bed6-c322e6e216cb_fixed.java
index 7374e5f..8532a2a 100644
--- a/tmp/19a4c3f8-1c2e-414c-8fc1-f3a5faf2b3f6_buggy.java
+++ b/tmp/ef0df03d-cb84-4fb2-bed6-c322e6e216cb_fixed.java
@@ -1,61 +1,67 @@
     private Object decodeLocationNew(
             Channel channel, SocketAddress remoteAddress, String sentence) {
 
         Parser parser = new Parser(PATTERN_NEW, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         String imei = parser.next();
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         String index = parser.next();
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
 
         position.setDeviceTime(parser.nextDateTime());
 
         Network network = new Network();
         network.addCellTower(CellTower.from(
                 parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
 
         position.set(Position.KEY_BATTERY, parser.nextDouble());
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
         position.set(Position.KEY_STATUS, parser.nextHexInt());
 
-        if (parser.hasNext(5)) {
+        // Check if there are enough fields for GPS data (ignition, validity, speed, satellites, lat, lon)
+        // There are 6 fields expected here, so hasNext(5) implies at least 5 fields after current position.
+        if (parser.hasNext(5)) { // This condition checks if there are at least 5 more fields.
+                                // In the example, there are 6 fields, so it enters this block.
 
-            position.setValid(parser.next().equals("A"));
+            parser.next(); // Consume the ignition status (e.g., '0' in the example)
+
+            position.setValid(parser.next().equals("A")); // Consume the validity flag (e.g., 'A')
             position.setFixTime(position.getDeviceTime());
-            position.set(Position.KEY_SATELLITES, parser.nextInt());
-            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
-            position.setLatitude(parser.nextDouble());
-            position.setLongitude(parser.nextDouble());
+            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt())); // Consume speed (e.g., '0')
+            position.set(Position.KEY_SATELLITES, parser.nextInt()); // Consume satellites (e.g., '13')
+            position.setLatitude(parser.nextDouble()); // Consume latitude
+            position.setLongitude(parser.nextDouble()); // Consume longitude
 
-        } else {
-
-            String[] points = parser.next().split("\\|");
+        } else { // This branch handles messages with Wifi data.
+            // There's an extra field (e.g., '1') before the actual Wifi access point list.
+            parser.next(); // Consume the extra field (e.g., '1' in Wifi messages)
+            String[] points = parser.next().split("\\|"); // Now, consume the actual Wifi data field
             for (String point : points) {
                 String[] wifi = point.split(":");
                 String mac = wifi[0].replaceAll("(..)", "$1:");
                 network.addWifiAccessPoint(WifiAccessPoint.from(
                         mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
             }
 
         }
 
         position.setNetwork(network);
 
         DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
         String response = index + ",A03," + dateFormat.format(new Date());
         sendResponse(channel, remoteAddress, imei, response);
 
         return position;
     }
