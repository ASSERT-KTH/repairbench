diff --git a/tmp/6fcfe8db-9a35-47a9-94be-b66e7cd3f40f_buggy.java b/tmp/aa92cf70-a0f2-4387-b512-b9c2bd400db6_fixed.java
index 7374e5f..3d971c4 100644
--- a/tmp/6fcfe8db-9a35-47a9-94be-b66e7cd3f40f_buggy.java
+++ b/tmp/aa92cf70-a0f2-4387-b512-b9c2bd400db6_fixed.java
@@ -1,61 +1,66 @@
     private Object decodeLocationNew(
             Channel channel, SocketAddress remoteAddress, String sentence) {
 
         Parser parser = new Parser(PATTERN_NEW, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         String imei = parser.next();
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         String index = parser.next();
+        parser.next(); // Consume 'type' field (e.g., A03, A01)
+        parser.next(); // Consume 'mode' field (e.g., empty string, '2')
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
-        position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
+        // Alarm is derived from status, so it's set later
 
         position.setDeviceTime(parser.nextDateTime());
 
         Network network = new Network();
         network.addCellTower(CellTower.from(
                 parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
 
         position.set(Position.KEY_BATTERY, parser.nextDouble());
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
         position.set(Position.KEY_STATUS, parser.nextHexInt());
 
-        if (parser.hasNext(5)) {
+        // Set alarm based on the status field (e.g., 0004 for ALARM_SOS)
+        position.set(Position.KEY_ALARM, decodeAlarm(position.getInteger(Position.KEY_STATUS)));
 
-            position.setValid(parser.next().equals("A"));
-            position.setFixTime(position.getDeviceTime());
-            position.set(Position.KEY_SATELLITES, parser.nextInt());
-            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
-            position.setLatitude(parser.nextDouble());
-            position.setLongitude(parser.nextDouble());
 
-        } else {
+        // Adjusting for 6 additional fields: fix_status, validity, speed, satellites, latitude, longitude
+        if (parser.hasNext(6)) { // Changed from 5 to 6
+            parser.skip(1); // Skip fix_status (e.g., '0' or '1')
+            position.setValid(parser.next().equals("A")); // Consume validity (e.g., 'A' or 'V')
+            position.setFixTime(position.getDeviceTime()); // Fix time is device time
+            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt())); // Consume speed (e.g., '0')
+            position.set(Position.KEY_SATELLITES, parser.nextInt()); // Consume satellites (e.g., '13')
+            position.setLatitude(parser.nextDouble()); // Consume latitude
+            position.setLongitude(parser.nextDouble()); // Consume longitude
 
+        } else { // Handle messages without full GPS data, often with Wifi access points instead
             String[] points = parser.next().split("\\|");
             for (String point : points) {
                 String[] wifi = point.split(":");
                 String mac = wifi[0].replaceAll("(..)", "$1:");
                 network.addWifiAccessPoint(WifiAccessPoint.from(
                         mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
             }
-
         }
 
         position.setNetwork(network);
 
         DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
         String response = index + ",A03," + dateFormat.format(new Date());
         sendResponse(channel, remoteAddress, imei, response);
 
         return position;
     }
