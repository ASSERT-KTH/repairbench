diff --git a/tmp/e34c2daf-a3b0-4627-8849-f42030c422aa_buggy.java b/tmp/e4c4fced-31ec-4d27-9324-a7ddbba2ef7e_fixed.java
index 862c60c..83e3b77 100644
--- a/tmp/e34c2daf-a3b0-4627-8849-f42030c422aa_buggy.java
+++ b/tmp/e4c4fced-31ec-4d27-9324-a7ddbba2ef7e_fixed.java
@@ -1,25 +1,36 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
+            // trimLeading/trimTrailing whitespace based on sibling position and parent block status
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
             trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = this.nextSibling();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
             if (couldSkip && isBlank()) return;
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+            // Indent text if:
+            // 1. It's in outline mode (special debug/structured output), and not blank.
+            // 2. In pretty print, it follows a <br> tag (which forces a line break).
+            //    The previous condition for `siblingIndex == 0` for TextNodes was removed
+            //    as it caused unwanted leading newlines for text content that is the
+            //    first child of a block parent (e.g., <p>Hello</p>).
+            Node prev = prevSibling();
+            boolean prevIsBr = (prev instanceof Element && ((Element) prev).tag().getName().equals("br"));
+
+            if ((out.outline() && siblingNodes().size() > 0 && !isBlank()) ||
+                (prettyPrint && prevIsBr)) {
                 indent(accum, depth, out);
             }
+        }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
