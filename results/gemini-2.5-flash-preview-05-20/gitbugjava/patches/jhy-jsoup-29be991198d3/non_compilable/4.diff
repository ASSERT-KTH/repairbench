diff --git a/tmp/db328560-32a7-40f7-9c68-2ed4bb3e54d1_buggy.java b/tmp/43fd2411-0e50-4b2a-b3b4-a8dbb736c53a_fixed.java
index 862c60c..4b780b1 100644
--- a/tmp/db328560-32a7-40f7-9c68-2ed4bb3e54d1_buggy.java
+++ b/tmp/43fd2411-0e50-4b2a-b3b4-a8dbb736c53a_fixed.java
@@ -1,25 +1,55 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
+            // Determine if leading whitespace should be trimmed from this text node.
+            // This applies if it's the first child of a block parent, or a direct child of the document.
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
+            // Determine if trailing whitespace should be trimmed from this text node.
+            // This applies if it's the last child of a block parent.
             trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // If this text node is just whitespace, and the next node will cause an indent, or is blank, skip this text.
             Node next = this.nextSibling();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+                || (next instanceof TextNode && (((TextNode) next).isBlank()));
             if (couldSkip && isBlank()) return;
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+            // Determine if an indent (newline + spaces) is needed before this text node.
+            boolean doIndent = false;
+            if (out.outline()) {
+                // In outline mode, indent if the text node is not blank.
+                if (!isBlank()) {
+                    doIndent = true;
+                }
+            } else if (prettyPrint) {
+                // In standard pretty print mode, indent if:
+                // 1. This text node is not blank.
+                // 2. Its parent is a block element.
+                // 3. It is preceded by a block element OR a line-break element (like <br>).
+                //    This ensures newlines after block elements or <br> tags.
+                //    Crucially, it avoids indenting the very first inline text within a block.
+                if (!isBlank() && parent != null && parent.tag().isBlock()) {
+                    Node prev = this.previousSibling();
+                    boolean prevIsBlock = (prev instanceof Element && ((Element) prev).tag().formatAsBlock());
+                    // A line break element is typically self-closing and not a block (e.g., <br>, <wbr>)
+                    boolean prevIsLineBreak = (prev instanceof Element && (((Element) prev).tag().isSelfClosing() && !((Element) prev).tag().isBlock()));
+
+                    if (prevIsBlock || prevIsLineBreak) {
+                        doIndent = true;
+                    }
+                }
+            }
+
+            if (doIndent) {
                 indent(accum, depth, out);
             }
+        }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
