diff --git a/tmp/54bdca55-ed1e-456b-b81a-155985bb1444_buggy.java b/tmp/39632bd8-51ab-4c66-a63d-9eddeb224241_fixed.java
index 862c60c..6a7ef27 100644
--- a/tmp/54bdca55-ed1e-456b-b81a-155985bb1444_buggy.java
+++ b/tmp/39632bd8-51ab-4c66-a63d-9eddeb224241_fixed.java
@@ -1,25 +1,53 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
+            // trimLeading and trimTrailing logic for text content itself (e.g., "  Hello" -> "Hello")
+            // This applies to the *value* of the text node, not for adding indents/newlines before it.
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
             trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = this.nextSibling();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
             if (couldSkip && isBlank()) return;
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+            // Determine if an indent (newline + spaces) should be added before this TextNode.
+            boolean doIndent = false;
+            if (out.outline()) {
+                // If in outline debug mode, always indent.
+                doIndent = true;
+            } else {
+                Node prev = previousSibling();
+                if (prev != null) {
+                    if (prev instanceof Element) {
+                        Element prevEl = (Element) prev;
+                        // Indent if previous sibling is a block element, or a self-closing empty element like <br>
+                        // which typically causes a line break in pretty-printed HTML.
+                        if (prevEl.tag().formatAsBlock() || (prevEl.tag().isSelfClosing() && prevEl.tag().isEmpty())) {
+                            doIndent = true;
+                        }
+                    }
+                    // If previous sibling is a TextNode, no additional indent is needed by this logic.
+                    // Whitespace between TextNodes is handled by normaliseWhite and trimLeading/trimTrailing.
+                }
+                // If prev is null (this is the first child of its parent), doIndent remains false.
+                // This correctly prevents indenting the first text node of a block (e.g., <p>Hello).
+            }
+
+            // Apply indentation if determined necessary.
+            // The isBlank() check is implicitly handled by the early return for couldSkip && isBlank().
+            if (doIndent) {
                 indent(accum, depth, out);
             }
+        }
 
+        // Escape and append the text content to the accumulator.
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
