diff --git a/tmp/84fbdaac-6b7f-4e0f-a003-60b13ffe66ae_buggy.java b/tmp/0c972e5a-1a34-4d9b-8eec-eaf723e041d9_fixed.java
index 862c60c..d68648d 100644
--- a/tmp/84fbdaac-6b7f-4e0f-a003-60b13ffe66ae_buggy.java
+++ b/tmp/0c972e5a-1a34-4d9b-8eec-eaf723e041d9_fixed.java
@@ -1,25 +1,39 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
             trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = this.nextSibling();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
             if (couldSkip && isBlank()) return;
 
+            // NEW LOGIC: Check if a newline should be prepended, specifically after a <br> tag
+            boolean needsPrependNewline = false;
+            Node prev = this.previousSibling();
+            if (prettyPrint && prev != null) {
+                if (prev instanceof Element) {
+                    Tag prevTag = ((Element) prev).tag();
+                    if (prevTag.equals(Tag.valueOf("br"))) {
+                         needsPrependNewline = true;
+                    }
+                }
+            }
+
             if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+                (out.outline() && siblingNodes().size() > 0 && !isBlank()) ||
+                needsPrependNewline // Add this condition
+            )
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
