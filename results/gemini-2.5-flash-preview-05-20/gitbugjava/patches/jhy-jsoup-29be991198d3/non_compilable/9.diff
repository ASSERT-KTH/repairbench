diff --git a/tmp/9ede4413-31c2-49e0-b6e4-30219165ef61_buggy.java b/tmp/e41bb2a5-70be-4c5b-b648-e1c00938aedc_fixed.java
index 862c60c..5d608bc 100644
--- a/tmp/9ede4413-31c2-49e0-b6e4-30219165ef61_buggy.java
+++ b/tmp/e41bb2a5-70be-4c5b-b648-e1c00938aedc_fixed.java
@@ -1,25 +1,48 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
+            // Trim leading whitespace for block-level elements or document root
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
+            // Trim trailing whitespace if this is the last sibling of a block-level element
             trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = this.nextSibling();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
             if (couldSkip && isBlank()) return;
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+            // Determine if a newline and indent should be added before this text node.
+            boolean forceNewlineAndIndent = false;
+
+            // New condition: If the previous sibling is a <br> tag, force a newline.
+            Node prev = this.previousSibling();
+            if (prev instanceof Element && ((Element)prev).tag().getName().equals("br")) {
+                forceNewlineAndIndent = true;
+            }
+
+            // Existing condition: If outlining is enabled and there are siblings, force a newline.
+            // This part should remain as it's a specific output setting.
+            if (out.outline() && siblingNodes().size() > 0 && !isBlank()) {
+                forceNewlineAndIndent = true;
+            }
+
+            // Removed the original condition for indenting the first child of a block.
+            // Original: `(siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank())`
+            // This condition caused incorrect indentation for text nodes that are the first children
+            // of block elements (e.g., "Hello" in "<p>Hello...</p>"), leading to an undesired leading newline.
+            // Text nodes within a block element generally flow inline unless a specific rule (like after <br>) applies.
+
+            if (forceNewlineAndIndent) {
                 indent(accum, depth, out);
             }
+        }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
