diff --git a/tmp/935a1f04-9881-4dd2-a97c-9f3147541d58_buggy.java b/tmp/e00a45ed-b372-4699-a754-ad23c32a2225_fixed.java
index 862c60c..0d250c5 100644
--- a/tmp/935a1f04-9881-4dd2-a97c-9f3147541d58_buggy.java
+++ b/tmp/e00a45ed-b372-4699-a754-ad23c32a2225_fixed.java
@@ -1,25 +1,34 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
             trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = this.nextSibling();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
             if (couldSkip && isBlank()) return;
 
+            // Determine if an indent (newline + spaces) should be added before this text node.
+            // This applies if:
+            // 1. It's the first non-blank child of a block-formatting parent.
+            // 2. `outline` mode is enabled (for debugging/structural view).
+            // 3. The previous sibling was a <br> tag, and this text node is not blank.
+            Node prev = this.previousSibling();
+            boolean prevIsBr = prev instanceof Element && ((Element) prev).tagName().equals("br");
+
             if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+                (out.outline() && siblingNodes().size() > 0 && !isBlank()) ||
+                (prevIsBr && !isBlank())) // New condition: indent after a <br> tag
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
