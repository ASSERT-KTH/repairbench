diff --git a/tmp/10902db1-856f-4b5c-bd00-bacfed82ea6b_buggy.java b/tmp/59efbf5c-a6d2-4032-bbc8-02744d7a7f67_fixed.java
index 862c60c..8d088f1 100644
--- a/tmp/10902db1-856f-4b5c-bd00-bacfed82ea6b_buggy.java
+++ b/tmp/59efbf5c-a6d2-4032-bbc8-02744d7a7f67_fixed.java
@@ -1,25 +1,38 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
+            // Original trimLeading condition:
+            // trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) || parentNode instanceof Document;
+            // The issue 1858 in jsoup (related to <br> indentation) suggests expanding this,
+            // but the primary indentation should come from the indent() call.
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                           parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = this.nextSibling();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
             if (couldSkip && isBlank()) return;
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+
+            // Indent text nodes that are not whitespace only, and are not at the beginning of a block element,
+            // but come after a block element, or specifically after a <br> tag.
+            // The original condition `(siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank())`
+            // caused an unwanted indent before the first text node in a block, e.g., <p>\n  Hello.
+            // The correct pretty print for <p>Hello</p> is <p>Hello</p>, no internal newline.
+            // This condition is removed, and a specific condition for <br> is added to handle issue #1858.
+            if ((out.outline() && siblingNodes().size() > 0 && !isBlank()) ||
+                // NEW: if previous sibling is a <br> tag and this text node is not blank, indent.
+                (previousSibling() != null && previousSibling() instanceof Element && ((Element)previousSibling()).tag().getName().equalsIgnoreCase("br") && !isBlank()))
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
