diff --git a/tmp/f8cea3fa-bb7b-4b56-bdf0-4c99ce7466de_buggy.java b/tmp/b9cb5f6d-2681-4331-826b-0a9ba05c18d4_fixed.java
index 568865c..0be0a2d 100644
--- a/tmp/f8cea3fa-bb7b-4b56-bdf0-4c99ce7466de_buggy.java
+++ b/tmp/b9cb5f6d-2681-4331-826b-0a9ba05c18d4_fixed.java
@@ -1,121 +1,167 @@
     private Position decodePosition(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int status = buf.readUnsignedShort();
 
         position.setValid(BitUtil.check(status, 15));
 
         position.set(Position.KEY_STATUS, status);
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
         int event = buf.readUnsignedShort();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, event);
 
-        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
+        // Fix: Trim the string to remove any potential leading/trailing whitespace or null characters
+        // that might interfere with Integer.parseInt.
+        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString().trim();
 
         DateBuilder dateBuilder = new DateBuilder()
                 .setYear(Integer.parseInt(time.substring(0, 2)))
                 .setMonth(Integer.parseInt(time.substring(2, 4)))
                 .setDay(Integer.parseInt(time.substring(4, 6)))
                 .setHour(Integer.parseInt(time.substring(6, 8)))
                 .setMinute(Integer.parseInt(time.substring(8, 10)))
                 .setSecond(Integer.parseInt(time.substring(10, 12)));
         position.setTime(dateBuilder.getDate());
 
         position.setLongitude(buf.readInt() * 0.00001);
         position.setLatitude(buf.readInt() * 0.00001);
 
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
         position.setCourse(buf.readUnsignedShort());
         position.setAltitude(buf.readUnsignedShort());
 
         position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
         Network network = new Network();
 
-        while (buf.readableBytes() > 4) {
+        while (buf.readableBytes() > 4) { // Ensure enough bytes for subtype and length (2+2=4)
             int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
-            int endIndex = buf.readerIndex() + length;
+            int length = buf.readUnsignedShort() - 4; // length of the data block itself
+
+            // Defensive check for invalid length.
+            // If length is negative or excessively large, skip the remaining bytes in the buffer and break the loop.
+            if (length < 0 || length > buf.readableBytes()) {
+                buf.skipBytes(buf.readableBytes()); // Skip all remaining bytes
+                break;
+            }
+
+            int endIndex = buf.readerIndex() + length; // The target reader index after processing this block
+
             switch (subtype) {
                 case 0x0001:
+                    // Ensure enough bytes are available for the current block's content
+                    if (length >= 17) { // 1 (coolant) + 2 (rpm) + 1 (avgSpeed) + 2 (fuelInterval) + 2 (fuelConsumption) + 2 (odometerTrip) + 2 (power) + 1 (fuelLevel) + 4 (tripId) = 17 bytes
                         int coolantTemperature = buf.readUnsignedByte() - 40;
                         if (coolantTemperature <= 215) {
                             position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                         }
                         int rpm = buf.readUnsignedShort();
                         if (rpm <= 65535) {
                             position.set(Position.KEY_RPM, rpm);
                         }
                         position.set("averageSpeed", buf.readUnsignedByte());
                         buf.readUnsignedShort(); // interval fuel consumption
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                         buf.readUnsignedInt(); // trip id
+                        // Check for adBlueLevel only if there's enough data left for it within the current block's length
                         if (buf.readerIndex() < endIndex) {
                             position.set("adBlueLevel", buf.readUnsignedByte() * 0.4);
                         }
+                    }
                     break;
                 case 0x0005:
+                    if (length >= 6) { // 1 (RSSI) + 1 (HDOP) + 4 (run time) = 6 bytes
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                         buf.readUnsignedInt(); // run time
+                    }
                     break;
                 case 0x0009:
+                    // Fix: Trim the VIN string to prevent parsing issues if it's used elsewhere, or for clean data.
                     position.set(
-                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
                     break;
                 case 0x0011:
+                    if (length >= 4) { // unsigned int is 4 bytes
                         position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                    }
                     break;
                 case 0x0014:
+                    if (length >= 6) { // 1 (engine load) + 1 (timingAdvance) + 1 (airTemp) + 2 (airFlow) + 1 (throttle) = 6 bytes
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                         position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                         position.set("airTemp", buf.readUnsignedByte() - 40);
                         position.set("airFlow", buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                    }
                     break;
                 case 0x0020:
-                    String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                    // Fix: Trim the string before splitting and parsing to remove hidden characters or whitespace.
+                    String rawCells = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();
+                    if (!rawCells.isEmpty()) { // Avoid splitting empty strings
+                        String[] cells = rawCells.split("\\+");
                         for (String cell : cells) {
                             String[] values = cell.split("@");
+                            // Fix: Add defensive checks for array length before accessing elements
+                            if (values.length >= 4) {
+                                try {
                                     network.addCellTower(CellTower.from(
                                             Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                             Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
+                                } catch (NumberFormatException e) {
+                                    // Log or handle parsing error for cell tower values if necessary
+                                }
+                            }
+                        }
                     }
                     break;
                 case 0x0021:
-                    String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                    // Fix: Trim the string before splitting and parsing to remove hidden characters or whitespace.
+                    String rawPoints = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();
+                    if (!rawPoints.isEmpty()) { // Avoid splitting empty strings
+                        String[] points = rawPoints.split("\\+");
                         for (String point : points) {
                             String[] values = point.split("@");
+                            // Fix: Add defensive checks for array length before accessing elements
+                            if (values.length >= 2) {
+                                try {
                                     network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
+                                } catch (NumberFormatException e) {
+                                    // Log or handle parsing error for WiFi values if necessary
+                                }
+                            }
+                        }
                     }
                     break;
                 default:
-                    buf.skipBytes(length);
+                    // No action needed here, as the readerIndex is advanced below to skip unread bytes
                     break;
             }
-            buf.readerIndex(endIndex);
+            // Ensure the buffer's reader index is positioned at the end of the current block.
+            // This is crucial to correctly process the next subtype or end the loop.
+            // Use Math.min to prevent advancing readerIndex beyond writerIndex if `length` was excessive,
+            // even after the initial `length` check.
+            buf.readerIndex(Math.min(endIndex, buf.writerIndex()));
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         sendResponse(channel, MSG_POSITION_RSP, index, null);
 
         return position;
     }
\ No newline at end of file
