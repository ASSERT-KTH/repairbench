diff --git a/tmp/fb9a46fd-a793-471d-918b-4309cecbd6e5_buggy.java b/tmp/e0e747fd-4b2c-4d74-8961-c1eb50547f45_fixed.java
index e807cbf..7685712 100644
--- a/tmp/fb9a46fd-a793-471d-918b-4309cecbd6e5_buggy.java
+++ b/tmp/e0e747fd-4b2c-4d74-8961-c1eb50547f45_fixed.java
@@ -1,7 +1,22 @@
     private boolean isInlineable(Document.OutputSettings out) {
         if (!tag.isInline())
             return false;
+
+        // Special rule for <br> elements, as their inlineability depends on their parent's content model.
+        // <br> is inlineable (no forced newline before it) if its parent element
+        // is designed to contain only inline content (e.g., <p> cannot contain block elements).
+        // <br> is NOT inlineable (forces a newline before it) if its parent element
+        // can contain block-level elements (e.g., <div> can contain blocks).
+        if (tag.getName().equalsIgnoreCase("br")) {
+            return (parent() != null && !parent().tag().canContainBlock()) && !out.outline();
+        }
+
+        // Original logic for other inline elements (e.g., <span>, <em>, etc.).
+        // An inline element is considered inlineable if its parent is a block or null,
+        // and it's not effectively the first child, and not in outline mode.
+        // This implies that if an inline element is the first child of a block, it is
+        // not considered inlineable by this definition, potentially leading to a newline.
         return (parent() == null || parent().isBlock())
             && !isEffectivelyFirst()
             && !out.outline();
     }
\ No newline at end of file
