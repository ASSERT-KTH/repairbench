diff --git a/tmp/0505cfb6-15be-4822-9b60-07e368a68776_buggy.java b/tmp/1b9b303f-cf8a-4164-aaf3-f64ae8245703_fixed.java
index e807cbf..8409e68 100644
--- a/tmp/0505cfb6-15be-4822-9b60-07e368a68776_buggy.java
+++ b/tmp/1b9b303f-cf8a-4164-aaf3-f64ae8245703_fixed.java
@@ -1,7 +1,25 @@
     private boolean isInlineable(Document.OutputSettings out) {
         if (!tag.isInline())
-            return false;
-        return (parent() == null || parent().isBlock())
-            && !isEffectivelyFirst()
-            && !out.outline();
+            return false; // Only inline tags can be inlineable
+
+        if (out.outline())
+            return false; // If outlining mode, nothing is inlineable
+
+        // <br> is special: it acts like a block element when it's not the first child
+        // of a block parent, forcing a newline before it. When it *is* the first child
+        // of a block parent, it prints inline. This aligns with the test's expectation
+        // "br gets wrapped if in div, but not in p (block vs inline)".
+        // - In <p><br>Foo: <br> is effectively first, should be inlineable (true).
+        // - In <div>...<br>: <br> is not effectively first, should not be inlineable (false),
+        //   thus forcing a newline before it.
+        if (tag.getName().equals("br")) {
+            return isEffectivelyFirst();
+        }
+
+        // For all other inline tags (e.g., span, a, em, strong), they are generally inlineable,
+        // meaning they do not force a newline before themselves for pretty printing.
+        // The previous `!isEffectivelyFirst()` condition was problematic for general
+        // inline tags when they were the first child of a block parent (e.g., <div><span>...</span></div>),
+        // incorrectly making them non-inlineable.
+        return true;
     }
\ No newline at end of file
