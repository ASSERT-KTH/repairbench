diff --git a/tmp/28314653-38e6-4b70-895f-4c88e2a99e79_buggy.java b/tmp/97248faa-f53a-4c0e-8573-4265c19a4a94_fixed.java
index e807cbf..c4f6ae7 100644
--- a/tmp/28314653-38e6-4b70-895f-4c88e2a99e79_buggy.java
+++ b/tmp/97248faa-f53a-4c0e-8573-4265c19a4a94_fixed.java
@@ -1,7 +1,27 @@
     private boolean isInlineable(Document.OutputSettings out) {
         if (!tag.isInline())
             return false;
+
+        // If the preceding sibling is a block element, this inline element should generally
+        // start on a new line (i.e., not be inlineable).
+        // This handles cases like `<div><p>Foo</p><br></div>` where `<br>` should be on a new line.
+        Node prev = previousSibling();
+        if (prev instanceof Element prevEl && prevEl.tag().isBlock()) {
+            return false;
+        }
+
+        // A <br> tag is special. It should usually not get a newline *before* it if it's
+        // the first child of a block, but it always emits a newline *after* itself.
+        // It can be inlineable even if it's effectively first.
+        if (tag.getName().equals("br")) {
+            return (parent() == null || parent().isBlock()) && !out.outline();
+        }
+
+        // General case for other inline elements:
+        // An inline element is inlineable if its parent is a block (or null),
+        // it's not the first effectively (i.e., has non-whitespace content before it),
+        // and outlining is enabled.
         return (parent() == null || parent().isBlock())
             && !isEffectivelyFirst()
             && !out.outline();
     }
\ No newline at end of file
