diff --git a/tmp/a4b97dc8-f0db-4a49-acb9-9a16947cbbce_buggy.java b/tmp/cc24aa22-8b08-4cce-aca3-57793d65c8e6_fixed.java
index e807cbf..919555d 100644
--- a/tmp/a4b97dc8-f0db-4a49-acb9-9a16947cbbce_buggy.java
+++ b/tmp/cc24aa22-8b08-4cce-aca3-57793d65c8e6_fixed.java
@@ -1,7 +1,52 @@
     private boolean isInlineable(Document.OutputSettings out) {
         if (!tag.isInline())
             return false;
-        return (parent() == null || parent().isBlock())
-            && !isEffectivelyFirst()
-            && !out.outline();
+
+        // If in outline mode, no element should be inlineable (always force newlines for structure)
+        if (out.outline())
+            return false;
+
+        boolean isBr = tag.equals(Tag.valueOf("br"));
+        boolean parentIsBlock = (parent() == null || parent().isBlock());
+        boolean effectivelyFirst = isEffectivelyFirst();
+
+        if (isBr) {
+            // Special handling for <br> tags due to their unique line-break behavior.
+            // A <br> tag is inlineable (meaning no newline will be printed before it)
+            // in two main scenarios:
+
+            // 1. If it's the first effectively non-blank child of a block-level parent.
+            //    This prevents an unwanted newline like in "<p>\n <br>Foo</p>".
+            //    We want "<p><br>\n Foo</p>".
+            if (parentIsBlock && effectivelyFirst) {
+                return true;
+            }
+            // 2. If its parent is an inline element.
+            //    E.g., "<span>Foo<br>Bar</span>" should pretty-print as "<span>Foo<br>Bar</span>".
+            //    This is covered by the final `return true;` if `parentIsBlock` is false.
+
+            // If a <br> is in a block-level parent but is NOT the first effectively non-blank child,
+            // then it should NOT be inlineable. This means a newline will be printed before it,
+            // visually separating it from the preceding content within the block.
+            // E.g., "<div><p></p><br></div>" should result in a newline before the <br>
+            // to separate it from the preceding block <p>.
+            if (parentIsBlock && !effectivelyFirst) {
+                return false;
+            }
+
+            // If none of the above conditions returned, it means `parentIsBlock` is false,
+            // implying the parent is an inline element. In this case, <br> should always be inlineable.
+            return true;
+
+        } else {
+            // General case for other inline tags (e.g., <em>, <strong>, <span>).
+            // An inline tag is inlineable if:
+            // 1. Its parent is a block-level element (or null, for top-level elements).
+            // 2. It is NOT the first effectively non-blank child of its parent.
+            // This ensures that:
+            //   - "<p><em>Foo</em></p>" becomes "<p>\n <em>Foo</em></p>" (not inlineable as first child)
+            //   - "<p>Foo<em>Bar</em></p>" remains "<p>Foo<em>Bar</em></p>" (inlineable as not first child)
+            //   - "<span><em>Foo</em></span>" remains "<span><em>Foo</em></span>" (inlineable as parent is inline)
+            return parentIsBlock && !effectivelyFirst;
+        }
     }
\ No newline at end of file
