diff --git a/tmp/eaa2e72d-8af2-4730-8a51-6d6663996482_buggy.java b/tmp/f6755b3e-a5c0-4379-94f0-81c61b84d33f_fixed.java
index 7b8ee38..cd66f17 100644
--- a/tmp/eaa2e72d-8af2-4730-8a51-6d6663996482_buggy.java
+++ b/tmp/f6755b3e-a5c0-4379-94f0-81c61b84d33f_fixed.java
@@ -1,179 +1,226 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         ByteBuf buf = (ByteBuf) msg;
 
         buf.skipBytes(1); // '[' header
-        manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
+        String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
         buf.skipBytes(1); // '*' delimiter
 
         int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
         String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
         if (deviceSession == null) {
             return null;
         }
 
         buf.skipBytes(1); // '*' delimiter
 
         String index = null;
         int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
+        // Check if index part exists (4 hex digits followed by '*')
+        // Ensure contentIndex is valid and there are enough bytes for the 4-digit index plus the next delimiter '*'
+        if (contentIndex != -1 && contentIndex + 5 < buf.writerIndex()
+                && buf.getByte(contentIndex + 5) == '*'
                 && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
             int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
-            hasIndex = true;
             index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
             buf.skipBytes(1); // '*' delimiter
         }
 
         buf.skipBytes(4); // length
         buf.skipBytes(1); // '*' delimiter
 
         buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
 
         contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
         if (contentIndex < 0) {
             contentIndex = buf.writerIndex();
         }
 
         String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
 
         if (contentIndex < buf.writerIndex()) {
             buf.readerIndex(contentIndex + 1);
         }
 
         if (type.equals("INIT")) {
 
             sendResponse(channel, id, index, "INIT,1");
 
         } else if (type.equals("LK")) {
 
             sendResponse(channel, id, index, "LK");
 
             if (buf.isReadable()) {
                 String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
+                // Original logic: values.length >= 3 check ensures values[0] and values[2] are available.
                 if (values.length >= 3) {
                     Position position = new Position(getProtocolName());
                     position.setDeviceId(deviceSession.getDeviceId());
 
                     getLastLocation(position, null);
 
                     position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
                     position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
 
                     return position;
                 }
             }
 
         } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
 
             Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
 
             if (type.startsWith("AL")) {
                 if (position != null) {
                     position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
                 }
                 sendResponse(channel, id, index, "AL");
             }
 
             return position;
 
         } else if (type.equals("TKQ") || type.equals("TKQ2")) {
 
             sendResponse(channel, id, index, type);
 
+        } else if (type.equalsIgnoreCase("TEMP")) { // NEW BLOCK TO HANDLE TEMP TYPE
+
+            if (buf.isReadable()) {
+                Position position = new Position(getProtocolName());
+                position.setDeviceId(deviceSession.getDeviceId());
+                getLastLocation(position, new Date());
+                String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
+                if (values.length > 0) { // Ensure there is at least one value for temperature
+                    position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[0]));
+                }
+                return position;
+            }
+
         } else if (type.equalsIgnoreCase("PULSE")
                 || type.equalsIgnoreCase("HEART")
                 || type.equalsIgnoreCase("BLOOD")
                 || type.equalsIgnoreCase("BPHRT")
                 || type.equalsIgnoreCase("btemp2")) {
 
             if (buf.isReadable()) {
 
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
 
                 getLastLocation(position, new Date());
 
                 String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
                 int valueIndex = 0;
 
                 if (type.equalsIgnoreCase("btemp2")) {
+                    // btemp2,1,35.29 -> values={"1", "35.29"}
+                    if (values.length > valueIndex) { // Check if values[0] (status) exists
                         if (Integer.parseInt(values[valueIndex++]) > 0) {
+                            if (values.length > valueIndex) { // Check if values[1] (temperature) exists
                                 position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
                             }
-                } else {
+                        }
+                    }
+                } else { // PULSE, HEART, BLOOD, BPHRT
                     if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
+                        // BPHRT,120,79 -> values={"120", "79"}
+                        if (values.length > valueIndex + 1) { // Ensure values[0] and values[1] for pressure
                             position.set("pressureHigh", values[valueIndex++]);
                             position.set("pressureLow", values[valueIndex++]);
+                        } else if (values.length > valueIndex) { // Fallback if only pressureHigh is provided
+                            position.set("pressureHigh", values[valueIndex++]);
                         }
-                    if (valueIndex <= values.length - 1) {
+                    }
+                    // HEART,71 -> values={"71"}
+                    if (valueIndex < values.length) { // Ensure value for heart rate exists
                         position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
                     }
                 }
 
                 return position;
 
             }
 
         } else if (type.equals("img")) {
 
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             getLastLocation(position, null);
 
             int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-            buf.readerIndex(timeIndex + 12 + 2);
+            // timeIndex points to the comma, +1 for start of next field (timestamp)
+            // +12 for timestamp length, +2 for CRC or other fixed bytes
+            if (timeIndex != -1 && timeIndex + 1 + 12 + 2 <= buf.writerIndex()) {
+                buf.readerIndex(timeIndex + 1 + 12 + 2);
+            } else {
+                // If the expected format for 'img' data header isn't found,
+                // it's safer to return null rather than proceeding with incorrect readerIndex
+                return null;
+            }
             position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
 
             return position;
 
         } else if (type.equals("JXTK")) {
 
-            int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
+            // Find the 4th comma to delineate the audio data section.
+            // Example: JXTK,0,watch_7_20220526093954,1,6,#AMR...
+            // current, filename, total, data
+            int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4);
+            if (dataIndex == -1) { // If 4th comma not found, message is malformed
+                return null;
+            }
+
+            // Read the "current,filename,total" part before the 4th comma.
             String[] values = buf.readCharSequence(
                     dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
+            buf.readerIndex(dataIndex + 1); // Move readerIndex past the 4th comma to the actual audio data
 
+            if (values.length < 4) { // Ensure we have current and total fields in the parsed values
+                return null; // Malformed JXTK header
+            }
             int current = Integer.parseInt(values[2]);
             int total = Integer.parseInt(values[3]);
 
             if (audio == null) {
                 audio = Unpooled.buffer();
             }
-            audio.writeBytes(buf);
+            audio.writeBytes(buf); // This correctly appends the remaining audio data from 'buf'
 
             sendResponse(channel, id, index, "JXTKR,1");
 
             if (current < total) {
                 return null;
             } else {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
                 getLastLocation(position, null);
                 position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
                 audio.release();
                 audio = null;
                 return position;
             }
 
         } else if (type.equals("TK")) {
 
-            if (buf.readableBytes() == 1) {
+            if (buf.readableBytes() == 1) { // Special case for a TK message with only one byte (e.g., just a null byte)
                 return null;
             }
 
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             getLastLocation(position, null);
 
             position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
 
             return position;
 
         }
 
         return null;
     }
