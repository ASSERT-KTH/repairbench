diff --git a/tmp/ae64bff9-cfbb-4c8c-9cc3-b8d738696d74_buggy.java b/tmp/4e943abf-b959-47a5-b73e-a144adab0a2c_fixed.java
index 7b8ee38..d74eca8 100644
--- a/tmp/ae64bff9-cfbb-4c8c-9cc3-b8d738696d74_buggy.java
+++ b/tmp/4e943abf-b959-47a5-b73e-a144adab0a2c_fixed.java
@@ -1,179 +1,247 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         ByteBuf buf = (ByteBuf) msg;
 
         buf.skipBytes(1); // '[' header
-        manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
+        String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
         buf.skipBytes(1); // '*' delimiter
 
         int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+        if (idIndex < 0) {
+            // Malformed message: missing ID delimiter
+            return null;
+        }
         String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
         if (deviceSession == null) {
             return null;
         }
 
         buf.skipBytes(1); // '*' delimiter
 
         String index = null;
-        int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
-                && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
-            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
+        boolean hasIndex = false;
+
+        // Check if there's an index field. It's identified by being 4 hex digits followed by '*'
+        int potentialIndexDelimiter = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+        if (potentialIndexDelimiter >= 0) {
+            // Check if the segment between current readerIndex and potentialIndexDelimiter is 4 chars long
+            // and contains hex digits, indicating it's the 'index' field.
+            // Also, check if the part *after* this potential index field and its delimiter is a 4-char length field
+            // followed by another '*' delimiter.
+            if (potentialIndexDelimiter - buf.readerIndex() == 4
+                    && buf.toString(buf.readerIndex(), 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")
+                    && potentialIndexDelimiter + 5 < buf.writerIndex() // Ensure enough bytes for length and its delimiter
+                    && buf.getByte(potentialIndexDelimiter + 5) == '*') { // Check the byte after the 4-char length is '*'
                 hasIndex = true;
-            index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
-            buf.skipBytes(1); // '*' delimiter
+                index = buf.readSlice(4).toString(StandardCharsets.US_ASCII); // Read the 4-char index
+                buf.skipBytes(1); // Skip '*' delimiter after index
+            }
+        }
+
+        // Now readerIndex is at the beginning of the length field (e.g., "0009").
+        // Parse the length field (4 ASCII hex characters)
+        int length = Integer.parseInt(buf.readSlice(4).toString(StandardCharsets.US_ASCII), 16);
+        buf.skipBytes(1); // Skip '*' delimiter after length
+
+        // The content is of `length` bytes, starting from the current reader index.
+        // The last byte of the entire message is ']', which should not be included in the content processing.
+        int contentEndIndex = buf.readerIndex() + length;
+        // Ensure the calculated contentEndIndex does not exceed the actual buffer's bounds before the final ']'
+        if (contentEndIndex > buf.writerIndex() - 1) {
+             contentEndIndex = buf.writerIndex() - 1; // Adjust to the end of readable bytes before ']'
         }
 
-        buf.skipBytes(4); // length
-        buf.skipBytes(1); // '*' delimiter
+        // Create a slice for the content to ensure all operations (indexOf, readSlice, toString)
+        // are confined to the actual message payload, ignoring potential delimiters in binary data
+        // outside this range or the trailing ']'
+        ByteBuf contentBuf = buf.readSlice(contentEndIndex - buf.readerIndex());
 
-        buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
+        // Now, advance the main buffer's reader index past the content and the trailing ']'
+        // This is important because `readSlice` advances the reader index of the *original* buffer.
+        // So `buf.readerIndex()` is now at `contentEndIndex`. We just need to skip the final `]`.
+        buf.skipBytes(1); // Skip the ']'
 
-        contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-        if (contentIndex < 0) {
-            contentIndex = buf.writerIndex();
+        // Determine the type by finding the first comma within the content
+        int typeDelimiterIndex = contentBuf.indexOf(contentBuf.readerIndex(), contentBuf.writerIndex(), (byte) ',');
+        if (typeDelimiterIndex < 0) {
+            // If no comma, the whole content is the type string
+            typeDelimiterIndex = contentBuf.writerIndex();
         }
 
-        String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
+        String type = contentBuf.readSlice(typeDelimiterIndex - contentBuf.readerIndex()).toString(StandardCharsets.US_ASCII);
 
-        if (contentIndex < buf.writerIndex()) {
-            buf.readerIndex(contentIndex + 1);
+        if (typeDelimiterIndex < contentBuf.writerIndex()) {
+            contentBuf.readerIndex(typeDelimiterIndex + 1); // Advance contentBuf's reader index past the comma
         }
 
         if (type.equals("INIT")) {
-
             sendResponse(channel, id, index, "INIT,1");
-
         } else if (type.equals("LK")) {
-
             sendResponse(channel, id, index, "LK");
-
-            if (buf.isReadable()) {
-                String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
-                if (values.length >= 3) {
+            if (contentBuf.isReadable()) {
+                String[] values = contentBuf.toString(StandardCharsets.US_ASCII).split(",");
+                if (values.length >= 3) { // Expecting "steps,battery_level,..." (e.g. "0,10,100")
                     Position position = new Position(getProtocolName());
                     position.setDeviceId(deviceSession.getDeviceId());
 
                     getLastLocation(position, null);
 
                     position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
                     position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
 
                     return position;
                 }
             }
-
         } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
-
-            Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
+            Position position = decodePosition(deviceSession, contentBuf.toString(StandardCharsets.US_ASCII));
 
             if (type.startsWith("AL")) {
                 if (position != null) {
                     position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
                 }
                 sendResponse(channel, id, index, "AL");
             }
-
             return position;
 
         } else if (type.equals("TKQ") || type.equals("TKQ2")) {
 
             sendResponse(channel, id, index, type);
 
         } else if (type.equalsIgnoreCase("PULSE")
                 || type.equalsIgnoreCase("HEART")
                 || type.equalsIgnoreCase("BLOOD")
                 || type.equalsIgnoreCase("BPHRT")
                 || type.equalsIgnoreCase("btemp2")) {
 
-            if (buf.isReadable()) {
+            if (contentBuf.isReadable()) {
 
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
 
                 getLastLocation(position, new Date());
 
-                String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
+                String[] values = contentBuf.toString(StandardCharsets.US_ASCII).split(",");
                 int valueIndex = 0;
 
                 if (type.equalsIgnoreCase("btemp2")) {
-                    if (Integer.parseInt(values[valueIndex++]) > 0) {
+                    // Example: "btemp2,1,35.29" -> values={"1", "35.29"}
+                    if (valueIndex < values.length && Integer.parseInt(values[valueIndex++]) > 0
+                            && valueIndex < values.length) {
                         position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
                     }
                 } else {
+                    // Example: "BPHRT,120,79,73" -> values={"120", "79", "73"}
+                    // Example: "PULSE,72" -> values={"72"}
                     if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
+                        if (valueIndex < values.length) {
                             position.set("pressureHigh", values[valueIndex++]);
+                        }
+                        if (valueIndex < values.length) {
                             position.set("pressureLow", values[valueIndex++]);
                         }
-                    if (valueIndex <= values.length - 1) {
+                    }
+                    if (valueIndex < values.length) {
                         position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
                     }
                 }
 
                 return position;
 
             }
 
         } else if (type.equals("img")) {
 
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             getLastLocation(position, null);
 
-            int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-            buf.readerIndex(timeIndex + 12 + 2);
-            position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
+            // The contentBuf starts after "img," and contains "time_string,counter,image_data".
+            // First, skip "time_string,"
+            int firstComma = contentBuf.indexOf(contentBuf.readerIndex(), contentBuf.writerIndex(), (byte) ',');
+            if (firstComma >= 0) {
+                contentBuf.readerIndex(firstComma + 1); // Skip past "time_string,"
+
+                // Then, skip "counter," if present
+                int secondComma = contentBuf.indexOf(contentBuf.readerIndex(), contentBuf.writerIndex(), (byte) ',');
+                if (secondComma >= 0) {
+                    contentBuf.readerIndex(secondComma + 1); // Skip past "counter,"
+                }
+            }
+            // The remaining contentBuf is the image data
+            position.set(Position.KEY_IMAGE, writeMediaFile(id, contentBuf, "jpg"));
 
             return position;
 
         } else if (type.equals("JXTK")) {
+            // JXTK format: JXTK,packet_index,file_id,current_chunk,total_chunks,data
+            // Example: JXTK,0,watch_7_20220526093954,1,6,#!AMR...
+            // Need to find the 4th comma to parse current_chunk and total_chunks
 
-            int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
-            String[] values = buf.readCharSequence(
-                    dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
+            // Find the absolute index of the 4th comma within the current contentBuf's readable bytes
+            // The `BufferUtil.indexOf` expects absolute indexes, but internally works with slice offsets.
+            int fourCommaIndex = BufferUtil.indexOf(contentBuf, contentBuf.readerIndex(), contentBuf.writerIndex(), (byte) ',', 4);
             
-            int current = Integer.parseInt(values[2]);
-            int total = Integer.parseInt(values[3]);
+            if (fourCommaIndex < 0) {
+                // Malformed message: Not enough commas for JXTK parameters
+                return null;
+            }
+
+            // Read the string containing "packet_index,file_id,current_chunk,total_chunks"
+            // This slice goes from current readerIndex to the 4th comma.
+            String[] values = contentBuf.readSlice(fourCommaIndex - contentBuf.readerIndex()).toString(StandardCharsets.US_ASCII).split(",");
+            
+            if (values.length < 4) { // Ensure all expected values are present
+                return null;
+            }
+
+            // Extract current and total chunk numbers
+            int current = Integer.parseInt(values[2]); // current_chunk (e.g., 1)
+            int total = Integer.parseInt(values[3]);   // total_chunks (e.g., 6)
+
+            // Advance contentBuf's reader index past the 4th comma
+            contentBuf.readerIndex(fourCommaIndex + 1);
 
             if (audio == null) {
                 audio = Unpooled.buffer();
             }
-            audio.writeBytes(buf);
+            audio.writeBytes(contentBuf); // Write remaining binary data to audio buffer
 
             sendResponse(channel, id, index, "JXTKR,1");
 
             if (current < total) {
                 return null;
             } else {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
                 getLastLocation(position, null);
                 position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
                 audio.release();
                 audio = null;
                 return position;
             }
 
         } else if (type.equals("TK")) {
-
-            if (buf.readableBytes() == 1) {
+            // TK message format: TK,audio_data
+            // The contentBuf's reader index is already after "TK,"
+            // The remaining contentBuf is the audio data.
+            if (!contentBuf.isReadable()) { // If no content after "TK,"
                 return null;
             }
 
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             getLastLocation(position, null);
 
-            position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
+            position.set(Position.KEY_AUDIO, writeMediaFile(id, contentBuf, "amr"));
 
             return position;
 
         }
 
         return null;
     }
\ No newline at end of file
