diff --git a/tmp/97b00417-1cec-4a53-a274-8ddd562ccb0d_buggy.java b/tmp/20c37346-d920-4e6d-8b0d-87c12dcf6a31_fixed.java
index 7b8ee38..327bae3 100644
--- a/tmp/97b00417-1cec-4a53-a274-8ddd562ccb0d_buggy.java
+++ b/tmp/20c37346-d920-4e6d-8b0d-87c12dcf6a31_fixed.java
@@ -1,179 +1,253 @@
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import io.netty.channel.Channel;
+import org.traccar.BaseProtocolDecoder;
+import org.traccar.helper.BufferUtil;
+import org.traccar.model.Position;
+import org.traccar.session.DeviceSession;
+
+import java.net.SocketAddress;
+import java.nio.charset.StandardCharsets;
+import java.util.Date;
+
+public class WatchProtocolDecoder extends BaseProtocolDecoder {
+
+    private ByteBuf audio;
+
+    public WatchProtocolDecoder(org.traccar.Protocol protocol) {
+        super(protocol);
+    }
+
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         ByteBuf buf = (ByteBuf) msg;
 
         buf.skipBytes(1); // '[' header
-        manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
+        String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
         buf.skipBytes(1); // '*' delimiter
 
         int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+        if (idIndex < 0) {
+            return null; // Malformed message: ID delimiter not found
+        }
         String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
         if (deviceSession == null) {
             return null;
         }
 
         buf.skipBytes(1); // '*' delimiter
 
         String index = null;
-        int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
-                && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
-            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
+        boolean hasIndex = false;
+
+        // Check if there's an optional index field (hexadecimal, 4 digits, followed by '*')
+        // The check (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*')
+        // implies contentIndex is the asterisk after ID, and then it looks 5 bytes ahead (4 for length, 1 for next *)
+        // If there's an index, the current readerIndex is at the start of the index field.
+        // If no index, current readerIndex is at the start of the length field.
+
+        // Find the next asterisk, which could be after the index or directly after the ID.
+        int firstAsteriskAfterId = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+
+        if (firstAsteriskAfterId >= 0 && (firstAsteriskAfterId + 5 < buf.writerIndex())
+                && buf.getByte(firstAsteriskAfterId + 5) == '*'
+                && buf.toString(firstAsteriskAfterId + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
+            // It looks like an index field followed by length
+            int indexLength = firstAsteriskAfterId - buf.readerIndex();
             hasIndex = true;
             index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
-            buf.skipBytes(1); // '*' delimiter
+            buf.skipBytes(1); // '*' delimiter after index
         }
 
-        buf.skipBytes(4); // length
+        // buf.readerIndex() is now at the start of the 4-byte length field
+        String lengthString = buf.readSlice(4).toString(StandardCharsets.US_ASCII);
+        int contentLength = Integer.parseInt(lengthString, 16);
         buf.skipBytes(1); // '*' delimiter
 
-        buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
+        // Now, buf.readerIndex() is at the start of the actual content.
+        // Create a slice to ensure subsequent operations only read from the content part of this message.
+        // This implicitly moves buf.readerIndex() of the main 'buf' to the end of the current frame's content.
+        // This also consumes the entire current message's content, preventing spillover to other parts of the buffer.
+        if (contentLength > buf.readableBytes()) {
+            return null; // Malformed message: declared content length exceeds readable bytes
+        }
+        ByteBuf contentBuf = buf.readSlice(contentLength);
+
+        // Ignore ending ']' - it was handled by the `contentLength` and `readSlice` implicitly.
+        // The original `buf.writerIndex(buf.writerIndex() - 1);` line at the top was likely problematic
+        // if this is indeed a MessageToMessageDecoder. It's removed. The `readSlice(contentLength)`
+        // handles the current frame's boundary.
 
-        contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-        if (contentIndex < 0) {
-            contentIndex = buf.writerIndex();
+        // Parse type and content from contentBuf
+        int typeEndIndex = contentBuf.indexOf(
+                contentBuf.readerIndex(), contentBuf.writerIndex(), (byte) ',');
+        if (typeEndIndex < 0) {
+            typeEndIndex = contentBuf.writerIndex();
         }
 
-        String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
+        String type = contentBuf.readSlice(
+                typeEndIndex - contentBuf.readerIndex()).toString(StandardCharsets.US_ASCII);
 
-        if (contentIndex < buf.writerIndex()) {
-            buf.readerIndex(contentIndex + 1);
+        if (typeEndIndex < contentBuf.writerIndex()) {
+            contentBuf.readerIndex(typeEndIndex + 1); // Skip the comma if present
         }
 
         if (type.equals("INIT")) {
 
             sendResponse(channel, id, index, "INIT,1");
 
         } else if (type.equals("LK")) {
 
             sendResponse(channel, id, index, "LK");
 
-            if (buf.isReadable()) {
-                String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
+            if (contentBuf.isReadable()) { // Use contentBuf for all content parsing
+                String[] values = contentBuf.toString(StandardCharsets.US_ASCII).split(",");
                 if (values.length >= 3) {
                     Position position = new Position(getProtocolName());
                     position.setDeviceId(deviceSession.getDeviceId());
 
                     getLastLocation(position, null);
 
+                    // Ensure array access is safe
                     position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
                     position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
 
                     return position;
                 }
             }
 
         } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
 
-            Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
+            // Use contentBuf for decoding position data
+            Position position = decodePosition(deviceSession, contentBuf.toString(StandardCharsets.US_ASCII));
 
             if (type.startsWith("AL")) {
                 if (position != null) {
                     position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
                 }
                 sendResponse(channel, id, index, "AL");
             }
 
             return position;
 
         } else if (type.equals("TKQ") || type.equals("TKQ2")) {
 
             sendResponse(channel, id, index, type);
 
         } else if (type.equalsIgnoreCase("PULSE")
                 || type.equalsIgnoreCase("HEART")
                 || type.equalsIgnoreCase("BLOOD")
                 || type.equalsIgnoreCase("BPHRT")
                 || type.equalsIgnoreCase("btemp2")) {
 
-            if (buf.isReadable()) {
+            if (contentBuf.isReadable()) { // Use contentBuf
 
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
 
                 getLastLocation(position, new Date());
 
-                String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
+                String[] values = contentBuf.toString(StandardCharsets.US_ASCII).split(","); // Use contentBuf
                 int valueIndex = 0;
 
                 if (type.equalsIgnoreCase("btemp2")) {
-                    if (Integer.parseInt(values[valueIndex++]) > 0) {
+                    if (values.length > valueIndex && Integer.parseInt(values[valueIndex++]) > 0) {
+                        if (values.length > valueIndex) {
                             position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
                         }
+                    }
                 } else {
                     if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
+                        if (values.length > valueIndex) {
                             position.set("pressureHigh", values[valueIndex++]);
+                        }
+                        if (values.length > valueIndex) {
                             position.set("pressureLow", values[valueIndex++]);
                         }
-                    if (valueIndex <= values.length - 1) {
+                    }
+                    if (valueIndex <= values.length - 1) { // Check for heart rate value existence
                         position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
                     }
                 }
 
                 return position;
 
             }
 
         } else if (type.equals("img")) {
 
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             getLastLocation(position, null);
 
-            int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-            buf.readerIndex(timeIndex + 12 + 2);
-            position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
+            int timeIndex = contentBuf.indexOf(contentBuf.readerIndex(), contentBuf.writerIndex(), (byte) ','); // Use contentBuf
+            if (timeIndex < 0) { // Handle malformed or incomplete image data
+                return null;
+            }
+            contentBuf.readerIndex(timeIndex + 12 + 2); // Use contentBuf
+            position.set(Position.KEY_IMAGE, writeMediaFile(id, contentBuf, "jpg")); // Use contentBuf
 
             return position;
 
         } else if (type.equals("JXTK")) {
 
-            int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
-            String[] values = buf.readCharSequence(
-                    dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
+            // Find the 4th comma within the contentBuf
+            int dataIndex = BufferUtil.indexOf(contentBuf, contentBuf.readerIndex(), contentBuf.writerIndex(), (byte) ',', 4);
+            if (dataIndex < 0) {
+                return null; // Malformed JXTK header (not enough commas)
+            }
+            dataIndex += 1; // Move past the 4th comma to the start of the audio metadata values
+
+            String[] values = contentBuf.readCharSequence(
+                    dataIndex - contentBuf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
+
+            if (values.length < 4) { // Ensure current and total packet numbers are present
+                return null;
+            }
 
             int current = Integer.parseInt(values[2]);
             int total = Integer.parseInt(values[3]);
 
             if (audio == null) {
                 audio = Unpooled.buffer();
             }
-            audio.writeBytes(buf);
+            // Write remaining readable bytes in contentBuf (which is only the audio data for this message) to audio buffer
+            audio.writeBytes(contentBuf);
 
             sendResponse(channel, id, index, "JXTKR,1");
 
             if (current < total) {
                 return null;
             } else {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
                 getLastLocation(position, null);
                 position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
                 audio.release();
                 audio = null;
                 return position;
             }
 
         } else if (type.equals("TK")) {
 
-            if (buf.readableBytes() == 1) {
+            if (contentBuf.readableBytes() == 1) { // Use contentBuf
                 return null;
             }
 
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             getLastLocation(position, null);
 
-            position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
+            position.set(Position.KEY_AUDIO, writeMediaFile(id, contentBuf, "amr")); // Use contentBuf
 
             return position;
 
         }
 
         return null;
     }
\ No newline at end of file
