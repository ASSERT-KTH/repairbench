diff --git a/tmp/b15feb26-ae8a-4c4f-baf9-739f20569f7c_buggy.java b/tmp/e7463079-a095-4695-868e-1462c47834f7_fixed.java
index 4722599..c264682 100644
--- a/tmp/b15feb26-ae8a-4c4f-baf9-739f20569f7c_buggy.java
+++ b/tmp/e7463079-a095-4695-868e-1462c47834f7_fixed.java
@@ -1,194 +1,205 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         ByteBuf buf = (ByteBuf) msg;
 
         buf.readUnsignedByte(); // header
         int flags = buf.readUnsignedByte();
         buf.readUnsignedShortLE(); // length
         buf.readUnsignedShortLE(); // checksum
         int index = buf.readUnsignedShortLE();
         int type = buf.readUnsignedByte();
 
         if (BitUtil.check(flags, 4)) {
             sendResponse(channel, remoteAddress, index, type, buf.slice());
         }
 
-        if (type == MSG_DATA || type == MSG_SERVICES) {
+        // Removed the restrictive 'if (type == MSG_DATA || type == MSG_SERVICES)' condition.
+        // The protocol's data fields can be present in messages of other 'type' values as well.
 
         List<Position> positions = new LinkedList<>();
         Set<Integer> keys = new HashSet<>();
         boolean hasLocation = false;
         Position position = new Position(getProtocolName());
 
-            DeviceSession deviceSession = null;
+        // Initialize deviceSession by attempting to retrieve an existing one based on channel/remoteAddress.
+        // This handles cases where the device ID is not explicitly in the current message (e.g., subsequent messages
+        // from an already connected and identified device).
+        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
 
         while (buf.isReadable()) {
             int endIndex = buf.readUnsignedByte() + buf.readerIndex();
             int key = buf.readUnsignedByte();
 
             if (keys.contains(key)) {
                 if (!hasLocation) {
                     getLastLocation(position, null);
                 }
                 positions.add(position);
                 keys.clear();
                 hasLocation = false;
                 position = new Position(getProtocolName());
             }
             keys.add(key);
 
             switch (key) {
                 case 0x01:
+                    // If key 0x01 is encountered, update or create the device session using the unique identifier.
+                    String uniqueId = buf.readCharSequence(15, StandardCharsets.US_ASCII).toString();
                     deviceSession = getDeviceSession(
-                                channel, remoteAddress, buf.readCharSequence(15, StandardCharsets.US_ASCII).toString());
+                            channel, remoteAddress, uniqueId);
                     if (deviceSession == null) {
+                        // If device session still cannot be established with the provided ID, return null.
+                        // This indicates an unrecognized device trying to send an initial identification message.
                         return null;
                     }
                     break;
                 case 0x02:
                     long alarm = buf.readUnsignedIntLE();
                     position.set(Position.KEY_ALARM, decodeAlarm(alarm));
                     if (BitUtil.check(alarm, 31)) {
                         position.set("bark", true);
                     }
                     break;
                 case 0x14:
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.001);
                     break;
                 case 0x20:
                     hasLocation = true;
                     position.setLatitude(buf.readIntLE() * 0.0000001);
                     position.setLongitude(buf.readIntLE() * 0.0000001);
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                     position.setCourse(buf.readUnsignedShortLE());
                     position.setAltitude(buf.readShortLE());
                     int hdop = buf.readUnsignedShortLE();
                     position.setValid(hdop > 0);
                     position.set(Position.KEY_HDOP, hdop * 0.1);
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
                 case 0x21:
                     int mcc = buf.readUnsignedShortLE();
                     int mnc = buf.readUnsignedByte();
                     if (position.getNetwork() == null) {
                         position.setNetwork(new Network());
                     }
                     while (buf.readerIndex() < endIndex) {
                         int rssi = buf.readByte();
                         position.getNetwork().addCellTower(CellTower.from(
                                 mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE(), rssi));
                     }
                     break;
                 case 0x22:
                     if (position.getNetwork() == null) {
                         position.setNetwork(new Network());
                     }
                     while (buf.readerIndex() < endIndex) {
                         int rssi = buf.readByte();
                         String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll("(..)", "$1:");
                         position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(
                                 mac.substring(0, mac.length() - 1), rssi));
                     }
                     break;
                 case 0x23:
                     position.set("tagId", readTagId(buf));
                     position.setLatitude(buf.readIntLE() * 0.0000001);
                     position.setLongitude(buf.readIntLE() * 0.0000001);
                     position.setValid(true);
                     hasLocation = true;
                     break;
                 case 0x24:
                     position.setTime(new Date(buf.readUnsignedIntLE() * 1000));
                     long status = buf.readUnsignedIntLE();
                     if (BitUtil.check(status, 4)) {
                         position.set(Position.KEY_CHARGE, true);
                     }
                     if (BitUtil.check(status, 7)) {
                         position.set(Position.KEY_ARCHIVE, true);
                     }
                     position.set(Position.KEY_MOTION, BitUtil.check(status, 9));
                     position.set(Position.KEY_RSSI, BitUtil.between(status, 19, 24));
                     position.set(Position.KEY_BATTERY_LEVEL, BitUtil.from(status, 24));
                     position.set(Position.KEY_STATUS, status);
                     break;
                 case 0x28:
                     int beaconFlags = buf.readUnsignedByte();
                     position.set("tagId", readTagId(buf));
                     position.set("tagRssi", (int) buf.readByte());
                     position.set("tag1mRssi", (int) buf.readByte());
                     if (BitUtil.check(beaconFlags, 7)) {
                         position.setLatitude(buf.readIntLE() * 0.0000001);
                         position.setLongitude(buf.readIntLE() * 0.0000001);
                         position.setValid(true);
                         hasLocation = true;
                     }
                     if (BitUtil.check(beaconFlags, 6)) {
                         position.set("description", buf.readCharSequence(
                                 endIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString());
                     }
                     break;
                 case 0x2A:
                     buf.readUnsignedByte(); // flags
                     buf.skipBytes(6); // mac
                     buf.readUnsignedByte(); // rssi
                     position.setLatitude(buf.readIntLE() * 0.0000001);
                     position.setLongitude(buf.readIntLE() * 0.0000001);
                     position.setValid(true);
                     hasLocation = true;
                     break;
                 case 0x30:
                     buf.readUnsignedIntLE(); // timestamp
                     position.set(Position.KEY_STEPS, buf.readUnsignedIntLE());
                     break;
                 case 0x31:
                     int i = 1;
                     while (buf.readerIndex() < endIndex) {
                         position.set("activity" + i + "Time", buf.readUnsignedIntLE());
                         position.set("activity" + i, buf.readUnsignedIntLE());
                         i += 1;
                     }
                     break;
                 case 0x37:
                     buf.readUnsignedIntLE(); // timestamp
                     long barking = buf.readUnsignedIntLE();
                     if (BitUtil.check(barking, 31)) {
                         position.set("barkStop", true);
                     }
                     position.set("barkCount", BitUtil.to(barking, 31));
                     break;
                 case 0x40:
                     buf.readUnsignedIntLE(); // timestamp
                     int heartRate = buf.readUnsignedByte();
                     if (heartRate > 1) {
                         position.set(Position.KEY_HEART_RATE, heartRate);
                     }
                     break;
                 default:
+                    // If an unknown key is encountered, or the key is not meant for data,
+                    // the decoder proceeds by skipping its data bytes using endIndex.
                     break;
             }
             buf.readerIndex(endIndex);
         }
 
         if (!hasLocation) {
             getLastLocation(position, null);
         }
         positions.add(position);
 
+        // Assign deviceId to all positions if a device session was successfully established.
+        // If deviceSession is null here, it means no device ID was found in the message
+        // and no existing session could be retrieved for the channel/remoteAddress.
+        // In Traccar, positions without a deviceId are generally considered invalid and are discarded.
         if (deviceSession != null) {
             for (Position p : positions) {
                 p.setDeviceId(deviceSession.getDeviceId());
             }
         } else {
+            // Return null if the device session is not found/established, as positions require a deviceId.
             return null;
         }
 
         return positions;
-
-        }
-
-        return null;
     }
\ No newline at end of file
