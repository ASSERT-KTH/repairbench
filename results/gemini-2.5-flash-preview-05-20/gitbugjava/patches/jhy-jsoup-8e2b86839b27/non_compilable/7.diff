diff --git a/tmp/05e83e4e-6a9b-4707-ac24-02c21bac7415_buggy.java b/tmp/089554c0-1a6f-4a76-a531-dc29a191ef36_fixed.java
index ae12a4d..21119d8 100644
--- a/tmp/05e83e4e-6a9b-4707-ac24-02c21bac7415_buggy.java
+++ b/tmp/089554c0-1a6f-4a76-a531-dc29a191ef36_fixed.java
@@ -1,3 +1,27 @@
     private boolean isFormatAsBlock(Document.OutputSettings out) {
         return tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline();
     }
+    ```
+2.  **Issue #1926**: "Nested inline elements in block parents cause unwanted newlines".
+    *   Example: `<div><span>a</span><span>b</span></div>`
+    *   `<span>` is an inline element, so `tag.formatAsBlock()` for `span` is `false`.
+    *   `<div>` is a block element, so `parent().tag().formatAsBlock()` for `span` (whose parent is `div`) is `true`.
+    *   Due to the `(parent() != null && parent().tag().formatAsBlock())` condition, `isFormatAsBlock` returns `true` for the `<span>`. This causes a newline and indentation before the `<span>`, which is undesired for inline elements.
+    *   The fix for this issue requires that inline elements are *not* formatted as blocks just because their parent is a block.
+
+3.  **Test `nestedFormatAsInlinePrintsAsBlock`**:
+    *   HTML: `<p style="display:inline;">A</p>` nested inside `<td>`.
+    *   Expected output shows the `<p>` tags on separate lines, implying they are formatted as blocks *despite* `display:inline;`.
+    *   For a `<p>` tag: `tag.formatAsBlock()` for `p` is `true` (because `p` is an inherently block-level HTML tag).
+    *   With the original function, `isFormatAsBlock` would return `true` for `p` because `tag.formatAsBlock()` is `true`. This would already lead to the expected block-like formatting for `p`.
+
+**Conclusion and Fix:**
+The core problem identified by issue #1926 is the `(parent() != null && parent().tag().formatAsBlock())` condition. This condition incorrectly promotes inline children of block elements to be formatted as blocks, leading to unwanted newlines.
+
+Removing this condition resolves issue #1926:
+*   For inline elements like `<span>`, `tag.formatAsBlock()` is `false`. Without the parent check, `isFormatAsBlock` will return `false` (unless `out.outline()` is true), correctly treating `<span>` as inline.
+*   For inherently block elements like `<p>`, `tag.formatAsBlock()` is `true`. So, `isFormatAsBlock` will still return `true`, causing them to be formatted as blocks, which aligns with the expectation of `nestedFormatAsInlinePrintsAsBlock` that `p` (even with inline style) still prints as a block.
+
+The `out.outline()` condition is related to a global output setting that forces all elements to be on their own line, which should be preserved.
+
+Therefore, the minimal and effective fix is to remove the parent check.
