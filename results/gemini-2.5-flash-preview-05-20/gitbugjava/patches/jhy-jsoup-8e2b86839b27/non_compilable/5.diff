diff --git a/tmp/7faec9d1-e791-43f6-85e8-6ad8c26ece69_buggy.java b/tmp/ca202c69-a7a5-4b9d-b168-3e1d937cd91a_fixed.java
index ae12a4d..1373bc9 100644
--- a/tmp/7faec9d1-e791-43f6-85e8-6ad8c26ece69_buggy.java
+++ b/tmp/ca202c69-a7a5-4b9d-b168-3e1d937cd91a_fixed.java
@@ -1,3 +1,51 @@
     private boolean isFormatAsBlock(Document.OutputSettings out) {
-        return tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline();
+        // If in outline mode, everything is formatted as a block.
+        if (out.outline()) {
+            return true;
+        }
+
+        // Special handling for TD and TH tags:
+        // They should not force block formatting if their content is effectively inline.
+        // This addresses issues like #1926 where a TD/TH containing elements styled as inline
+        // should not cause newlines around the TD/TH itself.
+        if (tag.isTd() || tag.isTh()) {
+            boolean allChildrenEffectivelyInline = true;
+            // An empty TD/TH should generally not force a block format.
+            if (childNodes.isEmpty()) {
+                return false;
+            }
+
+            for (Node child : childNodes) {
+                if (child instanceof TextNode) {
+                    // Text nodes are inline content.
+                    continue;
+                } else if (child instanceof Element) {
+                    Element childEl = (Element) child;
+                    // If a child element is inherently a block tag (e.g., <p>, <div>)
+                    if (childEl.tag().isBlock()) {
+                        // Check if it's explicitly styled as inline via a 'style' attribute.
+                        // This is a heuristic as Jsoup does not perform full CSS parsing.
+                        String style = childEl.attributes().getIgnoreCase("style");
+                        if (style != null && style.contains("display:inline")) {
+                            continue; // Treat this block tag as effectively inline for its parent TD/TH.
+                        }
+                        // If it's a block tag and not styled as inline, then the parent TD/TH contains block content.
+                        allChildrenEffectivelyInline = false;
+                        break;
+                    }
+                    // If not a block tag, it's an inline tag, so continue.
+                } else {
+                    // Other node types (e.g., comments, CDATA sections) are treated as non-inline content for simplicity.
+                    allChildrenEffectivelyInline = false;
+                    break;
+                }
+            }
+            if (allChildrenEffectivelyInline) {
+                return false; // TD/TH with only effectively inline content should not format as a block.
+            }
+        }
+
+        // Default behavior: determine block formatting based on the tag's inherent nature.
+        // The problematic `parent().tag().formatAsBlock()` condition has been removed.
+        return tag.formatAsBlock();
     }
\ No newline at end of file
