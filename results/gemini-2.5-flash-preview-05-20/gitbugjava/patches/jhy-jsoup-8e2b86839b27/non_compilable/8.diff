diff --git a/tmp/96d56778-1f2d-43e1-8891-416a681af5ac_buggy.java b/tmp/9afc8c1e-e526-4746-b484-00834d151966_fixed.java
index ae12a4d..b5fd84c 100644
--- a/tmp/96d56778-1f2d-43e1-8891-416a681af5ac_buggy.java
+++ b/tmp/9afc8c1e-e526-4746-b484-00834d151966_fixed.java
@@ -1,3 +1,29 @@
     private boolean isFormatAsBlock(Document.OutputSettings out) {
-        return tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline();
+        // If the tag itself is a block-level element, it should be formatted as a block.
+        if (tag.formatAsBlock()) {
+            return true;
+        }
+
+        // If the element's parent is a block-level element, its children often inherit block-like formatting
+        // for pretty printing, ensuring proper indentation and line breaks within block containers.
+        if (parent() != null && parent().tag().formatAsBlock()) {
+            return true;
+        }
+
+        // If output outlining is enabled, all elements are formatted as blocks for consistent readability.
+        if (out.outline()) {
+            return true;
+        }
+
+        // Additional heuristic: If this element contains any direct child that is a block-level element,
+        // then this element should also be formatted as a block, as it effectively encloses block content.
+        // This helps in cases where a container element (like a table cell) might not be explicitly
+        // identified as a block in all contexts but contains block-level children (e.g., <p> inside <td>).
+        for (Node child : childNodes()) {
+            if (child instanceof Element childEl && childEl.tag().formatAsBlock()) {
+                return true;
+            }
+        }
+
+        return false;
     }
\ No newline at end of file
