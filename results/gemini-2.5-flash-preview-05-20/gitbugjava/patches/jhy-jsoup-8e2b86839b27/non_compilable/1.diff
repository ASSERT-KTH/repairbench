diff --git a/tmp/f9ff0d33-a015-4cd8-a3b3-8e25b214cb18_buggy.java b/tmp/ae5a5071-c407-4582-a840-40f1795b30c0_fixed.java
index ae12a4d..f4d3902 100644
--- a/tmp/f9ff0d33-a015-4cd8-a3b3-8e25b214cb18_buggy.java
+++ b/tmp/ae5a5071-c407-4582-a840-40f1795b30c0_fixed.java
@@ -1,3 +1,20 @@
     private boolean isFormatAsBlock(Document.OutputSettings out) {
-        return tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline();
+        // Check for explicit 'display:inline' style. If present, this element should be
+        // formatted as inline, overriding its default tag type or parent's influence.
+        String style = attributes().get("style"); // 'this' refers to the Element for which this method is called.
+        if (style != null && style.contains("display:inline")) {
+            return false;
+        }
+
+        // If the 'outline' setting is enabled, all elements are forced to be formatted as blocks.
+        if (out.outline()) {
+            return true;
+        }
+
+        // Otherwise, an element is formatted as a block if its tag is inherently a block-level tag.
+        // The previous logic included `parent().tag().formatAsBlock()`, which could force
+        // otherwise inline elements within block parents (e.g., <span> inside <div>) to be
+        // formatted as blocks. Removing this makes the pretty printer respect the element's
+        // own fundamental block/inline nature more closely, unless explicitly overridden by style.
+        return tag.formatAsBlock();
     }
\ No newline at end of file
