diff --git a/tmp/c928fdc2-1129-4122-8f20-713d4e8d11ed_buggy.java b/tmp/53ee7e48-1cb5-42e6-bd97-411c136ec94c_fixed.java
index 6d50be3..743be75 100644
--- a/tmp/c928fdc2-1129-4122-8f20-713d4e8d11ed_buggy.java
+++ b/tmp/53ee7e48-1cb5-42e6-bd97-411c136ec94c_fixed.java
@@ -1,194 +1,213 @@
     private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
         List<Position> positions = new LinkedList<>();
 
+        // Advance reader index past the initial "$$" and protocol type, up to the first comma
         buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
+        
         String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
-        buf.skipBytes(1 + 3 + 1);
+        buf.skipBytes(1 + 3 + 1); // Skip ',' + 'CCE' + ','
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         buf.readUnsignedIntLE(); // remaining cache
         int count = buf.readUnsignedShortLE();
 
         for (int i = 0; i < count; i++) {
+            // Ensure enough bytes for the position's length and index fields
+            if (buf.readableBytes() < 4) { 
+                break; // Not enough bytes for the next position header, stop processing
+            }
+
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
-            buf.readUnsignedShortLE(); // length
-            buf.readUnsignedShortLE(); // index
+            int positionStartReaderIndex = buf.readerIndex();
+            int positionLength = buf.readUnsignedShortLE(); // Length of the data part of this position block
+            buf.readUnsignedShortLE(); // Index (2 bytes)
 
+            // Calculate the expected end index for this position's data
+            int positionDataEndIndex = positionStartReaderIndex + 4 + positionLength;
+
+            // If the declared positionLength would go beyond the buffer's actual end
+            if (positionDataEndIndex > buf.writerIndex()) {
+                // This position is malformed. Consume the remaining buffer and stop.
+                buf.readerIndex(buf.writerIndex());
+                break; 
+            }
+
+            // Block 1: 1-byte parameters
             int paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                // Check if we are past the declared end of this position's data or no more readable bytes
+                if (buf.readerIndex() >= positionDataEndIndex || buf.readableBytes() < 1) break; 
+                
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                int id;
+                if (extension) {
+                    if (buf.readableBytes() < 2) break; // Not enough for 2-byte ID
+                    id = buf.readUnsignedShort();
+                } else {
+                    id = buf.readUnsignedByte();
+                }
+                
+                if (buf.readableBytes() < 1) break; // Not enough for 1-byte value
                 switch (id) {
-                    case 0x01:
-                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());
-                        break;
-                    case 0x05:
-                        position.setValid(buf.readUnsignedByte() > 0);
-                        break;
-                    case 0x06:
-                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
-                        break;
-                    case 0x07:
-                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());
-                        break;
-                    case 0x14:
-                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
-                        break;
-                    case 0x15:
-                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());
-                        break;
+                    case 0x01: position.set(Position.KEY_EVENT, buf.readUnsignedByte()); break;
+                    case 0x05: position.setValid(buf.readUnsignedByte() > 0); break;
+                    case 0x06: position.set(Position.KEY_SATELLITES, buf.readUnsignedByte()); break;
+                    case 0x07: position.set(Position.KEY_RSSI, buf.readUnsignedByte()); break;
+                    case 0x14: position.set(Position.KEY_OUTPUT, buf.readUnsignedByte()); break;
+                    case 0x15: position.set(Position.KEY_INPUT, buf.readUnsignedByte()); break;
                     case 0x47:
                         int lockState = buf.readUnsignedByte();
                         if (lockState > 0) {
                             position.set(Position.KEY_LOCK, lockState == 2);
                         }
                         break;
-                    case 0x97:
-                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
-                        break;
-                    case 0x9D:
-                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
-                        break;
-                    case 0xFE69:
-                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                        break;
-                    default:
-                        buf.readUnsignedByte();
-                        break;
+                    case 0x97: position.set(Position.KEY_THROTTLE, buf.readUnsignedByte()); break;
+                    case 0x9D: position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte()); break;
+                    case 0xFE69: position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); break;
+                    default: buf.readUnsignedByte(); break; // Consume unknown 1-byte parameter
                 }
             }
 
+            // Block 2: 2-byte parameters
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                if (buf.readerIndex() >= positionDataEndIndex || buf.readableBytes() < 1) break; 
+
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                int id;
+                if (extension) {
+                    if (buf.readableBytes() < 2) break; // Not enough for 2-byte ID
+                    id = buf.readUnsignedShort();
+                } else {
+                    id = buf.readUnsignedByte();
+                }
+
+                if (buf.readableBytes() < 2) break; // Not enough for 2-byte value
                 switch (id) {
-                    case 0x08:
-                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
-                        break;
-                    case 0x09:
-                        position.setCourse(buf.readUnsignedShortLE());
-                        break;
-                    case 0x0A:
-                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
-                        break;
-                    case 0x0B:
-                        position.setAltitude(buf.readShortLE());
-                        break;
-                    case 0x16:
-                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
-                        break;
-                    case 0x19:
-                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
-                        break;
-                    case 0x1A:
-                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
-                        break;
-                    case 0x40:
-                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
-                        break;
-                    case 0x91:
-                    case 0x92:
-                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
-                        break;
-                    case 0x98:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
-                        break;
-                    case 0x99:
-                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
-                        break;
-                    case 0x9C:
-                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
-                        break;
-                    case 0x9F:
-                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
-                        break;
-                    case 0xC9:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
-                        break;
-                    default:
-                        buf.readUnsignedShortLE();
-                        break;
+                    case 0x08: position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE())); break;
+                    case 0x09: position.setCourse(buf.readUnsignedShortLE()); break;
+                    case 0x0A: position.set(Position.KEY_HDOP, buf.readUnsignedShortLE()); break;
+                    case 0x0B: position.setAltitude(buf.readShortLE()); break;
+                    case 0x16: position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01); break;
+                    case 0x19: position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01); break;
+                    case 0x1A: position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01); break;
+                    case 0x40: position.set(Position.KEY_EVENT, buf.readUnsignedShortLE()); break;
+                    case 0x91: case 0x92: position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE()); break;
+                    case 0x98: position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE()); break;
+                    case 0x99: position.set(Position.KEY_RPM, buf.readUnsignedShortLE()); break;
+                    case 0x9C: position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE()); break;
+                    case 0x9F: position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE()); break;
+                    case 0xC9: position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE()); break;
+                    default: buf.readUnsignedShortLE(); break; // Consume unknown 2-byte parameter
                 }
             }
 
+            // Block 3: 4-byte parameters
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                if (buf.readerIndex() >= positionDataEndIndex || buf.readableBytes() < 1) break; 
+
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                int id;
+                if (extension) {
+                    if (buf.readableBytes() < 2) break; // Not enough for 2-byte ID
+                    id = buf.readUnsignedShort();
+                } else {
+                    id = buf.readUnsignedByte();
+                }
+
+                if (buf.readableBytes() < 4) break; // Not enough for 4-byte value
                 switch (id) {
-                    case 0x02:
-                        position.setLatitude(buf.readIntLE() * 0.000001);
-                        break;
-                    case 0x03:
-                        position.setLongitude(buf.readIntLE() * 0.000001);
-                        break;
-                    case 0x04:
-                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
-                        break;
-                    case 0x0C:
-                    case 0x9B:
-                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
-                        break;
-                    case 0x0D:
-                        position.set("runtime", buf.readUnsignedIntLE());
-                        break;
-                    case 0x25:
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
-                        break;
-                    case 0xA0:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
-                        break;
-                    case 0xA2:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
-                        break;
-                    default:
-                        buf.readUnsignedIntLE();
-                        break;
+                    case 0x02: position.setLatitude(buf.readIntLE() * 0.000001); break;
+                    case 0x03: position.setLongitude(buf.readIntLE() * 0.000001); break;
+                    case 0x04: position.setTime(new Date((946684800L + buf.readUnsignedIntLE()) * 1000)); break; // 2000-01-01
+                    case 0x0C: case 0x9B: position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE()); break;
+                    case 0x0D: position.set("runtime", buf.readUnsignedIntLE()); break;
+                    case 0x25: position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE())); break;
+                    case 0xA0: position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001); break;
+                    case 0xA2: position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01); break;
+                    default: buf.readUnsignedIntLE(); break; // Consume unknown 4-byte parameter
                 }
             }
 
+            // Block 4: variable-length parameters
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                if (buf.readerIndex() >= positionDataEndIndex || buf.readableBytes() < 1) break; // Not even enough for ID
+
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
-                int length = buf.readUnsignedByte();
+                int id;
+                if (extension) {
+                    if (buf.readableBytes() < 2) break; // Not enough for 2-byte ID
+                    id = buf.readUnsignedShort();
+                } else {
+                    id = buf.readUnsignedByte();
+                }
+                
+                if (buf.readableBytes() < 1) { // Need at least one byte for length field
+                    break;
+                }
+                int length = buf.readUnsignedByte(); // Length of the *data* part of the parameter
+
+                // If the declared length of the data part would go beyond buffer's actual end
+                if (buf.readerIndex() + length > buf.writerIndex()) {
+                    buf.readerIndex(buf.writerIndex()); // Consume remaining buffer and stop
+                    break; // Break the inner loop for parameters
+                }
+
+                // Store current reader index as the start of the data block for this parameter
+                int dataStartIndex = buf.readerIndex();
+
                 switch (id) {
-                    case 0x2A:
-                    case 0x2B:
-                    case 0x2C:
-                    case 0x2D:
-                    case 0x2E:
-                    case 0x2F:
-                    case 0x30:
-                    case 0x31:
+                    case 0x2A: case 0x2B: case 0x2C: case 0x2D:
+                    case 0x2E: case 0x2F: case 0x30: case 0x31:
+                        if (length >= 3) { // Ensure enough bytes for label (1) + short (2)
                             buf.readUnsignedByte(); // label
                             position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                        }
                         break;
-                    case 0xFE31:
+                    case 0xFE31: // Alarm data
+                        if (length >= 2) { // Ensure enough bytes for protocol (1) + type (1)
                             buf.readUnsignedByte(); // alarm protocol
                             buf.readUnsignedByte(); // alarm type
-                        buf.skipBytes(length - 2);
+                        }
                         break;
-                    case 0xFEA8:
+                    case 0xFEA8: // Battery info
+                        if (length >= 3) { // Ensure enough bytes for status (1) + level (1) + alert (1)
                             buf.readUnsignedByte(); // battery status
                             position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                             buf.readUnsignedByte(); // battery alert
+                        }
                         break;
                     default:
-                        buf.skipBytes(length);
+                        // For unknown or unparsed IDs, the data is simply skipped by the final readerIndex set.
                         break;
                 }
+                // Always ensure the readerIndex advances exactly by the declared 'length' for the current parameter's data
+                buf.readerIndex(dataStartIndex + length);
+            }
+
+            // After parsing all parameters for this position, ensure readerIndex is at the expected end of this position's data
+            // This is crucial to correctly skip any unparsed bytes within the position block
+            // and to start reading the next position from the correct point.
+            if (buf.readerIndex() < positionDataEndIndex) {
+                 buf.readerIndex(positionDataEndIndex);
+            } else if (buf.readerIndex() > positionDataEndIndex) {
+                // This scenario means we've read more than declared by positionLength.
+                // This shouldn't happen with the current robust parameter parsing.
+                // If it does, it indicates a protocol misunderstanding or corrupt data.
+                // We'll set it to the expected end anyway, but it means data was over-read.
+                buf.readerIndex(positionDataEndIndex); // Re-align, potentially discarding data read in excess
             }
 
             positions.add(position);
         }
 
         return positions;
     }
\ No newline at end of file
