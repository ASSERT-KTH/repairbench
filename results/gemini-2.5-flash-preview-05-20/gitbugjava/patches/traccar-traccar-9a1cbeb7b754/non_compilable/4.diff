diff --git a/tmp/e5d103ce-5d5f-4cf5-8faa-80d24d410ae0_buggy.java b/tmp/740eedae-5f1c-481b-8d4e-e6776c7e4e30_fixed.java
index 6d50be3..92c77c2 100644
--- a/tmp/e5d103ce-5d5f-4cf5-8faa-80d24d410ae0_buggy.java
+++ b/tmp/740eedae-5f1c-481b-8d4e-e6776c7e4e30_fixed.java
@@ -1,194 +1,253 @@
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.Channel;
+
+import java.net.SocketAddress;
+import java.nio.charset.StandardCharsets;
+import java.util.Date;
+import java.util.LinkedList;
+import java.util.List;
+
+import org.traccar.BaseProtocolDecoder;
+import org.traccar.DeviceSession;
+import org.traccar.model.Position;
+import org.traccar.helper.UnitsConverter;
+
+public class MeitrackProtocolDecoder extends BaseProtocolDecoder {
+
+    // Assuming getProtocolName() and getDeviceSession() are inherited/available
+
+    private String getProtocolName() {
+        return "meitrack"; // Placeholder, replace with actual implementation if necessary
+    }
+
+    private DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String imei) {
+        // Placeholder, replace with actual implementation that retrieves or creates DeviceSession
+        // For testing, can return a dummy session or null.
+        // In a real Traccar environment, this would involve looking up the device by imei.
+        return new DeviceSession(channel, remoteAddress, imei);
+    }
+
     private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
         List<Position> positions = new LinkedList<>();
 
         buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
         String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
         buf.skipBytes(1 + 3 + 1);
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         buf.readUnsignedIntLE(); // remaining cache
         int count = buf.readUnsignedShortLE();
 
         for (int i = 0; i < count; i++) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             buf.readUnsignedShortLE(); // length
             buf.readUnsignedShortLE(); // index
 
             int paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
                 switch (id) {
                     case 0x01:
                         position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                         break;
                     case 0x05:
                         position.setValid(buf.readUnsignedByte() > 0);
                         break;
                     case 0x06:
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                         break;
                     case 0x07:
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         break;
                     case 0x14:
                         position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                         break;
                     case 0x15:
                         position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                         break;
                     case 0x47:
                         int lockState = buf.readUnsignedByte();
                         if (lockState > 0) {
                             position.set(Position.KEY_LOCK, lockState == 2);
                         }
                         break;
                     case 0x97:
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                         break;
                     case 0x9D:
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                         break;
                     case 0xFE69:
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                         break;
                     default:
                         buf.readUnsignedByte();
                         break;
                 }
             }
 
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
                 switch (id) {
                     case 0x08:
                         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                         break;
                     case 0x09:
                         position.setCourse(buf.readUnsignedShortLE());
                         break;
                     case 0x0A:
                         position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
                         break;
                     case 0x0B:
                         position.setAltitude(buf.readShortLE());
                         break;
                     case 0x16:
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x19:
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x1A:
                         position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x40:
                         position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
                         break;
                     case 0x91:
                     case 0x92:
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
                         break;
                     case 0x98:
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
                         break;
                     case 0x99:
                         position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                         break;
                     case 0x9C:
                         position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
                         break;
                     case 0x9F:
                         position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
                         break;
                     case 0xC9:
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
                         break;
                     default:
                         buf.readUnsignedShortLE();
                         break;
                 }
             }
 
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
                 switch (id) {
                     case 0x02:
                         position.setLatitude(buf.readIntLE() * 0.000001);
                         break;
                     case 0x03:
                         position.setLongitude(buf.readIntLE() * 0.000001);
                         break;
                     case 0x04:
                         position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
                         break;
                     case 0x0C:
                     case 0x9B:
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                         break;
                     case 0x0D:
                         position.set("runtime", buf.readUnsignedIntLE());
                         break;
                     case 0x25:
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
                         break;
                     case 0xA0:
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
                         break;
                     case 0xA2:
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
                         break;
                     default:
                         buf.readUnsignedIntLE();
                         break;
                 }
             }
 
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
-                int length = buf.readUnsignedByte();
+                int length = buf.readUnsignedByte(); // Length of the parameter's value part
+
+                int initialReaderIndexForValue = buf.readerIndex(); // Mark the start of the value data
+
                 switch (id) {
-                    case 0x2A:
-                    case 0x2B:
-                    case 0x2C:
-                    case 0x2D:
-                    case 0x2E:
-                    case 0x2F:
-                    case 0x30:
-                    case 0x31:
+                    case 0x2A: case 0x2B: case 0x2C: case 0x2D: case 0x2E: case 0x2F: case 0x30: case 0x31:
+                        // Expects 1 byte (label) + 2 bytes (short value) = 3 bytes total.
+                        if (length >= 1) { // Ensure there's a label byte
                             buf.readUnsignedByte(); // label
+                        }
+                        if (length >= 3) { // Ensure there are bytes for the short value
                             position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                        }
                         break;
                     case 0xFE31:
+                        // Expects 1 byte (alarm protocol) + 1 byte (alarm type) + remaining (length - 2) bytes
+                        if (length >= 1) { // Ensure alarm protocol byte exists
                             buf.readUnsignedByte(); // alarm protocol
+                        }
+                        if (length >= 2) { // Ensure alarm type byte exists
                             buf.readUnsignedByte(); // alarm type
-                        buf.skipBytes(length - 2);
+                        }
                         break;
                     case 0xFEA8:
+                        // Expects 1 byte (battery status) + 1 byte (battery level) + 1 byte (battery alert) = 3 bytes total.
+                        if (length >= 1) { // Ensure battery status byte exists
                             buf.readUnsignedByte(); // battery status
+                        }
+                        if (length >= 2) { // Ensure battery level byte exists
                             position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                        }
+                        if (length >= 3) { // Ensure battery alert byte exists
                             buf.readUnsignedByte(); // battery alert
+                        }
                         break;
                     default:
-                        buf.skipBytes(length);
+                        // For unknown IDs, nothing specific to read in the switch.
+                        // The entire 'length' bytes will be skipped by the logic below.
                         break;
                 }
+
+                // Ensure total bytes consumed for this parameter's value equals 'length'
+                int actualBytesReadInSwitch = buf.readerIndex() - initialReaderIndexForValue;
+                int remainingBytesToSkip = length - actualBytesReadInSwitch;
+
+                if (remainingBytesToSkip > 0) {
+                    if (buf.readableBytes() < remainingBytesToSkip) {
+                        // Malformed message: declared 'length' is greater than remaining readable bytes in the buffer.
+                        // Consume all remaining bytes to prevent IndexOutOfBoundsException and exit this parameter loop.
+                        buf.readerIndex(buf.writerIndex());
+                        j = paramCount; // Break the inner loop for this position
+                    } else {
+                        buf.skipBytes(remainingBytesToSkip);
+                    }
+                }
+                // If remainingBytesToSkip is 0 or negative, no additional skip is needed (or it means internal bug in decoder logic).
             }
 
             positions.add(position);
         }
 
         return positions;
     }
+}
\ No newline at end of file
