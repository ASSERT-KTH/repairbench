diff --git a/tmp/2077f0a8-88cd-4be9-b656-196c5ed15a1d_buggy.java b/tmp/576db1c2-94f0-4dd0-a312-13e56be3d8c8_fixed.java
index 6d50be3..65fff3b 100644
--- a/tmp/2077f0a8-88cd-4be9-b656-196c5ed15a1d_buggy.java
+++ b/tmp/576db1c2-94f0-4dd0-a312-13e56be3d8c8_fixed.java
@@ -1,194 +1,245 @@
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.Channel;
+import org.traccar.BaseProtocolDecoder;
+import org.traccar.Context; // Assuming Context is available for getDeviceSession
+import org.traccar.helper.UnitsConverter;
+import org.traccar.model.DeviceSession;
+import org.traccar.model.Position;
+
+import java.net.SocketAddress;
+import java.nio.charset.StandardCharsets;
+import java.util.Date;
+import java.util.LinkedList;
+import java.util.List;
+
+public class MeitrackProtocolDecoder extends BaseProtocolDecoder {
+
+    // Assuming constructor and other necessary methods are handled by the framework
+    // or parent class, as only the decodeBinaryE method is provided for fixing.
+    public MeitrackProtocolDecoder(org.traccar.protocol.MeitrackProtocol meitrackProtocol) {
+        super(meitrackProtocol);
+    }
+
     private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
         List<Position> positions = new LinkedList<>();
 
+        // Initial sanity check for minimum header length
+        if (buf.readableBytes() < 15 + 1 + 3 + 1) { // IMEI (15) + comma (1) + skipBytes (3+1)
+            return null; // Not enough data for basic header parsing
+        }
+
         buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
         String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
         buf.skipBytes(1 + 3 + 1);
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
+        // Check for remaining cache (4 bytes)
+        if (!buf.isReadable(4)) {
+            return null;
+        }
         buf.readUnsignedIntLE(); // remaining cache
+
+        // Check for count (2 bytes)
+        if (!buf.isReadable(2)) {
+            return null;
+        }
         int count = buf.readUnsignedShortLE();
 
         for (int i = 0; i < count; i++) {
+            // Check for position header (length 2 bytes, index 2 bytes)
+            if (!buf.isReadable(2 + 2)) {
+                break; // Not enough data for position header, stop processing further positions
+            }
+
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             buf.readUnsignedShortLE(); // length
             buf.readUnsignedShortLE(); // index
 
+            // Param loop 1: Byte parameters
+            if (!buf.isReadable(1)) { break; } // Check for paramCount byte
             int paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                if (!buf.isReadable(1)) { break; } // Check for minimum ID byte
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                int id;
+                if (extension) {
+                    if (!buf.isReadable(2)) { break; } // Check for 0xFE (1 byte) + extended ID (1 byte)
+                    id = buf.readUnsignedShort();
+                } else {
+                    id = buf.readUnsignedByte();
+                }
+
+                // Ensure enough bytes for the value based on known ID type
+                boolean dataRead = true; // Flag to indicate if data for current 'id' was successfully read
                 switch (id) {
-                    case 0x01:
-                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());
-                        break;
-                    case 0x05:
-                        position.setValid(buf.readUnsignedByte() > 0);
-                        break;
-                    case 0x06:
-                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
-                        break;
-                    case 0x07:
-                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());
-                        break;
-                    case 0x14:
-                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
-                        break;
-                    case 0x15:
-                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());
-                        break;
+                    case 0x01: if (buf.isReadable(1)) { position.set(Position.KEY_EVENT, buf.readUnsignedByte()); } else { dataRead = false; } break;
+                    case 0x05: if (buf.isReadable(1)) { position.setValid(buf.readUnsignedByte() > 0); } else { dataRead = false; } break;
+                    case 0x06: if (buf.isReadable(1)) { position.set(Position.KEY_SATELLITES, buf.readUnsignedByte()); } else { dataRead = false; } break;
+                    case 0x07: if (buf.isReadable(1)) { position.set(Position.KEY_RSSI, buf.readUnsignedByte()); } else { dataRead = false; } break;
+                    case 0x14: if (buf.isReadable(1)) { position.set(Position.KEY_OUTPUT, buf.readUnsignedByte()); } else { dataRead = false; } break;
+                    case 0x15: if (buf.isReadable(1)) { position.set(Position.KEY_INPUT, buf.readUnsignedByte()); } else { dataRead = false; } break;
                     case 0x47:
+                        if (buf.isReadable(1)) {
                             int lockState = buf.readUnsignedByte();
                             if (lockState > 0) {
                                 position.set(Position.KEY_LOCK, lockState == 2);
                             }
+                        } else { dataRead = false; }
                         break;
-                    case 0x97:
-                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
-                        break;
-                    case 0x9D:
-                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
-                        break;
-                    case 0xFE69:
-                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                        break;
-                    default:
-                        buf.readUnsignedByte();
-                        break;
+                    case 0x97: if (buf.isReadable(1)) { position.set(Position.KEY_THROTTLE, buf.readUnsignedByte()); } else { dataRead = false; } break;
+                    case 0x9D: if (buf.isReadable(1)) { position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte()); } else { dataRead = false; } break;
+                    case 0xFE69: if (buf.isReadable(1)) { position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); } else { dataRead = false; } break;
+                    default: if (buf.isReadable(1)) { buf.readUnsignedByte(); } else { dataRead = false; } break; // Unknown ID, skip 1 byte
                 }
+                if (!dataRead) { break; } // If data was not read for current param, break this inner loop
             }
 
+            // Param loop 2: Short parameters
+            if (!buf.isReadable(1)) { break; } // Check for paramCount byte
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                if (!buf.isReadable(1)) { break; } // Check for minimum ID byte
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                int id;
+                if (extension) {
+                    if (!buf.isReadable(2)) { break; }
+                    id = buf.readUnsignedShort();
+                } else {
+                    id = buf.readUnsignedByte();
+                }
+
+                boolean dataRead = true;
                 switch (id) {
-                    case 0x08:
-                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
-                        break;
-                    case 0x09:
-                        position.setCourse(buf.readUnsignedShortLE());
-                        break;
-                    case 0x0A:
-                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
-                        break;
-                    case 0x0B:
-                        position.setAltitude(buf.readShortLE());
-                        break;
-                    case 0x16:
-                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
-                        break;
-                    case 0x19:
-                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
-                        break;
-                    case 0x1A:
-                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
-                        break;
-                    case 0x40:
-                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
-                        break;
-                    case 0x91:
-                    case 0x92:
-                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
-                        break;
-                    case 0x98:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
-                        break;
-                    case 0x99:
-                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
-                        break;
-                    case 0x9C:
-                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
-                        break;
-                    case 0x9F:
-                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
-                        break;
-                    case 0xC9:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
-                        break;
-                    default:
-                        buf.readUnsignedShortLE();
-                        break;
+                    case 0x08: if (buf.isReadable(2)) { position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE())); } else { dataRead = false; } break;
+                    case 0x09: if (buf.isReadable(2)) { position.setCourse(buf.readUnsignedShortLE()); } else { dataRead = false; } break;
+                    case 0x0A: if (buf.isReadable(2)) { position.set(Position.KEY_HDOP, buf.readUnsignedShortLE()); } else { dataRead = false; } break;
+                    case 0x0B: if (buf.isReadable(2)) { position.setAltitude(buf.readShortLE()); } else { dataRead = false; } break;
+                    case 0x16: if (buf.isReadable(2)) { position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01); } else { dataRead = false; } break;
+                    case 0x19: if (buf.isReadable(2)) { position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01); } else { dataRead = false; } break;
+                    case 0x1A: if (buf.isReadable(2)) { position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01); } else { dataRead = false; } break;
+                    case 0x40: if (buf.isReadable(2)) { position.set(Position.KEY_EVENT, buf.readUnsignedShortLE()); } else { dataRead = false; } break;
+                    case 0x91: case 0x92: if (buf.isReadable(2)) { position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE()); } else { dataRead = false; } break;
+                    case 0x98: if (buf.isReadable(2)) { position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE()); } else { dataRead = false; } break;
+                    case 0x99: if (buf.isReadable(2)) { position.set(Position.KEY_RPM, buf.readUnsignedShortLE()); } else { dataRead = false; } break;
+                    case 0x9C: if (buf.isReadable(2)) { position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE()); } else { dataRead = false; } break;
+                    case 0x9F: if (buf.isReadable(2)) { position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE()); } else { dataRead = false; } break;
+                    case 0xC9: if (buf.isReadable(2)) { position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE()); } else { dataRead = false; } break;
+                    default: if (buf.isReadable(2)) { buf.readUnsignedShortLE(); } else { dataRead = false; } break; // Unknown ID, skip 2 bytes
                 }
+                if (!dataRead) { break; }
             }
 
+            // Param loop 3: Int parameters
+            if (!buf.isReadable(1)) { break; } // Check for paramCount byte
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                if (!buf.isReadable(1)) { break; } // Check for minimum ID byte
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                int id;
+                if (extension) {
+                    if (!buf.isReadable(2)) { break; }
+                    id = buf.readUnsignedShort();
+                } else {
+                    id = buf.readUnsignedByte();
+                }
+
+                boolean dataRead = true;
                 switch (id) {
-                    case 0x02:
-                        position.setLatitude(buf.readIntLE() * 0.000001);
-                        break;
-                    case 0x03:
-                        position.setLongitude(buf.readIntLE() * 0.000001);
-                        break;
-                    case 0x04:
-                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
-                        break;
-                    case 0x0C:
-                    case 0x9B:
-                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
-                        break;
-                    case 0x0D:
-                        position.set("runtime", buf.readUnsignedIntLE());
-                        break;
-                    case 0x25:
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
-                        break;
-                    case 0xA0:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
-                        break;
-                    case 0xA2:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
-                        break;
-                    default:
-                        buf.readUnsignedIntLE();
-                        break;
+                    case 0x02: if (buf.isReadable(4)) { position.setLatitude(buf.readIntLE() * 0.000001); } else { dataRead = false; } break;
+                    case 0x03: if (buf.isReadable(4)) { position.setLongitude(buf.readIntLE() * 0.000001); } else { dataRead = false; } break;
+                    case 0x04: if (buf.isReadable(4)) { position.setTime(new Date((946684800L + buf.readUnsignedIntLE()) * 1000L)); } else { dataRead = false; } break; // Use L for long literals
+                    case 0x0C: case 0x9B: if (buf.isReadable(4)) { position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE()); } else { dataRead = false; } break;
+                    case 0x0D: if (buf.isReadable(4)) { position.set("runtime", buf.readUnsignedIntLE()); } else { dataRead = false; } break;
+                    case 0x25: if (buf.isReadable(4)) { position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE())); } else { dataRead = false; } break;
+                    case 0xA0: if (buf.isReadable(4)) { position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001); } else { dataRead = false; } break;
+                    case 0xA2: if (buf.isReadable(4)) { position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01); } else { dataRead = false; } break;
+                    default: if (buf.isReadable(4)) { buf.readUnsignedIntLE(); } else { dataRead = false; } break; // Unknown ID, skip 4 bytes
                 }
+                if (!dataRead) { break; }
             }
 
+            // Param loop 4: Variable length parameters (addressed for IndexOutOfBoundsException)
+            if (!buf.isReadable(1)) { break; } // Check for paramCount byte
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                if (!buf.isReadable(1)) { break; } // Check for minimum ID byte
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                int id;
+                if (extension) {
+                    if (!buf.isReadable(2)) { break; }
+                    id = buf.readUnsignedShort();
+                } else {
+                    id = buf.readUnsignedByte();
+                }
+
+                if (!buf.isReadable(1)) { // Check for Length byte
+                    break;
+                }
                 int length = buf.readUnsignedByte();
+
+                // Calculate the actual number of bytes that can be read for the value
+                // This prevents IndexOutOfBoundsException if 'length' is greater than remaining readable bytes
+                int bytesToReadForValue = Math.min(length, buf.readableBytes());
+
+                // Create a slice for the value data. This advances the main buffer's reader index
+                // by 'bytesToReadForValue', safely. All operations below are on 'valueBuf'.
+                ByteBuf valueBuf = buf.readSlice(bytesToReadForValue);
+
+                // Process the value based on ID
                 switch (id) {
                     case 0x2A:
                     case 0x2B:
                     case 0x2C:
                     case 0x2D:
                     case 0x2E:
                     case 0x2F:
                     case 0x30:
                     case 0x31:
-                        buf.readUnsignedByte(); // label
-                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                        // Expected format: 1 byte label + 2 bytes short (total 3 bytes)
+                        if (valueBuf.isReadable(1)) { // Check if label byte is readable within slice
+                            valueBuf.readUnsignedByte(); // label
+                            if (valueBuf.isReadable(2)) { // Check if short value is readable within slice
+                                position.set(Position.PREFIX_TEMP + (id - 0x2A), valueBuf.readShortLE() * 0.01);
+                            }
+                        }
+                        // Any remaining bytes in valueBuf are implicitly skipped as the slice is discarded
                         break;
                     case 0xFE31:
-                        buf.readUnsignedByte(); // alarm protocol
-                        buf.readUnsignedByte(); // alarm type
-                        buf.skipBytes(length - 2);
+                        // Expected format: 1 byte alarm protocol + 1 byte alarm type (total 2 bytes)
+                        if (valueBuf.isReadable(1)) { // Check if alarm protocol byte is readable
+                            valueBuf.readUnsignedByte(); // alarm protocol
+                            if (valueBuf.isReadable(1)) { // Check if alarm type byte is readable
+                                valueBuf.readUnsignedByte(); // alarm type
+                            }
+                        }
                         break;
                     case 0xFEA8:
-                        buf.readUnsignedByte(); // battery status
-                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                        buf.readUnsignedByte(); // battery alert
+                        // Expected format: 1 byte battery status + 1 byte battery level + 1 byte battery alert (total 3 bytes)
+                        if (valueBuf.isReadable(1)) { // Check if battery status byte is readable
+                            valueBuf.readUnsignedByte(); // battery status
+                            if (valueBuf.isReadable(1)) { // Check if battery level byte is readable
+                                position.set(Position.KEY_BATTERY_LEVEL, valueBuf.readUnsignedByte());
+                                if (valueBuf.isReadable(1)) { // Check if battery alert byte is readable
+                                    valueBuf.readUnsignedByte(); // battery alert
+                                }
+                            }
+                        }
                         break;
                     default:
-                        buf.skipBytes(length);
+                        // For unknown IDs, no specific parsing. The entire 'valueBuf' slice is effectively skipped.
                         break;
                 }
             }
 
             positions.add(position);
         }
 
         return positions;
     }
+}
\ No newline at end of file
