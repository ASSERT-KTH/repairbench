diff --git a/tmp/6ee6ce33-d882-40ac-bf23-2aba95fd3392_buggy.java b/tmp/87edcffd-db7a-41e1-a626-d9e5f2e3b4c4_fixed.java
index 1098336..37973c4 100644
--- a/tmp/6ee6ce33-d882-40ac-bf23-2aba95fd3392_buggy.java
+++ b/tmp/87edcffd-db7a-41e1-a626-d9e5f2e3b4c4_fixed.java
@@ -1,16 +1,27 @@
     @Override
     protected String doFormat(final String code, final LineEnding ending) throws IOException {
 
         final var source = new InputSource(new StringReader(code));
         final var parser = new CSSOMParser(new SACParserCSS3());
         final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);
-        var formattedCode = sheet.getCssText(this.formatter);
+
+        // Clone the existing formatter settings to apply the requested line ending
+        // without modifying the shared 'this.formatter' instance permanently.
+        // CSSWriterSettings implements ICloneable, so getClone() is available.
+        final var currentFormatterSettings = this.formatter.getClone();
+        currentFormatterSettings.setNewlineString(ending.getCharacters());
+
+        var formattedCode = sheet.getCssText(currentFormatterSettings);
 
         // Patch converted 'tab' back to '\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.
         formattedCode = formattedCode.replace("\t;", "\\9;");
 
+        // The contract is to return null if no changes were made.
+        // If the formatted code (which now respects the 'ending' parameter) is
+        // identical to the original input code, then null is returned.
+        // Otherwise, the newly formatted code is returned.
         if (code.equals(formattedCode)) {
             return null;
         }
         return formattedCode;
     }
\ No newline at end of file
