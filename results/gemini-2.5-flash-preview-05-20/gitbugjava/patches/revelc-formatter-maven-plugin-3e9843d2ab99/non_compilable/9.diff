diff --git a/tmp/ef343fb3-6d56-454b-a9f6-a76c699b1e46_buggy.java b/tmp/e76fce5a-303c-4d49-a774-57351f5af070_fixed.java
index 1098336..77c4b71 100644
--- a/tmp/ef343fb3-6d56-454b-a9f6-a76c699b1e46_buggy.java
+++ b/tmp/e76fce5a-303c-4d49-a774-57351f5af070_fixed.java
@@ -1,16 +1,47 @@
     @Override
     protected String doFormat(final String code, final LineEnding ending) throws IOException {
 
         final var source = new InputSource(new StringReader(code));
         final var parser = new CSSOMParser(new SACParserCSS3());
+        // Parse the stylesheet to a CSSStyleSheetImpl object
         final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);
+        // Get the formatted CSS text using the configured formatter instance
         var formattedCode = sheet.getCssText(this.formatter);
 
         // Patch converted 'tab' back to '\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.
+        // This replacement is applied to the output of the CSS parser/formatter.
         formattedCode = formattedCode.replace("\t;", "\\9;");
 
-        if (code.equals(formattedCode)) {
+        // Normalize line endings of the formatted code to match the desired 'ending' parameter.
+        // First, standardize all existing line endings (CRLF, CR) to LF.
+        formattedCode = formattedCode.replace("\r\n", "\n").replace('\r', '\n');
+        // Then, convert to the target line ending (CRLF if specified).
+        if (ending == LineEnding.CRLF) {
+            formattedCode = formattedCode.replace("\n", "\r\n");
+        }
+
+        // To determine if the code was actually changed by formatting,
+        // we need to compare the formatted code with the original code,
+        // ensuring both use the same line ending convention for a fair comparison.
+        // First, normalize the original code's line endings to LF.
+        String normalizedOriginalCode = code.replace("\r\n", "\n").replace('\r', '\n');
+        // Then, convert to the target line ending (CRLF if specified).
+        if (ending == LineEnding.CRLF) {
+            normalizedOriginalCode = normalizedOriginalCode.replace("\n", "\r\n");
+        }
+        
+        // The patch for '\t;' to '\9;' is applied to the formatted code to correct for parser behavior.
+        // For the comparison to work correctly when the original code *also* had this hack,
+        // `normalizedOriginalCode` must reflect the original content accurately, which means
+        // if the original code contained `\9;`, it should remain `\9;` in `normalizedOriginalCode`.
+        // The formatter's output is adjusted to match the original, so `normalizedOriginalCode`
+        // should *not* have the `\t;` to `\9;` patch applied to it.
+
+        // If the formatted code (after line ending normalization and '\9' patch) is identical
+        // to the original code (after line ending normalization), it means no effective
+        // formatting changes occurred, so return null.
+        if (normalizedOriginalCode.equals(formattedCode)) {
             return null;
         }
         return formattedCode;
     }
\ No newline at end of file
