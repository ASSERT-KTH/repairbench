diff --git a/tmp/3f73a4bb-b159-4be1-870c-8d5000e5a186_buggy.java b/tmp/8b888f43-eb5b-4034-a661-cff8649f0227_fixed.java
index 1098336..dbf8d30 100644
--- a/tmp/3f73a4bb-b159-4be1-870c-8d5000e5a186_buggy.java
+++ b/tmp/8b888f43-eb5b-4034-a661-cff8649f0227_fixed.java
@@ -1,16 +1,24 @@
     @Override
     protected String doFormat(final String code, final LineEnding ending) throws IOException {
 
         final var source = new InputSource(new StringReader(code));
         final var parser = new CSSOMParser(new SACParserCSS3());
         final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);
         var formattedCode = sheet.getCssText(this.formatter);
 
         // Patch converted 'tab' back to '\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.
         formattedCode = formattedCode.replace("\t;", "\\9;");
 
-        if (code.equals(formattedCode)) {
-            return null;
-        }
+        // Normalize line endings to the desired type.
+        // Most CSSOM implementations produce LF, so we first ensure all newlines are LF,
+        // then convert them to the target line ending.
+        formattedCode = formattedCode.replace("\r\n", "\n"); // Convert CRLF to LF
+        formattedCode = formattedCode.replace("\r", "\n");   // Convert CR to LF
+        formattedCode = formattedCode.replace("\n", ending.getChars()); // Convert LF to target line ending
+
+        // Always return the formatted code. The calling logic will decide if it's different
+        // from the input and if it needs to be written. This is crucial for cases where
+        // internal processing (like the \9; patch) makes the output identical to input,
+        // but it still represents a 'formatted' state.
         return formattedCode;
     }
