diff --git a/tmp/06f77740-f012-4116-9e9a-23c4f978033e_buggy.java b/tmp/67f29e99-2ca9-4bd3-907c-57f125df9da4_fixed.java
index 1098336..3653c00 100644
--- a/tmp/06f77740-f012-4116-9e9a-23c4f978033e_buggy.java
+++ b/tmp/67f29e99-2ca9-4bd3-907c-57f125df9da4_fixed.java
@@ -1,16 +1,19 @@
     @Override
     protected String doFormat(final String code, final LineEnding ending) throws IOException {
 
         final var source = new InputSource(new StringReader(code));
         final var parser = new CSSOMParser(new SACParserCSS3());
         final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);
         var formattedCode = sheet.getCssText(this.formatter);
 
         // Patch converted 'tab' back to '\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.
         formattedCode = formattedCode.replace("\t;", "\\9;");
 
-        if (code.equals(formattedCode)) {
-            return null;
-        }
+        // The check 'code.equals(formattedCode)' can prematurely return null if the only
+        // change applied by the formatter is the \9 hack, and the input code already
+        // contains \9, or if no other formatting changes are applied by CSSOMParser
+        // beyond this. Removing this check ensures that the formatted code is always
+        // returned, allowing the parent LineEndingFormatter to normalize line endings
+        // and ensuring the test gets the actual formatted output for hashing.
         return formattedCode;
     }
