diff --git a/tmp/7b60cce4-088d-4962-b487-e6fe47f73dfa_buggy.java b/tmp/ab9325fc-e17c-4245-8b5f-be338e075546_fixed.java
index 2444d12..41eb408 100644
--- a/tmp/7b60cce4-088d-4962-b487-e6fe47f73dfa_buggy.java
+++ b/tmp/ab9325fc-e17c-4245-8b5f-be338e075546_fixed.java
@@ -1,29 +1,46 @@
     // Evaluates the given postfix expression string and returns the result.
     public static int postfixEvaluate(final String exp) {
         Stack<Integer> s = new Stack<Integer>();
         Scanner tokens = new Scanner(exp);
 
         while (tokens.hasNext()) {
             if (tokens.hasNextInt()) {
                 s.push(tokens.nextInt()); // If int then push to stack
-            } else { // else pop top two values and perform the operation
+            } else { // The next token must be an operator
+                // Read the operator first to handle unknown operations or insufficient operands correctly.
+                String op = tokens.next(); 
+
+                // Before performing an operation, ensure there are enough operands on the stack.
+                // An operator requires two operands.
+                if (s.size() < 2) {
+                    throw new IllegalArgumentException("exp is not a proper postfix expression: too few operands for operator '" + op + "'.");
+                }
+
                 int num2 = s.pop();
                 int num1 = s.pop();
-                String op = tokens.next();
+                
 
                 switch (op) {
                     case "+" -> s.push(num1 + num2);
                     case "-" -> s.push(num1 - num2);
                     case "*" -> s.push(num1 * num2);
-                    case "/" -> s.push(num1 / num2);
-                    default -> throw new IllegalArgumentException("exp contains an unknown operation.");
+                    case "/" -> {
+                        // Check for division by zero
+                        if (num2 == 0) {
+                            throw new IllegalArgumentException("Division by zero.");
+                        }
+                        s.push(num1 / num2);
+                    }
+                    default -> throw new IllegalArgumentException("exp contains an unknown operation: '" + op + "'.");
                 }
-                //  "+", "-", "*", "/"
             }
         }
         tokens.close();
         if (s.size() != 1) {
+            // This handles cases like "1 2 +" (too many operands if result is not consumed) 
+            // or "1 2" (too many operands left on stack)
+            // or "" (no expression given)
             throw new IllegalArgumentException("exp is not a proper postfix expression.");
         }
         return s.pop();
     }
\ No newline at end of file
