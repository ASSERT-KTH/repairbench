diff --git a/tmp/863ffa7c-ee81-414e-a36a-8fd5d2f52ad1_buggy.java b/tmp/15ddba1f-830b-4f2c-9abb-e445c0264e6b_fixed.java
index 2444d12..e157f2b 100644
--- a/tmp/863ffa7c-ee81-414e-a36a-8fd5d2f52ad1_buggy.java
+++ b/tmp/15ddba1f-830b-4f2c-9abb-e445c0264e6b_fixed.java
@@ -1,29 +1,42 @@
     // Evaluates the given postfix expression string and returns the result.
     public static int postfixEvaluate(final String exp) {
         Stack<Integer> s = new Stack<Integer>();
         Scanner tokens = new Scanner(exp);
 
         while (tokens.hasNext()) {
-            if (tokens.hasNextInt()) {
-                s.push(tokens.nextInt()); // If int then push to stack
-            } else { // else pop top two values and perform the operation
+            String token = tokens.next(); // Read the token first
+
+            try {
+                int value = Integer.parseInt(token);
+                s.push(value); // If it's an integer, push it to the stack
+            } catch (NumberFormatException e) { // If it's not an integer, it must be an operator
+                // Before performing an operation, ensure there are at least two operands on the stack.
+                if (s.size() < 2) {
+                    throw new IllegalArgumentException("exp contains an operation with too few arguments.");
+                }
+
                 int num2 = s.pop();
                 int num1 = s.pop();
-                String op = tokens.next();
 
-                switch (op) {
+                switch (token) { // Use the read token as the operator
                     case "+" -> s.push(num1 + num2);
                     case "-" -> s.push(num1 - num2);
                     case "*" -> s.push(num1 * num2);
-                    case "/" -> s.push(num1 / num2);
+                    case "/" -> {
+                        if (num2 == 0) {
+                            throw new IllegalArgumentException("Division by zero is not allowed.");
+                        }
+                        s.push(num1 / num2);
+                    }
                     default -> throw new IllegalArgumentException("exp contains an unknown operation.");
                 }
-                //  "+", "-", "*", "/"
             }
         }
         tokens.close();
+
+        // After processing all tokens, the stack should contain exactly one result.
         if (s.size() != 1) {
             throw new IllegalArgumentException("exp is not a proper postfix expression.");
         }
         return s.pop();
     }
\ No newline at end of file
