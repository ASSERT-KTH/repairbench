diff --git a/tmp/ba63f282-a761-4cad-8983-02d99629a2e9_buggy.java b/tmp/7b553711-b6ca-4d85-afdc-38b54f34296b_fixed.java
index 2444d12..6b37697 100644
--- a/tmp/ba63f282-a761-4cad-8983-02d99629a2e9_buggy.java
+++ b/tmp/7b553711-b6ca-4d85-afdc-38b54f34296b_fixed.java
@@ -1,29 +1,44 @@
     // Evaluates the given postfix expression string and returns the result.
     public static int postfixEvaluate(final String exp) {
         Stack<Integer> s = new Stack<Integer>();
         Scanner tokens = new Scanner(exp);
 
         while (tokens.hasNext()) {
-            if (tokens.hasNextInt()) {
-                s.push(tokens.nextInt()); // If int then push to stack
-            } else { // else pop top two values and perform the operation
+            String token = tokens.next(); // Read the token first
+
+            try {
+                // Attempt to parse the token as an integer
+                int value = Integer.parseInt(token);
+                s.push(value);
+            } catch (NumberFormatException e) {
+                // If it's not an integer, it must be an operator
+                // Operators require at least two operands on the stack
+                if (s.size() < 2) {
+                    throw new IllegalArgumentException("exp is not a proper postfix expression: not enough operands for operator '" + token + "'");
+                }
+
                 int num2 = s.pop();
                 int num1 = s.pop();
-                String op = tokens.next();
 
-                switch (op) {
+                switch (token) { // Use the read token for the operation
                     case "+" -> s.push(num1 + num2);
                     case "-" -> s.push(num1 - num2);
                     case "*" -> s.push(num1 * num2);
-                    case "/" -> s.push(num1 / num2);
-                    default -> throw new IllegalArgumentException("exp contains an unknown operation.");
+                    case "/" -> {
+                        if (num2 == 0) {
+                            throw new ArithmeticException("Division by zero encountered.");
+                        }
+                        s.push(num1 / num2);
+                    }
+                    default -> throw new IllegalArgumentException("exp contains an unknown operation: '" + token + "'");
                 }
-                //  "+", "-", "*", "/"
             }
         }
         tokens.close();
+
+        // After processing all tokens, a proper postfix expression should have exactly one value on the stack
         if (s.size() != 1) {
-            throw new IllegalArgumentException("exp is not a proper postfix expression.");
+            throw new IllegalArgumentException("exp is not a proper postfix expression (final stack size is " + s.size() + " instead of 1).");
         }
         return s.pop();
     }
\ No newline at end of file
