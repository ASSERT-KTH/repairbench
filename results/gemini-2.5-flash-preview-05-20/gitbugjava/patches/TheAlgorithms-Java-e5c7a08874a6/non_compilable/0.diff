diff --git a/tmp/5aa07a01-dbb1-4c7d-abc0-fbc9a592f81a_buggy.java b/tmp/b58875b2-b2c5-4dcd-b42c-682a01da3f35_fixed.java
index 2444d12..865fd77 100644
--- a/tmp/5aa07a01-dbb1-4c7d-abc0-fbc9a592f81a_buggy.java
+++ b/tmp/b58875b2-b2c5-4dcd-b42c-682a01da3f35_fixed.java
@@ -1,29 +1,44 @@
+import java.util.Stack;
+import java.util.Scanner;
+
     // Evaluates the given postfix expression string and returns the result.
     public static int postfixEvaluate(final String exp) {
         Stack<Integer> s = new Stack<Integer>();
         Scanner tokens = new Scanner(exp);
 
         while (tokens.hasNext()) {
-            if (tokens.hasNextInt()) {
-                s.push(tokens.nextInt()); // If int then push to stack
-            } else { // else pop top two values and perform the operation
+            String token = tokens.next(); // Read the token first
+
+            // Check if the token is an integer
+            if (token.matches("-?\\d+")) { // Regex to match an optional minus sign followed by one or more digits
+                s.push(Integer.parseInt(token)); // If int then push to stack
+            } else { // Else, it must be an operator
+                // Before performing an operation, ensure there are at least two operands on the stack
+                if (s.size() < 2) {
+                    throw new IllegalArgumentException("exp is not a proper postfix expression: too few operands for operator " + token);
+                }
+
                 int num2 = s.pop();
                 int num1 = s.pop();
-                String op = tokens.next();
+                String op = token; // The token is already the operator
 
                 switch (op) {
                     case "+" -> s.push(num1 + num2);
                     case "-" -> s.push(num1 - num2);
                     case "*" -> s.push(num1 * num2);
-                    case "/" -> s.push(num1 / num2);
-                    default -> throw new IllegalArgumentException("exp contains an unknown operation.");
+                    case "/" -> {
+                        if (num2 == 0) { // Handle division by zero
+                            throw new IllegalArgumentException("Division by zero in postfix expression.");
+                        }
+                        s.push(num1 / num2);
+                    }
+                    default -> throw new IllegalArgumentException("exp contains an unknown operation: " + op);
                 }
-                //  "+", "-", "*", "/"
             }
         }
         tokens.close();
         if (s.size() != 1) {
             throw new IllegalArgumentException("exp is not a proper postfix expression.");
         }
         return s.pop();
     }
\ No newline at end of file
