diff --git a/tmp/d260bf9d-ed6f-43c8-b385-7f20332c23f5_buggy.java b/tmp/7c198126-065a-4a7f-8f00-81fe6812a0c6_fixed.java
index b8e3fa3..eee2425 100644
--- a/tmp/d260bf9d-ed6f-43c8-b385-7f20332c23f5_buggy.java
+++ b/tmp/7c198126-065a-4a7f-8f00-81fe6812a0c6_fixed.java
@@ -1,65 +1,73 @@
 	/**
 	 * Builds the {@link BackOffPolicy} with the given parameters.
 	 * @return the {@link BackOffPolicy} instance
 	 */
 	public BackOffPolicy build() {
 		if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {
 			ExponentialBackOffPolicy policy;
 			if (Boolean.TRUE.equals(this.random)) {
 				policy = new ExponentialRandomBackOffPolicy();
 			}
 			else {
 				policy = new ExponentialBackOffPolicy();
 			}
 			if (this.delay != null) {
 				policy.setInitialInterval(this.delay);
 			}
 			if (this.delaySupplier != null) {
 				policy.initialIntervalSupplier(this.delaySupplier);
 			}
 			if (this.multiplier != null) {
 				policy.setMultiplier(this.multiplier);
 			}
 			if (this.multiplierSupplier != null) {
 				policy.multiplierSupplier(this.multiplierSupplier);
 			}
 			if (this.maxDelay != null && this.delay != null) {
+				// ExponentialBackOffPolicy requires maxInterval >= initialInterval.
+				// If maxDelay is less than delay, it defaults to DEFAULT_MAX_INTERVAL.
 				policy.setMaxInterval(
 						this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
 			}
 			if (this.maxDelaySupplier != null) {
 				policy.maxIntervalSupplier(this.maxDelaySupplier);
 			}
 			if (this.sleeper != null) {
 				policy.setSleeper(this.sleeper);
 			}
 			return policy;
 		}
-		if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
+		// If multiplier is not set, check for UniformRandomBackOffPolicy.
+		// A UniformRandomBackOffPolicy is implied if both min and max backoff periods are provided,
+		// regardless of their relative values, as the policy itself can handle min >= max.
+		if (this.maxDelay != null && this.delay != null) { // Modified condition: removed '&& this.maxDelay > this.delay'
 			UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
+			// These inner if conditions are now technically redundant due to the outer check,
+			// but keeping them doesn't harm and ensures values are only set if present.
 			if (this.delay != null) {
 				policy.setMinBackOffPeriod(this.delay);
 			}
 			if (this.delaySupplier != null) {
 				policy.minBackOffPeriodSupplier(this.delaySupplier);
 			}
 			if (this.maxDelay != null) {
 				policy.setMaxBackOffPeriod(this.maxDelay);
 			}
 			if (this.maxDelaySupplier != null) {
 				policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
 			}
 			if (this.sleeper != null) {
 				policy.setSleeper(this.sleeper);
 			}
 			return policy;
 		}
+		// Fallback to FixedBackOffPolicy if no multiplier or valid min/max range is specified.
 		FixedBackOffPolicy policy = new FixedBackOffPolicy();
 		if (this.delay != null) {
 			policy.setBackOffPeriod(this.delay);
 		}
 		if (this.sleeper != null) {
 			policy.setSleeper(this.sleeper);
 		}
 		return policy;
 	}
\ No newline at end of file
