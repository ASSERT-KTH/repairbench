diff --git a/tmp/fc19cd24-1f7e-4686-a9ad-1173e23758d8_buggy.java b/tmp/7d4ce64f-a4e0-46d2-afd4-e8f8fe71b244_fixed.java
index b8e3fa3..2442ac6 100644
--- a/tmp/fc19cd24-1f7e-4686-a9ad-1173e23758d8_buggy.java
+++ b/tmp/7d4ce64f-a4e0-46d2-afd4-e8f8fe71b244_fixed.java
@@ -1,65 +1,95 @@
 	/**
 	 * Builds the {@link BackOffPolicy} with the given parameters.
 	 * @return the {@link BackOffPolicy} instance
 	 */
 	public BackOffPolicy build() {
-		if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {
+		// Helper flags to simplify and correct policy selection logic,
+		// considering both direct values and their suppliers.
+		boolean hasDelay = this.delay != null || this.delaySupplier != null;
+		boolean hasMultiplier = this.multiplier != null || this.multiplierSupplier != null;
+		boolean hasMaxDelay = this.maxDelay != null || this.maxDelaySupplier != null;
+		boolean hasRandom = Boolean.TRUE.equals(this.random);
+
+		// 1. ExponentialBackOffPolicy:
+		// Chosen if a multiplier (or its supplier) is defined.
+		if (hasMultiplier) {
 			ExponentialBackOffPolicy policy;
-			if (Boolean.TRUE.equals(this.random)) {
+			if (hasRandom) {
 				policy = new ExponentialRandomBackOffPolicy();
 			}
 			else {
 				policy = new ExponentialBackOffPolicy();
 			}
 			if (this.delay != null) {
 				policy.setInitialInterval(this.delay);
 			}
 			if (this.delaySupplier != null) {
 				policy.initialIntervalSupplier(this.delaySupplier);
 			}
 			if (this.multiplier != null) {
 				policy.setMultiplier(this.multiplier);
 			}
 			if (this.multiplierSupplier != null) {
 				policy.multiplierSupplier(this.multiplierSupplier);
 			}
+			// Retain original defensive maxInterval logic for ExponentialBackOffPolicy
 			if (this.maxDelay != null && this.delay != null) {
 				policy.setMaxInterval(
 						this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
 			}
 			if (this.maxDelaySupplier != null) {
 				policy.maxIntervalSupplier(this.maxDelaySupplier);
 			}
 			if (this.sleeper != null) {
 				policy.setSleeper(this.sleeper);
 			}
 			return policy;
 		}
-		if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
+
+		// 2. UniformRandomBackOffPolicy:
+		// Chosen if no multiplier, but both initial (min) and max delays
+		// (or their suppliers) are effectively defined.
+		// The original condition was too restrictive by only checking concrete values.
+		if (hasDelay && hasMaxDelay) {
 			UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
 			if (this.delay != null) {
 				policy.setMinBackOffPeriod(this.delay);
 			}
 			if (this.delaySupplier != null) {
 				policy.minBackOffPeriodSupplier(this.delaySupplier);
 			}
 			if (this.maxDelay != null) {
 				policy.setMaxBackOffPeriod(this.maxDelay);
 			}
 			if (this.maxDelaySupplier != null) {
 				policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
 			}
 			if (this.sleeper != null) {
 				policy.setSleeper(this.sleeper);
 			}
 			return policy;
 		}
+
+		// 3. FixedBackOffPolicy:
+		// This is the default/fallback policy if neither Exponential nor UniformRandom conditions are met.
+		// FixedBackOffPolicy does not support a Supplier for its back-off period directly.
+		// If 'delay' is null but 'delaySupplier' is present, we must resolve the value from the supplier here.
 		FixedBackOffPolicy policy = new FixedBackOffPolicy();
-		if (this.delay != null) {
-			policy.setBackOffPeriod(this.delay);
+		Long backOffPeriod = this.delay; // Start with the explicitly set delay value
+
+		// If no explicit delay value is set, but a supplier is provided, resolve it.
+		if (backOffPeriod == null && this.delaySupplier != null) {
+			backOffPeriod = this.delaySupplier.get();
 		}
+
+		if (backOffPeriod != null) {
+			policy.setBackOffPeriod(backOffPeriod);
+		}
+		// If backOffPeriod is still null (neither explicit delay nor supplier was provided),
+		// FixedBackOffPolicy will use its default value (1000L).
+
 		if (this.sleeper != null) {
 			policy.setSleeper(this.sleeper);
 		}
 		return policy;
 	}
\ No newline at end of file
