diff --git a/tmp/199738dd-2eac-493d-9a37-83442dcd3fb8_buggy.java b/tmp/7e016b4e-66c2-4b7a-8a38-5089b8cb075f_fixed.java
index b8e3fa3..7c0de1b 100644
--- a/tmp/199738dd-2eac-493d-9a37-83442dcd3fb8_buggy.java
+++ b/tmp/7e016b4e-66c2-4b7a-8a38-5089b8cb075f_fixed.java
@@ -1,65 +1,140 @@
 	/**
 	 * Builds the {@link BackOffPolicy} with the given parameters.
 	 * @return the {@link BackOffPolicy} instance
 	 */
 	public BackOffPolicy build() {
-		if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {
-			ExponentialBackOffPolicy policy;
+		// Prioritize random back-off policies if random is explicitly true.
 		if (Boolean.TRUE.equals(this.random)) {
-				policy = new ExponentialRandomBackOffPolicy();
+			// Exponential Random BackOff Policy if a multiplier is defined.
+			// Multiplier must be >= 1.0 as per ExponentialBackOffPolicy contract.
+			if ((this.multiplier != null && this.multiplier >= 1.0) || this.multiplierSupplier != null) {
+				ExponentialRandomBackOffPolicy policy = new ExponentialRandomBackOffPolicy();
+				if (this.delay != null) {
+					policy.setInitialInterval(this.delay);
 				}
+				if (this.delaySupplier != null) {
+					policy.initialIntervalSupplier(this.delaySupplier);
+				}
+				if (this.multiplier != null) {
+					policy.setMultiplier(this.multiplier);
+				}
+				if (this.multiplierSupplier != null) {
+					policy.multiplierSupplier(this.multiplierSupplier);
+				}
+				if (this.maxDelay != null) {
+					// Apply maxInterval, ensuring it's not less than initial if delay is set.
+					// If maxDelay is 0 and delay is positive, it uses DEFAULT_MAX_INTERVAL.
+					if (this.delay != null) {
+						policy.setMaxInterval(
+								this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
+					} else {
+						policy.setMaxInterval(this.maxDelay);
+					}
+				}
+				if (this.maxDelaySupplier != null) {
+					policy.maxIntervalSupplier(this.maxDelaySupplier);
+				}
+				if (this.sleeper != null) {
+					policy.setSleeper(this.sleeper);
+				}
+				return policy;
+			}
+			// Uniform Random BackOff Policy if a min/max range is explicitly defined (maxDelay > delay).
+			// This path is taken only if no multiplier was specified.
+			else if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
+				UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
+				// The null checks for delay and maxDelay are redundant here due to the outer condition.
+				policy.setMinBackOffPeriod(this.delay);
+				if (this.delaySupplier != null) {
+					policy.minBackOffPeriodSupplier(this.delaySupplier);
+				}
+				policy.setMaxBackOffPeriod(this.maxDelay);
+				if (this.maxDelaySupplier != null) {
+					policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
+				}
+				if (this.sleeper != null) {
+					policy.setSleeper(this.sleeper);
+				}
+				return policy;
+			}
+			// If 'random' is true but no multiplier and no valid max > delay range,
+			// default to UniformRandomBackOffPolicy with fixed min/max (set to delay).
+			// FixedBackOffPolicy is not compatible with 'random' flag.
 			else {
-				policy = new ExponentialBackOffPolicy();
+				UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
+				if (this.delay != null) {
+					policy.setMinBackOffPeriod(this.delay);
+					policy.setMaxBackOffPeriod(this.delay); // For fixed random behavior
+				} else if (this.delaySupplier != null) {
+					policy.minBackOffPeriodSupplier(this.delaySupplier);
+					policy.maxBackOffPeriodSupplier(this.delaySupplier); // For fixed random behavior
 				}
+				// If no delay or delaySupplier, UniformRandomBackOffPolicy uses its own defaults (1000L).
+				if (this.sleeper != null) {
+					policy.setSleeper(this.sleeper);
+				}
+				return policy;
+			}
+		}
+
+		// Non-random policy selection (or if random was false/null, or if random was true but didn't match above)
+		// Exponential BackOff Policy if a multiplier is defined.
+		// Multiplier must be >= 1.0 as per ExponentialBackOffPolicy contract.
+		if ((this.multiplier != null && this.multiplier >= 1.0) || this.multiplierSupplier != null) {
+			ExponentialBackOffPolicy policy = new ExponentialBackOffPolicy();
 			if (this.delay != null) {
 				policy.setInitialInterval(this.delay);
 			}
 			if (this.delaySupplier != null) {
 				policy.initialIntervalSupplier(this.delaySupplier);
 			}
 			if (this.multiplier != null) {
 				policy.setMultiplier(this.multiplier);
 			}
 			if (this.multiplierSupplier != null) {
 				policy.multiplierSupplier(this.multiplierSupplier);
 			}
-			if (this.maxDelay != null && this.delay != null) {
+			if (this.maxDelay != null) {
+				if (this.delay != null) {
 					policy.setMaxInterval(
 							this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
+				} else {
+					policy.setMaxInterval(this.maxDelay);
 				}
-			if (this.maxDelaySupplier != null) {
+			} else if (this.maxDelaySupplier != null) {
 				policy.maxIntervalSupplier(this.maxDelaySupplier);
 			}
 			if (this.sleeper != null) {
 				policy.setSleeper(this.sleeper);
 			}
 			return policy;
 		}
+		// Uniform Random BackOff Policy if a min/max range is explicitly defined (maxDelay > delay).
+		// This branch is only taken if no multiplier was specified.
 		if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
 			UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
-			if (this.delay != null) {
 			policy.setMinBackOffPeriod(this.delay);
-			}
 			if (this.delaySupplier != null) {
 				policy.minBackOffPeriodSupplier(this.delaySupplier);
 			}
-			if (this.maxDelay != null) {
 			policy.setMaxBackOffPeriod(this.maxDelay);
-			}
 			if (this.maxDelaySupplier != null) {
 				policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
 			}
 			if (this.sleeper != null) {
 				policy.setSleeper(this.sleeper);
 			}
 			return policy;
 		}
+
+		// Default fallback: Fixed BackOff Policy.
+		// This is chosen if no multiplier is set and no valid min/max range for uniform random is specified.
 		FixedBackOffPolicy policy = new FixedBackOffPolicy();
 		if (this.delay != null) {
 			policy.setBackOffPeriod(this.delay);
 		}
 		if (this.sleeper != null) {
 			policy.setSleeper(this.sleeper);
 		}
 		return policy;
 	}
\ No newline at end of file
