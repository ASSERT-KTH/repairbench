diff --git a/tmp/6433f6b4-ed47-46fc-b070-92cf63550a86_buggy.java b/tmp/cd3b7487-341a-42e6-b8a5-d7dbf4590838_fixed.java
index b8e3fa3..35e2d4d 100644
--- a/tmp/6433f6b4-ed47-46fc-b070-92cf63550a86_buggy.java
+++ b/tmp/cd3b7487-341a-42e6-b8a5-d7dbf4590838_fixed.java
@@ -1,65 +1,81 @@
 	/**
 	 * Builds the {@link BackOffPolicy} with the given parameters.
 	 * @return the {@link BackOffPolicy} instance
 	 */
 	public BackOffPolicy build() {
+		// 1. Prioritize ExponentialBackOffPolicy if a multiplier is explicitly set.
+		// This applies to both ExponentialBackOffPolicy and ExponentialRandomBackOffPolicy.
 		if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {
 			ExponentialBackOffPolicy policy;
 			if (Boolean.TRUE.equals(this.random)) {
 				policy = new ExponentialRandomBackOffPolicy();
 			}
 			else {
 				policy = new ExponentialBackOffPolicy();
 			}
 			if (this.delay != null) {
 				policy.setInitialInterval(this.delay);
 			}
 			if (this.delaySupplier != null) {
 				policy.initialIntervalSupplier(this.delaySupplier);
 			}
 			if (this.multiplier != null) {
 				policy.setMultiplier(this.multiplier);
 			}
 			if (this.multiplierSupplier != null) {
 				policy.multiplierSupplier(this.multiplierSupplier);
 			}
-			if (this.maxDelay != null && this.delay != null) {
-				policy.setMaxInterval(
-						this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
+			// Fix: maxInterval should be set if maxDelay is provided, regardless of initialInterval (delay).
+			// The policy itself handles clamping maxInterval if it's less than initialInterval.
+			if (this.maxDelay != null) {
+				policy.setMaxInterval(this.maxDelay);
 			}
 			if (this.maxDelaySupplier != null) {
 				policy.maxIntervalSupplier(this.maxDelaySupplier);
 			}
 			if (this.sleeper != null) {
 				policy.setSleeper(this.sleeper);
 			}
 			return policy;
 		}
-		if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
+
+		// 2. If no multiplier, check for UniformRandomBackOffPolicy.
+		// A UniformRandomBackOffPolicy is characterized by having a maxBackOffPeriod.
+		// FixedBackOffPolicy does not have a maxBackOffPeriod. Thus, if maxDelay
+		// or its supplier is configured, it must be a UniformRandomBackOffPolicy.
+		if (this.maxDelay != null || this.maxDelaySupplier != null) {
 			UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
 			if (this.delay != null) {
 				policy.setMinBackOffPeriod(this.delay);
 			}
 			if (this.delaySupplier != null) {
 				policy.minBackOffPeriodSupplier(this.delaySupplier);
 			}
 			if (this.maxDelay != null) {
 				policy.setMaxBackOffPeriod(this.maxDelay);
 			}
 			if (this.maxDelaySupplier != null) {
 				policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
 			}
 			if (this.sleeper != null) {
 				policy.setSleeper(this.sleeper);
 			}
 			return policy;
 		}
+
+		// 3. Fallback to FixedBackOffPolicy if none of the above conditions are met.
+		// This occurs if only 'delay' (or its supplier) is set, or if no parameters are set at all.
 		FixedBackOffPolicy policy = new FixedBackOffPolicy();
 		if (this.delay != null) {
 			policy.setBackOffPeriod(this.delay);
 		}
+		// Fix: FixedBackOffPolicy supports backOffPeriodSupplier, so if delaySupplier is provided,
+		// it should be used here.
+		if (this.delaySupplier != null) {
+			policy.backOffPeriodSupplier(this.delaySupplier);
+		}
 		if (this.sleeper != null) {
 			policy.setSleeper(this.sleeper);
 		}
 		return policy;
 	}
\ No newline at end of file
