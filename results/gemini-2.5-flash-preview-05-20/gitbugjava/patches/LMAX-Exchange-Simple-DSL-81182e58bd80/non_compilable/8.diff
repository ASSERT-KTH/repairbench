diff --git a/tmp/129d1178-f438-402a-94df-ccbf9f44bfc5_buggy.java b/tmp/b3e40ff0-8b3c-41ae-8f72-9ad6b8d4167c_fixed.java
index f506479..91879f6 100644
--- a/tmp/129d1178-f438-402a-94df-ccbf9f44bfc5_buggy.java
+++ b/tmp/b3e40ff0-8b3c-41ae-8f72-9ad6b8d4167c_fixed.java
@@ -1,64 +1,102 @@
         void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
         {
+            // A list to accumulate all RepeatingParamValues instances found for this groupArg definition.
+            final List<RepeatingParamValues> allGroupInstances = new ArrayList<>();
+
+            // Outer loop to find and process multiple instances of the repeating group
+            while (true) {
+                // Check if the next argument in the deque is the identity of this repeating group.
+                // If not, we have processed all instances of this repeating group from the current stream.
+                if (arguments.isEmpty() || !groupArg.getIdentity().getName().equalsIgnoreCase(arguments.peekFirst().name)) {
+                    break; // No more identity arguments for this group in the current stream.
+                }
+
+                // --- Start processing for a single group instance ---
                 final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
                 final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
+                // Consume the identity argument for the current instance (e.g., "group: Joe")
+                // This will take the argument from the deque.
                 processor.consume(groupArg.getIdentity(), arguments);
 
                 final Map<String, SimpleDslArg> argsByName = new HashMap<>();
                 argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
                 for (SimpleDslArg dslArg : groupArg.getOtherArgs())
                 {
                     if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
                     {
                         throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
                     }
                 }
 
+                // Inner loop to consume other arguments belonging to this specific group instance (e.g., "value: 1, 2")
                 while (!arguments.isEmpty())
                 {
                     final NameValuePair argument = arguments.peekFirst();
                     if (argument == NameValuePair.NULL)
                     {
                         arguments.pollFirst();
                         continue;
                     }
 
                     if (argument.name == null)
                     {
                         throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
                     }
 
+                    // If the next argument is the identity of a *new* instance of this same repeating group,
+                    // then the current instance is complete. Break the inner loop.
+                    if (groupArg.getIdentity().getName().equalsIgnoreCase(argument.name)) {
+                        break;
+                    }
+
                     final DslArg arg = argsByName.get(argument.name.toLowerCase());
                     if (arg == null)
                     {
+                        // The argument's name does not match any arguments defined for this group.
+                        // This implies it's either a top-level argument or belongs to another group type.
+                        // Stop consuming for the current group instance.
                         break;
                     }
 
                     final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
+                    // If the argument doesn't allow multiple values and already has one,
+                    // it means we've finished consuming values for this specific argument within the current group instance.
+                    // This implies the current group instance is done with its arguments.
                     if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
                     {
                         break;
                     }
 
                     checkValidValue(arg, argument.value);
                     argValues.add(argument.value);
-                arguments.pollFirst();
+                    arguments.pollFirst(); // Remove the consumed argument from the deque
                 }
 
                 // TODO: this whole thing here is a bit hacky!
+                // Collect final values for this specific group instance
                 final Map<String, List<String>> valuesByName = new HashMap<>();
                 for (final SimpleDslArg simpleDslArg : argsByName.values())
                 {
                     final SimpleDslParam param = processor.collect(simpleDslArg);
                     if (param.hasValue())
                     {
                         valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
                     }
                 }
 
                 final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
                 dslArgs[0] = groupArg.getIdentity();
                 System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
-            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
+                
+                // Add the current group instance's parsed values to the list of all collected instances.
+                allGroupInstances.add(new RepeatingParamValues(dslArgs, valuesByName));
+                // --- End processing for a single group instance ---
+            }
+
+            // After processing all instances in the arguments deque, add them to the global map.
+            // This ensures all instances are collected for the same RepeatingArgGroup definition.
+            if (!allGroupInstances.isEmpty()) {
+                groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).addAll(allGroupInstances);
+            }
         }
\ No newline at end of file
