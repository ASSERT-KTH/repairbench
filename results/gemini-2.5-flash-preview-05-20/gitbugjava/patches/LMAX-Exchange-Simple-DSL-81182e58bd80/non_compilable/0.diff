diff --git a/tmp/af7a58c1-459e-4845-8794-063fa067769a_buggy.java b/tmp/e16933a1-461a-47f0-bf09-26be4c8735e7_fixed.java
index f506479..359f8d0 100644
--- a/tmp/af7a58c1-459e-4845-8794-063fa067769a_buggy.java
+++ b/tmp/e16933a1-461a-47f0-bf09-26be4c8735e7_fixed.java
@@ -1,64 +1,99 @@
         void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
         {
             final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
             final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
+            // Consume the identity argument for this specific instance of the repeating group.
             processor.consume(groupArg.getIdentity(), arguments);
 
             final Map<String, SimpleDslArg> argsByName = new HashMap<>();
-            argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
+            // Ensure all map keys are consistent (lowercase)
+            argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());
             for (SimpleDslArg dslArg : groupArg.getOtherArgs())
             {
                 if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
                 {
                     throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
                 }
             }
 
+            // Process subsequent arguments belonging to this group instance.
             while (!arguments.isEmpty())
             {
                 final NameValuePair argument = arguments.peekFirst();
                 if (argument == NameValuePair.NULL)
                 {
                     arguments.pollFirst();
                     continue;
                 }
 
                 if (argument.name == null)
                 {
                     throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
                 }
 
+                // Look up the DslArg using a lowercase version of the argument name for consistency.
                 final DslArg arg = argsByName.get(argument.name.toLowerCase());
                 if (arg == null)
                 {
+                    // If the argument name does not match any of the current group's arguments,
+                    // it implies this argument belongs to a new group instance or is unrelated.
+                    // Stop processing arguments for the current group instance.
                     break;
                 }
 
                 final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
+
+                // Check for duplicate values for arguments that do not allow multiple values.
                 if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
                 {
+                    // If the current argument is the identity of the group itself, and it's already
+                    // been consumed for this group instance, encountering it again means a new group
+                    // instance is starting. So, break to let the parent parser handle it.
+                    if (arg == groupArg.getIdentity()) {
                         break;
                     }
+                    // For other arguments within the group, if they don't allow multiple values
+                    // but we've already collected one, it's an invalid duplicate.
+                    throw new IllegalArgumentException("Multiple values for " + arg.getName() + " are not allowed in group " + groupArg.getName());
+                }
 
+                // Validate the argument's value(s). This method correctly splits for validation.
                 checkValidValue(arg, argument.value);
+
+                // Store the value(s). If multiple values are allowed, split them by the separator.
+                if (arg.isAllowMultipleValues())
+                {
+                    final String[] splitValues = argument.value.split(arg.getValueSeparator());
+                    for (String splitValue : splitValues)
+                    {
+                        argValues.add(splitValue.trim()); // Add each split part, trimming whitespace
+                    }
+                }
+                else
+                {
+                    // If multiple values are not allowed, add the raw value as is.
                     argValues.add(argument.value);
+                }
+
+                // Consume the argument from the deque.
                 arguments.pollFirst();
             }
 
             // TODO: this whole thing here is a bit hacky!
             final Map<String, List<String>> valuesByName = new HashMap<>();
             for (final SimpleDslArg simpleDslArg : argsByName.values())
             {
                 final SimpleDslParam param = processor.collect(simpleDslArg);
                 if (param.hasValue())
                 {
+                    // Ensure consistency: store parameter names in lowercase
                     valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
                 }
             }
 
             final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
             dslArgs[0] = groupArg.getIdentity();
             System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
             groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
         }
