diff --git a/tmp/6056d1b2-acbb-424b-ae53-9317e6bef68f_buggy.java b/tmp/5da11bdf-22ec-4a7c-85a2-629cca1d1bfb_fixed.java
index f506479..627f64b 100644
--- a/tmp/6056d1b2-acbb-424b-ae53-9317e6bef68f_buggy.java
+++ b/tmp/5da11bdf-22ec-4a7c-85a2-629cca1d1bfb_fixed.java
@@ -1,64 +1,88 @@
         void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
         {
             final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
+            // The SimpleArgumentProcessor implicitly uses DEFAULT_ARGUMENT_SEPARATOR = ","
             final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
+            // Consume the identity argument for the group (e.g., "group: Joe")
             processor.consume(groupArg.getIdentity(), arguments);
 
             final Map<String, SimpleDslArg> argsByName = new HashMap<>();
-            argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
+            // Add identity argument to map for internal group processing
+            argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());
+            // Add other arguments of the group to map
             for (SimpleDslArg dslArg : groupArg.getOtherArgs())
             {
                 if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
                 {
                     throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
                 }
             }
 
+            // Process subsequent arguments that belong to this group
             while (!arguments.isEmpty())
             {
                 final NameValuePair argument = arguments.peekFirst();
                 if (argument == NameValuePair.NULL)
                 {
                     arguments.pollFirst();
                     continue;
                 }
 
                 if (argument.name == null)
                 {
                     throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
                 }
 
                 final DslArg arg = argsByName.get(argument.name.toLowerCase());
                 if (arg == null)
                 {
+                    // If the argument is not recognized for this group, it belongs to another group or is a top-level arg.
+                    // Stop processing for the current group.
                     break;
                 }
 
                 final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
+
+                // If the argument does not allow multiple values and already has one, stop processing for this group.
+                // This implicitly handles the case where the group's identity arg is encountered again.
                 if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
                 {
                     break;
                 }
 
+                // Validate the argument value
                 checkValidValue(arg, argument.value);
+
+                // FIX: If the argument allows multiple values, split the input string by the default separator (',')
+                // before adding the individual parts to the values list.
+                // This ensures that the raw values in valuesByArg are already split.
+                if (arg.isAllowMultipleValues()) {
+                    // Use the default argument separator (',') for splitting, which is what SimpleArgumentProcessor also uses.
+                    Collections.addAll(argValues, ValueSplitter.split(argument.value, ","));
+                } else {
+                    // For arguments that do not allow multiple values, add the value as is.
                     argValues.add(argument.value);
+                }
                 arguments.pollFirst();
             }
 
-            // TODO: this whole thing here is a bit hacky!
+            // Collect all values into a map of name to list of values
             final Map<String, List<String>> valuesByName = new HashMap<>();
             for (final SimpleDslArg simpleDslArg : argsByName.values())
             {
                 final SimpleDslParam param = processor.collect(simpleDslArg);
                 if (param.hasValue())
                 {
                     valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
                 }
             }
 
+            // Construct the DslArg array for the RepeatingParamValues object
             final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
             dslArgs[0] = groupArg.getIdentity();
             System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
+            
+            // Add the collected group values to the main groupsByArg map
             groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
         }
