diff --git a/tmp/5c731989-f1a0-4999-87be-772410043ac7_buggy.java b/tmp/214f1be4-645f-43bc-a891-f9b3b8bef329_fixed.java
index 8bae155..b48fee3 100644
--- a/tmp/5c731989-f1a0-4999-87be-772410043ac7_buggy.java
+++ b/tmp/214f1be4-645f-43bc-a891-f9b3b8bef329_fixed.java
@@ -1,5 +1,25 @@
     @Override
     public String asStringLiteral()
     {
-        return '"' + this.value + '"';
+        String val = this.value;
+
+        boolean containsDoubleQuote = val.contains("\"");
+        boolean containsSingleQuote = val.contains("'");
+
+        if (containsDoubleQuote && !containsSingleQuote) {
+            // If the string contains double quotes but not single quotes, it's safer and cleaner
+            // to enclose it in single quotes to avoid escaping.
+            return "'" + val + "'";
+        } else if (containsSingleQuote && !containsDoubleQuote) {
+            // If the string contains single quotes but not double quotes, enclose it in double quotes.
+            return "\"" + val + "\"";
+        } else {
+            // This covers two remaining cases:
+            // 1. The string contains both single and double quotes. In this scenario, one type of quote
+            //    must be escaped. The convention is to use double quotes and escape internal double quotes
+            //    with a backslash.
+            // 2. The string contains neither single nor double quotes. In this case, defaulting to
+            //    double quotes is standard, and no escaping is needed (replace will be a no-op).
+            return "\"" + val.replace("\"", "\\\"") + "\"";
+        }
     }
\ No newline at end of file
