diff --git a/tmp/bbfb7645-7b35-478d-9636-97afb7f8a227_buggy.java b/tmp/7782d780-7510-4ede-bca5-7b2e85d9cc72_fixed.java
index 2a0dceb..b147f78 100644
--- a/tmp/bbfb7645-7b35-478d-9636-97afb7f8a227_buggy.java
+++ b/tmp/7782d780-7510-4ede-bca5-7b2e85d9cc72_fixed.java
@@ -1,68 +1,165 @@
     private Position decode4(
             Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
         int index = 0;
 
         String type = values[index++].substring(5);
 
         if (!type.equals("STT") && !type.equals("ALT")) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
         position.set(Position.KEY_TYPE, type);
 
-        position.set(Position.KEY_VERSION_FW, values[index++]);
-        index += 1; // model
+        // KEY_VERSION_FW
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_VERSION_FW, values[index]);
+        }
+        index++; // Always advance index
+
+        index += 1; // model (always consume this index)
 
         Network network = new Network();
 
         for (int i = 0; i < 7; i++) {
-            int cid = Integer.parseInt(values[index++]);
-            int mcc = Integer.parseInt(values[index++]);
-            int mnc = Integer.parseInt(values[index++]);
-            int lac, rssi;
+            int cid = 0, mcc = 0, mnc = 0, lac = 0, rssi = 0;
+
+            if (index < values.length && !values[index].isEmpty()) {
+                try { cid = Integer.parseInt(values[index]); } catch (NumberFormatException e) { /* ignore */ }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try { mcc = Integer.parseInt(values[index]); } catch (NumberFormatException e) { /* ignore */ }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try { mnc = Integer.parseInt(values[index]); } catch (NumberFormatException e) { /* ignore */ }
+            }
+            index++;
+
             if (i == 0) {
-                rssi = Integer.parseInt(values[index++]);
-                lac = Integer.parseInt(values[index++]);
+                if (index < values.length && !values[index].isEmpty()) {
+                    try { rssi = Integer.parseInt(values[index]); } catch (NumberFormatException e) { /* ignore */ }
+                }
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                    try { lac = Integer.parseInt(values[index]); } catch (NumberFormatException e) { /* ignore */ }
+                }
+                index++;
             } else {
-                lac = Integer.parseInt(values[index++]);
-                rssi = Integer.parseInt(values[index++]);
+                if (index < values.length && !values[index].isEmpty()) {
+                    try { lac = Integer.parseInt(values[index]); } catch (NumberFormatException e) { /* ignore */ }
                 }
-            index += 1; // timing advance
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                    try { rssi = Integer.parseInt(values[index]); } catch (NumberFormatException e) { /* ignore */ }
+                }
+                index++;
+            }
+            // timing advance
+            if (index < values.length) {
+                // No parsing needed for timing advance, just consume the index
+            }
+            index += 1;
+
             if (cid > 0) {
                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
             }
         }
 
         position.setNetwork(network);
 
-        position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
-        position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
-        position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
-        position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
+        // KEY_BATTERY
+        if (index < values.length && !values[index].isEmpty()) {
+            try { position.set(Position.KEY_BATTERY, Double.parseDouble(values[index])); } catch (NumberFormatException e) { /* ignore */ }
+        }
+        index++;
+
+        // KEY_ARCHIVE
+        if (index < values.length) { // .equals() is safe with empty string
+            position.set(Position.KEY_ARCHIVE, values[index].equals("0") ? true : null);
+        }
+        index++;
+
+        // KEY_INDEX
+        if (index < values.length && !values[index].isEmpty()) {
+            try { position.set(Position.KEY_INDEX, Integer.parseInt(values[index])); } catch (NumberFormatException e) { /* ignore */ }
+        }
+        index++;
+
+        // KEY_STATUS
+        if (index < values.length && !values[index].isEmpty()) {
+            try { position.set(Position.KEY_STATUS, Integer.parseInt(values[index])); } catch (NumberFormatException e) { /* ignore */ }
+        }
+        index++;
 
-        if (values[index].length() == 3) {
-            index += 1; // collaborative network
+        // Collaborative network
+        if (index < values.length && values[index].length() == 3) {
+            index += 1;
         }
 
+        // Date and Time parsing - Fix for ParseException
         DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
 
-        position.setLatitude(Double.parseDouble(values[index++]));
-        position.setLongitude(Double.parseDouble(values[index++]));
-        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
-        position.setCourse(Double.parseDouble(values[index++]));
+        String datePart = "";
+        if (index < values.length && !values[index].isEmpty()) {
+            datePart = values[index];
+        }
+        index++; // Always consume the index for date part
 
-        position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+        String timePart = "";
+        if (index < values.length && !values[index].isEmpty()) {
+            timePart = values[index];
+        }
+        index++; // Always consume the index for time part
 
-        position.setValid(values[index++].equals("1"));
+        if (!datePart.isEmpty() && !timePart.isEmpty()) {
+            // Only attempt to parse if both parts are available and not empty
+            position.setTime(dateFormat.parse(datePart + timePart));
+        }
+
+        // Latitude
+        if (index < values.length && !values[index].isEmpty()) {
+            try { position.setLatitude(Double.parseDouble(values[index])); } catch (NumberFormatException e) { /* ignore */ }
+        }
+        index++;
+
+        // Longitude
+        if (index < values.length && !values[index].isEmpty()) {
+            try { position.setLongitude(Double.parseDouble(values[index])); } catch (NumberFormatException e) { /* ignore */ }
+        }
+        index++;
+
+        // Speed
+        if (index < values.length && !values[index].isEmpty()) {
+            try { position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index]))); } catch (NumberFormatException e) { /* ignore */ }
+        }
+        index++;
+
+        // Course
+        if (index < values.length && !values[index].isEmpty()) {
+            try { position.setCourse(Double.parseDouble(values[index])); } catch (NumberFormatException e) { /* ignore */ }
+        }
+        index++;
+
+        // KEY_SATELLITES
+        if (index < values.length && !values[index].isEmpty()) {
+            try { position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index])); } catch (NumberFormatException e) { /* ignore */ }
+        }
+        index++;
+
+        // Valid
+        if (index < values.length) { // .equals() is safe with empty string
+            position.setValid(values[index].equals("1"));
+        }
+        index++;
 
         return position;
     }
\ No newline at end of file
