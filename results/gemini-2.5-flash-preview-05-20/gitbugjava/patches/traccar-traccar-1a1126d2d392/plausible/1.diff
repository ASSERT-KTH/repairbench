diff --git a/tmp/d0cd92b3-e245-46bb-87d0-ff88d4a82be0_buggy.java b/tmp/fb090acd-4a6d-49da-ba74-641a3aa70bc0_fixed.java
index 2a0dceb..f333b16 100644
--- a/tmp/d0cd92b3-e245-46bb-87d0-ff88d4a82be0_buggy.java
+++ b/tmp/fb090acd-4a6d-49da-ba74-641a3aa70bc0_fixed.java
@@ -1,68 +1,178 @@
     private Position decode4(
             Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
         int index = 0;
 
         String type = values[index++].substring(5);
 
         if (!type.equals("STT") && !type.equals("ALT")) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
         position.set(Position.KEY_TYPE, type);
 
         position.set(Position.KEY_VERSION_FW, values[index++]);
         index += 1; // model
 
         Network network = new Network();
 
         for (int i = 0; i < 7; i++) {
+            // Ensure there are enough values for a cell tower before parsing
+            if (index + 5 < values.length) { // Minimum 6 fields per cell tower iteration
+                try {
                     int cid = Integer.parseInt(values[index++]);
                     int mcc = Integer.parseInt(values[index++]);
                     int mnc = Integer.parseInt(values[index++]);
                     int lac, rssi;
                     if (i == 0) {
                         rssi = Integer.parseInt(values[index++]);
                         lac = Integer.parseInt(values[index++]);
                     } else {
                         lac = Integer.parseInt(values[index++]);
                         rssi = Integer.parseInt(values[index++]);
                     }
                     index += 1; // timing advance
                     if (cid > 0) {
                         network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
                     }
+                } catch (NumberFormatException e) {
+                    // If parsing a cell tower field fails, skip the rest of the current cell and break
+                    // This handles cases where cell tower data is malformed or incomplete
+                    break;
+                }
+            } else {
+                // Not enough values for a full cell tower entry, stop processing cell towers
+                break;
+            }
         }
 
         position.setNetwork(network);
 
-        position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
-        position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
-        position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
-        position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
+        // Battery
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
+                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));
+            } catch (NumberFormatException e) {
+                // Ignore malformed battery value
+            }
+        }
+        index++;
 
-        if (values[index].length() == 3) {
+        // Archive
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_ARCHIVE, values[index].equals("0") ? true : null);
+        }
+        index++;
+
+        // Index
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
+                position.set(Position.KEY_INDEX, Integer.parseInt(values[index]));
+            } catch (NumberFormatException e) {
+                // Ignore malformed index value
+            }
+        }
+        index++;
+
+        // Status
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
+                position.set(Position.KEY_STATUS, Integer.parseInt(values[index]));
+            } catch (NumberFormatException e) {
+                // Ignore malformed status value
+            }
+        }
+        index++;
+
+        // Collaborative network
+        if (index < values.length && values[index].length() == 3) {
             index += 1; // collaborative network
         }
 
+        // Date and Time
+        String datePart = null;
+        if (index < values.length) {
+            datePart = values[index];
+        }
+        index++; // Always advance index for the date field slot
+
+        String timePart = null;
+        if (index < values.length) {
+            timePart = values[index];
+        }
+        index++; // Always advance index for the time field slot
+
+        if (datePart != null && !datePart.isEmpty() && timePart != null && !timePart.isEmpty()) {
+            try {
                 DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
                 dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
+                position.setTime(dateFormat.parse(datePart + timePart));
+            } catch (ParseException e) {
+                // Log or ignore unparseable date, position time will be null or default
+            }
+        }
 
-        position.setLatitude(Double.parseDouble(values[index++]));
-        position.setLongitude(Double.parseDouble(values[index++]));
-        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
-        position.setCourse(Double.parseDouble(values[index++]));
+        // Latitude
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
+                position.setLatitude(Double.parseDouble(values[index]));
+            } catch (NumberFormatException e) {
+                // Ignore malformed latitude value
+            }
+        }
+        index++; // Always advance index for the latitude field slot
 
-        position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+        // Longitude
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
+                position.setLongitude(Double.parseDouble(values[index]));
+            } catch (NumberFormatException e) {
+                // Ignore malformed longitude value
+            }
+        }
+        index++; // Always advance index for the longitude field slot
 
-        position.setValid(values[index++].equals("1"));
+        // Speed
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
+                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index])));
+            } catch (NumberFormatException e) {
+                // Ignore malformed speed value
+            }
+        }
+        index++; // Always advance index for the speed field slot
+
+        // Course
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
+                position.setCourse(Double.parseDouble(values[index]));
+            } catch (NumberFormatException e) {
+                // Ignore malformed course value
+            }
+        }
+        index++; // Always advance index for the course field slot
+
+        // Satellites
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
+                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));
+            } catch (NumberFormatException e) {
+                // Ignore malformed satellites value
+            }
+        }
+        index++; // Always advance index for the satellites field slot
+
+        // Valid
+        if (index < values.length && !values[index].isEmpty()) {
+            position.setValid(values[index].equals("1"));
+        }
+        index++; // Always advance index for the valid field slot
 
         return position;
     }
\ No newline at end of file
