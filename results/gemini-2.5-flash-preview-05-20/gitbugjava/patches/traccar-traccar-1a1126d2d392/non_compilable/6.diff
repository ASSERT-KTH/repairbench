diff --git a/tmp/9f57cb38-15cb-4b73-b2e9-589250ec6e63_buggy.java b/tmp/e1760bec-85f0-42aa-82ec-7f55a6637c6c_fixed.java
index 2a0dceb..dd58f43 100644
--- a/tmp/9f57cb38-15cb-4b73-b2e9-589250ec6e63_buggy.java
+++ b/tmp/e1760bec-85f0-42aa-82ec-7f55a6637c6c_fixed.java
@@ -1,68 +1,274 @@
     private Position decode4(
             Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
         int index = 0;
 
         String type = values[index++].substring(5);
 
         if (!type.equals("STT") && !type.equals("ALT")) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
         position.set(Position.KEY_TYPE, type);
 
+        // KEY_VERSION_FW
+        if (index < values.length) {
             position.set(Position.KEY_VERSION_FW, values[index++]);
-        index += 1; // model
+        } else {
+            // If field is missing, conceptually advance index to maintain flow
+            index++;
+        }
+
+        // model
+        if (index < values.length) {
+            index++; // Consume model field if present
+        } else {
+            index++; // Conceptually advance index if field is missing
+        }
 
         Network network = new Network();
 
         for (int i = 0; i < 7; i++) {
-            int cid = Integer.parseInt(values[index++]);
-            int mcc = Integer.parseInt(values[index++]);
-            int mnc = Integer.parseInt(values[index++]);
-            int lac, rssi;
+            int cid = 0;
+            int mcc = 0;
+            int mnc = 0;
+            int lac = 0;
+            int rssi = 0;
+
+            // cid
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    cid = Integer.parseInt(values[index++]);
+                } catch (NumberFormatException e) {
+                    index++; // Still advance index even if parsing fails
+                }
+            } else {
+                index++; // Still advance index if field is missing or empty
+            }
+
+            // mcc
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    mcc = Integer.parseInt(values[index++]);
+                } catch (NumberFormatException e) {
+                    index++;
+                }
+            } else {
+                index++;
+            }
+
+            // mnc
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    mnc = Integer.parseInt(values[index++]);
+                } catch (NumberFormatException e) {
+                    index++;
+                }
+            } else {
+                index++;
+            }
+
             if (i == 0) {
+                // rssi
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
                         rssi = Integer.parseInt(values[index++]);
+                    } catch (NumberFormatException e) {
+                        index++;
+                    }
+                } else {
+                    index++;
+                }
+
+                // lac
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
                         lac = Integer.parseInt(values[index++]);
+                    } catch (NumberFormatException e) {
+                        index++;
+                    }
                 } else {
+                    index++;
+                }
+            } else {
+                // lac
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
                         lac = Integer.parseInt(values[index++]);
+                    } catch (NumberFormatException e) {
+                        index++;
+                    }
+                } else {
+                    index++;
+                }
+
+                // rssi
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
                         rssi = Integer.parseInt(values[index++]);
+                    } catch (NumberFormatException e) {
+                        index++;
+                    }
+                } else {
+                    index++;
+                }
+            }
+
+            // timing advance
+            if (index < values.length) {
+                index++; // Consume timing advance field if present
+            } else {
+                index++; // Conceptually advance index if field is missing
             }
-            index += 1; // timing advance
+
             if (cid > 0) {
                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
             }
         }
 
         position.setNetwork(network);
 
+        // KEY_BATTERY
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
                 position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+            } catch (NumberFormatException e) {
+                index++;
+            }
+        } else {
+            index++;
+        }
+
+        // KEY_ARCHIVE
+        // .equals("0") is safe for empty string, will return false.
+        if (index < values.length) {
             position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
+        } else {
+            index++;
+        }
+
+        // KEY_INDEX
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
                 position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
+            } catch (NumberFormatException e) {
+                index++;
+            }
+        } else {
+            index++;
+        }
+
+        // KEY_STATUS
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
                 position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
+            } catch (NumberFormatException e) {
+                index++;
+            }
+        } else {
+            index++;
+        }
 
+        // collaborative network
+        // `values[index].length()` would throw ArrayIndexOutOfBoundsException if `index >= values.length`.
+        if (index < values.length) {
             if (values[index].length() == 3) {
-            index += 1; // collaborative network
+                index++; // Consume collaborative network if present and matches length
+            } else {
+                index++; // Consume it anyway if it exists but doesn't match the specific length 3 criteria.
+            }
+        } else {
+            // Collaborative network field is missing. Index is not advanced.
+        }
+
+        // Date and Time
+        String dateVal = "";
+        String timeVal = "";
+        if (index < values.length) {
+            dateVal = values[index++];
+        }
+        if (index < values.length) {
+            timeVal = values[index++];
         }
 
+        if (!dateVal.isEmpty() && !timeVal.isEmpty()) {
             DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
             dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
+            try {
+                position.setTime(dateFormat.parse(dateVal + timeVal));
+            } catch (ParseException e) {
+                // Time will not be set, or will remain default if parsing fails
+            }
+        }
 
+        // Latitude
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
                 position.setLatitude(Double.parseDouble(values[index++]));
+            } catch (NumberFormatException e) {
+                index++;
+            }
+        } else {
+            index++;
+        }
+
+        // Longitude
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
                 position.setLongitude(Double.parseDouble(values[index++]));
+            } catch (NumberFormatException e) {
+                index++;
+            }
+        } else {
+            index++;
+        }
+
+        // Speed
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
                 position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
+            } catch (NumberFormatException e) {
+                index++;
+            }
+        } else {
+            index++;
+        }
+
+        // Course
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
                 position.setCourse(Double.parseDouble(values[index++]));
+            } catch (NumberFormatException e) {
+                index++;
+            }
+        } else {
+            index++;
+        }
 
+        // KEY_SATELLITES
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
                 position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+            } catch (NumberFormatException e) {
+                index++;
+            }
+        } else {
+            index++;
+        }
 
+        // Valid
+        // .equals("1") is safe for empty string, will return false.
+        if (index < values.length) {
             position.setValid(values[index++].equals("1"));
+        } else {
+            index++;
+        }
 
         return position;
     }
\ No newline at end of file
