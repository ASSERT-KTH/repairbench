diff --git a/tmp/d11e7998-b327-4fd5-9d62-842b2c63150e_buggy.java b/tmp/bb08703c-bff1-4b94-8fb0-e76cd20b66da_fixed.java
index 2a0dceb..18d1111 100644
--- a/tmp/d11e7998-b327-4fd5-9d62-842b2c63150e_buggy.java
+++ b/tmp/bb08703c-bff1-4b94-8fb0-e76cd20b66da_fixed.java
@@ -1,68 +1,194 @@
     private Position decode4(
             Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
         int index = 0;
 
         String type = values[index++].substring(5);
 
         if (!type.equals("STT") && !type.equals("ALT")) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
         position.set(Position.KEY_TYPE, type);
 
+        // Version FW
+        if (index < values.length) {
             position.set(Position.KEY_VERSION_FW, values[index++]);
+        } else {
+            return null; // Critical field, return null if missing
+        }
+
+        // Model
+        if (index < values.length) {
             index += 1; // model
+        } else {
+            return null; // Critical field, return null if missing
+        }
 
         Network network = new Network();
 
+        // Loop for 7 cell towers
         for (int i = 0; i < 7; i++) {
+            // Each cell tower block consumes 6 fields (cid, mcc, mnc, rssi/lac, lac/rssi, timing advance)
+            if (index + 5 < values.length) { // Check if 6 values are available for the current cell tower block
+                try {
                     int cid = Integer.parseInt(values[index++]);
                     int mcc = Integer.parseInt(values[index++]);
                     int mnc = Integer.parseInt(values[index++]);
                     int lac, rssi;
                     if (i == 0) {
                         rssi = Integer.parseInt(values[index++]);
                         lac = Integer.parseInt(values[index++]);
                     } else {
                         lac = Integer.parseInt(values[index++]);
                         rssi = Integer.parseInt(values[index++]);
                     }
                     index += 1; // timing advance
                     if (cid > 0) {
                         network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
                     }
+                } catch (NumberFormatException e) {
+                    // If parsing fails for any part of a cell tower, assume no more valid cell towers.
+                    // Break the loop and proceed with the rest of the message.
+                    break;
+                }
+            } else {
+                // Not enough values for a full cell tower block, stop processing cell towers.
+                break;
+            }
         }
 
         position.setNetwork(network);
 
+        // Battery
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
                 position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+            } catch (NumberFormatException e) {
+                index++; // Skip invalid number
+            }
+        } else {
+            index++; // Skip missing or empty
+        }
+
+        // Archive
+        if (index < values.length && !values[index].isEmpty()) {
             position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
+        } else {
+            index++; // Skip missing or empty
+        }
+
+        // Index
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
                 position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
+            } catch (NumberFormatException e) {
+                index++; // Skip invalid number
+            }
+        } else {
+            index++; // Skip missing or empty
+        }
+
+        // Status
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
                 position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
+            } catch (NumberFormatException e) {
+                index++; // Skip invalid number
+            }
+        } else {
+            index++; // Skip missing or empty
+        }
 
+        // Collaborative network
+        if (index < values.length) {
             if (values[index].length() == 3) {
                 index += 1; // collaborative network
+            } else {
+                index++; // consume the field even if not 3 chars, to keep index aligned
+            }
         }
 
+        // Date and Time (Fix for ParseException: Unparseable date: "")
+        // Expects two fields: date (yyyyMMdd) and time (HH:mm:ss)
+        if (index + 1 < values.length && !values[index].isEmpty() && !values[index + 1].isEmpty()) {
             DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
             dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
             position.setTime(dateFormat.parse(values[index++] + values[index++]));
+        } else {
+            // If date or time is missing or empty, skip both fields to avoid ParseException.
+            // Position time will default to current time in Traccar if not set.
+            index += 2;
+        }
 
+        // Latitude
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
                 position.setLatitude(Double.parseDouble(values[index++]));
+            } catch (NumberFormatException e) {
+                index++; // Skip invalid number
+            }
+        } else {
+            index++; // Skip missing or empty
+        }
+
+        // Longitude
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
                 position.setLongitude(Double.parseDouble(values[index++]));
+            } catch (NumberFormatException e) {
+                index++; // Skip invalid number
+            }
+        } else {
+            index++; // Skip missing or empty
+        }
+
+        // Speed
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
                 position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
+            } catch (NumberFormatException e) {
+                index++; // Skip invalid number
+            }
+        } else {
+            index++; // Skip missing or empty
+        }
+
+        // Course
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
                 position.setCourse(Double.parseDouble(values[index++]));
+            } catch (NumberFormatException e) {
+                index++; // Skip invalid number
+            }
+        } else {
+            index++; // Skip missing or empty
+        }
 
+        // Satellites
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
                 position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+            } catch (NumberFormatException e) {
+                index++; // Skip invalid number
+            }
+        } else {
+            index++; // Skip missing or empty
+        }
 
+        // Valid
+        if (index < values.length && !values[index].isEmpty()) {
             position.setValid(values[index++].equals("1"));
+        } else {
+            position.setValid(false); // Default to invalid if field is missing or empty
+            index++; // Skip missing or empty
+        }
 
         return position;
     }
\ No newline at end of file
