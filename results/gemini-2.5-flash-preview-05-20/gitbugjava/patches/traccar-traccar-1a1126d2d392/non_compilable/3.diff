diff --git a/tmp/d1dc93ef-3713-4522-8474-396c4b777bf8_buggy.java b/tmp/2e90244f-cb14-4443-b677-40971afcc56a_fixed.java
index 2a0dceb..81dd09b 100644
--- a/tmp/d1dc93ef-3713-4522-8474-396c4b777bf8_buggy.java
+++ b/tmp/2e90244f-cb14-4443-b677-40971afcc56a_fixed.java
@@ -1,68 +1,94 @@
     private Position decode4(
             Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
         int index = 0;
 
         String type = values[index++].substring(5);
 
         if (!type.equals("STT") && !type.equals("ALT")) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
         position.set(Position.KEY_TYPE, type);
 
         position.set(Position.KEY_VERSION_FW, values[index++]);
         index += 1; // model
 
         Network network = new Network();
 
         for (int i = 0; i < 7; i++) {
             int cid = Integer.parseInt(values[index++]);
             int mcc = Integer.parseInt(values[index++]);
             int mnc = Integer.parseInt(values[index++]);
             int lac, rssi;
             if (i == 0) {
                 rssi = Integer.parseInt(values[index++]);
                 lac = Integer.parseInt(values[index++]);
             } else {
                 lac = Integer.parseInt(values[index++]);
                 rssi = Integer.parseInt(values[index++]);
             }
             index += 1; // timing advance
             if (cid > 0) {
                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
             }
         }
 
         position.setNetwork(network);
 
         position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
         position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
         position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
         position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
 
-        if (values[index].length() == 3) {
-            index += 1; // collaborative network
+        // Handle the "collaborative network" field if present.
+        // Ensure index is within bounds before accessing values[index].
+        if (index < values.length && values[index].length() == 3) {
+            index += 1; // Consume collaborative network field
+        }
+
+        // Date and Time fields are expected next.
+        // The ParseException occurs when values[index] and values[index+1] are empty strings.
+        // We need to check if these fields exist and are not empty before attempting to parse.
+        String dateString = null;
+        String timeString = null;
+
+        if (index < values.length) { // Check if date field exists
+            dateString = values[index++];
+        }
+        if (index < values.length) { // Check if time field exists
+            timeString = values[index++];
         }
 
         DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
 
+        // Only parse if both date and time strings are present and not empty
+        if (dateString != null && timeString != null && !dateString.isEmpty() && !timeString.isEmpty()) {
+            position.setTime(dateFormat.parse(dateString + timeString));
+        } else {
+            // If date or time are missing or empty, set position time to server time as a fallback.
+            // This prevents ParseException on empty strings and ensures a timestamp is available.
+            position.setTime(deviceSession.getServerTime());
+        }
+
+        // The following lines might also need similar robustness checks if fields can be empty/missing
+        // based on the specific message type or protocol variant.
+        // However, the current problem only points to ParseException on date.
         position.setLatitude(Double.parseDouble(values[index++]));
         position.setLongitude(Double.parseDouble(values[index++]));
         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
         position.setCourse(Double.parseDouble(values[index++]));
 
         position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
 
         position.setValid(values[index++].equals("1"));
 
         return position;
     }
\ No newline at end of file
