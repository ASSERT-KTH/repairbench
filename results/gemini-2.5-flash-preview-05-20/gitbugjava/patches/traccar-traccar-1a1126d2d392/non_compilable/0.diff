diff --git a/tmp/5a7195af-a497-4bda-bffa-d7d99ef4a7e7_buggy.java b/tmp/eac2be18-0d28-4b85-b569-1589d4adc616_fixed.java
index 2a0dceb..f796b0a 100644
--- a/tmp/5a7195af-a497-4bda-bffa-d7d99ef4a7e7_buggy.java
+++ b/tmp/eac2be18-0d28-4b85-b569-1589d4adc616_fixed.java
@@ -1,68 +1,176 @@
+import org.traccar.model.CellTower;
+import org.traccar.model.Network;
+import org.traccar.model.Position;
+import org.traccar.session.DeviceSession;
+import org.traccar.helper.UnitsConverter;
+
+import java.net.SocketAddress;
+import java.text.DateFormat;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.TimeZone;
+
+import io.netty.channel.Channel;
+
+// Assuming getProtocolName() and getDeviceSession() are accessible within the class.
+// The provided snippet is a private method, so it belongs to a larger class.
+// For the purpose of this fix, these methods are assumed to exist.
+
+// Helper class for UnitsConverter as it's used in the original code.
+// In a real scenario, this would be an imported utility.
+class UnitsConverter {
+    public static double knotsFromKph(double kph) {
+        return kph / 1.852; // 1 knot = 1.852 km/h
+    }
+}
+
+
+public abstract class SuntechProtocolDecoder { // Class signature assumed for context
+    protected abstract String getProtocolName();
+    protected abstract DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String uniqueId);
+
     private Position decode4(
             Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
         int index = 0;
 
         String type = values[index++].substring(5);
 
         if (!type.equals("STT") && !type.equals("ALT")) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
         position.set(Position.KEY_TYPE, type);
 
+        if (index < values.length) { // Ensure version_fw exists
             position.set(Position.KEY_VERSION_FW, values[index++]);
+        } else {
+            index++; // Still advance index to match original behavior even if value is missing early
+        }
+
         index += 1; // model
 
         Network network = new Network();
 
         for (int i = 0; i < 7; i++) {
+            if (index + 5 < values.length) { // Ensure enough fields for one cell tower block
                 int cid = Integer.parseInt(values[index++]);
                 int mcc = Integer.parseInt(values[index++]);
                 int mnc = Integer.parseInt(values[index++]);
                 int lac, rssi;
                 if (i == 0) {
                     rssi = Integer.parseInt(values[index++]);
                     lac = Integer.parseInt(values[index++]);
                 } else {
                     lac = Integer.parseInt(values[index++]);
                     rssi = Integer.parseInt(values[index++]);
                 }
                 index += 1; // timing advance
                 if (cid > 0) {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
                 }
+            } else {
+                // If not enough fields for remaining cell towers, break or skip.
+                // To avoid ArrayIndexOutOfBoundsException for remaining iterations,
+                // and to prevent subsequent parsing errors due to shifted indexes.
+                // We advance index by 6 (max possible fields per loop) to ensure it's beyond expected
+                // cell tower block, and then break.
+                index += (7 - i) * 6; // Fast forward index for remaining loop iterations.
+                break;
+            }
         }
 
         position.setNetwork(network);
 
-        position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
-        position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
-        position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
-        position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
+        // Handle Battery
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));
+        }
+        index++;
 
-        if (values[index].length() == 3) {
+        // Handle Archive
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_ARCHIVE, values[index].equals("0") ? true : null);
+        }
+        index++;
+
+        // Handle Index
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_INDEX, Integer.parseInt(values[index]));
+        }
+        index++;
+
+        // Handle Status
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_STATUS, Integer.parseInt(values[index]));
+        }
+        index++;
+
+        // Handle collaborative network (optional field)
+        if (index < values.length && values[index].length() == 3) {
             index += 1; // collaborative network
         }
 
+        // Handle Date and Time
+        String dateValue = null;
+        String timeValue = null;
+        if (index < values.length) {
+            dateValue = values[index++];
+        }
+        if (index < values.length) {
+            timeValue = values[index++];
+        }
+        if (dateValue != null && timeValue != null && !dateValue.isEmpty() && !timeValue.isEmpty()) {
             DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
             dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
+            position.setTime(dateFormat.parse(dateValue + timeValue));
+        }
 
-        position.setLatitude(Double.parseDouble(values[index++]));
-        position.setLongitude(Double.parseDouble(values[index++]));
-        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
-        position.setCourse(Double.parseDouble(values[index++]));
+        // Handle Latitude
+        if (index < values.length && !values[index].isEmpty()) {
+            position.setLatitude(Double.parseDouble(values[index]));
+        }
+        index++;
 
-        position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+        // Handle Longitude
+        if (index < values.length && !values[index].isEmpty()) {
+            position.setLongitude(Double.parseDouble(values[index]));
+        }
+        index++;
 
-        position.setValid(values[index++].equals("1"));
+        // Handle Speed
+        if (index < values.length && !values[index].isEmpty()) {
+            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index])));
+        }
+        index++;
+
+        // Handle Course
+        if (index < values.length && !values[index].isEmpty()) {
+            position.setCourse(Double.parseDouble(values[index]));
+        }
+        index++;
+
+        // Handle Satellites
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));
+        }
+        index++;
+
+        // Handle Valid
+        if (index < values.length) { // Check if the field exists at all
+            position.setValid(values[index].equals("1"));
+        } else {
+            position.setValid(false); // Default to invalid if field is missing
+        }
+        index++;
 
         return position;
     }
+}
\ No newline at end of file
