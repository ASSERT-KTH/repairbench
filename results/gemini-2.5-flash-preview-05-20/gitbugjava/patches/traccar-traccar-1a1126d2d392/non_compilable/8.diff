diff --git a/tmp/77d4bce4-3aa2-4269-aa4e-dba4b20ea0d5_buggy.java b/tmp/9929a7ba-cc6e-4c0e-a8e0-50837d389be2_fixed.java
index 2a0dceb..08c1a30 100644
--- a/tmp/77d4bce4-3aa2-4269-aa4e-dba4b20ea0d5_buggy.java
+++ b/tmp/9929a7ba-cc6e-4c0e-a8e0-50837d389be2_fixed.java
@@ -1,68 +1,139 @@
     private Position decode4(
             Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
         int index = 0;
 
         String type = values[index++].substring(5);
 
         if (!type.equals("STT") && !type.equals("ALT")) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
         position.set(Position.KEY_TYPE, type);
 
+        try {
             position.set(Position.KEY_VERSION_FW, values[index++]);
+        } catch (IndexOutOfBoundsException e) {
+            Log.warning(e); // Assuming Log.warning is available in context
+        }
+
+        // Handle 'model' field, ensure index is within bounds before advancing
+        if (index < values.length) {
             index += 1; // model
+        }
+
 
         Network network = new Network();
 
+        // Loop for cell towers, each iteration consumes 6 fields
         for (int i = 0; i < 7; i++) {
+            try {
                 int cid = Integer.parseInt(values[index++]);
                 int mcc = Integer.parseInt(values[index++]);
                 int mnc = Integer.parseInt(values[index++]);
                 int lac, rssi;
                 if (i == 0) {
                     rssi = Integer.parseInt(values[index++]);
                     lac = Integer.parseInt(values[index++]);
                 } else {
                     lac = Integer.parseInt(values[index++]);
                     rssi = Integer.parseInt(values[index++]);
                 }
                 index += 1; // timing advance
                 if (cid > 0) {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
                 }
+            } catch (IndexOutOfBoundsException | NumberFormatException e) {
+                // If any cell tower field is missing or malformed, stop processing cell towers
+                Log.warning(e);
+                break;
+            }
         }
 
         position.setNetwork(network);
 
+        try {
             position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+        } catch (IndexOutOfBoundsException | NumberFormatException e) {
+            Log.warning(e);
+        }
+
+        try {
             position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
+        } catch (IndexOutOfBoundsException e) {
+            Log.warning(e);
+        }
+
+        try {
             position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
+        } catch (IndexOutOfBoundsException | NumberFormatException e) {
+            Log.warning(e);
+        }
+
+        try {
             position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
+        } catch (IndexOutOfBoundsException | NumberFormatException e) {
+            Log.warning(e);
+        }
 
-        if (values[index].length() == 3) {
+        // Handle 'collaborative network' field, ensure index is within bounds
+        try {
+            if (index < values.length && values[index].length() == 3) {
                 index += 1; // collaborative network
             }
+        } catch (IndexOutOfBoundsException e) {
+            Log.warning(e);
+        }
 
         DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
+
+        // Fix for ParseException: Unparseable date: ""
+        try {
             position.setTime(dateFormat.parse(values[index++] + values[index++]));
+        } catch (IndexOutOfBoundsException | ParseException e) {
+            Log.warning(e);
+            // Index is already advanced by values[index++] if they existed, so no explicit index advance needed here.
+        }
 
+        try {
             position.setLatitude(Double.parseDouble(values[index++]));
+        } catch (IndexOutOfBoundsException | NumberFormatException e) {
+            Log.warning(e);
+        }
+        try {
             position.setLongitude(Double.parseDouble(values[index++]));
+        } catch (IndexOutOfBoundsException | NumberFormatException e) {
+            Log.warning(e);
+        }
+        try {
             position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
+        } catch (IndexOutOfBoundsException | NumberFormatException e) {
+            Log.warning(e);
+        }
+        try {
             position.setCourse(Double.parseDouble(values[index++]));
+        } catch (IndexOutOfBoundsException | NumberFormatException e) {
+            Log.warning(e);
+        }
 
+        try {
             position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+        } catch (IndexOutOfBoundsException | NumberFormatException e) {
+            Log.warning(e);
+        }
 
+        try {
             position.setValid(values[index++].equals("1"));
+        } catch (IndexOutOfBoundsException e) {
+            Log.warning(e);
+        }
 
         return position;
     }
\ No newline at end of file
