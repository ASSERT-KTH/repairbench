diff --git a/tmp/4a98af35-19c4-430c-982f-f96e60775dc0_buggy.java b/tmp/f76ed11a-c84a-4a5e-9a11-094a8852881d_fixed.java
index 2a0dceb..43733ca 100644
--- a/tmp/4a98af35-19c4-430c-982f-f96e60775dc0_buggy.java
+++ b/tmp/f76ed11a-c84a-4a5e-9a11-094a8852881d_fixed.java
@@ -1,68 +1,179 @@
     private Position decode4(
             Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
         int index = 0;
 
+        // Ensure there are enough fields before accessing them
+        if (index >= values.length) {
+            return null;
+        }
         String type = values[index++].substring(5);
 
         if (!type.equals("STT") && !type.equals("ALT")) {
             return null;
         }
 
+        if (index >= values.length) { // Check for deviceSession ID
+            return null;
+        }
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
         position.set(Position.KEY_TYPE, type);
 
+        if (index >= values.length) { // Check for KEY_VERSION_FW
+            return null;
+        }
         position.set(Position.KEY_VERSION_FW, values[index++]);
+
+        if (index >= values.length) { // Check for model
+            return null;
+        }
         index += 1; // model
 
         Network network = new Network();
 
         for (int i = 0; i < 7; i++) {
+            // Each cell tower block consumes 6 fields: cid, mcc, mnc, (rssi/lac), (lac/rssi), timing advance
+            // Ensure there are enough fields for a full cell tower block
+            if (index + 5 >= values.length) {
+                // If not enough fields for a full 7 cell towers, stop processing cell tower data
+                break;
+            }
+            try {
                 int cid = Integer.parseInt(values[index++]);
                 int mcc = Integer.parseInt(values[index++]);
                 int mnc = Integer.parseInt(values[index++]);
                 int lac, rssi;
                 if (i == 0) {
                     rssi = Integer.parseInt(values[index++]);
                     lac = Integer.parseInt(values[index++]);
                 } else {
                     lac = Integer.parseInt(values[index++]);
                     rssi = Integer.parseInt(values[index++]);
                 }
                 index += 1; // timing advance
                 if (cid > 0) {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
                 }
+            } catch (NumberFormatException e) {
+                // If any cell tower field is not a valid number, assume remaining cell tower data is malformed
+                // and return null for the entire message.
+                return null;
+            }
         }
 
         position.setNetwork(network);
 
+        // Check for KEY_BATTERY
+        if (index >= values.length || values[index].isEmpty()) {
+            return null;
+        }
+        try {
             position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+        } catch (NumberFormatException e) {
+            return null;
+        }
+
+        // Check for KEY_ARCHIVE
+        if (index >= values.length || values[index].isEmpty()) {
+            return null;
+        }
         position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
+
+        // Check for KEY_INDEX
+        if (index >= values.length || values[index].isEmpty()) {
+            return null;
+        }
+        try {
             position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
+        } catch (NumberFormatException e) {
+            return null;
+        }
+
+        // Check for KEY_STATUS
+        if (index >= values.length || values[index].isEmpty()) {
+            return null;
+        }
+        try {
             position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
+        } catch (NumberFormatException e) {
+            return null;
+        }
 
-        if (values[index].length() == 3) {
+        // Check for collaborative network field
+        if (index < values.length && values[index].length() == 3) {
             index += 1; // collaborative network
         }
 
         DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
+
+        // Check if both date and time fields are available and not empty
+        // The date format expects `YYYYMMDDHH:mm:ss`, formed by concatenating two fields.
+        if (index + 1 >= values.length || values[index].isEmpty() || values[index + 1].isEmpty()) {
+            return null; // Date or time fields are missing or empty, cannot parse
+        }
         position.setTime(dateFormat.parse(values[index++] + values[index++]));
 
+        // Check for Latitude
+        if (index >= values.length || values[index].isEmpty()) {
+            return null;
+        }
+        try {
             position.setLatitude(Double.parseDouble(values[index++]));
+        } catch (NumberFormatException e) {
+            return null;
+        }
+
+        // Check for Longitude
+        if (index >= values.length || values[index].isEmpty()) {
+            return null;
+        }
+        try {
             position.setLongitude(Double.parseDouble(values[index++]));
+        } catch (NumberFormatException e) {
+            return null;
+        }
+
+        // Check for Speed
+        if (index >= values.length || values[index].isEmpty()) {
+            return null;
+        }
+        try {
             position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
+        } catch (NumberFormatException e) {
+            return null;
+        }
+
+        // Check for Course
+        if (index >= values.length || values[index].isEmpty()) {
+            return null;
+        }
+        try {
             position.setCourse(Double.parseDouble(values[index++]));
+        } catch (NumberFormatException e) {
+            return null;
+        }
 
+        // Check for KEY_SATELLITES
+        if (index >= values.length || values[index].isEmpty()) {
+            return null;
+        }
+        try {
             position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+        } catch (NumberFormatException e) {
+            return null;
+        }
 
+        // Check for Valid
+        if (index >= values.length || values[index].isEmpty()) {
+            return null;
+        }
         position.setValid(values[index++].equals("1"));
 
         return position;
     }
\ No newline at end of file
