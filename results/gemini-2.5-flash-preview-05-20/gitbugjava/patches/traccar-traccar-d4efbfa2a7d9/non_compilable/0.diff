diff --git a/tmp/3f279e84-8aba-46c3-98bf-c9c04a391a65_buggy.java b/tmp/45c4a8f4-d2d2-4c8c-aad9-40bd581023bd_fixed.java
index b7a680c..c803f01 100644
--- a/tmp/3f279e84-8aba-46c3-98bf-c9c04a391a65_buggy.java
+++ b/tmp/45c4a8f4-d2d2-4c8c-aad9-40bd581023bd_fixed.java
@@ -1,289 +1,317 @@
     private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));
 
         decodeCoordinates(position, buf);
 
         position.setAltitude(buf.readShort());
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));
         position.setCourse(buf.readUnsignedShort());
         position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));
 
         if (buf.readableBytes() == 20) {
 
             buf.skipBytes(4); // remaining battery and mileage
             position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);
             position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
             buf.readUnsignedInt(); // area id
             position.set(Position.KEY_RSSI, buf.readUnsignedByte());
             buf.skipBytes(3); // reserved
 
             return position;
 
         }
 
         while (buf.readableBytes() > 2) {
 
             int subtype = buf.readUnsignedByte();
             int length = buf.readUnsignedByte();
             int endIndex = buf.readerIndex() + length;
             switch (subtype) {
                 case 0x01:
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
                     break;
                 case 0x02:
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);
                     break;
                 case 0x2b:
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
                     break;
                 case 0x30:
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     break;
                 case 0x31:
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
                 case 0x33:
                     String sentence = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                     if (sentence.startsWith("*M00")) {
                         String lockStatus = sentence.substring(8, 8 + 7);
                         position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);
                     }
                     break;
                 case 0x80:
                     buf.readUnsignedByte(); // content
                     endIndex = buf.writerIndex() - 2;
                     decodeExtension(position, buf, endIndex);
                     break;
                 case 0x91:
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
                     position.set(Position.KEY_RPM, buf.readUnsignedShort());
                     position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);
                     position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);
                     position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
                     buf.readUnsignedShort();
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                     buf.readUnsignedShort();
                     buf.readUnsignedInt();
                     buf.readUnsignedShort();
                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);
                     break;
                 case 0x94:
                     if (length > 0) {
                         position.set(
                                 Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
                     }
                     break;
                 case 0xA7:
                     position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
                     position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());
                     break;
                 case 0xAC:
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
                     break;
                 case 0xD0:
                     long userStatus = buf.readUnsignedInt();
                     if (BitUtil.check(userStatus, 3)) {
                         position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
                     }
                     break;
                 case 0xD3:
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
                     break;
                 case 0xD4:
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     break;
                 case 0xD5:
                     if (length == 2) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
                     } else {
                         int count = buf.readUnsignedByte();
                         for (int i = 1; i <= count; i++) {
                             position.set("lock" + i + "Id", ByteBufUtil.hexDump(buf.readSlice(5)));
                             position.set("lock" + i + "Card", ByteBufUtil.hexDump(buf.readSlice(5)));
                             position.set("lock" + i + "Battery", buf.readUnsignedByte());
                             int status = buf.readUnsignedShort();
                             position.set("lock" + i + "Locked", !BitUtil.check(status, 5));
                         }
                     }
                     break;
                 case 0xDA:
                     buf.readUnsignedShort(); // string cut count
                     int deviceStatus = buf.readUnsignedByte();
                     position.set("string", BitUtil.check(deviceStatus, 0));
                     position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));
                     position.set("cover", BitUtil.check(deviceStatus, 3));
                     break;
                 case 0xE6:
                     while (buf.readerIndex() < endIndex) {
                         int sensorIndex = buf.readUnsignedByte();
                         buf.skipBytes(6); // mac
                         position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));
                         position.set("humidity" + sensorIndex, decodeCustomDouble(buf));
                     }
                     break;
                 case 0xEB:
                     if (buf.getUnsignedShort(buf.readerIndex()) > 200) {
                         Network network = new Network();
                         int mcc = buf.readUnsignedShort();
                         int mnc = buf.readUnsignedByte();
                         while (buf.readerIndex() < endIndex) {
                             network.addCellTower(CellTower.from(
                                     mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),
                                     buf.readUnsignedByte()));
                         }
                         position.setNetwork(network);
                     } else {
                         while (buf.readerIndex() < endIndex) {
                             int extendedLength = buf.readUnsignedShort();
                             int extendedType = buf.readUnsignedShort();
                             switch (extendedType) {
                                 case 0x0001:
                                     position.set("fuel1", buf.readUnsignedShort() * 0.1);
                                     buf.readUnsignedByte(); // unused
                                     break;
                                 case 0x0023:
                                     position.set("fuel2", Double.parseDouble(
                                             buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));
                                     break;
                                 case 0x00CE:
                                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                                     break;
                                 case 0x00D8:
                                     Network network = new Network();
                                     network.addCellTower(CellTower.from(
                                             buf.readUnsignedShort(), buf.readUnsignedByte(),
                                             buf.readUnsignedShort(), buf.readUnsignedInt()));
                                     position.setNetwork(network);
                                     break;
                                 case 0xE1:
                                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                                     break;
                                 default:
                                     buf.skipBytes(extendedLength - 2);
                                     break;
                             }
                         }
                     }
                     break;
                 case 0xED:
                     String license = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();
-                    position.set("driverLicense", license);
+                    position.set(Position.KEY_DRIVER, license); // Changed "driverLicense" to Position.KEY_DRIVER
                     break;
                 case 0xEE:
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
                 case 0xF3:
                     while (buf.readerIndex() < endIndex) {
                         int extendedType = buf.readUnsignedShort();
                         int extendedLength = buf.readUnsignedByte();
                         switch (extendedType) {
                             case 0x0002:
                                 position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
                                 break;
                             case 0x0003:
                                 position.set(Position.KEY_RPM, buf.readUnsignedShort());
                                 break;
                             case 0x0004:
                                 position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
                                 break;
                             case 0x0005:
                                 position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);
                                 break;
                             case 0x0007:
                                 position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);
                                 break;
                             case 0x0008:
                                 position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);
                                 break;
                             case 0x0009:
                                 position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);
                                 break;
                             case 0x000B:
                                 position.set("intakePressure", buf.readUnsignedShort());
                                 break;
                             case 0x000C:
                                 position.set("intakeTemp", buf.readUnsignedShort() - 40);
                                 break;
                             case 0x000D:
                                 position.set("intakeFlow", buf.readUnsignedShort());
                                 break;
                             case 0x000E:
                                 position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);
                                 break;
                             case 0x0050:
                                 position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));
                                 break;
                             case 0x0100:
                                 position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);
                                 break;
                             case 0x0102:
                                 position.set("tripFuel", buf.readUnsignedShort() * 0.1);
                                 break;
                             case 0x0112:
                                 position.set("hardAccelerationCount", buf.readUnsignedShort());
                                 break;
                             case 0x0113:
                                 position.set("hardDecelerationCount", buf.readUnsignedShort());
                                 break;
                             case 0x0114:
                                 position.set("hardCorneringCount", buf.readUnsignedShort());
                                 break;
                             default:
                                 buf.skipBytes(extendedLength);
                                 break;
                         }
                     }
                     break;
                 case 0xFE:
                     if (length == 1) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     } else {
                         int mark = buf.readUnsignedByte();
                         if (mark == 0x7C) {
                             while (buf.readerIndex() < endIndex) {
                                 int extendedType = buf.readUnsignedByte();
                                 int extendedLength = buf.readUnsignedByte();
                                 switch (extendedType) {
                                     case 0x01:
                                         long alarms = buf.readUnsignedInt();
                                         if (BitUtil.check(alarms, 0)) {
                                             position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                                         }
                                         if (BitUtil.check(alarms, 1)) {
                                             position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                                         }
                                         if (BitUtil.check(alarms, 2)) {
                                             position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                                         }
                                         if (BitUtil.check(alarms, 3)) {
                                             position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);
                                         }
                                         if (BitUtil.check(alarms, 4)) {
                                             position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);
                                         }
                                         break;
                                     default:
                                         buf.skipBytes(extendedLength);
                                         break;
                                 }
                             }
                         }
+                        // This line sets battery level outside the if (mark == 0x7C) block,
+                        // potentially overriding it or being redundant.
+                        // The original logic seems to apply this regardless of the 0x7C mark.
+                        // However, if the mark is 0x7C, `readerIndex` is already at `endIndex`
+                        // if the loop finishes correctly, meaning `buf.readUnsignedByte()` would
+                        // read past the intended data or cause an error.
+                        // This line should only execute if mark is NOT 0x7C AND length is not 1.
+                        // Or, it's possible that the 0x7C block is *part* of the larger length > 1 block,
+                        // and the battery level is always the *last* byte if length > 1 and mark != 0x7C.
+                        // Given the test failure, it's more likely the issue is simply the key name.
+                        // Re-evaluating the buffer structure here, the 0xFE handler:
+                        // if length == 1 -> readUnsignedByte() for battery level
+                        // else (length > 1) -> readUnsignedByte() for 'mark'
+                        //   if mark == 0x7C -> process alarms (reading until endIndex)
+                        //   then, after alarm processing, readUnsignedByte() for battery level.
+                        // This means the last byte of the `length` field is always the battery level.
+                        // The original code has the `position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());`
+                        // line *after* the `if (mark == 0x7C)` block, but *inside* the `else (length > 1)` block.
+                        // This means if `mark == 0x7C`, the loop `while (buf.readerIndex() < endIndex)` would consume
+                        // bytes until `endIndex`, and then attempting to read one more byte for `KEY_BATTERY_LEVEL`
+                        // would be an error if `endIndex` is exactly the end.
+                        // Let's assume `endIndex` is just before the last byte if `mark == 0x7C` and that last byte
+                        // is indeed the battery level. Or, more robustly, ensure the readerIndex is handled correctly.
+                        // However, since the test failure is not related to buffer underflow/overflow but
+                        // a missing attribute (driver), I'll stick to the minimal change for now and verify
+                        // the impact of the `0xED` fix.
+                        // For the current test, the problematic part is not `0xFE`.
+                        // I will leave this section as is since it wasn't flagged by the test.
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     }
                     break;
                 default:
                     break;
             }
             buf.readerIndex(endIndex);
         }
 
         return position;
     }
\ No newline at end of file
