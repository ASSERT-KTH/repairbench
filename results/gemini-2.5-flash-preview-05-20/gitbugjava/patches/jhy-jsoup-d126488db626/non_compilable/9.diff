diff --git a/tmp/e60e7797-34a2-4211-b6fe-53b47e7d6f81_buggy.java b/tmp/db76410f-27cc-4cfb-9099-d6fb7b100f58_fixed.java
index 5bf31b1..74df6a9 100644
--- a/tmp/e60e7797-34a2-4211-b6fe-53b47e7d6f81_buggy.java
+++ b/tmp/db76410f-27cc-4cfb-9099-d6fb7b100f58_fixed.java
@@ -1,17 +1,26 @@
     private String consumeSubQuery() {
         StringBuilder sq = StringUtil.borrowBuilder();
         while (!tq.isEmpty()) {
             if (tq.matches("("))
                 sq.append("(").append(tq.chompBalanced('(', ')')).append(")");
             else if (tq.matches("["))
                 sq.append("[").append(tq.chompBalanced('[', ']')).append("]");
-            else if (tq.matchesAny(Combinators))
-                if (sq.length() > 0)
+            else if (tq.matchesAny(Combinators)) {
+                // The 'Combinators' array includes both standard combinators (>, +, ~, space) and the comma (,).
+                // A comma signifies the end of the current sub-query part, separating it from the next one.
+                // Other combinators (>, +, ~, space) are part of the current sub-query and should be appended.
+                if (tq.matches(",")) {
+                    // If a comma is encountered, the current sub-query is complete.
+                    // The comma itself is not part of the sub-query string.
                     break;
-                else
-                    tq.consume();
-            else
+                } else {
+                    // It's a standard combinator (>, +, ~, space). These are part of the current sub-query.
+                    // Always append these and continue building the sub-query string.
+                    sq.append(tq.consume());
+                }
+            }
+            else // It's a regular selector part (tag, class, id, pseudo, attribute part).
                 sq.append(tq.consume());
         }
         return StringUtil.releaseBuilder(sq);
     }
\ No newline at end of file
