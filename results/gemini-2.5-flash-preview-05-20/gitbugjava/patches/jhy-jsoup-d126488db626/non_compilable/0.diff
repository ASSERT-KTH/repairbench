diff --git a/tmp/0cc90a20-307f-493a-81df-20f364e7e8ee_buggy.java b/tmp/f5114f41-78e2-49e9-9220-9a63c6f8eb42_fixed.java
index 5bf31b1..8f8e5c1 100644
--- a/tmp/0cc90a20-307f-493a-81df-20f364e7e8ee_buggy.java
+++ b/tmp/f5114f41-78e2-49e9-9220-9a63c6f8eb42_fixed.java
@@ -1,17 +1,24 @@
     private String consumeSubQuery() {
         StringBuilder sq = StringUtil.borrowBuilder();
         while (!tq.isEmpty()) {
-            if (tq.matches("("))
+            if (tq.matches("(")) {
+                // Consume balanced parentheses, e.g., :not(a[href])
                 sq.append("(").append(tq.chompBalanced('(', ')')).append(")");
-            else if (tq.matches("["))
+            } else if (tq.matches("[")) {
+                // Consume balanced brackets, e.g., [attr=val]
                 sq.append("[").append(tq.chompBalanced('[', ']')).append("]");
-            else if (tq.matchesAny(Combinators))
-                if (sq.length() > 0)
+            } else if (tq.matches(",")) {
+                // A comma separates sub-queries, so we break here to return the current sub-query.
+                // The comma itself is a separator and not part of the sub-query returned by this method.
                 break;
-                else
-                    tq.consume();
-            else
+            } else if (tq.matchesAny(QueryParser.Combinators)) {
+                // Combinators (space, >, +, ~) are part of the sub-query and should be appended.
+                // The previous logic would incorrectly discard leading combinators or break prematurely.
                 sq.append(tq.consume());
+            } else {
+                // Consume general selector parts (e.g., tag names, classes, ids, pseudo-selectors)
+                sq.append(tq.consume());
+            }
         }
         return StringUtil.releaseBuilder(sq);
     }
\ No newline at end of file
