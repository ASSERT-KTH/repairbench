diff --git a/tmp/5082a608-da86-4e78-863b-e91c5ee04a7a_buggy.java b/tmp/564209dc-7f93-4b28-bb5f-a07b5e9b6648_fixed.java
index acd5eb5..25b3008 100644
--- a/tmp/5082a608-da86-4e78-863b-e91c5ee04a7a_buggy.java
+++ b/tmp/564209dc-7f93-4b28-bb5f-a07b5e9b6648_fixed.java
@@ -1,32 +1,35 @@
     @Override
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
             trimTrailing = trimLikeBlock && nextSibling() == null;
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             Node prev = previousSibling();
             boolean isBlank = isBlank();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, from re-parenting
                 || (prev instanceof Element && ((Element) prev).isBlock())
                 ;
             if (couldSkip && isBlank) return;
 
+            // Indentation logic:
+            // The condition (siblingIndex == 0 && ... && !isBlank) was incorrect.
+            // A blank text node at the start of a block should still cause an indent.
             if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
+                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock()) || // Fix: removed '&& !isBlank'
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                 (siblingIndex > 0 && isNode(prev, "br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
