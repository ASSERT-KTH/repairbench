diff --git a/tmp/3c0f085a-c81a-4fd3-bc07-e6fed8d983a3_buggy.java b/tmp/a348ffcc-91be-4dee-93dd-bcc3c08385a3_fixed.java
index ee599aa..f00beea 100644
--- a/tmp/3c0f085a-c81a-4fd3-bc07-e6fed8d983a3_buggy.java
+++ b/tmp/a348ffcc-91be-4dee-93dd-bcc3c08385a3_fixed.java
@@ -1,50 +1,127 @@
+import io.netty.buffer.ByteBuf;
+import org.traccar.helper.BitUtil;
+import org.traccar.model.CellTower;
+import org.traccar.model.Network;
+import org.traccar.model.Position;
+
+// Assuming MSG_GPS_LBS_6, MSG_GPS_LBS_7, MSG_LBS_ALARM are defined as constants
+// in the surrounding class or imported statically.
+// Example:
+// private static final int MSG_GPS_LBS_6 = 0x26;
+// private static final int MSG_GPS_LBS_7 = 0x27;
+// private static final int MSG_LBS_ALARM = 0xA4;
+
+public class Gt06ProtocolDecoder { // Class structure for context, not part of the fix
+
+    // Placeholder for BitUtil if not provided
+    static class BitUtil {
+        public static boolean check(int value, int bit) {
+            return ((value >> bit) & 1) == 1;
+        }
+        public static int to(int value, int bit) {
+            return value & ~(1 << bit); // Clears the specified bit
+        }
+    }
+
+    // Placeholder for constants if not provided
+    private static final int MSG_GPS_LBS_6 = 0x26;
+    private static final int MSG_GPS_LBS_7 = 0x27;
+    private static final int MSG_LBS_ALARM = 0xA4;
+
+
     private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {
 
         int length = 0;
         if (hasLength) {
-            length = buf.readUnsignedByte();
+            if (buf.readableBytes() < 1) { // Ensure there's a length byte to read
+                return false;
+            }
+            length = buf.readUnsignedByte(); // Read LBS data length
             if (length == 0) {
-                boolean zeroedData = true;
-                for (int i = buf.readerIndex() + 9; i < buf.readerIndex() + 45 && i < buf.writerIndex(); i++) {
-                    if (buf.getByte(i) != 0) {
-                        zeroedData = false;
-                        break;
-                    }
-                }
-                if (zeroedData) {
+                // If LBS data length is 0, it typically indicates that the LBS block
+                // (often a fixed size of 45 bytes in GT06 variants) is zeroed out.
+                // These 45 bytes (or fewer if not enough readable) must be consumed
+                // to correctly advance the buffer's reader index for subsequent data.
                 buf.skipBytes(Math.min(buf.readableBytes(), 45));
+                return false; // No valid LBS data was decoded.
             }
+        }
+
+        // Minimum LBS data (MCC + MNC + LAC + CID) is 8 bytes.
+        // Check if there are enough bytes for the minimum LBS data block before proceeding.
+        // This prevents IndexOutOfBoundsException if hasLength is false and buffer is too short.
+        // If hasLength is true, 'length' implicitly defines the minimum readable bytes for this block.
+        // We only check if length is not explicitly known from the packet (i.e. hasLength is false)
+        // or if the given length is less than the minimum required for the next section.
+        if (!hasLength && buf.readableBytes() < 8) {
             return false;
         }
-        }
+
+        // Calculate bytes consumed by LBS data (MCC, MNC, LAC, CID)
+        int bytesConsumed = 0;
 
         int mcc = buf.readUnsignedShort();
+        bytesConsumed += 2;
+
         int mnc;
         if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {
             mnc = buf.readUnsignedShort();
+            bytesConsumed += 2;
         } else {
             mnc = buf.readUnsignedByte();
+            bytesConsumed += 1;
         }
+
         int lac;
         if (type == MSG_LBS_ALARM) {
             lac = buf.readInt();
+            bytesConsumed += 4;
         } else {
             lac = buf.readUnsignedShort();
+            bytesConsumed += 2;
         }
+
         long cid;
         if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {
             cid = buf.readLong();
+            bytesConsumed += 8;
         } else if (type == MSG_GPS_LBS_6) {
             cid = buf.readUnsignedInt();
+            bytesConsumed += 4;
         } else {
-            cid = buf.readUnsignedMedium();
+            cid = buf.readUnsignedMedium(); // Reads 3 bytes
+            bytesConsumed += 3;
         }
 
         position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));
 
-        if (length > 9) {
-            buf.skipBytes(length - 9);
+        // If hasLength is true, 'length' represents the total length of the LBS data block
+        // (including MCC, MNC, LAC, CID, Signal, Language, etc.).
+        // Skip any remaining bytes in this block that were not explicitly parsed.
+        // This ensures the buffer's readerIndex is correctly advanced to the next data segment.
+        if (hasLength && length > bytesConsumed) {
+            int bytesToSkip = length - bytesConsumed;
+            if (buf.readableBytes() >= bytesToSkip) { // Ensure there are enough bytes to skip
+                 buf.skipBytes(bytesToSkip);
+            } else {
+                // Not enough bytes to skip the remaining reported length.
+                // This indicates malformed data, so we should fail.
+                return false;
+            }
+        } else if (!hasLength) {
+            // If hasLength is false, the LBS data length is implicit.
+            // Assume 2 bytes for signal and language always follow the parsed MCC/MNC/LAC/CID.
+            // This is a common pattern for GT06 variants where LBS length is not explicitly provided.
+            int expectedTrailingBytes = 2; // For signal and language
+            if (buf.readableBytes() >= expectedTrailingBytes) {
+                buf.skipBytes(expectedTrailingBytes);
+            } else {
+                // Not enough bytes for expected trailing data (signal/language).
+                // This indicates malformed data, so we should fail.
+                return false;
+            }
         }
 
         return true;
     }
+}
\ No newline at end of file
