diff --git a/tmp/aa3bfc70-381d-48bd-a396-a3c956d5201a_buggy.java b/tmp/c763d5aa-5474-4db3-b403-d855b1b89187_fixed.java
index ee599aa..0849f5f 100644
--- a/tmp/aa3bfc70-381d-48bd-a396-a3c956d5201a_buggy.java
+++ b/tmp/c763d5aa-5474-4db3-b403-d855b1b89187_fixed.java
@@ -1,50 +1,131 @@
+import io.netty.buffer.ByteBuf;
+import org.traccar.helper.BitUtil;
+import org.traccar.model.CellTower;
+import org.traccar.model.Network;
+import org.traccar.model.Position;
+
+// Assuming these constants are defined elsewhere in the class or imported statically
+// private static final int MSG_LBS_ALARM = 0xA0;
+// private static final int MSG_GPS_LBS_6 = 0x23;
+// private static final int MSG_GPS_LBS_7 = 0x27;
+// private static final int MSG_LBS = 0x12;
+// private static final int MSG_LBS_2 = 0x1C;
+// private static final int MSG_LBS_3 = 0x1D;
+// private static final int MSG_LBS_4 = 0x1E;
+// private static final int MSG_LBS_5 = 0x1A;
+
+class Gt06ProtocolDecoder { // Class context for constants and imports
+    // Dummy constants for compilation, these would be in the actual Gt06ProtocolDecoder class
+    private static final int MSG_LBS_ALARM = 0xA0;
+    private static final int MSG_GPS_LBS_6 = 0x23;
+    private static final int MSG_GPS_LBS_7 = 0x27;
+    private static final int MSG_LBS = 0x12;
+    private static final int MSG_LBS_2 = 0x1C;
+    private static final int MSG_LBS_3 = 0x1D;
+    private static final int MSG_LBS_4 = 0x1E;
+    private static final int MSG_LBS_5 = 0x1A;
+
     private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {
 
-        int length = 0;
+        int length;
         if (hasLength) {
-            length = buf.readUnsignedByte();
+            // Ensure there's at least one byte to read for length itself
+            if (buf.readableBytes() < 1) {
+                return false;
+            }
+            length = buf.readUnsignedByte(); // Length of the LBS data payload (excluding this byte)
             if (length == 0) {
                 boolean zeroedData = true;
+                // This section checks for 36 zero bytes, starting 9 bytes after the length byte.
+                // The current readerIndex() is immediately after the 'length' byte.
+                // Ensure there are enough bytes to perform the check.
+                if (buf.readableBytes() >= 45) { // Check if there are at least 45 bytes for the assumed LBS block
                     for (int i = buf.readerIndex() + 9; i < buf.readerIndex() + 45 && i < buf.writerIndex(); i++) {
                         if (buf.getByte(i) != 0) {
                             zeroedData = false;
                             break;
                         }
                     }
                     if (zeroedData) {
+                        // Skip the 45 bytes, as they are part of the 'empty' LBS block.
                         buf.skipBytes(Math.min(buf.readableBytes(), 45));
                     }
+                } else {
+                    // If length is 0, but not enough bytes for the 45-byte block for zeroed data check,
+                    // consume any remaining bytes to avoid issues with subsequent decoders and return false.
+                    buf.skipBytes(buf.readableBytes());
+                }
+                return false; // In all 'length == 0' cases, the LBS is considered invalid or empty.
+            }
+        } else { // if hasLength is false (e.g., MSG_LBS, MSG_GPS_LBS_7, MSG_GPS_LBS_6, MSG_LBS_3, MSG_LBS_4, MSG_LBS_5)
+            // In these cases, the LBS data does not have its own length byte.
+            // The 'length' variable should reflect the total readable bytes for the LBS payload in the buffer.
+            length = buf.readableBytes();
+        }
+
+        // Calculate minimum bytes required for MCC, MNC, LAC, CID based on type.
+        // This is the minimum *payload* length that must be present.
+        int minimumPayloadLength;
+        switch (type) {
+            case MSG_LBS_ALARM: // mcc(2) + mnc(min 1) + lac(4) + cid(8) = 15
+                minimumPayloadLength = 2 + 1 + 4 + 8;
+                break;
+            case MSG_GPS_LBS_6: // mcc(2) + mnc(2) + lac(2) + cid(4) = 10
+                minimumPayloadLength = 2 + 2 + 2 + 4;
+                break;
+            case MSG_GPS_LBS_7: // mcc(2) + mnc(min 1) + lac(2) + cid(8) = 13
+                minimumPayloadLength = 2 + 1 + 2 + 8;
+                break;
+            default: // MSG_LBS (0x12), MSG_LBS_2 (0x1C), MSG_LBS_3 (0x1D), MSG_LBS_4 (0x1E), MSG_LBS_5 (0x1A)
+                // mcc(2) + mnc(1) + lac(2) + cid(3) = 8
+                minimumPayloadLength = 2 + 1 + 2 + 3;
+                break;
+        }
+
+        // Check if there are enough bytes in the buffer for the core LBS fields based on the determined length.
+        // If not enough data, return false and skip the potentially partial data.
+        if (length < minimumPayloadLength) {
+            buf.skipBytes(length); // Consume the partial LBS data to prevent issues with subsequent decoders
             return false;
         }
-        }
+
+        // Store the reader index to calculate bytes consumed later.
+        int initialReaderIndex = buf.readerIndex();
 
         int mcc = buf.readUnsignedShort();
         int mnc;
         if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {
             mnc = buf.readUnsignedShort();
         } else {
             mnc = buf.readUnsignedByte();
         }
         int lac;
         if (type == MSG_LBS_ALARM) {
             lac = buf.readInt();
         } else {
             lac = buf.readUnsignedShort();
         }
         long cid;
         if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {
             cid = buf.readLong();
         } else if (type == MSG_GPS_LBS_6) {
             cid = buf.readUnsignedInt();
         } else {
             cid = buf.readUnsignedMedium();
         }
 
         position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));
 
-        if (length > 9) {
-            buf.skipBytes(length - 9);
+        // Calculate actual bytes consumed by reading MCC, MNC, LAC, CID.
+        int currentBytesRead = buf.readerIndex() - initialReaderIndex;
+
+        // Skip any remaining bytes in the LBS data block based on its declared total length.
+        // 'length' holds the total expected payload length for the LBS data block.
+        // 'currentBytesRead' is what we just successfully read for the core fields.
+        if (length > currentBytesRead) {
+            buf.skipBytes(length - currentBytesRead);
         }
 
         return true;
     }
+}
\ No newline at end of file
