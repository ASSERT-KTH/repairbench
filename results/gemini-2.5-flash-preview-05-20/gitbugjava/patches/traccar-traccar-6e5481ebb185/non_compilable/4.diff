diff --git a/tmp/2a77c1c1-5492-4e99-a978-af6674e9548d_buggy.java b/tmp/55617b07-0bd4-4b72-a247-7fd5034bcdf6_fixed.java
index ee599aa..547a41f 100644
--- a/tmp/2a77c1c1-5492-4e99-a978-af6674e9548d_buggy.java
+++ b/tmp/55617b07-0bd4-4b72-a247-7fd5034bcdf6_fixed.java
@@ -1,50 +1,54 @@
     private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {
 
         int length = 0;
         if (hasLength) {
             length = buf.readUnsignedByte();
             if (length == 0) {
-                boolean zeroedData = true;
-                for (int i = buf.readerIndex() + 9; i < buf.readerIndex() + 45 && i < buf.writerIndex(); i++) {
-                    if (buf.getByte(i) != 0) {
-                        zeroedData = false;
-                        break;
-                    }
-                }
-                if (zeroedData) {
+                // If length is 0, the LBS data is considered absent or invalid.
+                // However, some devices send a fixed-size block of zeroed data (e.g., 45 bytes)
+                // as a placeholder. We must consume these bytes to ensure the buffer is
+                // correctly positioned for subsequent data in the message.
+                // Regardless of whether they are truly zeroed or not, we signal that
+                // no valid LBS data could be decoded.
                 buf.skipBytes(Math.min(buf.readableBytes(), 45));
-                }
                 return false;
             }
         }
 
         int mcc = buf.readUnsignedShort();
         int mnc;
         if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {
             mnc = buf.readUnsignedShort();
         } else {
             mnc = buf.readUnsignedByte();
         }
         int lac;
         if (type == MSG_LBS_ALARM) {
             lac = buf.readInt();
         } else {
             lac = buf.readUnsignedShort();
         }
         long cid;
         if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {
             cid = buf.readLong();
         } else if (type == MSG_GPS_LBS_6) {
             cid = buf.readUnsignedInt();
         } else {
             cid = buf.readUnsignedMedium();
         }
 
         position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));
 
+        // The '9' here is likely a hardcoded expected minimum LBS data length
+        // (e.g., 2 bytes MCC + 1 byte MNC + 2 bytes LAC + 4 bytes CID = 9 bytes).
+        // If the actual 'length' value indicates more data than the fixed fields,
+        // the excess bytes should be skipped.
+        // This '9' might need to be dynamic based on the actual bytes read for MCC, MNC, LAC, CID
+        // if this part causes issues with other packet types, but for now, we assume it's consistent.
+        // The primary bug was in the length == 0 handling.
         if (length > 9) {
             buf.skipBytes(length - 9);
         }
 
         return true;
     }
