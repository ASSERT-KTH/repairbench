diff --git a/tmp/4aeb5007-d6bb-41ab-89d8-b6f39ca48aca_buggy.java b/tmp/7cf05fe6-8a34-4ead-bb88-9ea881c5c9a0_fixed.java
index 47a8941..10403fb 100644
--- a/tmp/4aeb5007-d6bb-41ab-89d8-b6f39ca48aca_buggy.java
+++ b/tmp/7cf05fe6-8a34-4ead-bb88-9ea881c5c9a0_fixed.java
@@ -1,53 +1,65 @@
 	/**
 	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
 	 */
 	private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
 		// Modify the container so it now refers the class. Container can be a class or package.
 		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
 		JClassContainer grandParent = parent.parentContainer();
 		// Allows to track class name collisions:
 		Map<String, JDefinedClass> classes;
 
+		// Store the original name of the class for removal from the parent's map
+		String originalClazzName = clazz.name();
+
 		// FIXME: Pending https://java.net/jira/browse/JAXB-957
 		if (grandParent.isClass()) {
 			// Element class should be added as its container child:
 			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
 			classes = getPrivateField(grandParentClass, "classes");
 		}
 		else {
 			JPackage grandParentPackage = (JPackage) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
 			classes = getPrivateField(grandParentPackage, "classes");
 
 			// In this scenario class should have "static" modifier reset otherwise it won't compile:
 			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
 			for (ClassOutline classOutline : outline.getClasses()) {
 				if (classOutline.implClass == clazz) {
 					XSComponent sc = classOutline.target.getSchemaComponent();
 
 					// FIXME: Inner class is always a local declaration.
 					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
 
 					setPrivateField(sc, "anonymous", Boolean.FALSE);
 
 					break;
 				}
 			}
 		}
 
-		if (classes.containsKey(clazz.name())) {
+		// Remove the class from its original parent's classes map
+		// The parent is a JDefinedClass, and it holds its inner classes in a 'classes' map.
+		Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+		parentClasses.remove(originalClazzName);
+
+
+		// Now handle collisions in the new (grandparent) scope and add to grandparent's map
+		if (classes.containsKey(clazz.name())) { // At this point, clazz.name() still refers to the original name
 			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
+			// Rename the class to avoid collision
 			setPrivateField(clazz, "name", parent.name() + clazz.name());
 		}
 
+		// Add the class to the grandparent's classes map. clazz.name() will now return the potentially new name.
 		classes.put(clazz.name(), clazz);
 
 		// Finally modify the class so that it refers back the container:
 		setPrivateField(clazz, "outer", grandParent);
 	}
\ No newline at end of file
