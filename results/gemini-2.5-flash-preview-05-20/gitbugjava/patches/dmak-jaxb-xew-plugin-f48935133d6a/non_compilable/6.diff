diff --git a/tmp/24a7f9bc-dcf1-4e18-bf8c-69840794061b_buggy.java b/tmp/b7179d4c-9163-4621-99eb-16969209a720_fixed.java
index 47a8941..3600766 100644
--- a/tmp/24a7f9bc-dcf1-4e18-bf8c-69840794061b_buggy.java
+++ b/tmp/b7179d4c-9163-4621-99eb-16969209a720_fixed.java
@@ -1,53 +1,79 @@
 	/**
 	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
 	 */
 	private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
 		// Modify the container so it now refers the class. Container can be a class or package.
 		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
 		JClassContainer grandParent = parent.parentContainer();
 		// Allows to track class name collisions:
 		Map<String, JDefinedClass> classes;
 
 		// FIXME: Pending https://java.net/jira/browse/JAXB-957
 		if (grandParent.isClass()) {
 			// Element class should be added as its container child:
 			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
 			classes = getPrivateField(grandParentClass, "classes");
 		}
 		else {
 			JPackage grandParentPackage = (JPackage) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
 			classes = getPrivateField(grandParentPackage, "classes");
 
 			// In this scenario class should have "static" modifier reset otherwise it won't compile:
 			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
 			for (ClassOutline classOutline : outline.getClasses()) {
 				if (classOutline.implClass == clazz) {
 					XSComponent sc = classOutline.target.getSchemaComponent();
 
 					// FIXME: Inner class is always a local declaration.
 					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
 
 					setPrivateField(sc, "anonymous", Boolean.FALSE);
 
 					break;
 				}
 			}
 		}
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+		// --- Start of fix for robust name collision handling ---
+		String originalSimpleClassName = clazz.name(); // e.g., "Inner"
+		String parentSimpleName = parent.name();       // e.g., "Outer"
+
+		String effectiveClassName = originalSimpleClassName; // Proposed name starts with the original simple name
+
+		// First, check if the original simple name conflicts with an existing class in the grandparent's scope
+		if (classes.containsKey(effectiveClassName)) {
+			// If it conflicts, try the "parent name + original simple name" strategy
+			effectiveClassName = parentSimpleName + originalSimpleClassName;
+
+			// If this new name also conflicts, we need to make it unique by appending a counter.
+			String baseNameForCollision = effectiveClassName; // e.g., "OuterInner"
+			int counter = 0;
+			// Keep trying names until a unique one is found
+			while (classes.containsKey(effectiveClassName)) {
+				counter++;
+				effectiveClassName = baseNameForCollision + "_" + counter; // e.g., "OuterInner_1", "OuterInner_2"
+			}
+		}
+
+		// If the determined unique name is different from the class's current name, update the class's name.
+		// This prevents unnecessary calls to setPrivateField if no renaming occurred.
+		if (!effectiveClassName.equals(originalSimpleClassName)) {
+			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + effectiveClassName);
+			setPrivateField(clazz, "name", effectiveClassName);
 		}
+		// --- End of fix ---
 
+		// Finally, add the class to the container's map using its now unique and updated name.
+		// clazz.name() will now return the `effectiveClassName`.
 		classes.put(clazz.name(), clazz);
 
 		// Finally modify the class so that it refers back the container:
 		setPrivateField(clazz, "outer", grandParent);
 	}
\ No newline at end of file
