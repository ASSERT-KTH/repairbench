diff --git a/tmp/a96cebb8-c131-4031-94af-be625259548a_buggy.java b/tmp/8bf5da70-0ff0-4ad4-a20f-2b2104933044_fixed.java
index 144f6a9..9e9961a 100644
--- a/tmp/a96cebb8-c131-4031-94af-be625259548a_buggy.java
+++ b/tmp/8bf5da70-0ff0-4ad4-a20f-2b2104933044_fixed.java
@@ -1,394 +1,495 @@
     private Object decodeExtended(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {
             deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         buf.readUnsignedShort(); // length
         int type = buf.readUnsignedByte();
 
         if (type == MSG_STRING_INFO) {
 
             buf.readUnsignedInt(); // server flag
             String data;
-            if (buf.readUnsignedByte() == 1) {
-                data = buf.readSlice(buf.readableBytes() - 6).toString(StandardCharsets.US_ASCII);
+            
+            // Calculate the length of the string data, excluding a fixed suffix of 6 bytes.
+            // Ensure there are enough readable bytes for the encoding type byte and the string data.
+            if (buf.readableBytes() < 1 + 6) { // At least 1 byte for encoding type + 6 bytes for suffix
+                return null; // Malformed packet, not enough data to read string properly.
+            }
+
+            byte encodingType = buf.readUnsignedByte();
+            int stringLength = buf.readableBytes() - 6;
+
+            if (stringLength < 0) { // If remaining bytes are less than 6, it's malformed for this string type
+                return null;
+            }
+            
+            // Ensure there are enough bytes in the buffer to read the determined stringLength
+            if (buf.readableBytes() < stringLength) {
+                return null; // Not enough bytes for the string
+            }
+
+            if (encodingType == 1) {
+                data = buf.readSlice(stringLength).toString(StandardCharsets.US_ASCII);
             } else {
-                data = buf.readSlice(buf.readableBytes() - 6).toString(StandardCharsets.UTF_16BE);
+                data = buf.readSlice(stringLength).toString(StandardCharsets.UTF_16BE);
             }
 
             Parser parser = new Parser(PATTERN_LOCATION, data);
 
             if (parser.matches()) {
                 position.setValid(true);
                 position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));
                 position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));
                 position.setCourse(parser.nextDouble());
                 position.setSpeed(parser.nextDouble());
                 position.setTime(parser.nextDateTime(Parser.DateTimeFormat.YMD_HMS));
             } else {
                 getLastLocation(position, null);
                 position.set(Position.KEY_RESULT, data);
             }
 
             return position;
 
         } else if (type == MSG_INFO) {
 
             int subType = buf.readUnsignedByte();
 
             getLastLocation(position, null);
 
             if (subType == 0x00) {
 
                 position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort() * 0.01);
                 return position;
 
             } else if (subType == 0x05) {
 
                 if (buf.readableBytes() >= 6 + 1 + 6) {
                     DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))
                             .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())
                             .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());
                     position.setDeviceTime(dateBuilder.getDate());
                 }
 
                 int flags = buf.readUnsignedByte();
                 position.set(Position.KEY_DOOR, BitUtil.check(flags, 0));
                 position.set(Position.PREFIX_IO + 1, BitUtil.check(flags, 2));
                 return position;
 
             } else if (subType == 0x0a) {
 
                 buf.skipBytes(8); // imei
                 buf.skipBytes(8); // imsi
                 position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)).replaceAll("f", ""));
                 return position;
 
             } else if (subType == 0x0d) {
 
-                if (buf.getByte(buf.readerIndex()) != '!') {
+                // Check if there's enough data to even attempt reading the first byte
+                if (buf.readableBytes() > 0 && buf.getByte(buf.readerIndex()) != '!') {
                     buf.skipBytes(6);
                 }
 
+                // Calculate the length for the parser's string.
+                // Assuming 4 bytes for checksum and 2 for footer.
+                int dataLengthForParser = buf.readableBytes() - 4 - 2;
+
+                // Only attempt to parse if there's a valid positive length of data for the parser
+                if (dataLengthForParser > 0 && buf.readableBytes() >= dataLengthForParser) {
                     Parser parser = new Parser(PATTERN_FUEL, buf.toString(
-                        buf.readerIndex(), buf.readableBytes() - 4 - 2, StandardCharsets.US_ASCII));
-                if (!parser.matches()) {
-                    return null;
-                }
-
+                            buf.readerIndex(), dataLengthForParser, StandardCharsets.US_ASCII));
+                    if (parser.matches()) {
                         position.set(Position.PREFIX_TEMP + 1, parser.nextDouble(0));
                         position.set(Position.KEY_FUEL_LEVEL, parser.nextDouble(0));
-
+                    }
+                }
+                // Return position even if parsing failed, as getLastLocation was already called.
                 return position;
 
             } else if (subType == 0x1b) {
 
-                if (Character.isLetter(buf.getUnsignedByte(buf.readerIndex()))) {
-                    String data = buf.readCharSequence(buf.readableBytes() - 6, StandardCharsets.US_ASCII).toString();
+                // Ensure enough readable bytes before attempting to read the first byte
+                if (buf.readableBytes() > 0 && Character.isLetter(buf.getUnsignedByte(buf.readerIndex()))) {
+                    int stringLength = buf.readableBytes() - 6; // Assuming 6 bytes for suffix
+                    if (stringLength >= 0 && buf.readableBytes() >= stringLength) {
+                        String data = buf.readCharSequence(stringLength, StandardCharsets.US_ASCII).toString();
                         position.set("serial", data.trim());
                     } else {
+                        buf.skipBytes(buf.readableBytes()); // Not enough bytes, consume remaining to prevent errors
+                    }
+                } else {
+                    // Ensure enough bytes for fixed structure
+                    if (buf.readableBytes() >= 1 + 1 + 4 + 1 + 1) { // header, type, data, checksum, footer
                         buf.readUnsignedByte(); // header
                         buf.readUnsignedByte(); // type
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, ByteBufUtil.hexDump(buf.readSlice(4)));
                         buf.readUnsignedByte(); // checksum
                         buf.readUnsignedByte(); // footer
+                    } else {
+                        buf.skipBytes(buf.readableBytes()); // Not enough bytes
+                    }
                 }
                 return position;
 
             }
 
         } else if (type == MSG_X1_PHOTO_DATA) {
 
             int pictureId = buf.readInt();
 
             ByteBuf photo = photos.get(pictureId);
 
             buf.readUnsignedInt(); // offset
             buf.readBytes(photo, buf.readUnsignedShort());
 
             if (photo.writableBytes() > 0) {
                 sendPhotoRequest(channel, pictureId);
             } else {
                 position.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, "jpg"));
                 photos.remove(pictureId).release();
             }
 
         } else if (type == MSG_AZ735_GPS || type == MSG_AZ735_ALARM) {
 
             if (!decodeGps(position, buf, true, deviceSession.get(DeviceSession.KEY_TIMEZONE))) {
                 getLastLocation(position, position.getDeviceTime());
             }
 
             if (decodeLbs(position, buf, type, true)) {
                 position.set(Position.KEY_RSSI, buf.readUnsignedByte());
             }
 
             buf.skipBytes(buf.readUnsignedByte()); // additional cell towers
             buf.skipBytes(buf.readUnsignedByte()); // wifi access point
 
             int status = buf.readUnsignedByte();
             position.set(Position.KEY_STATUS, status);
 
             if (type == MSG_AZ735_ALARM) {
                 switch (status) {
                     case 0xA0:
                         position.set(Position.KEY_ARMED, true);
                         break;
                     case 0xA1:
                         position.set(Position.KEY_ARMED, false);
                         break;
                     case 0xA2:
                     case 0xA3:
                         position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
                         break;
                     case 0xA4:
                         position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
                         break;
                     case 0xA5:
                         position.set(Position.KEY_ALARM, Position.ALARM_DOOR);
                         break;
                     default:
                         break;
                 }
             }
 
             buf.skipBytes(buf.readUnsignedByte()); // reserved extension
 
             sendResponse(channel, true, type, buf.getShort(buf.writerIndex() - 6), null);
 
             return position;
 
         } else if (type == MSG_OBD) {
 
             DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))
                     .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())
                     .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());
 
             getLastLocation(position, dateBuilder.getDate());
 
             position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);
 
-            String data = buf.readCharSequence(buf.readableBytes() - 18, StandardCharsets.US_ASCII).toString();
+            // Ensure enough readable bytes for the string before attempting to read.
+            // Assuming 18 bytes for suffix
+            int dataLength = buf.readableBytes() - 18;
+            if (dataLength >= 0 && buf.readableBytes() >= dataLength) {
+                String data = buf.readCharSequence(dataLength, StandardCharsets.US_ASCII).toString();
                 for (String pair : data.split(",")) {
                     String[] values = pair.split("=");
                     if (values.length >= 2) {
+                        try {
                             switch (Integer.parseInt(values[0].substring(0, 2), 16)) {
                                 case 40:
                                     position.set(Position.KEY_ODOMETER, Integer.parseInt(values[1], 16) * 0.01);
                                     break;
                                 case 43:
                                     position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(values[1], 16) * 0.01);
                                     break;
                                 case 45:
                                     position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[1], 16) * 0.01);
                                     break;
                                 case 53:
                                     position.set(Position.KEY_OBD_SPEED, Integer.parseInt(values[1], 16) * 0.01);
                                     break;
                                 case 54:
                                     position.set(Position.KEY_RPM, Integer.parseInt(values[1], 16) * 0.01);
                                     break;
                                 case 71:
                                     position.set(Position.KEY_FUEL_USED, Integer.parseInt(values[1], 16) * 0.01);
                                     break;
                                 case 73:
                                     position.set(Position.KEY_HOURS, Integer.parseInt(values[1], 16) * 0.01);
                                     break;
                                 case 74:
                                     position.set(Position.KEY_VIN, values[1]);
                                     break;
                                 default:
                                     break;
                             }
+                        } catch (NumberFormatException | StringIndexOutOfBoundsException e) {
+                            // Ignore malformed pairs, continue processing
                         }
                     }
+                }
+            } else {
+                buf.skipBytes(buf.readableBytes()); // Not enough bytes, consume remaining to prevent errors
+            }
 
             return position;
 
         } else if (type == MSG_GPS_MODULAR) {
 
-            while (buf.readableBytes() > 6) {
+            while (buf.readableBytes() > 6) { // 6 bytes for moduleType + moduleLength + some footer
+                // Ensure there are at least 4 bytes for moduleType and moduleLength
+                if (buf.readableBytes() < 4) {
+                    buf.skipBytes(buf.readableBytes()); // Not enough bytes for next module header, skip remaining
+                    break;
+                }
                 int moduleType = buf.readUnsignedShort();
                 int moduleLength = buf.readUnsignedShort();
 
+                // Ensure there are enough bytes for the module's content
+                if (buf.readableBytes() < moduleLength) {
+                    buf.skipBytes(buf.readableBytes()); // Not enough bytes for module content, skip remaining
+                    break;
+                }
+
                 switch (moduleType) {
                     case 0x03:
                         position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)));
                         break;
                     case 0x09:
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                         break;
                     case 0x0a:
                         position.set(Position.KEY_SATELLITES_VISIBLE, buf.readUnsignedByte());
                         break;
                     case 0x11:
                         CellTower cellTower = CellTower.from(
                                 buf.readUnsignedShort(),
                                 buf.readUnsignedShort(),
                                 buf.readUnsignedShort(),
                                 buf.readUnsignedMedium(),
                                 buf.readUnsignedByte());
                         if (cellTower.getCellId() > 0) {
                             position.setNetwork(new Network(cellTower));
                         }
                         break;
                     case 0x18:
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
                         break;
                     case 0x28:
                         position.set(Position.KEY_HDOP, buf.readUnsignedByte() * 0.1);
                         break;
                     case 0x29:
                         position.set(Position.KEY_INDEX, buf.readUnsignedInt());
                         break;
                     case 0x2a:
                         int input = buf.readUnsignedByte();
                         position.set(Position.KEY_DOOR, BitUtil.to(input, 4) > 0);
                         position.set("tamper", BitUtil.from(input, 4) > 0);
                         break;
                     case 0x2b:
                         int event = buf.readUnsignedByte();
                         switch (event) {
                             case 0x11:
                                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
                                 break;
                             case 0x12:
                                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
                                 break;
                             case 0x13:
                                 position.set(Position.KEY_ALARM, Position.ALARM_POWER_CUT);
                                 break;
                             case 0x14:
                                 position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);
                                 break;
                             default:
                                 break;
                         }
                         position.set(Position.KEY_EVENT, event);
                         break;
                     case 0x2e:
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                         break;
                     case 0x33:
                         position.setTime(new Date(buf.readUnsignedInt() * 1000));
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                         position.setAltitude(buf.readShort());
 
                         double latitude = buf.readUnsignedInt() / 60.0 / 30000.0;
                         double longitude = buf.readUnsignedInt() / 60.0 / 30000.0;
                         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
 
                         int flags = buf.readUnsignedShort();
                         position.setCourse(BitUtil.to(flags, 10));
                         position.setValid(BitUtil.check(flags, 12));
 
                         if (!BitUtil.check(flags, 10)) {
                             latitude = -latitude;
                         }
                         if (BitUtil.check(flags, 11)) {
                             longitude = -longitude;
                         }
 
                         position.setLatitude(latitude);
                         position.setLongitude(longitude);
                         break;
                     case 0x34:
                         position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                         buf.readUnsignedIntLE(); // time
                         buf.skipBytes(buf.readUnsignedByte()); // content
                         break;
                     default:
                         buf.skipBytes(moduleLength);
                         break;
                 }
             }
 
             if (position.getFixTime() == null) {
                 getLastLocation(position, null);
             }
 
-            sendResponse(channel, false, MSG_GPS_MODULAR, buf.readUnsignedShort(), null);
+            // Ensure enough readable bytes for getShort before sending response
+            if (buf.readableBytes() >= 6) { // Assuming 6 bytes for the short value at writerIndex - 6
+                sendResponse(channel, false, MSG_GPS_MODULAR, buf.getShort(buf.writerIndex() - 6), null);
+            } else {
+                // Handle case where buf is too short for getShort (e.g., skip or log)
+                // For now, if it's too short, just don't send this specific response.
+            }
+
 
             return position;
 
         } else if (type == MSG_MULTIMEDIA) {
 
             buf.skipBytes(8); // serial number
             long timestamp = buf.readUnsignedInt() * 1000;
             buf.skipBytes(4 + 4 + 2 + 1 + 1 + 2); // gps
             buf.skipBytes(2 + 2 + 2 + 2); // cell
 
             int mediaId = buf.readInt();
             int mediaLength = buf.readInt();
             int mediaType = buf.readUnsignedByte();
             int mediaFormat = buf.readUnsignedByte();
 
             if (mediaType == 0 && mediaFormat == 0) {
 
                 buf.readUnsignedByte(); // event
 
                 ByteBuf photo;
+                // Ensure enough bytes before readUnsignedShort
+                if (buf.readableBytes() >= 2) {
                     if (buf.readUnsignedShort() == 0) {
                         photo = Unpooled.buffer(mediaLength);
                         if (photos.containsKey(mediaId)) {
                             photos.remove(mediaId).release();
                         }
                         photos.put(mediaId, photo);
                     } else {
                         photo = photos.get(mediaId);
                     }
 
                     if (photo != null) {
-                    buf.readBytes(photo, buf.readableBytes() - 3 * 2);
+                        // Ensure enough bytes for readBytes
+                        int bytesToRead = buf.readableBytes() - 3 * 2; // Assuming 6 bytes suffix
+                        if (bytesToRead >= 0 && buf.readableBytes() >= bytesToRead) {
+                            buf.readBytes(photo, bytesToRead);
                             if (!photo.isWritable()) {
                                 position = new Position(getProtocolName());
                                 position.setDeviceId(deviceSession.getDeviceId());
                                 getLastLocation(position, new Date(timestamp));
                                 position.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, "jpg"));
                                 photos.remove(mediaId).release();
                             }
+                        } else {
+                            buf.skipBytes(buf.readableBytes()); // Not enough bytes
                         }
-
+                    }
+                } else {
+                    buf.skipBytes(buf.readableBytes()); // Not enough bytes
                 }
 
+            }
+            // Ensure enough readable bytes for getShort before sending response
+            if (buf.readableBytes() >= 6) { // Assuming 6 bytes for the short value at writerIndex - 6
                 sendResponse(channel, true, type, buf.getShort(buf.writerIndex() - 6), null);
+            } else {
+                // For now, if it's too short, just don't send this specific response.
+            }
 
             return position;
 
         } else if (type == MSG_SERIAL) {
 
             position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             getLastLocation(position, null);
 
+            // Ensure enough bytes for external device type code
+            if (buf.readableBytes() < 1) {
+                buf.skipBytes(buf.readableBytes()); // Skip remaining to prevent errors
+                return position; // Return position with last location
+            }
             buf.readUnsignedByte(); // external device type code
-            int length = buf.readableBytes() - 9; // line break + checksum + index + checksum + footer
 
-            if (length <= 0) {
-                return null;
-            } else if (length < 8) {
-                position.set(
-                        Position.PREFIX_TEMP + 1,
-                        Double.parseDouble(buf.readCharSequence(length - 1, StandardCharsets.US_ASCII).toString()));
-            } else {
+            // Calculate length of the actual serial data payload (excluding fixed footer).
+            // '9' bytes are likely a fixed footer (e.g., CRC, index, terminator) for the serial message.
+            int serialDataLength = buf.readableBytes() - 9;
+
+            if (serialDataLength > 0) {
+                // If there's a card type byte (serialDataLength >= 8)
+                if (serialDataLength >= 8) {
+                    // Ensure enough bytes for card type (1 byte) + actual data (serialDataLength - 1)
+                    if (buf.readableBytes() >= serialDataLength) {
                         buf.readUnsignedByte(); // card type
-                position.set(
-                        Position.KEY_DRIVER_UNIQUE_ID,
-                        buf.readCharSequence(length - 1, StandardCharsets.US_ASCII).toString());
+                        String data = buf.readCharSequence(serialDataLength - 1, StandardCharsets.US_ASCII).toString();
+                        position.set(Position.KEY_DRIVER_UNIQUE_ID, data);
+                    } else {
+                        buf.skipBytes(buf.readableBytes()); // Not enough bytes, consume remaining to prevent errors
                     }
-
+                } else { // serialDataLength < 8, likely only temp data
+                    // Ensure enough bytes for temp data (serialDataLength - 1)
+                    if (buf.readableBytes() >= serialDataLength - 1) { // Check against actual remaining readable bytes
+                        String data = buf.readCharSequence(serialDataLength - 1, StandardCharsets.US_ASCII).toString();
+                        try {
+                            position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(data));
+                        } catch (NumberFormatException e) {
+                            // Malformed number, ignore this attribute, continue with position and last location
+                        }
+                    } else {
+                        buf.skipBytes(buf.readableBytes()); // Not enough bytes, consume remaining to prevent errors
+                    }
+                }
+            }
+            // Always return position, even if dataLength <= 0 or parsing failed, as getLastLocation was called.
             return position;
 
         }
 
         return null;
     }
\ No newline at end of file
