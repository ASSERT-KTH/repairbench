diff --git a/tmp/722ba42c-6b65-461b-83a7-6ace655cbff8_buggy.java b/tmp/3c03e847-0d58-4bbb-a929-9ab066abb234_fixed.java
index 0583946..ca60976 100644
--- a/tmp/722ba42c-6b65-461b-83a7-6ace655cbff8_buggy.java
+++ b/tmp/3c03e847-0d58-4bbb-a929-9ab066abb234_fixed.java
@@ -1,30 +1,46 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
+        // Determine if the parent element should be formatted as a block for pretty printing.
+        // This is crucial for custom elements (like <bar> in the test) that contain block-level content,
+        // which should cause their text nodes to trim and contribute to proper indentation.
+        // We assume that the Element.isBlock() method on the parent element reflects this formatting intent
+        // (as per the fix for Jsoup issue 1852, where Element.isBlock() became aware of content).
+        final boolean parentFormatsAsBlock = parent != null ? parent.isBlock() : (parentNode instanceof Document);
+
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+            // Trim leading whitespace if this is the first child of a block-formatting parent
+            // or if the parent is the Document itself.
+            trimLeading = (siblingIndex == 0 && parentFormatsAsBlock) || parentNode instanceof Document;
+            // Trim trailing whitespace if this is the last child of a block-formatting parent.
+            trimTrailing = nextSibling() == null && parentFormatsAsBlock;
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+            // Skip this text node if it's blank and the next node is an Element that will indent,
+            // or if the next node is also a blank TextNode (e.g., from re-parenting).
+            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+                || (next instanceof TextNode && (((TextNode) next).isBlank()));
+            if (couldSkip && isBlank) {
+                return; // Skip this text node entirely.
+            }
 
             Node prev = previousSibling();
+            // Indent based on whether this text node is the first child of a block-formatting parent,
+            // or if outline mode is enabled, or if the previous sibling was a <br> (special case).
             if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+                (siblingIndex == 0 && parentFormatsAsBlock && !isBlank) || // first child of a block-formatting parent (and not blank)
+                (out.outline() && siblingNodes().size() > 0 && !isBlank) || // outline mode (and not blank)
+                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // previous was <br>
+            ) {
                 indent(accum, depth, out);
             }
+        }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
