diff --git a/tmp/40f53f52-4076-414c-9ef1-85e0929efa04_buggy.java b/tmp/518abc50-771f-4cc2-a16f-ce8d4371230f_fixed.java
index 0583946..ae78784 100644
--- a/tmp/40f53f52-4076-414c-9ef1-85e0929efa04_buggy.java
+++ b/tmp/518abc50-771f-4cc2-a16f-ce8d4371230f_fixed.java
@@ -1,30 +1,53 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
+            // trimLeading: e.g. "  Hello" -> "Hello" OR "<div>  Hello" -> "<div>Hello"
+            // If this text is the first child of a block-formatted parent (e.g. custom tags), trim leading whitespace.
+            // Also if it's directly inside the Document body (which is often a block-like context).
+            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock()) ||
                           parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+            // trimTrailing: e.g. "Hello  " -> "Hello" OR "Hello  </div>" -> "Hello</div>"
+            trimTrailing = nextSibling() == null && parent != null && parent.tag().formatAsBlock();
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+            
+            // Determine if the current text node consists only of newlines (and carriage returns).
+            // Such text nodes are often introduced by the pretty printer or represent structural line breaks.
+            // They should generally not be skipped if they precede an indentable element, as they serve for formatting.
+            boolean isOnlyNewlines = coreValue().matches("^[\\n\\r]+$"); 
+
+            // Skip if:
+            // 1. The current text node is blank AND (
+            //    a. The next node is an Element that should indent, AND the current text node is NOT just newlines.
+            //       (This covers cases like " \n " where the spaces are dangling and should be removed if followed by an indentable block)
+            //    OR
+            //    b. The next node is also a blank TextNode.
+            //       (This covers redundant blank text nodes like "a  \n \n  b" -> "a \n b")
+            // )
+            boolean couldSkip = isBlank && (
+                (next instanceof Element && ((Element) next).shouldIndent(out) && !isOnlyNewlines) ||
+                (next instanceof TextNode && (((TextNode) next).isBlank()))
+            );
+            if (couldSkip) return;
 
             Node prev = previousSibling();
             if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
+                // If this is the first child of a block-formatted parent, always indent
+                // (Even if the text is blank, if it's the first child, it should cause indentation for subsequent elements)
+                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock()) ||
+                // If outlining is enabled and there are siblings, and text is not blank, indent
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+                // Special case: wrap on inline <br> - doesn't make sense as a block tag
+                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) 
             )
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
