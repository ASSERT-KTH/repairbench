diff --git a/tmp/ba64a5d3-89e7-4fda-8ca4-7e57e34b482e_buggy.java b/tmp/a888d8a6-4cef-4b7e-8c35-ba5f8bc3b059_fixed.java
index 0583946..b8dcde6 100644
--- a/tmp/ba64a5d3-89e7-4fda-8ca4-7e57e34b482e_buggy.java
+++ b/tmp/a888d8a6-4cef-4b7e-8c35-ba5f8bc3b059_fixed.java
@@ -1,30 +1,44 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
+        // Move isBlank declaration to a scope where it's accessible by all its usages.
+        // In the original buggy code, 'isBlank' was defined inside the 'if (normaliseWhite)' block,
+        // but then used outside it in the 'indent' condition, which would be a compile error.
+        boolean isBlank = isBlank();
+
         boolean trimLeading = false;
         boolean trimTrailing = false;
+
         if (normaliseWhite) {
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
             trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
-            Node next = nextSibling();
-            boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+            // Original bug: if (couldSkip && isBlank) return;
+            // This line prematurely returned for blank text nodes, preventing necessary newlines/spaces
+            // for pretty-printing, assuming the next element would handle it correctly.
+            // Removing this line allows the text node to proceed to output.
+            // The logic for 'couldSkip' (and 'next') is now unused but harmless if this line is removed.
+            // Node next = nextSibling(); // This line and 'couldSkip' are no longer needed
+            // boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+            //     || (next instanceof TextNode && (((TextNode) next).isBlank()));
+            // if (couldSkip && isBlank) return; // REMOVED
+        }
 
         Node prev = previousSibling();
         if (
             (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
             (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
             (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
         )
             indent(accum, depth, out);
-        }
 
-        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
+        // Original bug: Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
+        // Problem: When pretty-printing a blank text node (e.g., "\n"), trimLeading/trimTrailing
+        // could remove the entire formatting content.
+        // Fix: Pass trimLeading and trimTrailing as false if the text node is purely blank.
+        // This ensures formatting newlines are not incorrectly stripped.
+        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading && !isBlank, trimTrailing && !isBlank);
     }
