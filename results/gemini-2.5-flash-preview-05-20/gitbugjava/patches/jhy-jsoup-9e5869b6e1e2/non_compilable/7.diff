diff --git a/tmp/3564a274-7927-4d95-b752-ffb98052902c_buggy.java b/tmp/dcd3ba3b-c88c-4717-ab7d-c134f2016b0c_fixed.java
index 0583946..473f7d0 100644
--- a/tmp/3564a274-7927-4d95-b752-ffb98052902c_buggy.java
+++ b/tmp/dcd3ba3b-c88c-4717-ab7d-c134f2016b0c_fixed.java
@@ -1,30 +1,38 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+            // Fix: Enhanced trimTrailing logic to consider formatAsBlock and next sibling being a block element
+            trimTrailing = (nextSibling() == null && parent != null && parent.tag().formatAsBlock()) || // parent's closing tag
+                (nextSibling() instanceof Element && ((Element) nextSibling()).tag().formatAsBlock()); // next is a block tag
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // if this text is just whitespace, and the next node will cause an indent, skip this text. Or if it's the last in a block, skip.
             Node next = nextSibling();
             boolean isBlank = isBlank();
+            // Fix: If text is only whitespace, and it's the last child in a block-like element, skip it.
+            // e.g. <bar><p/>\n</bar> -- the \n is pure whitespace, and the last child, so skip it.
+            if (isBlank && next == null && parent != null && parent.tag().formatAsBlock()) {
+                return;
+            }
+
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
             if (couldSkip && isBlank) return;
 
             Node prev = previousSibling();
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                 (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
