diff --git a/tmp/7fdb524a-fdd5-4dc3-9f7f-18eed4670a0b_buggy.java b/tmp/cf71fce1-424d-4ccc-816c-94cb7f4159ad_fixed.java
index 0583946..e729860 100644
--- a/tmp/7fdb524a-fdd5-4dc3-9f7f-18eed4670a0b_buggy.java
+++ b/tmp/cf71fce1-424d-4ccc-816c-94cb7f4159ad_fixed.java
@@ -1,30 +1,69 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
+        // Calculate trim leading/trailing flags that will be passed to Entities.escape.
+        // These are based on the parent's actual block status (e.g., div, p, not custom elements by default).
         boolean trimLeading = false;
         boolean trimTrailing = false;
-        if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
-            Node next = nextSibling();
+        // Determine if this TextNode is blank (contains only whitespace)
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
+
+        // Calculate if we have preceding or following newlines from surrounding elements
+        // This is crucial for fixing pretty-printing for custom elements that should behave as blocks.
+        // It relies on Element.shouldIndent() being able to determine if an element (including custom ones)
+        // should cause an indent (e.g., if it contains block-level children).
+        boolean hasPrecedingNewline = false;
+        // boolean hasFollowingNewline = false; // Not directly used in the final logic for TextNode
+        if (prettyPrint) {
+            if (parent != null) {
+                // If it's the first child and parent should indent, then there's a preceding newline.
+                hasPrecedingNewline = (siblingIndex == 0 && parent.shouldIndent(out));
+                // If it's the last child and parent should indent, then there's a following newline.
+                // hasFollowingNewline = (nextSibling() == null && parent.shouldIndent(out)); // Not used here
+            }
+            // If previous sibling is an element and it should indent, then there's a preceding newline.
+            if (!hasPrecedingNewline && previousSibling() instanceof Element) {
+                hasPrecedingNewline = ((Element) previousSibling()).shouldIndent(out);
+            }
+            // If next sibling is an element and it should indent, then there's a following newline.
+            // if (!hasFollowingNewline && nextSibling() instanceof Element) { // Not used here
+            //     hasFollowingNewline = ((Element) nextSibling()).shouldIndent(out);
+            // }
+        }
+
+        // If this text is just whitespace, and the next node will cause an indent, skip this text:
+        Node next = nextSibling();
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
             || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
 
-            Node prev = previousSibling();
-            if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+        if (normaliseWhite) {
+            // If this blank text node is preceded by a structural newline (from parent or previous sibling),
+            // then this text node is purely structural whitespace. It should output an indent and return.
+            // This prevents its content (e.g., `\n ` or `  `) from being normalized to a single space.
+            if (isBlank && hasPrecedingNewline) {
                 indent(accum, depth, out);
+                return; // The text node is handled by indent; its content is not outputted.
+            }
+            // If it's blank and the next node would cause an indent (and it's not handled by the above `hasPrecedingNewline`),
+            // skip it entirely.
+            if (couldSkip && isBlank) {
+                 return;
+            }
+
+            // `trimLeading` and `trimTrailing` are applied to the TextNode's content via Entities.escape.
+            // They rely on the parent's actual block tag status, not its formatting behavior.
+            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) || parentNode instanceof Document;
+            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+
+            // The old complex `indent` condition was removed in Jsoup 1.15.2, as its logic is now
+            // either handled by `Element.outerHtml`'s `shouldIndent` checks or by the `hasPrecedingNewline` logic above.
         }
 
+        // For non-blank text nodes, or if normaliseWhite is false,
+        // or if it's a blank node that wasn't covered by the structural newline handling (e.g., just spaces between inline elements),
+        // output its content, applying normalisation and trimming as determined.
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
