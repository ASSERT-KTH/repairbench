diff --git a/tmp/febec1e5-c9ed-4c53-b568-ffe54dd236bd_buggy.java b/tmp/c3a30ee9-6842-419f-a977-3c2777e76ad3_fixed.java
index 0583946..877e7e8 100644
--- a/tmp/febec1e5-c9ed-4c53-b568-ffe54dd236bd_buggy.java
+++ b/tmp/c3a30ee9-6842-419f-a977-3c2777e76ad3_fixed.java
@@ -1,30 +1,51 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
+        // Helper variable for common condition check (matches Jsoup's internal style)
+        final boolean isBlockParent = parent != null && parent.tag().isBlock();
+
         boolean trimLeading = false;
         boolean trimTrailing = false;
+
+        // Condition for identifying a blank text node that serves as a trailing newline
+        // within a block-formatted parent (e.g., `</p>\n</div>`).
+        final boolean isTrailingBlankTextNodeInBlock = isBlank() && nextSibling() == null && isBlockParent;
+
         if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+            // Special handling: If this text node is a blank node acting as a trailing newline
+            // for a block parent, explicitly print a newline and return.
+            // This prevents it from being trimmed completely or normalized to a space,
+            // ensuring correct pretty-printed output and subsequent indentation for the closing tag.
+            if (isTrailingBlankTextNodeInBlock) {
+                accum.append('\n');
+                return; // Handled this text node, no further processing needed.
+            }
+
+            // Apply trimLeading and trimTrailing logic for other text nodes.
+            // These conditions are based on the standard Jsoup formatting rules.
+            trimLeading = (siblingIndex == 0 && isBlockParent) || parentNode instanceof Document;
+            trimTrailing = nextSibling() == null && isBlockParent;
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
-            boolean isBlank = isBlank();
+            boolean isBlank = isBlank(); // This re-declaration is consistent with the original code.
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
             if (couldSkip && isBlank) return;
 
             Node prev = previousSibling();
             if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
+                (siblingIndex == 0 && isBlockParent && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                 (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
         }
 
+        // Apply escaping and normalization for remaining cases.
+        // If normaliseWhite is false, or if the special trailing newline case was not met,
+        // Entities.escape will handle the text content.
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
