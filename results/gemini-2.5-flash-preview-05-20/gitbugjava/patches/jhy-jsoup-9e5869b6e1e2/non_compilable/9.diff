diff --git a/tmp/0b260e22-7e58-4359-b51c-738401770ee0_buggy.java b/tmp/4cc70041-5cf8-480b-b355-bb3b877adb30_fixed.java
index 0583946..ccdf77f 100644
--- a/tmp/0b260e22-7e58-4359-b51c-738401770ee0_buggy.java
+++ b/tmp/4cc70041-5cf8-480b-b355-bb3b877adb30_fixed.java
@@ -1,30 +1,41 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
             trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+                || (next instanceof TextNode && (((TextNode) next).isBlank()));
+
+            // Jsoup 1852 fix: ensures blank text nodes are not removed if they signify a newline
+            // from pretty-printing, and ensures custom elements are treated as block-like for formatting
+            if (isBlank && (parent != null && parent.tag().formatAsBlock())) { // if this is blank and parent is block-like
+                // then if the next element will indent, or this is the last node
+                if (next == null || (next instanceof Element && ((Element)next).shouldIndent(out))) {
+                    accum.append('\n'); // always append a newline
+                    return; // then skip this text node, it has served its purpose
+                }
+            }
+
             if (couldSkip && isBlank) return;
 
             Node prev = previousSibling();
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                 (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
