diff --git a/tmp/255004a3-38fd-4d57-b7ab-5d52cb9e7d41_buggy.java b/tmp/ef851879-6bb0-4b44-8a52-d138cbd8013f_fixed.java
index c9c77a4..994193f 100644
--- a/tmp/255004a3-38fd-4d57-b7ab-5d52cb9e7d41_buggy.java
+++ b/tmp/ef851879-6bb0-4b44-8a52-d138cbd8013f_fixed.java
@@ -1,35 +1,38 @@
     URL build() {
         try {
+            // Convert original URL to URI to access raw components like rawPath
+            URI initialUri = u.toURI(); 
+            
             // use the URI class to encode non-ascii in path
             URI uri = new URI(
-                u.getProtocol(),
-                u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
-                u.getPort(),
-                decodePart(u.getPath()),
+                initialUri.getScheme(), // Use scheme from initial URI
+                initialUri.getRawUserInfo(), // Use raw user info to preserve explicit encoding if any
+                IDN.toASCII(decodePart(initialUri.getHost())), // puny-code, host needs to be decoded for IDN.toASCII
+                initialUri.getPort(), // Use port from initial URI
+                initialUri.getRawPath(), // FIX: Use raw path to preserve explicit %-encoding (e.g., %2B)
                 null, null // query and fragment appended later so as not to encode
             );
 
             String normUrl = uri.toASCIIString();
             if (q != null || u.getRef() != null) {
                 StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
                 if (q != null) {
                     sb.append('?');
                     appendToAscii(StringUtil.releaseBuilder(q), true, sb);
                 }
                 if (u.getRef() != null) {
                     sb.append('#');
                     appendToAscii(u.getRef(), false, sb);
                 }
                 normUrl = StringUtil.releaseBuilder(sb);
             }
             u =  new URL(normUrl);
             return u;
         } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
             // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
             // the remote end will be able to handle it, so in prod we just pass the original URL.
             // The UnsupportedEncodingException would never happen as always UTF8
             assert Validate.assertFail(e.toString());
             return u;
         }
     }
\ No newline at end of file
