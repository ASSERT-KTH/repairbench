diff --git a/tmp/d6fe9974-603a-4f02-8326-2c85236a1779_buggy.java b/tmp/afbf7764-34d1-439e-8e08-574a7c311539_fixed.java
index c9c77a4..b1a575b 100644
--- a/tmp/d6fe9974-603a-4f02-8326-2c85236a1779_buggy.java
+++ b/tmp/afbf7764-34d1-439e-8e08-574a7c311539_fixed.java
@@ -1,35 +1,38 @@
     URL build() {
         try {
             // use the URI class to encode non-ascii in path
+            // Convert the URL to a URI first to access raw components
+            URI baseUri = u.toURI(); // This provides a URI representation of the current URL
+
             URI uri = new URI(
-                u.getProtocol(),
-                u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
-                u.getPort(),
-                decodePart(u.getPath()),
+                baseUri.getScheme(),
+                baseUri.getUserInfo(),
+                IDN.toASCII(baseUri.getHost()), // puny-code: host must be decoded for IDN.toASCII
+                baseUri.getPort(),
+                baseUri.getRawPath(), // Use getRawPath() to preserve existing encoding like %2B
                 null, null // query and fragment appended later so as not to encode
             );
 
             String normUrl = uri.toASCIIString();
             if (q != null || u.getRef() != null) {
                 StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
                 if (q != null) {
                     sb.append('?');
                     appendToAscii(StringUtil.releaseBuilder(q), true, sb);
                 }
                 if (u.getRef() != null) {
                     sb.append('#');
                     appendToAscii(u.getRef(), false, sb);
                 }
                 normUrl = StringUtil.releaseBuilder(sb);
             }
             u =  new URL(normUrl);
             return u;
-        } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
+        } catch (MalformedURLException | URISyntaxException e) {
+            // UnsupportedEncodingException removed as it would never happen with default UTF8
             // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
             // the remote end will be able to handle it, so in prod we just pass the original URL.
-            // The UnsupportedEncodingException would never happen as always UTF8
             assert Validate.assertFail(e.toString());
             return u;
         }
     }
\ No newline at end of file
