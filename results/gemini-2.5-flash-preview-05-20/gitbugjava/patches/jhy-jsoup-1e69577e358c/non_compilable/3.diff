diff --git a/tmp/bb784b07-2ce9-4f28-9cc5-76cbfc127f9f_buggy.java b/tmp/8cd51233-620f-4c9f-ae82-4d41b70f2923_fixed.java
index c9c77a4..0bcd767 100644
--- a/tmp/bb784b07-2ce9-4f28-9cc5-76cbfc127f9f_buggy.java
+++ b/tmp/8cd51233-620f-4c9f-ae82-4d41b70f2923_fixed.java
@@ -1,35 +1,44 @@
     URL build() {
         try {
-            // use the URI class to encode non-ascii in path
-            URI uri = new URI(
+            // Get the URI representation of the original URL to access raw components
+            URI originalUri = u.toURI();
+
+            // Build a base URI with scheme, user info, host, and port.
+            // Path, query, and fragment are initially null to avoid URI's automatic encoding
+            // of components that we want to handle specially (like preserving raw path).
+            URI baseUri = new URI(
                 u.getProtocol(),
                 u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
+                IDN.toASCII(decodePart(u.getHost())), // puny-code for host, and decode if necessary
                 u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
+                null, null, null // path, query, and fragment are null
             );
 
+            // Resolve the raw path from the original URI against the base URI.
+            // This correctly preserves existing percent-encoding in the path.
+            // If originalUri.getRawPath() is "/%2B32", resolve() will append it as is.
+            URI uri = baseUri.resolve(originalUri.getRawPath());
+
             String normUrl = uri.toASCIIString();
             if (q != null || u.getRef() != null) {
                 StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
                 if (q != null) {
                     sb.append('?');
                     appendToAscii(StringUtil.releaseBuilder(q), true, sb);
                 }
                 if (u.getRef() != null) {
                     sb.append('#');
                     appendToAscii(u.getRef(), false, sb);
                 }
                 normUrl = StringUtil.releaseBuilder(sb);
             }
             u =  new URL(normUrl);
             return u;
         } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
             // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
             // the remote end will be able to handle it, so in prod we just pass the original URL.
             // The UnsupportedEncodingException would never happen as always UTF8
             assert Validate.assertFail(e.toString());
             return u;
         }
     }
\ No newline at end of file
