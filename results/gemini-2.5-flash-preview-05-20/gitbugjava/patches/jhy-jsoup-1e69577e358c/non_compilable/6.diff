diff --git a/tmp/3cc5a096-cc97-451c-81a5-350c34895f9c_buggy.java b/tmp/af95a8c7-d32d-4cd1-a791-49b875a4e88f_fixed.java
index c9c77a4..b4ea87e 100644
--- a/tmp/3cc5a096-cc97-451c-81a5-350c34895f9c_buggy.java
+++ b/tmp/af95a8c7-d32d-4cd1-a791-49b875a4e88f_fixed.java
@@ -1,35 +1,57 @@
     URL build() {
         try {
-            // use the URI class to encode non-ascii in path
-            URI uri = new URI(
-                u.getProtocol(),
-                u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
-                u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
+            // Normalize host (Punycode) and assemble the URL, preserving path encoding.
+            // The java.net.URI component constructor expects decoded path and re-encodes,
+            // which can alter existing valid percent-encodings (e.g., %2B becomes +).
+            // To preserve existing path encoding, we build the URL string by appending the raw path.
+
+            String protocol = u.getProtocol();
+            String userInfo = u.getUserInfo();
+            // Host is decoded for IDN.toASCII, then re-encoded by URI (as Punycode)
+            String host = IDN.toASCII(decodePart(u.getHost()));
+            int port = u.getPort();
+
+            // Build the URI for scheme, authority only (host, user info, port).
+            // Path, query, fragment will be appended manually to preserve existing encoding.
+            URI uriAuthority = new URI(
+                protocol,
+                userInfo,
+                host,
+                port,
+                null, null, null // No path, query, fragment
             );
 
-            String normUrl = uri.toASCIIString();
-            if (q != null || u.getRef() != null) {
-                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
-                if (q != null) {
+            StringBuilder sb = StringUtil.borrowBuilder();
+            sb.append(uriAuthority.toASCIIString());
+
+            // Append the path from the original URL.
+            // URL.getPath() returns the path including percent-escaped characters (e.g., %2B, %C3%A9).
+            // This preserves existing encodings and handles non-ASCII characters correctly.
+            String path = u.getPath();
+            if (path != null && !path.isEmpty()) {
+                // The path returned by URL.getPath() already includes the leading `/` if absolute, or is empty.
+                // So, no need to add an extra `/` here.
+                sb.append(path);
+            }
+
+            // Append query and fragment parts (already handled by Jsoup's appendToAscii, which re-encodes decoded strings)
+            if (u.getQuery() != null) {
                 sb.append('?');
-                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);
+                appendToAscii(u.getQuery(), true, sb); // u.getQuery() returns decoded query string
             }
             if (u.getRef() != null) {
                 sb.append('#');
-                    appendToAscii(u.getRef(), false, sb);
+                appendToAscii(u.getRef(), false, sb); // u.getRef() returns decoded fragment string
             }
-                normUrl = StringUtil.releaseBuilder(sb);
-            }
-            u =  new URL(normUrl);
+
+            String normUrl = StringUtil.releaseBuilder(sb);
+            u = new URL(normUrl); // Re-create URL from the normalized string
             return u;
         } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
             // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
             // the remote end will be able to handle it, so in prod we just pass the original URL.
             // The UnsupportedEncodingException would never happen as always UTF8
             assert Validate.assertFail(e.toString());
             return u;
         }
     }
\ No newline at end of file
