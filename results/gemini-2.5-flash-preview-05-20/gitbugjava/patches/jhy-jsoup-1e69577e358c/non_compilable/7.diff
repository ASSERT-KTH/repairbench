diff --git a/tmp/193188cf-fac6-46c3-af0d-a4eac6370375_buggy.java b/tmp/3dc5e17c-c940-41da-b428-37438e0c18ec_fixed.java
index c9c77a4..0cf21e3 100644
--- a/tmp/193188cf-fac6-46c3-af0d-a4eac6370375_buggy.java
+++ b/tmp/3dc5e17c-c940-41da-b428-37438e0c18ec_fixed.java
@@ -1,35 +1,54 @@
     URL build() {
         try {
-            // use the URI class to encode non-ascii in path
-            URI uri = new URI(
+            // URL.getHost() returns the decoded hostname. IDN.toASCII expects a decoded hostname.
+            // Therefore, decodePart(u.getHost()) is redundant and can be simplified to u.getHost().
+            String host = IDN.toASCII(u.getHost());
+
+            // Build the base URI (scheme, userinfo, host, port) using the URI constructor.
+            // URL.getUserInfo() returns the decoded user info, which the URI constructor expects and will encode correctly.
+            // We pass null for path, query, and fragment as they will be appended manually to preserve original encoding.
+            URI baseUri = new URI(
                 u.getProtocol(),
                 u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
+                host,
                 u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
+                null, // path is handled separately
+                null, // query is handled separately
+                null  // fragment is handled separately
             );
 
-            String normUrl = uri.toASCIIString();
-            if (q != null || u.getRef() != null) {
-                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
+            // Start building the full URL string.
+            // baseUri.toASCIIString() will produce "https://example.com" for the test case.
+            StringBuilder sb = StringUtil.borrowBuilder().append(baseUri.toASCIIString());
+
+            // Append the original path directly. URL.getPath() returns the already percent-encoded path (e.g., "/%2B32").
+            // Appending it directly preserves its existing encoding.
+            String originalPath = u.getPath();
+            if (originalPath != null && !originalPath.isEmpty()) {
+                sb.append(originalPath);
+            }
+
+            // Append query and fragment as in the original code.
+            // 'q' (user-provided query) and u.getRef() (URL fragment) are expected to be decoded,
+            // and appendToAscii will correctly re-encode them for the URL string.
             if (q != null) {
                 sb.append('?');
                 appendToAscii(StringUtil.releaseBuilder(q), true, sb);
             }
             if (u.getRef() != null) {
                 sb.append('#');
                 appendToAscii(u.getRef(), false, sb);
             }
-                normUrl = StringUtil.releaseBuilder(sb);
-            }
+
+            // Construct the final URL from the built string.
+            String normUrl = StringUtil.releaseBuilder(sb);
             u = new URL(normUrl);
             return u;
         } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
-            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
+            // We assert here so that any incomplete normalization issues can be caught in devel. but in practise,
             // the remote end will be able to handle it, so in prod we just pass the original URL.
             // The UnsupportedEncodingException would never happen as always UTF8
             assert Validate.assertFail(e.toString());
             return u;
         }
     }
\ No newline at end of file
