diff --git a/tmp/a8a2a1f0-abaa-45ab-ae91-99bf5c0e655a_buggy.java b/tmp/3617ec4e-d8fb-4902-81af-4339bfbdac58_fixed.java
index c9c77a4..0b06cc9 100644
--- a/tmp/a8a2a1f0-abaa-45ab-ae91-99bf5c0e655a_buggy.java
+++ b/tmp/3617ec4e-d8fb-4902-81af-4339bfbdac58_fixed.java
@@ -1,35 +1,60 @@
     URL build() {
         try {
-            // use the URI class to encode non-ascii in path
+            // Build the base URI (scheme, user info, host, port) using the URI class.
+            // The path, query, and fragment components are handled separately to:
+            // 1. Preserve existing percent-encodings in the original URL's path.
+            //    The URI constructor's path argument expects a decoded path, which would then re-encode,
+            //    potentially changing valid existing encodings (e.g., %2B to +).
+            // 2. Allow dynamic appending of new query parameters ('q') and original fragment.
             URI uri = new URI(
                 u.getProtocol(),
                 u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
+                IDN.toASCII(decodePart(u.getHost())), // puny-code conversion for host
                 u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
+                null, // Path component is handled separately to preserve existing encodings
+                null, null // Query and fragment are appended later
             );
 
-            String normUrl = uri.toASCIIString();
-            if (q != null || u.getRef() != null) {
-                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
+            // Start building the full URL string from the base URI.
+            StringBuilder sb = StringUtil.borrowBuilder().append(uri.toASCIIString());
+
+            // Append the original path from the URL directly.
+            // This ensures that any existing percent-encodings (like %2B) are preserved.
+            String path = u.getPath();
+            if (path != null && !path.isEmpty()) {
+                // u.getPath() typically starts with '/' for absolute paths, e.g. /foo
+                // If it's an opaque URI, path might not start with '/' (e.g. mailto:user@host)
+                // However, for HTTP/HTTPS, it typically starts with '/'.
+                // If the base URI doesn't end with a slash, and path doesn't start with one, add one for correctness.
+                // URI.toASCIIString() for scheme://host:port won't have trailing slash.
+                // So append if path exists.
+                if (path.charAt(0) != '/' && !sb.toString().endsWith("/")) { // Defensive: ensure a separator if needed
+                    sb.append('/');
+                }
+                sb.append(path);
+            }
+
+            // Append the new query string 'q' if it exists.
+            // Note: This logic implies 'q' replaces any original query from 'u.getQuery()'.
             if (q != null) {
                 sb.append('?');
-                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);
+                appendToAscii(StringUtil.releaseBuilder(q), true, sb); // 'true' for query encoding
             }
+
+            // Append the original fragment from the URL if it exists.
             if (u.getRef() != null) {
                 sb.append('#');
-                    appendToAscii(u.getRef(), false, sb);
+                appendToAscii(u.getRef(), false, sb); // 'false' for fragment encoding
             }
-                normUrl = StringUtil.releaseBuilder(sb);
-            }
-            u =  new URL(normUrl);
+
+            String normUrl = StringUtil.releaseBuilder(sb);
+            u = new URL(normUrl); // Create the final URL object from the built string.
             return u;
         } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
             // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
             // the remote end will be able to handle it, so in prod we just pass the original URL.
             // The UnsupportedEncodingException would never happen as always UTF8
             assert Validate.assertFail(e.toString());
             return u;
         }
     }
\ No newline at end of file
