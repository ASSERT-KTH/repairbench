diff --git a/tmp/6d1b2932-7c40-49cf-9312-723d413fd8fa_buggy.java b/tmp/43bc8c2f-abda-4b51-8525-8e7cfe15eded_fixed.java
index c9c2b44..0d9d370 100644
--- a/tmp/6d1b2932-7c40-49cf-9312-723d413fd8fa_buggy.java
+++ b/tmp/43bc8c2f-abda-4b51-8525-8e7cfe15eded_fixed.java
@@ -1,13 +1,32 @@
         @Override
         public boolean matches(Element root, Element element) {
+            Element current = element;
             // evaluate from last to first
             for (int i = evaluators.size() -1; i >= 0; --i) {
-                if (element == null)
+                if (current == null) { // Ran out of parents without matching all evaluators
                     return false;
+                }
+
+                // If the current element being checked (current) is an ancestor of the root,
+                // and it's not the root itself, then the original 'element' cannot be a descendant of 'root'
+                // through this selector path relative to the root context. This means we've climbed above the desired scope.
+                if (current != root && current.isAncestorOf(root)) {
+                    return false;
+                }
+
                 Evaluator eval = evaluators.get(i);
-                if (!eval.matches(root, element))
+                if (!eval.matches(root, current))
                     return false;
-                element = element.parent();
+
+                // If the current element matched is the root, AND there are more evaluators
+                // to the left (ancestors) to check (i.e., `i > 0`), it means we are trying to match
+                // something above the root. However, `root` is the boundary for the selection
+                // context, so we cannot go further up the tree.
+                if (current == root && i > 0) {
+                    return false;
+                }
+
+                current = current.parent();
             }
             return true;
         }
\ No newline at end of file
