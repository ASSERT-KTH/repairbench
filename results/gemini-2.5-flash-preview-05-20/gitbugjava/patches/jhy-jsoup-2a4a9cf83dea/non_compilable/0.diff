diff --git a/tmp/d507d75b-6d65-427e-a11e-742b9f8f87be_buggy.java b/tmp/622ce969-bc6d-4329-a0ee-ac42e11f0d5c_fixed.java
index c9c2b44..8b2e031 100644
--- a/tmp/d507d75b-6d65-427e-a11e-742b9f8f87be_buggy.java
+++ b/tmp/622ce969-bc6d-4329-a0ee-ac42e11f0d5c_fixed.java
@@ -1,13 +1,35 @@
         @Override
         public boolean matches(Element root, Element element) {
             // evaluate from last to first
             for (int i = evaluators.size() -1; i >= 0; --i) {
                 if (element == null)
                     return false;
+                
                 Evaluator eval = evaluators.get(i);
                 if (!eval.matches(root, element))
                     return false;
-                element = element.parent();
+                
+                // If we are evaluating an evaluator that expects an ancestor (i.e., not the last evaluator in the chain,
+                // as the last one matches the 'element' itself before climbing),
+                // we move to the parent for the next check.
+                // The issue arises when 'element' (after becoming its parent) goes outside the scope of 'root'
+                // but still satisfies the ancestor criteria.
+                if (i > 0) { // Check if there are more evaluators (ancestors) to check
+                    element = element.parent(); // Move up to the parent for the next evaluator
+                    if (element == null) {
+                        return false; // No more parents to check
+                    }
+                    
+                    // Crucial fix: Ensure that the 'element' (which is now a candidate for an ancestor)
+                    // is still within the scope defined by 'root'.
+                    // If 'element' is not 'root' itself, and it's not a descendant of 'root',
+                    // then it means we've climbed "above" the root's context.
+                    // In such a case, this path should not lead to a match for structural evaluators
+                    // like DescendantEvaluator or ParentEvaluator when used with a specific root context.
+                    if (!element.equals(root) && !element.isDescendantOf(root)) {
+                        return false; 
+                    }
+                }
             }
             return true;
         }
\ No newline at end of file
