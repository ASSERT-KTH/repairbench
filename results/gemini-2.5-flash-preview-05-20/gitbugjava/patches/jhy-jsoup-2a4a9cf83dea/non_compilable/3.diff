diff --git a/tmp/6f88bfb3-b290-465f-b21b-6312c3788922_buggy.java b/tmp/29edf9f7-c951-4b82-8346-0b9676ba1262_fixed.java
index c9c2b44..8fe81ce 100644
--- a/tmp/6f88bfb3-b290-465f-b21b-6312c3788922_buggy.java
+++ b/tmp/29edf9f7-c951-4b82-8346-0b9676ba1262_fixed.java
@@ -1,13 +1,31 @@
         @Override
         public boolean matches(Element root, Element element) {
-            // evaluate from last to first
+            // evaluate from last to first (e.g., for "ul > li", first checks li, then ul)
+            // evaluators[last] is the leaf evaluator (e.g., Tag("li"))
+            // evaluators[first] is the root evaluator (e.g., Tag("ul"))
             for (int i = evaluators.size() -1; i >= 0; --i) {
                 if (element == null)
-                    return false;
+                    return false; // Reached top of document before matching all evaluators
+
+                // This critical check ensures that the upward traversal (element = element.parent())
+                // does not go beyond the initial 'root' context provided to the select method.
+                // The 'root' parameter here is the Element on which .select(..) was called.
+                // The 'element' parameter is the current candidate being evaluated against the selector chain.
+                // If we've already moved up at least once (i.e., i is not the initial evaluators.size()-1)
+                // AND the current 'element' is neither the 'root' itself nor a descendant of 'root',
+                // then this chain is invalid because it has ascended outside the 'root's scope.
+                // Note: root.equals(element) is checked separately because root.contains(element)
+                // returns false for the root itself, but root is a valid match in some contexts.
+                // Here, if 'element' is an ancestor of 'root' (or sibling, etc.), it implies we've
+                // left the subtree of 'root' while evaluating an ancestor, which is incorrect.
+                if (i < evaluators.size() - 1 && !root.equals(element) && !root.contains(element)) {
+                    return false; // The traversed element is outside the root context.
+                }
+
                 Evaluator eval = evaluators.get(i);
                 if (!eval.matches(root, element))
-                    return false;
-                element = element.parent();
+                    return false; // Current evaluator in chain doesn't match
+                element = element.parent(); // Move up to parent for next evaluator in chain
             }
             return true;
         }
\ No newline at end of file
