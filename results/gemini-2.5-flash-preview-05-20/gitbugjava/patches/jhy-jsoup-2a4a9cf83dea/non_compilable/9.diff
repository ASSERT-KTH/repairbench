diff --git a/tmp/39fdcb5e-bc6a-48c3-a0a8-ea49ee0312b3_buggy.java b/tmp/a50ac417-b9be-4bbd-83b5-565965acd245_fixed.java
index c9c2b44..6b58c69 100644
--- a/tmp/39fdcb5e-bc6a-48c3-a0a8-ea49ee0312b3_buggy.java
+++ b/tmp/a50ac417-b9be-4bbd-83b5-565965acd245_fixed.java
@@ -1,13 +1,38 @@
         @Override
         public boolean matches(Element root, Element element) {
             // evaluate from last to first
             for (int i = evaluators.size() -1; i >= 0; --i) {
                 if (element == null)
                     return false;
                 Evaluator eval = evaluators.get(i);
                 if (!eval.matches(root, element))
                     return false;
+
+                // If this is the last evaluator in the chain (i.e., we just matched the outermost part
+                // of the selector chain, e.g., 'ul' in 'ul > li'), then we've successfully matched
+                // the entire chain for this 'element'.
+                if (i == 0) {
+                    return true;
+                }
+
+                // Move to the parent for the next evaluator in the chain (ancestor check).
                 element = element.parent();
+
+                // Crucial check for contextual selections:
+                // If the 'element' has ascended above the 'root' context (i.e., 'element' is now an ancestor
+                // of 'root' but not 'root' itself), and we still have more evaluators to check,
+                // it means the current path is outside the specified selection context.
+                // For a selector like 'A B' applied on 'li2.select("ul > li")', 'B' ('li') must be
+                // a descendant of 'li2'. 'A' ('ul') must be an ancestor of 'B' AND also a
+                // descendant of 'li2' (or 'li2' itself). If 'element' (the potential ancestor)
+                // becomes an ancestor of 'root' (e.g., 'ul#outer' is an ancestor of 'li2'),
+                // it implies it's outside 'li2's scope for contextual selection.
+                if (element != null && element.isAncestorOf(root) && !element.equals(root)) {
+                     return false;
                 }
+            }
+            // This part should ideally not be reached if the loop logic is complete.
+            // If evaluators is empty, it might be reachable, but this evaluator type typically
+            // expects a non-empty list of evaluators for structural matching.
             return true;
         }
\ No newline at end of file
