diff --git a/tmp/d0359d13-debd-49ba-ae57-1ebe71ccff15_buggy.java b/tmp/b09295b7-1fcc-4eef-81ed-3876843187e2_fixed.java
index 016a7f6..17a91d7 100644
--- a/tmp/d0359d13-debd-49ba-ae57-1ebe71ccff15_buggy.java
+++ b/tmp/b09295b7-1fcc-4eef-81ed-3876843187e2_fixed.java
@@ -1,29 +1,43 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
+            // Determine initial trim flags for the text node's content based on its position within a block-like parent
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
             trimTrailing = trimLikeBlock && nextSibling() == null;
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
-            boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
+            Node prev = previousSibling(); // Get previous node here for new conditions
+            boolean isBlank = isBlank(); // Cache isBlank() as it's used multiple times
+
+            // Fix: If this text node is just whitespace and it's adjacent to a block element, skip it entirely.
+            // This prevents unwanted spaces from newlines/tabs when block elements end or start,
+            // or when they are adjacent to inline elements, maintaining a compact output.
+            boolean prevIsBlock = (prev instanceof Element && ((Element) prev).tag().isBlock());
+            boolean nextIsBlock = (next instanceof Element && ((Element) next).tag().isBlock());
+
+            if (isBlank && (prevIsBlock || nextIsBlock)) {
+                return; // Skip this blank text node entirely
+            }
+
+            // Original logic: if this text is just whitespace, and the next node will cause an indent, skip this text:
+            boolean nextWillIndent = (next instanceof Element && ((Element) next).shouldIndent(out))
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+            if (nextWillIndent && isBlank) return;
 
-            Node prev = previousSibling();
+            // Indent logic: add a newline/indent if specific conditions for a non-blank text node are met
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                 (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
         }
 
+        // Escape and append the text node's value, applying determined trim and normalisation rules
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
