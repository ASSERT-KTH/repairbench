diff --git a/tmp/d1ac22dd-030a-45e8-a9f6-57b6240eb27e_buggy.java b/tmp/8d07c7f6-6676-4124-af0a-58a6dbdb1afa_fixed.java
index 016a7f6..02c4c63 100644
--- a/tmp/d1ac22dd-030a-45e8-a9f6-57b6240eb27e_buggy.java
+++ b/tmp/8d07c7f6-6676-4124-af0a-58a6dbdb1afa_fixed.java
@@ -1,29 +1,57 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
+        // normaliseWhite: true if prettyPrint is on AND parent is not whitespace-preserving (e.g., <pre>)
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+        // trimLikeBlock: true if parent is a block-level element or formats as a block (e.g., <p>, <div>)
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
-            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
+            final Node prev = previousSibling();
+            final Node next = nextSibling();
+            final boolean isBlank = isBlank(); // true if this TextNode contains only whitespace
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
-            Node next = nextSibling();
-            boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+            // Rule 1: Trim leading whitespace if it's the first child of a block-like parent
+            // or if it's a direct child of the Document node itself.
+            if ((trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document) {
+                trimLeading = true;
+            }
+            // Rule 2: Trim leading whitespace if this text node is blank and immediately follows a block-level element.
+            // This covers cases like `</p>\n<span>` where the `\n` should be removed because it's after a block.
+            else if (isBlank && prev instanceof Element && ((Element) prev).tag().formatAsBlock()) {
+                trimLeading = true;
+            }
 
-            Node prev = previousSibling();
+            // Rule 3: Trim trailing whitespace if it's the last child of a block-like parent.
+            if (trimLikeBlock && nextSibling() == null) {
+                trimTrailing = true;
+            }
+            // Rule 4: Trim trailing whitespace if this text node is blank and immediately precedes a block-level element.
+            // This covers cases like `<div>\n<p>` where the `\n` should be removed because it's before a block.
+            else if (isBlank && next instanceof Element && ((Element) next).tag().formatAsBlock()) {
+                trimTrailing = true;
+            }
+
+            // Original logic for skipping blank text nodes if the next element should indent or is also blank.
+            // If this blank node is followed by a node that causes indentation (e.g., a block element), or another blank node
+            // (e.g., from re-parenting multiple whitespace text nodes), this one should be completely skipped.
+            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+                || (next instanceof TextNode && (((TextNode) next).isBlank()));
+            if (couldSkip && isBlank) {
+                return; // Entirely skip this blank text node's output.
+            }
+
+            // Indent logic: for non-blank text nodes at the beginning of a block, or in outline mode, or after a <br>.
+            // This adds a newline and indentation *before* the text node's content is written.
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                 (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
         }
 
+        // Escape and write the text content, applying normalisation and trimming rules.
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
