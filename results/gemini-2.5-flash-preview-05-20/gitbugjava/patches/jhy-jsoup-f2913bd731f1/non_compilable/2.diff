diff --git a/tmp/866ed32d-7c28-45f8-8ff9-5b215c321925_buggy.java b/tmp/53966eb4-34ea-49ea-bda3-22c4fadd02ed_fixed.java
index 016a7f6..b746b84 100644
--- a/tmp/866ed32d-7c28-45f8-8ff9-5b215c321925_buggy.java
+++ b/tmp/53966eb4-34ea-49ea-bda3-22c4fadd02ed_fixed.java
@@ -1,29 +1,48 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
+            // Initial calculation based on parent and sibling position
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
             trimTrailing = trimLikeBlock && nextSibling() == null;
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // Additional trim logic based on previous and next element types
+            Node prev = previousSibling();
             Node next = nextSibling();
+
+            // If the previous sibling is a block element, trim leading whitespace from this text node.
+            // This covers cases like `</p> ` where ` ` should be trimmed.
+            if (prev instanceof Element && ((Element) prev).tag().isBlock()) {
+                trimLeading = true;
+            }
+
+            // If the next sibling is a block element, trim trailing whitespace from this text node.
+            // This covers cases like ` <div>` where ` ` should be trimmed.
+            if (next instanceof Element && ((Element) next).tag().isBlock()) {
+                trimTrailing = true;
+            }
+
+            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            Node _next = nextSibling(); // Use a local var to avoid re-calling
             boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+            boolean couldSkip = (_next instanceof Element && ((Element) _next).shouldIndent(out)) // next will indent
+                || (_next instanceof TextNode && (((TextNode) _next).isBlank())); // next is blank text, from re-parenting
             if (couldSkip && isBlank) return;
 
-            Node prev = previousSibling();
+            // Indent logic - only if not blank and other conditions met.
+            // Note: `prev` is re-declared here for safety, but `previousSibling()` would return the same.
+            Node _prev = previousSibling();
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+                (siblingIndex > 0 && _prev instanceof Element && ((Element) _prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
