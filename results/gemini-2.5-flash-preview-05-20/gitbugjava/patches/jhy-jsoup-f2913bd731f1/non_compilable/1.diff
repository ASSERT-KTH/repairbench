diff --git a/tmp/38a58111-a437-44b2-9568-81abe9b4b772_buggy.java b/tmp/525280c5-6239-4579-a6f7-dddaea61b8d7_fixed.java
index 016a7f6..03adae2 100644
--- a/tmp/38a58111-a437-44b2-9568-81abe9b4b772_buggy.java
+++ b/tmp/525280c5-6239-4579-a6f7-dddaea61b8d7_fixed.java
@@ -1,29 +1,40 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
             trimTrailing = trimLikeBlock && nextSibling() == null;
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // Get prev and next siblings immediately for all subsequent checks
             Node next = nextSibling();
+            Node prev = previousSibling(); // Moved up so 'prev' is available for the new skip condition
             boolean isBlank = isBlank();
+
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
 
-            Node prev = previousSibling();
+            // NEW CONDITION: if this text node is blank, follows a block-like element, and is followed by an
+            // element that should not cause an indent (e.g., an inline element).
+            // This prevents an unwanted space when pretty printing.
+            boolean skipBetweenBlockAndInline = isBlank
+                                                && (prev instanceof Element && ((Element) prev).tag().isBlock())
+                                                && (next instanceof Element && !((Element) next).shouldIndent(out));
+
+            // If the text node is blank and it falls into either the original skip condition or the new one, return early.
+            if ((couldSkip || skipBetweenBlockAndInline) && isBlank) return;
+
+            // Now, use prev for the indent logic
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                 (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
