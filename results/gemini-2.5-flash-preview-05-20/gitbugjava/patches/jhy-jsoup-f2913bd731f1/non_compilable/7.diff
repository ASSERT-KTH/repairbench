diff --git a/tmp/5e957e58-c0b0-464d-bbb1-2a39f9f97953_buggy.java b/tmp/eb947149-c93b-4bc5-bc4e-8c0f98b1f8ec_fixed.java
index 016a7f6..ac415f1 100644
--- a/tmp/5e957e58-c0b0-464d-bbb1-2a39f9f97953_buggy.java
+++ b/tmp/eb947149-c93b-4bc5-bc4e-8c0f98b1f8ec_fixed.java
@@ -1,29 +1,38 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
-            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
-
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // Determine previous, next siblings and if current node is blank early
+            // as they are used in trimLeading, couldSkip, and indent logic.
+            Node prev = previousSibling();
             Node next = nextSibling();
             boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+
+            // Original trimLeading: (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
+            // Added condition: || (prev instanceof Element && ((Element) prev).tag().isBlock() && isBlank)
+            // This handles cases like `</p>\n<span>`, where the '\n' is trimmed because 'p' is a block.
+            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document
+                          || (prev instanceof Element && ((Element) prev).tag().isBlock() && isBlank);
+
+            trimTrailing = trimLikeBlock && next == null;
+
+            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // Original couldSkip: (next instanceof Element && ((Element) next).shouldIndent(out)) || (next instanceof TextNode && (((TextNode) next).isBlank()));
+            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+                || (next instanceof TextNode && (((TextNode) next).isBlank()));
             if (couldSkip && isBlank) return;
 
-            Node prev = previousSibling();
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                 (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
