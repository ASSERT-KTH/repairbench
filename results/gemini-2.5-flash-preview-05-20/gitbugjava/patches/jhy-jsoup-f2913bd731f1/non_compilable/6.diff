diff --git a/tmp/5d71d8d3-3449-4a37-bbae-827cb0b5622c_buggy.java b/tmp/b3a37fe5-f1a6-4904-97db-61ce05a622bc_fixed.java
index 016a7f6..90141b8 100644
--- a/tmp/5d71d8d3-3449-4a37-bbae-827cb0b5622c_buggy.java
+++ b/tmp/b3a37fe5-f1a6-4904-97db-61ce05a622bc_fixed.java
@@ -1,29 +1,42 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
-            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
-
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // Get siblings and isBlank status early for potential skip decisions
+            Node prev = previousSibling();
             Node next = nextSibling();
             boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
 
-            Node prev = previousSibling();
+            // Calculate trim flags that will be passed to Entities.escape if not skipped
+            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
+            trimTrailing = trimLikeBlock && next == null; // Use 'next' variable for consistency
+
+            // Check if this blank text node should be skipped entirely (not outputted)
+            // 1. If the next node should indent (e.g., it's a block or formatAsBlock element)
+            boolean nextShouldIndent = next instanceof Element && ((Element) next).shouldIndent(out);
+            // 2. If the next node is also a blank TextNode (e.g., from re-parenting)
+            boolean nextIsBlankText = next instanceof TextNode && (((TextNode) next).isBlank());
+            // 3. If the previous node was a block-like element and the next node is a pure inline element,
+            //    the whitespace between them should typically be removed for pretty printing.
+            boolean prevIsBlocklike = prev instanceof Element && (((Element)prev).tag().isBlock() || ((Element)prev).tag().formatAsBlock());
+            boolean nextIsPureInline = next instanceof Element && !((Element)next).tag().isBlock() && !((Element)next).tag().formatAsBlock();
+
+            if (isBlank && (nextShouldIndent || nextIsBlankText || (prevIsBlocklike && nextIsPureInline))) {
+                return; // Skip this whitespace node completely
+            }
+
+            // Original indent logic, only applies if the text node was not skipped
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                 (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
