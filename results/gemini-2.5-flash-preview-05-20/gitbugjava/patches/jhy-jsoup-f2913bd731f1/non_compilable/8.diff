diff --git a/tmp/75888085-a799-4dbf-8a2b-d623564e99b6_buggy.java b/tmp/045346b1-25d4-453a-bab7-dbee05c89a2a_fixed.java
index 016a7f6..c291190 100644
--- a/tmp/75888085-a799-4dbf-8a2b-d623564e99b6_buggy.java
+++ b/tmp/045346b1-25d4-453a-bab7-dbee05c89a2a_fixed.java
@@ -1,29 +1,39 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
+        final Node prev = previousSibling();
+        final Node next = nextSibling();
+        final boolean isBlankNode = isBlank(); // Cache result of isBlank()
+
         if (normaliseWhite) {
-            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
+            // Determine if previous sibling was a block element
+            boolean prevIsBlock = (prev instanceof Element && (((Element) prev).tag().isBlock() || ((Element) prev).tag().formatAsBlock()));
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
-            Node next = nextSibling();
-            boolean isBlank = isBlank();
+            // Determine if leading whitespace should be trimmed
+            trimLeading = (trimLikeBlock && siblingIndex == 0) // First child of a block-like parent
+                          || (parentNode instanceof Document) // Direct child of the Document node
+                          || (isBlankNode && prevIsBlock); // NEW: if current text node is blank and previous sibling was a block
+            
+            // Determine if trailing whitespace should be trimmed
+            trimTrailing = trimLikeBlock && next == null;
+
+            // If this text is just whitespace, and the next node will cause an indent, skip this text:
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+            if (couldSkip && isBlankNode) return;
 
-            Node prev = previousSibling();
+            // If we didn't skip, maybe we need to indent
             if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlankNode) ||
+                (out.outline() && siblingNodes().size() > 0 && !isBlankNode) ||
+                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))
             )
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
