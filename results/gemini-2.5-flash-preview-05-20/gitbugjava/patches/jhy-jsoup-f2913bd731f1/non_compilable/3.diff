diff --git a/tmp/ccd8a485-430f-49c1-95af-3fc81718d4d8_buggy.java b/tmp/dea92e65-e07e-4d00-b085-92bca5107cc4_fixed.java
index 016a7f6..ceb64b6 100644
--- a/tmp/ccd8a485-430f-49c1-95af-3fc81718d4d8_buggy.java
+++ b/tmp/dea92e65-e07e-4d00-b085-92bca5107cc4_fixed.java
@@ -1,29 +1,55 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
-        if (normaliseWhite) {
-            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
-
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+        // Declare Node properties early for consistent use throughout the function
+        Node prev = previousSibling();
         Node next = nextSibling();
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
+
+        if (normaliseWhite) {
+            // Original trimLeading/trimTrailing logic, applies to current node's content if not skipped
+            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
+            trimTrailing = trimLikeBlock && next == null;
+
+            // --- NEW LOGIC FOR BLANK TEXT NODE SKIPPING (Ignorable Whitespace) ---
+            boolean prevIsBlock = prev instanceof Element && ((Element) prev).tag().isBlock();
+            boolean nextIsBlock = next instanceof Element && ((Element) next).tag().isBlock();
+
+            // Determine if this blank text node should be completely skipped (ignorable whitespace)
+            boolean skipIgnorableWhite = isBlank && (
+                // 1. After a block element, before another block, or end of parent, or before a non-element node
+                (prevIsBlock && (next == null || nextIsBlock || !(next instanceof Element))) ||
+                // 2. Before a block element, at start of parent, or after a non-element node
+                (nextIsBlock && (prev == null || !(prev instanceof Element))) ||
+                // 3. After a block element, before an inline element
+                (prevIsBlock && next instanceof Element && !((Element)next).tag().isBlock()) ||
+                // 4. After an inline element, before a block element
+                (nextIsBlock && prev instanceof Element && !((Element)prev).tag().isBlock())
+            );
+
+            // Original couldSkip logic:
+            boolean originalCouldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
 
-            Node prev = previousSibling();
+            // If either originalCouldSkip or the new skipIgnorableWhite condition is true, and this node is blank, skip it.
+            if ((originalCouldSkip || skipIgnorableWhite) && isBlank) {
+                return; // Skip this text node entirely
+            }
+            // --- END NEW LOGIC ---
+
+            // Original indent logic, using the now-declared 'prev'
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                 (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
         }
 
+        // If not skipped, escape the text node's content
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
