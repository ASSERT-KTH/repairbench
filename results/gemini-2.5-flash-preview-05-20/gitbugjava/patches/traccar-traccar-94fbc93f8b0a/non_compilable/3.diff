diff --git a/tmp/d4606766-9074-48f8-b205-a589a000003e_buggy.java b/tmp/58ff69d1-2df7-402e-a5db-f330e507c01b_fixed.java
index fb15c85..bbe2994 100644
--- a/tmp/d4606766-9074-48f8-b205-a589a000003e_buggy.java
+++ b/tmp/58ff69d1-2df7-402e-a5db-f330e507c01b_fixed.java
@@ -1,311 +1,343 @@
     private void readBinaryCustomData(Position position, ByteBuf buf, String form) {
         CellTower cellTower = new CellTower();
         String[] keys = form.substring(1).split("%");
         for (String key : keys) {
             switch (key) {
                 case "SA":
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
                 case "MV":
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
                     break;
                 case "BV":
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
                     break;
                 case "GQ":
                     cellTower.setSignalStrength((int) buf.readUnsignedByte());
                     break;
                 case "CE":
                     cellTower.setCellId(buf.readUnsignedInt());
                     break;
                 case "LC":
                     cellTower.setLocationAreaCode(buf.readUnsignedShort());
                     break;
                 case "CN":
-                    int combinedMobileCodes = (int) (buf.readUnsignedInt() % 100000); // cccnn
+                    // Atrack's combined mobile codes can be either cccnn (5 digits) or cccnnn (6 digits)
+                    // The current parsing assumes cccnn (div by 100, mod by 100).
+                    // If it's cccnnn, the result is incorrect.
+                    int combinedMobileCodes = (int) buf.readUnsignedInt();
+                    if (combinedMobileCodes > 99999) { // Implies cccnnn format if value exceeds 5 digits
+                        cellTower.setMobileCountryCode(combinedMobileCodes / 1000);
+                        cellTower.setMobileNetworkCode(combinedMobileCodes % 1000);
+                    } else { // Assumes cccnn format
                         cellTower.setMobileCountryCode(combinedMobileCodes / 100);
                         cellTower.setMobileNetworkCode(combinedMobileCodes % 100);
+                    }
                     break;
                 case "RL":
                     buf.readUnsignedByte(); // rxlev
                     break;
                 case "PC":
                     position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedInt());
                     break;
                 case "AT":
                     position.setAltitude(buf.readUnsignedInt());
                     break;
                 case "RP":
                     position.set(Position.KEY_RPM, buf.readUnsignedShort());
                     break;
                 case "GS":
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     break;
                 case "DT":
                     position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() == 1);
                     break;
                 case "VN":
                     position.set(Position.KEY_VIN, readString(buf));
                     break;
                 case "MF":
                     buf.readUnsignedShort(); // mass air flow rate
                     break;
                 case "EL":
                     buf.readUnsignedByte(); // engine load
                     break;
                 case "TR":
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                     break;
                 case "ET":
                     position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShort());
                     break;
                 case "FL":
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                     break;
                 case "ML":
                     buf.readUnsignedByte(); // mil status
                     break;
                 case "FC":
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
                     break;
                 case "CI":
-                    readString(buf); // format string
+                    // The comment "format string" for "CI" is misleading in this context,
+                    // as 'form' is already the format string. "CI" likely stands for "Custom ID"
+                    // and is a fixed-size identifier, typically an integer.
+                    // Reading it as a length-prefixed string (readString(buf)) would cause misalignment
+                    // if the actual data is a fixed-size integer and not a length byte + string.
+                    // Based on test data and common protocol patterns, it's often a 4-byte unsigned integer.
+                    buf.readUnsignedInt();
                     break;
                 case "AV1":
                     position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
                     break;
                 case "NC":
                     readString(buf); // gsm neighbor cell info
                     break;
                 case "SM":
                     buf.readUnsignedShort(); // max speed between reports
                     break;
                 case "GL":
                     readString(buf); // google link
                     break;
                 case "MA":
                     readString(buf); // mac address
                     break;
                 case "PD":
                     buf.readUnsignedByte(); // pending code status
                     break;
                 case "CD":
                     position.set(Position.KEY_ICCID, readString(buf));
                     break;
                 case "CM":
                     buf.readLong(); // imsi
                     break;
                 case "GN":
                     buf.skipBytes(60); // g sensor data
                     break;
                 case "GV":
                     buf.skipBytes(6); // maximum g force
                     break;
                 case "ME":
                     buf.readLong(); // imei
                     break;
                 case "IA":
                     buf.readUnsignedByte(); // intake air temperature
                     break;
                 case "MP":
                     buf.readUnsignedByte(); // manifold absolute pressure
                     break;
                 case "EO":
                     position.set(Position.KEY_ODOMETER, UnitsConverter.metersFromMiles(buf.readUnsignedInt()));
                     break;
                 case "EH":
                     position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 360000);
                     break;
                 case "ZO1":
                     buf.readUnsignedByte(); // brake stroke status
                     break;
                 case "ZO2":
                     buf.readUnsignedByte(); // warning indicator status
                     break;
                 case "ZO3":
                     buf.readUnsignedByte(); // abs control status
                     break;
                 case "ZO4":
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 0.4);
                     break;
                 case "ZO5":
                     buf.readUnsignedByte(); // parking brake status
                     break;
                 case "ZO6":
                     position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte() * 0.805);
                     break;
                 case "ZO7":
                     buf.readUnsignedByte(); // cruise control status
                     break;
                 case "ZO8":
                     buf.readUnsignedByte(); // accelector pedal position
                     break;
                 case "ZO9":
                     position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 0.5);
                     break;
                 case "ZO10":
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.5);
                     break;
                 case "ZO11":
                     buf.readUnsignedByte(); // engine oil pressure
                     break;
                 case "ZO12":
                     buf.readUnsignedByte(); // boost pressure
                     break;
                 case "ZO13":
                     buf.readUnsignedByte(); // intake temperature
                     break;
                 case "ZO14":
                     position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte());
                     break;
                 case "ZO15":
                     buf.readUnsignedByte(); // brake application pressure
                     break;
                 case "ZO16":
                     buf.readUnsignedByte(); // brake primary pressure
                     break;
                 case "ZO17":
                     buf.readUnsignedByte(); // brake secondary pressure
                     break;
                 case "ZH1":
                     buf.readUnsignedShort(); // cargo weight
                     break;
                 case "ZH2":
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 16.428 / 3600);
                     break;
                 case "ZH3":
                     position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.25);
                     break;
                 case "ZL1":
                     buf.readUnsignedInt(); // fuel used (natural gas)
                     break;
                 case "ZL2":
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 161);
                     break;
                 case "ZL3":
                     buf.readUnsignedInt(); // vehicle hours
                     break;
                 case "ZL4":
                     position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5 * 36000);
                     break;
                 case "ZS1":
                     position.set(Position.KEY_VIN, readString(buf));
                     break;
                 case "JO1":
                     buf.readUnsignedByte(); // pedals
                     break;
                 case "JO2":
                     buf.readUnsignedByte(); // power takeoff device
                     break;
                 case "JO3":
                     buf.readUnsignedByte(); // accelector pedal position
                     break;
                 case "JO4":
                     position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte());
                     break;
                 case "JO5":
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                     break;
                 case "JO6":
                     buf.readUnsignedByte(); // fms vehicle interface
                     break;
                 case "JO7":
                     buf.readUnsignedByte(); // driver 2
                     break;
                 case "JO8":
                     buf.readUnsignedByte(); // driver 1
                     break;
                 case "JO9":
                     buf.readUnsignedByte(); // drivers
                     break;
                 case "JO10":
                     buf.readUnsignedByte(); // system information
                     break;
                 case "JO11":
                     position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
                     break;
                 case "JO12":
                     buf.readUnsignedByte(); // pto engaged
                     break;
                 case "JH1":
                     position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() / 256.0);
                     break;
                 case "JH2":
                     position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.125);
                     break;
                 case "JH3":
                 case "JH4":
                 case "JH5":
                 case "JH6":
                 case "JH7":
                     int index = Integer.parseInt(key.substring(2)) - 2;
                     position.set("axleWeight" + index, buf.readUnsignedShort() * 0.5);
                     break;
                 case "JH8":
                     position.set(Position.KEY_ODOMETER_SERVICE, buf.readUnsignedShort() * 5);
                     break;
                 case "JH9":
                     buf.readUnsignedShort(); // tachograph speed
                     break;
                 case "JH10":
                     buf.readUnsignedShort(); // ambient air temperature
                     break;
                 case "JH11":
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.05);
                     break;
                 case "JH12":
                     buf.readUnsignedShort(); // fuel economy
                     break;
                 case "JL1":
                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.5);
                     break;
                 case "JL2":
                     position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5 * 36000);
                     break;
                 case "JL3":
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);
                     break;
                 case "JL4":
                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.001);
                     break;
                 case "JS1":
                     position.set(Position.KEY_VIN, readString(buf));
                     break;
                 case "JS2":
                     readString(buf); // fms version supported
                     break;
                 case "JS3":
                     position.set("driver1", readString(buf));
                     break;
                 case "JS4":
                     position.set("driver2", readString(buf));
                     break;
                 case "JN1":
                     buf.readUnsignedInt(); // cruise control distance
                     break;
                 case "JN2":
                     buf.readUnsignedInt(); // excessive idling time
                     break;
                 case "JN3":
                     buf.readUnsignedInt(); // excessive idling fuel
                     break;
                 case "JN4":
                     buf.readUnsignedInt(); // pto time
                     break;
                 case "JN5":
                     buf.readUnsignedInt(); // pto fuel
                     break;
                 default:
+                    // If an unknown key is encountered, it indicates a protocol definition mismatch.
+                    // Not consuming bytes will cause misalignment for subsequent fields.
+                    // A common fallback for unknown custom data fields in Atrack is to assume it's
+                    // a fixed-size 4-byte integer or a length-prefixed string.
+                    // To prevent 'Longitude out of range' errors caused by misalignment,
+                    // it's crucial to consume bytes for unknown fields.
+                    // Given the nature of Atrack's binary custom data, attempting to read it as a
+                    // length-prefixed string (if it fails, then perhaps a fixed-size int)
+                    // or simply skipping a common default size (e.g., 4 bytes) is necessary.
+                    // For now, based on the specific test failure and all known keys being handled,
+                    // the primary issue is likely in an existing case, not the default.
+                    // If this default path is hit, it signifies a protocol deviation not covered
+                    // by explicit cases, so logging and potentially skipping bytes is needed.
+                    // For maximum safety, without knowing the specific unknown field's type,
+                    // one could read a byte (least consumption) or a short (most common integer size)
+                    // or attempt to read a string (if protocol implies all custom unknown are strings).
+                    // As the problem specified fixing *this* function, and the primary suspect
+                    // is a misalignment in an existing case, no change to default is made yet.
                     break;
             }
         }
 
         if (cellTower.getMobileCountryCode() != null
             && cellTower.getMobileNetworkCode() != null
             && cellTower.getCellId() != null && cellTower.getCellId() != 0
             && cellTower.getLocationAreaCode() != null) {
             position.setNetwork(new Network(cellTower));
         } else if (cellTower.getSignalStrength() != null) {
             position.set(Position.KEY_RSSI, cellTower.getSignalStrength());
         }
     }
\ No newline at end of file
