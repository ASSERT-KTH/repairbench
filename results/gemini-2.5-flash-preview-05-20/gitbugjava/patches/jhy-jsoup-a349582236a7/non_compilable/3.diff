diff --git a/tmp/da4722a0-14af-48d6-8958-1eecdfbd7245_buggy.java b/tmp/542a6618-db70-4d52-92d2-36c46af97ba3_fixed.java
index 3ecd591..dcd07db 100644
--- a/tmp/da4722a0-14af-48d6-8958-1eecdfbd7245_buggy.java
+++ b/tmp/542a6618-db70-4d52-92d2-36c46af97ba3_fixed.java
@@ -1,6 +1,35 @@
     private boolean isInlineable(Document.OutputSettings out) {
-        return tag().isInline()
-            && (parent() == null || parent().isBlock())
-            && previousSibling() != null
-            && !out.outline();
+        // 1. Element's tag must be inline.
+        if (!tag().isInline()) {
+            return false;
+        }
+
+        // 2. Element must not contain any block-level children.
+        // If an inline element contains a block element, it should not be considered inlineable.
+        for (org.jsoup.nodes.Node child : this.childNodes()) {
+            if (child instanceof org.jsoup.nodes.Element) {
+                org.jsoup.nodes.Element elChild = (org.jsoup.nodes.Element) child;
+                if (elChild.tag().isBlock()) {
+                    return false;
+                }
+            }
+        }
+
+        // 3. Parent must be a block element or null (root).
+        // This ensures that inline elements nested within other inline elements
+        // (e.g., `<span><b>text</b></span>`) do not get unnecessarily broken onto new lines,
+        // unless they are explicitly not inlineable by other rules.
+        if (parent() != null && !parent().isBlock()) {
+            return false;
+        }
+
+        // 4. Output settings must not disallow outlining (pretty printing mode).
+        if (out.outline()) {
+            return false;
+        }
+
+        // Removed the `previousSibling() != null` condition.
+        // This allows the first inline child of a block element to be considered inlineable,
+        // which helps in keeping sequences of inline elements on the same line (e.g., <a><a>).
+        return true;
     }
\ No newline at end of file
