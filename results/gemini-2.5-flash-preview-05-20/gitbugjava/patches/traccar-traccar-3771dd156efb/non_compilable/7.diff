diff --git a/tmp/387a31c5-a89c-4239-b545-0b5f2c7ca105_buggy.java b/tmp/80b82040-5a97-4ab5-9872-587c409abd99_fixed.java
index 3da904d..30dbf67 100644
--- a/tmp/387a31c5-a89c-4239-b545-0b5f2c7ca105_buggy.java
+++ b/tmp/80b82040-5a97-4ab5-9872-587c409abd99_fixed.java
@@ -1,73 +1,114 @@
     private Position decodePosition(DeviceSession deviceSession, String data) {
 
         Parser parser = new Parser(PATTERN_POSITION, data);
         if (!parser.matches()) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
         position.setValid(parser.next().equals("A"));
         position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
         position.setCourse(parser.nextDouble(0));
         position.setAltitude(parser.nextDouble(0));
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_RSSI, parser.nextInt(0));
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
         position.set(Position.KEY_STEPS, parser.nextInt(0));
 
         int status = parser.nextHexInt(0);
         position.set(Position.KEY_ALARM, decodeAlarm(status));
         if (BitUtil.check(status, 4)) {
             position.set(Position.KEY_MOTION, true);
         }
 
         String[] values = parser.next().split(",");
         int index = 0;
 
         Network network = new Network();
 
-        int cellCount = Integer.parseInt(values[index++]);
+        int cellCount = 0;
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
+                cellCount = Integer.parseInt(values[index]);
+            } catch (NumberFormatException e) {
+                // If cellCount cannot be parsed, treat it as 0 to avoid further errors
+            }
+        }
+        index++; // Move past cellCount
+
         if (cellCount > 0) {
             index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+
+            // Helper function to safely parse integer values for cell tower info,
+            // handling empty strings, common invalid hex values (FFFF/FFFE),
+            // and attempting both decimal and hexadecimal parsing.
+            java.util.function.Function<String, Integer> parseCellInfoValue = s -> {
+                if (s.isEmpty()) {
+                    return 0;
+                }
+                // Common sentinel values indicating invalid/unknown data
+                if (s.equalsIgnoreCase("FFFF") || s.equalsIgnoreCase("FFFE")) {
+                    return 0;
+                }
+                try {
+                    // Try parsing as decimal first
+                    return Integer.parseInt(s);
+                } catch (NumberFormatException e) {
+                    try {
+                        // If decimal fails, try parsing as hexadecimal
+                        return Integer.parseInt(s, 16);
+                    } catch (NumberFormatException ex) {
+                        // If both fail, return 0
+                        return 0;
+                    }
+                }
+            };
+
+            int mcc = parseCellInfoValue.apply(values[index++]);
+            int mnc = parseCellInfoValue.apply(values[index++]);
 
             for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
+                int lac = parseCellInfoValue.apply(values[index++]);
+                int cid = parseCellInfoValue.apply(values[index++]);
                 String rssi = values[index++];
                 if (!rssi.isEmpty()) {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
                 } else {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                 }
             }
         }
 
         if (index < values.length && !values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
+            int wifiCount = 0;
+            try {
+                wifiCount = Integer.parseInt(values[index]);
+            } catch (NumberFormatException e) {
+                // If wifiCount cannot be parsed, treat it as 0
+            }
+            index++; // Move past wifiCount
 
             for (int i = 0; i < wifiCount; i++) {
                 index += 1; // wifi name
                 String macAddress = values[index++];
                 String rssi = values[index++];
                 if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
                     network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
                 }
             }
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         return position;
     }
\ No newline at end of file
