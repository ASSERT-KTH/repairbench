diff --git a/tmp/ae862d46-e281-4d1e-b3d0-5d3ac1b71eb0_buggy.java b/tmp/4113a6d5-f821-4240-8583-004e3949906e_fixed.java
index 3da904d..5d97884 100644
--- a/tmp/ae862d46-e281-4d1e-b3d0-5d3ac1b71eb0_buggy.java
+++ b/tmp/4113a6d5-f821-4240-8583-004e3949906e_fixed.java
@@ -1,73 +1,126 @@
     private Position decodePosition(DeviceSession deviceSession, String data) {
 
         Parser parser = new Parser(PATTERN_POSITION, data);
         if (!parser.matches()) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
         position.setValid(parser.next().equals("A"));
         position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
         position.setCourse(parser.nextDouble(0));
         position.setAltitude(parser.nextDouble(0));
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_RSSI, parser.nextInt(0));
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
         position.set(Position.KEY_STEPS, parser.nextInt(0));
 
         int status = parser.nextHexInt(0);
         position.set(Position.KEY_ALARM, decodeAlarm(status));
         if (BitUtil.check(status, 4)) {
             position.set(Position.KEY_MOTION, true);
         }
 
         String[] values = parser.next().split(",");
         int index = 0;
 
         Network network = new Network();
 
+        // cellCount is expected to be a valid integer, so no change needed here
         int cellCount = Integer.parseInt(values[index++]);
         if (cellCount > 0) {
             index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+
+            // MCC can be 'FFFF' or 'FFFE' as placeholders, or actual hex/decimal values
+            int mcc = 0;
+            String mccString = values[index++];
+            if (mccString.equalsIgnoreCase("FFFF") || mccString.equalsIgnoreCase("FFFE")) {
+                mcc = 0; // Treat FFFF/FFFE as 0 for unknown
+            } else if (!mccString.isEmpty()) {
+                try {
+                    mcc = Integer.parseInt(mccString, 16); // Try parsing as hex (also handles decimal numbers correctly)
+                } catch (NumberFormatException e) {
+                    // Fallback to 0 if parsing fails
+                    mcc = 0;
+                }
+            }
+
+            // MNC can be 'FFFF' or 'FFFE' as placeholders, or actual hex/decimal values
+            int mnc = 0;
+            String mncString = values[index++];
+            if (mncString.equalsIgnoreCase("FFFF") || mncString.equalsIgnoreCase("FFFE")) {
+                mnc = 0; // Treat FFFF/FFFE as 0 for unknown
+            } else if (!mncString.isEmpty()) {
+                try {
+                    mnc = Integer.parseInt(mncString, 16); // Try parsing as hex
+                } catch (NumberFormatException e) {
+                    // Fallback to 0 if parsing fails
+                    mnc = 0;
+                }
+            }
 
             for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
+                // LAC can be 'FFFF' or 'FFFE' as placeholders, or actual hex/decimal values
+                int lac = 0;
+                String lacString = values[index++];
+                if (lacString.equalsIgnoreCase("FFFF") || lacString.equalsIgnoreCase("FFFE")) {
+                    lac = 0; // Treat FFFF/FFFE as 0 for unknown
+                } else if (!lacString.isEmpty()) {
+                    try {
+                        lac = Integer.parseInt(lacString, 16); // Try parsing as hex
+                    } catch (NumberFormatException e) {
+                        // Fallback to 0 if parsing fails
+                        lac = 0;
+                    }
+                }
+
+                // CID can be 'FFFF', 'FFFE' as placeholders, or actual hex/decimal values (e.g., '3B882A2')
+                int cid = 0;
+                String cidString = values[index++];
+                if (cidString.equalsIgnoreCase("FFFF") || cidString.equalsIgnoreCase("FFFE")) {
+                    cid = 0; // Treat FFFF/FFFE as 0 for unknown
+                } else if (!cidString.isEmpty()) {
+                    try {
+                        cid = Integer.parseInt(cidString, 16); // Try parsing as hex
+                    } catch (NumberFormatException e) {
+                        // Fallback to 0 if parsing fails
+                        cid = 0;
+                    }
+                }
+
                 String rssi = values[index++];
                 if (!rssi.isEmpty()) {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
                 } else {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                 }
             }
         }
 
         if (index < values.length && !values[index].isEmpty()) {
             int wifiCount = Integer.parseInt(values[index++]);
 
             for (int i = 0; i < wifiCount; i++) {
                 index += 1; // wifi name
                 String macAddress = values[index++];
                 String rssi = values[index++];
                 if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
                     network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
                 }
             }
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         return position;
     }
\ No newline at end of file
