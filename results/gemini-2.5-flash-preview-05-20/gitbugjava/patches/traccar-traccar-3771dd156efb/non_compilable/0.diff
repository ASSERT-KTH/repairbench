diff --git a/tmp/ce574c2d-549d-456c-9b78-a6a8fb6e0fed_buggy.java b/tmp/3f70e517-b02e-4f16-b5f1-a509813f2b1b_fixed.java
index 3da904d..c698c87 100644
--- a/tmp/ce574c2d-549d-456c-9b78-a6a8fb6e0fed_buggy.java
+++ b/tmp/3f70e517-b02e-4f16-b5f1-a509813f2b1b_fixed.java
@@ -1,73 +1,161 @@
-    private Position decodePosition(DeviceSession deviceSession, String data) {
+import org.traccar.model.CellTower;
+import org.traccar.model.Network;
+import org.traccar.model.Position;
+import org.traccar.model.WifiAccessPoint;
+import org.traccar.BaseProtocolDecoder;
+import org.traccar.DeviceSession;
+import org.traccar.helper.BitUtil;
+import org.traccar.helper.UnitsConverter;
+import org.traccar.helper.PatternBuilder;
+import org.traccar.helper.Parser;
+
+import java.util.regex.Pattern;
+
+public class WatchProtocolDecoder extends BaseProtocolDecoder {
+
+    private static final Pattern PATTERN_POSITION = new PatternBuilder()
+            .text("UD")
+            .expression("2?,") // type
+            .number("(dd)(dd)(dd),")    // date (DDMMYY)
+            .number("(dd)(dd)(dd),")    // time (HHMMSS)
+            .expression("([AV]),")      // validity
+            .number("(-?d+.d+),")       // latitude
+            .expression("([NS]),")
+            .number("(-?d+.d+),")       // longitude
+            .expression("([EW]),")
+            .number("(d+.d+),")         // speed
+            .number("(d+.d+),")         // course
+            .number("(-?d+.d+),")       // altitude
+            .number("(d+),")            // satellites
+            .number("(d+),")            // rssi
+            .number("(d+),")            // battery
+            .number("(d+),")            // steps
+            .number("(d+),")            // reserved
+            .number("(x+),")            // status
+            .number("(d+),")            // alarm (0)
+            .number("(d+)")             // alarm (1)
+            .group("(.+)")              // cell and wifi
+            .compile();
+
+    public WatchProtocolDecoder(WatchProtocol protocol) {
+        super(protocol);
+    }
+
+    private String decodeAlarm(int status) {
+        if (BitUtil.check(status, 0)) {
+            return Position.ALARM_SOS;
+        } else if (BitUtil.check(status, 1)) {
+            return Position.ALARM_LOW_BATTERY;
+        } else if (BitUtil.check(status, 2)) {
+            return Position.ALARM_FALL;
+        } else if (BitUtil.check(status, 3)) {
+            return Position.ALARM_OVERSPEED;
+        } else if (BitUtil.check(status, 5)) {
+            return Position.ALARM_GEOFENCE_EXIT;
+        } else if (BitUtil.check(status, 6)) {
+            return Position.ALARM_GEOFENCE_ENTER;
+        } else if (BitUtil.check(status, 7)) {
+            return Position.ALARM_VIBRATION;
+        } else if (BitUtil.check(status, 8)) {
+            return Position.ALARM_POWER_OFF;
+        } else if (BitUtil.check(status, 9)) {
+            return Position.ALARM_DOOR;
+        } else if (BitUtil.check(status, 10)) {
+            return Position.ALARM_TAMPERING;
+        } else if (BitUtil.check(status, 11)) {
+            return Position.ALARM_REMOVING;
+        }
+        return null;
+    }
+
+    // Helper method to parse integer values that might be hex-encoded or sentinel values
+    private int readInt(String value) {
+        if (value.isEmpty() || value.equalsIgnoreCase("FFFF") || value.equalsIgnoreCase("FFFE")) {
+            return 0; // Map unknown/invalid to 0
+        }
+        try {
+            return Integer.parseInt(value); // Try parsing as decimal first
+        } catch (NumberFormatException e) {
+            try {
+                return Integer.parseInt(value, 16); // If decimal fails, try parsing as hex
+            } catch (NumberFormatException ex) {
+                return 0; // Fallback for truly unparseable values
+            }
+        }
+    }
+
+    @Override
+    protected Position decodePosition(DeviceSession deviceSession, String data) {
 
         Parser parser = new Parser(PATTERN_POSITION, data);
         if (!parser.matches()) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
         position.setValid(parser.next().equals("A"));
         position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
         position.setCourse(parser.nextDouble(0));
         position.setAltitude(parser.nextDouble(0));
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_RSSI, parser.nextInt(0));
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
         position.set(Position.KEY_STEPS, parser.nextInt(0));
 
         int status = parser.nextHexInt(0);
         position.set(Position.KEY_ALARM, decodeAlarm(status));
         if (BitUtil.check(status, 4)) {
             position.set(Position.KEY_MOTION, true);
         }
 
         String[] values = parser.next().split(",");
         int index = 0;
 
         Network network = new Network();
 
-        int cellCount = Integer.parseInt(values[index++]);
+        int cellCount = readInt(values[index++]); // Use helper for cellCount
         if (cellCount > 0) {
             index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+            int mcc = readInt(values[index++]); // Use helper for mcc
+            int mnc = readInt(values[index++]); // Use helper for mnc
 
             for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
+                int lac = readInt(values[index++]); // Use helper for lac
+                int cid = readInt(values[index++]); // Use helper for cid
                 String rssi = values[index++];
                 if (!rssi.isEmpty()) {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
                 } else {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                 }
             }
         }
 
         if (index < values.length && !values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
+            int wifiCount = readInt(values[index++]); // Use helper for wifiCount
 
             for (int i = 0; i < wifiCount; i++) {
                 index += 1; // wifi name
                 String macAddress = values[index++];
                 String rssi = values[index++];
                 if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
                     network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
                 }
             }
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         return position;
     }
+}
\ No newline at end of file
