diff --git a/tmp/3adaeb85-4f91-4550-80ff-591e3b0212f4_buggy.java b/tmp/e420921e-d16b-4f56-a3c9-1926b6244475_fixed.java
index 3da904d..bfb47d2 100644
--- a/tmp/3adaeb85-4f91-4550-80ff-591e3b0212f4_buggy.java
+++ b/tmp/e420921e-d16b-4f56-a3c9-1926b6244475_fixed.java
@@ -1,73 +1,119 @@
     private Position decodePosition(DeviceSession deviceSession, String data) {
 
         Parser parser = new Parser(PATTERN_POSITION, data);
         if (!parser.matches()) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
         position.setValid(parser.next().equals("A"));
         position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
         position.setCourse(parser.nextDouble(0));
         position.setAltitude(parser.nextDouble(0));
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_RSSI, parser.nextInt(0));
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
         position.set(Position.KEY_STEPS, parser.nextInt(0));
 
         int status = parser.nextHexInt(0);
         position.set(Position.KEY_ALARM, decodeAlarm(status));
         if (BitUtil.check(status, 4)) {
             position.set(Position.KEY_MOTION, true);
         }
 
         String[] values = parser.next().split(",");
         int index = 0;
 
         Network network = new Network();
 
         int cellCount = Integer.parseInt(values[index++]);
         if (cellCount > 0) {
             index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+
+            // Parsing for mcc, mnc, lac, cid
+            // These fields can be decimal or hexadecimal, and 'FFFF'/'FFFE' might mean unknown.
+            String mccString = values[index++];
+            int mcc;
+            if (mccString.isEmpty() || "FFFF".equalsIgnoreCase(mccString) || "FFFE".equalsIgnoreCase(mccString)) {
+                mcc = 0; // Treat 'FFFF'/'FFFE' as unknown/invalid, map to 0
+            } else {
+                try {
+                    mcc = Integer.parseInt(mccString); // Try parsing as decimal
+                } catch (NumberFormatException e) {
+                    mcc = Integer.parseInt(mccString, 16); // If decimal fails, try parsing as hexadecimal
+                }
+            }
+
+            String mncString = values[index++];
+            int mnc;
+            if (mncString.isEmpty() || "FFFF".equalsIgnoreCase(mncString) || "FFFE".equalsIgnoreCase(mncString)) {
+                mnc = 0; // Treat 'FFFF'/'FFFE' as unknown/invalid, map to 0
+            } else {
+                try {
+                    mnc = Integer.parseInt(mncString); // Try parsing as decimal
+                } catch (NumberFormatException e) {
+                    mnc = Integer.parseInt(mncString, 16); // If decimal fails, try parsing as hexadecimal
+                }
+            }
 
             for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
+                String lacString = values[index++];
+                int lac;
+                if (lacString.isEmpty() || "FFFF".equalsIgnoreCase(lacString) || "FFFE".equalsIgnoreCase(lacString)) {
+                    lac = 0; // Treat 'FFFF'/'FFFE' as unknown/invalid, map to 0
+                } else {
+                    try {
+                        lac = Integer.parseInt(lacString); // Try parsing as decimal
+                    } catch (NumberFormatException e) {
+                        lac = Integer.parseInt(lacString, 16); // If decimal fails, try parsing as hexadecimal
+                    }
+                }
+
+                String cidString = values[index++];
+                int cid;
+                if (cidString.isEmpty() || "FFFF".equalsIgnoreCase(cidString) || "FFFE".equalsIgnoreCase(cidString)) {
+                    cid = 0; // Treat 'FFFF'/'FFFE' as unknown/invalid, map to 0
+                } else {
+                    try {
+                        cid = Integer.parseInt(cidString); // Try parsing as decimal
+                    } catch (NumberFormatException e) {
+                        cid = Integer.parseInt(cidString, 16); // If decimal fails, try parsing as hexadecimal
+                    }
+                }
+
                 String rssi = values[index++];
                 if (!rssi.isEmpty()) {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
                 } else {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                 }
             }
         }
 
         if (index < values.length && !values[index].isEmpty()) {
             int wifiCount = Integer.parseInt(values[index++]);
 
             for (int i = 0; i < wifiCount; i++) {
                 index += 1; // wifi name
                 String macAddress = values[index++];
                 String rssi = values[index++];
                 if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
                     network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
                 }
             }
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         return position;
     }
\ No newline at end of file
