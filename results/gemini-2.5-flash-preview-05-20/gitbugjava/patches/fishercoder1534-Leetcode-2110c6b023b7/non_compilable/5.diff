diff --git a/tmp/3654f413-43bc-47b4-b2d1-b1acb6599ac8_buggy.java b/tmp/4c3d467b-b5bb-4251-a142-5fbe33689519_fixed.java
index dd3b100..53bbdb4 100644
--- a/tmp/3654f413-43bc-47b4-b2d1-b1acb6599ac8_buggy.java
+++ b/tmp/4c3d467b-b5bb-4251-a142-5fbe33689519_fixed.java
@@ -1,12 +1,24 @@
+class Solution {
     public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
-            if (root == null || p == root || q == root) {
-                return root;
+        // Base case: If root is null, it means we've gone past the target nodes,
+        // or p/q were not found in this branch. (Typically, p and q are guaranteed to be in the tree).
+        if (root == null) {
+            return null;
         }
-            if ((root.val - p.val) * (root.val - q.val) > 0) {
-                if (root.val - p.val > 0) {
+
+        // If both p and q are in the left subtree (their values are less than root.val)
+        if (root.val > p.val && root.val > q.val) {
             return lowestCommonAncestor(root.left, p, q);
         }
+        // If both p and q are in the right subtree (their values are greater than root.val)
+        else if (root.val < p.val && root.val < q.val) {
             return lowestCommonAncestor(root.right, p, q);
         }
+        // Otherwise, root is the LCA. This occurs if:
+        // 1. One node is in the left subtree and the other is in the right subtree.
+        // 2. One of the nodes (p or q) is the root itself (by value).
+        else {
             return root;
         }
+    }
+}
\ No newline at end of file
