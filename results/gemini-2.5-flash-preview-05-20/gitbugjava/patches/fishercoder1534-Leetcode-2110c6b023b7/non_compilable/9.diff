diff --git a/tmp/136cf300-afaa-4496-97ad-463408ec7dc6_buggy.java b/tmp/5cc48d59-f217-433a-b2e2-f4e87ba9a4d0_fixed.java
index dd3b100..12d43d0 100644
--- a/tmp/136cf300-afaa-4496-97ad-463408ec7dc6_buggy.java
+++ b/tmp/5cc48d59-f217-433a-b2e2-f4e87ba9a4d0_fixed.java
@@ -1,12 +1,54 @@
+class TreeNode {
+    int val;
+    TreeNode left;
+    TreeNode right;
+    TreeNode(int x) { val = x; }
+
+    // It's good practice to override equals and hashCode for comparison,
+    // especially when dealing with objects that conceptually represent values.
+    // However, for typical LeetCode problems, TreeNode comparison usually defaults to reference equality (==)
+    // unless explicitly defined. The fix below works regardless.
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        TreeNode treeNode = (TreeNode) o;
+        return val == treeNode.val;
+    }
+
+    @Override
+    public int hashCode() {
+        return Integer.hashCode(val);
+    }
+}
+
+class Solution {
     public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
-            if (root == null || p == root || q == root) {
+        // Base case: If root is null, or if p or q is the current root node (by reference),
+        // then the current root is the LCA.
+        // This handles cases where p or q are descendants of each other, or if one of them is the root itself.
+        if (root == null || root == p || root == q) {
             return root;
         }
-            if ((root.val - p.val) * (root.val - q.val) > 0) {
-                if (root.val - p.val > 0) {
+
+        // If both p and q values are less than the current root's value,
+        // then the LCA must be in the left subtree.
+        // This condition replaces `(root.val - p.val) * (root.val - q.val) > 0` for the 'left' side.
+        if (root.val > p.val && root.val > q.val) {
             return lowestCommonAncestor(root.left, p, q);
         }
+        // If both p and q values are greater than the current root's value,
+        // then the LCA must be in the right subtree.
+        // This condition replaces the `else` part of the original nested `if` for the 'right' side.
+        else if (root.val < p.val && root.val < q.val) {
             return lowestCommonAncestor(root.right, p, q);
         }
+        // Otherwise (p and q are on opposite sides of the root, or one of them equals the root's value),
+        // the current root is the LCA.
+        // This covers the case where the original code would `return root;` at the end.
+        else {
             return root;
         }
+    }
+}
\ No newline at end of file
