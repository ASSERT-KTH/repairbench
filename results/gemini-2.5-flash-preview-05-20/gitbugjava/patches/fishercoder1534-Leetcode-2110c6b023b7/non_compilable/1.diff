diff --git a/tmp/bda0a3ed-7040-4737-ab82-0f151585baac_buggy.java b/tmp/16014dac-3a96-4a2f-9f3a-5c76c4d7661b_fixed.java
index dd3b100..a698ea7 100644
--- a/tmp/bda0a3ed-7040-4737-ab82-0f151585baac_buggy.java
+++ b/tmp/16014dac-3a96-4a2f-9f3a-5c76c4d7661b_fixed.java
@@ -1,12 +1,32 @@
         public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
-            if (root == null || p == root || q == root) {
+            // Base case: If root is null, or if the current root node is one of p or q.
+            // This is essential for terminating recursion and correctly identifying the LCA
+            // when one of the target nodes is an ancestor of the other, including itself.
+            if (root == null || root == p || root == q) {
                 return root;
             }
-            if ((root.val - p.val) * (root.val - q.val) > 0) {
-                if (root.val - p.val > 0) {
+
+            // Use long for comparisons to prevent potential integer overflow issues
+            // when TreeNode.val can be at the extremes of the int range.
+            long rootVal = root.val;
+            long pVal = p.val;
+            long qVal = q.val;
+
+            // Case 1: Both p and q are in the left subtree.
+            // This occurs if both p.val and q.val are less than root.val.
+            if (pVal < rootVal && qVal < rootVal) {
                 return lowestCommonAncestor(root.left, p, q);
             }
+            // Case 2: Both p and q are in the right subtree.
+            // This occurs if both p.val and q.val are greater than root.val.
+            else if (pVal > rootVal && qVal > rootVal) {
                 return lowestCommonAncestor(root.right, p, q);
             }
+            // Case 3: p and q are on different sides of root, or one of them is equal to root.val.
+            // In these scenarios, the current root is the lowest common ancestor.
+            // This implicitly covers situations like (p < root < q), (q < root < p),
+            // (p == root), or (q == root).
+            else {
                 return root;
             }
+        }
\ No newline at end of file
