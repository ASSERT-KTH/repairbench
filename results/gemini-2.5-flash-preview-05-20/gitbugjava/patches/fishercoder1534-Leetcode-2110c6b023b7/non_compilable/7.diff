diff --git a/tmp/e8dff44a-98d0-4eb4-be58-dcc6d5ce50dd_buggy.java b/tmp/193c2fd9-7b2d-4b77-93fb-a0a5e1ef852e_fixed.java
index dd3b100..ce395b5 100644
--- a/tmp/e8dff44a-98d0-4eb4-be58-dcc6d5ce50dd_buggy.java
+++ b/tmp/193c2fd9-7b2d-4b77-93fb-a0a5e1ef852e_fixed.java
@@ -1,12 +1,51 @@
+class TreeNode {
+    int val;
+    TreeNode left;
+    TreeNode right;
+    TreeNode(int x) { val = x; }
+
+    // This method is usually part of TreeNode or provided by a utility class
+    // It's included here to make the class compilable in isolation if needed
+    // but the actual definition might be different based on the context.
+    // For the purpose of this problem, only the lowestCommonAncestor method is needed.
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        TreeNode treeNode = (TreeNode) o;
+        return val == treeNode.val;
+    }
+
+    @Override
+    public int hashCode() {
+        return java.util.Objects.hash(val);
+    }
+}
+
+class Solution { // Assuming the original method was inside a Solution class
     public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
+        // Base case: if root is null, or if p or q is the current root node.
+        // This implicitly handles cases where one of the nodes is the LCA.
+        // For instance, if p is the root, then root is the LCA.
         if (root == null || p == root || q == root) {
             return root;
         }
-            if ((root.val - p.val) * (root.val - q.val) > 0) {
-                if (root.val - p.val > 0) {
+
+        // If both p and q are in the left subtree
+        if (p.val < root.val && q.val < root.val) {
             return lowestCommonAncestor(root.left, p, q);
         }
+        // If both p and q are in the right subtree
+        else if (p.val > root.val && q.val > root.val) {
             return lowestCommonAncestor(root.right, p, q);
         }
+        // If p and q are on different sides of the root, or if one of them is the root itself (by value).
+        // In a BST, this means the current root is the LCA.
+        // This covers cases like:
+        // (p.val <= root.val && q.val >= root.val) OR (q.val <= root.val && p.val >= root.val)
+        // And also cases where p.val == root.val or q.val == root.val.
+        else {
             return root;
         }
+    }
+}
\ No newline at end of file
