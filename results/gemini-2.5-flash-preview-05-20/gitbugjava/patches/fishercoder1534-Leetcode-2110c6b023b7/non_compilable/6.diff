diff --git a/tmp/74c432bf-a5b8-4ac3-a67b-44a9ccd7201b_buggy.java b/tmp/4aa44bbb-77b1-40f3-aaaf-067594c047d2_fixed.java
index dd3b100..26eeb4f 100644
--- a/tmp/74c432bf-a5b8-4ac3-a67b-44a9ccd7201b_buggy.java
+++ b/tmp/4aa44bbb-77b1-40f3-aaaf-067594c047d2_fixed.java
@@ -1,12 +1,42 @@
+class TreeNode {
+    int val;
+    TreeNode left;
+    TreeNode right;
+
+    TreeNode(int x) {
+        val = x;
+    }
+}
+
+class Solution {
     public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
+        // Handle base cases:
+        // 1. If the current node is null, it cannot be an ancestor.
+        // 2. If p or q is the current root node (by reference equality), then root is the LCA.
+        //    This also handles the case where p or q's value matches root's value,
+        //    and effectively means if one of the nodes is found, it's the LCA if the other
+        //    node is in its subtree (which is always true for BST LCA definition).
         if (root == null || p == root || q == root) {
             return root;
         }
-            if ((root.val - p.val) * (root.val - q.val) > 0) {
-                if (root.val - p.val > 0) {
+
+        // Determine if p and q are both in the left subtree or both in the right subtree.
+        // We use value comparison to navigate in a BST.
+        // If both p.val and q.val are less than root.val,
+        // then the LCA must be in the left subtree.
+        if (p.val < root.val && q.val < root.val) {
             return lowestCommonAncestor(root.left, p, q);
         }
+        // If both p.val and q.val are greater than root.val,
+        // then the LCA must be in the right subtree.
+        else if (p.val > root.val && q.val > root.val) {
             return lowestCommonAncestor(root.right, p, q);
         }
+        // Otherwise, p and q are on different sides of the root,
+        // or one of them is equal to root.val.
+        // In a BST, this means the current root is the lowest common ancestor.
+        else {
             return root;
         }
+    }
+}
\ No newline at end of file
