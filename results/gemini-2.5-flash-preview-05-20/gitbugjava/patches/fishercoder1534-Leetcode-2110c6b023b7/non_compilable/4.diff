diff --git a/tmp/b4ef1152-05b0-4df4-bc22-c63f2a960bfb_buggy.java b/tmp/d596077b-0bab-48a2-80fa-f538b48f01ca_fixed.java
index dd3b100..9e20900 100644
--- a/tmp/b4ef1152-05b0-4df4-bc22-c63f2a960bfb_buggy.java
+++ b/tmp/d596077b-0bab-48a2-80fa-f538b48f01ca_fixed.java
@@ -1,12 +1,20 @@
         public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
+            // If the current node is null, or if p or q is the current node, then this node is the LCA.
+            // This covers cases where p or q is the root itself (by object reference).
             if (root == null || p == root || q == root) {
                 return root;
             }
-            if ((root.val - p.val) * (root.val - q.val) > 0) {
-                if (root.val - p.val > 0) {
+
+            // If both p and q are in the left subtree of the current root.
+            // This avoids potential integer overflow issues present in the original (root.val - p.val) * (root.val - q.val) check.
+            if (p.val < root.val && q.val < root.val) {
                 return lowestCommonAncestor(root.left, p, q);
             }
+            // If both p and q are in the right subtree of the current root.
+            else if (p.val > root.val && q.val > root.val) {
                 return lowestCommonAncestor(root.right, p, q);
             }
+            // Otherwise, p and q are on opposite sides of the current root, or one of them IS the current root (by value, not necessarily by object reference, which is handled above).
+            // In this scenario, the current root is the LCA.
             return root;
         }
\ No newline at end of file
