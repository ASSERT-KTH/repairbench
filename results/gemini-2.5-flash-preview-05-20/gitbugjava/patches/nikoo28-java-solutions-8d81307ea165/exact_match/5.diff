diff --git a/tmp/28c13afa-8530-4bea-b0ba-3606d15186e2_buggy.java b/tmp/f866100d-fb13-4331-8e50-ecca3fc64263_fixed.java
index 9739964..fb4f867 100644
--- a/tmp/28c13afa-8530-4bea-b0ba-3606d15186e2_buggy.java
+++ b/tmp/f866100d-fb13-4331-8e50-ecca3fc64263_fixed.java
@@ -1,27 +1,44 @@
   public int[] calculateSpans(int[] prices) {
 
     int[] spans = new int[prices.length];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
+      // The original condition `prices[indexStack.peek()] <= prices[i]`
+      // implies that if a previous price is equal to the current price,
+      // it should be popped from the stack, allowing the span to extend
+      // further back. This leads to spans like {1, 2, 3, 4} for {10, 10, 10, 10}.
+      //
+      // The failing test `testCalculateSpans6` expects {1, 1, 1, 1} for {10, 10, 10, 10}.
+      // This implies that for consecutive equal prices, the span should be 1.
+      // To achieve this, if a previous price is *equal* to the current price,
+      // its index should NOT be popped from the stack. It should serve as the
+      // 'barrier' for the current price's span, making the span calculation
+      // `i - indexStack.peek()` result in 1.
+      //
+      // Therefore, the condition to pop should only be for prices strictly less than
+      // the current price.
       while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
+          && prices[indexStack.peek()] < prices[i]) // Changed from <= to <
         indexStack.pop();
 
-      // If index stack is empty, the price at index 'i'
-      // is greater than all previous values
+      // If index stack is empty, it means all previous values were strictly smaller
+      // than the current price. So the span is 'i + 1' (including all previous days).
       if (indexStack.isEmpty())
         spans[i] = i + 1;
       else
+        // Otherwise, indexStack.peek() holds the index of the first element to the left
+        // that is greater than or equal to the current price.
+        // The span is the difference between current index and that boundary index.
         spans[i] = i - indexStack.peek();
 
       indexStack.push(i);
     }
 
     return spans;
   }
\ No newline at end of file
