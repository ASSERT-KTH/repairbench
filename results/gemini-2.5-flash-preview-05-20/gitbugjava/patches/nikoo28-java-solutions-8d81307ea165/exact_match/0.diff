diff --git a/tmp/8f4953f1-e5fe-49c9-b018-a05ace3f8ae1_buggy.java b/tmp/e83b0f45-cc37-4d19-ab71-1d54108cf9ef_fixed.java
index 9739964..ff7217d 100644
--- a/tmp/8f4953f1-e5fe-49c9-b018-a05ace3f8ae1_buggy.java
+++ b/tmp/e83b0f45-cc37-4d19-ab71-1d54108cf9ef_fixed.java
@@ -1,27 +1,39 @@
   public int[] calculateSpans(int[] prices) {
 
     int[] spans = new int[prices.length];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
+      // The original condition `prices[indexStack.peek()] <= prices[i]`
+      // pops elements that are less than or equal to the current price.
+      // This results in spans that include previous days with equal prices.
+      // For the test case {10, 10, 10, 10} expecting {1, 1, 1, 1},
+      // we need to stop popping when we encounter a price that is
+      // greater than or *equal to* the current price.
+      // Changing the condition to `prices[indexStack.peek()] < prices[i]`
+      // ensures that we stop at the first previous price that is
+      // greater than or equal to the current price, thus correctly
+      // calculating the span for the given test.
       while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
+          && prices[indexStack.peek()] < prices[i]) // Changed <= to <
         indexStack.pop();
 
       // If index stack is empty, the price at index 'i'
-      // is greater than all previous values
+      // is greater than or equal to all previous values
+      // (in the context of the modified loop, this means all previous
+      // values were strictly less than prices[i])
       if (indexStack.isEmpty())
         spans[i] = i + 1;
       else
         spans[i] = i - indexStack.peek();
 
       indexStack.push(i);
     }
 
     return spans;
   }
\ No newline at end of file
