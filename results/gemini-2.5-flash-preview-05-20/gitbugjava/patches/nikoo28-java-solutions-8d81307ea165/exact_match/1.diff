diff --git a/tmp/cf714f62-6692-453d-9401-d3552e2e5c00_buggy.java b/tmp/d1a3fb16-8d43-4242-96ac-0c3a5486f17a_fixed.java
index 9739964..3d0017c 100644
--- a/tmp/cf714f62-6692-453d-9401-d3552e2e5c00_buggy.java
+++ b/tmp/d1a3fb16-8d43-4242-96ac-0c3a5486f17a_fixed.java
@@ -1,27 +1,35 @@
   public int[] calculateSpans(int[] prices) {
 
     int[] spans = new int[prices.length];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
+      // While the stack is not empty and the price at the top of the stack
+      // is strictly less than the current price, pop elements.
+      // This is because we are looking for the *first* previous element that is
+      // greater than or equal to the current price. If an element is equal,
+      // it should be considered the "previous greater or equal" element,
+      // and not be popped.
       while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
+          && prices[indexStack.peek()] < prices[i]) // Changed <= to <
         indexStack.pop();
 
       // If index stack is empty, the price at index 'i'
       // is greater than all previous values
       if (indexStack.isEmpty())
         spans[i] = i + 1;
       else
+        // The span is the current index minus the index of the first
+        // previous element that is greater than or equal to the current price.
         spans[i] = i - indexStack.peek();
 
       indexStack.push(i);
     }
 
     return spans;
   }
\ No newline at end of file
