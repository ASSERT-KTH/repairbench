diff --git a/tmp/8cf12919-a03f-4590-ace1-2c010b2f1994_buggy.java b/tmp/ec101d4b-74a3-4543-a5d6-3d3b5eae7231_fixed.java
index 9739964..ba0759e 100644
--- a/tmp/8cf12919-a03f-4590-ace1-2c010b2f1994_buggy.java
+++ b/tmp/ec101d4b-74a3-4543-a5d6-3d3b5eae7231_fixed.java
@@ -1,27 +1,34 @@
   public int[] calculateSpans(int[] prices) {
 
     int[] spans = new int[prices.length];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
+      // Pop elements from stack whose prices are strictly less than the current price.
+      // If the price at indexStack.peek() is equal to prices[i], it acts as a boundary
+      // for the span calculation, and should not be popped.
       while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
+          && prices[indexStack.peek()] < prices[i]) // Changed from <= to <
         indexStack.pop();
 
       // If index stack is empty, the price at index 'i'
-      // is greater than all previous values
+      // is greater than or equal to all previous values.
+      // Its span is 'i + 1' (from index 0 to 'i').
       if (indexStack.isEmpty())
         spans[i] = i + 1;
       else
+        // If index stack is not empty, indexStack.peek() contains the index
+        // of the first element to the left that is greater than or equal to prices[i].
+        // The span is the current index 'i' minus that boundary index.
         spans[i] = i - indexStack.peek();
 
       indexStack.push(i);
     }
 
     return spans;
   }
\ No newline at end of file
