diff --git a/tmp/7b8a10f4-7336-4d57-84cd-013a46c5eefa_buggy.java b/tmp/ac4a5675-83f4-4000-8da1-5e57e40337cd_fixed.java
index 9739964..f7b6073 100644
--- a/tmp/7b8a10f4-7336-4d57-84cd-013a46c5eefa_buggy.java
+++ b/tmp/ac4a5675-83f4-4000-8da1-5e57e40337cd_fixed.java
@@ -1,27 +1,38 @@
   public int[] calculateSpans(int[] prices) {
 
     int[] spans = new int[prices.length];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
+      // The original condition `prices[indexStack.peek()] <= prices[i]` would pop
+      // elements from the stack even if their price was equal to the current price.
+      // For the test case `prices = {10, 10, 10, 10}`, this would lead to `spans = {1, 2, 3, 4}`
+      // because `prices[0] = 10` would be popped when `prices[1] = 10` is processed,
+      // causing the stack to become empty and `spans[1]` to be `i + 1 = 2`.
+      //
+      // To satisfy the test case `spans = {1, 1, 1, 1}` for `prices = {10, 10, 10, 10}`,
+      // the stack should only pop elements whose prices are STRICTLY LESS than the current price.
+      // This means if `prices[indexStack.peek()]` is equal to `prices[i]`, it should remain on the stack.
+      // Keeping the equal price on the stack will ensure that `i - indexStack.peek()` calculates a span of 1
+      // when the current price is equal to the immediately preceding element on the stack (which would be `i-1` if no elements were popped).
       while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
+          && prices[indexStack.peek()] < prices[i]) // FIX: Changed <= to <
         indexStack.pop();
 
       // If index stack is empty, the price at index 'i'
       // is greater than all previous values
       if (indexStack.isEmpty())
         spans[i] = i + 1;
       else
         spans[i] = i - indexStack.peek();
 
       indexStack.push(i);
     }
 
     return spans;
   }
\ No newline at end of file
