diff --git a/tmp/527cbe4b-519d-463a-bb29-b9965e96d9e3_buggy.java b/tmp/e563ad49-68f9-4426-9c6f-1bf9f8cbb094_fixed.java
index 9739964..3a1819c 100644
--- a/tmp/527cbe4b-519d-463a-bb29-b9965e96d9e3_buggy.java
+++ b/tmp/e563ad49-68f9-4426-9c6f-1bf9f8cbb094_fixed.java
@@ -1,27 +1,39 @@
+import java.util.Stack;
+
+class OnlineStockSpan {
   public int[] calculateSpans(int[] prices) {
 
+    // Handle empty prices array case
+    if (prices.length == 0) {
+      return new int[0];
+    }
+
     int[] spans = new int[prices.length];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
+      // FIX: Changed the condition from '<=' to '<'
+      // This ensures that elements with equal prices are not popped from the stack,
+      // aligning with the test case's implicit requirement for equal consecutive prices.
       while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
+          && prices[indexStack.peek()] < prices[i]) // Bug fix here
         indexStack.pop();
 
       // If index stack is empty, the price at index 'i'
       // is greater than all previous values
       if (indexStack.isEmpty())
         spans[i] = i + 1;
       else
         spans[i] = i - indexStack.peek();
 
       indexStack.push(i);
     }
 
     return spans;
   }
+}
\ No newline at end of file
