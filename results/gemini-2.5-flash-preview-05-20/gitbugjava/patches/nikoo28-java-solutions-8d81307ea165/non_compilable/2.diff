diff --git a/tmp/4f2c1b3a-3ee6-4d1b-90d3-f6dbdbffd444_buggy.java b/tmp/366977d8-8299-45ee-aa82-41b5c94a9dd7_fixed.java
index 9739964..0a47b02 100644
--- a/tmp/4f2c1b3a-3ee6-4d1b-90d3-f6dbdbffd444_buggy.java
+++ b/tmp/366977d8-8299-45ee-aa82-41b5c94a9dd7_fixed.java
@@ -1,27 +1,36 @@
+import java.util.Stack;
+
+class Solution { // Assuming this is part of a class structure
   public int[] calculateSpans(int[] prices) {
 
     int[] spans = new int[prices.length];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
+      // Pop elements from stack while their prices are strictly less than the current price.
+      // If prices[indexStack.peek()] == prices[i], we stop popping.
       while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
+          && prices[indexStack.peek()] < prices[i]) // Changed from <= to <
         indexStack.pop();
 
       // If index stack is empty, the price at index 'i'
-      // is greater than all previous values
+      // is greater than all previous values (that survived the popping).
+      // This means its span extends back to the beginning.
       if (indexStack.isEmpty())
         spans[i] = i + 1;
       else
+        // The span is the distance from the current index 'i' to the index
+        // of the first element to its left that is greater than or equal to prices[i].
         spans[i] = i - indexStack.peek();
 
       indexStack.push(i);
     }
 
     return spans;
   }
+}
\ No newline at end of file
