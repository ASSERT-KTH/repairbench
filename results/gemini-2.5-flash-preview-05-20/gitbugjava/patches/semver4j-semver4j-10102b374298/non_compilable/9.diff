diff --git a/tmp/08767149-f9a1-4e28-9487-cb78b713547c_buggy.java b/tmp/3dd3bccc-c522-4f4e-a64a-21dc5cfad53b_fixed.java
index 593602f..d6142e9 100644
--- a/tmp/08767149-f9a1-4e28-9487-cb78b713547c_buggy.java
+++ b/tmp/3dd3bccc-c522-4f4e-a64a-21dc5cfad53b_fixed.java
@@ -1,6 +1,28 @@
     @Override
     public String toString() {
+        if (rangesList.isEmpty()) {
+            return "";
+        }
+
+        // If there's only one range group, we should omit the outer parentheses
+        // that `formatRanges` might implicitly add, as per the test case
+        // `shouldOmitOuterParentheses`.
+        if (rangesList.size() == 1) {
+            String formattedSingleRange = RangesList.formatRanges(rangesList.get(0));
+            // Check if the formatted string is wrapped in parentheses and remove them
+            // if it is, as these are typically for clarifying OR group boundaries
+            // when multiple groups are present.
+            if (formattedSingleRange.length() >= 2 && 
+                formattedSingleRange.startsWith("(") && 
+                formattedSingleRange.endsWith(")")) {
+                return formattedSingleRange.substring(1, formattedSingleRange.length() - 1);
+            }
+            return formattedSingleRange;
+        }
+
+        // For multiple range groups, format each group (potentially with its own
+        // parentheses to clarify AND precedence) and join them with the OR_JOINER.
         return rangesList.stream()
             .map(RangesList::formatRanges)
             .collect(joining(OR_JOINER));
     }
\ No newline at end of file
