diff --git a/tmp/442455d2-6887-4639-bf46-c43d668bc4a8_buggy.java b/tmp/d641f353-710f-4702-acf8-a50699b64821_fixed.java
index 593602f..99aab2d 100644
--- a/tmp/442455d2-6887-4639-bf46-c43d668bc4a8_buggy.java
+++ b/tmp/d641f353-710f-4702-acf8-a50699b64821_fixed.java
@@ -1,6 +1,28 @@
     @Override
     public String toString() {
-        return rangesList.stream()
+        if (rangesList.isEmpty()) {
+            return "";
+        }
+
+        // Map each internal range representation to its formatted string.
+        // It's assumed that RangesList::formatRanges correctly produces a string for each
+        // internal range (e.g., "(>=1.0.0 and <2.0.0)" or ">=3.0.0").
+        List<String> formattedRanges = rangesList.stream()
             .map(RangesList::formatRanges)
-            .collect(joining(OR_JOINER));
+            .collect(Collectors.toList());
+
+        // If there's only one formatted range, and it's wrapped in parentheses,
+        // remove those outer parentheses to omit them as per the test case.
+        if (formattedRanges.size() == 1) {
+            String singleRange = formattedRanges.get(0);
+            if (singleRange.startsWith("(") && singleRange.endsWith(")") && singleRange.length() > 2) {
+                return singleRange.substring(1, singleRange.length() - 1);
+            }
+            return singleRange;
+        } else {
+            // For multiple ranges, join them with the OR_JOINER.
+            // Each individual formatted range should already include its own parentheses
+            // if it represents a conjunction (e.g., "(A and B)").
+            return formattedRanges.stream().collect(joining(OR_JOINER));
+        }
     }
\ No newline at end of file
