diff --git a/tmp/3533add3-f5d2-4699-b9e3-4a418da7f5a6_buggy.java b/tmp/19567a7f-8db0-4114-81e9-9978e297c4d4_fixed.java
index 593602f..2390d8b 100644
--- a/tmp/3533add3-f5d2-4699-b9e3-4a418da7f5a6_buggy.java
+++ b/tmp/19567a7f-8db0-4114-81e9-9978e297c4d4_fixed.java
@@ -1,6 +1,33 @@
     @Override
     public String toString() {
+        if (rangesList == null || rangesList.isEmpty()) {
+            return ""; // Or throw an exception, depending on expected behavior for empty lists
+        }
+
+        if (rangesList.size() == 1) {
+            // If there's only one group of ranges, format it.
+            // The test "shouldOmitOuterParentheses" implies that if this single group
+            // is formatted with outer parentheses (e.g., "(>=3.0.0 and <=3.0.1)"),
+            // they should be removed in the final output.
+            String formattedSingleGroup = RangesList.formatRanges(rangesList.get(0));
+
+            // Check if the formatted string starts and ends with parentheses
+            // and remove them if present. This is specifically for the case where
+            // the overall range expression is a single conjunction.
+            if (formattedSingleGroup.length() > 1 &&
+                formattedSingleGroup.startsWith("(") &&
+                formattedSingleGroup.endsWith(")")) {
+                return formattedSingleGroup.substring(1, formattedSingleGroup.length() - 1);
+            } else {
+                return formattedSingleGroup;
+            }
+        } else {
+            // If there are multiple groups of ranges (which are implicitly OR-ed),
+            // format each group and then join them with the OR_JOINER.
+            // In this case, any parentheses around individual groups are likely
+            // for correct precedence and should be preserved.
             return rangesList.stream()
                 .map(RangesList::formatRanges)
                 .collect(joining(OR_JOINER));
         }
+    }
\ No newline at end of file
