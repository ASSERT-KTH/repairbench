diff --git a/tmp/7a9c5f15-1b6e-4392-ae20-ab2636e696bd_buggy.java b/tmp/4abda4ab-bad3-42cc-9a64-659e5f3f0e6f_fixed.java
index 593602f..e542e6c 100644
--- a/tmp/7a9c5f15-1b6e-4392-ae20-ab2636e696bd_buggy.java
+++ b/tmp/4abda4ab-bad3-42cc-9a64-659e5f3f0e6f_fixed.java
@@ -1,6 +1,53 @@
     @Override
     public String toString() {
+        if (rangesList.isEmpty()) {
+            return ""; // Or throw an IllegalArgumentException, depending on desired behavior for empty ranges
+        }
+
+        // If there's only one range clause, we might need to omit outer parentheses
+        // that are typically added for clarity in compound expressions.
+        if (rangesList.size() == 1) {
+            String formattedSingleRange = rangesList.get(0).formatRanges();
+            
+            // Check if the formatted string starts and ends with parentheses and is not just "()".
+            // The length check (> 2) prevents issues with empty or single-character strings
+            // and ensures there's content between the parentheses.
+            if (formattedSingleRange.length() > 2 &&
+                formattedSingleRange.startsWith("(") && formattedSingleRange.endsWith(")")) {
+                
+                // Perform a balance check to ensure these are truly the outermost enclosing parentheses
+                // and not an internal set of parentheses that are part of a more complex structure.
+                int balance = 0;
+                boolean isEntirelyEnclosed = true;
+                // Iterate through the string segment *between* the assumed outer parentheses.
+                for (int i = 1; i < formattedSingleRange.length() - 1; i++) {
+                    char c = formattedSingleRange.charAt(i);
+                    if (c == '(') {
+                        balance++;
+                    } else if (c == ')') {
+                        balance--;
+                    }
+                    // If balance drops below zero, it means an unmatched closing parenthesis
+                    // was encountered, indicating these are not the simple outermost parentheses.
+                    if (balance < 0) {
+                        isEntirelyEnclosed = false;
+                        break;
+                    }
+                }
+                
+                // If balance is zero at the end, it means all inner parentheses are balanced,
+                // and the outermost ones truly enclose the entire expression.
+                if (balance == 0 && isEntirelyEnclosed) {
+                    return formattedSingleRange.substring(1, formattedSingleRange.length() - 1);
+                }
+            }
+            // If it doesn't meet the criteria for stripping, return as is.
+            return formattedSingleRange;
+        }
+
+        // For multiple range clauses, join them with the OR_JOINER.
+        // Each clause's formatRanges() should ideally already handle its own internal AND/parentheses.
         return rangesList.stream()
             .map(RangesList::formatRanges)
             .collect(joining(OR_JOINER));
     }
\ No newline at end of file
