diff --git a/tmp/83dc0b0b-3dcf-4854-bad6-bedd3519b9dc_buggy.java b/tmp/dbe6cd12-61e9-4c9b-b651-cc49dbceb511_fixed.java
index c84c989..b46527e 100644
--- a/tmp/83dc0b0b-3dcf-4854-bad6-bedd3519b9dc_buggy.java
+++ b/tmp/dbe6cd12-61e9-4c9b-b651-cc49dbceb511_fixed.java
@@ -1,27 +1,31 @@
     private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
-        buf.readUnsignedShortLE(); // length
+        buf.readUnsignedShort(); // length (Changed from LE to Big Endian)
 
-        buf.skipBytes(3); // identification header
-        buf.readUnsignedIntLE(); // index
+        buf.skipBytes(3); // identification header (MO Header ID + MO Header Length)
+        buf.readUnsignedInt(); // index (CDR Reference, Changed from LE to Big Endian)
 
         DeviceSession deviceSession = getDeviceSession(
                 channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         buf.readUnsignedByte(); // session status
-        buf.skipBytes(4); // reserved
-        buf.readUnsignedIntLE(); // date and time
+        buf.skipBytes(4); // reserved (MOMSN + MTMSN)
+        long iridiumTime = buf.readUnsignedInt(); // date and time (Changed from LE to Big Endian)
+        position.setTime(new Date(iridiumTime * 1000L)); // Set position time from Iridium header
 
         buf.skipBytes(23); // coordinates block
-
         buf.skipBytes(3); // data tag header
+        
+        // This method will likely read more data and potentially set other position properties.
+        // It might also try to set the time again; if so, this design implies the Iridium header time
+        // is the primary one, and the decodeMinimalDataSet call is for other data points.
         decodeMinimalDataSet(position, buf);
 
         return position;
     }
\ No newline at end of file
