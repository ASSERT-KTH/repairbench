diff --git a/tmp/e04b8109-cb4b-4510-8728-43d785ccda08_buggy.java b/tmp/ec423bdc-649a-41d4-bfbf-e091908904e9_fixed.java
index c84c989..152147a 100644
--- a/tmp/e04b8109-cb4b-4510-8728-43d785ccda08_buggy.java
+++ b/tmp/ec423bdc-649a-41d4-bfbf-e091908904e9_fixed.java
@@ -1,27 +1,33 @@
     private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
         buf.readUnsignedShortLE(); // length
 
         buf.skipBytes(3); // identification header
         buf.readUnsignedIntLE(); // index
 
         DeviceSession deviceSession = getDeviceSession(
                 channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         buf.readUnsignedByte(); // session status
         buf.skipBytes(4); // reserved
-        buf.readUnsignedIntLE(); // date and time
+
+        // The original code reads the date and time, but doesn't assign it to the position object.
+        // This likely causes the "time < +25 hours" assertion error, as the position's time
+        // would either remain at its default initialized value (which might be epoch if not set)
+        // or be incorrectly derived later.
+        long timestamp = buf.readUnsignedIntLE(); // date and time
+        position.setTime(new Date(timestamp * 1000L)); // Convert seconds (from buffer) to milliseconds and set position time
 
         buf.skipBytes(23); // coordinates block
 
         buf.skipBytes(3); // data tag header
         decodeMinimalDataSet(position, buf);
 
         return position;
     }
\ No newline at end of file
