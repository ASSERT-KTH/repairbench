diff --git a/tmp/a2e7d242-35d9-4604-a7bf-b200a89827da_buggy.java b/tmp/d751766e-7d7e-42bb-aac7-325e728b0e0f_fixed.java
index c84c989..0366b45 100644
--- a/tmp/a2e7d242-35d9-4604-a7bf-b200a89827da_buggy.java
+++ b/tmp/d751766e-7d7e-42bb-aac7-325e728b0e0f_fixed.java
@@ -1,27 +1,31 @@
     private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
         buf.readUnsignedShortLE(); // length
 
         buf.skipBytes(3); // identification header
         buf.readUnsignedIntLE(); // index
 
         DeviceSession deviceSession = getDeviceSession(
                 channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         buf.readUnsignedByte(); // session status
         buf.skipBytes(4); // reserved
-        buf.readUnsignedIntLE(); // date and time
+        
+        // Fix: Read the timestamp as Big Endian and use it to set the position's fix time.
+        // The original code read it as Little Endian and then discarded the value.
+        // This was likely the cause of the "time < +25 hours" error.
+        long timestamp = buf.readUnsignedInt(); // Changed from readUnsignedIntLE()
+        position.setFixTime(new Date(timestamp * 1000L)); // Convert seconds to milliseconds and set fix time
 
         buf.skipBytes(23); // coordinates block
-
         buf.skipBytes(3); // data tag header
         decodeMinimalDataSet(position, buf);
 
         return position;
     }
