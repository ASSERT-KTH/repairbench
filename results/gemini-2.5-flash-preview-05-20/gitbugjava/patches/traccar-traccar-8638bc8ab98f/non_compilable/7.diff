diff --git a/tmp/e1c5a538-9a8b-4b5e-b93e-3857aa413270_buggy.java b/tmp/9685a84f-e6e3-48d2-b3a1-fc400c216ec0_fixed.java
index e327422..2b3d0ed 100644
--- a/tmp/e1c5a538-9a8b-4b5e-b93e-3857aa413270_buggy.java
+++ b/tmp/9685a84f-e6e3-48d2-b3a1-fc400c216ec0_fixed.java
@@ -1,312 +1,541 @@
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.ByteBufUtil;
+
+import org.traccar.BaseProtocolDecoder;
+import org.traccar.helper.BitUtil;
+import org.traccar.helper.UnitsConverter;
+import org.traccar.model.CellTower;
+import org.traccar.model.DeviceSession;
+import org.traccar.model.Network;
+import org.traccar.model.Position;
+
+import java.nio.charset.StandardCharsets;
+
+public class HuabaoProtocolDecoderFix extends BaseProtocolDecoder {
+
+    // Assuming necessary imports and helper methods (decodeAlarm, decodeCoordinates, readDate, decodeCustomDouble)
+    // are available from the original context. These are not part of the fix as they are external.
+
+    private String getProtocolName() {
+        // Placeholder for the original method from BaseProtocolDecoder
+        return "huabao";
+    }
+
+    protected int decodeAlarm(long value) {
+        // Placeholder for the original method
+        return 0;
+    }
+
+    protected void decodeCoordinates(Position position, ByteBuf buf) {
+        // Placeholder for the original method
+        position.setLatitude(buf.readInt() * 0.000001);
+        position.setLongitude(buf.readInt() * 0.000001);
+    }
+
+    protected java.util.Date readDate(ByteBuf buf, Object timezone) {
+        // Placeholder for the original method
+        // Assuming YYYYMMDDHHMMSS format for simplicity for test context.
+        int year = buf.readUnsignedByte() + 2000;
+        int month = buf.readUnsignedByte();
+        int day = buf.readUnsignedByte();
+        int hour = buf.readUnsignedByte();
+        int minute = buf.readUnsignedByte();
+        int second = buf.readUnsignedByte();
+        java.util.Calendar calendar = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));
+        calendar.set(year, month - 1, day, hour, minute, second);
+        return calendar.getTime();
+    }
+
+    protected double decodeCustomDouble(ByteBuf buf) {
+        // Placeholder for the original method
+        return buf.readInt() * 0.00001; // Example arbitrary conversion
+    }
+
+    protected void decodeExtension(Position position, ByteBuf buf, int endIndex) {
+        // Placeholder for the original method
+        // This method should read from buf up to endIndex.
+        // For simplicity, let's just skip remaining bytes in this placeholder.
+        buf.readerIndex(endIndex);
+    }
+
     private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));
 
         decodeCoordinates(position, buf);
 
         position.setAltitude(buf.readShort());
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));
         position.setCourse(buf.readUnsignedShort());
         position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));
 
         if (buf.readableBytes() == 20) {
 
             buf.skipBytes(4); // remaining battery and mileage
             position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);
             position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
             buf.readUnsignedInt(); // area id
             position.set(Position.KEY_RSSI, buf.readUnsignedByte());
             buf.skipBytes(3); // reserved
 
             return position;
 
         }
 
-        while (buf.readableBytes() > 2) {
+        while (buf.readableBytes() > 2) { // Need at least subtype and length
 
             int subtype = buf.readUnsignedByte();
             int length = buf.readUnsignedByte();
             int endIndex = buf.readerIndex() + length;
             String stringValue;
             switch (subtype) {
-                case 0x01:
+                case 0x01: // Odometer, reads 4 bytes
+                    if (length >= 4) {
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                    }
                     break;
-                case 0x02:
+                case 0x02: // Fuel Level, reads 2 bytes
+                    if (length >= 2) {
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);
+                    }
                     break;
-                case 0x2b:
+                case 0x2b: // Fuel Consumption, reads 4 bytes
+                    if (length >= 4) {
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
+                    }
                     break;
-                case 0x30:
+                case 0x30: // RSSI, reads 1 byte
+                    if (length >= 1) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                    }
                     break;
-                case 0x31:
+                case 0x31: // Satellites, reads 1 byte
+                    if (length >= 1) {
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    }
                     break;
-                case 0x33:
+                case 0x33: // String value, reads `length` bytes
                     stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                     if (stringValue.startsWith("*M00")) {
+                        // Assuming stringValue will have sufficient length for substring based on protocol.
                         String lockStatus = stringValue.substring(8, 8 + 7);
                         position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);
                     }
                     break;
-                case 0x56:
+                case 0x56: // Battery Level, reads 2 bytes (1 actual + 1 reserved skip)
+                    if (length >= 2) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 10);
                         buf.readUnsignedByte(); // reserved
+                    }
                     break;
-                case 0x60:
+                case 0x60: // Event, reads 2 bytes, skips remaining `length - 2`
+                    if (length >= 2) {
                         position.set(Position.KEY_EVENT, buf.readUnsignedShort());
                         buf.skipBytes(length - 2);
+                    } else if (length > 0) { // If length is 1, it cannot read a short, just skip.
+                        buf.skipBytes(length);
+                    }
                     break;
-                case 0x69:
+                case 0x69: // Battery, reads 2 bytes
+                    if (length >= 2) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
+                    }
                     break;
-                case 0x80:
-                    buf.readUnsignedByte(); // content
-                    endIndex = buf.writerIndex() - 2;
+                case 0x80: // Extension container
+                    // Removed the incorrect `endIndex = buf.writerIndex() - 2;` line.
+                    // `decodeExtension` is expected to read from the current reader index up to the provided endIndex.
+                    // The 'content' byte is the first byte of this 0x80's payload.
+                    if (length > 0) {
+                        buf.readUnsignedByte(); // content byte
+                        // Pass the original `endIndex` for this block to `decodeExtension`.
+                        // `decodeExtension` should consume bytes within the `endIndex` boundary for this specific subtype.
                         decodeExtension(position, buf, endIndex);
+                    }
                     break;
-                case 0x91:
+                case 0x91: // Multiple fixed-size reads (total 22 bytes)
+                    // Assuming length is always 22 for this specific structured data.
+                    // If length is less than 22, it's a malformed message.
+                    if (length >= 22) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
                         position.set(Position.KEY_RPM, buf.readUnsignedShort());
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);
                         position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
                         buf.readUnsignedShort();
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                         buf.readUnsignedShort();
                         buf.readUnsignedInt();
                         buf.readUnsignedShort();
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);
+                    } else { // Malformed length, skip remaining to avoid issues
+                         buf.skipBytes(length);
+                    }
                     break;
-                case 0x94:
+                case 0x94: // VIN, reads `length` bytes
                     if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_VIN, stringValue);
                     }
                     break;
-                case 0xA7:
+                case 0xA7: // ADC, reads 4 bytes (2 shorts)
+                    if (length >= 4) {
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
                         position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());
+                    }
                     break;
-                case 0xAC:
+                case 0xAC: // Odometer, reads 4 bytes
+                    if (length >= 4) {
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
+                    }
                     break;
-                case 0xBC:
+                case 0xBC: // Driver, reads `length` bytes
                     stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                     position.set("driver", stringValue.trim());
                     break;
-                case 0xBD:
+                case 0xBD: // Driver Unique ID, reads `length` bytes
                     stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                     position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);
                     break;
-                case 0xD0:
+                case 0xD0: // User Status, reads 4 bytes
+                    if (length >= 4) {
                         long userStatus = buf.readUnsignedInt();
                         if (BitUtil.check(userStatus, 3)) {
                             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
                         }
+                    }
                     break;
-                case 0xD3:
+                case 0xD3: // Power, reads 2 bytes
+                    if (length >= 2) {
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
+                    }
                     break;
                 case 0xD4:
-                case 0xE1:
+                case 0xE1: // Battery Level, reads 1 byte
+                    if (length >= 1) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                    }
                     break;
-                case 0xD5:
+                case 0xD5: // Battery / Locks
                     if (length == 2) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
                     } else {
+                        if (length >= 1) { // Read count byte
                             int count = buf.readUnsignedByte();
-                        for (int i = 1; i <= count; i++) {
+                            // Loop boundary check `buf.readerIndex() < endIndex` added for safety
+                            for (int i = 1; i <= count && buf.readerIndex() + 13 <= endIndex; i++) { // Each iteration reads 13 bytes
                                 position.set("lock" + i + "Id", ByteBufUtil.hexDump(buf.readSlice(5)));
                                 position.set("lock" + i + "Card", ByteBufUtil.hexDump(buf.readSlice(5)));
                                 position.set("lock" + i + "Battery", buf.readUnsignedByte());
                                 int status = buf.readUnsignedShort();
                                 position.set("lock" + i + "Locked", !BitUtil.check(status, 5));
                             }
                         }
+                    }
                     break;
-                case 0xDA:
-                    buf.readUnsignedShort(); // string cut count
-                    int deviceStatus = buf.readUnsignedByte();
+                case 0xDA: // Device Status, reads 3 bytes (short then byte)
+                    if (length >= 3) {
+                        buf.readUnsignedShort(); // string cut count (2 bytes)
+                        int deviceStatus = buf.readUnsignedByte(); // 1 byte
                         position.set("string", BitUtil.check(deviceStatus, 0));
                         position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));
                         position.set("cover", BitUtil.check(deviceStatus, 3));
+                    }
                     break;
-                case 0xE6:
+                case 0xE6: // Sensors
                     while (buf.readerIndex() < endIndex) {
+                        // Assuming minimum length per sensor (1 index + 6 mac + 4 temp + 4 humidity) is 15 bytes
+                        if (buf.readableBytes() < 15 || buf.readerIndex() + 15 > endIndex) {
+                            buf.skipBytes(endIndex - buf.readerIndex()); // Skip remaining garbage
+                            break;
+                        }
                         int sensorIndex = buf.readUnsignedByte();
                         buf.skipBytes(6); // mac
                         position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));
                         position.set("humidity" + sensorIndex, decodeCustomDouble(buf));
                     }
                     break;
-                case 0xEB:
-                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {
+                case 0xEB: // Network/Fuel/Power/Cell
+                    // The peeked value for initial check `buf.getUnsignedShort(buf.readerIndex())` must be within `length`.
+                    // The bytes for MCC (2) and MNC (1) are also part of `length`.
+                    if (length >= 2 && buf.getUnsignedShort(buf.readerIndex()) > 200) {
                         Network network = new Network();
+                        if (length >= 3) { // For mcc and mnc
                             int mcc = buf.readUnsignedShort();
                             int mnc = buf.readUnsignedByte();
                             while (buf.readerIndex() < endIndex) {
+                                // CellTower.from reads 2 (lac) + 2 (cid) + 1 (rssi) = 5 bytes
+                                if (buf.readableBytes() < 5 || buf.readerIndex() + 5 > endIndex) {
+                                    buf.skipBytes(endIndex - buf.readerIndex());
+                                    break;
+                                }
                                 network.addCellTower(CellTower.from(
                                         mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),
                                         buf.readUnsignedByte()));
                             }
                             position.setNetwork(network);
-                    } else {
+                        } else { // Malformed length, skip remaining part of 0xEB block
+                            buf.skipBytes(length);
+                        }
+                    } else { // second branch of 0xEB (or if initial peek fails/is too short)
                         while (buf.readerIndex() < endIndex) {
+                            if (buf.readableBytes() < 4 || buf.readerIndex() + 4 > endIndex) { // Needs extendedLength (2) + extendedType (2)
+                                buf.skipBytes(endIndex - buf.readerIndex()); // Skip rest of block if truncated
+                                break;
+                            }
                             int extendedLength = buf.readUnsignedShort();
                             int extendedType = buf.readUnsignedShort();
+                            int currentPayloadEnd = buf.readerIndex() + extendedLength - 2; // extendedLength includes type itself.
+                            if (currentPayloadEnd > endIndex) { // Protect against malformed extendedLength
+                                currentPayloadEnd = endIndex;
+                            }
+                            // Calculate remaining bytes for this sub-block to ensure reads don't go past it
+                            int readableForSubtype = currentPayloadEnd - buf.readerIndex();
+
                             switch (extendedType) {
-                                case 0x0001:
+                                case 0x0001: // Reads 3 bytes (short + byte)
+                                    if (readableForSubtype >= 3) {
                                         position.set("fuel1", buf.readUnsignedShort() * 0.1);
                                         buf.readUnsignedByte(); // unused
+                                    } else {
+                                        buf.skipBytes(readableForSubtype);
+                                    }
                                     break;
-                                case 0x0023:
+                                case 0x0023: // Reads 6 bytes (char sequence)
+                                    if (readableForSubtype >= 6) {
                                         position.set("fuel2", Double.parseDouble(
                                                 buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));
+                                    } else {
+                                        buf.skipBytes(readableForSubtype);
+                                    }
                                     break;
-                                case 0x00CE:
+                                case 0x00CE: // Reads 2 bytes
+                                    if (readableForSubtype >= 2) {
                                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
+                                    } else {
+                                        buf.skipBytes(readableForSubtype);
+                                    }
                                     break;
-                                case 0x00D8:
+                                case 0x00D8: // Reads 9 bytes (2+1+2+4)
+                                    if (readableForSubtype >= 9) {
                                         Network network = new Network();
                                         network.addCellTower(CellTower.from(
                                                 buf.readUnsignedShort(), buf.readUnsignedByte(),
                                                 buf.readUnsignedShort(), buf.readUnsignedInt()));
                                         position.setNetwork(network);
+                                    } else {
+                                        buf.skipBytes(readableForSubtype);
+                                    }
                                     break;
-                                case 0xE1:
+                                case 0xE1: // Reads 1 byte
+                                    if (readableForSubtype >= 1) {
                                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                                    } else {
+                                        buf.skipBytes(readableForSubtype);
+                                    }
                                     break;
                                 default:
-                                    buf.skipBytes(extendedLength - 2);
+                                    buf.skipBytes(readableForSubtype); // Skip remaining data for this sub-type
                                     break;
                             }
+                            // This ensures the reader advances exactly to the end of the current extended block.
+                            buf.readerIndex(currentPayloadEnd);
                         }
                     }
                     break;
-                case 0xED:
+                case 0xED: // Card, reads `length` bytes
                     stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                     position.set(Position.KEY_CARD, stringValue.trim());
                     break;
-                case 0xEE:
+                case 0xEE: // RSSI, Power, Battery, Satellites (total 7 bytes)
+                    if (length >= 7) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    } else { // Malformed, skip
+                        buf.skipBytes(length);
+                    }
                     break;
-                case 0xF3:
+                case 0xF3: // OBD parameters
                     while (buf.readerIndex() < endIndex) {
+                        if (buf.readableBytes() < 3 || buf.readerIndex() + 3 > endIndex) { // Needs extendedType (2) + extendedLength (1)
+                            buf.skipBytes(endIndex - buf.readerIndex());
+                            break;
+                        }
                         int extendedType = buf.readUnsignedShort();
                         int extendedLength = buf.readUnsignedByte();
+                        int currentPayloadEnd = buf.readerIndex() + extendedLength;
+                        if (currentPayloadEnd > endIndex) {
+                            currentPayloadEnd = endIndex;
+                        }
+                        // Calculate remaining bytes for this sub-block to ensure reads don't go past it
+                        int readableForSubtype = currentPayloadEnd - buf.readerIndex();
+
                         switch (extendedType) {
-                            case 0x0002:
+                            case 0x0002: // OBD Speed, reads 2 bytes
+                                if (readableForSubtype >= 2) {
                                     position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
+                                } else { buf.skipBytes(readableForSubtype); }
                                 break;
-                            case 0x0003:
+                            case 0x0003: // RPM, reads 2 bytes
+                                if (readableForSubtype >= 2) {
                                     position.set(Position.KEY_RPM, buf.readUnsignedShort());
+                                } else { buf.skipBytes(readableForSubtype); }
                                 break;
-                            case 0x0004:
+                            case 0x0004: // Power, reads 2 bytes
+                                if (readableForSubtype >= 2) {
                                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
+                                } else { buf.skipBytes(readableForSubtype); }
                                 break;
-                            case 0x0005:
+                            case 0x0005: // OBD Odometer, reads 4 bytes
+                                if (readableForSubtype >= 4) {
                                     position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);
+                                } else { buf.skipBytes(readableForSubtype); }
                                 break;
-                            case 0x0007:
+                            case 0x0007: // Fuel Consumption, reads 2 bytes
+                                if (readableForSubtype >= 2) {
                                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);
+                                } else { buf.skipBytes(readableForSubtype); }
                                 break;
-                            case 0x0008:
+                            case 0x0008: // Engine Load, reads 2 bytes
+                                if (readableForSubtype >= 2) {
                                     position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);
+                                } else { buf.skipBytes(readableForSubtype); }
                                 break;
-                            case 0x0009:
+                            case 0x0009: // Coolant Temp, reads 2 bytes
+                                if (readableForSubtype >= 2) {
                                     position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);
+                                } else { buf.skipBytes(readableForSubtype); }
                                 break;
-                            case 0x000B:
+                            case 0x000B: // Intake Pressure, reads 2 bytes
+                                if (readableForSubtype >= 2) {
                                     position.set("intakePressure", buf.readUnsignedShort());
+                                } else { buf.skipBytes(readableForSubtype); }
                                 break;
-                            case 0x000C:
+                            case 0x000C: // Intake Temp, reads 2 bytes
+                                if (readableForSubtype >= 2) {
                                     position.set("intakeTemp", buf.readUnsignedShort() - 40);
+                                } else { buf.skipBytes(readableForSubtype); }
                                 break;
-                            case 0x000D:
+                            case 0x000D: // Intake Flow, reads 2 bytes
+                                if (readableForSubtype >= 2) {
                                     position.set("intakeFlow", buf.readUnsignedShort());
+                                } else { buf.skipBytes(readableForSubtype); }
                                 break;
-                            case 0x000E:
+                            case 0x000E: // Throttle, reads 2 bytes
+                                if (readableForSubtype >= 2) {
                                     position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);
+                                } else { buf.skipBytes(readableForSubtype); }
                                 break;
-                            case 0x0050:
+                            case 0x0050: // VIN, reads 17 bytes
+                                if (readableForSubtype >= 17) {
                                     position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));
+                                } else { buf.skipBytes(readableForSubtype); }
                                 break;
-                            case 0x0100:
+                            case 0x0100: // Odometer Trip, reads 2 bytes
+                                if (readableForSubtype >= 2) {
                                     position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);
+                                } else { buf.skipBytes(readableForSubtype); }
                                 break;
-                            case 0x0102:
+                            case 0x0102: // Trip Fuel, reads 2 bytes
+                                if (readableForSubtype >= 2) {
                                     position.set("tripFuel", buf.readUnsignedShort() * 0.1);
+                                } else { buf.skipBytes(readableForSubtype); }
                                 break;
-                            case 0x0112:
+                            case 0x0112: // Hard Acceleration Count, reads 2 bytes
+                                if (readableForSubtype >= 2) {
                                     position.set("hardAccelerationCount", buf.readUnsignedShort());
+                                } else { buf.skipBytes(readableForSubtype); }
                                 break;
-                            case 0x0113:
+                            case 0x0113: // Hard Deceleration Count, reads 2 bytes
+                                if (readableForSubtype >= 2) {
                                     position.set("hardDecelerationCount", buf.readUnsignedShort());
+                                } else { buf.skipBytes(readableForSubtype); }
                                 break;
-                            case 0x0114:
+                            case 0x0114: // Hard Cornering Count, reads 2 bytes
+                                if (readableForSubtype >= 2) {
                                     position.set("hardCorneringCount", buf.readUnsignedShort());
+                                } else { buf.skipBytes(readableForSubtype); }
                                 break;
                             default:
-                                buf.skipBytes(extendedLength);
+                                buf.skipBytes(readableForSubtype);
                                 break;
                         }
+                        buf.readerIndex(currentPayloadEnd); // Ensure reading at expected end of sub-payload
                     }
                     break;
-                case 0xFE:
+                case 0xFE: // Special alarms / Battery / Power
                     if (length == 1) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     } else if (length == 2) {
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
-                    } else {
+                    } else { // length > 2
+                        if (length >= 1) { // For 'mark' byte
                             int mark = buf.readUnsignedByte();
                             if (mark == 0x7C) {
                                 while (buf.readerIndex() < endIndex) {
+                                    if (buf.readableBytes() < 2 || buf.readerIndex() + 2 > endIndex) { // Needs extendedType (1) + extendedLength (1)
+                                        buf.skipBytes(endIndex - buf.readerIndex());
+                                        break;
+                                    }
                                     int extendedType = buf.readUnsignedByte();
                                     int extendedLength = buf.readUnsignedByte();
+                                    int currentPayloadEnd = buf.readerIndex() + extendedLength;
+                                    if (currentPayloadEnd > endIndex) {
+                                        currentPayloadEnd = endIndex;
+                                    }
+                                    // Calculate remaining bytes for this sub-block
+                                    int readableForSubtype = currentPayloadEnd - buf.readerIndex();
+
                                     switch (extendedType) {
-                                    case 0x01:
+                                        case 0x01: // Alarms, reads 4 bytes
+                                            if (readableForSubtype >= 4) {
                                                 long alarms = buf.readUnsignedInt();
                                                 if (BitUtil.check(alarms, 0)) {
                                                     position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                                                 }
                                                 if (BitUtil.check(alarms, 1)) {
                                                     position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                                                 }
                                                 if (BitUtil.check(alarms, 2)) {
                                                     position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                                                 }
                                                 if (BitUtil.check(alarms, 3)) {
                                                     position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);
                                                 }
                                                 if (BitUtil.check(alarms, 4)) {
                                                     position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);
                                                 }
+                                            } else { buf.skipBytes(readableForSubtype); }
                                             break;
                                         default:
-                                        buf.skipBytes(extendedLength);
+                                            buf.skipBytes(readableForSubtype);
                                             break;
                                     }
+                                    buf.readerIndex(currentPayloadEnd); // Ensure reading at expected end of sub-payload
                                 }
                             }
+                            // This byte read happens after the internal loop, ensuring it doesn't read past `endIndex`.
+                            if (buf.readerIndex() < endIndex) {
                                 position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                             }
+                        }
+                    }
                     break;
                 default:
+                    // For unknown subtypes, skip the `length` bytes to remain aligned.
+                    buf.skipBytes(length);
                     break;
             }
+            // This ensures the reader index is at the calculated `endIndex` for the current TLV block,
+            // handling cases where less or more bytes were read within the switch case due to malformed data or specific logic.
             buf.readerIndex(endIndex);
         }
 
         return position;
     }
+}
\ No newline at end of file
