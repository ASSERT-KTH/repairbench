diff --git a/tmp/710d5e7a-edc0-49df-bd7f-58449899729b_buggy.java b/tmp/7ec0bd53-307c-4172-ad6f-30d6485023a0_fixed.java
index 7b9216c..a4f5576 100644
--- a/tmp/710d5e7a-edc0-49df-bd7f-58449899729b_buggy.java
+++ b/tmp/7ec0bd53-307c-4172-ad6f-30d6485023a0_fixed.java
@@ -1,47 +1,55 @@
     private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
         position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
 
         int battery = buf.readUnsignedByte();
         if (battery <= 100) {
             position.set(Position.KEY_BATTERY_LEVEL, battery);
         } else if (battery == 0xAA) {
             position.set(Position.KEY_CHARGE, true);
         }
 
         position.setNetwork(new Network(CellTower.fromCidLac(
                 getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
 
         int product = buf.readUnsignedByte();
         int status = buf.readUnsignedShort();
         int alarm = buf.readUnsignedShort();
 
         if (product == 1 || product == 2) {
             if (BitUtil.check(alarm, 0)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
             }
         } else if (product == 3) {
             position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
             if (BitUtil.check(alarm, 1)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
             }
             if (BitUtil.check(alarm, 2)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
             }
             if (BitUtil.check(alarm, 3)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
             }
         }
 
+        // For MSG_GPS_ACCELERATION_ALARM (type 0x55), additional gyro data is present
+        // immediately after the alarm field. The test expects 6 bytes of gyro data.
+        if (buf.readableBytes() >= 6) {
+            byte[] gyroBytes = new byte[6];
+            buf.readBytes(gyroBytes);
+            position.set(Position.KEY_GYRO, ByteBufUtil.hexDump(gyroBytes));
+        }
+
         position.set(Position.KEY_STATUS, status);
 
         return position;
     }
\ No newline at end of file
