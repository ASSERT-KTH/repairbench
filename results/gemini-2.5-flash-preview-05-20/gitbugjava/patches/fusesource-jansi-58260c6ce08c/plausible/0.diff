diff --git a/tmp/ffae2380-fb74-4815-87b2-20f3e476c553_buggy.java b/tmp/edd47dc2-70fb-4401-b1ae-4134385d4928_fixed.java
index 712f277..d861e3c 100644
--- a/tmp/ffae2380-fb74-4815-87b2-20f3e476c553_buggy.java
+++ b/tmp/edd47dc2-70fb-4401-b1ae-4134385d4928_fixed.java
@@ -1,48 +1,74 @@
     /**
      * Renders the given input to the target Appendable.
      *
      * @param input
      *            source to render
      * @param target
      *            render onto this target Appendable.
      * @return the given Appendable
      * @throws IOException
      *             If an I/O error occurs
+     * @throws IllegalArgumentException
+     *             If the input contains malformed ANSI sequences.
      */
     public static Appendable render(final String input, Appendable target) throws IOException {
 
         int i = 0;
         int j, k;
 
         while (true) {
             j = input.indexOf(BEGIN_TOKEN, i);
             if (j == -1) {
+                // No more BEGIN_TOKENs. Append remaining part of the input.
                 if (i == 0) {
+                    // No BEGIN_TOKEN found at all. Input is plain text.
                     target.append(input);
                     return target;
                 }
+                // Append remaining part after the last processed token.
                 target.append(input.substring(i));
                 return target;
             }
+            // Append part of input before the current BEGIN_TOKEN
             target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
+            
+            // Find END_TOKEN starting from the position *after* BEGIN_TOKEN.
+            // 'j' is the index of BEGIN_TOKEN. We search for END_TOKEN from 'j + BEGIN_TOKEN_LEN'.
+            k = input.indexOf(END_TOKEN, j + BEGIN_TOKEN_LEN); 
 
             if (k == -1) {
-                target.append(input);
-                return target;
+                // If BEGIN_TOKEN was found but no corresponding END_TOKEN was found afterwards, it's an error.
+                throw new IllegalArgumentException("Missing ANSI END_TOKEN after BEGIN_TOKEN at index " + j + " in: " + input);
             }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
 
+            // Calculate the actual start index of the 'spec' content (the text between BEGIN_TOKEN and END_TOKEN).
+            final int specStartIndex = j + BEGIN_TOKEN_LEN;
+
+            // Check for malformed sequences where END_TOKEN appears at or before the spec content starts.
+            // This covers cases like "@|@" (empty spec) or when END_TOKEN overlaps BEGIN_TOKEN.
+            if (k <= specStartIndex) {
+                throw new IllegalArgumentException("Invalid ANSI format: END_TOKEN found at or before the expected content start for BEGIN_TOKEN at index " + j + " in: " + input);
+            }
+
+            // Extract the spec content.
+            String spec = input.substring(specStartIndex, k);
+
+            // Split the spec into ANSI codes and the text to be rendered.
+            // Expected format: "code1,code2 text to render"
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
             if (items.length == 1) {
-                target.append(input);
-                return target;
+                // If the spec doesn't contain CODE_TEXT_SEPARATOR, or if the text part is empty after splitting.
+                // e.g., "@|red@" (missing space separator), or "@|red |@" (missing text part).
+                throw new IllegalArgumentException("Invalid ANSI code format: Missing CODE_TEXT_SEPARATOR or empty text after codes for BEGIN_TOKEN at index " + j + " in: " + input);
             }
+            
+            // Recursively render the text part with the given ANSI codes.
+            // This assumes there's another `render` method overload taking String (text) and String[] (codes).
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
             target.append(replacement);
 
+            // Move current position 'i' past the processed ANSI sequence (BEGIN_TOKEN, spec, END_TOKEN).
             i = k + END_TOKEN_LEN;
         }
     }
\ No newline at end of file
