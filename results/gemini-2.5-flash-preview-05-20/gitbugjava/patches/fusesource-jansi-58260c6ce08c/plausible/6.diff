diff --git a/tmp/fb7f50ba-bc78-4ae3-8701-7090f9655e24_buggy.java b/tmp/fd3cfbf1-682c-4833-b1a4-6c3f2b9feed1_fixed.java
index 712f277..f182dda 100644
--- a/tmp/fb7f50ba-bc78-4ae3-8701-7090f9655e24_buggy.java
+++ b/tmp/fd3cfbf1-682c-4833-b1a4-6c3f2b9feed1_fixed.java
@@ -1,48 +1,62 @@
     /**
      * Renders the given input to the target Appendable.
      *
      * @param input
      *            source to render
      * @param target
      *            render onto this target Appendable.
      * @return the given Appendable
      * @throws IOException
      *             If an I/O error occurs
      */
     public static Appendable render(final String input, Appendable target) throws IOException {
 
         int i = 0;
         int j, k;
 
         while (true) {
             j = input.indexOf(BEGIN_TOKEN, i);
             if (j == -1) {
                 if (i == 0) {
                     target.append(input);
                     return target;
                 }
                 target.append(input.substring(i));
                 return target;
             }
             target.append(input.substring(i, j));
             k = input.indexOf(END_TOKEN, j);
 
             if (k == -1) {
+                // If BEGIN_TOKEN is found but END_TOKEN is not, the original code appends
+                // the full input. This behavior is maintained for existing test cases.
                 target.append(input);
                 return target;
             }
+
+            // Fix for testRenderInvalidEndBeforeStart:
+            // An END_TOKEN found at an index k that is less than the position where
+            // the content for the BEGIN_TOKEN should start (j + BEGIN_TOKEN_LEN)
+            // indicates an invalid or malformed sequence (e.g., "@|@").
+            // In such cases, an IllegalArgumentException should be thrown.
+            if (k < j + BEGIN_TOKEN_LEN) {
+                throw new IllegalArgumentException("Invalid Ansi spec: END_TOKEN found before or within BEGIN_TOKEN: " + input);
+            }
+
             j += BEGIN_TOKEN_LEN;
             String spec = input.substring(j, k);
 
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
             if (items.length == 1) {
+                // If the spec string does not contain CODE_TEXT_SEPARATOR,
+                // the original code appends the full input. This behavior is maintained.
                 target.append(input);
                 return target;
             }
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
             target.append(replacement);
 
             i = k + END_TOKEN_LEN;
         }
     }
\ No newline at end of file
