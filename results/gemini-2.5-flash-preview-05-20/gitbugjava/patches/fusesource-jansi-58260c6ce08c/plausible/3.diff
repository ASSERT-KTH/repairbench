diff --git a/tmp/080d3287-783a-4ff6-877d-584a49b7d5eb_buggy.java b/tmp/fd144dfd-33e9-443e-afd2-f09d7bd52b23_fixed.java
index 712f277..8392fb5 100644
--- a/tmp/080d3287-783a-4ff6-877d-584a49b7d5eb_buggy.java
+++ b/tmp/fd144dfd-33e9-443e-afd2-f09d7bd52b23_fixed.java
@@ -1,48 +1,71 @@
     /**
      * Renders the given input to the target Appendable.
      *
      * @param input
      *            source to render
      * @param target
      *            render onto this target Appendable.
      * @return the given Appendable
      * @throws IOException
      *             If an I/O error occurs
      */
     public static Appendable render(final String input, Appendable target) throws IOException {
 
+        // Assuming BEGIN_TOKEN, BEGIN_TOKEN_LEN, END_TOKEN, END_TOKEN_LEN,
+        // CODE_TEXT_SEPARATOR, and CODE_LIST_SEPARATOR are static final fields
+        // defined in the enclosing class.
+
         int i = 0;
         int j, k;
 
         while (true) {
             j = input.indexOf(BEGIN_TOKEN, i);
             if (j == -1) {
                 if (i == 0) {
                     target.append(input);
                     return target;
                 }
                 target.append(input.substring(i));
                 return target;
             }
             target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
+            k = input.indexOf(END_TOKEN, j); // k is found starting search from j (start of BEGIN_TOKEN)
 
             if (k == -1) {
-                target.append(input);
+                // If the end token is not found after an opening token,
+                // the ANSI sequence is unclosed. Append the remainder of the input
+                // from the start of the unclosed token and return.
+                target.append(input.substring(j));
                 return target;
             }
-            j += BEGIN_TOKEN_LEN;
+
+            // Bug fix for testRenderInvalidEndBeforeStart:
+            // Check if the end token appears before or within the begin token sequence.
+            // The content (spec) should start at 'j + BEGIN_TOKEN_LEN'.
+            // If 'k' (index of END_TOKEN) is less than 'j + BEGIN_TOKEN_LEN',
+            // it implies an invalid structure (e.g., "@|@" where END_TOKEN "@" is at index 0,
+            // but spec content should start at index 2). This would lead to
+            // input.substring(j + BEGIN_TOKEN_LEN, k) being invalid (beginIndex > endIndex).
+            if (k < j + BEGIN_TOKEN_LEN) {
+                throw new IllegalArgumentException("Invalid ANSI spec: End token found before or within the start token sequence.");
+            }
+
+            j += BEGIN_TOKEN_LEN; // j now points to the start of the 'spec' content
             String spec = input.substring(j, k);
 
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
             if (items.length == 1) {
-                target.append(input);
-                return target;
+                // Original code appended the entire input here, which is incorrect.
+                // This case indicates a malformed spec where the code/text separator is missing
+                // when text is expected. Treat as an error.
+                throw new IllegalArgumentException("Invalid ANSI spec: Missing code/text separator in '" + spec + "'");
             }
+            
+            // Recursive call to render the content based on items.
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
             target.append(replacement);
 
             i = k + END_TOKEN_LEN;
         }
     }
\ No newline at end of file
