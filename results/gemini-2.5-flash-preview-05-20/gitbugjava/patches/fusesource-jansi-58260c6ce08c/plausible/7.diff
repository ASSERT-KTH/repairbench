diff --git a/tmp/77326663-89ee-470a-93bf-2bb7d5fbebea_buggy.java b/tmp/ae06646b-5e30-42db-9760-17fe1868a190_fixed.java
index 712f277..2581228 100644
--- a/tmp/77326663-89ee-470a-93bf-2bb7d5fbebea_buggy.java
+++ b/tmp/ae06646b-5e30-42db-9760-17fe1868a190_fixed.java
@@ -1,48 +1,59 @@
     /**
      * Renders the given input to the target Appendable.
      *
      * @param input
      *            source to render
      * @param target
      *            render onto this target Appendable.
      * @return the given Appendable
      * @throws IOException
      *             If an I/O error occurs
      */
     public static Appendable render(final String input, Appendable target) throws IOException {
 
         int i = 0;
         int j, k;
 
         while (true) {
             j = input.indexOf(BEGIN_TOKEN, i);
             if (j == -1) {
                 if (i == 0) {
                     target.append(input);
                     return target;
                 }
                 target.append(input.substring(i));
                 return target;
             }
             target.append(input.substring(i, j));
             k = input.indexOf(END_TOKEN, j);
 
             if (k == -1) {
+                // No closing token found, treat as literal text (original behavior)
                 target.append(input);
                 return target;
             }
+
+            // The content (spec) should logically start after BEGIN_TOKEN, i.e., at index j + BEGIN_TOKEN_LEN.
+            // If the END_TOKEN (at index k) appears before this content start, it's an invalid sequence.
+            // Example: "@|@" where BEGIN_TOKEN is "@|" and END_TOKEN is "@".
+            // j = 0, BEGIN_TOKEN_LEN = 2. Expected content start at index 2.
+            // k = 0. Since k (0) < j + BEGIN_TOKEN_LEN (2), it's invalid.
+            if (k < j + BEGIN_TOKEN_LEN) {
+                throw new IllegalArgumentException("Invalid ANSI sequence: END_TOKEN ('" + END_TOKEN + "') appeared before or within the BEGIN_TOKEN content area. Input: " + input);
+            }
+
             j += BEGIN_TOKEN_LEN;
             String spec = input.substring(j, k);
 
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
             if (items.length == 1) {
                 target.append(input);
                 return target;
             }
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
             target.append(replacement);
 
             i = k + END_TOKEN_LEN;
         }
     }
\ No newline at end of file
