diff --git a/tmp/fe40e067-9799-44b8-a18d-7a3ce4dc11cd_buggy.java b/tmp/cd248052-3021-405f-9653-4fc7e3bc0667_fixed.java
index 712f277..4923b19 100644
--- a/tmp/fe40e067-9799-44b8-a18d-7a3ce4dc11cd_buggy.java
+++ b/tmp/cd248052-3021-405f-9653-4fc7e3bc0667_fixed.java
@@ -1,48 +1,74 @@
     /**
      * Renders the given input to the target Appendable.
      *
      * @param input
      *            source to render
      * @param target
      *            render onto this target Appendable.
      * @return the given Appendable
      * @throws IOException
      *             If an I/O error occurs
      */
     public static Appendable render(final String input, Appendable target) throws IOException {
 
         int i = 0;
         int j, k;
 
         while (true) {
             j = input.indexOf(BEGIN_TOKEN, i);
             if (j == -1) {
+                // No more BEGIN_TOKEN found, append the rest of the input (or all if no tokens found yet)
                 if (i == 0) {
                     target.append(input);
                     return target;
                 }
                 target.append(input.substring(i));
                 return target;
             }
+            // Append the part before the current BEGIN_TOKEN
             target.append(input.substring(i, j));
+
+            // Find the END_TOKEN, starting search from where BEGIN_TOKEN was found
             k = input.indexOf(END_TOKEN, j);
 
             if (k == -1) {
+                // BEGIN_TOKEN found, but no matching END_TOKEN.
+                // The original logic handles this by appending the entire input and returning.
+                // This implies an unclosed sequence is rendered as plain text.
                 target.append(input);
                 return target;
             }
+
+            // Fix for testRenderInvalidEndBeforeStart:
+            // Check if END_TOKEN appears too early, i.e., before the BEGIN_TOKEN itself has fully ended,
+            // or if it overlaps with the BEGIN_TOKEN.
+            // 'j' is the start of BEGIN_TOKEN. 'BEGIN_TOKEN_LEN' is its length.
+            // The content should start at 'j + BEGIN_TOKEN_LEN'.
+            // So, 'k' (start of END_TOKEN) must be at least 'j + BEGIN_TOKEN_LEN'.
+            if (k < j + BEGIN_TOKEN_LEN) {
+                throw new IllegalArgumentException("Invalid ANSI sequence: END_TOKEN found too early, overlapping or preceding BEGIN_TOKEN content. Input: '" + input + "'");
+            }
+
+            // Adjust 'j' to point to the start of the spec content
             j += BEGIN_TOKEN_LEN;
             String spec = input.substring(j, k);
 
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
             if (items.length == 1) {
+                // If CODE_TEXT_SEPARATOR is not found, the spec is considered malformed or incomplete.
+                // The original logic handles this by appending the entire input and returning.
+                // This means the sequence is not rendered as an ANSI code but as plain text.
                 target.append(input);
                 return target;
             }
+
+            // Render the content and its styles/attributes
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
+            // Append the rendered replacement
             target.append(replacement);
 
+            // Move the search index 'i' past the current ANSI sequence
             i = k + END_TOKEN_LEN;
         }
     }
\ No newline at end of file
