diff --git a/tmp/91e410af-1e56-44f8-90f7-320c919eddb3_buggy.java b/tmp/dd591bc5-0bdf-4573-9a8e-962a9a9a32fe_fixed.java
index 712f277..aa5c31f 100644
--- a/tmp/91e410af-1e56-44f8-90f7-320c919eddb3_buggy.java
+++ b/tmp/dd591bc5-0bdf-4573-9a8e-962a9a9a32fe_fixed.java
@@ -1,48 +1,78 @@
     /**
      * Renders the given input to the target Appendable.
      *
      * @param input
      *            source to render
      * @param target
      *            render onto this target Appendable.
      * @return the given Appendable
      * @throws IOException
      *             If an I/O error occurs
      */
     public static Appendable render(final String input, Appendable target) throws IOException {
 
         int i = 0;
         int j, k;
 
         while (true) {
             j = input.indexOf(BEGIN_TOKEN, i);
             if (j == -1) {
+                // No more BEGIN_TOKEN found. Append remaining text and return.
                 if (i == 0) {
                     target.append(input);
-                    return target;
-                }
+                } else {
                     target.append(input.substring(i));
+                }
                 return target;
             }
+            // Found BEGIN_TOKEN at index j.
+            // Append text before the current BEGIN_TOKEN.
             target.append(input.substring(i, j));
+
+            // Find END_TOKEN starting from j (where BEGIN_TOKEN was found).
+            // This allows cases where END_TOKEN might be immediately after BEGIN_TOKEN,
+            // or even inside it for malformed inputs like "@|@".
             k = input.indexOf(END_TOKEN, j);
 
             if (k == -1) {
-                target.append(input);
-                return target;
+                // BEGIN_TOKEN found, but no matching END_TOKEN afterwards.
+                // This is an unclosed sequence, which is a malformed input.
+                // The original code `target.append(input); return target;` silently passed it, which is buggy.
+                throw new IllegalArgumentException("Unclosed ANSI sequence starting at index " + j + ": " + input.substring(j));
             }
+
+            // Advance j to the start of the spec content (after BEGIN_TOKEN).
             j += BEGIN_TOKEN_LEN;
+
+            // Check if END_TOKEN (at k) appeared before the start of the spec content (at j).
+            // Example: input="@|@", BEGIN_TOKEN="@|", END_TOKEN="@"
+            // j = 0 initially, k = 0 initially. After j += BEGIN_TOKEN_LEN, j becomes 2.
+            // Now k (0) < j (2) is true, indicating END_TOKEN is before the content.
+            if (k < j) {
+                // This is an "EndBeforeStart" scenario for the content part, which is malformed.
+                // This specifically addresses the 'testRenderInvalidEndBeforeStart' test case.
+                throw new IllegalArgumentException("Invalid ANSI sequence: END_TOKEN found before the content part beginning at index " + (j - BEGIN_TOKEN_LEN) + ": " + input.substring(j - BEGIN_TOKEN_LEN, k + END_TOKEN_LEN));
+            }
+
+            // Extract the spec content (e.g., "red,bold:hello" or "31m:world")
             String spec = input.substring(j, k);
 
+            // Split the spec into code and text using CODE_TEXT_SEPARATOR.
+            // Expected format: "CODE:TEXT". If CODE_TEXT_SEPARATOR is not found, items.length will be 1.
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
             if (items.length == 1) {
-                target.append(input);
-                return target;
+                // If only a code part is present (e.g., "red") without a CODE_TEXT_SEPARATOR,
+                // it implies a malformed sequence as per expected "CODE:TEXT" syntax.
+                // The original code `target.append(input); return target;` was a silent recovery,
+                // and accessing `items[1]` would cause an ArrayIndexOutOfBoundsException.
+                throw new IllegalArgumentException("Invalid ANSI sequence format: missing text or separator (expected 'CODE:TEXT') in " + input.substring(j - BEGIN_TOKEN_LEN, k + END_TOKEN_LEN));
             }
+            // items[0] is the codes, items[1] is the text.
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
             target.append(replacement);
 
+            // Move current position 'i' past the end of the current ANSI sequence.
             i = k + END_TOKEN_LEN;
         }
     }
\ No newline at end of file
