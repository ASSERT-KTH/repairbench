diff --git a/tmp/c0d43cd6-999d-4291-bd52-a5e1bb4e9101_buggy.java b/tmp/392d5cb3-e4fe-4b8d-b197-afbc14b5d876_fixed.java
index 712f277..b5516a1 100644
--- a/tmp/c0d43cd6-999d-4291-bd52-a5e1bb4e9101_buggy.java
+++ b/tmp/392d5cb3-e4fe-4b8d-b197-afbc14b5d876_fixed.java
@@ -1,48 +1,72 @@
     /**
      * Renders the given input to the target Appendable.
      *
      * @param input
      *            source to render
      * @param target
      *            render onto this target Appendable.
      * @return the given Appendable
      * @throws IOException
      *             If an I/O error occurs
      */
     public static Appendable render(final String input, Appendable target) throws IOException {
 
         int i = 0;
         int j, k;
 
         while (true) {
             j = input.indexOf(BEGIN_TOKEN, i);
             if (j == -1) {
+                // No more BEGIN_TOKEN found from index i onwards.
+                // Append the rest of the input and finish.
                 if (i == 0) {
+                    // No BEGIN_TOKEN found in the entire input
                     target.append(input);
                     return target;
                 }
+                // Append the remaining part of the input after the last processed sequence
                 target.append(input.substring(i));
                 return target;
             }
+            
+            // Append the text before the current BEGIN_TOKEN
             target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
+            
+            // Search for the END_TOKEN. It must appear strictly after the BEGIN_TOKEN.
+            // j + BEGIN_TOKEN_LEN ensures we search *after* the BEGIN_TOKEN itself.
+            k = input.indexOf(END_TOKEN, j + BEGIN_TOKEN_LEN);
 
             if (k == -1) {
-                target.append(input);
-                return target;
+                // BEGIN_TOKEN was found, but no matching END_TOKEN was found afterwards.
+                // This indicates a malformed or unclosed ANSI escape sequence.
+                throw new IllegalArgumentException("Unclosed or malformed ANSI escape sequence at index " + j + " in input: '" + input + "'");
             }
+            
+            // Move 'j' to point right after the BEGIN_TOKEN, which is the start of the 'spec' string.
             j += BEGIN_TOKEN_LEN;
             String spec = input.substring(j, k);
 
+            String replacement;
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
+            
+            // The 'spec' format is generally "codes:text".
+            // If the separator is missing, it means either:
+            // 1. Only codes are provided (e.g., "bold") and text is empty.
+            // 2. The spec itself is empty (e.g., "@||@").
+            // If items.length is 1, it implies no separator was found.
             if (items.length == 1) {
-                target.append(input);
-                return target;
+                // If spec is empty (e.g., from "@||@"), items[0] will be empty.
+                // If spec is "bold" (e.g., from "@|bold|@"), items[0] will be "bold".
+                // In both cases, the text part is implicitly empty.
+                replacement = render("", items[0].split(CODE_LIST_SEPARATOR));
+            } else {
+                // Standard case: "codes:text"
+                replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
             }
-            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
             target.append(replacement);
 
+            // Move 'i' past the current END_TOKEN to continue scanning for the next sequence.
             i = k + END_TOKEN_LEN;
         }
     }
\ No newline at end of file
