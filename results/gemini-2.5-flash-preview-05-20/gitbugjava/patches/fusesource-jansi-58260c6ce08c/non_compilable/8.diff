diff --git a/tmp/7df4c6a0-3432-4b60-a128-11670d7c72c2_buggy.java b/tmp/8396efaf-95b8-4a60-b65b-726af9780511_fixed.java
index 712f277..4c2f62e 100644
--- a/tmp/7df4c6a0-3432-4b60-a128-11670d7c72c2_buggy.java
+++ b/tmp/8396efaf-95b8-4a60-b65b-726af9780511_fixed.java
@@ -1,48 +1,64 @@
     /**
      * Renders the given input to the target Appendable.
      *
      * @param input
      *            source to render
      * @param target
      *            render onto this target Appendable.
      * @return the given Appendable
      * @throws IOException
      *             If an I/O error occurs
      */
     public static Appendable render(final String input, Appendable target) throws IOException {
 
         int i = 0;
         int j, k;
 
         while (true) {
             j = input.indexOf(BEGIN_TOKEN, i);
             if (j == -1) {
+                // No more BEGIN_TOKEN found
                 if (i == 0) {
+                    // No BEGIN_TOKEN found at all, append the whole input
                     target.append(input);
                     return target;
                 }
+                // Append the rest of the input after the last processed token
                 target.append(input.substring(i));
                 return target;
             }
+            // Append the text before the current BEGIN_TOKEN
             target.append(input.substring(i, j));
+            
+            // Find the END_TOKEN starting from the position of BEGIN_TOKEN
             k = input.indexOf(END_TOKEN, j);
 
             if (k == -1) {
-                target.append(input);
-                return target;
+                // If BEGIN_TOKEN was found but no matching END_TOKEN
+                // This indicates an unterminated sequence, which is an error.
+                throw new IllegalArgumentException("Unterminated Ansi sequence starting at index " + j + " in: '" + input + "'");
             }
+            
+            // Move j past the BEGIN_TOKEN to get the start of the spec string
             j += BEGIN_TOKEN_LEN;
+            // Extract the spec string between BEGIN_TOKEN and END_TOKEN
             String spec = input.substring(j, k);
 
+            // Split the spec into color codes and text content
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
             if (items.length == 1) {
-                target.append(input);
-                return target;
+                // If the spec does not contain the CODE_TEXT_SEPARATOR or is empty,
+                // it's considered malformed, e.g., "@|@" results in an empty spec string.
+                throw new IllegalArgumentException("Malformed Ansi sequence spec '" + spec + "' in: '" + input + "'");
             }
+            
+            // Render the replacement string using the parsed items
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
+            // Append the rendered replacement to the target
             target.append(replacement);
 
+            // Advance 'i' past the processed Ansi sequence for the next iteration
             i = k + END_TOKEN_LEN;
         }
     }
\ No newline at end of file
