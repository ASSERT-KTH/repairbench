diff --git a/tmp/785dae97-b9d7-4649-94e6-07a0ca5c2558_buggy.java b/tmp/f3de79e5-6ab4-443f-8246-a513e536cf72_fixed.java
index dcc36a4..b7bb01c 100644
--- a/tmp/785dae97-b9d7-4649-94e6-07a0ca5c2558_buggy.java
+++ b/tmp/f3de79e5-6ab4-443f-8246-a513e536cf72_fixed.java
@@ -1,12 +1,28 @@
     protected void replaceChild(Node out, Node in) {
         Validate.isTrue(out.parentNode == this);
         Validate.notNull(in);
-        if (in.parentNode != null)
+
+        // If 'out' is being replaced by itself, no structural changes are needed.
+        // The node effectively remains in its current position with its current parent.
+        if (out == in) {
+            return;
+        }
+
+        // If 'in' already has a parent, remove it from its current parent first.
+        // This ensures 'in' is not simultaneously a child of two different parents.
+        if (in.parentNode != null) {
             in.parentNode.removeChild(in);
+        }
 
-        final int index = out.siblingIndex;
+        final int index = out.siblingIndex; // Get the index of 'out' before it's replaced/removed
+
+        // Replace 'out' with 'in' in the childNodes list at the determined index.
         ensureChildNodes().set(index, in);
+
+        // Update 'in's parent and sibling index to reflect its new position.
         in.parentNode = this;
         in.setSiblingIndex(index);
+
+        // 'out' is no longer a child of 'this', so clear its parent reference.
         out.parentNode = null;
     }
\ No newline at end of file
