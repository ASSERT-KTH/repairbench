diff --git a/tmp/ba93165b-0149-42fb-880c-69d6a54df479_buggy.java b/tmp/249fb6e5-d5ca-4e96-8178-a1112ed645e6_fixed.java
index dcc36a4..143f139 100644
--- a/tmp/ba93165b-0149-42fb-880c-69d6a54df479_buggy.java
+++ b/tmp/249fb6e5-d5ca-4e96-8178-a1112ed645e6_fixed.java
@@ -1,12 +1,30 @@
     protected void replaceChild(Node out, Node in) {
-        Validate.isTrue(out.parentNode == this);
+        Validate.isTrue(out.parentNode == this); // out must be a child of 'this'
         Validate.notNull(in);
-        if (in.parentNode != null)
+
+        final int index = out.siblingIndex; // Capture original index of 'out' BEFORE any potential removal
+
+        // If 'in' is currently attached to a parent, detach it.
+        // This is necessary if 'in' is being moved from another parent,
+        // or if 'in' is another child of 'this' that's being moved to 'out's position.
+        // We specifically skip this removal if 'in' IS 'out' and its parent IS 'this',
+        // because in that case, the node is simply replacing itself, and it should remain in place.
+        if (in.parentNode != null && (in.parentNode != this || in != out)) {
             in.parentNode.removeChild(in);
+        }
 
-        final int index = out.siblingIndex;
+        // Replace 'out' with 'in' in the children list of 'this'.
+        // The 'index' captured earlier is the correct slot.
+        // If in == out, this effectively replaces the node with itself, which is a no-op on the list contents,
+        // but ensures parent/sibling index is correctly set below.
         ensureChildNodes().set(index, in);
-        in.parentNode = this;
-        in.setSiblingIndex(index);
-        out.parentNode = null;
+
+        in.parentNode = this; // Set 'in's parent to 'this'
+        in.setSiblingIndex(index); // Set 'in's sibling index to the position where 'out' was
+
+        // Detach 'out' only if it's a different node than 'in'.
+        // If out == in, 'out' was effectively re-attached to 'this', so its parent should remain 'this'.
+        if (out != in) {
+            out.parentNode = null; // Detach 'out' from its parent
+        }
     }
\ No newline at end of file
