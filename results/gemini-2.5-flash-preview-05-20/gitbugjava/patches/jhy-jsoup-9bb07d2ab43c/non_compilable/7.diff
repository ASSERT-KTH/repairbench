diff --git a/tmp/8db5bf9f-4fe2-4428-83df-3ec2c9157017_buggy.java b/tmp/40d98b43-cb93-431c-9a99-8e5f1c0cd09a_fixed.java
index dcc36a4..ad56704 100644
--- a/tmp/8db5bf9f-4fe2-4428-83df-3ec2c9157017_buggy.java
+++ b/tmp/40d98b43-cb93-431c-9a99-8e5f1c0cd09a_fixed.java
@@ -1,12 +1,27 @@
     protected void replaceChild(Node out, Node in) {
         Validate.isTrue(out.parentNode == this);
         Validate.notNull(in);
-        if (in.parentNode != null)
+
+        // If 'out' and 'in' are the same node, the node is replacing itself.
+        // No structural changes are needed as the node remains in its current position.
+        // Performing removal and re-insertion would incorrectly modify the children list
+        // and detach the node.
+        if (out == in) {
+            return;
+        }
+
+        // If the incoming node 'in' already has a parent, it must be removed from its
+        // current parent first, as a node can only have one parent.
+        // This also handles cases where 'in' is another child of 'this' (e.g., moving a child).
+        if (in.parentNode != null) {
             in.parentNode.removeChild(in);
+        }
 
-        final int index = out.siblingIndex;
-        ensureChildNodes().set(index, in);
-        in.parentNode = this;
-        in.setSiblingIndex(index);
+        final int index = out.siblingIndex; // Get the index of the node being replaced ('out')
+        ensureChildNodes().set(index, in);  // Replace 'out' with 'in' at 'out's original index
+        in.parentNode = this;               // Set 'in's parent to 'this' (the current node)
+        in.setSiblingIndex(index);          // Set 'in's sibling index to match its new position
+
+        // The 'out' node has been replaced and is now detached from this parent.
         out.parentNode = null;
     }
\ No newline at end of file
