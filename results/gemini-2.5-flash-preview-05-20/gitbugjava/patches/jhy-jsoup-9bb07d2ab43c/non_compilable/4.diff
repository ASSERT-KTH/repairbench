diff --git a/tmp/d8ea47f3-a9d7-42fa-8245-ff670089289a_buggy.java b/tmp/8a63c10f-ab62-43e9-b510-f0ecbbedb7f4_fixed.java
index dcc36a4..84d5535 100644
--- a/tmp/d8ea47f3-a9d7-42fa-8245-ff670089289a_buggy.java
+++ b/tmp/8a63c10f-ab62-43e9-b510-f0ecbbedb7f4_fixed.java
@@ -1,12 +1,37 @@
     protected void replaceChild(Node out, Node in) {
         Validate.isTrue(out.parentNode == this);
         Validate.notNull(in);
-        if (in.parentNode != null)
+
+        // If 'in' is the same node as 'out', it means we are trying to replace a node with itself.
+        // In this case, no actual DOM structural modification is needed. The node is already in place.
+        // This prevents `in.parentNode.removeChild(in)` from detaching 'out' prematurely when 'out' == 'in',
+        // which would lead to an incorrect state or IndexOutOfBoundsException when trying to re-insert.
+        if (out == in) {
+            // The node is already in its correct position with the correct parent and sibling index.
+            // No operation is needed.
+            return;
+        }
+
+        // If 'in' is a different node than 'out', and 'in' is currently attached to any parent, detach it first.
+        // This is crucial to prevent 'in' from having multiple parents or being part of two DOM trees.
+        if (in.parentNode != null) {
             in.parentNode.removeChild(in);
+        }
 
+        // Get the current sibling index of 'out'. This index is where 'in' will be placed.
+        // At this point, 'out' is still correctly part of 'this's children list, so its siblingIndex is valid.
         final int index = out.siblingIndex;
+
+        // Replace 'out' with 'in' in the childNodes list at the determined index.
+        // The `List.set()` method performs the replacement, effectively removing 'out' from the list.
         ensureChildNodes().set(index, in);
+
+        // Update 'in' node's parent and sibling index to reflect its new position within 'this' node's children.
         in.parentNode = this;
         in.setSiblingIndex(index);
+
+        // Detach 'out' from the DOM. It's no longer part of 'this' node's children list.
+        // Its parent reference is cleared, and its sibling index is reset to indicate it's detached.
         out.parentNode = null;
+        out.setSiblingIndex(-1); // Explicitly set siblingIndex to -1 for the detached node.
     }
\ No newline at end of file
