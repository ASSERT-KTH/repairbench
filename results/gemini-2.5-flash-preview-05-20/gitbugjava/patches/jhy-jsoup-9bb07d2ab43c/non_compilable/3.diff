diff --git a/tmp/7edd22ab-18ec-47cd-b8c0-daf621f83ffa_buggy.java b/tmp/80c592de-6fca-4422-88d8-e87e922bcdf8_fixed.java
index dcc36a4..70c5b5e 100644
--- a/tmp/7edd22ab-18ec-47cd-b8c0-daf621f83ffa_buggy.java
+++ b/tmp/80c592de-6fca-4422-88d8-e87e922bcdf8_fixed.java
@@ -1,12 +1,26 @@
     protected void replaceChild(Node out, Node in) {
         Validate.isTrue(out.parentNode == this);
         Validate.notNull(in);
+
+        // If the node is being replaced with itself, no action is needed.
+        // This prevents the node from being detached and then re-attached,
+        // which could lead to incorrect sibling indices or temporary parent issues.
+        if (out == in) {
+            return;
+        }
+
+        // If 'in' already has a parent, remove it from that parent's child list.
+        // Note: The `out.siblingIndex` is read *after* this step, which is important
+        // because if `in` was also a child of `this` and preceded `out`, removing `in`
+        // would shift `out`'s sibling index.
         if (in.parentNode != null)
             in.parentNode.removeChild(in);
 
-        final int index = out.siblingIndex;
-        ensureChildNodes().set(index, in);
-        in.parentNode = this;
-        in.setSiblingIndex(index);
-        out.parentNode = null;
+        final int index = out.siblingIndex; // Get the index of the node to be replaced ('out').
+        ensureChildNodes().set(index, in);   // Replace 'out' with 'in' at the determined index.
+
+        in.parentNode = this; // Set the parent of the new node 'in' to 'this'.
+        in.setSiblingIndex(index); // Set the sibling index of 'in' to match its new position.
+
+        out.parentNode = null; // Detach the old node 'out' from its parent.
     }
\ No newline at end of file
