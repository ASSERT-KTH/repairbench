diff --git a/tmp/bbf0171a-8a97-4f9e-833d-71a0229304b5_buggy.java b/tmp/096301b1-5451-4681-a532-58adce3baad3_fixed.java
index dcc36a4..bdeed10 100644
--- a/tmp/bbf0171a-8a97-4f9e-833d-71a0229304b5_buggy.java
+++ b/tmp/096301b1-5451-4681-a532-58adce3baad3_fixed.java
@@ -1,12 +1,31 @@
     protected void replaceChild(Node out, Node in) {
         Validate.isTrue(out.parentNode == this);
         Validate.notNull(in);
-        if (in.parentNode != null)
+
+        // If 'out' is replaced by itself ('in' is 'out'), no structural change is needed.
+        // The node is already in its correct position relative to this parent.
+        if (out == in) {
+            return;
+        }
+
+        // If 'in' node currently has a parent, remove it from its current parent first.
+        // This prevents 'in' from existing in two places simultaneously.
+        if (in.parentNode != null) {
             in.parentNode.removeChild(in);
+        }
 
+        // Get the original sibling index of 'out'. This is where 'in' will be inserted.
         final int index = out.siblingIndex;
+
+        // Replace 'out' with 'in' in the childNodes list at the determined index.
         ensureChildNodes().set(index, in);
+
+        // Set the parent and sibling index for the newly inserted 'in' node.
         in.parentNode = this;
         in.setSiblingIndex(index);
+
+        // Clear the parent reference for the 'out' node, as it is no longer a child of this node.
         out.parentNode = null;
+        // Invalidate its sibling index, consistent with how removeChild handles detached nodes.
+        out.setSiblingIndex(-1);
     }
\ No newline at end of file
