diff --git a/tmp/c080eba9-36a0-428a-8c64-7d3ce50b1e69_buggy.java b/tmp/2977e5c9-2873-4445-8385-ee507b4a70bc_fixed.java
index dcc36a4..cd831d9 100644
--- a/tmp/c080eba9-36a0-428a-8c64-7d3ce50b1e69_buggy.java
+++ b/tmp/2977e5c9-2873-4445-8385-ee507b4a70bc_fixed.java
@@ -1,12 +1,25 @@
     protected void replaceChild(Node out, Node in) {
         Validate.isTrue(out.parentNode == this);
         Validate.notNull(in);
-        if (in.parentNode != null)
+
+        // If the node being replaced ('out') is the same as the replacement node ('in'),
+        // no actual structural change is needed. The node is already in its correct position.
+        // We simply return, as 'out' is already a child of 'this' at its correct index.
+        if (out == in) {
+            return;
+        }
+
+        // If the 'in' node currently has a parent (and it's not the same as 'out'),
+        // it must be removed from its current parent first to facilitate moving it.
+        if (in.parentNode != null) {
             in.parentNode.removeChild(in);
+        }
 
         final int index = out.siblingIndex;
-        ensureChildNodes().set(index, in);
-        in.parentNode = this;
-        in.setSiblingIndex(index);
-        out.parentNode = null;
+        ensureChildNodes().set(index, in); // Replace 'out' with 'in' in the internal child list
+        
+        in.parentNode = this; // Set the parent of 'in' to 'this'
+        in.setSiblingIndex(index); // Set the sibling index of 'in' to where 'out' was
+        
+        out.parentNode = null; // Detach the 'out' node, as it's no longer a child of 'this'
     }
\ No newline at end of file
