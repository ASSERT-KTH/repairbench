diff --git a/tmp/b8cb7e77-a1e4-41c9-9242-e83b732f1050_buggy.java b/tmp/97d5bbf5-1397-4649-90aa-7f30d7f81e60_fixed.java
index dcc36a4..f969c00 100644
--- a/tmp/b8cb7e77-a1e4-41c9-9242-e83b732f1050_buggy.java
+++ b/tmp/97d5bbf5-1397-4649-90aa-7f30d7f81e60_fixed.java
@@ -1,12 +1,29 @@
     protected void replaceChild(Node out, Node in) {
         Validate.isTrue(out.parentNode == this);
         Validate.notNull(in);
+
+        // If the node is replacing itself, no structural changes to the parent's children list are needed.
+        // The node's parent and sibling index should remain unchanged.
+        if (out == in) {
+            return;
+        }
+
+        // If the incoming node 'in' already has a parent, remove it from its current parent.
         if (in.parentNode != null)
             in.parentNode.removeChild(in);
 
+        // Capture the sibling index of the outgoing node 'out' before it's replaced.
         final int index = out.siblingIndex;
+
+        // Replace 'out' with 'in' in the parent's child nodes list.
+        // This also effectively detaches 'out' from this parent's child list.
         ensureChildNodes().set(index, in);
+
+        // Update the parent and sibling index of the new child 'in'.
         in.parentNode = this;
         in.setSiblingIndex(index);
+
+        // Detach the old child 'out' by nullifying its parent reference.
+        // Its sibling index is implicitly invalidated by the set operation above.
         out.parentNode = null;
     }
\ No newline at end of file
