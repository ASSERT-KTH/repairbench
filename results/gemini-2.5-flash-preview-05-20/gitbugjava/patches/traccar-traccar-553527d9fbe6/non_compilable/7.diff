diff --git a/tmp/11b5d308-3202-4e8f-8645-974ba914e464_buggy.java b/tmp/5a2c24ff-d7ff-478a-91f3-8ecca28285f1_fixed.java
index 921b73e..f63af96 100644
--- a/tmp/11b5d308-3202-4e8f-8645-974ba914e464_buggy.java
+++ b/tmp/5a2c24ff-d7ff-478a-91f3-8ecca28285f1_fixed.java
@@ -1,303 +1,537 @@
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.ByteBufUtil;
+import org.traccar.helper.BitUtil;
+import org.traccar.helper.UnitsConverter;
+import org.traccar.model.CellTower;
+import org.traccar.model.Network;
+import org.traccar.model.Position;
+import org.traccar.session.DeviceSession;
+
+import java.nio.charset.StandardCharsets;
+
+public abstract class HuabaoProtocolDecoder { // Class must be abstract as per context or implement needed methods
+
+    protected abstract String getProtocolName();
+    protected abstract int decodeAlarm(long alarm); // Placeholder for existing method
+    protected abstract void decodeCoordinates(Position position, ByteBuf buf); // Placeholder for existing method
+    protected abstract java.util.Date readDate(ByteBuf buf, Object timezone); // Placeholder for existing method
+    protected abstract double decodeCustomDouble(ByteBuf buf); // Placeholder for existing method
+    protected abstract void decodeExtension(Position position, ByteBuf buf, int endIndex); // Placeholder for existing method
+
     private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));
 
         decodeCoordinates(position, buf);
 
         position.setAltitude(buf.readShort());
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));
         position.setCourse(buf.readUnsignedShort());
         position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));
 
         if (buf.readableBytes() == 20) {
 
             buf.skipBytes(4); // remaining battery and mileage
             position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);
             position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
             buf.readUnsignedInt(); // area id
             position.set(Position.KEY_RSSI, buf.readUnsignedByte());
             buf.skipBytes(3); // reserved
 
             return position;
 
         }
 
         while (buf.readableBytes() > 2) {
 
             int subtype = buf.readUnsignedByte();
             int length = buf.readUnsignedByte();
             int endIndex = buf.readerIndex() + length;
             String stringValue;
             switch (subtype) {
                 case 0x01:
+                    if (length >= 4) {
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x02:
+                    if (length >= 2) {
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x2b:
+                    if (length >= 4) {
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x30:
+                    if (length >= 1) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x31:
+                    if (length >= 1) {
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x33:
+                    if (length > 0) { // Ensure length is positive before reading char sequence
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         if (stringValue.startsWith("*M00")) {
+                            // Ensure lockStatus string has enough characters before substring operations
+                            if (stringValue.length() >= 8 + 7) {
                                 String lockStatus = stringValue.substring(8, 8 + 7);
+                                if (lockStatus.length() >= 5) { // Needs at least 5 chars for substring(2, 5)
                                     position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);
                                 }
+                            }
+                        }
+                    }
                     break;
                 case 0x60:
+                    if (length >= 2) {
                         position.set(Position.KEY_EVENT, buf.readUnsignedShort());
                         buf.skipBytes(length - 2);
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x80:
+                    // Removed `endIndex = buf.writerIndex() - 2;` to respect TLV length for 0x80
+                    if (length >= 1) {
                         buf.readUnsignedByte(); // content
-                    endIndex = buf.writerIndex() - 2;
+                        // Ensure decodeExtension operates within this TLV's bounds.
+                        // Pass this TLV's endIndex to decodeExtension.
                         decodeExtension(position, buf, endIndex);
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x91:
+                    // Total bytes read is 22. Ensure length is sufficient.
+                    if (length >= 22) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
                         position.set(Position.KEY_RPM, buf.readUnsignedShort());
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);
                         position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
                         buf.readUnsignedShort();
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                         buf.readUnsignedShort();
                         buf.readUnsignedInt();
                         buf.readUnsignedShort();
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x94:
                     if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_VIN, stringValue);
                     }
                     break;
                 case 0xA7:
+                    if (length >= 4) {
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
                         position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0xAC:
+                    if (length >= 4) {
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0xBC:
+                    if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set("driver", stringValue.trim());
+                    }
                     break;
                 case 0xBD:
+                    if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);
+                    }
                     break;
                 case 0xD0:
+                    if (length >= 4) {
                         long userStatus = buf.readUnsignedInt();
                         if (BitUtil.check(userStatus, 3)) {
                             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
                         }
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0xD3:
+                    if (length >= 2) {
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0xD4:
                 case 0xE1:
+                    if (length >= 1) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0xD5:
                     if (length == 2) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
-                    } else {
+                    } else if (length > 2) {
+                        if (length >= 1 && buf.readableBytes() >= 1) { // Ensure enough bytes for count
                             int count = buf.readUnsignedByte();
+                            int bytesRead = 1; // 1 byte for count
                             for (int i = 1; i <= count; i++) {
+                                // Each lock consumes 5+5+1+2 = 13 bytes
+                                if (bytesRead + 13 <= length && buf.readableBytes() >= 13) {
                                     position.set("lock" + i + "Id", ByteBufUtil.hexDump(buf.readSlice(5)));
                                     position.set("lock" + i + "Card", ByteBufUtil.hexDump(buf.readSlice(5)));
                                     position.set("lock" + i + "Battery", buf.readUnsignedByte());
                                     int status = buf.readUnsignedShort();
                                     position.set("lock" + i + "Locked", !BitUtil.check(status, 5));
+                                    bytesRead += 13;
+                                } else {
+                                    // Not enough bytes for full lock data or remaining part of the length, skip rest
+                                    buf.skipBytes(endIndex - buf.readerIndex());
+                                    break;
                                 }
                             }
+                        } else {
+                            buf.skipBytes(length); // Not enough bytes for count
+                        }
+                    } else { // length is 0 or 1, and not 2
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0xDA:
+                    if (length >= 3) {
                         buf.readUnsignedShort(); // string cut count
                         int deviceStatus = buf.readUnsignedByte();
                         position.set("string", BitUtil.check(deviceStatus, 0));
                         position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));
                         position.set("cover", BitUtil.check(deviceStatus, 3));
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0xE6:
+                    // This internal loop correctly uses `endIndex` for this subtype's payload.
+                    // decodeCustomDouble is assumed to consume fixed bytes or handle its own bounds.
                     while (buf.readerIndex() < endIndex) {
+                        if (buf.readableBytes() < 1) { // Sensor index
+                            break;
+                        }
                         int sensorIndex = buf.readUnsignedByte();
+                        if (buf.readableBytes() < 6 + 8 + 8) { // mac (6) + temp (8) + humidity (8)
+                            buf.skipBytes(endIndex - buf.readerIndex());
+                            break;
+                        }
                         buf.skipBytes(6); // mac
                         position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));
                         position.set("humidity" + sensorIndex, decodeCustomDouble(buf));
                     }
                     break;
                 case 0xEB:
+                    if (length >= 4 && buf.readableBytes() >= 4) { // check if enough for getUnsignedShort
+                        // This uses buf.getUnsignedShort(buf.readerIndex()) which doesn't advance pointer
                         if (buf.getUnsignedShort(buf.readerIndex()) > 200) {
                             Network network = new Network();
+                            if (length >= 3) { // mcc (2) + mnc (1)
                                 int mcc = buf.readUnsignedShort();
                                 int mnc = buf.readUnsignedByte();
+                                // Inner loop for cell towers, respect TLV endIndex
                                 while (buf.readerIndex() < endIndex) {
+                                    if (buf.readableBytes() < 5) { // CellTower.from needs 5 bytes (2+2+1)
+                                        buf.skipBytes(endIndex - buf.readerIndex());
+                                        break;
+                                    }
                                     network.addCellTower(CellTower.from(
                                             mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),
                                             buf.readUnsignedByte()));
                                 }
                                 position.setNetwork(network);
+                            } else { // length is not enough for mcc/mnc, skip remaining.
+                                buf.skipBytes(endIndex - buf.readerIndex());
+                            }
                         } else {
+                            // Inner loop for extended TLVs within 0xEB, respect TLV endIndex
                             while (buf.readerIndex() < endIndex) {
+                                if (buf.readableBytes() < 4) { // extendedLength (2) + extendedType (2)
+                                    buf.skipBytes(endIndex - buf.readerIndex());
+                                    break;
+                                }
                                 int extendedLength = buf.readUnsignedShort();
                                 int extendedType = buf.readUnsignedShort();
+                                // Ensure `extendedLength` includes the 2 bytes for `extendedType`
+                                // and doesn't read beyond `endIndex` of parent `0xEB` TLV.
+                                int extendedSubEndIndex = buf.readerIndex() + extendedLength - 2;
+                                if (extendedSubEndIndex > endIndex) {
+                                    extendedSubEndIndex = endIndex;
+                                }
+
                                 switch (extendedType) {
                                     case 0x0001:
+                                        if (extendedLength >= 3 && buf.readableBytes() >= 3) { // fuel (2) + unused (1)
                                             position.set("fuel1", buf.readUnsignedShort() * 0.1);
                                             buf.readUnsignedByte(); // unused
+                                        }
                                         break;
                                     case 0x0023:
+                                        if (extendedLength >= 6 && buf.readableBytes() >= 6) { // 6 bytes for string
                                             position.set("fuel2", Double.parseDouble(
                                                     buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));
+                                        }
                                         break;
                                     case 0x00CE:
+                                        if (extendedLength >= 2 && buf.readableBytes() >= 2) {
                                             position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
+                                        }
                                         break;
                                     case 0x00D8:
+                                        if (extendedLength >= 9 && buf.readableBytes() >= 9) { // 2+1+2+4
                                             Network network = new Network();
                                             network.addCellTower(CellTower.from(
                                                     buf.readUnsignedShort(), buf.readUnsignedByte(),
                                                     buf.readUnsignedShort(), buf.readUnsignedInt()));
                                             position.setNetwork(network);
+                                        }
                                         break;
                                     case 0xE1:
+                                        if (extendedLength >= 1 && buf.readableBytes() >= 1) {
                                             position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                                        }
                                         break;
                                     default:
-                                    buf.skipBytes(extendedLength - 2);
+                                        // Handled by buf.readerIndex(extendedSubEndIndex);
                                         break;
                                 }
+                                // Ensure readerIndex is at the end of the current extended TLV
+                                buf.readerIndex(extendedSubEndIndex);
                             }
                         }
+                    } else { // Not enough bytes for initial check or length is 0
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0xED:
+                    if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_CARD, stringValue.trim());
+                    }
                     break;
                 case 0xEE:
+                    // Total bytes read is 6. Ensure length is sufficient.
+                    if (length >= 6) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0xF3:
+                    // Similar to 0xEB, nested TLV.
                     while (buf.readerIndex() < endIndex) {
+                        if (buf.readableBytes() < 3) { // extendedType (2) + extendedLength (1)
+                            buf.skipBytes(endIndex - buf.readerIndex());
+                            break;
+                        }
                         int extendedType = buf.readUnsignedShort();
                         int extendedLength = buf.readUnsignedByte();
+                        int extendedSubEndIndex = buf.readerIndex() + extendedLength;
+
+                        // Prevent reading beyond parent endIndex
+                        if (extendedSubEndIndex > endIndex) {
+                            extendedSubEndIndex = endIndex;
+                        }
+
                         switch (extendedType) {
                             case 0x0002:
+                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {
                                     position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
+                                }
                                 break;
                             case 0x0003:
+                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {
                                     position.set(Position.KEY_RPM, buf.readUnsignedShort());
+                                }
                                 break;
                             case 0x0004:
+                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {
                                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
+                                }
                                 break;
                             case 0x0005:
+                                if (extendedLength >= 4 && buf.readableBytes() >= 4) {
                                     position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);
+                                }
                                 break;
                             case 0x0007:
+                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {
                                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);
+                                }
                                 break;
                             case 0x0008:
+                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {
                                     position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);
+                                }
                                 break;
                             case 0x0009:
+                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {
                                     position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);
+                                }
                                 break;
                             case 0x000B:
+                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {
                                     position.set("intakePressure", buf.readUnsignedShort());
+                                }
                                 break;
                             case 0x000C:
+                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {
                                     position.set("intakeTemp", buf.readUnsignedShort() - 40);
+                                }
                                 break;
                             case 0x000D:
+                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {
                                     position.set("intakeFlow", buf.readUnsignedShort());
+                                }
                                 break;
                             case 0x000E:
+                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {
                                     position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);
+                                }
                                 break;
                             case 0x0050:
+                                if (extendedLength >= 17 && buf.readableBytes() >= 17) {
                                     position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));
+                                }
                                 break;
                             case 0x0100:
+                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {
                                     position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);
+                                }
                                 break;
                             case 0x0102:
+                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {
                                     position.set("tripFuel", buf.readUnsignedShort() * 0.1);
+                                }
                                 break;
                             case 0x0112:
+                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {
                                     position.set("hardAccelerationCount", buf.readUnsignedShort());
+                                }
                                 break;
                             case 0x0113:
+                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {
                                     position.set("hardDecelerationCount", buf.readUnsignedShort());
+                                }
                                 break;
                             case 0x0114:
+                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {
                                     position.set("hardCorneringCount", buf.readUnsignedShort());
+                                }
                                 break;
                             default:
-                                buf.skipBytes(extendedLength);
+                                // Handled by buf.readerIndex(extendedSubEndIndex);
                                 break;
                         }
+                        // Ensure readerIndex is at the end of the current extended TLV
+                        buf.readerIndex(extendedSubEndIndex);
                     }
                     break;
                 case 0xFE:
+                    // Fix: Ensure bytes are read only if length allows, preventing buffer rewind.
                     if (length == 1) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                    } else {
-                        int mark = buf.readUnsignedByte();
+                    } else if (length >= 2) { // Minimum length for mark + potential battery level
+                        int mark = buf.readUnsignedByte(); // Consumes 1 byte for mark
                         if (mark == 0x7C) {
+                            // This internal loop processes sub-TLVs until the end of the 0xFE's payload.
                             while (buf.readerIndex() < endIndex) {
+                                if (buf.readableBytes() < 2) { // extendedType (1) + extendedLength (1)
+                                    buf.skipBytes(endIndex - buf.readerIndex()); // Consume remaining bytes if any
+                                    break;
+                                }
                                 int extendedType = buf.readUnsignedByte();
                                 int extendedLength = buf.readUnsignedByte();
+                                int extendedSubEndIndex = buf.readerIndex() + extendedLength;
+
+                                // Prevent reading beyond parent 0xFE's endIndex
+                                if (extendedSubEndIndex > endIndex) {
+                                    extendedSubEndIndex = endIndex;
+                                }
+
                                 switch (extendedType) {
                                     case 0x01:
+                                        if (extendedLength >= 4 && buf.readableBytes() >= 4) {
                                             long alarms = buf.readUnsignedInt();
                                             if (BitUtil.check(alarms, 0)) {
                                                 position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                                             }
                                             if (BitUtil.check(alarms, 1)) {
                                                 position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                                             }
                                             if (BitUtil.check(alarms, 2)) {
                                                 position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                                             }
                                             if (BitUtil.check(alarms, 3)) {
                                                 position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);
                                             }
                                             if (BitUtil.check(alarms, 4)) {
                                                 position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);
                                             }
+                                        }
                                         break;
                                     default:
-                                        buf.skipBytes(extendedLength);
+                                        // Handled by buf.readerIndex(extendedSubEndIndex);
                                         break;
                                 }
+                                buf.readerIndex(extendedSubEndIndex); // Ensure consumed up to sub-endIndex
                             }
                         }
+                        // After mark or inner loop, if there's still a byte left before endIndex, read it as battery level.
+                        if (buf.readerIndex() < endIndex && buf.readableBytes() >= 1) {
                             position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                         }
+                    } else {
+                        // If length is 0, nothing to read in this case.
+                        // The outer `buf.readerIndex(endIndex)` will handle skipping 0 bytes.
+                    }
                     break;
                 default:
+                    // If subtype is not handled, skip its payload using the length.
                     break;
             }
+            // Ensure the reader index is at the end of the current subtype's payload.
+            // This handles unhandled subtypes and ensures correct positioning for next TLV.
             buf.readerIndex(endIndex);
         }
 
         return position;
     }
+
+}
\ No newline at end of file
