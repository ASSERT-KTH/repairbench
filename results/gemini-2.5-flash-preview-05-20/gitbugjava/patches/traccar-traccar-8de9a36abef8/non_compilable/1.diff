diff --git a/tmp/62d93db7-1c08-4698-b235-29669939bae8_buggy.java b/tmp/2da48020-2777-472b-a543-3df6cdad35c1_fixed.java
index ad77f15..27c7eac 100644
--- a/tmp/62d93db7-1c08-4698-b235-29669939bae8_buggy.java
+++ b/tmp/2da48020-2777-472b-a543-3df6cdad35c1_fixed.java
@@ -1,112 +1,388 @@
+import org.traccar.helper.BitUtil;
+import org.traccar.model.CellTower;
+import org.traccar.model.Network;
+import org.traccar.model.Position;
+import org.traccar.helper.UnitsConverter;
+
     private void decodeFragment(Position position, String fragment) {
 
         int dataIndex = fragment.indexOf(':');
         int index = 0;
         String[] values;
-        if (fragment.length() == dataIndex + 1) {
+        if (fragment.length() == dataIndex + 1) { // If fragment is "TYPE:"
             values = new String[0];
         } else {
             values = fragment.substring(dataIndex + 1).split(";");
         }
 
         switch (fragment.substring(0, dataIndex)) {
             case "GPS":
+                // Valid flag (e.g., A or V). Assuming it's always present if GPS fragment exists.
+                if (index < values.length) {
                     position.setValid(values[index++].equals("A"));
+                } else {
+                    index++; // Consume expected field, even if missing
+                }
+
+                // Satellites
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
                         position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+                    } catch (NumberFormatException e) {
+                        index++; // Consume malformed field
+                    }
+                } else {
+                    index++; // Consume missing/empty field
+                }
+
+                // Latitude
+                if (index < values.length) {
+                    String latitudeValue = values[index++]; // Get value and increment index once
+                    if (!latitudeValue.isEmpty()) {
+                        try {
+                            position.setLatitude(Double.parseDouble(latitudeValue.substring(1)));
+                            if (latitudeValue.charAt(0) == 'S') {
                                 position.setLatitude(-position.getLatitude());
                             }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                        } catch (NumberFormatException | StringIndexOutOfBoundsException e) {
+                            // Malformed latitude value (e.g., "", "N", "Nabc"), consume and move on
+                        }
+                    }
+                } else {
+                    index++; // Consume missing field
+                }
+
+                // Longitude
+                if (index < values.length) {
+                    String longitudeValue = values[index++]; // Get value and increment index once
+                    if (!longitudeValue.isEmpty()) {
+                        try {
+                            position.setLongitude(Double.parseDouble(longitudeValue.substring(1)));
+                            if (longitudeValue.charAt(0) == 'W') {
                                 position.setLongitude(-position.getLongitude());
                             }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                        } catch (NumberFormatException | StringIndexOutOfBoundsException e) {
+                            // Malformed longitude value, consume and move on
                         }
+                    }
+                } else {
+                    index++; // Consume missing field
+                }
+
+                // Speed
+                if (index < values.length) {
+                    String speedString = values[index++]; // Get value and increment index
+                    if (!speedString.isEmpty()) {
+                        try {
+                            position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedString)));
+                        } catch (NumberFormatException e) {
+                            // Malformed speed value, consume and move on
+                        }
+                    }
+                } else {
+                    index++; // Consume missing field
+                }
+
+                // Course
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
                         position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
+                    } catch (NumberFormatException e) {
+                        index++; // Consume malformed field
+                    }
+                } else {
+                    index++; // Consume missing/empty field
+                }
+
+                // Altitude
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
                         position.setAltitude(Integer.parseInt(values[index++]));
+                    } catch (NumberFormatException e) {
+                        index++; // Consume malformed field
                     }
-                if (index < values.length) {
+                } else {
+                    index++; // Consume missing/empty field
+                }
+
+                // HDOP
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
                         position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                    } catch (NumberFormatException e) {
+                        index++; // Consume malformed field
                     }
-                if (index < values.length) {
+                } else {
+                    index++; // Consume missing/empty field
+                }
+
+                // VDOP
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
                         position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                    } catch (NumberFormatException e) {
+                        index++; // Consume malformed field
+                    }
+                } else {
+                    index++; // Consume missing/empty field
                 }
                 break;
             case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
+                index += 1; // registration status (skip)
+                index += 1; // signal strength (skip)
+                int gsmStartIndex = index; // Store index before parsing GSM details
+                // Ensure there are at least 5 values needed for CellTower.from
+                if (index + 4 < values.length) {
+                    try {
                         position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                                Integer.parseInt(values[index++]), // MCC
+                                Integer.parseInt(values[index++]), // MNC
+                                Integer.parseInt(values[index++], 16), // LAC (hex)
+                                Integer.parseInt(values[index++], 16), // CID (hex)
+                                Integer.parseInt(values[index++])))); // PSC
+                    } catch (NumberFormatException e) {
+                        // If any parsing fails, ensure index advances past all 5 expected fields for GSM
+                        index = gsmStartIndex + 5;
+                    }
+                } else {
+                    // If not enough values, ensure index advances past all 5 expected fields
+                    index = gsmStartIndex + 5;
+                }
                 break;
             case "COT":
-                if (index < values.length) {
+                // Odometer
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
                         position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                    } catch (NumberFormatException e) {
+                        index++; // Consume malformed field
                     }
+                } else {
+                    index++; // Consume missing/empty field
+                }
+                // Hours (e.g., "1-2-3" for 1 hour, 2 minutes, 3 seconds)
                 if (index < values.length) {
-                    String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                    String hoursValue = values[index++]; // Get value and increment index
+                    if (!hoursValue.isEmpty()) {
+                        String[] hours = hoursValue.split("-");
+                        long totalSeconds = 0;
+                        try {
+                            if (hours.length > 0 && !hours[0].isEmpty()) {
+                                totalSeconds += Long.parseLong(hours[0]) * 3600L; // Use Long.parseLong to avoid overflow
+                            }
+                            if (hours.length > 1 && !hours[1].isEmpty()) {
+                                totalSeconds += Long.parseLong(hours[1]) * 60L;
+                            }
+                            if (hours.length > 2 && !hours[2].isEmpty()) {
+                                totalSeconds += Long.parseLong(hours[2]);
+                            }
+                            position.set(Position.KEY_HOURS, totalSeconds * 1000L);
+                        } catch (NumberFormatException e) {
+                            // Malformed hours string (e.g., "abc-d-e"), consume and move on
+                        }
+                    }
+                } else {
+                    index++; // Consume missing field
                 }
                 break;
             case "ADC":
+                // Power
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
                         position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
+                    } catch (NumberFormatException e) {
+                        index++;
+                    }
+                } else {
+                    index++;
+                }
+                // Battery
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
                         position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                    } catch (NumberFormatException e) {
+                        index++;
                     }
-                if (index < values.length) {
+                } else {
+                    index++;
+                }
+                // ADC1
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
                         position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                    } catch (NumberFormatException e) {
+                        index++;
                     }
-                if (index < values.length) {
+                } else {
+                    index++;
+                }
+                // ADC2
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
                         position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                    } catch (NumberFormatException e) {
+                        index++;
+                    }
+                } else {
+                    index++;
                 }
                 break;
             case "DTT":
+                // KEY_STATUS
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
                         position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                    } catch (NumberFormatException e) {
+                        index++;
+                    }
+                } else {
+                    index++;
+                }
+
+                // io (ignition and other inputs/outputs)
+                if (index < values.length) {
+                    String ioString = values[index++];
+                    if (!ioString.isEmpty()) {
+                        try {
+                            int io = Integer.parseInt(ioString, 16);
                             position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                             position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                             position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                             position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                             position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                             position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                             position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                             position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
+                        } catch (NumberFormatException e) {
+                            // Malformed io string, consume and move on
                         }
+                    }
+                } else {
+                    index++;
+                }
+
+                // geofence (two values concatenated)
+                if (index + 1 < values.length) {
                     position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+                } else if (index < values.length) { // Only one value present
+                    position.set(Position.KEY_GEOFENCE, values[index++]);
+                    index++; // Consume the second (missing) slot
+                } else { // Both missing
+                    index += 2; // Consume both missing slots
+                }
+
+                // eventStatus
+                if (index < values.length) {
                     position.set("eventStatus", values[index++]);
+                } else {
+                    index++;
+                }
+
+                // packetType
                 if (index < values.length) {
                     position.set("packetType", values[index++]);
+                } else {
+                    index++;
                 }
                 break;
             case "ETD":
+                if (index < values.length) {
                     position.set("eventData", values[index++]);
+                } else {
+                    index++;
+                }
                 break;
             case "OBD":
+                if (index < values.length) {
                     position.set("obd", values[index++]);
+                } else {
+                    index++;
+                }
                 break;
             case "TAG":
+                if (index < values.length) {
                     position.set("tagData", values[index++]);
+                } else {
+                    index++;
+                }
                 break;
             case "IWD":
                 while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
-                    if (dataType == 0) {
+                    // sensorIndex
+                    if (index < values.length && !values[index].isEmpty()) {
+                        int sensorIndex;
+                        try {
+                            sensorIndex = Integer.parseInt(values[index++]);
+                        } catch (NumberFormatException e) {
+                            // Malformed sensorIndex, try to skip this full block (e.g., sensorIndex, dataType, value(s))
+                            // A block is typically sensorIndex, dataType, then 1 or 2 more values.
+                            // Heuristically advance index past remaining fields of this block to attempt next.
+                            index++; // Advance past the current malformed field
+                            if (index < values.length) index++; // Advance past next expected field (dataType)
+                            if (index < values.length) index++; // Advance past next expected field (value)
+                            continue; // Try next IWD block
+                        }
+
+                        // dataType
+                        if (index < values.length && !values[index].isEmpty()) {
+                            int dataType;
+                            try {
+                                dataType = Integer.parseInt(values[index++]);
+                            } catch (NumberFormatException e) {
+                                // Malformed dataType, try to skip this block
+                                index++; // Advance past the current malformed field
+                                if (index < values.length) index++; // Advance past next expected field (value)
+                                continue;
+                            }
+
+                            if (dataType == 0) { // KEY_DRIVER_UNIQUE_ID
+                                // Driver ID
+                                if (index < values.length) {
                                     position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
-                    } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
+                                } else {
+                                    index++; // Consume missing field
+                                }
+                            } else if (dataType == 1) { // Temperature sensor
+                                // Temperature sensor serial number
+                                if (index < values.length) {
+                                    index++; // Consume serial number string
+                                } else {
+                                    index++; // Consume missing field
+                                }
+                                // Temperature value
+                                if (index < values.length && !values[index].isEmpty()) {
+                                    try {
                                         position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                                    } catch (NumberFormatException e) {
+                                        index++; // Consume malformed field
+                                    }
+                                } else {
+                                    index++; // Consume missing/empty field
+                                }
+                            } else {
+                                // Unknown data type, assume it consumes one more field.
+                                if (index < values.length) {
+                                    index++;
+                                } else {
+                                    index++;
+                                }
+                            }
+                        } else { // dataType is missing or empty
+                            index++; // Consume missing/empty dataType
+                            // If dataType is missing, we don't know the structure, so skip a "value" field as heuristic
+                            if (index < values.length) {
+                                index++; // Consume potential value field
+                            } else {
+                                index++; // Consume missing value field
+                            }
+                        }
+                    } else { // sensorIndex is missing or empty. This implies end of IWD data or malformed block start.
+                        index++; // consume missing/empty sensor index
+                        break; // Stop processing IWD fragment
                     }
                 }
                 break;
             default:
                 break;
         }
     }
\ No newline at end of file
