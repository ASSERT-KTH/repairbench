diff --git a/tmp/b7b506d2-7040-464d-b5d6-7cac6c2a7876_buggy.java b/tmp/b51b041b-6390-4526-a601-a7b8bace896a_fixed.java
index ad77f15..c13f844 100644
--- a/tmp/b7b506d2-7040-464d-b5d6-7cac6c2a7876_buggy.java
+++ b/tmp/b51b041b-6390-4526-a601-a7b8bace896a_fixed.java
@@ -1,112 +1,311 @@
     private void decodeFragment(Position position, String fragment) {
 
         int dataIndex = fragment.indexOf(':');
         int index = 0;
         String[] values;
         if (fragment.length() == dataIndex + 1) {
             values = new String[0];
         } else {
             values = fragment.substring(dataIndex + 1).split(";");
         }
 
         switch (fragment.substring(0, dataIndex)) {
             case "GPS":
+                // Valid field
+                if (index < values.length) {
                     position.setValid(values[index++].equals("A"));
+                } else {
+                    index++; // Consume empty/missing slot
+                }
+
+                // Satellites
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+                } else {
+                    index++; // Consume empty/missing slot
+                }
+
+                // Latitude
+                String latValue = "";
+                if (index < values.length) {
+                    latValue = values[index++];
+                } else {
+                    index++; // Consume empty/missing slot
+                }
+                if (!latValue.isEmpty() && latValue.length() > 1) {
+                    position.setLatitude(Double.parseDouble(latValue.substring(1)));
+                    if (latValue.charAt(0) == 'S') {
                         position.setLatitude(-position.getLatitude());
                     }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                }
+
+                // Longitude
+                String lonValue = "";
+                if (index < values.length) {
+                    lonValue = values[index++];
+                } else {
+                    index++; // Consume empty/missing slot
+                }
+                if (!lonValue.isEmpty() && lonValue.length() > 1) {
+                    position.setLongitude(Double.parseDouble(lonValue.substring(1)));
+                    if (lonValue.charAt(0) == 'W') {
                         position.setLongitude(-position.getLongitude());
                     }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
                 }
+
+                // Speed
+                String speedValue = "";
+                if (index < values.length) {
+                    speedValue = values[index++];
+                } else {
+                    index++; // Consume empty/missing slot
+                }
+                if (!speedValue.isEmpty()) {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedValue)));
+                }
+
+                // Course
+                if (index < values.length && !values[index].isEmpty()) {
                     position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
+                } else {
+                    index++; // Consume empty/missing slot
+                }
+
+                // Altitude
+                if (index < values.length && !values[index].isEmpty()) {
                     position.setAltitude(Integer.parseInt(values[index++]));
+                } else {
+                    index++; // Consume empty/missing slot
                 }
-                if (index < values.length) {
+
+                // HDOP
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                } else {
+                    index++; // Consume empty/missing slot
                 }
-                if (index < values.length) {
+
+                // VDOP
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                } else {
+                    index++; // Consume empty/missing slot
                 }
                 break;
+
             case "GSM":
                 index += 1; // registration status
                 index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+
+                int mcc = 0;
+                if (index < values.length && !values[index].isEmpty()) {
+                    mcc = Integer.parseInt(values[index++]);
+                } else {
+                    index++;
+                }
+
+                int mnc = 0;
+                if (index < values.length && !values[index].isEmpty()) {
+                    mnc = Integer.parseInt(values[index++]);
+                } else {
+                    index++;
+                }
+
+                int lac = 0;
+                if (index < values.length && !values[index].isEmpty()) {
+                    lac = Integer.parseInt(values[index++], 16);
+                } else {
+                    index++;
+                }
+
+                int cid = 0;
+                if (index < values.length && !values[index].isEmpty()) {
+                    cid = Integer.parseInt(values[index++], 16);
+                } else {
+                    index++;
+                }
+
+                int rssi = 0;
+                if (index < values.length && !values[index].isEmpty()) {
+                    rssi = Integer.parseInt(values[index++]);
+                } else {
+                    index++;
+                }
+                position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));
                 break;
+
             case "COT":
                 if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                    String odometerValue = values[index++];
+                    if (!odometerValue.isEmpty()) {
+                        position.set(Position.KEY_ODOMETER, Long.parseLong(odometerValue));
+                    }
                 }
                 if (index < values.length) {
-                    String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                    String hoursValue = values[index++];
+                    if (!hoursValue.isEmpty()) {
+                        String[] hours = hoursValue.split("-");
+                        int h = 0;
+                        if (hours.length > 0 && !hours[0].isEmpty()) { // Check hours[0] specifically
+                            h = Integer.parseInt(hours[0]);
+                        }
+                        int m = 0;
+                        if (hours.length > 1 && !hours[1].isEmpty()) {
+                            m = Integer.parseInt(hours[1]);
+                        }
+                        int s = 0;
+                        if (hours.length > 2 && !hours[2].isEmpty()) {
+                            s = Integer.parseInt(hours[2]);
+                        }
+                        position.set(Position.KEY_HOURS, (h * 3600L + m * 60 + s) * 1000); // Changed to 3600L to prevent overflow
+                    }
                 }
                 break;
+
             case "ADC":
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
+                } else {
+                    index++;
+                }
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                } else {
+                    index++;
                 }
-                if (index < values.length) {
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                } else {
+                    index++;
                 }
-                if (index < values.length) {
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                } else {
+                    index++;
                 }
                 break;
+
             case "DTT":
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                } else {
+                    index++;
+                }
+
+                String ioValue = "";
+                if (index < values.length) {
+                    ioValue = values[index++];
+                } else {
+                    index++; // Consume empty/missing slot
+                }
+                if (!ioValue.isEmpty()) {
+                    int io = Integer.parseInt(ioValue, 16);
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                 }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+                if (index < values.length) { // Geofence value can be empty, but needs to be consumed
+                    String geofence1 = values[index++];
+                    String geofence2 = "";
+                    if (index < values.length) {
+                        geofence2 = values[index++];
+                    } else {
+                        index++; // Consume empty/missing slot
+                    }
+                    position.set(Position.KEY_GEOFENCE, geofence1 + geofence2);
+                } else {
+                    // Consume two slots even if missing
+                    index += 2;
+                }
+
+                if (index < values.length) {
                     position.set("eventStatus", values[index++]);
+                } else {
+                    index++; // Consume empty/missing slot
+                }
                 if (index < values.length) {
                     position.set("packetType", values[index++]);
+                } else {
+                    index++; // Consume empty/missing slot
                 }
                 break;
+
             case "ETD":
+                if (index < values.length) { // Added check for ArrayIndexOutOfBoundsException
                     position.set("eventData", values[index++]);
+                } else {
+                    index++;
+                }
                 break;
+
             case "OBD":
+                if (index < values.length) { // Added check for ArrayIndexOutOfBoundsException
                     position.set("obd", values[index++]);
+                } else {
+                    index++;
+                }
                 break;
+
             case "TAG":
+                if (index < values.length) { // Added check for ArrayIndexOutOfBoundsException
                     position.set("tagData", values[index++]);
+                } else {
+                    index++;
+                }
                 break;
+
             case "IWD":
-                while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+                while (index + 1 < values.length) { // Ensure at least sensorIndex and dataType are available
+                    String sensorIndexValue = values[index];
+                    int sensorIndex = -1;
+                    if (!sensorIndexValue.isEmpty()) {
+                        sensorIndex = Integer.parseInt(sensorIndexValue);
+                    }
+                    index++; // Always consume sensorIndex whether parsed or not
+
+                    String dataTypeValue = values[index];
+                    int dataType = -1;
+                    if (!dataTypeValue.isEmpty()) {
+                        dataType = Integer.parseInt(dataTypeValue);
+                    }
+                    index++; // Always consume dataType whether parsed or not
+
+                    if (sensorIndex != -1 && dataType != -1) { // Only proceed if both parsed successfully
                         if (dataType == 0) {
+                            if (index < values.length) {
                                 position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                            } else {
+                                // Missing driver ID, break the loop as pair is incomplete
+                                break;
+                            }
                         } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
+                            if (index < values.length) { // serial number field. Consume it.
+                                index += 1;
+                            } else {
+                                break; // Missing serial number
+                            }
+
+                            if (index < values.length && !values[index].isEmpty()) { // temperature value
                                 position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                            } else {
+                                if (index < values.length) { // If value is empty, consume it
+                                    index++;
+                                }
+                                // If missing, index is already at end, so it's fine.
+                            }
+                        }
+                    } else {
+                        // If sensorIndex or dataType was unparseable/empty, they've been consumed.
+                        // Continue loop to check for next pair.
                     }
                 }
                 break;
             default:
                 break;
         }
     }
\ No newline at end of file
