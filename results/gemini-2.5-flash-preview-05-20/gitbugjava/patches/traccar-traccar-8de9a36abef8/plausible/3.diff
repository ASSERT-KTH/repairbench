diff --git a/tmp/179bebfa-0463-428d-95f2-dfc6822e7511_buggy.java b/tmp/29d190ce-3ca3-47bb-a57f-11506d4a70cf_fixed.java
index ad77f15..848199b 100644
--- a/tmp/179bebfa-0463-428d-95f2-dfc6822e7511_buggy.java
+++ b/tmp/29d190ce-3ca3-47bb-a57f-11506d4a70cf_fixed.java
@@ -1,112 +1,225 @@
     private void decodeFragment(Position position, String fragment) {
 
         int dataIndex = fragment.indexOf(':');
         int index = 0;
         String[] values;
         if (fragment.length() == dataIndex + 1) {
             values = new String[0];
         } else {
-            values = fragment.substring(dataIndex + 1).split(";");
+            // Use -1 as limit to ensure trailing empty strings are not discarded
+            values = fragment.substring(dataIndex + 1).split(";", -1);
         }
 
         switch (fragment.substring(0, dataIndex)) {
             case "GPS":
                 position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+
+                String satellitesString = values[index++];
+                if (!satellitesString.isEmpty()) {
+                    position.set(Position.KEY_SATELLITES, Integer.parseInt(satellitesString));
+                }
+
+                String latitudeValue = values[index++];
+                if (!latitudeValue.isEmpty()) {
+                    position.setLatitude(Double.parseDouble(latitudeValue.substring(1)));
+                    if (latitudeValue.charAt(0) == 'S') {
                         position.setLatitude(-position.getLatitude());
                     }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                }
+
+                String longitudeValue = values[index++];
+                if (!longitudeValue.isEmpty()) {
+                    position.setLongitude(Double.parseDouble(longitudeValue.substring(1)));
+                    if (longitudeValue.charAt(0) == 'W') {
                         position.setLongitude(-position.getLongitude());
                     }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
                 }
-                position.setCourse(Integer.parseInt(values[index++]));
+
+                String speedString = values[index++];
+                if (!speedString.isEmpty()) {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedString)));
+                }
+
+                String courseString = values[index++];
+                if (!courseString.isEmpty()) {
+                    position.setCourse(Integer.parseInt(courseString));
+                }
+
                 if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                    String altitudeString = values[index++];
+                    if (!altitudeString.isEmpty()) {
+                        position.setAltitude(Integer.parseInt(altitudeString));
+                    }
                 }
                 if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                    String hdopString = values[index++];
+                    if (!hdopString.isEmpty()) {
+                        position.set(Position.KEY_HDOP, Double.parseDouble(hdopString));
+                    }
                 }
                 if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                    String vdopString = values[index++];
+                    if (!vdopString.isEmpty()) {
+                        position.set(Position.KEY_VDOP, Double.parseDouble(vdopString));
+                    }
                 }
                 break;
             case "GSM":
                 index += 1; // registration status
                 index += 1; // signal strength
                 position.setNetwork(new Network(CellTower.from(
                         Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
                         Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
                         Integer.parseInt(values[index++]))));
                 break;
             case "COT":
                 if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                    String odometerString = values[index++];
+                    if (!odometerString.isEmpty()) {
+                        position.set(Position.KEY_ODOMETER, Long.parseLong(odometerString));
+                    }
                 }
                 if (index < values.length) {
-                    String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                    String hoursString = values[index++];
+                    if (!hoursString.isEmpty()) {
+                        String[] hours = hoursString.split("-");
+                        int totalSeconds = 0;
+                        if (hours.length > 0 && !hours[0].isEmpty()) {
+                            totalSeconds += Integer.parseInt(hours[0]) * 3600;
+                        }
+                        if (hours.length > 1 && !hours[1].isEmpty()) {
+                            totalSeconds += Integer.parseInt(hours[1]) * 60;
+                        }
+                        if (hours.length > 2 && !hours[2].isEmpty()) {
+                            totalSeconds += Integer.parseInt(hours[2]);
+                        }
+                        position.set(Position.KEY_HOURS, (long) totalSeconds * 1000);
+                    }
                 }
                 break;
             case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
+                if (index < values.length) { // Added check, as this was implicitly mandatory
+                    String powerString = values[index++];
+                    if (!powerString.isEmpty()) {
+                        position.set(Position.KEY_POWER, Double.parseDouble(powerString));
+                    }
+                }
                 if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                    String batteryString = values[index++];
+                    if (!batteryString.isEmpty()) {
+                        position.set(Position.KEY_BATTERY, Double.parseDouble(batteryString));
+                    }
                 }
                 if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                    String adc1String = values[index++];
+                    if (!adc1String.isEmpty()) {
+                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1String));
+                    }
                 }
                 if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                    String adc2String = values[index++];
+                    if (!adc2String.isEmpty()) {
+                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2String));
+                    }
                 }
                 break;
             case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                if (index < values.length) { // Added check
+                    String statusString = values[index++];
+                    if (!statusString.isEmpty()) {
+                        position.set(Position.KEY_STATUS, Integer.parseInt(statusString, 16));
+                    }
+                }
+                if (index < values.length) {
+                    String ioString = values[index++];
+                    if (!ioString.isEmpty()) {
+                        int io = Integer.parseInt(ioString, 16);
                         position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                         position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                         position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                         position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                         position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                         position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                         position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                         position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                     }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+                }
+                String geoValue = "";
+                if (index < values.length) {
+                    geoValue += values[index++];
+                }
+                if (index < values.length) {
+                    geoValue += values[index++];
+                }
+                if (!geoValue.isEmpty()) {
+                    position.set(Position.KEY_GEOFENCE, geoValue);
+                }
+                if (index < values.length) { // Added check
                     position.set("eventStatus", values[index++]);
+                }
                 if (index < values.length) {
                     position.set("packetType", values[index++]);
                 }
                 break;
             case "ETD":
+                if (index < values.length) { // Added check
                     position.set("eventData", values[index++]);
+                }
                 break;
             case "OBD":
+                if (index < values.length) { // Added check
                     position.set("obd", values[index++]);
+                }
                 break;
             case "TAG":
+                if (index < values.length) { // Added check
                     position.set("tagData", values[index++]);
+                }
                 break;
             case "IWD":
                 while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+                    if (index + 1 >= values.length) { // Need at least sensorIndex and dataType
+                        break;
+                    }
+                    String sensorIndexString = values[index++];
+                    if (sensorIndexString.isEmpty()) {
+                        index++; // Skip dataType if sensorIndex is empty/invalid
+                        continue;
+                    }
+                    int sensorIndex = Integer.parseInt(sensorIndexString);
+
+                    String dataTypeString = values[index++];
+                    if (dataTypeString.isEmpty()) {
+                        continue;
+                    }
+                    int dataType = Integer.parseInt(dataTypeString);
+
                     if (dataType == 0) {
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                        if (index < values.length) {
+                            String driverId = values[index++];
+                            if (!driverId.isEmpty()) {
+                                position.set(Position.KEY_DRIVER_UNIQUE_ID, driverId);
+                            }
+                        }
                     } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                        if (index + 1 >= values.length) { // Need serial number and temperature value
+                            break;
+                        }
+                        index += 1; // skip temperature sensor serial number
+                        String temperatureString = values[index++];
+                        if (!temperatureString.isEmpty()) {
+                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(temperatureString));
+                        }
+                    } else {
+                        // Skip any unknown data type values to prevent infinite loop
+                        // Assuming each unknown type consumes one value after dataType
+                        if (index < values.length) {
+                            index++;
+                        }
                     }
                 }
                 break;
             default:
                 break;
         }
     }
\ No newline at end of file
