diff --git a/tmp/e8705a29-4dd7-4077-a424-7366ddfa7558_buggy.java b/tmp/83ab0a87-0958-4039-8d85-00edc6b34048_fixed.java
index ad77f15..e2341d9 100644
--- a/tmp/e8705a29-4dd7-4077-a424-7366ddfa7558_buggy.java
+++ b/tmp/83ab0a87-0958-4039-8d85-00edc6b34048_fixed.java
@@ -1,112 +1,236 @@
     private void decodeFragment(Position position, String fragment) {
 
         int dataIndex = fragment.indexOf(':');
         int index = 0;
         String[] values;
         if (fragment.length() == dataIndex + 1) {
             values = new String[0];
         } else {
             values = fragment.substring(dataIndex + 1).split(";");
         }
 
         switch (fragment.substring(0, dataIndex)) {
             case "GPS":
                 position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+                
+                String satellitesString = values[index++];
+                if (!satellitesString.isEmpty()) {
+                    position.set(Position.KEY_SATELLITES, Integer.parseInt(satellitesString));
+                }
+
+                String latitudeValue = values[index]; // Don't increment yet
+                if (!latitudeValue.isEmpty()) {
+                    position.setLatitude(Double.parseDouble(latitudeValue.substring(1)));
+                }
+                if (values[index++].charAt(0) == 'S') { // Increment here
                     position.setLatitude(-position.getLatitude());
                 }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+
+                String longitudeValue = values[index]; // Don't increment yet
+                if (!longitudeValue.isEmpty()) {
+                    position.setLongitude(Double.parseDouble(longitudeValue.substring(1)));
+                }
+                if (values[index++].charAt(0) == 'W') { // Increment here
                     position.setLongitude(-position.getLongitude());
                 }
+
+                // Speed parsing already has an empty check and is fine
                 if (!values[index++].isEmpty()) {
                     position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
                 }
-                position.setCourse(Integer.parseInt(values[index++]));
+                
+                String courseString = values[index++];
+                if (!courseString.isEmpty()) {
+                    position.setCourse(Integer.parseInt(courseString));
+                }
+
                 if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                    String altitudeValue = values[index++];
+                    if (!altitudeValue.isEmpty()) {
+                        position.setAltitude(Integer.parseInt(altitudeValue));
+                    }
                 }
                 if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                    String hdopValue = values[index++];
+                    if (!hdopValue.isEmpty()) {
+                        position.set(Position.KEY_HDOP, Double.parseDouble(hdopValue));
+                    }
                 }
                 if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                    String vdopValue = values[index++];
+                    if (!vdopValue.isEmpty()) {
+                        position.set(Position.KEY_VDOP, Double.parseDouble(vdopValue));
+                    }
                 }
                 break;
             case "GSM":
                 index += 1; // registration status
                 index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                
+                int mcc = 0;
+                if (index < values.length) {
+                    String valMcc = values[index++];
+                    if (!valMcc.isEmpty()) mcc = Integer.parseInt(valMcc);
+                }
+
+                int mnc = 0;
+                if (index < values.length) {
+                    String valMnc = values[index++];
+                    if (!valMnc.isEmpty()) mnc = Integer.parseInt(valMnc);
+                }
+
+                int lac = 0;
+                if (index < values.length) {
+                    String valLac = values[index++];
+                    if (!valLac.isEmpty()) lac = Integer.parseInt(valLac, 16);
+                }
+
+                int cid = 0;
+                if (index < values.length) {
+                    String valCid = values[index++];
+                    if (!valCid.isEmpty()) cid = Integer.parseInt(valCid, 16);
+                }
+
+                int rssi = 0;
+                if (index < values.length) {
+                    String valRssi = values[index++];
+                    if (!valRssi.isEmpty()) {
+                        rssi = Integer.parseInt(valRssi);
+                    }
+                }
+                
+                position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));
                 break;
             case "COT":
                 if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                    String odometerValue = values[index++];
+                    if (!odometerValue.isEmpty()) {
+                        position.set(Position.KEY_ODOMETER, Long.parseLong(odometerValue));
+                    }
                 }
                 if (index < values.length) {
-                    String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                    String hoursString = values[index++];
+                    if (!hoursString.isEmpty()) {
+                        String[] hours = hoursString.split("-");
+                        int totalSeconds = 0;
+                        if (hours.length > 0 && !hours[0].isEmpty()) {
+                            totalSeconds += Integer.parseInt(hours[0]) * 3600;
+                        }
+                        if (hours.length > 1 && !hours[1].isEmpty()) {
+                            totalSeconds += Integer.parseInt(hours[1]) * 60;
+                        }
+                        if (hours.length > 2 && !hours[2].isEmpty()) {
+                            totalSeconds += Integer.parseInt(hours[2]);
+                        }
+                        position.set(Position.KEY_HOURS, (long) totalSeconds * 1000);
+                    }
                 }
                 break;
             case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
                 if (index < values.length) { 
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                    String powerValue = values[index++];
+                    if (!powerValue.isEmpty()) {
+                        position.set(Position.KEY_POWER, Double.parseDouble(powerValue));
+                    }
+                }
+
+                if (index < values.length) {
+                    String batteryValue = values[index++];
+                    if (!batteryValue.isEmpty()) {
+                        position.set(Position.KEY_BATTERY, Double.parseDouble(batteryValue));
+                    }
                 }
                 if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                    String adc1Value = values[index++];
+                    if (!adc1Value.isEmpty()) {
+                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1Value));
+                    }
                 }
                 if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                    String adc2Value = values[index++];
+                    if (!adc2Value.isEmpty()) {
+                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2Value));
+                    }
                 }
                 break;
             case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                String statusString = values[index++];
+                if (!statusString.isEmpty()) {
+                    position.set(Position.KEY_STATUS, Integer.parseInt(statusString, 16));
+                }
+
+                if (index < values.length && !values[index].isEmpty()) {
+                    String ioValue = values[index++];
+                    int io = Integer.parseInt(ioValue, 16);
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
+                } else if (index < values.length) { // consume the empty string if it exists
+                    index++;
                 }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+
+                String geofencePart1 = values[index++];
+                String geofencePart2 = values[index++];
+                position.set(Position.KEY_GEOFENCE, geofencePart1 + geofencePart2);
+
                 position.set("eventStatus", values[index++]);
                 if (index < values.length) {
                     position.set("packetType", values[index++]);
                 }
                 break;
             case "ETD":
                 position.set("eventData", values[index++]);
                 break;
             case "OBD":
                 position.set("obd", values[index++]);
                 break;
             case "TAG":
                 position.set("tagData", values[index++]);
                 break;
             case "IWD":
                 while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+                    String sensorIndexString = values[index++];
+                    if (sensorIndexString.isEmpty()) {
+                        break;
+                    }
+                    int sensorIndex = Integer.parseInt(sensorIndexString);
+
+                    if (index >= values.length) {
+                        break;
+                    }
+                    String dataTypeString = values[index++];
+                    if (dataTypeString.isEmpty()) {
+                        break;
+                    }
+                    int dataType = Integer.parseInt(dataTypeString);
+
                     if (dataType == 0) {
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                        if (index >= values.length) {
+                            break;
+                        }
+                        index++;
                     } else if (dataType == 1) {
+                        if (index >= values.length) {
+                            break;
+                        }
                         index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                        
+                        if (index >= values.length) {
+                            break;
+                        }
+                        String tempValue = values[index++];
+                        if (!tempValue.isEmpty()) {
+                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(tempValue));
+                        }
                     }
                 }
                 break;
             default:
                 break;
         }
     }
\ No newline at end of file
