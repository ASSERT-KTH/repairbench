diff --git a/tmp/a4d208c6-d217-4923-a257-94fc624277f2_buggy.java b/tmp/03a548aa-7149-4f7c-bcf4-94539bfdb474_fixed.java
index ad77f15..214ecec 100644
--- a/tmp/a4d208c6-d217-4923-a257-94fc624277f2_buggy.java
+++ b/tmp/03a548aa-7149-4f7c-bcf4-94539bfdb474_fixed.java
@@ -1,112 +1,250 @@
     private void decodeFragment(Position position, String fragment) {
 
         int dataIndex = fragment.indexOf(':');
         int index = 0;
         String[] values;
         if (fragment.length() == dataIndex + 1) {
             values = new String[0];
         } else {
             values = fragment.substring(dataIndex + 1).split(";");
         }
 
         switch (fragment.substring(0, dataIndex)) {
             case "GPS":
+                // Valid
+                if (index < values.length) {
                     position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+                }
+
+                // Satellites
+                if (index < values.length) {
+                    String satellites = values[index++];
+                    if (!satellites.isEmpty()) {
+                        position.set(Position.KEY_SATELLITES, Integer.parseInt(satellites));
+                    }
+                }
+
+                // Latitude
+                if (index < values.length) {
+                    String latitude = values[index++];
+                    if (!latitude.isEmpty() && latitude.length() > 1) { // Check length for substring(1)
+                        position.setLatitude(Double.parseDouble(latitude.substring(1)));
+                        if (latitude.charAt(0) == 'S') {
                             position.setLatitude(-position.getLatitude());
                         }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                    }
+                }
+
+                // Longitude
+                if (index < values.length) {
+                    String longitude = values[index++];
+                    if (!longitude.isEmpty() && longitude.length() > 1) { // Check length for substring(1)
+                        position.setLongitude(Double.parseDouble(longitude.substring(1)));
+                        if (longitude.charAt(0) == 'W') {
                             position.setLongitude(-position.getLongitude());
                         }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
                     }
-                position.setCourse(Integer.parseInt(values[index++]));
+                }
+
+                // Speed
+                if (index < values.length) {
+                    String speed = values[index++];
+                    if (!speed.isEmpty()) {
+                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speed)));
+                    }
+                }
+
+                // Course
+                if (index < values.length) {
+                    String course = values[index++];
+                    if (!course.isEmpty()) {
+                        position.setCourse(Integer.parseInt(course));
+                    }
+                }
+
+                // Altitude
                 if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                    String altitude = values[index++];
+                    if (!altitude.isEmpty()) {
+                        position.setAltitude(Integer.parseInt(altitude));
+                    }
                 }
+
+                // HDOP
                 if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                    String hdop = values[index++];
+                    if (!hdop.isEmpty()) {
+                        position.set(Position.KEY_HDOP, Double.parseDouble(hdop));
                     }
+                }
+
+                // VDOP
                 if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                    String vdop = values[index++];
+                    if (!vdop.isEmpty()) {
+                        position.set(Position.KEY_VDOP, Double.parseDouble(vdop));
+                    }
                 }
                 break;
             case "GSM":
                 index += 1; // registration status
                 index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+
+                int mcc = 0, mnc = 0, lac = 0, cid = 0, psc = 0;
+                if (index < values.length) {
+                    String val = values[index++];
+                    if (!val.isEmpty()) mcc = Integer.parseInt(val);
+                }
+                if (index < values.length) {
+                    String val = values[index++];
+                    if (!val.isEmpty()) mnc = Integer.parseInt(val);
+                }
+                if (index < values.length) {
+                    String val = values[index++];
+                    if (!val.isEmpty()) lac = Integer.parseInt(val, 16);
+                }
+                if (index < values.length) {
+                    String val = values[index++];
+                    if (!val.isEmpty()) cid = Integer.parseInt(val, 16);
+                }
+                if (index < values.length) {
+                    String val = values[index++];
+                    if (!val.isEmpty()) psc = Integer.parseInt(val);
+                }
+                position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, psc)));
                 break;
             case "COT":
                 if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                    String odometer = values[index++];
+                    if (!odometer.isEmpty()) {
+                        position.set(Position.KEY_ODOMETER, Long.parseLong(odometer));
+                    }
                 }
                 if (index < values.length) {
-                    String[] hours = values[index].split("-");
+                    String hoursString = values[index++];
+                    if (!hoursString.isEmpty()) {
+                        String[] hours = hoursString.split("-");
                         position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
                                 + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
                                 + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
                     }
+                }
                 break;
             case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
                 if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                    String power = values[index++];
+                    if (!power.isEmpty()) {
+                        position.set(Position.KEY_POWER, Double.parseDouble(power));
+                    }
+                }
+                if (index < values.length) {
+                    String battery = values[index++];
+                    if (!battery.isEmpty()) {
+                        position.set(Position.KEY_BATTERY, Double.parseDouble(battery));
+                    }
                 }
                 if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                    String adc1 = values[index++];
+                    if (!adc1.isEmpty()) {
+                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1));
+                    }
                 }
                 if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                    String adc2 = values[index++];
+                    if (!adc2.isEmpty()) {
+                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2));
+                    }
                 }
                 break;
             case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                if (index < values.length) {
+                    String status = values[index++];
+                    if (!status.isEmpty()) {
+                        position.set(Position.KEY_STATUS, Integer.parseInt(status, 16));
+                    }
+                }
+                if (index < values.length) {
+                    String ioString = values[index++];
+                    if (!ioString.isEmpty()) {
+                        int io = Integer.parseInt(ioString, 16);
                         position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                         position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                         position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                         position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                         position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                         position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                         position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                         position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                     }
+                }
+                // KEY_GEOFENCE expects two concatenated values, so only check for bounds
+                if (index + 1 < values.length) {
                     position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+                } else if (index < values.length) { // handle case where only one part is present
+                    position.set(Position.KEY_GEOFENCE, values[index++]);
+                }
+
+                if (index < values.length) {
                     position.set("eventStatus", values[index++]);
+                }
                 if (index < values.length) {
                     position.set("packetType", values[index++]);
                 }
                 break;
             case "ETD":
+                if (index < values.length) {
                     position.set("eventData", values[index++]);
+                }
                 break;
             case "OBD":
+                if (index < values.length) {
                     position.set("obd", values[index++]);
+                }
                 break;
             case "TAG":
+                if (index < values.length) {
                     position.set("tagData", values[index++]);
+                }
                 break;
             case "IWD":
                 while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+                    int sensorIndex = -1; // Default or indicate not parsed
+                    if (index < values.length) { // Sensor Index
+                        String val = values[index++];
+                        if (!val.isEmpty()) sensorIndex = Integer.parseInt(val);
+                    } else { // Should not happen if loop condition is met and parsing is strict
+                        break;
+                    }
+
+                    int dataType = -1; // Default or indicate not parsed
+                    if (index < values.length) { // Data Type
+                        String val = values[index++];
+                        if (!val.isEmpty()) dataType = Integer.parseInt(val);
+                    } else { // Should not happen
+                        break;
+                    }
+
                     if (dataType == 0) {
+                        if (index < values.length) {
                             position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                        }
                     } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                        index += 1; // temperature sensor serial number (skip)
+                        if (sensorIndex != -1 && index < values.length) { // Only set if sensorIndex was parsed
+                            String temperature = values[index++];
+                            if (!temperature.isEmpty()) {
+                                position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(temperature));
+                            }
+                        }
+                    } else {
+                        // If data type is unknown, consume the field to avoid infinite loop
+                        if (index < values.length) {
+                             index++;
+                        }
                     }
                 }
                 break;
             default:
                 break;
         }
     }
\ No newline at end of file
