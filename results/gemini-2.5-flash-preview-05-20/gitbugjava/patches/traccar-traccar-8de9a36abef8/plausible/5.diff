diff --git a/tmp/a16c03c2-3b4d-4d7e-8671-07ce3768fec9_buggy.java b/tmp/b3041e90-e0fe-43af-b71f-12730ee562e9_fixed.java
index ad77f15..0a04080 100644
--- a/tmp/a16c03c2-3b4d-4d7e-8671-07ce3768fec9_buggy.java
+++ b/tmp/b3041e90-e0fe-43af-b71f-12730ee562e9_fixed.java
@@ -1,112 +1,166 @@
     private void decodeFragment(Position position, String fragment) {
 
         int dataIndex = fragment.indexOf(':');
         int index = 0;
         String[] values;
         if (fragment.length() == dataIndex + 1) {
             values = new String[0];
         } else {
             values = fragment.substring(dataIndex + 1).split(";");
         }
 
         switch (fragment.substring(0, dataIndex)) {
             case "GPS":
                 position.setValid(values[index++].equals("A"));
                 position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
                 position.setLatitude(Double.parseDouble(values[index].substring(1)));
                 if (values[index++].charAt(0) == 'S') {
                     position.setLatitude(-position.getLatitude());
                 }
                 position.setLongitude(Double.parseDouble(values[index].substring(1)));
                 if (values[index++].charAt(0) == 'W') {
                     position.setLongitude(-position.getLongitude());
                 }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                // Fix: Check if speed value is empty before parsing
+                String speedValue = values[index++];
+                if (!speedValue.isEmpty()) {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedValue)));
                 }
                 position.setCourse(Integer.parseInt(values[index++]));
+                // Fix: Check if altitude value exists and is not empty before parsing
                 if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                    String altitudeValue = values[index++];
+                    if (!altitudeValue.isEmpty()) {
+                        position.setAltitude(Integer.parseInt(altitudeValue));
                     }
+                }
+                // Fix: Check if HDOP value exists and is not empty before parsing
                 if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                    String hdopValue = values[index++];
+                    if (!hdopValue.isEmpty()) {
+                        position.set(Position.KEY_HDOP, Double.parseDouble(hdopValue));
+                    }
                 }
+                // Fix: Check if VDOP value exists and is not empty before parsing
                 if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                    String vdopValue = values[index++];
+                    if (!vdopValue.isEmpty()) {
+                        position.set(Position.KEY_VDOP, Double.parseDouble(vdopValue));
+                    }
                 }
                 break;
             case "GSM":
                 index += 1; // registration status
                 index += 1; // signal strength
                 position.setNetwork(new Network(CellTower.from(
                         Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
                         Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
                         Integer.parseInt(values[index++]))));
                 break;
             case "COT":
+                // Fix: Check if odometer value exists and is not empty before parsing
                 if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                    String odometerValue = values[index++];
+                    if (!odometerValue.isEmpty()) {
+                        position.set(Position.KEY_ODOMETER, Long.parseLong(odometerValue));
                     }
+                }
+                // Fix: Check if hours value exists and is not empty before parsing
                 if (index < values.length) {
-                    String[] hours = values[index].split("-");
+                    String hoursValue = values[index++];
+                    if (!hoursValue.isEmpty()) {
+                        String[] hours = hoursValue.split("-");
                         position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
                                 + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
                                 + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
                     }
+                }
                 break;
             case "ADC":
+                // KEY_POWER is assumed to be always present and non-empty from test data
                 position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
+                // Fix: Check if battery value exists and is not empty before parsing
                 if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                    String batteryValue = values[index++];
+                    if (!batteryValue.isEmpty()) {
+                        position.set(Position.KEY_BATTERY, Double.parseDouble(batteryValue));
                     }
+                }
+                // Fix: Check if ADC + 1 value exists and is not empty before parsing
                 if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                    String adc1Value = values[index++];
+                    if (!adc1Value.isEmpty()) {
+                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1Value));
+                    }
                 }
+                // Fix: Check if ADC + 2 value exists and is not empty before parsing
                 if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                    String adc2Value = values[index++];
+                    if (!adc2Value.isEmpty()) {
+                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2Value));
+                    }
                 }
                 break;
             case "DTT":
                 position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                // Fix: Check if io value is empty before parsing
+                String ioValue = values[index++];
+                if (!ioValue.isEmpty()) {
+                    int io = Integer.parseInt(ioValue, 16);
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                 }
                 position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
                 position.set("eventStatus", values[index++]);
                 if (index < values.length) {
                     position.set("packetType", values[index++]);
                 }
                 break;
             case "ETD":
                 position.set("eventData", values[index++]);
                 break;
             case "OBD":
                 position.set("obd", values[index++]);
                 break;
             case "TAG":
                 position.set("tagData", values[index++]);
                 break;
             case "IWD":
                 while (index < values.length) {
+                    // Assuming sensorIndex and dataType are always present and valid integers for a sensor entry.
+                    // If they could be empty, additional checks like !values[index].isEmpty() would be needed before parseInt.
+                    if (index + 1 >= values.length) { // Ensure enough elements for sensorIndex and dataType
+                        break; // Not enough data for a complete sensor entry
+                    }
                     int sensorIndex = Integer.parseInt(values[index++]);
                     int dataType = Integer.parseInt(values[index++]);
                     if (dataType == 0) {
+                        if (index < values.length) { // Check if driverId field exists
                             position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                        } else {
+                            break; // Not enough data for driver ID, break loop
+                        }
                     } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                        if (index + 1 < values.length) { // Need serial and temperature value
+                            index += 1; // skip temperature sensor serial number
+                            // Fix: Check if temperature value is empty before parsing
+                            String tempValue = values[index++];
+                            if (!tempValue.isEmpty()) {
+                                position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(tempValue));
+                            }
+                        } else {
+                            break; // Not enough data for temperature, break loop
+                        }
                     }
                 }
                 break;
             default:
                 break;
         }
     }
\ No newline at end of file
