diff --git a/tmp/75e66e3e-f1dc-44b8-8b69-8c640bf6781d_buggy.java b/tmp/fb7f11ad-ee74-46df-9eec-fc2a4851e67c_fixed.java
index ad77f15..698d3c2 100644
--- a/tmp/75e66e3e-f1dc-44b8-8b69-8c640bf6781d_buggy.java
+++ b/tmp/fb7f11ad-ee74-46df-9eec-fc2a4851e67c_fixed.java
@@ -1,112 +1,264 @@
     private void decodeFragment(Position position, String fragment) {
 
         int dataIndex = fragment.indexOf(':');
         int index = 0;
         String[] values;
         if (fragment.length() == dataIndex + 1) {
             values = new String[0];
         } else {
             values = fragment.substring(dataIndex + 1).split(";");
         }
 
         switch (fragment.substring(0, dataIndex)) {
             case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+                // Valid (A/V)
+                // Assuming this field is always present and non-empty.
+                if (index < values.length) {
+                    position.setValid(values[index].equals("A"));
+                }
+                index++;
+
+                // Satellites
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));
+                }
+                index++;
+
+                // Latitude
+                String latitudeValue = null;
+                if (index < values.length) {
+                    latitudeValue = values[index];
+                }
+                index++; // Advance index after consuming latitude string
+                if (latitudeValue != null && !latitudeValue.isEmpty()) { // Check if string is not null or empty
+                    position.setLatitude(Double.parseDouble(latitudeValue.substring(1)));
+                    if (latitudeValue.charAt(0) == 'S') {
                         position.setLatitude(-position.getLatitude());
                     }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                }
+
+                // Longitude
+                String longitudeValue = null;
+                if (index < values.length) {
+                    longitudeValue = values[index];
+                }
+                index++; // Advance index after consuming longitude string
+                if (longitudeValue != null && !longitudeValue.isEmpty()) { // Check if string is not null or empty
+                    position.setLongitude(Double.parseDouble(longitudeValue.substring(1)));
+                    if (longitudeValue.charAt(0) == 'W') {
                         position.setLongitude(-position.getLongitude());
                     }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
                 }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+
+                // Speed
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                index++;
+
+                // Course
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.setCourse(Integer.parseInt(values[index]));
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                index++;
+
+                // Altitude
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.setAltitude(Integer.parseInt(values[index]));
                 }
+                index++;
+
+                // HDOP
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));
+                }
+                index++;
+
+                // VDOP
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));
+                }
+                index++;
                 break;
             case "GSM":
                 index += 1; // registration status
                 index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+
+                int mcc = 0, mnc = 0, lac = 0, cid = 0, rssi = 0;
+                
+                if (index < values.length && !values[index].isEmpty()) {
+                    mcc = Integer.parseInt(values[index]);
+                }
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                    mnc = Integer.parseInt(values[index]);
+                }
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                    lac = Integer.parseInt(values[index], 16);
+                }
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                    cid = Integer.parseInt(values[index], 16);
+                }
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                    rssi = Integer.parseInt(values[index]);
+                }
+                index++;
+                position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));
                 break;
             case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                // Odometer
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));
                 }
-                if (index < values.length) {
+                index++;
+
+                // Hours
+                if (index < values.length && !values[index].isEmpty()) {
                     String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                    long totalSeconds = 0;
+                    if (hours.length > 0 && !hours[0].isEmpty()) {
+                        totalSeconds += Long.parseLong(hours[0]) * 3600L;
                     }
+                    if (hours.length > 1 && !hours[1].isEmpty()) {
+                        totalSeconds += Long.parseLong(hours[1]) * 60L;
+                    }
+                    if (hours.length > 2 && !hours[2].isEmpty()) {
+                        totalSeconds += Long.parseLong(hours[2]);
+                    }
+                    position.set(Position.KEY_HOURS, totalSeconds * 1000L);
+                }
+                index++;
                 break;
             case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                // Power
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set(Position.KEY_POWER, Double.parseDouble(values[index]));
                 }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                index++;
+
+                // Battery
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));
                 }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                index++;
+
+                // ADC1
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));
                 }
+                index++;
+
+                // ADC2
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));
+                }
+                index++;
                 break;
             case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                // Status
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));
+                }
+                index++;
+
+                // IO status
+                if (index < values.length) { // Check array bounds
+                    if (!values[index].isEmpty()) { // Then check if string is empty
+                        int io = Integer.parseInt(values[index], 16);
                         position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                         position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                         position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                         position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                         position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                         position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                         position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                         position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                     }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
+                }
+                index++;
+
+                // Geofence (concatenation of two fields)
+                String geofenceValue = "";
+                if (index < values.length) {
+                    geofenceValue += values[index];
+                }
+                index++;
+                if (index < values.length) {
+                    geofenceValue += values[index];
+                }
+                index++;
+                if (!geofenceValue.isEmpty()) { // Only set if the concatenated string is not empty
+                    position.set(Position.KEY_GEOFENCE, geofenceValue);
+                }
+
+                // Event Status
+                if (index < values.length) {
+                    position.set("eventStatus", values[index]);
+                }
+                index++;
+
+                // Packet Type
                 if (index < values.length) {
-                    position.set("packetType", values[index++]);
+                    position.set("packetType", values[index]);
                 }
+                index++;
                 break;
             case "ETD":
-                position.set("eventData", values[index++]);
+                if (index < values.length) {
+                    position.set("eventData", values[index]);
+                }
+                index++;
                 break;
             case "OBD":
-                position.set("obd", values[index++]);
+                if (index < values.length) {
+                    position.set("obd", values[index]);
+                }
+                index++;
                 break;
             case "TAG":
-                position.set("tagData", values[index++]);
+                if (index < values.length) {
+                    position.set("tagData", values[index]);
+                }
+                index++;
                 break;
             case "IWD":
-                while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+                while (index + 1 < values.length) { // Ensure at least sensorIndex and dataType are available
+                    int sensorIndex = 0;
+                    if (!values[index].isEmpty()) {
+                        sensorIndex = Integer.parseInt(values[index]);
+                    }
+                    index++;
+
+                    int dataType = -1; // Default to invalid type
+                    if (index < values.length && !values[index].isEmpty()) {
+                        dataType = Integer.parseInt(values[index]);
+                    }
+                    index++;
+
                     if (dataType == 0) {
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                        if (index < values.length) {
+                            position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index]);
+                        }
+                        index++;
                     } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                        index += 1; // Skip temperature sensor serial number field
+                        if (index < values.length && !values[index].isEmpty()) {
+                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index]));
+                        }
+                        index++;
+                    } else {
+                        // Unknown data type, consume the associated field to maintain index alignment for next iteration
+                        // Assuming unknown data type consumes one field after dataType
+                        if (index < values.length) {
+                            index++;
+                        }
                     }
                 }
                 break;
             default:
                 break;
         }
     }
\ No newline at end of file
