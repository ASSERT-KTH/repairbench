diff --git a/tmp/52451118-b551-488c-8ba9-e94b61c04cb0_buggy.java b/tmp/8705759e-82dc-49e9-a5c1-65a5903c0c6c_fixed.java
index ad77f15..cddcf6f 100644
--- a/tmp/52451118-b551-488c-8ba9-e94b61c04cb0_buggy.java
+++ b/tmp/8705759e-82dc-49e9-a5c1-65a5903c0c6c_fixed.java
@@ -1,112 +1,340 @@
     private void decodeFragment(Position position, String fragment) {
 
         int dataIndex = fragment.indexOf(':');
         int index = 0;
         String[] values;
         if (fragment.length() == dataIndex + 1) {
             values = new String[0];
         } else {
+            // Use -1 limit to keep trailing empty strings, which might be significant.
+            // However, the original split behavior handles `;;` into `["", ""]` correctly.
+            // The fix is more about checking individual elements for emptiness.
             values = fragment.substring(dataIndex + 1).split(";");
         }
 
         switch (fragment.substring(0, dataIndex)) {
             case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+                // First field: validity status ("A", "V", "L")
+                if (index < values.length) {
+                    String validity = values[index++];
+                    position.setValid(validity.equals("A"));
+                }
+
+                // Second field: Satellites
+                if (index < values.length) {
+                    String satellitesValue = values[index++];
+                    if (!satellitesValue.isEmpty()) {
+                        try {
+                            position.set(Position.KEY_SATELLITES, Integer.parseInt(satellitesValue));
+                        } catch (NumberFormatException e) {
+                            // Log or handle error if necessary, skip this field
+                        }
+                    }
+                }
+
+                // Third field: Latitude
+                if (index < values.length) {
+                    String latitudeRaw = values[index++];
+                    if (!latitudeRaw.isEmpty() && latitudeRaw.length() > 1) { // Ensure there's a sign and data
+                        try {
+                            position.setLatitude(Double.parseDouble(latitudeRaw.substring(1)));
+                            if (latitudeRaw.charAt(0) == 'S') {
                                 position.setLatitude(-position.getLatitude());
                             }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                        } catch (NumberFormatException e) {
+                            // Log or handle error
+                        }
+                    }
+                }
+
+                // Fourth field: Longitude
+                if (index < values.length) {
+                    String longitudeRaw = values[index++];
+                    if (!longitudeRaw.isEmpty() && longitudeRaw.length() > 1) { // Ensure there's a sign and data
+                        try {
+                            position.setLongitude(Double.parseDouble(longitudeRaw.substring(1)));
+                            if (longitudeRaw.charAt(0) == 'W') {
                                 position.setLongitude(-position.getLongitude());
                             }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                        } catch (NumberFormatException e) {
+                            // Log or handle error
                         }
-                position.setCourse(Integer.parseInt(values[index++]));
+                    }
+                }
+
+                // Fifth field: Speed
+                if (index < values.length) {
+                    String speedValue = values[index++];
+                    if (!speedValue.isEmpty()) {
+                        try {
+                            position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedValue)));
+                        } catch (NumberFormatException e) {
+                            // Log or handle error
+                        }
+                    }
+                }
+
+                // Sixth field: Course
+                if (index < values.length) {
+                    String courseValue = values[index++];
+                    if (!courseValue.isEmpty()) {
+                        try {
+                            position.setCourse(Integer.parseInt(courseValue));
+                        } catch (NumberFormatException e) {
+                            // Log or handle error
+                        }
+                    }
+                }
+
+                // Seventh field: Altitude (optional)
                 if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                    String altitudeValue = values[index++];
+                    if (!altitudeValue.isEmpty()) {
+                        try {
+                            position.setAltitude(Integer.parseInt(altitudeValue));
+                        } catch (NumberFormatException e) {
+                            // Log or handle error
+                        }
+                    }
                 }
+
+                // Eighth field: HDOP (optional)
                 if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                    String hdopValue = values[index++];
+                    if (!hdopValue.isEmpty()) {
+                        try {
+                            position.set(Position.KEY_HDOP, Double.parseDouble(hdopValue));
+                        } catch (NumberFormatException e) {
+                            // Log or handle error
                         }
+                    }
+                }
+
+                // Ninth field: VDOP (optional)
                 if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                    String vdopValue = values[index++];
+                    if (!vdopValue.isEmpty()) {
+                        try {
+                            position.set(Position.KEY_VDOP, Double.parseDouble(vdopValue));
+                        } catch (NumberFormatException e) {
+                            // Log or handle error
+                        }
+                    }
                 }
                 break;
             case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
+                index += 1; // registration status (skipped)
+                index += 1; // signal strength (skipped)
+
+                // CellTower fields: mcc, mnc, lac, cid, rsrp
+                if (index + 4 < values.length) { // Ensure all 5 values exist for CellTower.from
+                    String mcc = values[index++];
+                    String mnc = values[index++];
+                    String lac = values[index++];
+                    String cid = values[index++];
+                    String rsrp = values[index++];
+
+                    if (!mcc.isEmpty() && !mnc.isEmpty() && !lac.isEmpty() && !cid.isEmpty() && !rsrp.isEmpty()) {
+                        try {
                             position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                                    Integer.parseInt(mcc),
+                                    Integer.parseInt(mnc),
+                                    Integer.parseInt(lac, 16),
+                                    Integer.parseInt(cid, 16),
+                                    Integer.parseInt(rsrp))));
+                        } catch (NumberFormatException e) {
+                            // Log or handle error
+                        }
+                    }
+                }
                 break;
             case "COT":
+                // Odometer
                 if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                    String odometerValue = values[index++];
+                    if (!odometerValue.isEmpty()) {
+                        try {
+                            position.set(Position.KEY_ODOMETER, Long.parseLong(odometerValue));
+                        } catch (NumberFormatException e) {
+                            // Log or handle error
                         }
+                    }
+                }
+
+                // Hours (can be "HH-MM-SS" or empty/single part)
                 if (index < values.length) {
-                    String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                    String hoursValue = values[index++]; // Get the value and increment index
+                    if (!hoursValue.isEmpty()) { // Only process if the string is not empty
+                        String[] hours = hoursValue.split("-");
+                        if (hours.length > 0 && !hours[0].isEmpty()) { // Check if the first part exists and is not empty
+                            try {
+                                long totalSeconds = (long) Integer.parseInt(hours[0]) * 3600;
+                                if (hours.length > 1 && !hours[1].isEmpty()) {
+                                    totalSeconds += (long) Integer.parseInt(hours[1]) * 60;
+                                }
+                                if (hours.length > 2 && !hours[2].isEmpty()) {
+                                    totalSeconds += Integer.parseInt(hours[2]);
+                                }
+                                position.set(Position.KEY_HOURS, totalSeconds * 1000);
+                            } catch (NumberFormatException e) {
+                                // Log or handle error
+                            }
+                        }
+                    }
                 }
                 break;
             case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
+                // Power
                 if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                    String powerValue = values[index++];
+                    if (!powerValue.isEmpty()) {
+                        try {
+                            position.set(Position.KEY_POWER, Double.parseDouble(powerValue));
+                        } catch (NumberFormatException e) {
+                            // Log or handle error
                         }
+                    }
+                }
+
+                // Battery
+                if (index < values.length) {
+                    String batteryValue = values[index++];
+                    if (!batteryValue.isEmpty()) {
+                        try {
+                            position.set(Position.KEY_BATTERY, Double.parseDouble(batteryValue));
+                        } catch (NumberFormatException e) {
+                            // Log or handle error
+                        }
+                    }
+                }
+
+                // ADC 1
                 if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                    String adc1Value = values[index++];
+                    if (!adc1Value.isEmpty()) {
+                        try {
+                            position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1Value));
+                        } catch (NumberFormatException e) {
+                            // Log or handle error
+                        }
+                    }
                 }
+
+                // ADC 2
                 if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                    String adc2Value = values[index++];
+                    if (!adc2Value.isEmpty()) {
+                        try {
+                            position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2Value));
+                        } catch (NumberFormatException e) {
+                            // Log or handle error
+                        }
+                    }
                 }
                 break;
             case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                // Status
+                if (index < values.length) {
+                    String statusValue = values[index++];
+                    if (!statusValue.isEmpty()) {
+                        try {
+                            position.set(Position.KEY_STATUS, Integer.parseInt(statusValue, 16));
+                        } catch (NumberFormatException e) {
+                            // Log or handle error
+                        }
+                    }
+                }
+
+                // IO state
+                if (index < values.length) {
+                    String ioValue = values[index++];
+                    if (!ioValue.isEmpty()) {
+                        try {
+                            int io = Integer.parseInt(ioValue, 16);
                             position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                             position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                             position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                             position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                             position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                             position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                             position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                             position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
+                        } catch (NumberFormatException e) {
+                            // Log or handle error
                         }
+                    }
+                }
+
+                // Geofence (two parts concatenated)
+                if (index + 1 < values.length) {
                     position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
+                } else if (index < values.length) { // Only one part available
+                    position.set(Position.KEY_GEOFENCE, values[index++]);
+                }
+
+                // Event Status
                 if (index < values.length) {
-                    position.set("packetType", values[index++]);
+                    position.set("eventStatus", values[index++]); // String field, no parsing issues with empty string
+                }
+
+                // Packet Type
+                if (index < values.length) {
+                    position.set("packetType", values[index++]); // String field, no parsing issues with empty string
                 }
                 break;
             case "ETD":
-                position.set("eventData", values[index++]);
+                if (index < values.length) {
+                    position.set("eventData", values[index++]); // String field
+                }
                 break;
             case "OBD":
-                position.set("obd", values[index++]);
+                if (index < values.length) {
+                    position.set("obd", values[index++]); // String field
+                }
                 break;
             case "TAG":
-                position.set("tagData", values[index++]);
+                if (index < values.length) {
+                    position.set("tagData", values[index++]); // String field
+                }
                 break;
             case "IWD":
-                while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
-                    if (dataType == 0) {
+                while (index + 1 < values.length) { // Ensure at least sensorIndex and dataType are available for the current record
+                    String sensorIndexValue = values[index++];
+                    String dataTypeValue = values[index++];
+
+                    if (!sensorIndexValue.isEmpty() && !dataTypeValue.isEmpty()) {
+                        try {
+                            int sensorIndex = Integer.parseInt(sensorIndexValue);
+                            int dataType = Integer.parseInt(dataTypeValue);
+
+                            if (dataType == 0) { // Driver ID
+                                if (index < values.length) {
                                     position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
-                    } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                                }
+                            } else if (dataType == 1) { // Temperature sensor
+                                index += 1; // Skip temperature sensor serial number
+                                if (index < values.length) { // Check if temperature value exists
+                                    String tempValue = values[index++];
+                                    if (!tempValue.isEmpty()) {
+                                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(tempValue));
+                                    }
+                                }
+                            } else {
+                                // Unknown dataType, advance index by 0 (already advanced by 2 for sensorIndex and dataType)
+                                // and break loop to avoid infinite loop on malformed data
+                                break;
+                            }
+                        } catch (NumberFormatException e) {
+                            // Log or handle error, then break this malformed record
+                            break;
+                        }
+                    } else {
+                        // Malformed sensorIndex or dataType, break the loop
+                        break;
                     }
                 }
                 break;
             default:
                 break;
         }
     }
