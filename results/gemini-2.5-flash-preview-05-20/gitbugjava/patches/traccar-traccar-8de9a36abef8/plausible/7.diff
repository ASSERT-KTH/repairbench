diff --git a/tmp/63802adf-fd31-49fb-b789-89b02127d8f0_buggy.java b/tmp/547863b9-6cff-4011-83de-438a19ff9db6_fixed.java
index ad77f15..f2de7d8 100644
--- a/tmp/63802adf-fd31-49fb-b789-89b02127d8f0_buggy.java
+++ b/tmp/547863b9-6cff-4011-83de-438a19ff9db6_fixed.java
@@ -1,112 +1,148 @@
     private void decodeFragment(Position position, String fragment) {
 
         int dataIndex = fragment.indexOf(':');
         int index = 0;
         String[] values;
         if (fragment.length() == dataIndex + 1) {
             values = new String[0];
         } else {
             values = fragment.substring(dataIndex + 1).split(";");
         }
 
         switch (fragment.substring(0, dataIndex)) {
             case "GPS":
                 position.setValid(values[index++].equals("A"));
                 position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
                 position.setLatitude(Double.parseDouble(values[index].substring(1)));
                 if (values[index++].charAt(0) == 'S') {
                     position.setLatitude(-position.getLatitude());
                 }
                 position.setLongitude(Double.parseDouble(values[index].substring(1)));
                 if (values[index++].charAt(0) == 'W') {
                     position.setLongitude(-position.getLongitude());
                 }
                 if (!values[index++].isEmpty()) {
                     position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
                 }
                 position.setCourse(Integer.parseInt(values[index++]));
                 if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                    // Altitude can be empty
+                    if (!values[index].isEmpty()) {
+                        position.setAltitude(Integer.parseInt(values[index]));
+                    }
+                    index++; // Consume the value
                 }
                 if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                    // HDOP can be empty
+                    if (!values[index].isEmpty()) {
+                        position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));
+                    }
+                    index++; // Consume the value
                 }
                 if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                    // VDOP can be empty
+                    if (!values[index].isEmpty()) {
+                        position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));
+                    }
+                    index++; // Consume the value
                 }
                 break;
             case "GSM":
                 index += 1; // registration status
                 index += 1; // signal strength
                 position.setNetwork(new Network(CellTower.from(
                         Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
                         Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
                         Integer.parseInt(values[index++]))));
                 break;
             case "COT":
                 if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                    // Odometer
+                    if (!values[index].isEmpty()) { // Odometer can be empty
+                        position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));
+                    }
+                    index++; // Consume the value
                 }
                 if (index < values.length) {
+                    // Hours can be empty
+                    if (!values[index].isEmpty()) {
                         String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                        position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600L // Use 1000L to avoid potential int overflow
+                                + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60L : 0L)
+                                + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000L);
+                    }
+                    index++; // Consume the value
                 }
                 break;
             case "ADC":
                 position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
                 if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                    // Battery can be empty
+                    if (!values[index].isEmpty()) {
+                        position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));
+                    }
+                    index++; // Consume the value
                 }
                 if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                    // ADC + 1 can be empty
+                    if (!values[index].isEmpty()) {
+                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));
+                    }
+                    index++; // Consume the value
                 }
                 if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                    // ADC + 2 can be empty
+                    if (!values[index].isEmpty()) {
+                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));
+                    }
+                    index++; // Consume the value
                 }
                 break;
             case "DTT":
                 position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
                 if (!values[index++].isEmpty()) {
                     int io = Integer.parseInt(values[index - 1], 16);
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                 }
                 position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
                 position.set("eventStatus", values[index++]);
                 if (index < values.length) {
                     position.set("packetType", values[index++]);
                 }
                 break;
             case "ETD":
                 position.set("eventData", values[index++]);
                 break;
             case "OBD":
                 position.set("obd", values[index++]);
                 break;
             case "TAG":
                 position.set("tagData", values[index++]);
                 break;
             case "IWD":
                 while (index < values.length) {
                     int sensorIndex = Integer.parseInt(values[index++]);
                     int dataType = Integer.parseInt(values[index++]);
                     if (dataType == 0) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
                     } else if (dataType == 1) {
                         index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                        // Temperature can be empty
+                        if (index < values.length && !values[index].isEmpty()) {
+                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index]));
+                        }
+                        index++; // Consume the value
                     }
                 }
                 break;
             default:
                 break;
         }
     }
\ No newline at end of file
