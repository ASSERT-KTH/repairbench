diff --git a/tmp/22fdb179-e9bd-4f86-826f-e8171d7f6922_buggy.java b/tmp/2fc879a1-cc26-4bbc-aa13-9509fac6490c_fixed.java
index ad77f15..bbef01f 100644
--- a/tmp/22fdb179-e9bd-4f86-826f-e8171d7f6922_buggy.java
+++ b/tmp/2fc879a1-cc26-4bbc-aa13-9509fac6490c_fixed.java
@@ -1,112 +1,280 @@
     private void decodeFragment(Position position, String fragment) {
 
         int dataIndex = fragment.indexOf(':');
         int index = 0;
         String[] values;
         if (fragment.length() == dataIndex + 1) {
             values = new String[0];
         } else {
-            values = fragment.substring(dataIndex + 1).split(";");
+            // Use split(";", -1) to retain trailing empty strings, which can represent optional, missing values.
+            values = fragment.substring(dataIndex + 1).split(";", -1);
         }
 
         switch (fragment.substring(0, dataIndex)) {
             case "GPS":
+                // Status (Valid)
+                if (index < values.length) {
                     position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+                }
+
+                // Satellites
+                if (index < values.length) {
+                    String s = values[index++];
+                    if (!s.isEmpty()) {
+                        position.set(Position.KEY_SATELLITES, Integer.parseInt(s));
+                    }
+                }
+
+                // Latitude
+                if (index < values.length) {
+                    String latValue = values[index++];
+                    if (!latValue.isEmpty() && latValue.length() > 1) { // Ensure string is not empty and has char at index 1
+                        position.setLatitude(Double.parseDouble(latValue.substring(1)));
+                        if (latValue.charAt(0) == 'S') {
                             position.setLatitude(-position.getLatitude());
                         }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                    }
+                }
+
+                // Longitude
+                if (index < values.length) {
+                    String lonValue = values[index++];
+                    if (!lonValue.isEmpty() && lonValue.length() > 1) { // Ensure string is not empty and has char at index 1
+                        position.setLongitude(Double.parseDouble(lonValue.substring(1)));
+                        if (lonValue.charAt(0) == 'W') {
                             position.setLongitude(-position.getLongitude());
                         }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
                     }
-                position.setCourse(Integer.parseInt(values[index++]));
+                }
+
+                // Speed
+                if (index < values.length) {
+                    String speedValue = values[index++];
+                    if (!speedValue.isEmpty()) {
+                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedValue)));
+                    }
+                }
+
+                // Course
+                if (index < values.length) {
+                    String courseValue = values[index++];
+                    if (!courseValue.isEmpty()) {
+                        position.setCourse(Integer.parseInt(courseValue));
+                    }
+                }
+
+                // Altitude
                 if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                    String altitudeValue = values[index++];
+                    if (!altitudeValue.isEmpty()) {
+                        position.setAltitude(Integer.parseInt(altitudeValue));
+                    }
                 }
+
+                // HDOP
                 if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                    String hdopValue = values[index++];
+                    if (!hdopValue.isEmpty()) {
+                        position.set(Position.KEY_HDOP, Double.parseDouble(hdopValue));
                     }
+                }
+
+                // VDOP
                 if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                    String vdopValue = values[index++];
+                    if (!vdopValue.isEmpty()) {
+                        position.set(Position.KEY_VDOP, Double.parseDouble(vdopValue));
+                    }
                 }
                 break;
+
             case "GSM":
                 index += 1; // registration status
                 index += 1; // signal strength
+                if (index + 4 < values.length) { // Ensure enough values exist for CellTower
                     position.setNetwork(new Network(CellTower.from(
                             Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
                             Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
                             Integer.parseInt(values[index++]))));
+                }
                 break;
+
             case "COT":
+                // Odometer
                 if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                    String odometerValue = values[index++];
+                    if (!odometerValue.isEmpty()) {
+                        position.set(Position.KEY_ODOMETER, Long.parseLong(odometerValue));
                     }
+                }
+
+                // Hours
                 if (index < values.length) {
-                    String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                    String hoursValue = values[index++];
+                    if (!hoursValue.isEmpty()) {
+                        String[] hours = hoursValue.split("-");
+                        long totalSeconds = 0;
+                        if (hours.length > 0 && !hours[0].isEmpty()) {
+                            totalSeconds += Long.parseLong(hours[0]) * 3600; // Use Long.parseLong to avoid overflow
+                        }
+                        if (hours.length > 1 && !hours[1].isEmpty()) {
+                            totalSeconds += Long.parseLong(hours[1]) * 60;
+                        }
+                        if (hours.length > 2 && !hours[2].isEmpty()) {
+                            totalSeconds += Long.parseLong(hours[2]);
+                        }
+                        position.set(Position.KEY_HOURS, totalSeconds * 1000L); // Cast to long for multiplication
+                    }
                 }
                 break;
+
             case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
+                // Power
                 if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                    String powerValue = values[index++];
+                    if (!powerValue.isEmpty()) {
+                        position.set(Position.KEY_POWER, Double.parseDouble(powerValue));
                     }
+                }
+
+                // Battery
+                if (index < values.length) {
+                    String batteryValue = values[index++];
+                    if (!batteryValue.isEmpty()) {
+                        position.set(Position.KEY_BATTERY, Double.parseDouble(batteryValue));
+                    }
+                }
+
+                // ADC 1
                 if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                    String adc1Value = values[index++];
+                    if (!adc1Value.isEmpty()) {
+                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1Value));
+                    }
                 }
+
+                // ADC 2
                 if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                    String adc2Value = values[index++];
+                    if (!adc2Value.isEmpty()) {
+                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2Value));
+                    }
                 }
                 break;
+
             case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                // Status
+                if (index < values.length) {
+                    String statusValue = values[index++];
+                    if (!statusValue.isEmpty()) {
+                        position.set(Position.KEY_STATUS, Integer.parseInt(statusValue, 16));
+                    }
+                }
+
+                // IO (Ignition, In, Out)
+                if (index < values.length) {
+                    String ioValue = values[index++];
+                    if (!ioValue.isEmpty()) {
+                        int io = Integer.parseInt(ioValue, 16);
                         position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                         position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                         position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                         position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                         position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                         position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                         position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                         position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                     }
+                }
+
+                // Geofence (concatenation of two values)
+                if (index + 1 < values.length) { // Ensure both values exist
                     position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+                } else if (index < values.length) { // Handle case where only one part exists
+                    position.set(Position.KEY_GEOFENCE, values[index++]);
+                }
+
+                // Event Status
+                if (index < values.length) {
                     position.set("eventStatus", values[index++]);
+                }
+
+                // Packet Type
                 if (index < values.length) {
                     position.set("packetType", values[index++]);
                 }
                 break;
+
             case "ETD":
+                // Event Data
+                if (index < values.length) {
                     position.set("eventData", values[index++]);
+                }
                 break;
+
             case "OBD":
+                // OBD data
+                if (index < values.length) {
                     position.set("obd", values[index++]);
+                }
                 break;
+
             case "TAG":
+                // Tag Data
+                if (index < values.length) {
                     position.set("tagData", values[index++]);
+                }
                 break;
+
             case "IWD":
                 while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+                    // Sensor Index
+                    String sensorIndexStr = values[index++];
+                    if (sensorIndexStr.isEmpty()) {
+                        break; // If sensor index is empty, stop processing this fragment
+                    }
+                    int sensorIndex = Integer.parseInt(sensorIndexStr);
+
+                    // Data Type
+                    if (index >= values.length) { // Check bounds before accessing dataType
+                        break;
+                    }
+                    String dataTypeStr = values[index++];
+                    if (dataTypeStr.isEmpty()) {
+                        break; // If data type is empty, stop
+                    }
+                    int dataType = Integer.parseInt(dataTypeStr);
+
                     if (dataType == 0) {
+                        // Driver Unique ID
+                        if (index < values.length) {
                             position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                        } else {
+                            break; // Not enough data for driver ID
+                        }
                     } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                        index += 1; // temperature sensor serial number (skip)
+                        // Temperature Value
+                        if (index < values.length) {
+                            String tempValue = values[index++];
+                            if (!tempValue.isEmpty()) {
+                                position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(tempValue));
+                            }
+                        } else {
+                            break; // Not enough data for temperature
+                        }
+                    } else {
+                        // For unknown data types, consume the next value to advance index correctly for the next sensor block
+                        if (index < values.length) {
+                            index++;
+                        } else {
+                            break; // Not enough data for unknown type's value
+                        }
                     }
                 }
                 break;
+
             default:
                 break;
         }
     }
\ No newline at end of file
