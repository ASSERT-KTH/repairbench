diff --git a/tmp/0dc291e0-7226-4ba1-9661-85aa4e38e3fa_buggy.java b/tmp/ee579aea-4f76-45a0-9cd0-00e334b026c9_fixed.java
index eb0a5c8..a0e9993 100644
--- a/tmp/0dc291e0-7226-4ba1-9661-85aa4e38e3fa_buggy.java
+++ b/tmp/ee579aea-4f76-45a0-9cd0-00e334b026c9_fixed.java
@@ -1,27 +1,36 @@
   public static Try<Done> registerCallContext(
       final ActorRef<CallContextProviderMessage> callContextProvider,
       final String callContext,
       final AriCommand ariCommand) {
 
-    if (!ariCommand.extractCommandType().isCreationCommand()) {
+    // Extract the command type once for readability and potential performance.
+    final AriCommandType commandType = ariCommand.extractCommandType();
+
+    // The call context should only be registered for actual creation commands.
+    // The original logic `!commandType.isCreationCommand()` correctly handles non-creation commands.
+    // However, the failing test indicates that `isCreationCommand()` might be returning true
+    // for `DELETE` commands, which is incorrect for this context.
+    // To ensure that DELETE requests never trigger a call context registration,
+    // we explicitly check if the command type is DELETE and return early if it is.
+    if (!commandType.isCreationCommand() || commandType == AriCommandType.DELETE) {
       return Try.success(Done.done());
     }
 
     final Option<AriResource> maybeResource =
         ariCommand
             .extractResourceRelations()
             .find(AriResourceRelation::isCreated)
             .map(AriResourceRelation::getResource);
 
     if (maybeResource.isEmpty()) {
       return Try.failure(
           new RuntimeException(
               String.format(
                   "Failed to extract resourceId from command '%s'", ariCommand.toString())));
     }
 
     final AriResource resource = maybeResource.get();
 
     callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));
     return Try.success(Done.done());
   }
\ No newline at end of file
