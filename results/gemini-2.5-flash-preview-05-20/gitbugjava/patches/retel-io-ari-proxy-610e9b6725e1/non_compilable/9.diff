diff --git a/tmp/5479b849-d8f9-4076-be95-21f209ed00aa_buggy.java b/tmp/765fff66-22ec-4c9f-8c77-6fe025fe8b9f_fixed.java
index eb0a5c8..ab57a10 100644
--- a/tmp/5479b849-d8f9-4076-be95-21f209ed00aa_buggy.java
+++ b/tmp/765fff66-22ec-4c9f-8c77-6fe025fe8b9f_fixed.java
@@ -1,27 +1,40 @@
   public static Try<Done> registerCallContext(
       final ActorRef<CallContextProviderMessage> callContextProvider,
       final String callContext,
       final AriCommand ariCommand) {
 
-    if (!ariCommand.extractCommandType().isCreationCommand()) {
+    // Get the command type to avoid multiple calls and for clarity.
+    final CommandType commandType = ariCommand.extractCommandType();
+
+    // The original intent was to skip if the command is not a "creation" command.
+    // However, the failing test indicates that `isCreationCommand()` might return true for
+    // `DELETE` commands, causing an unintended call context registration for deletes.
+    //
+    // The fix addresses this by explicitly checking for `DELETE` commands:
+    // If the command is `DELETE`, or if it's generally not considered a "creation" command
+    // (as per the `isCreationCommand()` method for other types like `GET`, `UPDATE`, etc.),
+    // then we should skip the registration process and return success immediately.
+    // This ensures that `DELETE` commands are always skipped, and the original intent
+    // for other non-creation commands (like `GET`) is also preserved.
+    if (commandType == CommandType.DELETE || !commandType.isCreationCommand()) {
       return Try.success(Done.done());
     }
 
     final Option<AriResource> maybeResource =
         ariCommand
             .extractResourceRelations()
             .find(AriResourceRelation::isCreated)
             .map(AriResourceRelation::getResource);
 
     if (maybeResource.isEmpty()) {
       return Try.failure(
           new RuntimeException(
               String.format(
                   "Failed to extract resourceId from command '%s'", ariCommand.toString())));
     }
 
     final AriResource resource = maybeResource.get();
 
     callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));
     return Try.success(Done.done());
   }
\ No newline at end of file
