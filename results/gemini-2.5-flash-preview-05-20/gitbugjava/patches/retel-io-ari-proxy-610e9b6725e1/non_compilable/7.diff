diff --git a/tmp/9c605f97-0bb7-4a98-8446-5bd10e54a97e_buggy.java b/tmp/c3117331-91c5-467a-8433-4cdb77e68dae_fixed.java
index eb0a5c8..6491829 100644
--- a/tmp/9c605f97-0bb7-4a98-8446-5bd10e54a97e_buggy.java
+++ b/tmp/c3117331-91c5-467a-8433-4cdb77e68dae_fixed.java
@@ -1,27 +1,36 @@
   public static Try<Done> registerCallContext(
       final ActorRef<CallContextProviderMessage> callContextProvider,
       final String callContext,
       final AriCommand ariCommand) {
 
+    // Explicitly check for DELETE method to ensure no call context is registered.
+    // This addresses the specific test failure where DELETE requests are incorrectly processed.
+    if ("DELETE".equals(ariCommand.extractMethod())) {
+      return Try.success(Done.done());
+    }
+
+    // Original check: if it's not a creation command (e.g., GET, PUT for update),
+    // then return early without registering. This handles other non-creation commands
+    // that were not explicitly filtered by the above DELETE check.
     if (!ariCommand.extractCommandType().isCreationCommand()) {
       return Try.success(Done.done());
     }
 
     final Option<AriResource> maybeResource =
         ariCommand
             .extractResourceRelations()
             .find(AriResourceRelation::isCreated)
             .map(AriResourceRelation::getResource);
 
     if (maybeResource.isEmpty()) {
       return Try.failure(
           new RuntimeException(
               String.format(
                   "Failed to extract resourceId from command '%s'", ariCommand.toString())));
     }
 
     final AriResource resource = maybeResource.get();
 
     callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));
     return Try.success(Done.done());
   }
\ No newline at end of file
