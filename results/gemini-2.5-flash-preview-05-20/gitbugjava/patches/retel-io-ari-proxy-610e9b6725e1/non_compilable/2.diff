diff --git a/tmp/37d65fbd-6754-4eff-9be9-0681a8e240ff_buggy.java b/tmp/501f052c-9852-4e90-855b-24b71504a339_fixed.java
index eb0a5c8..7096989 100644
--- a/tmp/37d65fbd-6754-4eff-9be9-0681a8e240ff_buggy.java
+++ b/tmp/501f052c-9852-4e90-855b-24b71504a339_fixed.java
@@ -1,27 +1,39 @@
   public static Try<Done> registerCallContext(
       final ActorRef<CallContextProviderMessage> callContextProvider,
       final String callContext,
       final AriCommand ariCommand) {
 
+    // As per test 'doesNotTryToRegisterACallContextForDeleteRequests',
+    // call context should not be registered for DELETE requests.
+    // The original logic might incorrectly classify DELETE as a 'creation command'
+    // or the 'isCreationCommand()' method might not be sufficient to exclude DELETE.
+    // Explicitly check for DELETE verb first.
+    if ("DELETE".equalsIgnoreCase(ariCommand.getVerb())) {
+      return Try.success(Done.done());
+    }
+
+    // Continue with the original logic: only proceed if the command type is
+    // identified as a creation command. This ensures other non-creation
+    // commands (like GET, PUT for non-creation updates, etc.) are also skipped.
     if (!ariCommand.extractCommandType().isCreationCommand()) {
       return Try.success(Done.done());
     }
 
     final Option<AriResource> maybeResource =
         ariCommand
             .extractResourceRelations()
             .find(AriResourceRelation::isCreated)
             .map(AriResourceRelation::getResource);
 
     if (maybeResource.isEmpty()) {
       return Try.failure(
           new RuntimeException(
               String.format(
                   "Failed to extract resourceId from command '%s'", ariCommand.toString())));
     }
 
     final AriResource resource = maybeResource.get();
 
     callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));
     return Try.success(Done.done());
   }
\ No newline at end of file
