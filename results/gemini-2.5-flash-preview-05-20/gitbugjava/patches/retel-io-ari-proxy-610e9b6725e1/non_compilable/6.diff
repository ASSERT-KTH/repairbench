diff --git a/tmp/bdd1a944-9ab5-4360-980d-baf54926710d_buggy.java b/tmp/db49c8ac-143f-4149-b8e6-3bdb80e20d58_fixed.java
index eb0a5c8..2ee04bd 100644
--- a/tmp/bdd1a944-9ab5-4360-980d-baf54926710d_buggy.java
+++ b/tmp/db49c8ac-143f-4149-b8e6-3bdb80e20d58_fixed.java
@@ -1,27 +1,40 @@
   public static Try<Done> registerCallContext(
       final ActorRef<CallContextProviderMessage> callContextProvider,
       final String callContext,
       final AriCommand ariCommand) {
 
-    if (!ariCommand.extractCommandType().isCreationCommand()) {
+    // The original intent was to only register a call context for "creation" commands.
+    // The test `doesNotTryToRegisterACallContextForDeleteRequests` fails because a `RegisterCallContext` message
+    // is sent for a "DELETE" command, indicating that the initial check `!ariCommand.extractCommandType().isCreationCommand()`
+    // is not correctly preventing execution for DELETE requests.
+    // This implies that `ariCommand.extractCommandType().isCreationCommand()` might be returning `true` for DELETE commands,
+    // which is unexpected for a "creation" check.
+
+    // To fix this, we need to explicitly ensure that DELETE commands, and any other non-creation commands,
+    // do not proceed to register a call context.
+    // We modify the condition to skip processing if it's a deletion command, or if it's generally not a creation command.
+    // This assumes that `ariCommand.extractCommandType()` returns an object (e.g., an enum or a type)
+    // that provides both `isCreationCommand()` and `isDeletionCommand()` methods.
+    final var commandType = ariCommand.extractCommandType();
+    if (commandType.isDeletionCommand() || !commandType.isCreationCommand()) {
       return Try.success(Done.done());
     }
 
     final Option<AriResource> maybeResource =
         ariCommand
             .extractResourceRelations()
             .find(AriResourceRelation::isCreated)
             .map(AriResourceRelation::getResource);
 
     if (maybeResource.isEmpty()) {
       return Try.failure(
           new RuntimeException(
               String.format(
                   "Failed to extract resourceId from command '%s'", ariCommand.toString())));
     }
 
     final AriResource resource = maybeResource.get();
 
     callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));
     return Try.success(Done.done());
   }
\ No newline at end of file
