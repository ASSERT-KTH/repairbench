diff --git a/tmp/f6142942-34da-44d6-a901-65b2ea2c3bbd_buggy.java b/tmp/ba5d8559-0160-4b12-a257-a4e060f55e08_fixed.java
index eb0a5c8..a13d506 100644
--- a/tmp/f6142942-34da-44d6-a901-65b2ea2c3bbd_buggy.java
+++ b/tmp/ba5d8559-0160-4b12-a257-a4e060f55e08_fixed.java
@@ -1,27 +1,37 @@
   public static Try<Done> registerCallContext(
       final ActorRef<CallContextProviderMessage> callContextProvider,
       final String callContext,
       final AriCommand ariCommand) {
 
+    // According to the failing test `doesNotTryToRegisterACallContextForDeleteRequests`,
+    // the system should not attempt to register a call context for "DELETE" requests.
+    // The current guard `!ariCommand.extractCommandType().isCreationCommand()`
+    // seems insufficient for "DELETE" commands, implying that `isCreationCommand()`
+    // might incorrectly return true for DELETE, or a more explicit check is needed.
+    // Adding a direct check for the "DELETE" method to ensure no message is sent.
+    if ("DELETE".equalsIgnoreCase(ariCommand.getMethod())) {
+      return Try.success(Done.done());
+    }
+
     if (!ariCommand.extractCommandType().isCreationCommand()) {
       return Try.success(Done.done());
     }
 
     final Option<AriResource> maybeResource =
         ariCommand
             .extractResourceRelations()
             .find(AriResourceRelation::isCreated)
             .map(AriResourceRelation::getResource);
 
     if (maybeResource.isEmpty()) {
       return Try.failure(
           new RuntimeException(
               String.format(
                   "Failed to extract resourceId from command '%s'", ariCommand.toString())));
     }
 
     final AriResource resource = maybeResource.get();
 
     callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));
     return Try.success(Done.done());
   }
\ No newline at end of file
