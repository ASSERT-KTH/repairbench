diff --git a/tmp/82f2e530-d0e9-49e6-9154-92f82db4a8f1_buggy.java b/tmp/827e0276-6ba9-42b1-acf6-c2bbf9d880b6_fixed.java
index 477325f..b88ba7c 100644
--- a/tmp/82f2e530-d0e9-49e6-9154-92f82db4a8f1_buggy.java
+++ b/tmp/827e0276-6ba9-42b1-acf6-c2bbf9d880b6_fixed.java
@@ -1,178 +1,191 @@
     private void decodeLocation(Position position, ByteBuf buf, int codec, String model) {
 
-        int globalMask = 0x0f;
+        int globalMask = 0x0f; // This globalMask is intended for shared IO logic, but its value depends on the codec.
 
         if (codec == CODEC_GH3000) {
-
             long time = buf.readUnsignedInt() & 0x3fffffff;
             time += 1167609600; // 2007-01-01 00:00:00
 
-            globalMask = buf.readUnsignedByte();
+            globalMask = buf.readUnsignedByte(); // globalMask is explicitly read for CODEC_GH3000
             if (BitUtil.check(globalMask, 0)) {
 
                 position.setTime(new Date(time * 1000));
 
                 int locationMask = buf.readUnsignedByte();
 
                 if (BitUtil.check(locationMask, 0)) {
                     position.setLatitude(buf.readFloat());
                     position.setLongitude(buf.readFloat());
                 }
 
                 if (BitUtil.check(locationMask, 1)) {
                     position.setAltitude(buf.readUnsignedShort());
                 }
 
                 if (BitUtil.check(locationMask, 2)) {
                     position.setCourse(buf.readUnsignedByte() * 360.0 / 256);
                 }
 
                 if (BitUtil.check(locationMask, 3)) {
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
                 }
 
                 if (BitUtil.check(locationMask, 4)) {
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                 }
 
                 if (BitUtil.check(locationMask, 5)) {
                     CellTower cellTower = CellTower.fromLacCid(
                             getConfig(), buf.readUnsignedShort(), buf.readUnsignedShort());
 
                     if (BitUtil.check(locationMask, 6)) {
                         cellTower.setSignalStrength((int) buf.readUnsignedByte());
                     }
 
                     if (BitUtil.check(locationMask, 7)) {
                         cellTower.setOperator(buf.readUnsignedInt());
                     }
 
                     position.setNetwork(new Network(cellTower));
 
                 } else {
                     if (BitUtil.check(locationMask, 6)) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     }
                     if (BitUtil.check(locationMask, 7)) {
                         position.set(Position.KEY_OPERATOR, buf.readUnsignedInt());
                     }
                 }
 
             } else {
-
                 getLastLocation(position, new Date(time * 1000));
-
             }
 
-        } else {
+        } else { // This branch handles CODEC_8, CODEC_8_EXT, CODEC_16
+            // For these codecs, the `globalMask` variable remains its initial value (0x0f)
+            // and is not directly related to IO flags in the same way as GH3000.
+            // However, the subsequent IO parsing blocks still use `globalMask` condition,
+            // which will always evaluate to true for bits 1, 2, 3 due to 0x0f.
+            // The counts for these IO types are explicitly provided in the protocol.
 
             position.setTime(new Date(buf.readLong()));
 
             position.set("priority", buf.readUnsignedByte());
 
             position.setLongitude(buf.readInt() / 10000000.0);
             position.setLatitude(buf.readInt() / 10000000.0);
             position.setAltitude(buf.readShort());
             position.setCourse(buf.readUnsignedShort());
 
             int satellites = buf.readUnsignedByte();
             position.set(Position.KEY_SATELLITES, satellites);
 
             position.setValid(satellites != 0);
 
             position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
 
-            position.set(Position.KEY_EVENT, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16));
+            // Event ID (1 byte for Teltonika AVL data)
+            position.set(Position.KEY_EVENT, buf.readUnsignedByte()); // FIX: Use buf.readUnsignedByte() for Event ID
             if (codec == CODEC_16) {
-                buf.readUnsignedByte(); // generation type
+                buf.readUnsignedByte(); // generation type (specific to CODEC_16)
             }
 
-            readExtByte(buf, codec, CODEC_8_EXT); // total IO data records
-
+            // Total IO data records (1 byte) - This byte indicates the number of following IO data blocks (1-byte, 2-byte, etc.)
+            // It needs to be consumed but its value is not directly used for loop counts in the current structure.
+            buf.readUnsignedByte(); // FIX: Use buf.readUnsignedByte() to consume this byte
         }
 
+        // --- IO data blocks (common for all codecs based on original code structure) ---
+        // For CODEC_8, CODEC_8_EXT, CODEC_16, the `globalMask` is 0x0f,
+        // so conditions `BitUtil.check(globalMask, 1/2/3)` will always be true.
+        // The critical fix is to correctly read the 'count' (cnt) for each block.
+        // For Teltonika CODEC_8, CODEC_8_EXT, CODEC_16, these counts are 1-byte, except for X-byte count.
+
         // Read 1 byte data
         if (BitUtil.check(globalMask, 1)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
+            int cnt = (codec == CODEC_GH3000) ? readExtByte(buf, codec, CODEC_8_EXT) : buf.readUnsignedByte(); // FIX: Use buf.readUnsignedByte() for counts for CODEC_8/8_EXT/16
             for (int j = 0; j < cnt; j++) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 1, codec, model);
             }
         }
 
         // Read 2 byte data
         if (BitUtil.check(globalMask, 2)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
+            int cnt = (codec == CODEC_GH3000) ? readExtByte(buf, codec, CODEC_8_EXT) : buf.readUnsignedByte(); // FIX: Use buf.readUnsignedByte() for counts
             for (int j = 0; j < cnt; j++) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 2, codec, model);
             }
         }
 
         // Read 4 byte data
         if (BitUtil.check(globalMask, 3)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
+            int cnt = (codec == CODEC_GH3000) ? readExtByte(buf, codec, CODEC_8_EXT) : buf.readUnsignedByte(); // FIX: Use buf.readUnsignedByte() for counts
             for (int j = 0; j < cnt; j++) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 4, codec, model);
             }
         }
 
         // Read 8 byte data
-        if (codec == CODEC_8 || codec == CODEC_8_EXT || codec == CODEC_16) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
+        // This condition is true for CODEC_8, CODEC_8_EXT, CODEC_16, and also might apply to GH3000 if globalMask bit is set
+        if (codec == CODEC_8 || codec == CODEC_8_EXT || codec == CODEC_16 || BitUtil.check(globalMask, 4)) { // Assuming globalMask bit 4 covers 8-byte for GH3000
+            int cnt = (codec == CODEC_GH3000) ? readExtByte(buf, codec, CODEC_8_EXT) : buf.readUnsignedByte(); // FIX: Use buf.readUnsignedByte() for counts
             for (int j = 0; j < cnt; j++) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 8, codec, model);
             }
         }
 
-        // Read 16 byte data
-        if (extended) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
+        // Read 16 byte data (Traccar custom extension)
+        if (extended) { // This `extended` flag is set by decoder configuration
+            int cnt = readExtByte(buf, codec, CODEC_8_EXT); // This might return UnsignedShort if codec is CODEC_8_EXT
             for (int j = 0; j < cnt; j++) {
                 int id = readExtByte(buf, codec, CODEC_8_EXT, CODEC_16);
                 position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(16)));
             }
         }
 
-        // Read X byte data
+        // Read X byte data (Specific to CODEC_8_EXT)
         if (codec == CODEC_8_EXT) {
-            int cnt = buf.readUnsignedShort();
+            int cnt = buf.readUnsignedShort(); // This count is correctly 2 bytes for X-byte data
             for (int j = 0; j < cnt; j++) {
                 int id = buf.readUnsignedShort();
                 int length = buf.readUnsignedShort();
                 if (id == 256) {
                     position.set(Position.KEY_VIN,
                             buf.readSlice(length).toString(StandardCharsets.US_ASCII));
                 } else if (id == 281) {
                     position.set(Position.KEY_DTCS,
                             buf.readSlice(length).toString(StandardCharsets.US_ASCII).replace(',', ' '));
-                } else if (id == 385) {
+                } else if (id == 385) { // Beacon data (Teltonika BLE)
                     ByteBuf data = buf.readSlice(length);
-                    data.readUnsignedByte(); // data part
+                    // The first byte of the value for ID 385 is typically the 'number of records' (N)
+                    // The line `data.readUnsignedByte(); // data part` consumes this N byte.
+                    // The loop `while (data.isReadable())` then processes N records if N was correctly consumed.
+                    data.readUnsignedByte(); // This byte consumes the 'number of records' or 'data part'
                     int index = 1;
                     while (data.isReadable()) {
-                        int flags = data.readUnsignedByte();
-                        if (BitUtil.from(flags, 4) > 0) {
+                        int flags = data.readUnsignedByte(); // This reads the flags for the current beacon
+                        if (BitUtil.from(flags, 4) > 0) { // Check for iBeacon vs Eddystone
                             position.set("beacon" + index + "Uuid", ByteBufUtil.hexDump(data.readSlice(16)));
                             position.set("beacon" + index + "Major", data.readUnsignedShort());
                             position.set("beacon" + index + "Minor", data.readUnsignedShort());
                         } else {
                             position.set("beacon" + index + "Namespace", ByteBufUtil.hexDump(data.readSlice(10)));
                             position.set("beacon" + index + "Instance", ByteBufUtil.hexDump(data.readSlice(6)));
                         }
                         position.set("beacon" + index + "Rssi", (int) data.readByte());
-                        if (BitUtil.check(flags, 1)) {
+                        if (BitUtil.check(flags, 1)) { // Check if battery data is present (bit 1)
                             position.set("beacon" + index + "Battery", data.readUnsignedShort() * 0.01);
                         }
-                        if (BitUtil.check(flags, 2)) {
+                        if (BitUtil.check(flags, 2)) { // Check if temperature data is present (bit 2)
                             position.set("beacon" + index + "Temp", data.readUnsignedShort());
                         }
                         index += 1;
                     }
                 } else {
                     position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(length)));
                 }
             }
         }
 
         decodeNetwork(position, model);
-
     }
\ No newline at end of file
