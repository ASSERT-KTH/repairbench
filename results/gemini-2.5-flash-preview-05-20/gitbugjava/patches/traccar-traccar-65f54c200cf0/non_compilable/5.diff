diff --git a/tmp/c878f5d5-b27a-4286-8076-f65eef99e7ae_buggy.java b/tmp/3ca8ea46-b350-4efd-a775-f2912fe1e07e_fixed.java
index 477325f..a8f6a17 100644
--- a/tmp/c878f5d5-b27a-4286-8076-f65eef99e7ae_buggy.java
+++ b/tmp/3ca8ea46-b350-4efd-a775-f2912fe1e07e_fixed.java
@@ -1,178 +1,188 @@
     private void decodeLocation(Position position, ByteBuf buf, int codec, String model) {
 
-        int globalMask = 0x0f;
-
         if (codec == CODEC_GH3000) {
 
             long time = buf.readUnsignedInt() & 0x3fffffff;
             time += 1167609600; // 2007-01-01 00:00:00
 
-            globalMask = buf.readUnsignedByte();
-            if (BitUtil.check(globalMask, 0)) {
+            int globalMask = buf.readUnsignedByte(); // globalMask is specific to CODEC_GH3000
+            if (BitUtil.check(globalMask, 0)) { // Location data is present
 
                 position.setTime(new Date(time * 1000));
 
                 int locationMask = buf.readUnsignedByte();
 
                 if (BitUtil.check(locationMask, 0)) {
                     position.setLatitude(buf.readFloat());
                     position.setLongitude(buf.readFloat());
                 }
 
                 if (BitUtil.check(locationMask, 1)) {
                     position.setAltitude(buf.readUnsignedShort());
                 }
 
                 if (BitUtil.check(locationMask, 2)) {
                     position.setCourse(buf.readUnsignedByte() * 360.0 / 256);
                 }
 
                 if (BitUtil.check(locationMask, 3)) {
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
                 }
 
                 if (BitUtil.check(locationMask, 4)) {
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                 }
 
                 if (BitUtil.check(locationMask, 5)) {
                     CellTower cellTower = CellTower.fromLacCid(
                             getConfig(), buf.readUnsignedShort(), buf.readUnsignedShort());
 
                     if (BitUtil.check(locationMask, 6)) {
                         cellTower.setSignalStrength((int) buf.readUnsignedByte());
                     }
 
                     if (BitUtil.check(locationMask, 7)) {
                         cellTower.setOperator(buf.readUnsignedInt());
                     }
 
                     position.setNetwork(new Network(cellTower));
 
-                } else {
+                } else { // locationMask bit 5 is false
                     if (BitUtil.check(locationMask, 6)) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     }
                     if (BitUtil.check(locationMask, 7)) {
                         position.set(Position.KEY_OPERATOR, buf.readUnsignedInt());
                     }
                 }
 
-            } else {
+            } else { // globalMask bit 0 is false
 
                 getLastLocation(position, new Date(time * 1000));
 
             }
 
-        } else {
+            // Read 1 byte data for CODEC_GH3000
+            if (BitUtil.check(globalMask, 1)) {
+                int cnt = readExtByte(buf, codec, CODEC_8_EXT); // readExtByte will read 1 byte for non CODEC_8_EXT/CODEC_16
+                for (int j = 0; j < cnt; j++) {
+                    decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 1, codec, model);
+                }
+            }
+
+            // Read 2 byte data for CODEC_GH3000
+            if (BitUtil.check(globalMask, 2)) {
+                int cnt = readExtByte(buf, codec, CODEC_8_EXT);
+                for (int j = 0; j < cnt; j++) {
+                    decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 2, codec, model);
+                }
+            }
+
+            // Read 4 byte data for CODEC_GH3000
+            if (BitUtil.check(globalMask, 3)) {
+                int cnt = readExtByte(buf, codec, CODEC_8_EXT);
+                for (int j = 0; j < cnt; j++) {
+                    decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 4, codec, model);
+                }
+            }
+
+        } else { // For CODEC_8, CODEC_8_EXT, CODEC_16, etc.
 
             position.setTime(new Date(buf.readLong()));
 
             position.set("priority", buf.readUnsignedByte());
 
             position.setLongitude(buf.readInt() / 10000000.0);
             position.setLatitude(buf.readInt() / 10000000.0);
             position.setAltitude(buf.readShort());
             position.setCourse(buf.readUnsignedShort());
 
             int satellites = buf.readUnsignedByte();
             position.set(Position.KEY_SATELLITES, satellites);
 
             position.setValid(satellites != 0);
 
             position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
 
             position.set(Position.KEY_EVENT, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16));
             if (codec == CODEC_16) {
                 buf.readUnsignedByte(); // generation type
             }
 
-            readExtByte(buf, codec, CODEC_8_EXT); // total IO data records
+            // Total IO data records (propertiesCount) for CODEC_8/8_EXT/16
+            int ioCount = readExtByte(buf, codec, CODEC_8_EXT);
 
-        }
+            for (int j = 0; j < ioCount; j++) {
+                int id;
+                int length;
 
-        // Read 1 byte data
-        if (BitUtil.check(globalMask, 1)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
-                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 1, codec, model);
-            }
-        }
+                // For CODEC_8_EXT, X-byte IDs are 2 bytes, others are 1 byte.
+                // getParamLength needs to be part of TeltonikaProtocolDecoder.java, which it is.
+                // It determines length based on ID, and also reads the ID from buffer based on codec.
+                // The issue here is that this decodeLocation function does not have access to getParamLength as a method.
+                // The provided code snippet only has 'this' which is the TeltonikaProtocolDecoder object.
+                // The original code implies readExtByte(id) and then fixed lengths.
+                // The original X-byte block explicitly read `buf.readUnsignedShort()` for ID.
 
-        // Read 2 byte data
-        if (BitUtil.check(globalMask, 2)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
-                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 2, codec, model);
-            }
-        }
+                // Re-introducing Teltonika's typical IO parsing:
+                if (codec == CODEC_8_EXT && buf.readableBytes() >= 2) { // Assume X-byte parameters might appear
+                    // Peek ahead to see if the ID suggests an X-byte parameter that is 2 bytes long
+                    int peekedId = buf.getUnsignedShort(buf.readerIndex());
+                    if (TeltonikaProtocolDecoder.getParamLength(peekedId) == -1) { // If it's an X-byte ID
+                        id = buf.readUnsignedShort(); // Read 2-byte ID
+                        length = buf.readUnsignedShort(); // Read 2-byte length for X-byte value
 
-        // Read 4 byte data
-        if (BitUtil.check(globalMask, 3)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
-                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 4, codec, model);
-            }
-        }
-
-        // Read 8 byte data
-        if (codec == CODEC_8 || codec == CODEC_8_EXT || codec == CODEC_16) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
-                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 8, codec, model);
-            }
-        }
-
-        // Read 16 byte data
-        if (extended) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
-                int id = readExtByte(buf, codec, CODEC_8_EXT, CODEC_16);
-                position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(16)));
-            }
-        }
-
-        // Read X byte data
-        if (codec == CODEC_8_EXT) {
-            int cnt = buf.readUnsignedShort();
-            for (int j = 0; j < cnt; j++) {
-                int id = buf.readUnsignedShort();
-                int length = buf.readUnsignedShort();
                         if (id == 256) {
                             position.set(Position.KEY_VIN,
                                     buf.readSlice(length).toString(StandardCharsets.US_ASCII));
                         } else if (id == 281) {
                             position.set(Position.KEY_DTCS,
                                     buf.readSlice(length).toString(StandardCharsets.US_ASCII).replace(',', ' '));
-                } else if (id == 385) {
+                        } else if (id == 385) { // iBeacon data
                             ByteBuf data = buf.readSlice(length);
                             data.readUnsignedByte(); // data part
                             int index = 1;
                             while (data.isReadable()) {
                                 int flags = data.readUnsignedByte();
                                 if (BitUtil.from(flags, 4) > 0) {
                                     position.set("beacon" + index + "Uuid", ByteBufUtil.hexDump(data.readSlice(16)));
                                     position.set("beacon" + index + "Major", data.readUnsignedShort());
                                     position.set("beacon" + index + "Minor", data.readUnsignedShort());
                                 } else {
                                     position.set("beacon" + index + "Namespace", ByteBufUtil.hexDump(data.readSlice(10)));
                                     position.set("beacon" + index + "Instance", ByteBufUtil.hexDump(data.readSlice(6)));
                                 }
                                 position.set("beacon" + index + "Rssi", (int) data.readByte());
                                 if (BitUtil.check(flags, 1)) {
                                     position.set("beacon" + index + "Battery", data.readUnsignedShort() * 0.01);
                                 }
                                 if (BitUtil.check(flags, 2)) {
                                     position.set("beacon" + index + "Temp", data.readUnsignedShort());
                                 }
                                 index += 1;
                             }
                         } else {
                             position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(length)));
                         }
+                    } else { // Not an X-byte ID or not enough bytes to peek 2 bytes for CODEC_8_EXT
+                        // Read ID as 1 byte (typical for other fixed-size parameters in CODEC_8_EXT)
+                        id = readExtByte(buf, codec, CODEC_8_EXT, CODEC_16);
+                        length = TeltonikaProtocolDecoder.getParamLength(id); // Get length for 1-byte ID
+                        decodeParameter(position, id, buf, length, codec, model);
+                    }
+                } else { // For codecs other than CODEC_8_EXT or not enough bytes for peek
+                    id = readExtByte(buf, codec, CODEC_8_EXT, CODEC_16);
+                    length = TeltonikaProtocolDecoder.getParamLength(id);
+                    if (length == -1) { // Fallback for any other variable length parameter outside CODEC_8_EXT
+                        length = buf.readUnsignedShort();
+                        position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(length)));
+                    } else {
+                        decodeParameter(position, id, buf, length, codec, model);
+                    }
+                }
             }
         }
 
         decodeNetwork(position, model);
 
     }
