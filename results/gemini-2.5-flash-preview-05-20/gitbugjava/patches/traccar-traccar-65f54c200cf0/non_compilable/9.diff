diff --git a/tmp/71076ba4-5ef0-439e-a18c-2f1a42d91379_buggy.java b/tmp/bf77516c-55cb-471a-a3ba-32b1ffb47607_fixed.java
index 477325f..eefa6f4 100644
--- a/tmp/71076ba4-5ef0-439e-a18c-2f1a42d91379_buggy.java
+++ b/tmp/bf77516c-55cb-471a-a3ba-32b1ffb47607_fixed.java
@@ -1,178 +1,211 @@
     private void decodeLocation(Position position, ByteBuf buf, int codec, String model) {
 
-        int globalMask = 0x0f;
+        int globalMask = 0; // Initialize globalMask to 0. It is only meaningful for CODEC_GH3000.
 
         if (codec == CODEC_GH3000) {
-
             long time = buf.readUnsignedInt() & 0x3fffffff;
             time += 1167609600; // 2007-01-01 00:00:00
 
-            globalMask = buf.readUnsignedByte();
-            if (BitUtil.check(globalMask, 0)) {
-
+            globalMask = buf.readUnsignedByte(); // globalMask is read from the buffer for CODEC_GH3000
+            if (BitUtil.check(globalMask, 0)) { // Bit 0 indicates if location data is present
                 position.setTime(new Date(time * 1000));
 
                 int locationMask = buf.readUnsignedByte();
 
                 if (BitUtil.check(locationMask, 0)) {
                     position.setLatitude(buf.readFloat());
                     position.setLongitude(buf.readFloat());
                 }
 
                 if (BitUtil.check(locationMask, 1)) {
                     position.setAltitude(buf.readUnsignedShort());
                 }
 
                 if (BitUtil.check(locationMask, 2)) {
                     position.setCourse(buf.readUnsignedByte() * 360.0 / 256);
                 }
 
                 if (BitUtil.check(locationMask, 3)) {
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
                 }
 
                 if (BitUtil.check(locationMask, 4)) {
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                 }
 
                 if (BitUtil.check(locationMask, 5)) {
                     CellTower cellTower = CellTower.fromLacCid(
                             getConfig(), buf.readUnsignedShort(), buf.readUnsignedShort());
 
                     if (BitUtil.check(locationMask, 6)) {
                         cellTower.setSignalStrength((int) buf.readUnsignedByte());
                     }
 
                     if (BitUtil.check(locationMask, 7)) {
                         cellTower.setOperator(buf.readUnsignedInt());
                     }
 
                     position.setNetwork(new Network(cellTower));
 
                 } else {
                     if (BitUtil.check(locationMask, 6)) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     }
                     if (BitUtil.check(locationMask, 7)) {
                         position.set(Position.KEY_OPERATOR, buf.readUnsignedInt());
                     }
                 }
 
             } else {
-
                 getLastLocation(position, new Date(time * 1000));
-
             }
 
-        } else {
-
+        } else { // Handle CODEC_8, CODEC_8_EXT, CODEC_16 (Teltonika AVL data)
             position.setTime(new Date(buf.readLong()));
 
             position.set("priority", buf.readUnsignedByte());
 
             position.setLongitude(buf.readInt() / 10000000.0);
             position.setLatitude(buf.readInt() / 10000000.0);
             position.setAltitude(buf.readShort());
             position.setCourse(buf.readUnsignedShort());
 
             int satellites = buf.readUnsignedByte();
             position.set(Position.KEY_SATELLITES, satellites);
 
             position.setValid(satellites != 0);
 
             position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
 
             position.set(Position.KEY_EVENT, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16));
             if (codec == CODEC_16) {
                 buf.readUnsignedByte(); // generation type
             }
 
-            readExtByte(buf, codec, CODEC_8_EXT); // total IO data records
-
+            readExtByte(buf, codec, CODEC_8_EXT); // total IO data records (consumed, not used for loop counts)
         }
 
+        // --- IO data processing ---
+        // The logic for reading 1, 2, 4, and 8-byte data is now explicitly conditional on the codec.
+        // For CODEC_GH3000, it relies on the 'globalMask' read from the buffer.
+        // For other Teltonika codecs (CODEC_8, CODEC_8_EXT, CODEC_16), these sections always follow the main AVL data,
+        // and their counts are directly read from the buffer without a mask.
+
         // Read 1 byte data
+        if (codec == CODEC_GH3000) {
             if (BitUtil.check(globalMask, 1)) {
                 int cnt = readExtByte(buf, codec, CODEC_8_EXT);
                 for (int j = 0; j < cnt; j++) {
                     decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 1, codec, model);
                 }
             }
+        } else { // Applies to CODEC_8, CODEC_8_EXT, CODEC_16
+            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
+            for (int j = 0; j < cnt; j++) {
+                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 1, codec, model);
+            }
+        }
 
         // Read 2 byte data
+        if (codec == CODEC_GH3000) {
             if (BitUtil.check(globalMask, 2)) {
                 int cnt = readExtByte(buf, codec, CODEC_8_EXT);
                 for (int j = 0; j < cnt; j++) {
                     decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 2, codec, model);
                 }
             }
+        } else { // Applies to CODEC_8, CODEC_8_EXT, CODEC_16
+            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
+            for (int j = 0; j < cnt; j++) {
+                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 2, codec, model);
+            }
+        }
 
         // Read 4 byte data
+        if (codec == CODEC_GH3000) {
             if (BitUtil.check(globalMask, 3)) {
                 int cnt = readExtByte(buf, codec, CODEC_8_EXT);
                 for (int j = 0; j < cnt; j++) {
                     decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 4, codec, model);
                 }
             }
+        } else { // Applies to CODEC_8, CODEC_8_EXT, CODEC_16
+            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
+            for (int j = 0; j < cnt; j++) {
+                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 4, codec, model);
+            }
+        }
 
         // Read 8 byte data
-        if (codec == CODEC_8 || codec == CODEC_8_EXT || codec == CODEC_16) {
+        // For GH3000, bit 4 of globalMask typically indicates 8-byte data presence.
+        // For CODEC_8, CODEC_8_EXT, CODEC_16, these are always present.
+        if (codec == CODEC_GH3000) {
+            if (BitUtil.check(globalMask, 4)) {
+                int cnt = readExtByte(buf, codec, CODEC_8_EXT);
+                for (int j = 0; j < cnt; j++) {
+                    decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 8, codec, model);
+                }
+            }
+        } else if (codec == CODEC_8 || codec == CODEC_8_EXT || codec == CODEC_16) {
             int cnt = readExtByte(buf, codec, CODEC_8_EXT);
             for (int j = 0; j < cnt; j++) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 8, codec, model);
             }
         }
 
         // Read 16 byte data
+        // This block is typically tied to an 'extended' mode configuration in Teltonika decoders.
+        // It's assumed that 'extended' is true only for applicable Teltonika codecs, not GH3000.
         if (extended) {
             int cnt = readExtByte(buf, codec, CODEC_8_EXT);
             for (int j = 0; j < cnt; j++) {
                 int id = readExtByte(buf, codec, CODEC_8_EXT, CODEC_16);
                 position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(16)));
             }
         }
 
         // Read X byte data
+        // This is specific to CODEC_8_EXT.
         if (codec == CODEC_8_EXT) {
             int cnt = buf.readUnsignedShort();
             for (int j = 0; j < cnt; j++) {
                 int id = buf.readUnsignedShort();
                 int length = buf.readUnsignedShort();
                 if (id == 256) {
                     position.set(Position.KEY_VIN,
                             buf.readSlice(length).toString(StandardCharsets.US_ASCII));
                 } else if (id == 281) {
                     position.set(Position.KEY_DTCS,
                             buf.readSlice(length).toString(StandardCharsets.US_ASCII).replace(',', ' '));
                 } else if (id == 385) {
                     ByteBuf data = buf.readSlice(length);
                     data.readUnsignedByte(); // data part
                     int index = 1;
                     while (data.isReadable()) {
                         int flags = data.readUnsignedByte();
                         if (BitUtil.from(flags, 4) > 0) {
                             position.set("beacon" + index + "Uuid", ByteBufUtil.hexDump(data.readSlice(16)));
                             position.set("beacon" + index + "Major", data.readUnsignedShort());
                             position.set("beacon" + index + "Minor", data.readUnsignedShort());
                         } else {
                             position.set("beacon" + index + "Namespace", ByteBufUtil.hexDump(data.readSlice(10)));
                             position.set("beacon" + index + "Instance", ByteBufUtil.hexDump(data.readSlice(6)));
                         }
                         position.set("beacon" + index + "Rssi", (int) data.readByte());
                         if (BitUtil.check(flags, 1)) {
                             position.set("beacon" + index + "Battery", data.readUnsignedShort() * 0.01);
                         }
                         if (BitUtil.check(flags, 2)) {
                             position.set("beacon" + index + "Temp", data.readUnsignedShort());
                         }
                         index += 1;
                     }
                 } else {
                     position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(length)));
                 }
             }
         }
 
         decodeNetwork(position, model);
 
     }
\ No newline at end of file
