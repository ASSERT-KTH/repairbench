diff --git a/tmp/a4b17a97-54f6-4e23-b720-349fca102127_buggy.java b/tmp/8e04dc1e-8483-4edd-a18d-265701a48833_fixed.java
index 4d0be80..8ec8142 100644
--- a/tmp/a4b17a97-54f6-4e23-b720-349fca102127_buggy.java
+++ b/tmp/8e04dc1e-8483-4edd-a18d-265701a48833_fixed.java
@@ -1,10 +1,24 @@
     @Override
     Node processForInLoop(ForInLoop loopNode) {
+        // Rhino's ForInLoop represents both 'for...in' and 'for each...in'.
+        // 'for each...in' is an unsupported language extension in Closure Compiler.
+        if (loopNode.isForEach()) {
+            // Report an error for unsupported 'for each' syntax.
+            // The parseError method in IRFactory typically calls the errorReporter,
+            // which is configured to throw an exception for fatal errors during parsing.
+            parseError("unsupported language extension: for each", loopNode);
 
-        // Return the bare minimum to put the AST in a valid state.
+            // Return an empty node as a placeholder. This return value will likely not be
+            // used if the parseError method causes an exception to be thrown immediately,
+            // which is the expected behavior for the test case.
+            return newNode(Token.EMPTY);
+        }
+
+        // Original logic for standard 'for...in' loops.
+        // Return the bare minimum to put the AST in a valid state for 'for...in'.
       return newNode(
           Token.FOR,
           transform(loopNode.getIterator()),
           transform(loopNode.getIteratedObject()),
           transformBlock(loopNode.getBody()));
     }
\ No newline at end of file
