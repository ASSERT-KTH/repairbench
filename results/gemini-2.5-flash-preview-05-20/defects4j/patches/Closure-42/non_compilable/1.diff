diff --git a/tmp/5c045ac1-5739-4605-b02c-e4aab718b1ee_buggy.java b/tmp/88429108-b0bb-45c2-8f6a-00d5e52455e8_fixed.java
index 4d0be80..59d6fdc 100644
--- a/tmp/5c045ac1-5739-4605-b02c-e4aab718b1ee_buggy.java
+++ b/tmp/88429108-b0bb-45c2-8f6a-00d5e52455e8_fixed.java
@@ -1,10 +1,22 @@
     @Override
     Node processForInLoop(ForInLoop loopNode) {
+        // "for each" is an unsupported language extension in Closure Compiler.
+        // If the AST node represents a "for each" loop (as determined by loopNode.isForEach()),
+        // an error should be reported to align with the expected behavior of the parser.
+        // The test 'testForEach' specifically expects an error for this construct.
+        if (loopNode.isForEach()) {
+            // The 'report' method (assumed to be available in the current class's context,
+            // e.g., in IRFactory) typically throws a RuntimeException upon reporting an error,
+            // which causes the parsing to fail as expected by the 'parseError' test utility.
+            // IRFactory.UNSUPPORTED_FOR_EACH is a predefined JSError for this specific issue.
+            report(IRFactory.UNSUPPORTED_FOR_EACH.forNode(loopNode));
+        }
 
-        // Return the bare minimum to put the AST in a valid state.
+        // For standard "for-in" loops (e.g., "for (var x in obj)"),
+        // transform the components into a Node with Token.FOR.
         return newNode(
             Token.FOR,
             transform(loopNode.getIterator()),
             transform(loopNode.getIteratedObject()),
             transformBlock(loopNode.getBody()));
     }
\ No newline at end of file
