diff --git a/tmp/043cd539-c895-4e08-b691-5ba32288f378_buggy.java b/tmp/87c4c19a-f125-4aea-8c51-d4afaca408c9_fixed.java
index 4d0be80..50ad9e1 100644
--- a/tmp/043cd539-c895-4e08-b691-5ba32288f378_buggy.java
+++ b/tmp/87c4c19a-f125-4aea-8c51-d4afaca408c9_fixed.java
@@ -1,10 +1,33 @@
     @Override
     Node processForInLoop(ForInLoop loopNode) {
+        // According to the test case, 'for each' loops are not supported and should
+        // trigger an error. The 'ForInLoop' AST node from Rhino can represent both
+        // standard 'for...in' and the 'for each...in' extension.
+        // We need to check if this is a 'for each' loop using the isForEach() method
+        // provided by the Rhino AstNode.
+        if (loopNode.isForEach()) {
+            // Report the unsupported language extension error.
+            // 'compiler' is a field available in the AstFactory class.
+            // We create a Node representing the source location for the error.
+            // 'newNode(Token.FOR, loopNode)' creates a new com.google.javascript.rhino.Node
+            // with Token.FOR type and copies line/column information from the
+            // original Rhino AstNode 'loopNode'. This is used as the location for the JSError.
+            compiler.report(
+                JSError.forNode(
+                    newNode(Token.FOR, loopNode), // Use the 'for' token's location
+                    com.google.javascript.jscomp.parsing.RhinoErrorReporter.UNSUPPORTED_LANGUAGE_FEATURE,
+                    "for each"));
+            // Return an empty node to allow the compilation process to continue
+            // if configured to do so (e.g., in a best-effort compilation),
+            // while ensuring the error has been registered with the compiler.
+            // The test primarily checks for the presence of this error.
+            return newNode(Token.EMPTY);
+        }
 
-        // Return the bare minimum to put the AST in a valid state.
+        // Original logic for transforming standard 'for...in' loops.
       return newNode(
           Token.FOR,
           transform(loopNode.getIterator()),
           transform(loopNode.getIteratedObject()),
           transformBlock(loopNode.getBody()));
     }
\ No newline at end of file
