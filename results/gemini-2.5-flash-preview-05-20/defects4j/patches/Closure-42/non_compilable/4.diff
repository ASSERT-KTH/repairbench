diff --git a/tmp/03d1a37b-2d42-4ede-a705-d8eb0e1df8bc_buggy.java b/tmp/888b704d-55f7-4f8c-b4a1-9cfc344673b7_fixed.java
index 4d0be80..0764000 100644
--- a/tmp/03d1a37b-2d42-4ede-a705-d8eb0e1df8bc_buggy.java
+++ b/tmp/888b704d-55f7-4f8c-b4a1-9cfc344673b7_fixed.java
@@ -1,10 +1,25 @@
     @Override
     Node processForInLoop(ForInLoop loopNode) {
+        // The 'for each' loop is an unsupported language extension in standard JavaScript.
+        // If this function is invoked with a ForEachStatementTree node, it means
+        // a 'for each' construct has been parsed.
+        // We need to report an error for such unsupported syntax.
+        if (loopNode instanceof com.google.javascript.jscomp.parsing.parser.trees.ForEachStatementTree) {
+            // Report the specific error message expected by the test.
+            // This assumes 'report' is an accessible method in the current class
+            // (e.g., in a Parser or AstFactory context).
+            report(loopNode.location, com.google.javascript.jscomp.parsing.ParserError.UNSUPPORTED_LANGUAGE_EXTENSION, "for each");
 
-        // Return the bare minimum to put the AST in a valid state.
+            // Return a dummy node to allow parsing to continue after reporting the error,
+            // preventing potential NullPointerExceptions in subsequent processing stages.
+            return newNode(com.google.javascript.rhino.Token.EMPTY);
+        }
+
+        // For a standard 'for...in' loop, proceed with the original transformation
+        // to convert the ParseTree into a Rhino Node.
       return newNode(
-          Token.FOR,
+          com.google.javascript.rhino.Token.FOR,
           transform(loopNode.getIterator()),
           transform(loopNode.getIteratedObject()),
           transformBlock(loopNode.getBody()));
     }
\ No newline at end of file
