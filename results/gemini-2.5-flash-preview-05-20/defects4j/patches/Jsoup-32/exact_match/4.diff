diff --git a/tmp/76424051-9a6c-4b90-8d1a-5952b7dbb6a3_buggy.java b/tmp/c5c00924-055f-488c-b4da-00f435a37626_fixed.java
index 91469b4..c746d26 100644
--- a/tmp/76424051-9a6c-4b90-8d1a-5952b7dbb6a3_buggy.java
+++ b/tmp/c5c00924-055f-488c-b4da-00f435a37626_fixed.java
@@ -1,6 +1,18 @@
     @Override
     public Element clone() {
+        // First, call the superclass's clone method.
+        // Node.clone() (the superclass for Element) handles cloning the 'attributes' object correctly.
         Element clone = (Element) super.clone();
-        clone.classNames();
+
+        // Element has a 'classNames' field which caches the parsed class names (a Set<String>).
+        // If the original Element's 'classNames' field was already initialized (e.g., by a prior call to classNames()),
+        // Object.clone() performs a shallow copy of this field. This means both the original
+        // and the cloned Element would share the same ClassSet instance.
+        // To ensure that modifications to the class names of the clone do not affect the original
+        // (and vice-versa), we must nullify the 'classNames' field in the cloned object.
+        // This forces the clone to re-initialize its own distinct ClassSet from its (already cloned)
+        // attributes upon the first subsequent call to 'clone.classNames()'.
+        clone.classNames = null; 
+
         return clone;
     }
\ No newline at end of file
