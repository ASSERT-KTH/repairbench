diff --git a/tmp/7c97505a-db7c-4401-9e5f-87fbffb3db33_buggy.java b/tmp/eac654c2-3371-4d9b-aefb-ca661b33911e_fixed.java
index 91469b4..4ce8662 100644
--- a/tmp/7c97505a-db7c-4401-9e5f-87fbffb3db33_buggy.java
+++ b/tmp/eac654c2-3371-4d9b-aefb-ca661b33911e_fixed.java
@@ -1,6 +1,23 @@
     @Override
     public Element clone() {
         Element clone = (Element) super.clone();
-        clone.classNames();
+        // The Attributes.clone() method, which is called indirectly by Node.clone(),
+        // performs a shallow copy of its 'classNames' field (a cached Set<String>).
+        // This means that the original Element and its clone would share the same
+        // underlying Set for class names, leading to unintended modifications
+        // affecting both elements.
+
+        // To fix this, we need to ensure that the cloned Element has its own
+        // independent Set of class names. The 'attr()' method on Element/Node,
+        // when setting the "class" attribute, has a side effect of clearing
+        // the internal classNames cache in the Attributes object.
+        // By re-setting the "class" attribute to its current value, we force
+        // the cache to be invalidated. The next call to classNames() on the
+        // cloned element will then re-parse the "class" attribute string
+        // into a new, distinct Set.
+        if (clone.attributes() != null) { // Ensure attributes exist to avoid NullPointerException, though attr() typically handles it
+            String currentClassAttr = clone.attr("class");
+            clone.attr("class", currentClassAttr); // This operation clears the classNames cache in clone.attributes
+        }
         return clone;
     }
\ No newline at end of file
