diff --git a/tmp/f3c077a2-b035-40b3-b84f-c49a418b54a7_buggy.java b/tmp/c9991c48-2122-44ec-b368-b8ba8a630d2b_fixed.java
index 91469b4..926dbd1 100644
--- a/tmp/f3c077a2-b035-40b3-b84f-c49a418b54a7_buggy.java
+++ b/tmp/c9991c48-2122-44ec-b368-b8ba8a630d2b_fixed.java
@@ -1,6 +1,24 @@
     @Override
     public Element clone() {
+        // Call the superclass's clone method to get a shallow copy of the Element.
+        // In Jsoup's standard implementation, Node.clone() (which Element.clone() inherits via super.clone())
+        // is designed to deep-copy the 'attributes' field and reset parent/siblingIndex.
+        // However, the test failure indicates that the 'classNames' (which are managed by 'attributes')
+        // are not independently copied, suggesting a shallow copy issue for 'attributes' in this specific environment,
+        // or a version of Jsoup where `super.clone()` does not fully deep-copy the attributes.
+
         Element clone = (Element) super.clone();
-        clone.classNames();
+
+        // To ensure a deep copy of class names, the underlying 'attributes' object must be
+        // a distinct instance containing a deep copy of the original's attributes.
+        // If `super.clone()` does not correctly deep-copy `attributes` in this context,
+        // we must explicitly perform that deep copy here.
+        // This ensures that modifications to the cloned element's class names do not affect the original.
+        if (attributes != null) {
+            clone.attributes = attributes.clone();
+        }
+
+        // The original line `clone.classNames();` was a no-op and has been removed.
+
         return clone;
     }
\ No newline at end of file
