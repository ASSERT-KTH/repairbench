diff --git a/tmp/09d3795f-e6d2-4fe5-a918-74b83862609c_buggy.java b/tmp/abf0fa4a-b4ce-4411-b3f6-e4a5ee2d645b_fixed.java
index 91469b4..b5e1647 100644
--- a/tmp/09d3795f-e6d2-4fe5-a918-74b83862609c_buggy.java
+++ b/tmp/abf0fa4a-b4ce-4411-b3f6-e4a5ee2d645b_fixed.java
@@ -1,6 +1,28 @@
     @Override
     public Element clone() {
+        // Get the class names from the original Element *before* performing the clone.
+        // This ensures we capture the current set of classes to be transferred.
+        Set<String> classNamesToTransfer = this.classNames();
+
+        // Perform the standard cloning process provided by the superclass (Node).
+        // Node.clone() handles the cloning of attributes via attributes.clone().
+        // However, due to the transient nature of the 'classNames' field in Attributes,
+        // the cloned attributes object might still share the same ClassAttributeSet instance
+        // with the original if it was already initialized.
         Element clone = (Element) super.clone();
-        clone.classNames();
+
+        // To ensure the cloned Element has its own independent ClassAttributeSet:
+        // 1. Explicitly clear the "class" attribute on the clone. This will force
+        //    the internal 'classNames' cache (transient field) in `clone.attributes` to be set to null.
+        //    This effectively invalidates any shared reference to the original's ClassAttributeSet.
+        clone.attributes().put("class", "");
+
+        // 2. Add back the original class names to the clone.
+        //    When `clone.classNames()` is called later, because its cache is now null,
+        //    a *new* ClassAttributeSet will be created for the clone, making it independent.
+        if (!classNamesToTransfer.isEmpty()) {
+            clone.addClass(classNamesToTransfer.toArray(new String[0]));
+        }
+
         return clone;
     }
\ No newline at end of file
