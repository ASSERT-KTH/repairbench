diff --git a/tmp/6ec302c3-ccb8-454c-89ad-4ccb964e7fbe_buggy.java b/tmp/bea4d43c-b3da-4a40-b7f4-7f50c9152099_fixed.java
index 08093b4..39c9393 100644
--- a/tmp/6ec302c3-ccb8-454c-89ad-4ccb964e7fbe_buggy.java
+++ b/tmp/bea4d43c-b3da-4a40-b7f4-7f50c9152099_fixed.java
@@ -1,42 +1,51 @@
     /**
      * Writes a PAX extended header with the given map as contents.
      * @since 1.4
      */
     void writePaxHeaders(String entryName,
                          Map<String, String> headers) throws IOException {
-        String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
+        String strippedEntryName = stripTo7Bits(entryName);
+        // The PAX extended header is a file, even if it's describing a directory entry.
+        // Therefore, its name should not end with a '/' which would make TarArchiveEntry
+        // treat it as a directory with size 0.
+        // E.g., for original entry "foo/", the PAX header name should be "./PaxHeaders.X/foo", not "./PaxHeaders.X/foo/".
+        if (strippedEntryName.endsWith("/")) {
+            strippedEntryName = strippedEntryName.substring(0, strippedEntryName.length() - 1);
+        }
+        String name = "./PaxHeaders.X/" + strippedEntryName;
+
         // TarEntry's constructor would think this is a directory
         // and not allow any data to be written
         if (name.length() >= TarConstants.NAMELEN) {
             name = name.substring(0, TarConstants.NAMELEN - 1);
         }
         TarArchiveEntry pex = new TarArchiveEntry(name,
                                                   TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
         StringWriter w = new StringWriter();
         for (Map.Entry<String, String> h : headers.entrySet()) {
             String key = h.getKey();
             String value = h.getValue();
             int len = key.length() + value.length()
                 + 3 /* blank, equals and newline */
                 + 2 /* guess 9 < actual length < 100 */;
             String line = len + " " + key + "=" + value + "\n";
             int actualLength = line.getBytes(CharsetNames.UTF_8).length;
             while (len != actualLength) {
                 // Adjust for cases where length < 10 or > 100
                 // or where UTF-8 encoding isn't a single octet
                 // per character.
                 // Must be in loop as size may go from 99 to 100 in
                 // first pass so we'd need a second.
                 len = actualLength;
                 line = len + " " + key + "=" + value + "\n";
                 actualLength = line.getBytes(CharsetNames.UTF_8).length;
             }
             w.write(line);
         }
         byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
         pex.setSize(data.length);
         putArchiveEntry(pex);
         write(data);
         closeArchiveEntry();
     }
\ No newline at end of file
