diff --git a/tmp/7b009d2a-575d-481d-a690-27c81c433071_buggy.java b/tmp/17cae86c-fd70-424a-a80c-cc559629b01d_fixed.java
index 08093b4..0786714 100644
--- a/tmp/7b009d2a-575d-481d-a690-27c81c433071_buggy.java
+++ b/tmp/17cae86c-fd70-424a-a80c-cc559629b01d_fixed.java
@@ -1,42 +1,49 @@
     /**
      * Writes a PAX extended header with the given map as contents.
      * @since 1.4
      */
     void writePaxHeaders(String entryName,
                          Map<String, String> headers) throws IOException {
-        String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
+        String baseName = stripTo7Bits(entryName);
+        // PAX headers for directories should not be treated as directories themselves.
+        // Their name must not end with a slash, otherwise TarArchiveEntry will mark
+        // them as directories, which causes TarArchiveOutputStream to not write their data.
+        if (baseName.endsWith("/")) {
+            baseName = baseName.substring(0, baseName.length() - 1);
+        }
+        String name = "./PaxHeaders.X/" + baseName;
             // TarEntry's constructor would think this is a directory
             // and not allow any data to be written
         if (name.length() >= TarConstants.NAMELEN) {
             name = name.substring(0, TarConstants.NAMELEN - 1);
         }
         TarArchiveEntry pex = new TarArchiveEntry(name,
                                                   TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
         StringWriter w = new StringWriter();
         for (Map.Entry<String, String> h : headers.entrySet()) {
             String key = h.getKey();
             String value = h.getValue();
             int len = key.length() + value.length()
                 + 3 /* blank, equals and newline */
                 + 2 /* guess 9 < actual length < 100 */;
             String line = len + " " + key + "=" + value + "\n";
             int actualLength = line.getBytes(CharsetNames.UTF_8).length;
             while (len != actualLength) {
                 // Adjust for cases where length < 10 or > 100
                 // or where UTF-8 encoding isn't a single octet
                 // per character.
                 // Must be in loop as size may go from 99 to 100 in
                 // first pass so we'd need a second.
                 len = actualLength;
                 line = len + " " + key + "=" + value + "\n";
                 actualLength = line.getBytes(CharsetNames.UTF_8).length;
             }
             w.write(line);
         }
         byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
         pex.setSize(data.length);
         putArchiveEntry(pex);
         write(data);
         closeArchiveEntry();
     }
