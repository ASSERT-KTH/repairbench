diff --git a/tmp/324dc3a4-9302-485a-bfe5-f7af246f8d55_buggy.java b/tmp/7fa1ab8a-8678-4069-9b00-a991f12109e0_fixed.java
index 08093b4..d74fd63 100644
--- a/tmp/324dc3a4-9302-485a-bfe5-f7af246f8d55_buggy.java
+++ b/tmp/7fa1ab8a-8678-4069-9b00-a991f12109e0_fixed.java
@@ -1,42 +1,77 @@
     /**
      * Writes a PAX extended header with the given map as contents.
      * @since 1.4
      */
     void writePaxHeaders(String entryName,
                          Map<String, String> headers) throws IOException {
         String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
             // TarEntry's constructor would think this is a directory
             // and not allow any data to be written
         if (name.length() >= TarConstants.NAMELEN) {
             name = name.substring(0, TarConstants.NAMELEN - 1);
         }
         TarArchiveEntry pex = new TarArchiveEntry(name,
                                                   TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
         StringWriter w = new StringWriter();
         for (Map.Entry<String, String> h : headers.entrySet()) {
             String key = h.getKey();
             String value = h.getValue();
+            // line length according to PAX specification is "length content\n"
+            // where length is the number of bytes in UTF-8 of "content\n".
+            // The value for "length" also has to be included in the total length.
+            // Estimate a value for 'len' that includes the length prefix itself.
+            // The +2 is a guess for the length of "len" if it's 1-digit or 2-digits.
             int len = key.length() + value.length()
                 + 3 /* blank, equals and newline */
                 + 2 /* guess 9 < actual length < 100 */;
             String line = len + " " + key + "=" + value + "\n";
             int actualLength = line.getBytes(CharsetNames.UTF_8).length;
             while (len != actualLength) {
                 // Adjust for cases where length < 10 or > 100
                 // or where UTF-8 encoding isn't a single octet
                 // per character.
                 // Must be in loop as size may go from 99 to 100 in
                 // first pass so we'd need a second.
                 len = actualLength;
                 line = len + " " + key + "=" + value + "\n";
                 actualLength = line.getBytes(CharsetNames.UTF_8).length;
             }
             w.write(line);
         }
         byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
         pex.setSize(data.length);
-        putArchiveEntry(pex);
-        write(data);
-        closeArchiveEntry();
+
+        // Instead of using putArchiveEntry() and closeArchiveEntry(), which can interfere
+        // with the main entry's state in TarArchiveOutputStream (currentArchiveEntry),
+        // manually write the PAX header entry as raw blocks to the underlying stream.
+        // This ensures the PAX entry is correctly written without affecting the outer archive context.
+
+        // Write the header block for the PAX entry (always 512 bytes)
+        byte[] header = pex.getHeader(); // pex.getHeader() computes the 512-byte header with correct size
+        System.arraycopy(header, 0, buffer, recordOffset, recordSize); // Assumes 'buffer', 'recordOffset', 'recordSize' are accessible
+        recordOffset += recordSize;
+        writeRecord(); // Flushes the current buffer as a record
+
+        // Write the data blocks for the PAX entry
+        int dataLen = data.length;
+        int off = 0;
+        while (dataLen > 0) {
+            int num = Math.min(dataLen, recordSize);
+            System.arraycopy(data, off, buffer, recordOffset, num);
+            recordOffset += num;
+            if (recordOffset == recordSize) {
+                writeRecord();
+                recordOffset = 0;
+            }
+            off += num;
+            dataLen -= num;
+        }
+
+        // Pad the last block if it's not full
+        if (recordOffset != 0) {
+            Arrays.fill(buffer, recordOffset, recordSize, (byte) 0);
+            writeRecord();
+            recordOffset = 0;
+        }
     }
\ No newline at end of file
