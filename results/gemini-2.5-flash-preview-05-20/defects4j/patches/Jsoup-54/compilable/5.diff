diff --git a/tmp/7b8366dd-c94b-404d-99f4-a7ef7fd286ba_buggy.java b/tmp/ee62d94d-33b2-428a-a9c6-d8631f1be21c_fixed.java
index d5b3da9..772c57b 100644
--- a/tmp/7b8366dd-c94b-404d-99f4-a7ef7fd286ba_buggy.java
+++ b/tmp/ee62d94d-33b2-428a-a9c6-d8631f1be21c_fixed.java
@@ -1,7 +1,39 @@
         private void copyAttributes(org.jsoup.nodes.Node source, Element el) {
             for (Attribute attribute : source.attributes()) {
-                // valid xml attribute names are: ^[a-zA-Z_:][-a-zA-Z0-9_:.]
-                String key = attribute.getKey().replaceAll("[^-a-zA-Z0-9_:.]", "");
-                    el.setAttribute(key, attribute.getValue());
+                String key = attribute.getKey();
+
+                // XML attribute names must conform to XML 1.0 Name production rules.
+                // A Name must start with a NameStartChar (letter, '_', or ':')
+                // and subsequent characters can be NameChar (NameStartChar, digit, '-', '.', or specific Unicode characters).
+                // The provided regex `[^-a-zA-Z0-9_:.]` was intended to remove invalid characters,
+                // but it doesn't handle the first character rule or cases where the resulting string is empty.
+
+                // Step 1: Filter out characters that are not allowed anywhere in an XML Name (ASCII subset).
+                // This regex `[^a-zA-Z0-9_:\\.\\-]` means "any character NOT a letter, digit, underscore, colon, dot, or hyphen".
+                // These are the characters generally allowed in subsequent parts of an XML name.
+                String filteredKey = key.replaceAll("[^a-zA-Z0-9_:\\.\\-]", "");
+
+                // Step 2: If the filtered key is empty after removal of invalid characters, it cannot form a valid XML name.
+                // In such cases (e.g., original key was just '"'), skip the attribute to prevent DOMException.
+                if (filteredKey.isEmpty()) {
+                    continue;
+                }
+
+                // Step 3: Ensure the first character of the key is a valid XML NameStartChar.
+                // A valid NameStartChar (for ASCII) is a letter (a-z, A-Z), underscore '_', or colon ':'.
+                String validKey;
+                char firstChar = filteredKey.charAt(0);
+
+                if (!(Character.isLetter(firstChar) || firstChar == '_' || firstChar == ':')) {
+                    // If the first character is invalid (e.g., a digit, hyphen, or dot), prepend an underscore.
+                    // This ensures the resulting key starts with a valid XML NameStartChar.
+                    validKey = "_" + filteredKey;
+                } else {
+                    // If the first character is already valid, use the filtered key as is.
+                    validKey = filteredKey;
+                }
+
+                // Step 4: Set the attribute with the validated key and its original value.
+                el.setAttribute(validKey, attribute.getValue());
             }
         }
\ No newline at end of file
