diff --git a/tmp/47d8176c-bf4f-4087-85da-0955a5542f10_buggy.java b/tmp/1d1973f3-7436-43ca-baf7-956ab33b1c9b_fixed.java
index d5b3da9..3d92ff4 100644
--- a/tmp/47d8176c-bf4f-4087-85da-0955a5542f10_buggy.java
+++ b/tmp/1d1973f3-7436-43ca-baf7-956ab33b1c9b_fixed.java
@@ -1,7 +1,33 @@
         private void copyAttributes(org.jsoup.nodes.Node source, Element el) {
             for (Attribute attribute : source.attributes()) {
-                // valid xml attribute names are: ^[a-zA-Z_:][-a-zA-Z0-9_:.]
-                String key = attribute.getKey().replaceAll("[^-a-zA-Z0-9_:.]", "");
-                    el.setAttribute(key, attribute.getValue());
+                String key = attribute.getKey();
+                
+                // XML attribute names must follow specific rules:
+                // 1. The first character must be a letter (a-z, A-Z), an underscore (_), or a colon (:).
+                // 2. Subsequent characters can be letters, digits (0-9), underscores (_), hyphens (-), colons (:), or periods (.).
+                // 3. The name cannot be empty.
+
+                // First, remove any characters that are not allowed anywhere in an XML name.
+                // The regex `[^-a-zA-Z0-9_:.]` matches characters that are NOT: hyphen, letter, digit, underscore, colon, or period.
+                String cleanedKey = key.replaceAll("[^-a-zA-Z0-9_:.]", "");
+
+                // If, after cleaning, the key is empty, it cannot form a valid XML name. Skip this attribute.
+                if (cleanedKey.isEmpty()) {
+                    continue;
+                }
+
+                // Check the first character rule. If it's not a letter, underscore, or colon, prepend an underscore.
+                char firstChar = cleanedKey.charAt(0);
+                if (!Character.isLetter(firstChar) && firstChar != '_' && firstChar != ':') {
+                    cleanedKey = "_" + cleanedKey;
+                }
+
+                // If the key is still empty after prepending (which should not happen if cleanedKey wasn't empty)
+                // or if it somehow becomes invalid, an exception could still occur.
+                // However, with the above logic, cleanedKey will always start with an underscore if it was invalid,
+                // or with a valid NameStartChar if it was already valid or made so.
+                // An empty cleanedKey is already handled above.
+
+                el.setAttribute(cleanedKey, attribute.getValue());
             }
         }
\ No newline at end of file
