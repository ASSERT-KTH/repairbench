diff --git a/tmp/b1e2785c-53dc-4047-83ac-91277063b269_buggy.java b/tmp/202c2bf3-4516-4300-8d4f-c39ec03f07ba_fixed.java
index d5b3da9..ed47af9 100644
--- a/tmp/b1e2785c-53dc-4047-83ac-91277063b269_buggy.java
+++ b/tmp/202c2bf3-4516-4300-8d4f-c39ec03f07ba_fixed.java
@@ -1,7 +1,48 @@
         private void copyAttributes(org.jsoup.nodes.Node source, Element el) {
             for (Attribute attribute : source.attributes()) {
-                // valid xml attribute names are: ^[a-zA-Z_:][-a-zA-Z0-9_:.]
-                String key = attribute.getKey().replaceAll("[^-a-zA-Z0-9_:.]", "");
-                    el.setAttribute(key, attribute.getValue());
+                String currentKey = attribute.getKey();
+                StringBuilder validKeyBuilder = new StringBuilder();
+                boolean firstCharHandled = false; // Flag to indicate if the first character rule has been applied
+
+                for (int i = 0; i < currentKey.length(); i++) {
+                    char c = currentKey.charAt(i);
+
+                    if (!firstCharHandled) {
+                        // Handle the first character of the XML attribute name
+                        // XML attribute names must start with a letter, '_', or ':'.
+                        if (Character.isLetter(c) || c == '_' || c == ':') {
+                            validKeyBuilder.append(c);
+                            firstCharHandled = true;
+                        } else if (Character.isDigit(c) || c == '-' || c == '.') {
+                            // If the original name starts with a digit, hyphen, or dot,
+                            // prepend an underscore to make it a valid XML name start.
+                            validKeyBuilder.append('_');
+                            validKeyBuilder.append(c);
+                            firstCharHandled = true;
+                        }
+                        // If it's any other invalid starting character (e.g., ' ', '"'), skip it
+                        // and wait for a valid start character.
+                        // If no valid start character is found throughout the string,
+                        // validKeyBuilder will remain empty, and the attribute will be skipped.
+                    } else {
+                        // Handle subsequent characters of the XML attribute name
+                        // They can be letters, digits, '_', ':', '-', '.'
+                        if (Character.isLetterOrDigit(c) || c == '_' || c == ':' || c == '-' || c == '.') {
+                            validKeyBuilder.append(c);
+                        }
+                        // Otherwise, skip invalid characters
+                    }
+                }
+
+                String finalKey = validKeyBuilder.toString();
+
+                // If after sanitization the key is empty, it means no valid XML name could be formed.
+                // In this case, skip setting the attribute as it's not possible to create a valid one.
+                if (finalKey.isEmpty()) {
+                    continue;
+                }
+
+                // Set the attribute with the sanitized (and now valid) XML name
+                el.setAttribute(finalKey, attribute.getValue());
             }
         }
\ No newline at end of file
