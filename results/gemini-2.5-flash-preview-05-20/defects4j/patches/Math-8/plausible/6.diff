diff --git a/tmp/cfa71d4b-5cad-4870-b4a5-785d0d8b0872_buggy.java b/tmp/dfcd98d8-d41d-45c0-8b68-282a6191ce6e_fixed.java
index bfa2423..576c9d2 100644
--- a/tmp/cfa71d4b-5cad-4870-b4a5-785d0d8b0872_buggy.java
+++ b/tmp/dfcd98d8-d41d-45c0-8b68-282a6191ce6e_fixed.java
@@ -1,23 +1,34 @@
     /**
      * Generate a random sample from the distribution.
      *
      * @param sampleSize the number of random values to generate.
      * @return an array representing the random sample.
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not
      * positive.
      */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+        // The original code used singletons.get(0).getClass() to determine the component type
+        // of the array. This can lead to an ArrayStoreException if the 'sample()' method returns
+        // an instance of 'T' that is of a different concrete (e.g., anonymous) class than
+        // the class of singletons.get(0). For generic types like 'Object', where 'T' can be a
+        // wide variety of specific anonymous classes (as in testIssue942), creating an array
+        // of a specific anonymous class is too restrictive.
+        //
+        // The most robust way to create an array of a generic type T when T can be Object
+        // or an interface, and the concrete instances can vary, is to create an Object[]
+        // and cast it to T[]. This is safe because all elements returned by sample()
+        // are guaranteed to be of type T (and thus compatible with Object).
+        final T[] out = (T[]) java.lang.reflect.Array.newInstance(Object.class, sampleSize);
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
         }
 
         return out;
 
     }
\ No newline at end of file
