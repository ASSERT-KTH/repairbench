diff --git a/tmp/bafb2931-9264-4e22-b00f-402ba4faf1d8_buggy.java b/tmp/7663763b-5be3-4d3a-93bc-2cb1479023be_fixed.java
index bfa2423..6524e0e 100644
--- a/tmp/bafb2931-9264-4e22-b00f-402ba4faf1d8_buggy.java
+++ b/tmp/7663763b-5be3-4d3a-93bc-2cb1479023be_fixed.java
@@ -1,23 +1,40 @@
     /**
      * Generate a random sample from the distribution.
      *
      * @param sampleSize the number of random values to generate.
      * @return an array representing the random sample.
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not
      * positive.
      */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+        // The original code used singletons.get(0).getClass() to determine the component type
+        // of the array. This can lead to a java.lang.ArrayStoreException if the 'singletons'
+        // list (which holds the items from the distribution) contains instances of different
+        // concrete (e.g., anonymous) classes, even if they are all assignable to the generic
+        // type T.
+        // For example, if T is Object, and the distribution was built from items A and B,
+        // where A and B are instances of different anonymous classes (e.g., new Object(){}),
+        // then singletons.get(0).getClass() might yield ClassA.class. If the array is
+        // then created as ClassA[], an attempt to store an instance of ClassB (returned by sample())
+        // will result in an ArrayStoreException.
+        //
+        // To fix this, the array should be created using the most general possible component type,
+        // which is Object.class. This ensures that any object (including instances of different
+        // anonymous classes or other concrete types that are assignable to T) can be stored
+        // in the array without a runtime ArrayStoreException. The cast to T[] is safe due
+        // to type erasure and will only be a compile-time check; the runtime type of the
+        // array will be Object[].
+        final T[]out = (T[]) java.lang.reflect.Array.newInstance(Object.class, sampleSize);
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
         }
 
         return out;
 
     }
\ No newline at end of file
