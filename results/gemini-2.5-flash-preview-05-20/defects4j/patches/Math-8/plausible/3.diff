diff --git a/tmp/990f2c95-a693-42e8-a966-55fbc953df26_buggy.java b/tmp/04d285ab-8a39-423a-980f-beba1260084d_fixed.java
index bfa2423..17a9e4a 100644
--- a/tmp/990f2c95-a693-42e8-a966-55fbc953df26_buggy.java
+++ b/tmp/04d285ab-8a39-423a-980f-beba1260084d_fixed.java
@@ -1,23 +1,50 @@
     /**
      * Generate a random sample from the distribution.
      *
      * @param sampleSize the number of random values to generate.
      * @return an array representing the random sample.
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not
      * positive.
      */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+        // Determine the common superclass for all elements in 'singletons'
+        // to correctly create the generic array.
+        // This is necessary because T is type-erased and singletons can contain
+        // instances of different runtime classes (e.g., anonymous classes
+        // or subclasses) that all conform to T.
+        // Array.newInstance requires a specific Class<?> for the component type.
+        // If singletons.get(0).getClass() is used, and a later sampled item
+        // has a different runtime class (even if compatible with T),
+        // an ArrayStoreException can occur if the array was created with a too-specific component type.
+        // Initialize with the class of the first element.
+        Class<?> componentType = singletons.get(0).getClass();
+        // Iterate through the rest of the elements to find the common superclass.
+        for (int i = 1; i < singletons.size(); i++) {
+            Class<?> currentClass = singletons.get(i).getClass();
+            // Move componentType up the inheritance hierarchy until it can assign currentClass.
+            while (!componentType.isAssignableFrom(currentClass)) {
+                componentType = componentType.getSuperclass();
+                if (componentType == null) {
+                    // This should theoretically not be reached before componentType becomes Object.class,
+                    // as Object is the ultimate superclass of all classes.
+                    // Fallback to Object.class if somehow no common superclass is found early.
+                    componentType = Object.class;
+                    break;
+                }
+            }
+        }
+
+        final T[]out = (T[]) java.lang.reflect.Array.newInstance(componentType, sampleSize);
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
         }
 
         return out;
 
     }
