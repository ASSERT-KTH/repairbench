diff --git a/tmp/41d6717e-dde3-4c54-b9e3-164c8b1ae267_buggy.java b/tmp/992841fe-1eaf-4974-9a82-b2694134a956_fixed.java
index bfa2423..d7d71c2 100644
--- a/tmp/41d6717e-dde3-4c54-b9e3-164c8b1ae267_buggy.java
+++ b/tmp/992841fe-1eaf-4974-9a82-b2694134a956_fixed.java
@@ -1,23 +1,39 @@
     /**
      * Generate a random sample from the distribution.
      *
      * @param sampleSize the number of random values to generate.
      * @return an array representing the random sample.
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not
      * positive.
      */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+        // The original implementation used singletons.get(0).getClass() to determine the
+        // component type for the array. This is problematic because the actual runtime
+        // type of singletons.get(0) might be a specific subtype (e.g., an anonymous class
+        // or Integer) of the generic type T (e.g., Object or Number).
+        // If subsequent calls to sample() (the no-argument method) return elements
+        // that are also of type T but are not assignable to the specific class of
+        // singletons.get(0) (e.g., another distinct anonymous class, or a Double when
+        // the array is Integer[]), an ArrayStoreException occurs.
+        //
+        // To fix this, we create an array of Object. This is a common workaround for
+        // generic array creation due to type erasure, as Object[] can hold any T.
+        // The cast to T[] will be an unchecked cast, but it correctly addresses
+        // the ArrayStoreException during the population of the array.
+        final Object[] out = new Object[sampleSize];
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
         }
 
-        return out;
-
+        // Suppress the unchecked cast warning, as this is the standard way to
+        // create a generic array when the Class<T> is not available at runtime.
+        @SuppressWarnings("unchecked")
+        final T[] typedOut = (T[]) out;
+        return typedOut;
     }
\ No newline at end of file
