diff --git a/tmp/5ee4e5e8-aeb9-41cf-9907-db6bd3e07d8d_buggy.java b/tmp/d9f2ee6c-e5df-49bf-a35b-90a22090532d_fixed.java
index bfa2423..6309190 100644
--- a/tmp/5ee4e5e8-aeb9-41cf-9907-db6bd3e07d8d_buggy.java
+++ b/tmp/d9f2ee6c-e5df-49bf-a35b-90a22090532d_fixed.java
@@ -1,23 +1,31 @@
     /**
      * Generate a random sample from the distribution.
      *
      * @param sampleSize the number of random values to generate.
      * @return an array representing the random sample.
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not
      * positive.
      */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+        // The original code used singletons.get(0).getClass() to determine the array component type.
+        // This resulted in an ArrayStoreException because singletons.get(0) returns a Pair<T, Double>,
+        // so singletons.get(0).getClass() returns Pair.class.
+        // However, the sample() method (called in the loop) returns an object of type T,
+        // which cannot be stored in a Pair[] array if T is not a Pair.
+        // Due to type erasure, the exact Class<T> is not directly available at runtime for generic T.
+        // The most robust way to create a generic array T[] is to create an Object[] array
+        // and cast it to T[]. This is safe because any object of type T can be stored in an Object[] array.
+        final T[]out = (T[]) java.lang.reflect.Array.newInstance(Object.class, sampleSize);
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
         }
 
         return out;
 
     }
\ No newline at end of file
