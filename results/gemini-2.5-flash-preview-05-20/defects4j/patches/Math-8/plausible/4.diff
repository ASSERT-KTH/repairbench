diff --git a/tmp/903b82b3-e03c-4d92-a4b6-c0204d0897d1_buggy.java b/tmp/e587842a-2a2a-4149-898c-eb13b8f73c0c_fixed.java
index bfa2423..0b63eb5 100644
--- a/tmp/903b82b3-e03c-4d92-a4b6-c0204d0897d1_buggy.java
+++ b/tmp/e587842a-2a2a-4149-898c-eb13b8f73c0c_fixed.java
@@ -1,23 +1,33 @@
     /**
      * Generate a random sample from the distribution.
      *
      * @param sampleSize the number of random values to generate.
      * @return an array representing the random sample.
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not
      * positive.
      */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+        // The original code used singletons.get(0).getClass() to determine the array component type.
+        // This can lead to an ArrayStoreException if 'T' is a supertype (e.g., Object, Number)
+        // and the actual instances returned by 'sample()' are of different, incompatible
+        // concrete subtypes (e.g., two different anonymous classes, or an Integer and a Double
+        // when T is Number).
+        //
+        // To fix this, we create an array of Object type and then cast it to T[].
+        // Due to Java's type erasure, the runtime type of the array will be Object[],
+        // which can hold any Object (including instances of type T). This is a common
+        // and safe pattern for creating generic arrays.
+        final T[]out = (T[]) new Object[sampleSize];
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
         }
 
         return out;
 
     }
\ No newline at end of file
