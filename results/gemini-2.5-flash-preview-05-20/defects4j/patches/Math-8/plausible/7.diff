diff --git a/tmp/7839c8c4-6a55-4306-a15a-5d1d3e5b76cc_buggy.java b/tmp/8c0bfdd1-5c20-498b-9a6e-f44d51a7132b_fixed.java
index bfa2423..5770d22 100644
--- a/tmp/7839c8c4-6a55-4306-a15a-5d1d3e5b76cc_buggy.java
+++ b/tmp/8c0bfdd1-5c20-498b-9a6e-f44d51a7132b_fixed.java
@@ -1,23 +1,38 @@
     /**
      * Generate a random sample from the distribution.
      *
      * @param sampleSize the number of random values to generate.
      * @return an array representing the random sample.
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not
      * positive.
      */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+        // The original code used singletons.get(0).getClass() to determine the component type
+        // of the array. This is problematic because singletons.get(0).getClass() returns the
+        // *runtime* class of the first element, which can be a specific subclass of the
+        // generic type T (e.g., an anonymous class or a subclass like Integer when T is Number).
+        // If subsequent calls to sample() return instances of a *different* subclass of T,
+        // or T itself, an ArrayStoreException can occur if that type is not assignable to
+        // the specific runtime class of the array.
+        //
+        // To fix this, we should create an array of the most general type T can represent,
+        // which is Object.class, and then cast it to T[]. This is generally safe in Java
+        // due to type erasure, as the sample() method (without arguments) is expected
+        // to return elements of type T, and any T is assignable to Object.
+        // The cast (T[]) will result in an unchecked cast warning, but it's a common and
+        // often necessary pattern when creating generic arrays via reflection without
+        // an explicit Class<T> token.
+        final T[]out = (T[]) java.lang.reflect.Array.newInstance(Object.class, sampleSize);
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
         }
 
         return out;
 
     }
\ No newline at end of file
