diff --git a/tmp/c1ef6933-9abb-4083-8a99-998ba2751ea1_buggy.java b/tmp/280fe10b-08a8-4d84-a87c-4013447a4ff7_fixed.java
index 07b0792..6198bc6 100644
--- a/tmp/c1ef6933-9abb-4083-8a99-998ba2751ea1_buggy.java
+++ b/tmp/280fe10b-08a8-4d84-a87c-4013447a4ff7_fixed.java
@@ -1,22 +1,40 @@
     /**
      * @return Whether the variable is only assigned a value once for its
      *     lifetime.
      */
     boolean isAssignedOnceInLifetime() {
       Reference ref = getOneAndOnlyAssignment();
       if (ref == null) {
         return false;
       }
 
       // Make sure this assignment is not in a loop.
+      // Also, if the assignment is inside a function and the variable is
+      // not local to that function, it's not assigned once in its lifetime
+      // (as the function can be called multiple times).
       for (BasicBlock block = ref.getBasicBlock();
            block != null; block = block.getParent()) {
-        if (block.isFunction) {
+        if (block.isLoop) {
+          return false;
+        } else if (block.isFunction) {
+          // If the variable's declaration scope (this.scope) is different from
+          // the current function's scope (block.getScope()), it means it's a
+          // non-local variable (global or from an outer function's scope).
+          // An assignment to such a variable inside a function does not
+          // guarantee "once in lifetime" because the function can be called
+          // multiple times, leading to multiple assignments.
+          // 'this' refers to the Var object for which this method is called.
+          if (this.scope != block.getScope()) {
+            return false;
+          }
+          // If the variable is local to this function (this.scope == block.getScope()),
+          // then the assignment happens once per invocation of this function.
+          // Since the variable's lifetime is tied to this function's invocation,
+          // it is considered assigned once in its lifetime. So we can stop
+          // traversing parent blocks.
           break;
-        } else if (block.isLoop) {
-          return false;
         }
       }
 
       return true;
     }
\ No newline at end of file
