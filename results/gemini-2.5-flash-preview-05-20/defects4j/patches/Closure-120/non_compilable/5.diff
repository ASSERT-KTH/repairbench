diff --git a/tmp/87776cc5-271f-4341-a850-9a88d34f4d54_buggy.java b/tmp/e76adc43-7adb-4285-bcdb-318a7035d078_fixed.java
index 07b0792..81049a3 100644
--- a/tmp/87776cc5-271f-4341-a850-9a88d34f4d54_buggy.java
+++ b/tmp/e76adc43-7adb-4285-bcdb-318a7035d078_fixed.java
@@ -1,22 +1,37 @@
     /**
      * @return Whether the variable is only assigned a value once for its
      *     lifetime.
      */
     boolean isAssignedOnceInLifetime() {
       Reference ref = getOneAndOnlyAssignment();
       if (ref == null) {
         return false;
       }
 
       // Make sure this assignment is not in a loop.
+      // Additionally, for global variables, ensure the assignment is not inside a function,
+      // as functions can be called multiple times, violating the "assigned once" rule.
       for (BasicBlock block = ref.getBasicBlock();
            block != null; block = block.getParent()) {
         if (block.isFunction) {
-          break;
+          // If the variable is global and its only assignment is inside this function,
+          // it's not truly "assigned once for its lifetime" as the function might be
+          // called multiple times (e.g., recursively or in a loop that calls the function).
+          // For local variables, it's fine, as each invocation of the function creates
+          // a new instance of the variable, which is assigned only once within its
+          // own specific lifetime.
+          if (this.getScope().isGlobal()) { // 'this' is assumed to be the Var object
+            return false;
+          }
+          // If the variable is not global (i.e., local to this function or an outer non-global scope),
+          // and the assignment is within this function, and we didn't find any lexical loops
+          // up to this point, then it's generally considered fine to inline.
+          break; // Stop at the function boundary, as checks within the function's scope are complete.
         } else if (block.isLoop) {
+          // The assignment is found to be inside a lexical loop.
           return false;
         }
       }
 
       return true;
     }
\ No newline at end of file
