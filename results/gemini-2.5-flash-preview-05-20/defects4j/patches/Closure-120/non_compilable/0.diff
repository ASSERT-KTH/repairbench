diff --git a/tmp/35f7738f-0bfa-4ef5-81e1-36e99c8d5981_buggy.java b/tmp/96b57454-2da9-420c-bb4d-435ed746f9d0_fixed.java
index 07b0792..9cd940f 100644
--- a/tmp/35f7738f-0bfa-4ef5-81e1-36e99c8d5981_buggy.java
+++ b/tmp/96b57454-2da9-420c-bb4d-435ed746f9d0_fixed.java
@@ -1,22 +1,46 @@
     /**
      * @return Whether the variable is only assigned a value once for its
      *     lifetime.
      */
     boolean isAssignedOnceInLifetime() {
       Reference ref = getOneAndOnlyAssignment();
       if (ref == null) {
+        // If there's no single assignment (e.g., multiple assignments),
+        // it's not assigned once.
         return false;
       }
 
-      // Make sure this assignment is not in a loop.
+      // Flag to track if the assignment is found within a function's scope.
+      boolean inFunction = false;
+
+      // Make sure this assignment is not in an explicit loop structure.
+      // We traverse up the basic block hierarchy from the assignment node.
       for (BasicBlock block = ref.getBasicBlock();
            block != null; block = block.getParent()) {
         if (block.isFunction) {
+          // We've reached a function boundary. Mark that the assignment is within a function.
+          inFunction = true;
+          // Stop traversing further up once a function boundary is found,
+          // as we are concerned about loops or function calls relative to this function.
           break;
         } else if (block.isLoop) {
+          // If the assignment is directly inside a loop block, it's not assigned once.
           return false;
         }
       }
 
+      // Additional check:
+      // If the variable is not local to its scope (e.g., a global variable or
+      // a variable from an outer scope), and its only assignment is inside
+      // a function, we cannot guarantee it's assigned only once in its lifetime.
+      // This is because the function might be called multiple times (e.g., recursively
+      // or from multiple call sites), leading to multiple assignments to the same
+      // variable instance. This is a conservative but necessary check for correct inlining.
+      if (!getScope().isLocal() && inFunction) {
+        return false;
+      }
+
+      // If no explicit loop was found and the non-local variable check passes,
+      // then it's considered assigned once in its lifetime.
       return true;
     }
