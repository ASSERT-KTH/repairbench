diff --git a/tmp/aaf683c0-3039-4c38-a10d-519e6a813e5d_buggy.java b/tmp/f6f560fb-16e2-4066-9264-485d0b9ec504_fixed.java
index 07b0792..3f35872 100644
--- a/tmp/aaf683c0-3039-4c38-a10d-519e6a813e5d_buggy.java
+++ b/tmp/f6f560fb-16e2-4066-9264-485d0b9ec504_fixed.java
@@ -1,22 +1,48 @@
     /**
      * @return Whether the variable is only assigned a value once for its
      *     lifetime.
      */
     boolean isAssignedOnceInLifetime() {
       Reference ref = getOneAndOnlyAssignment();
       if (ref == null) {
         return false;
       }
 
+      Var varToTest = ref.getVar();
+      boolean insideFunction = false;
+
       // Make sure this assignment is not in a loop.
+      // Traverse up the basic block hierarchy from the assignment.
       for (BasicBlock block = ref.getBasicBlock();
            block != null; block = block.getParent()) {
         if (block.isFunction) {
-          break;
+          // We found the enclosing function block.
+          // If the variable being assigned is global (or effectively non-local to this function's scope),
+          // and the assignment happens inside this function, then the assignment can occur
+          // multiple times if the function is called multiple times (e.g., recursively, or in a loop, etc.).
+          // In such cases, the variable is not assigned once in its lifetime.
+          // For local variables, their "lifetime" is tied to a single function call,
+          // so this check doesn't apply to them.
+          insideFunction = true;
+          break; // Stop climbing up once we hit the function boundary
         } else if (block.isLoop) {
+          // The assignment is directly inside a syntactic loop.
+          // This means it can be executed multiple times.
           return false;
         }
       }
 
+      // If the assignment is within a function and the variable is global,
+      // it means a global variable is assigned inside a function.
+      // Such an assignment can happen multiple times if the function is called multiple times.
+      if (insideFunction && varToTest.isGlobal()) {
+        return false;
+      }
+
+      // If we reach here, it means:
+      // 1. There's exactly one syntactic assignment.
+      // 2. That assignment is not within a syntactic loop.
+      // 3. If it's a global variable, its assignment is not inside a function.
+      //    (Or, if it's a local variable, its assignment is once per its function's execution).
       return true;
     }
\ No newline at end of file
