diff --git a/tmp/e7ef60b1-7e87-4431-bcc2-41ddfefada0a_buggy.java b/tmp/9f1eefa7-44eb-4194-9fa1-6b847c8c6f54_fixed.java
index 07b0792..72fce99 100644
--- a/tmp/e7ef60b1-7e87-4431-bcc2-41ddfefada0a_buggy.java
+++ b/tmp/9f1eefa7-44eb-4194-9fa1-6b847c8c6f54_fixed.java
@@ -1,22 +1,55 @@
     /**
      * @return Whether the variable is only assigned a value once for its
      *     lifetime.
      */
     boolean isAssignedOnceInLifetime() {
+      // Assuming this method is called on a Var object (or similar representation
+      // of a variable), so 'this' can access properties like isGlobal().
+      // If not, a 'Var' object would need to be passed in or accessed via 'ref.getVar()'.
+
       Reference ref = getOneAndOnlyAssignment();
       if (ref == null) {
+        // Variable is either never assigned, or assigned more than once statically.
         return false;
       }
 
-      // Make sure this assignment is not in a loop.
+      boolean assignmentInFunction = false;
+      // Traverse up the basic block hierarchy from the assignment.
+      // Check if the assignment is inside an explicit loop or inside a function.
       for (BasicBlock block = ref.getBasicBlock();
            block != null; block = block.getParent()) {
         if (block.isFunction) {
+          // The assignment is enclosed within a function definition.
+          assignmentInFunction = true;
+          // We found the enclosing function. For the purpose of determining if
+          // the assignment is within *any* function, we can stop climbing.
+          // The `block.isLoop` check handles cases where the function block itself
+          // might be implicitly within a loop (e.g., function defined in a loop).
           break;
         } else if (block.isLoop) {
+          // The assignment is directly within an explicit loop construct (e.g., for, while, do-while).
+          // This means it can be executed multiple times within a single scope.
           return false;
         }
       }
 
+      // Special handling for global variables whose only assignment is inside a function.
+      // If a global variable's single static assignment occurs within a function,
+      // it means the assignment executes every time that function is called.
+      // If the function is called multiple times (e.g., recursively, or from a loop),
+      // the global variable is effectively assigned multiple times over the program's lifetime.
+      // This addresses the issue seen in testExternalIssue1053, where 'u' is global
+      // and assigned inside a recursive function 'f()'.
+      if (assignmentInFunction && this.isGlobal()) {
+        return false;
+      }
+
+      // If we reach here, it means:
+      // 1. There is exactly one static assignment for the variable (`getOneAndOnlyAssignment() != null`).
+      // 2. That assignment is not directly within an explicit loop.
+      // 3. If the variable is global, its assignment is not inside a function. (This covers the global recursive function case).
+      // 4. If the variable is local (i.e., `!this.isGlobal()`), its assignment can be inside a function.
+      //    For local variables, "once in lifetime" typically refers to within a single invocation
+      //    of their enclosing function, which is handled correctly by the `block.isLoop` check.
       return true;
     }
\ No newline at end of file
