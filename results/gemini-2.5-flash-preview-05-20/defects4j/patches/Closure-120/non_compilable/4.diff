diff --git a/tmp/8e62df0e-0528-45c3-9d9c-83a114bec73d_buggy.java b/tmp/604afe69-743d-4062-a012-b31083c84c86_fixed.java
index 07b0792..253b8c0 100644
--- a/tmp/8e62df0e-0528-45c3-9d9c-83a114bec73d_buggy.java
+++ b/tmp/604afe69-743d-4062-a012-b31083c84c86_fixed.java
@@ -1,22 +1,64 @@
     /**
      * @return Whether the variable is only assigned a value once for its
      *     lifetime.
      */
     boolean isAssignedOnceInLifetime() {
       Reference ref = getOneAndOnlyAssignment();
       if (ref == null) {
         return false;
       }
 
       // Make sure this assignment is not in a loop.
+      // Also, make sure it's not in a recursive function.
       for (BasicBlock block = ref.getBasicBlock();
            block != null; block = block.getParent()) {
         if (block.isFunction) {
+          // This 'block' is the entry block for the function containing the assignment.
+          // To check for recursion, we need the actual FUNCTION Node from the AST,
+          // not just the BasicBlock representing its control flow.
+          // We can find the containing FUNCTION node by traversing the AST parents from the assignment node.
+          Node assignmentNode = ref.getAssignment();
+          Node functionNode = assignmentNode;
+          while (functionNode != null && !functionNode.isFunction()) {
+            functionNode = functionNode.getParent();
+          }
+
+          // If no function node is found (e.g., it's a top-level script assignment,
+          // or an unexpected AST structure), be conservative.
+          if (functionNode == null) {
+            return false;
+          }
+
+          // Get access to the AbstractCompiler and its CallGraph to check for recursion.
+          // Assuming 'this' (Var) can access its Scope, and Scope can access the Compiler.
+          // These are standard patterns in Closure Compiler for accessing global analyses.
+          AbstractCompiler compiler = getScope().getCompiler();
+          if (compiler == null) {
+            // If compiler context is not available, we cannot reliably determine recursion.
+            // Be conservative and assume it might be assigned multiple times.
+            return false;
+          }
+
+          CallGraph callGraph = compiler.getCallGraph();
+          if (callGraph == null) {
+            // If call graph analysis was not performed, we cannot determine recursion.
+            // Be conservative and assume it might be assigned multiple times.
+            return false;
+          }
+
+          // Check if the function containing this assignment is recursive.
+          // If it is, the assignment can execute multiple times.
+          if (callGraph.isRecursive(functionNode)) {
+            return false;
+          }
+
+          // We've found the function scope. No need to go further up the BasicBlock parent chain.
           break;
         } else if (block.isLoop) {
+          // The assignment is inside an explicit loop, so it can be executed multiple times.
           return false;
         }
       }
 
       return true;
     }
\ No newline at end of file
