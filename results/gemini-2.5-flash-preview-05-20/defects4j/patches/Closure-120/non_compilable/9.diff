diff --git a/tmp/111d05d1-4c97-4751-8b92-6f4b6fd02ecd_buggy.java b/tmp/3e4d96b0-f1ff-4cf7-af43-02de615b4fb0_fixed.java
index 07b0792..30c37ea 100644
--- a/tmp/111d05d1-4c97-4751-8b92-6f4b6fd02ecd_buggy.java
+++ b/tmp/3e4d96b0-f1ff-4cf7-af43-02de615b4fb0_fixed.java
@@ -1,22 +1,39 @@
     /**
      * @return Whether the variable is only assigned a value once for its
      *     lifetime.
      */
     boolean isAssignedOnceInLifetime() {
       Reference ref = getOneAndOnlyAssignment();
       if (ref == null) {
         return false;
       }
 
       // Make sure this assignment is not in a loop.
+      // Additionally, if the variable is global, its single assignment should not
+      // be within a function, as that function might be called multiple times,
+      // invalidating the "assigned once in lifetime" property for a global variable.
       for (BasicBlock block = ref.getBasicBlock();
            block != null; block = block.getParent()) {
         if (block.isFunction) {
+          // If the assignment is within a function:
+          // For local variables, an assignment once within their function's scope is
+          // considered "once in lifetime" for that specific function activation.
+          // For global variables, however, if their only assignment occurs inside
+          // a function, and that function can be called multiple times (e.g., recursively,
+          // or in a loop, or simply multiple times from different call sites),
+          // then the global variable is effectively assigned multiple times over
+          // its program lifetime.
+          if (this.isGlobal()) {
+            return false;
+          }
+          // For non-global (i.e., local) variables, reaching a function block means
+          // the assignment is within its defined scope, and the loop check is complete.
           break;
         } else if (block.isLoop) {
+          // If the assignment is within a loop, it can be executed multiple times.
           return false;
         }
       }
 
       return true;
     }
\ No newline at end of file
