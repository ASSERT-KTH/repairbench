diff --git a/tmp/cd79bf04-6863-4719-897a-7a0f91dcd314_buggy.java b/tmp/f810c397-84a4-4f7f-9885-f6fb6fac9d03_fixed.java
index 07b0792..bd6813f 100644
--- a/tmp/cd79bf04-6863-4719-897a-7a0f91dcd314_buggy.java
+++ b/tmp/f810c397-84a4-4f7f-9885-f6fb6fac9d03_fixed.java
@@ -1,22 +1,37 @@
     /**
      * @return Whether the variable is only assigned a value once for its
      *     lifetime.
      */
     boolean isAssignedOnceInLifetime() {
       Reference ref = getOneAndOnlyAssignment();
       if (ref == null) {
         return false;
       }
 
       // Make sure this assignment is not in a loop.
       for (BasicBlock block = ref.getBasicBlock();
            block != null; block = block.getParent()) {
         if (block.isFunction) {
+          // If the variable is local to this function, it's considered assigned once
+          // for its lifetime within a single call of this function.
+          // Example: function f() { var x = 1; } - 'x' is assigned once per call.
+          if (ref.getVar().getScope() == block.getScope()) {
+            // Variable is local to this function's scope. This is a valid single assignment.
             break;
+          } else {
+            // The variable is not local to this function (e.g., global, or an outer-scoped variable).
+            // If a non-local variable is assigned inside a function, it means it can be
+            // assigned multiple times if that function is called more than once
+            // (e.g., in a loop, recursively, or just multiple explicit calls).
+            // In such cases, it's not "assigned once in its lifetime" in the global sense.
+            // This is a conservative assumption for inlining safety.
+            return false;
+          }
         } else if (block.isLoop) {
+          // If the assignment is directly within a loop, it can be executed multiple times.
           return false;
         }
       }
 
       return true;
     }
\ No newline at end of file
