diff --git a/tmp/8f51a6cd-2b56-42ef-858b-7593c8f8d683_buggy.java b/tmp/836baa2c-d371-4ce3-85ba-26cea6a14171_fixed.java
index 07b0792..28895a7 100644
--- a/tmp/8f51a6cd-2b56-42ef-858b-7593c8f8d683_buggy.java
+++ b/tmp/836baa2c-d371-4ce3-85ba-26cea6a14171_fixed.java
@@ -1,22 +1,38 @@
     /**
      * @return Whether the variable is only assigned a value once for its
      *     lifetime.
      */
     boolean isAssignedOnceInLifetime() {
       Reference ref = getOneAndOnlyAssignment();
       if (ref == null) {
         return false;
       }
 
-      // Make sure this assignment is not in a loop.
+      // Make sure this assignment is not in a loop, including those formed by
+      // recursive function calls or functions defined/called within loops.
       for (BasicBlock block = ref.getBasicBlock();
            block != null; block = block.getParent()) {
-        if (block.isFunction) {
-          break;
-        } else if (block.isLoop) {
+        if (block.isLoop) {
+          // The assignment is directly inside a syntactic loop (e.g., for, while).
           return false;
+        } else if (block.isFunction) {
+          // The assignment is inside a function.
+          // This function itself might cause the assignment to be executed multiple times.
+          // 1. If the function is recursive: The assignment occurs in each recursive invocation.
+          // 2. If the function is defined/called from within a loop: The assignment occurs each time the loop iterates.
+
+          // Check for recursion: If the ControlFlowGraph of this function is recursive,
+          // then the assignment is effectively happening multiple times.
+          // Assuming `BasicBlock` provides access to its containing `ControlFlowGraph`,
+          // and `ControlFlowGraph` has a method to check for recursion.
+          if (block.getControlFlowGraph().isRecursive()) {
+            return false;
+          }
+          // Do NOT break here. Continue iterating up the parent chain.
+          // This allows the logic to check if this function itself is defined inside a loop
+          // (which would be detected by `block.getParent().isLoop` in a subsequent iteration).
         }
       }
 
       return true;
     }
\ No newline at end of file
