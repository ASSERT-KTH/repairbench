diff --git a/tmp/ddedd7cf-51f6-4f17-b1f4-cf00074a18de_buggy.java b/tmp/38f9e7e6-3a57-4a42-b1f3-7552c7097950_fixed.java
index a7e6997..7f9347f 100644
--- a/tmp/ddedd7cf-51f6-4f17-b1f4-cf00074a18de_buggy.java
+++ b/tmp/38f9e7e6-3a57-4a42-b1f3-7552c7097950_fixed.java
@@ -1,12 +1,24 @@
     /**
      * Tells if the token looks like a short option.
      * 
-     * @param token
+     * @param token The token to check.
+     * @return true if the token starts with "-" and the substring after the hyphen
+     *         matches a registered short option.
      */
     private boolean isShortOption(String token)
     {
         // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        return token.startsWith("-") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));
-
-        // remove leading "-" and "=value"
+        // The original implementation checked only the first character after the hyphen (token.substring(1, 2)).
+        // This was problematic for multi-character short option names (e.g., "-t1" where "t1" is the option name),
+        // as it would only check for "t", potentially failing to identify the option or misinterpreting it.
+        //
+        // To correctly handle cases like "-t1" and "-last" (where "t1" and "last" are registered as short option names),
+        // the method should check if the entire string following the leading hyphen corresponds to a defined short option.
+        // The `options.hasShortOption()` method can correctly identify multi-character short option names.
+        // The parser will then separately handle logic for attached values or bundled options based on the
+        // Option's definition (e.g., `hasArg()`, `hasArgs()`).
+        //
+        // This change ensures that if an option like "t1" is registered as a short option,
+        // then a token like "-t1" is correctly recognized as such.
+        return token.startsWith("-") && token.length() >= 2 && options.hasShortOption(token.substring(1));
     }
\ No newline at end of file
