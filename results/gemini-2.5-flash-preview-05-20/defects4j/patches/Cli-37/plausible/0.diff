diff --git a/tmp/7d9b98dd-483b-480f-8a63-19d73d5a1ec3_buggy.java b/tmp/28bc0bdc-2692-40df-88c4-125059fb9e7a_fixed.java
index a7e6997..12cbbab 100644
--- a/tmp/7d9b98dd-483b-480f-8a63-19d73d5a1ec3_buggy.java
+++ b/tmp/28bc0bdc-2692-40df-88c4-125059fb9e7a_fixed.java
@@ -1,12 +1,47 @@
     /**
      * Tells if the token looks like a short option.
      * 
-     * @param token
+     * @param token The token to check.
+     * @return true if the token starts with "-" and matches a known short option.
      */
     private boolean isShortOption(String token)
     {
-        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        return token.startsWith("-") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));
+        // A token is considered a short option if:
+        // 1. It starts with a single hyphen.
+        // 2. It has at least one character following the hyphen.
+        // 3. The part after the hyphen (potentially truncated by an '=' sign)
+        //    is a defined short option (e.g., "-t1" where "t1" is an option).
+        // 4. OR, the first character after the hyphen is a defined short option
+        //    (e.g., "-t" in "-t1" where "t" is an option and "1" is a bundled value/option).
 
-        // remove leading "-" and "=value"
+        if (!token.startsWith("-") || token.length() < 2) {
+            return false;
+        }
+
+        // Extract the potential option name.
+        // This handles cases like "-S=V" by taking only "S" as the candidate option name.
+        String optNameCandidate;
+        int equalsIndex = token.indexOf('=');
+        if (equalsIndex != -1) {
+            // If an equals sign is present, the option name is everything between '-' and '='.
+            optNameCandidate = token.substring(1, equalsIndex);
+        } else {
+            // If no equals sign, the option name candidate is everything after the hyphen.
+            optNameCandidate = token.substring(1);
+        }
+        
+        // First, check if the entire extracted candidate name is a defined short option.
+        // This correctly identifies multi-character short options like "-t1" where "t1" is a distinct option.
+        if (options.hasShortOption(optNameCandidate)) {
+            return true;
+        }
+
+        // If the full candidate name is not a defined option, check if just its first character is.
+        // This covers traditional single-character short options (e.g., "-t")
+        // and bundled options or options with attached values (e.g., "-t1" where "t" is an option and "1" is its value/bundled option).
+        if (optNameCandidate.length() > 0 && options.hasShortOption(optNameCandidate.substring(0, 1))) {
+            return true;
+        }
+        
+        return false;
     }
\ No newline at end of file
