diff --git a/tmp/9223f497-7ab0-4352-b994-5bee5727a162_buggy.java b/tmp/e51bb253-85da-4ac8-a9a7-012fbd7366cc_fixed.java
index a7e6997..3650b47 100644
--- a/tmp/9223f497-7ab0-4352-b994-5bee5727a162_buggy.java
+++ b/tmp/e51bb253-85da-4ac8-a9a7-012fbd7366cc_fixed.java
@@ -1,12 +1,32 @@
     /**
      * Tells if the token looks like a short option.
      * 
      * @param token
+     * @return true if the token is a short option, false otherwise
      */
     private boolean isShortOption(String token)
     {
         // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        return token.startsWith("-") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));
+        // A short option starts with '-' and has at least one character after it.
+        if (!token.startsWith("-") || token.length() < 2)
+        {
+            return false;
+        }
+
+        // Extract the potential option name:
+        // - remove leading "-"
+        // - if an "=" is present, remove "=value" part as well.
+        // This handles cases like "-S=V" where "S" is the option name,
+        // and also multi-character short options like "-t1" or "-last".
+        String optName = token.substring(1);
+        int equalsPos = optName.indexOf("=");
+        if (equalsPos != -1) {
+            optName = optName.substring(0, equalsPos);
+        }
 
-        // remove leading "-" and "=value"
+        // Check if the extracted option name is a registered short option.
+        // This correctly identifies multi-character short options like "t1" or "last"
+        // as defined in the test case, which the original code (checking only token.substring(1, 2))
+        // failed to do.
+        return options.hasShortOption(optName);
     }
\ No newline at end of file
