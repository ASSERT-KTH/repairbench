diff --git a/tmp/6074d8a0-35e4-45b2-80f0-95a21d0e08c9_buggy.java b/tmp/cc31ed15-1087-46f2-9603-2c2a9b867ac1_fixed.java
index a7e6997..ebc634e 100644
--- a/tmp/6074d8a0-35e4-45b2-80f0-95a21d0e08c9_buggy.java
+++ b/tmp/cc31ed15-1087-46f2-9603-2c2a9b867ac1_fixed.java
@@ -1,12 +1,40 @@
     /**
      * Tells if the token looks like a short option.
      * 
      * @param token
      */
     private boolean isShortOption(String token)
     {
         // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        return token.startsWith("-") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));
+        if (!token.startsWith("-") || token.length() < 2)
+        {
+            return false;
+        }
+
+        // Extract the potential option name (e.g., "t1" from "-t1", "S" from "-S=V").
+        // This covers the part between the leading hyphen and an optional equals sign.
+        String optName = token.substring(1);
+        int equalsPos = optName.indexOf('=');
+        if (equalsPos != -1)
+        {
+            optName = optName.substring(0, equalsPos);
+        }
+
+        // Case 1: The extracted `optName` (which could be multi-character like "t1" or "last")
+        // is a defined short option. This directly addresses the CLI-265 bug for options with 2+ characters.
+        if (options.hasShortOption(optName))
+        {
+            return true;
+        }
+
+        // Case 2: The token could be a stacked short option (e.g., "-abc") or an option followed by
+        // an immediate value without an equals sign (e.g., "-oV"). In these cases, only the
+        // first character of the potential option name needs to be a defined short option.
+        // The subsequent parsing logic (in handleShortOption) will then differentiate.
+        if (optName.length() > 0 && options.hasShortOption(optName.substring(0, 1)))
+        {
+            return true;
+        }
 
-        // remove leading "-" and "=value"
+        return false;
     }
\ No newline at end of file
