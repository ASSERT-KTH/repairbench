diff --git a/tmp/3ae14e96-8a84-4f10-9cb5-5b6e74ed831e_buggy.java b/tmp/8b56e771-abc0-4849-bac5-2a6d9ba34da7_fixed.java
index a7e6997..23eece6 100644
--- a/tmp/3ae14e96-8a84-4f10-9cb5-5b6e74ed831e_buggy.java
+++ b/tmp/8b56e771-abc0-4849-bac5-2a6d9ba34da7_fixed.java
@@ -1,12 +1,46 @@
     /**
      * Tells if the token looks like a short option.
      * 
-     * @param token
+     * @param token The token to check.
+     * @return true if the token starts with '-' and the part after the hyphen
+     *         (either the entire substring or just the first character)
+     *         is a registered short option.
      */
     private boolean isShortOption(String token)
     {
         // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        return token.startsWith("-") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));
 
-        // remove leading "-" and "=value"
+        // A token is considered a potential short option if:
+        // 1. It starts with "-"
+        // 2. It has at least one character after the hyphen (e.g., "-S").
+        // 3. AND (
+        //    a) The entire string after the hyphen (e.g., "S" for "-S", "last" for "-last") is a registered short option.
+        //    OR
+        //    b) The first character after the hyphen (e.g., "S" for "-Svalue") is a registered short option.
+        // )
+        // This addresses cases like "-last" being interpreted as a single option "last"
+        // if "last" is registered as a short option, and also handles "-t1"
+        // where "t" is an option and "1" is its value, or "t1" is itself an option.
+        // The detailed parsing logic to prioritize between 't' and 't1' (if both exist)
+        // should reside in the parser's option handling (e.g., handleConcatenatedOptions),
+        // which often prefers the longest match. This function primarily ensures
+        // such tokens are identified as "short options" for further processing.
+
+        if (!token.startsWith("-") || token.length() < 2) {
+            return false;
+        }
+
+        String optName = token.substring(1); // Get the part after the hyphen
+
+        // Check if the entire string after the hyphen is a registered short option.
+        // This covers multi-character short options (e.g., if new Option("last", false, "...") exists).
+        if (options.hasShortOption(optName)) {
+            return true;
+        }
+
+        // If the full substring after the hyphen is not a direct short option,
+        // check if just the first character after the hyphen is a registered short option.
+        // This covers traditional single-character short options, potentially followed by their value
+        // or other stacked short options (e.g., "-Svalue", "-S1S2").
+        return options.hasShortOption(optName.substring(0, 1));
     }
\ No newline at end of file
