diff --git a/tmp/4b343c08-ef87-484e-9578-f57ed3daefa2_buggy.java b/tmp/99c2f2ce-4751-4340-82eb-d037a078b983_fixed.java
index f96e1af..1c2b70a 100644
--- a/tmp/4b343c08-ef87-484e-9578-f57ed3daefa2_buggy.java
+++ b/tmp/99c2f2ce-4751-4340-82eb-d037a078b983_fixed.java
@@ -1,133 +1,168 @@
     /**
      * <p>Internal calculation method.</p>
      * 
      * @param val  the calendar
      * @param field  the field constant
      * @param round  true to round, false to truncate
      * @throws ArithmeticException if the year is over 280 million
      */
     private static void modify(Calendar val, int field, boolean round) {
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
         
         if (field == Calendar.MILLISECOND) {
             return;
         }
 
         // ----------------- Fix for LANG-59 ---------------------- START ---------------
         // see http://issues.apache.org/jira/browse/LANG-59
         //
         // Manually truncate milliseconds, seconds and minutes, rather than using
         // Calendar methods.
 
         Date date = val.getTime();
         long time = date.getTime();
         boolean done = false;
 
         // truncate milliseconds
         int millisecs = val.get(Calendar.MILLISECOND);
         if (!round || millisecs < 500) {
             time = time - millisecs;
+        }
+        // This if statement was likely intended to be outside the above if block,
+        // allowing done to be set regardless of truncation/rounding condition.
+        // As per source, it's NOT in braces, so it's a separate statement.
         if (field == Calendar.SECOND) {
             done = true;
         }
-        }
 
         // truncate seconds
         int seconds = val.get(Calendar.SECOND);
         if (!done && (!round || seconds < 30)) {
             time = time - (seconds * 1000L);
+        }
+        // Similar placement as above
         if (field == Calendar.MINUTE) {
             done = true;
         }
-        }
 
         // truncate minutes
         int minutes = val.get(Calendar.MINUTE);
         if (!done && (!round || minutes < 30)) {
             time = time - (minutes * 60000L);
         }
 
         // reset time
         if (date.getTime() != time) {
             date.setTime(time);
             val.setTime(date);
         }
         // ----------------- Fix for LANG-59 ----------------------- END ----------------
 
         boolean roundUp = false;
         for (int i = 0; i < fields.length; i++) {
+            int offset = 0; // Moved declaration here, scope for each major field group
+            boolean offsetSet = false; // Moved declaration here
+
             for (int j = 0; j < fields[i].length; j++) {
                 if (fields[i][j] == field) {
                     //This is our field... we stop looping
-                    if (round && roundUp) {
+
+                    // Special cases for SEMI_MONTH and AM_PM (LANG-346 related fix)
+                    // The original code calculated offset/roundUp *after* the `return`
+                    // block. This is a common refactoring issue.
+                    // This section should calculate `offset` and `roundUp` for the current field.
+                    switch (field) { // Note: this is the target 'field', not fields[i][0]
+                        case DateUtils.SEMI_MONTH:
+                            if (fields[i][0] == Calendar.DATE) { // if the current processing field is DATE
+                                offset = val.get(Calendar.DATE) - 1;
+                                if (offset >= 15) {
+                                    offset -= 15;
+                                }
+                                roundUp = offset > 7;
+                                offsetSet = true;
+                            }
+                            break;
+                        case Calendar.AM_PM:
+                            if (fields[i][0] == Calendar.HOUR_OF_DAY) { // if the current processing field is HOUR_OF_DAY
+                                offset = val.get(Calendar.HOUR_OF_DAY);
+                                if (offset >= 12) {
+                                    offset -= 12;
+                                }
+                                roundUp = offset > 6;
+                                offsetSet = true;
+                            }
+                            break;
+                    }
+                    if (!offsetSet) {
+                        int min = val.getActualMinimum(fields[i][0]);
+                        int max = val.getActualMaximum(fields[i][0]);
+                        offset = val.get(fields[i][0]) - min;
+                        roundUp = offset > ((max - min) / 2); // This is the roundUp for *this* field.
+                    }
+
+                    if (round && roundUp) { // Use the `roundUp` calculated for this field
                         if (field == DateUtils.SEMI_MONTH) {
-                            //This is a special case that's hard to generalize
-                            //If the date is 1, we round up to 16, otherwise
-                            //  we subtract 15 days and add 1 month
                             if (val.get(Calendar.DATE) == 1) {
                                 val.add(Calendar.DATE, 15);
                             } else {
                                 val.add(Calendar.DATE, -15);
                                 val.add(Calendar.MONTH, 1);
                             }
                         } else {
-                            //We need at add one to this field since the
-                            //  last number causes us to round up
                             val.add(fields[i][0], 1);
                         }
                     }
-                    return;
+
+                    // Always truncate the target field to its minimum value after potential rounding up
+                    // This was missing for the target field itself, leading to values like 08:01:00
+                    if (offset != 0) { // If there's an offset from minimum
+                         val.set(fields[i][0], val.get(fields[i][0]) - offset);
+                    } else { // If offset is 0, ensure it's set to minimum (e.g. 0)
+                         val.set(fields[i][0], val.getActualMinimum(fields[i][0]));
                     }
+                    
+                    return; // Return after processing the target field
                 }
-            //We have various fields that are not easy roundings
-            int offset = 0;
-            boolean offsetSet = false;
-            //These are special types of fields that require different rounding rules
-            switch (field) {
-                case DateUtils.SEMI_MONTH:
-                    if (fields[i][0] == Calendar.DATE) {
-                        //If we're going to drop the DATE field's value,
-                        //  we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
+            }
+            // If not the target field, perform truncation for this field and update roundUp for the next.
+            // This part is for fields *lower* than the target field.
+            // These lines were originally after the inner loop and before the `switch` for target field.
+            // They are moved here to be within the outer loop for each fields[i] group.
+            switch (field) { // This switch handles rounding behavior of 'lower' fields affecting the 'target' field.
+                case DateUtils.SEMI_MONTH: // When target field is SEMI_MONTH
+                    if (fields[i][0] == Calendar.DATE) { // current field is DATE
                         offset = val.get(Calendar.DATE) - 1;
-                        //If we're above 15 days adjustment, that means we're in the
-                        //  bottom half of the month and should stay accordingly.
                         if (offset >= 15) {
                             offset -= 15;
                         }
-                        //Record whether we're in the top or bottom half of that range
                         roundUp = offset > 7;
                         offsetSet = true;
                     }
                     break;
-                case Calendar.AM_PM:
-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {
-                        //If we're going to drop the HOUR field's value,
-                        //  we want to do this our own way.
+                case Calendar.AM_PM: // When target field is AM_PM
+                    if (fields[i][0] == Calendar.HOUR_OF_DAY) { // current field is HOUR_OF_DAY
                         offset = val.get(Calendar.HOUR_OF_DAY);
                         if (offset >= 12) {
                             offset -= 12;
                         }
                         roundUp = offset > 6;
                         offsetSet = true;
                     }
                     break;
             }
-            if (!offsetSet) {
+            if (!offsetSet) { // Default calculation for fields not matching special cases
                 int min = val.getActualMinimum(fields[i][0]);
                 int max = val.getActualMaximum(fields[i][0]);
-                //Calculate the offset from the minimum allowed value
                 offset = val.get(fields[i][0]) - min;
-                //Set roundUp if this is more than half way between the minimum and maximum
                 roundUp = offset > ((max - min) / 2);
             }
-            //We need to remove this field
+            // Truncate this field to its minimum
             if (offset != 0) {
                 val.set(fields[i][0], val.get(fields[i][0]) - offset);
             }
         }
         throw new IllegalArgumentException("The field " + field + " is not supported");
 
     }
