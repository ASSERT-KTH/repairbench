diff --git a/tmp/a5c015c1-0469-4617-9c07-9bf87ab84d27_buggy.java b/tmp/c219f62b-10f5-449e-99b4-9c65c2d491c0_fixed.java
index 85f5680..03a3994 100644
--- a/tmp/a5c015c1-0469-4617-9c07-9bf87ab84d27_buggy.java
+++ b/tmp/c219f62b-10f5-449e-99b4-9c65c2d491c0_fixed.java
@@ -1,17 +1,22 @@
   @Override
   public Date read(JsonReader in) throws IOException {
-    if (in.peek() != JsonToken.STRING) {
-      throw new JsonParseException("The date should be a string value");
+    // Dates can be serialized as JSON null.
+    if (in.peek() == JsonToken.NULL) {
+      in.nextNull();
+      return null;
     }
+    // If the token is not a string, JsonReader.nextString() will throw an IllegalStateException,
+    // which is the desired behavior for unexpected tokens (e.g., testUnexpectedToken).
+    // The previous check was too restrictive, disallowing null and changing the exception type.
     Date date = deserializeToDate(in.nextString());
     if (dateType == Date.class) {
       return date;
     } else if (dateType == Timestamp.class) {
       return new Timestamp(date.getTime());
     } else if (dateType == java.sql.Date.class) {
       return new java.sql.Date(date.getTime());
     } else {
       // This must never happen: dateType is guarded in the primary constructor
       throw new AssertionError();
     }
   }
\ No newline at end of file
