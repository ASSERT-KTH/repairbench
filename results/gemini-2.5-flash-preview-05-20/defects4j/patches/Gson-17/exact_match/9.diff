diff --git a/tmp/d7c8d539-3b71-4f07-a739-94f5a4b19337_buggy.java b/tmp/2491ae18-fddb-45ad-967d-2c515d794bf2_fixed.java
index 85f5680..943f367 100644
--- a/tmp/d7c8d539-3b71-4f07-a739-94f5a4b19337_buggy.java
+++ b/tmp/2491ae18-fddb-45ad-967d-2c515d794bf2_fixed.java
@@ -1,17 +1,22 @@
   @Override
   public Date read(JsonReader in) throws IOException {
-    if (in.peek() != JsonToken.STRING) {
-      throw new JsonParseException("The date should be a string value");
+    if (in.peek() == JsonToken.NULL) {
+      in.nextNull();
+      return null;
     }
+    // If the token is not a STRING, in.nextString() will throw an IllegalStateException,
+    // which is the desired behavior for non-string, non-null values.
+    // The previous check `if (in.peek() != JsonToken.STRING)` was too eager
+    // and threw JsonParseException, which was not expected by the tests for type mismatches.
     Date date = deserializeToDate(in.nextString());
     if (dateType == Date.class) {
       return date;
     } else if (dateType == Timestamp.class) {
       return new Timestamp(date.getTime());
     } else if (dateType == java.sql.Date.class) {
       return new java.sql.Date(date.getTime());
     } else {
       // This must never happen: dateType is guarded in the primary constructor
       throw new AssertionError();
     }
   }
\ No newline at end of file
