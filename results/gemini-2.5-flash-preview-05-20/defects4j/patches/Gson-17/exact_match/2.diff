diff --git a/tmp/7e3e8c8e-77b5-4fe7-9337-d0584ac77645_buggy.java b/tmp/9b3e4ce3-a9b4-4366-b94c-83f84b8faf04_fixed.java
index 85f5680..87ff305 100644
--- a/tmp/7e3e8c8e-77b5-4fe7-9337-d0584ac77645_buggy.java
+++ b/tmp/9b3e4ce3-a9b4-4366-b94c-83f84b8faf04_fixed.java
@@ -1,17 +1,25 @@
   @Override
   public Date read(JsonReader in) throws IOException {
-    if (in.peek() != JsonToken.STRING) {
-      throw new JsonParseException("The date should be a string value");
+    if (in.peek() == JsonToken.NULL) {
+      in.nextNull();
+      return null;
     }
+    // The original code threw a JsonParseException if the token was not a STRING.
+    // This was problematic for two reasons:
+    // 1. It didn't handle JsonToken.NULL, which should deserialize to null.
+    // 2. For other unexpected tokens (like BEGIN_OBJECT in testUnexpectedToken),
+    //    the test expects an IllegalStateException, which JsonReader.nextString()
+    //    would naturally throw if the token is not a string. By preemptively
+    //    throwing JsonParseException, we bypassed this expected behavior.
     Date date = deserializeToDate(in.nextString());
     if (dateType == Date.class) {
       return date;
     } else if (dateType == Timestamp.class) {
       return new Timestamp(date.getTime());
     } else if (dateType == java.sql.Date.class) {
       return new java.sql.Date(date.getTime());
     } else {
       // This must never happen: dateType is guarded in the primary constructor
       throw new AssertionError();
     }
   }
\ No newline at end of file
