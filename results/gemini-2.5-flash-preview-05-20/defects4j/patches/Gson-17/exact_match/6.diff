diff --git a/tmp/786b2c0e-4b53-4e47-952c-f0c76038ba6b_buggy.java b/tmp/7eb40e92-a761-4789-85b8-4369f9bdbeb3_fixed.java
index 85f5680..a526e76 100644
--- a/tmp/786b2c0e-4b53-4e47-952c-f0c76038ba6b_buggy.java
+++ b/tmp/7eb40e92-a761-4789-85b8-4369f9bdbeb3_fixed.java
@@ -1,17 +1,30 @@
   @Override
   public Date read(JsonReader in) throws IOException {
-    if (in.peek() != JsonToken.STRING) {
-      throw new JsonParseException("The date should be a string value");
+    // Handle JSON null values explicitly.
+    // If the next token is NULL, consume it and return Java null.
+    if (in.peek() == JsonToken.NULL) {
+      in.nextNull();
+      return null;
     }
+
+    // The adapter expects a string value for the date.
+    // If the next token is not a string (e.g., BEGIN_OBJECT, as in testUnexpectedToken),
+    // calling in.nextString() will automatically throw an IllegalStateException,
+    // which matches the expectation of DefaultDateTypeAdapterTest::testUnexpectedToken.
+    // The original explicit check and JsonParseException is removed because it conflicts
+    // with the expected IllegalStateException for non-null, non-string tokens.
     Date date = deserializeToDate(in.nextString());
+
+    // Convert the deserialized Date object to the specific type requested by the adapter's configuration.
     if (dateType == Date.class) {
       return date;
     } else if (dateType == Timestamp.class) {
       return new Timestamp(date.getTime());
     } else if (dateType == java.sql.Date.class) {
       return new java.sql.Date(date.getTime());
     } else {
-      // This must never happen: dateType is guarded in the primary constructor
+      // This assertion ensures that 'dateType' is one of the supported types.
+      // This should ideally never be reached as 'dateType' is guarded in the primary constructor.
       throw new AssertionError();
     }
   }
\ No newline at end of file
