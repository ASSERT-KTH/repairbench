diff --git a/tmp/01458ca9-3f90-47d7-8a64-8b029a21fb61_buggy.java b/tmp/30b2ee8a-ffc8-494d-9229-99d2e4ec00b0_fixed.java
index 85f5680..5f51a63 100644
--- a/tmp/01458ca9-3f90-47d7-8a64-8b029a21fb61_buggy.java
+++ b/tmp/30b2ee8a-ffc8-494d-9229-99d2e4ec00b0_fixed.java
@@ -1,17 +1,31 @@
   @Override
   public Date read(JsonReader in) throws IOException {
-    if (in.peek() != JsonToken.STRING) {
-      throw new JsonParseException("The date should be a string value");
+    // Handle null values explicitly by returning null.
+    // JsonReader.peek() allows inspecting the next token without consuming it.
+    if (in.peek() == JsonToken.NULL) {
+      in.nextNull(); // Consume the NULL token
+      return null;
     }
-    Date date = deserializeToDate(in.nextString());
+
+    // If the token is not a STRING, in.nextString() will throw an IllegalStateException,
+    // which aligns with the expected behavior for testUnexpectedToken.
+    // If it's a STRING, in.nextString() consumes it and returns the string value.
+    // The previous check ensures we don't pass 'null' to deserializeToDate.
+    String dateString = in.nextString();
+    Date date = deserializeToDate(dateString);
+
+    // Apply the correct Date subclass type based on the constructor's dateType.
     if (dateType == Date.class) {
       return date;
     } else if (dateType == Timestamp.class) {
+      // Note: date should not be null at this point, as null input was handled above.
+      // deserializeToDate is expected to return a non-null Date for a valid string,
+      // or throw an exception for an invalid string.
       return new Timestamp(date.getTime());
     } else if (dateType == java.sql.Date.class) {
       return new java.sql.Date(date.getTime());
     } else {
-      // This must never happen: dateType is guarded in the primary constructor
+      // This case should ideally never be reached due to constructor guarding dateType.
       throw new AssertionError();
     }
   }
\ No newline at end of file
