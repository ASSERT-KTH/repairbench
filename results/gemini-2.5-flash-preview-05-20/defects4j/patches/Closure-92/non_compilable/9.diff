diff --git a/tmp/fba0784e-570a-462c-a6e4-27ff2327ec11_buggy.java b/tmp/998fc484-654b-4aab-92ef-aca2e201ecb0_fixed.java
index 851ffc2..bb49b82 100644
--- a/tmp/fba0784e-570a-462c-a6e4-27ff2327ec11_buggy.java
+++ b/tmp/998fc484-654b-4aab-92ef-aca2e201ecb0_fixed.java
@@ -1,70 +1,131 @@
+import com.google.javascript.rhino.Node;
+import com.google.javascript.rhino.Token;
+import com.google.common.base.Preconditions; // Ensure this import is present
+
+// Assuming NodeUtil is accessible and other class members like compiler,
+// firstNode, explicitNode, candidateDefinition, minimumModule, namespace,
+// providedNames, replacementNode, firstModule, isNamespace() are in scope.
+
+// Private helper method to extract the name/getprop node from a declaration/assignment statement.
+private Node getActualNameNode(Node declarationNode) {
+    if (declarationNode == null) {
+        return null;
+    }
+    if (declarationNode.isVar()) {
+        // For 'var name = value;', returns the 'name' (VAR_DECL child of VAR)
+        return declarationNode.getFirstChild();
+    } else if (NodeUtil.isExpressionNode(declarationNode)) {
+        // For 'name = value;' or 'name.prop = value;', returns 'name' or 'name.prop'
+        Node assignNode = declarationNode.getFirstChild(); // Should be an ASSIGN node
+        if (assignNode != null && assignNode.isAssign()) {
+            return assignNode.getFirstChild(); // Should be the NAME or GETPROP node
+        }
+    } else if (declarationNode.isFunction()) {
+        // For 'function name() {}', returns 'name'
+        return declarationNode.getFirstChild(); // Should be a NAME node
+    }
+    // If the node itself is a NAME or GETPROP (less common for replacementNode, but safe check)
+    if (declarationNode.isName() || declarationNode.isGetProp()) {
+        return declarationNode;
+    }
+    return null;
+}
+
     /**
      * Replace the provide statement.
      *
      * If we're providing a name with no definition, then create one.
      * If we're providing a name with a duplicate definition, then make sure
      * that definition becomes a declaration.
      */
     void replace() {
       if (firstNode == null) {
         // Don't touch the base case ('goog').
         replacementNode = candidateDefinition;
+        // Ensure IS_NAMESPACE is set on the relevant node if it's a namespace
+        if (this.isNamespace() && replacementNode != null) {
+            Node nameNode = getActualNameNode(replacementNode);
+            if (nameNode != null) {
+                nameNode.putBooleanProp(Node.IS_NAMESPACE, true);
+            }
+        }
         return;
       }
 
       // Handle the case where there is a duplicate definition for an explicitly
       // provided symbol.
       if (candidateDefinition != null && explicitNode != null) {
         explicitNode.detachFromParent();
         compiler.reportCodeChange();
 
-        // Does this need a VAR keyword?
         replacementNode = candidateDefinition;
-        if (NodeUtil.isExpressionNode(candidateDefinition)) {
-          candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
+
+        // Ensure Node.IS_NAMESPACE is set on the relevant name node if this is a namespace.
+        // The original code was incorrect: it set it on the statement node itself
+        // (EXPR_RESULT) and only for simple names, missing GETPROP and VAR cases.
+        if (this.isNamespace()) {
+            Node nameNode = getActualNameNode(replacementNode);
+            if (nameNode != null) {
+                nameNode.putBooleanProp(Node.IS_NAMESPACE, true);
+            }
+        }
+
+        // Check if the definition needs to be converted to a VAR declaration
+        // (e.g., 'x = 1;' becoming 'var x = 1;')
+        if (NodeUtil.isExpressionNode(candidateDefinition)) { // Only applies if candidateDefinition is an EXPR_RESULT statement
           Node assignNode = candidateDefinition.getFirstChild();
-          Node nameNode = assignNode.getFirstChild();
-          if (nameNode.getType() == Token.NAME) {
+          Node nameNode = assignNode.getFirstChild(); // This is the NAME or GETPROP node
+          if (nameNode.getType() == Token.NAME) { // Only if the assignee is a simple name (not a property)
             // Need to convert this assign to a var declaration.
             Node valueNode = nameNode.getNext();
             assignNode.removeChild(nameNode);
             assignNode.removeChild(valueNode);
-            nameNode.addChildToFront(valueNode);
+            nameNode.addChildToFront(valueNode); // 'nameNode' now acts as a VAR_DECL
             Node varNode = new Node(Token.VAR, nameNode);
-            varNode.copyInformationFrom(candidateDefinition);
+            varNode.copyInformationFrom(candidateDefinition); // Copy source info, etc.
             candidateDefinition.getParent().replaceChild(
-                candidateDefinition, varNode);
-            nameNode.setJSDocInfo(assignNode.getJSDocInfo());
+                candidateDefinition, varNode); // Replace original expression statement with VAR statement
+            nameNode.setJSDocInfo(assignNode.getJSDocInfo()); // Transfer JSDoc
             compiler.reportCodeChange();
-            replacementNode = varNode;
+            replacementNode = varNode; // Update replacementNode to the new VAR node
+            // Node.IS_NAMESPACE was already handled above by getActualNameNode, no need to repeat.
           }
         }
       } else {
         // Handle the case where there's not a duplicate definition.
         replacementNode = createDeclarationNode();
+        // Ensure Node.IS_NAMESPACE is set on the relevant name node if this is a namespace.
+        // This is crucial for newly created declarations if createDeclarationNode() doesn't do it.
+        if (this.isNamespace()) {
+            Node nameNode = getActualNameNode(replacementNode);
+            if (nameNode != null) {
+                nameNode.putBooleanProp(Node.IS_NAMESPACE, true);
+            }
+        }
+
         if (firstModule == minimumModule) {
           firstNode.getParent().addChildBefore(replacementNode, firstNode);
         } else {
           // In this case, the name was implicitly provided by two independent
           // modules. We need to move this code up to a common module.
           int indexOfDot = namespace.indexOf('.');
           if (indexOfDot == -1) {
-            // Any old place is fine.
+            // Any old place is fine (for top-level names).
             compiler.getNodeForCodeInsertion(minimumModule)
                 .addChildToBack(replacementNode);
           } else {
             // Add it after the parent namespace.
             ProvidedName parentName =
                 providedNames.get(namespace.substring(0, indexOfDot));
             Preconditions.checkNotNull(parentName);
             Preconditions.checkNotNull(parentName.replacementNode);
             parentName.replacementNode.getParent().addChildAfter(
                 replacementNode, parentName.replacementNode);
           }
         }
         if (explicitNode != null) {
-          explicitNode.detachFromParent();
+          explicitNode.detachFromParent(); // Remove the original goog.provide/goog.require call
         }
         compiler.reportCodeChange();
       }
     }
\ No newline at end of file
