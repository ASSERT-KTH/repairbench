diff --git a/tmp/297a56c2-763c-4b83-a4cb-42075605efc4_buggy.java b/tmp/5a26ed48-0db2-46e0-a7f2-c3149b133ba2_fixed.java
index 851ffc2..f182432 100644
--- a/tmp/297a56c2-763c-4b83-a4cb-42075605efc4_buggy.java
+++ b/tmp/5a26ed48-0db2-46e0-a7f2-c3149b133ba2_fixed.java
@@ -1,70 +1,93 @@
     /**
      * Replace the provide statement.
      *
      * If we're providing a name with no definition, then create one.
      * If we're providing a name with a duplicate definition, then make sure
      * that definition becomes a declaration.
      */
     void replace() {
       if (firstNode == null) {
         // Don't touch the base case ('goog').
         replacementNode = candidateDefinition;
         return;
       }
 
       // Handle the case where there is a duplicate definition for an explicitly
       // provided symbol.
       if (candidateDefinition != null && explicitNode != null) {
         explicitNode.detachFromParent();
         compiler.reportCodeChange();
 
         // Does this need a VAR keyword?
         replacementNode = candidateDefinition;
         if (NodeUtil.isExpressionNode(candidateDefinition)) {
           candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
           Node assignNode = candidateDefinition.getFirstChild();
           Node nameNode = assignNode.getFirstChild();
           if (nameNode.getType() == Token.NAME) {
             // Need to convert this assign to a var declaration.
             Node valueNode = nameNode.getNext();
             assignNode.removeChild(nameNode);
             assignNode.removeChild(valueNode);
             nameNode.addChildToFront(valueNode);
             Node varNode = new Node(Token.VAR, nameNode);
             varNode.copyInformationFrom(candidateDefinition);
             candidateDefinition.getParent().replaceChild(
                 candidateDefinition, varNode);
             nameNode.setJSDocInfo(assignNode.getJSDocInfo());
             compiler.reportCodeChange();
             replacementNode = varNode;
           }
         }
-      } else {
-        // Handle the case where there's not a duplicate definition.
+      } else { // Handle the case where there's not a duplicate definition.
         replacementNode = createDeclarationNode();
+
+        if (explicitNode != null) {
+          // Case 1: This is an explicitly provided symbol (e.g., goog.provide('apps.foo.bar.B')).
+          // The declaration for an explicitly provided symbol should generally
+          // replace the original goog.provide statement, staying in its module.
+          // Hoisting to a 'minimumModule' only applies to implicitly created
+          // parent namespaces, not the explicit provide itself.
+          firstNode.getParent().addChildBefore(replacementNode, firstNode);
+          explicitNode.detachFromParent(); // Remove the original goog.provide statement
+        } else {
+          // Case 2: This is an implicitly provided symbol (e.g., 'apps.foo' because 'apps.foo.bar.B' was provided).
+          // These implicit declarations need to be moved to the common module (minimumModule) if necessary.
           if (firstModule == minimumModule) {
+            // This case implies the implicit provide's hierarchy is rooted in its
+            // first explicit descendant's module, which is also the minimum module.
+            // Place it before the first explicit descendant node.
             firstNode.getParent().addChildBefore(replacementNode, firstNode);
           } else {
-          // In this case, the name was implicitly provided by two independent
-          // modules. We need to move this code up to a common module.
+            // The name was implicitly provided by a descendant in a later module.
+            // We need to move this code up to a common module.
             int indexOfDot = namespace.indexOf('.');
             if (indexOfDot == -1) {
-            // Any old place is fine.
+              // Top-level implicit name (unlikely to happen for non-goog, but handled).
               compiler.getNodeForCodeInsertion(minimumModule)
                   .addChildToBack(replacementNode);
             } else {
-            // Add it after the parent namespace.
+              // Nested implicit name (e.g., 'apps.foo', 'apps.foo.bar').
+              // Add it after the parent namespace's replacement node, if available.
+              // Otherwise, add to the back of the common module, as the parent
+              // might not have been processed or inserted yet.
               ProvidedName parentName =
                   providedNames.get(namespace.substring(0, indexOfDot));
               Preconditions.checkNotNull(parentName);
-            Preconditions.checkNotNull(parentName.replacementNode);
+              if (parentName.replacementNode != null) {
                 parentName.replacementNode.getParent().addChildAfter(
                     replacementNode, parentName.replacementNode);
+              } else {
+                // The parent's replacement node hasn't been generated yet.
+                // Fall back to inserting the current node at the end of the
+                // minimum module for insertion. This handles cases where parent
+                // definitions are also implicitly generated or delayed.
+                compiler.getNodeForCodeInsertion(minimumModule)
+                    .addChildToBack(replacementNode);
+              }
             }
           }
-        if (explicitNode != null) {
-          explicitNode.detachFromParent();
         }
         compiler.reportCodeChange();
       }
     }
\ No newline at end of file
