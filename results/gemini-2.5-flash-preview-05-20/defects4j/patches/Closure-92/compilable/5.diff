diff --git a/tmp/3f2f10d0-e9aa-4e00-ab55-10bb5af19112_buggy.java b/tmp/850d5bf8-e797-4a9b-a811-6586355e16bf_fixed.java
index 851ffc2..d528b29 100644
--- a/tmp/3f2f10d0-e9aa-4e00-ab55-10bb5af19112_buggy.java
+++ b/tmp/850d5bf8-e797-4a9b-a811-6586355e16bf_fixed.java
@@ -1,70 +1,82 @@
     /**
      * Replace the provide statement.
      *
      * If we're providing a name with no definition, then create one.
      * If we're providing a name with a duplicate definition, then make sure
      * that definition becomes a declaration.
      */
     void replace() {
       if (firstNode == null) {
         // Don't touch the base case ('goog').
         replacementNode = candidateDefinition;
         return;
       }
 
       // Handle the case where there is a duplicate definition for an explicitly
       // provided symbol.
       if (candidateDefinition != null && explicitNode != null) {
         explicitNode.detachFromParent();
         compiler.reportCodeChange();
 
         // Does this need a VAR keyword?
         replacementNode = candidateDefinition;
         if (NodeUtil.isExpressionNode(candidateDefinition)) {
           candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
           Node assignNode = candidateDefinition.getFirstChild();
           Node nameNode = assignNode.getFirstChild();
           if (nameNode.getType() == Token.NAME) {
             // Need to convert this assign to a var declaration.
             Node valueNode = nameNode.getNext();
             assignNode.removeChild(nameNode);
             assignNode.removeChild(valueNode);
             nameNode.addChildToFront(valueNode);
             Node varNode = new Node(Token.VAR, nameNode);
             varNode.copyInformationFrom(candidateDefinition);
             candidateDefinition.getParent().replaceChild(
                 candidateDefinition, varNode);
             nameNode.setJSDocInfo(assignNode.getJSDocInfo());
             compiler.reportCodeChange();
             replacementNode = varNode;
           }
         }
       } else {
         // Handle the case where there's not a duplicate definition.
         replacementNode = createDeclarationNode();
+
+        // If this name was explicitly provided (e.g., goog.provide('some.name')),
+        // replace the goog.provide statement with the declaration.
+        if (explicitNode != null) {
+          explicitNode.getParent().addChildBefore(replacementNode, explicitNode);
+          explicitNode.detachFromParent();
+        } else {
+          // If this name was implicitly provided (e.g., 'some.name' implicitly
+          // provides 'some'), and the first goog.provide for this name is in a
+          // later module than its minimum required module, then move the
+          // declaration up to the common module.
           if (firstModule == minimumModule) {
+            // This is the first time we've encountered this name, and it's
+            // in the earliest possible module. Place it before the firstNode.
             firstNode.getParent().addChildBefore(replacementNode, firstNode);
           } else {
-          // In this case, the name was implicitly provided by two independent
-          // modules. We need to move this code up to a common module.
-          int indexOfDot = namespace.indexOf('.');
-          if (indexOfDot == -1) {
-            // Any old place is fine.
+            // The name was implicitly provided by two independent modules,
+            // or an explicit provide was in a later module.
+            // We need to move this code up to a common module.
+            int lastIndexOfDot = namespace.lastIndexOf('.'); // FIX: Use lastIndexOf for immediate parent
+            if (lastIndexOfDot == -1) {
+              // Any old place is fine if it's a top-level name.
               compiler.getNodeForCodeInsertion(minimumModule)
                   .addChildToBack(replacementNode);
             } else {
-            // Add it after the parent namespace.
+              // Add it after the parent namespace's declaration.
               ProvidedName parentName =
-                providedNames.get(namespace.substring(0, indexOfDot));
+                  providedNames.get(namespace.substring(0, lastIndexOfDot)); // FIX: Use substring based on lastIndexOf
               Preconditions.checkNotNull(parentName);
               Preconditions.checkNotNull(parentName.replacementNode);
               parentName.replacementNode.getParent().addChildAfter(
                   replacementNode, parentName.replacementNode);
             }
           }
-        if (explicitNode != null) {
-          explicitNode.detachFromParent();
         }
         compiler.reportCodeChange();
       }
     }
\ No newline at end of file
