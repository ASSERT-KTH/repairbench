diff --git a/tmp/4e1e99e9-e1b0-4c16-9c4f-f13211c1184f_buggy.java b/tmp/a02bf71b-edf0-429d-917c-20db75681259_fixed.java
index 851ffc2..a6ffe61 100644
--- a/tmp/4e1e99e9-e1b0-4c16-9c4f-f13211c1184f_buggy.java
+++ b/tmp/a02bf71b-edf0-429d-917c-20db75681259_fixed.java
@@ -1,70 +1,86 @@
     /**
      * Replace the provide statement.
      *
      * If we're providing a name with no definition, then create one.
      * If we're providing a name with a duplicate definition, then make sure
      * that definition becomes a declaration.
      */
     void replace() {
       if (firstNode == null) {
         // Don't touch the base case ('goog').
         replacementNode = candidateDefinition;
         return;
       }
 
       // Handle the case where there is a duplicate definition for an explicitly
       // provided symbol.
       if (candidateDefinition != null && explicitNode != null) {
         explicitNode.detachFromParent();
         compiler.reportCodeChange();
 
         // Does this need a VAR keyword?
         replacementNode = candidateDefinition;
         if (NodeUtil.isExpressionNode(candidateDefinition)) {
           candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
           Node assignNode = candidateDefinition.getFirstChild();
           Node nameNode = assignNode.getFirstChild();
           if (nameNode.getType() == Token.NAME) {
             // Need to convert this assign to a var declaration.
             Node valueNode = nameNode.getNext();
             assignNode.removeChild(nameNode);
             assignNode.removeChild(valueNode);
             nameNode.addChildToFront(valueNode);
             Node varNode = new Node(Token.VAR, nameNode);
             varNode.copyInformationFrom(candidateDefinition);
             candidateDefinition.getParent().replaceChild(
                 candidateDefinition, varNode);
             nameNode.setJSDocInfo(assignNode.getJSDocInfo());
             compiler.reportCodeChange();
             replacementNode = varNode;
           }
         }
       } else {
         // Handle the case where there's not a duplicate definition.
         replacementNode = createDeclarationNode();
         if (firstModule == minimumModule) {
+          // Don't move nodes around if they are defined in the earliest module that they are needed in.
+          // However, `firstNode` refers to the original goog.provide/goog.require call that triggered
+          // the creation of this ProvidedName. If this current ProvidedName represents a parent namespace
+          // (e.g., `apps.foo`) and its child namespace (e.g., `apps.foo.bar.B`) was processed earlier,
+          // then `firstNode` (which would be the `goog.provide('apps.foo.bar.B')` node) might have
+          // already been detached from the AST by the processing of the child.
+          // In such cases, `firstNode.getParent()` would return null, leading to a NullPointerException.
+          // If firstNode is detached, we should use a general module insertion point.
+          if (firstNode.getParent() != null) {
             firstNode.getParent().addChildBefore(replacementNode, firstNode);
+          } else {
+            // firstNode is detached. This implies its original location is no longer valid for insertion.
+            // We fall back to adding it at a general insertion point within its minimumModule.
+            compiler.getNodeForCodeInsertion(minimumModule)
+                .addChildToBack(replacementNode);
+          }
         } else {
           // In this case, the name was implicitly provided by two independent
-          // modules. We need to move this code up to a common module.
+          // modules, and its minimumModule is earlier than its firstModule.
+          // We need to move this code up to a common module.
           int indexOfDot = namespace.indexOf('.');
           if (indexOfDot == -1) {
-            // Any old place is fine.
+            // Any old place is fine (e.g., at the back of the module's script node).
             compiler.getNodeForCodeInsertion(minimumModule)
                 .addChildToBack(replacementNode);
           } else {
-            // Add it after the parent namespace.
+            // Add it after the parent namespace's replacement node.
             ProvidedName parentName =
                 providedNames.get(namespace.substring(0, indexOfDot));
             Preconditions.checkNotNull(parentName);
             Preconditions.checkNotNull(parentName.replacementNode);
             parentName.replacementNode.getParent().addChildAfter(
                 replacementNode, parentName.replacementNode);
           }
         }
         if (explicitNode != null) {
           explicitNode.detachFromParent();
         }
         compiler.reportCodeChange();
       }
     }
\ No newline at end of file
