diff --git a/tmp/2ecea9ca-febd-4d68-bb6c-699495bfc55e_buggy.java b/tmp/a0cd4b19-3d7f-420f-b38b-d26c686f8a88_fixed.java
index 39c4220..bad266c 100644
--- a/tmp/2ecea9ca-febd-4d68-bb6c-699495bfc55e_buggy.java
+++ b/tmp/a0cd4b19-3d7f-420f-b38b-d26c686f8a88_fixed.java
@@ -1,21 +1,34 @@
     private final static int _parseIndex(String str) {
         final int len = str.length();
         // [Issue#133]: beware of super long indexes; assume we never
         // have arrays over 2 billion entries so ints are fine.
         if (len == 0 || len > 10) {
             return -1;
         }
         for (int i = 0; i < len; ++i) {
-            char c = str.charAt(i++);
+            // BUG: Original code had 'str.charAt(i++)', which incremented 'i' twice
+            // per loop iteration (once in charAt and once in loop header),
+            // causing it to skip checking alternate characters.
+            // Fixed to check every character.
+            char c = str.charAt(i); 
             if (c > '9' || c < '0') {
                 return -1;
             }
         }
         if (len == 10) {
+            // For 10-digit numbers, we must ensure it doesn't exceed Integer.MAX_VALUE.
+            // A long parse is used for this boundary check.
             long l = NumberInput.parseLong(str);
             if (l > Integer.MAX_VALUE) {
                 return -1;
             }
+            // If it's a 10-digit number that fits, fall through to parseInt.
+            // The call below will succeed or throw NumberFormatException
+            // if NumberInput.parseInt is strict about overflow (which it should be).
+            // However, since we've already validated it fits, parseInt should be fine.
         }
+        // At this point, we know the string consists only of digits and is
+        // at most 10 digits long, and if 10 digits, it fits into an int.
+        // NumberInput.parseInt will handle the actual conversion.
         return NumberInput.parseInt(str);
     }
\ No newline at end of file
