diff --git a/tmp/c3a0d603-dac2-4205-a22e-899ba912f73a_buggy.java b/tmp/0186d445-9f79-4586-8f74-7353678b0459_fixed.java
index 39c4220..d3cca76 100644
--- a/tmp/c3a0d603-dac2-4205-a22e-899ba912f73a_buggy.java
+++ b/tmp/0186d445-9f79-4586-8f74-7353678b0459_fixed.java
@@ -1,21 +1,25 @@
     private final static int _parseIndex(String str) {
         final int len = str.length();
         // [Issue#133]: beware of super long indexes; assume we never
         // have arrays over 2 billion entries so ints are fine.
         if (len == 0 || len > 10) {
             return -1;
         }
+        // Validate that all characters are digits
         for (int i = 0; i < len; ++i) {
-            char c = str.charAt(i++);
+            char c = str.charAt(i); // Bug fix: removed i++ from here, as it was incrementing 'i' twice
             if (c > '9' || c < '0') {
                 return -1;
             }
         }
+        // If length is 10, it might exceed Integer.MAX_VALUE, so parse as long first.
+        // For example, "2147483648" is 10 digits but too large for int.
         if (len == 10) {
             long l = NumberInput.parseLong(str);
             if (l > Integer.MAX_VALUE) {
                 return -1;
             }
         }
+        // If all checks pass, it's a valid integer string representation within int range.
         return NumberInput.parseInt(str);
     }
\ No newline at end of file
