diff --git a/tmp/3b08716b-fe95-4d72-ade5-69ab495a8019_buggy.java b/tmp/7d56e2e3-af37-4c22-9bdf-ef7482cac23e_fixed.java
index 39c4220..4ba28b0 100644
--- a/tmp/3b08716b-fe95-4d72-ade5-69ab495a8019_buggy.java
+++ b/tmp/7d56e2e3-af37-4c22-9bdf-ef7482cac23e_fixed.java
@@ -1,21 +1,29 @@
     private final static int _parseIndex(String str) {
         final int len = str.length();
         // [Issue#133]: beware of super long indexes; assume we never
         // have arrays over 2 billion entries so ints are fine.
         if (len == 0 || len > 10) {
             return -1;
         }
         for (int i = 0; i < len; ++i) {
-            char c = str.charAt(i++);
+            // BUG FIX: 'i' was incremented twice (once in loop declaration, once inside charAt()).
+            // This caused some characters to be skipped during validation.
+            char c = str.charAt(i); 
             if (c > '9' || c < '0') {
                 return -1;
             }
         }
         if (len == 10) {
+            // This block handles potential overflow for 10-digit numbers.
+            // A 10-digit string can represent a number larger than Integer.MAX_VALUE.
+            // Example: "2147483648" (Integer.MAX_VALUE + 1)
             long l = NumberInput.parseLong(str);
             if (l > Integer.MAX_VALUE) {
                 return -1;
             }
         }
+        // If all checks pass, parse the string into an integer.
+        // This will only be called if 'str' consists purely of digits
+        // and, if 10 digits long, fits within Integer.MAX_VALUE.
         return NumberInput.parseInt(str);
     }
\ No newline at end of file
