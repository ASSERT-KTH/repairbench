diff --git a/tmp/83f5755d-baf3-45f5-9447-bf5878e8058f_buggy.java b/tmp/02b30e33-3701-421d-ae60-ac16c08c4b8c_fixed.java
index 39c4220..a2f30c7 100644
--- a/tmp/83f5755d-baf3-45f5-9447-bf5878e8058f_buggy.java
+++ b/tmp/02b30e33-3701-421d-ae60-ac16c08c4b8c_fixed.java
@@ -1,21 +1,44 @@
     private final static int _parseIndex(String str) {
         final int len = str.length();
+
         // [Issue#133]: beware of super long indexes; assume we never
         // have arrays over 2 billion entries so ints are fine.
-        if (len == 0 || len > 10) {
+
+        // 1. Basic length checks and leading zero rule (RFC 6901)
+        if (len == 0) {
+            return -1; // Empty string is not a valid index
+        }
+        // An array index string MUST NOT contain leading zeroes, unless it is "0".
+        // This implies that if length > 1, the first character cannot be '0'.
+        if (len > 1 && str.charAt(0) == '0') {
+            return -1;
+        }
+        // A 10-digit number can be Integer.MAX_VALUE (2147483647).
+        // A string with more than 10 digits will always exceed Integer.MAX_VALUE.
+        if (len > 10) {
             return -1;
         }
+
+        // 2. Character validation: ensure all characters are digits
         for (int i = 0; i < len; ++i) {
-            char c = str.charAt(i++);
-            if (c > '9' || c < '0') {
-                return -1;
+            // BUG FIX: The original code had `str.charAt(i++)` which incremented `i` twice per loop iteration,
+            // causing it to skip characters. It should only be incremented by the `for` loop's `++i`.
+            char c = str.charAt(i);
+            if (c < '0' || c > '9') {
+                return -1; // Non-digit character found (e.g., 'e' in "1e0")
             }
         }
-        if (len == 10) {
+
+        // 3. Parse and check value range
+        // At this point, we know 'str' contains only digits,
+        // has no leading zeros (unless it's "0"), and its length is at most 10.
+        // Use NumberInput.parseLong to safely parse the number, then check if it fits into an int.
         long l = NumberInput.parseLong(str);
-            if (l > Integer.MAX_VALUE) {
+        if (l > Integer.MAX_VALUE) { // Check if the parsed value exceeds int max
             return -1;
         }
-        }
-        return NumberInput.parseInt(str);
+        // Since we've already validated characters are digits and handled leading zeros,
+        // 'l' will always be non-negative.
+
+        return (int) l;
     }
\ No newline at end of file
