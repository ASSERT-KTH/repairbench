diff --git a/tmp/b9e22bbf-3572-4798-9d43-c925d84ea888_buggy.java b/tmp/9e95b0a4-1713-4f40-9364-0acb1b684220_fixed.java
index 39c4220..ad2cc7c 100644
--- a/tmp/b9e22bbf-3572-4798-9d43-c925d84ea888_buggy.java
+++ b/tmp/9e95b0a4-1713-4f40-9364-0acb1b684220_fixed.java
@@ -1,21 +1,39 @@
     private final static int _parseIndex(String str) {
         final int len = str.length();
         // [Issue#133]: beware of super long indexes; assume we never
         // have arrays over 2 billion entries so ints are fine.
-        if (len == 0 || len > 10) {
+        if (len == 0 || len > 10) { // Max 10 digits for Integer.MAX_VALUE (2147483647)
             return -1;
         }
+
+        // RFC 6901, Section 3: "Leading zeros are not allowed on integers."
+        // Except for the number "0" itself.
+        if (len > 1 && str.charAt(0) == '0') {
+            return -1;
+        }
+
         for (int i = 0; i < len; ++i) {
-            char c = str.charAt(i++);
+            // BUG FIX: The original code had `str.charAt(i++)`, which incremented `i` twice per loop,
+            // causing it to skip characters and miss validation.
+            char c = str.charAt(i); 
             if (c > '9' || c < '0') {
                 return -1;
             }
         }
+        // At this point, we know 'str' contains only digits, is 1-10 characters long,
+        // and does not have a leading '0' unless it's "0" itself.
+
+        // For 10-digit numbers, we need to check if it exceeds Integer.MAX_VALUE.
+        // NumberInput.parseInt would throw NumberFormatException for such strings.
+        // JsonPointer spec implies indices must fit into standard integer types.
         if (len == 10) {
-            long l = NumberInput.parseLong(str);
-            if (l > Integer.MAX_VALUE) {
+            long l = NumberInput.parseLong(str); // NumberInput.parseLong handles parsing
+            if (l > Integer.MAX_VALUE) { // Check if it exceeds max int value
                 return -1;
             }
         }
+        // For numbers less than 10 digits, or 10 digits within Integer.MAX_VALUE,
+        // NumberInput.parseInt is safe because we've already verified the string
+        // only contains digits and fits the criteria.
         return NumberInput.parseInt(str);
     }
\ No newline at end of file
