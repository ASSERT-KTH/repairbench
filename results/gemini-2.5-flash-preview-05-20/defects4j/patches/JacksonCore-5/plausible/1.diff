diff --git a/tmp/7d65a9c1-313c-45a5-807a-7fe931549d75_buggy.java b/tmp/a3338318-da01-4911-8075-12655b4f9831_fixed.java
index 39c4220..0d6ff06 100644
--- a/tmp/7d65a9c1-313c-45a5-807a-7fe931549d75_buggy.java
+++ b/tmp/a3338318-da01-4911-8075-12655b4f9831_fixed.java
@@ -1,21 +1,39 @@
     private final static int _parseIndex(String str) {
         final int len = str.length();
         // [Issue#133]: beware of super long indexes; assume we never
         // have arrays over 2 billion entries so ints are fine.
-        if (len == 0 || len > 10) {
+        if (len == 0 || len > 10) { // Max int is 10 digits
             return -1;
         }
+
+        // Per RFC 6901, array indices must be positive decimal integers
+        // without leading zeros, except for "0" itself.
+        if (len > 1 && str.charAt(0) == '0') {
+            return -1;
+        }
+
         for (int i = 0; i < len; ++i) {
-            char c = str.charAt(i++);
+            // BUG FIX: The original code had 'str.charAt(i++)', which would
+            // increment 'i' twice per iteration (once inside charAt, once in loop condition),
+            // causing it to skip characters.
+            char c = str.charAt(i);
             if (c > '9' || c < '0') {
-                return -1;
+                return -1; // Not a digit
             }
         }
+
+        // At this point, we know it's a string of 1-10 digits, with no leading zeros (unless "0").
+        // Now, check for integer overflow if it's a 10-digit number.
         if (len == 10) {
+            // If it's 10 digits, it might exceed Integer.MAX_VALUE.
+            // Use parseLong to avoid overflow during parsing before comparison.
             long l = NumberInput.parseLong(str);
             if (l > Integer.MAX_VALUE) {
-                return -1;
+                return -1; // Too large to fit in an int.
             }
         }
+        // If it's less than 10 digits, or 10 digits but fits in int,
+        // it's a valid integer representation.
+        // NumberInput.parseInt handles the final string to int conversion.
         return NumberInput.parseInt(str);
     }
\ No newline at end of file
