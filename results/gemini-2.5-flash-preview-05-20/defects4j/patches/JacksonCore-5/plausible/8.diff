diff --git a/tmp/aa44a86b-9bfa-4a5c-b63d-37ea211f70c4_buggy.java b/tmp/4cc2e855-26d8-4b72-9aba-043675a9a57a_fixed.java
index 39c4220..85fbf2b 100644
--- a/tmp/aa44a86b-9bfa-4a5c-b63d-37ea211f70c4_buggy.java
+++ b/tmp/4cc2e855-26d8-4b72-9aba-043675a9a57a_fixed.java
@@ -1,21 +1,46 @@
     private final static int _parseIndex(String str) {
         final int len = str.length();
         // [Issue#133]: beware of super long indexes; assume we never
         // have arrays over 2 billion entries so ints are fine.
-        if (len == 0 || len > 10) {
+        // JSON Pointer ABNF for array indices (from RFC 6901, Section 3):
+        // "0" / (DIGIT1-9 *DIGIT)
+        // This implies:
+        // 1. Must be a sequence of digits.
+        // 2. Cannot have leading zeros if the number is greater than 0 (i.e., "01" is invalid, but "0" is valid).
+        // 3. Negative numbers are not allowed.
+
+        if (len == 0 || len > 10) { // len=0: invalid empty string. len > 10: too long for int.
             return -1;
         }
+
+        // JSON Pointer specific check: Disallow leading zeros for multi-digit numbers.
+        // Example: "01" should be invalid, but "0" is valid.
+        if (len > 1 && str.charAt(0) == '0') {
+            return -1;
+        }
+
+        // Validate that all characters are digits.
         for (int i = 0; i < len; ++i) {
-            char c = str.charAt(i++);
+            char c = str.charAt(i); // BUG FIX: Original code had `i++` inside `str.charAt(i++)`,
+                                    // causing `i` to increment twice per loop, skipping characters.
+                                    // This caused "1e0" to pass digit validation.
             if (c > '9' || c < '0') {
-                return -1;
+                return -1; // Found a non-digit character (e.g., 'e', '-', etc.)
             }
         }
+
+        // At this point, `str` consists only of digits, its length is valid (1 to 10),
+        // and it adheres to the leading zero rule.
+
+        // For 10-digit numbers, explicitly check for overflow against Integer.MAX_VALUE.
+        // Integer.MAX_VALUE is 2,147,483,647 (10 digits).
         if (len == 10) {
-            long l = NumberInput.parseLong(str);
+            long l = NumberInput.parseLong(str); // This will parse correctly as it's pure digits.
             if (l > Integer.MAX_VALUE) {
-                return -1;
+                return -1; // Number is too large to fit in an int
             }
         }
-        return NumberInput.parseInt(str);
+        // For lengths < 10, if all characters are digits, NumberInput.parseInt will not overflow.
+
+        return NumberInput.parseInt(str); // Safe to parse now.
     }
\ No newline at end of file
