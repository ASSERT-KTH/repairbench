diff --git a/tmp/35b30b0a-e4f3-4a18-8c7b-ac96368cdba8_buggy.java b/tmp/7161c7ef-35c6-4fbb-942a-e97a7969f806_fixed.java
index 39c4220..bd45f74 100644
--- a/tmp/35b30b0a-e4f3-4a18-8c7b-ac96368cdba8_buggy.java
+++ b/tmp/7161c7ef-35c6-4fbb-942a-e97a7969f806_fixed.java
@@ -1,21 +1,36 @@
     private final static int _parseIndex(String str) {
         final int len = str.length();
         // [Issue#133]: beware of super long indexes; assume we never
         // have arrays over 2 billion entries so ints are fine.
-        if (len == 0 || len > 10) {
+        if (len == 0 || len > 10) { // Max length for Integer.MAX_VALUE is 10 digits
             return -1;
         }
+        // Strict JSON Pointer indices disallow leading zeros, unless it's "0" itself.
+        // E.g., "0" -> 0 (valid)
+        // "01" -> -1 (invalid as index, treated as name "01")
+        if (len > 1 && str.charAt(0) == '0') {
+            return -1;
+        }
+
+        // Validate all characters are digits
         for (int i = 0; i < len; ++i) {
-            char c = str.charAt(i++);
+            char c = str.charAt(i); // FIX: Removed i++ here; 'i' is already incremented by loop header
             if (c > '9' || c < '0') {
-                return -1;
+                return -1; // Found non-digit character (e.g., 'e' in "1e0", '-' in "-1")
             }
         }
+        
+        // For 10-digit numbers, explicitly check for overflow against Integer.MAX_VALUE
         if (len == 10) {
+            // Note: At this point, we are guaranteed all chars are digits.
+            // NumberInput.parseLong will not throw NumberFormatException.
             long l = NumberInput.parseLong(str);
             if (l > Integer.MAX_VALUE) {
-                return -1;
+                return -1; // Number too large to fit in int
             }
         }
+        // For numbers <= 9 digits, or 10-digit numbers that fit, parse them.
+        // Note: At this point, we are guaranteed all chars are digits and number fits in int.
+        // NumberInput.parseInt will not throw NumberFormatException.
         return NumberInput.parseInt(str);
     }
\ No newline at end of file
