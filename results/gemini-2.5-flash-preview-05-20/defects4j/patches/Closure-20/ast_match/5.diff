diff --git a/tmp/d221f4b7-8d61-4adc-ba8b-af851cc51383_buggy.java b/tmp/63db7486-8400-474c-8472-57b5df8188e4_fixed.java
index d4e6d48..fed182d 100644
--- a/tmp/d221f4b7-8d61-4adc-ba8b-af851cc51383_buggy.java
+++ b/tmp/63db7486-8400-474c-8472-57b5df8188e4_fixed.java
@@ -1,23 +1,29 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
       // Fold String(a) to '' + (a) on immutable literals,
       // which allows further optimizations
       //
       // We can't do this in the general case, because String(a) has
       // slightly different semantics than '' + (a). See
       // http://code.google.com/p/closure-compiler/issues/detail?id=759
       Node value = callTarget.getNext();
-      if (value != null) {
+
+      // We can only fold String(a) if:
+      // 1. There is exactly one argument 'a'.
+      //    String() returns "" (not "undefined"), so it's not String('') + undefined.
+      //    String(a, b) is not typically valid usage to fold to '' + a.
+      // 2. 'a' is an immutable value. Their semantics differ for mutable objects.
+      if (value != null && value.getNext() == null && NodeUtil.isImmutableValue(value)) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
     return n;
   }
\ No newline at end of file
