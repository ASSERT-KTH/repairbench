diff --git a/tmp/65ea5ba0-baf5-4b3e-8926-b311b20b29ad_buggy.java b/tmp/7db76aa8-7eb2-4151-b2d0-11bcc16fe9e0_fixed.java
index d64eec3..a2b304f 100644
--- a/tmp/65ea5ba0-baf5-4b3e-8926-b311b20b29ad_buggy.java
+++ b/tmp/7db76aa8-7eb2-4151-b2d0-11bcc16fe9e0_fixed.java
@@ -1,122 +1,146 @@
     /**
      * Draws the axis label.
      *
      * @param label  the label text.
      * @param g2  the graphics device.
      * @param plotArea  the plot area.
      * @param dataArea  the area inside the axes.
      * @param edge  the location of the axis.
      * @param state  the axis state (<code>null</code> not permitted).
      * @param plotState  the plot state (<code>null</code> permitted).
      *
      * @return Information about the axis.
      */
     protected AxisState drawLabel(String label, Graphics2D g2, 
             Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, 
             AxisState state, PlotRenderingInfo plotState) {
 
         // it is unlikely that 'state' will be null, but check anyway...
         if (state == null) {
             throw new IllegalArgumentException("Null 'state' argument.");
         }
         
         if ((label == null) || (label.equals(""))) {
             return state;
         }
 
         Font font = getLabelFont();
+        // Ensure font is not null. If getLabelFont() can return null,
+        // using it directly with g2.setFont() would cause a NullPointerException.
+        if (font == null) {
+            font = g2.getFont(); // Fallback to current graphics font
+        }
+        
         RectangleInsets insets = getLabelInsets();
+        // Ensure insets is not null. If getLabelInsets() can return null,
+        // accessing its methods (e.g., getBottom()) would cause a NullPointerException.
+        if (insets == null) {
+            insets = RectangleInsets.ZERO_INSETS; // Fallback to zero insets
+        }
+        
         g2.setFont(font);
-        g2.setPaint(getLabelPaint());
+        
+        Paint paint = getLabelPaint();
+        // Ensure paint is not null. If getLabelPaint() can return null,
+        // using it directly with g2.setPaint() would cause a NullPointerException.
+        if (paint == null) {
+            paint = g2.getPaint(); // Fallback to current graphics paint
+        }
+        g2.setPaint(paint);
+        
         FontMetrics fm = g2.getFontMetrics();
         Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);
         Shape hotspot = null;
         
         if (edge == RectangleEdge.TOP) {
             AffineTransform t = AffineTransform.getRotateInstance(
                     getLabelAngle(), labelBounds.getCenterX(), 
                     labelBounds.getCenterY());
             Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
             labelBounds = rotatedLabelBounds.getBounds2D();
             float w = (float) labelBounds.getWidth();
             float h = (float) labelBounds.getHeight();
             float labelx = (float) dataArea.getCenterX();
             float labely = (float) (state.getCursor() - insets.getBottom() 
                     - h / 2.0);
             TextUtilities.drawRotatedString(label, g2, labelx, labely, 
                     TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
             hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
                     labely - h / 2.0f, w, h);
             state.cursorUp(insets.getTop() + labelBounds.getHeight() 
                     + insets.getBottom());
         }
         else if (edge == RectangleEdge.BOTTOM) {
             AffineTransform t = AffineTransform.getRotateInstance(
                     getLabelAngle(), labelBounds.getCenterX(), 
                     labelBounds.getCenterY());
             Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
             labelBounds = rotatedLabelBounds.getBounds2D();
             float w = (float) labelBounds.getWidth();
             float h = (float) labelBounds.getHeight();
             float labelx = (float) dataArea.getCenterX();
             float labely = (float) (state.getCursor() + insets.getTop() 
                     + h / 2.0);
             TextUtilities.drawRotatedString(label, g2, labelx, labely, 
                     TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
             hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
                     labely - h / 2.0f, w, h);
             state.cursorDown(insets.getTop() + labelBounds.getHeight() 
                     + insets.getBottom());
         }
         else if (edge == RectangleEdge.LEFT) {
             AffineTransform t = AffineTransform.getRotateInstance(
                     getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), 
                     labelBounds.getCenterY());
             Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
             labelBounds = rotatedLabelBounds.getBounds2D();
             float w = (float) labelBounds.getWidth();
             float h = (float) labelBounds.getHeight();
             float labelx = (float) (state.getCursor() - insets.getRight() 
                     - w / 2.0);
             float labely = (float) dataArea.getCenterY();
             TextUtilities.drawRotatedString(label, g2, labelx, labely, 
                     TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, 
                     TextAnchor.CENTER);
             hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
                     labely - h / 2.0f, w, h);
             state.cursorLeft(insets.getLeft() + labelBounds.getWidth() 
                     + insets.getRight());
         }
         else if (edge == RectangleEdge.RIGHT) {
 
             AffineTransform t = AffineTransform.getRotateInstance(
                     getLabelAngle() + Math.PI / 2.0, 
                     labelBounds.getCenterX(), labelBounds.getCenterY());
             Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
             labelBounds = rotatedLabelBounds.getBounds2D();
             float w = (float) labelBounds.getWidth();
             float h = (float) labelBounds.getHeight();
             float labelx = (float) (state.getCursor() 
                             + insets.getLeft() + w / 2.0);
             float labely = (float) (dataArea.getY() + dataArea.getHeight() 
                     / 2.0);
             TextUtilities.drawRotatedString(label, g2, labelx, labely, 
                     TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, 
                     TextAnchor.CENTER);
             hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
                     labely - h / 2.0f, w, h);
             state.cursorRight(insets.getLeft() + labelBounds.getWidth() 
                     + insets.getRight());
 
         }
+        // plotState can be null, so we must guard access to it.
         if (plotState != null && hotspot != null) {
             ChartRenderingInfo owner = plotState.getOwner();
+            // owner can be null if plotState is not part of a full ChartRenderingInfo
+            if (owner != null) { 
                 EntityCollection entities = owner.getEntityCollection();
                 if (entities != null) {
                     entities.add(new AxisLabelEntity(this, hotspot, 
                             this.labelToolTip, this.labelURL));
                 }
             }
+        }
         return state;
 
     }
\ No newline at end of file
