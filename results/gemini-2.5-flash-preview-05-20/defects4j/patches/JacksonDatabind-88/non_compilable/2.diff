diff --git a/tmp/5345feba-6d28-42bb-990d-75509277b586_buggy.java b/tmp/8b760c1f-b5df-49d6-b1e9-1e4d7418a7da_fixed.java
index ae1f3a6..d68de21 100644
--- a/tmp/5345feba-6d28-42bb-990d-75509277b586_buggy.java
+++ b/tmp/8b760c1f-b5df-49d6-b1e9-1e4d7418a7da_fixed.java
@@ -1,34 +1,37 @@
     protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
     {
         /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
          *    check if any generics info is added; and only then ask factory
          *    to do translation when necessary
          */
         TypeFactory tf = ctxt.getTypeFactory();
         if (id.indexOf('<') > 0) {
             // note: may want to try combining with specialization (esp for EnumMap)?
             // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
             //    compatibility -- needed later anyway, and not doing so may open
             //    security issues.
             JavaType t = tf.constructFromCanonical(id);
-                // Probably cleaner to have a method in `TypeFactory` but can't add in patch
-            return t;
+            // Fix: For generic types, just like for non-generic types, we must
+            //      ensure that the constructed type `t` is a specialization
+            //      (i.e., a subtype or the same type) of the `_baseType`.
+            //      This is handled by `constructSpecializedType`.
+            return tf.constructSpecializedType(_baseType, t);
         }
         Class<?> cls;
         try {
             cls =  tf.findClass(id);
         } catch (ClassNotFoundException e) {
             // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
             //   DeserializationContext, just playing it safe
             if (ctxt instanceof DeserializationContext) {
                 DeserializationContext dctxt = (DeserializationContext) ctxt;
                 // First: we may have problem handlers that can deal with it?
                 return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
             }
             // ... meaning that we really should never get here.
             return null;
         } catch (Exception e) {
             throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
         }
         return tf.constructSpecializedType(_baseType, cls);
     }
\ No newline at end of file
