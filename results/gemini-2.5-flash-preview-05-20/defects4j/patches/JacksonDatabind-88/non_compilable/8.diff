diff --git a/tmp/170c91a1-03b4-4e1b-9898-130a53e225f0_buggy.java b/tmp/31a3d33e-5a8f-4cd0-b4f7-f991072b9877_fixed.java
index ae1f3a6..a9092e7 100644
--- a/tmp/170c91a1-03b4-4e1b-9898-130a53e225f0_buggy.java
+++ b/tmp/31a3d33e-5a8f-4cd0-b4f7-f991072b9877_fixed.java
@@ -1,34 +1,54 @@
     protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
     {
         /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
          *    check if any generics info is added; and only then ask factory
          *    to do translation when necessary
          */
         TypeFactory tf = ctxt.getTypeFactory();
         if (id.indexOf('<') > 0) {
             // note: may want to try combining with specialization (esp for EnumMap)?
+            JavaType t = tf.constructFromCanonical(id);
             // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
             //    compatibility -- needed later anyway, and not doing so may open
             //    security issues.
-            JavaType t = tf.constructFromCanonical(id);
             // Probably cleaner to have a method in `TypeFactory` but can't add in patch
+            
+            // Fix: Added assignability check for generic types (databind#1735)
+            // If the constructed generic type is not a subtype of the _baseType,
+            // it's an invalid type id for this context.
+            if (!_baseType.isAssignableFrom(t)) {
+                if (ctxt instanceof DeserializationContext) {
+                    // Use reportBadDefinition for deserialization specific errors,
+                    // allowing for proper error handling and message formatting.
+                    throw ((DeserializationContext) ctxt).reportBadDefinition(
+                            _baseType,
+                            String.format("Type id '%s' (class %s) is not a subtype of base type %s",
+                                    id, t.getRawClass().getName(), _baseType.toCanonical()));
+                } else {
+                    // Fallback for non-deserialization contexts, though this method is
+                    // primarily used during deserialization.
+                    throw new IllegalArgumentException(
+                            String.format("Invalid type id '%s' (class %s): not a subtype of base type %s",
+                                    id, t.getRawClass().getName(), _baseType.toCanonical()));
+                }
+            }
             return t;
         }
         Class<?> cls;
         try {
             cls =  tf.findClass(id);
         } catch (ClassNotFoundException e) {
             // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
             //   DeserializationContext, just playing it safe
             if (ctxt instanceof DeserializationContext) {
                 DeserializationContext dctxt = (DeserializationContext) ctxt;
                 // First: we may have problem handlers that can deal with it?
                 return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
             }
             // ... meaning that we really should never get here.
             return null;
         } catch (Exception e) {
             throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
         }
         return tf.constructSpecializedType(_baseType, cls);
     }
\ No newline at end of file
