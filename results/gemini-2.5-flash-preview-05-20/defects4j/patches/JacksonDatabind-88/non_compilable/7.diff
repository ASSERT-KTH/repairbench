diff --git a/tmp/2cbc06e2-11b7-418a-a731-1fc6774a1b59_buggy.java b/tmp/7b9b41fb-5950-4976-99d8-fbee1a1d26c6_fixed.java
index ae1f3a6..f3b10ac 100644
--- a/tmp/2cbc06e2-11b7-418a-a731-1fc6774a1b59_buggy.java
+++ b/tmp/7b9b41fb-5950-4976-99d8-fbee1a1d26c6_fixed.java
@@ -1,34 +1,50 @@
     protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
     {
         /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
          *    check if any generics info is added; and only then ask factory
          *    to do translation when necessary
          */
         TypeFactory tf = ctxt.getTypeFactory();
         if (id.indexOf('<') > 0) {
             // note: may want to try combining with specialization (esp for EnumMap)?
             // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
             //    compatibility -- needed later anyway, and not doing so may open
             //    security issues.
             JavaType t = tf.constructFromCanonical(id);
                 // Probably cleaner to have a method in `TypeFactory` but can't add in patch
+
+            // START FIX for databind#1735
+            // When a generic type ID is used, `constructFromCanonical` does not
+            // implicitly verify its assignability against `_baseType`.
+            // This explicit check ensures 't' is a subtype or compatible with '_baseType'.
+            // This prevents arbitrary type injection which could lead to security issues.
+            // This check parallels the one performed by `tf.constructSpecializedType` for non-generic IDs.
+            if (_baseType != null && ! _baseType.isAssignableFrom(t)) {
+                throw new IllegalArgumentException(String.format(
+                        "Class %s is not assignable to %s",
+                        t.getRawClass().getName(), _baseType.getRawClass().getName()));
+            }
+            // END FIX for databind#1735
+
             return t;
         }
         Class<?> cls;
         try {
             cls =  tf.findClass(id);
         } catch (ClassNotFoundException e) {
             // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
             //   DeserializationContext, just playing it safe
             if (ctxt instanceof DeserializationContext) {
                 DeserializationContext dctxt = (DeserializationContext) ctxt;
                 // First: we may have problem handlers that can deal with it?
                 return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
             }
             // ... meaning that we really should never get here.
             return null;
         } catch (Exception e) {
             throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
         }
+        // For non-generic IDs, `constructSpecializedType` already handles the assignment compatibility check
+        // by throwing `IllegalArgumentException` if `cls` is not assignable to `_baseType.getRawClass()`.
         return tf.constructSpecializedType(_baseType, cls);
     }
\ No newline at end of file
