diff --git a/tmp/1dd77ae1-71e3-4cb1-a4be-ab1fa5b0c96e_buggy.java b/tmp/73bba92e-7791-4982-ae40-167f91c14fde_fixed.java
index 3c69e10..d7441df 100644
--- a/tmp/1dd77ae1-71e3-4cb1-a4be-ab1fa5b0c96e_buggy.java
+++ b/tmp/73bba92e-7791-4982-ae40-167f91c14fde_fixed.java
@@ -1,27 +1,32 @@
     /**
      * @param Umin smallest Mann-Whitney U value
      * @param n1 number of subjects in first sample
      * @param n2 number of subjects in second sample
      * @return two-sided asymptotic p-value
      * @throws ConvergenceException if the p-value can not be computed
      * due to a convergence error
      * @throws MaxCountExceededException if the maximum number of
      * iterations is exceeded
      */
     private double calculateAsymptoticPValue(final double Umin,
                                              final int n1,
                                              final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
-        final int n1n2prod = n1 * n2;
-
-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
-        final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
+        // The product n1 * n2 * (n1 + n2 + 1) can overflow if n1 and n2 are large ints.
+        // Cast to double early to prevent this intermediate integer overflow.
+        final double EU = (double)n1 * n2 / 2.0;
+        final double VarU = (double)n1 * n2 * (n1 + n2 + 1) / 12.0;
 
         final double z = (Umin - EU) / FastMath.sqrt(VarU);
 
         final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
+        // For a two-sided test, the p-value is 2 * P(Z <= -|z|).
+        // Since Umin is chosen as the smaller of the two U values,
+        // (Umin - EU) will always be less than or equal to 0,
+        // so z will always be less than or equal to 0.
+        // Therefore, standardNormal.cumulativeProbability(z) correctly gives P(Z <= z)
+        // which is equivalent to P(Z <= -|z|).
         return 2 * standardNormal.cumulativeProbability(z);
     }
