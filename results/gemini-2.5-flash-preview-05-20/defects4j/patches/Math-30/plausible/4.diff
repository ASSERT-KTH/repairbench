diff --git a/tmp/9ebd9d16-00d0-42ab-bba4-192d58994dd6_buggy.java b/tmp/adc04c9c-3bdb-48c1-8981-16df8df9157f_fixed.java
index 3c69e10..8548534 100644
--- a/tmp/9ebd9d16-00d0-42ab-bba4-192d58994dd6_buggy.java
+++ b/tmp/adc04c9c-3bdb-48c1-8981-16df8df9157f_fixed.java
@@ -1,27 +1,32 @@
     /**
      * @param Umin smallest Mann-Whitney U value
      * @param n1 number of subjects in first sample
      * @param n2 number of subjects in second sample
      * @return two-sided asymptotic p-value
      * @throws ConvergenceException if the p-value can not be computed
      * due to a convergence error
      * @throws MaxCountExceededException if the maximum number of
      * iterations is exceeded
      */
     private double calculateAsymptoticPValue(final double Umin,
                                              final int n1,
                                              final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
-        final int n1n2prod = n1 * n2;
+        // Changed n1n2prod to double to prevent intermediate integer overflow
+        // for n1 * n2 * (n1 + n2 + 1) when n1 and n2 are large.
+        final double n1n2prod = (double) n1 * n2;
 
         // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
         final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
+        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0; // This will now use double arithmetic throughout
 
         final double z = (Umin - EU) / FastMath.sqrt(VarU);
 
         final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
+        // Umin = min(U1, U2), where U1 + U2 = n1 * n2, and EU = n1 * n2 / 2.
+        // Therefore, Umin <= EU, which implies z <= 0.
+        // For a two-sided test with z <= 0, the p-value is 2 * P(Z <= z).
         return 2 * standardNormal.cumulativeProbability(z);
     }
\ No newline at end of file
