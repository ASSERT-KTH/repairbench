diff --git a/tmp/3bfc5934-f2aa-43cd-a938-aa707c243e21_buggy.java b/tmp/b129c93d-e578-41ff-9d77-a568e98e2dcd_fixed.java
index 3c69e10..0c7ef78 100644
--- a/tmp/3bfc5934-f2aa-43cd-a938-aa707c243e21_buggy.java
+++ b/tmp/b129c93d-e578-41ff-9d77-a568e98e2dcd_fixed.java
@@ -1,27 +1,43 @@
+import org.apache.commons.math3.distribution.NormalDistribution;
+import org.apache.commons.math3.exception.ConvergenceException;
+import org.apache.commons.math3.exception.MaxCountExceededException;
+import org.apache.commons.math3.util.FastMath;
+
+class MannWhitneyUTest {
     /**
      * @param Umin smallest Mann-Whitney U value
      * @param n1 number of subjects in first sample
      * @param n2 number of subjects in second sample
      * @return two-sided asymptotic p-value
      * @throws ConvergenceException if the p-value can not be computed
      * due to a convergence error
      * @throws MaxCountExceededException if the maximum number of
      * iterations is exceeded
      */
     private double calculateAsymptoticPValue(final double Umin,
                                              final int n1,
                                              final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
         final int n1n2prod = n1 * n2;
 
         // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
         final double EU = n1n2prod / 2.0;
         final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
+        // The z-score calculation.
+        // A continuity correction (e.g., subtracting 0.5) is sometimes applied,
+        // but the current Commons Math implementation typically does not include it
+        // at this level for the basic normal approximation.
         final double z = (Umin - EU) / FastMath.sqrt(VarU);
 
         final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+        // For a two-sided test, the p-value is P(Z <= -|z|) + P(Z >= |z|) = 2 * P(Z <= -|z|)
+        // This ensures the p-value is symmetrical and always between 0 and 1.
+        // Given that Umin is the "smallest U value", z should be <= 0,
+        // making -FastMath.abs(z) equivalent to z. However, using FastMath.abs(z)
+        // makes the calculation robust to any z-score sign.
+        return 2 * standardNormal.cumulativeProbability(-FastMath.abs(z));
+    }
 }
\ No newline at end of file
