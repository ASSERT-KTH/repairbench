diff --git a/tmp/dec5d098-2a87-4751-a261-f7f82addec79_buggy.java b/tmp/2e8cb8ea-5b3f-450a-8d9c-df456fa95f90_fixed.java
index 3c69e10..3d0a695 100644
--- a/tmp/dec5d098-2a87-4751-a261-f7f82addec79_buggy.java
+++ b/tmp/2e8cb8ea-5b3f-450a-8d9c-df456fa95f90_fixed.java
@@ -1,27 +1,37 @@
     /**
      * @param Umin smallest Mann-Whitney U value
      * @param n1 number of subjects in first sample
      * @param n2 number of subjects in second sample
      * @return two-sided asymptotic p-value
      * @throws ConvergenceException if the p-value can not be computed
      * due to a convergence error
      * @throws MaxCountExceededException if the maximum number of
      * iterations is exceeded
      */
     private double calculateAsymptoticPValue(final double Umin,
                                              final int n1,
                                              final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
         final int n1n2prod = n1 * n2;
 
         // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
         final double EU = n1n2prod / 2.0;
         final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
+        // The z-score for the Mann-Whitney U test.
+        // No continuity correction is applied by default in Commons Math for this specific formula.
+        // Theoretical Umin should always be <= EU, making z <= 0.
+        // However, to ensure numerical stability and correct two-sided p-value calculation
+        // in cases where Umin might (due to floating point issues or different U definitions)
+        // lead to a positive z, the absolute value of z is used.
         final double z = (Umin - EU) / FastMath.sqrt(VarU);
 
         final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+        // For a two-sided p-value, the probability in the tails is summed.
+        // Due to symmetry of the normal distribution, P(Z <= -|z|) = P(Z >= |z|).
+        // So, the two-sided p-value is 2 * P(Z <= -|z|).
+        // This prevents p-values from exceeding 1.0 if z happens to be positive.
+        return 2 * standardNormal.cumulativeProbability(-FastMath.abs(z));
     }
\ No newline at end of file
