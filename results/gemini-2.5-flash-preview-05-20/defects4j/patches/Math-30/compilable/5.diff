diff --git a/tmp/2746b1bd-115d-4909-b202-8f14eb0ecff0_buggy.java b/tmp/83acf97a-a50d-480a-94b9-1c2befa1a260_fixed.java
index 3c69e10..e904d21 100644
--- a/tmp/2746b1bd-115d-4909-b202-8f14eb0ecff0_buggy.java
+++ b/tmp/83acf97a-a50d-480a-94b9-1c2befa1a260_fixed.java
@@ -1,27 +1,44 @@
     /**
      * @param Umin smallest Mann-Whitney U value
      * @param n1 number of subjects in first sample
      * @param n2 number of subjects in second sample
      * @return two-sided asymptotic p-value
      * @throws ConvergenceException if the p-value can not be computed
      * due to a convergence error
      * @throws MaxCountExceededException if the maximum number of
      * iterations is exceeded
      */
     private double calculateAsymptoticPValue(final double Umin,
                                              final int n1,
                                              final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
         final int n1n2prod = n1 * n2;
 
         // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
         final double EU = n1n2prod / 2.0;
         final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
         final double z = (Umin - EU) / FastMath.sqrt(VarU);
 
         final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+        // For a two-sided test, the p-value is the probability of observing a Z-score
+        // as extreme or more extreme than the calculated 'z' in either direction.
+        // This is given by P(|Z| >= |z|), which is 2 * P(Z > |z|) or 2 * (1 - P(Z <= |z|)).
+        //
+        // In the Mann-Whitney U test, when Umin is chosen as the smaller of the two U statistics,
+        // it holds that Umin <= EU. Consequently, 'z' will always be less than or equal to 0.
+        // In this specific case, FastMath.abs(z) is equal to -z.
+        //
+        // Therefore, the original code `2 * standardNormal.cumulativeProbability(z)` is
+        // theoretically equivalent to `2 * (1 - standardNormal.cumulativeProbability(FastMath.abs(z)))`
+        // due to the symmetry of the normal distribution: P(Z <= x) = 1 - P(Z <= -x).
+        // For z <= 0, P(Z <= z) = 1 - P(Z <= -z) = 1 - P(Z <= |z|).
+        //
+        // However, using the form `2 * (1 - standardNormal.cumulativeProbability(FastMath.abs(z)))`
+        // is generally more robust for calculating two-sided p-values from a Z-score,
+        // as it handles both positive and negative 'z' values correctly without conditional logic.
+        // It can also sometimes offer better numerical stability for 'z' values very close to zero.
+        return 2 * (1 - standardNormal.cumulativeProbability(FastMath.abs(z)));
     }
\ No newline at end of file
