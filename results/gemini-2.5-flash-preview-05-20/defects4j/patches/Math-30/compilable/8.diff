diff --git a/tmp/0390e2da-73e8-45e9-9233-95fb8828d160_buggy.java b/tmp/b6a6c99c-d7be-4708-97fb-5ce2622a8e17_fixed.java
index 3c69e10..3a7a6af 100644
--- a/tmp/0390e2da-73e8-45e9-9233-95fb8828d160_buggy.java
+++ b/tmp/b6a6c99c-d7be-4708-97fb-5ce2622a8e17_fixed.java
@@ -1,27 +1,36 @@
     /**
      * @param Umin smallest Mann-Whitney U value
      * @param n1 number of subjects in first sample
      * @param n2 number of subjects in second sample
      * @return two-sided asymptotic p-value
      * @throws ConvergenceException if the p-value can not be computed
      * due to a convergence error
      * @throws MaxCountExceededException if the maximum number of
      * iterations is exceeded
      */
     private double calculateAsymptoticPValue(final double Umin,
                                              final int n1,
                                              final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
         final int n1n2prod = n1 * n2;
 
         // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
         final double EU = n1n2prod / 2.0;
         final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
         final double z = (Umin - EU) / FastMath.sqrt(VarU);
 
         final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+        // Correct two-sided p-value calculation:
+        // For a two-sided test, the p-value is 2 * P(Z > |z|).
+        // This is equivalent to 2 * (1 - P(Z <= |z|)).
+        // The original code was 2 * standardNormal.cumulativeProbability(z),
+        // which is incorrect if z > 0 (it would yield a p-value > 1).
+        // For z < 0, standardNormal.cumulativeProbability(z) is P(Z <= z).
+        // By symmetry, P(Z <= z) = P(Z >= -z) = 1 - P(Z <= -z).
+        // So, 2 * P(Z <= z) = 2 * (1 - P(Z <= -z)) = 2 * P(Z >= -z).
+        // Using FastMath.abs(z) makes the formula robust for both positive and negative z.
+        return 2 * (1 - standardNormal.cumulativeProbability(FastMath.abs(z)));
     }
