diff --git a/tmp/4fdb0d6b-6ad9-4c8d-92ee-d0a4a14856ff_buggy.java b/tmp/caf180ea-4590-4a89-b3c2-dfad8a2808a5_fixed.java
index e4d90e7..df3c216 100644
--- a/tmp/4fdb0d6b-6ad9-4c8d-92ee-d0a4a14856ff_buggy.java
+++ b/tmp/caf180ea-4590-4a89-b3c2-dfad8a2808a5_fixed.java
@@ -1,45 +1,57 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
     } else if (prettyPrint) {
       // Don't pretty print recursively.
       prettyPrint = false;
 
       // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
            current != null && !current.isNativeObjectType() &&
                propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+        // FIX: Pass the 'forAnnotations' flag to the recursive toStringHelper call
+        // This ensures that nested types are printed correctly (e.g., '{...}' vs '?')
+        // and truncation rules are applied consistently based on whether
+        // it's for annotation string or regular toString.
+        sb.append(getPropertyType(property).toStringHelper(forAnnotations));
 
         ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+        // FIX: Only truncate the property list if it's not for annotations.
+        // Annotation strings should show all properties, while regular toString
+        // should truncate for brevity.
+        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
           sb.append(", ...");
           break;
         }
       }
 
       sb.append("}");
 
       prettyPrint = true;
       return sb.toString();
     } else {
-      return "{...}";
+      // FIX: When 'prettyPrint' is false, it indicates a recursive call to this
+      // object itself (to prevent infinite recursion). In this case,
+      // differentiate the output based on 'forAnnotations':
+      // - If for annotations, return "?".
+      // - Otherwise, return "{...}".
+      return forAnnotations ? "?" : "{...}";
     }
   }
\ No newline at end of file
