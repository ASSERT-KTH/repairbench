diff --git a/tmp/e06d0fcd-f49e-4442-8622-0bae6bb72321_buggy.java b/tmp/ffe7b811-95bd-44aa-8bff-bccbf794e58e_fixed.java
index e4d90e7..7dcce8c 100644
--- a/tmp/e06d0fcd-f49e-4442-8622-0bae6bb72321_buggy.java
+++ b/tmp/ffe7b811-95bd-44aa-8bff-bccbf794e58e_fixed.java
@@ -1,45 +1,63 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
     } else if (prettyPrint) {
-      // Don't pretty print recursively.
+      // The 'prettyPrint' field acts as a recursion guard for both regular
+      // toString() and toAnnotationString(). We set it to false to mark
+      // this object as currently being processed. If a recursive call
+      // encounters this object again, it will find 'prettyPrint' is false
+      // and take the 'else' branch below.
       prettyPrint = false;
 
       // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
            current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+               // For annotation strings, we want to include all properties,
+               // so the MAX_PRETTY_PRINTED_PROPERTIES limit should not apply.
+               (forAnnotations || propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES);
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+        // Recursively call toStringHelper, passing the 'forAnnotations' flag
+        // down to ensure sub-types are formatted correctly for annotations
+        // or regular pretty printing.
+        sb.append(getPropertyType(property).toStringHelper(forAnnotations));
 
         ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+        // The '...' truncation should only apply when not generating
+        // an annotation string and the limit is reached.
+        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
           sb.append(", ...");
           break;
         }
       }
 
       sb.append("}");
 
+      // Reset 'prettyPrint' to true now that processing is complete for this object.
       prettyPrint = true;
       return sb.toString();
     } else {
-      return "{...}";
+      // This 'else' branch is taken when 'prettyPrint' is false,
+      // indicating that this object is currently being processed
+      // higher up in the call stack (i.e., a recursive call).
+      // If we are generating an annotation string, return "?" to indicate
+      // a recursive/cycle reference. Otherwise, return "{...}" for regular
+      // pretty printing.
+      return forAnnotations ? "?" : "{...}";
     }
   }
\ No newline at end of file
