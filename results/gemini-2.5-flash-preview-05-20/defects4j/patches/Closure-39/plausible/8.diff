diff --git a/tmp/167b37e8-9e57-428b-8bb2-3e7384311f21_buggy.java b/tmp/f61028b5-e433-48cf-ae50-b161605882fa_fixed.java
index e4d90e7..09defbf 100644
--- a/tmp/167b37e8-9e57-428b-8bb2-3e7384311f21_buggy.java
+++ b/tmp/f61028b5-e433-48cf-ae50-b161605882fa_fixed.java
@@ -1,45 +1,87 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
     } else if (prettyPrint) {
       // Don't pretty print recursively.
+      // Set to false to prevent infinite recursion, and indicate that
+      // this object is currently being pretty-printed.
       prettyPrint = false;
 
-      // Use a tree set so that the properties are sorted.
-      Set<String> propertyNames = Sets.newTreeSet();
+      // First, collect all unique property names from this object and its prototypes.
+      Set<String> allPropertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+           current != null && !current.isNativeObjectType();
            current = current.getImplicitPrototype()) {
-        propertyNames.addAll(current.getOwnPropertyNames());
+        allPropertyNames.addAll(current.getOwnPropertyNames());
+      }
+
+      // Determine which properties to print and if truncation is needed.
+      Set<String> propertiesToPrint = Sets.newTreeSet();
+      boolean truncated = false;
+
+      if (forAnnotations) {
+        // For annotations, we don't truncate properties.
+        propertiesToPrint = allPropertyNames;
+      } else {
+        // For regular toString(), we apply the MAX_PRETTY_PRINTED_PROPERTIES limit.
+        int count = 0;
+        for (String property : allPropertyNames) {
+          if (count >= MAX_PRETTY_PRINTED_PROPERTIES) {
+            truncated = true;
+            break;
+          }
+          propertiesToPrint.add(property);
+          count++;
+        }
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
-      for (String property : propertyNames) {
+      for (String property : propertiesToPrint) {
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
+
+        // Recursively call the appropriate toString method based on forAnnotations.
+        // This ensures nested types are also formatted correctly (e.g., '?' for recursive types).
+        if (forAnnotations) {
+          sb.append(getPropertyType(property).toAnnotationString());
+        } else {
           sb.append(getPropertyType(property).toString());
+        }
 
         ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
-          sb.append(", ...");
-          break;
       }
+
+      // Append "..." if the property list was truncated.
+      if (truncated) {
+        if (i > 0) {
+          sb.append(", ");
+        }
+        sb.append("...");
       }
 
       sb.append("}");
 
+      // Restore prettyPrint state.
       prettyPrint = true;
       return sb.toString();
     } else {
+      // If prettyPrint is false (either it was initially false, or this is a recursive call
+      // and the outer call set it to false), return a placeholder.
+      // The placeholder depends on whether this is for annotations.
+      if (forAnnotations) {
+        // For annotation strings, recursive types are represented as '?'.
+        return "?";
+      } else {
+        // For regular toString(), recursive types are represented as '{...}'.
         return "{...}";
       }
     }
+  }
\ No newline at end of file
