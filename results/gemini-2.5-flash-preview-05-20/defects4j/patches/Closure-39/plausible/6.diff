diff --git a/tmp/cf0aed1b-f126-4fdc-859b-43e7e65fc30b_buggy.java b/tmp/a47c52c5-f408-424b-b501-770397f0dfa5_fixed.java
index e4d90e7..71a87c4 100644
--- a/tmp/cf0aed1b-f126-4fdc-859b-43e7e65fc30b_buggy.java
+++ b/tmp/a47c52c5-f408-424b-b501-770397f0dfa5_fixed.java
@@ -1,45 +1,67 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
-    } else if (prettyPrint) {
-      // Don't pretty print recursively.
-      prettyPrint = false;
+    }
 
+    // `prettyPrint` is a member variable, used to detect if we're already processing this object type higher up the call stack.
+    // If `prettyPrint` is false, it means we've already entered this object type's toStringHelper,
+    // indicating a recursive call.
+    if (!prettyPrint) {
+      // For recursive types, return '?' if forAnnotations is true, otherwise '{...}'.
+      return forAnnotations ? "?" : "{...}";
+    }
+
+    // From this point, `prettyPrint` must be true. This is the first time we're pretty printing this object
+    // in the current call stack, or this object was explicitly marked for pretty printing.
+
+    // Temporarily set `prettyPrint` to false to prevent infinite recursion and signal to nested calls
+    // that they are part of a larger pretty-printing operation for 'this' object.
+    // This ensures that any subsequent nested call to toStringHelper on 'this' object
+    // will hit the `if (!prettyPrint)` branch above and return either '?' or '{...}'.
+    final boolean originalPrettyPrint = prettyPrint;
+    prettyPrint = false; // Disable pretty printing for recursive calls within this object's properties.
+
+    try {
       // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+           current != null && !current.isNativeObjectType();
            current = current.getImplicitPrototype()) {
+        // Collect all property names. Truncation will be handled during string building,
+        // not during property collection, especially for annotation strings.
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+        // CRITICAL FIX: Pass `forAnnotations` down to the nested property type's `toStringHelper` call.
+        // This ensures that nested types are also printed according to `forAnnotations` (e.g., fully or with `?`).
+        sb.append(getPropertyType(property).toStringHelper(forAnnotations));
 
         ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+        // Truncate the output string only if it's not for annotations
+        // AND the number of printed properties reaches the maximum limit.
+        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
           sb.append(", ...");
-          break;
+          break; // Stop iterating properties if truncated.
         }
       }
 
       sb.append("}");
-
-      prettyPrint = true;
       return sb.toString();
-    } else {
-      return "{...}";
+    } finally {
+      // Ensure `prettyPrint` is restored to its original state, regardless of how the try block exits.
+      // This is crucial because `prettyPrint` is a member variable and its state should not leak.
+      prettyPrint = originalPrettyPrint;
     }
   }
\ No newline at end of file
