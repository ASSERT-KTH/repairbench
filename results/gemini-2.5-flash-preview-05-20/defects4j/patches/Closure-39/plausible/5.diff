diff --git a/tmp/ddd41c84-cc6d-4f1d-ba1c-4b78ec83fca4_buggy.java b/tmp/1a42c6d7-d267-4d4a-bbcc-0e0db0342b9f_fixed.java
index e4d90e7..32d4a62 100644
--- a/tmp/ddd41c84-cc6d-4f1d-ba1c-4b78ec83fca4_buggy.java
+++ b/tmp/1a42c6d7-d267-4d4a-bbcc-0e0db0342b9f_fixed.java
@@ -1,45 +1,64 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
-    } else if (prettyPrint) {
-      // Don't pretty print recursively.
+    }
+
+    // The 'prettyPrint' member variable is used to detect and prevent infinite recursion
+    // when building the string representation of an object type.
+    // If 'prettyPrint' is false, it indicates that we have already entered the
+    // pretty printing process for this object (or an object higher up in the call stack)
+    // and are now recursively calling toStringHelper on a property type that refers back to it.
+    if (!prettyPrint) {
+      // If we are in a recursive call:
+      // For annotation strings (forAnnotations == true), recursive types are represented by '?'.
+      // For regular toString (forAnnotations == false), they are represented by '{...}'.
+      return forAnnotations ? "?" : "{...}";
+    }
+
+    // If we reach here, it's the *initial* non-recursive call for this object.
+    // We proceed to pretty print its properties.
+    // Set 'prettyPrint' to false to mark that we are currently processing this object
+    // and any recursive calls will hit the above 'if (!prettyPrint)' block.
     prettyPrint = false;
 
-      // Use a tree set so that the properties are sorted.
+    // Use a tree set so that the properties are sorted consistently.
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this;
          current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+             (forAnnotations || propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES); // For annotations, collect all properties (no limit). For regular toString, apply limit.
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
 
       sb.append(property);
       sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+      // Recursively call toStringHelper on the property's type,
+      // passing the same 'forAnnotations' flag to maintain context.
+      sb.append(getPropertyType(property).toStringHelper(forAnnotations));
 
       ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+      // Truncate the output with "..." only if we are generating a regular toString
+      // (i.e., not for annotations) and the maximum property limit is reached.
+      if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
         sb.append(", ...");
-          break;
+        break; // Stop adding more properties after truncation
       }
     }
 
     sb.append("}");
 
+    // Reset 'prettyPrint' to true, indicating that this object has finished
+    // its pretty printing process and is ready for future full pretty prints.
     prettyPrint = true;
     return sb.toString();
-    } else {
-      return "{...}";
-    }
   }
\ No newline at end of file
