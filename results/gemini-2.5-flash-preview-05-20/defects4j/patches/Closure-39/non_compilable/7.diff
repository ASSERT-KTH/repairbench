diff --git a/tmp/989de0bd-aaf8-48c4-a4ca-bf6c3ba4798a_buggy.java b/tmp/2ed0751f-2d85-4efd-83ac-87d2d965905a_fixed.java
index e4d90e7..e42d237 100644
--- a/tmp/989de0bd-aaf8-48c4-a4ca-bf6c3ba4798a_buggy.java
+++ b/tmp/2ed0751f-2d85-4efd-83ac-87d2d965905a_fixed.java
@@ -1,45 +1,47 @@
-  @Override
-  String toStringHelper(boolean forAnnotations) {
-    if (hasReferenceName()) {
-      return getReferenceName();
-    } else if (prettyPrint) {
-      // Don't pretty print recursively.
-      prettyPrint = false;
-
-      // Use a tree set so that the properties are sorted.
-      Set<String> propertyNames = Sets.newTreeSet();
+        // Original: propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES
+        // Change: (forAnnotations || propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES)
         for (ObjectType current = this;
              current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+                 (forAnnotations || propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES);
              current = current.getImplicitPrototype()) {
           propertyNames.addAll(current.getOwnPropertyNames());
         }
+    ```
 
-      StringBuilder sb = new StringBuilder();
-      sb.append("{");
-
-      int i = 0;
-      for (String property : propertyNames) {
-        if (i > 0) {
-          sb.append(", ");
-        }
-
-        sb.append(property);
-        sb.append(": ");
-        sb.append(getPropertyType(property).toString());
-
+2.  **Modify ellipsis printing logic**: The ellipsis `", ..."` should only be appended if `forAnnotations` is `false`.
+    ```java
+        // Original: if (i == MAX_PRETTY_PRINTED_PROPERTIES)
+        // Change: if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES)
         ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
           sb.append(", ...");
           break;
         }
-      }
-
-      sb.append("}");
+    ```
 
-      prettyPrint = true;
-      return sb.toString();
+3.  **Handle direct recursive `ProxyObjectType` properties**: If a property's type is a `ProxyObjectType` that directly references the current object being printed, its string representation should be simplified (`{...}` or `?`). This is crucial because `ProxyObjectType`'s `toStringHelper` implementation typically delegates to its `referencedType` without necessarily checking its own `prettyPrint` flag, which can lead to `"{...}"` instead of `?` for annotation strings or potential deeper recursion.
+    ```java
+        JSType propertyType = getPropertyType(property);
+        if (propertyType instanceof ProxyObjectType) {
+          ProxyObjectType proxyPropertyType = (ProxyObjectType) propertyType;
+          if (proxyPropertyType.getReferencedType() == this) {
+            // If the proxy type refers back to the current object, print short form.
+            sb.append(forAnnotations ? "?" : "{...}");
           } else {
-      return "{...}";
+            // Otherwise, delegate to the proxy's toStringHelper.
+            sb.append(propertyType.toStringHelper(forAnnotations));
           }
+        } else {
+          // For non-proxy types, just call their toStringHelper.
+          sb.append(propertyType.toStringHelper(forAnnotations));
         }
+    ```
+
+4.  **Modify the `else` branch for `prettyPrint = false`**: When `this.prettyPrint` is `false`, it means the object is already being processed in an outer call, indicating a recursive cycle. In this case, the `toString()` representation should be `"{...}"`, but `toAnnotationString()` should be `"?`.
+    ```java
+        // Original: return "{...}";
+        // Change: return forAnnotations ? "?" : "{...}";
+        return forAnnotations ? "?" : "{...}";
+    ```
+
+Here's the fixed function:
