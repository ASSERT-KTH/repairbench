diff --git a/tmp/ce43c554-853a-49fe-9f8d-b1a829167f32_buggy.java b/tmp/e6f95297-bb15-452e-b7b6-4b7d551b61b9_fixed.java
index e4d90e7..5494143 100644
--- a/tmp/ce43c554-853a-49fe-9f8d-b1a829167f32_buggy.java
+++ b/tmp/e6f95297-bb15-452e-b7b6-4b7d551b61b9_fixed.java
@@ -1,45 +1,52 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
     } else if (prettyPrint) {
       // Don't pretty print recursively.
       prettyPrint = false;
 
       // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
            current != null && !current.isNativeObjectType() &&
                propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+        // Propagate the 'forAnnotations' flag to nested types.
+        sb.append(getPropertyType(property).toStringHelper(forAnnotations));
 
         ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
-          sb.append(", ...");
-          break;
-        }
+        // The original problem description and error messages suggest that
+        // truncation with "..." is not desired for 'toString()'.
+        // The 'toAnnotationString()' method also expects all properties.
+        // Therefore, remove the truncation logic.
+        // if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+        //   sb.append(", ...");
+        //   break;
+        // }
       }
 
       sb.append("}");
 
       prettyPrint = true;
       return sb.toString();
     } else {
-      return "{...}";
+      // If prettyPrint is false (e.g., due to recursion or recursion limit),
+      // return either "{...}" for standard string representation or "?" for annotations.
+      return forAnnotations ? "?" : "{...}";
     }
   }
