diff --git a/tmp/5aa9e7ea-8f19-4801-8259-f195cbf58612_buggy.java b/tmp/0fe160d6-edaa-48d6-aa76-5887a4054e13_fixed.java
index e4d90e7..82ee1db 100644
--- a/tmp/5aa9e7ea-8f19-4801-8259-f195cbf58612_buggy.java
+++ b/tmp/0fe160d6-edaa-48d6-aa76-5887a4054e13_fixed.java
@@ -1,45 +1,73 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
+      // If this type has a reference name (e.g., a named type or a resolved proxy type),
+      // return its reference name. For annotation strings, ProxyObjectType.getReferenceName()
+      // typically returns "?".
       return getReferenceName();
     } else if (prettyPrint) {
-      // Don't pretty print recursively.
+      // This flag prevents infinite recursion for recursive types by ensuring
+      // a type is only pretty-printed once in a given call stack.
+      // If we are currently pretty-printing this object, set prettyPrint to false
+      // for any nested calls to toStringHelper for this *same* object instance.
       prettyPrint = false;
 
-      // Use a tree set so that the properties are sorted.
+      // Use a tree set so that the properties are sorted consistently.
       Set<String> propertyNames = Sets.newTreeSet();
+      // Collect all property names from this object and its implicit prototypes.
+      // The previous code had a bug here, prematurely stopping collection based on
+      // MAX_PRETTY_PRINTED_PROPERTIES, which could lead to an incomplete list
+      // of properties for truncation purposes. Collect all, then truncate when printing.
       for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+           current != null && !current.isNativeObjectType();
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
+        // Apply truncation logic if not in annotation mode and the number of
+        // properties printed has reached MAX_PRETTY_PRINTED_PROPERTIES.
+        // This check should happen *before* appending the current property
+        // to determine if "..." is needed.
+        if (!forAnnotations && i >= MAX_PRETTY_PRINTED_PROPERTIES) {
+          // If there were properties printed before the truncation point,
+          // append a comma before "..." for correct formatting.
+          if (i > 0) {
+            sb.append(", ");
+          }
+          sb.append("...");
+          break; // Stop iterating through remaining properties
+        }
+
+        // Add a comma and space separator for properties after the first one.
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+        // Recursively call toStringHelper for the property's type,
+        // ensuring the 'forAnnotations' flag is propagated. This is crucial
+        // for `toAnnotationString()` to work correctly for nested types.
+        sb.append(getPropertyType(property).toStringHelper(forAnnotations));
 
         ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
-          sb.append(", ...");
-          break;
-        }
       }
 
       sb.append("}");
 
+      // Restore the prettyPrint flag for this object, so subsequent independent
+      // toString() calls on this object behave normally.
       prettyPrint = true;
       return sb.toString();
     } else {
+      // If prettyPrint is false (meaning this object is already being pretty-printed
+      // further up the call stack, or pretty-printing is globally disabled for some reason),
+      // return a generic "{...}" to prevent infinite recursion.
       return "{...}";
     }
   }
\ No newline at end of file
