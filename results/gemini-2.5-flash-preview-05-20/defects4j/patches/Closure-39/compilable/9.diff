diff --git a/tmp/fc31b472-a012-49b5-99bf-71cff679750c_buggy.java b/tmp/15e1734e-e1cb-41c6-b502-648d3a5f2675_fixed.java
index e4d90e7..fe35022 100644
--- a/tmp/fc31b472-a012-49b5-99bf-71cff679750c_buggy.java
+++ b/tmp/15e1734e-e1cb-41c6-b502-648d3a5f2675_fixed.java
@@ -1,45 +1,68 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
     } else if (prettyPrint) {
       // Don't pretty print recursively.
       prettyPrint = false;
 
       // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
+      // Determine the maximum number of properties to collect from the prototype chain.
+      // If forAnnotations is true, we want to collect all properties without limit.
+      // Otherwise, we limit to MAX_PRETTY_PRINTED_PROPERTIES.
+      int maxPropertiesToCollect = forAnnotations ? Integer.MAX_VALUE : MAX_PRETTY_PRINTED_PROPERTIES;
+
       for (ObjectType current = this;
            current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+               propertyNames.size() <= maxPropertiesToCollect;
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
+      // Determine the maximum number of properties to print.
+      // If forAnnotations is true, print all collected properties.
+      // Otherwise, limit to MAX_PRETTY_PRINTED_PROPERTIES.
+      int maxPropertiesToPrint = forAnnotations ? Integer.MAX_VALUE : MAX_PRETTY_PRINTED_PROPERTIES;
+
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
+        // Call toString() on the property type. This will recursively call
+        // toStringHelper(false) for its own string representation.
+        // For annotation strings, the expectation is typically for "recursive" types
+        // like ProxyObjectType to print "?" or "{...}" which is handled by
+        // toStringHelper's 'prettyPrint' flag or specific overrides.
+        // The test failure indicates truncation is the primary issue.
         sb.append(getPropertyType(property).toString());
 
         ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+        // Apply truncation logic only if not for annotations and the print limit is reached.
+        if (!forAnnotations && i == maxPropertiesToPrint) {
           sb.append(", ...");
           break;
         }
       }
 
       sb.append("}");
 
       prettyPrint = true;
       return sb.toString();
     } else {
+      // This path is taken during recursive calls when prettyPrint is false.
+      // This ensures that deeply nested or recursive types do not cause infinite loops
+      // and are represented concisely (e.g., "{...}").
+      // The expectation for '?' in annotation strings for recursive ProxyObjectType
+      // is handled by ProxyObjectType's toString() or toAnnotationString() if overridden,
+      // not by this general toStringHelper path.
       return "{...}";
     }
   }
\ No newline at end of file
