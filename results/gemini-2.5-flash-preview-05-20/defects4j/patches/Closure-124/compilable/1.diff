diff --git a/tmp/844f9ef3-9bd8-45a9-98a1-c634cb92ae22_buggy.java b/tmp/53917daf-87c8-4f27-b869-fef5d74c9fcf_fixed.java
index 2573d30..93a77b6 100644
--- a/tmp/844f9ef3-9bd8-45a9-98a1-c634cb92ae22_buggy.java
+++ b/tmp/53917daf-87c8-4f27-b869-fef5d74c9fcf_fixed.java
@@ -1,20 +1,48 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
-    // No checks are needed for simple names.
+    String rootName = null;
+
     if (node.isName()) {
-      return true;
-    }
+      // If node is a simple name (e.g., 'x'), its "root" is itself.
+      rootName = node.getString();
+    } else {
+      // If node is a GETPROP (e.g., 'x.y.z'), traverse down to find the root name.
       Preconditions.checkArgument(node.isGetProp());
+      Node current = node;
+      while (current.isGetProp()) {
+        current = current.getFirstChild();
+      }
+      if (current.isName()) {
+        rootName = current.getString();
+      }
+    }
+
+    // If we couldn't find a root name (e.g., node is `(1+2).prop`), then it's
+    // always safe from a name-aliasing perspective.
+    if (rootName == null) {
+      return true;
+    }
+
+    // Check 1: The root name of 'node' is assigned to within the 'replacement' expression.
+    // E.g., node is `a.b`, replacement is `(a=1, 2)`. This is unsafe.
+    // E.g., node is `x`, replacement is `(x=1, 2)`. This is unsafe.
+    if (isNameAssignedTo(rootName, replacement)) {
+      return false;
+    }
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // Check 2: The 'replacement' itself is a NAME node, and it's the same name
+    // as the root of 'node'. This covers the issue in testIssue1017.
+    // E.g., node: `x.parentNode.parentNode`, rootName: "x", replacement: `x`.
+    // This is unsafe because 'x' refers to the variable that was just modified
+    // by the assignment. Replacing an expression depending on x (like x.prop)
+    // with x itself, when x was just assigned that expression, changes semantics.
+    if (replacement.isName() && rootName.equals(replacement.getString())) {
       return false;
     }
 
     return true;
   }
\ No newline at end of file
