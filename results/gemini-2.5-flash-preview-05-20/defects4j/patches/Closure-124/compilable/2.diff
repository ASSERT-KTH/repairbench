diff --git a/tmp/930ad7be-6862-495c-906b-801f0f6aaa65_buggy.java b/tmp/33ef05c5-fb08-4a24-bc5f-ab1b44b6dce5_fixed.java
index 2573d30..46210c1 100644
--- a/tmp/930ad7be-6862-495c-906b-801f0f6aaa65_buggy.java
+++ b/tmp/33ef05c5-fb08-4a24-bc5f-ab1b44b6dce5_fixed.java
@@ -1,20 +1,43 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // The original code only checked the first child of the GETPROP,
+    // missing cases like `a.b.c` where `a` might be the target of an assignment.
+    // We need to traverse down the GETPROP chain to find the root object name.
+    Node current = node;
+    while (current.isGetProp()) {
+      current = current.getFirstChild();
+    }
+
+    // Now 'current' should be the base object of the property chain.
+    // For example, if 'node' was 'a.b.c', 'current' will be 'a'.
+    // If 'node' was 'foo().bar', 'current' will be 'foo()'.
+    // We are concerned if this base object's name is the same as the
+    // name being assigned to (the 'replacement' node, which is the LHS).
+    if (current.isName() && replacement.isName()) {
+      // If the base object's name (e.g., 'x' in 'x.parentNode.parentNode')
+      // is the same as the name being assigned to (e.g., 'x' in 'x = ...'),
+      // then it's unsafe because the expression's evaluation might be affected
+      // by the assignment itself.
+      // The original `isNameAssignedTo(node.getString(), replacement)` was
+      // problematic here: `replacement` is the LHS NAME node (e.g., `x`).
+      // `NodeUtil.isNameAssignedTo(name, node)` checks if `name` is assigned to
+      // *within* `node`. A simple `NAME` node like `x` doesn't contain an assignment.
+      // Thus, `isNameAssignedTo("x", Node_x)` would always be false.
+      // The intent is to check if the base object's name is the same as the LHS name.
+      if (current.getString().equals(replacement.getString())) {
         return false;
       }
+    }
 
     return true;
   }
\ No newline at end of file
