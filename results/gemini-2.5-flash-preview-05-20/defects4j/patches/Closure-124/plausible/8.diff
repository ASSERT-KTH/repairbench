diff --git a/tmp/4bfec5fd-e57b-463f-a4d1-12c3b71079b5_buggy.java b/tmp/2da12277-7402-456e-91b9-64aed24b9522_fixed.java
index 2573d30..c7c46a4 100644
--- a/tmp/4bfec5fd-e57b-463f-a4d1-12c3b71079b5_buggy.java
+++ b/tmp/2da12277-7402-456e-91b9-64aed24b9522_fixed.java
@@ -1,20 +1,31 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // Traverse down the GETPROP chain to find the root object.
+    // For a.b.c, this will eventually make 'current' be 'a'.
+    Node current = node;
+    while (current.isGetProp()) {
+      current = current.getFirstChild();
+    }
+
+    // Now 'current' is the root of the property access (e.g., 'x' in 'x.y.z').
+    // If 'current' is a name, check if that name is assigned to within the replacement.
+    // If the name referenced in the original node (e.g., 'x' in 'x.parentNode.parentNode')
+    // is assigned to within the proposed 'replacement' expression, then it's unsafe.
+    // This is because changing 'x' would change the meaning of 'x.parentNode.parentNode'.
+    if (current.isName()
+        && isNameAssignedTo(current.getString(), replacement)) {
       return false;
     }
 
     return true;
   }
\ No newline at end of file
