diff --git a/tmp/bdd1b5ce-e826-4f36-9eeb-8fe045b7c4eb_buggy.java b/tmp/f835adc4-d021-4651-96f2-564372c7b743_fixed.java
index 2573d30..4e66f86 100644
--- a/tmp/bdd1b5ce-e826-4f36-9eeb-8fe045b7c4eb_buggy.java
+++ b/tmp/f835adc4-d021-4651-96f2-564372c7b743_fixed.java
@@ -1,20 +1,32 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
+    // This method primarily focuses on property accesses (GETPROP) to ensure
+    // that the base object of the property chain is not reassigned.
+    // If 'node' itself is a simple name, other checks outside this method
+    // (e.g., liveness analysis, aliasing) are typically responsible for its safety.
     if (node.isName()) {
       return true;
     }
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // Traverse the GETPROP chain to find the root object (e.g., 'a' in 'a.b.c').
+    Node current = node;
+    while (current.isGetProp()) {
+      current = current.getFirstChild();
+    }
+
+    // If the root object is a simple name, check if that name is assigned to
+    // within the 'replacement' node. If it is, the value of the original 'node'
+    // (the property access) might change due to the reassignment of its base object.
+    if (current.isName()
+        && isNameAssignedTo(current.getString(), replacement)) {
       return false;
     }
 
     return true;
   }
\ No newline at end of file
