diff --git a/tmp/830288d0-2ed2-4c58-bbfa-ffdc587e9447_buggy.java b/tmp/581a2a20-0ddf-4324-81de-7f4c6002fe69_fixed.java
index 2573d30..6372355 100644
--- a/tmp/830288d0-2ed2-4c58-bbfa-ffdc587e9447_buggy.java
+++ b/tmp/581a2a20-0ddf-4324-81de-7f4c6002fe69_fixed.java
@@ -1,20 +1,36 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // In a GETPROP chain (e.g., 'a.b.c'), the "name referenced in node"
+    // is the root name (e.g., 'a'). The original code only looked at the
+    // first child (e.g., 'a.b'), which is insufficient for longer chains.
+    // We need to traverse down the GETPROP chain until we find the base name.
+    Node current = node;
+    while (current.isGetProp()) {
+      current = current.getFirstChild();
+    }
+
+    // If the root node is a simple name and that name is assigned to
+    // within the replacement expression (which implies it might change
+    // during the evaluation of the replacement itself), then the replacement
+    // is not safe.
+    // The test case `testIssue1017` (e.g., `x = x.parentNode.parentNode;`)
+    // requires this check to identify that 'x' (the root name) is potentially
+    // "assigned to" or affected by its own evaluation within the replacement,
+    // leading to an unsafe replacement.
+    if (current.isName()
+        && isNameAssignedTo(current.getString(), replacement)) {
       return false;
     }
 
     return true;
   }
\ No newline at end of file
