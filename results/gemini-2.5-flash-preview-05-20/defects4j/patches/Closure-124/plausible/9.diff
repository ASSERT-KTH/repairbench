diff --git a/tmp/72ca48c3-cee7-481c-9c04-df5afecd355b_buggy.java b/tmp/0a101f31-324c-4d14-b159-b0b03dfbf825_fixed.java
index 2573d30..679c630 100644
--- a/tmp/72ca48c3-cee7-481c-9c04-df5afecd355b_buggy.java
+++ b/tmp/0a101f31-324c-4d14-b159-b0b03dfbf825_fixed.java
@@ -1,20 +1,39 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // The original code `node = node.getFirstChild();` only checked the immediate
+    // object of a GETPROP. For deeply nested property accesses like `a.b.c`,
+    // it would check `a.b`, but not the root name `a`. If `a.b` is not a simple
+    // name (e.g., it's another GETPROP), the `isName()` check would fail,
+    // leading to `isSafeReplacement` always returning true, even if the root
+    // name `a` was assigned to by the replacement.
+    //
+    // To correctly determine if the "name referenced in node" might have changed,
+    // we must traverse down the GETPROP chain until we reach the actual root
+    // object, which could be a simple NAME node.
+    Node current = node;
+    while (current.isGetProp()) {
+      current = current.getFirstChild();
+    }
+
+    // Now 'current' should be the root object of the property access chain.
+    // If this root object is a NAME node, we check if that name is assigned to
+    // within the 'replacement' expression's subtree. If it is, then the
+    // replacement is not safe because its execution might change the value
+    // of the root name, thus invalidating the original node's meaning.
+    if (current.isName()
+        && isNameAssignedTo(current.getString(), replacement)) {
       return false;
     }
 
     return true;
   }
\ No newline at end of file
