diff --git a/tmp/b7feb8d8-1a6e-4c88-a2f0-41970786a9f3_buggy.java b/tmp/35bdc26e-b539-4a07-bcf4-ee63a748c32e_fixed.java
index 2573d30..bd6cd42 100644
--- a/tmp/b7feb8d8-1a6e-4c88-a2f0-41970786a9f3_buggy.java
+++ b/tmp/35bdc26e-b539-4a07-bcf4-ee63a748c32e_fixed.java
@@ -1,20 +1,31 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
+    // If it's not a name, it must be a GETPROP based on the original Preconditions.
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // Traverse down the GETPROP chain to find the base object (the 'NAME' node).
+    // For example, if node is 'a.b.c', 'current' will eventually become 'a'.
+    Node current = node;
+    while (current.isGetProp()) {
+      current = current.getFirstChild();
+    }
+
+    // Now 'current' is the base object of the GETPROP chain.
+    // If this base object is a name and that name is assigned to within
+    // the 'replacement' expression, then the replacement is not safe,
+    // because the meaning of the original 'node' might change.
+    if (current.isName()
+        && isNameAssignedTo(current.getString(), replacement)) {
       return false;
     }
 
     return true;
   }
\ No newline at end of file
