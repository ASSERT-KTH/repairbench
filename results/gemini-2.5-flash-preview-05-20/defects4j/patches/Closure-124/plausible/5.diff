diff --git a/tmp/56b5814e-bcaa-4540-86c6-dd8359bbe95b_buggy.java b/tmp/efe3d60a-e3a8-4ae1-8580-a9d4cd3cea85_fixed.java
index 2573d30..e8092fc 100644
--- a/tmp/56b5814e-bcaa-4540-86c6-dd8359bbe95b_buggy.java
+++ b/tmp/efe3d60a-e3a8-4ae1-8580-a9d4cd3cea85_fixed.java
@@ -1,20 +1,33 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // Traverse down the GETPROP chain to find the base object.
+    // For a property access like `a.b.c`, we need to check if `a` is assigned to.
+    // The original code only checked the immediate child of the GETPROP, e.g.,
+    // for `a.b.c`, it would check `a.b` which is not a simple name,
+    // missing the assignment to `a`.
+    Node current = node;
+    while (current.isGetProp()) {
+      current = current.getFirstChild();
+    }
+
+    // If the base object of the GETPROP chain is a simple name
+    // and that name is assigned to within the 'replacement' subtree,
+    // then the value of 'node' (the original GETPROP) might change,
+    // making the replacement unsafe.
+    if (current.isName()
+        && isNameAssignedTo(current.getString(), replacement)) {
       return false;
     }
 
     return true;
   }
\ No newline at end of file
