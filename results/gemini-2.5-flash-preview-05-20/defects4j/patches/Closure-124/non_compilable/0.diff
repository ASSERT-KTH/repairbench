diff --git a/tmp/5883bf0b-b44c-4728-9824-4cd34e670986_buggy.java b/tmp/b7e07316-e109-42c8-aaf2-07b77aa6c2dc_fixed.java
index 2573d30..01805c0 100644
--- a/tmp/5883bf0b-b44c-4728-9824-4cd34e670986_buggy.java
+++ b/tmp/b7e07316-e109-42c8-aaf2-07b77aa6c2dc_fixed.java
@@ -1,20 +1,28 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
+    // Precondition: If it's not a simple name, it must be a GETPROP.
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // The original code only went one level deep (e.g., if node was a.b.c,
+    // it would check a.b). This is insufficient for chained property accesses.
+    // We need to get to the root name (e.g., 'a' in 'a.b.c').
+    Node rootNameNode = com.google.javascript.rhino.NodeUtil.getQualifiedNameRoot(node);
+
+    // If the root of the qualified name is a simple name, and that name
+    // is assigned to within the 'replacement' subtree, then the replacement
+    // might modify the state of the name 'node' depends on, making it unsafe.
+    if (rootNameNode.isName()
+        && isNameAssignedTo(rootNameNode.getString(), replacement)) {
       return false;
     }
 
     return true;
   }
\ No newline at end of file
