diff --git a/tmp/f2a716af-1e43-49bf-9952-5e55903dac2c_buggy.java b/tmp/d6b10aea-e0c7-4a40-b251-6cf4293b27fd_fixed.java
index 210695a..6b77e60 100644
--- a/tmp/f2a716af-1e43-49bf-9952-5e55903dac2c_buggy.java
+++ b/tmp/d6b10aea-e0c7-4a40-b251-6cf4293b27fd_fixed.java
@@ -1,32 +1,48 @@
   /**
    * Computes the subset of {@code this} and {@code that} types if inequality
    * is observed. If a value {@code v1} of type {@code number} is not equal to a
    * value {@code v2} of type {@code (undefined,number)}, we can infer that the
    * type of {@code v1} is {@code number} and the type of {@code v2} is
    * {@code number} as well.
    *
    * @return a pair containing the restricted type of {@code this} as the first
    *         component and the restricted type of {@code that} as the second
    *         element. The returned pair is never {@code null} even though its
    *         components may be {@code null}
    */
   public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
 
+    // Handle special cases where types are always equal if they are the exact same singleton instance.
+    // This is for types like VOID_TYPE and NULL_TYPE where `a == b` is always true
+    // if a and b are both that specific type. If they are unequal, it's a contradiction.
+    if (this == that) { // Check for same instance (true for singletons like VOID_TYPE, NULL_TYPE)
+      if (this.isVoidType() || this.isNullType()) {
+        // If 'this' and 'that' are identical and always equal, then under inequality,
+        // no values satisfy the condition. So both become NO_TYPE.
+        return new TypePair(null, null);
+      }
+    }
+
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
+        // If they are always equal, then under inequality, no values satisfy the condition.
         return new TypePair(null, null);
 
       case FALSE:
       case UNKNOWN:
+        // If they are never equal, or might be equal/unequal,
+        // and inequality is observed, they retain their types.
+        // For UNKNOWN, more precise restriction might be needed based on specific type interactions,
+        // but for general cases, retaining types or further refinement is done by caller.
         return new TypePair(this, that);
     }
 
     // switch case is exhaustive
     throw new IllegalStateException();
   }
