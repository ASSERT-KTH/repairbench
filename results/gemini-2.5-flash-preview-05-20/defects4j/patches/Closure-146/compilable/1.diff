diff --git a/tmp/5c22c7be-f2bf-4001-839f-96aac34970c8_buggy.java b/tmp/b60c11fb-faea-4919-99b4-9cb641a87412_fixed.java
index 210695a..705897a 100644
--- a/tmp/5c22c7be-f2bf-4001-839f-96aac34970c8_buggy.java
+++ b/tmp/b60c11fb-faea-4919-99b4-9cb641a87412_fixed.java
@@ -1,32 +1,44 @@
   /**
    * Computes the subset of {@code this} and {@code that} types if inequality
    * is observed. If a value {@code v1} of type {@code number} is not equal to a
    * value {@code v2} of type {@code (undefined,number)}, we can infer that the
    * type of {@code v1} is {@code number} and the type of {@code v2} is
    * {@code number} as well.
    *
    * @return a pair containing the restricted type of {@code this} as the first
    *         component and the restricted type of {@code that} as the second
    *         element. The returned pair is never {@code null} even though its
    *         components may be {@code null}
    */
   public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
 
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
+        // If types must be equal, then under inequality, they can't exist.
         return new TypePair(null, null);
 
       case FALSE:
+        // If types must be unequal, then under inequality, they retain their types.
+        return new TypePair(this, that);
+
       case UNKNOWN:
+        // If equality is UNKNOWN, typically there's no restriction.
+        // However, if the types are identical, and yet testForEquality returned UNKNOWN,
+        // it likely means that for inequality, they should still be impossible (null, null).
+        // This handles cases like UNKNOWN_TYPE != UNKNOWN_TYPE or potentially a
+        // misrepresented VOID_TYPE != VOID_TYPE.
+        if (this.equals(that)) {
+          return new TypePair(null, null);
+        }
         return new TypePair(this, that);
     }
 
     // switch case is exhaustive
     throw new IllegalStateException();
   }
\ No newline at end of file
