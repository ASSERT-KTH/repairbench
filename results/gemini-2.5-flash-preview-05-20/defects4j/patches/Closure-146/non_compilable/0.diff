diff --git a/tmp/4a778a97-98c0-4765-8cea-2f4504f60c47_buggy.java b/tmp/523d5679-f84c-4247-8616-8b9e8fb0b3d4_fixed.java
index 210695a..e7d861a 100644
--- a/tmp/4a778a97-98c0-4765-8cea-2f4504f60c47_buggy.java
+++ b/tmp/523d5679-f84c-4247-8616-8b9e8fb0b3d4_fixed.java
@@ -1,32 +1,45 @@
   /**
    * Computes the subset of {@code this} and {@code that} types if inequality
    * is observed. If a value {@code v1} of type {@code number} is not equal to a
    * value {@code v2} of type {@code (undefined,number)}, we can infer that the
    * type of {@code v1} is {@code number} and the type of {@code v2} is
    * {@code number} as well.
    *
    * @return a pair containing the restricted type of {@code this} as the first
    *         component and the restricted type of {@code that} as the second
    *         element. The returned pair is never {@code null} even though its
    *         components may be {@code null}
    */
   public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
 
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
-        return new TypePair(null, null);
+        // If 'this' and 'that' are always equal, then the inequality condition
+        // ('this' != 'that') can never be true. Thus, the types under this
+        // condition are empty (NO_TYPE).
+        return new TypePair(this.getNoType(), that.getNoType());
 
       case FALSE:
-      case UNKNOWN:
+        // If 'this' and 'that' are always unequal, then the inequality condition
+        // is always true. The types are not restricted further.
         return new TypePair(this, that);
+
+      case UNKNOWN:
+        // If 'this' and 'that' can be equal or unequal, we restrict them to
+        // their common types. This is based on the doc comment's example:
+        // 'number' != '(undefined,number)' infers '(number, number)'.
+        // This effectively means we consider the types that could overlap
+        // and infer inequality within that overlap.
+        return new TypePair(this.getGreatestSubtype(that),
+            that.getGreatestSubtype(this));
     }
 
     // switch case is exhaustive
     throw new IllegalStateException();
   }
\ No newline at end of file
