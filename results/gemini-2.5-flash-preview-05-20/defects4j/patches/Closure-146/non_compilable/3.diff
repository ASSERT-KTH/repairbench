diff --git a/tmp/3dfcdcfe-0d6b-42bb-9c6e-bceed0723885_buggy.java b/tmp/f56ec92a-8d59-4291-a34d-bde263645267_fixed.java
index 210695a..8f20e11 100644
--- a/tmp/3dfcdcfe-0d6b-42bb-9c6e-bceed0723885_buggy.java
+++ b/tmp/f56ec92a-8d59-4291-a34d-bde263645267_fixed.java
@@ -1,32 +1,55 @@
   /**
    * Computes the subset of {@code this} and {@code that} types if inequality
    * is observed. If a value {@code v1} of type {@code number} is not equal to a
    * value {@code v2} of type {@code (undefined,number)}, we can infer that the
    * type of {@code v1} is {@code number} and the type of {@code v2} is
    * {@code number} as well.
    *
    * @return a pair containing the restricted type of {@code this} as the first
    *         component and the restricted type of {@code that} as the second
    *         element. The returned pair is never {@code null} even though its
    *         components may be {@code null}
    */
   public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
 
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
+        // If they are known to be equal, but inequality is observed,
+        // then this is a contradiction. No types remain.
         return new TypePair(null, null);
 
       case FALSE:
+        // If they are known to be unequal, and inequality is observed,
+        // then their types remain as they are.
+        return new TypePair(this, that);
+
       case UNKNOWN:
+        // When equality is UNKNOWN, it means there's a possibility of equality
+        // and a possibility of inequality.
+        // Since we are observing inequality, we need to eliminate the cases
+        // where they could be equal.
+        // The parts of 'this' and 'that' that could be equal are their intersection.
+        JSType commonType = this.getGreatestSubtype(that);
+        if (commonType.isNoType()) {
+          // If there is no common subtype, they can never be equal.
+          // This implies testForEquality should have returned FALSE.
+          // If it returned UNKNOWN, and their commonType is NoType,
+          // then they are effectively disjoint and unequal. So return as is.
           return new TypePair(this, that);
+        } else {
+          // Exclude the common type from both 'this' and 'that'.
+          // This will restrict 'this' to be 'this' without 'commonType',
+          // and 'that' to be 'that' without 'commonType'.
+          return new TypePair(this.getDifference(commonType), that.getDifference(commonType));
+        }
     }
 
     // switch case is exhaustive
     throw new IllegalStateException();
   }
