diff --git a/tmp/746a73b5-ed5e-4462-845a-50b90a77dd50_buggy.java b/tmp/ec6dd929-785d-481c-acac-ef5759c14d5c_fixed.java
index 210695a..fb64581 100644
--- a/tmp/746a73b5-ed5e-4462-845a-50b90a77dd50_buggy.java
+++ b/tmp/ec6dd929-785d-481c-acac-ef5759c14d5c_fixed.java
@@ -1,32 +1,43 @@
   /**
    * Computes the subset of {@code this} and {@code that} types if inequality
    * is observed. If a value {@code v1} of type {@code number} is not equal to a
    * value {@code v2} of type {@code (undefined,number)}, we can infer that the
    * type of {@code v1} is {@code number} and the type of {@code v2} is
    * {@code number} as well.
    *
    * @return a pair containing the restricted type of {@code this} as the first
    *         component and the restricted type of {@code that} as the second
    *         element. The returned pair is never {@code null} even though its
    *         components may be {@code null}
    */
   public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
 
+    // Handle primitive types that are always strictly equal to themselves,
+    // ensuring inequality leads to null (NO_TYPE).
+    // This is primarily for cases like undefined != undefined, which is always false.
+    // If this and that are the same primitive singleton type, their inequality branch
+    // should yield impossible types (null).
+    if (this.isPrimitive() && that.isPrimitive() && this.equals(that)) {
+      if (this.isVoidType() || this.isNullType() || this.isBooleanValueType()) {
+          return new TypePair(null, null);
+      }
+    }
+
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
         return new TypePair(null, null);
 
       case FALSE:
       case UNKNOWN:
         return new TypePair(this, that);
     }
 
     // switch case is exhaustive
     throw new IllegalStateException();
   }
\ No newline at end of file
