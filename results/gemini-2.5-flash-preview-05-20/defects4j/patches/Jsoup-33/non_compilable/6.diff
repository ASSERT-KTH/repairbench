diff --git a/tmp/81990739-b555-4ddb-a051-69f0a68cb27f_buggy.java b/tmp/50522592-9462-44ec-9c87-519ae6aab3fe_fixed.java
index dc93be3..723d4b4 100644
--- a/tmp/81990739-b555-4ddb-a051-69f0a68cb27f_buggy.java
+++ b/tmp/50522592-9462-44ec-9c87-519ae6aab3fe_fixed.java
@@ -1,14 +1,29 @@
     Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+        // Get the Tag object for the start tag's name.
+        // 'settings' is typically a field of the HtmlTreeBuilder class.
+        Tag tag = Tag.valueOf(startTag.name(), settings); 
+
+        // Case 1: The tag is a known void element (e.g., <img>, <br>).
+        // These elements are implicitly self-closing and do not have children or explicit end tags.
+        // Regardless of whether the input startTag itself had '/>' (e.g., <img/>) or not (e.g., <img>),
+        // we process it as a void element.
+        if (tag.isSelfClosing()) {
+            // `insertEmpty` creates the element and appends it. It does NOT add it to the stack.
+            return insertEmpty(startTag);
+        }
+
+        // Case 2: The tag is a non-void element (e.g., <div>, <p>, <a>, <script>).
+        // These elements normally require an an opening and a closing tag.
+        // Create the element and insert it normally.
+        Element el = new Element(tag, baseUri, startTag.attributes);
+        insert(el); // This calls the HtmlTreeBuilder's insert(Element el) method.
+                    // This method will append the element and push it onto the stack
+                    // because el.tag().isSelfClosing() is false (it's not a void element).
+
+        // If this non-void element was self-closed in the input (e.g., <div />),
+        // we need to immediately generate an end tag to close it, effectively converting <div /> to <div></div>.
         if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
-            return el;
+            tokeniser.emit(new Token.EndTag(el.tagName()));
         }
-        
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
-        insert(el);
         return el;
     }
\ No newline at end of file
