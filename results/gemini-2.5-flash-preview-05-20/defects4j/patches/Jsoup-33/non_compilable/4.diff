diff --git a/tmp/a0a47a92-e1ed-480c-8744-54f1ce873135_buggy.java b/tmp/406c7ab2-7150-4c15-bdfa-14d119f425d4_fixed.java
index dc93be3..1b68f91 100644
--- a/tmp/a0a47a92-e1ed-480c-8744-54f1ce873135_buggy.java
+++ b/tmp/406c7ab2-7150-4c15-bdfa-14d119f425d4_fixed.java
@@ -1,14 +1,27 @@
     Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+        // This 'if' block handles tags that are self-closed in the input (e.g., <div/>, <img/>).
         if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            // Check if the tag type itself is a known self-closing (void) element (e.g., <img>, <br>, <hr>).
+            // Assuming 'parser' is an accessible field (e.g., HtmlTreeBuilder.parser).
+            if (Tag.valueOf(startTag.name(), parser.settings()).isSelfClosing()) { 
+                // This is a void element. 'insertEmpty' handles its creation and placement in the DOM,
+                // without pushing it onto the stack for children or emitting an end tag.
+                return insertEmpty(startTag);
+            } else {
+                // This is a non-void element (e.g., <div>, <script>, <a>) that was self-closed in the input (e.g., <div/>).
+                // According to HTML5, the '/' is ignored, and it's treated as a normal start tag.
+                // However, Jsoup's pragmatic approach (and what the failing test expects for certain tags like 'a' or 'foo')
+                // is to treat it as a start tag and then immediately follow it with an end tag.
+                Element el = new Element(Tag.valueOf(startTag.name(), parser.settings()), baseUri, startTag.attributes);
+                insert(el); // This internal method adds 'el' to the current stack.
+                tokeniser.emit(new Token.EndTag(el.tagName()));  // Immediately emit the corresponding end tag.
                 return el;
             }
+        }
         
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
-        insert(el);
+        // This is the default case for non-self-closing start tags (e.g., <div>, <span>, <p>).
+        // They are created and added to the stack to accumulate their content.
+        Element el = new Element(Tag.valueOf(startTag.name(), parser.settings()), baseUri, startTag.attributes);
+        insert(el); // This internal method adds 'el' to the current stack.
         return el;
     }
\ No newline at end of file
