diff --git a/tmp/7f18eaff-67c6-4ae1-ab49-8ed473ccf90d_buggy.java b/tmp/fff18ec8-a863-44f3-8e77-be9e2a8cb057_fixed.java
index dc93be3..eb24bf6 100644
--- a/tmp/7f18eaff-67c6-4ae1-ab49-8ed473ccf90d_buggy.java
+++ b/tmp/fff18ec8-a863-44f3-8e77-be9e2a8cb057_fixed.java
@@ -1,14 +1,39 @@
     Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+        // Get the Tag object upfront to determine its properties.
+        Tag tag = Tag.valueOf(startTag.name());
+
+        // Handle tags that were self-closed in the input (e.g., <img /> or <div />).
         if (startTag.isSelfClosing()) {
+            // insertEmpty() creates the element and appends it to the current element in the DOM.
+            // It does NOT add the element to the stack, nor does it emit a separate end tag.
             Element el = insertEmpty(startTag);
+
+            // If it's a known HTML empty tag (e.g., <img>, <hr>), its processing is complete.
+            // These tags should not be added to the stack, and no end tag should be generated.
+            if (tag.isKnownEmpty()) {
+                return el;
+            } else {
+                // If it's a non-empty tag that was self-closed (e.g., <div /> or <script />),
+                // HTML5 parsing rules dictate they are treated as a start tag immediately followed by their end tag.
+                // So, they must be added to the stack and then immediately closed by emitting an end tag.
                 stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+                tokeniser.emit(new Token.EndTag(el.tagName()));
                 return el;
             }
+        }
+
+        // This block handles non-self-closing start tags (e.g., <div>, <p>, or <img> without '/>').
+
+        // If it's a known HTML empty tag (e.g., <img>, <hr>) even without a self-closing slash,
+        // it should still be treated as an empty element and not be added to the stack.
+        // We reuse insertEmpty for consistent handling of all known empty tags.
+        if (tag.isKnownEmpty()) {
+            return insertEmpty(startTag);
+        }
 
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
-        insert(el);
+        // For all other standard (non-empty) start tags (e.g., <div>, <p>),
+        // create the element and insert it normally, which adds it to the stack.
+        Element el = new Element(tag, baseUri, startTag.attributes);
+        insert(el); // Calls the overloaded insert(Element el) method, which handles adding to stack.
         return el;
     }
\ No newline at end of file
