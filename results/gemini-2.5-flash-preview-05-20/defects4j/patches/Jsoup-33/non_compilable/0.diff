diff --git a/tmp/3f5afc6f-b7ab-46d9-b4b6-5bafde4b59b1_buggy.java b/tmp/8029ad30-9415-4fd7-a52b-cb2f0a2df8fc_fixed.java
index dc93be3..261c6df 100644
--- a/tmp/3f5afc6f-b7ab-46d9-b4b6-5bafde4b59b1_buggy.java
+++ b/tmp/8029ad30-9415-4fd7-a52b-cb2f0a2df8fc_fixed.java
@@ -1,14 +1,33 @@
     Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+        // This method is primarily called for tags that are NOT spec-defined empty (e.g., img, br, hr)
+        // because those are handled earlier by HtmlTreeBuilder.process(token) directly via insertEmpty.
+
+        Tag tag = Tag.valueOf(startTag.name(), settings);
+        
         if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            // This startTag token ends with '/>'.
+            // This applies to: <div/>, <a/>, <script/>, <foo/>
+
+            Element el = new Element(tag, baseUri, startTag.attributes);
+            currentElement().appendChild(el); // Add element as a child of the current element.
+
+            if (!tag.isKnownTag()) { // This is an unknown tag, e.g., <foo/>. It should remain self-closing.
+                // It's already appended as a leaf node. No further stack manipulation is needed.
                 return el;
+            } else { 
+                // This is a known tag, but not spec-defined empty (e.g., <div>, <a>, <script>).
+                // In HTML, these are NOT self-closing. A tag like <div/> should be interpreted as <div></div>.
+                // We need to add it to the stack and then immediately pop it to effectively close it.
+                stack.add(el); // Push the element onto the stack.
+                popStackToClose(el); // Immediately pop it off the stack, treating it as self-closed.
+                return el;
+            }
         }
         
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
-        insert(el);
+        // This path is for tags that are NOT self-closing in the input token,
+        // AND are NOT spec-defined empty tags (e.g., <div>, <a>, <foo>).
+        // These are standard block elements that remain open until their corresponding end tag.
+        Element el = new Element(tag, baseUri, startTag.attributes);
+        insert(el); // Normal insertion: adds to current parent and pushes to stack.
         return el;
     }
\ No newline at end of file
