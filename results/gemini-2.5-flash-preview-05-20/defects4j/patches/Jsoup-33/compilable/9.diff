diff --git a/tmp/ba826369-79d6-44e1-8785-6d0f8862b54c_buggy.java b/tmp/0be36dfd-1352-42e2-80f1-1e2552ebc3fc_fixed.java
index dc93be3..96dbeb8 100644
--- a/tmp/ba826369-79d6-44e1-8785-6d0f8862b54c_buggy.java
+++ b/tmp/0be36dfd-1352-42e2-80f1-1e2552ebc3fc_fixed.java
@@ -1,14 +1,40 @@
     Element insert(Token.StartTag startTag) {
         // handle empty unknown tags
         // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
         if (startTag.isSelfClosing()) {
+            // insertEmpty handles:
+            // 1. Known void (empty) tags (e.g., <img/>, <br/>, <hr/>) with a self-closing slash.
+            //    It appends the element to the current parent and returns the element.
+            //    These elements are "self-closed" by definition and should not go on the stack.
+            // 2. Unknown tags (e.g., <foo/>) with a self-closing slash.
+            //    It appends the element to the current parent and returns the element.
+            //    These are treated as self-closing in XML, and Jsoup also treats them this way if they are self-closed in input.
+            // 3. Known non-void elements (e.g., <div/>, <p/>, <a/>) with a self-closing slash.
+            //    It inserts the element, then immediately pops it from the stack, effectively treating it as `<div></div>`.
+            //    In this case, it returns null, indicating the element has been fully handled and no new open element
+            //    remains on the stack from this operation.
             Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+
+            // If el is null, it means insertEmpty handled the element by opening and immediately closing it
+            // (e.g., <div/> -> <div></div>). No new open element was created for this method to return.
+            if (el == null) {
+                return null;
+            }
+
+            // If el is not null, it's either a void element (like <img>, <hr>) or an unknown self-closing tag (<foo/>).
+            // These elements are already properly appended to the current parent in insertEmpty,
+            // and they do not create a new "open" scope on the stack.
+            // Therefore, the original `stack.add(el)` and `tokeniser.emit` lines were incorrect for these cases
+            // as they would wrongly put a non-container on the stack or generate unnecessary tokens.
             return el;
         }
         
+        // This path is for regular, non-self-closing start tags (e.g., <div>, <p>, <span>)
+        // or for known void tags that do not have a self-closing slash in the token (e.g., <hr>).
+        // For the latter case, `insert(el)` (the HtmlTreeBuilder method that takes an Element)
+        // correctly handles it by appending the element and not pushing it onto the stack,
+        // because its `tag.isSelfClosing()` is true.
         Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
-        insert(el);
+        insert(el); // Calls HtmlTreeBuilder.insert(Element el)
         return el;
     }
