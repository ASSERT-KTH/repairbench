diff --git a/tmp/54fa3da4-7caf-4923-aa05-b45440636e60_buggy.java b/tmp/2578e68e-fa28-4343-865d-deba44312edb_fixed.java
index dc93be3..642fa5b 100644
--- a/tmp/54fa3da4-7caf-4923-aa05-b45440636e60_buggy.java
+++ b/tmp/2578e68e-fa28-4343-865d-deba44312edb_fixed.java
@@ -1,14 +1,37 @@
     Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+        // Get the Tag object for the start tag name. This 'tag' object contains HTML spec information
+        // like whether it's a known empty tag or a known HTML tag.
+        Tag tag = Tag.valueOf(startTag.name());
+
+        // If the token itself indicates it's self-closing (e.g., <img />, <div />, <foo />)
         if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            // Case 1: The Tag is a known HTML-spec defined empty tag (e.g., <img>, <br>, <hr>).
+            // For these, the self-closing slash is part of their normal syntax, and they do not require a separate closing tag.
+            // They should be handled by `insertEmpty` and not pushed onto the stack.
+            if (tag.isSelfClosing()) {
+                return insertEmpty(startTag); // Creates and appends the element. The stack is not affected.
+            }
+
+            // Case 2: The Tag is a known HTML tag, but NOT a spec-defined empty tag (e.g., <div />, <a />, <script />).
+            // According to HTML5 spec, the self-closing slash is ignored for these tags.
+            // They are treated as if they were a regular start tag (e.g., <div>).
+            // Therefore, they must be pushed onto the stack and then immediately popped by emitting a fake end tag.
+            if (tag.isKnownTag()) {
+                Element el = new Element(tag, baseUri, startTag.attributes);
+                insert(el); // Pushes the element onto the stack and appends it to the current element.
+                tokeniser.emit(new Token.EndTag(el.tagName())); // Emits a synthetic end tag to pop the element off the stack.
                 return el;
+            } else {
+                // Case 3: The Tag is an unknown tag that is self-closed (e.g., <foo />).
+                // Jsoup's convention (and desired by tests) is to treat these as empty elements,
+                // similar to XML self-closing tags. They should not be pushed onto the stack.
+                return insertEmpty(startTag); // Creates and appends the element. The stack is not affected.
+            }
         }
         
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
-        insert(el);
+        // Case 4: Standard start tag (not self-closing, e.g., <div>, <p>).
+        // Create the element and push it onto the stack as it expects a closing tag.
+        Element el = new Element(tag, baseUri, startTag.attributes);
+        insert(el); // Pushes the element onto the stack and appends it to the current element.
         return el;
     }
\ No newline at end of file
