diff --git a/tmp/52561bb7-3718-4333-a76e-a79d3bed7418_buggy.java b/tmp/4e941bb5-f5ea-41ed-bc17-3573f7cc6788_fixed.java
index dc93be3..04e5770 100644
--- a/tmp/52561bb7-3718-4333-a76e-a79d3bed7418_buggy.java
+++ b/tmp/4e941bb5-f5ea-41ed-bc17-3573f7cc6788_fixed.java
@@ -1,14 +1,14 @@
     Element insert(Token.StartTag startTag) {
         // handle empty unknown tags
         // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
         if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            Element el = insertEmpty(startTag); // 1. Calls insertEmpty(Token.StartTag), which appends `el` to the current element but does NOT add it to the stack.
+            stack.add(el);                       // 2. Adds `el` to the stack.
+            tokeniser.emit(new Token.EndTag(el.tagName()));  // 3. Emits an end tag, which will cause `el` to be popped from the stack.
             return el;
         }
         
         Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
-        insert(el);
+        insert(el); // 4. This calls another `insert(Element el)` method, which typically adds `el` to the stack.
         return el;
     }
\ No newline at end of file
