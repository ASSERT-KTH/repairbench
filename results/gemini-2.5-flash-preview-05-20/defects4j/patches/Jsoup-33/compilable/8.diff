diff --git a/tmp/cb4a08b0-494b-4de6-a5e1-0291c55f4667_buggy.java b/tmp/697a9d93-1abb-405a-b08d-6b275f7c60c1_fixed.java
index dc93be3..95dec8b 100644
--- a/tmp/cb4a08b0-494b-4de6-a5e1-0291c55f4667_buggy.java
+++ b/tmp/697a9d93-1abb-405a-b08d-6b275f7c60c1_fixed.java
@@ -1,14 +1,34 @@
     Element insert(Token.StartTag startTag) {
         // handle empty unknown tags
         // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
         if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            Tag tag = Tag.valueOf(startTag.name());
+
+            // Case 1: HTML void elements (e.g., <img/>, <hr/>)
+            // These are handled by insertEmpty() and are not pushed onto the stack.
+            if (tag.isSelfClosing()) {
+                return insertEmpty(startTag);
+            }
+            // Case 2: Known non-void HTML elements (e.g., <div/>, <script/>, <a/>, <i/>)
+            // These should be treated as immediately closed (<div></div>).
+            // Push the element onto the stack, then immediately pop it.
+            else if (tag.isKnownTag()) {
+                Element el = new Element(tag, baseUri, startTag.attributes);
+                insert(el); // This pushes `el` onto the stack and appends it to the current element.
+                pop();      // Pop `el` immediately to simulate closure.
                 return el;
             }
+            // Case 3: Unknown tags (e.g., <foo/>)
+            // These are generally treated as self-closing in the XML sense in Jsoup output,
+            // similar to void elements; they are inserted but not pushed to the stack.
+            else {
+                return insertEmpty(startTag);
+            }
+        }
 
+        // Default case for non-self-closing start tags (e.g., <div>)
+        // Create the element, add it to the current element, and push it onto the stack.
         Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
         insert(el);
         return el;
     }
\ No newline at end of file
