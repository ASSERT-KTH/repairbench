diff --git a/tmp/f8f3e439-b208-4907-9118-963d8c1b46c9_buggy.java b/tmp/867a2668-5f4a-454b-91ae-f5e5fa9d454b_fixed.java
index cfdcd9c..c8b59fe 100644
--- a/tmp/f8f3e439-b208-4907-9118-963d8c1b46c9_buggy.java
+++ b/tmp/867a2668-5f4a-454b-91ae-f5e5fa9d454b_fixed.java
@@ -1,51 +1,56 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
-    Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // Traverse to the element at intIndex.
+    // 'current' will point to the element at the target index after the loop.
     Node current = left.getFirstChild();
-    Node elem = null;
     for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
       current = current.getNext();
     }
 
-    if (elem == null) {
+    // After the loop, if 'current' is null, it means the index was out of bounds
+    // (e.g., array too short, or empty array).
+    if (current == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
-    if (elem.isEmpty()) {
-      elem = NodeUtil.newUndefinedNode(elem);
+    // If the found element is an EMPTY node (e.g., the first element of `[,10]`),
+    // it should be replaced by 'undefined'. Otherwise, use the actual node.
+    Node resultNode;
+    if (current.isEmpty()) {
+      resultNode = NodeUtil.newUndefinedNode(current);
     } else {
-      left.removeChild(elem);
+      // If it's a real node, remove it from the array literal as it's being "folded out".
+      left.removeChild(current);
+      resultNode = current;
     }
 
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+    // Replace the entire GETELEM node 'n' with the determined 'resultNode'.
+    n.getParent().replaceChild(n, resultNode);
     reportCodeChange();
-    return elem;
+    return resultNode;
   }
\ No newline at end of file
