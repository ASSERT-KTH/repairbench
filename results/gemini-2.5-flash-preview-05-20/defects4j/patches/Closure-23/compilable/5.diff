diff --git a/tmp/1ffb34ab-1ffe-409f-ad70-0784831e1fa8_buggy.java b/tmp/4a380134-8a54-4e72-b76b-c8a34fafd4a8_fixed.java
index cfdcd9c..16b613a 100644
--- a/tmp/1ffb34ab-1ffe-409f-ad70-0784831e1fa8_buggy.java
+++ b/tmp/4a380134-8a54-4e72-b76b-c8a34fafd4a8_fixed.java
@@ -1,51 +1,63 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // Traverse the array literal to find the element at intIndex
     Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
+    for (int i = 0; i < intIndex; i++) {
+      if (current == null) {
+        // We've gone past the end of the array literal before reaching the index
+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+        return n;
+      }
       current = current.getNext();
     }
 
-    if (elem == null) {
+    // After the loop, 'current' should point to the element at intIndex.
+    // If it's null, the index is out of bounds.
+    if (current == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    Node elem = current; // This is the element we successfully found
+
     if (elem.isEmpty()) {
+      // If the array element is an empty slot (e.g., [,10][0]),
+      // it evaluates to 'undefined'. Replace the EMPTY node with an UNDEFINED node.
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
+      // If it's a concrete element, remove it from the array literal.
+      // This is important because we are replacing the GETELEM with the value,
+      // effectively "extracting" the element from the array literal.
       left.removeChild(elem);
     }
 
-    // Replace the entire GETELEM with the value
+    // Replace the entire GETELEM expression with the folded value (elem).
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
\ No newline at end of file
