diff --git a/tmp/52f2c66e-7df8-4b1c-a212-bc5719c25ab7_buggy.java b/tmp/9c7eddb0-6074-43be-9d86-8dae30918699_fixed.java
index cfdcd9c..15c10c7 100644
--- a/tmp/52f2c66e-7df8-4b1c-a212-bc5719c25ab7_buggy.java
+++ b/tmp/9c7eddb0-6074-43be-9d86-8dae30918699_fixed.java
@@ -1,51 +1,62 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // Find the element at the given index.
+    // 'current' will eventually point to the desired element if found.
     Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
+    for (int i = 0; i < intIndex; i++) {
+      // If we run out of elements before reaching the desired index,
+      // then the index is out of bounds.
+      if (current == null) {
+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+        return n;
+      }
       current = current.getNext();
     }
 
-    if (elem == null) {
+    // After the loop, 'current' should be the element at 'intIndex'.
+    // If it's null, it means the index is out of bounds (e.g., [10,20][2]).
+    if (current == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
-    if (elem.isEmpty()) {
-      elem = NodeUtil.newUndefinedNode(elem);
+    // If the element at the index is an EMPTY node (e.g., `[,10][0]`),
+    // replace it with an 'undefined' node.
+    if (current.isEmpty()) {
+      // Create a new undefined node, inheriting source info from the original EMPTY node.
+      current = NodeUtil.newUndefinedNode(current);
     } else {
-      left.removeChild(elem);
+      // Otherwise, remove the actual element node from its parent (the array literal).
+      left.removeChild(current);
     }
 
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+    // Replace the entire GETELEM node ('n') with the found/modified element ('current').
+    n.getParent().replaceChild(n, current);
     reportCodeChange();
-    return elem;
+    return current;
   }
\ No newline at end of file
