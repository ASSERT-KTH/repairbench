diff --git a/tmp/78cfb388-f17d-4c04-8d75-11bfaa0de939_buggy.java b/tmp/4b129417-8e7b-4d51-bc9b-61df54454875_fixed.java
index cfdcd9c..bc39599 100644
--- a/tmp/78cfb388-f17d-4c04-8d75-11bfaa0de939_buggy.java
+++ b/tmp/4b129417-8e7b-4d51-bc9b-61df54454875_fixed.java
@@ -1,51 +1,61 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
-    Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
-      current = current.getNext();
+    // Find the child node at the given index.
+    // The original loop logic was flawed for finding the Nth child,
+    // especially for index 0 or when the loop terminates.
+    // This updated loop correctly advances the 'targetChild' pointer
+    // 'intIndex' times to reach the desired element.
+    Node targetChild = left.getFirstChild();
+    for (int i = 0; targetChild != null && i < intIndex; i++) {
+      targetChild = targetChild.getNext();
     }
 
-    if (elem == null) {
+    // If targetChild is null after the loop, it means the index is out of bounds
+    // (e.g., trying to access index 2 in an array with only 2 elements, or index 0 in an empty array).
+    if (targetChild == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
-    if (elem.isEmpty()) {
-      elem = NodeUtil.newUndefinedNode(elem);
+    // If the element is an EMPTY node (e.g., from a sparse array like `[,10][0]`),
+    // it should fold to 'void 0'. Otherwise, use the actual element.
+    Node replacementNode;
+    if (targetChild.isEmpty()) {
+      replacementNode = NodeUtil.newUndefinedNode(targetChild);
     } else {
-      left.removeChild(elem);
+      // Remove the child from its current parent (the array literal)
+      // before it's used as a replacement for the GETELEM node.
+      left.removeChild(targetChild);
+      replacementNode = targetChild;
     }
 
     // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+    n.getParent().replaceChild(n, replacementNode);
     reportCodeChange();
-    return elem;
+    return replacementNode;
   }
\ No newline at end of file
