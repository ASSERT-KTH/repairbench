diff --git a/tmp/b58839c3-6e8c-4fab-a41a-7199310211de_buggy.java b/tmp/2d4c14bd-f956-4b81-8ab7-92e78df7c34d_fixed.java
index cfdcd9c..50f93ba 100644
--- a/tmp/b58839c3-6e8c-4fab-a41a-7199310211de_buggy.java
+++ b/tmp/2d4c14bd-f956-4b81-8ab7-92e78df7c34d_fixed.java
@@ -1,51 +1,60 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // Iterate to find the element at the specified index.
+    // 'current' will point to the node at 'intIndex' if found.
     Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
+    for (int i = 0; i < intIndex; i++) {
+        if (current == null) {
+            // We've gone past the end of the array before reaching the desired index.
+            error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+            return n;
+        }
         current = current.getNext();
     }
 
-    if (elem == null) {
+    // After the loop, 'current' should be the element node at 'intIndex'.
+    // If 'current' is null here, it means the index was out of bounds
+    // (e.g., array has 2 elements, index is 2 or more).
+    if (current == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
-    if (elem.isEmpty()) {
-      elem = NodeUtil.newUndefinedNode(elem);
+    // If the element is an empty node (e.g., `[,10][0]`), it should fold to `undefined`.
+    if (current.isEmpty()) {
+      current = NodeUtil.newUndefinedNode(current);
     } else {
-      left.removeChild(elem);
+      // Otherwise, remove the actual element from its parent array literal.
+      left.removeChild(current);
     }
 
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+    // Replace the entire GETELEM (n) with the folded value (current).
+    n.getParent().replaceChild(n, current);
     reportCodeChange();
-    return elem;
+    return current;
   }
\ No newline at end of file
