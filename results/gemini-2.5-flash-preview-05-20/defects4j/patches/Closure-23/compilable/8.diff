diff --git a/tmp/3afa8f26-efb5-47d1-a8f0-0ba26827f898_buggy.java b/tmp/26d0f904-1c74-48f5-803b-3cd232182016_fixed.java
index cfdcd9c..f2a0a3f 100644
--- a/tmp/3afa8f26-efb5-47d1-a8f0-0ba26827f898_buggy.java
+++ b/tmp/26d0f904-1c74-48f5-803b-3cd232182016_fixed.java
@@ -1,51 +1,60 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
+    // Iterate 'intIndex' times to move 'current' to the node at the desired index.
+    for (int i = 0; i < intIndex; i++) {
+        // If we run out of elements before reaching the target index, it's out of bounds.
+        if (current == null) {
+            error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+            return n;
+        }
         current = current.getNext();
     }
 
-    if (elem == null) {
+    // After the loop, 'current' should be the element at 'intIndex'.
+    // If 'current' is null here, it means the index was past the end of the array.
+    if (current == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    Node elem = current; // 'elem' is now the node at the desired index.
+
     if (elem.isEmpty()) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
+      // For non-empty elements, remove the element from the array literal.
+      // This is crucial for simplifying the array literal itself.
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
\ No newline at end of file
