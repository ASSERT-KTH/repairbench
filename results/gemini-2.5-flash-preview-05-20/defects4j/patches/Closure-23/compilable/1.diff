diff --git a/tmp/ed57654e-2e87-4c0a-bc3c-a5341357461a_buggy.java b/tmp/7f9ad9cc-dbde-4278-99da-67994e579079_fixed.java
index cfdcd9c..89d9cd3 100644
--- a/tmp/ed57654e-2e87-4c0a-bc3c-a5341357461a_buggy.java
+++ b/tmp/7f9ad9cc-dbde-4278-99da-67994e579079_fixed.java
@@ -1,51 +1,81 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // The original loop incorrectly iterated up to intIndex - 1, and also assigned
+    // 'elem' in a way that would pick the *previous* element if the loop continued.
+    // This caused issues especially for index 0 and for correctly finding the Nth element.
+
     Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
+    Node elemToReplace = null; // This will hold the node found at the target index within the array literal
+    Node actualValueNode = null; // This will be the node that ultimately replaces the GETELEM expression
 
-      current = current.getNext();
+    // Iterate through the children of the array literal to find the node at `intIndex`.
+    // The `Node` structure for array literals includes `EMPTY` nodes for holes (e.g., `[,]` has an `EMPTY` child).
+    for (int i = 0; i <= intIndex; i++) {
+        if (current == null) {
+            // We have iterated past all explicit children of the array literal
+            // before reaching the target index. This means the index is out of bounds.
+            error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+            return n;
+        }
+
+        if (i == intIndex) {
+            // Found the node corresponding to the target index.
+            elemToReplace = current;
+            break; // Exit the loop, as we found our target
+        }
+
+        current = current.getNext(); // Move to the next child
     }
 
-    if (elem == null) {
+    // At this point, `elemToReplace` should contain the node at `intIndex`.
+    // The `current == null` check inside the loop should have already handled
+    // cases where the index is out of bounds, so `elemToReplace` should not be null here.
+    // This check serves as a safeguard.
+    if (elemToReplace == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
-    if (elem.isEmpty()) {
-      elem = NodeUtil.newUndefinedNode(elem);
+    // If the element found is an EMPTY node (e.g., for `[,10][0]`),
+    // replace it with an explicit `undefined` node (`void 0`).
+    if (elemToReplace.isEmpty()) {
+      actualValueNode = NodeUtil.newUndefinedNode(elemToReplace);
     } else {
-      left.removeChild(elem);
+      // If it's a non-empty node, remove it from the array literal.
+      // This is crucial for correctness, especially if the node has side-effects
+      // (e.g., `x = [0, foo()][1]`) or its parent chain needs to be consistent
+      // after it's moved out of the array literal.
+      left.removeChild(elemToReplace);
+      actualValueNode = elemToReplace;
     }
 
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+    // Replace the entire GETELEM node (`n`) with the `actualValueNode`.
+    n.getParent().replaceChild(n, actualValueNode);
     reportCodeChange();
-    return elem;
+    return actualValueNode;
   }
\ No newline at end of file
