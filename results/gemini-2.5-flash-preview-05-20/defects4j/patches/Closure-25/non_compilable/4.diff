diff --git a/tmp/d4fa174e-eecf-4990-beb2-701e2b095b6b_buggy.java b/tmp/8a0423e9-d875-4f73-84f5-727bbf37bc43_fixed.java
index b98f0a7..fdd4008 100644
--- a/tmp/d4fa174e-eecf-4990-beb2-701e2b095b6b_buggy.java
+++ b/tmp/8a0423e9-d875-4f73-84f5-727bbf37bc43_fixed.java
@@ -1,29 +1,64 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+    FunctionType ct = null; // Declare ct here so it's accessible for argument processing
+
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+
+    // After determining the constructor's type and the new object's type,
+    // process the arguments. This is where backward inference needs to happen.
+    Node arg = constructor.getNext();
+    if (ct != null && ct.isConstructor()) {
+      // If we have a valid constructor type, we can infer types for its arguments.
+      ImmutableList<Node> parameters = ct.getParameters();
+      for (int i = 0; arg != null; arg = arg.getNext(), ++i) {
+        JSType paramType = null;
+        if (i < parameters.size()) {
+          paramType = parameters.get(i).getJSType();
+        } else if (ct.isVarArgs()) {
+          // If there are more arguments than declared parameters and the function
+          // accepts variable arguments, use the var_args type.
+          paramType = ct.getVarArgsType();
+        }
+        // If paramType remains null (e.g., more arguments than parameters and not var_args),
+        // no specific type is expected for this argument from the constructor.
+
+        if (paramType != null) {
+          // This is the key step for backward type inference:
+          // Unify the argument's current type with the expected parameter type.
+          // This updates the type of 'arg' within the flow scope.
+          scope = unifyTypeOfArgument(scope, arg, paramType);
+        }
+        // After potentially updating the scope for backward inference,
+        // traverse the argument node itself to propagate types within the argument expression.
         scope = traverse(arg, scope);
       }
+    } else {
+      // If constructorType was not a constructor, or was unknown,
+      // we cannot do backward inference. Just traverse arguments normally.
+      for (; arg != null; arg = arg.getNext()) {
+        scope = traverse(arg, scope);
+      }
+    }
     return scope;
   }
