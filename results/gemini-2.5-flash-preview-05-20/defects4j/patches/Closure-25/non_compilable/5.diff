diff --git a/tmp/646c074d-6166-4896-ad08-8c356b88f4a0_buggy.java b/tmp/514e9176-e483-413d-88fc-204f21f30b8b_fixed.java
index b98f0a7..44fff27 100644
--- a/tmp/646c074d-6166-4896-ad08-8c356b88f4a0_buggy.java
+++ b/tmp/514e9176-e483-413d-88fc-204f21f30b8b_fixed.java
@@ -1,29 +1,60 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+    FunctionType ct = null; // Declare ct here so it's accessible after the if-else block
+
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        ct = constructorType.toMaybeFunctionType(); // Assign ct here
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
+
+    // Apply backwards inference for arguments if the constructor type is available
+    if (ct != null && ct.isConstructor()) {
+      Node currentFormalParameter = ct.getParametersNode().getFirstChild(); // Get the first formal parameter node
+      for (Node actualArg = constructor.getNext(); actualArg != null; actualArg = actualArg.getNext()) {
+        JSType expectedParamType = null;
+        if (currentFormalParameter != null) {
+            // Get the type of the current formal parameter
+            expectedParamType = currentFormalParameter.getJSType();
+        }
+
+        // If an expected parameter type exists, use it to constrain the actual argument's type.
+        // `constrainType` is a helper method (assumed to be part of the TypeInference class)
+        // that handles the backward inference by updating the FlowScope based on the expected type.
+        if (expectedParamType != null) {
+            scope = constrainType(actualArg, scope, expectedParamType, actualArg.getJSType());
+        }
+
+        // Advance to the next formal parameter for the next argument
+        if (currentFormalParameter != null) {
+            currentFormalParameter = currentFormalParameter.getNext();
+        }
+
+        // Traverse the argument node. This will use the potentially updated type from constrainType.
+        scope = traverse(actualArg, scope);
+      }
+    } else {
+      // If ct is null or not a constructor, just traverse the arguments normally
       for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
       }
+    }
     return scope;
   }
\ No newline at end of file
