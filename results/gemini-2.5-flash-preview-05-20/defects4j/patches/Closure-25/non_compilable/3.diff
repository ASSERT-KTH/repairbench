diff --git a/tmp/9d20d248-7623-40a7-bc3b-e07b67a28dcc_buggy.java b/tmp/0626c901-8b3c-4421-a4da-375dd6616364_fixed.java
index b98f0a7..086f726 100644
--- a/tmp/9d20d248-7623-40a7-bc3b-e07b67a28dcc_buggy.java
+++ b/tmp/0626c901-8b3c-4421-a4da-375dd6616364_fixed.java
@@ -1,29 +1,50 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+    FunctionType ct = null; // Declare ct here so it's accessible later
+
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        ct = constructorType.toMaybeFunctionType(); // Assign ct here
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
+
+    // Get formal parameters for backward inference if ct is a constructor.
+    Node formalParam = null;
+    if (ct != null && ct.isConstructor()) {
+        formalParam = ct.getParametersNode();
+    }
+    Node currentParam = (formalParam == null) ? null : formalParam.getFirstChild();
+
+    // Loop through arguments, performing both forward and backward inference.
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
+      scope = traverse(arg, scope); // Forward inference: traverse the argument itself.
+
+      // Backward inference: If we have a constructor function type, propagate parameter types to arguments.
+      if (ct != null && ct.isConstructor()) {
+          if (currentParam != null) {
+            scope.inferPropertyTypes(arg, currentParam.getJSType());
+            currentParam = currentParam.getNext();
+          } else if (ct.isVarArgs()) {
+            scope.inferPropertyTypes(arg, ct.getRestOfParametersType());
+          }
+      }
     }
     return scope;
   }
\ No newline at end of file
