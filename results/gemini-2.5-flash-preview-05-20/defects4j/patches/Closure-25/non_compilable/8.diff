diff --git a/tmp/04c9f8a3-8940-40ff-8d7c-1d56540d54b1_buggy.java b/tmp/8200ce80-18b8-4fa2-bfd0-8ef96e1a9a6d_fixed.java
index b98f0a7..51b5a3f 100644
--- a/tmp/04c9f8a3-8940-40ff-8d7c-1d56540d54b1_buggy.java
+++ b/tmp/8200ce80-18b8-4fa2-bfd0-8ef96e1a9a6d_fixed.java
@@ -1,29 +1,61 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
-    JSType type = null;
+    JSType type = null; // This will hold the inferred type of the 'new' expression itself.
+    FunctionType ct = null; // This will hold the constructor's FunctionType.
+
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
-          type = ct.getInstanceType();
+          type = ct.getInstanceType(); // Get the instance type if it's a valid constructor.
         }
       }
     }
+
+    // Traverse arguments. This is where backwards inference for parameters happens.
+    int argIndex = 0;
+    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), argIndex++) {
+      JSType expectedParamType = null;
+      // If we have a valid constructor function type, get its expected parameter types.
+      if (ct != null && ct.isConstructor()) {
+        List<JSType> paramTypes = ct.getParameterTypes();
+        if (argIndex < paramTypes.size()) {
+          expectedParamType = paramTypes.get(argIndex);
+        } else if (ct.isVarargs()) {
+          // For varargs, get the type of the elements in the varargs array.
+          expectedParamType = ct.toMaybeFunctionType().getRestOfParametersType();
+        }
+      }
+
+      // If an expected type for this argument was found, set it temporarily for backwards inference.
+      if (expectedParamType != null) {
+        // `setExpectedType` is a method of the TypeInferencer class (or its superclass)
+        // that allows associating an expected type with a Node for the current traversal.
+        setExpectedType(arg, expectedParamType);
+      }
+      scope = traverse(arg, scope); // Traverse the argument. The `traverse` method will use the expected type.
+      // Clean up the expected type annotation after traversal to avoid leaking state.
+      if (expectedParamType != null) {
+        clearExpectedType(arg);
+      }
+    }
+
+    // Set the JSType of the 'new' expression itself.
+    // If 'type' is still null, it means the constructor was not a recognized constructor function,
+    // and its type will implicitly be treated as unknown or a default object type.
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
-    }
+
     return scope;
   }
\ No newline at end of file
