diff --git a/tmp/0b0add6b-4580-4dc9-8db5-9f757563d984_buggy.java b/tmp/d943ce5e-cdf1-4313-b276-1ad626b09169_fixed.java
index b98f0a7..32d1694 100644
--- a/tmp/0b0add6b-4580-4dc9-8db5-9f757563d984_buggy.java
+++ b/tmp/d943ce5e-cdf1-4313-b276-1ad626b09169_fixed.java
@@ -1,29 +1,57 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
+    // Traverse the constructor expression itself to infer its type.
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
-    JSType type = null;
+    JSType type = null; // This will hold the instance type of the new object
+
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
+
         if (ct != null && ct.isConstructor()) {
+          // Get the instance type created by this constructor.
           type = ct.getInstanceType();
-        }
-      }
-    }
-    n.setJSType(type);
+
+          // Perform backwards inference for constructor arguments.
+          // Iterate over formal parameters and actual arguments in parallel.
+          Iterator<JSType> paramIterator = ct.getParameters().iterator();
           for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
+            JSType formalParamType = null;
+            if (paramIterator.hasNext()) {
+              formalParamType = paramIterator.next();
             }
+
+            // Infer the argument's type based on the formal parameter type.
+            // This is crucial for backwards inference.
+            // 'inferExpression' (presumably a method of the enclosing TypeInference class)
+            // handles this by propagating the 'expectedType' (formalParamType)
+            // down to the argument expression.
+            scope = inferExpression(arg, formalParamType, scope);
+          }
+        }
+      }
+    }
+
+    // Set the JSType of the NEW expression (n) to the inferred instance type.
+    n.setJSType(type);
+
+    // The original loop for traversing arguments was here.
+    // It is now removed because arguments are handled above
+    // with proper backwards inference using inferExpression.
+    // for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+    //   scope = traverse(arg, scope);
+    // }
+
     return scope;
   }
\ No newline at end of file
