diff --git a/tmp/090c569b-1408-45d6-b652-ba1756b281a7_buggy.java b/tmp/ec5b6620-d069-4e08-b93f-ec0af8a254eb_fixed.java
index b98f0a7..42d3f68 100644
--- a/tmp/090c569b-1408-45d6-b652-ba1756b281a7_buggy.java
+++ b/tmp/ec5b6620-d069-4e08-b93f-ec0af8a254eb_fixed.java
@@ -1,29 +1,41 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+    FunctionType ct = null; // Declare ct here so it's accessible for argument processing
+
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
+
+    int i = 0; // Index for parameters
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
+      JSType paramType = null;
+      // If we found a valid constructor type and this argument corresponds
+      // to one of its formal parameters, retrieve the parameter's type.
+      if (ct != null && ct.isConstructor() && i < ct.getParameters().size()) {
+        paramType = ct.getParameterType(i);
+      }
+      // Pass the expected parameter type to enable backward type inference for the argument.
+      scope = traverse(arg, scope, paramType);
+      i++;
     }
     return scope;
   }
\ No newline at end of file
