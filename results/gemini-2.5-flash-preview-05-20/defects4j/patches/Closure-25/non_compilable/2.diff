diff --git a/tmp/b9c8ee61-29af-48f4-938d-27b15ec5f2f2_buggy.java b/tmp/984b7b66-57e8-4544-9612-42775da86c1c_fixed.java
index b98f0a7..4936ce3 100644
--- a/tmp/b9c8ee61-29af-48f4-938d-27b15ec5f2f2_buggy.java
+++ b/tmp/984b7b66-57e8-4544-9612-42775da86c1c_fixed.java
@@ -1,29 +1,44 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // For 'new' expressions, the arguments are passed to the constructor.
+          // We need to propagate the parameter types from the constructor's
+          // function type back to the arguments, similar to a regular call.
+          Node args = constructor.getNext(); // This node contains the actual arguments as its children.
+          // backwardPropagate handles both the traversal of arguments and the
+          // backward inference of their types based on the constructor's parameters.
+          // The 'args' node is guaranteed to exist (it's the second child of NEW,
+          // typically an EMPTY or BLOCK node), but checking for null doesn't hurt.
+          if (args != null) {
+            scope = backwardPropagate(n, ct, args, scope);
+          }
         }
       }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
-    }
+    // The original loop for traversing arguments was incorrect (it traversed
+    // the arguments container node, not the arguments themselves) and is now
+    // redundant because backwardPropagate already handles the traversal of
+    // the actual arguments.
+    // for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+    //   scope = traverse(arg, scope);
+    // }
     return scope;
   }
\ No newline at end of file
