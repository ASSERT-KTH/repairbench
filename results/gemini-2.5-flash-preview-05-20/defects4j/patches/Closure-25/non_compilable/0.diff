diff --git a/tmp/a50925d1-6b07-4d11-bb96-425f2909fbd5_buggy.java b/tmp/1543e334-43c7-443e-b4ce-f1d0511ea158_fixed.java
index b98f0a7..d0fc101 100644
--- a/tmp/a50925d1-6b07-4d11-bb96-425f2909fbd5_buggy.java
+++ b/tmp/1543e334-43c7-443e-b4ce-f1d0511ea158_fixed.java
@@ -1,29 +1,58 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+
+    // Declare ct here so it's available for processing arguments later.
+    FunctionType ct = null;
+
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
+
+    int argIndex = 0; // Tracks the current argument's position relative to the constructor's parameters
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+      JSType constraintType = null;
+      // Only constrain arguments if we have a valid constructor function type
+      if (ct != null && ct.isConstructor()) {
+        // Match arguments with parameters to get the expected type
+        if (argIndex < ct.getParameters().size()) {
+          Node param = ct.getParameters().get(argIndex);
+          constraintType = param.getJSType();
+        } else if (ct.isVarArgs()) {
+          // If it's a var_args function, all arguments beyond fixed parameters
+          // should match the var_args type. The traverse method will handle
+          // unwrapping the ArrayType for individual arguments if needed.
+          Node varArgsParam = ct.getParameters().get(ct.getParameters().size() - 1);
+          constraintType = varArgsParam.getJSType();
+        }
+      }
+
+      if (constraintType != null) {
+        // Traverse the argument node, constraining its type by the parameter type
+        scope = traverse(arg, scope, constraintType);
+      } else {
+        // Traverse without a specific constraint if no parameter type is available
         scope = traverse(arg, scope);
       }
+      argIndex++;
+    }
     return scope;
   }
\ No newline at end of file
