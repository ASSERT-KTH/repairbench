diff --git a/tmp/468aaf21-ed49-4469-9a61-1ad94dad6f21_buggy.java b/tmp/d8badd4b-7dc2-4ef1-9331-6ab611ecd3c4_fixed.java
index b98f0a7..3bf362c 100644
--- a/tmp/468aaf21-ed49-4469-9a61-1ad94dad6f21_buggy.java
+++ b/tmp/d8badd4b-7dc2-4ef1-9331-6ab611ecd3c4_fixed.java
@@ -1,29 +1,45 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+    FunctionType ct = null; // Declare ct here so it's accessible after the if-block
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
+
+    // The original code only traversed the arguments, but did not apply backward
+    // inference from the constructor's parameter types to the actual arguments.
+    // We should use the inferCall method (which is typically available in TypeInference)
+    // to handle argument traversal, parameter-argument matching, and backward inference.
+    if (ct != null) {
+      // If we have a valid FunctionType for the constructor, use inferCall
+      // to handle argument traversal and type inference, including backward inference
+      // from the constructor's formal parameters to the actual arguments.
+      scope = inferCall(scope, n, ct, type);
+    } else {
+      // If constructor type is not a known function type,
+      // or if it's an unknown type, just traverse the arguments normally
+      // (forward inference only, no backward inference possible).
       for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
       }
+    }
     return scope;
   }
\ No newline at end of file
