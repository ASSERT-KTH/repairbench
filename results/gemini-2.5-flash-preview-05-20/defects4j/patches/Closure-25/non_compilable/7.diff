diff --git a/tmp/01f39510-48c3-4dab-97ba-be29aa95dd74_buggy.java b/tmp/c9269291-a433-4255-92f8-7afb0347e285_fixed.java
index b98f0a7..11c149c 100644
--- a/tmp/01f39510-48c3-4dab-97ba-be29aa95dd74_buggy.java
+++ b/tmp/c9269291-a433-4255-92f8-7afb0347e285_fixed.java
@@ -1,29 +1,59 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
-    JSType type = null;
+    JSType type = null; // This will be the instance type inferred for the 'new' expression itself
+    FunctionType ct = null; // This will hold the constructor's FunctionType
+
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
+
+    // After determining the constructor's function type, we can infer
+    // the types of its arguments using backwards inference.
+    // This is similar to how arguments are handled in traverseCall.
+    if (ct != null) {
+      ImmutableList<JSType> paramTypes = ct.getParameters();
+      Node currentArg = constructor.getNext();
+      int i = 0;
+      for (; currentArg != null; currentArg = currentArg.getNext(), i++) {
+        JSType paramType = i < paramTypes.size() ? paramTypes.get(i) : null;
+
+        // Create a child scope for traversing each argument to isolate its
+        // inference effects on the outer scope until it's finalized.
+        scope = traverse(currentArg, scope.createChildScope());
+
+        // Infer properties on the argument based on the expected parameter type.
+        // This is crucial for backwards inference (e.g., testBackwardsInferenceNew).
+        scope = inferPropertyTypes(currentArg, paramType, scope);
+
+        // Constrain the value with undefined if the parameter allows it.
+        if (paramType != null && !paramType.isUnknownType()) {
+          scope = constrainValueWithUndefined(currentArg, paramType, scope);
+        }
+      }
+    } else {
+      // Fallback: If we couldn't determine a function type for the constructor,
+      // just traverse the arguments without specific type information.
       for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
       }
+    }
     return scope;
   }
\ No newline at end of file
