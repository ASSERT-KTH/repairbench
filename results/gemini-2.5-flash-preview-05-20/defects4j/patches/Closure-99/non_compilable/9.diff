diff --git a/tmp/f69cc39e-6b74-4ee9-91bd-aadddbc6240f_buggy.java b/tmp/2f277677-90b4-4e56-b36b-4d653fcef634_fixed.java
index 86553f4..3e3c20f 100644
--- a/tmp/f69cc39e-6b74-4ee9-91bd-aadddbc6240f_buggy.java
+++ b/tmp/2f277677-90b4-4e56-b36b-4d653fcef634_fixed.java
@@ -1,57 +1,88 @@
   /**
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
     if (n.getType() == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
+      // or @override or @interface annotation.
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
            jsDoc.hasThisType() ||
-           jsDoc.isOverride())) {
+           jsDoc.isOverride() ||
+           jsDoc.isInterface())) { // Added jsDoc.isInterface()
         return false;
       }
 
       // Don't traverse functions unless they would normally
       // be able to have a @this annotation associated with them. e.g.,
       // var a = function() { }; // or
       // function a() {} // or
       // a.x = function() {};
       int pType = parent.getType();
       if (!(pType == Token.BLOCK ||
             pType == Token.SCRIPT ||
             pType == Token.NAME ||
             pType == Token.ASSIGN)) {
         return false;
       }
     }
 
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
       
       if (n == lhs) {
         // Always traverse the left side of the assignment. To handle
         // nested assignments properly (e.g., (a = this).property = c;),
         // assignLhsChild should not be overridden.
         if (assignLhsChild == null) {
           assignLhsChild = lhs;
         }
       } else {
         // Only traverse the right side if it's not an assignment to a prototype
         // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+        // Replaced specific GETPROP/getQualifiedName checks with a general helper.
+        if (isPrototypeProperty(lhs)) {
             return false;
         }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
-            return false;
       }
     }
+
+    return true;
+  }
+
+  /**
+   * Checks if a node represents a property access chain that includes
+   * ".prototype" or "['prototype']" anywhere in its structure.
+   * This is used to identify method assignments to prototype chains.
+   *
+   * @param n The node to check (typically the LHS of an assignment, a GETPROP or GETELEM).
+   * @return true if 'n' or any of its ancestors in the property access chain
+   *         is a direct "prototype" property, false otherwise.
+   */
+  private boolean isPrototypeProperty(Node n) {
+    if (n == null) {
+        return false;
     }
+    Node current = n;
+    // Traverse up the property access chain (e.g., from 'c' in 'a.b.prototype.c')
+    while (current != null && (current.isGetProp() || current.isGetElem())) {
+      Node property = current.getLastChild(); // The property name part (e.g., 'c', 'b', 'prototype')
+      Node object = current.getFirstChild();   // The object part (e.g., 'a.b.prototype', 'a.b', 'a')
 
+      // Check if the current property access is directly to 'prototype'
+      if (current.isGetProp() && "prototype".equals(property.getString())) {
         return true;
       }
+      // Handle bracket access: e.g., obj['prototype']
+      if (current.isGetElem() && property.isString() && "prototype".equals(property.getString())) {
+        return true;
+      }
+
+      current = object; // Move up to the object of the current access and continue checking
+    }
+    return false;
+  }
