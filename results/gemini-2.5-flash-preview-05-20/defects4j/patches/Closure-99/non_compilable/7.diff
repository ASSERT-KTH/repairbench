diff --git a/tmp/8f483add-ffba-41cc-a938-2a8c12c03943_buggy.java b/tmp/64907a0c-0cf9-42df-b0c6-d7f449902bee_fixed.java
index 86553f4..f0762f3 100644
--- a/tmp/8f483add-ffba-41cc-a938-2a8c12c03943_buggy.java
+++ b/tmp/64907a0c-0cf9-42df-b0c6-d7f449902bee_fixed.java
@@ -1,57 +1,91 @@
+import com.google.javascript.rhino.JSDocInfo;
+import com.google.javascript.rhino.Node;
+import com.google.javascript.rhino.Token;
+import com.google.javascript.jscomp.NodeTraversal;
+
+// Assuming this function is part of a class that has access to
+// assignLhsChild (a Node field) and getFunctionJsDocInfo(Node n) (a method).
+// The JSDocInfo class is from com.google.javascript.rhino.JSDocInfo.
+
 /**
  * Since this pass reports errors only when a global {@code this} keyword
  * is encountered, there is no reason to traverse non global contexts.
  */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
   if (n.getType() == Token.FUNCTION) {
     // Don't traverse functions that are constructors or have the @this
     // or @override annotation.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc != null &&
         (jsDoc.isConstructor() ||
          jsDoc.hasThisType() ||
-           jsDoc.isOverride())) {
+         jsDoc.isOverride() ||
+         jsDoc.isInterface())) { // ADDED: Exclude functions annotated with @interface
       return false;
     }
 
     // Don't traverse functions unless they would normally
     // be able to have a @this annotation associated with them. e.g.,
     // var a = function() { }; // or
     // function a() {} // or
     // a.x = function() {};
     int pType = parent.getType();
     if (!(pType == Token.BLOCK ||
           pType == Token.SCRIPT ||
           pType == Token.NAME ||
           pType == Token.ASSIGN)) {
       return false;
     }
   }
 
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
     Node rhs = lhs.getNext();
 
     if (n == lhs) {
       // Always traverse the left side of the assignment. To handle
       // nested assignments properly (e.g., (a = this).property = c;),
       // assignLhsChild should not be overridden.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
       // Only traverse the right side if it's not an assignment to a prototype
       // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
-            return false;
-          }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
+      if (isPrototypeMethodAssignmentLhs(lhs)) { // REPLACED: calls helper for robust check
         return false;
       }
     }
   }
 
   return true;
 }
+
+/**
+ * Checks if the given node (lhs of an assignment) represents a property
+ * access on a 'prototype' property (e.g., Foo.prototype.bar or Foo['prototype'].bar).
+ * This helper should be a private static method within the same class.
+ */
+private static boolean isPrototypeMethodAssignmentLhs(Node lhs) {
+    Node current = lhs;
+    // Traverse up the property access chain (e.g., for 'a.prototype.b.c', it checks 'c', then 'b', then 'prototype')
+    while (current != null && (current.isGetProp() || current.isGetElem())) {
+        Node propertyNode = current.getLastChild(); // The property name/key node
+
+        if (current.isGetProp()) {
+            // For GETPROP, the property node is a NAME (e.g., 'prototype' in 'Foo.prototype')
+            if (propertyNode.isName() && "prototype".equals(propertyNode.getString())) {
+                return true; // Found a '.prototype' in the chain
+            }
+        } else if (current.isGetElem()) {
+            // For GETELEM, the property node can be any expression, but we only care
+            // if it's a string literal 'prototype' (e.g., 'Foo['prototype']')
+            if (propertyNode.isStringLit() && "prototype".equals(propertyNode.getString())) {
+                return true; // Found a "['prototype']" in the chain
+            }
+        }
+        current = current.getFirstChild(); // Move to the object on which the current property was accessed
+    }
+    return false; // No 'prototype' property found in the chain
+}
\ No newline at end of file
