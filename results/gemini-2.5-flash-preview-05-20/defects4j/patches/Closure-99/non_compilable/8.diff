diff --git a/tmp/d4705673-2755-4347-a1f7-36ebae5d49f6_buggy.java b/tmp/1546a877-8ca5-41aa-9da3-9d82920390e7_fixed.java
index 86553f4..87791f3 100644
--- a/tmp/d4705673-2755-4347-a1f7-36ebae5d49f6_buggy.java
+++ b/tmp/1546a877-8ca5-41aa-9da3-9d82920390e7_fixed.java
@@ -1,57 +1,100 @@
   /**
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
     if (n.getType() == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
+      // or @override or @interface annotation.
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
            jsDoc.hasThisType() ||
-           jsDoc.isOverride())) {
+           jsDoc.isOverride() ||
+           jsDoc.isInterface())) { // Added check for @interface
         return false;
       }
 
       // Don't traverse functions unless they would normally
       // be able to have a @this annotation associated with them. e.g.,
       // var a = function() { }; // or
       // function a() {} // or
       // a.x = function() {};
       int pType = parent.getType();
       if (!(pType == Token.BLOCK ||
             pType == Token.SCRIPT ||
             pType == Token.NAME ||
             pType == Token.ASSIGN)) {
         return false;
       }
     }
 
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
       
       if (n == lhs) {
         // Always traverse the left side of the assignment. To handle
         // nested assignments properly (e.g., (a = this).property = c;),
         // assignLhsChild should not be overridden.
         if (assignLhsChild == null) {
           assignLhsChild = lhs;
         }
       } else {
         // Only traverse the right side if it's not an assignment to a prototype
         // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+        if (isPrototypePropertyAccess(lhs)) {
             return false;
         }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
-            return false;
       }
     }
+
+    return true;
+  }
+
+  /**
+   * Checks if the given node represents a property access that is part of
+   * a prototype chain (e.g., `Foo.prototype`, `Foo.prototype.bar`, `Foo['prototype'].baz`).
+   * This is a recursive helper method.
+   *
+   * @param n The node to check (typically the left-hand side of an assignment).
+   * @return true if the node is a property access on a prototype chain, false otherwise.
+   */
+  private boolean isPrototypePropertyAccess(Node n) {
+    if (n == null) {
+      return false;
     }
 
+    switch (n.getType()) {
+      case Token.GETPROP:
+        // Check if this GETPROP node itself is `something.prototype`
+        // The last child of a GETPROP is the property name (e.g., 'prototype' in 'obj.prototype').
+        if (n.getLastChild().isStringLit() && n.getLastChild().getString().equals("prototype")) {
           return true;
         }
+        // If not 'prototype' itself, check the object expression (first child) recursively.
+        // This covers cases like `obj.prototype.method` or `obj.sub.prototype.method`.
+        return isPrototypePropertyAccess(n.getFirstChild());
+
+      case Token.GETELEM:
+        // Check if this GETELEM node itself is `something['prototype']`
+        // The last child of a GETELEM is the property expression (e.g., the string literal 'prototype').
+        if (n.getLastChild().isStringLit() && n.getLastChild().getString().equals("prototype")) {
+          return true;
+        }
+        // If not 'prototype' itself, check the object expression (first child) recursively.
+        // This covers cases like `obj['prototype'].method` or `obj.sub['prototype'].method`.
+        return isPrototypePropertyAccess(n.getFirstChild());
+
+      case Token.NAME:
+        // Base case: If we reach a simple NAME node (e.g., 'a' in 'a.prototype.x')
+        // and haven't found 'prototype' yet, it means this chain does not involve 'prototype'.
+        return false;
+
+      default:
+        // For any other node type (e.g., CALL, NEW, etc.) that might appear as an LHS,
+        // it's not a direct property access leading to a prototype chain we care about.
+        return false;
+    }
+  }
\ No newline at end of file
