diff --git a/tmp/7d41ef00-d69a-4768-a475-fa0906eea3b4_buggy.java b/tmp/094b93f3-2c5f-43fa-86ea-5624f56bb757_fixed.java
index 86553f4..46d5c01 100644
--- a/tmp/7d41ef00-d69a-4768-a475-fa0906eea3b4_buggy.java
+++ b/tmp/094b93f3-2c5f-43fa-86ea-5624f56bb757_fixed.java
@@ -1,57 +1,80 @@
   /**
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
     if (n.getType() == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
       // or @override annotation.
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
            jsDoc.hasThisType() ||
            jsDoc.isOverride())) {
         return false;
       }
 
       // Don't traverse functions unless they would normally
       // be able to have a @this annotation associated with them. e.g.,
       // var a = function() { }; // or
       // function a() {} // or
       // a.x = function() {};
       int pType = parent.getType();
       if (!(pType == Token.BLOCK ||
             pType == Token.SCRIPT ||
             pType == Token.NAME ||
             pType == Token.ASSIGN)) {
         return false;
       }
     }
 
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
       
       if (n == lhs) {
         // Always traverse the left side of the assignment. To handle
         // nested assignments properly (e.g., (a = this).property = c;),
         // assignLhsChild should not be overridden.
         if (assignLhsChild == null) {
           assignLhsChild = lhs;
         }
-      } else {
+      } else { // n is rhs (the value being assigned)
         // Only traverse the right side if it's not an assignment to a prototype
         // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
-            return false;
+        Node assignTarget = lhs;
+
+        boolean isPrototypePropertyAssignment = false;
+
+        // Check for direct assignment to a prototype property (e.g., Foo.prototype = ...)
+        if (assignTarget.isGetProp() && assignTarget.getLastChild().getString().equals("prototype")) {
+          isPrototypePropertyAssignment = true;
         }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
+
+        // Check for assignments to properties on a prototype (e.g., Foo.prototype.bar = ..., Foo.prototype.b.c = ...)
+        // This covers qualified names containing ".prototype.".
+        if (!isPrototypePropertyAssignment && assignTarget.getQualifiedName() != null && assignTarget.getQualifiedName().contains(".prototype.")) {
+            isPrototypePropertyAssignment = true;
+        }
+
+        // Check for assignments to dynamic properties on a prototype (e.g., Foo.prototype['bar'] = ...)
+        // or on a sub-property of a prototype (e.g., Foo.prototype.b['c'] = ...).
+        // This handles Token.GETELEM nodes.
+        if (!isPrototypePropertyAssignment && assignTarget.isGetElem()) {
+            Node objectNode = assignTarget.getFirstChild(); // The object being indexed (e.g., Foo.prototype)
+            if (objectNode.isGetProp() && objectNode.getLastChild().getString().equals("prototype")) {
+                isPrototypePropertyAssignment = true;
+            } else if (objectNode.getQualifiedName() != null && objectNode.getQualifiedName().contains(".prototype.")) {
+                isPrototypePropertyAssignment = true;
+            }
+        }
+
+        if (isPrototypePropertyAssignment) {
           return false;
         }
       }
     }
 
     return true;
   }
\ No newline at end of file
