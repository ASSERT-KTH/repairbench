diff --git a/tmp/590bcd19-8888-4c89-b1d3-29b02e9fe662_buggy.java b/tmp/e3d64ed6-d79f-47d6-bb17-5d29be3a05f1_fixed.java
index 08e51e4..9956d60 100644
--- a/tmp/590bcd19-8888-4c89-b1d3-29b02e9fe662_buggy.java
+++ b/tmp/e3d64ed6-d79f-47d6-bb17-5d29be3a05f1_fixed.java
@@ -1,16 +1,48 @@
     /**
      * <p>Reduce the fraction to the smallest values for the numerator and
      * denominator, returning the result.</p>
      * 
      * <p>For example, if this fraction represents 2/4, then the result
      * will be 1/2.</p>
      *
      * @return a new reduced fraction instance, or this if no simplification possible
      */
     public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
-        if (gcd == 1) {
+        // Handle the special case where the numerator is zero.
+        // A fraction 0/X should always reduce to 0/1.
+        if (numerator == 0) {
+            // If it's already 0/1, return this instance for optimization.
+            if (denominator == 1) {
                 return this;
             }
+            // Otherwise, return the canonical 0/1 fraction (Fraction.ZERO constant).
+            // This explicitly handles 0/100 -> 0/1, fixing the observed test failure.
+            return Fraction.ZERO; // Assuming Fraction.ZERO is a constant for 0/1
+        }
+
+        // Calculate the greatest common divisor (GCD) of the absolute values of
+        // numerator and denominator. Using absolute values ensures that GCD works
+        // correctly regardless of the signs of the numerator or denominator.
+        int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));
+
+        // If the GCD is 1, the fraction is already numerically reduced (coprime).
+        // However, it might not be fully normalized (e.g., a negative denominator like 2/-3).
+        // Only return 'this' (the current instance) if:
+        // 1. The fraction is already numerically reduced (gcd == 1).
+        // 2. The denominator is positive, which is the standard normalization for fractions.
+        // This covers cases like -2/3 or 2/3 which are already fully normalized and reduced.
+        if (gcd == 1 && denominator > 0) {
+            return this;
+        }
+
+        // If the fraction is not fully reduced or normalized (e.g., 2/4, 2/-3, or 0/100 if the
+        // special case above wasn't matched due to a non-canonical 0/X representation):
+        // Create a new reduced fraction. The Fraction.getFraction factory method is responsible
+        // for handling further normalization steps:
+        // - It divides by the GCD (which we already calculated).
+        // - It ensures the denominator is positive (e.g., converting 2/-3 to -2/3).
+        // - It implicitly handles 0/X to 0/1 if its internal GCD logic for zero is correct.
+        // By passing the raw (potentially non-normalized sign) reduced values, we let
+        // getFraction perform the final correct normalization.
         return Fraction.getFraction(numerator / gcd, denominator / gcd);
     }
\ No newline at end of file
