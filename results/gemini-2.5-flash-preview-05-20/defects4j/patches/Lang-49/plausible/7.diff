diff --git a/tmp/95b1eecf-ad6a-4894-bd1c-270d4410e365_buggy.java b/tmp/66abd066-0407-40d1-9639-5b276f8bc415_fixed.java
index 08e51e4..7c78b48 100644
--- a/tmp/95b1eecf-ad6a-4894-bd1c-270d4410e365_buggy.java
+++ b/tmp/66abd066-0407-40d1-9639-5b276f8bc415_fixed.java
@@ -1,16 +1,57 @@
     /**
      * <p>Reduce the fraction to the smallest values for the numerator and
      * denominator, returning the result.</p>
      * 
      * <p>For example, if this fraction represents 2/4, then the result
      * will be 1/2.</p>
      *
      * @return a new reduced fraction instance, or this if no simplification possible
      */
     public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
-        if (gcd == 1) {
+        // Handle special case of zero numerator.
+        // A fraction 0/X (where X != 0) should always reduce to 0/1.
+        // If the current fraction is already 0/1, return this.
+        // Otherwise, return the canonical 0/1 fraction (Fraction.ZERO).
+        if (numerator == 0) {
+            if (denominator == 1) {
                 return this;
             }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+            // Assuming Fraction.ZERO is a static final instance representing 0/1.
+            return Fraction.ZERO;
+        }
+
+        // Prepare temporary numerator and denominator for reduction and normalization.
+        // The goal is to ensure the reduced fraction has a positive denominator
+        // and its sign is carried by the numerator.
+        int num = numerator;
+        int den = denominator;
+
+        // If the denominator is negative, flip the signs of both numerator and denominator
+        // to ensure the denominator of the reduced form is positive.
+        if (den < 0) {
+            num = -num;
+            den = -den;
+        }
+
+        // Calculate the greatest common divisor (GCD) of the absolute values of the
+        // current numerator and the (now positive) denominator.
+        // Math.abs(num) is used because 'num' might still be negative if the original
+        // fraction was like -2/3 or 2/-3 (which became -2/3). GCD operates on positive numbers.
+        int gcd = greatestCommonDivisor(Math.abs(num), den);
+
+        // Calculate the reduced numerator and denominator by dividing by their GCD.
+        int reducedNumerator = num / gcd;
+        int reducedDenominator = den / gcd;
+
+        // Check if the current fraction instance is already in its canonical reduced form.
+        // This means its numerator and denominator match the calculated reduced form,
+        // and its denominator is positive (which is handled by the 'den < 0' logic).
+        // If it is, return 'this' for efficiency as no new object is needed.
+        if (this.numerator == reducedNumerator && this.denominator == reducedDenominator) {
+            return this;
+        }
+
+        // Otherwise, create and return a new Fraction instance representing the reduced form.
+        // The getFraction method is assumed to correctly handle the resulting numerator and denominator.
+        return Fraction.getFraction(reducedNumerator, reducedDenominator);
     }
\ No newline at end of file
