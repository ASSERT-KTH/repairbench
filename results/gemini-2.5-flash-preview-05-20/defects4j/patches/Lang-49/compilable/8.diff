diff --git a/tmp/6c1c63df-15b8-408f-ace2-8e5bc8359c74_buggy.java b/tmp/bb9ddf5a-90b9-4c35-b13a-4e4da401ac15_fixed.java
index 08e51e4..e89d87c 100644
--- a/tmp/6c1c63df-15b8-408f-ace2-8e5bc8359c74_buggy.java
+++ b/tmp/bb9ddf5a-90b9-4c35-b13a-4e4da401ac15_fixed.java
@@ -1,16 +1,27 @@
     /**
      * <p>Reduce the fraction to the smallest values for the numerator and
      * denominator, returning the result.</p>
      * 
      * <p>For example, if this fraction represents 2/4, then the result
      * will be 1/2.</p>
      *
      * @return a new reduced fraction instance, or this if no simplification possible
      */
     public Fraction reduce() {
+        if (numerator == 0) {
+            // A fraction with a zero numerator is 0/X, which reduces to 0/1.
+            // If already 0/1, return this instance as no simplification is needed.
+            // Otherwise, return a new 0/1 fraction.
+            if (denominator == 1) {
+                return this;
+            }
+            return Fraction.getFraction(0, 1);
+        }
+        
+        // Handle non-zero numerators using GCD logic
         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
         if (gcd == 1) {
             return this;
         }
         return Fraction.getFraction(numerator / gcd, denominator / gcd);
     }
