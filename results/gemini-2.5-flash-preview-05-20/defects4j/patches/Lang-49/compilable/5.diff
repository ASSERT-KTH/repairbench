diff --git a/tmp/a2caed54-f434-49a0-866a-32e371648e81_buggy.java b/tmp/441268ee-77f9-476c-ad9d-752343f77f87_fixed.java
index 08e51e4..b4ef0a8 100644
--- a/tmp/a2caed54-f434-49a0-866a-32e371648e81_buggy.java
+++ b/tmp/441268ee-77f9-476c-ad9d-752343f77f87_fixed.java
@@ -1,16 +1,30 @@
     /**
      * <p>Reduce the fraction to the smallest values for the numerator and
      * denominator, returning the result.</p>
      * 
      * <p>For example, if this fraction represents 2/4, then the result
      * will be 1/2.</p>
      *
      * @return a new reduced fraction instance, or this if no simplification possible
      */
     public Fraction reduce() {
+        // A fraction with a zero numerator (0/X) should always reduce to 0/1.
+        // This handles cases like 0/100 simplifying to 0/1.
+        if (numerator == 0) {
+            return Fraction.getFraction(0, 1);
+        }
+
+        // Calculate the greatest common divisor of the absolute numerator and denominator.
+        // It's assumed that `greatestCommonDivisor` handles negative arguments or that
+        // the denominator is always positive due to the Fraction factory methods.
         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
+        
+        // If the GCD is 1, the fraction is already in its simplest form, so return 'this'.
         if (gcd == 1) {
             return this;
         }
+        
+        // Otherwise, reduce the fraction by dividing both numerator and denominator by their GCD.
+        // The `Fraction.getFraction` factory method will ensure correct sign normalization.
         return Fraction.getFraction(numerator / gcd, denominator / gcd);
     }
