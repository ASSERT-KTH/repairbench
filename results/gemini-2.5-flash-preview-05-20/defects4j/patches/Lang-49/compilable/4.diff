diff --git a/tmp/4146e719-19a5-4d95-8ca0-6c475889ae3c_buggy.java b/tmp/249b22a8-5458-4335-8d42-2ceeae8725f3_fixed.java
index 08e51e4..902f42a 100644
--- a/tmp/4146e719-19a5-4d95-8ca0-6c475889ae3c_buggy.java
+++ b/tmp/249b22a8-5458-4335-8d42-2ceeae8725f3_fixed.java
@@ -1,16 +1,25 @@
     /**
      * <p>Reduce the fraction to the smallest values for the numerator and
      * denominator, returning the result.</p>
      *
      * <p>For example, if this fraction represents 2/4, then the result
      * will be 1/2.</p>
      *
      * @return a new reduced fraction instance, or this if no simplification possible
      */
     public Fraction reduce() {
+        // Special case for zero numerator: 0/X always reduces to 0/1
+        if (numerator == 0) {
+            if (denominator == 1) {
+                return this; // Already 0/1, no further reduction needed
+            }
+            return Fraction.getFraction(0, 1); // Reduce 0/X to 0/1
+        }
+
+        // Original logic for non-zero numerator
         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
         if (gcd == 1) {
             return this;
         }
         return Fraction.getFraction(numerator / gcd, denominator / gcd);
     }
