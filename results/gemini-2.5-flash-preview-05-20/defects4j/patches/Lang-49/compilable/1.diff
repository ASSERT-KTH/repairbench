diff --git a/tmp/6c0ce91e-9e3a-4707-a007-eacbefdb930e_buggy.java b/tmp/a37be913-03ca-41b3-b175-6c9846b6f426_fixed.java
index 08e51e4..2496b59 100644
--- a/tmp/6c0ce91e-9e3a-4707-a007-eacbefdb930e_buggy.java
+++ b/tmp/a37be913-03ca-41b3-b175-6c9846b6f426_fixed.java
@@ -1,16 +1,33 @@
     /**
      * <p>Reduce the fraction to the smallest values for the numerator and
      * denominator, returning the result.</p>
      * 
      * <p>For example, if this fraction represents 2/4, then the result
      * will be 1/2.</p>
      *
      * @return a new reduced fraction instance, or this if no simplification possible
      */
     public Fraction reduce() {
+        // Handle the case where the numerator is zero.
+        // If the numerator is zero, the fraction is effectively zero,
+        // and its reduced form is 0/1. This covers cases like 0/100 -> 0/1.
+        // This also guards against potential incorrect behavior of greatestCommonDivisor(0, X)
+        // if it were to return 1 instead of X for X > 1.
+        if (numerator == 0) {
+            return Fraction.ZERO; // Assuming Fraction.ZERO is the constant for 0/1
+        }
+
+        // Calculate the greatest common divisor (GCD) of the absolute value of the numerator
+        // and the denominator. The denominator is expected to be positive by class invariants
+        // (established by constructors/factories like getFraction).
         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
+        
+        // If the GCD is 1, the fraction is already in its simplest form.
+        // In this case, return the current instance for efficiency and immutability.
         if (gcd == 1) {
             return this;
         }
+        
+        // Otherwise, reduce the fraction by dividing both numerator and denominator by their GCD.
         return Fraction.getFraction(numerator / gcd, denominator / gcd);
     }
\ No newline at end of file
