diff --git a/tmp/5812315a-eff2-4366-93d1-9502387601ed_buggy.java b/tmp/cd42bdf6-4278-459d-b05e-9b1684af363d_fixed.java
index 7c9c72e..ae2e155 100644
--- a/tmp/5812315a-eff2-4366-93d1-9502387601ed_buggy.java
+++ b/tmp/cd42bdf6-4278-459d-b05e-9b1684af363d_fixed.java
@@ -1,93 +1,133 @@
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
      * <p>If start and end are both {@code 0}, start and end are set
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
      * {@code 0} and {@code Integer.MAX_VALUE}.
      *
      * <p>If set is not {@code null}, characters between start and
      * end are chosen.</p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single 
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
      * @param start  the position in set of chars to start at
      * @param end  the position in set of chars to end before
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
      *  If {@code null}, then it will use the set of all chars.
      * @param random  a source of randomness.
      * @return the random string
      * @throws ArrayIndexOutOfBoundsException if there are not
      *  {@code (end - start) + 1} characters in the set array.
      * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                 char[] chars, Random random) {
         if (count == 0) {
             return "";
         } else if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
 
+        int actualStart = start;
+        int actualEnd = end;
+
+        if (chars == null) { // No specific character set, use ASCII/Unicode ranges
             if (start == 0 && end == 0) {
                 if (!letters && !numbers) {
-                    end = Integer.MAX_VALUE;
+                    actualEnd = Integer.MAX_VALUE; // All possible chars
+                    actualStart = 0;
                 } else {
-                    end = 'z' + 1;
-                    start = ' ';                
+                    actualEnd = 'z' + 1; // Printable ASCII ' ' to 'z'
+                    actualStart = ' ';
                 }
             }
+        } else { // Specific character set provided, start and end are indices into this array
+            if (chars.length == 0) {
+                throw new IllegalArgumentException("The chars array must not be empty.");
+            }
+            if (start == 0 && end == 0) {
+                actualStart = 0;
+                actualEnd = chars.length;
+            } else {
+                // Validate provided start/end are valid indices for 'chars' array.
+                if (start < 0 || end > chars.length || start > end) {
+                    throw new IllegalArgumentException("Invalid 'start' or 'end' parameters for the provided 'chars' array. "
+                        + "Start: " + start + ", End: " + end + ", Chars array length: " + chars.length);
+                }
+            }
+        }
+        
+        int gap = actualEnd - actualStart;
+
+        // Ensure gap is positive if count > 0, otherwise random.nextInt(0) will throw IAE.
+        if (gap <= 0 && count > 0) {
+             throw new IllegalArgumentException("There are no usable characters in the character range [" +
+                 Integer.toString(actualStart) + ", " + Integer.toString(actualEnd) + ")");
+        }
 
         char[] buffer = new char[count];
-        int gap = end - start;
 
-        while (count-- != 0) {
+        // The original loop iterates backwards, filling buffer from end to start.
+        // The `count` variable acts as the remaining characters to fill, and also implicitly
+        // as the index in the buffer (offset by 1 due to `count--`).
+        while (count != 0) {
             char ch;
             if (chars == null) {
-                ch = (char) (random.nextInt(gap) + start);
+                ch = (char) (random.nextInt(gap) + actualStart);
             } else {
-                ch = chars[random.nextInt(gap) + start];
+                ch = chars[random.nextInt(gap) + actualStart];
             }
+            
+            // Check character validity based on letters/numbers filters
             if (letters && Character.isLetter(ch)
                     || numbers && Character.isDigit(ch)
-                    || !letters && !numbers) {
-                if(ch >= 56320 && ch <= 57343) {
-                    if(count == 0) {
-                        count++;
+                    || (!letters && !numbers)) { // If no filters, any char is fine
+                
+                // Handle Unicode surrogate pairs
+                // High surrogates: U+D800 to U+DBFF (55296 to 56319)
+                // Low surrogates:  U+DC00 to U+DFFF (56320 to 57343)
+                
+                if (ch >= 56320 && ch <= 57343) { // Low surrogate
+                    if (count == 0) { // If it's the last character, discard it to avoid half-pair
+                        count++; // Re-increment count to retry this position
                     } else {
-                        // low surrogate, insert high surrogate after putting it in
-                        buffer[count] = ch;
-                        count--;
-                        buffer[count] = (char) (55296 + random.nextInt(128));
+                        // Place low surrogate at current position, then a random high surrogate before it
+                        buffer[--count] = ch; // Current char goes at `count-1`
+                        buffer[--count] = (char) (55296 + random.nextInt(128)); // High surrogate goes at `count-2`
                     }
-                } else if(ch >= 55296 && ch <= 56191) {
-                    if(count == 0) {
-                        count++;
+                } else if (ch >= 55296 && ch <= 56319) { // High surrogate (fixed upper bound)
+                    if (count == 0) { // If it's the last character, discard it
+                        count++; // Re-increment count to retry this position
                     } else {
-                        // high surrogate, insert low surrogate before putting it in
-                        buffer[count] = (char) (56320 + random.nextInt(128));
-                        count--;
-                        buffer[count] = ch;
+                        // Place a random low surrogate at current position, then high surrogate before it
+                        buffer[--count] = (char) (56320 + random.nextInt(128)); // Low surrogate at `count-1`
+                        buffer[--count] = ch; // High surrogate at `count-2`
                     }
-                } else if(ch >= 56192 && ch <= 56319) {
-                    // private high surrogate, no effing clue, so skip it
-                    count++;
+                } else if (ch >= 56192 && ch <= 56319) { // Private Use Area High Surrogates (U+DB80 to U+DBFF), skip them.
+                    // This block captures the end of the high surrogate range.
+                    // It should probably be combined with the previous one, but given the original code's structure,
+                    // we'll maintain it and assume 'private high surrogate' means it's not handled as a pair.
+                    // The bug was in the previous high surrogate range, this one's range is correct (DB80 to DBFF),
+                    // but it's part of the broader high surrogate range.
+                    // For now, mirroring original behavior of skipping these specific chars.
+                    count++; // Re-increment count to retry this position
                 } else {
-                    buffer[count] = ch;
+                    buffer[--count] = ch; // Place char at current position
                 }
             } else {
-                count++;
+                count++; // Character didn't pass filter, re-increment count to retry this position
             }
         }
         return new String(buffer);
     }
