diff --git a/tmp/97fd8b44-5af8-4d7d-8ffe-029111019a19_buggy.java b/tmp/f14f4318-a08b-4842-a189-ddf8bc44ad13_fixed.java
index 7c9c72e..5bbcfe3 100644
--- a/tmp/97fd8b44-5af8-4d7d-8ffe-029111019a19_buggy.java
+++ b/tmp/f14f4318-a08b-4842-a189-ddf8bc44ad13_fixed.java
@@ -1,93 +1,148 @@
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
      * <p>If start and end are both {@code 0}, start and end are set
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
      * {@code 0} and {@code Integer.MAX_VALUE}.
      *
      * <p>If set is not {@code null}, characters between start and
      * end are chosen.</p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single 
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
      * @param start  the position in set of chars to start at
      * @param end  the position in set of chars to end before
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
      *  If {@code null}, then it will use the set of all chars.
      * @param random  a source of randomness.
      * @return the random string
      * @throws ArrayIndexOutOfBoundsException if there are not
-     *  {@code (end - start) + 1} characters in the set array.
+     *  {@code (end - start) + 1} characters in the set array. (Note: Changed to IllegalArgumentException for robustness)
      * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
-                                char[] chars, Random random) {
+                                char[] chars, java.util.Random random) { // Fully qualify Random to avoid import issues
+        // --- Argument validation and early exit ---
         if (count == 0) {
             return "";
         } else if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
 
+        if (chars != null && chars.length == 0) {
+            throw new IllegalArgumentException("The provided chars array must not be empty.");
+        }
+
+        // --- Determine the effective range (selectStart, selectEnd) ---
+        int selectStart = start;
+        int selectEnd = end;
+
+        if (chars == null) {
+            // Case 1: Selecting from full Unicode/ASCII character set
             if (start == 0 && end == 0) {
                 if (!letters && !numbers) {
-                    end = Integer.MAX_VALUE;
+                    selectEnd = Integer.MAX_VALUE; // All Unicode characters
                 } else {
-                    end = 'z' + 1;
-                    start = ' ';                
+                    selectEnd = 'z' + 1; // ASCII printable characters, ' ' to 'z' (inclusive)
+                    selectStart = ' ';
                 }
             }
+            // If start and end are not 0/0, they are used directly as character values (e.g., start='a', end='e').
+            // The range is [selectStart, selectEnd).
+        } else {
+            // Case 2: Selecting from a specific char array
+            if (start == 0 && end == 0) {
+                selectStart = 0; // Use entire array
+                selectEnd = chars.length;
+            } else {
+                // User provided specific indices. Validate them.
+                // start must be >= 0
+                // end must be <= chars.length
+                // (start < end will be caught by the gap check below)
+                if (start < 0 || end > chars.length) {
+                    throw new IllegalArgumentException("Array indices 'start' (" + start + ") and 'end' (" + end +
+                                                       ") are out of bounds for the provided chars array (length " + chars.length + ").");
+                }
+                // selectStart and selectEnd are already set to start and end
+            }
+        }
+
+        // --- Calculate gap and validate range validity ---
+        int gap = selectEnd - selectStart;
+        if (gap <= 0) {
+            String message = (chars == null) ?
+                "The character range defined by 'start' (" + start + ") and 'end' (" + end + ") is invalid (start must be less than end)." :
+                "The array index range defined by 'start' (" + start + ") and 'end' (" + end +
+                ") is invalid for the provided chars array (length " + (chars == null ? "N/A" : chars.length) + ") (start must be less than end).";
+            throw new IllegalArgumentException(message);
+        }
 
+        // --- Generate random string ---
         char[] buffer = new char[count];
-        int gap = end - start;
+        int currentBufferIndex = count; // Start filling from the end of the buffer for correct surrogate pairing
 
-        while (count-- != 0) {
+        while (currentBufferIndex-- != 0) { // Loop `count` times, decrementing currentBufferIndex from count-1 down to 0
             char ch;
+            int selectedValue = random.nextInt(gap) + selectStart;
+
             if (chars == null) {
-                ch = (char) (random.nextInt(gap) + start);
+                ch = (char) selectedValue; // selectedValue is a character code
             } else {
-                ch = chars[random.nextInt(gap) + start];
+                ch = chars[selectedValue]; // selectedValue is an array index
             }
+
+            // --- Character filtering ---
+            boolean accepted = false;
             if (letters && Character.isLetter(ch)
                     || numbers && Character.isDigit(ch)
                     || !letters && !numbers) {
-                if(ch >= 56320 && ch <= 57343) {
-                    if(count == 0) {
-                        count++;
-                    } else {
-                        // low surrogate, insert high surrogate after putting it in
-                        buffer[count] = ch;
-                        count--;
-                        buffer[count] = (char) (55296 + random.nextInt(128));
+                accepted = true;
             }
-                } else if(ch >= 55296 && ch <= 56191) {
-                    if(count == 0) {
-                        count++;
+
+            // --- Surrogate pair handling (fills buffer from right to left) ---
+            if (accepted) {
+                // Check for low surrogate
+                if (ch >= 0xDC00 && ch <= 0xDFFF) { // U+DC00 to U+DFFF (Low surrogate range)
+                    if (currentBufferIndex == 0) { // No space for high surrogate before it
+                        currentBufferIndex++; // Re-increment to retry this position
                     } else {
-                        // high surrogate, insert low surrogate before putting it in
-                        buffer[count] = (char) (56320 + random.nextInt(128));
-                        count--;
-                        buffer[count] = ch;
+                        buffer[currentBufferIndex] = ch; // Place low surrogate
+                        currentBufferIndex--; // Move to previous position
+                        buffer[currentBufferIndex] = (char) (0xD800 + random.nextInt(0x80)); // Place random high surrogate (0xD800 to 0xD87F)
+                    }
+                }
+                // Check for private use high surrogate - skip this character
+                else if (ch >= 0xDB80 && ch <= 0xDBFF) { // U+DB80 to U+DBFF (Private Use High Surrogate)
+                    currentBufferIndex++; // Re-increment to retry this position
                 }
-                } else if(ch >= 56192 && ch <= 56319) {
-                    // private high surrogate, no effing clue, so skip it
-                    count++;
+                // Check for general high surrogate
+                else if (ch >= 0xD800 && ch <= 0xDB7F) { // U+D800 to U+DB7F (General High Surrogate, excluding private use)
+                    if (currentBufferIndex == 0) { // No space for low surrogate after it
+                        currentBufferIndex++; // Re-increment to retry this position
                     } else {
-                    buffer[count] = ch;
+                        buffer[currentBufferIndex] = (char) (0xDC00 + random.nextInt(0x80)); // Place random low surrogate (0xDC00 to 0xDC7F)
+                        currentBufferIndex--; // Move to previous position
+                        buffer[currentBufferIndex] = ch; // Place high surrogate
+                    }
+                }
+                // All other characters
+                else {
+                    buffer[currentBufferIndex] = ch; // Regular character
                 }
             } else {
-                count++;
+                currentBufferIndex++; // Character not accepted by filters, re-increment to retry this position
             }
         }
         return new String(buffer);
     }
\ No newline at end of file
