diff --git a/tmp/e6c1b3ab-6180-4166-a233-cb1533beec5f_buggy.java b/tmp/5aebcc54-e6b2-435a-9801-a76f73c2fd93_fixed.java
index 7c9c72e..2858cbb 100644
--- a/tmp/e6c1b3ab-6180-4166-a233-cb1533beec5f_buggy.java
+++ b/tmp/5aebcc54-e6b2-435a-9801-a76f73c2fd93_fixed.java
@@ -1,93 +1,116 @@
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
      * <p>If start and end are both {@code 0}, start and end are set
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
      * {@code 0} and {@code Integer.MAX_VALUE}.
      *
      * <p>If set is not {@code null}, characters between start and
      * end are chosen.</p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
      * @param start  the position in set of chars to start at
      * @param end  the position in set of chars to end before
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
      *  If {@code null}, then it will use the set of all chars.
      * @param random  a source of randomness.
      * @return the random string
      * @throws ArrayIndexOutOfBoundsException if there are not
      *  {@code (end - start) + 1} characters in the set array.
      * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                 char[] chars, Random random) {
         if (count == 0) {
             return "";
         } else if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
 
-        if (start == 0 && end == 0) {
+        // Determine the actual range for character selection or array indexing
+        // based on whether a character array 'chars' is provided.
+        int actualStart = start;
+        int actualEnd = end;
+
+        if (chars == null) {
+            // No char array provided, use the character value range [start, end)
+            // If start and end are both 0, default to ASCII printable or all Unicode
+            if (actualStart == 0 && actualEnd == 0) {
                 if (!letters && !numbers) {
-                    end = Integer.MAX_VALUE;
+                    actualEnd = Integer.MAX_VALUE; // All Unicode characters
                 } else {
-                    end = 'z' + 1;
-                    start = ' ';                
+                    actualEnd = 'z' + 1; // ASCII letters and numbers (inclusive 'z')
+                    actualStart = ' ';   // ASCII space
                 }
             }
+        } else {
+            // Char array provided, use start and end as indices within 'chars' array
+            if (chars.length == 0) {
+                throw new IllegalArgumentException("The provided chars array must not be empty.");
+            }
+            if (actualStart == 0 && actualEnd == 0) {
+                actualEnd = chars.length; // Use the entire array
+            }
+            // Validate start and end are within array bounds
+            if (actualStart < 0 || actualStart >= chars.length) {
+                throw new IllegalArgumentException("Parameter 'start' (" + start + ") must be an index in the 'chars' array (0-" + (chars.length - 1) + ")");
+            }
+            if (actualEnd < 0 || actualEnd > chars.length) { // end can be chars.length (exclusive)
+                throw new IllegalArgumentException("Parameter 'end' (" + end + ") must be an index in the 'chars' array (0-" + chars.length + ")");
+            }
+        }
+        
+        int gap = actualEnd - actualStart; // Recalculate gap based on potentially new start/end
+        if (gap <= 0) { // If the range is empty or invalid
+            throw new IllegalArgumentException("Parameter 'end' (" + end + ") must be greater than parameter 'start' (" + start + ")");
+        }
 
         char[] buffer = new char[count];
-        int gap = end - start;
-
-        while (count-- != 0) {
+        int i = 0; // Current index in the buffer
+        while (i < count) {
             char ch;
             if (chars == null) {
-                ch = (char) (random.nextInt(gap) + start);
+                ch = (char) (random.nextInt(gap) + actualStart); // Select character by value
             } else {
-                ch = chars[random.nextInt(gap) + start];
+                ch = chars[random.nextInt(gap) + actualStart]; // Select character by index from array
             }
+
+            // Character filtering (letters/numbers)
             if (letters && Character.isLetter(ch)
                     || numbers && Character.isDigit(ch)
-                    || !letters && !numbers) {
-                if(ch >= 56320 && ch <= 57343) {
-                    if(count == 0) {
-                        count++;
+                    || (!letters && !numbers)) { // No filtering, all characters are allowed
+                
+                // Surrogate pair handling (High: D800-DBFF, Low: DC00-DFFF)
+                if (ch >= 0xD800 && ch <= 0xDB7F) { // Regular High surrogate (U+D800 to U+DB7F)
+                    if (i == count - 1) { // Not enough space for a low surrogate
+                        continue; // Skip this character, try again for this slot
                     } else {
-                        // low surrogate, insert high surrogate after putting it in
-                        buffer[count] = ch;
-                        count--;
-                        buffer[count] = (char) (55296 + random.nextInt(128));
+                        buffer[i++] = ch; // Add high surrogate
+                        buffer[i++] = (char) (0xDC00 + random.nextInt(0x0400)); // Add random low surrogate (U+DC00 to U+DFFF)
                     }
-                } else if(ch >= 55296 && ch <= 56191) {
-                    if(count == 0) {
-                        count++;
-                    } else {
-                        // high surrogate, insert low surrogate before putting it in
-                        buffer[count] = (char) (56320 + random.nextInt(128));
-                        count--;
-                        buffer[count] = ch;
-                    }
-                } else if(ch >= 56192 && ch <= 56319) {
-                    // private high surrogate, no effing clue, so skip it
-                    count++;
-                } else {
-                    buffer[count] = ch;
+                } else if (ch >= 0xDB80 && ch <= 0xDBFF) { // Private use High surrogate (U+DB80 to U+DBFF)
+                    continue; // Skip private use high surrogates
+                } else if (ch >= 0xDC00 && ch <= 0xDFFF) { // Low surrogate (U+DC00 to U+DFFF)
+                    continue; // Skip, a low surrogate cannot be generated alone or initiated randomly here.
+                } else { // Regular character
+                    buffer[i++] = ch;
                 }
             } else {
-                count++;
+                // Character does not meet letters/numbers criteria, try again for this slot
+                continue;
             }
         }
         return new String(buffer);
     }
\ No newline at end of file
