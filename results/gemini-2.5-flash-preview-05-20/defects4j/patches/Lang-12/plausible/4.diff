diff --git a/tmp/418c02e9-3343-40aa-8fe7-13396db81ef0_buggy.java b/tmp/b1f0288a-3835-49b9-88eb-c8c895b1f60e_fixed.java
index 7c9c72e..1fe17d4 100644
--- a/tmp/418c02e9-3343-40aa-8fe7-13396db81ef0_buggy.java
+++ b/tmp/b1f0288a-3835-49b9-88eb-c8c895b1f60e_fixed.java
@@ -1,93 +1,126 @@
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
      * <p>If start and end are both {@code 0}, start and end are set
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
      * {@code 0} and {@code Integer.MAX_VALUE}.
      *
      * <p>If set is not {@code null}, characters between start and
      * end are chosen.</p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single 
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
      * @param start  the position in set of chars to start at
      * @param end  the position in set of chars to end before
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
      *  If {@code null}, then it will use the set of all chars.
      * @param random  a source of randomness.
      * @return the random string
      * @throws ArrayIndexOutOfBoundsException if there are not
      *  {@code (end - start) + 1} characters in the set array.
      * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                 char[] chars, Random random) {
         if (count == 0) {
             return "";
         } else if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
 
+        // If a character array is provided, it must not be empty.
+        if (chars != null && chars.length == 0) {
+            throw new IllegalArgumentException("The chars array must not be empty.");
+        }
+
+        // Handle default start and end values (0, 0)
         if (start == 0 && end == 0) {
+            if (chars != null) {
+                // If a character array is provided, and start/end are 0,
+                // it implies the whole array should be used.
+                // So, start remains 0, and end becomes the length of the array.
+                end = chars.length;
+            } else {
+                // If no character array is provided, and start/end are 0,
+                // it means to use default ASCII printable characters or all characters.
                 if (!letters && !numbers) {
-                    end = Integer.MAX_VALUE;
+                    end = Integer.MAX_VALUE; // Use all possible Unicode characters
                 } else {
-                    end = 'z' + 1;
-                    start = ' ';                
+                    end = 'z' + 1; // ASCII printable range, exclusive end (' ' to 'z')
+                    start = ' ';   // ASCII printable range, inclusive start
+                }
             }
         }
 
         char[] buffer = new char[count];
         int gap = end - start;
 
+        // If gap <= 0 (e.g., start >= end), Random.nextInt(gap) will throw an IllegalArgumentException.
+        // The existing logic implicitly relies on this. The primary bug was an AIOOBE
+        // when `chars` was provided and `gap` was too large because `end` was `Integer.MAX_VALUE`.
+
         while (count-- != 0) {
             char ch;
             if (chars == null) {
+                // When 'chars' is null, 'start' and 'end' define actual character values.
                 ch = (char) (random.nextInt(gap) + start);
             } else {
+                // When 'chars' is not null, 'start' and 'end' define indices into the 'chars' array.
+                // The fix ensures `gap` is valid (e.g., `chars.length` when start=0, end=0).
                 ch = chars[random.nextInt(gap) + start];
             }
+
+            // Apply character filtering and handle surrogate pairs
             if (letters && Character.isLetter(ch)
                     || numbers && Character.isDigit(ch)
-                    || !letters && !numbers) {
-                if(ch >= 56320 && ch <= 57343) {
+                    || !letters && !numbers) { // If both letters and numbers are false, no filtering is applied.
+                if(ch >= 56320 && ch <= 57343) { // Low surrogate (second part of a pair, U+DC00 to U+DFFF)
                     if(count == 0) {
+                        // Cannot place a low surrogate at buffer[0] if it needs a high surrogate before it.
+                        // Revert count, effectively skipping this char and re-trying to fill the position.
                         count++;
                     } else {
-                        // low surrogate, insert high surrogate after putting it in
+                        // Place low surrogate at current position (buffer[count])
                         buffer[count] = ch;
-                        count--;
-                        buffer[count] = (char) (55296 + random.nextInt(128));
+                        count--; // Move to previous index for the high surrogate
+                        // Generate and place a random high surrogate before the low surrogate
+                        buffer[count] = (char) (55296 + random.nextInt(128)); // U+D800 to U+DB7F (valid high surrogate range)
                     }
-                } else if(ch >= 55296 && ch <= 56191) {
+                } else if(ch >= 55296 && ch <= 56191) { // High surrogate (first part of a pair, U+D800 to U+DBFF)
                     if(count == 0) {
+                        // Cannot place a high surrogate at buffer[0] if it needs a low surrogate after it and we are building backwards.
+                        // Revert count, effectively skipping this char and re-trying to fill the position.
                         count++;
                     } else {
-                        // high surrogate, insert low surrogate before putting it in
-                        buffer[count] = (char) (56320 + random.nextInt(128));
-                        count--;
+                        // Place a random low surrogate at current position (buffer[count])
+                        buffer[count] = (char) (56320 + random.nextInt(128)); // U+DC00 to U+DFFF (valid low surrogate range)
+                        count--; // Move to previous index for the high surrogate
+                        // Place the high surrogate before the low surrogate
                         buffer[count] = ch;
                     }
-                } else if(ch >= 56192 && ch <= 56319) {
-                    // private high surrogate, no effing clue, so skip it
+                } else if(ch >= 56192 && ch <= 56319) { // Private use high surrogate (U+DB80 to U+DBFF)
+                    // Private high surrogates are skipped.
+                    // Revert count, effectively skipping this char and re-trying to fill the position.
                     count++;
                 } else {
-                    buffer[count] = ch;
+                    buffer[count] = ch; // Regular character
                 }
             } else {
+                // Character does not match the filtering criteria (letters/numbers).
+                // Revert count, effectively skipping this char and re-trying to fill the position.
                 count++;
             }
         }
         return new String(buffer);
     }
\ No newline at end of file
