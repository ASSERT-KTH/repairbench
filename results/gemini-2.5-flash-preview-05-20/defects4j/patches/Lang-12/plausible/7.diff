diff --git a/tmp/81be8ef3-e80c-46d1-b2ae-3395b69dc2d2_buggy.java b/tmp/7c234ccc-1f1a-4ded-987f-106f5da9bd9c_fixed.java
index 7c9c72e..6b955d7 100644
--- a/tmp/81be8ef3-e80c-46d1-b2ae-3395b69dc2d2_buggy.java
+++ b/tmp/7c234ccc-1f1a-4ded-987f-106f5da9bd9c_fixed.java
@@ -1,93 +1,133 @@
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
      * <p>If start and end are both {@code 0}, start and end are set
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
      * {@code 0} and {@code Integer.MAX_VALUE}.
      *
      * <p>If set is not {@code null}, characters between start and
      * end are chosen.</p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single 
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
      * @param start  the position in set of chars to start at
      * @param end  the position in set of chars to end before
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
      *  If {@code null}, then it will use the set of all chars.
      * @param random  a source of randomness.
      * @return the random string
      * @throws ArrayIndexOutOfBoundsException if there are not
      *  {@code (end - start) + 1} characters in the set array.
      * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                 char[] chars, Random random) {
         if (count == 0) {
             return "";
         } else if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
 
+        // Add check for empty chars array early, as specified in Javadoc.
+        if (chars != null && chars.length == 0) {
+            throw new IllegalArgumentException("The provided chars array must not be empty.");
+        }
+
+        // Determine start and end based on whether chars is null or not, and initial start/end values.
+        // The interpretation of 'start' and 'end' differs depending on 'chars' being null or not.
+        if (chars == null) {
+            // When 'chars' is null, 'start' and 'end' define a range of character *values*.
             if (start == 0 && end == 0) {
                 if (!letters && !numbers) {
-                    end = Integer.MAX_VALUE;
+                    end = Integer.MAX_VALUE; // Use all possible unicode characters
                 } else {
-                    end = 'z' + 1;
+                    // Use ASCII printable characters from ' ' to 'z' inclusive.
+                    end = 'z' + 1; // Exclusive end
                     start = ' ';                
                 }
             }
+            // No explicit validation for start/end character values. If 'end <= start',
+            // 'gap' will be non-positive, leading to IAE from random.nextInt(), which is desired.
+        } else { // chars is not null
+            // When 'chars' is not null, 'start' and 'end' define a range of *indices* within the 'chars' array.
+            if (start == 0 && end == 0) {
+                // If start and end are 0, it means use the entire provided 'chars' array.
+                start = 0;
+                end = chars.length;
+            }
+            // Validate the 'start' and 'end' indices against the 'chars' array boundaries.
+            // 'start' can be 0 up to chars.length (if start == end, for an empty range).
+            // 'end' can be 0 up to chars.length.
+            if (start < 0 || start > chars.length) {
+                throw new IllegalArgumentException("The 'start' parameter (" + start + ") must be in the range [0, chars.length] when 'chars' is not null.");
+            }
+            if (end < 0 || end > chars.length) {
+                throw new IllegalArgumentException("The 'end' parameter (" + end + ") must be in the range [0, chars.length] when 'chars' is not null.");
+            }
+            if (start > end) {
+                 throw new IllegalArgumentException("The 'start' parameter (" + start + ") must be less than or equal to the 'end' parameter (" + end + ").");
+            }
+            // If 'start == end', 'gap' will be 0, leading to IAE from random.nextInt(), which is desired for an empty range.
+        }
 
         char[] buffer = new char[count];
         int gap = end - start;
 
+        // If count > 0 and gap <= 0 (e.g., empty range), random.nextInt(gap) will throw IllegalArgumentException,
+        // which is the correct behavior indicating no characters can be chosen from the specified range.
+
         while (count-- != 0) {
             char ch;
             if (chars == null) {
+                // Pick a character value within the defined range [start, end-1]
                 ch = (char) (random.nextInt(gap) + start);
             } else {
+                // Pick an index within the defined range [start, end-1] and get the character from the array.
                 ch = chars[random.nextInt(gap) + start];
             }
+
+            // Original surrogate pair and character filtering logic
             if (letters && Character.isLetter(ch)
                     || numbers && Character.isDigit(ch)
                     || !letters && !numbers) {
                 if(ch >= 56320 && ch <= 57343) {
                     if(count == 0) {
                         count++;
                     } else {
                         // low surrogate, insert high surrogate after putting it in
                         buffer[count] = ch;
                         count--;
                         buffer[count] = (char) (55296 + random.nextInt(128));
                     }
                 } else if(ch >= 55296 && ch <= 56191) {
                     if(count == 0) {
                         count++;
                     } else {
                         // high surrogate, insert low surrogate before putting it in
                         buffer[count] = (char) (56320 + random.nextInt(128));
                         count--;
                         buffer[count] = ch;
                     }
                 } else if(ch >= 56192 && ch <= 56319) {
                     // private high surrogate, no effing clue, so skip it
                     count++;
                 } else {
                     buffer[count] = ch;
                 }
             } else {
                 count++;
             }
         }
         return new String(buffer);
     }
\ No newline at end of file
