diff --git a/tmp/386bf470-c5d3-45f0-9795-aace613368a8_buggy.java b/tmp/0e8bf402-2829-49d7-9221-091d03fce47a_fixed.java
index 7c9c72e..c577728 100644
--- a/tmp/386bf470-c5d3-45f0-9795-aace613368a8_buggy.java
+++ b/tmp/0e8bf402-2829-49d7-9221-091d03fce47a_fixed.java
@@ -1,93 +1,127 @@
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
      * <p>If start and end are both {@code 0}, start and end are set
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
      * {@code 0} and {@code Integer.MAX_VALUE}.
      *
      * <p>If set is not {@code null}, characters between start and
      * end are chosen.</p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single 
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
      * @param start  the position in set of chars to start at
      * @param end  the position in set of chars to end before
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
      *  If {@code null}, then it will use the set of all chars.
      * @param random  a source of randomness.
      * @return the random string
      * @throws ArrayIndexOutOfBoundsException if there are not
      *  {@code (end - start) + 1} characters in the set array.
      * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                 char[] chars, Random random) {
         if (count == 0) {
             return "";
         } else if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
 
-        if (start == 0 && end == 0) {
+        int effectiveStart = start;
+        int effectiveEnd = end;
+
+        if (chars == null) {
+            // If no character set is provided, 'start' and 'end' refer to character values.
+            if (effectiveStart == 0 && effectiveEnd == 0) {
                 if (!letters && !numbers) {
-                    end = Integer.MAX_VALUE;
+                    effectiveEnd = Integer.MAX_VALUE; // All possible character values
                 } else {
-                    end = 'z' + 1;
-                    start = ' ';                
+                    effectiveStart = ' '; // ASCII printable from space
+                    effectiveEnd = 'z' + 1; // to 'z' (exclusive)
                 }
             }
+        } else {
+            // If a character array is provided, 'start' and 'end' refer to indices within that array.
+            // The special (0,0) handling for character values does NOT apply here.
+            if (chars.length == 0) {
+                throw new IllegalArgumentException("The provided chars array must not be empty.");
+            }
+            // For a non-null chars array, (0,0) start/end often means "use the entire array".
+            if (effectiveStart == 0 && effectiveEnd == 0) {
+                effectiveEnd = chars.length; // Use the entire array range [0, chars.length-1]
+            } else {
+                // Validate provided indices
+                if (effectiveStart < 0 || effectiveStart >= chars.length) {
+                    throw new IllegalArgumentException("Parameter 'start' (" + effectiveStart + ") is out of bounds for 'chars' array of length " + chars.length);
+                }
+                if (effectiveEnd < 0 || effectiveEnd > chars.length) {
+                    throw new IllegalArgumentException("Parameter 'end' (" + effectiveEnd + ") is out of bounds for 'chars' array of length " + chars.length);
+                }
+                if (effectiveStart >= effectiveEnd) {
+                    throw new IllegalArgumentException("Parameter 'start' (" + effectiveStart + ") must be less than 'end' (" + effectiveEnd + ").");
+                }
+            }
+        }
+        
+        int gap = effectiveEnd - effectiveStart;
+
+        if (gap <= 0) { // This check covers cases where (effectiveStart >= effectiveEnd)
+            throw new IllegalArgumentException("The range ('end' - 'start') must be positive.");
+        }
 
         char[] buffer = new char[count];
-        int gap = end - start;
 
+        // The loop counter `count` is decremented inside the loop and also acts as the current buffer index.
+        // It iterates from `initialCount - 1` down to `0`, filling the buffer from right to left.
         while (count-- != 0) { 
             char ch;
             if (chars == null) {
-                ch = (char) (random.nextInt(gap) + start);
+                ch = (char) (random.nextInt(gap) + effectiveStart);
             } else {
-                ch = chars[random.nextInt(gap) + start];
+                ch = chars[random.nextInt(gap) + effectiveStart];
             }
             if (letters && Character.isLetter(ch)
                     || numbers && Character.isDigit(ch)
                     || !letters && !numbers) {
-                if(ch >= 56320 && ch <= 57343) {
-                    if(count == 0) {
-                        count++;
+                if(ch >= 56320 && ch <= 57343) { // low surrogate
+                    if(count == 0) { // last character position, cannot add high surrogate
+                        count++; // Re-increment count to retry this position
                     } else {
                         // low surrogate, insert high surrogate after putting it in
-                        buffer[count] = ch;
-                        count--;
-                        buffer[count] = (char) (55296 + random.nextInt(128));
+                        buffer[count] = ch; // Store low surrogate
+                        count--; // Decrement count for the high surrogate
+                        buffer[count] = (char) (55296 + random.nextInt(128)); // Store high surrogate
                     }
-                } else if(ch >= 55296 && ch <= 56191) {
-                    if(count == 0) {
-                        count++;
+                } else if(ch >= 55296 && ch <= 56191) { // high surrogate
+                    if(count == 0) { // last character position, cannot add low surrogate
+                        count++; // Re-increment count to retry this position
                     } else {
                         // high surrogate, insert low surrogate before putting it in
-                        buffer[count] = (char) (56320 + random.nextInt(128));
-                        count--;
-                        buffer[count] = ch;
+                        buffer[count] = (char) (56320 + random.nextInt(128)); // Store low surrogate
+                        count--; // Decrement count for the high surrogate
+                        buffer[count] = ch; // Store high surrogate
                     }
-                } else if(ch >= 56192 && ch <= 56319) {
+                } else if(ch >= 56192 && ch <= 56319) { // private high surrogate
                     // private high surrogate, no effing clue, so skip it
-                    count++;
+                    count++; // Re-increment count to retry this position
                 } else {
                     buffer[count] = ch;
                 }
             } else {
-                count++;
+                count++; // Re-increment count to retry this position (character did not match criteria)
             }
         }
         return new String(buffer);
     }
