diff --git a/tmp/3fd42565-7835-4c03-bec3-185753ade3dd_buggy.java b/tmp/8262e2a4-cc6f-41c2-b4e4-366627f97b5f_fixed.java
index 7c9c72e..893adf8 100644
--- a/tmp/3fd42565-7835-4c03-bec3-185753ade3dd_buggy.java
+++ b/tmp/8262e2a4-cc6f-41c2-b4e4-366627f97b5f_fixed.java
@@ -1,93 +1,123 @@
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
      * <p>If start and end are both {@code 0}, start and end are set
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
      * {@code 0} and {@code Integer.MAX_VALUE}.
      *
      * <p>If set is not {@code null}, characters between start and
      * end are chosen.</p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single 
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
      * @param start  the position in set of chars to start at
      * @param end  the position in set of chars to end before
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
      *  If {@code null}, then it will use the set of all chars.
      * @param random  a source of randomness.
      * @return the random string
      * @throws ArrayIndexOutOfBoundsException if there are not
      *  {@code (end - start) + 1} characters in the set array.
      * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                 char[] chars, Random random) {
         if (count == 0) {
             return "";
         } else if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
 
+        // --- FIX START ---
+        // The original logic for start == 0 && end == 0 applies default ranges when chars is null.
+        // If chars is not null, start and end define a range within that specific array.
+        if (chars != null) {
+            if (chars.length == 0) {
+                throw new IllegalArgumentException("The chars array must not be empty.");
+            }
+            if (start == 0 && end == 0) {
+                // If chars is provided and start/end are 0, use the entire chars array.
+                end = chars.length;
+            } else {
+                // Validate explicit start and end for the provided chars array.
+                // 'start' must be a valid index.
+                if (start < 0 || start >= chars.length) {
+                    throw new IllegalArgumentException("Parameter start (" + start + ") is out of bounds for the chars array of length " + chars.length);
+                }
+                // 'end' must be strictly greater than 'start' and within array bounds (inclusive upper bound for length).
+                if (end <= start || end > chars.length) {
+                    throw new IllegalArgumentException("Parameter end (" + end + ") is out of bounds or less than or equal to start (" + start + ") for the chars array of length " + chars.length);
+                }
+            }
+        } else { // chars == null, use character code points
             if (start == 0 && end == 0) {
                 if (!letters && !numbers) {
-                    end = Integer.MAX_VALUE;
+                    end = Integer.MAX_VALUE; // Use all characters (up to Character.MAX_VALUE)
                 } else {
-                    end = 'z' + 1;
+                    end = 'z' + 1; // Use ASCII printable characters
                     start = ' ';                
                 }
+            } else {
+                // If chars is null and start/end are specified (not 0,0), ensure end > start for a valid range.
+                if (end <= start) {
+                    throw new IllegalArgumentException("Parameter end (" + end + ") must be greater than parameter start (" + start + ") when no chars array is provided.");
                 }
+            }
+        }
+        // --- FIX END ---
 
-        char[] buffer = new char[count];
         int gap = end - start;
 
+        char[] buffer = new char[count];
+
         while (count-- != 0) {
             char ch;
             if (chars == null) {
                 ch = (char) (random.nextInt(gap) + start);
             } else {
                 ch = chars[random.nextInt(gap) + start];
             }
             if (letters && Character.isLetter(ch)
                     || numbers && Character.isDigit(ch)
                     || !letters && !numbers) {
                 if(ch >= 56320 && ch <= 57343) {
-                    if(count == 0) {
-                        count++;
+                    if(count == 0) { // If only one character position left, cannot form a pair.
+                        count++; // Effectively skip this char, retry.
                     } else {
                         // low surrogate, insert high surrogate after putting it in
                         buffer[count] = ch;
                         count--;
                         buffer[count] = (char) (55296 + random.nextInt(128));
                     }
                 } else if(ch >= 55296 && ch <= 56191) {
-                    if(count == 0) {
-                        count++;
+                    if(count == 0) { // If only one character position left, cannot form a pair.
+                        count++; // Effectively skip this char, retry.
                     } else {
                         // high surrogate, insert low surrogate before putting it in
                         buffer[count] = (char) (56320 + random.nextInt(128));
                         count--;
                         buffer[count] = ch;
                     }
                 } else if(ch >= 56192 && ch <= 56319) {
                     // private high surrogate, no effing clue, so skip it
-                    count++;
+                    count++; // Effectively skip this char, retry.
                 } else {
                     buffer[count] = ch;
                 }
             } else {
-                count++;
+                count++; // Character didn't match criteria, skip and retry.
             }
         }
         return new String(buffer);
     }
\ No newline at end of file
