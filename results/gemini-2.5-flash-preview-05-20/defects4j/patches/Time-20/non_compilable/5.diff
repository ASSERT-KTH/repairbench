diff --git a/tmp/a834c70d-b462-4e49-af9d-bfc3d58c9838_buggy.java b/tmp/c051570a-eb0a-48d7-9828-a97b5522b962_fixed.java
index ae6c2b1..8761589 100644
--- a/tmp/a834c70d-b462-4e49-af9d-bfc3d58c9838_buggy.java
+++ b/tmp/c051570a-eb0a-48d7-9828-a97b5522b962_fixed.java
@@ -1,10 +1,32 @@
         public int parseInto(DateTimeParserBucket bucket, String text, int position) {
             String str = text.substring(position);
-            for (String id : ALL_IDS) {
+
+            // The original ALL_IDS (likely from DateTimeZone.getAvailableIDs()) is a Set,
+            // whose iteration order is not guaranteed and can lead to shorter IDs being matched
+            // before longer, more specific ones (e.g., "America/Dawson" being matched before
+            // "America/Dawson_Creek"). This causes the parser to fail on the remainder.
+            // To fix this, we must ensure that longer, more specific time zone IDs are
+            // attempted first. This is achieved by sorting the IDs by length in descending order.
+            // If lengths are equal, an alphabetical sort is used to ensure deterministic behavior.
+            List<String> sortedIds = new ArrayList<>(ALL_IDS);
+            Collections.sort(sortedIds, new Comparator<String>() {
+                @Override
+                public int compare(String s1, String s2) {
+                    // Sort by length in descending order (longer strings first)
+                    int lenCompare = Integer.compare(s2.length(), s1.length());
+                    if (lenCompare != 0) {
+                        return lenCompare;
+                    }
+                    // If lengths are equal, sort alphabetically (ascending) for deterministic behavior
+                    return s1.compareTo(s2);
+                }
+            });
+
+            for (String id : sortedIds) {
                 if (str.startsWith(id)) {
                     bucket.setZone(DateTimeZone.forID(id));
                     return position + id.length();
                 }
             }
             return ~position;
         }
\ No newline at end of file
