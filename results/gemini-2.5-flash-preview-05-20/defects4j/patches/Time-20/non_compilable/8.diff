diff --git a/tmp/0c1eb27c-d03f-4df4-bf87-2ed4bc6b613d_buggy.java b/tmp/f2ec4dda-31d5-43f0-924b-6189ebb456e3_fixed.java
index ae6c2b1..6bfa346 100644
--- a/tmp/0c1eb27c-d03f-4df4-bf87-2ed4bc6b613d_buggy.java
+++ b/tmp/f2ec4dda-31d5-43f0-924b-6189ebb456e3_fixed.java
@@ -1,10 +1,23 @@
         public int parseInto(DateTimeParserBucket bucket, String text, int position) {
             String str = text.substring(position);
-            for (String id : ALL_IDS) {
+            // To ensure that longer, more specific time zone IDs are matched before shorter,
+            // less specific ones (e.g., "America/Dawson_Creek" before "America/Dawson"),
+            // the available IDs must be processed in order of descending length.
+            // Although sorting on every call is not optimal for performance, it's necessary
+            // here to fix the bug within the scope of this single function.
+            java.util.List<String> sortedIds = new java.util.ArrayList<>(ALL_IDS);
+            java.util.Collections.sort(sortedIds, new java.util.Comparator<String>() {
+                @Override
+                public int compare(String s1, String s2) {
+                    return s2.length() - s1.length(); // Sort by length in descending order
+                }
+            });
+
+            for (String id : sortedIds) {
                 if (str.startsWith(id)) {
-                    bucket.setZone(DateTimeZone.forID(id));
+                    bucket.setZone(org.joda.time.DateTimeZone.forID(id));
                     return position + id.length();
                 }
             }
             return ~position;
         }
\ No newline at end of file
