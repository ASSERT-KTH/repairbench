diff --git a/tmp/4ac61e0a-41ea-49f2-9db1-542ebd22d8b3_buggy.java b/tmp/15ea04d4-106b-444d-aad3-add03515c84d_fixed.java
index ae6c2b1..2f42f84 100644
--- a/tmp/4ac61e0a-41ea-49f2-9db1-542ebd22d8b3_buggy.java
+++ b/tmp/15ea04d4-106b-444d-aad3-add03515c84d_fixed.java
@@ -1,10 +1,21 @@
         public int parseInto(DateTimeParserBucket bucket, String text, int position) {
             String str = text.substring(position);
-            for (String id : ALL_IDS) {
+
+            // To ensure the longest possible time zone ID is matched first,
+            // we sort the IDs by length in descending order. This prevents
+            // shorter, partial matches (e.g., "America/Dawson") from being
+            // picked before longer, correct matches (e.g., "America/Dawson_Creek").
+            //
+            // Since ALL_IDS is a static Set and its iteration order is not guaranteed
+            // to be by length, we create a temporary sorted list for parsing.
+            java.util.List<String> sortedIds = new java.util.ArrayList<>(ALL_IDS);
+            java.util.Collections.sort(sortedIds, (s1, s2) -> s2.length() - s1.length());
+
+            for (String id : sortedIds) {
                 if (str.startsWith(id)) {
-                    bucket.setZone(DateTimeZone.forID(id));
+                    bucket.setZone(org.joda.time.DateTimeZone.forID(id));
                     return position + id.length();
                 }
             }
             return ~position;
         }
\ No newline at end of file
