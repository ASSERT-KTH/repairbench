diff --git a/tmp/e2e484b6-0489-4fb2-8323-a7c6d06649e2_buggy.java b/tmp/acf8e152-84b4-43c8-8baf-8c7ff9d1996b_fixed.java
index ae6c2b1..81cca46 100644
--- a/tmp/e2e484b6-0489-4fb2-8323-a7c6d06649e2_buggy.java
+++ b/tmp/acf8e152-84b4-43c8-8baf-8c7ff9d1996b_fixed.java
@@ -1,10 +1,30 @@
         public int parseInto(DateTimeParserBucket bucket, String text, int position) {
             String str = text.substring(position);
-            for (String id : ALL_IDS) {
+            
+            // To correctly parse time zone IDs, especially when some IDs are prefixes of others
+            // (e.g., "America/Dawson" and "America/Dawson_Creek"),
+            // we must attempt to match the longest IDs first.
+            // ALL_IDS is likely an unordered Set or a List not sorted by length,
+            // so we create a temporary sorted list for the parsing logic.
+            java.util.List<String> sortedIds = new java.util.ArrayList<>(ALL_IDS);
+            java.util.Collections.sort(sortedIds, new java.util.Comparator<String>() {
+                @Override
+                public int compare(String s1, String s2) {
+                    // Sort by length in descending order (longest first)
+                    int cmp = s2.length() - s1.length();
+                    if (cmp == 0) {
+                        // For IDs of the same length, sort alphabetically to ensure deterministic behavior
+                        cmp = s1.compareTo(s2);
+                    }
+                    return cmp;
+                }
+            });
+
+            for (String id : sortedIds) {
                 if (str.startsWith(id)) {
-                    bucket.setZone(DateTimeZone.forID(id));
+                    bucket.setZone(org.joda.time.DateTimeZone.forID(id));
                     return position + id.length();
                 }
             }
             return ~position;
         }
\ No newline at end of file
