diff --git a/tmp/8109d78d-aa2f-43ab-ae9c-8876fea72cd7_buggy.java b/tmp/f02628c7-a059-4f08-8be9-750206dcf123_fixed.java
index ae6c2b1..1692054 100644
--- a/tmp/8109d78d-aa2f-43ab-ae9c-8876fea72cd7_buggy.java
+++ b/tmp/f02628c7-a059-4f08-8be9-750206dcf123_fixed.java
@@ -1,10 +1,21 @@
         public int parseInto(DateTimeParserBucket bucket, String text, int position) {
             String str = text.substring(position);
-            for (String id : ALL_IDS) {
+            
+            // To ensure that longer time zone IDs are matched before shorter, prefix-matching IDs,
+            // we need to iterate through the IDs sorted by length in descending order.
+            // This prevents issues like "America/Dawson" being matched instead of "America/Dawson_Creek".
+            // Creating and sorting a new list on every call has a performance overhead.
+            // In a real-world library, 'ALL_IDS' would ideally be pre-sorted once (e.g., in a static initializer)
+            // into a dedicated list for parsing, but given the constraint to modify only this function,
+            // a local sort is applied.
+            java.util.List<String> sortedIds = new java.util.ArrayList<>(ALL_IDS);
+            java.util.Collections.sort(sortedIds, (s1, s2) -> s2.length() - s1.length());
+
+            for (String id : sortedIds) {
                 if (str.startsWith(id)) {
-                    bucket.setZone(DateTimeZone.forID(id));
+                    bucket.setZone(org.joda.time.DateTimeZone.forID(id));
                     return position + id.length();
                 }
             }
             return ~position;
         }
