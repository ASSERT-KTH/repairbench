diff --git a/tmp/6a86c832-e1f7-419e-a7d7-e75bc329f415_buggy.java b/tmp/71cafd6c-18af-4850-8f33-7d139d193f64_fixed.java
index ae6c2b1..1eff948 100644
--- a/tmp/6a86c832-e1f7-419e-a7d7-e75bc329f415_buggy.java
+++ b/tmp/71cafd6c-18af-4850-8f33-7d139d193f64_fixed.java
@@ -1,10 +1,30 @@
         public int parseInto(DateTimeParserBucket bucket, String text, int position) {
             String str = text.substring(position);
-            for (String id : ALL_IDS) {
+            
+            // The original code iterates through ALL_IDS in an arbitrary order.
+            // This can lead to issues when a shorter time zone ID is a prefix of a longer one
+            // (e.g., "America/Dawson" vs. "America/Dawson_Creek").
+            // If the shorter ID appears first in the iteration, it will be matched prematurely,
+            // leaving the remainder of the longer ID unparsed and causing a "malformed" error.
+            // To fix this, we need to prioritize matching longer time zone IDs first.
+            // We achieve this by creating a temporary list from ALL_IDS and sorting it
+            // by string length in descending order before iterating.
+            
+            java.util.List<String> sortedIds = new java.util.ArrayList<>(ALL_IDS);
+            java.util.Collections.sort(sortedIds, new java.util.Comparator<String>() {
+                @Override
+                public int compare(String s1, String s2) {
+                    // Sorts strings by length in descending order.
+                    // This ensures that longer IDs are checked before shorter ones.
+                    return s2.length() - s1.length();
+                }
+            });
+
+            for (String id : sortedIds) {
                 if (str.startsWith(id)) {
                     bucket.setZone(DateTimeZone.forID(id));
                     return position + id.length();
                 }
             }
             return ~position;
         }
\ No newline at end of file
