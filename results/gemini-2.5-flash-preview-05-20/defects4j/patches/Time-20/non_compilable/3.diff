diff --git a/tmp/e2bf2c3d-91eb-4104-90a6-3927bd737ef3_buggy.java b/tmp/6dd00366-d1f4-4703-84c6-5a7fcd0f1ab8_fixed.java
index ae6c2b1..91a1d28 100644
--- a/tmp/e2bf2c3d-91eb-4104-90a6-3927bd737ef3_buggy.java
+++ b/tmp/6dd00366-d1f4-4703-84c6-5a7fcd0f1ab8_fixed.java
@@ -1,10 +1,30 @@
-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {
+        public int parseInto(org.joda.time.format.DateTimeParserBucket bucket, String text, int position) {
             String str = text.substring(position);
-            for (String id : ALL_IDS) {
+
+            // To correctly parse timezone IDs, especially those that are prefixes of others
+            // (e.g., "America/Dawson" and "America/Dawson_Creek"),
+            // we must attempt to match longer IDs before shorter ones.
+            // The original code iterates through ALL_IDS in an arbitrary order,
+            // which could lead to a shorter ID being matched first, causing parsing errors.
+
+            // Create a temporary list from the ALL_IDS set (assuming ALL_IDS is a static Set<String>
+            // available in the enclosing class's scope, as per the original code structure).
+            java.util.List<String> sortedIds = new java.util.ArrayList<>(ALL_IDS);
+            
+            // Sort the IDs by length in descending order.
+            // This ensures that "America/Dawson_Creek" is checked before "America/Dawson".
+            java.util.Collections.sort(sortedIds, new java.util.Comparator<String>() {
+                @Override
+                public int compare(String s1, String s2) {
+                    return s2.length() - s1.length(); // Sort by length, longest first
+                }
+            });
+
+            for (String id : sortedIds) {
                 if (str.startsWith(id)) {
-                    bucket.setZone(DateTimeZone.forID(id));
+                    bucket.setZone(org.joda.time.DateTimeZone.forID(id));
                     return position + id.length();
                 }
             }
             return ~position;
         }
\ No newline at end of file
