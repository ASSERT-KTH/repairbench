diff --git a/tmp/6da16259-f658-4a9c-b682-10cb34c12dc0_buggy.java b/tmp/ca5c9ab1-57b4-4003-a95b-4d71d0b0d8d6_fixed.java
index ae6c2b1..942b5e2 100644
--- a/tmp/6da16259-f658-4a9c-b682-10cb34c12dc0_buggy.java
+++ b/tmp/ca5c9ab1-57b4-4003-a95b-4d71d0b0d8d6_fixed.java
@@ -1,10 +1,29 @@
         public int parseInto(DateTimeParserBucket bucket, String text, int position) {
             String str = text.substring(position);
+            String bestMatchId = null;
+            int bestMatchLength = 0;
+
+            // Iterate through all known time zone IDs.
+            // To handle cases where one ID is a prefix of another (e.g., "America/Dawson" and "America/Dawson_Creek"),
+            // we must find the longest possible match. The original code would pick the first match found,
+            // which could be the shorter prefix if it appears earlier in ALL_IDS.
             for (String id : ALL_IDS) {
                 if (str.startsWith(id)) {
-                    bucket.setZone(DateTimeZone.forID(id));
-                    return position + id.length();
+                    // If the current ID matches and is longer than the previously found best match,
+                    // update the best match.
+                    if (id.length() > bestMatchLength) {
+                        bestMatchId = id;
+                        bestMatchLength = id.length();
                     }
                 }
+            }
+
+            // If a best match was found, set the time zone and return the new position.
+            if (bestMatchId != null) {
+                bucket.setZone(DateTimeZone.forID(bestMatchId));
+                return position + bestMatchLength;
+            } else {
+                // No valid time zone ID was found at the current position.
                 return ~position;
             }
+        }
\ No newline at end of file
