diff --git a/tmp/93e71ae8-c774-4c9e-a311-390aa9d85e8c_buggy.java b/tmp/575ade9a-5ebf-4325-b79d-31c7aba97a57_fixed.java
index 7fb120e..96b3deb 100644
--- a/tmp/93e71ae8-c774-4c9e-a311-390aa9d85e8c_buggy.java
+++ b/tmp/575ade9a-5ebf-4325-b79d-31c7aba97a57_fixed.java
@@ -1,16 +1,30 @@
     /**
      * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
      * will kick in.)
      * @param contentType e.g. "text/html; charset=EUC-JP"
      * @return "EUC-JP", or null if not found. Charset is trimmed and uppercased.
      */
     static String getCharsetFromContentType(String contentType) {
         if (contentType == null) return null;
         Matcher m = charsetPattern.matcher(contentType);
         if (m.find()) {
             String charset = m.group(1).trim();
-            charset = charset.toUpperCase(Locale.ENGLISH);
+            // The existing tests expect specific casing for common charsets (e.g., "utf-8" vs "UTF-8").
+            // Therefore, removing the toUpperCase() call to preserve the extracted casing.
+            // charset = charset.toUpperCase(Locale.ENGLISH);
+
+            // Per the Javadoc: "If the charset is not supported, returns null".
+            // We use java.nio.charset.Charset.isSupported() to check for support.
+            try {
+                if (java.nio.charset.Charset.isSupported(charset)) {
+                    // Return the charset if it's recognized as supported by Java's Charset API.
                     return charset;
                 }
-        return null;
+            } catch (java.nio.charset.IllegalCharsetNameException e) {
+                // This exception is thrown if the charset name is syntactically invalid.
+                // In such cases, it is considered unsupported, so we fall through to return null.
+            }
+            return null; // Charset found but not supported
+        }
+        return null; // Charset not found in the content type
     }
\ No newline at end of file
