diff --git a/tmp/1069397c-1a3c-4e21-a388-551149e2c8de_buggy.java b/tmp/b95bb69c-1f44-45bc-88fb-f6ca56748169_fixed.java
index 7fb120e..8521296 100644
--- a/tmp/1069397c-1a3c-4e21-a388-551149e2c8de_buggy.java
+++ b/tmp/b95bb69c-1f44-45bc-88fb-f6ca56748169_fixed.java
@@ -1,16 +1,25 @@
     /**
      * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
      * will kick in.)
      * @param contentType e.g. "text/html; charset=EUC-JP"
      * @return "EUC-JP", or null if not found. Charset is trimmed and uppercased.
      */
     static String getCharsetFromContentType(String contentType) {
         if (contentType == null) return null;
         Matcher m = charsetPattern.matcher(contentType);
         if (m.find()) {
             String charset = m.group(1).trim();
-            charset = charset.toUpperCase(Locale.ENGLISH);
-            return charset;
+            // The original code uppercased the charset (charset = charset.toUpperCase(Locale.ENGLISH);).
+            // This conflicts with test expectations like "utf-8" input yielding "utf-8" output,
+            // while the original code would produce "UTF-8".
+            // Additionally, the Javadoc states "If the charset is not supported, returns null".
+            // This requires checking if the extracted charset is supported.
+            // Charset.isSupported() handles case-insensitivity itself.
+            if (java.nio.charset.Charset.isSupported(charset)) {
+                return charset; // Return the charset as found (trimmed), preserving its case.
+            } else {
+                return null; // Charset is not supported, return null.
+            }
         }
         return null;
     }
\ No newline at end of file
