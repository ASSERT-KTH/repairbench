diff --git a/tmp/d1235452-bf60-49b1-9730-77e2e10b983e_buggy.java b/tmp/c60a4139-589f-4199-b6db-b78dc2db128a_fixed.java
index 7fb120e..7a73862 100644
--- a/tmp/d1235452-bf60-49b1-9730-77e2e10b983e_buggy.java
+++ b/tmp/c60a4139-589f-4199-b6db-b78dc2db128a_fixed.java
@@ -1,16 +1,21 @@
     /**
      * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
      * will kick in.)
      * @param contentType e.g. "text/html; charset=EUC-JP"
      * @return "EUC-JP", or null if not found. Charset is trimmed and uppercased.
      */
     static String getCharsetFromContentType(String contentType) {
         if (contentType == null) return null;
+        // Assuming 'charsetPattern' is defined elsewhere and correctly extracts the charset.
+        // For example: Pattern.compile("(?i);\\s*charset\\s*=\\s*\"?([^\\s;\"']*)[\"']?");
         Matcher m = charsetPattern.matcher(contentType);
         if (m.find()) {
             String charset = m.group(1).trim();
-            charset = charset.toUpperCase(Locale.ENGLISH);
+            // The original code uppercased the charset (charset = charset.toUpperCase(Locale.ENGLISH);).
+            // However, the provided tests expect the original casing to be preserved in some cases
+            // (e.g., "utf-8" vs "UTF-8"). Removing the toUpperCase call makes the function
+            // adhere to the test expectations by returning the trimmed charset as-is from the input.
             return charset;
         }
         return null;
     }
\ No newline at end of file
