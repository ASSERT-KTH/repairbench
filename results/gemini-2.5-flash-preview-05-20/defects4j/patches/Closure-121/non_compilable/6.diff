diff --git a/tmp/768d573a-0d6d-4548-891c-51b5fc5b5270_buggy.java b/tmp/ca788160-367a-4c7b-9514-c3585e6f1cd7_fixed.java
index 3a790cb..f5e26f1 100644
--- a/tmp/768d573a-0d6d-4548-891c-51b5fc5b5270_buggy.java
+++ b/tmp/ca788160-367a-4c7b-9514-c3585e6f1cd7_fixed.java
@@ -1,74 +1,103 @@
     private void inlineNonConstants(
         Var v, ReferenceCollection referenceInfo,
         boolean maybeModifiedArguments) {
       int refCount = referenceInfo.references.size();
       Reference declaration = referenceInfo.references.get(0);
       Reference init = referenceInfo.getInitializingReference();
       int firstRefAfterInit = (declaration == init) ? 2 : 3;
 
       if (refCount > 1 &&
           isImmutableAndWellDefinedVariable(v, referenceInfo)) {
         // if the variable is referenced more than once, we can only
         // inline it if it's immutable and never defined before referenced.
         Node value;
         if (init != null) {
           value = init.getAssignedValue();
         } else {
           // Create a new node for variable that is never initialized.
           Node srcLocation = declaration.getNode();
           value = NodeUtil.newUndefinedNode(srcLocation);
         }
         Preconditions.checkNotNull(value);
         inlineWellDefinedVariable(v, value, referenceInfo.references);
         staleVars.add(v);
       } else if (refCount == firstRefAfterInit) {
         // The variable likely only read once, try some more
         // complex inlining heuristics.
         Reference reference = referenceInfo.references.get(
             firstRefAfterInit - 1);
-        if (canInline(declaration, init, reference)) {
+
+        // Fix for testExternalIssue1053:
+        // When a variable `v` (e.g., `x` in `var x = u;`) is assigned the value
+        // of another variable `u`, and `u` is mutable (not a constant),
+        // inlining `x` with the *current* value of `u` can be incorrect if `u`
+        // changes between `x`'s initialization and `x`'s usage.
+        // The `canInline` function might not fully capture this side-effect
+        // on the aliased variable (`u`).
+        // To prevent this specific bug, we add a check to avoid inlining `v`
+        // if its assigned value is a reference to a mutable variable.
+        Node assignedValue = init.getAssignedValue();
+        boolean valueIsMutableVarReference = false;
+        if (assignedValue != null && assignedValue.isName()) {
+            Var assignedVar = assignedValue.getScope().getVar(assignedValue.getString());
+            // If the assigned value refers to a variable, and that variable is not 'const',
+            // it's considered a mutable variable reference.
+            if (assignedVar != null && !assignedVar.isConst()) {
+                valueIsMutableVarReference = true;
+            }
+        }
+
+        // Only proceed with inlining if the assigned value is NOT a reference
+        // to a mutable variable, or if the `canInline` method explicitly allows it.
+        // In the failing test case, `x = u`, `u` is a mutable variable, so `valueIsMutableVarReference`
+        // becomes true, preventing the incorrect inlining.
+        if (valueIsMutableVarReference) {
+            // Do not inline if the assigned value is a mutable variable.
+            // This prevents issues where 'v' captures a point-in-time value of
+            // 'u', but 'u' might change later.
+        } else if (canInline(declaration, init, reference)) {
           inline(v, declaration, init, reference);
           staleVars.add(v);
         }
       } else if (declaration != init && refCount == 2) {
         if (isValidDeclaration(declaration) && isValidInitialization(init)) {
           // The only reference is the initialization, remove the assignment and
           // the variable declaration.
           Node value = init.getAssignedValue();
           Preconditions.checkNotNull(value);
           inlineWellDefinedVariable(v, value, referenceInfo.references);
           staleVars.add(v);
         }
       }
 
       // If this variable was not inlined normally, check if we can
       // inline an alias of it. (If the variable was inlined, then the
       // reference data is out of sync. We're better off just waiting for
       // the next pass.)
       if (!maybeModifiedArguments &&
           !staleVars.contains(v) &&
           referenceInfo.isWellDefined() &&
           referenceInfo.isAssignedOnceInLifetime()) {
           // Inlining the variable based solely on well-defined and assigned
           // once is *NOT* correct. We relax the correctness requirement if
           // the variable is declared constant.
         List<Reference> refs = referenceInfo.references;
         for (int i = 1 /* start from a read */; i < refs.size(); i++) {
           Node nameNode = refs.get(i).getNode();
           if (aliasCandidates.containsKey(nameNode)) {
             AliasCandidate candidate = aliasCandidates.get(nameNode);
             if (!staleVars.contains(candidate.alias) &&
                 !isVarInlineForbidden(candidate.alias)) {
               Reference aliasInit;
               aliasInit = candidate.refInfo.getInitializingReference();
               Node value = aliasInit.getAssignedValue();
               Preconditions.checkNotNull(value);
               inlineWellDefinedVariable(candidate.alias,
                   value,
                   candidate.refInfo.references);
               staleVars.add(candidate.alias);
             }
           }
         }
       }
     }
\ No newline at end of file
