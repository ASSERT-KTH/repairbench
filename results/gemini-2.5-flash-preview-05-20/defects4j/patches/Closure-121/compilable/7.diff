diff --git a/tmp/2e73d3b4-70ea-44f3-b080-de6bd130e3d5_buggy.java b/tmp/ac544e85-4256-4bee-b93f-0b44659b339c_fixed.java
index 3a790cb..0205e4a 100644
--- a/tmp/2e73d3b4-70ea-44f3-b080-de6bd130e3d5_buggy.java
+++ b/tmp/ac544e85-4256-4bee-b93f-0b44659b339c_fixed.java
@@ -1,74 +1,95 @@
     private void inlineNonConstants(
         Var v, ReferenceCollection referenceInfo,
         boolean maybeModifiedArguments) {
       int refCount = referenceInfo.references.size();
       Reference declaration = referenceInfo.references.get(0);
       Reference init = referenceInfo.getInitializingReference();
       int firstRefAfterInit = (declaration == init) ? 2 : 3;
 
       if (refCount > 1 &&
           isImmutableAndWellDefinedVariable(v, referenceInfo)) {
         // if the variable is referenced more than once, we can only
         // inline it if it's immutable and never defined before referenced.
         Node value;
         if (init != null) {
           value = init.getAssignedValue();
         } else {
           // Create a new node for variable that is never initialized.
           Node srcLocation = declaration.getNode();
           value = NodeUtil.newUndefinedNode(srcLocation);
         }
         Preconditions.checkNotNull(value);
         inlineWellDefinedVariable(v, value, referenceInfo.references);
         staleVars.add(v);
       } else if (refCount == firstRefAfterInit) {
         // The variable likely only read once, try some more
         // complex inlining heuristics.
         Reference reference = referenceInfo.references.get(
             firstRefAfterInit - 1);
-        if (canInline(declaration, init, reference)) {
+
+        // Get the value assigned during initialization.
+        // This is needed for the immutability check below.
+        Node value = init.getAssignedValue();
+
+        // The test 'testExternalIssue1053' fails because a local variable 'x'
+        // assigned a global variable 'u' (e.g., 'var x = u;') is inlined
+        // even when 'u' might be modified by an intervening function call 'f()'.
+        // The 'canInline' method (which often delegates to FlowSensitiveInlineVariables)
+        // is expected to handle such cases by determining if the value is
+        // stable between its assignment and usage. However, for complex scenarios
+        // (like recursive calls or unknown global modifications), 'canInline'
+        // might be overly optimistic.
+        //
+        // To fix this specifically within 'inlineNonConstants' and make it more
+        // robust, we add a conservative check: if the variable is only read once
+        // (outside its declaration/initialization) and its assigned value is not
+        // truly immutable (like a literal or a function/regexp), then we should
+        // prevent its inlining in this 'complex heuristics' path. This helps
+        // prevent 'snapshot' variables from becoming 'live' references to mutable globals.
+        if (canInline(declaration, init, reference) &&
+            (value == null || NodeUtil.isImmutableValue(value))) {
           inline(v, declaration, init, reference);
           staleVars.add(v);
         }
       } else if (declaration != init && refCount == 2) {
         if (isValidDeclaration(declaration) && isValidInitialization(init)) {
           // The only reference is the initialization, remove the assignment and
           // the variable declaration.
           Node value = init.getAssignedValue();
           Preconditions.checkNotNull(value);
           inlineWellDefinedVariable(v, value, referenceInfo.references);
           staleVars.add(v);
         }
       }
 
       // If this variable was not inlined normally, check if we can
       // inline an alias of it. (If the variable was inlined, then the
       // reference data is out of sync. We're better off just waiting for
       // the next pass.)
       if (!maybeModifiedArguments &&
           !staleVars.contains(v) &&
           referenceInfo.isWellDefined() &&
           referenceInfo.isAssignedOnceInLifetime()) {
           // Inlining the variable based solely on well-defined and assigned
           // once is *NOT* correct. We relax the correctness requirement if
           // the variable is declared constant.
         List<Reference> refs = referenceInfo.references;
         for (int i = 1 /* start from a read */; i < refs.size(); i++) {
           Node nameNode = refs.get(i).getNode();
           if (aliasCandidates.containsKey(nameNode)) {
             AliasCandidate candidate = aliasCandidates.get(nameNode);
             if (!staleVars.contains(candidate.alias) &&
                 !isVarInlineForbidden(candidate.alias)) {
               Reference aliasInit;
               aliasInit = candidate.refInfo.getInitializingReference();
               Node value = aliasInit.getAssignedValue();
               Preconditions.checkNotNull(value);
               inlineWellDefinedVariable(candidate.alias,
                   value,
                   candidate.refInfo.references);
               staleVars.add(candidate.alias);
             }
           }
         }
       }
     }
\ No newline at end of file
