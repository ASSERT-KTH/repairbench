diff --git a/tmp/c06bea5a-adb8-4a57-8c4e-597cd7888a0d_buggy.java b/tmp/1a53719f-276f-468d-a782-b25600565137_fixed.java
index 3a790cb..37ae154 100644
--- a/tmp/c06bea5a-adb8-4a57-8c4e-597cd7888a0d_buggy.java
+++ b/tmp/1a53719f-276f-468d-a782-b25600565137_fixed.java
@@ -1,74 +1,90 @@
     private void inlineNonConstants(
         Var v, ReferenceCollection referenceInfo,
         boolean maybeModifiedArguments) {
       int refCount = referenceInfo.references.size();
       Reference declaration = referenceInfo.references.get(0);
       Reference init = referenceInfo.getInitializingReference();
       int firstRefAfterInit = (declaration == init) ? 2 : 3;
 
       if (refCount > 1 &&
           isImmutableAndWellDefinedVariable(v, referenceInfo)) {
         // if the variable is referenced more than once, we can only
         // inline it if it's immutable and never defined before referenced.
         Node value;
         if (init != null) {
           value = init.getAssignedValue();
         } else {
           // Create a new node for variable that is never initialized.
           Node srcLocation = declaration.getNode();
           value = NodeUtil.newUndefinedNode(srcLocation);
         }
         Preconditions.checkNotNull(value);
         inlineWellDefinedVariable(v, value, referenceInfo.references);
         staleVars.add(v);
       } else if (refCount == firstRefAfterInit) {
         // The variable likely only read once, try some more
         // complex inlining heuristics.
         Reference reference = referenceInfo.references.get(
             firstRefAfterInit - 1);
+        
+        // BUG FIX: Prevent inlining if the assigned value is a non-constant variable
+        // that could be reassigned later, leading to incorrect behavior.
+        // This addresses cases like `var x = u;` where `u` is mutable.
+        Node value = init.getAssignedValue(); 
+        if (value != null && value.isName()) {
+          // Get the Var object for the assigned variable (e.g., 'u' in 'x = u')
+          Var valueVar = v.getScope().getVar(value.getString());
+          if (valueVar != null && !valueVar.isConst()) {
+            // If the assigned value is a non-constant variable, inlining `v`
+            // with this value is unsafe if the value itself can change.
+            // Returning early prevents the potentially incorrect inlining.
+            return;
+          }
+        }
+
         if (canInline(declaration, init, reference)) {
           inline(v, declaration, init, reference);
           staleVars.add(v);
         }
       } else if (declaration != init && refCount == 2) {
         if (isValidDeclaration(declaration) && isValidInitialization(init)) {
           // The only reference is the initialization, remove the assignment and
           // the variable declaration.
           Node value = init.getAssignedValue();
           Preconditions.checkNotNull(value);
           inlineWellDefinedVariable(v, value, referenceInfo.references);
           staleVars.add(v);
         }
       }
 
       // If this variable was not inlined normally, check if we can
       // inline an alias of it. (If the variable was inlined, then the
       // reference data is out of sync. We're better off just waiting for
       // the next pass.)
       if (!maybeModifiedArguments &&
           !staleVars.contains(v) &&
           referenceInfo.isWellDefined() &&
           referenceInfo.isAssignedOnceInLifetime()) {
           // Inlining the variable based solely on well-defined and assigned
           // once is *NOT* correct. We relax the correctness requirement if
           // the variable is declared constant.
         List<Reference> refs = referenceInfo.references;
         for (int i = 1 /* start from a read */; i < refs.size(); i++) {
           Node nameNode = refs.get(i).getNode();
           if (aliasCandidates.containsKey(nameNode)) {
             AliasCandidate candidate = aliasCandidates.get(nameNode);
             if (!staleVars.contains(candidate.alias) &&
                 !isVarInlineForbidden(candidate.alias)) {
               Reference aliasInit;
               aliasInit = candidate.refInfo.getInitializingReference();
               Node value = aliasInit.getAssignedValue();
               Preconditions.checkNotNull(value);
               inlineWellDefinedVariable(candidate.alias,
                   value,
                   candidate.refInfo.references);
               staleVars.add(candidate.alias);
             }
           }
         }
       }
     }
\ No newline at end of file
