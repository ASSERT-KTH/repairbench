diff --git a/tmp/0a44b997-362a-45b5-93b6-ffa2e50af995_buggy.java b/tmp/3ac90479-14f1-4d33-8681-cee937f3dda0_fixed.java
index 1303a19..b3c3097 100644
--- a/tmp/0a44b997-362a-45b5-93b6-ffa2e50af995_buggy.java
+++ b/tmp/3ac90479-14f1-4d33-8681-cee937f3dda0_fixed.java
@@ -1,45 +1,50 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
+    // If GETPROP/GETELEM is used as assignment target or other L-value operations,
+    // the array literal is acting as a temporary. We cannot fold it here.
+    // Examples: "[][0] += 1", "[][1] = 1", "delete [][0]"
+    if (NodeUtil.isLValue(n)) {
+      return n;
+    }
 
     if (right.getType() != Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node elem = left.getFirstChild();
     for (int i = 0; elem != null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
-    if (elem == null) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
-    }
-
-    if (elem.getType() == Token.EMPTY) {
-      elem = NodeUtil.newUndefinedNode(elem);
+    // In JavaScript, accessing an array beyond its current length or an empty slot
+    // results in 'undefined', not an error (unless the index is negative, which is checked above).
+    // So, if elem is null (out of bounds) or an EMPTY node (sparse array hole),
+    // we should replace the access with an 'undefined' node.
+    if (elem == null || elem.getType() == Token.EMPTY) {
+      // Create an 'undefined' node. Use 'n' for source info as 'elem' might be null.
+      elem = NodeUtil.newUndefinedNode(n);
     } else {
+      // If a real element is found, remove it from the array literal.
+      // This is crucial for correctly folding arrays like [1, 2][0] -> 1.
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
\ No newline at end of file
