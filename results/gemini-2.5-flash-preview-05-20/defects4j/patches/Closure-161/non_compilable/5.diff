diff --git a/tmp/bb1483ea-11c7-4014-ba12-a03ef8ae67cf_buggy.java b/tmp/59abd8a0-e59f-4521-bc7f-58f0b0960354_fixed.java
index 1303a19..5a66b3d 100644
--- a/tmp/bb1483ea-11c7-4014-ba12-a03ef8ae67cf_buggy.java
+++ b/tmp/59abd8a0-e59f-4521-bc7f-58f0b0960354_fixed.java
@@ -1,45 +1,54 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
+    // If GETPROP/GETELEM is used as assignment target, the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
+    //    "[][1] = 1"
+    // In such cases, the access should not be folded, and no error should be
+    // reported by this pass, as it's a runtime behavior.
+    if (NodeUtil.isAssignmentTarget(n)) {
+      return n;
+    }
 
     if (right.getType() != Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node elem = left.getFirstChild();
     for (int i = 0; elem != null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
     if (elem == null) {
+      // If the element is null, it means the index is out of bounds for the array literal.
+      // This is a constant access to an array literal, so we should report this error.
+      // For example, `var x = [1,2][5];` or `var x = [][0];`
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     if (elem.getType() == Token.EMPTY) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
\ No newline at end of file
