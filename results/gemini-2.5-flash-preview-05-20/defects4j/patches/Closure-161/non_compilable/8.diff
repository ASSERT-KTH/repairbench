diff --git a/tmp/7b803e03-2aa1-44ec-be5f-12b1cb9352b1_buggy.java b/tmp/6fad12ab-5943-45a6-b491-7f6612b2cf28_fixed.java
index 1303a19..52d0da5 100644
--- a/tmp/7b803e03-2aa1-44ec-be5f-12b1cb9352b1_buggy.java
+++ b/tmp/6fad12ab-5943-45a6-b491-7f6612b2cf28_fixed.java
@@ -1,45 +1,54 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
 
+    // If n is an assignment target (e.g., `a[0] = 1`, `a[0] += 1`, `a[0]++`),
+    // we cannot fold the array access because it's being modified,
+    // not just read. The array literal must be created and the assignment
+    // performed on it.
+    if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) ||
+        NodeUtil.isIncrement(parent) || NodeUtil.isDecrement(parent)) {
+      return n;
+    }
+
     if (right.getType() != Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node elem = left.getFirstChild();
     for (int i = 0; elem != null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
     if (elem == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     if (elem.getType() == Token.EMPTY) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
\ No newline at end of file
