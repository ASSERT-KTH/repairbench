diff --git a/tmp/c4e552e4-c6b5-4997-a136-b3eeb549c2a7_buggy.java b/tmp/d31eb791-3804-4e75-b109-99c1dfda548e_fixed.java
index 1303a19..5da6e63 100644
--- a/tmp/c4e552e4-c6b5-4997-a136-b3eeb549c2a7_buggy.java
+++ b/tmp/d31eb791-3804-4e75-b109-99c1dfda548e_fixed.java
@@ -1,45 +1,60 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
+    // Check if 'n' (the GETELEM/GETPROP node) is the left-hand side of an assignment.
+    if (parent.isAssign() && parent.getFirstChild() == n) {
+      return n;
+    }
 
     if (right.getType() != Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node elem = left.getFirstChild();
     for (int i = 0; elem != null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
     if (elem == null) {
+      // If the array is a literal (e.g., [] or [1,2,3]) and the index is
+      // out of bounds, JavaScript specifies the result as `undefined`.
+      // We should fold it to `undefined` instead of throwing an error.
+      if (left.isArrayLit()) {
+        Node undefinedNode = NodeUtil.newUndefinedNode(n);
+        n.getParent().replaceChild(n, undefinedNode);
+        reportCodeChange();
+        return undefinedNode;
+      }
+      // For non-literal arrays, or cases where the element cannot be found,
+      // the original code threw an error, which may be appropriate.
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     if (elem.getType() == Token.EMPTY) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
