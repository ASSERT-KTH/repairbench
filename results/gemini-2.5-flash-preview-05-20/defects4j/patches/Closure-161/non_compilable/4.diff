diff --git a/tmp/8caa37e2-5b26-4663-a53b-3c681b9f2c9e_buggy.java b/tmp/67f739e6-661a-4552-adb0-e956be5497a4_fixed.java
index 1303a19..bce5f37 100644
--- a/tmp/8caa37e2-5b26-4663-a53b-3c681b9f2c9e_buggy.java
+++ b/tmp/67f739e6-661a-4552-adb0-e956be5497a4_fixed.java
@@ -1,45 +1,56 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
+    // The test case `"[][1] = 1;"` fails because this folding attempts to
+    // read from an empty array literal at an out-of-bounds index, even when
+    // it's an assignment target. For assignments, the array literal needs to
+    // remain to potentially receive a new property.
+
+    // If the GETELEM/GETPROP node 'n' is an assignment target (e.g., LHS of ASSIGN, +=, ++, etc.),
+    // we should not attempt to fold it. The array literal is acting as a temporary
+    // and must exist for the assignment to occur.
+    if (NodeUtil.isAssignmentTarget(n)) {
+      return n;
+    }
 
     if (right.getType() != Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node elem = left.getFirstChild();
     for (int i = 0; elem != null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
     if (elem == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     if (elem.getType() == Token.EMPTY) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
\ No newline at end of file
