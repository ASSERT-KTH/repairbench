diff --git a/tmp/be34448b-254e-4a62-b009-d7c4aa3b4157_buggy.java b/tmp/c35cb71d-16fd-4e4b-9005-b0e665bdf8c9_fixed.java
index ce55b5f..9c2bd70 100644
--- a/tmp/be34448b-254e-4a62-b009-d7c4aa3b4157_buggy.java
+++ b/tmp/c35cb71d-16fd-4e4b-9005-b0e665bdf8c9_fixed.java
@@ -1,63 +1,100 @@
     /**
      * <p>
      * Gets the greatest common divisor of the absolute value of two numbers,
      * using the "binary gcd" method which avoids division and modulo
      * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
      * Stein (1961).
      * </p>
      * 
      * @param u a non-zero number
      * @param v a non-zero number
      * @return the greatest common divisor, never zero
      * @since 1.1
      */
     public static int gcd(int u, int v) {
-        if (u * v == 0) {
-            return (Math.abs(u) + Math.abs(v));
-        }
-        // keep u and v negative, as negative integers range down to
-        // -2^31, while positive numbers can only be as large as 2^31-1
-        // (i.e. we can't necessarily negate a negative number without
-        // overflow)
-        /* assert u!=0 && v!=0; */
+        // Original code had `if (u * v == 0) { return (Math.abs(u) + Math.abs(v)); }`
+        // This check has two potential issues:
+        // 1. `u * v` can overflow if u and v are large non-zero numbers. While a non-zero product
+        //    would not typically become 0 due to overflow, it's safer to check for u==0 or v==0 explicitly.
+        // 2. `Math.abs(Integer.MIN_VALUE)` overflows, returning Integer.MIN_VALUE itself.
+        //    Since GCD must be positive, this needs special handling for cases like gcd(MIN_VALUE, 0).
+
+        // Handle cases where one or both numbers are 0.
+        // gcd(0, 0) is 0 according to the test case `assertEquals(0, MathUtils.gcd(0, 0))`.
+        // gcd(x, 0) or gcd(0, x) is abs(x).
+        // For Integer.MIN_VALUE, gcd(MIN_VALUE, 0) is 2^31, which overflows `int`.
+        // This is consistent with the `ArithmeticException` thrown later for `2^31`.
+        if (u == 0) {
+            if (v == 0) {
+                return 0; // gcd(0,0) is 0
+            }
+            if (v == Integer.MIN_VALUE) { // gcd(0, MIN_VALUE) = 2^31, which overflows int
+                throw new ArithmeticException("overflow: gcd is 2^31");
+            }
+            return Math.abs(v); // gcd(0, v) = abs(v)
+        } else if (v == 0) {
+            if (u == Integer.MIN_VALUE) { // gcd(MIN_VALUE, 0) = 2^31, which overflows int
+                throw new ArithmeticException("overflow: gcd is 2^31");
+            }
+            return Math.abs(u); // gcd(u, 0) = abs(u)
+        }
+
+        // The rest of the function handles u != 0 and v != 0.
+        // It keeps u and v negative to avoid overflow when negating Integer.MIN_VALUE.
+        // (i.e., we can't necessarily negate a negative number without overflow)
+        
+        /* assert u!=0 && v!=0; */ // This assertion is now guaranteed by the checks above.
         if (u > 0) {
-            u = -u;
-        } // make u negative
+            u = -u; // make u negative
+        }
         if (v > 0) {
-            v = -v;
-        } // make v negative
+            v = -v; // make v negative
+        }
+
         // B1. [Find power of 2]
         int k = 0;
-        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
-                                                            // both even...
+        // while u and v are both even...
+        // The condition `k < 31` prevents `1 << k` from overflowing `int` in the final return.
+        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { 
             u /= 2;
             v /= 2;
             k++; // cast out twos.
         }
         if (k == 31) {
+            // gcd is 2^31. This would overflow if returned as int (as `abs(Integer.MIN_VALUE)`).
+            // So, throw an exception.
             throw new ArithmeticException("overflow: gcd is 2^31");
         }
-        // B2. Initialize: u and v have been divided by 2^k and at least
-        // one is odd.
+
+        // B2. Initialize: u and v have been divided by 2^k and at least one is odd.
+        // The value 't' is a temporary variable used to store the difference between the two numbers
+        // or half of one of them, ensuring one of the numbers becomes odd.
         int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
-        // t negative: u was odd, v may be even (t replaces v)
-        // t positive: u was even, v is odd (t replaces u)
+        // If u was odd, t is set to v (t remains negative if v is negative).
+        // If u was even, t is set to -(u/2) (t becomes positive, corresponding to abs(u)/2).
+
         do {
             /* assert u<0 && v<0; */
             // B4/B3: cast out twos from t.
-            while ((t & 1) == 0) { // while t is even..
+            while ((t & 1) == 0) { // while t is even...
                 t /= 2; // cast out twos
             }
             // B5 [reset max(u,v)]
+            // Knuth's algorithm has `t>0 => u_1 = t`, `t<0 => v_1 = -t`.
+            // Here, u and v are maintained as negative numbers.
             if (t > 0) {
-                u = -t;
+                u = -t; // If t is positive (corresponds to abs(u)/2), u becomes its negative.
             } else {
-                v = t;
+                v = t; // If t is negative (corresponds to abs(v)), v takes its value.
             }
-            // B6/B3. at this point both u and v should be odd.
+            // B6/B3. At this point both u and v should be odd (in magnitude).
+            // Calculate the new t, which is half the difference of the magnitudes of u and v.
+            // The sign of t indicates which number (u or v) has the larger magnitude.
             t = (v - u) / 2;
-            // |u| larger: t positive (replace u)
-            // |v| larger: t negative (replace v)
+            // If |u| was larger, (v - u) will be positive, so t will be positive (replace u).
+            // If |v| was larger, (v - u) will be negative, so t will be negative (replace v).
         } while (t != 0);
-        return -u * (1 << k); // gcd is u*2^k
+
+        // The GCD is -u (which is abs(u)) multiplied by 2^k (the common factor of 2s removed earlier).
+        return -u * (1 << k); 
     }
\ No newline at end of file
