diff --git a/tmp/8501a2c5-2e4f-436b-bcd2-a40e40e48a2e_buggy.java b/tmp/2b81cc11-78d5-46e9-9100-cb281bcde6eb_fixed.java
index 4ebe4f9..279e9ea 100644
--- a/tmp/8501a2c5-2e4f-436b-bcd2-a40e40e48a2e_buggy.java
+++ b/tmp/2b81cc11-78d5-46e9-9100-cb281bcde6eb_fixed.java
@@ -1,41 +1,66 @@
     /*
     /**********************************************************
     /* Validation, post-processing
     /**********************************************************
      */
     @Override
     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
         // May need to resolve types for delegate-based creators:
         JsonDeserializer<Object> delegate = null;
         if (_valueInstantiator != null) {
             // [databind#2324]: check both array-delegating and delegating
             AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();
             if (delegateCreator != null) {
                 JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+                // When a delegate creator is present, it means the entire collection instance
+                // is constructed by delegating to another deserializer.
+                // This 'delegate' deserializer will be responsible for deserializing the
+                // type expected by the delegate creator (e.g., Collection<String>).
+                // It will, in turn, handle its own content deserialization.
                 delegate = findDeserializer(ctxt, delegateType, property);
             }
         }
+        
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         final JavaType valueType = _containerType.getContentType();
+
+        // If a delegate creator is used for the entire collection,
+        // this CollectionDeserializer's own _valueDeserializer (for elements)
+        // is not directly used to deserialize individual elements.
+        // The responsibility shifts entirely to the 'delegate' deserializer.
+        if (delegate == null) {
+            // Only resolve and contextualize _valueDeserializer if no delegate creator is used
+            // for the collection itself.
             if (valueDeser == null) {
                 // [databind#125]: May have a content converter
                 valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
                 if (valueDeser == null) {
                 // And we may also need to get deserializer for String
                     valueDeser = ctxt.findContextualValueDeserializer(valueType, property);
                 }
             } else { // if directly assigned, probably not yet contextual, so:
                 valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);
             }
+        } else {
+            // If a delegate is present, this CollectionDeserializer will use it to instantiate
+            // the collection. Its own _valueDeserializer field for individual elements
+            // is not needed in this mode.
+            valueDeser = null;
+        }
+
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
         NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);
+        
+        // This check should only apply if valueDeser is actually being used by this deserializer,
+        // which it is not if a delegate is present. If valueDeser is null, isDefaultDeserializer(null)
+        // returns false, so it correctly remains null.
         if (isDefaultDeserializer(valueDeser)) {
             valueDeser = null;
         }
         return withResolved(delegate, valueDeser, nuller, unwrapSingle);
     }
\ No newline at end of file
