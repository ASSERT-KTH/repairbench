diff --git a/tmp/ca32920b-1988-4b9f-9e08-a8b9e510899e_buggy.java b/tmp/272c18e4-b787-4621-b932-31c6c78d9cc7_fixed.java
index 4ebe4f9..fd77647 100644
--- a/tmp/ca32920b-1988-4b9f-9e08-a8b9e510899e_buggy.java
+++ b/tmp/272c18e4-b787-4621-b932-31c6c78d9cc7_fixed.java
@@ -1,41 +1,50 @@
     /*
     /**********************************************************
     /* Validation, post-processing
     /**********************************************************
      */
     @Override
     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
         // May need to resolve types for delegate-based creators:
         JsonDeserializer<Object> delegate = null;
         if (_valueInstantiator != null) {
             // [databind#2324]: check both array-delegating and delegating
-            AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();
-            if (delegateCreator != null) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+            JavaType delegateType = null;
+            // First, try to find a standard delegate creator type
+            if (_valueInstantiator.canCreateUsingDelegate()) {
+                delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+            }
+            // If no standard delegate, try to find an array delegate creator type
+            if (delegateType == null && _valueInstantiator.canCreateUsingArrayDelegate()) {
+                delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());
+            }
+
+            // If a delegate type is found (either standard or array), resolve its deserializer
+            if (delegateType != null) {
                 delegate = findDeserializer(ctxt, delegateType, property);
             }
         }
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         final JavaType valueType = _containerType.getContentType();
         if (valueDeser == null) {
             // [databind#125]: May have a content converter
             valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
             if (valueDeser == null) {
             // And we may also need to get deserializer for String
                 valueDeser = ctxt.findContextualValueDeserializer(valueType, property);
             }
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);
         }
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
         NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);
         if (isDefaultDeserializer(valueDeser)) {
             valueDeser = null;
         }
         return withResolved(delegate, valueDeser, nuller, unwrapSingle);
     }
