diff --git a/tmp/863110fc-c3cc-4e3f-bf44-6ad9b66212e9_buggy.java b/tmp/cffa3519-c95d-4c80-811b-fd293b4c0426_fixed.java
index a6dab52..1ca3e54 100644
--- a/tmp/863110fc-c3cc-4e3f-bf44-6ad9b66212e9_buggy.java
+++ b/tmp/cffa3519-c95d-4c80-811b-fd293b4c0426_fixed.java
@@ -1,80 +1,84 @@
     /**
      * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>
      *
      * @param out write to receieve the escaped string
      * @param str String to escape values in, may be null
      * @param escapeSingleQuote escapes single quotes if <code>true</code>
      * @throws IOException if an IOException occurs
      */
     private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (str == null) {
             return;
         }
         int sz;
         sz = str.length();
         for (int i = 0; i < sz; i++) {
             char ch = str.charAt(i);
 
             // handle unicode
-            if (ch > 0xfff) {
+            if (ch > 0xfff) { // Characters > U+0FFF, e.g., '\u20AC'
                 out.write("\\u" + hex(ch));
-            } else if (ch > 0xff) {
+            } else if (ch > 0xff) { // Characters > U+00FF, e.g., '\u0100'
                 out.write("\\u0" + hex(ch));
-            } else if (ch > 0x7f) {
+            } else if (ch > 0x7f) { // Characters > U+007F (ASCII range), e.g., '\u00A0'
                 out.write("\\u00" + hex(ch));
-            } else if (ch < 32) {
+            } else if (ch < 32) { // Control characters (0-31)
                 switch (ch) {
                     case '\b':
                         out.write('\\');
                         out.write('b');
                         break;
                     case '\n':
                         out.write('\\');
                         out.write('n');
                         break;
                     case '\t':
                         out.write('\\');
                         out.write('t');
                         break;
                     case '\f':
                         out.write('\\');
                         out.write('f');
                         break;
                     case '\r':
                         out.write('\\');
                         out.write('r');
                         break;
-                    default :
-                        if (ch > 0xf) {
+                    default : // Other control characters (e.g., NUL, SOH)
+                        if (ch > 0xf) { // e.g., '\u0010' - '\u001F'
                             out.write("\\u00" + hex(ch));
-                        } else {
+                        } else { // e.g., '\u0000' - '\u000F'
                             out.write("\\u000" + hex(ch));
                         }
                         break;
                 }
-            } else {
+            } else { // Visible ASCII characters (32-127)
                 switch (ch) {
                     case '\'':
                         if (escapeSingleQuote) {
                           out.write('\\');
                         }
                         out.write('\'');
                         break;
                     case '"':
                         out.write('\\');
                         out.write('"');
                         break;
                     case '\\':
                         out.write('\\');
                         out.write('\\');
                         break;
+                    case '/': // Fix: Escape forward slash for JavaScript context, especially within <script> tags.
+                        out.write('\\');
+                        out.write('/');
+                        break;
                     default :
                         out.write(ch);
                         break;
                 }
             }
         }
     }
\ No newline at end of file
