diff --git a/tmp/473b1185-cadc-44d5-ab1e-ea5d206958a0_buggy.java b/tmp/9c36a39e-ac7d-4156-8fb8-34c419b6260a_fixed.java
index 1bec4d6..674291f 100644
--- a/tmp/473b1185-cadc-44d5-ab1e-ea5d206958a0_buggy.java
+++ b/tmp/9c36a39e-ac7d-4156-8fb8-34c419b6260a_fixed.java
@@ -1,14 +1,24 @@
     private JavaType _mapType(Class<?> rawClass)
     {
         // 28-May-2015, tatu: Properties are special, as per [databind#810]
-        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);
+        // [databind#810]: Need to special-case Properties, which has legacy
+        // signature of Map<Object,Object>, but in fact is Map<String,String>
+        // for all practical purposes.
+        if (rawClass == java.util.Properties.class) {
+            // Treat Properties as Map<String, String>
+            // _fromClass(String.class) is the way to get JavaType for String
+            JavaType stringType = _fromClass(java.lang.String.class);
+            return MapType.construct(rawClass, stringType, stringType);
+        }
+
+        JavaType[] typeParams = findTypeParameters(rawClass, java.util.Map.class);
         // ok to have no types ("raw")
         if (typeParams == null) {
             return MapType.construct(rawClass, _unknownType(), _unknownType());
         }
         // but exactly 2 types if any found
         if (typeParams.length != 2) {
             throw new IllegalArgumentException("Strange Map type "+rawClass.getName()+": can not determine type parameters");
         }
         return MapType.construct(rawClass, typeParams[0], typeParams[1]);
     }
\ No newline at end of file
