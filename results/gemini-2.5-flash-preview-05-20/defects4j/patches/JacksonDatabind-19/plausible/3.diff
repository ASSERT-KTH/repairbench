diff --git a/tmp/31df8f17-12dd-45c5-ad97-522d5e5dfdb8_buggy.java b/tmp/63632ea3-6720-4eaa-8f51-de029b100662_fixed.java
index 1bec4d6..ce044a8 100644
--- a/tmp/31df8f17-12dd-45c5-ad97-522d5e5dfdb8_buggy.java
+++ b/tmp/63632ea3-6720-4eaa-8f51-de029b100662_fixed.java
@@ -1,14 +1,25 @@
     private JavaType _mapType(Class<?> rawClass)
     {
         // 28-May-2015, tatu: Properties are special, as per [databind#810]
+        // Special handling for Properties: they are treated as Map<String, String>
+        // regardless of their declared generic types, as per Jackson's default behavior
+        // for this specific type.
+        if (rawClass == java.util.Properties.class) {
+            // Assuming 'this' refers to TypeFactory or a similar class
+            // that provides the 'constructType' method for resolving Class into JavaType instances.
+            // This ensures that Properties map keys and values are always String.
+            JavaType stringType = constructType(String.class);
+            return MapType.construct(rawClass, stringType, stringType);
+        }
+
         JavaType[] typeParams = findTypeParameters(rawClass, Map.class);
         // ok to have no types ("raw")
         if (typeParams == null) {
             return MapType.construct(rawClass, _unknownType(), _unknownType());
         }
         // but exactly 2 types if any found
         if (typeParams.length != 2) {
             throw new IllegalArgumentException("Strange Map type "+rawClass.getName()+": can not determine type parameters");
         }
         return MapType.construct(rawClass, typeParams[0], typeParams[1]);
     }
\ No newline at end of file
