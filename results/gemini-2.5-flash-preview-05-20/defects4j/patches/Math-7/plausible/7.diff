diff --git a/tmp/8fcf7bba-7b72-4942-b433-172efa52bf7f_buggy.java b/tmp/9a3827db-89c4-47ba-a50d-2cd6fc47db24_fixed.java
index b4d4f38..ce2806a 100644
--- a/tmp/8fcf7bba-7b72-4942-b433-172efa52bf7f_buggy.java
+++ b/tmp/9a3827db-89c4-47ba-a50d-2cd6fc47db24_fixed.java
@@ -1,123 +1,128 @@
     /** Accept a step, triggering events and step handlers.
      * @param interpolator step interpolator
      * @param y state vector at step end time, must be reset if an event
      * asks for resetting or if an events stops integration during the step
      * @param yDot placeholder array where to put the time derivative of the state vector
      * @param tEnd final integration time
      * @return time at end of step
      * @exception MaxCountExceededException if the interpolator throws one because
      * the number of functions evaluations is exceeded
      * @exception NoBracketingException if the location of an event cannot be bracketed
      * @exception DimensionMismatchException if arrays dimensions do not match equations settings
      * @since 2.2
      */
     protected double acceptStep(final AbstractStepInterpolator interpolator,
                                 final double[] y, final double[] yDot, final double tEnd)
         throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {
 
-            double previousT = interpolator.getGlobalPreviousTime();
+            final double previousT = interpolator.getGlobalPreviousTime();
             final double currentT = interpolator.getGlobalCurrentTime();
+            final int orderingSign = interpolator.isForward() ? +1 : -1;
 
             // initialize the events states if needed
             if (! statesInitialized) {
                 for (EventState state : eventsStates) {
                     state.reinitializeBegin(interpolator);
                 }
                 statesInitialized = true;
             }
 
-            // search for next events that may occur during the step
-            final int orderingSign = interpolator.isForward() ? +1 : -1;
-            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
+            // Loop to handle potential multiple events within the same step.
+            // The 't' variable represents the current start time for the *remaining* part of the step.
+            double t = previousT;
 
-                /** {@inheritDoc} */
-                public int compare(EventState es0, EventState es1) {
-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
-                }
+            while (true) {
 
-            });
+                // 1. Set the interpolator's soft limits for the current sub-step segment [t, currentT]
+                interpolator.setSoftPreviousTime(t);
+                interpolator.setSoftCurrentTime(currentT);
 
+                // 2. Find the earliest event that occurs in the current sub-step [t, currentT]
+                EventState occurringEvent = null;
+                double earliestEventTime = currentT; // Initialize with the end of the current sub-step
+
+                // This re-evaluates ALL event states for the current [t, currentT] interval.
                 for (final EventState state : eventsStates) {
-                if (state.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
-                    occuringEvents.add(state);
+                    if (state.evaluateStep(interpolator)) { // This will update state's internal event time.
+                        if (orderingSign * (state.getEventTime() - earliestEventTime) < 0) {
+                            earliestEventTime = state.getEventTime();
+                            occurringEvent = state;
+                        }
                     }
                 }
 
-            while (!occuringEvents.isEmpty()) {
+                if (occurringEvent == null) {
+                    // No more events in the current sub-step [t, currentT].
+                    // Break from the event handling loop and proceed to final step processing.
+                    break;
+                }
 
-                // handle the chronologically first event
-                final Iterator<EventState> iterator = occuringEvents.iterator();
-                final EventState currentEvent = iterator.next();
-                iterator.remove();
+                // 3. An event was found at earliestEventTime. Process it.
+                final double eventT = earliestEventTime;
 
-                // restrict the interpolator to the first part of the step, up to the event
-                final double eventT = currentEvent.getEventTime();
-                interpolator.setSoftPreviousTime(previousT);
+                // Restrict the interpolator to the part of the step up to the event [t, eventT]
                 interpolator.setSoftCurrentTime(eventT);
 
-                // get state at event time
+                // Get state at event time
                 interpolator.setInterpolatedTime(eventT);
                 final double[] eventY = interpolator.getInterpolatedState().clone();
 
-                // advance all event states to current time
-                currentEvent.stepAccepted(eventT, eventY);
-                isLastStep = currentEvent.stop();
+                // Call stepAccepted for ALL event states up to eventT
+                // This updates their internal tracking of time.
+                for (final EventState state : eventsStates) {
+                    state.stepAccepted(eventT, eventY);
+                }
 
-                // handle the first part of the step, up to the event
+                // Handle the event itself (call stop and reset)
+                isLastStep = occurringEvent.stop();
+                boolean needReset = occurringEvent.reset(eventT, eventY);
+
+                // Handle the part of the step from `t` up to `eventT`
                 for (final StepHandler handler : stepHandlers) {
                     handler.handleStep(interpolator, isLastStep);
                 }
 
                 if (isLastStep) {
-                    // the event asked to stop integration
+                    // The event asked to stop integration
                     System.arraycopy(eventY, 0, y, 0, y.length);
-                    for (final EventState remaining : occuringEvents) {
-                        remaining.stepAccepted(eventT, eventY);
-                    }
                     return eventT;
                 }
 
-                boolean needReset = currentEvent.reset(eventT, eventY);
                 if (needReset) {
-                    // some event handler has triggered changes that
+                    // Some event handler has triggered changes that
                     // invalidate the derivatives, we need to recompute them
                     System.arraycopy(eventY, 0, y, 0, y.length);
                     computeDerivatives(eventT, y, yDot);
                     resetOccurred = true;
-                    for (final EventState remaining : occuringEvents) {
-                        remaining.stepAccepted(eventT, eventY);
-                    }
                     return eventT;
                 }
 
-                // prepare handling of the remaining part of the step
-                previousT = eventT;
-                interpolator.setSoftPreviousTime(eventT);
+                // If neither stop nor reset, continue integration from eventT
+                // Set the new start time for the next iteration of the event handling loop
+                t = eventT;
+            } // End of while(true) event handling loop
+
+            // After the loop, `t` holds the time of the last processed event, or `previousT` if no events occurred.
+            // The remaining part of the step is from `t` to `currentT`.
+            // The interpolator's soft limits need to be reset for this final segment.
+            interpolator.setSoftPreviousTime(t);
             interpolator.setSoftCurrentTime(currentT);
 
-                // check if the same event occurs again in the remaining part of the step
-                if (currentEvent.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
-                    occuringEvents.add(currentEvent);
-                }
-
-            }
-
             // last part of the step, after the last event
             interpolator.setInterpolatedTime(currentT);
             final double[] currentY = interpolator.getInterpolatedState();
+
+            // Notify all event states that the step has been accepted up to currentT.
             for (final EventState state : eventsStates) {
                 state.stepAccepted(currentT, currentY);
                 isLastStep = isLastStep || state.stop();
             }
             isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
             // handle the remaining part of the step, after all events if any
             for (StepHandler handler : stepHandlers) {
                 handler.handleStep(interpolator, isLastStep);
             }
 
             return currentT;
-
     }
\ No newline at end of file
