diff --git a/tmp/36026a49-da0a-4030-8296-6ae91f370868_buggy.java b/tmp/8aef7217-ee6c-42f6-a41a-b5c5419b3389_fixed.java
index b4d4f38..b7b2937 100644
--- a/tmp/36026a49-da0a-4030-8296-6ae91f370868_buggy.java
+++ b/tmp/8aef7217-ee6c-42f6-a41a-b5c5419b3389_fixed.java
@@ -1,123 +1,135 @@
     /** Accept a step, triggering events and step handlers.
      * @param interpolator step interpolator
      * @param y state vector at step end time, must be reset if an event
      * asks for resetting or if an events stops integration during the step
      * @param yDot placeholder array where to put the time derivative of the state vector
      * @param tEnd final integration time
      * @return time at end of step
      * @exception MaxCountExceededException if the interpolator throws one because
      * the number of functions evaluations is exceeded
      * @exception NoBracketingException if the location of an event cannot be bracketed
      * @exception DimensionMismatchException if arrays dimensions do not match equations settings
      * @since 2.2
      */
     protected double acceptStep(final AbstractStepInterpolator interpolator,
                                 final double[] y, final double[] yDot, final double tEnd)
         throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {
 
             double previousT = interpolator.getGlobalPreviousTime();
             final double currentT = interpolator.getGlobalCurrentTime();
 
             // initialize the events states if needed
             if (! statesInitialized) {
                 for (EventState state : eventsStates) {
                     state.reinitializeBegin(interpolator);
                 }
                 statesInitialized = true;
             }
 
             // search for next events that may occur during the step
             final int orderingSign = interpolator.isForward() ? +1 : -1;
             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
 
                 /** {@inheritDoc} */
                 public int compare(EventState es0, EventState es1) {
                     return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
                 }
 
             });
 
+            // Populate occuringEvents for the initial segment [previousT, currentT]
             for (final EventState state : eventsStates) {
                 if (state.evaluateStep(interpolator)) {
                     // the event occurs during the current step
                     occuringEvents.add(state);
                 }
             }
 
             while (!occuringEvents.isEmpty()) {
 
                 // handle the chronologically first event
                 final Iterator<EventState> iterator = occuringEvents.iterator();
                 final EventState currentEvent = iterator.next();
                 iterator.remove();
 
                 // restrict the interpolator to the first part of the step, up to the event
                 final double eventT = currentEvent.getEventTime();
                 interpolator.setSoftPreviousTime(previousT);
                 interpolator.setSoftCurrentTime(eventT);
 
                 // get state at event time
                 interpolator.setInterpolatedTime(eventT);
                 final double[] eventY = interpolator.getInterpolatedState().clone();
 
                 // advance all event states to current time
                 currentEvent.stepAccepted(eventT, eventY);
                 isLastStep = currentEvent.stop();
 
                 // handle the first part of the step, up to the event
                 for (final StepHandler handler : stepHandlers) {
                     handler.handleStep(interpolator, isLastStep);
                 }
 
                 if (isLastStep) {
                     // the event asked to stop integration
                     System.arraycopy(eventY, 0, y, 0, y.length);
                     for (final EventState remaining : occuringEvents) {
                         remaining.stepAccepted(eventT, eventY);
                     }
                     return eventT;
                 }
 
                 boolean needReset = currentEvent.reset(eventT, eventY);
                 if (needReset) {
                     // some event handler has triggered changes that
                     // invalidate the derivatives, we need to recompute them
                     System.arraycopy(eventY, 0, y, 0, y.length);
                     computeDerivatives(eventT, y, yDot);
                     resetOccurred = true;
                     for (final EventState remaining : occuringEvents) {
                         remaining.stepAccepted(eventT, eventY);
                     }
                     return eventT;
                 }
 
-                // prepare handling of the remaining part of the step
-                previousT = eventT;
-                interpolator.setSoftPreviousTime(eventT);
-                interpolator.setSoftCurrentTime(currentT);
-
-                // check if the same event occurs again in the remaining part of the step
-                if (currentEvent.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
-                    occuringEvents.add(currentEvent);
+                // If no stop/reset, continue with the remaining part of the step.
+                // All events must be re-evaluated for the new interval, as their previously
+                // computed event times might be stale due to the path change at eventT.
+                occuringEvents.clear(); // Clear previously found events, as their times might be stale.
+
+                previousT = eventT; // Update the start time for the next segment
+                interpolator.setSoftPreviousTime(eventT); // Adjust interpolator start time
+                interpolator.setSoftCurrentTime(currentT); // Keep interpolator end time
+
+                // Re-evaluate *all* event states for the new segment [eventT, currentT].
+                // This ensures correct event scheduling for the rest of the step.
+                for (final EventState state : eventsStates) {
+                    if (state.evaluateStep(interpolator)) {
+                        occuringEvents.add(state);
+                    }
                 }
 
             }
 
-            // last part of the step, after the last event
+            // last part of the step, after all events if any, or if no events occurred.
+            // The step goes from previousT (which might be the last event time or initial previous time) to currentT.
             interpolator.setInterpolatedTime(currentT);
             final double[] currentY = interpolator.getInterpolatedState();
             for (final EventState state : eventsStates) {
                 state.stepAccepted(currentT, currentY);
                 isLastStep = isLastStep || state.stop();
             }
             isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
             // handle the remaining part of the step, after all events if any
             for (StepHandler handler : stepHandlers) {
                 handler.handleStep(interpolator, isLastStep);
             }
 
+            // Crucial: Update the output state vector y with the state at currentT (end of step).
+            // The caller (Integrator) expects the 'y' array to hold the state at the returned time.
+            System.arraycopy(currentY, 0, y, 0, y.length);
+
             return currentT;
 
     }
\ No newline at end of file
