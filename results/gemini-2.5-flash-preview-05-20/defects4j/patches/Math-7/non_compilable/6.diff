diff --git a/tmp/67cba3b1-0993-4a26-a1d2-3d278eb300e8_buggy.java b/tmp/99a3c889-5b3e-4af8-a0fa-623edbe45bd0_fixed.java
index b4d4f38..d60aa29 100644
--- a/tmp/67cba3b1-0993-4a26-a1d2-3d278eb300e8_buggy.java
+++ b/tmp/99a3c889-5b3e-4af8-a0fa-623edbe45bd0_fixed.java
@@ -1,123 +1,143 @@
     /** Accept a step, triggering events and step handlers.
      * @param interpolator step interpolator
      * @param y state vector at step end time, must be reset if an event
      * asks for resetting or if an events stops integration during the step
      * @param yDot placeholder array where to put the time derivative of the state vector
      * @param tEnd final integration time
      * @return time at end of step
      * @exception MaxCountExceededException if the interpolator throws one because
      * the number of functions evaluations is exceeded
      * @exception NoBracketingException if the location of an event cannot be bracketed
      * @exception DimensionMismatchException if arrays dimensions do not match equations settings
      * @since 2.2
      */
     protected double acceptStep(final AbstractStepInterpolator interpolator,
                                 final double[] y, final double[] yDot, final double tEnd)
         throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {
 
             double previousT = interpolator.getGlobalPreviousTime();
             final double currentT = interpolator.getGlobalCurrentTime();
 
+            // Keep track of event states that have had stepAccepted called during the event handling loop
+            // to avoid redundant calls or calls with inconsistent time points at the end of the step.
+            final Set<EventState> handledEventsInLoop = new HashSet<EventState>();
+
             // initialize the events states if needed
             if (! statesInitialized) {
                 for (EventState state : eventsStates) {
                     state.reinitializeBegin(interpolator);
                 }
                 statesInitialized = true;
             }
 
             // search for next events that may occur during the step
             final int orderingSign = interpolator.isForward() ? +1 : -1;
             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
 
                 /** {@inheritDoc} */
                 public int compare(EventState es0, EventState es1) {
                     return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
                 }
 
             });
 
             for (final EventState state : eventsStates) {
                 if (state.evaluateStep(interpolator)) {
                     // the event occurs during the current step
                     occuringEvents.add(state);
                 }
             }
 
             while (!occuringEvents.isEmpty()) {
 
                 // handle the chronologically first event
                 final Iterator<EventState> iterator = occuringEvents.iterator();
                 final EventState currentEvent = iterator.next();
                 iterator.remove();
 
                 // restrict the interpolator to the first part of the step, up to the event
                 final double eventT = currentEvent.getEventTime();
                 interpolator.setSoftPreviousTime(previousT);
                 interpolator.setSoftCurrentTime(eventT);
 
                 // get state at event time
                 interpolator.setInterpolatedTime(eventT);
                 final double[] eventY = interpolator.getInterpolatedState().clone();
 
-                // advance all event states to current time
+                // advance current event state to event time
                 currentEvent.stepAccepted(eventT, eventY);
+                handledEventsInLoop.add(currentEvent); // Mark this event state as handled
                 isLastStep = currentEvent.stop();
 
                 // handle the first part of the step, up to the event
                 for (final StepHandler handler : stepHandlers) {
                     handler.handleStep(interpolator, isLastStep);
                 }
 
                 if (isLastStep) {
                     // the event asked to stop integration
                     System.arraycopy(eventY, 0, y, 0, y.length);
+                    // Notify remaining occurring events that the step was accepted up to eventT
                     for (final EventState remaining : occuringEvents) {
                         remaining.stepAccepted(eventT, eventY);
+                        handledEventsInLoop.add(remaining); // Mark as handled
                     }
                     return eventT;
                 }
 
                 boolean needReset = currentEvent.reset(eventT, eventY);
                 if (needReset) {
                     // some event handler has triggered changes that
                     // invalidate the derivatives, we need to recompute them
                     System.arraycopy(eventY, 0, y, 0, y.length);
                     computeDerivatives(eventT, y, yDot);
                     resetOccurred = true;
+                    // Notify remaining occurring events that the step was accepted up to eventT
                     for (final EventState remaining : occuringEvents) {
                         remaining.stepAccepted(eventT, eventY);
+                        handledEventsInLoop.add(remaining); // Mark as handled
                     }
                     return eventT;
                 }
 
                 // prepare handling of the remaining part of the step
                 previousT = eventT;
                 interpolator.setSoftPreviousTime(eventT);
                 interpolator.setSoftCurrentTime(currentT);
 
                 // check if the same event occurs again in the remaining part of the step
                 if (currentEvent.evaluateStep(interpolator)) {
                     // the event occurs during the current step
                     occuringEvents.add(currentEvent);
                 }
 
             }
 
-            // last part of the step, after the last event
+            // last part of the step, after the last event (if any, or the whole step if no events)
             interpolator.setInterpolatedTime(currentT);
             final double[] currentY = interpolator.getInterpolatedState();
+
+            // BUG FIX: Ensure the output state vector 'y' is updated with the state at currentT.
+            // This is essential if no events caused a stop or reset that returned early.
+            System.arraycopy(currentY, 0, y, 0, y.length);
+
+            // Notify all event states that did not trigger an event in this step,
+            // or were not otherwise notified inside the event handling loop.
             for (final EventState state : eventsStates) {
+                if (!handledEventsInLoop.contains(state)) {
                     state.stepAccepted(currentT, currentY);
+                }
+                // Accumulate stop conditions from all event states, regardless of whether they triggered in this step.
                 isLastStep = isLastStep || state.stop();
             }
+            // Also set isLastStep if the integration reached the final time tEnd.
             isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
             // handle the remaining part of the step, after all events if any
             for (StepHandler handler : stepHandlers) {
                 handler.handleStep(interpolator, isLastStep);
             }
 
             return currentT;
 
     }
\ No newline at end of file
