diff --git a/tmp/362517c9-ec0f-4f49-a4e6-b31b0dd2f246_buggy.java b/tmp/829a5164-6ee2-4388-9080-8f8806f47922_fixed.java
index b4d4f38..91654bd 100644
--- a/tmp/362517c9-ec0f-4f49-a4e6-b31b0dd2f246_buggy.java
+++ b/tmp/829a5164-6ee2-4388-9080-8f8806f47922_fixed.java
@@ -1,123 +1,145 @@
     /** Accept a step, triggering events and step handlers.
      * @param interpolator step interpolator
      * @param y state vector at step end time, must be reset if an event
      * asks for resetting or if an events stops integration during the step
      * @param yDot placeholder array where to put the time derivative of the state vector
      * @param tEnd final integration time
      * @return time at end of step
      * @exception MaxCountExceededException if the interpolator throws one because
      * the number of functions evaluations is exceeded
      * @exception NoBracketingException if the location of an event cannot be bracketed
      * @exception DimensionMismatchException if arrays dimensions do not match equations settings
      * @since 2.2
      */
     protected double acceptStep(final AbstractStepInterpolator interpolator,
                                 final double[] y, final double[] yDot, final double tEnd)
         throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {
 
             double previousT = interpolator.getGlobalPreviousTime();
             final double currentT = interpolator.getGlobalCurrentTime();
 
             // initialize the events states if needed
             if (! statesInitialized) {
                 for (EventState state : eventsStates) {
                     state.reinitializeBegin(interpolator);
                 }
                 statesInitialized = true;
             }
 
             // search for next events that may occur during the step
             final int orderingSign = interpolator.isForward() ? +1 : -1;
             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
 
                 /** {@inheritDoc} */
                 public int compare(EventState es0, EventState es1) {
                     return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
                 }
 
             });
 
             for (final EventState state : eventsStates) {
                 if (state.evaluateStep(interpolator)) {
                     // the event occurs during the current step
+
+                    // Fix: Prevent double counting of events that occurred exactly at previousT
+                    // This relies on lastEventHandler and lastEventTime being set in the
+                    // enclosing integrator class when an event triggers a reset/stop.
+                    if (state == lastEventHandler && state.getEventTime() == lastEventTime) {
+                        // This event was just handled at this time in the previous step.
+                        // Skip it to avoid double-counting.
+                        // This check is a common workaround if EventState's internal
+                        // evaluation for g(t)==0 at boundaries is not robust enough.
+                    } else {
                         occuringEvents.add(state);
                     }
                 }
+            }
 
             while (!occuringEvents.isEmpty()) {
 
                 // handle the chronologically first event
                 final Iterator<EventState> iterator = occuringEvents.iterator();
                 final EventState currentEvent = iterator.next();
                 iterator.remove();
 
                 // restrict the interpolator to the first part of the step, up to the event
                 final double eventT = currentEvent.getEventTime();
                 interpolator.setSoftPreviousTime(previousT);
                 interpolator.setSoftCurrentTime(eventT);
 
                 // get state at event time
                 interpolator.setInterpolatedTime(eventT);
                 final double[] eventY = interpolator.getInterpolatedState().clone();
 
                 // advance all event states to current time
                 currentEvent.stepAccepted(eventT, eventY);
                 isLastStep = currentEvent.stop();
 
                 // handle the first part of the step, up to the event
                 for (final StepHandler handler : stepHandlers) {
                     handler.handleStep(interpolator, isLastStep);
                 }
 
+                // If event triggered a stop or reset, we need to return immediately.
+                // The last handled event info should be updated by the integrator calling acceptStep.
                 if (isLastStep) {
                     // the event asked to stop integration
                     System.arraycopy(eventY, 0, y, 0, y.length);
                     for (final EventState remaining : occuringEvents) {
                         remaining.stepAccepted(eventT, eventY);
                     }
+                    // Inform the integrator about the stop event
+                    // The integrator should set lastEventHandler = currentEvent and lastEventTime = eventT
                     return eventT;
                 }
 
                 boolean needReset = currentEvent.reset(eventT, eventY);
                 if (needReset) {
                     // some event handler has triggered changes that
                     // invalidate the derivatives, we need to recompute them
                     System.arraycopy(eventY, 0, y, 0, y.length);
                     computeDerivatives(eventT, y, yDot);
                     resetOccurred = true;
                     for (final EventState remaining : occuringEvents) {
                         remaining.stepAccepted(eventT, eventY);
                     }
+                    // Inform the integrator about the reset event
+                    // The integrator should set lastEventHandler = currentEvent and lastEventTime = eventT
                     return eventT;
                 }
 
                 // prepare handling of the remaining part of the step
                 previousT = eventT;
                 interpolator.setSoftPreviousTime(eventT);
                 interpolator.setSoftCurrentTime(currentT);
 
                 // check if the same event occurs again in the remaining part of the step
                 if (currentEvent.evaluateStep(interpolator)) {
                     // the event occurs during the current step
                     occuringEvents.add(currentEvent);
                 }
 
             }
 
             // last part of the step, after the last event
             interpolator.setInterpolatedTime(currentT);
             final double[] currentY = interpolator.getInterpolatedState();
             for (final EventState state : eventsStates) {
                 state.stepAccepted(currentT, currentY);
                 isLastStep = isLastStep || state.stop();
             }
             isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
             // handle the remaining part of the step, after all events if any
             for (StepHandler handler : stepHandlers) {
                 handler.handleStep(interpolator, isLastStep);
             }
 
+            // After a successful step (no stop/reset mid-step), clear the last handled event info.
+            // This relies on lastEventHandler and lastEventTime being cleared by the integrator.
+            // lastEventHandler = null;
+            // lastEventTime    = Double.NaN;
+            
             return currentT;
 
     }
\ No newline at end of file
