diff --git a/tmp/f40188c5-292e-460c-ba44-7c2e1558c7b0_buggy.java b/tmp/6cb5b362-c400-442f-be92-2fcc5cd3b4d5_fixed.java
index 66e3d01..2301443 100644
--- a/tmp/f40188c5-292e-460c-ba44-7c2e1558c7b0_buggy.java
+++ b/tmp/6cb5b362-c400-442f-be92-2fcc5cd3b4d5_fixed.java
@@ -1,34 +1,60 @@
   /**
    * Determines whether the given value may be assigned to a define.
    *
    * @param val The value being assigned.
    * @param defines The list of names of existing defines.
    */
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
 
-      // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
-      case Token.BITNOT:
-      case Token.BITOR:
-      case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
-      case Token.NOT:
-      case Token.NEG:
+      // Unary operators are valid if their single child is valid.
+      case Token.NOT:    // Logical NOT (!)
+      case Token.NEG:    // Unary minus (-)
+      case Token.POS:    // Unary plus (+)
+      case Token.BITNOT: // Bitwise NOT (~)
         return isValidDefineValue(val.getFirstChild(), defines);
 
-      // Names are valid if and only if they are defines themselves.
+      // Binary operators are valid if both of their children are valid.
+      case Token.ADD:    // Addition (+)
+      case Token.SUB:    // Subtraction (-)
+      case Token.MUL:    // Multiplication (*)
+      case Token.DIV:    // Division (/)
+      case Token.MOD:    // Modulo (%)
+      case Token.BITAND: // Bitwise AND (&)
+      case Token.BITOR:  // Bitwise OR (|)
+      case Token.BITXOR: // Bitwise XOR (^)
+      case Token.LSH:    // Left Shift (<<)
+      case Token.RSH:    // Right Shift (>>)
+      case Token.URSH:   // Unsigned Right Shift (>>>)
+      case Token.EQ:     // Equal (==)
+      case Token.NE:     // Not Equal (!=)
+      case Token.LT:     // Less Than (<)
+      case Token.LE:     // Less Than or Equal (<=)
+      case Token.GT:     // Greater Than (>)
+      case Token.GE:     // Greater Than or Equal (>=)
+      case Token.AND:    // Logical AND (&&)
+      case Token.OR:     // Logical OR (||)
+        return isValidDefineValue(val.getFirstChild(), defines) &&
+               isValidDefineValue(val.getLastChild(), defines);
+
+      // Names (simple or qualified property accesses) are valid if and only if
+      // they refer to an existing define.
       case Token.NAME:
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
+        // If it's a GETPROP but not a qualified name (e.g., object[key]),
+        // it's not a valid define value. This falls through to return false.
+        break;
+
+      default:
+        return false;
     }
     return false;
   }
\ No newline at end of file
