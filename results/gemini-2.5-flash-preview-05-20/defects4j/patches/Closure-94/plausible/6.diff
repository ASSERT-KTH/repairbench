diff --git a/tmp/27d129d2-daab-448f-afdb-15eb5f1906b6_buggy.java b/tmp/9e5941e3-0237-446f-b6db-202a508d3cea_fixed.java
index 66e3d01..1129ac1 100644
--- a/tmp/27d129d2-daab-448f-afdb-15eb5f1906b6_buggy.java
+++ b/tmp/9e5941e3-0237-446f-b6db-202a508d3cea_fixed.java
@@ -1,34 +1,53 @@
   /**
    * Determines whether the given value may be assigned to a define.
    *
    * @param val The value being assigned.
    * @param defines The list of names of existing defines.
    */
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
 
-      // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
-      case Token.BITNOT:
-      case Token.BITOR:
-      case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
-      case Token.NOT:
-      case Token.NEG:
+      // Unary operators are valid if their single child is valid.
+      case Token.NOT:  // Logical NOT, e.g., !true
+      case Token.NEG:  // Unary minus, e.g., -1
+      case Token.BITNOT: // Bitwise NOT, e.g., ~1
         return isValidDefineValue(val.getFirstChild(), defines);
 
+      // Binary operators are valid if both children are valid.
+      // This includes arithmetic, bitwise, logical, and comparison operators.
+      case Token.ADD:    // Addition and String Concatenation, e.g., 1 + 2, 'a' + 'b'
+      case Token.SUB:    // Subtraction, e.g., 5 - 3
+      case Token.MUL:    // Multiplication, e.g., 2 * 3
+      case Token.DIV:    // Division, e.g., 6 / 2
+      case Token.MOD:    // Modulo, e.g., 7 % 3
+      case Token.BITAND: // Bitwise AND, e.g., 1 & 2
+      case Token.BITOR:  // Bitwise OR, e.g., 1 | 2
+      case Token.BITXOR: // Bitwise XOR, e.g., 1 ^ 2
+      case Token.AND:    // Logical AND, e.g., true && false
+      case Token.OR:     // Logical OR, e.g., true || false
+      case Token.EQ:     // Equality, e.g., 1 == 1
+      case Token.NE:     // Inequality, e.g., 1 != 2
+      case Token.SHEQ:   // Strict Equality, e.g., 1 === 1
+      case Token.SHNE:   // Strict Inequality, e.g., 1 !== 2
+      case Token.LT:     // Less than, e.g., 1 < 2
+      case Token.LE:     // Less than or equal, e.g., 1 <= 1
+      case Token.GT:     // Greater than, e.g., 2 > 1
+      case Token.GE:     // Greater than or equal, e.g., 2 >= 2
+        return isValidDefineValue(val.getFirstChild(), defines) &&
+               isValidDefineValue(val.getLastChild(), defines);
+
       // Names are valid if and only if they are defines themselves.
       case Token.NAME:
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
+        // Fall through to false if it's not a qualified name or not found in defines.
     }
     return false;
   }
