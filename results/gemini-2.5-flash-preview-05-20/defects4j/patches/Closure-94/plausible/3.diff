diff --git a/tmp/11b67bfe-60d2-45e1-9f62-95bf33f5a2e0_buggy.java b/tmp/157b7818-fad7-4355-a03b-6cae4ad81457_fixed.java
index 66e3d01..6163388 100644
--- a/tmp/11b67bfe-60d2-45e1-9f62-95bf33f5a2e0_buggy.java
+++ b/tmp/157b7818-fad7-4355-a03b-6cae4ad81457_fixed.java
@@ -1,34 +1,55 @@
   /**
    * Determines whether the given value may be assigned to a define.
    *
    * @param val The value being assigned.
    * @param defines The list of names of existing defines.
    */
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
 
-      // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
-      case Token.BITNOT:
-      case Token.BITOR:
-      case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
-      case Token.NOT:
-      case Token.NEG:
+      // Unary operators are valid if the child is valid.
+      case Token.NOT: // Logical NOT (!)
+      case Token.NEG: // Unary minus (-)
+      case Token.BITNOT: // Bitwise NOT (~)
         return isValidDefineValue(val.getFirstChild(), defines);
 
-      // Names are valid if and only if they are defines themselves.
+      // Binary operators are valid if all their children are valid.
+      // This includes arithmetic, bitwise, and comparison operators.
+      case Token.ADD: // +
+      case Token.SUB: // -
+      case Token.MUL: // *
+      case Token.DIV: // /
+      case Token.MOD: // %
+      case Token.BITAND: // &
+      case Token.BITOR: // |
+      case Token.BITXOR: // ^
+      case Token.EQ:   // ==
+      case Token.NE:   // !=
+      case Token.SHEQ: // ===
+      case Token.SHNE: // !==
+      case Token.LT:   // <
+      case Token.LE:   // <=
+      case Token.GT:   // >
+      case Token.GE:   // >=
+        for (Node child : val.children()) {
+          if (!isValidDefineValue(child, defines)) {
+            return false;
+          }
+        }
+        return true;
+
+      // Names (simple or qualified) are valid if and only if they are defines themselves.
       case Token.NAME:
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
+        // Fall through to default if not a qualified name or not found in defines.
     }
     return false;
   }
