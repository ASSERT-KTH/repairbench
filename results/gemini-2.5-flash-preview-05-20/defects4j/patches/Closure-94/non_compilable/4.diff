diff --git a/tmp/d509c886-9a15-4b5e-bb15-f7713bea2fe5_buggy.java b/tmp/4fa35370-0504-40e2-b54d-e745de8a1953_fixed.java
index 66e3d01..26a8aa1 100644
--- a/tmp/d509c886-9a15-4b5e-bb15-f7713bea2fe5_buggy.java
+++ b/tmp/4fa35370-0504-40e2-b54d-e745de8a1953_fixed.java
@@ -1,34 +1,49 @@
   /**
    * Determines whether the given value may be assigned to a define.
    *
    * @param val The value being assigned.
    * @param defines The list of names of existing defines.
    */
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
 
-      // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
-      case Token.BITNOT:
-      case Token.BITOR:
-      case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
+      // Unary operators are valid if the child is valid.
       case Token.NOT:
       case Token.NEG:
+      case Token.BITNOT:
         return isValidDefineValue(val.getFirstChild(), defines);
 
+      // Binary operators are valid if both children are valid.
+      case Token.BITAND:
+      case Token.BITOR:
+      case Token.BITXOR:
+      case Token.ADD: // e.g., 'a' + 'b', 1 + 2
+      case Token.SUB: // e.g., 1 - 2
+      case Token.MUL: // e.g., 1 * 2
+      case Token.DIV: // e.g., 1 / 2
+      case Token.MOD: // e.g., 1 % 2
+      case Token.EQ:  // e.g., true == false
+      case Token.NE:  // e.g., 1 != 2
+      case Token.LT:  // e.g., 1 < 2
+      case Token.LE:  // e.g., 1 <= 2
+      case Token.GT:  // e.g., 1 > 2
+      case Token.GE:  // e.g., 1 >= 2
+      case Token.AND: // e.g., true && false
+      case Token.OR:  // e.g., true || false
+        return isValidDefineValue(val.getFirstChild(), defines) &&
+               isValidDefineValue(val.getSecondChild(), defines);
+
       // Names are valid if and only if they are defines themselves.
       case Token.NAME:
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
     }
     return false;
   }
\ No newline at end of file
