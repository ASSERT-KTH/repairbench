diff --git a/tmp/32592ea3-a60f-4d8b-9ee2-c8ff4aa52202_buggy.java b/tmp/1589e11d-4c99-47ec-9144-b9bf1929510a_fixed.java
index d6a560a..af6ee16 100644
--- a/tmp/32592ea3-a60f-4d8b-9ee2-c8ff4aa52202_buggy.java
+++ b/tmp/1589e11d-4c99-47ec-9144-b9bf1929510a_fixed.java
@@ -1,33 +1,42 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
+    // Early cycle detection: If this type is already being resolved upstream,
+    // it implies a cycle in the dependency graph. Report the error and
+    // return 'this' to break the recursion and allow subsequent analysis
+    // to proceed, albeit with an incomplete type.
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t);
+      return this;
+    }
+
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
-    if (resolved) {
-      super.resolveInternal(t, enclosing);
-      finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
-    }
 
+    if (!resolved) {
+      // If not resolved by registry, try resolving via properties.
       resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
     }
 
+    // Resolve internal properties of *this* type and finalize its state.
+    // This must be called only once after all attempts to resolve the referenced
+    // type's external dependencies (registry/properties) have been made.
+    // This call might also mark the type as 'resolved'.
     super.resolveInternal(t, enclosing);
+
+    // Perform post-resolution cleanup/finalization if the type is now resolved.
     if (isResolved()) {
       finishPropertyContinuations();
     }
+
+    // Return the final resolved type.
+    // If registry.isLastGeneration(), it means the type itself was a reference
+    // to another type which has now been fully resolved.
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
