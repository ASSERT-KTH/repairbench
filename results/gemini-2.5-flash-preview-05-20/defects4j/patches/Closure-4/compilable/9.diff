diff --git a/tmp/9dcd4d79-4cb2-4ceb-8c9b-2a9c5d0001a7_buggy.java b/tmp/f4ba487f-719e-449d-b377-02faab4caaf8_fixed.java
index d6a560a..b3c12dc 100644
--- a/tmp/9dcd4d79-4cb2-4ceb-8c9b-2a9c5d0001a7_buggy.java
+++ b/tmp/f4ba487f-719e-449d-b377-02faab4caaf8_fixed.java
@@ -1,33 +1,48 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
+
+    // APR Fix: Detect implicit prototype cycle at the very beginning of the
+    // resolution process for this type. If a cycle is detected (meaning this
+    // type is already being resolved further up the call stack), it indicates
+    // an infinite recursion. Report the cycle error and return immediately
+    // to prevent StackOverflowError.
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t);
+      // Return 'this' to break the recursion and indicate an unresolved/erroneous state.
+      // Further attempts to resolve this type should respect its errored state.
+      return this;
+    }
+
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
+
+    // The original code had additional `detectImplicitPrototypeCycle()` checks
+    // after `resolveViaRegistry` and `resolveViaProperties`. If the initial
+    // check at the method entry correctly prevents re-entry for this type
+    // while it's being resolved, these subsequent checks are not needed to
+    // prevent StackOverflowError. They might have been intended for other
+    // cycle detection semantics, but for addressing the StackOverflowError,
+    // the early return is crucial.
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
