diff --git a/tmp/2b4d5ea6-6e1f-441c-8f88-d2d5375d39b8_buggy.java b/tmp/75247e48-1ae5-475e-a8b6-da7e83209c54_fixed.java
index d6a560a..65ac832 100644
--- a/tmp/2b4d5ea6-6e1f-441c-8f88-d2d5375d39b8_buggy.java
+++ b/tmp/75247e48-1ae5-475e-a8b6-da7e83209c54_fixed.java
@@ -1,33 +1,54 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
+    // Check for cyclic resolution attempts at the very beginning.
+    // If this type is currently being resolved (i.e., it's on the resolution stack),
+    // we've detected a cycle. Handle it and return immediately to prevent StackOverflowError.
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t);
+      // Return the resolved type (likely an error type indicating the cycle)
+      // to break the recursion for this path.
+      return getReferencedType();
+    }
+
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
+
+    // If a cycle was detected during or after registry resolution, handle and return.
+    // This handles cases where `resolveViaRegistry` completed but detected a cycle
+    // that wasn't caught by the initial `detectImplicitPrototypeCycle()` check
+    // (e.g., a cycle involving *other* types that only became apparent now).
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return getReferencedType();
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
+    // If not resolved via registry (and no cycle was detected that broke the path),
+    // try resolving via properties.
     resolveViaProperties(t, enclosing);
+
+    // Check for cycles again after property resolution, as it might expose new ones.
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return getReferencedType();
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
