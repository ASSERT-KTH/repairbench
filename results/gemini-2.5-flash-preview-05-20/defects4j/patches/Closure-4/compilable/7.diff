diff --git a/tmp/9eeb25fc-7fa6-4a0e-89d5-97f5fcfbcf49_buggy.java b/tmp/3613c451-613f-4924-875f-5ea8afc11710_fixed.java
index d6a560a..85b6159 100644
--- a/tmp/9eeb25fc-7fa6-4a0e-89d5-97f5fcfbcf49_buggy.java
+++ b/tmp/3613c451-613f-4924-875f-5ea8afc11710_fixed.java
@@ -1,33 +1,39 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
+    // Early exit for detected cycles to prevent StackOverflowError.
+    // If detectImplicitPrototypeCycle() returns true, it means this type
+    // is already on the resolution stack, indicating a circular dependency.
+    // In this case, we report the cycle error and return to break the recursion.
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t);
+      // Returning 'this' indicates that the resolution failed due to a cycle,
+      // preventing further recursive calls and allowing the system to
+      // proceed with the reported error.
+      return this;
+    }
+
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
