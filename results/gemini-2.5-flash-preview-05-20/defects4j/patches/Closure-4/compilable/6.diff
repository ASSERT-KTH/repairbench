diff --git a/tmp/f93e69d2-9788-47ce-a69b-041675f51238_buggy.java b/tmp/94feec4a-8ef9-4211-adcb-3e0915ca463b_fixed.java
index d6a560a..a0e0e8a 100644
--- a/tmp/f93e69d2-9788-47ce-a69b-041675f51238_buggy.java
+++ b/tmp/94feec4a-8ef9-4211-adcb-3e0915ca463b_fixed.java
@@ -1,33 +1,49 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Check for cycles at the very beginning of the resolution process.
+    // If this type is already being resolved (i.e., it's on the resolution stack),
+    // it means a cycle has been detected in the inheritance or implementation chain.
+    if (detectImplicitPrototypeCycle()) {
+      // Report the cycle error. The handleTypeCycle() method is expected to log
+      // the appropriate "Parse error. Cycle detected in inheritance chain..." message.
+      handleTypeCycle(t);
+      // To break the infinite recursion and prevent a StackOverflowError,
+      // return 'this' immediately. This type is now considered in an error state
+      // regarding its resolution, and further attempts to resolve it recursively
+      // would only deepen the stack.
+      return this;
+    }
+
+    // Original resolution logic starts here. The previous checks for
+    // detectImplicitPrototypeCycle() after resolveViaRegistry and resolveViaProperties
+    // are now redundant because any recursive call to resolveInternal would
+    // be caught by the new check at the very top of the function.
+
+    // Attempt to resolve the type via the registry.
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
 
     if (resolved) {
+      // If resolved via registry, complete the internal resolution process.
+      // This might involve resolving supertypes or other related types.
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
+      // Return the referenced type if it's the last generation, otherwise 'this'.
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
+    // If not resolved via registry, attempt to resolve via properties.
     resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
 
+    // Complete the internal resolution process after attempting property-based resolution.
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
+    // Return the referenced type if it's the last generation, otherwise 'this'.
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
