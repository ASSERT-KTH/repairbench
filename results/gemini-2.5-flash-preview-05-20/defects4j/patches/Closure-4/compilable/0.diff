diff --git a/tmp/96efa2f4-0ac7-4d97-938d-a91805ae6dba_buggy.java b/tmp/9a38af97-6774-49d6-b6ba-a348c6447a8a_fixed.java
index d6a560a..5be9776 100644
--- a/tmp/96efa2f4-0ac7-4d97-938d-a91805ae6dba_buggy.java
+++ b/tmp/9a38af97-6774-49d6-b6ba-a348c6447a8a_fixed.java
@@ -1,33 +1,53 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
+
+    // If a cycle is detected after attempting resolution via registry,
+    // handle the cycle and return early to prevent infinite recursion.
+    // When a cycle is detected, it means 'this' type is already on the
+    // resolution stack. To break the infinite loop, we report the error
+    // and then mark the type as "resolved" (in an erroneous state)
+    // and return immediately, without further recursive calls.
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      // After handling the cycle, the type should be considered resolved in an
+      // erroneous state to prevent further recursion.
+      // Do NOT call super.resolveInternal here, as it might re-trigger the cycle
+      // if it attempts to resolve the underlying type again.
+      // The handleTypeCycle() method is expected to put the type into a consistent
+      // error state.
+      return this;
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
+
+    // If a cycle is detected after attempting resolution via properties,
+    // handle the cycle and return early.
+    // Similar to the registry case, this prevents further recursion.
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      // Same as above: prevent further recursive calls.
+      return this;
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
