diff --git a/tmp/447c3f62-0d5c-4526-bfd4-788e22781bc7_buggy.java b/tmp/03d90fcf-e571-4580-8035-69ca5db7eaeb_fixed.java
index d6a560a..6955598 100644
--- a/tmp/447c3f62-0d5c-4526-bfd4-788e22781bc7_buggy.java
+++ b/tmp/03d90fcf-e571-4580-8035-69ca5db7eaeb_fixed.java
@@ -1,33 +1,38 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      // If a cycle is detected, report it and immediately stop further resolution for this type
+      // in this call stack. This prevents StackOverflowError and prioritizes cycle error messages.
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      // Same logic: if a cycle is detected after properties resolution, stop.
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
