diff --git a/tmp/510cfb18-6761-4831-bdc4-415a98fd932a_buggy.java b/tmp/d43c9e5b-ba8b-4f94-96bb-6df8a163812f_fixed.java
index d6a560a..b870d27 100644
--- a/tmp/510cfb18-6761-4831-bdc4-415a98fd932a_buggy.java
+++ b/tmp/d43c9e5b-ba8b-4f94-96bb-6df8a163812f_fixed.java
@@ -1,33 +1,49 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
+    // If a cycle is detected at this point, it means this type is already
+    // being resolved further up the call stack, and we have encountered it again.
+    // Handling the cycle and immediately returning prevents StackOverflowError.
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t);
+      // Once the cycle is handled, further deep resolution for this type
+      // should be prevented. Return 'this' or the already established
+      // referenced type (if set up by handleTypeCycle) to break the recursion.
+      // Maintaining consistency with the original return structure.
+      return registry.isLastGeneration() ? getReferencedType() : this;
+    }
+
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
+
+    // The cycle detection has been moved to the beginning of the function.
+    // The checks after resolveViaRegistry/resolveViaProperties are no longer
+    // necessary as the initial check handles the recursive cycle detection
+    // by immediately returning upon re-entry for a cyclic type.
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
+    // If not resolved via registry, try via properties.
     resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
 
+    // No need for a second cycle check here. If a cycle exists, the initial
+    // check upon re-entry into resolveInternal (for a cyclic type) would have caught it.
+
+    // Common post-resolution steps.
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
