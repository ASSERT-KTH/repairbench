diff --git a/tmp/f743de52-97ca-4ab0-a12b-f59d12d83ad1_buggy.java b/tmp/cc1f07b8-8780-4b88-9d0c-70996c04d4bf_fixed.java
index d6a560a..9ef74d4 100644
--- a/tmp/f743de52-97ca-4ab0-a12b-f59d12d83ad1_buggy.java
+++ b/tmp/cc1f07b8-8780-4b88-9d0c-70996c04d4bf_fixed.java
@@ -1,33 +1,70 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
+    // Call super.resolveInternal first. This ensures the base JSType's cycle
+    // detection (marking as 'resolving' via setResolvedType(this)) and
+    // initial resolution are handled. This is crucial to prevent StackOverflowError
+    // in cases of recursive type definitions.
+    JSType resolvedBySuper = super.resolveInternal(t, enclosing);
+
+    // If super.resolveInternal has already finished resolving this type to something
+    // other than itself, or if it detected a cycle and returned 'this' (meaning
+    // it's now marked as resolved and handled the cycle at its level), we can return its result.
+    // The `isResolved()` check on `this` will tell us if it's considered resolved.
+    // If resolvedBySuper is not 'this', super already found a complete resolution.
+    // If resolvedBySuper is 'this' and `isResolved()` is true, it means super
+    // identified it as cyclic or couldn't resolve further and marked it.
+    if (resolvedBySuper != this || (isResolved() && getResolvedType() == this)) {
+      // If super resolved it (or indicated a cycle by returning 'this' when resolved),
+      // finish TemplatizedType-specific continuations.
+      finishPropertyContinuations();
+      return resolvedBySuper;
+    }
+
+    // At this point, `this` is marked as 'resolving' (by `super.resolveInternal`),
+    // but it's not fully resolved by the superclass yet.
+    // Proceed with TemplatizedType-specific resolution mechanisms.
+    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);
+
+    // Check for implicit prototype cycle after registry resolution.
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
-    }
-
-    if (resolved) {
-      super.resolveInternal(t, enclosing);
+      // If a cycle is detected and handled (reported), finalize properties
+      // and return 'this' to represent the cyclic type.
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+      return this;
     }
 
+    if (!resolvedViaRegistry) {
+      // If registry resolution didn't succeed, try properties resolution.
       resolveViaProperties(t, enclosing);
+      // Check for cycles again after properties resolution.
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        finishPropertyContinuations();
+        return this;
+      }
+    }
+
+    // Determine the final resolved type based on TemplatizedType's specific logic.
+    JSType finalTemplatizedResolution = registry.isLastGeneration() ?
+        getReferencedType() : this;
+
+    // If the TemplatizedType's logic found a different final resolution than `this`
+    // (which is the temporary state), update the `resolvedType` field of `this`.
+    // This ensures `this.isResolved()` reflects the true resolved state.
+    if (finalTemplatizedResolution != this) {
+      setResolvedType(finalTemplatizedResolution);
     }
 
-    super.resolveInternal(t, enclosing);
+    // Finish property continuations if this type is now considered fully resolved.
+    // The `isResolved()` check here confirms that `setResolvedType` was called
+    // with a final type (or 'this' for a cycle, which is also a final state for resolution).
     if (isResolved()) {
       finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+
+    return finalTemplatizedResolution;
   }
\ No newline at end of file
