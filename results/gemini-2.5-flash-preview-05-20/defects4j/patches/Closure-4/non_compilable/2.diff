diff --git a/tmp/cddbef08-57da-4fec-b09a-100bccd76f05_buggy.java b/tmp/568fcac8-b8b6-4b4b-a1e2-f8275381fbf1_fixed.java
index d6a560a..d878936 100644
--- a/tmp/cddbef08-57da-4fec-b09a-100bccd76f05_buggy.java
+++ b/tmp/568fcac8-b8b6-4b4b-a1e2-f8275381fbf1_fixed.java
@@ -1,33 +1,68 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
+    // If the type has already been resolved, return its referenced type.
+    // This prevents unnecessary re-resolution and is the base case for recursion.
+    if (isResolved()) {
+      return getReferencedType();
+    }
+
+    // If this type is currently in the process of being resolved,
+    // it indicates a cyclic dependency. Report the cycle and return
+    // `this` to break the recursion and prevent a StackOverflowError.
+    // This is the critical check for handling type cycles during resolution.
+    if (isResolving()) {
+      handleTypeCycle(t);
+      return this;
+    }
+
+    // Mark this type as currently resolving to detect future cycles.
+    setResolving(true);
+    try {
       // TODO(user): Investigate whether it is really necessary to keep two
       // different mechanisms for resolving named types, and if so, which order
       // makes more sense. Now, resolution via registry is first in order to
       // avoid triggering the warnings built into the resolution via properties.
       boolean resolved = resolveViaRegistry(t, enclosing);
+
+      // Check for implicit prototype cycles immediately after registry resolution.
+      // This is distinct from the direct resolution cycle caught by `isResolving()`.
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
       }
 
       if (resolved) {
+        // If resolution via registry was successful, finalize the resolution.
+        // The `super.resolveInternal` call from `ProxyObjectType` manages setting
+        // the `referencedType` and the `resolved` flag based on the `resolve` method.
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
         return registry.isLastGeneration() ?
             getReferencedType() : this;
       }
 
+      // If not resolved via registry, try resolution via properties.
       resolveViaProperties(t, enclosing);
+      // Check for implicit prototype cycles after property resolution.
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
       }
 
+      // Finalize the resolution, potentially setting the `resolved` flag.
       super.resolveInternal(t, enclosing);
+      // The `isResolved()` check here reflects whether the resolution via properties
+      // or `super.resolveInternal` successfully marked the type as resolved.
       if (isResolved()) {
         finishPropertyContinuations();
       }
       return registry.isLastGeneration() ?
           getReferencedType() : this;
+    } finally {
+      // Ensure the resolving flag is reset when resolution completes or fails,
+      // to allow for re-resolution if needed (e.g., in a different generation)
+      // and to prevent false cycle detections.
+      setResolving(false);
+    }
   }
\ No newline at end of file
