diff --git a/tmp/53c47849-7312-45ba-b9f3-688b0c68aef1_buggy.java b/tmp/bfa4d448-0cd6-4688-a70a-401732648119_fixed.java
index 6b09955..e0a8ffe 100644
--- a/tmp/53c47849-7312-45ba-b9f3-688b0c68aef1_buggy.java
+++ b/tmp/bfa4d448-0cd6-4688-a70a-401732648119_fixed.java
@@ -1,121 +1,18 @@
-    /** {@inheritDoc} */
-    protected final double doSolve() {
-        // Get initial solution
-        double x0 = getMin();
-        double x1 = getMax();
-        double f0 = computeObjectiveValue(x0);
-        double f1 = computeObjectiveValue(x1);
-
-        // If one of the bounds is the exact root, return it. Since these are
-        // not under-approximations or over-approximations, we can return them
-        // regardless of the allowed solutions.
-        if (f0 == 0.0) {
-            return x0;
-        }
-        if (f1 == 0.0) {
-            return x1;
-        }
-
-        // Verify bracketing of initial solution.
-        verifyBracketing(x0, x1);
-
-        // Get accuracies.
-        final double ftol = getFunctionValueAccuracy();
-        final double atol = getAbsoluteAccuracy();
-        final double rtol = getRelativeAccuracy();
-
-        // Keep track of inverted intervals, meaning that the left bound is
-        // larger than the right bound.
-        boolean inverted = false;
-
-        // Keep finding better approximations.
-        while (true) {
-            // Calculate the next approximation.
-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
-            final double fx = computeObjectiveValue(x);
-
-            // If the new approximation is the exact root, return it. Since
-            // this is not an under-approximation or an over-approximation,
-            // we can return it regardless of the allowed solutions.
-            if (fx == 0.0) {
-                return x;
-            }
-
-            // Update the bounds with the new approximation.
-            if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
-                x0 = x1;
-                f0 = f1;
-                inverted = !inverted;
-            } else {
+            if (f1 * fx < 0) { // Case 1: Root in [x, x1]
+                x0 = x1; // BUG: This should be x0 = x
+                f0 = f1; // BUG: This should be f0 = fx
+                inverted = !inverted; // This effectively swaps x0 and x1 conceptually
+            } else { // Case 2: Root in [x0, x] AND apply scaling
                 switch (method) {
                 case ILLINOIS:
-                    f0 *= 0.5;
+                    f0 *= 0.5; // Scales f0 (correctly for this case)
                     break;
                 case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
+                    f0 *= f1 / (f1 + fx); // Scales f0 (correctly for this case)
                     break;
-                        // Update formula cannot make any progress: Update the
-                        // search interval.
-                default:
-                    // Should never happen.
+                // ...
                 }
             }
-            // Update from [x0, x1] to [x0, x].
+            // This is unconditionally applied after the if/else.
             x1 = x;
             f1 = fx;
\ No newline at end of file
-
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
-            if (FastMath.abs(f1) <= ftol) {
-                switch (allowed) {
-                case ANY_SIDE:
-                    return x1;
-                case LEFT_SIDE:
-                    if (inverted) {
-                        return x1;
-                    }
-                    break;
-                case RIGHT_SIDE:
-                    if (!inverted) {
-                        return x1;
-                    }
-                    break;
-                case BELOW_SIDE:
-                    if (f1 <= 0) {
-                        return x1;
-                    }
-                    break;
-                case ABOVE_SIDE:
-                    if (f1 >= 0) {
-                        return x1;
-                    }
-                    break;
-                default:
-                    throw new MathInternalError();
-                }
-            }
-
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                     atol)) {
-                switch (allowed) {
-                case ANY_SIDE:
-                    return x1;
-                case LEFT_SIDE:
-                    return inverted ? x1 : x0;
-                case RIGHT_SIDE:
-                    return inverted ? x0 : x1;
-                case BELOW_SIDE:
-                    return (f1 <= 0) ? x1 : x0;
-                case ABOVE_SIDE:
-                    return (f1 >= 0) ? x1 : x0;
-                default:
-                    throw new MathInternalError();
-                }
-            }
-        }
-    }
