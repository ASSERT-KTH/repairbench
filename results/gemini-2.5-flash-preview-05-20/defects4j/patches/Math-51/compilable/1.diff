diff --git a/tmp/c3a2eec9-7d5f-42d4-956b-ab9d3dd2f73d_buggy.java b/tmp/b544152a-adc5-4e16-93c5-6a758a341614_fixed.java
index 6b09955..6dea118 100644
--- a/tmp/c3a2eec9-7d5f-42d4-956b-ab9d3dd2f73d_buggy.java
+++ b/tmp/b544152a-adc5-4e16-93c5-6a758a341614_fixed.java
@@ -1,121 +1,152 @@
     /** {@inheritDoc} */
     protected final double doSolve() {
         // Get initial solution
         double x0 = getMin();
         double x1 = getMax();
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
         // regardless of the allowed solutions.
         if (f0 == 0.0) {
             return x0;
         }
         if (f1 == 0.0) {
             return x1;
         }
 
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
         // Keep track of inverted intervals, meaning that the left bound is
         // larger than the right bound.
         boolean inverted = false;
 
         // Keep finding better approximations.
         while (true) {
+            // Store previous function values for Pegasus/Illinois
+            // These are the values *before* x0, x1, f0, f1 are updated.
+            final double oldF0 = f0;
+            final double oldF1 = f1;
+
             // Calculate the next approximation.
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
             final double fx = computeObjectiveValue(x);
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
             // we can return it regardless of the allowed solutions.
             if (fx == 0.0) {
                 return x;
             }
 
             // Update the bounds with the new approximation.
+            // The logic here aims to maintain x1 as the latest new point and x0 as the other bracket.
+            // If the root is in [x, x1] (f1 * fx < 0), then old x1 becomes the new x0.
+            // If the root is in [x0, x] (f0 * fx < 0), then x0 remains the same.
             if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
+                // Root is between x and x1.
+                // The new interval is conceptually [x, x1].
+                // We move x1_old to x0. So f0 takes on the value of f(x1_old).
                 x0 = x1;
-                f0 = f1;
-                inverted = !inverted;
-            } else {
+                f0 = oldF1; // f0 now represents f(x1_old)
+                inverted = !inverted; // The conceptual order of x0 and x1 has flipped.
+
+                // f0 (which is oldF1) is the fixed point's function value for this iteration.
+                // Apply method-specific modifications to f0.
                 switch (method) {
                 case ILLINOIS:
                     f0 *= 0.5;
                     break;
                 case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
+                    // Pegasus modification: f_fixed = f_fixed * f_other_side_original / (f_other_side_original + f_new_point_value)
+                    // Here, f_fixed is f0 (which is oldF1).
+                    // f_other_side_original is oldF0.
+                    // f_new_point_value is fx.
+                    f0 *= oldF0 / (oldF0 + fx);
                     break;
-                        // Update formula cannot make any progress: Update the
-                        // search interval.
                 default:
-                    // Should never happen.
+                    // Default regula falsi. No modification.
+                }
+            } else { // Implicitly f0 * fx < 0. Root is between x0 and x.
+                // The new interval is conceptually [x0, x].
+                // x0 remains the 'fixed' point.
+                // Apply method-specific modifications to f0.
+                switch (method) {
+                case ILLINOIS:
+                    f0 *= 0.5;
+                    break;
+                case PEGASUS:
+                    // Pegasus modification: f_fixed = f_fixed * f_other_side_original / (f_other_side_original + f_new_point_value)
+                    // Here, f_fixed is f0 (which is oldF0).
+                    // f_other_side_original is oldF1.
+                    // f_new_point_value is fx.
+                    f0 *= oldF1 / (oldF1 + fx);
+                    break;
+                default:
+                    // Default regula falsi. No modification.
                 }
             }
-            // Update from [x0, x1] to [x0, x].
+            // In both cases, x1 is updated to the new approximation x.
             x1 = x;
             f1 = fx;
 
             // If the function value of the last approximation is too small,
             // given the function value accuracy, then we can't get closer to
             // the root than we already are.
             if (FastMath.abs(f1) <= ftol) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     if (inverted) {
                         return x1;
                     }
                     break;
                 case RIGHT_SIDE:
                     if (!inverted) {
                         return x1;
                     }
                     break;
                 case BELOW_SIDE:
                     if (f1 <= 0) {
                         return x1;
                     }
                     break;
                 case ABOVE_SIDE:
                     if (f1 >= 0) {
                         return x1;
                     }
                     break;
                 default:
                     throw new MathInternalError();
                 }
             }
 
             // If the current interval is within the given accuracies, we
             // are satisfied with the current approximation.
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                      atol)) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
                     return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
                     return (f1 >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
                 }
             }
         }
     }
\ No newline at end of file
