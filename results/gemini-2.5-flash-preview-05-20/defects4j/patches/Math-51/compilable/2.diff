diff --git a/tmp/31f7face-1712-4a9e-8978-90b19245c3d1_buggy.java b/tmp/78a4af91-7674-4e07-bb68-3256a5d1cde8_fixed.java
index 6b09955..24ea422 100644
--- a/tmp/31f7face-1712-4a9e-8978-90b19245c3d1_buggy.java
+++ b/tmp/78a4af91-7674-4e07-bb68-3256a5d1cde8_fixed.java
@@ -1,121 +1,156 @@
     /** {@inheritDoc} */
     protected final double doSolve() {
         // Get initial solution
         double x0 = getMin();
         double x1 = getMax();
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
         // regardless of the allowed solutions.
         if (f0 == 0.0) {
             return x0;
         }
         if (f1 == 0.0) {
             return x1;
         }
 
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
         // Keep track of inverted intervals, meaning that the left bound is
         // larger than the right bound.
         boolean inverted = false;
 
+        // Keep track of old f values for Illinois/Pegasus adjustments.
+        // These store the function values of x0 and x1 from the *start* of the current iteration.
+        double oldf0 = f0;
+        double oldf1 = f1;
+
         // Keep finding better approximations.
         while (true) {
             // Calculate the next approximation.
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
             final double fx = computeObjectiveValue(x);
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
             // we can return it regardless of the allowed solutions.
             if (fx == 0.0) {
                 return x;
             }
 
             // Update the bounds with the new approximation.
+            // If f(x) and f(x1) have opposite signs (root in (x, x1)).
+            // This means x0 is conceptually updated to x, and x1 is the fixed point.
             if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
+                // The point x1 is retained. Its function value f1 should be adjusted if
+                // x1 was also retained in the previous iteration.
+                // oldf0 * fx > 0 means f(x0_prev) and f(x_current) have the same sign.
+                // This implies that x1 was the fixed point in the previous iteration as well.
+                if (oldf0 * fx > 0) {
+                    switch (method) {
+                    case ILLINOIS:
+                        f1 *= 0.5; // Adjust f1 (value at the fixed point x1)
+                        break;
+                    case PEGASUS:
+                        // Pegasus adjustment: f_retained *= f_other_side_old / (f_other_side_old + f_new_point)
+                        // Here f1 is retained, oldf0 is the other side, fx is the new point's value.
+                        f1 *= oldf0 / (oldf0 + fx); // Adjust f1
+                        break;
+                    default:
+                        // Should never happen.
+                    }
+                }
                 x0 = x1;
-                f0 = f1;
+                f0 = f1; // f0 takes the potentially adjusted f1 value
                 inverted = !inverted;
-            } else {
+            } else { // f1 * fx >= 0. This implies f(x0) and f(x) have opposite signs (root in (x0, x)).
+                     // The point x0 is retained. Its function value f0 should be adjusted if
+                     // x0 was also retained in the previous iteration.
+                // oldf1 * fx > 0 means f(x1_prev) and f(x_current) have the same sign.
+                // This implies that x0 was the fixed point in the previous iteration as well.
+                if (oldf1 * fx > 0) {
                     switch (method) {
                     case ILLINOIS:
-                    f0 *= 0.5;
+                        f0 *= 0.5; // Adjust f0 (value at the fixed point x0)
                         break;
                     case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
+                        // Pegasus adjustment to f0: f0 is retained, oldf1 is the other side, fx is new point's value.
+                        f0 *= oldf1 / (oldf1 + fx);
                         break;
-                        // Update formula cannot make any progress: Update the
-                        // search interval.
                     default:
                         // Should never happen.
                     }
                 }
+            }
+
+            // Update old f values for next iteration.
+            // These must reflect the current state of f0 and f1 after potential adjustments.
+            oldf0 = f0;
+            oldf1 = f1;
+
             // Update from [x0, x1] to [x0, x].
+            // This line ensures that x1 and f1 always hold the latest approximation found (x and fx).
             x1 = x;
             f1 = fx;
 
             // If the function value of the last approximation is too small,
             // given the function value accuracy, then we can't get closer to
             // the root than we already are.
             if (FastMath.abs(f1) <= ftol) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     if (inverted) {
                         return x1;
                     }
                     break;
                 case RIGHT_SIDE:
                     if (!inverted) {
                         return x1;
                     }
                     break;
                 case BELOW_SIDE:
                     if (f1 <= 0) {
                         return x1;
                     }
                     break;
                 case ABOVE_SIDE:
                     if (f1 >= 0) {
                         return x1;
                     }
                     break;
                 default:
                     throw new MathInternalError();
                 }
             }
 
             // If the current interval is within the given accuracies, we
             // are satisfied with the current approximation.
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                      atol)) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
                     return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
                     return (f1 >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
                 }
             }
         }
     }
\ No newline at end of file
