diff --git a/tmp/c28859ba-ed59-420d-a8cd-baf4bd718b30_buggy.java b/tmp/ae197012-e52b-4801-8d8a-84440f465ebd_fixed.java
index 6b09955..4845625 100644
--- a/tmp/c28859ba-ed59-420d-a8cd-baf4bd718b30_buggy.java
+++ b/tmp/ae197012-e52b-4801-8d8a-84440f465ebd_fixed.java
@@ -1,121 +1,144 @@
     /** {@inheritDoc} */
     protected final double doSolve() {
         // Get initial solution
         double x0 = getMin();
         double x1 = getMax();
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
         // regardless of the allowed solutions.
         if (f0 == 0.0) {
             return x0;
         }
         if (f1 == 0.0) {
             return x1;
         }
 
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
         // Keep track of inverted intervals, meaning that the left bound is
         // larger than the right bound.
         boolean inverted = false;
 
         // Keep finding better approximations.
         while (true) {
             // Calculate the next approximation.
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
             final double fx = computeObjectiveValue(x);
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
             // we can return it regardless of the allowed solutions.
             if (fx == 0.0) {
                 return x;
             }
 
+            // Store previous f0 and f1 for scaling logic
+            final double f0_prev = f0;
+            final double f1_prev = f1;
+
             // Update the bounds with the new approximation.
-            if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
+            if (f1_prev * fx < 0) { // Root is between x and x1. x0 needs to be updated to x. x1 retained.
+                                   // In the current code's variable assignment logic, this means
+                                   // the old x1 becomes the new x0, and x becomes the new x1.
+                                   // So, x0 and f0 become old x1 and f1. x1 and f1 become x and fx.
                 x0 = x1;
-                f0 = f1;
+                f0 = f1; // f0 is now the value of the retained endpoint (old f1)
                 inverted = !inverted;
-            } else {
+
+                // The retained f-value is the new f0 (which was old f1).
+                // This is the one that needs scaling for Illinois/Pegasus.
                 switch (method) {
                 case ILLINOIS:
-                    f0 *= 0.5;
+                    f0 *= 0.5; // Scale the new f0 (which is the old f1)
                     break;
                 case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
+                    // Pegasus rule: f_retained = f_retained * f_other_old / (f_other_old + f_new_other)
+                    // Here, f0 (new) is retained. f0_prev is the old value of other point. fx is the new value of other point.
+                    f0 *= f0_prev / (f0_prev + fx);
+                    break;
+                default:
+                    // Should never happen.
+                }
+            } else { // f0_prev * fx < 0 (Root is between x0 and x). x1 needs to be updated to x. x0 retained.
+                     // The old x0 and f0 are retained. The old x1 and f1 are replaced by x and fx.
+                // The retained f-value is f0_prev.
+                // This is the one that needs scaling.
+                switch (method) {
+                case ILLINOIS:
+                    f0 *= 0.5; // Scale the old f0 (which is retained as new f0)
+                    break;
+                case PEGASUS:
+                    // Pegasus rule: f_retained = f_retained * f_other_old / (f_other_old + f_new_other)
+                    // Here, f0 is retained. f1_prev is the old value of other point. fx is the new value of other point.
+                    f0 *= f1_prev / (f1_prev + fx);
                     break;
-                        // Update formula cannot make any progress: Update the
-                        // search interval.
                 default:
                     // Should never happen.
                 }
             }
             // Update from [x0, x1] to [x0, x].
             x1 = x;
             f1 = fx;
 
             // If the function value of the last approximation is too small,
             // given the function value accuracy, then we can't get closer to
             // the root than we already are.
             if (FastMath.abs(f1) <= ftol) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     if (inverted) {
                         return x1;
                     }
                     break;
                 case RIGHT_SIDE:
                     if (!inverted) {
                         return x1;
                     }
                     break;
                 case BELOW_SIDE:
                     if (f1 <= 0) {
                         return x1;
                     }
                     break;
                 case ABOVE_SIDE:
                     if (f1 >= 0) {
                         return x1;
                     }
                     break;
                 default:
                     throw new MathInternalError();
                 }
             }
 
             // If the current interval is within the given accuracies, we
             // are satisfied with the current approximation.
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                      atol)) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
                     return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
                     return (f1 >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
                 }
             }
         }
     }
\ No newline at end of file
