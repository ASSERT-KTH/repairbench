diff --git a/tmp/936d3f72-6127-476d-814b-eaf30c7107ea_buggy.java b/tmp/48a27bef-a206-45ec-81b4-3919043808b1_fixed.java
index 6b09955..f75eaec 100644
--- a/tmp/936d3f72-6127-476d-814b-eaf30c7107ea_buggy.java
+++ b/tmp/48a27bef-a206-45ec-81b4-3919043808b1_fixed.java
@@ -1,121 +1,132 @@
     /** {@inheritDoc} */
     protected final double doSolve() {
         // Get initial solution
         double x0 = getMin();
         double x1 = getMax();
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
         // regardless of the allowed solutions.
         if (f0 == 0.0) {
             return x0;
         }
         if (f1 == 0.0) {
             return x1;
         }
 
+        // Ensure x0 < x1 by swapping if necessary. This simplifies the interval
+        // update logic and eliminates the need for an 'inverted' flag.
+        if (x0 > x1) {
+            double tmp = x0;
+            x0 = x1;
+            x1 = tmp;
+            tmp = f0;
+            f0 = f1;
+            f1 = tmp;
+        }
+
         // Verify bracketing of initial solution.
+        // After potential swap, x0 < x1 is guaranteed.
         verifyBracketing(x0, x1);
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
-        // Keep track of inverted intervals, meaning that the left bound is
-        // larger than the right bound.
-        boolean inverted = false;
-
         // Keep finding better approximations.
         while (true) {
             // Calculate the next approximation.
+            // This is the secant formula, also used in Regula Falsi.
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
             final double fx = computeObjectiveValue(x);
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
             // we can return it regardless of the allowed solutions.
             if (fx == 0.0) {
                 return x;
             }
 
             // Update the bounds with the new approximation.
-            if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
-                x0 = x1;
-                f0 = f1;
-                inverted = !inverted;
+            // If f(x0) and f(x) have opposite signs, the root is in (x0, x).
+            // So, x becomes the new upper bound (x1).
+            if (f0 * fx < 0) {
+                x1 = x;
+                f1 = fx;
             } else {
+                // If f(x0) and f(x) have the same sign, then f(x) and f(x1)
+                // must have opposite signs (since f0*f1 < 0).
+                // So, the root is in (x, x1). x becomes the new lower bound (x0).
+                x0 = x;
+                f0 = fx;
+                // Apply method-specific modifications to the function value
+                // of the *other* (fixed) endpoint to accelerate convergence.
                 switch (method) {
                 case ILLINOIS:
-                    f0 *= 0.5;
+                    f1 *= 0.5;
                     break;
                 case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
+                    f1 *= f0 / (f0 + fx);
+                    break;
+                case REGULA_FALSI: // Explicitly handle standard Regula Falsi
+                    // Standard Regula Falsi does not modify function values.
                     break;
-                        // Update formula cannot make any progress: Update the
-                        // search interval.
                 default:
-                    // Should never happen.
+                    // Should never happen for known methods.
+                    throw new MathInternalError();
                 }
             }
-            // Update from [x0, x1] to [x0, x].
-            x1 = x;
-            f1 = fx;
 
             // If the function value of the last approximation is too small,
             // given the function value accuracy, then we can't get closer to
             // the root than we already are.
-            if (FastMath.abs(f1) <= ftol) {
+            if (FastMath.abs(f1) <= ftol) { // f1 is now f(x1), where x1 is the best estimate
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
-                    if (inverted) {
-                        return x1;
-                    }
-                    break;
+                    return x0; // x0 is always the left bound
                 case RIGHT_SIDE:
-                    if (!inverted) {
-                        return x1;
-                    }
-                    break;
+                    return x1; // x1 is always the right bound
                 case BELOW_SIDE:
-                    if (f1 <= 0) {
+                    if (f1 <= 0) { // Check if f(x1) meets the condition
                         return x1;
                     }
-                    break;
+                    break; // If not, continue iteration
                 case ABOVE_SIDE:
-                    if (f1 >= 0) {
+                    if (f1 >= 0) { // Check if f(x1) meets the condition
                         return x1;
                     }
-                    break;
+                    break; // If not, continue iteration
                 default:
                     throw new MathInternalError();
                 }
             }
 
             // If the current interval is within the given accuracies, we
             // are satisfied with the current approximation.
+            // Since x0 < x1 is maintained, FastMath.abs(x1 - x0) is simply x1 - x0.
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                      atol)) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
-                    return inverted ? x1 : x0;
+                    return x0; // x0 is the left bound
                 case RIGHT_SIDE:
-                    return inverted ? x0 : x1;
+                    return x1; // x1 is the right bound
                 case BELOW_SIDE:
+                    // Return x1 if f(x1) <= 0, otherwise x0 (since f0*f1<0, f0 must be >0)
                     return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
+                    // Return x1 if f(x1) >= 0, otherwise x0 (since f0*f1<0, f0 must be <0)
                     return (f1 >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
                 }
             }
         }
     }
\ No newline at end of file
