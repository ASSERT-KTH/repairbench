diff --git a/tmp/c2540013-0d63-44b7-be4e-77bc194daa37_buggy.java b/tmp/b7be0b13-04c3-4fe5-aebd-b9c91d0ba252_fixed.java
index 4e8b037..6b959c8 100644
--- a/tmp/c2540013-0d63-44b7-be4e-77bc194daa37_buggy.java
+++ b/tmp/b7be0b13-04c3-4fe5-aebd-b9c91d0ba252_fixed.java
@@ -1,20 +1,76 @@
     public List getValues(final Option option,
                           List defaultValues) {
-        // initialize the return list
-        List valueList = (List) values.get(option);
+        // 1. Get values parsed from the command line
+        // 'values' is assumed to be a Map<Option, List> containing parsed arguments.
+        List parsedValues = (List) values.get(option);
 
-        // grab the correct default values
-        if ((valueList == null) || valueList.isEmpty()) {
-            valueList = defaultValues;
+        // 2. Get the intrinsic default values defined for the option's argument.
+        // 'this.defaultValues' is assumed to be a Map<Option, List> containing defaults
+        // specified during the argument's definition (e.g., using .withDefault()).
+        List intrinsicDefaultValues = (List) this.defaultValues.get(option);
+        if (intrinsicDefaultValues == null) {
+            intrinsicDefaultValues = Collections.emptyList(); // Ensure it's not null for easier processing
         }
 
-        // augment the list with the default values
-        if ((valueList == null) || valueList.isEmpty()) {
-            valueList = (List) this.defaultValues.get(option);
+        // 3. Determine the maximum number of arguments allowed for this option.
+        // We assume OptionImpl has a getArgument() method that returns an Argument,
+        // which in turn has a getMaximum() method.
+        int maximumArguments = -1; // -1 typically denotes an unlimited number of arguments
+        if (option instanceof OptionImpl) {
+            OptionImpl optionImpl = (OptionImpl) option;
+            Argument argument = optionImpl.getArgument();
+            if (argument != null) {
+                maximumArguments = argument.getMaximum();
+            }
+        }
+
+        // 4. Initialize the result list with values parsed from the command line.
+        List resultList = new ArrayList();
+        if (parsedValues != null) {
+            resultList.addAll(parsedValues);
+        }
+
+        // 5. Augment 'resultList' with intrinsic default values if necessary.
+        // This addresses the CLI-158 bug: default values should be appended if
+        // the user provided arguments but did not reach the maximum allowed.
+        // Defaults are added sequentially, starting from the point where parsed
+        // values end, up to the maximum allowed arguments, or until all relevant
+        // intrinsic defaults have been used.
+        if (resultList.size() < maximumArguments || maximumArguments == -1) {
+            // Calculate how many more argument slots need to be filled to reach the maximum.
+            int numSlotsToFill = (maximumArguments == -1) ? Integer.MAX_VALUE : (maximumArguments - resultList.size());
+            
+            // Determine the starting index in the intrinsicDefaultValues list from which to append.
+            // This corresponds to the current size of the resultList (i.e., the next argument position).
+            int defaultsStartIndex = resultList.size();
+            
+            // Calculate how many intrinsic default values are available starting from defaultsStartIndex.
+            int numIntrinsicDefaultsAvailable = 0;
+            if (defaultsStartIndex < intrinsicDefaultValues.size()) {
+                numIntrinsicDefaultsAvailable = intrinsicDefaultValues.size() - defaultsStartIndex;
+            }
+
+            // Determine the actual number of defaults to append.
+            // This is the minimum of slots needing to be filled and available intrinsic defaults.
+            int defaultsToAppendCount = Math.min(numSlotsToFill, numIntrinsicDefaultsAvailable);
+            
+            // Append the relevant sublist of intrinsic defaults to the resultList.
+            if (defaultsToAppendCount > 0) {
+                List sublistToAppend = intrinsicDefaultValues.subList(defaultsStartIndex, defaultsStartIndex + defaultsToAppendCount);
+                resultList.addAll(sublistToAppend);
+            }
+        }
+
+        // 6. Apply the original fallback logic for the 'defaultValues' parameter.
+        // This parameter (passed to the method) serves as a last resort, but ONLY if
+        // 'resultList' is still empty after considering parsed values and intrinsic defaults.
+        if (resultList.isEmpty()) {
+            if (defaultValues != null && !defaultValues.isEmpty()) {
+                return defaultValues; // Use the provided defaultValues parameter
+            }
         }
-                // if there are more default values as specified, add them to
-                // the list.
-                    // copy the list first
         
-        return valueList == null ? Collections.EMPTY_LIST : valueList;
+        // 7. Return the final list. If 'resultList' is still empty at this point,
+        // return an unmodifiable empty list as per common practice in such methods.
+        return resultList.isEmpty() ? Collections.EMPTY_LIST : resultList;
     }
\ No newline at end of file
