diff --git a/tmp/60c55437-5423-41e6-9faf-7cfd502a68b3_buggy.java b/tmp/75b9b506-a66d-42cb-b1c1-b63d41c5e839_fixed.java
index 4e8b037..05cda79 100644
--- a/tmp/60c55437-5423-41e6-9faf-7cfd502a68b3_buggy.java
+++ b/tmp/75b9b506-a66d-42cb-b1c1-b63d41c5e839_fixed.java
@@ -1,20 +1,41 @@
     public List getValues(final Option option,
                           List defaultValues) {
-        // initialize the return list
+        // Initialize the list to store the final values.
+        // First, try to get values that were explicitly parsed from the command line.
         List valueList = (List) values.get(option);
 
-        // grab the correct default values
-        if ((valueList == null) || valueList.isEmpty()) {
-            valueList = defaultValues;
+        // Ensure valueList is always a mutable List, so we can add default values if needed.
+        if (valueList == null) {
+            valueList = new ArrayList();
+        } else {
+            // Make a mutable copy to avoid UnsupportedOperationException if the original list is immutable.
+            valueList = new ArrayList(valueList);
         }
 
-        // augment the list with the default values
-        if ((valueList == null) || valueList.isEmpty()) {
-            valueList = (List) this.defaultValues.get(option);
+        // Get the default values defined specifically for this Option's Argument (e.g., via withDefault()).
+        // These are typically stored in `this.defaultValues` map.
+        List argumentDefaults = (List) this.defaultValues.get(option);
+        if (argumentDefaults == null) {
+            argumentDefaults = Collections.emptyList();
         }
-                // if there are more default values as specified, add them to
-                // the list.
-                    // copy the list first
 
-        return valueList == null ? Collections.EMPTY_LIST : valueList;
+        // Augment the valueList with argument-specific default values.
+        // This loop adds default values if fewer arguments were provided than the
+        // number of defaults specified for the argument.
+        for (int i = valueList.size(); i < argumentDefaults.size(); i++) {
+            valueList.add(argumentDefaults.get(i));
+        }
+
+        // If, after considering user-provided values and argument-specific defaults,
+        // the valueList is still empty, then use the `defaultValues` parameter as a fallback.
+        // This maintains the original code's intent for the `defaultValues` parameter
+        // to act as a general fallback if nothing else is present.
+        if (valueList.isEmpty()) {
+            if (defaultValues != null && !defaultValues.isEmpty()) {
+                valueList.addAll(defaultValues);
+            }
+        }
+        
+        // Return Collections.EMPTY_LIST if the final list is still empty, otherwise return the list.
+        return valueList.isEmpty() ? Collections.EMPTY_LIST : valueList;
     }
\ No newline at end of file
