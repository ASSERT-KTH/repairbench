diff --git a/tmp/9a9e579e-3427-461d-9ef5-fec4967deb21_buggy.java b/tmp/e2cfc2f9-efec-4dfa-a4bb-0cc071568440_fixed.java
index bf9c086..2fbba2f 100644
--- a/tmp/9a9e579e-3427-461d-9ef5-fec4967deb21_buggy.java
+++ b/tmp/e2cfc2f9-efec-4dfa-a4bb-0cc071568440_fixed.java
@@ -1,54 +1,75 @@
   /**
    * Visits a CALL node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    */
   private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
     if (!childType.canBeCalled()) {
       report(t, n, NOT_CALLABLE, childType.toString());
       ensureTyped(t, n);
       return;
     }
 
     // A couple of types can be called as if they were functions.
     // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
       FunctionType functionType = (FunctionType) childType;
 
       boolean isExtern = false;
       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
       if(functionJSDocInfo != null) {
         String sourceName = functionJSDocInfo.getSourceName();
         CompilerInput functionSource = compiler.getInput(sourceName);
         isExtern = functionSource.isExtern();
       }
 
       // Non-native constructors should not be called directly
       // unless they specify a return type and are defined
       // in an extern.
       if (functionType.isConstructor() &&
           !functionType.isNativeObjectType() &&
           (functionType.getReturnType().isUnknownType() ||
            functionType.getReturnType().isVoidType() ||
            !isExtern)) {
         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
       }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
+      // Functions with explicit 'this' types must be called in a GETPROP
+      // or GETELEM, or with an appropriate 'this' binding.
+      JSType requiredThisType = functionType.getThisType();
+      if (!requiredThisType.isUnknownType() && !requiredThisType.isVoidType()) {
+        JSType actualThisType;
+        if (child.isGetProp() || child.isGetElem()) {
+          // If the function is a property access (e.g., obj.method()),
+          // the 'this' context is the type of the object 'obj'.
+          actualThisType = getJSType(child.getFirstChild()).restrictByNotNullOrUndefined();
+        } else {
+          // For other call types (e.g., f(), (0, f)()), the 'this' context
+          // is typically the global object or undefined in strict mode.
+          // For type checking purposes, we assume the global object type for
+          // default behavior unless a specific 'this' is provided.
+          actualThisType = getJSType(t.getScope().getGlobalThis());
+        }
+
+        // Check if the actual 'this' type is assignable to the required 'this' type.
+        // If not, report a warning.
+        if (!actualThisType.isSubtypeOf(requiredThisType)) {
+          report(t, n, TypeCheck.CALL_NO_THIS_TYPE, childType.toString());
+        }
+      }
 
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {
       ensureTyped(t, n);
     }
 
     // TODO: Add something to check for calls of RegExp objects, which is not
     // supported by IE.  Either say something about the return type or warn
     // about the non-portability of the call or both.
   }
\ No newline at end of file
