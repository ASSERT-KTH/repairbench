diff --git a/tmp/cb0d53ec-3ce3-48b4-a531-2c096dab4e38_buggy.java b/tmp/5ff927e5-c1e1-47ed-931a-9d7007f77db0_fixed.java
index eea9e73..666cab4 100644
--- a/tmp/cb0d53ec-3ce3-48b4-a531-2c096dab4e38_buggy.java
+++ b/tmp/5ff927e5-c1e1-47ed-931a-9d7007f77db0_fixed.java
@@ -1,41 +1,59 @@
 	/**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
 		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
 			return false;
 		}
+
+		// Use a Set to store search code points for efficient lookup.
+		// This also correctly handles supplementary characters (characters
+		// represented by two 'char' values, a surrogate pair) by
+		// converting them into single code points.
+		java.util.Set<Integer> searchCodePoints = new java.util.HashSet<>();
+		for (int i = 0; i < searchChars.length; i++) {
+			char ch = searchChars[i];
+			if (Character.isHighSurrogate(ch) && i + 1 < searchChars.length && Character.isLowSurrogate(searchChars[i+1])) {
+				// Found a surrogate pair, form a supplementary code point
+				searchCodePoints.add(Character.toCodePoint(ch, searchChars[i+1]));
+				i++; // Skip the low surrogate as it's part of the current code point
+			} else {
+				// It's a Basic Multilingual Plane (BMP) character or a standalone surrogate.
+				// For matching purposes, treat as a single code point.
+				searchCodePoints.add((int) ch);
+			}
+		}
+
+		// Iterate through the CharSequence by code points
+		// and check if any of these code points are in our set of search code points.
 		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
-						return true;
+		for (int i = 0; i < csLength; ) {
+			int codePoint = Character.codePointAt(cs, i);
+			if (searchCodePoints.contains(codePoint)) {
+				return true; // Found a match
 			}
+			i += Character.charCount(codePoint); // Advance index by the number of chars in this code point
 		}
-		}
-		return false;
+
+		return false; // No match found
 	}
\ No newline at end of file
