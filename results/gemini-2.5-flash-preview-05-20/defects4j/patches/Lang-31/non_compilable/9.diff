diff --git a/tmp/8de64e10-4dc9-42b9-8bc3-321bd71ff46d_buggy.java b/tmp/aa5e53d3-dfe1-4478-aeb7-a415ccb07390_fixed.java
index eea9e73..a739259 100644
--- a/tmp/8de64e10-4dc9-42b9-8bc3-321bd71ff46d_buggy.java
+++ b/tmp/aa5e53d3-dfe1-4478-aeb7-a415ccb07390_fixed.java
@@ -1,41 +1,66 @@
     /**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
 		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
 			return false;
 		}
+
+		// The original implementation performs char-by-char comparison.
+		// This approach is problematic for supplementary characters (code points outside the
+		// Basic Multilingual Plane, U+0000 to U+FFFF), which are represented by
+		// two `char` values (a surrogate pair). A single `char` comparison might
+		// incorrectly match a surrogate from one code point with a surrogate from another,
+		// leading to false positives as seen in the failing tests.
+
+		// To correctly handle all Unicode characters, comparisons must be done at the
+		// code point level.
+
 		int csLength = cs.length();
 		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
-						return true;
+
+		// 1. Convert the `searchChars` array into a set of Unicode code points.
+		// This allows for efficient O(1) average time lookups later.
+		java.util.Set<Integer> searchCodePoints = new java.util.HashSet<>();
+		for (int i = 0; i < searchLength; ) {
+			// Character.codePointAt extracts a code point, correctly handling surrogate pairs.
+			int codePoint = Character.codePointAt(searchChars, i);
+			searchCodePoints.add(codePoint);
+			// Advance the index by the number of chars consumed by the current code point (1 for BMP, 2 for supplementary).
+			i += Character.charCount(codePoint);
 		}
+
+		// 2. Iterate through the `cs` CharSequence, extracting code points one by one.
+		// For each code point, check if it exists in the `searchCodePoints` set.
+		for (int i = 0; i < csLength; ) {
+			// Character.codePointAt extracts a code point from the CharSequence.
+			int codePoint = Character.codePointAt(cs, i);
+			if (searchCodePoints.contains(codePoint)) {
+				return true; // Found a match at the code point level
 			}
+			// Advance the index by the number of chars consumed by the current code point.
+			i += Character.charCount(codePoint);
 		}
-		return false;
+
+		return false; // No common code points found
 	}
\ No newline at end of file
