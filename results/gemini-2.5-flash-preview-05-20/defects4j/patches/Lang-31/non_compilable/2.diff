diff --git a/tmp/19c01784-fc1e-49e8-be98-6c7bf30553be_buggy.java b/tmp/b23a97a2-9b5d-480f-b0f0-6ae4c3208b38_fixed.java
index eea9e73..921a19b 100644
--- a/tmp/19c01784-fc1e-49e8-be98-6c7bf30553be_buggy.java
+++ b/tmp/b23a97a2-9b5d-480f-b0f0-6ae4c3208b38_fixed.java
@@ -1,41 +1,41 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
+import java.util.HashSet;
+import java.util.Set;
+
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
-		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
-						return true;
+
+    // Pre-process searchChars into a set of codepoints for efficient lookup.
+    // This handles both Basic Multilingual Plane (BMP) characters (single char)
+    // and supplementary characters (surrogate pairs).
+    Set<Integer> searchCodePoints = new HashSet<>();
+    for (int i = 0; i < searchChars.length; ) {
+        // Character.codePointAt correctly extracts a codepoint from a char array,
+        // handling surrogate pairs.
+        final int codePoint = Character.codePointAt(searchChars, i);
+        searchCodePoints.add(codePoint);
+        if (Character.isSupplementaryCodePoint(codePoint)) {
+            i += 2; // Advance by two chars for a supplementary codepoint
+        } else {
+            i += 1; // Advance by one char for a BMP codepoint
         }
     }
+
+    // Iterate through the CharSequence 'cs' codepoint by codepoint.
+    for (int i = 0; i < cs.length(); ) {
+        // Character.codePointAt correctly extracts a codepoint from a CharSequence,
+        // handling surrogate pairs.
+        final int csCodePoint = Character.codePointAt(cs, i);
+        if (searchCodePoints.contains(csCodePoint)) {
+            return true; // Found a matching codepoint
         }
-		return false;
+        if (Character.isSupplementaryCodePoint(csCodePoint)) {
+            i += 2; // Advance by two chars for a supplementary codepoint
+        } else {
+            i += 1; // Advance by one char for a BMP codepoint
+        }
+    }
+
+    return false; // No matching codepoint found
 }
\ No newline at end of file
