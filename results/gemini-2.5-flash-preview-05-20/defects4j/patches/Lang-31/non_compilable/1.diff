diff --git a/tmp/ddcdd59a-209c-4a66-a14b-6fb8bda78a5c_buggy.java b/tmp/427d5824-fded-4a9a-a032-95a4b52754f5_fixed.java
index eea9e73..0cec044 100644
--- a/tmp/ddcdd59a-209c-4a66-a14b-6fb8bda78a5c_buggy.java
+++ b/tmp/427d5824-fded-4a9a-a032-95a4b52754f5_fixed.java
@@ -1,41 +1,49 @@
     /**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
 		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
 			return false;
 		}
+
+		// Use a Set to store search code points for efficient lookup.
+		// This correctly handles supplementary characters (represented by two chars)
+		// by converting them into single code points.
+		java.util.Set<Integer> searchCodePoints = new java.util.HashSet<>();
+		for (int j = 0; j < searchChars.length; ) {
+			int codePoint = Character.codePointAt(searchChars, j);
+			searchCodePoints.add(codePoint);
+			j += Character.charCount(codePoint);
+		}
+
+		// Iterate through the input CharSequence by code points.
 		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
-						return true;
-				}
+		for (int i = 0; i < csLength; ) {
+			int codePoint = Character.codePointAt(cs, i);
+			if (searchCodePoints.contains(codePoint)) {
+				return true; // Found a matching code point
 			}
+			i += Character.charCount(codePoint); // Advance index by 1 or 2 depending on code point type
 		}
 		return false;
 	}
\ No newline at end of file
