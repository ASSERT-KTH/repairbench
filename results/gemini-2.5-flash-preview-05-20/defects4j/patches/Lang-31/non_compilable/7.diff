diff --git a/tmp/fe49dbd8-bb72-45eb-bf32-9a93ee533068_buggy.java b/tmp/78da818e-a9fd-4d90-a76d-c7de7fac212d_fixed.java
index eea9e73..4d5fc0e 100644
--- a/tmp/fe49dbd8-bb72-45eb-bf32-9a93ee533068_buggy.java
+++ b/tmp/78da818e-a9fd-4d90-a76d-c7de7fac212d_fixed.java
@@ -1,41 +1,62 @@
+import java.util.HashSet;
+import java.util.Set;
+
+// Assuming StringUtils.isEmpty and org.apache.commons.lang3.ArrayUtils.isEmpty are accessible.
+// The problem statement implies these helper methods are part of the StringUtils class or its dependencies.
+
     /**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
-		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
+		// Initial null/empty checks remain the same.
+		// Assuming isEmpty and ArrayUtils.isEmpty are available (as in the original context).
+		if (cs == null || cs.length() == 0 || searchChars == null || searchChars.length == 0) { // Replaced calls to isEmpty/ArrayUtils.isEmpty for self-containment
 			return false;
 		}
-		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+
+		// To correctly handle supplementary characters, we need to compare code points,
+		// not just individual char units.
+		// First, convert the searchChars array into a Set of Unicode code points.
+		Set<Integer> searchCodePoints = new HashSet<>();
+		for (int i = 0; i < searchChars.length; ) {
+			// Character.codePointAt handles surrogate pairs correctly,
+			// treating two chars as one code point if they form a valid pair.
+			final int codePoint = Character.codePointAt(searchChars, i);
+			searchCodePoints.add(codePoint);
+			// Move the index by the number of char units the current code point occupies (1 or 2).
+			i += Character.charCount(codePoint);
+		}
+
+		// Now, iterate through the input CharSequence by code points
+		for (int i = 0; i < cs.length(); ) {
+			final int csCodePoint = Character.codePointAt(cs, i);
+			// Check if this code point is present in our set of search code points.
+			if (searchCodePoints.contains(csCodePoint)) {
 				return true;
 			}
+			// Move the index by the number of char units the current code point occupies.
+			i += Character.charCount(csCodePoint);
 		}
-		}
+
 		return false;
 	}
\ No newline at end of file
