diff --git a/tmp/765aa274-4821-4df3-9b22-20804a0e7d07_buggy.java b/tmp/49b8c309-694d-47a8-b67a-60d80d13f25e_fixed.java
index eea9e73..8549192 100644
--- a/tmp/765aa274-4821-4df3-9b22-20804a0e7d07_buggy.java
+++ b/tmp/49b8c309-694d-47a8-b67a-60d80d13f25e_fixed.java
@@ -1,41 +1,75 @@
+import java.util.HashSet;
+import java.util.Set;
+// Assuming ArrayUtils and isEmpty are accessible from within StringUtils or properly imported
+// org.apache.commons.lang3.ArrayUtils is needed for ArrayUtils.isEmpty
+
+// Dummy imports for compilation if standalone, remove if part of actual StringUtils
+// class StringUtils {
+//     public static boolean isEmpty(CharSequence cs) { return cs == null || cs.length() == 0; }
+// }
+// class ArrayUtils {
+//     public static boolean isEmpty(char[] array) { return array == null || array.length == 0; }
+// }
+
+public class StringUtils {
     /**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
+     * StringLangs.containsAny("aba", ['z'])           = false
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
-		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
+		if (isEmpty(cs) || org.apache.commons.lang3.ArrayUtils.isEmpty(searchChars)) {
 			return false;
 		}
+
+		// Convert searchChars to a set of code points for efficient lookup.
+		// This correctly handles supplementary characters in searchChars.
+		Set<Integer> searchCodePoints = new HashSet<>();
+		for (int i = 0; i < searchChars.length; i++) {
+			char ch = searchChars[i];
+			if (Character.isHighSurrogate(ch) && i + 1 < searchChars.length && Character.isLowSurrogate(searchChars[i+1])) {
+				// Found a surrogate pair, add the full code point
+				searchCodePoints.add(Character.toCodePoint(ch, searchChars[i+1]));
+				i++; // Skip the low surrogate as it's already processed
+			} else {
+				// Not a surrogate pair or an unpaired surrogate, treat as a single char/code point
+				searchCodePoints.add((int) ch);
+			}
+		}
+
+		// Iterate through the CharSequence by code points and check for matches
 		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+		for (int i = 0; i < csLength; ) {
+			int codePoint = Character.codePointAt(cs, i);
+			if (searchCodePoints.contains(codePoint)) {
 				return true;
 			}
+			i += Character.charCount(codePoint); // Move to the next code point
 		}
-		}
+
 		return false;
 	}
+
+    // Assuming isEmpty is defined elsewhere in StringUtils, e.g.:
+    private static boolean isEmpty(CharSequence cs) {
+        return cs == null || cs.length() == 0;
+    }
+}
