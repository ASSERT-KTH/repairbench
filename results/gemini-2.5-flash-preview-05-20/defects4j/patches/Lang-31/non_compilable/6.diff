diff --git a/tmp/f0bdda63-37a3-4a96-9fd0-a357021db5c0_buggy.java b/tmp/80344f40-f83e-4255-b7e7-a30174863346_fixed.java
index eea9e73..8735d19 100644
--- a/tmp/f0bdda63-37a3-4a96-9fd0-a357021db5c0_buggy.java
+++ b/tmp/80344f40-f83e-4255-b7e7-a30174863346_fixed.java
@@ -1,41 +1,50 @@
     /**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
-		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
+		if (isEmpty(cs) || org.apache.commons.lang3.ArrayUtils.isEmpty(searchChars)) {
 			return false;
 		}
+
+		// Convert searchChars to a set of code points for efficient lookup and correct handling of supplementary characters.
+		// A char[] can contain individual char values, or surrogate pairs forming supplementary code points.
+		// We need to interpret it as a collection of actual Unicode code points.
+		java.util.Set<Integer> searchCodePoints = new java.util.HashSet<>();
+		for (int i = 0; i < searchChars.length; ) {
+			int codePoint = Character.codePointAt(searchChars, i);
+			searchCodePoints.add(codePoint);
+			i += Character.charCount(codePoint);
+		}
+
+		// Iterate through the CharSequence by code points, not individual char values.
+		// This is crucial for correctly handling supplementary characters (which are represented by two char values).
 		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+		for (int i = 0; i < csLength; ) {
+			int charCode = Character.codePointAt(cs, i);
+			if (searchCodePoints.contains(charCode)) {
 				return true;
 			}
-			}
+			i += Character.charCount(charCode); // Advance by 1 or 2 depending on if it's a BMP or supplementary character
 		}
 		return false;
 	}
\ No newline at end of file
