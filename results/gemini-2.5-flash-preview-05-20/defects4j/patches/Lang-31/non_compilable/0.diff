diff --git a/tmp/8e1681e6-845d-4704-bd31-7181f0b2ebe2_buggy.java b/tmp/9c85d934-4f7e-4533-b832-3b7ccd5c1d89_fixed.java
index eea9e73..ddbe017 100644
--- a/tmp/8e1681e6-845d-4704-bd31-7181f0b2ebe2_buggy.java
+++ b/tmp/9c85d934-4f7e-4533-b832-3b7ccd5c1d89_fixed.java
@@ -1,41 +1,58 @@
     /**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
-		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
+		if (isEmpty(cs) || org.apache.commons.lang3.ArrayUtils.isEmpty(searchChars)) {
 			return false;
 		}
-		int csLength = cs.length();
+
+        // To correctly handle Unicode supplementary characters, we need to compare code points,
+        // not just individual char units (which can be surrogates).
+        // The searchChars array is interpreted as a sequence of code points.
+        // We first build a set of code points from searchChars for efficient lookup.
+        java.util.Set<Integer> searchCodePoints = new java.util.HashSet<>();
         int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
-						return true;
+        for (int i = 0; i < searchLength; ) {
+            // Check if current char and the next one form a valid supplementary code point
+            if (i + 1 < searchLength && Character.isHighSurrogate(searchChars[i]) && Character.isLowSurrogate(searchChars[i + 1])) {
+                searchCodePoints.add(Character.toCodePoint(searchChars[i], searchChars[i + 1]));
+                i += 2; // Move past both surrogate characters
+            } else {
+                // Otherwise, it's a BMP character or an unpaired surrogate; treat as a single code point
+                searchCodePoints.add((int) searchChars[i]);
+                i++; // Move past the current character
             }
         }
+
+        // Now, iterate through the CharSequence 'cs' by code points
+        int csLength = cs.length();
+        for (int i = 0; i < csLength; ) {
+            int codePoint = Character.codePointAt(cs, i);
+            if (searchCodePoints.contains(codePoint)) {
+                return true; // Found a matching code point
             }
-		return false;
+            i += Character.charCount(codePoint); // Move past the current code point (1 or 2 characters)
+        }
+
+		return false; // No matching code point found
 	}
\ No newline at end of file
