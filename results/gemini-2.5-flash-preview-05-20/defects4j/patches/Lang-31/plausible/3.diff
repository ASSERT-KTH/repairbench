diff --git a/tmp/e6cfc628-72fe-46f0-a1a7-cc0c707de768_buggy.java b/tmp/acbcbb63-98bf-4734-ac48-13ed32d60bde_fixed.java
index eea9e73..1c7d4d1 100644
--- a/tmp/e6cfc628-72fe-46f0-a1a7-cc0c707de768_buggy.java
+++ b/tmp/acbcbb63-98bf-4734-ac48-13ed32d60bde_fixed.java
@@ -1,41 +1,63 @@
     /**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
 		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
 			return false;
 		}
 		int csLength = cs.length();
 		int searchLength = searchChars.length;
 		for (int i = 0; i < csLength; i++) {
 			char ch = cs.charAt(i);
 			for (int j = 0; j < searchLength; j++) {
 				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+                    if (Character.isHighSurrogate(ch)) {
+                        // ch is a high surrogate. We need to check if it forms a complete supplementary character.
+                        // If it's a high surrogate, a match means it could be part of a two-char code point.
+                        // We need to ensure that the next characters also match to confirm it's the same supplementary character.
+                        if (j == searchLength - 1) {
+                            // The search character is a high surrogate at the end of searchChars.
+                            // It cannot form a complete pair in searchChars.
+                            // In this ambiguous case, we consider the single char match sufficient (consistent with Commons Lang behavior).
                             return true;
                         }
+                        if (i == csLength - 1) {
+                            // The current char in cs is a high surrogate at the end of cs.
+                            // It cannot form a complete pair in cs.
+                            // In this ambiguous case, we consider the single char match sufficient (consistent with Commons Lang behavior).
+                            return true;
+                        }
+                        // Both cs and searchChars have a high surrogate. Check if the next char (low surrogate) also matches.
+                        if (searchChars[j + 1] == cs.charAt(i + 1)) {
+                            return true; // Found a full supplementary character match
+                        }
+                    } else {
+                        // ch is in the Basic Multilingual Plane (BMP) or a low surrogate.
+                        // For these characters, a direct char match is sufficient.
+                        return true;
+                    }
+				}
 			}
 		}
 		return false;
 	}
\ No newline at end of file
