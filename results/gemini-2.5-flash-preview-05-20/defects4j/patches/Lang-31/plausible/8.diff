diff --git a/tmp/4b214f3c-1758-4a8f-b217-1f20a44ac7ad_buggy.java b/tmp/2b972041-8ea5-459c-b81c-0f8174efea5e_fixed.java
index eea9e73..17ce9a5 100644
--- a/tmp/4b214f3c-1758-4a8f-b217-1f20a44ac7ad_buggy.java
+++ b/tmp/2b972041-8ea5-459c-b81c-0f8174efea5e_fixed.java
@@ -1,41 +1,57 @@
     /**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
 		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
 			return false;
 		}
+
+		// The original implementation compares individual 'char' values.
+		// This causes issues with supplementary characters (code points represented by
+		// two 'char's, a surrogate pair) because their high surrogates might match
+		// even if the full code points are different.
+		// To fix this, we need to compare full code points.
+
 		int csLength = cs.length();
 		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+
+		// Iterate through the input CharSequence 'cs' by code points
+		for (int i = 0; i < csLength; ) {
+			final int csCodePoint = Character.codePointAt(cs, i);
+
+			// Iterate through the 'searchChars' array by code points
+			for (int j = 0; j < searchLength; ) {
+				final int searchCodePoint = Character.codePointAt(searchChars, j);
+
+				// If any code point from 'cs' matches any code point from 'searchChars', return true
+				if (csCodePoint == searchCodePoint) {
 					return true;
 				}
+				// Advance 'j' by the number of 'char's in the current searchCodePoint
+				j += Character.charCount(searchCodePoint);
 			}
+			// Advance 'i' by the number of 'char's in the current csCodePoint
+			i += Character.charCount(csCodePoint);
 		}
 		return false;
 	}
\ No newline at end of file
