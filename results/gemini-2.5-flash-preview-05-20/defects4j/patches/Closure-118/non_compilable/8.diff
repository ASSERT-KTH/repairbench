diff --git a/tmp/4c78f217-4d48-4552-bd5e-799382305894_buggy.java b/tmp/f445b20b-028b-428c-b078-61346e36d2cc_fixed.java
index 0b7c52e..ffa5dce 100644
--- a/tmp/4c78f217-4d48-4552-bd5e-799382305894_buggy.java
+++ b/tmp/f445b20b-028b-428c-b078-61346e36d2cc_fixed.java
@@ -1,27 +1,41 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
         // Maybe STRING, GET, SET
 
         // We should never see a mix of numbers and strings.
         String name = child.getString();
+
+        // For string literal keys in object literals (e.g., {'a': 0}),
+        // the Node type is Token.STRING. The DisambiguateProperties pass
+        // sometimes relies on Node.getOriginalName() for property identification
+        // and disambiguation logic. By default, Node.getOriginalName() returns
+        // null for Token.STRING nodes. Setting it to the property name ensures
+        // these keys are treated consistently with unquoted NAME nodes (e.g., {a: 0})
+        // for disambiguation purposes. This helps in correctly tracking all
+        // occurrences of a property name regardless of its literal form in object
+        // literal definitions.
+        if (child.isString()) {
+            child.setOriginalName(name);
+        }
+
         T type = typeSystem.getType(getScope(), n, name);
 
         Property prop = getProperty(name);
         if (!prop.scheduleRenaming(child,
                                    processProperty(t, prop, type, null))) {
           // TODO(user): It doesn't look like the user can do much in this
           // case right now.
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
                 (type == null ? "null" : type.toString()), n.toString(), ""));
           }
         }
       }
     }
\ No newline at end of file
