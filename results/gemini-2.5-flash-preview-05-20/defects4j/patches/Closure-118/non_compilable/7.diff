diff --git a/tmp/be26471a-aac0-4a59-9dc3-cced1684264f_buggy.java b/tmp/5870583e-8574-4712-a5b0-fc3e963a7f52_fixed.java
index 0b7c52e..47d152b 100644
--- a/tmp/be26471a-aac0-4a59-9dc3-cced1684264f_buggy.java
+++ b/tmp/5870583e-8574-4712-a5b0-fc3e963a7f52_fixed.java
@@ -1,27 +1,75 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
-      for (Node child = n.getFirstChild();
-          child != null;
-          child = child.getNext()) {
-        // Maybe STRING, GET, SET
+      // Object literal nodes have children in pairs: key, value, key, value, ...
+      // Iterate over the key nodes.
+      for (Node key = n.getFirstChild(); key != null; key = key.getNext().getNext()) {
+        // Node value = key.getNext(); // The value node, not directly used here but useful to acknowledge.
 
-        // We should never see a mix of numbers and strings.
-        String name = child.getString();
+        String name;
+        boolean isQuoted = false;
+
+        if (key.isString()) {
+          // e.g., {'a': 0}
+          name = key.getString();
+          // String literal keys are always considered quoted in object literals
+          // for the purpose of disambiguation, as they cannot be renamed.
+          isQuoted = true;
+        } else if (key.isNumber()) {
+          // e.g., {1: 0}
+          name = String.valueOf(key.getDouble());
+          // Numeric literal keys are also always considered quoted.
+          isQuoted = true;
+        } else if (key.isGet() || key.isSet()) {
+          // e.g., {get a() {}} or {set a(v) {}}
+          // The actual property name is the first child of the GET/SET node.
+          Node propertyNameNode = key.getFirstChild();
+          name = propertyNameNode.getString();
+          // An accessor property is quoted if its name is a quoted string or a computed property.
+          // E.g., `get "a"() {}` is quoted, but `get a() {}` is not.
+          isQuoted = propertyNameNode.isQuotedString() || propertyNameNode.isComputedProp();
+        } else if (key.isName()) {
+          // e.g., {a} (ES6 shorthand property, equivalent to {a: a})
+          name = key.getString();
+          isQuoted = false; // Shorthand properties are not quoted.
+        } else if (key.isComputedProp()) {
+          // e.g., {[keyExpr]: value} (ES6 computed property name)
+          // These are always considered quoted for disambiguation, as their names are not
+          // compile-time constants. The actual name is typically not available.
+          name = ""; // Use empty string for unknown names from computed properties.
+          isQuoted = true;
+        } else {
+          // This case should ideally not be reached with a well-formed AST.
+          // For robustness, attempt to get a name and treat as quoted to prevent unexpected renaming.
+          name = key.getString();
+          isQuoted = true;
+          compiler.report(JSError.make(
+              t.getSourceName(), key,
+              JSError.error(Warnings.UNEXPECTED_OBJECT_LIT_PROPERTY),
+              "Unexpected node type in object literal property key: " + key.getToken()));
+        }
+
+        // If the property is quoted, it should not be scheduled for renaming.
+        if (isQuoted) {
+          continue; // Skip to the next key-value pair.
+        }
+
+        // Process non-quoted properties for renaming.
         T type = typeSystem.getType(getScope(), n, name);
-
         Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
+
+        // Schedule the property for renaming. The 'key' node is the usage.
+        if (!prop.scheduleRenaming(key,
                                    processProperty(t, prop, type, null))) {
           // TODO(user): It doesn't look like the user can do much in this
           // case right now.
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
-                t.getSourceName(), child, propertiesToErrorFor.get(name),
+                t.getSourceName(), key, propertiesToErrorFor.get(name), // Use 'key' for error location
                 Warnings.INVALIDATION, name,
                 (type == null ? "null" : type.toString()), n.toString(), ""));
           }
         }
       }
     }
\ No newline at end of file
