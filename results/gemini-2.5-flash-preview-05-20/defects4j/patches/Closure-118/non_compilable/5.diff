diff --git a/tmp/ac224359-316d-4f37-9780-7588a3fb7d6f_buggy.java b/tmp/aceebd0b-f526-418f-a16e-f0a573b33169_fixed.java
index 0b7c52e..8f14e9c 100644
--- a/tmp/ac224359-316d-4f37-9780-7588a3fb7d6f_buggy.java
+++ b/tmp/aceebd0b-f526-418f-a16e-f0a573b33169_fixed.java
@@ -1,27 +1,60 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
+      Node parent = n.getParent();
+      JSType objectLitOwnerType = null;
+
+      // Determine the owner type of the object literal based on its assignment context.
+      // This is crucial for disambiguating properties on prototypes.
+      if (parent != null && parent.isAssign() && parent.getLastChild() == n) {
+        Node lhs = parent.getFirstChild(); // The left-hand side of the assignment (e.g., Foo.prototype)
+        // Check if it's an assignment to a prototype property (e.g., Foo.prototype)
+        if (lhs.isGetProp() && "prototype".equals(lhs.getSecondChild().getString())) {
+          Node constructorNode = lhs.getFirstChild(); // This is the 'Foo' node in Foo.prototype
+          JSType constructorType = typeSystem.getType(t.getScope(), constructorNode, null);
+          if (constructorType != null && constructorType.isConstructor()) {
+            // Get the instance type of the constructor (e.g., the Foo instance type)
+            objectLitOwnerType = constructorType.toMaybeFunctionType().getInstanceType();
+          }
+        }
+      }
+
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
-        // Maybe STRING, GET, SET
+        // 'child' here is the property key node (e.g., STRING_KEY, STRING, GET, SET).
+        // It's not the key-value pair parent node.
 
-        // We should never see a mix of numbers and strings.
-        String name = child.getString();
-        T type = typeSystem.getType(getScope(), n, name);
+        // Robustly get the property name using NodeUtil.
+        String name = NodeUtil.getObjectLiteralPropertyKey(child);
+        if (name == null) {
+          // Skip computed properties or other non-string/numeric keys that
+          // are not candidates for renaming in this pass.
+          continue;
+        }
+
+        // The node for the property value (e.g., '0' in `a: 0`).
+        Node valueNode = child.getFirstChild();
+        JSType propertyValueType = null;
+        if (valueNode != null) {
+            propertyValueType = typeSystem.getType(t.getScope(), valueNode, null);
+        }
 
         Property prop = getProperty(name);
+        // scheduleRenaming expects the key node (child) and the property graph node from processProperty.
+        // processProperty takes the property's value type and its owner type.
         if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
+                                   processProperty(t, prop, propertyValueType, objectLitOwnerType))) {
           // TODO(user): It doesn't look like the user can do much in this
           // case right now.
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
+                // Use the correct propertyValueType for error reporting.
+                (propertyValueType == null ? "null" : propertyValueType.toString()), n.toString(), ""));
           }
         }
       }
     }
