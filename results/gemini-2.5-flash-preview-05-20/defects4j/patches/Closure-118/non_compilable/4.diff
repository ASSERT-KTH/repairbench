diff --git a/tmp/ac18bb61-f4b0-450c-9dab-9a51ccfae179_buggy.java b/tmp/1e5fcbe3-1774-4537-bdae-835256f32bf7_fixed.java
index 0b7c52e..15d6d41 100644
--- a/tmp/ac18bb61-f4b0-450c-9dab-9a51ccfae179_buggy.java
+++ b/tmp/1e5fcbe3-1774-4537-bdae-835256f32bf7_fixed.java
@@ -1,27 +1,44 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
-        // Maybe STRING, GET, SET
+        // Maybe STRING_KEY, GETTER_DEF, SETTER_DEF, COMPUTED_PROP
 
-        // We should never see a mix of numbers and strings.
+        // If the key is a computed property (e.g., {[expr]: value}), we cannot
+        // disambiguate it, as its name is determined at runtime.
+        if (child.isComputedProp()) {
+          continue;
+        }
+
+        // For STRING_KEY, GETTER_DEF, and SETTER_DEF nodes, child.getString()
+        // provides the property name.
         String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
 
+        // If the key is a quoted string literal (e.g., {'a': 0}),
+        // it signifies that the property name is fixed and cannot be renamed
+        // by the disambiguation pass. This is analogous to external access
+        // via bracket notation (e.g., obj['a']).
+        if (child.isQuotedString()) {
+          // 'markPropertyAsAliased' is a method (likely inherited from ProcessProperties)
+          // that flags the property to prevent its renaming.
+          markPropertyAsAliased(name, type);
+        }
+
         Property prop = getProperty(name);
         if (!prop.scheduleRenaming(child,
                                    processProperty(t, prop, type, null))) {
           // TODO(user): It doesn't look like the user can do much in this
           // case right now.
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
                 (type == null ? "null" : type.toString()), n.toString(), ""));
           }
         }
       }
     }
\ No newline at end of file
