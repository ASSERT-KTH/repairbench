diff --git a/tmp/0fb58b24-70c6-4162-b31b-77acb1f185a5_buggy.java b/tmp/f5ec301e-4b4e-4b53-899f-b29e4683bb58_fixed.java
index 0b7c52e..d27137c 100644
--- a/tmp/0fb58b24-70c6-4162-b31b-77acb1f185a5_buggy.java
+++ b/tmp/f5ec301e-4b4e-4b53-899f-b29e4683bb58_fixed.java
@@ -1,27 +1,45 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
+      // The JSType of the object literal itself, which is the receiver type for its properties.
+      // This is crucial for DisambiguateProperties to correctly identify the type
+      // on which these properties are defined.
+      T objectLitType = n.getJSType();
+
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
-        // Maybe STRING, GET, SET
+        // Child can be a STRING_KEY, NUMBER_KEY, GETTER_DEF, or SETTER_DEF.
+        // For getters/setters, the actual property name is in their first child.
+        String name;
+        if (child.isGetterDef() || child.isSetterDef()) {
+          // For getter/setter definitions, the property name is the first child.
+          name = child.getFirstChild().getString();
+        } else {
+          // For string/number literal keys, the property name is the node's string value.
+          name = child.getString();
+        }
 
-        // We should never see a mix of numbers and strings.
-        String name = child.getString();
-        T type = typeSystem.getType(getScope(), n, name);
+        // We should never see a mix of numbers and strings. (This comment refers to the property names in a specific context)
+
+        // The original code passed 'type = typeSystem.getType(getScope(), n, name)'
+        // as the receiver type to processProperty. For OBJECTLIT, this would
+        // typically resolve to the type of the *value* of the property (e.g., NUMBER_TYPE for {a:0}),
+        // which is incorrect for disambiguation's receiver type.
+        // We need to pass the type of the object literal itself.
 
         Property prop = getProperty(name);
         if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
+                                   processProperty(t, prop, objectLitType, null))) {
           // TODO(user): It doesn't look like the user can do much in this
           // case right now.
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
+                (objectLitType == null ? "null" : objectLitType.toString()), n.toString(), ""));
           }
         }
       }
     }
