diff --git a/tmp/953b7a19-2df9-41e0-80f3-779bd5096de9_buggy.java b/tmp/810f099e-b63d-47ed-9035-d4d7a1447ff4_fixed.java
index 0b7c52e..27e32d2 100644
--- a/tmp/953b7a19-2df9-41e0-80f3-779bd5096de9_buggy.java
+++ b/tmp/810f099e-b63d-47ed-9035-d4d7a1447ff4_fixed.java
@@ -1,27 +1,30 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
+      // In an object literal, children nodes alternate between property keys and property values.
+      // We are only interested in the property keys for disambiguation.
+      // The loop should iterate over the key nodes only, skipping the value nodes.
       for (Node child = n.getFirstChild();
           child != null;
-          child = child.getNext()) {
-        // Maybe STRING, GET, SET
-
-        // We should never see a mix of numbers and strings.
+          // Advance by two nodes to get to the next property key.
+          // A key node is always followed by its value node in a valid OBJECTLIT structure.
+          child = child.getNext().getNext()) {
+        // The child node here represents a property key (e.g., STRING, GET, SET nodes).
         String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
 
         Property prop = getProperty(name);
         if (!prop.scheduleRenaming(child,
                                    processProperty(t, prop, type, null))) {
           // TODO(user): It doesn't look like the user can do much in this
           // case right now.
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
                 (type == null ? "null" : type.toString()), n.toString(), ""));
           }
         }
       }
     }
\ No newline at end of file
