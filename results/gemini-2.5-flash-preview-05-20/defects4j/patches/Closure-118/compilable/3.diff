diff --git a/tmp/d1c1df4e-46e7-46b4-9f10-6b3c6aad98e8_buggy.java b/tmp/31f73d04-b33a-45b9-8eac-6db61ee9c083_fixed.java
index 0b7c52e..e607df3 100644
--- a/tmp/d1c1df4e-46e7-46b4-9f10-6b3c6aad98e8_buggy.java
+++ b/tmp/31f73d04-b33a-45b9-8eac-6db61ee9c083_fixed.java
@@ -1,27 +1,37 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
         // Maybe STRING, GET, SET
 
+        // Use NodeUtil.getObjectLitKeyName to correctly extract the key name.
+        // This handles STRING, NAME, NUMBER, GETTER_DEF, SETTER_DEF nodes,
+        // and returns null for COMPUTED_PROP nodes which cannot be renamed.
+        String name = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(child);
+
+        // If the name is null (e.g., a computed property name), we cannot disambiguate it.
+        // Skip processing for such properties.
+        if (name == null) {
+            continue;
+        }
+
         // We should never see a mix of numbers and strings.
-        String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
 
         Property prop = getProperty(name);
         if (!prop.scheduleRenaming(child,
                                    processProperty(t, prop, type, null))) {
           // TODO(user): It doesn't look like the user can do much in this
           // case right now.
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
                 (type == null ? "null" : type.toString()), n.toString(), ""));
           }
         }
       }
     }
