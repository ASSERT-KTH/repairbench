diff --git a/tmp/1a6b20b1-5bfe-4371-b744-703461eb3de4_buggy.java b/tmp/6de0c5e5-9b62-402a-809a-0f9a7810b629_fixed.java
index 0b7c52e..0776c2a 100644
--- a/tmp/1a6b20b1-5bfe-4371-b744-703461eb3de4_buggy.java
+++ b/tmp/6de0c5e5-9b62-402a-809a-0f9a7810b629_fixed.java
@@ -1,27 +1,43 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
+      // Loop over the children, skipping over values to process only the keys.
+      // Children of OBJECTLIT are structured as: key1, value1, key2, value2, ...
       for (Node child = n.getFirstChild();
           child != null;
-          child = child.getNext()) {
-        // Maybe STRING, GET, SET
+          child = child.getNext().getNext()) { // Fix: Advance by two to skip the value node
+        String name;
+        if (child.isStringKey()) {
+          // For simple string properties like {'a': 0}, the child node itself
+          // is a STRING node representing the key.
+          name = child.getString();
+        } else if (child.isGetterDef() || child.isSetterDef()) {
+          // For accessor properties (getters/setters like {get a(){}}),
+          // the child node is a GETTER_DEF or SETTER_DEF. The actual property
+          // name is stored in its first child, which is a STRING node.
+          name = child.getFirstChild().getString();
+        } else {
+          // This pass generally renames string-based properties.
+          // Numeric literal keys (e.g., {1: 2}) or computed properties
+          // (e.g., {[foo()]: bar}) are typically not renamed by this pass.
+          // If the node type is unexpected, skip it to avoid errors.
+          continue;
+        }
 
-        // We should never see a mix of numbers and strings.
-        String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
 
         Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
+        if (!prop.scheduleRenaming(child, // Pass the key node for renaming
                                    processProperty(t, prop, type, null))) {
           // TODO(user): It doesn't look like the user can do much in this
           // case right now.
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
-                t.getSourceName(), child, propertiesToErrorFor.get(name),
+                t.getSourceName(), child, propertiesToErrorFor.get(name), // Pass the key node for error reporting location
                 Warnings.INVALIDATION, name,
                 (type == null ? "null" : type.toString()), n.toString(), ""));
           }
         }
       }
     }
