diff --git a/tmp/5013dc02-ce49-4986-b252-2921da028358_buggy.java b/tmp/a523857c-5007-4837-9598-3ac6f0a193f2_fixed.java
index b2d53db..ed99375 100644
--- a/tmp/5013dc02-ce49-4986-b252-2921da028358_buggy.java
+++ b/tmp/a523857c-5007-4837-9598-3ac6f0a193f2_fixed.java
@@ -1,34 +1,42 @@
         void read(Tokeniser t, CharacterReader r) {
             if (r.matchesLetter()) {
                 String name = r.consumeLetterSequence();
                 t.tagPending.appendTagName(name.toLowerCase());
                 t.dataBuffer.append(name);
-                r.advance();
+                // r.advance(); // REMOVED: consumeLetterSequence() already advances the reader.
                 return;
             }
 
-            if (t.isAppropriateEndTagToken() && !r.isEmpty()) {
+            // Handle End-Of-File (EOF) explicitly
+            if (r.isEmpty()) {
+                t.emitEOF();
+                return;
+            }
+
+            // The following switch block was incorrectly guarded by `t.isAppropriateEndTagToken()`.
+            // These transitions (for whitespace, '/', '>') apply to both start and end tags
+            // once the tag name has been fully consumed.
             char c = r.consume();
             switch (c) {
                 case '\t':
                 case '\n':
                 case '\f':
                 case ' ':
                     t.transition(BeforeAttributeName);
                     break;
                 case '/':
                     t.transition(SelfClosingStartTag);
                     break;
                 case '>':
                     t.emitTagPending();
                     t.transition(Data);
                     break;
                 default:
+                    // This default case and call to anythingElse() were present in the original code,
+                    // handling other characters after the tag name. We preserve this behavior
+                    // for unhandled characters, while ensuring critical characters (like '>') are handled correctly.
                     t.dataBuffer.append(c);
                     anythingElse(t, r);
                     break;
             }
-            } else {
-                anythingElse(t, r);
-            }
         }
