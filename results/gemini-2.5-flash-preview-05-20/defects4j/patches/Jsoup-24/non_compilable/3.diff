diff --git a/tmp/36bc00fc-1c94-4af9-859b-06fa73d064f0_buggy.java b/tmp/252bcf8d-0286-4ae9-bab0-2e2cd6602d4b_fixed.java
index b2d53db..47d2204 100644
--- a/tmp/36bc00fc-1c94-4af9-859b-06fa73d064f0_buggy.java
+++ b/tmp/252bcf8d-0286-4ae9-bab0-2e2cd6602d4b_fixed.java
@@ -1,34 +1,52 @@
         void read(Tokeniser t, CharacterReader r) {
+            // As per HTML spec, the Tag Name state consumes letter sequences.
+            // If the next character is a letter, consume it as part of the tag name.
             if (r.matchesLetter()) {
                 String name = r.consumeLetterSequence();
                 t.tagPending.appendTagName(name.toLowerCase());
                 t.dataBuffer.append(name);
-                r.advance();
+                // Original bug: r.advance() was called here, which is incorrect
+                // because consumeLetterSequence() already advances the reader past the consumed sequence.
+                // Removing r.advance() fixes this.
                 return;
             }
 
-            if (t.isAppropriateEndTagToken() && !r.isEmpty()) {
-                char c = r.consume();
+            // If the next character is not a letter, it signifies the end of the tag name
+            // and transitions to a new state based on the character.
+            // The original code had a problematic 'if (t.isAppropriateEndTagToken() && !r.isEmpty())'
+            // condition which is not standard for the TagName state and caused incorrect parsing logic.
+            // This entire conditional block should be removed and replaced with the standard switch.
+
+            char c = r.consume(); // Consume the non-letter character
             switch (c) {
                 case '\t':
                 case '\n':
                 case '\f':
                 case ' ':
+                    // Whitespace after tag name transitions to BeforeAttributeName state.
                     t.transition(BeforeAttributeName);
                     break;
                 case '/':
+                    // Slash indicates a self-closing tag.
                     t.transition(SelfClosingStartTag);
                     break;
                 case '>':
+                    // Greater-than sign indicates the end of the start/end tag.
                     t.emitTagPending();
-                        t.transition(Data);
+                    t.transition(Data); // Transition to Data state (content inside elements).
+                    break;
+                case Tokeniser.EOF:
+                    // End of file during tag name parsing.
+                    t.emitEOF();
                     break;
                 default:
-                        t.dataBuffer.append(c);
-                        anythingElse(t, r);
+                    // Any other character is an unexpected character after a tag name.
+                    // Per HTML spec, it should be unconsumed, an error emitted, and then
+                    // transition to BeforeAttributeName as if it was a space.
+                    // The `anythingElse` helper typically handles this error recovery,
+                    // often involving unconsuming the character and changing state.
+                    t.dataBuffer.append(c); // Append the consumed character
+                    anythingElse(t, r); // Delegate to helper for error handling and state transition.
                     break;
             }
-            } else {
-                anythingElse(t, r);
-            }
         }
\ No newline at end of file
