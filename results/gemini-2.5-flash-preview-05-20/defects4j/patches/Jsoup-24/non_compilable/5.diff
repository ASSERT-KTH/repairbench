diff --git a/tmp/e82bdac2-5b49-44f8-9224-836059711f75_buggy.java b/tmp/eea1dd96-deea-4288-bd1c-fc949f514cf5_fixed.java
index b2d53db..23f0ac1 100644
--- a/tmp/e82bdac2-5b49-44f8-9224-836059711f75_buggy.java
+++ b/tmp/eea1dd96-deea-4288-bd1c-fc949f514cf5_fixed.java
@@ -1,34 +1,53 @@
         void read(Tokeniser t, CharacterReader r) {
+            // HTML5 Spec: Tag Name state
+            // "If the character is an ASCII upper alpha or ASCII lower alpha:
+            //  Append the lowercase version of the current input character to the current tag token's tag name."
+            // Jsoup's CharacterReader.consumeLetterSequence() handles consuming all consecutive letters at once.
             if (r.matchesLetter()) {
-                String name = r.consumeLetterSequence();
-                t.tagPending.appendTagName(name.toLowerCase());
-                t.dataBuffer.append(name);
-                r.advance();
-                return;
+                t.tagPending.appendTagName(r.consumeLetterSequence().toLowerCase());
+                // After consuming letters, the reader is positioned at the first non-letter character.
+                // We then fall through to handle that non-letter character without returning.
             }
 
-            if (t.isAppropriateEndTagToken() && !r.isEmpty()) {
-                char c = r.consume();
+            // Now, process the current character. This character is either:
+            // 1. The first non-letter character found after consuming a letter sequence.
+            // 2. The initial character if the tag name did not start with a letter.
+            char c = r.current(); // Peek the character without consuming it yet.
+
             switch (c) {
-                    case '\t':
-                    case '\n':
-                    case '\f':
-                    case ' ':
+                case '\t': // Tab
+                case '\n': // Line Feed
+                case '\f': // Form Feed
+                case ' ':  // Space
                     t.transition(BeforeAttributeName);
+                    r.advance(); // Consume the whitespace character.
                     break;
-                    case '/':
+                case '/': // Solidus
                     t.transition(SelfClosingStartTag);
+                    r.advance(); // Consume the '/' character.
                     break;
-                    case '>':
-                        t.emitTagPending();
-                        t.transition(Data);
+                case '>': // Greater-than sign
+                    t.emitTagPending(); // Emit the completed tag token.
+                    t.transition(Data); // Transition to Data state.
+                    r.advance(); // Consume the '>' character.
+                    break;
+                case Tokeniser.EOF: // End of File
+                    t.error(this); // Emit a parse error for unexpected EOF.
+                    t.emitTagPending(); // Emit the current (possibly incomplete) tag token.
+                    t.transition(Data); // Reconsume the character (which is EOF) in the Data state.
+                    // No advance needed as it's EOF.
+                    break;
+                case '\0': // Null character
+                    t.error(this); // Emit a parse error for null character.
+                    r.advance(); // Consume the null character.
+                    t.tagPending.appendTagName(Tokeniser.replacementChar); // Append replacement character.
+                    // Remain in TagName state per spec.
                     break;
                 default:
-                        t.dataBuffer.append(c);
-                        anythingElse(t, r);
+                    // "Otherwise" case in HTML5 spec: Append the current input character to the current tag token's tag name.
+                    // This handles characters like hyphens, digits, colons, etc., which are part of the tag name but not letters.
+                    t.tagPending.appendTagName(r.consume()); // Consume and append the character to the tag name.
+                    // Remain in TagName state to continue building the tag name.
                     break;
             }
-            } else {
-                anythingElse(t, r);
-            }
         }
\ No newline at end of file
