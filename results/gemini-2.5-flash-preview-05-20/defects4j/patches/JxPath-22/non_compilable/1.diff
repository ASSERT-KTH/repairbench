diff --git a/tmp/e06f1f60-c470-4ecf-981f-d579738c3d74_buggy.java b/tmp/b931a520-da00-46a6-a0e7-7bcbdbb3a9a4_fixed.java
index 1bd0d7e..b6da100 100644
--- a/tmp/e06f1f60-c470-4ecf-981f-d579738c3d74_buggy.java
+++ b/tmp/b931a520-da00-46a6-a0e7-7bcbdbb3a9a4_fixed.java
@@ -1,31 +1,68 @@
+import org.w3c.dom.Attr;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+
+public class MyClass { // Assuming this is part of a class, e.g., DOMNodePointer
     /**
      * Get the ns uri of the specified node.
      * @param node Node to check
      * @return String ns uri
      */
     public static String getNamespaceURI(Node node) {
+        if (node == null) {
+            return null;
+        }
+
+        // Handle Document nodes: get namespace URI of the document element
         if (node instanceof Document) {
             node = ((Document) node).getDocumentElement();
+            if (node == null) {
+                return null; // Document might be empty
+            }
+        }
+
+        // Get namespace URI using standard DOM method for the current node.
+        // This handles explicit namespaces and empty default namespaces (returns "").
+        String uri = node.getNamespaceURI();
+
+        // If standard DOM method returns non-null, use it.
+        if (uri != null) {
+            return uri;
         }
 
-        Element element = (Element) node;
+        // If uri is null, it means the node is not in a namespace
+        // according to getNamespaceURI().
+        // However, for Element nodes, a default namespace might be declared
+        // higher up in the hierarchy, and some DOM implementations might not propagate it
+        // correctly via getNamespaceURI() for unprefixed elements.
+        // For other node types like Attr, Text, Comment, etc., a null URI is often correct.
+        if (node.getNodeType() == Node.ELEMENT_NODE) {
+            // This block is only for Element nodes whose getNamespaceURI() returned null.
+            // This implies they are unprefixed and might be in a default namespace,
+            // which needs to be looked up by searching for xmlns attributes up the tree.
 
-        String uri = element.getNamespaceURI();
-        if (uri == null) {
-            String prefix = getPrefix(node);
+            // Assuming getPrefix(node) internally uses node.getPrefix() or similar DOM API.
+            // For an unprefixed element (e.g., <test/>), node.getPrefix() returns null.
+            String prefix = node.getPrefix(); // Use DOM's getPrefix directly.
             String qname = prefix == null ? "xmlns" : "xmlns:" + prefix;
     
             Node aNode = node;
             while (aNode != null) {
                 if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                     Attr attr = ((Element) aNode).getAttributeNode(qname);
                     if (attr != null) {
+                        // If a default namespace (xmlns) or a prefixed namespace (xmlns:prefix)
+                        // is found, return its value (which can be an empty string for xmlns="").
                         return attr.getValue();
                     }
                 }
                 aNode = aNode.getParentNode();
             }
+        }
+
+        // If it's not an Element (or if it's an Element but the fallback loop found no namespace,
+        // or its direct getNamespaceURI was already null), then its namespace URI is genuinely null.
         return null;
     }
-        return uri;
 }
\ No newline at end of file
