diff --git a/tmp/ff0f4813-494e-45b5-b36b-4f0e53a1d1f2_buggy.java b/tmp/eff693f3-dd32-4132-a19f-7dbbaa685ec3_fixed.java
index 1bd0d7e..d5862bb 100644
--- a/tmp/ff0f4813-494e-45b5-b36b-4f0e53a1d1f2_buggy.java
+++ b/tmp/eff693f3-dd32-4132-a19f-7dbbaa685ec3_fixed.java
@@ -1,31 +1,84 @@
+import org.w3c.dom.Attr;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+
+public class DOMUtils { // Assuming this method is part of a DOMUtils class or similar.
+
+    // Note: getPrefix(Node node) is assumed to be an existing method in DOMUtils or similar context.
+    // Its behavior for Element nodes is typically a wrapper around Node.getPrefix().
+    // We are making this method more robust to potential quirks of getPrefix() or the DOM implementation itself.
+    // For the purpose of this fix, we assume getPrefix is available and works similarly to Node.getPrefix().
+    private static String getPrefix(Node node) {
+        // This is a placeholder for the actual DOMUtils.getPrefix method.
+        // If DOMUtils.getPrefix is not provided, this would be a ClassCastException.
+        // Assuming its presence given the original code structure.
+        if (node instanceof Element) {
+            return ((Element) node).getPrefix();
+        }
+        if (node instanceof Attr) {
+            String prefix = ((Attr) node).getPrefix();
+            if (prefix == null && ((Attr)node).getName().startsWith("xmlns:")) {
+                 return ((Attr)node).getName().substring(6);
+            }
+            return prefix;
+        }
+        return node.getPrefix();
+    }
+
     /**
      * Get the ns uri of the specified node.
      * @param node Node to check
      * @return String ns uri
      */
     public static String getNamespaceURI(Node node) {
         if (node instanceof Document) {
             node = ((Document) node).getDocumentElement();
         }
 
+        // Assuming 'node' is an Element after the Document check.
+        // A ClassCastException would occur if it's an Attr or Text node, but the test failure
+        // indicates a namespace resolution issue, not a casting issue.
         Element element = (Element) node;
 
         String uri = element.getNamespaceURI();
         if (uri == null) {
+            // This block is executed if element.getNamespaceURI() returns null.
+            // This might happen for non-standard DOM implementations where xmlns="" resolves to null
+            // instead of "" (empty string), or for truly non-namespaced elements.
+            
+            // Get the node's prefix. This should be null for unprefixed elements.
             String prefix = getPrefix(node); 
-            String qname = prefix == null ? "xmlns" : "xmlns:" + prefix;
+            
+            // Construct the qualified name for a prefixed namespace declaration, if a prefix exists.
+            // If prefix is null, this will remain null, correctly not searching for xmlns:null.
+            String prefixedNsQname = prefix == null ? null : "xmlns:" + prefix;
     
             Node aNode = node;
             while (aNode != null) {
                 if (aNode.getNodeType() == Node.ELEMENT_NODE) {
-                    Attr attr = ((Element) aNode).getAttributeNode(qname);
-                    if (attr != null) {
-                        return attr.getValue();
+                    Element currentElement = (Element) aNode;
+
+                    // 1. Always check for a default namespace declaration attribute (xmlns="some_uri")
+                    // This handles cases like <test xmlns=""/> where prefix is null, but we need to find "xmlns" attribute.
+                    Attr defaultNsAttr = currentElement.getAttributeNode("xmlns");
+                    if (defaultNsAttr != null) {
+                        return defaultNsAttr.getValue();
+                    }
+                    
+                    // 2. If a specific prefix was found for the original node, check for its declaration (xmlns:prefix="some_uri")
+                    // This handles cases like <b:foo> and searches for xmlns:b.
+                    if (prefixedNsQname != null) {
+                        Attr prefixedNsAttr = currentElement.getAttributeNode(prefixedNsQname);
+                        if (prefixedNsAttr != null) {
+                            return prefixedNsAttr.getValue();
+                        }
                     }
                 }
                 aNode = aNode.getParentNode();
             }
-            return null;
+            return null; // If no namespace declaration attribute is found in the hierarchy, return null.
         }
         return uri;
     }
+}
\ No newline at end of file
