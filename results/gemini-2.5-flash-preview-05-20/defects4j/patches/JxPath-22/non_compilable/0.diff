diff --git a/tmp/41ce0a19-f74c-49f9-9641-b778c2f379a6_buggy.java b/tmp/5828a1dd-f932-440f-be59-60e50c9def5e_fixed.java
index 1bd0d7e..77798c1 100644
--- a/tmp/41ce0a19-f74c-49f9-9641-b778c2f379a6_buggy.java
+++ b/tmp/5828a1dd-f932-440f-be59-60e50c9def5e_fixed.java
@@ -1,31 +1,83 @@
+import org.w3c.dom.Attr;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+
+public class YourClass { // Assuming the original class name is YourClass or similar
     /**
      * Get the ns uri of the specified node.
      * @param node Node to check
      * @return String ns uri
      */
     public static String getNamespaceURI(Node node) {
         if (node instanceof Document) {
             node = ((Document) node).getDocumentElement();
         }
 
-        Element element = (Element) node;
+        // Get the namespace URI using the standard DOM method.
+        String uri = node.getNamespaceURI();
 
-        String uri = element.getNamespaceURI();
-        if (uri == null) {
+        // Use a temporary variable to hold the potentially computed URI,
+        // allowing for the fallback logic and later compatibility adjustments.
+        String computedUri = uri;
+
+        // Apply original fallback logic if node.getNamespaceURI() returns null.
+        // This is typically needed if the DOM implementation doesn't assign a namespace
+        // (e.g., for inherited default namespaces not explicitly on the element).
+        if (computedUri == null) {
+            // This fallback is primarily applicable to Element nodes, as only they can declare namespaces
+            // via 'xmlns' attributes.
+            if (node.getNodeType() == Node.ELEMENT_NODE) {
+                Element element = (Element) node; // Safe to cast here as type is checked.
+
+                // This `getPrefix` method is assumed to be available in the context
+                // and correctly returns the prefix for the given Node.
                 String prefix = getPrefix(node);
+
                 String qname = prefix == null ? "xmlns" : "xmlns:" + prefix;
         
-            Node aNode = node;
+                // Traverse up the parent nodes to find the relevant xmlns attribute.
+                Node aNode = element;
                 while (aNode != null) {
                     if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                         Attr attr = ((Element) aNode).getAttributeNode(qname);
                         if (attr != null) {
-                        return attr.getValue();
+                            computedUri = attr.getValue();
+                            break; // Found the declaration, stop searching.
                         }
                     }
                     aNode = aNode.getParentNode();
                 }
-            return null;
             }
-        return uri;
+        }
+
+        // JXPath 1.0 compatibility fix for empty namespace URI:
+        // For unqualified names (no prefix), XPath 1.0 typically considers them to be in "no namespace".
+        // In DOM, 'xmlns=""' declarations result in getNamespaceURI() returning an empty string ("").
+        // If the computed URI is an empty string and the node has no prefix,
+        // convert the URI to null to align with JXPath's "no namespace" concept for unqualified names.
+        if (computedUri != null && computedUri.isEmpty()) {
+            // This check applies to Element and Attribute nodes, as they are the primary nodes
+            // that can have prefixes and namespaces.
+            if (node.getNodeType() == Node.ELEMENT_NODE || node.getNodeType() == Node.ATTRIBUTE_NODE) {
+                // Use the provided getPrefix method.
+                String prefix = getPrefix(node);
+                if (prefix == null || prefix.isEmpty()) {
+                    return null; // Treat empty URI with no prefix as null URI (no namespace).
+                }
+            }
+        }
+        
+        return computedUri;
+    }
+
+    // This method is assumed to be provided elsewhere in the original source.
+    // Its exact implementation is not part of the problem description,
+    // but its signature and behavior (returning the prefix for a Node) are implied.
+    private static String getPrefix(Node node) {
+        // Placeholder for the actual implementation of getPrefix.
+        // A common implementation would be:
+        // return node.getPrefix();
+        return node.getPrefix();
+    }
 }
\ No newline at end of file
