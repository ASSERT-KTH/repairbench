diff --git a/tmp/c917a153-bf2b-4368-8675-9c2fc1e37411_buggy.java b/tmp/f0c53637-22f2-455a-a870-03b8f1ddd211_fixed.java
index 1bd0d7e..65fbd0d 100644
--- a/tmp/c917a153-bf2b-4368-8675-9c2fc1e37411_buggy.java
+++ b/tmp/f0c53637-22f2-455a-a870-03b8f1ddd211_fixed.java
@@ -1,31 +1,90 @@
+import org.w3c.dom.Attr;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+
+public class DOMNodePointer { // Assuming this is the class the method belongs to
     /**
      * Get the ns uri of the specified node.
      * @param node Node to check
      * @return String ns uri
      */
     public static String getNamespaceURI(Node node) {
         if (node instanceof Document) {
             node = ((Document) node).getDocumentElement();
         }
 
-        Element element = (Element) node;
+        // Get the standard DOM namespace URI for the node.
+        // This handles Element and Attr nodes correctly, returning null for other types.
+        String uri = node.getNamespaceURI();
 
-        String uri = element.getNamespaceURI();
+        // Apply specific logic only for Element nodes, where namespace resolution
+        // and 'xmlns' attribute lookups are relevant.
+        if (node.getNodeType() == Node.ELEMENT_NODE) {
+            // JXPath's unprefixed XPath expressions often expect 'null' for
+            // elements that are not in any namespace, which includes elements
+            // declared with xmlns="" (empty namespace).
+            if ("".equals(uri)) {
+                return null;
+            }
+
+            // If the standard DOM getNamespaceURI() returned null (truly non-namespaced,
+            // or sometimes due to older DOM implementations not fully reflecting xmlns attributes),
+            // or if we previously converted "" to null, we proceed with fallback.
             if (uri == null) {
-            String prefix = getPrefix(node);
+                // Fallback: traverse up the parent chain to find 'xmlns' or 'xmlns:prefix' attributes.
+                // This is crucial for environments where Element.getNamespaceURI() might not
+                // fully resolve namespaces declared via attributes on ancestors, or for non-namespaced elements.
+                String prefix = getPrefix(node); // Assuming getPrefix is an accessible static helper method
                 String qname = prefix == null ? "xmlns" : "xmlns:" + prefix;
         
                 Node aNode = node;
                 while (aNode != null) {
                     if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                         Attr attr = ((Element) aNode).getAttributeNode(qname);
                         if (attr != null) {
-                        return attr.getValue();
+                            String attrValue = attr.getValue();
+                            // If the found attribute declares an empty namespace, return null
+                            // for JXPath compatibility with unprefixed names.
+                            return "".equals(attrValue) ? null : attrValue;
                         }
                     }
                     aNode = aNode.getParentNode();
                 }
+                // If no namespace declaration attribute is found in the hierarchy,
+                // it's considered to be in no namespace.
                 return null;
             }
+        }
+        
+        // For nodes that are not Elements (e.g., Attr, Text, Comment, etc.),
+        // or for Elements whose standard DOM getNamespaceURI() returned a non-null, non-empty URI,
+        // return the URI as obtained directly from the node.
         return uri;
     }
+
+    // Assuming getPrefix(Node node) is a static helper method in this class or accessible.
+    // This is a placeholder for the actual implementation of getPrefix.
+    // In JXPath's DOMNodePointer, this is an instance method, so this implies
+    // it needs to be made static or provided as a static helper.
+    // For the purpose of this fix, we assume it's available as a static helper.
+    private static String getPrefix(Node node) {
+        if (node.getNodeType() == Node.ELEMENT_NODE) {
+            String prefix = node.getPrefix();
+            if (prefix == null && node.getNamespaceURI() != null && !"".equals(node.getNamespaceURI())) {
+                // If it has a namespace but no prefix (default namespace),
+                // it might be expected to return an empty string prefix.
+                // However, for the purpose of the fallback logic, we are looking for "xmlns" directly.
+                // So, if the element itself has a default namespace but no prefix,
+                // we want the qname to be "xmlns". This happens if getPrefix returns null.
+                return null; // Ensure 'xmlns' is sought for default namespace elements
+            }
+            return prefix;
+        }
+        // For attributes, getPrefix() is also meaningful.
+        if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
+            return node.getPrefix();
+        }
+        return null;
+    }
+}
\ No newline at end of file
