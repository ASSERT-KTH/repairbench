diff --git a/tmp/b13aae61-b5de-4e2f-8044-c6f196e9ffd9_buggy.java b/tmp/80e1c0cc-07bb-4b01-91d2-1182e8351c68_fixed.java
index 1bd0d7e..3719a5b 100644
--- a/tmp/b13aae61-b5de-4e2f-8044-c6f196e9ffd9_buggy.java
+++ b/tmp/80e1c0cc-07bb-4b01-91d2-1182e8351c68_fixed.java
@@ -1,31 +1,80 @@
+import org.w3c.dom.Attr;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+
+public class MyClass { // Assuming the function is part of a class
     /**
      * Get the ns uri of the specified node.
      * @param node Node to check
      * @return String ns uri
      */
     public static String getNamespaceURI(Node node) {
+        // Step 1: Handle Document nodes first. A Document itself does not have a namespace URI.
+        // We typically resolve the namespace of the document's root element.
         if (node instanceof Document) {
             node = ((Document) node).getDocumentElement();
+            // If the document is empty (no document element), there's no namespace to derive.
+            if (node == null) {
+                return null;
+            }
+            // After resolving to the document element, proceed to determine its namespace.
+        }
+
+        // Step 2: Use the standard DOM method node.getNamespaceURI().
+        // This is the most reliable way as it correctly reflects the namespace based on the
+        // qualified name and inherited declarations (including default namespaces like xmlns="").
+        String uri = node.getNamespaceURI();
+        if (uri != null) {
+            // This covers cases where the DOM implementation correctly returns "" for xmlns="".
+            return uri;
         }
 
+        // Step 3: If node.getNamespaceURI() returned null, perform a fallback lookup.
+        // This fallback is primarily applicable to Element nodes that might declare a namespace
+        // via an 'xmlns' attribute, but for which the standard DOM method returned null.
+        // For other node types (like Text, Comment, ProcessingInstruction, or Attributes
+        // that are not namespace declarations themselves), if their standard getNamespaceURI()
+        // returned null, they genuinely don't have a direct namespace URI in this context.
+        if (node.getNodeType() == Node.ELEMENT_NODE) {
+            // It's now safe to cast to Element, as we've confirmed the node type.
             Element element = (Element) node;
 
-        String uri = element.getNamespaceURI();
-        if (uri == null) {
-            String prefix = getPrefix(node);
+            // Determine the qualified attribute name for the namespace declaration (xmlns or xmlns:prefix).
+            // This assumes 'getPrefix' is another utility method that correctly extracts the prefix
+            // from the node, returning null if no prefix is present.
+            String prefix = getPrefix(node); // Assuming getPrefix is an accessible helper method
             String qname = prefix == null ? "xmlns" : "xmlns:" + prefix;
 
+            // Traverse up the parent hierarchy from the current element to find a matching 'xmlns' declaration.
             Node aNode = node;
             while (aNode != null) {
                 if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                     Attr attr = ((Element) aNode).getAttributeNode(qname);
                     if (attr != null) {
+                        // If an 'xmlns' attribute is found, its value is the namespace URI.
                         return attr.getValue();
                     }
                 }
                 aNode = aNode.getParentNode();
             }
+        }
+
+        // Step 4: If no namespace URI was found by standard means or by searching 'xmlns' attributes,
+        // then the node is considered to be in no namespace, or is a node type that doesn't have
+        // a direct namespace URI. In this case, null is the appropriate return value.
         return null;
     }
-        return uri;
+
+    // Note: The original problem description implies 'getPrefix' is an existing helper method.
+    // For completeness, if it were part of the fix, it might look like this (from original source context):
+    // public static String getPrefix(Node node) {
+    //     if (node instanceof Document) {
+    //         node = ((Document) node).getDocumentElement();
+    //         if (node == null) {
+    //             return null; // Empty document
+    //         }
+    //     }
+    //     return node.getPrefix();
+    // }
 }
\ No newline at end of file
