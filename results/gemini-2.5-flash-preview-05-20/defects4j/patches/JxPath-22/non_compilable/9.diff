diff --git a/tmp/86ec70e6-4b0a-4b36-9952-bda23faa1f40_buggy.java b/tmp/7228d680-5daf-451e-b02d-ec075e2c61a3_fixed.java
index 1bd0d7e..1b829c5 100644
--- a/tmp/86ec70e6-4b0a-4b36-9952-bda23faa1f40_buggy.java
+++ b/tmp/7228d680-5daf-451e-b02d-ec075e2c61a3_fixed.java
@@ -1,31 +1,63 @@
+import org.w3c.dom.Attr;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+
+public class DOMNodeUtil { // Assuming this utility class or similar context
+
     /**
      * Get the ns uri of the specified node.
      * @param node Node to check
      * @return String ns uri
      */
     public static String getNamespaceURI(Node node) {
         if (node instanceof Document) {
             node = ((Document) node).getDocumentElement();
         }
 
-        Element element = (Element) node;
+        // Use the standard DOM method first, which handles Element, Attr, and other node types correctly.
+        // For Element and Attr, it returns the resolved namespace URI.
+        // For other node types (Text, Comment, etc.), it returns null, as expected.
+        String uri = node.getNamespaceURI();
 
-        String uri = element.getNamespaceURI();
-        if (uri == null) {
-            String prefix = getPrefix(node);
+        // If the standard method returns null, it means either:
+        // 1. The node truly has no namespace (e.g., it's a Text node, or an Element under xmlns="").
+        // 2. The underlying DOM implementation is deficient and doesn't correctly propagate inherited default namespaces.
+        // The original code had a fallback for the latter case, which is preserved but improved.
+        if (uri == null && node.getNodeType() == Node.ELEMENT_NODE) {
+            // The node is an Element whose getNamespaceURI() returned null.
+            // This might happen if the element inherits a default namespace and the DOM implementation
+            // doesn't resolve it for elements without explicit prefixes.
+            // We ensure this fallback only applies to Element nodes.
+            Element element = (Element) node; // Safe cast here because node.getNodeType() is ELEMENT_NODE.
+
+            // Get the prefix of the current node to construct the attribute name for lookup.
+            String prefix = element.getPrefix();
             String qname = prefix == null ? "xmlns" : "xmlns:" + prefix;
     
             Node aNode = node;
+            // Traverse up the hierarchy to find a relevant namespace declaration.
             while (aNode != null) {
                 if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                     Attr attr = ((Element) aNode).getAttributeNode(qname);
                     if (attr != null) {
-                        return attr.getValue();
+                        String attrValue = attr.getValue();
+                        // CRITICAL FIX: An empty default namespace declaration (xmlns="")
+                        // means the element is in no namespace, so getNamespaceURI should return null.
+                        // The original code would return "", which is incorrect.
+                        if ("xmlns".equals(qname) && attrValue.isEmpty()) {
+                            return null;
+                        }
+                        return attrValue; // Return the found namespace URI.
                     }
                 }
                 aNode = aNode.getParentNode();
             }
+            // If no relevant namespace declaration attribute is found up the hierarchy, return null.
             return null;
         }
+        // If uri was not null initially, or if the node was not an Element,
+        // or if the fallback didn't find a namespace declaration, return the current uri (which could be null).
         return uri;
     }
+}
\ No newline at end of file
