diff --git a/tmp/a4f3bc0d-eb75-4c36-921d-b6388c0cdd3b_buggy.java b/tmp/51d7ccc4-b8e6-4df6-8b05-24528ddba686_fixed.java
index 1bd0d7e..eed8671 100644
--- a/tmp/a4f3bc0d-eb75-4c36-921d-b6388c0cdd3b_buggy.java
+++ b/tmp/51d7ccc4-b8e6-4df6-8b05-24528ddba686_fixed.java
@@ -1,31 +1,39 @@
     /**
      * Get the ns uri of the specified node.
      * @param node Node to check
      * @return String ns uri
      */
     public static String getNamespaceURI(Node node) {
+        // If the node is a Document, the namespace URI is relevant for its document element.
         if (node instanceof Document) {
             node = ((Document) node).getDocumentElement();
         }
 
-        Element element = (Element) node;
-
-        String uri = element.getNamespaceURI();
-        if (uri == null) {
-            String prefix = getPrefix(node);
-            String qname = prefix == null ? "xmlns" : "xmlns:" + prefix;
-    
-            Node aNode = node;
-            while (aNode != null) {
-                if (aNode.getNodeType() == Node.ELEMENT_NODE) {
-                    Attr attr = ((Element) aNode).getAttributeNode(qname);
-                    if (attr != null) {
-                        return attr.getValue();
-                    }
-                }
-                aNode = aNode.getParentNode();
-            }
+        // If, after handling a Document, the node is no longer an Element (e.g., if the document was empty,
+        // or if the original node was not an Element or Document type to begin with, like Text, Comment etc.),
+        // it does not have an element namespace URI. Return null.
+        if (!(node instanceof Element)) {
             return null;
         }
-        return uri;
+
+        // Cast the node to an Element as we are now sure it's an element node.
+        Element element = (Element) node;
+
+        // According to DOM Level 2 and higher, Element.getNamespaceURI() correctly
+        // returns the namespace URI for the element, taking into account:
+        // - Prefixed elements (e.g., <prefix:name>).
+        // - Default namespace declarations (e.g., <name xmlns="http://example.com/ns">).
+        // - Inherited default namespaces from ancestors.
+        // - Explicit empty namespace declarations (e.g., <name xmlns="">), which result in an empty string ("").
+        // - Elements in "no namespace" (where no default namespace is in scope and no prefix is used),
+        //   which result in null.
+        //
+        // The original code's manual lookup for "xmlns" or "xmlns:prefix" attributes when
+        // element.getNamespaceURI() returned null was redundant and problematic.
+        // It could incorrectly find an ancestor's default namespace URI and assign it to an element
+        // that should, according to DOM's getNamespaceURI() (and XPath 1.0's interpretation of unprefixed names),
+        // be in "no namespace" (null) or "empty namespace" ("").
+        // JXPath's XPath 1.0 engine typically treats both null and "" as "no namespace" for unprefixed element names.
+        // Therefore, relying directly on element.getNamespaceURI() provides the correct and expected behavior.
+        return element.getNamespaceURI();
     }
\ No newline at end of file
