diff --git a/tmp/511a4bab-d384-4425-9ef8-b3aec976260a_buggy.java b/tmp/b57108e2-ce7d-4025-8f5f-324dfbead78f_fixed.java
index 98b456f..c854588 100644
--- a/tmp/511a4bab-d384-4425-9ef8-b3aec976260a_buggy.java
+++ b/tmp/b57108e2-ce7d-4025-8f5f-324dfbead78f_fixed.java
@@ -1,17 +1,25 @@
     final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {
         final int sz = size;
         for (int i = 0; i < sz; i++) {
             // inlined from Attribute.html()
             final String key = keys[i];
-            final String val = vals[i];
+            final String val = vals[i]; // vals[i] can be null for valueless attributes, or "" for empty-string attributes
+
             accum.append(' ').append(key);
 
             // collapse checked=null, checked="", checked=checked; write out others
-            if (!(out.syntax() == Document.OutputSettings.Syntax.html
-                && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {
+            // In HTML, boolean attributes (e.g., 'checked', 'noshade') can be written without a value,
+            // or with the key as the value, or with an empty string as the value.
+            // All these forms are considered true.
+            // We should omit the "=\"value\"" part for these cases when rendering HTML.
+            final boolean omitAttributeValue = out.syntax() == Document.OutputSettings.Syntax.html
+                && Attribute.isBooleanAttribute(key) // Check if the attribute is a known boolean attribute
+                && (val == null || val.equals(key) || val.equals(EmptyString)); // Check for true-like values
+
+            if (!omitAttributeValue) {
                 accum.append("=\"");
                 Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);
                 accum.append('"');
             }
         }
     }
\ No newline at end of file
