diff --git a/tmp/2337a175-c720-4f87-9d8a-69a5f65c5fcf_buggy.java b/tmp/5dc68b49-dc13-4968-b931-390b84c750a7_fixed.java
index 7c0ebae..81a15da 100644
--- a/tmp/2337a175-c720-4f87-9d8a-69a5f65c5fcf_buggy.java
+++ b/tmp/5dc68b49-dc13-4968-b931-390b84c750a7_fixed.java
@@ -1,229 +1,325 @@
     @Override
     public JsonToken nextToken() throws IOException
     {
         // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all
         //    conditionals; and it seems odd to return `null` but NOT considering input
         //    as closed... would love a rewrite to simplify/clear up logic here.
         
-        // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken
-        // check for no buffered context _exposedContext - null
-        // If all the conditions matches then check for scalar / non-scalar property
+        // This initial block handles stopping when the filter is complete, especially in single-match mode.
+        // It should return null only if the very last token of the filtered stream has been produced.
+        // This includes the closing token of the outermost included structure (e.g., root object/array).
         if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {
-            //if not scalar and ended successfully, and !includePath, then return null
+            // Case 1: Just returned a structural end token (END_OBJECT/ARRAY)
             if (_currToken.isStructEnd()) {
-                    if (_headContext.isStartHandled()) {
+                // If the _headContext (which is the parent of the token just consumed,
+                // as _headContext is popped in the ID_END_ARRAY/ID_END_OBJECT case below)
+                // is the root context (or null after root was popped), and its START token was handled,
+                // then we are done.
+                if (_headContext == null || (_headContext.getParent() == null && _headContext.isStartHandled())) {
                     return (_currToken = null);
                 }
-                } else if (_currToken.isScalarValue()) {
-                    //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-                    // then return null 
+            }
+            // Case 2: Just returned a scalar value.
+            // This is primarily for _includePath=false, where only scalar is returned without its path.
+            // If _headContext.isStartHandled() is false, it means the parent struct was NOT included.
+            // So after scalar, we stop.
+            else if (_currToken.isScalarValue()) {
                 if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
                     return (_currToken = null);
                 }
             }
+            // If _matchFound is true, and we are not in the above 'final stop' cases, it means
+            // we have returned the match, but still need to return closing tokens for the included path.
+            // So we shouldn't return null here yet. We proceed to _nextOrEmitEndTokens() to handle closing out.
         }
+
         // Anything buffered?
         TokenFilterContext ctxt = _exposedContext;
 
         if (ctxt != null) {
             while (true) {
                 JsonToken t = ctxt.nextTokenToRead();
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
                 // all done with buffered stuff?
                 if (ctxt == _headContext) {
                     _exposedContext = null;
                     if (ctxt.inArray()) {
                         t = delegate.getCurrentToken();
 // Is this guaranteed to work without further checks?
 //                        if (t != JsonToken.START_ARRAY) {
                         _currToken = t;
                         return t;
                     }
 
                     // Almost! Most likely still have the current token;
                     // with the sole exception of 
                     /*
                     t = delegate.getCurrentToken();
                     if (t != JsonToken.FIELD_NAME) {
                         _currToken = t;
                         return t;
                     }
                     */
                     break;
                 }
                 // If not, traverse down the context chain
                 ctxt = _headContext.findChildOf(ctxt);
                 _exposedContext = ctxt;
                 if (ctxt == null) { // should never occur
                     throw _constructError("Unexpected problem: chain of filtered context broken");
                 }
             }
         }
 
         // If not, need to read more. If we got any:
         JsonToken t = delegate.nextToken();
         if (t == null) {
             // no strict need to close, since we have no state here
             _currToken = t;
             return t;
         }
 
         // otherwise... to include or not?
         TokenFilter f;
         
         switch (t.id()) {
         case ID_START_ARRAY:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
                 return (_currToken = t);
             }
             if (f == null) { // does this occur?
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartArray();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
                 return (_currToken = t);
             }
             _headContext = _headContext.createChildArrayContext(f, false);
             
             // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
             break;
 
         case ID_START_OBJECT:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
                 return (_currToken = t);
             }
             if (f == null) { // does this occur?
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartObject();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
                 return (_currToken = t);
             }
             _headContext = _headContext.createChildObjectContext(f, false);
             // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
             // note: inclusion of surrounding Object handled separately via
             // FIELD_NAME
             break;
 
         case ID_END_ARRAY:
         case ID_END_OBJECT:
             {
                 boolean returnEnd = _headContext.isStartHandled();
                 f = _headContext.getFilter();
                 if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
-                    f.filterFinishArray();
+                    f.filterFinishArray(); // or Object
                 }
                 _headContext = _headContext.getParent();
-                _itemFilter = _headContext.getFilter();
+                // Fix: Ensure _itemFilter is updated correctly when _headContext becomes null
+                _itemFilter = (_headContext == null) ? TokenFilter.INCLUDE_ALL : _headContext.getFilter();
                 if (returnEnd) {
                     return (_currToken = t);
                 }
             }
             break;
 
         case ID_FIELD_NAME:
             {
                 final String name = delegate.getCurrentName();
                 // note: this will also set 'needToHandleName'
                 f = _headContext.setFieldName(name);
                 if (f == TokenFilter.INCLUDE_ALL) {
                     _itemFilter = f;
                     if (!_includePath) {
                         // Minor twist here: if parent NOT included, may need to induce output of
                         // surrounding START_OBJECT/END_OBJECT
                         if (_includeImmediateParent && !_headContext.isStartHandled()) {
                             t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
                             _exposedContext = _headContext;
                         }
                     }
+                    // Fix: Set _matchFound if single-match mode and this is the matching token
+                    if (!_allowMultipleMatches) { 
+                        _matchFound = true;
+                    }
                     return (_currToken = t);
                 }
                 if (f == null) {
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
                 f = f.includeProperty(name);
                 if (f == null) {
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
                 _itemFilter = f;
                 if (f == TokenFilter.INCLUDE_ALL) {
                     if (_includePath) {
+                        // Fix: Set _matchFound if single-match mode and this is the matching token
+                        if (!_allowMultipleMatches) { 
+                            _matchFound = true;
+                        }
                         return (_currToken = t);
                     }
                 }
                 if (_includePath) {
                     t = _nextTokenWithBuffering(_headContext);
                     if (t != null) {
                         _currToken = t;
                         return t;
                     }
                 }
                 break;
             }
 
         default: // scalar value
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
+                // Fix: Set _matchFound if single-match mode and this is the matching token
+                if (!_allowMultipleMatches) { 
+                    _matchFound = true;
+                }
                 return (_currToken = t);
             }
             if (f != null) {
                 f = _headContext.checkValue(f);
                 if ((f == TokenFilter.INCLUDE_ALL)
                         || ((f != null) && f.includeValue(delegate))) {
+                    // Fix: Set _matchFound if single-match mode and this is the matching token
+                    if (!_allowMultipleMatches) { 
+                        _matchFound = true;
+                    }
                     return (_currToken = t);
                 }
             }
             // Otherwise not included (leaves must be explicitly included)
             break;
         }
 
         // We get here if token was not yet found; offlined handling
+        // If a match was found in single-match mode, subsequent calls should only
+        // emit closing tokens for the included path, then null.
+        if (_matchFound && !_allowMultipleMatches) {
+            return _nextOrEmitEndTokens();
+        }
         return _nextToken2();
     }
+
+
+    // Helper method to emit only closing tokens when _matchFound is true and !_allowMultipleMatches.
+    // This is called when `nextToken()` needs to find a token, but the filter is effectively
+    // in a "closing path" state after finding the main match.
+    // This method will find and return structural end tokens (END_ARRAY, END_OBJECT)
+    // for contexts whose START tokens were previously emitted as part of the path,
+    // skipping any other tokens from the delegate.
+    protected JsonToken _nextOrEmitEndTokens() throws IOException
+    {
+        while (true) {
+            // 1. If _headContext is null, all contexts have been closed (including root).
+            // This signifies the true end of the filtered stream.
+            if (_headContext == null) {
+                return null;
+            }
+
+            // 2. If the current _headContext's START token was NOT handled (i.e., filtered out),
+            // we should not emit its corresponding END token either.
+            // We need to pop this context and look at its parent.
+            if (!_headContext.isStartHandled()) {
+                _headContext = _headContext.getParent();
+                _itemFilter = (_headContext == null) ? TokenFilter.INCLUDE_ALL : _headContext.getFilter();
+                // IMPORTANT: When popping an unhandled context, we must ensure
+                // that the delegate parser skips all tokens belonging to that context
+                // until its corresponding END token is reached.
+                // The current token in delegate is the one that caused this context to be created (e.g. START_OBJECT).
+                // So skip its children.
+                delegate.skipChildren(); // Skips all contents of the unhandled context.
+                continue; // Re-evaluate with the new (parent) _headContext.
+            }
+
+            // 3. _headContext is not null AND its START was handled.
+            // This means we should emit its corresponding END token.
+            JsonToken expectedEnd = _headContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;
+            
+            // Read from the delegate until we find the expected END token for the current _headContext.
+            // Any other tokens (field names, values, nested structures) encountered during this search
+            // are considered extraneous and should be skipped.
+            JsonToken t = delegate.nextToken();
+            if (t == null) {
+                // This indicates an unexpected end of the underlying stream.
+                // It means a START token was returned, but no matching END was found.
+                // Or simply the delegate ran out of tokens before all expected ENDs were produced.
+                return null;
+            }
+            
+            // If the token from the delegate is the expected END for the current context:
+            if (t == expectedEnd) {
+                _headContext = _headContext.getParent(); // Pop context (move up the hierarchy)
+                _itemFilter = (_headContext == null) ? TokenFilter.INCLUDE_ALL : _headContext.getFilter();
+                return (_currToken = t); // Return this END token.
+            }
+            
+            // If it's not the expected END token, it means we're still inside the current context
+            // and encountered a token (e.g., FIELD_NAME, another START_ARRAY/OBJECT, or a scalar)
+            // that is NOT the match and should be skipped.
+            if (t.isStructStart() || t.isFieldName()) {
+                delegate.skipChildren(); // Skip the entire structure or field value.
+            }
+            // Continue the loop to read the next token from the delegate, searching for the expected END.
+        }
+    }
\ No newline at end of file
