diff --git a/tmp/7e4143c8-10ce-4fd6-97fa-5072c3836137_buggy.java b/tmp/0efef92c-9111-4d29-bdaf-4ed695553649_fixed.java
index fa6828a..967bd29 100644
--- a/tmp/7e4143c8-10ce-4fd6-97fa-5072c3836137_buggy.java
+++ b/tmp/0efef92c-9111-4d29-bdaf-4ed695553649_fixed.java
@@ -1,5 +1,46 @@
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+        // Collect all fields. `orderedInstanceFieldsFrom` provides an initial order,
+        // but it might not be the optimal order for type-based injection.
+        List<Field> fields = new ArrayList<>(orderedInstanceFieldsFrom(awaitingInjectionClazz));
+
+        // Sort fields to prioritize injection into the most specific type.
+        // A mock candidate should be injected into the most specific field type it matches.
+        // For example, if a mock of type MyBean can be injected into a MyBean field or an Object field,
+        // it should be injected into the MyBean field first. This is achieved by processing
+        // fields of more specific types before fields of less specific (ancestor) types.
+        Collections.sort(fields, (f1, f2) -> {
+            Class<?> type1 = f1.getType();
+            Class<?> type2 = f2.getType();
+
+            // If types are the same, their relative order doesn't matter for specificity.
+            if (type1.equals(type2)) {
+                return 0;
+            }
+
+            // If type1 is an ancestor of type2 (e.g., type1=Object, type2=MyBean),
+            // then type2 (MyBean) is more specific and should come first.
+            // So, f2 should be "less than" f1. Return a positive value to put f1 after f2.
+            if (type1.isAssignableFrom(type2)) {
+                return 1;
+            }
+
+            // If type2 is an ancestor of type1 (e.g., type1=MyBean, type2=Object),
+            // then type1 (MyBean) is more specific and should come first.
+            // So, f1 should be "less than" f2. Return a negative value to put f1 before f2.
+            if (type2.isAssignableFrom(type1)) {
+                return -1;
+            }
+
+            // If there's no assignable relationship (e.g., String vs Integer),
+            // their relative order doesn't affect specificity.
+            return 0;
+        });
+
+        // Iterate through the sorted fields and attempt to inject a mock candidate.
+        // The mockCandidateFilter is expected to find the best matching mock for the given field
+        // from the `mocks` set, and crucially, to remove the mock from the set once it's injected,
+        // ensuring "inject once".
+        for(Field field : fields) {
             mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
         }
     }
\ No newline at end of file
