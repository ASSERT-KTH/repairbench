diff --git a/tmp/938823de-d553-4198-b067-66d5f4b4b72b_buggy.java b/tmp/30de8e23-7a30-404f-a440-d6b9bce0419f_fixed.java
index fa6828a..b00edb6 100644
--- a/tmp/938823de-d553-4198-b067-66d5f4b4b72b_buggy.java
+++ b/tmp/30de8e23-7a30-404f-a440-d6b9bce0419f_fixed.java
@@ -1,5 +1,39 @@
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+        // Get the fields. Assuming orderedInstanceFieldsFrom returns a mutable List.
+        // If it were to return an immutable list, a copy would be needed:
+        // List<Field> fields = new ArrayList<>(orderedInstanceFieldsFrom(awaitingInjectionClazz));
+        List<Field> fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);
+
+        // Sort fields by type specificity (more specific types first).
+        // If Class A is assignable from Class B (A.isAssignableFrom(B)), then B is a subtype of A,
+        // making B more specific. We want fields with more specific types to be processed first.
+        Collections.sort(fields, new Comparator<Field>() {
+            @Override
+            public int compare(Field f1, Field f2) {
+                Class<?> type1 = f1.getType();
+                Class<?> type2 = f2.getType();
+
+                // If type1 is a supertype of type2 (e.g., type1=Object, type2=Bean),
+                // then type2 is more specific. We want f2 to come before f1.
+                // So, f1 should come after f2 (return 1).
+                if (type1.isAssignableFrom(type2) && !type1.equals(type2)) {
+                    return 1; // f1 comes after f2 (type2 is more specific)
+                }
+                // If type2 is a supertype of type1 (e.g., type2=Object, type1=Bean),
+                // then type1 is more specific. We want f1 to come before f2.
+                // So, f1 should come before f2 (return -1).
+                if (type2.isAssignableFrom(type1) && !type1.equals(type2)) {
+                    return -1; // f1 comes before f2 (type1 is more specific)
+                }
+                // If types are the same or unrelated (e.g., String and Integer), maintain their relative order.
+                return 0;
+            }
+        });
+
+        // Iterate over the sorted fields, attempting to inject mocks into the most specific types first.
+        // This ensures that if a mock can be injected into multiple fields of compatible types,
+        // it is injected into the field with the most specific type.
+        for(Field field : fields) {
             mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
         }
     }
\ No newline at end of file
