diff --git a/tmp/85edc472-a775-4939-9ade-8af5959d6447_buggy.java b/tmp/a13ed577-80ea-47ba-8809-e3e13952f2a4_fixed.java
index fa6828a..6dc1590 100644
--- a/tmp/85edc472-a775-4939-9ade-8af5959d6447_buggy.java
+++ b/tmp/a13ed577-80ea-47ba-8809-e3e13952f2a4_fixed.java
@@ -1,5 +1,36 @@
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+import java.util.Set;
+
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+        List<Field> fields = new ArrayList<>(orderedInstanceFieldsFrom(awaitingInjectionClazz));
+
+        // Sort fields by type specificity (most specific first)
+        Collections.sort(fields, new Comparator<Field>() {
+            @Override
+            public int compare(Field f1, Field f2) {
+                Class<?> type1 = f1.getType();
+                Class<?> type2 = f2.getType();
+
+                // If type1 is a superclass or superinterface of type2, and type2 is not a superclass/interface of type1,
+                // then type2 is more specific than type1. So f2 should come before f1.
+                if (type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {
+                    return 1; // f1 comes after f2
+                }
+                // If type2 is a superclass or superinterface of type1, and type1 is not a superclass/interface of type2,
+                // then type1 is more specific than type2. So f1 should come before f2.
+                else if (type2.isAssignableFrom(type1) && !type1.isAssignableFrom(type2)) {
+                    return -1; // f1 comes before f2
+                }
+                // If types are unrelated or the same, maintain original order (or any consistent order)
+                return 0;
+            }
+        });
+
+        for(Field field : fields) {
             mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
         }
     }
