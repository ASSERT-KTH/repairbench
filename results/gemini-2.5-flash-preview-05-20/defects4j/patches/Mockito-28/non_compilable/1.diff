diff --git a/tmp/7358d9af-8876-4933-a451-c31268ecad77_buggy.java b/tmp/5377156b-d272-4321-abda-08e5cef3cdf1_fixed.java
index fa6828a..4b7c77c 100644
--- a/tmp/7358d9af-8876-4933-a451-c31268ecad77_buggy.java
+++ b/tmp/5377156b-d272-4321-abda-08e5cef3cdf1_fixed.java
@@ -1,5 +1,43 @@
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+        // Collect fields into a mutable list to sort them.
+        // The original method `orderedInstanceFieldsFrom` returns an Iterable, which needs to be
+        // converted to a List for sorting.
+        List<Field> fields = new ArrayList<>(orderedInstanceFieldsFrom(awaitingInjectionClazz));
+
+        // Sort fields by type specificity to ensure that mocks are injected into
+        // the most specific matching field first. This addresses the "best matching type" requirement.
+        // If a mock can be injected into a field of type SpecificType and also into a field
+        // of type SuperType, it should be injected into the SpecificType field.
+        fields.sort(new Comparator<Field>() {
+            @Override
+            public int compare(Field f1, Field f2) {
+                Class<?> type1 = f1.getType();
+                Class<?> type2 = f2.getType();
+
+                // If type1 is a proper subtype of type2 (e.g., SpecificBean vs Object),
+                // then f1 is more specific and should come first.
+                // We want f1 before f2, so return -1.
+                if (type2.isAssignableFrom(type1) && !type1.isAssignableFrom(type2)) {
+                    return -1;
+                }
+                // If type2 is a proper subtype of type1, then f2 is more specific and should come first.
+                // We want f2 before f1, so return 1.
+                if (type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {
+                    return 1;
+                }
+                // If types are the same or unrelated (e.g., String vs Integer),
+                // maintain their original relative order (0) or use a stable tie-breaker
+                // like field name for deterministic results across JVMs (f1.getName().compareTo(f2.getName())).
+                // For this specific bug, maintaining original order for ties is sufficient.
+                return 0;
+            }
+        });
+
+        // Iterate through the sorted fields and attempt injection.
+        // Because the fields are sorted by specificity, the first matching mock
+        // will be injected into the most specific field, and then removed from the `mocks` set,
+        // ensuring it's injected only once.
+        for(Field field : fields) {
             mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
         }
     }
\ No newline at end of file
