diff --git a/tmp/185817c3-4f4b-4740-90e0-4c3d94b9d02b_buggy.java b/tmp/924b50c3-5dc6-4972-afd5-8dfbec042fde_fixed.java
index fa6828a..1a38987 100644
--- a/tmp/185817c3-4f4b-4740-90e0-4c3d94b9d02b_buggy.java
+++ b/tmp/924b50c3-5dc6-4972-afd5-8dfbec042fde_fixed.java
@@ -1,5 +1,36 @@
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+        // Get all instance fields from the class
+        List<Field> fields = new ArrayList<>(orderedInstanceFieldsFrom(awaitingInjectionClazz));
+        
+        // Sort fields by their declared type, from most specific to least specific.
+        // This ensures that if a mock can be injected into multiple fields (e.g., a field of type Bean and a field of type Object,
+        // where Bean extends Object), it will first attempt to inject into the most specific type (Bean).
+        fields.sort((f1, f2) -> {
+            Class<?> type1 = f1.getType();
+            Class<?> type2 = f2.getType();
+
+            if (type1.equals(type2)) {
+                return 0; // Same types, maintain original relative order
+            }
+            if (type1.isAssignableFrom(type2)) { 
+                // type2 is a subclass or implementor of type1 (or same).
+                // This means type2 is more specific than type1.
+                // We want type2's field (f2) to come before type1's field (f1).
+                // So, f1 should be 'greater' than f2.
+                return 1; 
+            } else if (type2.isAssignableFrom(type1)) { 
+                // type1 is a subclass or implementor of type2.
+                // This means type1 is more specific than type2.
+                // We want type1's field (f1) to come before type2's field (f2).
+                // So, f1 should be 'less' than f2.
+                return -1;
+            } else {
+                return 0; // Unrelated types, maintain original relative order
+            }
+        });
+
+        // Iterate through the sorted fields and attempt injection
+        for(Field field : fields) {
             mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
         }
     }
\ No newline at end of file
