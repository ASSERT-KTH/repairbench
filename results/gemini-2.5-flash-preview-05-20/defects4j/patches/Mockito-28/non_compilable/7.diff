diff --git a/tmp/2926905b-290d-4c75-b45e-68bcb60f5cd4_buggy.java b/tmp/321b2f41-e18f-433a-8906-640018b615d7_fixed.java
index fa6828a..a3094cc 100644
--- a/tmp/2926905b-290d-4c75-b45e-68bcb60f5cd4_buggy.java
+++ b/tmp/321b2f41-e18f-433a-8906-640018b615d7_fixed.java
@@ -1,5 +1,35 @@
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+        // Assuming 'InjectCandidate' is an internal class returned by 'mockCandidateFilter.filterCandidate',
+        // and that 'InjectCandidate' implements 'Comparable<InjectCandidate>' to define its natural ordering
+        // based on injection preference (e.g., exact type match > supertype match).
+        // Also assuming 'InjectCandidate' has a method 'isPresent()' (or similar, like 'isInjectable()')
+        // to indicate if it's a valid candidate for injection.
+
+        java.util.List<InjectCandidate> candidates = new java.util.ArrayList<>();
+
+        for(java.lang.reflect.Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+            // Obtain an InjectCandidate for the current field.
+            // This candidate object encapsulates information about the potential injection.
+            InjectCandidate candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);
+
+            // Only consider candidates that are actually valid for injection.
+            // This prevents adding 'no-op' candidates to the list that needs to be sorted for the best match.
+            if (candidate.isPresent()) {
+                candidates.add(candidate);
+            }
+        }
+
+        // If there are any valid candidates found, process them.
+        if (!candidates.isEmpty()) {
+            // Sort the candidates. This relies on the 'InjectCandidate' class implementing 'Comparable'
+            // and defining an ordering where the "best" match comes first (e.g., lower compareTo value means better).
+            java.util.Collections.sort(candidates);
+
+            // After sorting, the first element in the list is the "best" candidate according to the defined ordering.
+            InjectCandidate bestCandidate = candidates.get(0);
+
+            // Perform the injection only on the single best candidate.
+            // This addresses the requirement that the mock should be "injected once and in the best matching type".
+            bestCandidate.thenInject();
         }
     }
\ No newline at end of file
