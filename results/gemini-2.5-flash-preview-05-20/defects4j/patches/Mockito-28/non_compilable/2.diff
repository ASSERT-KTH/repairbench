diff --git a/tmp/0f96ebf9-4129-4d9d-8d44-be0bcc488d1b_buggy.java b/tmp/fd24ec6c-19dc-49c1-97fd-c5921dd62f20_fixed.java
index fa6828a..a0d18bb 100644
--- a/tmp/0f96ebf9-4129-4d9d-8d44-be0bcc488d1b_buggy.java
+++ b/tmp/fd24ec6c-19dc-49c1-97fd-c5921dd62f20_fixed.java
@@ -1,5 +1,70 @@
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
+        List<MockCandidateFilter.MockCandidate> allCandidates = new ArrayList<>();
+
+        // 1. Collect all potential candidates for injection from all fields
         for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+            MockCandidateFilter.MockCandidate candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);
+
+            // Assuming MockCandidate.getMock() returns null if no suitable mock was found
+            // or if it's a NoOp candidate. We only want actual potential injections.
+            if (candidate != null && candidate.getMock() != null) {
+                allCandidates.add(candidate);
+            }
+        }
+
+        // 2. Sort candidates to prioritize the "best matching type"
+        // Prioritization logic:
+        // a) Exact type match between mock and field type is preferred.
+        // b) If not exact, prefer fields whose type is more specific (lower in inheritance hierarchy)
+        //    for the given mock's type.
+        allCandidates.sort((c1, c2) -> {
+            Class<?> fieldType1 = c1.getField().getType();
+            Class<?> mockType1 = c1.getMock().getClass(); // Assuming getMock().getClass() gives the mock's actual type
+
+            Class<?> fieldType2 = c2.getField().getType();
+            Class<?> mockType2 = c2.getMock().getClass();
+
+            // Prioritize candidates where the mock's actual type exactly matches the field's type
+            boolean c1ExactMatch = fieldType1.equals(mockType1);
+            boolean c2ExactMatch = fieldType2.equals(mockType2);
+
+            if (c1ExactMatch != c2ExactMatch) {
+                return c1ExactMatch ? -1 : 1; // c1 (exact match) comes before c2 (not exact match)
+            }
+
+            // If both or neither are exact matches, prioritize more specific field types
+            // A field type is more specific if it's a subtype of the other field type.
+            // E.g., MockedBean.class is more specific than Object.class.
+            if (fieldType1.isAssignableFrom(fieldType2) && !fieldType2.isAssignableFrom(fieldType1)) {
+                return -1; // fieldType1 is more specific (or same) than fieldType2, so c1 is preferred
+            }
+            if (fieldType2.isAssignableFrom(fieldType1) && !fieldType1.isAssignableFrom(fieldType2)) {
+                return 1; // fieldType2 is more specific (or same) than fieldType1, so c2 is preferred
+            }
+
+            // Fallback for same specificity (e.g., two Object fields, or two MockedBean fields)
+            // In such cases, the original ordering from orderedInstanceFieldsFrom (implicitly maintained
+            // by not re-sorting if specificity is equal) or field name matching might be used,
+            // but for this problem, the above type-based sorting is sufficient.
+            return 0;
+        });
+
+        // 3. Perform injections, ensuring "injected once"
+        // Track which mocks have already been injected and which fields have been filled.
+        Set<Object> injectedMocks = new HashSet<>();
+        Set<Field> injectedFields = new HashSet<>();
+
+        for (MockCandidateFilter.MockCandidate candidate : allCandidates) {
+            Object mockToInject = candidate.getMock();
+            Field targetField = candidate.getField();
+
+            // Inject only if:
+            // a) The specific mock has not been injected elsewhere yet.
+            // b) The target field has not received an injection yet.
+            if (!injectedMocks.contains(mockToInject) && !injectedFields.contains(targetField)) {
+                candidate.thenInject(); // Perform the actual injection
+                injectedMocks.add(mockToInject);
+                injectedFields.add(targetField);
+            }
         }
     }
\ No newline at end of file
