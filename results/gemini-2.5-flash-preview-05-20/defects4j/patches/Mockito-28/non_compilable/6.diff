diff --git a/tmp/7e7ee6f4-1280-4d46-9190-6dc805a59ba1_buggy.java b/tmp/0de19317-867b-461b-a50b-4aae541dec44_fixed.java
index fa6828a..812bf16 100644
--- a/tmp/7e7ee6f4-1280-4d46-9190-6dc805a59ba1_buggy.java
+++ b/tmp/0de19317-867b-461b-a50b-4aae541dec44_fixed.java
@@ -1,5 +1,36 @@
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+        // Get all candidate fields for injection
+        List<Field> allFields = new ArrayList<>(orderedInstanceFieldsFrom(awaitingInjectionClazz));
+
+        // Sort fields to prioritize injection into more specific types first.
+        // This ensures that if a mock can be injected into multiple fields
+        // (e.g., a specific type field and an Object field), it will be injected
+        // into the most specific type, fulfilling the "best matching type" requirement.
+        Collections.sort(allFields, (f1, f2) -> {
+            Class<?> type1 = f1.getType();
+            Class<?> type2 = f2.getType();
+
+            // If type2 is a subtype of type1 (and they are not the same class),
+            // then type2 is more specific. We want f2 to come before f1.
+            // In a Comparator, if f2 should come before f1, compare(f1, f2) should return a positive value.
+            if (type1.isAssignableFrom(type2) && !type1.equals(type2)) {
+                return 1; // f2 is more specific than f1, so f1 comes after f2.
+            }
+            // If type1 is a subtype of type2 (and they are not the same class),
+            // then type1 is more specific. We want f1 to come before f2.
+            // In a Comparator, if f1 should come before f2, compare(f1, f2) should return a negative value.
+            if (type2.isAssignableFrom(type1) && !type1.equals(type2)) {
+                return -1; // f1 is more specific than f2, so f1 comes before f2.
+            }
+            // If types are the same or unrelated (e.g., sibling interfaces), maintain relative order.
+            return 0;
+        });
+
+        // Iterate through the sorted fields and attempt injection.
+        // It's assumed that `mockCandidateFilter.filterCandidate(...).thenInject()`
+        // will remove the injected mock from the `mocks` set, ensuring each mock
+        // is injected only once.
+        for(Field field : allFields) {
             mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
         }
     }
\ No newline at end of file
