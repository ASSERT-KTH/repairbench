diff --git a/tmp/7adc2586-9e87-43cd-ba19-5d6581365ecf_buggy.java b/tmp/beadd66a-2b47-45eb-8d6d-0a9db1fd2f1e_fixed.java
index fa6828a..3e30bb1 100644
--- a/tmp/7adc2586-9e87-43cd-ba19-5d6581365ecf_buggy.java
+++ b/tmp/beadd66a-2b47-45eb-8d6d-0a9db1fd2f1e_fixed.java
@@ -1,5 +1,72 @@
+import java.lang.reflect.Field;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Set;
+
+// Assuming InjectableMockCandidateFilter, mockCandidateFilter, and orderedInstanceFieldsFrom are accessible.
+// Also assuming a common pattern where `mockCandidateFilter.filterCandidate` returns
+// a specific "NoOpMockCandidateFilter" if no injection is possible for a field.
+// If it returns null for no match, change the check to `candidateFilter != null`.
+
+public class YourEnclosingClass { // This class name might be different, keeping it generic
+    // ... existing fields and methods ...
+
+    // Helper class to store field and its associated injectable filter
+    private static class FieldInjectablePair {
+        final Field field;
+        final InjectableMockCandidateFilter injectableFilter;
+
+        FieldInjectablePair(Field field, InjectableMockCandidateFilter injectableFilter) {
+            this.field = field;
+            this.injectableFilter = injectableFilter;
+        }
+    }
+
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
+        List<FieldInjectablePair> candidates = new LinkedList<>();
+
         for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+            // Obtain the candidate filter for the current field
+            // Assuming mockCandidateFilter.filterCandidate() returns a non-null
+            // InjectableMockCandidateFilter, which might be a no-op implementation.
+            InjectableMockCandidateFilter candidateFilter = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);
+
+            // Check if the returned filter is NOT a no-operation filter.
+            // This heuristic assumes "NoOpMockCandidateFilter" is the class name for no-op.
+            // If `filterCandidate` can return null, add `candidateFilter != null` check.
+            if (!candidateFilter.getClass().getSimpleName().equals("NoOpMockCandidateFilter")) {
+                candidates.add(new FieldInjectablePair(field, candidateFilter));
+            }
+        }
+
+        if (candidates.isEmpty()) {
+            return; // No candidates found, nothing to inject
+        }
+
+        // Select the single best candidate based on type specificity
+        FieldInjectablePair bestPair = null;
+        Class<?> bestCandidateType = null;
+
+        for (FieldInjectablePair pair : candidates) {
+            Class<?> currentFieldType = pair.field.getType();
+
+            if (bestPair == null) {
+                bestPair = pair;
+                bestCandidateType = currentFieldType;
+            } else {
+                // If the current field type is more specific (i.e., a subclass or same class)
+                // than the best one found so far, and not the exact same type (to avoid redundant updates),
+                // then update the best candidate.
+                if (bestCandidateType.isAssignableFrom(currentFieldType) && !currentFieldType.equals(bestCandidateType)) {
+                    bestPair = pair;
+                    bestCandidateType = currentFieldType;
+                }
+            }
+        }
+
+        // Perform the injection only on the best candidate found
+        if (bestPair != null) {
+            bestPair.injectableFilter.thenInject();
+        }
     }
 }
\ No newline at end of file
