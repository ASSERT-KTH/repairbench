diff --git a/tmp/401bd85d-d84d-49e2-94a5-7fe96c04be66_buggy.java b/tmp/b4765261-dca1-4b91-8d10-1c4d7ce58916_fixed.java
index fa6828a..45ae45c 100644
--- a/tmp/401bd85d-d84d-49e2-94a5-7fe96c04be66_buggy.java
+++ b/tmp/b4765261-dca1-4b91-8d10-1c4d7ce58916_fixed.java
@@ -1,5 +1,56 @@
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+import java.util.Set;
+
+class YourClassContainingInjectMockCandidate { // This class name is a placeholder for context
+    // Assume mockCandidateFilter and orderedInstanceFieldsFrom are accessible here
+    private MockCandidateFilter mockCandidateFilter; // Placeholder for MockCandidateFilter type
+    private List<Field> orderedInstanceFieldsFrom(Class<?> clazz) { /* ... */ return Collections.emptyList(); } // Placeholder
+
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+        // 1. Get all fields from the awaitingInjectionClazz
+        List<Field> fields = new ArrayList<>(orderedInstanceFieldsFrom(awaitingInjectionClazz));
+
+        // 2. Sort the fields by type specificity (most specific type first).
+        // This ensures that if a mock could fit into multiple fields of different types
+        // (e.g., an Object field and a SpecificBean field), the injection
+        // into the more specific field (SpecificBean) is attempted first.
+        Collections.sort(fields, new Comparator<Field>() {
+            @Override
+            public int compare(Field f1, Field f2) {
+                Class<?> type1 = f1.getType();
+                Class<?> type2 = f2.getType();
+
+                // If type1 is a subtype of type2 (e.g., type1=SpecificBean, type2=Object),
+                // then type1 is more specific and should come first (-1).
+                if (type2.isAssignableFrom(type1)) {
+                    // Check if they are the same type
+                    if (type1.isAssignableFrom(type2)) {
+                        return 0; // Same type, maintain original relative order or sort by name for stability
+                    }
+                    return -1; // type1 is a proper subtype of type2, type1 is more specific
+                }
+                // If type2 is a subtype of type1 (e.g., type2=SpecificBean, type1=Object),
+                // then type2 is more specific and should come first (1 for f1 vs f2).
+                else if (type1.isAssignableFrom(type2)) {
+                    return 1; // type2 is a proper subtype of type1, type2 is more specific
+                }
+                // If types are unrelated, their relative order doesn't matter for specificity.
+                // Maintain original order or sort by name for stability.
+                return 0; // f1.getName().compareTo(f2.getName()); // Uncomment for stable sort
+            }
+        });
+
+        // 3. Iterate through the sorted fields and attempt injection.
+        // It is assumed that mockCandidateFilter.filterCandidate correctly selects the best
+        // available mock for the given field, and that the .thenInject() method consumes
+        // the selected mock (removes it from the 'mocks' set) to prevent it from being
+        // injected into other fields.
+        for(Field field : fields) {
             mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
         }
     }
+}
\ No newline at end of file
