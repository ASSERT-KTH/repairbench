diff --git a/tmp/26706f0f-19d9-432e-bf65-42f9b9d1986e_buggy.java b/tmp/12161bfa-95e9-4ff0-a1c6-27a166cdf4ea_fixed.java
index 0fc103a..9afef27 100644
--- a/tmp/26706f0f-19d9-432e-bf65-42f9b9d1986e_buggy.java
+++ b/tmp/12161bfa-95e9-4ff0-a1c6-27a166cdf4ea_fixed.java
@@ -1,23 +1,40 @@
     /**
      * Remove the leading and trailing quotes from <code>str</code>.
      * E.g. if str is '"one two"', then 'one two' is returned.
      *
      * @param str The string from which the leading and trailing quotes
      * should be removed.
      *
      * @return The string without the leading and trailing quotes.
      */
     static String stripLeadingAndTrailingQuotes(String str)
     {
-        if (str.startsWith("\""))
-        {
-            str = str.substring(1, str.length());
-        }
-        int length = str.length();
-        if (str.endsWith("\""))
-        {
-            str = str.substring(0, length - 1);
+        if (str == null || str.isEmpty()) {
+            return str;
         }
 
+        // Special case for input being a single quote, as per test case
+        // assertEquals("\"", Util.stripLeadingAndTrailingQuotes("\""));
+        if (str.length() == 1 && str.charAt(0) == '"') {
             return str;
         }
+
+        int start = 0;
+        int end = str.length();
+
+        // Check for leading quote on the original string
+        if (str.startsWith("\"")) {
+            start = 1;
+        }
+
+        // Check for trailing quote on the original string
+        if (str.endsWith("\"")) {
+            end = str.length() - 1;
+        }
+
+        // If the start index has crossed or met the end index,
+        // it implies that the string effectively became empty (e.g., `""` -> `substring(1,1)` -> `""`).
+        // The `substring` method handles `start == end` by returning an empty string.
+        // Cases where `start > end` (like `"` -> `substring(1,0)`) are prevented by the special case above.
+        return str.substring(start, end);
+    }
