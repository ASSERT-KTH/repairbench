diff --git a/tmp/049f9495-c82a-40d7-a954-0bce625aa4a1_buggy.java b/tmp/8ae90f3f-486f-4946-8903-de8cc7d67a67_fixed.java
index b4af58a..d506ac4 100644
--- a/tmp/049f9495-c82a-40d7-a954-0bce625aa4a1_buggy.java
+++ b/tmp/8ae90f3f-486f-4946-8903-de8cc7d67a67_fixed.java
@@ -1,53 +1,74 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the first time period to copy (<code>null</code> not
      *         permitted).
      * @param end  the last time period to copy (<code>null</code> not
      *         permitted).
      *
      * @return A time series containing a copy of this time series from start
      *         until end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)
         throws CloneNotSupportedException {
 
         if (start == null) {
             throw new IllegalArgumentException("Null 'start' argument.");
         }
         if (end == null) {
             throw new IllegalArgumentException("Null 'end' argument.");
         }
+        // This initial check ensures the input periods are ordered correctly.
         if (start.compareTo(end) > 0) {
             throw new IllegalArgumentException(
                     "Requires start on or before end.");
         }
-        boolean emptyRange = false;
+
+        // Determine the actual start index within the data array.
+        // 'startIndex' will be the index of the first item whose period is
+        // greater than or equal to 'start'.
         int startIndex = getIndex(start);
         if (startIndex < 0) {
+            // 'start' period is not in the series. 'startIndex' (after this adjustment)
+            // will be the insertion point, i.e., the index of the first item
+            // that is *after* 'start'.
             startIndex = -(startIndex + 1);
-            if (startIndex == this.data.size()) {
-                emptyRange = true;  // start is after last data item
-            }
         }
+
+        // Determine the actual end index within the data array.
+        // 'endIndex' will be the index of the last item whose period is
+        // less than or equal to 'end'.
         int endIndex = getIndex(end);
-        if (endIndex < 0) {             // end period is not in original series
-            endIndex = -(endIndex + 1); // this is first item AFTER end period
-            endIndex = endIndex - 1;    // so this is last item BEFORE end
-        }
         if (endIndex < 0) {
-            emptyRange = true;
+            // 'end' period is not in the series. 'endIndex' (after this adjustment)
+            // will be the insertion point, i.e., the index of the first item
+            // that is *after* 'end'. To get the last item to include (which is
+            // less than or equal to 'end'), we need to subtract 1.
+            endIndex = -(endIndex + 1);
+            endIndex = endIndex - 1;
         }
-        if (emptyRange) {
+
+        // Now, check for an empty range based on the calculated indices relative to
+        // the actual data points.
+        // The range is empty if:
+        // 1. The calculated startIndex is beyond the end of the data array.
+        //    (This means 'start' is after all data items).
+        // 2. The calculated endIndex is before the beginning of the data array.
+        //    (This means 'end' is before all data items).
+        // 3. The effective startIndex is greater than the effective endIndex.
+        //    (This occurs when the period range [start, end] does not overlap
+        //     with any data items, e.g., data is [A, C] and range is [B, B]).
+        if (startIndex > this.data.size() - 1 || endIndex < 0 || startIndex > endIndex) {
             TimeSeries copy = (TimeSeries) super.clone();
-            copy.data = new java.util.ArrayList();
+            copy.data = new java.util.ArrayList(); // Create an empty list
             return copy;
-        }
-        else {
+        } else {
+            // Otherwise, we have a valid range of indices within the data.
+            // The indices naturally clamp to the beginning/end of the data
+            // if 'start' is before the first item or 'end' is after the last.
             return createCopy(startIndex, endIndex);
         }
-
     }
\ No newline at end of file
