diff --git a/tmp/6569ce6d-8298-4894-9cd9-b5a87b6c6b5d_buggy.java b/tmp/6fef6dc7-c85c-4950-b32a-b9ff2691600f_fixed.java
index b4af58a..1212c3b 100644
--- a/tmp/6569ce6d-8298-4894-9cd9-b5a87b6c6b5d_buggy.java
+++ b/tmp/6fef6dc7-c85c-4950-b32a-b9ff2691600f_fixed.java
@@ -1,53 +1,65 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the first time period to copy (<code>null</code> not
      *         permitted).
      * @param end  the last time period to copy (<code>null</code> not
      *         permitted).
      *
      * @return A time series containing a copy of this time series from start
      *         until end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)
         throws CloneNotSupportedException {
 
         if (start == null) {
             throw new IllegalArgumentException("Null 'start' argument.");
         }
         if (end == null) {
             throw new IllegalArgumentException("Null 'end' argument.");
         }
         if (start.compareTo(end) > 0) {
             throw new IllegalArgumentException(
                     "Requires start on or before end.");
         }
-        boolean emptyRange = false;
+
+        // Calculate startIndex: inclusive index of the first item to copy
+        // If 'start' period is found, startIndex is its index.
+        // If 'start' period is NOT found, getIndex returns -(insertionPoint + 1).
+        // So, -(startIndex + 1) gives the insertion point, which is the index
+        // of the first item whose period is >= 'start'. This is the correct
+        // starting index for the copy.
         int startIndex = getIndex(start);
         if (startIndex < 0) {
             startIndex = -(startIndex + 1);
-            if (startIndex == this.data.size()) {
-                emptyRange = true;  // start is after last data item
-            }
         }
+
+        // Calculate endIndex: inclusive index of the last item to copy
+        // If 'end' period is found, endIndex is its index.
+        // If 'end' period is NOT found, getIndex returns -(insertionPoint + 1).
+        // -(endIndex + 1) gives the insertion point (index of first item > 'end').
+        // Subtracting 1 from this gives the index of the last item <= 'end'.
+        // This is the correct ending index for the copy.
         int endIndex = getIndex(end);
-        if (endIndex < 0) {             // end period is not in original series
-            endIndex = -(endIndex + 1); // this is first item AFTER end period
-            endIndex = endIndex - 1;    // so this is last item BEFORE end
-        }
         if (endIndex < 0) {
-            emptyRange = true;
+            endIndex = -(endIndex + 1);
+            endIndex = endIndex - 1;
         }
-        if (emptyRange) {
+
+        // The effective range of data items to copy is [startIndex, endIndex] (inclusive).
+        // If startIndex is greater than endIndex, it means the requested time period
+        // range (start, end) does not contain any actual data items.
+        // In this case, an empty TimeSeries copy should be returned.
+        if (startIndex > endIndex) {
             TimeSeries copy = (TimeSeries) super.clone();
-            copy.data = new java.util.ArrayList();
+            copy.data = new java.util.ArrayList(); // Create an empty data list
             return copy;
         }
         else {
+            // Otherwise, delegate to the overloaded createCopy method with calculated indices.
             return createCopy(startIndex, endIndex);
         }
-
     }
\ No newline at end of file
