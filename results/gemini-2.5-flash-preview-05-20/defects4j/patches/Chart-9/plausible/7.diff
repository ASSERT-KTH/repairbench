diff --git a/tmp/06eda33d-cb30-4ecf-85da-d5825b8b11ad_buggy.java b/tmp/dd641adc-6fc7-4a95-96e2-18fb86065a84_fixed.java
index b4af58a..0c263ea 100644
--- a/tmp/06eda33d-cb30-4ecf-85da-d5825b8b11ad_buggy.java
+++ b/tmp/dd641adc-6fc7-4a95-96e2-18fb86065a84_fixed.java
@@ -1,53 +1,60 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the first time period to copy (<code>null</code> not
      *         permitted).
      * @param end  the last time period to copy (<code>null</code> not
      *         permitted).
      *
      * @return A time series containing a copy of this time series from start
      *         until end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)
         throws CloneNotSupportedException {
 
         if (start == null) {
             throw new IllegalArgumentException("Null 'start' argument.");
         }
         if (end == null) {
             throw new IllegalArgumentException("Null 'end' argument.");
         }
         if (start.compareTo(end) > 0) {
             throw new IllegalArgumentException(
                     "Requires start on or before end.");
         }
-        boolean emptyRange = false;
+
+        // Calculate startIndex: index of the first item whose period is >= 'start'.
+        // getIndex returns the index if found, or -(insertionPoint + 1) if not found.
         int startIndex = getIndex(start);
         if (startIndex < 0) {
-            startIndex = -(startIndex + 1);
-            if (startIndex == this.data.size()) {
-                emptyRange = true;  // start is after last data item
-            }
+            startIndex = -(startIndex + 1); // This is the insertion point, i.e.,
+                                            // the index of the first element *after* 'start'.
+                                            // This is the correct lower bound for the copy.
         }
+
+        // Calculate endIndex: index of the last item whose period is <= 'end'.
         int endIndex = getIndex(end);
-        if (endIndex < 0) {             // end period is not in original series
-            endIndex = -(endIndex + 1); // this is first item AFTER end period
-            endIndex = endIndex - 1;    // so this is last item BEFORE end
-        }
         if (endIndex < 0) {
-            emptyRange = true;
+            endIndex = -(endIndex + 1);     // This is the insertion point, i.e.,
+                                            // the index of the first element *after* 'end'.
+            endIndex = endIndex - 1;        // Adjust to be the index of the *last* element
+                                            // *before* 'end'. This is the correct upper bound.
         }
-        if (emptyRange) {
+
+        // After calculating startIndex and endIndex, we have the effective range
+        // of indices within 'this.data' that fall within [start, end].
+        // If startIndex is beyond the data size, or endIndex is negative,
+        // or startIndex > endIndex, it means the effective range of data items is empty.
+        // In such cases, a new empty TimeSeries should be returned.
+        if (startIndex >= this.data.size() || endIndex < 0 || startIndex > endIndex) {
             TimeSeries copy = (TimeSeries) super.clone();
-            copy.data = new java.util.ArrayList();
+            copy.data = new java.util.ArrayList(); // Create an empty data list
             return copy;
-        }
-        else {
+        } else {
+            // Otherwise, copy the sub-series using the calculated inclusive indices.
             return createCopy(startIndex, endIndex);
         }
-
     }
\ No newline at end of file
