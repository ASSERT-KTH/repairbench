diff --git a/tmp/4fc81673-8cf8-428f-914f-1409b6b2a933_buggy.java b/tmp/da0c126d-3b17-4ae6-8edb-8fa69349c372_fixed.java
index b4af58a..614da7c 100644
--- a/tmp/4fc81673-8cf8-428f-914f-1409b6b2a933_buggy.java
+++ b/tmp/da0c126d-3b17-4ae6-8edb-8fa69349c372_fixed.java
@@ -1,53 +1,65 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the first time period to copy (<code>null</code> not
      *         permitted).
      * @param end  the last time period to copy (<code>null</code> not
      *         permitted).
      *
      * @return A time series containing a copy of this time series from start
      *         until end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)
         throws CloneNotSupportedException {
 
         if (start == null) {
             throw new IllegalArgumentException("Null 'start' argument.");
         }
         if (end == null) {
             throw new IllegalArgumentException("Null 'end' argument.");
         }
         if (start.compareTo(end) > 0) {
             throw new IllegalArgumentException(
                     "Requires start on or before end.");
         }
-        boolean emptyRange = false;
+
+        // Calculate effective start index
         int startIndex = getIndex(start);
         if (startIndex < 0) {
-            startIndex = -(startIndex + 1);
-            if (startIndex == this.data.size()) {
-                emptyRange = true;  // start is after last data item
-            }
+            startIndex = -(startIndex + 1); // This is the insertion point for 'start',
+                                            // which is the index of the first item >= 'start'.
         }
+
+        // Calculate effective end index
         int endIndex = getIndex(end);
         if (endIndex < 0) {             // end period is not in original series
-            endIndex = -(endIndex + 1); // this is first item AFTER end period
-            endIndex = endIndex - 1;    // so this is last item BEFORE end
+            endIndex = -(endIndex + 1); // This is the insertion point for 'end',
+                                            // which is the index of the first item > 'end'.
+            endIndex = endIndex - 1;    // So, this is the index of the last item <= 'end'.
         }
-        if (endIndex < 0) {
+
+        // Determine if the effective range is empty based on calculated indices.
+        // An empty range exists if:
+        // 1. The effective start index is beyond the end of the data.
+        // 2. The effective end index is before the start of the data.
+        // 3. The effective start index is greater than the effective end index
+        //    (meaning the desired 'start' period is after the desired 'end' period
+        //    relative to the actual data points).
+        boolean emptyRange = false;
+        if (startIndex >= this.data.size() || endIndex < 0 || startIndex > endIndex) {
             emptyRange = true;
         }
+
         if (emptyRange) {
             TimeSeries copy = (TimeSeries) super.clone();
-            copy.data = new java.util.ArrayList();
+            copy.data = new java.util.ArrayList(); // Create an empty data list
             return copy;
         }
         else {
+            // Otherwise, copy the data between the determined indices.
             return createCopy(startIndex, endIndex);
         }
-
     }
\ No newline at end of file
