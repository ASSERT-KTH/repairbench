diff --git a/tmp/ca4e09ed-e195-447d-82ea-3560a1dc2d3d_buggy.java b/tmp/4af537b3-00db-4ee9-a793-52a5aa295828_fixed.java
index b4af58a..def1458 100644
--- a/tmp/ca4e09ed-e195-447d-82ea-3560a1dc2d3d_buggy.java
+++ b/tmp/4af537b3-00db-4ee9-a793-52a5aa295828_fixed.java
@@ -1,53 +1,61 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the first time period to copy (<code>null</code> not
      *         permitted).
      * @param end  the last time period to copy (<code>null</code> not
      *         permitted).
      *
      * @return A time series containing a copy of this time series from start
      *         until end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)
         throws CloneNotSupportedException {
 
         if (start == null) {
             throw new IllegalArgumentException("Null 'start' argument.");
         }
         if (end == null) {
             throw new IllegalArgumentException("Null 'end' argument.");
         }
+        // This checks if the conceptual time range itself is valid (start not after end)
         if (start.compareTo(end) > 0) {
             throw new IllegalArgumentException(
                     "Requires start on or before end.");
         }
-        boolean emptyRange = false;
+
         int startIndex = getIndex(start);
         if (startIndex < 0) {
+            // 'start' period is not in the series. 'startIndex' is the insertion point,
+            // which is the index of the first item whose period is greater than 'start'.
             startIndex = -(startIndex + 1);
-            if (startIndex == this.data.size()) {
-                emptyRange = true;  // start is after last data item
-            }
         }
+
         int endIndex = getIndex(end);
-        if (endIndex < 0) {             // end period is not in original series
-            endIndex = -(endIndex + 1); // this is first item AFTER end period
-            endIndex = endIndex - 1;    // so this is last item BEFORE end
-        }
         if (endIndex < 0) {
-            emptyRange = true;
+            // 'end' period is not in the series. 'endIndex' is the insertion point,
+            // which is the index of the first item whose period is greater than 'end'.
+            // To get the last item whose period is less than or equal to 'end', we subtract 1.
+            endIndex = -(endIndex + 1);
+            endIndex = endIndex - 1;
         }
-        if (emptyRange) {
+
+        // Determine if the effective range of data items to copy is empty.
+        // This can happen if:
+        // 1. The calculated 'startIndex' is beyond the actual data size (meaning 'start' is after all data items).
+        // 2. The calculated 'endIndex' is less than 0 (meaning 'end' is before all data items).
+        // 3. The calculated 'startIndex' is greater than the calculated 'endIndex'
+        //    (meaning the desired time range does not encompass any existing data items,
+        //     or the "first" item in the range is actually after the "last" item).
+        if (startIndex >= this.data.size() || endIndex < 0 || startIndex > endIndex) {
             TimeSeries copy = (TimeSeries) super.clone();
             copy.data = new java.util.ArrayList();
             return copy;
-        }
-        else {
+        } else {
+            // If the range is valid and contains data, call the internal createCopy method.
             return createCopy(startIndex, endIndex);
         }
-
     }
\ No newline at end of file
