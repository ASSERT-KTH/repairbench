diff --git a/tmp/3cc14ddc-6060-4fc6-91fb-59bc129bec50_buggy.java b/tmp/a3fc86e2-7119-473b-a4d2-756c9c7a049b_fixed.java
index b4af58a..384b1a9 100644
--- a/tmp/3cc14ddc-6060-4fc6-91fb-59bc129bec50_buggy.java
+++ b/tmp/a3fc86e2-7119-473b-a4d2-756c9c7a049b_fixed.java
@@ -1,53 +1,74 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the first time period to copy (<code>null</code> not
      *         permitted).
      * @param end  the last time period to copy (<code>null</code> not
      *         permitted).
      *
      * @return A time series containing a copy of this time series from start
      *         until end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)
         throws CloneNotSupportedException {
 
         if (start == null) {
             throw new IllegalArgumentException("Null 'start' argument.");
         }
         if (end == null) {
             throw new IllegalArgumentException("Null 'end' argument.");
         }
+        // This initial check ensures the requested time periods are ordered correctly.
         if (start.compareTo(end) > 0) {
             throw new IllegalArgumentException(
                     "Requires start on or before end.");
         }
-        boolean emptyRange = false;
-        int startIndex = getIndex(start);
-        if (startIndex < 0) {
-            startIndex = -(startIndex + 1);
-            if (startIndex == this.data.size()) {
-                emptyRange = true;  // start is after last data item
+
+        // Calculate the first index (inclusive) of data points within the series
+        // that are on or after 'start'.
+        int firstIndex = getIndex(start);
+        if (firstIndex < 0) {
+            // 'start' period is not in the series. 'getIndex' returns '-(insertion point) - 1'.
+            // The insertion point (which is the index of the first item >= 'start') is '-(firstIndex + 1)'.
+            firstIndex = -(firstIndex + 1);
         }
+
+        // Calculate the last index (inclusive) of data points within the series
+        // that are on or before 'end'.
+        int lastIndex = getIndex(end);
+        if (lastIndex < 0) {
+            // 'end' period is not in the series. 'getIndex' returns '-(insertion point) - 1'.
+            // The insertion point (which is the index of the first item > 'end') is '-(lastIndex + 1)'.
+            // We want the index of the last item that is <= 'end', which is the item just before
+            // the insertion point.
+            lastIndex = -(lastIndex + 1) - 1;
         }
-        int endIndex = getIndex(end);
-        if (endIndex < 0) {             // end period is not in original series
-            endIndex = -(endIndex + 1); // this is first item AFTER end period
-            endIndex = endIndex - 1;    // so this is last item BEFORE end
-        }
-        if (endIndex < 0) {
-            emptyRange = true;
-        }
-        if (emptyRange) {
+
+        // Determine if the effective range of data to copy is empty.
+        // This covers cases where the requested time range does not overlap with any data
+        // in the current series, or overlaps but results in no items to copy.
+        //
+        // 1. 'firstIndex >= this.data.size()': The 'start' period is effectively after the last
+        //    item in the series (e.g., firstIndex points beyond the end of the data list).
+        // 2. 'lastIndex < 0': The 'end' period is effectively before the first item in the series
+        //    (e.g., lastIndex points before the start of the data list).
+        // 3. 'firstIndex > lastIndex': The determined effective start index is greater than
+        //    the effective end index. This means the requested time period range [start, end]
+        //    does not encompass any data points within the series, even if individual start/end
+        //    periods might fall within the series' overall time span. For example, if the series
+        //    has data for Day A and Day C, and the request is for Day B (between A and C).
+        if (firstIndex >= this.data.size() || lastIndex < 0 || firstIndex > lastIndex) {
+            // If any of these conditions are true, the resulting copy should be an empty TimeSeries.
             TimeSeries copy = (TimeSeries) super.clone();
-            copy.data = new java.util.ArrayList();
+            copy.data = new java.util.ArrayList(); // Assuming 'data' is the internal list storing TimeSeriesDataItem.
             return copy;
         }
         else {
-            return createCopy(startIndex, endIndex);
+            // If the range is valid and non-empty, call the internal createCopy method
+            // with the calculated 0-based inclusive start and end indices.
+            return createCopy(firstIndex, lastIndex);
         }
-
     }
\ No newline at end of file
