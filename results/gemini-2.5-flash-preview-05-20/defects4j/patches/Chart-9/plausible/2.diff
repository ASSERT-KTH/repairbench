diff --git a/tmp/1403a3d1-57ba-48ff-9876-1f5ef9abb993_buggy.java b/tmp/4dca6ca9-f078-40c4-9f10-febb7f8374c3_fixed.java
index b4af58a..ce769dd 100644
--- a/tmp/1403a3d1-57ba-48ff-9876-1f5ef9abb993_buggy.java
+++ b/tmp/4dca6ca9-f078-40c4-9f10-febb7f8374c3_fixed.java
@@ -1,53 +1,60 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the first time period to copy (<code>null</code> not
      *         permitted).
      * @param end  the last time period to copy (<code>null</code> not
      *         permitted).
      *
      * @return A time series containing a copy of this time series from start
      *         until end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)
         throws CloneNotSupportedException {
 
         if (start == null) {
             throw new IllegalArgumentException("Null 'start' argument.");
         }
         if (end == null) {
             throw new IllegalArgumentException("Null 'end' argument.");
         }
         if (start.compareTo(end) > 0) {
             throw new IllegalArgumentException(
                     "Requires start on or before end.");
         }
-        boolean emptyRange = false;
+
+        // Determine the actual start index for copying.
+        // getIndex(start) returns index if found, or -(insertionPoint + 1) if not.
+        // If not found, insertionPoint is the index where 'start' would be inserted,
+        // which is also the index of the first item *after* 'start'.
         int startIndex = getIndex(start);
         if (startIndex < 0) {
-            startIndex = -(startIndex + 1);
-            if (startIndex == this.data.size()) {
-                emptyRange = true;  // start is after last data item
-            }
+            startIndex = -(startIndex + 1); // Now startIndex is the index of the first item at or after 'start'
         }
+
+        // Determine the actual end index for copying.
+        // getIndex(end) returns index if found, or -(insertionPoint + 1) if not.
+        // If not found, insertionPoint is the index of the first item *after* 'end'.
+        // We want the last item *at or before* 'end', so we subtract 1 from the insertionPoint.
         int endIndex = getIndex(end);
-        if (endIndex < 0) {             // end period is not in original series
-            endIndex = -(endIndex + 1); // this is first item AFTER end period
-            endIndex = endIndex - 1;    // so this is last item BEFORE end
-        }
         if (endIndex < 0) {
-            emptyRange = true;
+            endIndex = -(endIndex + 1); // This is the insertion point (first item AFTER 'end')
+            endIndex = endIndex - 1;    // This is the index of the last item AT OR BEFORE 'end'
         }
-        if (emptyRange) {
+
+        // If the calculated startIndex is greater than the calculated endIndex,
+        // it means the specified period range does not overlap with any data
+        // in the series, or the effective 'start' is after the effective 'end' within the data.
+        // In such cases, an empty time series should be returned.
+        if (startIndex > endIndex) {
             TimeSeries copy = (TimeSeries) super.clone();
-            copy.data = new java.util.ArrayList();
+            copy.data = new java.util.ArrayList(); // Create an empty data list
             return copy;
-        }
-        else {
+        } else {
+            // Otherwise, create the copy using the determined inclusive index range.
             return createCopy(startIndex, endIndex);
         }
-
     }
\ No newline at end of file
