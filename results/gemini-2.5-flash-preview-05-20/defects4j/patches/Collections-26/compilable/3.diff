diff --git a/tmp/ab514293-c9ef-4fd8-8edc-2d5f16d55fec_buggy.java b/tmp/d72d3c77-13ad-4f71-9b6c-16275a86f40f_fixed.java
index a667cbe..e0202a3 100644
--- a/tmp/ab514293-c9ef-4fd8-8edc-2d5f16d55fec_buggy.java
+++ b/tmp/d72d3c77-13ad-4f71-9b6c-16275a86f40f_fixed.java
@@ -1,10 +1,27 @@
     /**
      * Recalculate the hash code after deserialization. The hash code of some
      * keys might have change (hash codes based on the system hash code are
      * only stable for the same process).
      * @return the instance with recalculated hash code
      */
     private Object readResolve() {
-        calculateHashCode(keys);
+        // The MultiKey.calculateHashCode method is 'protected', which allows
+        // derived classes to override it. If a derived class (like DerivedMultiKey)
+        // overrides calculateHashCode and its implementation is buggy or
+        // does not correctly update the 'this.hashCode' field (e.g., if it
+        // does not call super.calculateHashCode or has a faulty calculation),
+        // then calling calculateHashCode(keys) polymorphically in readResolve
+        // will result in an incorrect (often zero) hash code.
+        // To ensure the MultiKey instance's hash code is correctly recalculated
+        // using MultiKey's own logic, the calculation is performed directly here.
+        int total = 0;
+        if (keys != null) {
+            for (final Object key : keys) { // Assuming 'keys' is an Object[] or compatible generic array
+                if (key != null) {
+                    total ^= key.hashCode();
+                }
+            }
+        }
+        this.hashCode = total; // Assign the calculated hash to the instance's 'hashCode' field
         return this;
     }
\ No newline at end of file
