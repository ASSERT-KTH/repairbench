diff --git a/tmp/7f9e6880-7d1d-435c-8cba-eb16c1640410_buggy.java b/tmp/6fb4a182-9d59-4756-9c9b-6928bb7e3dcc_fixed.java
index a667cbe..5be065b 100644
--- a/tmp/7f9e6880-7d1d-435c-8cba-eb16c1640410_buggy.java
+++ b/tmp/6fb4a182-9d59-4756-9c9b-6928bb7e3dcc_fixed.java
@@ -1,10 +1,26 @@
     /**
      * Recalculate the hash code after deserialization. The hash code of some
      * keys might have change (hash codes based on the system hash code are
      * only stable for the same process).
      * @return the instance with recalculated hash code
      */
     private Object readResolve() {
-        calculateHashCode(keys);
+        // The original implementation called calculateHashCode(keys).
+        // However, if calculateHashCode is overridden by a subclass in a way
+        // that doesn't properly update the MultiKey's 'hashCode' field (e.g.,
+        // if the subclass shadows the field or fails to call super.calculateHashCode),
+        // the transient 'hashCode' field of the MultiKey superclass will remain 0.
+        // To ensure MultiKey's own hashCode field is correctly calculated and set,
+        // we directly perform the calculation here, bypassing any potentially
+        // problematic subclass overrides of calculateHashCode.
+        int total = 0;
+        if (keys != null) {
+            for (final Object key : keys) {
+                if (key != null) {
+                    total ^= key.hashCode();
+                }
+            }
+        }
+        this.hashCode = total;
         return this;
     }
