diff --git a/tmp/116f73df-5d3e-4732-972a-d01fc9b99ebb_buggy.java b/tmp/7283d634-9a65-4f9e-80a7-117930310c9f_fixed.java
index 784bbab..e2fbbaa 100644
--- a/tmp/116f73df-5d3e-4732-972a-d01fc9b99ebb_buggy.java
+++ b/tmp/7283d634-9a65-4f9e-80a7-117930310c9f_fixed.java
@@ -1,42 +1,107 @@
+import java.io.IOException;
+import java.util.Arrays;
+import java.util.LinkedHashMap;
+import java.util.Map;
+
+import org.apache.commons.csv.CSVRecord; // Assuming CSVRecord is available in the context
+
+// The class containing this method is org.apache.commons.csv.CSVParser
+// Assuming 'this.format' and 'this.nextRecord()' are available as context members.
+
+class CSVParser { // This class declaration is only for context and should not be part of the output.
+    private final org.apache.commons.csv.CSVFormat format;
+    private final org.apache.commons.csv.Lexer lexer; // Assuming lexer exists for nextRecord()
+
+    // Constructor or other context members are omitted for brevity.
+    // nextRecord() is a private helper method that reads the next CSV record.
+    private CSVRecord nextRecord() throws IOException {
+        // Dummy implementation for compilation context, actual implementation exists.
+        // It's crucial that this can return a record where values() contains nulls
+        // if format.getNullString() is configured to convert empty strings to null.
+        return null;
+    }
+
+    // Dummy constructor for context.
+    public CSVParser(final java.io.Reader reader, final org.apache.commons.csv.CSVFormat format) throws IOException {
+        this.format = format;
+        this.lexer = null; // Dummy
+        // this.headerMap = initializeHeader(); // This call is where the problem starts.
+    }
+
+
     /**
      * Initializes the name to index mapping if the format defines a header.
      *
      * @return null if the format has no header.
      * @throws IOException if there is a problem reading the header or skipping the first record
      */
     private Map<String, Integer> initializeHeader() throws IOException {
         Map<String, Integer> hdrMap = null;
         final String[] formatHeader = this.format.getHeader();
-        if (formatHeader != null) {
-            hdrMap = new LinkedHashMap<String, Integer>();
 
         String[] headerRecord = null;
-            if (formatHeader.length == 0) {
-                // read the header from the first line of the file
-                final CSVRecord nextRecord = this.nextRecord();
-                if (nextRecord != null) {
-                    headerRecord = nextRecord.values();
-                }
-            } else {
+
+        // Determine how to get the header record:
+        // Case 1: Header names are explicitly provided in the format (formatHeader is not null).
+        if (formatHeader != null) {
+            // If the format specifies to skip the header record, read and discard the first line from the file.
+            // This is typically used when the file has a header, but the actual header names are predefined.
             if (this.format.getSkipHeaderRecord()) {
                 this.nextRecord();
             }
             headerRecord = formatHeader;
         }
+        // Case 2: Header names are not explicitly provided (formatHeader is null),
+        // which implies the header should be read from the first line of the file.
+        // This corresponds to CSVFormat.withHeader() without arguments.
+        else {
+            // Read the first record from the file to use as the header.
+            // The record is consumed as the header, so it effectively 'skips' it as data.
+            final CSVRecord nextRecord = this.nextRecord();
+            if (nextRecord != null) {
+                headerRecord = nextRecord.values();
+            }
+            // If nextRecord is null, it means the file was empty or header could not be read,
+            // in which case headerRecord remains null, and hdrMap will be null.
+        }
 
-            // build the name to index mappings
+        // Build the name to index mappings if a header record was successfully determined.
         if (headerRecord != null) {
+            hdrMap = new LinkedHashMap<String, Integer>();
             for (int i = 0; i < headerRecord.length; i++) {
                 final String header = headerRecord[i];
+
+                // Handle null header names, which can occur if nullString is configured (e.g., "").
+                if (header == null) {
+                    // If empty headers are to be ignored, then null headers (derived from nullString)
+                    // should also be ignored and not included in the map.
+                    if (this.format.getIgnoreEmptyHeaders()) {
+                        continue; // Skip this null header entry
+                    } else {
+                        // If null headers are not explicitly ignored, and they cannot be keys in the map,
+                        // it's an invalid state. Throw an exception.
+                        throw new IllegalArgumentException("Header contains a null column name: " + Arrays.toString(headerRecord));
+                    }
+                }
+
+                // Check for duplicate header names (after handling nulls).
                 final boolean containsHeader = hdrMap.containsKey(header);
-                    final boolean emptyHeader = header.trim().isEmpty();
+                final boolean emptyHeader = header.trim().isEmpty(); // Safe now, 'header' is not null.
+
+                // If a header is a duplicate AND either it's not empty, or it's empty but empty headers are NOT ignored.
                 if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {
                     throw new IllegalArgumentException("The header contains a duplicate name: \"" + header +
                             "\" in " + Arrays.toString(headerRecord));
                 }
+
+                // If the header is empty and empty headers should be ignored, skip adding it to the map.
+                if (emptyHeader && this.format.getIgnoreEmptyHeaders()) {
+                    continue;
+                }
+
                 hdrMap.put(header, Integer.valueOf(i));
             }
         }
-        }
         return hdrMap;
     }
+}
\ No newline at end of file
