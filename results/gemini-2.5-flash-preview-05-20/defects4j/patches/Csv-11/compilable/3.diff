diff --git a/tmp/9bc501a9-2fed-47d9-8501-c9b68bfe4822_buggy.java b/tmp/aa494ace-eadd-4e1f-922e-cb379404795f_fixed.java
index 784bbab..53d37e8 100644
--- a/tmp/9bc501a9-2fed-47d9-8501-c9b68bfe4822_buggy.java
+++ b/tmp/aa494ace-eadd-4e1f-922e-cb379404795f_fixed.java
@@ -1,42 +1,62 @@
     /**
      * Initializes the name to index mapping if the format defines a header.
      *
      * @return null if the format has no header.
      * @throws IOException if there is a problem reading the header or skipping the first record
      */
     private Map<String, Integer> initializeHeader() throws IOException {
         Map<String, Integer> hdrMap = null;
         final String[] formatHeader = this.format.getHeader();
-        if (formatHeader != null) {
+
+        // A header map should be initialized if the format specifies that a header record is present.
+        // This is indicated by getSkipHeaderRecord() being true, which is set by withHeader() variants.
+        if (this.format.getSkipHeaderRecord()) {
             hdrMap = new LinkedHashMap<String, Integer>();
 
             String[] headerRecord = null;
-            if (formatHeader.length == 0) {
-                // read the header from the first line of the file
+            if (formatHeader == null) {
+                // Header is to be read from the first line of the file (e.g., withHeader() called without arguments).
+                // This implicitly skips the header record.
                 final CSVRecord nextRecord = this.nextRecord();
                 if (nextRecord != null) {
                     headerRecord = nextRecord.values();
                 }
+                // If nextRecord is null, headerRecord remains null, leading to an empty hdrMap, which is fine.
             } else {
-                if (this.format.getSkipHeaderRecord()) {
-                    this.nextRecord();
-                }
-                headerRecord = formatHeader;
+                // Header was provided explicitly by the format (e.g., withHeader("A", "B")).
+                // Since getSkipHeaderRecord() is true, the first line of the file (which would be data) needs to be skipped.
+                this.nextRecord(); // Skip the first data record.
+                headerRecord = formatHeader; // Use the header provided in the format.
             }
 
             // build the name to index mappings
             if (headerRecord != null) {
                 for (int i = 0; i < headerRecord.length; i++) {
                     final String header = headerRecord[i];
+
+                    // Handle potential NPE if 'header' is null (e.g., due to withNullString(""))
+                    final boolean emptyHeader;
+                    if (header == null) {
+                        emptyHeader = true;
+                    } else {
+                        emptyHeader = header.trim().isEmpty();
+                    }
+
                     final boolean containsHeader = hdrMap.containsKey(header);
-                    final boolean emptyHeader = header.trim().isEmpty();
+
                     if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {
                         throw new IllegalArgumentException("The header contains a duplicate name: \"" + header +
                                 "\" in " + Arrays.toString(headerRecord));
                     }
+
+                    // If ignoreEmptyHeaders is true and the header is empty (or null), do not add it to the map.
+                    if (this.format.getIgnoreEmptyHeaders() && emptyHeader) {
+                        // Do nothing, effectively ignoring this header.
+                    } else {
                         hdrMap.put(header, Integer.valueOf(i));
                     }
                 }
             }
+        }
         return hdrMap;
     }
\ No newline at end of file
