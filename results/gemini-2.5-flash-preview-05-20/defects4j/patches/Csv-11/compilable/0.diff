diff --git a/tmp/cbbec4ab-b0c9-41ba-91fc-34fba4f8ccbb_buggy.java b/tmp/c8e353cf-745d-4e5f-b69b-6afd979fcbc0_fixed.java
index 784bbab..02bc7e6 100644
--- a/tmp/cbbec4ab-b0c9-41ba-91fc-34fba4f8ccbb_buggy.java
+++ b/tmp/c8e353cf-745d-4e5f-b69b-6afd979fcbc0_fixed.java
@@ -1,42 +1,61 @@
     /**
      * Initializes the name to index mapping if the format defines a header.
      *
      * @return null if the format has no header.
      * @throws IOException if there is a problem reading the header or skipping the first record
      */
     private Map<String, Integer> initializeHeader() throws IOException {
         Map<String, Integer> hdrMap = null;
         final String[] formatHeader = this.format.getHeader();
-        if (formatHeader != null) {
+
+        // Determine if a header should be processed.
+        // A header is processed if:
+        // 1. User explicitly provided header names (formatHeader != null).
+        // 2. The format implies that the first record is a header (skipHeaderRecord is true).
+        //    CSVFormat.withHeader() (without arguments) sets skipHeaderRecord to true internally.
+        if (formatHeader != null || this.format.getSkipHeaderRecord()) {
             hdrMap = new LinkedHashMap<String, Integer>();
-
             String[] headerRecord = null;
-            if (formatHeader.length == 0) {
-                // read the header from the first line of the file
-                final CSVRecord nextRecord = this.nextRecord();
+
+            // Determine the actual header record to use for mapping.
+            if (formatHeader != null && formatHeader.length > 0) {
+                // Case: User provided specific header names (e.g., withHeader("A", "B"))
+                // If the format also specifies to skip the header record from the file, consume it now.
+                if (this.format.getSkipHeaderRecord()) {
+                    this.nextRecord(); // Consume the header line from the input stream
+                }
+                headerRecord = formatHeader; // Use the provided header names for the map
+            } else {
+                // Case: User specified 'withHeader()' (no arguments) or 'withHeader(new String[0])'.
+                // In these cases, 'formatHeader' is null (or an empty array), and 'skipHeaderRecord' is true.
+                // The header must be read from the first line of the file.
+                final CSVRecord nextRecord = this.nextRecord(); // This consumes the first record (the header)
                 if (nextRecord != null) {
                     headerRecord = nextRecord.values();
                 }
-            } else {
-                if (this.format.getSkipHeaderRecord()) {
-                    this.nextRecord();
-                }
-                headerRecord = formatHeader;
+                // If nextRecord is null, headerRecord remains null, which will be handled by the next if (headerRecord != null) check.
             }
 
-            // build the name to index mappings
-            if (headerRecord != null) {
+            // Build the name to index mappings from the determined headerRecord
+            if (headerRecord != null) { // Ensure we have a header record to process
                 for (int i = 0; i < headerRecord.length; i++) {
                     final String header = headerRecord[i];
-                    final boolean containsHeader = hdrMap.containsKey(header);
                     final boolean emptyHeader = header.trim().isEmpty();
-                    if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {
+
+                    if (emptyHeader && this.format.getIgnoreEmptyHeaders()) {
+                        // If the header is empty and empty headers should be ignored, skip this entry completely.
+                        continue;
+                    }
+
+                    // Check for duplicate names among the headers that are being mapped.
+                    // An IllegalArgumentException is thrown if a duplicate is found.
+                    if (hdrMap.containsKey(header)) {
                         throw new IllegalArgumentException("The header contains a duplicate name: \"" + header +
                                 "\" in " + Arrays.toString(headerRecord));
                     }
                     hdrMap.put(header, Integer.valueOf(i));
                 }
             }
         }
         return hdrMap;
     }
\ No newline at end of file
