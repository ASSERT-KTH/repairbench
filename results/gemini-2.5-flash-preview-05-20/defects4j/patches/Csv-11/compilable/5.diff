diff --git a/tmp/71b108a9-f49a-46fd-9c87-5547cc87c7c7_buggy.java b/tmp/b32b16e2-a7a4-4c82-8829-4f103aa74c2f_fixed.java
index 784bbab..0ee17bd 100644
--- a/tmp/71b108a9-f49a-46fd-9c87-5547cc87c7c7_buggy.java
+++ b/tmp/b32b16e2-a7a4-4c82-8829-4f103aa74c2f_fixed.java
@@ -1,42 +1,64 @@
     /**
      * Initializes the name to index mapping if the format defines a header.
      *
      * @return null if the format has no header.
      * @throws IOException if there is a problem reading the header or skipping the first record
      */
     private Map<String, Integer> initializeHeader() throws IOException {
-        Map<String, Integer> hdrMap = null;
-        final String[] formatHeader = this.format.getHeader();
-        if (formatHeader != null) {
-            hdrMap = new LinkedHashMap<String, Integer>();
+        Map<String, Integer> hdrMap = null; // Will be initialized if a header is found/defined.
+        String[] headerRecord = null;       // The actual array of header names to be mapped.
 
-            String[] headerRecord = null;
-            if (formatHeader.length == 0) {
-                // read the header from the first line of the file
+        final String[] formatHeader = this.format.getHeader(); // This can be null (withHeader()) or an array (withHeader(String...)).
+
+        // Determine the source of the header record:
+        // 1. If formatHeader is null, it means the header should be read from the first record of the file.
+        // 2. If formatHeader is an empty array, per Javadoc, it means records are parsed with a default header (i.e., no header map).
+        // 3. If formatHeader is a non-empty array, it's the explicit header to be used.
+        if (formatHeader == null) { // Case: CSVFormat.withHeader() was called (implicit header from file)
+            if (this.format.getSkipHeaderRecord()) {
+                // If skipping the header record, and no explicit header is defined, then no header map is created.
+                this.nextRecord(); // Consume (skip) the first record.
+                // headerRecord remains null, so hdrMap will not be created.
+            } else {
+                // Read the first record from the file to use as the header.
                 final CSVRecord nextRecord = this.nextRecord();
                 if (nextRecord != null) {
                     headerRecord = nextRecord.values();
                 }
-            } else {
+            }
+        } else if (formatHeader.length > 0) { // Case: CSVFormat.withHeader("A", "B", ...) (explicit non-empty header)
             if (this.format.getSkipHeaderRecord()) {
+                // If skipping the header record, consume the first record from the file.
                 this.nextRecord();
             }
+            // Use the explicitly provided header for mapping.
             headerRecord = formatHeader;
+        } else { // Case: formatHeader.length == 0 (explicit empty header, i.e., CSVFormat.withHeader(new String[0]))
+            // Per Javadoc: "When the header is null or empty, the records are parsed with the default header."
+            // This implies no name-to-index mapping (hdrMap remains null).
+            if (this.format.getSkipHeaderRecord()) {
+                // Still skip the first record if configured, even if no header map is being built.
+                this.nextRecord();
+            }
+            // headerRecord remains null, so hdrMap will not be created, which is consistent with "default header".
         }
 
-            // build the name to index mappings
+        // Build the name-to-index mappings if a headerRecord array was determined.
         if (headerRecord != null) {
+            hdrMap = new LinkedHashMap<String, Integer>();
             for (int i = 0; i < headerRecord.length; i++) {
                 final String header = headerRecord[i];
                 final boolean containsHeader = hdrMap.containsKey(header);
                 final boolean emptyHeader = header.trim().isEmpty();
+
+                // Check for duplicate headers based on format configuration.
+                // Duplicates are disallowed unless the header is empty and ignoreEmptyHeaders is true.
                 if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {
                     throw new IllegalArgumentException("The header contains a duplicate name: \"" + header +
                             "\" in " + Arrays.toString(headerRecord));
                 }
                 hdrMap.put(header, Integer.valueOf(i));
             }
         }
-        }
         return hdrMap;
     }
\ No newline at end of file
