diff --git a/tmp/205a5daa-09fc-4754-870c-20a1a75273e1_buggy.java b/tmp/025f6b8e-2684-423c-a094-743fca52ca05_fixed.java
index 784bbab..4c27dba 100644
--- a/tmp/205a5daa-09fc-4754-870c-20a1a75273e1_buggy.java
+++ b/tmp/025f6b8e-2684-423c-a094-743fca52ca05_fixed.java
@@ -1,42 +1,56 @@
     /**
      * Initializes the name to index mapping if the format defines a header.
      *
      * @return null if the format has no header.
      * @throws IOException if there is a problem reading the header or skipping the first record
      */
     private Map<String, Integer> initializeHeader() throws IOException {
         Map<String, Integer> hdrMap = null;
         final String[] formatHeader = this.format.getHeader();
         if (formatHeader != null) {
             hdrMap = new LinkedHashMap<String, Integer>();
 
             String[] headerRecord = null;
             if (formatHeader.length == 0) {
                 // read the header from the first line of the file
                 final CSVRecord nextRecord = this.nextRecord();
                 if (nextRecord != null) {
                     headerRecord = nextRecord.values();
                 }
             } else {
                 if (this.format.getSkipHeaderRecord()) {
                     this.nextRecord();
                 }
                 headerRecord = formatHeader;
             }
 
             // build the name to index mappings
             if (headerRecord != null) {
                 for (int i = 0; i < headerRecord.length; i++) {
                     final String header = headerRecord[i];
-                    final boolean containsHeader = hdrMap.containsKey(header);
                     final boolean emptyHeader = header.trim().isEmpty();
-                    if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {
+
+                    // If empty headers are ignored, they should not be added to the header map.
+                    if (emptyHeader && this.format.getIgnoreEmptyHeaders()) {
+                        continue; // Skip this header
+                    }
+
+                    // Check for duplicate headers.
+                    // This applies to non-empty headers, and to empty headers if they are NOT ignored.
+                    final boolean containsHeader = hdrMap.containsKey(header);
+                    if (containsHeader) {
+                        // The condition in the original code for throwing `IllegalArgumentException` was:
+                        // `containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))`
+                        // With the `continue` added above, if `emptyHeader` is true AND `getIgnoreEmptyHeaders()` is true,
+                        // this `if (containsHeader)` block will not be entered.
+                        // Thus, this block will only be entered if `header` is a duplicate and
+                        // it's either a non-empty header or an empty header that is *not* ignored.
                         throw new IllegalArgumentException("The header contains a duplicate name: \"" + header +
                                 "\" in " + Arrays.toString(headerRecord));
                     }
                     hdrMap.put(header, Integer.valueOf(i));
                 }
             }
         }
         return hdrMap;
     }
