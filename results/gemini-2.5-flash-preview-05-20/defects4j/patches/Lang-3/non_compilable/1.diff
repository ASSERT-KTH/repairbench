diff --git a/tmp/43ae4878-c913-4d42-8217-ea452b78768d_buggy.java b/tmp/24194b30-0dcd-4416-8464-68a63b0fa399_fixed.java
index b09cd82..cac35d7 100644
--- a/tmp/43ae4878-c913-4d42-8217-ea452b78768d_buggy.java
+++ b/tmp/24194b30-0dcd-4416-8464-68a63b0fa399_fixed.java
@@ -1,192 +1,254 @@
+import org.apache.commons.lang3.StringUtils; // Assuming StringUtils is imported
+
+public class NumberUtils {
+
+    // Assuming createInteger, createLong, createBigInteger, createFloat, createDouble, isDigits, isAllZeros are defined elsewhere in the class.
+    // For this fix, only createNumber is provided. Dummy implementations are given here for context if needed, but the actual ones are external.
+    /*
+    private static Integer createInteger(final String str) {
+        return Integer.decode(str);
+    }
+
+    private static Long createLong(final String str) {
+        return Long.decode(str);
+    }
+
+    private static java.math.BigInteger createBigInteger(final String str) {
+        return new java.math.BigInteger(str);
+    }
+
+    private static Float createFloat(final String str) {
+        return Float.valueOf(str);
+    }
+
+    private static Double createDouble(final String str) {
+        return Double.valueOf(str);
+    }
+
+    private static boolean isDigits(final String str) {
+        return str != null && str.chars().allMatch(Character::isDigit);
+    }
+
+    private static boolean isAllZeros(final String str) {
+        if (str == null || str.isEmpty()) {
+            return true;
+        }
+        for (int i = 0; i < str.length(); i++) {
+            if (str.charAt(i) != '0') {
+                return false;
+            }
+        }
+        return true;
+    }
+    */
+
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
      * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
      * prefix is more than 8 - or BigInteger if there are more than 16 digits.
      * </p>
      * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
      * <code>'f','F','d','D','l','L'</code>. If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>
      * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
      * be Integer, Long or BigDecimal as appropriate.
      * </p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         // Need to deal with all possible hex prefixes here
         final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
         int pfxLen = 0;
         for(final String pfx : hex_prefixes) {
             if (str.startsWith(pfx)) {
                 pfxLen += pfx.length();
                 break;
             }
         }
         if (pfxLen > 0) { // we have a hex number
             final int hexDigits = str.length() - pfxLen;
             if (hexDigits > 16) { // too many for Long
                 return createBigInteger(str);
             }
             if (hexDigits > 8) { // too many for an int
                 return createLong(str);
             }
             return createInteger(str);
         }
         final char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
-        String exp;
+        String exp = null; // Initialize exp to null
         final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
+        // Fix 1: Use Math.max to correctly find the exponent position
+        final int expPos = Math.max(str.indexOf('e'), str.indexOf('E'));
 
         int numDecimals = 0; // Check required precision (LANG-693)
         if (decPos > -1) { // there is a decimal point
-
+            // Fix: Add check for exponent before decimal point, which is invalid
+            if (expPos > -1 && expPos < decPos) {
+                throw new NumberFormatException(str + " is not a valid number.");
+            }
             if (expPos > -1) { // there is an exponent
-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
-                    throw new NumberFormatException(str + " is not a valid number.");
-                }
                 dec = str.substring(decPos + 1, expPos);
             } else {
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
             numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
-        } else {
+        } else { // no decimal
             if (expPos > -1) {
-                if (expPos > str.length()) { // prevents double exponent causing IOOBE
-                    throw new NumberFormatException(str + " is not a valid number.");
-                }
                 mant = str.substring(0, expPos);
             } else {
                 mant = str;
             }
             dec = null;
         }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
+
+        // Add allDigits for precision check (LANG-693)
+        final String allDigits = mant + (dec == null ? "" : dec);
+
+        if (!Character.isDigit(lastChar) && lastChar != '.') { // Type qualifier present
+            // Re-determine exp here based on the fixed expPos logic
+            if (expPos > -1 && expPos < str.length() - 1) { // Exponent exists and is not the last char (which is the type qualifier)
+                exp = str.substring(expPos + 1, str.length() - 1); // Exponent is between 'e'/'E' and the type qualifier
             } else {
-                exp = null;
+                exp = null; // No exponent or it is implicitly handled by the type qualifier parsing
             }
+
             //Requesting a specific type..
             final String numeric = str.substring(0, str.length() - 1);
-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // exp can be null, isAllZeros handles it
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
                     if (dec == null
                         && exp == null
                         && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                         try {
                             return createLong(numeric);
                         } catch (final NumberFormatException nfe) { // NOPMD
                             // Too big for a long
                         }
                         return createBigInteger(numeric);
 
                     }
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
                         final Float f = NumberUtils.createFloat(numeric);
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                             //If it's too big for a float or the float value = 0 and the string
                             //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
 
                     } catch (final NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
                     }
                     //$FALL-THROUGH$
                 case 'd' :
                 case 'D' :
                     try {
                         final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        // Fix 4: Corrected floatValue() to doubleValue() for Double comparison
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                             return d;
                         }
                     } catch (final NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
                     }
                     try {
                         return createBigDecimal(numeric);
                     } catch (final NumberFormatException e) { // NOPMD
                         // ignore the bad number
                     }
                     //$FALL-THROUGH$
                 default :
                     throw new NumberFormatException(str + " is not a valid number.");
 
             }
         }
         //User doesn't have a preference on the return type, so let's start
         //small and go from there...
-        if (expPos > -1 && expPos < str.length() - 1) {
-            exp = str.substring(expPos + 1, str.length());
+
+        // Fix 2: Correctly determine exp for non-qualified numbers (to the end of the string)
+        if (expPos > -1) {
+            exp = str.substring(expPos + 1); // Exponent goes from its start position to the end of the string
         } else {
-            exp = null;
+            exp = null; // No exponent
         }
+
         if (dec == null && exp == null) { // no decimal point and no exponent
             //Must be an Integer, Long, Biginteger
             try {
                 return createInteger(str);
             } catch (final NumberFormatException nfe) { // NOPMD
                 // ignore the bad number
             }
             try {
                 return createLong(str);
             } catch (final NumberFormatException nfe) { // NOPMD
                 // ignore the bad number
             }
             return createBigInteger(str);
         }
 
         //Must be a Float, Double, BigDecimal
+        // Re-calculate allZeros as exp might have just been set/re-set
         final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
         try {
+                // Fix 3: Add precision check for Float (LANG-693)
+                // If there are too many decimal places or total digits for a float to retain precision, bypass float
+                if (numDecimals > 7 || allDigits.length() > 9) {
+                    throw new NumberFormatException(); // Force to Double/BigDecimal
+                }
                 final Float f = createFloat(str);
                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                     return f;
                 }
         } catch (final NumberFormatException nfe) { // NOPMD
             // ignore the bad number
         }
         try {
+                // Fix 3: Add precision check for Double (LANG-693)
+                // If there are too many decimal places or total digits for a double to retain precision, bypass double
+                if (numDecimals > 16 || allDigits.length() > 18) {
+                    throw new NumberFormatException(); // Force to BigDecimal
+                }
                 final Double d = createDouble(str);
                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                     return d;
                 }
         } catch (final NumberFormatException nfe) { // NOPMD
             // ignore the bad number
         }
 
         return createBigDecimal(str);
     }
+}
\ No newline at end of file
