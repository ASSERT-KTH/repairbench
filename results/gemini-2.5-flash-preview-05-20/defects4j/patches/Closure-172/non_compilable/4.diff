diff --git a/tmp/6382fdde-2672-49ba-bae8-882b97e8c245_buggy.java b/tmp/4fe020df-648a-49ce-8d3c-b9e1006fcaca_fixed.java
index 7b89a27..967b585 100644
--- a/tmp/6382fdde-2672-49ba-bae8-882b97e8c245_buggy.java
+++ b/tmp/4fe020df-648a-49ce-8d3c-b9e1006fcaca_fixed.java
@@ -1,76 +1,96 @@
     /**
      * Determines whether a qualified name is inferred.
      * NOTE(nicksantos): Determining whether a property is declared or not
      * is really really obnoxious.
      *
      * The problem is that there are two (equally valid) coding styles:
      *
      * (function() {
      *   /* The authoritative definition of goog.bar. /
      *   goog.bar = function() {};
      * })();
      *
      * function f() {
      *   goog.bar();
      *   /* Reset goog.bar to a no-op. /
      *   goog.bar = function() {};
      * }
      *
      * In a dynamic language with first-class functions, it's very difficult
      * to know which one the user intended without looking at lots of
      * contextual information (the second example demonstrates a small case
      * of this, but there are some really pathological cases as well).
      *
      * The current algorithm checks if either the declaration has
      * JsDoc type information, or @const with a known type,
      * or a function literal with a name we haven't seen before.
      */
     private boolean isQualifiedNameInferred(
         String qName, Node n, JSDocInfo info,
         Node rhsValue, JSType valueType) {
       if (valueType == null) {
         return true;
       }
 
       // Prototypes of constructors and interfaces are always declared.
+      // However, if the object is not a constructor, then its 'prototype' property
+      // is just a regular property and should be inferred like other properties.
+      // 'n' is the GETPROP node (e.g., 'a.prototype').
+      // Its first child is the object expression (e.g., 'a').
       if (qName != null && qName.endsWith(".prototype")) {
-          return false;
+        Node objectNode = n.getFirstChild();
+        JSType objectType = getJSType(objectNode);
+        if (objectType != null && objectType.isFunctionType() && objectType.toMaybeFunctionType().isConstructor()) {
+          return false; // This is a constructor's prototype, so it's declared.
+        }
+        // Else, it's a 'prototype' property on a non-constructor object.
+        // It should follow the general inference rules, which default to inferred
+        // unless explicitly declared via JSDoc, const, or specific function patterns.
       }
 
       boolean inferred = true;
       if (info != null) {
         inferred = !(info.hasType()
             || info.hasEnumParameterType()
             || (isConstantSymbol(info, n) && valueType != null
                 && !valueType.isUnknownType())
             || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
       }
 
       if (inferred && rhsValue != null && rhsValue.isFunction()) {
         if (info != null) {
+          // If there is JSDoc (even if not type-declaring), and it's a function,
+          // consider it declared. This handles cases like `/** @desc foo */ C.f = function() {}`.
           return false;
         } else if (!scope.isDeclared(qName, false) &&
             n.isUnscopedQualifiedName()) {
 
           // Check if this is in a conditional block.
           // Functions assigned in conditional blocks are inferred.
           for (Node current = n.getParent();
                !(current.isScript() || current.isFunction());
                current = current.getParent()) {
             if (NodeUtil.isControlStructure(current)) {
               return true;
             }
           }
 
           // Check if this is assigned in an inner scope.
           // Functions assigned in inner scopes are inferred.
           AstFunctionContents contents =
               getFunctionAnalysisResults(scope.getRootNode());
+          // If the qualified name does not escape the current function's scope,
+          // then it's local to that scope and should be inferred.
+          // If it *does* escape, it acts like a global declaration.
           if (contents == null ||
               !contents.getEscapedQualifiedNames().contains(qName)) {
+            // qName does NOT escape (or no analysis results) -> inferred
+            return true;
+          } else {
+            // qName DOES escape -> declared
             return false;
           }
         }
       }
       return inferred;
     }
\ No newline at end of file
