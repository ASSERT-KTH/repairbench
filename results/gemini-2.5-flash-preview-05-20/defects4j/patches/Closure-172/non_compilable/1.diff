diff --git a/tmp/c84920ad-7203-4b1b-bfe5-b8d3564d34f4_buggy.java b/tmp/80d83a2c-517a-47a1-8272-2803960823c0_fixed.java
index 7b89a27..ef8f25f 100644
--- a/tmp/c84920ad-7203-4b1b-bfe5-b8d3564d34f4_buggy.java
+++ b/tmp/80d83a2c-517a-47a1-8272-2803960823c0_fixed.java
@@ -1,76 +1,87 @@
     /**
      * Determines whether a qualified name is inferred.
      * NOTE(nicksantos): Determining whether a property is declared or not
      * is really really obnoxious.
      *
      * The problem is that there are two (equally valid) coding styles:
      *
      * (function() {
      *   /* The authoritative definition of goog.bar. /
      *   goog.bar = function() {};
      * })();
      *
      * function f() {
      *   goog.bar();
      *   /* Reset goog.bar to a no-op. /
      *   goog.bar = function() {};
      * }
      *
      * In a dynamic language with first-class functions, it's very difficult
      * to know which one the user intended without looking at lots of
      * contextual information (the second example demonstrates a small case
      * of this, but there are some really pathological cases as well).
      *
      * The current algorithm checks if either the declaration has
      * JsDoc type information, or @const with a known type,
      * or a function literal with a name we haven't seen before.
      */
     private boolean isQualifiedNameInferred(
         String qName, Node n, JSDocInfo info,
         Node rhsValue, JSType valueType) {
       if (valueType == null) {
         return true;
       }
 
       // Prototypes of constructors and interfaces are always declared.
+      // This applies specifically to `C.prototype`, where C is a constructor.
+      // It does NOT apply to `obj.prototype` where obj is a plain object or unknown.
       if (qName != null && qName.endsWith(".prototype")) {
-          return false;
+          // n is the GETPROP node for 'base.prototype'
+          // We need to check the type of 'base'
+          Node baseNode = n.getFirstChild();
+          JSType baseType = baseNode.getJSType();
+          if (baseType != null && baseType.isFunctionType() && baseType.toFunctionType().isConstructor()) {
+            return false; // Declared because it's a constructor's prototype.
+          }
+          // If the base is not a constructor, then this is an inferred property named 'prototype'.
+          // The function should proceed to determine inference based on JSDoc, function literals, etc.
+          // So, no return here, let `inferred` be initialized to true and checked later.
       }
 
       boolean inferred = true;
       if (info != null) {
         inferred = !(info.hasType()
             || info.hasEnumParameterType()
             || (isConstantSymbol(info, n) && valueType != null
                 && !valueType.isUnknownType())
             || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
       }
 
       if (inferred && rhsValue != null && rhsValue.isFunction()) {
         if (info != null) {
           return false;
         } else if (!scope.isDeclared(qName, false) &&
             n.isUnscopedQualifiedName()) {
 
           // Check if this is in a conditional block.
           // Functions assigned in conditional blocks are inferred.
           for (Node current = n.getParent();
                !(current.isScript() || current.isFunction());
                current = current.getParent()) {
             if (NodeUtil.isControlStructure(current)) {
               return true;
             }
           }
 
           // Check if this is assigned in an inner scope.
           // Functions assigned in inner scopes are inferred.
           AstFunctionContents contents =
               getFunctionAnalysisResults(scope.getRootNode());
           if (contents == null ||
               !contents.getEscapedQualifiedNames().contains(qName)) {
             return false;
           }
         }
       }
       return inferred;
     }
