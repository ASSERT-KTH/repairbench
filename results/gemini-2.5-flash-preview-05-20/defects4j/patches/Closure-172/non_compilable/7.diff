diff --git a/tmp/1a8d674a-ee1c-463f-8b29-18975146f2d5_buggy.java b/tmp/b881cf8d-6c95-4f6a-a4ab-5b86be1735fb_fixed.java
index 7b89a27..2159527 100644
--- a/tmp/1a8d674a-ee1c-463f-8b29-18975146f2d5_buggy.java
+++ b/tmp/b881cf8d-6c95-4f6a-a4ab-5b86be1735fb_fixed.java
@@ -1,76 +1,105 @@
     /**
      * Determines whether a qualified name is inferred.
      * NOTE(nicksantos): Determining whether a property is declared or not
      * is really really obnoxious.
      *
      * The problem is that there are two (equally valid) coding styles:
      *
      * (function() {
      *   /* The authoritative definition of goog.bar. /
      *   goog.bar = function() {};
      * })();
      *
      * function f() {
      *   goog.bar();
      *   /* Reset goog.bar to a no-op. /
      *   goog.bar = function() {};
      * }
      *
      * In a dynamic language with first-class functions, it's very difficult
      * to know which one the user intended without looking at lots of
      * contextual information (the second example demonstrates a small case
      * of this, but there are some really pathological cases as well).
      *
      * The current algorithm checks if either the declaration has
      * JsDoc type information, or @const with a known type,
      * or a function literal with a name we haven't seen before.
      */
     private boolean isQualifiedNameInferred(
         String qName, Node n, JSDocInfo info,
         Node rhsValue, JSType valueType) {
       if (valueType == null) {
         return true;
       }
 
       // Prototypes of constructors and interfaces are always declared.
+      // However, if the base object is not a globally declared constructor,
+      // then its 'prototype' property might be an inferred property.
+      // This is particularly true for properties on arbitrary objects (e.g., `obj.prototype = ...`)
+      // where `obj` is not a constructor function.
       if (qName != null && qName.endsWith(".prototype")) {
-          return false;
+          Node base = n.getFirstChild();
+          String baseName = NodeUtil.getQualifiedName(base); // Get the qualified name of the base object (e.g., "Foo" in "Foo.prototype")
+          if (baseName != null) {
+            Var var = scope.getVar(baseName);
+            // If the base name refers to a variable that is:
+            // 1. Found in the symbol table.
+            // 2. Defined in the global scope (e.g., `function Foo() {}`).
+            // 3. Has a type that is explicitly defined (not inferred).
+            // 4. And its type is a constructor.
+            // Then, its 'prototype' property is considered declared.
+            if (var != null && var.scope.isGlobal() &&
+                var.isTypeInferred() == false &&
+                var.getType() != null && var.getType().isConstructor()) {
+                return false; // Declared.
+            }
+          }
+          // Otherwise (e.g., `a.prototype` where `a` is a local parameter or a generic object),
+          // let the rest of the inference logic apply to determine if it's inferred.
       }
 
       boolean inferred = true;
       if (info != null) {
         inferred = !(info.hasType()
             || info.hasEnumParameterType()
             || (isConstantSymbol(info, n) && valueType != null
                 && !valueType.isUnknownType())
             || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
       }
 
       if (inferred && rhsValue != null && rhsValue.isFunction()) {
         if (info != null) {
           return false;
         } else if (!scope.isDeclared(qName, false) &&
             n.isUnscopedQualifiedName()) {
 
           // Check if this is in a conditional block.
           // Functions assigned in conditional blocks are inferred.
           for (Node current = n.getParent();
                !(current.isScript() || current.isFunction());
                current = current.getParent()) {
             if (NodeUtil.isControlStructure(current)) {
               return true;
             }
           }
 
           // Check if this is assigned in an inner scope.
           // Functions assigned in inner scopes are inferred.
           AstFunctionContents contents =
               getFunctionAnalysisResults(scope.getRootNode());
           if (contents == null ||
               !contents.getEscapedQualifiedNames().contains(qName)) {
+            // If the qualified name is NOT in the list of escaped names,
+            // it means it's an inner scope function assignment that does not escape.
+            // According to the comment, such functions should be inferred.
+            return true; // BUG FIX: Changed from 'return false;' to 'return true;'
+          } else {
+            // If the qualified name IS in the list of escaped names,
+            // it means it's an inner scope function assignment that escapes.
+            // Therefore, it should be declared.
             return false;
           }
         }
       }
       return inferred;
     }
\ No newline at end of file
