diff --git a/tmp/3363498f-8bcc-4372-91ba-0eba7881f2b4_buggy.java b/tmp/66d48d9e-514f-4899-83a2-b0775ee89875_fixed.java
index 7b89a27..4960e1e 100644
--- a/tmp/3363498f-8bcc-4372-91ba-0eba7881f2b4_buggy.java
+++ b/tmp/66d48d9e-514f-4899-83a2-b0775ee89875_fixed.java
@@ -1,76 +1,13 @@
-    /**
-     * Determines whether a qualified name is inferred.
-     * NOTE(nicksantos): Determining whether a property is declared or not
-     * is really really obnoxious.
-     *
-     * The problem is that there are two (equally valid) coding styles:
-     *
-     * (function() {
-     *   /* The authoritative definition of goog.bar. /
-     *   goog.bar = function() {};
-     * })();
-     *
-     * function f() {
-     *   goog.bar();
-     *   /* Reset goog.bar to a no-op. /
-     *   goog.bar = function() {};
-     * }
-     *
-     * In a dynamic language with first-class functions, it's very difficult
-     * to know which one the user intended without looking at lots of
-     * contextual information (the second example demonstrates a small case
-     * of this, but there are some really pathological cases as well).
-     *
-     * The current algorithm checks if either the declaration has
-     * JsDoc type information, or @const with a known type,
-     * or a function literal with a name we haven't seen before.
-     */
-    private boolean isQualifiedNameInferred(
-        String qName, Node n, JSDocInfo info,
-        Node rhsValue, JSType valueType) {
-      if (valueType == null) {
-        return true;
-      }
-
-      // Prototypes of constructors and interfaces are always declared.
-      if (qName != null && qName.endsWith(".prototype")) {
-          return false;
-      }
-
-      boolean inferred = true;
-      if (info != null) {
-        inferred = !(info.hasType()
-            || info.hasEnumParameterType()
-            || (isConstantSymbol(info, n) && valueType != null
-                && !valueType.isUnknownType())
-            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
-      }
-
-      if (inferred && rhsValue != null && rhsValue.isFunction()) {
-        if (info != null) {
-          return false;
-        } else if (!scope.isDeclared(qName, false) &&
-            n.isUnscopedQualifiedName()) {
-
-          // Check if this is in a conditional block.
-          // Functions assigned in conditional blocks are inferred.
-          for (Node current = n.getParent();
-               !(current.isScript() || current.isFunction());
-               current = current.getParent()) {
-            if (NodeUtil.isControlStructure(current)) {
-              return true;
-            }
-          }
-
-          // Check if this is assigned in an inner scope.
-          // Functions assigned in inner scopes are inferred.
-          AstFunctionContents contents =
-              getFunctionAnalysisResults(scope.getRootNode());
-          if (contents == null ||
-              !contents.getEscapedQualifiedNames().contains(qName)) {
-            return false;
-          }
-        }
-      }
-      return inferred;
-    }
+     testTypes(
+        "/** @param {Object} a */\n" +
+        "function f(a) {\n" +
+        "  a.prototype = {foo:3};\n" + // Assignment 1
+        "}\n" +
+        "/** @param {Object} b\n" +
+        " */\n" +
+        "function g(b) {\n" +
+        "  b.prototype = function(){};\n" + // Assignment 2
+        "}\n",
+        "assignment to property prototype of Object\n" +
+        "found   : {foo: number}\n" +
+        "required: function (): undefined"); // Expected warning for Assignment 1
\ No newline at end of file
