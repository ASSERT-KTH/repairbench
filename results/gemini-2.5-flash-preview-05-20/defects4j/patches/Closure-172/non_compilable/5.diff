diff --git a/tmp/bc9f804c-140f-454c-ba17-d68a04c7a184_buggy.java b/tmp/d019c45c-9c83-413b-82d5-899070567e45_fixed.java
index 7b89a27..7008987 100644
--- a/tmp/bc9f804c-140f-454c-ba17-d68a04c7a184_buggy.java
+++ b/tmp/d019c45c-9c83-413b-82d5-899070567e45_fixed.java
@@ -1,76 +1,90 @@
     /**
      * Determines whether a qualified name is inferred.
      * NOTE(nicksantos): Determining whether a property is declared or not
      * is really really obnoxious.
      *
      * The problem is that there are two (equally valid) coding styles:
      *
      * (function() {
      *   /* The authoritative definition of goog.bar. /
      *   goog.bar = function() {};
      * })();
      *
      * function f() {
      *   goog.bar();
      *   /* Reset goog.bar to a no-op. /
      *   goog.bar = function() {};
      * }
      *
      * In a dynamic language with first-class functions, it's very difficult
      * to know which one the user intended without looking at lots of
      * contextual information (the second example demonstrates a small case
      * of this, but there are some really pathological cases as well).
      *
      * The current algorithm checks if either the declaration has
      * JsDoc type information, or @const with a known type,
      * or a function literal with a name we haven't seen before.
      */
     private boolean isQualifiedNameInferred(
         String qName, Node n, JSDocInfo info,
         Node rhsValue, JSType valueType) {
       if (valueType == null) {
         return true;
       }
 
       // Prototypes of constructors and interfaces are always declared.
+      // However, a property named 'prototype' on a non-constructor object
+      // is not a special declared prototype.
       if (qName != null && qName.endsWith(".prototype")) {
+          // If this is a GETPROP node (e.g., `foo.prototype`), check the base object.
+          if (n.isGetProp()) {
+              Node baseNode = n.getFirstChild();
+              JSType baseNodeType = baseNode.getJSType();
+              // Only if the base object is a constructor or interface,
+              // then its '.prototype' is considered declared.
+              if (baseNodeType != null && baseNodeType.isConstructorOrInterface()) {
                   return false;
               }
+          }
+          // If n is not a GETPROP, or if the base object is not a constructor/interface,
+          // then we fall through to the rest of the inference logic.
+          // The old code had `return false;` unconditionally here, which was the bug.
+      }
 
       boolean inferred = true;
       if (info != null) {
         inferred = !(info.hasType()
             || info.hasEnumParameterType()
             || (isConstantSymbol(info, n) && valueType != null
                 && !valueType.isUnknownType())
             || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
       }
 
       if (inferred && rhsValue != null && rhsValue.isFunction()) {
         if (info != null) {
           return false;
         } else if (!scope.isDeclared(qName, false) &&
             n.isUnscopedQualifiedName()) {
 
           // Check if this is in a conditional block.
           // Functions assigned in conditional blocks are inferred.
           for (Node current = n.getParent();
                !(current.isScript() || current.isFunction());
                current = current.getParent()) {
             if (NodeUtil.isControlStructure(current)) {
               return true;
             }
           }
 
           // Check if this is assigned in an inner scope.
           // Functions assigned in inner scopes are inferred.
           AstFunctionContents contents =
               getFunctionAnalysisResults(scope.getRootNode());
           if (contents == null ||
               !contents.getEscapedQualifiedNames().contains(qName)) {
             return false;
           }
         }
       }
       return inferred;
     }
\ No newline at end of file
