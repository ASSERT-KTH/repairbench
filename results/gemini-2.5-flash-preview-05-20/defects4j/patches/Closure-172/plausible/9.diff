diff --git a/tmp/ff9d7506-9d8c-425d-8c27-702eb4135ba4_buggy.java b/tmp/eda14ca9-91de-46a5-96bd-97ce5259e389_fixed.java
index 7b89a27..b65c478 100644
--- a/tmp/ff9d7506-9d8c-425d-8c27-702eb4135ba4_buggy.java
+++ b/tmp/eda14ca9-91de-46a5-96bd-97ce5259e389_fixed.java
@@ -1,76 +1,104 @@
     /**
      * Determines whether a qualified name is inferred.
      * NOTE(nicksantos): Determining whether a property is declared or not
      * is really really obnoxious.
      *
      * The problem is that there are two (equally valid) coding styles:
      *
      * (function() {
      *   /* The authoritative definition of goog.bar. /
      *   goog.bar = function() {};
      * })();
      *
      * function f() {
      *   goog.bar();
      *   /* Reset goog.bar to a no-op. /
      *   goog.bar = function() {};
      * }
      *
      * In a dynamic language with first-class functions, it's very difficult
      * to know which one the user intended without looking at lots of
      * contextual information (the second example demonstrates a small case
      * of this, but there are some really pathological cases as well).
      *
      * The current algorithm checks if either the declaration has
      * JsDoc type information, or @const with a known type,
      * or a function literal with a name we haven't seen before.
      */
     private boolean isQualifiedNameInferred(
         String qName, Node n, JSDocInfo info,
         Node rhsValue, JSType valueType) {
       if (valueType == null) {
         return true;
       }
 
       // Prototypes of constructors and interfaces are always declared.
+      // However, this should only apply to *qualified* names where the base
+      // is a global constructor or interface. For local variables or arbitrary
+      // expressions, the prototype should be inferred.
       if (qName != null && qName.endsWith(".prototype")) {
-          return false;
+          Node base = n.getFirstChild();
+          JSType baseType = null;
+
+          if (base.isName()) {
+              // If the base is a simple name (e.g., 'MyClass', 'a')
+              Var var = scope.getVar(base.getString());
+              // Check if it's a global variable. Local variables/parameters
+              // like 'a' in 'a.prototype' are not considered declared here.
+              if (var != null && var.isGlobal()) {
+                  baseType = var.getType();
+              }
+          } else if (base.isGetProp() || base.isGetElem()) {
+              // If the base is a qualified name (e.g., 'goog.Foo') or property access
+              baseType = base.getJSType();
+          }
+
+          // If the base's type is a constructor or interface, then its prototype is declared.
+          if (baseType != null && baseType.isFunctionType()) {
+              FunctionType fnType = baseType.toMaybeFunctionType();
+              if (fnType != null && (fnType.isConstructor() || fnType.isInterface())) {
+                  return false; // This is a declared prototype (e.g., goog.Foo.prototype)
+              }
+          }
+          // If we reach here, it means the prototype is not from a declared constructor/interface
+          // (e.g., local.prototype, or a global non-constructor.prototype, or type not resolvable).
+          // In these cases, it should be inferred, so we proceed without returning false.
       }
 
       boolean inferred = true;
       if (info != null) {
         inferred = !(info.hasType()
             || info.hasEnumParameterType()
             || (isConstantSymbol(info, n) && valueType != null
                 && !valueType.isUnknownType())
             || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
       }
 
       if (inferred && rhsValue != null && rhsValue.isFunction()) {
         if (info != null) {
           return false;
         } else if (!scope.isDeclared(qName, false) &&
             n.isUnscopedQualifiedName()) {
 
           // Check if this is in a conditional block.
           // Functions assigned in conditional blocks are inferred.
           for (Node current = n.getParent();
                !(current.isScript() || current.isFunction());
                current = current.getParent()) {
             if (NodeUtil.isControlStructure(current)) {
               return true;
             }
           }
 
           // Check if this is assigned in an inner scope.
           // Functions assigned in inner scopes are inferred.
           AstFunctionContents contents =
               getFunctionAnalysisResults(scope.getRootNode());
           if (contents == null ||
               !contents.getEscapedQualifiedNames().contains(qName)) {
             return false;
           }
         }
       }
       return inferred;
     }
\ No newline at end of file
