diff --git a/tmp/7573848b-0f46-4374-8c73-8d1aff4b8ff0_buggy.java b/tmp/ee7a6c67-449b-434d-be52-7cbeb46e5231_fixed.java
index 682b760..1888410 100644
--- a/tmp/7573848b-0f46-4374-8c73-8d1aff4b8ff0_buggy.java
+++ b/tmp/ee7a6c67-449b-434d-be52-7cbeb46e5231_fixed.java
@@ -1,100 +1,120 @@
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
      * <p>If start and end are both {@code 0}, start and end are set
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
      * {@code 0} and {@code Integer.MAX_VALUE}.
      *
      * <p>If set is not {@code null}, characters between start and
      * end are chosen.</p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single 
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
      * @param start  the position in set of chars to start at
      * @param end  the position in set of chars to end before
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
      *  If {@code null}, then it will use the set of all chars.
      * @param random  a source of randomness.
      * @return the random string
      * @throws ArrayIndexOutOfBoundsException if there are not
      *  {@code (end - start) + 1} characters in the set array.
      * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                 char[] chars, Random random) {
         if (count == 0) {
             return "";
         } else if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
         if (chars != null && chars.length == 0) {
             throw new IllegalArgumentException("The chars array must not be empty");
         }
 
+        // Handle the special case where start=0 and end=0 to set default character ranges.
+        // This must occur before validating the gap, as it can modify start/end to valid ranges.
         if (start == 0 && end == 0) {
             if (chars != null) {
+                // If chars is provided, and start=0, end=0, it means use all characters from the set.
                 end = chars.length;
             } else {
+                // If chars is null, and start=0, end=0, use ASCII printable chars by default
+                // unless letters and numbers are both false, then use all Unicode characters.
                 if (!letters && !numbers) {
-                    end = Integer.MAX_VALUE;
+                    end = Integer.MAX_VALUE; // Use all Unicode characters
                 } else {
-                    end = 'z' + 1;
-                    start = ' ';                
+                    end = 'z' + 1; // ASCII ' ' (32) to 'z' (122) inclusive, so end is 123
+                    start = ' '; // ASCII ' ' (32)
                 }
             }
         }
 
-        char[] buffer = new char[count];
+        // Calculate the effective gap between start and end.
+        // This gap is used as the bound for random.nextInt(bound).
+        // The bound must be positive (i.e., gap > 0, which means end - start > 0 or end > start).
         int gap = end - start;
+        if (gap <= 0) {
+            // If the calculated gap is zero or negative, it indicates an invalid range
+            // (e.g., start == end or start > end). random.nextInt() requires a positive bound.
+            throw new IllegalArgumentException(String.format("Parameter 'start' (%d) must be less than parameter 'end' (%d).", start, end));
+        }
+
+        char[] buffer = new char[count];
 
         while (count-- != 0) {
             char ch;
             if (chars == null) {
+                // For null chars, a random character is chosen directly based on ASCII/Unicode range.
                 ch = (char) (random.nextInt(gap) + start);
             } else {
+                // For a provided chars array, a character is chosen from the array based on the indices.
                 ch = chars[random.nextInt(gap) + start];
             }
+
+            // Filtering logic based on 'letters' and 'numbers' flags.
+            // If a character doesn't meet the criteria, count is incremented to effectively retry this position.
             if (letters && Character.isLetter(ch)
                     || numbers && Character.isDigit(ch)
                     || !letters && !numbers) {
-                if(ch >= 56320 && ch <= 57343) {
+                
+                // Handle surrogate pairs (Unicode supplementary characters) to avoid malformed strings.
+                // This logic ensures that if a random char is a surrogate, its pair is also included
+                // or the char is skipped if it's a private high surrogate without clear handling.
+                if(ch >= 56320 && ch <= 57343) { // Low surrogate (0xDC00 - 0xDFFF)
                     if(count == 0) {
-                        count++;
+                        count++; // Cannot insert high surrogate after this, so retry this position
                     } else {
-                        // low surrogate, insert high surrogate after putting it in
-                        buffer[count] = ch;
-                        count--;
-                        buffer[count] = (char) (55296 + random.nextInt(128));
+                        buffer[count] = ch; // Insert low surrogate
+                        count--; // Decrement count for the high surrogate
+                        buffer[count] = (char) (55296 + random.nextInt(128)); // Insert a random high surrogate (0xD800 - 0xDB7F)
                     }
-                } else if(ch >= 55296 && ch <= 56191) {
+                } else if(ch >= 55296 && ch <= 56191) { // High surrogate (0xD800 - 0xDBFF, excluding private use area)
                     if(count == 0) {
-                        count++;
+                        count++; // Cannot insert low surrogate before this, so retry this position
                     } else {
-                        // high surrogate, insert low surrogate before putting it in
-                        buffer[count] = (char) (56320 + random.nextInt(128));
-                        count--;
-                        buffer[count] = ch;
+                        buffer[count] = (char) (56320 + random.nextInt(128)); // Insert a random low surrogate (0xDC00 - 0xDFFF)
+                        count--; // Decrement count for the high surrogate
+                        buffer[count] = ch; // Insert high surrogate
                     }
-                } else if(ch >= 56192 && ch <= 56319) {
-                    // private high surrogate, no effing clue, so skip it
-                    count++;
+                } else if(ch >= 56192 && ch <= 56319) { // Private use high surrogate (0xDB80 - 0xDBFF)
+                    count++; // Skip this character, retry this position (no standard mapping for these)
                 } else {
-                    buffer[count] = ch;
+                    buffer[count] = ch; // Regular character
                 }
             } else {
-                count++;
+                count++; // Character does not meet filtering criteria, retry this position
             }
         }
         return new String(buffer);
     }
\ No newline at end of file
