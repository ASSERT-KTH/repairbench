diff --git a/tmp/090a09d7-724b-4e75-b66a-7a97727a6ec0_buggy.java b/tmp/99f6dc39-d8cd-40d9-bb0d-d17b0fa90c3b_fixed.java
index 682b760..d9565a0 100644
--- a/tmp/090a09d7-724b-4e75-b66a-7a97727a6ec0_buggy.java
+++ b/tmp/99f6dc39-d8cd-40d9-bb0d-d17b0fa90c3b_fixed.java
@@ -1,100 +1,106 @@
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
      * <p>If start and end are both {@code 0}, start and end are set
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
      * {@code 0} and {@code Integer.MAX_VALUE}.
      *
      * <p>If set is not {@code null}, characters between start and
      * end are chosen.</p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
      * @param start  the position in set of chars to start at
      * @param end  the position in set of chars to end before
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
      *  If {@code null}, then it will use the set of all chars.
      * @param random  a source of randomness.
      * @return the random string
      * @throws ArrayIndexOutOfBoundsException if there are not
      *  {@code (end - start) + 1} characters in the set array.
      * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                 char[] chars, Random random) {
         if (count == 0) {
             return "";
         } else if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
         if (chars != null && chars.length == 0) {
             throw new IllegalArgumentException("The chars array must not be empty");
         }
 
         if (start == 0 && end == 0) {
             if (chars != null) {
                 end = chars.length;
             } else {
                 if (!letters && !numbers) {
                     end = Integer.MAX_VALUE;
                 } else {
                     end = 'z' + 1;
                     start = ' ';
                 }
             }
         }
 
         char[] buffer = new char[count];
         int gap = end - start;
 
+        if (gap <= 0) {
+            throw new IllegalArgumentException("Parameter 'start' (" + start + ") must be less than 'end' (" + end + ")");
+        }
+
         while (count-- != 0) {
             char ch;
             if (chars == null) {
                 ch = (char) (random.nextInt(gap) + start);
             } else {
                 ch = chars[random.nextInt(gap) + start];
             }
             if (letters && Character.isLetter(ch)
                     || numbers && Character.isDigit(ch)
                     || !letters && !numbers) {
-                if(ch >= 56320 && ch <= 57343) {
-                    if(count == 0) {
-                        count++;
+                if(ch >= 56320 && ch <= 57343) { // low surrogate
+                    if(count == 0) { // If it's the last character, we can't add a high surrogate
+                        count++; // Re-increment count to retry this position
                     } else {
                         // low surrogate, insert high surrogate after putting it in
                         buffer[count] = ch;
-                        count--;
-                        buffer[count] = (char) (55296 + random.nextInt(128));
+                        count--; // Decrement again for the high surrogate
+                        buffer[count] = (char) (55296 + random.nextInt(128)); // A random high surrogate
                     }
-                } else if(ch >= 55296 && ch <= 56191) {
-                    if(count == 0) {
-                        count++;
+                } else if(ch >= 55296 && ch <= 56191) { // high surrogate (excluding private use area)
+                    if(count == 0) { // If it's the last character, we can't add a low surrogate
+                        count++; // Re-increment count to retry this position
                     } else {
                         // high surrogate, insert low surrogate before putting it in
-                        buffer[count] = (char) (56320 + random.nextInt(128));
-                        count--;
+                        buffer[count] = (char) (56320 + random.nextInt(128)); // A random low surrogate
+                        count--; // Decrement again for the high surrogate
                         buffer[count] = ch;
                     }
-                } else if(ch >= 56192 && ch <= 56319) {
-                    // private high surrogate, no effing clue, so skip it
-                    count++;
+                } else if(ch >= 56192 && ch <= 56319) { // private high surrogate
+                    // This is a private use high surrogate, which implies specific usage contexts.
+                    // Without a paired low surrogate from the U+DC00 to U+DFFF range, it's ill-formed.
+                    // It's safer to skip it and retry for a valid character.
+                    count++; // Re-increment count to retry this position
                 } else {
                     buffer[count] = ch;
                 }
             } else {
-                count++;
+                count++; // Re-increment count if the character doesn't meet the letter/number criteria
             }
         }
         return new String(buffer);
     }
\ No newline at end of file
