diff --git a/tmp/02d093c2-4f1d-4fd5-8a64-f35404cb4206_buggy.java b/tmp/c4379d5e-7e78-4544-86bf-8812a3cce91b_fixed.java
index b56897c..a60b41b 100644
--- a/tmp/02d093c2-4f1d-4fd5-8a64-f35404cb4206_buggy.java
+++ b/tmp/c4379d5e-7e78-4544-86bf-8812a3cce91b_fixed.java
@@ -1,27 +1,36 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
         // TODO(user): We only care about calls to functions that
         // passes one of the dependent variable to a non-side-effect free
         // function.
         if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
           return true;
         }
 
         if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
           return true;
         }
 
+        // Add checks for other nodes that represent side-effecting operations.
+        // The 'delete' operator, assignments, and increment/decrement operations
+        // are common sources of side effects.
+        if (n.isDelProp() || n.isAssign() || n.isInc() || n.isDec()) {
+          return true;
+        }
 
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+          // If the child node does not start a new control flow graph node,
+          // traverse it recursively. This ensures side effects within expressions
+          // are caught.
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
         return false;
       }
