diff --git a/tmp/97539311-310d-4a3b-8a5d-cc41f02b0d94_buggy.java b/tmp/7076e43c-eb7c-4398-afea-1ce813a80093_fixed.java
index b56897c..0b9adf9 100644
--- a/tmp/97539311-310d-4a3b-8a5d-cc41f02b0d94_buggy.java
+++ b/tmp/7076e43c-eb7c-4398-afea-1ce813a80093_fixed.java
@@ -1,27 +1,52 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
+        // The TODO comment might be outdated or apply to a very specific sub-use case.
+        // For general side-effect detection required by FlowSensitiveInlineVariables,
+        // we need to check for all common side-effecting operations.
+        switch (n.getType()) {
+          case Token.CALL:
+            return NodeUtil.functionCallHasSideEffects(n);
+          case Token.NEW:
+            return NodeUtil.constructorCallHasSideEffects(n);
+          case Token.INC: // Increment operator (e.g., i++)
+          case Token.DEC: // Decrement operator (e.g., i--)
+          case Token.ASSIGN: // Simple assignment (e.g., x = y)
+          case Token.ASSIGN_BITOR: // Compound assignments
+          case Token.ASSIGN_BITAND:
+          case Token.ASSIGN_BITXOR:
+          case Token.ASSIGN_DIV:
+          case Token.ASSIGN_LSH:
+          case Token.ASSIGN_MOD:
+          case Token.ASSIGN_MUL:
+          case Token.ASSIGN_RSH:
+          case Token.ASSIGN_SUB:
+          case Token.ASSIGN_URSH:
+            return true; // Assignments have side effects
+          case Token.DELPROP: // The 'delete' operator
             return true;
-        }
-
-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
+          case Token.THROW: // Throw statement changes control flow
+          case Token.BREAK: // Break statement changes control flow
+          case Token.CONTINUE: // Continue statement changes control flow
+          case Token.RETURN: // Return statement changes control flow
+          case Token.DEBUGGER: // Debugger statement has side effects
             return true;
         }
 
-
+        // If the current node itself is not a direct side-effecting operation,
+        // recursively check its children for side effects.
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+          // If a child node starts a new CFG node, its side effects might not
+          // be relevant to the current flow (e.g., a function declaration).
+          // Preserve the original logic to skip such nodes.
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
         return false;
       }
\ No newline at end of file
