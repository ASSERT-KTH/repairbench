diff --git a/tmp/4aff28a5-9f12-481d-b9b2-8bec530c320a_buggy.java b/tmp/7101ee58-ddea-47e7-815f-212b9bd7c75f_fixed.java
index b56897c..d3a08da 100644
--- a/tmp/4aff28a5-9f12-481d-b9b2-8bec530c320a_buggy.java
+++ b/tmp/7101ee58-ddea-47e7-815f-212b9bd7c75f_fixed.java
@@ -1,27 +1,27 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
+        // The original implementation checked specifically for CALL and NEW nodes
+        // that have side effects. However, other types of nodes, such as the DELETE
+        // operator, can also have side effects that must prevent inlining.
+        // NodeUtil.mayHaveSideEffects(n) provides a more comprehensive check
+        // for any potential side effect in the given node.
+        if (NodeUtil.mayHaveSideEffects(n)) {
           return true;
         }
 
-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
-          return true;
-        }
-
-
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+          // This condition `!ControlFlowGraph.isEnteringNewCfgNode(c)` is important
+          // to prevent traversing into separate control flow graph nodes (e.g., function bodies)
+          // where side effects might not affect the variable being inlined in the current scope.
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
         return false;
       }
\ No newline at end of file
