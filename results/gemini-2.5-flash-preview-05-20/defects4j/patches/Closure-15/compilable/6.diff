diff --git a/tmp/537f6152-8204-42f6-901d-c99085262c02_buggy.java b/tmp/6556c445-dffe-4ea0-b4e5-0900d5d1ef2e_fixed.java
index b56897c..a426608 100644
--- a/tmp/537f6152-8204-42f6-901d-c99085262c02_buggy.java
+++ b/tmp/6556c445-dffe-4ea0-b4e5-0900d5d1ef2e_fixed.java
@@ -1,27 +1,31 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
+        // Check if the current node 'n' itself has side effects.
+        // NodeUtil.mayHaveSideEffects covers calls, new operations, assignments,
+        // delete property operations, increments, decrements, etc.
+        // This is a more comprehensive check than just looking at isCall() and isNew().
+        if (NodeUtil.mayHaveSideEffects(n)) {
           return true;
         }
 
-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
-          return true;
-        }
-
-
+        // Recursively check children for side effects.
+        // A parent node might not have side effects itself, but its children might.
+        // For example, a VAR node itself has no side effects, but its child (an
+        // assignment expression) might.
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+          // The check `!ControlFlowGraph.isEnteringNewCfgNode(c)` is crucial
+          // for flow-sensitive analysis, as it prevents traversing into new
+          // control flow graph nodes (e.g., conditional branches, loop bodies)
+          // that are not part of the current straight-line execution path.
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
         return false;
       }
\ No newline at end of file
