diff --git a/tmp/c21d1f1a-f341-4d72-8c07-33cb5d2638b6_buggy.java b/tmp/d3fce19b-da4e-4f86-b382-642334466797_fixed.java
index b56897c..d89347b 100644
--- a/tmp/c21d1f1a-f341-4d72-8c07-33cb5d2638b6_buggy.java
+++ b/tmp/d3fce19b-da4e-4f86-b382-642334466797_fixed.java
@@ -1,27 +1,25 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
+        // The predicate should return true if the node (or its children) has
+        // any side effects that prevent inlining. This includes function/constructor
+        // calls as well as other operations like DELETE, ASSIGN, etc.
+        // The previous check was too narrow, missing operations like 'delete'.
+        if (NodeUtil.nodeHasSideEffects(n)) {
           return true;
         }
 
-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
-          return true;
-        }
-
-
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+          // If the child node does not start a new control flow graph node,
+          // continue checking its subtree for side effects.
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
         return false;
       }
\ No newline at end of file
