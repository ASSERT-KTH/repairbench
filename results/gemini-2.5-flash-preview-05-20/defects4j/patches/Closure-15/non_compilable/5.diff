diff --git a/tmp/8aa74f74-9744-40f2-94ac-2f8471ae8865_buggy.java b/tmp/7eb29b48-5e87-4dc2-96cd-086fe670f1b1_fixed.java
index b56897c..e308973 100644
--- a/tmp/8aa74f74-9744-40f2-94ac-2f8471ae8865_buggy.java
+++ b/tmp/7eb29b48-5e87-4dc2-96cd-086fe670f1b1_fixed.java
@@ -1,27 +1,43 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
         // TODO(user): We only care about calls to functions that
         // passes one of the dependent variable to a non-side-effect free
         // function.
-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
+        // This TODO comment might be a specific focus, but the function's overall
+        // responsibility, as indicated by tests, seems to be broader:
+        // to detect any relevant side-effecting operation.
+
+        // First, check if the node itself is a call or new expression with side effects.
+        // This handles cases like 'print(1)' which should prevent inlining.
+        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n, this.compiler)) {
           return true;
         }
-
-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
+        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n, this.compiler)) {
           return true;
         }
 
+        // Add a general check for other types of nodes that have side effects.
+        // This covers operations like DELETE, ASSIGN, INC, DEC, etc.,
+        // which were not explicitly checked before.
+        // This addresses the 'delete a[b]' case from the failing test.
+        if (NodeUtil.nodeHasSideEffects(n, this.compiler)) {
+            return true;
+        }
 
+        // If the current node itself does not have side effects,
+        // recursively check its children for side effects.
+        // The ControlFlowGraph.isEnteringNewCfgNode(c) check ensures we
+        // only propagate side effects within the current control flow block.
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
         return false;
       }
