diff --git a/tmp/4d09b42d-efb4-4849-afc6-09470f2faa96_buggy.java b/tmp/ecb32754-22ba-4fac-9698-22e21c56efed_fixed.java
index b56897c..4b39033 100644
--- a/tmp/4d09b42d-efb4-4849-afc6-09470f2faa96_buggy.java
+++ b/tmp/ecb32754-22ba-4fac-9698-22e21c56efed_fixed.java
@@ -1,27 +1,48 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
         // TODO(user): We only care about calls to functions that
         // passes one of the dependent variable to a non-side-effect free
         // function.
+
+        // Check for function and constructor calls that have side effects.
         if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
           return true;
         }
 
         if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
           return true;
         }
 
+        // Add checks for other operations that inherently have side effects.
+        // - DELPROP (e.g., 'delete obj.prop')
+        // - INC/DEC (e.g., 'i++', 'j--')
+        // - THROW (e.g., 'throw error')
+        if (n.isDelProp() || n.isInc() || n.isDec() || n.isThrow()) {
+            return true;
+        }
 
+        // Assignments only have side effects if the LHS is a property access (e.g., 'obj.prop = value').
+        // Simple variable assignments (e.g., 'x = value') generally do not prevent inlining of 'value'
+        // and are not considered side effects in this context.
+        if (n.isAssign() && NodeUtil.assignHasSideEffects(n)) {
+            return true;
+        }
+
+        // For other node types, recursively check their children for side effects.
+        // This handles cases like:
+        // - operators whose operands might have side effects (e.g., `f() + g()`)
+        // - control flow statements where children expressions might have side effects
+        // - blocks, expressions, etc.
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
         return false;
       }
\ No newline at end of file
