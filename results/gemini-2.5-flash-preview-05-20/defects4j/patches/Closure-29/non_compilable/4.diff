diff --git a/tmp/25b799a9-e6f1-4ff2-ac2a-40d58499ddff_buggy.java b/tmp/a1468656-aaa7-414b-ac47-fc8a407838fa_fixed.java
index be9c8a3..7733958 100644
--- a/tmp/25b799a9-e6f1-4ff2-ac2a-40d58499ddff_buggy.java
+++ b/tmp/a1468656-aaa7-414b-ac47-fc8a407838fa_fixed.java
@@ -1,94 +1,110 @@
     /**
      * Counts the number of direct (full) references to an object.
      * Specifically we check for references of the following type:
      * <pre>
      *   x;
      *   x.fn();
      * </pre>
      */
     private boolean isInlinableObject(List<Reference> refs) {
-      boolean ret = false;
+      Set<String> allDefinedProperties = new HashSet<>();
+      boolean foundObjectLiteralAssignment = false;
+
+      // First pass: Collect all properties defined by object literal assignments
+      // and perform initial checks (e.g., invalid assignment types, self-references, getters/setters).
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
-        Node gramps = ref.getGrandparent();
-
-        // Ignore indirect references, like x.y (except x.y(), since
-        // the function referenced by y might reference 'this').
-        //
-        if (parent.isGetProp()) {
-          Preconditions.checkState(parent.getFirstChild() == name);
-          // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
-            return false;
-          }
-
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
-          continue;
-        }
 
         // Only rewrite VAR declarations or simple assignment statements
+        // Direct references (like `x;`) are handled by `val == null` below.
+        if (parent.isExprResult() || parent.isForIn() || parent.isParamList() || parent.isNew()) {
+            // These are usage contexts, not assignments or declarations
+            continue;
+        }
+
         if (!isVarOrAssignExprLhs(name)) {
            return false;
         }
 
         Node val = ref.getAssignedValue();
         if (val == null) {
-          // A var with no assignment.
+          // A var with no assignment (e.g., `var x;`) or a reference that is not an assignment.
+          // This pass focuses on collecting properties from assignments.
           continue;
         }
 
         // We're looking for object literal assignments only.
         if (!val.isObjectLit()) {
           return false;
         }
 
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
+        foundObjectLiteralAssignment = true;
+
+        // Make sure that the value is not self-referential and doesn't use ES5 getters/setters.
         for (Node child = val.getFirstChild(); child != null;
              child = child.getNext()) {
           if (child.isGetterDef() ||
               child.isSetterDef()) {
             // ES5 get/set not supported.
             return false;
           }
 
+          // Collect property names defined in this object literal.
+          if (child.isStringKey()) {
+            allDefinedProperties.add(child.getString());
+          }
 
           Node childVal = child.getFirstChild();
           // Check if childVal is the parent of any of the passed in
           // references, as that is how self-referential assignments
           // will happen.
           for (Reference t : refs) {
             Node refNode = t.getParent();
             while (!NodeUtil.isStatementBlock(refNode)) {
               if (refNode == childVal) {
                 // There's a self-referential assignment
                 return false;
               }
               refNode = refNode.getParent();
             }
           }
         }
+      }
+
+      // If no object literal assignment was found at all, it's not a candidate for object literal inlining.
+      // (e.g., `var x; f(x.a)` or `var x = 1;`)
+      if (!foundObjectLiteralAssignment) {
+        return false;
+      }
+
+      // Second pass: Check all references for problematic usage, especially GetProp accesses.
+      for (Reference ref : refs) {
+        Node name = ref.getNode();
+        Node parent = ref.getParent();
+        Node gramps = ref.getGrandparent();
 
+        if (parent.isGetProp()) {
+          Preconditions.checkState(parent.getFirstChild() == name);
+          // A call target may be using the object as a 'this' value.
+          // Inlining should be prevented for `x.fn()` calls where `x.fn` is the target.
+          if (gramps.isCall() && gramps.getFirstChild() == parent) {
+            return false;
+          }
 
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
-        ret = true;
+          // This is the core fix for the "blind spot":
+          // If a property is accessed (x.prop) and it's not a call target,
+          // we must ensure that 'prop' was explicitly defined in one of the
+          // object literal assignments. If not, it means the access relies on
+          // the prototype chain (e.g., Object.prototype.toString) or an
+          // undefined property, which prevents safe inlining.
+          String propertyName = parent.getSecondChild().getString(); // The name of the property being accessed (e.g., "y" in x.y)
+          if (!allDefinedProperties.contains(propertyName)) {
+            return false;
+          }
         }
-      return ret;
+      }
+
+      // All checks passed. The object appears to be inlinable.
+      return true;
     }
\ No newline at end of file
