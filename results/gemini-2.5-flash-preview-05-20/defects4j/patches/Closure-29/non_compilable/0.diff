diff --git a/tmp/72563373-7b42-4e1d-8532-da91ede86ca8_buggy.java b/tmp/9bbb770a-42e1-4381-8f47-1cc04c186e5b_fixed.java
index be9c8a3..4c9457e 100644
--- a/tmp/72563373-7b42-4e1d-8532-da91ede86ca8_buggy.java
+++ b/tmp/9bbb770a-42e1-4381-8f47-1cc04c186e5b_fixed.java
@@ -1,94 +1,115 @@
     /**
      * Counts the number of direct (full) references to an object.
      * Specifically we check for references of the following type:
      * <pre>
      *   x;
      *   x.fn();
      * </pre>
      */
     private boolean isInlinableObject(List<Reference> refs) {
       boolean ret = false;
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
         Node gramps = ref.getGrandparent();
 
         // Ignore indirect references, like x.y (except x.y(), since
         // the function referenced by y might reference 'this').
         //
         if (parent.isGetProp()) {
           Preconditions.checkState(parent.getFirstChild() == name);
-          // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
+
+          // Check if this GETPROP reference is a call target, or a property of a call target.
+          // This means 'name' (the object) is used as the 'this' context.
+          // For example, in `obj.prop.method()`, 'obj' is the 'name', 'obj.prop' is the 'parent',
+          // and 'obj.prop.method' is the 'gramps' for obj.prop, but not the call target.
+          // We need to walk up the chain to see if the property access chain leads to a call.
+          Node currentTarget = parent;
+          boolean isThisContextCall = false;
+          while (currentTarget != null && currentTarget.isGetProp()) {
+            if (currentTarget.getParent().isCall() && currentTarget.getParent().getFirstChild() == currentTarget) {
+              isThisContextCall = true;
+              break;
+            }
+            currentTarget = currentTarget.getParent();
+          }
+
+          if (isThisContextCall) {
             return false;
           }
 
           // NOTE(nicksantos): This pass's object-splitting algorithm has
           // a blind spot. It assumes that if a property isn't defined on an
           // object, then the value is undefined. This is not true, because
           // Object.prototype can have arbitrary properties on it.
           //
           // We short-circuit this problem by bailing out if we see a reference
           // to a property that isn't defined on the object literal. This
           // isn't a perfect algorithm, but it should catch most cases.
+          // The `continue` here allows property reads (e.g., `x.prop`) and
+          // property assignments (e.g., `x.prop = val`) to be handled by the inliner
+          // if other conditions are met. This is required for testObject10.
           continue;
         }
 
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
            return false;
         }
 
         Node val = ref.getAssignedValue();
         if (val == null) {
           // A var with no assignment.
           continue;
         }
 
         // We're looking for object literal assignments only.
         if (!val.isObjectLit()) {
           return false;
         }
 
         // Make sure that the value is not self-refential. IOW,
         // disallow things like x = {b: x.a}.
         //
         // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
+        // assignments. i.e. x = {a: 1, b: x.a} is not orderable,
         // but x = {a: 1, b: x.a} is.
         //
         // Also, ES5 getters/setters aren't handled by this pass.
         for (Node child = val.getFirstChild(); child != null;
              child = child.getNext()) {
           if (child.isGetterDef() ||
               child.isSetterDef()) {
             // ES5 get/set not supported.
             return false;
           }
 
+          // Computed properties cannot be reliably inlined.
+          if (child.isComputedProp()) {
+              return false;
+          }
 
           Node childVal = child.getFirstChild();
           // Check if childVal is the parent of any of the passed in
           // references, as that is how self-referential assignments
           // will happen.
           for (Reference t : refs) {
             Node refNode = t.getParent();
-            while (!NodeUtil.isStatementBlock(refNode)) {
+            while (refNode != null && !NodeUtil.isStatementBlock(refNode)) {
               if (refNode == childVal) {
                 // There's a self-referential assignment
                 return false;
               }
               refNode = refNode.getParent();
             }
           }
         }
 
 
         // We have found an acceptable object literal assignment. As
         // long as there are no other assignments that mess things up,
         // we can inline.
         ret = true;
       }
       return ret;
     }
\ No newline at end of file
