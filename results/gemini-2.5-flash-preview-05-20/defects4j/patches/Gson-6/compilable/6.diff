diff --git a/tmp/a2f98494-542a-43db-a314-c992acc05491_buggy.java b/tmp/15e5b7e5-78fa-41f3-929a-3bf70e5e247f_fixed.java
index 1c53d31..fc339f8 100644
--- a/tmp/a2f98494-542a-43db-a314-c992acc05491_buggy.java
+++ b/tmp/15e5b7e5-78fa-41f3-929a-3bf70e5e247f_fixed.java
@@ -1,20 +1,34 @@
   @SuppressWarnings("unchecked") // Casts guarded by conditionals.
   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
     TypeAdapter<?> typeAdapter;
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
       Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
-          .construct()
-          .create(gson, fieldType);
+      TypeAdapterFactory factory = constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();
+      typeAdapter = factory.create(gson, fieldType);
+      // If a TypeAdapterFactory specified by @JsonAdapter returns null,
+      // it indicates that the factory cannot handle the given fieldType.
+      // Since @JsonAdapter explicitly requests this factory, this situation
+      // should be treated as an error, not a fallback, as Gson expects the
+      // annotated factory to provide an adapter.
+      if (typeAdapter == null) {
+        throw new IllegalArgumentException(
+            "'" + value.getName() + "' specified in @JsonAdapter "
+                + "cannot handle type '" + fieldType + "'. Consider using a custom TypeAdapter "
+                + "or TypeAdapterFactory that supports the field type.");
+      }
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
+    // The NullPointerException occurs when typeAdapter is null at this point,
+    // which is now prevented by the check above for TypeAdapterFactory,
+    // or by constructorConstructor throwing an exception if construction fails
+    // for a direct TypeAdapter.
     typeAdapter = typeAdapter.nullSafe();
     return typeAdapter;
   }
\ No newline at end of file
