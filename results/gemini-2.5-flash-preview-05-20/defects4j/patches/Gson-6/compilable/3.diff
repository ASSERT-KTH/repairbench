diff --git a/tmp/e71ee105-83c7-4088-9a50-667c0c769a08_buggy.java b/tmp/6e77a11b-6365-4672-97ea-535a1da68203_fixed.java
index 1c53d31..598bbea 100644
--- a/tmp/e71ee105-83c7-4088-9a50-667c0c769a08_buggy.java
+++ b/tmp/6e77a11b-6365-4672-97ea-535a1da68203_fixed.java
@@ -1,20 +1,42 @@
   @SuppressWarnings("unchecked") // Casts guarded by conditionals.
   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
     TypeAdapter<?> typeAdapter;
+
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
+      // Attempt to construct the TypeAdapter instance.
+      // ConstructorConstructor.construct() generally throws an exception if construction fails,
+      // but if it somehow returns null, we must handle it to prevent NullPointerException later.
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
+      if (typeAdapter == null) {
+        throw new IllegalArgumentException("'" + value.getName() + "' specified in @JsonAdapter is a TypeAdapter but its constructor returned null.");
+      }
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
-      Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
-          .construct()
-          .create(gson, fieldType);
+      Class<TypeAdapterFactory> typeAdapterFactoryClass = (Class<TypeAdapterFactory>) value;
+      // Attempt to construct the TypeAdapterFactory instance.
+      // Similar to TypeAdapter construction, if construct() returns null, it's an issue.
+      TypeAdapterFactory factory = constructorConstructor.get(TypeToken.get(typeAdapterFactoryClass)).construct();
+      if (factory == null) {
+        throw new IllegalArgumentException("'" + value.getName() + "' specified in @JsonAdapter is a TypeAdapterFactory but its constructor returned null.");
+      }
+      // Attempt to create the TypeAdapter using the factory.
+      // TypeAdapterFactory.create() can legitimately return null if it doesn't support the type.
+      // However, if a factory is explicitly specified via @JsonAdapter, it is expected to provide
+      // an adapter for the annotated type/field. If it returns null, it's a configuration error.
+      typeAdapter = factory.create(gson, fieldType);
+      if (typeAdapter == null) {
+        throw new IllegalArgumentException(
+            "'" + value.getName() + "' specified in @JsonAdapter is a TypeAdapterFactory, but it did not create a TypeAdapter for " + fieldType + ". Ensure the factory supports this type.");
+      }
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
+    
+    // At this point, 'typeAdapter' is guaranteed to be non-null if no exceptions were thrown above.
+    // So, it's safe to call nullSafe() on it.
     typeAdapter = typeAdapter.nullSafe();
     return typeAdapter;
   }
\ No newline at end of file
