diff --git a/tmp/5c7c7e92-e816-43b7-9eb0-46420539abe5_buggy.java b/tmp/ce061127-6039-4b1d-9ebe-b6e70f281712_fixed.java
index 1c53d31..b3d5617 100644
--- a/tmp/5c7c7e92-e816-43b7-9eb0-46420539abe5_buggy.java
+++ b/tmp/ce061127-6039-4b1d-9ebe-b6e70f281712_fixed.java
@@ -1,20 +1,29 @@
   @SuppressWarnings("unchecked") // Casts guarded by conditionals.
   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
     TypeAdapter<?> typeAdapter;
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
       Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
+      // TypeAdapterFactory.create can return null if it does not apply to the fieldType.
+      // In such cases, `typeAdapter` will be null, and calling `nullSafe()` on it
+      // would result in a NullPointerException.
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
           .construct()
           .create(gson, fieldType);
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
+    // Only apply nullSafe() if a TypeAdapter was successfully created.
+    // If typeAdapter is null (e.g., from a TypeAdapterFactory that returned null),
+    // we should return null to indicate that this annotation does not provide an adapter,
+    // allowing Gson's default lookup mechanism to proceed.
+    if (typeAdapter != null) {
       typeAdapter = typeAdapter.nullSafe();
+    }
     return typeAdapter;
   }
\ No newline at end of file
