diff --git a/tmp/fcb13d15-9945-42f1-8825-7f26157bedd8_buggy.java b/tmp/aa65937e-8aa9-429f-89da-b260c528c3af_fixed.java
index 1c53d31..27aeed7 100644
--- a/tmp/fcb13d15-9945-42f1-8825-7f26157bedd8_buggy.java
+++ b/tmp/aa65937e-8aa9-429f-89da-b260c528c3af_fixed.java
@@ -1,20 +1,27 @@
   @SuppressWarnings("unchecked") // Casts guarded by conditionals.
   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
     TypeAdapter<?> typeAdapter;
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
       Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
           .construct()
           .create(gson, fieldType);
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
+    // The original code unconditionally called typeAdapter.nullSafe().
+    // This is incorrect if the @JsonAdapter annotation has nullSafe=false,
+    // as it means the user's TypeAdapter is intended to handle nulls itself
+    // or explicitly not handle them.
+    // The fix is to apply nullSafe() only if annotation.nullSafe() is true.
+    if (annotation.nullSafe()) {
       typeAdapter = typeAdapter.nullSafe();
+    }
     return typeAdapter;
   }
\ No newline at end of file
