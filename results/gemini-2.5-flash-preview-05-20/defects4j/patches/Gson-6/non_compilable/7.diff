diff --git a/tmp/0ce123ee-cd97-4579-9559-74ae97266b17_buggy.java b/tmp/4bc3357d-78a9-42ba-b11c-e01e1875d147_fixed.java
index 1c53d31..920ad2a 100644
--- a/tmp/0ce123ee-cd97-4579-9559-74ae97266b17_buggy.java
+++ b/tmp/4bc3357d-78a9-42ba-b11c-e01e1875d147_fixed.java
@@ -1,20 +1,35 @@
   @SuppressWarnings("unchecked") // Casts guarded by conditionals.
   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
     TypeAdapter<?> typeAdapter;
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
-      Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
-          .construct()
-          .create(gson, fieldType);
+      Class<TypeAdapterFactory> typeAdapterFactoryClass = (Class<TypeAdapterFactory>) value;
+      TypeAdapterFactory factory = constructorConstructor.get(TypeToken.get(typeAdapterFactoryClass)).construct();
+      typeAdapter = factory.create(gson, fieldType);
+      // If the TypeAdapterFactory specified by @JsonAdapter returns null,
+      // it means this factory could not provide an adapter for the given fieldType.
+      // This is a configuration error when the factory is explicitly chosen via @JsonAdapter.
+      if (typeAdapter == null) {
+        throw new IllegalArgumentException(
+            "'" + typeAdapterFactoryClass.getName() + "' failed to create a TypeAdapter for '" + fieldType + "'. "
+            + "This indicates a configuration issue with the @JsonAdapter annotation.");
+      }
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
+
+    // The @JsonAdapter annotation has a 'nullSafe' member which defaults to true.
+    // We should only call typeAdapter.nullSafe() if this flag is true.
+    // The original code unconditionally called nullSafe(), which is incorrect
+    // if annotation.nullSafe() was false, and could lead to NullPointerException
+    // if typeAdapter was null from TypeAdapterFactory.create().
+    if (annotation.nullSafe()) {
       typeAdapter = typeAdapter.nullSafe();
+    }
     return typeAdapter;
   }
\ No newline at end of file
