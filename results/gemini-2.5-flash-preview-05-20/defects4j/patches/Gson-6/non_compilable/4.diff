diff --git a/tmp/c59b8a02-85e1-46e9-8e60-c9e146fc2881_buggy.java b/tmp/32335ae1-a143-48ce-be4e-2f813f25425f_fixed.java
index 1c53d31..f1537bf 100644
--- a/tmp/c59b8a02-85e1-46e9-8e60-c9e146fc2881_buggy.java
+++ b/tmp/32335ae1-a143-48ce-be4e-2f813f25425f_fixed.java
@@ -1,20 +1,26 @@
   @SuppressWarnings("unchecked") // Casts guarded by conditionals.
   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
     TypeAdapter<?> typeAdapter;
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
       Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
           .construct()
           .create(gson, fieldType);
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
+    // Fix: Only call nullSafe() if the constructed typeAdapter is not null
+    // AND the annotation's nullSafe() parameter is true.
+    // Calling nullSafe() on a null typeAdapter would result in a NullPointerException,
+    // and it should not be called if the annotation explicitly sets nullSafe to false.
+    if (typeAdapter != null && annotation.nullSafe()) {
       typeAdapter = typeAdapter.nullSafe();
+    }
     return typeAdapter;
   }
\ No newline at end of file
