diff --git a/tmp/992f58a6-edfd-49f0-b1b3-b2b603bd7884_buggy.java b/tmp/68dfb54c-8c6b-4d34-9c82-3f742a59bcb6_fixed.java
index 1c53d31..b2eac4e 100644
--- a/tmp/992f58a6-edfd-49f0-b1b3-b2b603bd7884_buggy.java
+++ b/tmp/68dfb54c-8c6b-4d34-9c82-3f742a59bcb6_fixed.java
@@ -1,20 +1,26 @@
   @SuppressWarnings("unchecked") // Casts guarded by conditionals.
   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
     TypeAdapter<?> typeAdapter;
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
       Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
           .construct()
           .create(gson, fieldType);
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
+    // The @JsonAdapter annotation has a 'nullSafe' field (defaulting to true)
+    // which indicates whether Gson should automatically handle nulls.
+    // If 'nullSafe' is false, the user's adapter is responsible for nulls.
+    // Therefore, typeAdapter.nullSafe() should only be called if annotation.nullSafe() is true.
+    if (annotation.nullSafe()) {
       typeAdapter = typeAdapter.nullSafe();
+    }
     return typeAdapter;
   }
