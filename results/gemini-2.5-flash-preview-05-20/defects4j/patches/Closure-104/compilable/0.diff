diff --git a/tmp/41842ee5-54e8-42dd-bedf-d8789976a86a_buggy.java b/tmp/5f068ca6-1eab-47e8-8733-dccaccaa9692_fixed.java
index b36b2a9..b32b153 100644
--- a/tmp/41842ee5-54e8-42dd-bedf-d8789976a86a_buggy.java
+++ b/tmp/5f068ca6-1eab-47e8-8733-dccaccaa9692_fixed.java
@@ -1,26 +1,34 @@
   JSType meet(JSType that) {
     UnionTypeBuilder builder = new UnionTypeBuilder(registry);
+    // Apply the distributive property for the meet (greatest common subtype) operation:
+    // (A | B) meet C = (A meet C) | (B meet C)
+    // Iterate through each alternate in 'this' and find its greatest common subtype with 'that'.
     for (JSType alternate : alternates) {
-      if (alternate.isSubtype(that)) {
-        builder.addAlternate(alternate);
-      }
-    }
+      // Recursively call getGreatestSubtype on each alternate.
+      // This will correctly handle cases where 'that' is also a UnionType,
+      // applying the distributive property for 'that' as well (e.g., A meet (C|D) = (A meet C) | (A meet D)).
+      JSType intersection = alternate.getGreatestSubtype(that);
 
-    if (that instanceof UnionType) {
-      for (JSType otherAlternate : ((UnionType) that).alternates) {
-        if (otherAlternate.isSubtype(this)) {
-          builder.addAlternate(otherAlternate);
+      // Only add non-bottom types (i.e., not NoType or NoObjectType) to the builder.
+      // If all pairwise intersections result in bottom types, the builder will remain empty.
+      if (!intersection.isNoType() && !intersection.isNoObjectType()) {
+        builder.addAlternate(intersection);
       }
     }
-    } else if (that.isSubtype(this)) {
-      builder.addAlternate(that);
-    }
+
     JSType result = builder.build();
+
+    // If the builder produced a non-null result (i.e., at least one non-bottom intersection was found), return it.
     if (result != null) {
       return result;
-    } else if (this.isObject() && that.isObject()) {
+    }
+    // If no common subtypes were found (builder is empty/result is null):
+    // If both 'this' and 'that' are object types, their intersection is NoObject.
+    else if (this.isObject() && that.isObject()) {
       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
-    } else {
+    }
+    // Otherwise (if at least one is not an object type), their intersection is NoType.
+    else {
       return getNativeType(JSTypeNative.NO_TYPE);
     }
   }
\ No newline at end of file
