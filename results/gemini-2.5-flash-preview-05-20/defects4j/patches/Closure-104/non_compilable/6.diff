diff --git a/tmp/043df4b0-3952-41d4-8202-5254274ed250_buggy.java b/tmp/4839cc19-ff22-4c45-ad70-b280ac762e06_fixed.java
index b36b2a9..b768f52 100644
--- a/tmp/043df4b0-3952-41d4-8202-5254274ed250_buggy.java
+++ b/tmp/4839cc19-ff22-4c45-ad70-b280ac762e06_fixed.java
@@ -1,26 +1,55 @@
   JSType meet(JSType that) {
     UnionTypeBuilder builder = new UnionTypeBuilder(registry);
-    for (JSType alternate : alternates) {
-      if (alternate.isSubtype(that)) {
-        builder.addAlternate(alternate);
-      }
-    }
 
     if (that instanceof UnionType) {
-      for (JSType otherAlternate : ((UnionType) that).alternates) {
-        if (otherAlternate.isSubtype(this)) {
-          builder.addAlternate(otherAlternate);
+      // Apply distributive property: meet(this_alternate, that_alternate)
+      // (A|B).meet(C|D) = (A.meet(C)|A.meet(D)) | (B.meet(C)|B.meet(D))
+      UnionType thatUnion = (UnionType) that;
+      for (JSType thisAlternate : alternates) {
+        for (JSType thatAlternate : thatUnion.alternates) {
+          JSType commonSubtype = thisAlternate.meet(thatAlternate);
+          // Only add meaningful common subtypes to the builder.
+          // NoType and NoObjectType are usually handled by the builder itself or the final result logic.
+          if (commonSubtype != null && !commonSubtype.isNoType() && !commonSubtype.isNoObjectType()) {
+            builder.addAlternate(commonSubtype);
           }
         }
-    } else if (that.isSubtype(this)) {
-      builder.addAlternate(that);
       }
+    } else {
+      // Apply distributive property: meet(this_alternate, that)
+      // (A|B).meet(C) = (A.meet(C)) | (B.meet(C))
+      for (JSType thisAlternate : alternates) {
+        JSType commonSubtype = thisAlternate.meet(that); // Recursive call
+        if (commonSubtype != null && !commonSubtype.isNoType() && !commonSubtype.isNoObjectType()) {
+          builder.addAlternate(commonSubtype);
+        }
+      }
+    }
+
     JSType result = builder.build();
+
+    // If the builder produced a non-null result (i.e., found concrete common subtypes), return it.
     if (result != null) {
       return result;
-    } else if (this.isObject() && that.isObject()) {
+    } else {
+      // If no concrete common subtypes were found, determine if it's NO_OBJECT_TYPE or NO_TYPE.
+      // This happens if all individual meet operations resulted in NO_TYPE or NO_OBJECT_TYPE.
+
+      // Check if all alternates of 'this' are object types.
+      boolean allThisAlternatesAreObjects = true;
+      for (JSType alternate : alternates) {
+        if (!alternate.isObject()) {
+          allThisAlternatesAreObjects = false;
+          break;
+        }
+      }
+
+      // If both this (all its alternates) and that are object types, and no concrete common subtype was found,
+      // return NO_OBJECT_TYPE. Otherwise, return NO_TYPE.
+      if (allThisAlternatesAreObjects && that.isObject()) {
         return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
       } else {
         return getNativeType(JSTypeNative.NO_TYPE);
       }
     }
+  }
\ No newline at end of file
