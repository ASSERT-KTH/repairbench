diff --git a/tmp/33ec50ed-0b90-470d-bc30-770189941b80_buggy.java b/tmp/75c4db4d-d638-4bba-8ab1-b8b1aabbfa04_fixed.java
index b36b2a9..5923bcf 100644
--- a/tmp/33ec50ed-0b90-470d-bc30-770189941b80_buggy.java
+++ b/tmp/75c4db4d-d638-4bba-8ab1-b8b1aabbfa04_fixed.java
@@ -1,26 +1,42 @@
   JSType meet(JSType that) {
     UnionTypeBuilder builder = new UnionTypeBuilder(registry);
-    for (JSType alternate : alternates) {
-      if (alternate.isSubtype(that)) {
-        builder.addAlternate(alternate);
-      }
-    }
 
     if (that instanceof UnionType) {
-      for (JSType otherAlternate : ((UnionType) that).alternates) {
-        if (otherAlternate.isSubtype(this)) {
-          builder.addAlternate(otherAlternate);
+      UnionType otherUnion = (UnionType) that;
+      // The intersection of two union types (A|B) & (C|D) is (A&C)|(A&D)|(B&C)|(B&D).
+      for (JSType thisAlternate : alternates) {
+        for (JSType otherAlternate : otherUnion.alternates) {
+          JSType intersection = thisAlternate.meet(otherAlternate);
+          // Only add non-empty intersection results to the builder.
+          if (!intersection.isNoType() && !intersection.isNoObjectType()) {
+            builder.addAlternate(intersection);
           }
         }
-    } else if (that.isSubtype(this)) {
-      builder.addAlternate(that);
       }
+    } else {
+      // The intersection of a union type (A|B) and a single type C is (A&C)|(B&C).
+      for (JSType alternate : alternates) {
+        JSType intersection = alternate.meet(that);
+        // Only add non-empty intersection results to the builder.
+        if (!intersection.isNoType() && !intersection.isNoObjectType()) {
+          builder.addAlternate(intersection);
+        }
+      }
+    }
+
     JSType result = builder.build();
+    // If the builder produced a type, return it.
     if (result != null) {
       return result;
-    } else if (this.isObject() && that.isObject()) {
+    } 
+    // If no specific intersection was found (result is null),
+    // determine if the intersection should be NoObject or NoType.
+    // If both types are objects, their "empty" intersection is NoObject.
+    else if (this.isObject() && that.isObject()) {
       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
-    } else {
+    } 
+    // Otherwise, for any other combination (e.g., primitive, or mixed), it's NoType.
+    else {
       return getNativeType(JSTypeNative.NO_TYPE);
     }
   }
