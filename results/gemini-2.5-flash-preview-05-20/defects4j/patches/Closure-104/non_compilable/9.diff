diff --git a/tmp/31a1ee5d-6da9-49d3-a009-537a34b4df29_buggy.java b/tmp/9ef75d22-7335-44ce-b428-0d855729d363_fixed.java
index b36b2a9..89efd69 100644
--- a/tmp/31a1ee5d-6da9-49d3-a009-537a34b4df29_buggy.java
+++ b/tmp/9ef75d22-7335-44ce-b428-0d855729d363_fixed.java
@@ -1,26 +1,44 @@
   JSType meet(JSType that) {
     UnionTypeBuilder builder = new UnionTypeBuilder(registry);
     for (JSType alternate : alternates) {
-      if (alternate.isSubtype(that)) {
-        builder.addAlternate(alternate);
+      // Instead of checking if 'alternate' is a full subtype of 'that',
+      // we need to find the greatest common subtype (intersection) between them.
+      // This is done by recursively calling 'meet' on the alternate.
+      JSType common = alternate.meet(that);
+      // If the intersection is not the absolute bottom type (NO_TYPE), add it to the builder.
+      // NO_OBJECT_TYPE is a specific empty object type and should not be discarded as NO_TYPE.
+      if (!common.isNoType()) {
+        builder.addAlternate(common);
       }
     }
 
-    if (that instanceof UnionType) {
-      for (JSType otherAlternate : ((UnionType) that).alternates) {
-        if (otherAlternate.isSubtype(this)) {
-          builder.addAlternate(otherAlternate);
-        }
-      }
-    } else if (that.isSubtype(this)) {
-      builder.addAlternate(that);
-    }
+    // The original code contained an additional block to handle cases where 'that' is a UnionType
+    // or a subtype of 'this'. With the change above, where 'alternate.meet(that)' recursively
+    // computes the intersection and handles 'that' being a UnionType (by distributing the meet operation),
+    // this subsequent logic becomes redundant. The UnionTypeBuilder will correctly aggregate
+    // and normalize all the common types found from the first loop.
+    // The following block has been removed:
+    // if (that instanceof UnionType) {
+    //   for (JSType otherAlternate : ((UnionType) that).alternates) {
+    //     if (otherAlternate.isSubtype(this)) {
+    //       builder.addAlternate(otherAlternate);
+    //     }
+    //   }
+    // } else if (that.isSubtype(this)) {
+    //   builder.addAlternate(that);
+    // }
+
     JSType result = builder.build();
     if (result != null) {
       return result;
     } else if (this.isObject() && that.isObject()) {
+      // This fallback handles scenarios where no specific common types were found by the builder,
+      // but both 'this' (the union) and 'that' are object types. In such cases, their intersection
+      // is the type representing "no object instance".
       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
     } else {
+      // If no common types were found and they are not both object types,
+      // the intersection is the absolute bottom type (no type).
       return getNativeType(JSTypeNative.NO_TYPE);
     }
   }
