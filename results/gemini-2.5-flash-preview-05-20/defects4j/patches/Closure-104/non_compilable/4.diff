diff --git a/tmp/05c7cc6d-077e-4442-b53f-884d0d7c7059_buggy.java b/tmp/8babb8c2-6799-4961-9325-5e21e6f439d7_fixed.java
index b36b2a9..db6e352 100644
--- a/tmp/05c7cc6d-077e-4442-b53f-884d0d7c7059_buggy.java
+++ b/tmp/8babb8c2-6799-4961-9325-5e21e6f439d7_fixed.java
@@ -1,26 +1,47 @@
   JSType meet(JSType that) {
     UnionTypeBuilder builder = new UnionTypeBuilder(registry);
     for (JSType alternate : alternates) {
-      if (alternate.isSubtype(that)) {
-        builder.addAlternate(alternate);
+      // For a union type (A|B).meet(C), we should calculate A.meet(C) and B.meet(C).
+      // The result of A.meet(C) might itself be a union or a specific type.
+      // The builder will collect and simplify these.
+      JSType meetResult = alternate.meet(that);
+
+      // Only add the result if it's not the absolute bottom type (NoType),
+      // as an empty builder or a builder resulting in null naturally represents NoType.
+      // However, NoObject is a specific bottom type for objects and should be added.
+      if (!meetResult.isNoType()) {
+        builder.addAlternate(meetResult);
       }
     }
 
+    // The following blocks are generally redundant if the `meet` method correctly
+    // handles recursion for union types on both sides (e.g., `alternate.meet(that)`
+    // would correctly handle `that` being a UnionType).
+    // In a well-designed type system, meet is commutative and distributive,
+    // so iterating through 'this' alternates and calling `alternate.meet(that)`
+    // should be sufficient.
+    /* Original redundant code:
     if (that instanceof UnionType) {
       for (JSType otherAlternate : ((UnionType) that).alternates) {
         if (otherAlternate.isSubtype(this)) {
           builder.addAlternate(otherAlternate);
         }
       }
     } else if (that.isSubtype(this)) {
       builder.addAlternate(that);
     }
+    */
+
     JSType result = builder.build();
     if (result != null) {
+      // If the builder successfully produced a specific type or a non-empty union.
       return result;
     } else if (this.isObject() && that.isObject()) {
+      // If the builder returned null (meaning no common type was found, effectively NoType),
+      // but both 'this' and 'that' are object types, then their greatest common subtype is NoObject.
       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
     } else {
+      // Otherwise, no common type found, return the absolute bottom type (NoType).
       return getNativeType(JSTypeNative.NO_TYPE);
     }
   }
