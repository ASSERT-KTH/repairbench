diff --git a/tmp/82359edb-8d75-4a5e-960a-5f9364ce9ba6_buggy.java b/tmp/047bb04f-a97c-4430-a6b9-23043fe44dc9_fixed.java
index b36b2a9..da4d993 100644
--- a/tmp/82359edb-8d75-4a5e-960a-5f9364ce9ba6_buggy.java
+++ b/tmp/047bb04f-a97c-4430-a6b9-23043fe44dc9_fixed.java
@@ -1,26 +1,29 @@
   JSType meet(JSType that) {
     UnionTypeBuilder builder = new UnionTypeBuilder(registry);
-    for (JSType alternate : alternates) {
-      if (alternate.isSubtype(that)) {
-        builder.addAlternate(alternate);
-      }
-    }
 
     if (that instanceof UnionType) {
-      for (JSType otherAlternate : ((UnionType) that).alternates) {
-        if (otherAlternate.isSubtype(this)) {
-          builder.addAlternate(otherAlternate);
+      UnionType otherUnion = (UnionType) that;
+      for (JSType thisAlternate : alternates) {
+        for (JSType thatAlternate : otherUnion.alternates) {
+          // The meet of two union types distributes: meet(A|B, C|D) = (meet(A,C) | meet(A,D) | meet(B,C) | meet(B,D))
+          // Recursively call getGreatestSubtype on the individual components.
+          builder.addAlternate(thisAlternate.getGreatestSubtype(thatAlternate));
         }
       }
-    } else if (that.isSubtype(this)) {
-      builder.addAlternate(that);
+    } else { // 'that' is a non-union type
+      for (JSType thisAlternate : alternates) {
+        // The meet of a union type and a non-union type distributes: meet(A|B, C) = (meet(A,C) | meet(B,C))
+        // Recursively call getGreatestSubtype on each component of 'this' and 'that'.
+        builder.addAlternate(thisAlternate.getGreatestSubtype(that));
       }
+    }
+
     JSType result = builder.build();
     if (result != null) {
       return result;
     } else if (this.isObject() && that.isObject()) {
       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
     } else {
       return getNativeType(JSTypeNative.NO_TYPE);
     }
   }
\ No newline at end of file
