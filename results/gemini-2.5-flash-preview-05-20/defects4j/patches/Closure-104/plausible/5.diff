diff --git a/tmp/76de5675-d56f-4ae8-b676-133a8a6c6503_buggy.java b/tmp/d2d53807-8998-469f-83c0-8887a4c24014_fixed.java
index b36b2a9..7f5d4b0 100644
--- a/tmp/76de5675-d56f-4ae8-b676-133a8a6c6503_buggy.java
+++ b/tmp/d2d53807-8998-469f-83c0-8887a4c24014_fixed.java
@@ -1,26 +1,48 @@
   JSType meet(JSType that) {
     UnionTypeBuilder builder = new UnionTypeBuilder(registry);
-    for (JSType alternate : alternates) {
-      if (alternate.isSubtype(that)) {
-        builder.addAlternate(alternate);
-      }
-    }
+
+    // The 'meet' (or greatest common subtype) operation for union types
+    // distributes over the union.
+    // If this = (U1 | U2 | ... | Un) and that = V, then meet(this, that) = (U1 meet V) | (U2 meet V) | ... | (Un meet V).
+    // If this = (U1 | ... | Un) and that = (V1 | ... | Vm), then meet(this, that) = union over i,j (Ui meet Vj).
 
     if (that instanceof UnionType) {
-      for (JSType otherAlternate : ((UnionType) that).alternates) {
-        if (otherAlternate.isSubtype(this)) {
-          builder.addAlternate(otherAlternate);
+      // Case: both 'this' (a UnionType) and 'that' (a UnionType) are involved.
+      UnionType otherUnion = (UnionType) that;
+      for (JSType alternateThis : alternates) { // Iterate over U_i
+        for (JSType alternateThat : otherUnion.alternates) { // Iterate over V_j
+          // Recursively compute the meet of individual alternates.
+          JSType intersection = alternateThis.getGreatestSubtype(alternateThat);
+          if (intersection != null) {
+            // Only add to builder if the intersection is not null.
+            // (Assumes getGreatestSubtype returns null for "no intersection" or
+            //  that builder.addAlternate handles NO_TYPE/NO_OBJECT_TYPE appropriately.)
+            builder.addAlternate(intersection);
           }
         }
-    } else if (that.isSubtype(this)) {
-      builder.addAlternate(that);
       }
+    } else {
+      // Case: 'this' is a UnionType, 'that' is a single JSType (not a UnionType).
+      for (JSType alternateThis : alternates) { // Iterate over U_i
+        // Recursively compute the meet of each alternate of 'this' with 'that'.
+        JSType intersection = alternateThis.getGreatestSubtype(that);
+        if (intersection != null) {
+          builder.addAlternate(intersection);
+        }
+      }
+    }
+
+    // After collecting all relevant intersections, build the resulting union type.
     JSType result = builder.build();
+
+    // The following logic was present in the original code and handles the cases
+    // where the builder might produce a null result (indicating an empty intersection).
+    // It distinguishes between an empty object intersection (NoObject) and a general empty intersection (NoType).
     if (result != null) {
       return result;
     } else if (this.isObject() && that.isObject()) {
       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
     } else {
       return getNativeType(JSTypeNative.NO_TYPE);
     }
   }
\ No newline at end of file
