diff --git a/tmp/f7fa3a74-9e62-4477-ad06-df5cf58a33d3_buggy.java b/tmp/fc1b0a59-1712-4db6-986a-6df30f9faba3_fixed.java
index b36b2a9..170d7e0 100644
--- a/tmp/f7fa3a74-9e62-4477-ad06-df5cf58a33d3_buggy.java
+++ b/tmp/fc1b0a59-1712-4db6-986a-6df30f9faba3_fixed.java
@@ -1,26 +1,47 @@
   JSType meet(JSType that) {
     UnionTypeBuilder builder = new UnionTypeBuilder(registry);
-    for (JSType alternate : alternates) {
-      if (alternate.isSubtype(that)) {
-        builder.addAlternate(alternate);
-      }
-    }
 
     if (that instanceof UnionType) {
-      for (JSType otherAlternate : ((UnionType) that).alternates) {
-        if (otherAlternate.isSubtype(this)) {
-          builder.addAlternate(otherAlternate);
+      UnionType thatUnion = (UnionType) that;
+      for (JSType thisAlternate : alternates) {
+        for (JSType thatAlternate : thatUnion.alternates) {
+          // Recursively find the greatest subtype of each pair of alternates.
+          // This ensures the distributive property of meet over union:
+          // meet(U_i A_i, U_j B_j) = U_i U_j meet(A_i, B_j)
+          JSType commonSubtype = thisAlternate.getGreatestSubtype(thatAlternate);
+          if (commonSubtype != null) {
+            // Add all results, including NoType/NoObject, as UnionTypeBuilder
+            // and subsequent normalization will handle these correctly.
+            builder.addAlternate(commonSubtype);
           }
         }
-    } else if (that.isSubtype(this)) {
-      builder.addAlternate(that);
       }
+    } else { // 'that' is not a UnionType
+      for (JSType thisAlternate : alternates) {
+        // Recursively find the greatest subtype of each alternate of 'this' with 'that'.
+        // meet(U_i A_i, B) = U_i meet(A_i, B)
+        JSType commonSubtype = thisAlternate.getGreatestSubtype(that);
+        if (commonSubtype != null) {
+            // Add all results, including NoType/NoObject.
+            builder.addAlternate(commonSubtype);
+        }
+      }
+    }
+
     JSType result = builder.build();
+
+    // The builder.build() method, through registry.createUnionType,
+    // automatically handles normalization (e.g., (Foo|NoObject) -> Foo, (NoObject|NoType) -> NoType).
+    // So 'result' will be the most specific union of common subtypes found.
+    // If all common subtypes were 'NoObject', result will be 'NoObject'.
+    // If all common subtypes were 'NoType', result will be 'NoType'.
+    // If no common subtypes were found and 'getGreatestSubtype' yielded null for all pairs,
+    // then 'result' would be null. In this case, the original fallback logic is used.
     if (result != null) {
       return result;
     } else if (this.isObject() && that.isObject()) {
       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
     } else {
       return getNativeType(JSTypeNative.NO_TYPE);
     }
   }
