diff --git a/tmp/0d517492-a0a7-4c55-b2c7-00a66c86c0b3_buggy.java b/tmp/e9152834-8a92-4c8a-a88a-2286e7f0c7d1_fixed.java
index aea175a..4017dc9 100644
--- a/tmp/0d517492-a0a7-4c55-b2c7-00a66c86c0b3_buggy.java
+++ b/tmp/e9152834-8a92-4c8a-a88a-2286e7f0c7d1_fixed.java
@@ -1,76 +1,86 @@
     /**
      * <p>
      * Encodes all of the provided data, starting at inPos, for inAvail bytes.
      * Must be called at least twice:  once with the data to encode, and once
      * with inAvail set to "-1" to alert encoder that EOF has been reached,
      * so flush last remaining bytes (if not multiple of 3).
      * </p><p>
      * Thanks to "commons" project in ws.apache.org for the bitwise operations,
      * and general approach.
      * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/
      * </p>
      *
      * @param in byte[] array of binary data to base64 encode.
      * @param inPos Position to start reading data from.
      * @param inAvail Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
         if (eof) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
             eof = true;
+            // The logic here is for flushing remaining bytes (modulus 1 or 2).
+            // If modulus is 0, it means all bytes were processed in full 3-byte blocks,
+            // or no bytes were processed at all. In either case, no further encoding (padding)
+            // is needed for modulus 0.
+
+            // Ensure buffer has enough space for potential padding (max 4 chars)
+            // and line separator (if applicable).
             if (buf == null || buf.length - pos < encodeSize) {
                 resizeBuf();
             }
             switch (modulus) {
-                case 1:
+                case 1: // One byte processed, needs 2 padding chars (XX==)
                     buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buf[pos++] = PAD;
                         buf[pos++] = PAD;
                     }
                     break;
 
-                case 2:
+                case 2: // Two bytes processed, needs 1 padding char (XXX=)
                     buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buf[pos++] = PAD;
                     }
                     break;
+                // Case 0: No action needed for encoding, as all data was a multiple of 3, or no data.
             }
-            if (lineLength > 0) {
+            // Only add a line separator at EOF if lineLength is enabled AND some data was actually encoded.
+            // For empty input, 'pos' will be 0, and we should not add a line separator.
+            if (lineLength > 0 && pos > 0) {
                 System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
                 if (buf == null || buf.length - pos < encodeSize) {
                     resizeBuf();
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
-                if (b < 0) { b += 256; }
+                if (b < 0) { b += 256; } // Handle negative byte values for byte type
                 x = (x << 8) + b;
-                if (0 == modulus) {
+                if (0 == modulus) { // A full 3-byte block (24 bits) is complete
                     buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
                     buf[pos++] = encodeTable[x & MASK_6BITS];
-                    currentLinePos += 4;
+                    currentLinePos += 4; // 4 encoded characters were added
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        currentLinePos = 0; // Reset line position after adding separator
                     }
                 }
             }
         }
     }
\ No newline at end of file
