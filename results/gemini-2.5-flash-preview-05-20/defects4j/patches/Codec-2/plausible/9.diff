diff --git a/tmp/cdab79c8-7561-4ea0-bd71-838c621584b6_buggy.java b/tmp/61f5e8ff-6db9-4276-b7e1-758e95fd0f86_fixed.java
index aea175a..bc57e4a 100644
--- a/tmp/cdab79c8-7561-4ea0-bd71-838c621584b6_buggy.java
+++ b/tmp/61f5e8ff-6db9-4276-b7e1-758e95fd0f86_fixed.java
@@ -1,76 +1,91 @@
     /**
      * <p>
      * Encodes all of the provided data, starting at inPos, for inAvail bytes.
      * Must be called at least twice:  once with the data to encode, and once
      * with inAvail set to "-1" to alert encoder that EOF has been reached,
      * so flush last remaining bytes (if not multiple of 3).
      * </p><p>
      * Thanks to "commons" project in ws.apache.org for the bitwise operations,
      * and general approach.
      * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/
      * </p>
      *
      * @param in byte[] array of binary data to base64 encode.
      * @param inPos Position to start reading data from.
      * @param inAvail Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
         if (eof) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
             eof = true;
+            // Ensure buffer has enough space for the remaining encoded characters and potential line separator.
+            // encodeSize is 4 for Base64 (max output chars for 1 or 2 input bytes + padding).
+            // This also ensures space for lineSeparator if it's smaller or equal to 4 bytes.
             if (buf == null || buf.length - pos < encodeSize) {
                 resizeBuf();
             }
+
+            // Capture pos before potential additions from modulus cases to check if any new characters were generated.
+            int initialPos = pos; 
+
             switch (modulus) {
                 case 1:
                     buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buf[pos++] = PAD;
                         buf[pos++] = PAD;
                     }
                     break;
 
                 case 2:
                     buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buf[pos++] = PAD;
                     }
                     break;
+                // case 0: no characters are generated from modulus 0 at EOF.
             }
-            if (lineLength > 0) {
+
+            // Handle line separators after all encoded characters (if any) are written.
+            // A line separator is only added if:
+            // 1. lineLength > 0 (line breaks are enabled).
+            // 2. AND (either characters were added by the modulus switch, OR there were already characters accumulated on the current line).
+            // This ensures no line separators are added for truly empty input (where modulus is 0, currentLinePos is 0, and pos == initialPos).
+            if (lineLength > 0 && (currentLinePos > 0 || (pos > initialPos))) {
                 System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+                // currentLinePos is not reset here as it's the end of encoding.
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
                 if (buf == null || buf.length - pos < encodeSize) {
                     resizeBuf();
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
                 if (b < 0) { b += 256; }
                 x = (x << 8) + b;
                 if (0 == modulus) {
                     buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
                     buf[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
                 }
             }
         }
     }
\ No newline at end of file
