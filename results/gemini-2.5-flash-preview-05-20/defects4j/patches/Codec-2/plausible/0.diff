diff --git a/tmp/1a9b4295-2070-4161-a378-90d8953aed87_buggy.java b/tmp/b520c9ac-d38a-4fe5-ba02-ab4fe9e6fad9_fixed.java
index aea175a..c1e841a 100644
--- a/tmp/1a9b4295-2070-4161-a378-90d8953aed87_buggy.java
+++ b/tmp/b520c9ac-d38a-4fe5-ba02-ab4fe9e6fad9_fixed.java
@@ -1,76 +1,85 @@
     /**
      * <p>
      * Encodes all of the provided data, starting at inPos, for inAvail bytes.
      * Must be called at least twice:  once with the data to encode, and once
      * with inAvail set to "-1" to alert encoder that EOF has been reached,
      * so flush last remaining bytes (if not multiple of 3).
      * </p><p>
      * Thanks to "commons" project in ws.apache.org for the bitwise operations,
      * and general approach.
      * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/
      * </p>
      *
      * @param in byte[] array of binary data to base64 encode.
      * @param inPos Position to start reading data from.
      * @param inAvail Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
         if (eof) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
             eof = true;
+            // The logic here ensures that there is enough buffer space for any
+            // remaining encoded data (if modulus != 0) and potentially a line separator.
+            // If the buffer is null, it needs to be initialized.
+            // If modulus is 0 (all input in multiples of 3) and currentLinePos is 0 (no data on current line),
+            // it means there's no remaining data to encode and no line break needed.
+            // However, resizeBuf() is called if buf is null or not enough space, which is generally safe.
             if (buf == null || buf.length - pos < encodeSize) {
                 resizeBuf();
             }
             switch (modulus) {
                 case 1:
                     buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buf[pos++] = PAD;
                         buf[pos++] = PAD;
                     }
                     break;
 
                 case 2:
                     buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buf[pos++] = PAD;
                     }
                     break;
             }
-            if (lineLength > 0) {
+            // Only add a final line separator if line wrapping is enabled AND
+            // (there are characters on the current line OR there was an incomplete block that just got padded).
+            // This prevents adding a line separator for empty input, where modulus will be 0 and currentLinePos will be 0.
+            if (lineLength > 0 && (currentLinePos > 0 || modulus != 0)) {
                 System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
                 if (buf == null || buf.length - pos < encodeSize) {
                     resizeBuf();
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
                 if (b < 0) { b += 256; }
                 x = (x << 8) + b;
                 if (0 == modulus) {
                     buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
                     buf[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
                 }
             }
         }
     }
\ No newline at end of file
