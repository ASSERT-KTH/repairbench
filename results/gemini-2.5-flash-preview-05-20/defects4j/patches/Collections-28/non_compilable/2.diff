diff --git a/tmp/979d9301-1a15-44dd-87b9-4b99bca9f7da_buggy.java b/tmp/e706d8ad-5891-44b6-a7dd-6d0f0821921e_fixed.java
index e69de29..ca8bdbe 100644
--- a/tmp/979d9301-1a15-44dd-87b9-4b99bca9f7da_buggy.java
+++ b/tmp/e706d8ad-5891-44b6-a7dd-6d0f0821921e_fixed.java
@@ -0,0 +1,65 @@
+@Override
+public V remove(final Object key) {
+    if (key == null) {
+        throw new NullPointerException();
+    }
+    final String k = toString(key);
+    if (k.length() == 0) {
+        return null; // Cannot remove root key
+    }
+
+    final TrieEntry<K, V> current = getEntry(key);
+    if (current == null) {
+        return null;
+    }
+
+    final V retValue = current.getValue();
+    if (current == this.root) {
+        current.setKeyValue(null, null);
+        current.setNodePresent(false);
+        this.size--;
+        return retValue;
+    }
+
+    // current is a real node (not root)
+    if (current.isInternalNode()) { // current is a branch node.
+        // current still has children, so we cant remove it.
+        // we can only remove its value.
+        current.setNodePresent(false);
+        current.setKeyValue(current.getKey(), null);
+        this.size--;
+        return retValue;
+    }
+
+    // current is an external node (not a branch node), so it can be removed.
+    // It has only one "real" child, so we link its parent to its child.
+    // This takes care of the case where 'current' is a leaf node
+    // (its children point to 'self' or 'parent').
+
+    // find the parent of current
+    final TrieEntry<K, V> parent = current.getParent();
+
+    // find the child of current that is a "real" node
+    // (the other child will point to self or parent, effectively null)
+    TrieEntry<K, V> child;
+    if (current.getLeft().getParent() == current) { // current.getLeft() is the "real" child
+        child = current.getLeft();
+    } else { // current.getRight() is the "real" child
+        child = current.getRight();
+    }
+
+    // connect parent to child.
+    if (parent.getLeft() == current) {
+        parent.setLeft(child);
+    } else {
+        parent.setRight(child);
+    }
+
+    // FIX: Update the child's parent pointer.
+    // Before this fix, 'child's parent pointer would still point to 'current'
+    // which is being removed, causing a structural inconsistency.
+    child.setParent(parent);
+
+    this.size--;
+    return retValue;
+}
\ No newline at end of file
