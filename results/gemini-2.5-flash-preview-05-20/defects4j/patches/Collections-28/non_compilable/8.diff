diff --git a/tmp/67e41cc0-0854-49d4-ba49-ba506637ecf5_buggy.java b/tmp/8cd9d0a2-c012-44ac-a77d-353b5b3c6463_fixed.java
index e69de29..7c62872 100644
--- a/tmp/67e41cc0-0854-49d4-ba49-ba506637ecf5_buggy.java
+++ b/tmp/8cd9d0a2-c012-44ac-a77d-353b5b3c6463_fixed.java
@@ -0,0 +1,87 @@
+protected void deleteNode(final Node<V> node) {
+    // Determine the parent and potential grandparent of the node being deleted
+    Node<V> parent = node.getParent();
+    Node<V> grandParent = null; // Will be determined later if needed
+    Node<V> child = null; // The node that will replace 'node' structurally, or the 'parent' if node is a leaf.
+
+    // Case 1: 'node' has no open links (it's a leaf node where both 'left' and 'right' links are either 'null' or point back to 'node' itself).
+    // This node needs to be completely removed from the trie structure.
+    if ((node.getLeft() == node || node.getLeft() == null) && (node.getRight() == node || node.getRight() == null)) {
+        if (node == this.root) { // If the root node is being deleted and it's a leaf
+            this.root = null; // Trie becomes empty
+            return;
+        }
+        // If node is a child of 'parent', update parent's link to point back to itself (closed link)
+        if (parent.getLeft() == node) {
+            parent.setLeft(parent);
+        } else { // node.getParent().getRight() == node
+            parent.setRight(parent);
+        }
+        child = parent; // The 'parent' becomes the 'child' for the collapse logic, meaning 'parent' is now potentially collapsable.
+    }
+    // Case 2: 'node' has exactly one open link.
+    // This 'node' will be replaced by its single open child.
+    else {
+        // Determine the single open child (the one that is not null and not a self-loop)
+        if (node.getLeft() == node || node.getLeft() == null) { // Left is closed/null, right must be open
+            child = node.getRight();
+        } else { // Right is closed/null, left must be open
+            child = node.getLeft();
+        }
+
+        if (node == this.root) { // If the root node is being deleted and it has one open child
+            this.root = child;
+            if (this.root != null) { // The new root (child) must have a null parent.
+                this.root.setParent(null);
+            }
+            return; // Root handled.
+        }
+
+        // Re-parent 'child' to 'parent'
+        if (parent.getLeft() == node) {
+            parent.setLeft(child);
+        } else { // parent.getRight() == node
+            parent.setRight(child);
+        }
+        // FIX: Ensure 'child' is not null before setting its parent.
+        // 'child' can be null here if, for example, node.getLeft() was null and node.getRight() was also null,
+        // and the first 'if' block (for no open links) was not perfectly exhaustive for all types of leaves.
+        if (child != null) {
+            child.setParent(parent);
+        }
+    }
+
+    // Collapse loop: Traverse up the tree from the 'parent' (or the 'child' in Case 1),
+    // collapsing nodes whose bitIndex is "bad" (greater than or equal to their child's bitIndex).
+    Node<V> current = child; // 'current' is the node that's being potentially moved up
+    Node<V> currentParent = (child == parent) ? parent.getParent() : parent; // 'currentParent' is the parent of 'current'
+
+    while (currentParent != null && currentParent.getBitIndex() >= current.getBitIndex()) {
+        grandParent = currentParent.getParent();
+
+        if (grandParent == null) { // 'currentParent' was the root
+            this.root = current;
+            if (this.root != null) { // New root must have a null parent.
+                this.root.setParent(null);
+            }
+            return;
+        }
+
+        // Relink 'grandParent' to 'current'
+        if (grandParent.getLeft() == currentParent) {
+            grandParent.setLeft(current);
+        } else { // grandParent.getRight() == currentParent
+            grandParent.setRight(current);
+        }
+
+        // FIX: Ensure 'current' is not null before setting its parent.
+        // 'current' could potentially be null if the trie becomes empty after this collapse step.
+        if (current != null) {
+            current.setParent(grandParent);
+        }
+
+        // Move up the tree for the next iteration of collapse
+        current = currentParent;
+        currentParent = grandParent;
+    }
+}
\ No newline at end of file
