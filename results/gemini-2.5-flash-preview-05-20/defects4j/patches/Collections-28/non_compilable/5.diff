diff --git a/tmp/63d3b546-316b-456d-87c5-87c2e08d9d17_buggy.java b/tmp/c2875b7b-e7a8-490a-a1ee-ca91bfb7e409_fixed.java
index e69de29..18765d5 100644
--- a/tmp/63d3b546-316b-456d-87c5-87c2e08d9d17_buggy.java
+++ b/tmp/c2875b7b-e7a8-490a-a1ee-ca91bfb7e409_fixed.java
@@ -0,0 +1,79 @@
+protected TrieEntry<K, V> removeEntry(TrieEntry<K, V> entry) {
+    if (entry == null) {
+        return null;
+    }
+
+    // Special case: removing the root entry
+    if (entry == root) {
+        // If the root is also a leaf node (both children are self-loops),
+        // it means the trie becomes empty after removal.
+        if (entry.left == entry && entry.right == entry) {
+            root = null; // Set root to null to make the trie empty.
+        } else {
+            // If the root has actual children (not self-loops),
+            // it cannot be physically removed as it's vital for the trie structure.
+            // Only its value is cleared.
+            entry.value = null;
+        }
+        // The trie's size and modification count are adjusted in the public remove(K key) method.
+        return entry;
+    }
+
+    // Case: 'entry' is not a leaf node (it has at least one child that is not a self-loop).
+    // In this scenario, the node itself cannot be physically removed because it's part of
+    // paths leading to other keys. Only its value can be cleared.
+    if (entry.left != entry || entry.right != entry) {
+        entry.value = null;
+        // The trie's size and modification count are adjusted in the public remove(K key) method.
+        return entry;
+    }
+
+    // Case: 'entry' is a leaf node (both its children are self-loops) and it's not the root.
+    // This node can be physically removed from the trie.
+    TrieEntry<K, V> parent = entry.parent;
+
+    // Disconnect 'entry' from its 'parent' by making 'parent' point to itself
+    // on the side where 'entry' was, effectively collapsing that branch.
+    if (parent.left == entry) {
+        parent.left = parent;
+    } else { // parent.right == entry
+        parent.right = parent;
+    }
+
+    // Now, we need to propagate this "self-loop" upwards.
+    // 'branch' represents the part of the trie that has been 'collapsed' (became a self-loop).
+    // 'current' is the node we are currently examining, an ancestor of 'branch'.
+    TrieEntry<K, V> branch = entry;
+    TrieEntry<K, V> current = parent;
+
+    // Loop upwards towards the root, consolidating branches that now become 'leaves'.
+    // A NullPointerException often occurs here if 'current' becomes null but is still dereferenced.
+    while (current != null && (current.left == branch || current.right == branch)) {
+        // 'current' has 'branch' as one of its children, which is now a self-loop.
+        // Therefore, 'current' itself also becomes a self-loop on that side.
+        if (current.left == branch) {
+            current.left = current;
+        } else { // current.right == branch
+            current.right = current;
+        }
+
+        // After 'current's pointers are adjusted, its min/max references might need updating.
+        // This is crucial for correctness, especially for prefixMap operations.
+        // This call to fixupMinMax should be robust and handle self-loops correctly.
+        fixupMinMax(current);
+
+        // Move 'branch' up to 'current', and 'current' up to its parent.
+        branch = current;
+        current = current.parent;
+    }
+
+    // After the loop, 'current' is either null (meaning we propagated all the way up to/past the root)
+    // or it's the first ancestor that was NOT affected by the collapse (i.e., it had another active branch).
+    // In the latter case, 'current's min/max pointers might need one final adjustment.
+    if (current != null) {
+        fixupMinMax(current);
+    }
+    
+    // The trie's size and modification count are adjusted in the public remove(K key) method.
+    return entry;
+}
\ No newline at end of file
