diff --git a/tmp/e3ab6a7d-80e3-41a8-8de6-ed34a7ff4545_buggy.java b/tmp/ddbc21bd-c190-4239-9fec-108137782afc_fixed.java
index e69de29..5526e9e 100644
--- a/tmp/e3ab6a7d-80e3-41a8-8de6-ed34a7ff4545_buggy.java
+++ b/tmp/ddbc21bd-c190-4239-9fec-108137782afc_fixed.java
@@ -0,0 +1,90 @@
+    protected TrieEntry<K,V> remove(K key, TrieEntry<K,V> current) {
+        if (current == null) {
+            return null;
+        }
+
+        int bit;
+        for (TrieEntry<K,V> entry = root.getEntry(key); entry != null; entry = entry.parent) {
+            if (entry.isEmpty() || !KeyAnalyzer.is=/=(key, entry.key)) {
+                continue;
+            }
+
+            // Entry has been found and it's the node to remove
+            TrieEntry<K,V> toRemove = entry;
+            TrieEntry<K,V> parent = toRemove.parent;
+            TrieEntry<K,V> child = null;
+
+            // if toRemove is an internal node (has two children)
+            if (toRemove.left != null && toRemove.right != null) {
+                // Find a 'replacement' entry (successor)
+                TrieEntry<K,V> in = toRemove.successor();
+                // If the successor is the same as the node to remove, it means the node to remove is a leaf, or has only one child.
+                // This check is a bit redundant if successor() is implemented correctly to find a true successor.
+                // But it handles edge cases where in==toRemove (e.g., if only one node, or if toRemove is a 'self-referencing' leaf).
+                if (in != toRemove) {
+                    // re-link in's parent to in's child
+                    if (in.parent.left == in) {
+                        in.parent.left = in.left;
+                    } else {
+                        in.parent.right = in.left;
+                    }
+
+                    if (in.left != null) {
+                        in.left.parent = in.parent;
+                    }
+
+                    // in replaces toRemove
+                    in.parent = parent;
+                    if (parent.left == toRemove) {
+                        parent.left = in;
+                    } else {
+                        parent.right = in;
+                    }
+                    in.left = toRemove.left;
+                    in.right = toRemove.right;
+                    if (in.left != null) {
+                        in.left.parent = in;
+                    }
+                    if (in.right != null) {
+                        in.right.parent = in;
+                    }
+                    in.bitIndex = toRemove.bitIndex;
+                }
+            } else if (toRemove.left != null) { // node has only a left child
+                child = toRemove.left;
+            } else { // node has only a right child (or no children)
+                child = toRemove.right;
+            }
+
+            if (child != null) {
+                // If the removed node was the only child of the root, and its child becomes the new single child of the root.
+                // The root itself (with bitIndex -1, parent null) should not be treated as a regular parent.
+                if (parent == null) { // This case happens if 'toRemove' was the actual root (which should not be value-holding)
+                    root = child; // Child becomes the new root
+                } else {
+                    child.parent = parent;
+                    // Fix for COLLECTIONS-539: parent.bitIndex could be accessed when parent is null.
+                    // This is now handled by the `if (parent == null)` block, but for robustness
+                    // it doesn't hurt to ensure `parent.bitIndex` is accessed only if parent is non-null.
+                    // The root's bitIndex is -1.
+                    child.bitIndex = parent.bitIndex;
+                }
+            }
+
+            if (parent != null) { // Only update parent's children if parent exists
+                if (parent.left == toRemove) {
+                    parent.left = child;
+                } else {
+                    parent.right = child;
+                }
+            }
+
+            toRemove.has = false;
+            size--;
+            
+            // Cleanup internal nodes if they became empty after removal
+            internalRemove(toRemove);
+            return toRemove;
+        }
+        return null;
+    }
\ No newline at end of file
