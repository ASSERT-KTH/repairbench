diff --git a/tmp/093e8c4b-49e5-4046-a9f2-5af17a69c18e_buggy.java b/tmp/df235d62-64f1-47df-83f7-cb67a6342bb0_fixed.java
index e69de29..a713f36 100644
--- a/tmp/093e8c4b-49e5-4046-a9f2-5af17a69c18e_buggy.java
+++ b/tmp/df235d62-64f1-47df-83f7-cb67a6342bb0_fixed.java
@@ -0,0 +1,29 @@
+    private void fixupAfterRemove(final TrieEntry<K, V> current) {
+        if (current == root) {
+            return;
+        }
+
+        if (current.isEmpty()) {
+            // If the current entry is now empty (no value, no children),
+            // it can be removed from the trie.
+            TrieEntry<K, V> parent = current.parent;
+            TrieEntry<K, V> child = current.successor();
+
+            // Find the actual branch node whose child pointer needs to be updated.
+            // This might not be the direct parent if the current node is part of a
+            // chain of implicit nodes (nodes with only one child, representing a prefix).
+            TrieEntry<K, V> branch = parent;
+            while (branch.bitIndex > current.bitIndex) {
+                branch = branch.parent;
+            }
+
+            // Update the branch's child pointer to bypass the removed node.
+            // The bitIndex of the branch determines which child (left or right)
+            // corresponds to the path that led to 'current'.
+            if (branch.left == current) {
+                branch.left = child;
+            } else {
+                branch.right = child;
+            }
+        }
+    }
\ No newline at end of file
