diff --git a/tmp/ba4ac4e0-8b1d-468b-adb8-29cdf3f596fc_buggy.java b/tmp/9004b209-fefb-4ae9-9a9a-5c3fe77ec602_fixed.java
index e69de29..b43bb29 100644
--- a/tmp/ba4ac4e0-8b1d-468b-adb8-29cdf3f596fc_buggy.java
+++ b/tmp/9004b209-fefb-4ae9-9a9a-5c3fe77ec602_fixed.java
@@ -0,0 +1,36 @@
+    private void fixupParents(TrieEntry<K, V> entry) {
+        TrieEntry<K, V> current = entry.parent;
+        while (current != null) {
+            // Check if 'current' node can be removed (no value and no children)
+            if (!current.hasValue() && current.getLeft() == null && current.getRight() == null) {
+                if (current == root) {
+                    root = null;
+                } else {
+                    // Remove current node from its parent
+                    if (current.parent.getLeft() == current) {
+                        current.parent.setLeft(null);
+                    } else {
+                        current.parent.setRight(null);
+                    }
+                }
+            }
+            // Check if 'current' node can be promoted (no value and exactly one child)
+            else if (!current.hasValue() && (current.getLeft() != null ^ current.getRight() != null)) {
+                TrieEntry<K, V> child = (current.getLeft() != null) ? current.getLeft() : current.getRight();
+                if (current == root) {
+                    root = child;
+                    child.setParent(null);
+                } else {
+                    // Promote child to current's parent
+                    if (current.parent.getLeft() == current) {
+                        current.parent.setLeft(child);
+                    } else {
+                        current.parent.setRight(child);
+                    }
+                    child.setParent(current.parent);
+                }
+            }
+            // If the node still has a value, or has two children, or is already fixed, move to its parent
+            current = current.parent;
+        }
+    }
\ No newline at end of file
