diff --git a/tmp/996a652d-e8fe-4841-8322-f17cfba4c9fd_buggy.java b/tmp/9ce5550f-af2d-46f9-a8e5-fde452c59a1c_fixed.java
index 66af1fd..f52d71c 100644
--- a/tmp/996a652d-e8fe-4841-8322-f17cfba4c9fd_buggy.java
+++ b/tmp/9ce5550f-af2d-46f9-a8e5-fde452c59a1c_fixed.java
@@ -1,107 +1,121 @@
     // the original object is needed so can check for Number
     private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
             final Appendable out, final boolean newRecord) throws IOException {
         boolean quote = false;
         int start = offset;
         int pos = offset;
         final int end = offset + len;
 
         final char delimChar = getDelimiter();
         final char quoteChar = getQuoteCharacter().charValue();
 
         QuoteMode quoteModePolicy = getQuoteMode();
         if (quoteModePolicy == null) {
             quoteModePolicy = QuoteMode.MINIMAL;
         }
         switch (quoteModePolicy) {
         case ALL:
         case ALL_NON_NULL:
             quote = true;
             break;
         case NON_NUMERIC:
             quote = !(object instanceof Number);
             break;
         case NONE:
             // Use the existing escaping code
             printAndEscape(value, offset, len, out);
             return;
         case MINIMAL:
             if (len <= 0) {
                 // always quote an empty token that is the first
                 // on the line, as it may be the only thing on the
                 // line. If it were not quoted in that case,
                 // an empty line has no tokens.
                 if (newRecord) {
                     quote = true;
                 }
             } else {
                 char c = value.charAt(pos);
 
-                if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {
+                // In MINIMAL mode, quote if the first character is a control character
+                // (e.g., TAB, LF, CR). This provides robustness for such characters
+                // at the start of a new record.
+                // The original logic was too aggressive, quoting non-ASCII characters (c > 0x7E)
+                // and specific ASCII characters (like '"' or ',') that are already handled by the
+                // main loop or not universally problematic if not the actual quote/delimiter.
+                if (newRecord && c < 0x20) {
                     quote = true;
-                } else if (c <= COMMENT) {
-                    // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
-                    quote = true;
-                } else {
+                }
+                // Removed the `else if (c <= COMMENT)` block as it is overly broad
+                // and not aligned with standard minimal quoting rules for RFC 4180.
+                else {
+                    // Iterate through the string to find characters that require quoting based on RFC 4180.
+                    // These are: line feed, carriage return, the quote character itself, or the delimiter character.
                     while (pos < end) {
                         c = value.charAt(pos);
                         if (c == LF || c == CR || c == quoteChar || c == delimChar) {
                             quote = true;
                             break;
                         }
                         pos++;
                     }
 
                     if (!quote) {
-                        pos = end - 1;
+                        // If not already quoted, check for problematic characters at the end of the field.
+                        // This typically involves trailing spaces or control characters, for robustness
+                        // with some parsers, even if not strictly mandated by RFC 4180 for all cases.
+                        pos = end - 1; // Set pos to the last character's index
+                        if (pos >= start) { // Ensure pos is a valid index, especially for len=1
                             c = value.charAt(pos);
-                        // Some other chars at the end caused the parser to fail, so for now
-                        // encapsulate if we end in anything less than ' '
+                            // Quoting for trailing control characters or spaces (c <= ' ').
                             if (c <= SP) {
                                 quote = true;
                             }
                         }
                     }
                 }
+            }
 
             if (!quote) {
                 // no encapsulation needed - write out the original value
                 out.append(value, start, end);
                 return;
             }
             break;
         default:
             throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
         }
 
         if (!quote) {
-            // no encapsulation needed - write out the original value
+            // This second check for !quote handles cases where a previous quoteModePolicy
+            // might have set quote=false and then default branch was hit.
+            // However, with the switch-case structure, it's mostly a fallback or redundant.
             out.append(value, start, end);
             return;
         }
 
         // we hit something that needed encapsulation
         out.append(quoteChar);
 
-        // Pick up where we left off: pos should be positioned on the first character that caused
-        // the need for encapsulation.
+        // Reset pos to the original offset to scan the entire string for internal
+        // quote characters that need to be doubled. The 'pos' variable might have
+        // advanced during the initial quote determination logic.
+        pos = offset;
+
         while (pos < end) {
             final char c = value.charAt(pos);
             if (c == quoteChar) {
                 // write out the chunk up until this point
-
                 // add 1 to the length to write out the encapsulator also
                 out.append(value, start, pos + 1);
                 // put the next starting position on the encapsulator so we will
                 // write it out again with the next string (effectively doubling it)
                 start = pos;
             }
             pos++;
         }
 
         // write the last segment
         out.append(value, start, pos);
         out.append(quoteChar);
     }
\ No newline at end of file
