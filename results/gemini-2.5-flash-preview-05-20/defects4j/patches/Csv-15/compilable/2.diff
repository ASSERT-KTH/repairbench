diff --git a/tmp/aef6a445-6685-4222-ac93-53978883f930_buggy.java b/tmp/f1ce096d-48fa-42c4-8cb8-bdf35f57d9d1_fixed.java
index 66af1fd..06b5599 100644
--- a/tmp/aef6a445-6685-4222-ac93-53978883f930_buggy.java
+++ b/tmp/f1ce096d-48fa-42c4-8cb8-bdf35f57d9d1_fixed.java
@@ -1,107 +1,102 @@
     // the original object is needed so can check for Number
     private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
             final Appendable out, final boolean newRecord) throws IOException {
         boolean quote = false;
         int start = offset;
-        int pos = offset;
+        int pos = offset; // pos is initialized to offset
         final int end = offset + len;
 
         final char delimChar = getDelimiter();
         final char quoteChar = getQuoteCharacter().charValue();
 
         QuoteMode quoteModePolicy = getQuoteMode();
         if (quoteModePolicy == null) {
             quoteModePolicy = QuoteMode.MINIMAL;
         }
         switch (quoteModePolicy) {
         case ALL:
         case ALL_NON_NULL:
             quote = true;
             break;
         case NON_NUMERIC:
             quote = !(object instanceof Number);
             break;
         case NONE:
             // Use the existing escaping code
             printAndEscape(value, offset, len, out);
             return;
         case MINIMAL:
+            // According to QuoteMode.MINIMAL Javadoc:
+            // "Quotes fields which contain the quote character, the delimiter, or any of the line break characters."
+            // The previous implementation included overly broad or RFC-non-compliant checks (e.g., for
+            // non-ASCII characters, leading/trailing spaces, or comment markers when the format does not
+            // specify one or MINIMAL mode does not dictate it).
+            // This simplified logic adheres strictly to the Javadoc definition.
+
             if (len <= 0) {
                 // always quote an empty token that is the first
                 // on the line, as it may be the only thing on the
                 // line. If it were not quoted in that case,
                 // an empty line has no tokens.
                 if (newRecord) {
                     quote = true;
                 }
             } else {
-                char c = value.charAt(pos);
-
-                if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {
-                    quote = true;
-                } else if (c <= COMMENT) {
-                    // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
-                    quote = true;
-                } else {
+                // The loop iterates through the characters from 'offset' to 'end' to find if any character
+                // requires quoting as per MINIMAL mode definition.
+                // 'pos' is already initialized to 'offset' at the function start.
                 while (pos < end) {
-                        c = value.charAt(pos);
+                    final char c = value.charAt(pos);
                     if (c == LF || c == CR || c == quoteChar || c == delimChar) {
                         quote = true;
-                            break;
+                        break; // Found a character that requires quoting
                     }
                     pos++;
                 }
-
-                    if (!quote) {
-                        pos = end - 1;
-                        c = value.charAt(pos);
-                        // Some other chars at the end caused the parser to fail, so for now
-                        // encapsulate if we end in anything less than ' '
-                        if (c <= SP) {
-                            quote = true;
-                        }
-                    }
-                }
+                // At this point, if 'quote' is true, 'pos' points to the first character
+                // that triggered the quoting. If 'quote' is false, 'pos' will be equal to 'end'.
+                // This state of 'pos' is correctly handled by the subsequent loop for escaping.
             }
 
             if (!quote) {
                 // no encapsulation needed - write out the original value
                 out.append(value, start, end);
                 return;
             }
             break;
         default:
             throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
         }
 
+        // This block is effectively a safeguard; for MINIMAL and NONE, 'return' is called if !quote.
+        // For other modes (ALL, ALL_NON_NULL, NON_NUMERIC), 'quote' would typically be true to reach here.
         if (!quote) {
-            // no encapsulation needed - write out the original value
             out.append(value, start, end);
             return;
         }
 
         // we hit something that needed encapsulation
         out.append(quoteChar);
 
         // Pick up where we left off: pos should be positioned on the first character that caused
-        // the need for encapsulation.
+        // the need for encapsulation (for MINIMAL mode), or 'offset' for other modes that
+        // unconditionally set 'quote = true'. The 'pos' variable holds the correct starting
+        // position for the current segment to be processed.
         while (pos < end) {
             final char c = value.charAt(pos);
             if (c == quoteChar) {
                 // write out the chunk up until this point
 
                 // add 1 to the length to write out the encapsulator also
                 out.append(value, start, pos + 1);
                 // put the next starting position on the encapsulator so we will
                 // write it out again with the next string (effectively doubling it)
                 start = pos;
             }
             pos++;
         }
 
         // write the last segment
         out.append(value, start, pos);
         out.append(quoteChar);
     }
\ No newline at end of file
