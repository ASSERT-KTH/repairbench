diff --git a/tmp/d2b4acb4-753d-4ba6-b435-497df9ef3013_buggy.java b/tmp/65bea953-ac6c-4f67-8778-82cac8a7fbfc_fixed.java
index 85e6a42..0096cb2 100644
--- a/tmp/d2b4acb4-753d-4ba6-b435-497df9ef3013_buggy.java
+++ b/tmp/65bea953-ac6c-4f67-8778-82cac8a7fbfc_fixed.java
@@ -1,50 +1,73 @@
     /**
      * Walks through all recorded entries and adds the data available
      * from the local file header.
      *
      * <p>Also records the offsets for the data to read from the
      * entries.</p>
      */
     private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                             entriesWithoutUTF8Flag)
         throws IOException {
         // changing the name of a ZipArchiveEntry is going to change
         // the hashcode - see COMPRESS-164
         // Map needs to be reconstructed in order to keep central
         // directory order
-        for (ZipArchiveEntry ze : entries.keySet()) {
+
+        // Create a new map to store entries in the correct (central directory) order
+        // and ensure internal hash table consistency after entry mutations.
+        // Using LinkedHashMap to preserve insertion order.
+        Map<ZipArchiveEntry, OffsetEntry> newEntries = new LinkedHashMap<>(entries.size());
+
+        // Iterate over a copy of the key set. This is crucial because ZipArchiveEntry
+        // objects (which are keys) might be modified in place, changing their hashCode.
+        // Iterating over a copy prevents ConcurrentModificationException or unexpected
+        // behavior if the map were modified during iteration, and allows for clean reconstruction.
+        for (ZipArchiveEntry ze : new java.util.ArrayList<>(entries.keySet())) {
+            // Get the OffsetEntry using the current 'ze' object. This works
+            // because 'ze' is the exact same object reference that was used as a key.
             OffsetEntry offsetEntry = entries.get(ze);
+
             long offset = offsetEntry.headerOffset;
             archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
             byte[] b = new byte[SHORT];
             archive.readFully(b);
             int fileNameLen = ZipShort.getValue(b);
             archive.readFully(b);
             int extraFieldLen = ZipShort.getValue(b);
             int lenToSkip = fileNameLen;
             while (lenToSkip > 0) {
                 int skipped = archive.skipBytes(lenToSkip);
                 if (skipped <= 0) {
                     throw new RuntimeException("failed to skip file name in"
                                                + " local file header");
                 }
                 lenToSkip -= skipped;
             }
             byte[] localExtraData = new byte[extraFieldLen];
             archive.readFully(localExtraData);
-            ze.setExtra(localExtraData);
+            ze.setExtra(localExtraData); // This modifies the 'ze' object in place.
+
             offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
                 + SHORT + SHORT + fileNameLen + extraFieldLen;
 
             if (entriesWithoutUTF8Flag.containsKey(ze)) {
                 String orig = ze.getName();
                 NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
                 ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
-                                                         nc.comment);
+                                                         nc.comment); // 'ze' name might change here.
                 if (!orig.equals(ze.getName())) {
+                    // If the name changed, the entry in nameMap needs to be updated.
+                    // This is crucial for ZipFile.getEntry(name) to work correctly later.
                     nameMap.remove(orig);
                     nameMap.put(ze.getName(), ze);
                 }
             }
+            // Add the (potentially modified) ZipArchiveEntry and its OffsetEntry
+            // to the new map. When 'ze' is added here, its current hashCode (based on its
+            // potentially new name) will be used, ensuring correct hash table placement.
+            newEntries.put(ze, offsetEntry);
         }
+        // Replace the old map with the new one, ensuring internal consistency
+        // for subsequent lookups and iterations.
+        this.entries = newEntries;
     }
\ No newline at end of file
