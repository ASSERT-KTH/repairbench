diff --git a/tmp/f3854f88-32a0-4930-84be-efa31eff7e87_buggy.java b/tmp/d72ffb5e-3c30-4f76-aaa5-a01cb07d4f41_fixed.java
index 85e6a42..71b129d 100644
--- a/tmp/f3854f88-32a0-4930-84be-efa31eff7e87_buggy.java
+++ b/tmp/d72ffb5e-3c30-4f76-aaa5-a01cb07d4f41_fixed.java
@@ -1,50 +1,68 @@
     /**
      * Walks through all recorded entries and adds the data available
      * from the local file header.
      *
      * <p>Also records the offsets for the data to read from the
      * entries.</p>
      */
     private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                             entriesWithoutUTF8Flag)
         throws IOException {
         // changing the name of a ZipArchiveEntry is going to change
         // the hashcode - see COMPRESS-164
         // Map needs to be reconstructed in order to keep central
-        // directory order
+        // directory order.
+
+        // Create a new map to store the entries with potentially updated ZipArchiveEntry keys.
+        // This will preserve the order as we iterate the original map's keys.
+        java.util.LinkedHashMap<ZipArchiveEntry, OffsetEntry> newEntries =
+            new java.util.LinkedHashMap<>(entries.size());
+
         for (ZipArchiveEntry ze : entries.keySet()) {
-            OffsetEntry offsetEntry = entries.get(ze);
+            OffsetEntry offsetEntry = entries.get(ze); // Get the associated OffsetEntry
             long offset = offsetEntry.headerOffset;
             archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
             byte[] b = new byte[SHORT];
             archive.readFully(b);
             int fileNameLen = ZipShort.getValue(b);
             archive.readFully(b);
             int extraFieldLen = ZipShort.getValue(b);
             int lenToSkip = fileNameLen;
             while (lenToSkip > 0) {
                 int skipped = archive.skipBytes(lenToSkip);
                 if (skipped <= 0) {
                     throw new RuntimeException("failed to skip file name in"
                                                + " local file header");
                 }
                 lenToSkip -= skipped;
             }
             byte[] localExtraData = new byte[extraFieldLen];
             archive.readFully(localExtraData);
             ze.setExtra(localExtraData);
             offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
                 + SHORT + SHORT + fileNameLen + extraFieldLen;
 
             if (entriesWithoutUTF8Flag.containsKey(ze)) {
                 String orig = ze.getName();
                 NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
                 ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
                                                          nc.comment);
                 if (!orig.equals(ze.getName())) {
+                    // Update nameMap if the name changed due to UTF-8 extra field
                     nameMap.remove(orig);
                     nameMap.put(ze.getName(), ze);
                 }
             }
+            // Add the (potentially modified) ZipArchiveEntry object as the key
+            // to the new map, ensuring its hashcode is correct for future lookups.
+            newEntries.put(ze, offsetEntry);
         }
+
+        // Reconstruct the original 'entries' map in place by clearing and re-adding.
+        // This is necessary because the keys (ZipArchiveEntry objects) might have
+        // changed their hashcodes, making them unfindable in the original map.
+        // Since 'entries' is a LinkedHashMap, clearing and re-adding from 'newEntries'
+        // (which was built in order) preserves the central directory order.
+        entries.clear();
+        entries.putAll(newEntries);
     }
\ No newline at end of file
