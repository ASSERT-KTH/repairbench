diff --git a/tmp/024652d7-90ba-479b-906e-1e416de4433f_buggy.java b/tmp/d59e161d-fbce-4b44-a022-d7bedb619c63_fixed.java
index 85e6a42..acc3c93 100644
--- a/tmp/024652d7-90ba-479b-906e-1e416de4433f_buggy.java
+++ b/tmp/d59e161d-fbce-4b44-a022-d7bedb619c63_fixed.java
@@ -1,50 +1,77 @@
     /**
      * Walks through all recorded entries and adds the data available
      * from the local file header.
      *
      * <p>Also records the offsets for the data to read from the
      * entries.</p>
      */
     private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                             entriesWithoutUTF8Flag)
         throws IOException {
         // changing the name of a ZipArchiveEntry is going to change
         // the hashcode - see COMPRESS-164
         // Map needs to be reconstructed in order to keep central
         // directory order
-        for (ZipArchiveEntry ze : entries.keySet()) {
-            OffsetEntry offsetEntry = entries.get(ze);
+
+        // Create new maps to rebuild them with potentially updated ZipArchiveEntry
+        // instances (whose names/hashcodes might have changed).
+        // This ensures map consistency, as modifying a key's hashCode while it's
+        // in the map can lead to lost entries.
+        Map<ZipArchiveEntry, OffsetEntry> newEntries = new LinkedHashMap<>(entries.size());
+        Map<String, ZipArchiveEntry> newNameMap = new LinkedHashMap<>(nameMap.size());
+
+        // Iterate over the original entries map's entry set to preserve order
+        // and safely access keys/values without concurrent modification issues.
+        for (Map.Entry<ZipArchiveEntry, OffsetEntry> entryPair : entries.entrySet()) {
+            ZipArchiveEntry ze = entryPair.getKey(); // The ZipArchiveEntry instance
+            OffsetEntry offsetEntry = entryPair.getValue(); // The associated OffsetEntry
+
             long offset = offsetEntry.headerOffset;
             archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
             byte[] b = new byte[SHORT];
             archive.readFully(b);
             int fileNameLen = ZipShort.getValue(b);
             archive.readFully(b);
             int extraFieldLen = ZipShort.getValue(b);
             int lenToSkip = fileNameLen;
             while (lenToSkip > 0) {
                 int skipped = archive.skipBytes(lenToSkip);
                 if (skipped <= 0) {
                     throw new RuntimeException("failed to skip file name in"
                                                + " local file header");
                 }
                 lenToSkip -= skipped;
             }
             byte[] localExtraData = new byte[extraFieldLen];
             archive.readFully(localExtraData);
+
+            // Set extra fields from the local file header. This modifies 'ze'.
             ze.setExtra(localExtraData);
+
+            // Calculate the data offset for the entry.
             offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
                 + SHORT + SHORT + fileNameLen + extraFieldLen;
 
+            // Store the original name before potential modification
+            String origName = ze.getName();
+
+            // If the entry's UTF8 flag wasn't set in local file header,
+            // try to resolve name/comment from extra fields (e.g., Unicode extra field).
+            // The 'ze' here is the same instance as in entriesWithoutUTF8Flag,
+            // so containsKey/get is safe at this point.
             if (entriesWithoutUTF8Flag.containsKey(ze)) {
-                String orig = ze.getName();
                 NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
-                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
-                                                         nc.comment);
-                if (!orig.equals(ze.getName())) {
-                    nameMap.remove(orig);
-                    nameMap.put(ze.getName(), ze);
-                }
-            }
-        }
+                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);
+            }
+
+            // After potential name modification, put the (possibly modified) 'ze'
+            // into the new maps. This ensures hash codes are correctly calculated
+            // based on the final name.
+            newEntries.put(ze, offsetEntry);
+            newNameMap.put(ze.getName(), ze);
+        }
+
+        // Replace the old maps with the new, rebuilt ones.
+        this.entries = newEntries;
+        this.nameMap = newNameMap;
     }
\ No newline at end of file
