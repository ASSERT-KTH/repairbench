diff --git a/tmp/678e94be-273a-477c-9d62-88bd27e724d6_buggy.java b/tmp/11b8352b-6ba5-42ce-9dfa-621132eca4b3_fixed.java
index 85e6a42..7864b58 100644
--- a/tmp/678e94be-273a-477c-9d62-88bd27e724d6_buggy.java
+++ b/tmp/11b8352b-6ba5-42ce-9dfa-621132eca4b3_fixed.java
@@ -1,50 +1,77 @@
     /**
      * Walks through all recorded entries and adds the data available
      * from the local file header.
      *
      * <p>Also records the offsets for the data to read from the
      * entries.</p>
      */
     private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                             entriesWithoutUTF8Flag)
         throws IOException {
         // changing the name of a ZipArchiveEntry is going to change
-        // the hashcode - see COMPRESS-164
-        // Map needs to be reconstructed in order to keep central
-        // directory order
-        for (ZipArchiveEntry ze : entries.keySet()) {
-            OffsetEntry offsetEntry = entries.get(ze);
+        // the hashcode - see COMPRESS-164.
+        // The maps (entries and nameMap) must be reconstructed to maintain
+        // consistency and central directory order if ZipArchiveEntry keys are modified.
+
+        // Use temporary lists to store the processed entries and their offsets
+        // in order before rebuilding the main maps.
+        List<ZipArchiveEntry> updatedEntriesList = new ArrayList<>(entries.size());
+        List<OffsetEntry> updatedOffsetEntriesList = new ArrayList<>(entries.size());
+
+        // Iterate over the current entries to process them.
+        // We use entrySet() to get both the key (ZipArchiveEntry) and value (OffsetEntry).
+        for (Map.Entry<ZipArchiveEntry, OffsetEntry> entryPair : entries.entrySet()) {
+            ZipArchiveEntry ze = entryPair.getKey();
+            OffsetEntry offsetEntry = entryPair.getValue();
+
             long offset = offsetEntry.headerOffset;
             archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
             byte[] b = new byte[SHORT];
             archive.readFully(b);
             int fileNameLen = ZipShort.getValue(b);
             archive.readFully(b);
             int extraFieldLen = ZipShort.getValue(b);
+
             int lenToSkip = fileNameLen;
             while (lenToSkip > 0) {
                 int skipped = archive.skipBytes(lenToSkip);
                 if (skipped <= 0) {
                     throw new RuntimeException("failed to skip file name in"
                                                + " local file header");
                 }
                 lenToSkip -= skipped;
             }
             byte[] localExtraData = new byte[extraFieldLen];
             archive.readFully(localExtraData);
-            ze.setExtra(localExtraData);
+            ze.setExtra(localExtraData); // Modifies the existing ZipArchiveEntry object
+
             offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
                 + SHORT + SHORT + fileNameLen + extraFieldLen;
 
+            // This block may modify ze.getName(), which changes its hashcode/equals.
             if (entriesWithoutUTF8Flag.containsKey(ze)) {
-                String orig = ze.getName();
                 NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
                 ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
                                                          nc.comment);
-                if (!orig.equals(ze.getName())) {
-                    nameMap.remove(orig);
+                // No need to update nameMap or remove/put from 'entries' here,
+                // as they will be rebuilt after this loop.
+            }
+
+            // Add the (potentially modified) entry and its offset to the temporary lists.
+            updatedEntriesList.add(ze);
+            updatedOffsetEntriesList.add(offsetEntry);
+        }
+
+        // Reconstruct the 'entries' (LinkedHashMap) and 'nameMap' (HashMap)
+        // using the modified ZipArchiveEntry objects. This ensures consistency
+        // with the potentially changed names and preserves the central directory order.
+        entries = new LinkedHashMap<>(updatedEntriesList.size());
+        nameMap = new HashMap<>(updatedEntriesList.size());
+
+        for (int i = 0; i < updatedEntriesList.size(); i++) {
+            ZipArchiveEntry ze = updatedEntriesList.get(i);
+            OffsetEntry offsetEntry = updatedOffsetEntriesList.get(i);
+            entries.put(ze, offsetEntry);
             nameMap.put(ze.getName(), ze);
         }
     }
\ No newline at end of file
-        }
-    }
