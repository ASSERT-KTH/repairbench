diff --git a/tmp/bb4826e2-06df-49d1-8e80-8eac15cec6d3_buggy.java b/tmp/77e504e0-fd66-4fee-a0e6-a4509ec31c9c_fixed.java
index 85e6a42..42b891f 100644
--- a/tmp/bb4826e2-06df-49d1-8e80-8eac15cec6d3_buggy.java
+++ b/tmp/77e504e0-fd66-4fee-a0e6-a4509ec31c9c_fixed.java
@@ -1,50 +1,81 @@
     /**
      * Walks through all recorded entries and adds the data available
      * from the local file header.
      *
      * <p>Also records the offsets for the data to read from the
      * entries.</p>
      */
     private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                             entriesWithoutUTF8Flag)
         throws IOException {
         // changing the name of a ZipArchiveEntry is going to change
         // the hashcode - see COMPRESS-164
         // Map needs to be reconstructed in order to keep central
-        // directory order
-        for (ZipArchiveEntry ze : entries.keySet()) {
-            OffsetEntry offsetEntry = entries.get(ze);
+        // directory order.
+
+        // Create a new map to store entries. We iterate over the original 'entries'
+        // and populate this new map. This is crucial because ZipArchiveEntry objects
+        // (which are keys in 'entries') might have their names (and thus hash codes)
+        // changed during this process. Rebuilding the map ensures that the entries
+        // are correctly hashed and discoverable by their new names.
+        // Using LinkedHashMap preserves the central directory order.
+        Map<ZipArchiveEntry, OffsetEntry> newEntries =
+            new java.util.LinkedHashMap<ZipArchiveEntry, OffsetEntry>(entries.size());
+
+        // Iterate over the entry set of the original map to safely access both key and value
+        // and avoid ConcurrentModificationException when rebuilding the map.
+        for (Map.Entry<ZipArchiveEntry, OffsetEntry> entry : entries.entrySet()) {
+            ZipArchiveEntry ze = entry.getKey();
+            OffsetEntry offsetEntry = entry.getValue();
+
             long offset = offsetEntry.headerOffset;
             archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
             byte[] b = new byte[SHORT];
             archive.readFully(b);
             int fileNameLen = ZipShort.getValue(b);
             archive.readFully(b);
             int extraFieldLen = ZipShort.getValue(b);
             int lenToSkip = fileNameLen;
             while (lenToSkip > 0) {
                 int skipped = archive.skipBytes(lenToSkip);
                 if (skipped <= 0) {
                     throw new RuntimeException("failed to skip file name in"
                                                + " local file header");
                 }
                 lenToSkip -= skipped;
             }
             byte[] localExtraData = new byte[extraFieldLen];
             archive.readFully(localExtraData);
             ze.setExtra(localExtraData);
             offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
                 + SHORT + SHORT + fileNameLen + extraFieldLen;
 
+            // Store the original name before potential modification by setNameAndCommentFromExtraFields
+            String originalName = ze.getName();
+
             if (entriesWithoutUTF8Flag.containsKey(ze)) {
-                String orig = ze.getName();
+                // If this entry needs UTF8 processing, apply name/comment from extra fields.
+                // This call can change ze.getName(), which changes its hash code.
                 NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
                 ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
                                                          nc.comment);
-                if (!orig.equals(ze.getName())) {
-                    nameMap.remove(orig);
+            }
+
+            // If the ZipArchiveEntry's name has changed, update the nameMap accordingly.
+            // nameMap uses String keys, so it needs explicit removal/addition.
+            if (!originalName.equals(ze.getName())) {
+                nameMap.remove(originalName);
                 nameMap.put(ze.getName(), ze);
             }
+
+            // Add the (potentially modified) ZipArchiveEntry and its OffsetEntry to the new map.
+            // Even if the name changed, 'ze' is the same object reference, but its hashcode
+            // is now based on the new name. Putting it into 'newEntries' ensures it's correctly
+            // hashed and discoverable by its updated name/hashcode in the new map.
+            newEntries.put(ze, offsetEntry);
         }
-        }
+
+        // After processing all entries, replace the old 'entries' map with the newly built one.
+        // This 'this.entries' map is used by methods like getInputStream() to find the entry data.
+        this.entries = newEntries;
     }
\ No newline at end of file
