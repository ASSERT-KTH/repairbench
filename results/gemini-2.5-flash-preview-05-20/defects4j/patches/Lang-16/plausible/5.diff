diff --git a/tmp/b7231f3f-ea3c-4a52-89fb-67e6df821af0_buggy.java b/tmp/1cbb95e8-2df8-43c6-a13b-06c173ca801b_fixed.java
index d95d5a8..fa40038 100644
--- a/tmp/b7231f3f-ea3c-4a52-89fb-67e6df821af0_buggy.java
+++ b/tmp/1cbb95e8-2df8-43c6-a13b-06c173ca801b_fixed.java
@@ -1,177 +1,183 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         if (str.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear
             // to be in specification of class. OS X Java parses it to
             // a wrong value.
             return null;
         }
-        if (str.startsWith("0x") || str.startsWith("-0x")) {
+        // Fix: Check for both lowercase and uppercase 'x' in hexadecimal prefixes.
+        if (str.startsWith("0x") || str.startsWith("-0x") || str.startsWith("0X") || str.startsWith("-0X")) {
             return createInteger(str);
         }
         char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+        int expPos = str.indexOf('e') + str.indexOf('E') + 1; // This sum means if both 'e' and 'E' are not found, it's -1 + -1 + 1 = -1. Correct behavior for absence.
 
         if (decPos > -1) {
 
             if (expPos > -1) {
                 if (expPos < decPos || expPos > str.length()) {
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
             } else {
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
         } else {
             if (expPos > -1) {
                 if (expPos > str.length()) {
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 mant = str.substring(0, expPos);
             } else {
                 mant = str;
             }
             dec = null;
         }
+        // Handle numbers with type specifiers (f, F, d, D, l, L)
         if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
+            if (expPos > -1 && expPos < str.length() - 1) { // expPos must be before the last char (type qualifier)
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
                 exp = null;
             }
             //Requesting a specific type..
             String numeric = str.substring(0, str.length() - 1);
+            // This is a helper method (not provided) that checks if a string consists only of '0' characters.
+            // Assuming `isAllZeros` and `isDigits` are available and correct.
             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
                     if (dec == null
                         && exp == null
                         && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                         try {
                             return createLong(numeric);
                         } catch (NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
+                            // Too big for a long, try BigInteger
                         }
                         return createBigInteger(numeric);
 
                     }
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
                         Float f = NumberUtils.createFloat(numeric);
+                        // Check if float can represent the number accurately enough
+                        // If it's too big (infinite) or float value is 0.0F but the original string wasn't all zeros,
+                        // then float lacks precision.
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
 
                     } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                        // ignore the bad number, try next type (Double/BigDecimal)
                     }
-                    //$FALL-THROUGH$
+                    //$FALL-THROUGH$ to 'd' or 'D'
                 case 'd' :
                 case 'D' :
                     try {
                         Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        // Check if double can represent the number accurately enough
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                             return d;
                         }
                     } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                        // ignore the bad number, try next type (BigDecimal)
                     }
                     try {
                         return createBigDecimal(numeric);
                     } catch (NumberFormatException e) { // NOPMD
                         // ignore the bad number
                     }
                     //$FALL-THROUGH$
                 default :
                     throw new NumberFormatException(str + " is not a valid number.");
 
             }
         } else {
             //User doesn't have a preference on the return type, so let's start
             //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
+            if (expPos > -1 && expPos < str.length() - 1) { // check if exp is present and not the last char
                 exp = str.substring(expPos + 1, str.length());
             } else {
                 exp = null;
             }
             if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+                //Must be an int, long, BigInteger
                 try {
                     return createInteger(str);
                 } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+                    // ignore the bad number, try Long
                 }
                 try {
                     return createLong(str);
                 } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+                    // ignore the bad number, try BigInteger
                 }
                 return createBigInteger(str);
 
             } else {
-                //Must be a float,double,BigDec
+                //Must be a float, double, BigDecimal
                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
                 try {
                     Float f = createFloat(str);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
                 } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+                    // ignore the bad number, try Double
                 }
                 try {
                     Double d = createDouble(str);
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+                    // ignore the bad number, try BigDecimal
                 }
 
                 return createBigDecimal(str);
 
             }
         }
     }
\ No newline at end of file
