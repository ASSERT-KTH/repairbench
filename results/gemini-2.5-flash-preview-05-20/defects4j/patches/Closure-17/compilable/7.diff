diff --git a/tmp/98abb57a-eaeb-4a58-8690-412f991cd19c_buggy.java b/tmp/443b56f5-ef71-4cf8-875a-da63a4faa1b0_fixed.java
index eb9ce9f..dc9e4ac 100644
--- a/tmp/98abb57a-eaeb-4a58-8690-412f991cd19c_buggy.java
+++ b/tmp/443b56f5-ef71-4cf8-875a-da63a4faa1b0_fixed.java
@@ -1,60 +1,74 @@
     /**
      * Look for a type declaration on a property assignment
      * (in an ASSIGN or an object literal key).
      *
      * @param info The doc info for this property.
      * @param lValue The l-value node.
      * @param rValue The node that {@code n} is being initialized to,
      *     or {@code null} if this is a stub declaration.
      */
     private JSType getDeclaredType(String sourceName, JSDocInfo info,
         Node lValue, @Nullable Node rValue) {
-      if (info != null && info.hasType()) {
+      if (info != null) {
+        // High priority: explicit @type annotation
+        if (info.hasType()) {
           return getDeclaredTypeInAnnotation(sourceName, lValue, info);
-      } else if (rValue != null && rValue.isFunction() &&
-          shouldUseFunctionLiteralType(
-              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
-        return rValue.getJSType();
-      } else if (info != null) {
-        if (info.hasEnumParameterType()) {
+        }
+        // Next priority: JSDoc for function types (@constructor, @interface, @return)
+        // These should always take precedence over inferred function literal types.
+        else if (info.isConstructor() || info.isInterface() || info.hasReturnType()) {
+          return createFunctionTypeFromNodes(
+              rValue, lValue.getQualifiedName(), info, lValue);
+        }
+        // Next priority: @enum
+        else if (info.hasEnumParameterType()) {
           if (rValue != null && rValue.isObjectLit()) {
             return rValue.getJSType();
           } else {
             return createEnumTypeFromNodes(
                 rValue, lValue.getQualifiedName(), info, lValue);
           }
-        } else if (info.isConstructor() || info.isInterface()) {
-          return createFunctionTypeFromNodes(
-              rValue, lValue.getQualifiedName(), info, lValue);
-        } else {
+        }
+        // Next priority: @const
+        else if (info.isConstant()) {
           // Check if this is constant, and if it has a known type.
-          if (info.isConstant()) {
           JSType knownType = null;
           if (rValue != null) {
             if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
               // If rValue has a type-cast, we use the type in the type-cast.
               // If rValue's type was already computed during scope creation,
               // then we can safely use that.
               return rValue.getJSType();
             } else if (rValue.isOr()) {
               // Check for a very specific JS idiom:
               // var x = x || TYPE;
               // This is used by Closure's base namespace for esoteric
               // reasons.
               Node firstClause = rValue.getFirstChild();
               Node secondClause = firstClause.getNext();
               boolean namesMatch = firstClause.isName()
                   && lValue.isName()
                   && firstClause.getString().equals(lValue.getString());
               if (namesMatch && secondClause.getJSType() != null
                   && !secondClause.getJSType().isUnknownType()) {
                 return secondClause.getJSType();
               }
             }
           }
         }
       }
+
+      // Lower priority: If no specific JSDoc type was found, but rValue is a function literal
+      // and shouldUseFunctionLiteralType allows, use its inferred type.
+      // This handles cases like `var x = function() {};` with no specific JSDoc.
+      if (rValue != null && rValue.isFunction() &&
+          shouldUseFunctionLiteralType(
+              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
+        return rValue.getJSType();
       }
 
+      // Fallback: Try to get type from annotation (e.g. if info is null or no other match)
+      // This is generally the last resort for type inference if all else fails,
+      // or if the info object was derived from a context that implies an annotation.
       return getDeclaredTypeInAnnotation(sourceName, lValue, info);
     }
\ No newline at end of file
