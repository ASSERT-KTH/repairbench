diff --git a/tmp/af896a8d-7af2-427e-ad1b-db12f9a9f860_buggy.java b/tmp/f35766e1-51ce-41c1-ab84-7f717b81d8da_fixed.java
index eb9ce9f..0185522 100644
--- a/tmp/af896a8d-7af2-427e-ad1b-db12f9a9f860_buggy.java
+++ b/tmp/f35766e1-51ce-41c1-ab84-7f717b81d8da_fixed.java
@@ -1,60 +1,92 @@
     /**
      * Look for a type declaration on a property assignment
      * (in an ASSIGN or an object literal key).
      *
      * @param info The doc info for this property.
      * @param lValue The l-value node.
      * @param rValue The node that {@code n} is being initialized to,
      *     or {@code null} if this is a stub declaration.
      */
     private JSType getDeclaredType(String sourceName, JSDocInfo info,
         Node lValue, @Nullable Node rValue) {
+      // Handle explicitly declared types (e.g., via @type annotation).
       if (info != null && info.hasType()) {
-        return getDeclaredTypeInAnnotation(sourceName, lValue, info);
+        JSType declaredType = getDeclaredTypeInAnnotation(sourceName, lValue, info);
+
+        // If the declared type is not UNKNOWN, use it.
+        // This handles cases where the type is fully resolved immediately.
+        if (declaredType != null && !declaredType.isUnknownType()) {
+          return declaredType;
+        }
+
+        // If the declared type is UNKNOWN (e.g., due to a forward reference where
+        // the type is defined later), and this is a constant with a known
+        // initializer type, use the initializer type as a temporary placeholder.
+        // This prevents UNKNOWN from propagating and silencing type errors,
+        // allowing more accurate type checking during the first pass.
+        // The type system will later try to resolve the UNKNOWN type if needed.
+        if (info.isConstant() && rValue != null &&
+            rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
+          return rValue.getJSType();
+        }
+
+        // Otherwise, return the declaredType, which might be null or UNKNOWN.
+        // This means the explicit declaration either wasn't useful or couldn't be resolved,
+        // and no suitable fallback was found for constants.
+        return declaredType;
       } else if (rValue != null && rValue.isFunction() &&
           shouldUseFunctionLiteralType(
               JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
+        // Handle function literal types if applicable.
         return rValue.getJSType();
       } else if (info != null) {
+        // Handle other JSDoc info types (enums, constructors, interfaces, and constants without explicit @type).
         if (info.hasEnumParameterType()) {
           if (rValue != null && rValue.isObjectLit()) {
             return rValue.getJSType();
           } else {
             return createEnumTypeFromNodes(
                 rValue, lValue.getQualifiedName(), info, lValue);
           }
         } else if (info.isConstructor() || info.isInterface()) {
           return createFunctionTypeFromNodes(
               rValue, lValue.getQualifiedName(), info, lValue);
         } else {
           // Check if this is constant, and if it has a known type.
+          // This block is for constants *without* an explicit @type annotation.
+          // The logic for constants *with* an explicit @type annotation and
+          // an UNKNOWN declaredType was moved to a higher precedence block above.
           if (info.isConstant()) {
-            JSType knownType = null;
+            // JSType knownType = null; // This variable is unused.
             if (rValue != null) {
               if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
                 // If rValue has a type-cast, we use the type in the type-cast.
                 // If rValue's type was already computed during scope creation,
                 // then we can safely use that.
                 return rValue.getJSType();
               } else if (rValue.isOr()) {
                 // Check for a very specific JS idiom:
                 // var x = x || TYPE;
                 // This is used by Closure's base namespace for esoteric
                 // reasons.
                 Node firstClause = rValue.getFirstChild();
                 Node secondClause = firstClause.getNext();
                 boolean namesMatch = firstClause.isName()
                     && lValue.isName()
                     && firstClause.getString().equals(lValue.getString());
                 if (namesMatch && secondClause.getJSType() != null
                     && !secondClause.getJSType().isUnknownType()) {
                   return secondClause.getJSType();
                 }
               }
             }
           }
         }
       }
 
+      // Final fallback: if no type could be determined from the above conditions,
+      // try to derive a type from the annotation (which might be null or UNKNOWN).
+      // This is often for variables without an initializer or a specific JSDoc type,
+      // or if 'info' was null.
       return getDeclaredTypeInAnnotation(sourceName, lValue, info);
     }
\ No newline at end of file
