diff --git a/tmp/6e110eb4-6e50-4ceb-b1c2-095e8ecc3cb0_buggy.java b/tmp/04dada4b-982a-4de4-a077-622e5c080b24_fixed.java
index eb9ce9f..6c3551a 100644
--- a/tmp/6e110eb4-6e50-4ceb-b1c2-095e8ecc3cb0_buggy.java
+++ b/tmp/04dada4b-982a-4de4-a077-622e5c080b24_fixed.java
@@ -1,60 +1,82 @@
     /**
      * Look for a type declaration on a property assignment
      * (in an ASSIGN or an object literal key).
      *
      * @param info The doc info for this property.
      * @param lValue The l-value node.
      * @param rValue The node that {@code n} is being initialized to,
      *     or {@code null} if this is a stub declaration.
      */
     private JSType getDeclaredType(String sourceName, JSDocInfo info,
         Node lValue, @Nullable Node rValue) {
+      // Stores the result of getDeclaredTypeInAnnotation if called.
+      JSType declaredTypeFromAnnotation = null;
+
+      // 1. Try to get the type from an explicit JSDoc @type annotation.
       if (info != null && info.hasType()) {
-        return getDeclaredTypeInAnnotation(sourceName, lValue, info);
-      } else if (rValue != null && rValue.isFunction() &&
+        declaredTypeFromAnnotation = getDeclaredTypeInAnnotation(sourceName, lValue, info);
+        // If the annotation provided a specific, known type, use it directly.
+        if (declaredTypeFromAnnotation != null && !declaredTypeFromAnnotation.isUnknownType()) {
+          return declaredTypeFromAnnotation;
+        }
+        // If declaredTypeFromAnnotation is null or UnknownType, we continue
+        // to other checks, potentially inferring from the rValue if it's a constant.
+      }
+
+      // 2. Handle function literals as rValue, with optional JSDoc info.
+      // This check is placed after the explicit @type annotation,
+      // consistent with a common interpretation of precedence.
+      if (rValue != null && rValue.isFunction() &&
           shouldUseFunctionLiteralType(
               JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
         return rValue.getJSType();
-      } else if (info != null) {
+      }
+
+      // 3. Handle other JSDoc-specific types (Enum, Constructor, Interface)
+      // and constant inference as a fallback if no explicit @type yielded a known type.
+      if (info != null) {
         if (info.hasEnumParameterType()) {
           if (rValue != null && rValue.isObjectLit()) {
             return rValue.getJSType();
           } else {
             return createEnumTypeFromNodes(
                 rValue, lValue.getQualifiedName(), info, lValue);
           }
         } else if (info.isConstructor() || info.isInterface()) {
           return createFunctionTypeFromNodes(
               rValue, lValue.getQualifiedName(), info, lValue);
-        } else {
-          // Check if this is constant, and if it has a known type.
-          if (info.isConstant()) {
-            JSType knownType = null;
+        } else if (info.isConstant()) {
+          // This branch handles constants without an explicit @type,
+          // or where the explicit @type annotation was processed but
+          // resulted in an UnknownType (as handled above). This is a fallback
+          // to infer from the rValue's computed type.
           if (rValue != null) {
+            // The 'knownType' variable was unused, removed.
             if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
-                // If rValue has a type-cast, we use the type in the type-cast.
-                // If rValue's type was already computed during scope creation,
-                // then we can safely use that.
               return rValue.getJSType();
             } else if (rValue.isOr()) {
-                // Check for a very specific JS idiom:
-                // var x = x || TYPE;
-                // This is used by Closure's base namespace for esoteric
-                // reasons.
+              // Check for a very specific JS idiom: var x = x || TYPE;
               Node firstClause = rValue.getFirstChild();
               Node secondClause = firstClause.getNext();
               boolean namesMatch = firstClause.isName()
                   && lValue.isName()
                   && firstClause.getString().equals(lValue.getString());
               if (namesMatch && secondClause.getJSType() != null
                   && !secondClause.getJSType().isUnknownType()) {
                 return secondClause.getJSType();
               }
             }
           }
         }
       }
-      }
 
+      // 4. Final fallback.
+      // If `declaredTypeFromAnnotation` was computed (meaning info.hasType() was true)
+      // but it was UnknownType, we return that UnknownType.
+      // Otherwise, call getDeclaredTypeInAnnotation again (e.g., if info was null,
+      // or no specific JSDoc type was handled and no rValue inference occurred).
+      if (declaredTypeFromAnnotation != null) {
+        return declaredTypeFromAnnotation;
+      }
       return getDeclaredTypeInAnnotation(sourceName, lValue, info);
     }
\ No newline at end of file
