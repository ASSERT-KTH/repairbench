diff --git a/tmp/8a3500e4-4e2e-4f42-b08b-dceab76c003e_buggy.java b/tmp/fcec401f-1138-48b4-9f91-b88b589d0ed3_fixed.java
index eb9ce9f..f24d0ed 100644
--- a/tmp/8a3500e4-4e2e-4f42-b08b-dceab76c003e_buggy.java
+++ b/tmp/fcec401f-1138-48b4-9f91-b88b589d0ed3_fixed.java
@@ -1,60 +1,68 @@
     /**
      * Look for a type declaration on a property assignment
      * (in an ASSIGN or an object literal key).
      *
      * @param info The doc info for this property.
      * @param lValue The l-value node.
      * @param rValue The node that {@code n} is being initialized to,
      *     or {@code null} if this is a stub declaration.
      */
     private JSType getDeclaredType(String sourceName, JSDocInfo info,
         Node lValue, @Nullable Node rValue) {
       if (info != null && info.hasType()) {
         return getDeclaredTypeInAnnotation(sourceName, lValue, info);
       } else if (rValue != null && rValue.isFunction() &&
           shouldUseFunctionLiteralType(
               JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
         return rValue.getJSType();
       } else if (info != null) {
         if (info.hasEnumParameterType()) {
           if (rValue != null && rValue.isObjectLit()) {
             return rValue.getJSType();
           } else {
             return createEnumTypeFromNodes(
                 rValue, lValue.getQualifiedName(), info, lValue);
           }
         } else if (info.isConstructor() || info.isInterface()) {
           return createFunctionTypeFromNodes(
               rValue, lValue.getQualifiedName(), info, lValue);
         } else {
           // Check if this is constant, and if it has a known type.
           if (info.isConstant()) {
-            JSType knownType = null;
+            // Fix for Issue 688: If the l-value is a constant and does not have
+            // its own @type annotation, check if the r-value has a @type annotation
+            // (e.g., `/** @const */ var X = /** @type {Y} */ ({...});`).
+            // The @type on the r-value should take precedence for constants.
+            JSDocInfo rValueInfo = rValue != null ? rValue.getJSDocInfo() : null;
+            if (rValueInfo != null && rValueInfo.hasType()) {
+                return getDeclaredTypeInAnnotation(sourceName, lValue, rValueInfo);
+            }
+
             if (rValue != null) {
               if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
-                // If rValue has a type-cast, we use the type in the type-cast.
+                // If rValue has a type-cast (e.g., `(/** @type {Foo} */ bar)`), we use the type in the type-cast.
                 // If rValue's type was already computed during scope creation,
                 // then we can safely use that.
                 return rValue.getJSType();
               } else if (rValue.isOr()) {
                 // Check for a very specific JS idiom:
                 // var x = x || TYPE;
                 // This is used by Closure's base namespace for esoteric
                 // reasons.
                 Node firstClause = rValue.getFirstChild();
                 Node secondClause = firstClause.getNext();
                 boolean namesMatch = firstClause.isName()
                     && lValue.isName()
                     && firstClause.getString().equals(lValue.getString());
                 if (namesMatch && secondClause.getJSType() != null
                     && !secondClause.getJSType().isUnknownType()) {
                   return secondClause.getJSType();
                 }
               }
             }
           }
         }
       }
 
       return getDeclaredTypeInAnnotation(sourceName, lValue, info);
     }
\ No newline at end of file
