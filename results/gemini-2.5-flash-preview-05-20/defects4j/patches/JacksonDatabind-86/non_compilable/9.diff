diff --git a/tmp/e7afae0a-152a-4aa9-9cf9-1bffac36642c_buggy.java b/tmp/b85b1a8c-cddf-43c0-8f86-6e4693e8d92d_fixed.java
index e69de29..11117bc 100644
--- a/tmp/e7afae0a-152a-4aa9-9cf9-1bffac36642c_buggy.java
+++ b/tmp/b85b1a8c-cddf-43c0-8f86-6e4693e8d92d_fixed.java
@@ -0,0 +1,151 @@
+package com.fasterxml.jackson.databind.type;
+
+import java.util.List;
+
+/**
+ * Type that is used to denote a recursive type reference; used to break
+ * cycles during type resolution.
+ *<p>
+ * NOTE: since 2.7, this class is NOT exposed via public API, and is
+ * only used internally.
+ */
+public class ResolvedRecursiveType extends ReferenceType
+{
+    private static final long serialVersionUID = 1L;
+
+    /**
+     * Actual type that this is resolved to.
+     */
+    protected JavaType _referencedType;
+
+    public ResolvedRecursiveType(Class<?> erased, TypeBindings bindings) {
+        // We do not pass 'referencedType' (anchor type) in constructor, but will set it
+        // using `setResolvedType()` once recursive resolution has completed.
+        // Therefore, null for superclass and superinterfaces as well, initially.
+        super(erased, bindings, null, null, null, null, false);
+    }
+
+    public void setResolvedType(JavaType refType) {
+        if (_referencedType != null) {
+            throw new IllegalStateException("Recursive type already resolved to "+_referencedType);
+        }
+        _referencedType = refType;
+    }
+
+    /*
+    /**********************************************************
+    /* Overrides for common JavaType methods
+    /**********************************************************
+     */
+
+    @Override
+    public JavaType getSuperClass() {
+        // [databind#1647]: Need to delegate to the *actual* resolved type, not
+        // the 'anchor type' of the superclass (ReferenceType) as that is initialized to null
+        // in this specific usage of ReferenceType constructor.
+        if (_referencedType != null) {
+            return _referencedType.getSuperClass();
+        }
+        // If not yet resolved, fall back to super implementation, which will return null
+        // because superclass was passed as null in constructor.
+        return super.getSuperClass();
+    }
+
+    @Override
+    public List<JavaType> getInterfaces() {
+        if (_referencedType != null) {
+            return _referencedType.getInterfaces();
+        }
+        return super.getInterfaces();
+    }
+
+    @Override
+    public JavaType getContentType() {
+        if (_referencedType != null) {
+            return _referencedType.getContentType();
+        }
+        return null;
+    }
+
+    @Override
+    public JavaType getKeyType() {
+        if (_referencedType != null) {
+            return _referencedType.getKeyType();
+        }
+        return null;
+    }
+
+    @Override
+    public boolean isContainerType() {
+        return _referencedType != null && _referencedType.isContainerType();
+    }
+
+    // [databind#1647]: Also ensure equality and hash codes reflect the actual resolved type
+    @Override
+    public String toString() {
+        if (_referencedType != null) {
+            return _referencedType.toString();
+        }
+        return super.toString();
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o == this) return true;
+        if (o == null) return false;
+        if (o.getClass() != getClass()) return false;
+        
+        // [databind#1647]: If resolved, compare by actual type; otherwise by nominal type + bindings
+        if (_referencedType != null) {
+            return _referencedType.equals(((ResolvedRecursiveType) o)._referencedType);
+        }
+        // NOTE: this case only happens if `equals` called before resolution;
+        // should be based on nominal type + bindings
+        return super.equals(o);
+    }
+
+    @Override // Important for TypeFactory caching
+    public int hashCode() {
+        if (_referencedType != null) {
+            return _referencedType.hashCode();
+        }
+        return super.hashCode();
+    }
+
+    /*
+    /**********************************************************
+    /* Abstract method implementations (from ReferenceType)
+    /**********************************************************
+     */
+
+    // Remaining methods from ReferenceType which need to delegate to `_referencedType` if set
+    // or provide a default for placeholder state.
+    // NOTE: Many of these are already handled by `ReferenceType`'s default implementation,
+    // but some might need explicit override if `ReferenceType`'s `_referencedType` (anchor type)
+    // is null or different from `ResolvedRecursiveType`'s `_referencedType`.
+
+    // The provided `ReferenceType` in Jackson 2.9/2.10 source has `_referencedType` initialized
+    // in its constructor and its `getSuperClass` and `getInterfaces` methods *already* delegate
+    // to that `_referencedType`.
+    // The key insight is that `ResolvedRecursiveType`'s constructor passes `null` for that
+    // `_referencedType` (anchor type) of the `ReferenceType` base class.
+    // So, `ResolvedRecursiveType` *must* override these methods to use *its own* `_referencedType`.
+
+    // This section includes other overrides for correctness, though `getSuperClass()`
+    // was the direct cause of the test failures.
+    @Override
+    public JavaType refine(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces) {
+        if (_referencedType != null) {
+            return _referencedType.refine(rawType, bindings, superClass, superInterfaces);
+        }
+        // Fallback for when not yet resolved (unlikely to be called in this state for refine)
+        return new ResolvedRecursiveType(rawType, bindings); // or other appropriate fallback
+    }
+
+    // Other methods that might need to be overridden for full delegation transparency
+    // (e.g., `hasGenericTypes`, `containedTypeCount`, `containedType`, `findSuperType`, etc.)
+    // are often handled by `ReferenceType` or `SimpleType` or `TypeBase` if they
+    // correctly delegate to the underlying class, or if their functionality does not
+    // depend on the `_referencedType` itself.
+    // The core fix addresses the hierarchy and property resolution issues.
+}
\ No newline at end of file
