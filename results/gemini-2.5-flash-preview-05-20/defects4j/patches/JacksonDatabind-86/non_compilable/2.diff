diff --git a/tmp/52506525-0a85-46d6-ad69-a51cfab789b3_buggy.java b/tmp/67d95949-8ad9-4eb1-89e1-8a0b7fd87885_fixed.java
index e69de29..881f96e 100644
--- a/tmp/52506525-0a85-46d6-ad69-a51cfab789b3_buggy.java
+++ b/tmp/67d95949-8ad9-4eb1-89e1-8a0b7fd87885_fixed.java
@@ -0,0 +1,44 @@
+    @Override // since 2.8
+    public JavaType _resolvedType(JavaType actualType) {
+        // This is called by TypeBindings when actual type is known.
+        // It's IMPORTANT that we return 'this' so that references to this
+        // type (e.g. in other TypeBindings) are updated, but this type
+        // itself is "resolved".
+        // As per [databind#1647]: need to propagate resolution for super-type,
+        // as well as any other type properties:
+        _resolvedType = actualType;
+
+        // 20-Dec-2016, tatu: Propagate 'resolved type' info. This must be done
+        //    for _superClass, _valueType and _keyType as they may have been
+        //    pointing to unresolved recursive types as well.
+        //    NOTE: _bindings is NOT updated, since it's immutable (just copied)
+        //    from original TypeBindings.
+        JavaType newSuperClass = actualType.getSuperClass();
+        if (newSuperClass != null) {
+            // Need to update 'this' instance's actual superClass too
+            if (_superClass != null) {
+                _superClass = _superClass._resolvedType(newSuperClass);
+            } else {
+                _superClass = newSuperClass;
+            }
+        }
+        JavaType newValueType = actualType.getContentType();
+        if (newValueType != null) {
+            if (_valueType != null) {
+                _valueType = _valueType._resolvedType(newValueType);
+            } else {
+                _valueType = newValueType;
+            }
+        }
+        // !!! 02-Jan-2017, tatu: Not sure if _keyType would ever contain recursive ref,
+        //    but just in case:
+        JavaType newKeyType = actualType.getKeyType();
+        if (newKeyType != null) {
+            if (_keyType != null) {
+                _keyType = _keyType._resolvedType(newKeyType);
+            } else {
+                _keyType = newKeyType;
+            }
+        }
+        return this;
+    }
\ No newline at end of file
