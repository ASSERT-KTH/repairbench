diff --git a/tmp/5b8330f4-0cbf-484b-bda6-b0ea2f6fc9af_buggy.java b/tmp/346661a2-7fbb-455c-8352-fe14fd22247d_fixed.java
index b86b44d..c1f2f2f 100644
--- a/tmp/5b8330f4-0cbf-484b-bda6-b0ea2f6fc9af_buggy.java
+++ b/tmp/346661a2-7fbb-455c-8352-fe14fd22247d_fixed.java
@@ -1,4 +1,66 @@
+import java.util.Collection;
+import java.util.Iterator;
+import org.apache.commons.jxpath.ri.EvalContext;
+import org.apache.commons.jxpath.ri.compiler.NodeSet;
+
+// The class containing this method is org.apache.commons.jxpath.ri.compiler.CoreOperation
+// The 'compute' method is an abstract protected method in CoreOperation,
+// implemented by its subclasses (e.g., CoreOperationGreaterThanOrEqual).
+// 'args' is a protected field in CoreOperation, an array of Expression objects.
 public final Object computeValue(EvalContext context) {
-        return compute(args[0].computeValue(context), args[1].computeValue(context))
-                ? Boolean.TRUE : Boolean.FALSE;
+    Object value1 = args[0].computeValue(context);
+    Object value2 = args[1].computeValue(context);
+
+    // According to XPath 1.0, when a comparison involves a NodeSet,
+    // it's true if any item in the first NodeSet (or its value)
+    // meets the condition with any item in the second NodeSet (or its value).
+    // If either NodeSet is empty, the comparison is false.
+    // This logic is specifically for relational operators (like =, !=, <, >, <=, >=).
+
+    // Convert NodeSet objects to their underlying collection of values.
+    // NodeSet implements Collection, and getValues() provides the actual node values.
+    if (value1 instanceof NodeSet) {
+        value1 = ((NodeSet) value1).getValues();
+    }
+    if (value2 instanceof NodeSet) {
+        value2 = ((NodeSet) value2).getValues();
+    }
+
+    // Handle comparisons where one or both operands are collections (NodeSets).
+    if (value1 instanceof Collection && value2 instanceof Collection) {
+        // Both operands are collections. Iterate through all combinations.
+        Iterator it1 = ((Collection) value1).iterator();
+        while (it1.hasNext()) {
+            Object o1 = it1.next();
+            Iterator it2 = ((Collection) value2).iterator();
+            while (it2.hasNext()) {
+                Object o2 = it2.next();
+                if (compute(o1, o2)) {
+                    return Boolean.TRUE; // Found a pair that satisfies the comparison
+                }
+            }
+        }
+        return Boolean.FALSE; // No pair satisfied the comparison
+    } else if (value1 instanceof Collection) {
+        // Only the first operand is a collection. Iterate through it.
+        Iterator it = ((Collection) value1).iterator();
+        while (it.hasNext()) {
+            if (compute(it.next(), value2)) {
+                return Boolean.TRUE; // Found an element that satisfies the comparison
+            }
+        }
+        return Boolean.FALSE; // No element satisfied the comparison
+    } else if (value2 instanceof Collection) {
+        // Only the second operand is a collection. Iterate through it.
+        Iterator it = ((Collection) value2).iterator();
+        while (it.hasNext()) {
+            if (compute(value1, it.next())) {
+                return Boolean.TRUE; // Found an element that satisfies the comparison
+            }
+        }
+        return Boolean.FALSE; // No element satisfied the comparison
+    } else {
+        // Neither operand is a collection. Perform a direct comparison.
+        return compute(value1, value2) ? Boolean.TRUE : Boolean.FALSE;
+    }
 }
\ No newline at end of file
