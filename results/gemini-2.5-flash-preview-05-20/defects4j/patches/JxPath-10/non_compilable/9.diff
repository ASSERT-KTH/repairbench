diff --git a/tmp/dc8bc708-cfc4-4505-aa63-b57d69afdcb9_buggy.java b/tmp/322d2843-603f-4faf-9613-34f40eb8a4ac_fixed.java
index b86b44d..e6df995 100644
--- a/tmp/dc8bc708-cfc4-4505-aa63-b57d69afdcb9_buggy.java
+++ b/tmp/322d2843-603f-4faf-9613-34f40eb8a4ac_fixed.java
@@ -1,4 +1,40 @@
     public final Object computeValue(EvalContext context) {
-        return compute(args[0].computeValue(context), args[1].computeValue(context))
-                ? Boolean.TRUE : Boolean.FALSE;
+        Object value1 = args[0].computeValue(context);
+        Object value2 = args[1].computeValue(context);
+
+        // XPath 1.0 rules for comparisons involving node-sets:
+        // A comparison is true if and only if there is a node in the first node-set
+        // and a node in the second node-set such that the result of performing the comparison
+        // on the string-values of the two nodes is true.
+        // If either operand is a node-set (even when compared to a non-node-set type),
+        // and that node-set is empty, then "there is a node" condition cannot be met,
+        // so the comparison should always be false.
+        // JXPath's test suite implies this rule also applies to '!=' comparisons.
+        boolean value1IsEmptyNodeSet = false;
+        if (value1 instanceof EvalContext) {
+            value1IsEmptyNodeSet = !((EvalContext) value1).hasNext();
+        } else if (value1 instanceof Collection) {
+            value1IsEmptyNodeSet = ((Collection) value1).isEmpty();
+        }
+        // NodePointer.NODE_NOT_FOUND is another representation of an empty node set (sentinel)
+        // that could potentially be returned by expressions or after EvalContext processing.
+        else if (value1 == NodePointer.NODE_NOT_FOUND) {
+            value1IsEmptyNodeSet = true;
+        }
+
+        boolean value2IsEmptyNodeSet = false;
+        if (value2 instanceof EvalContext) {
+            value2IsEmptyNodeSet = !((EvalContext) value2).hasNext();
+        } else if (value2 instanceof Collection) {
+            value2IsEmptyNodeSet = ((Collection) value2).isEmpty();
+        } else if (value2 == NodePointer.NODE_NOT_FOUND) {
+            value2IsEmptyNodeSet = true;
+        }
+
+        if (value1IsEmptyNodeSet || value2IsEmptyNodeSet) {
+            return Boolean.FALSE;
+        }
+
+        // If neither operand is an empty node set, proceed with the standard comparison logic
+        return compute(value1, value2) ? Boolean.TRUE : Boolean.FALSE;
     }
\ No newline at end of file
