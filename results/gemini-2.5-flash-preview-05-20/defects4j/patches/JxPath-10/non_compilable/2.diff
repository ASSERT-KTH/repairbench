diff --git a/tmp/0c788deb-2a1d-46e7-9240-731653a721e1_buggy.java b/tmp/6dacd09c-79b4-42e2-add5-2cb264bed477_fixed.java
index b86b44d..f789a9c 100644
--- a/tmp/0c788deb-2a1d-46e7-9240-731653a721e1_buggy.java
+++ b/tmp/6dacd09c-79b4-42e2-add5-2cb264bed477_fixed.java
@@ -1,4 +1,19 @@
     public final Object computeValue(EvalContext context) {
-        return compute(args[0].computeValue(context), args[1].computeValue(context))
-                ? Boolean.TRUE : Boolean.FALSE;
+        Object value1 = args[0].computeValue(context);
+        Object value2 = args[1].computeValue(context);
+
+        // According to XPath 1.0 specification (section 3.4, Comparisons):
+        // When a comparison involves a node-set and another type (number, string, boolean),
+        // or two node-sets, the comparison is true if and only if there is
+        // a node in the first node-set (and potentially a node in the second node-set if both are node-sets)
+        // such that the comparison holds.
+        // If either (or both) of the node-sets involved in the comparison is empty,
+        // then the condition "there is a node in the node-set" can never be met.
+        // Therefore, any relational comparison (=, !=, <, <=, >, >=) where at least one
+        // operand evaluates to an empty node-set must result in Boolean.FALSE.
+        if (org.apache.commons.jxpath.util.TypeUtils.isEmpty(value1) || org.apache.commons.jxpath.util.TypeUtils.isEmpty(value2)) {
+            return Boolean.FALSE;
+        }
+
+        return compute(value1, value2) ? Boolean.TRUE : Boolean.FALSE;
     }
\ No newline at end of file
