diff --git a/tmp/7d3f4b6b-d242-409b-bb4b-ec57ef562657_buggy.java b/tmp/dc504f3b-481b-419c-a81c-ed1eddd9898a_fixed.java
index b86b44d..ce6717a 100644
--- a/tmp/7d3f4b6b-d242-409b-bb4b-ec57ef562657_buggy.java
+++ b/tmp/dc504f3b-481b-419c-a81c-ed1eddd9898a_fixed.java
@@ -1,4 +1,21 @@
     public final Object computeValue(EvalContext context) {
-        return compute(args[0].computeValue(context), args[1].computeValue(context))
+        Object value1 = args[0].computeValue(context);
+        Object value2 = args[1].computeValue(context);
+
+        // According to XPath 1.0, comparison involving an empty node-set always evaluates to false.
+        // This rule applies to all comparison operators (e.g., =, !=, <, <=, >, >=).
+        // JXPath often represents node-sets as Iterators. An empty node-set would be an Iterator
+        // for which hasNext() immediately returns false.
+        boolean value1IsEmptyNodeSet = value1 instanceof java.util.Iterator && !((java.util.Iterator) value1).hasNext();
+        boolean value2IsEmptyNodeSet = value2 instanceof java.util.Iterator && !((java.util.Iterator) value2).hasNext();
+
+        if (value1IsEmptyNodeSet || value2IsEmptyNodeSet) {
+            // If either operand is an empty node set, the result of the comparison is FALSE.
+            return Boolean.FALSE;
+        }
+
+        // If neither operand is an empty node set, proceed with the specific core operation's
+        // compute method to perform the actual comparison logic (e.g., greater than or equal).
+        return compute(value1, value2)
                 ? Boolean.TRUE : Boolean.FALSE;
     }
