diff --git a/tmp/79b7bb1f-0913-47c4-8268-5994c1625d31_buggy.java b/tmp/714dd1fa-5a1f-417b-bfc4-31eda8bd548e_fixed.java
index b86b44d..2e2bd4b 100644
--- a/tmp/79b7bb1f-0913-47c4-8268-5994c1625d31_buggy.java
+++ b/tmp/714dd1fa-5a1f-417b-bfc4-31eda8bd548e_fixed.java
@@ -1,4 +1,43 @@
     public final Object computeValue(EvalContext context) {
-        return compute(args[0].computeValue(context), args[1].computeValue(context))
-                ? Boolean.TRUE : Boolean.FALSE;
+        Object value1 = args[0].computeValue(context);
+        Object value2 = args[1].computeValue(context);
+
+        // According to XPath 1.0, for comparison operations (equal, not-equal, less-than,
+        // less-than-or-equal, greater-than, greater-than-or-equal), if either operand
+        // is an empty node-set, the result of the comparison is always false.
+        // This 'computeValue' method, by returning Boolean.TRUE/FALSE, implies it's
+        // part of a class that handles boolean-returning operations, making this
+        // a suitable place to implement this general XPath rule.
+
+        boolean isEmptyNodeSet1 = false;
+        if (value1 instanceof EvalContext) {
+            // An EvalContext is an iterator representing a node-set. If it has no elements, it's empty.
+            // Calling hasNext() does not consume the iterator, so it's safe for subsequent 'compute' call.
+            isEmptyNodeSet1 = !((EvalContext) value1).hasNext();
+        } else if (value1 instanceof org.apache.commons.jxpath.NodeSet) {
+            // A NodeSet directly holds a collection of nodes.
+            isEmptyNodeSet1 = ((org.apache.commons.jxpath.NodeSet) value1).getNodes().isEmpty();
+        } else if (value1 instanceof org.apache.commons.jxpath.ri.model.beans.NullPointer) {
+            // A NullPointer often represents a non-existent node, effectively an empty node-set.
+            isEmptyNodeSet1 = true;
+        }
+
+        boolean isEmptyNodeSet2 = false;
+        if (value2 instanceof EvalContext) {
+            isEmptyNodeSet2 = !((EvalContext) value2).hasNext();
+        } else if (value2 instanceof org.apache.commons.jxpath.NodeSet) {
+            isEmptyNodeSet2 = ((org.apache.commons.jxpath.NodeSet) value2).getNodes().isEmpty();
+        } else if (value2 instanceof org.apache.commons.jxpath.ri.model.beans.NullPointer) {
+            isEmptyNodeSet2 = true;
+        }
+
+        if (isEmptyNodeSet1 || isEmptyNodeSet2) {
+            // If either side is an empty node-set, the comparison is false.
+            return Boolean.FALSE;
+        }
+
+        // If neither operand is an empty node-set, proceed with the specific operation's computation.
+        // The 'compute' method (which is specific to each operation like >=, !=, etc.)
+        // will then handle the actual type conversions and comparison logic.
+        return compute(value1, value2) ? Boolean.TRUE : Boolean.FALSE;
     }
\ No newline at end of file
