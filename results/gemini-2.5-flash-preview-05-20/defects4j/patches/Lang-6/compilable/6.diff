diff --git a/tmp/57e4f7e3-e2f6-4fb6-a770-895fb653eb95_buggy.java b/tmp/da672c13-d65c-4220-a4c4-67b564f60670_fixed.java
index 4c1ed27..f59d323 100644
--- a/tmp/57e4f7e3-e2f6-4fb6-a770-895fb653eb95_buggy.java
+++ b/tmp/da672c13-d65c-4220-a4c4-67b564f60670_fixed.java
@@ -1,32 +1,48 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-                pos+= c.length;
+                // If no translation occurred, write the characters as-is.
+                // This section needs to handle surrogate pairs correctly, especially
+                // when a high surrogate is at the very end of the input (unpaired).
+                // Character.codePointAt(input, pos) can throw StringIndexOutOfBoundsException
+                // if pos points to a high surrogate at input.length() - 1.
+
+                if (pos < len - 1 && Character.isHighSurrogate(input.charAt(pos)) && Character.isLowSurrogate(input.charAt(pos + 1))) {
+                    // It's a complete surrogate pair, write both characters
+                    out.write(input.charAt(pos));
+                    out.write(input.charAt(pos + 1));
+                    pos += 2;
+                } else {
+                    // It's a single character (BMP character, or an unmatched surrogate at the end)
+                    out.write(input.charAt(pos));
+                    pos += 1;
+                }
                 continue;
             }
 //          // contract with translators is that they have to understand codepoints 
 //          // and they just took care of a surrogate pair
             for (int pt = 0; pt < consumed; pt++) {
+                // When consumed > 0, the abstract translate method has successfully processed
+                // 'consumed' code points starting from 'pos'. Therefore, Character.codePointAt(input, pos)
+                // is expected to be safe for each of these consumed code points.
                 pos += Character.charCount(Character.codePointAt(input, pos));
             }
         }
     }
\ No newline at end of file
