diff --git a/tmp/a46c80c0-2092-49e5-b4ca-c4fc58e144d5_buggy.java b/tmp/668a44a1-e13f-4284-9edf-a01afcd3a6b1_fixed.java
index 4c1ed27..9590c86 100644
--- a/tmp/a46c80c0-2092-49e5-b4ca-c4fc58e144d5_buggy.java
+++ b/tmp/668a44a1-e13f-4284-9edf-a01afcd3a6b1_fixed.java
@@ -1,32 +1,35 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
+                // no translation occurred, so pass the current character(s) through
+                // This branch handles non-translated characters, including surrogate pairs.
+                // Character.codePointAt correctly determines if it's a single char or a surrogate pair.
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
                 out.write(c);
-                pos+= c.length;
+                pos += c.length; // Advance position by the number of Java chars in the codepoint (1 or 2)
                 continue;
             }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-            }
+            // A translation occurred. The 'consumed' variable holds the number of Java chars consumed
+            // by the abstract translate method. The contract with translators is that they must
+            // consume entire codepoints, so if input[pos] is a high surrogate, consumed must be 2.
+            // Therefore, simply advance the position by the number of characters consumed.
+            pos += consumed;
         }
     }
\ No newline at end of file
