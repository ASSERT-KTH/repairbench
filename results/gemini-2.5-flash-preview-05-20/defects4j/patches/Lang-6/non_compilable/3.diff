diff --git a/tmp/291f17e2-ce54-474b-93f8-b19e495d7f65_buggy.java b/tmp/babcb541-70fd-4d1f-9da0-60c00c0fbe62_fixed.java
index 4c1ed27..9a5a1ca 100644
--- a/tmp/291f17e2-ce54-474b-93f8-b19e495d7f65_buggy.java
+++ b/tmp/babcb541-70fd-4d1f-9da0-60c00c0fbe62_fixed.java
@@ -1,32 +1,13 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
-    public final void translate(CharSequence input, Writer out) throws IOException {
-        if (out == null) {
-            throw new IllegalArgumentException("The Writer must not be null");
-        }
-        if (input == null) {
-            return;
-        }
-        int pos = 0;
-        int len = input.length();
-        while (pos < len) {
-            int consumed = translate(input, pos, out);
-            if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-                pos+= c.length;
-                continue;
-            }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
     for (int pt = 0; pt < consumed; pt++) {
         pos += Character.charCount(Character.codePointAt(input, pos));
     }
-        }
-    }
+    ```
+    If `translate` returns `consumed > 0`, it means `consumed` characters have already been processed. The `pos` should simply be advanced by `consumed`.
+    However, the loop attempts to re-evaluate how many `char`s correspond to codepoints *starting from the current `pos` in each iteration*. This is problematic:
+    *   If `consumed` is 1 (e.g., a single BMP character), the loop runs once, `Character.charCount(Character.codePointAt(input, pos))` returns 1, and `pos` advances by 1. This works.
+    *   If `consumed` is 2 (e.g., a surrogate pair was consumed by the `translate` method), the loop runs twice.
+        *   In the first iteration (`pt = 0`), `Character.codePointAt(input, pos)` reads the start of the surrogate pair, `Character.charCount` returns 2. `pos` is advanced by 2.
+        *   In the second iteration (`pt = 1`), `pos` has *already* been advanced by 2. Now `Character.codePointAt(input, pos)` attempts to read at `pos + 2` relative to its original starting point. If the input string itself had only 2 characters (like a single surrogate pair), this access will go out of bounds, leading to `StringIndexOutOfBoundsException`.
+
+**The Fix:**
+When `translate` returns `consumed` characters, it means exactly that: `consumed` characters have been processed. Therefore, `pos` should simply be incremented by `consumed`.
