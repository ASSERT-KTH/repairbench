diff --git a/tmp/9a773e8e-e510-46a6-975f-c9eaa4e54c84_buggy.java b/tmp/9c6086bb-4a84-45e8-9d91-d5531205fbb7_fixed.java
index 4c1ed27..e4c5dcb 100644
--- a/tmp/9a773e8e-e510-46a6-975f-c9eaa4e54c84_buggy.java
+++ b/tmp/9c6086bb-4a84-45e8-9d91-d5531205fbb7_fixed.java
@@ -1,32 +1,42 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
                 out.write(c);
                 pos+= c.length;
                 continue;
             }
 //          // contract with translators is that they have to understand codepoints 
 //          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+            // The translator consumed 'consumed' number of codepoints.
+            // Advance 'pos' by the total character length of these 'consumed' codepoints.
+            int currentPos = pos; // Use a temporary position to calculate the advance
+            for (int i = 0; i < consumed; i++) {
+                if (currentPos >= len) { // Prevent StringIndexOutOfBoundsException if 'consumed' is too large
+                    // This indicates an issue where 'consumed' was reported higher than
+                    // the remaining available codepoints in the input.
+                    // Break to avoid exception, effectively consuming what's valid.
+                    break;
                 }
+                currentPos += Character.charCount(Character.codePointAt(input, currentPos));
+            }
+            pos = currentPos; // Update the main 'pos' for the next loop iteration
         }
     }
