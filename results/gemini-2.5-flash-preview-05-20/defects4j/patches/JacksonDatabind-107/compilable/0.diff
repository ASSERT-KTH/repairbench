diff --git a/tmp/b45b5b91-7ee9-4c9e-8e54-82020cbe7e5a_buggy.java b/tmp/6e21ad22-8bba-4380-b49b-e18e5cb673c7_fixed.java
index e8b3baa..c2637cc 100644
--- a/tmp/b45b5b91-7ee9-4c9e-8e54-82020cbe7e5a_buggy.java
+++ b/tmp/6e21ad22-8bba-4380-b49b-e18e5cb673c7_fixed.java
@@ -1,54 +1,72 @@
     protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,
             String typeId) throws IOException
     {
         JsonDeserializer<Object> deser = _deserializers.get(typeId);
         if (deser == null) {
             /* As per [databind#305], need to provide contextual info. But for
              * backwards compatibility, let's start by only supporting this
              * for base class, not via interface. Later on we can add this
              * to the interface, assuming deprecation at base class helps.
              */
             JavaType type = _idResolver.typeFromId(ctxt, typeId);
             if (type == null) {
                 // use the default impl if no type id available:
                 deser = _findDefaultImplDeserializer(ctxt);
                 if (deser == null) {
                     // 10-May-2016, tatu: We may get some help...
                     JavaType actual = _handleUnknownTypeId(ctxt, typeId);
-                    if (actual == null) { // what should this be taken to mean?
-                        // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but...
-                        return null;
+                    if (actual == null) {
+                        // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but
+                        // report proper error if handler did not resolve type.
+                        return ctxt.reportBadDefinition(_baseType,
+                                String.format("No type id handling for type %s, id '%s' (for property %s)",
+                                        _baseType, typeId,
+                                        (_property == null) ? "N/A" : "'" + _property.getName() + "'"));
                     }
-                    // ... would this actually work?
+                    // ... but if we got a type, we MUST find a deserializer, or throw.
                     deser = ctxt.findContextualValueDeserializer(actual, _property);
+                    if (deser == null) {
+                        // If handler returned a type but we could not find a deserializer for it,
+                        // it means the type was not usable. Report this as a definition problem.
+                        return ctxt.reportBadDefinition(actual,
+                                String.format("Could not find deserializer for type %s (resolved by handler for type id '%s')",
+                                        actual, typeId));
+                    }
                 }
             } else {
                 /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,
                  *   we actually now need to explicitly narrow from base type (which may have parameterization)
                  *   using raw type.
                  *
                  *   One complication, though; cannot change 'type class' (simple type to container); otherwise
                  *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual
                  *   type in process (getting SimpleType of Map.class which will not work as expected)
                  */
                 if ((_baseType != null)
                         && _baseType.getClass() == type.getClass()) {
                     /* 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;
                      *   but it appears to check that JavaType impl class is the same which is
                      *   important for some reason?
                      *   Disabling the check will break 2 Enum-related tests.
                      */
                     // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full
                     //   generic type with custom type resolvers. If so, should try to retain them.
                     //  Whether this is sufficient to avoid problems remains to be seen, but for
                     //  now it should improve things.
                     if (!type.hasGenericTypes()) {
                         type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
                     }
                 }
                 deser = ctxt.findContextualValueDeserializer(type, _property);
+                if (deser == null) {
+                    // If ID resolver found a type, but we could not find a deserializer for it,
+                    // report this as a definition problem.
+                    return ctxt.reportBadDefinition(type,
+                            String.format("Could not find deserializer for type %s (parsed from type id '%s')",
+                                    type, typeId));
+                }
             }
             _deserializers.put(typeId, deser);
         }
         return deser;
     }
