diff --git a/tmp/b5bff5cd-5db7-41ee-8870-b975de89b8d4_buggy.java b/tmp/be53c106-e3e5-4788-b6ad-223ca90d993d_fixed.java
index 31f58d4..344e0d6 100644
--- a/tmp/b5bff5cd-5db7-41ee-8870-b975de89b8d4_buggy.java
+++ b/tmp/be53c106-e3e5-4788-b6ad-223ca90d993d_fixed.java
@@ -1,101 +1,129 @@
     /**
      * <p>An implementation of {@link Parser}'s abstract
      * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>
      *
      * <p>The following are the rules used by this flatten method.
      * <ol>
      *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not
      *  burst anymore of <code>arguments</code> entries, just add each
      *  successive entry without further processing.  Otherwise, ignore
      *  <code>stopAtNonOption</code>.</li>
      *  <li>if the current <code>arguments</code> entry is "<b>--</b>"
      *  just add the entry to the list of processed tokens</li>
      *  <li>if the current <code>arguments</code> entry is "<b>-</b>"
      *  just add the entry to the list of processed tokens</li>
      *  <li>if the current <code>arguments</code> entry is two characters
      *  in length and the first character is "<b>-</b>" then check if this
      *  is a valid {@link Option} id.  If it is a valid id, then add the
      *  entry to the list of processed tokens and set the current {@link Option}
      *  member.  If it is not a valid id and <code>stopAtNonOption</code>
      *  is true, then the remaining entries are copied to the list of
      *  processed tokens.  Otherwise, the current entry is ignored.</li>
      *  <li>if the current <code>arguments</code> entry is more than two
      *  characters in length and the first character is "<b>-</b>" then
      *  we need to burst the entry to determine its constituents.  For more
      *  information on the bursting algorithm see
      *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>
      *  <li>if the current <code>arguments</code> entry is not handled
      *  by any of the previous rules, then the entry is added to the list
      *  of processed tokens.</li>
      * </ol>
      * </p>
      *
      * @param options The command line {@link Options}
      * @param arguments The command line arguments to be parsed
      * @param stopAtNonOption Specifies whether to stop flattening
      * when an non option is found.
      * @return The flattened <code>arguments</code> String array.
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
         init();
         this.options = options;
 
         // an iterator for the command line tokens
         Iterator iter = Arrays.asList(arguments).iterator();
 
         // process each command line token
         while (iter.hasNext())
         {
             // get the next command line token
             String token = (String) iter.next();
 
             // handle long option --foo or --foo=bar
             if (token.startsWith("--"))
             {
-                if (token.indexOf('=') != -1)
+                String optionName = token;
+                int eq = token.indexOf('=');
+                if (eq != -1) {
+                    optionName = token.substring(0, eq);
+                }
+
+                // If stopAtNonOption is true and this long option is not defined,
+                // treat the entire token as a non-option and stop further option parsing.
+                if (stopAtNonOption && !options.hasOption(optionName)) {
+                    // Add the entire token as a literal argument
+                    tokens.add(token);
+                    // Add all remaining tokens as literal arguments without further processing
+                    while (iter.hasNext()) {
+                        tokens.add((String) iter.next());
+                    }
+                    // All subsequent tokens have been added, so we can exit the loop.
+                    break;
+                }
+                // Original logic for defined long options or when stopAtNonOption is false
+                else if (eq != -1)
                 {
-                    tokens.add(token.substring(0, token.indexOf('=')));
-                    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));
+                    tokens.add(optionName);
+                    tokens.add(token.substring(eq + 1, token.length()));
                 }
                 else
                 {
                     tokens.add(token);
                 }
             }
 
             // single hyphen
             else if ("-".equals(token))
             {
                 tokens.add(token);
             }
             else if (token.startsWith("-"))
             {
                 if (token.length() == 2)
                 {
+                    // processOptionToken will handle the 'stopAtNonOption' logic internally,
+                    // including calling gobble() if it's an undefined option and stopAtNonOption is true.
                     processOptionToken(token, stopAtNonOption);
                 }
                 else if (options.hasOption(token))
                 {
                     tokens.add(token);
                 }
                 // requires bursting
                 else
                 {
+                    // burstToken will handle the 'stopAtNonOption' logic internally,
+                    // including calling gobble() if bursting encounters an undefined option.
                     burstToken(token, stopAtNonOption);
                 }
             }
-            else if (stopAtNonOption)
+            else // This is a literal non-option (does not start with '-')
             {
+                // process() will handle the 'stopAtNonOption' logic internally,
+                // including calling gobble() to consume remaining arguments.
                 process(token);
             }
-            else
-            {
-                tokens.add(token);
-            }
 
-            gobble(iter);
+            // The call to gobble(iter) here was problematic. It would sometimes consume
+            // remaining arguments prematurely if 'currentToken' was null (e.g., after
+            // processing an undefined long option), even if the explicit 'stopAtNonOption'
+            // condition for that token wasn't fully met in the current branch.
+            // The gobble logic should be strictly managed by processOptionToken, burstToken,
+            // or process when they identify a non-option that triggers the stop condition.
+            // In the case of undefined long options, the logic is now handled directly above.
+            // gobble(iter); // Removed
         }
 
         return (String[]) tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
