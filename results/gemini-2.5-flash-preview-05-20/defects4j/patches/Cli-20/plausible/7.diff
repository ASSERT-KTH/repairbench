diff --git a/tmp/7b7e61ac-d5ed-4543-b96b-dacf720994d2_buggy.java b/tmp/76a3f8b5-4936-44a6-9d40-5c598220a085_fixed.java
index 31f58d4..98e4194 100644
--- a/tmp/7b7e61ac-d5ed-4543-b96b-dacf720994d2_buggy.java
+++ b/tmp/76a3f8b5-4936-44a6-9d40-5c598220a085_fixed.java
@@ -1,101 +1,131 @@
     /**
      * <p>An implementation of {@link Parser}'s abstract
      * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>
      *
      * <p>The following are the rules used by this flatten method.
      * <ol>
      *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not
      *  burst anymore of <code>arguments</code> entries, just add each
      *  successive entry without further processing.  Otherwise, ignore
      *  <code>stopAtNonOption</code>.</li>
      *  <li>if the current <code>arguments</code> entry is "<b>--</b>"
      *  just add the entry to the list of processed tokens</li>
      *  <li>if the current <code>arguments</code> entry is "<b>-</b>"
      *  just add the entry to the list of processed tokens</li>
      *  <li>if the current <code>arguments</code> entry is two characters
      *  in length and the first character is "<b>-</b>" then check if this
      *  is a valid {@link Option} id.  If it is a valid id, then add the
      *  entry to the list of processed tokens and set the current {@link Option}
      *  member.  If it is not a valid id and <code>stopAtNonOption</code>
      *  is true, then the remaining entries are copied to the list of 
      *  processed tokens.  Otherwise, the current entry is ignored.</li>
      *  <li>if the current <code>arguments</code> entry is more than two
      *  characters in length and the first character is "<b>-</b>" then
      *  we need to burst the entry to determine its constituents.  For more
      *  information on the bursting algorithm see 
      *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>
      *  <li>if the current <code>arguments</code> entry is not handled 
      *  by any of the previous rules, then the entry is added to the list
      *  of processed tokens.</li>
      * </ol>
      * </p>
      *
      * @param options The command line {@link Options}
      * @param arguments The command line arguments to be parsed
      * @param stopAtNonOption Specifies whether to stop flattening
      * when an non option is found.
      * @return The flattened <code>arguments</code> String array.
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
         init();
         this.options = options;
 
         // an iterator for the command line tokens
         Iterator iter = Arrays.asList(arguments).iterator();
 
         // process each command line token
         while (iter.hasNext())
         {
             // get the next command line token
             String token = (String) iter.next();
 
             // handle long option --foo or --foo=bar
             if (token.startsWith("--"))
             {
-                if (token.indexOf('=') != -1)
+                String optName = null;
+                String optValue = null;
+                int eq = token.indexOf('=');
+
+                if (eq != -1)
                 {
-                    tokens.add(token.substring(0, token.indexOf('=')));
-                    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));
+                    optName = token.substring(0, eq);
+                    optValue = token.substring(eq + 1, token.length());
                 }
                 else
                 {
-                    tokens.add(token);
+                    optName = token;
+                }
+
+                // Check if the long option is defined. If not, it's a non-option.
+                // This is a fix for CLI-133
+                if (options.hasOption(optName))
+                {
+                    tokens.add(optName);
+                    if (optValue != null)
+                    {
+                        tokens.add(optValue);
+                    }
+                }
+                else // Undefined long option (e.g., --zop or --zop==1)
+                {
+                    if (stopAtNonOption)
+                    {
+                        this.eatTheRest = true;
+                    }
+                    tokens.add(token); // Add the original token as an argument
                 }
             }
 
             // single hyphen
             else if ("-".equals(token))
             {
                 tokens.add(token);
             }
             else if (token.startsWith("-"))
             {
                 if (token.length() == 2)
                 {
                     processOptionToken(token, stopAtNonOption);
                 }
                 else if (options.hasOption(token))
                 {
                     tokens.add(token);
                 }
                 // requires bursting
                 else
                 {
                     burstToken(token, stopAtNonOption);
                 }
             }
-            else if (stopAtNonOption)
+            else // non-hyphenated token (a normal argument)
             {
-                process(token);
+                // This is a fix for CLI-133 (for stopAtNonOption)
+                if (stopAtNonOption)
+                {
+                    this.eatTheRest = true;
                 }
-            else
-            {
                 tokens.add(token);
             }
 
             gobble(iter);
+            
+            // If eatTheRest was set during this iteration, gobble() would have consumed
+            // the remaining arguments. We can break the loop early.
+            if (this.eatTheRest) {
+                break;
+            }
         }
 
         return (String[]) tokens.toArray(new String[tokens.size()]);
     }
