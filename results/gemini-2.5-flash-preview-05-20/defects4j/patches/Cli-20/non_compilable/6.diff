diff --git a/tmp/b58cb614-314b-46b3-8e3a-982a2bc1044a_buggy.java b/tmp/05d58b6b-4101-4f97-a120-e781db90f979_fixed.java
index 31f58d4..ffef62d 100644
--- a/tmp/b58cb614-314b-46b3-8e3a-982a2bc1044a_buggy.java
+++ b/tmp/05d58b6b-4101-4f97-a120-e781db90f979_fixed.java
@@ -1,101 +1,124 @@
     /**
      * <p>An implementation of {@link Parser}'s abstract
      * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>
      *
      * <p>The following are the rules used by this flatten method.
      * <ol>
      *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not
      *  burst anymore of <code>arguments</code> entries, just add each
      *  successive entry without further processing.  Otherwise, ignore
      *  <code>stopAtNonOption</code>.</li>
      *  <li>if the current <code>arguments</code> entry is "<b>--</b>"
      *  just add the entry to the list of processed tokens</li>
      *  <li>if the current <code>arguments</code> entry is "<b>-</b>"
      *  just add the entry to the list of processed tokens</li>
      *  <li>if the current <code>arguments</code> entry is two characters
      *  in length and the first character is "<b>-</b>" then check if this
      *  is a valid {@link Option} id.  If it is a valid id, then add the
      *  entry to the list of processed tokens and set the current {@link Option}
      *  member.  If it is not a valid id and <code>stopAtNonOption</code>
      *  is true, then the remaining entries are copied to the list of 
      *  processed tokens.  Otherwise, the current entry is ignored.</li>
      *  <li>if the current <code>arguments</code> entry is more than two
      *  characters in length and the first character is "<b>-</b>" then
      *  we need to burst the entry to determine its constituents.  For more
      *  information on the bursting algorithm see 
      *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>
      *  <li>if the current <code>arguments</code> entry is not handled 
      *  by any of the previous rules, then the entry is added to the list
      *  of processed tokens.</li>
      * </ol>
      * </p>
      *
      * @param options The command line {@link Options}
      * @param arguments The command line arguments to be parsed
      * @param stopAtNonOption Specifies whether to stop flattening
      * when an non option is found.
      * @return The flattened <code>arguments</code> String array.
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
         init();
         this.options = options;
+        this.stopAtNonOption = stopAtNonOption; // FIX: Set the inherited member variable
 
         // an iterator for the command line tokens
         Iterator iter = Arrays.asList(arguments).iterator();
 
         // process each command line token
         while (iter.hasNext())
         {
             // get the next command line token
             String token = (String) iter.next();
 
             // handle long option --foo or --foo=bar
             if (token.startsWith("--"))
             {
-                if (token.indexOf('=') != -1)
+                String opt = null;
+                String arg = null;
+                int equals = token.indexOf('=');
+
+                if (equals == -1) // e.g., --foo
                 {
-                    tokens.add(token.substring(0, token.indexOf('=')));
-                    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));
+                    opt = token;
                 }
-                else
+                else // e.g., --foo=bar
                 {
-                    tokens.add(token);
+                    opt = token.substring(0, equals);
+                    arg = token.substring(equals + 1, token.length());
+                }
+
+                // Check if the option part is recognized
+                if (options.hasOption(opt))
+                {
+                    tokens.add(opt); // Add option token
+                    if (arg != null)
+                    {
+                        tokens.add(arg); // Add argument if present
+                    }
+                }
+                else // If opt is not a recognized long option
+                {
+                    tokens.add(token); // Add the full original token as a non-option
+                    if (stopAtNonOption) // And if we are in stopAtNonOption mode
+                    {
+                        gobble(iter); // Stop processing and add remaining arguments
+                    }
                 }
             }
 
             // single hyphen
             else if ("-".equals(token))
             {
                 tokens.add(token);
             }
             else if (token.startsWith("-"))
             {
                 if (token.length() == 2)
                 {
                     processOptionToken(token, stopAtNonOption);
                 }
                 else if (options.hasOption(token))
                 {
                     tokens.add(token);
                 }
                 // requires bursting
                 else
                 {
                     burstToken(token, stopAtNonOption);
                 }
             }
             else if (stopAtNonOption)
             {
                 process(token);
             }
             else
             {
                 tokens.add(token);
             }
 
-            gobble(iter);
+            gobble(iter); // This will gobble remaining tokens if this.stopAtNonOption was set to true by previous logic
         }
 
         return (String[]) tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
