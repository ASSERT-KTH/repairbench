diff --git a/tmp/747dcd0e-d487-4894-9c7c-abfdcfb6508a_buggy.java b/tmp/97fda8fe-714b-42c7-a714-4dd0c79a60da_fixed.java
index 31f58d4..bbc2e8a 100644
--- a/tmp/747dcd0e-d487-4894-9c7c-abfdcfb6508a_buggy.java
+++ b/tmp/97fda8fe-714b-42c7-a714-4dd0c79a60da_fixed.java
@@ -1,101 +1,136 @@
     /**
      * <p>An implementation of {@link Parser}'s abstract
      * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>
      *
      * <p>The following are the rules used by this flatten method.
      * <ol>
      *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not
      *  burst anymore of <code>arguments</code> entries, just add each
      *  successive entry without further processing.  Otherwise, ignore
      *  <code>stopAtNonOption</code>.</li>
      *  <li>if the current <code>arguments</code> entry is "<b>--</b>"
      *  just add the entry to the list of processed tokens</li>
      *  <li>if the current <code>arguments</code> entry is "<b>-</b>"
      *  just add the entry to the list of processed tokens</li>
      *  <li>if the current <code>arguments</code> entry is two characters
      *  in length and the first character is "<b>-</b>" then check if this
      *  is a valid {@link Option} id.  If it is a valid id, then add the
      *  entry to the list of processed tokens and set the current {@link Option}
      *  member.  If it is not a valid id and <code>stopAtNonOption</code>
      *  is true, then the remaining entries are copied to the list of 
      *  processed tokens.  Otherwise, the current entry is ignored.</li>
      *  <li>if the current <code>arguments</code> entry is more than two
      *  characters in length and the first character is "<b>-</b>" then
      *  we need to burst the entry to determine its constituents.  For more
      *  information on the bursting algorithm see 
      *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>
      *  <li>if the current <code>arguments</code> entry is not handled 
      *  by any of the previous rules, then the entry is added to the list
      *  of processed tokens.</li>
      * </ol>
      * </p>
      *
      * @param options The command line {@link Options}
      * @param arguments The command line arguments to be parsed
      * @param stopAtNonOption Specifies whether to stop flattening
      * when an non option is found.
      * @return The flattened <code>arguments</code> String array.
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
         init();
         this.options = options;
 
         // an iterator for the command line tokens
-        Iterator iter = Arrays.asList(arguments).iterator();
+        // Assign to the class field 'iter' so helper methods can access it
+        this.iter = Arrays.asList(arguments).iterator();
 
         // process each command line token
         while (iter.hasNext())
         {
             // get the next command line token
             String token = (String) iter.next();
 
             // handle long option --foo or --foo=bar
             if (token.startsWith("--"))
             {
-                if (token.indexOf('=') != -1)
+                String optionName = null;
+                int equalSign = token.indexOf('=');
+
+                if (equalSign != -1) {
+                    // Extract the option name before '='
+                    optionName = token.substring(2, equalSign);
+                } else {
+                    // Extract the option name after '--'
+                    optionName = token.substring(2);
+                }
+
+                // If stopAtNonOption is true and the long option is not defined
+                // in the options, then treat the entire token as a non-option
+                // and stop flattening.
+                // PosixParser's hasOption check typically works with the short name (e.g., "z" for "--zop").
+                // If the option name extracted from the long token is not recognized, it's a non-option.
+                if (stopAtNonOption && !options.hasOption(optionName)) {
+                    tokens.add(token); // Add the entire token as a single non-option
+                    gobble(iter);      // Gobble remaining tokens from the original arguments array
+                    break;             // Exit the loop as flattening has stopped
+                }
+
+                // Otherwise (if not stopping, or if it's a known option), process normally
+                if (equalSign != -1)
                 {
-                    tokens.add(token.substring(0, token.indexOf('=')));
-                    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));
+                    tokens.add(token.substring(0, equalSign)); // Add --foo part
+                    tokens.add(token.substring(equalSign + 1)); // Add bar part (value)
                 }
                 else
                 {
-                    tokens.add(token);
+                    tokens.add(token); // Add --foo as-is
                 }
             }
 
             // single hyphen
             else if ("-".equals(token))
             {
                 tokens.add(token);
             }
+            // Short options starting with '-' (e.g., -a, -abc)
             else if (token.startsWith("-"))
             {
                 if (token.length() == 2)
                 {
+                    // processOptionToken may call gobble if stop condition is met (e.g., -x where 'x' is not an option)
                     processOptionToken(token, stopAtNonOption);
                 }
-                else if (options.hasOption(token))
+                // Check if it's a known short option with a specific full name, e.g., "-foo" where 'foo' is an option
+                else if (options.hasOption(token.substring(1))) // For token like -foo, check if 'foo' is an option
                 {
                     tokens.add(token);
                 }
-                // requires bursting
+                // Otherwise, it's a burstable token like -abc or an invalid one like -abtoast
                 else
                 {
+                    // burstToken may call gobble if stop condition is met (e.g., -abtoast where 't' is not an option)
                     burstToken(token, stopAtNonOption);
                 }
             }
+            // If token does not start with '-' (i.e., it's a plain argument) and stopAtNonOption is true,
+            // then it's a non-option, and we stop flattening.
             else if (stopAtNonOption)
             {
-                process(token);
+                tokens.add(token); // Add the non-option
+                gobble(iter);      // Gobble remaining tokens from the original arguments array
+                break;             // Exit the loop as flattening has stopped
             }
+            // Token does not start with '-' and stopAtNonOption is false, just add it.
             else
             {
                 tokens.add(token);
             }
 
-            gobble(iter);
+            // REMOVED: The unconditional gobble(iter) call from here.
+            // `gobble` is now only called when a 'stop' condition is met within the processing logic,
+            // which then exhausts the iterator and causes the loop to terminate.
         }
 
         return (String[]) tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
