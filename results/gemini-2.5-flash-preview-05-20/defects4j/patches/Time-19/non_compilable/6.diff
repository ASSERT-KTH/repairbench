diff --git a/tmp/f9e594c3-863f-4fb1-9739-cec364960c28_buggy.java b/tmp/eee11524-1c32-4985-ac6d-d31f6dc733d3_fixed.java
index f8caf72..801046d 100644
--- a/tmp/f9e594c3-863f-4fb1-9739-cec364960c28_buggy.java
+++ b/tmp/eee11524-1c32-4985-ac6d-d31f6dc733d3_fixed.java
@@ -1,65 +1,82 @@
+import org.joda.time.DateTimeConstants;
+
+// This method is part of the DateTimeZone class.
+// It relies on getOffset(long instantUTC), nextTransition(long instantUTC), previousTransition(long instantUTC)
+// which are abstract methods in DateTimeZone and implemented by concrete subclasses.
+// Assuming MILLIS_PER_HOUR constant is available, or can be defined.
+
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
      * <pre>
      * millisLocal == millisUTC   + getOffset(millisUTC)
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
      * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
      * <p>
      * This method will return an offset suitable for calculating an instant
      * after any DST gap. For example, consider a zone with a cutover
      * from 01:00 to 01:59:<br />
      * Input: 00:00  Output: 00:00<br />
      * Input: 00:30  Output: 00:30<br />
      * Input: 01:00  Output: 02:00<br />
      * Input: 01:30  Output: 02:30<br />
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
      * During a DST overlap (where the local time is ambiguous) this method will return
      * the earlier instant. The combination of these two rules is to always favour
      * daylight (summer) time over standard (winter) time.
      * <p>
      * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
      * Prior to v1.5, the DST gap behaviour was also not defined.
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
-        // get the offset at instantLocal (first estimate)
+        // Step 1: Initial estimate of the offset.
+        // offsetLocal is the offset if instantLocal were a UTC instant.
         final int offsetLocal = getOffset(instantLocal);
-        // adjust instantLocal using the estimate and recalc the offset
-        final long instantAdjusted = instantLocal - offsetLocal;
-        final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
-        if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
-                long nextLocal = nextTransition(instantAdjusted);
-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
-                if (nextLocal != nextAdjusted) {
-                    return offsetLocal;
-                }
-            }
-        } else if (offsetLocal > 0) {
-            long prev = previousTransition(instantAdjusted);
-            if (prev < instantAdjusted) {
-                int offsetPrev = getOffset(prev);
-                int diff = offsetPrev - offsetLocal;
-                if (instantAdjusted - prev <= diff) {
-                    return offsetPrev;
+        // offsetAdjusted is the offset at the UTC time resulting from instantLocal minus offsetLocal.
+        // This often gives a good estimate for the standard offset in overlaps, or the after-gap offset in gaps.
+        final int offsetAdjusted = getOffset(instantLocal - offsetLocal);
+
+        // Step 2: Check for consistency (whether instantLocal - offsetAdjusted maps back to offsetAdjusted).
+        // This condition identifies DST gaps.
+        if (getOffset(instantLocal - offsetAdjusted) != offsetAdjusted) {
+            // instantLocal falls into a DST gap. The rule is to return the offset
+            // suitable for calculating an instant after the gap.
+            // offsetAdjusted already correctly represents this "after-gap" offset.
+            return offsetAdjusted;
         }
+
+        // Step 3: If consistent, check for overlaps.
+        // The rule for overlaps is to favour daylight (summer) time, which means choosing
+        // the larger of the two possible valid offsets (resulting in an earlier UTC instant).
+        // A typical DST saving is one hour.
+        final int oneHour = DateTimeConstants.MILLIS_PER_HOUR; // Using Joda-Time constant
+
+        // Check if (offsetAdjusted + oneHour) is also a valid offset.
+        // This would be the case if offsetAdjusted is the standard offset and (offsetAdjusted + oneHour) is the daylight offset.
+        int testOffset = offsetAdjusted + oneHour;
+        if (getOffset(instantLocal - testOffset) == testOffset) {
+            return testOffset; // It's an overlap, and the larger (daylight) offset is valid. Choose it.
         }
+
+        // Check if (offsetAdjusted - oneHour) is also a valid offset.
+        // This would be the case if offsetAdjusted is already the daylight offset and (offsetAdjusted - oneHour) is the standard offset.
+        testOffset = offsetAdjusted - oneHour;
+        if (getOffset(instantLocal - testOffset) == testOffset) {
+            // In this scenario, offsetAdjusted is the larger offset (daylight) and testOffset is the smaller (standard).
+            // The rule is to favour the larger offset, so we keep offsetAdjusted.
+            return offsetAdjusted;
         }
+        
+        // No other consistent offset found. The initial offsetAdjusted is the correct one.
         return offsetAdjusted;
     }
\ No newline at end of file
