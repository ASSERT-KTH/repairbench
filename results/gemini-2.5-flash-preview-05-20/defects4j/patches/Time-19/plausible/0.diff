diff --git a/tmp/9987e80e-2c36-4728-a0c5-c5c518a23fa6_buggy.java b/tmp/8c5b0e42-89aa-4ac2-b5b2-9f7b7f5f59af_fixed.java
index f8caf72..4b0830e 100644
--- a/tmp/9987e80e-2c36-4728-a0c5-c5c518a23fa6_buggy.java
+++ b/tmp/8c5b0e42-89aa-4ac2-b5b2-9f7b7f5f59af_fixed.java
@@ -1,65 +1,80 @@
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
      * <pre>
      * millisLocal == millisUTC   + getOffset(millisUTC)
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
      * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
      * <p>
      * This method will return an offset suitable for calculating an instant
      * after any DST gap. For example, consider a zone with a cutover
      * from 01:00 to 01:59:<br />
      * Input: 00:00  Output: 00:00<br />
      * Input: 00:30  Output: 00:30<br />
      * Input: 01:00  Output: 02:00<br />
      * Input: 01:30  Output: 02:30<br />
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
      * During a DST overlap (where the local time is ambiguous) this method will return
      * the earlier instant. The combination of these two rules is to always favour
      * daylight (summer) time over standard (winter) time.
      * <p>
      * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
      * Prior to v1.5, the DST gap behaviour was also not defined.
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
         // get the offset at instantLocal (first estimate)
-        final int offsetLocal = getOffset(instantLocal);
+        // The original line 'final int offsetLocal = getOffset(instantLocal);' was problematic
+        // because getOffset(long instant) expects a UTC instant, not a local instant.
+        // When instantLocal falls into an ambiguous period (DST overlap), passing it directly
+        // to getOffset might lead to an incorrect initial estimate, causing the method to
+        // return the standard offset instead of the preferred daylight offset.
+        //
+        // The fix introduces a better initial guess by trying to calculate an offset
+        // that's likely to fall outside the ambiguous region and then using that to
+        // make a more reliable first estimate. Subtracting 3600000L (1 hour) is a heuristic
+        // that often works for common DST transitions. This ensures that for ambiguous
+        // local times, the daylight offset is favored as per the javadoc.
+        final int offsetLocal = getOffset(instantLocal - getOffset(instantLocal - 3600000L));
+        
         // adjust instantLocal using the estimate and recalc the offset
         final long instantAdjusted = instantLocal - offsetLocal;
         final int offsetAdjusted = getOffset(instantAdjusted);
+        
         // if the offsets differ, we must be near a DST boundary
         if (offsetLocal != offsetAdjusted) {
             // we need to ensure that time is always after the DST gap
             // this happens naturally for positive offsets, but not for negative
             if ((offsetLocal - offsetAdjusted) < 0) {
                 // if we just return offsetAdjusted then the time is pushed
                 // back before the transition, whereas it should be
                 // on or after the transition
                 long nextLocal = nextTransition(instantAdjusted);
                 long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
                 if (nextLocal != nextAdjusted) {
                     return offsetLocal;
                 }
             }
         } else if (offsetLocal > 0) {
+            // This handles overlaps in DST, where the local time is ambiguous.
+            // It will return the earlier instant, favouring daylight (summer) time.
             long prev = previousTransition(instantAdjusted);
             if (prev < instantAdjusted) {
                 int offsetPrev = getOffset(prev);
                 int diff = offsetPrev - offsetLocal;
                 if (instantAdjusted - prev <= diff) {
                     return offsetPrev;
                 }
             }
         }
         return offsetAdjusted;
     }
\ No newline at end of file
