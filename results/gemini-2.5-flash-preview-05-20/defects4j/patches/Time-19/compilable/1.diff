diff --git a/tmp/abbfa726-424f-424e-9546-543653005272_buggy.java b/tmp/4593d930-ad96-4df0-bb80-175cf546cead_fixed.java
index f8caf72..6c39135 100644
--- a/tmp/abbfa726-424f-424e-9546-543653005272_buggy.java
+++ b/tmp/4593d930-ad96-4df0-bb80-175cf546cead_fixed.java
@@ -1,65 +1,84 @@
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
      * <pre>
      * millisLocal == millisUTC   + getOffset(millisUTC)
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
      * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
      * <p>
      * This method will return an offset suitable for calculating an instant
      * after any DST gap. For example, consider a zone with a cutover
      * from 01:00 to 01:59:<br />
      * Input: 00:00  Output: 00:00<br />
      * Input: 00:30  Output: 00:30<br />
      * Input: 01:00  Output: 02:00<br />
      * Input: 01:30  Output: 02:30<br />
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
      * During a DST overlap (where the local time is ambiguous) this method will return
      * the earlier instant. The combination of these two rules is to always favour
      * daylight (summer) time over standard (winter) time.
      * <p>
      * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
      * Prior to v1.5, the DST gap behaviour was also not defined.
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
         // get the offset at instantLocal (first estimate)
         final int offsetLocal = getOffset(instantLocal);
         // adjust instantLocal using the estimate and recalc the offset
         final long instantAdjusted = instantLocal - offsetLocal;
         final int offsetAdjusted = getOffset(instantAdjusted);
+
         // if the offsets differ, we must be near a DST boundary
+        // This block handles gaps (spring forward) or specific overlap types.
         if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
+            // If (offsetLocal - offsetAdjusted) < 0, it means offsetLocal < offsetAdjusted.
+            // This is typical for an overlap where the initial guess picked the later (smaller) offset,
+            // but after adjustment, the earlier (larger) offset is found.
+            // Example: +2h -> +1h (overlap). `instantLocal` results in `offsetLocal=+1h`, `instantAdjusted` results in `offsetAdjusted=+2h`.
+            // Here (1h - 2h) < 0 is true. The rule is to favour the earlier (larger) offset.
             if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
+                // Ensure time is after the DST gap. The javadoc implies returning an offset that moves the local time past the gap.
+                // In an overlap, we want to return the earlier instant (larger offset).
+                // The current code tries to find a transition, then returns `offsetLocal`.
+                // For an overlap, `offsetAdjusted` is typically the larger (earlier) offset in this scenario.
                 long nextLocal = nextTransition(instantAdjusted);
                 long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
                 if (nextLocal != nextAdjusted) {
-                    return offsetLocal;
+                    return offsetAdjusted; // Changed from offsetLocal: return the larger offset for earlier instant
                 }
             }
-        } else if (offsetLocal > 0) {
+        } else if (offsetLocal == offsetAdjusted) { // Original: offsetLocal > 0. Changed to handle all consistent offsets.
+            // This block handles the case where offsetLocal and offsetAdjusted are the same.
+            // This occurs in normal periods or for overlaps where the initial guess (offsetLocal)
+            // landed on the later (standard time) side of the ambiguous period (e.g., London test).
+            // We must now check for the alternative (earlier/daylight saving) offset.
             long prev = previousTransition(instantAdjusted);
+            // If there's a previous transition and `instantAdjusted` is after it.
             if (prev < instantAdjusted) {
-                int offsetPrev = getOffset(prev);
-                int diff = offsetPrev - offsetLocal;
+                // Get the offset that was active *just before* this previous transition.
+                // This is typically the daylight saving offset (e.g., BST +1h).
+                int offsetPrev = getOffset(prev - 1); // Corrected to get offset *before* the transition.
+                int diff = offsetPrev - offsetLocal; // Difference between previous offset (e.g., +1h) and current offset (e.g., +0h).
+                
+                // If `instantAdjusted` is within the "ambiguous zone" relative to the previous transition,
+                // and the `diff` makes sense (e.g., 1 hour for typical DST).
+                // This `if` condition checks if the local time falls into the overlap window.
                 if (instantAdjusted - prev <= diff) {
-                    return offsetPrev;
+                    // This implies `instantLocal` is ambiguous and `offsetPrev` is the offset
+                    // corresponding to the earlier UTC instant (daylight saving time).
+                    return offsetPrev; // Return the daylight saving offset as per Javadoc rule.
                 }
             }
         }
-        return offsetAdjusted;
+        return offsetAdjusted; // Default return for non-boundary or specific gap cases.
     }
\ No newline at end of file
