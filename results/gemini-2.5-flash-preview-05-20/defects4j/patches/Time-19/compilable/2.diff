diff --git a/tmp/6f7e7562-ac3a-418d-895f-c66600febf66_buggy.java b/tmp/ff94420e-9c8e-420e-8d34-e7971bd604a2_fixed.java
index f8caf72..6c33cea 100644
--- a/tmp/6f7e7562-ac3a-418d-895f-c66600febf66_buggy.java
+++ b/tmp/ff94420e-9c8e-420e-8d34-e7971bd604a2_fixed.java
@@ -1,65 +1,40 @@
-    /**
-     * Gets the millisecond offset to subtract from local time to get UTC time.
-     * This offset can be used to undo adding the offset obtained by getOffset.
-     *
-     * <pre>
-     * millisLocal == millisUTC   + getOffset(millisUTC)
-     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
-     * </pre>
-     *
-     * NOTE: After calculating millisLocal, some error may be introduced. At
-     * offset transitions (due to DST or other historical changes), ranges of
-     * local times may map to different UTC times.
-     * <p>
-     * This method will return an offset suitable for calculating an instant
-     * after any DST gap. For example, consider a zone with a cutover
-     * from 01:00 to 01:59:<br />
-     * Input: 00:00  Output: 00:00<br />
-     * Input: 00:30  Output: 00:30<br />
-     * Input: 01:00  Output: 02:00<br />
-     * Input: 01:30  Output: 02:30<br />
-     * Input: 02:00  Output: 02:00<br />
-     * Input: 02:30  Output: 02:30<br />
-     * <p>
-     * During a DST overlap (where the local time is ambiguous) this method will return
-     * the earlier instant. The combination of these two rules is to always favour
-     * daylight (summer) time over standard (winter) time.
-     * <p>
-     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
-     * Prior to v1.5, the DST gap behaviour was also not defined.
-     *
-     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
-     * @return the millisecond offset to subtract from local time to get UTC time
-     */
     public int getOffsetFromLocal(long instantLocal) {
         // get the offset at instantLocal (first estimate)
         final int offsetLocal = getOffset(instantLocal);
         // adjust instantLocal using the estimate and recalc the offset
         final long instantAdjusted = instantLocal - offsetLocal;
         final int offsetAdjusted = getOffset(instantAdjusted);
+
         // if the offsets differ, we must be near a DST boundary
         if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
+            // Gap (offsetLocal < offsetAdjusted): Standard to Daylight
             if ((offsetLocal - offsetAdjusted) < 0) {
                 // if we just return offsetAdjusted then the time is pushed
                 // back before the transition, whereas it should be
                 // on or after the transition
                 long nextLocal = nextTransition(instantAdjusted);
                 long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
                 if (nextLocal != nextAdjusted) {
                     return offsetLocal;
                 }
+            } else { // Overlap (offsetLocal > offsetAdjusted): Daylight to Standard
+                // This means offsetLocal is the 'daylight' offset and offsetAdjusted is the 'standard' offset.
+                // We want to return offsetLocal (daylight offset) according to the rule "favour daylight (summer) time".
+                return offsetLocal;
             }
-        } else if (offsetLocal > 0) {
+        } else { // offsetLocal == offsetAdjusted: Either no transition, or an overlap where initial guess was standard time.
+            // This is the common scenario for overlaps where getOffset(instantLocal) already returns the standard offset.
+            // Check for previous transition to find a potential daylight offset to prefer.
             long prev = previousTransition(instantAdjusted);
-            if (prev < instantAdjusted) {
-                int offsetPrev = getOffset(prev);
+            if (prev < instantAdjusted) { // If there was a previous transition before instantAdjusted
+                int offsetPrev = getOffset(prev); // Get the offset active *before* the transition at 'prev'
                 int diff = offsetPrev - offsetLocal;
-                if (instantAdjusted - prev <= diff) {
+                // If offsetPrev is a larger offset (e.g., daylight saving) and instantAdjusted falls within the ambiguous period
+                // (which is 'diff' long from 'prev'), then we prefer offsetPrev.
+                if (diff > 0 && instantAdjusted - prev <= diff) {
                     return offsetPrev;
                 }
             }
         }
         return offsetAdjusted;
     }
\ No newline at end of file
