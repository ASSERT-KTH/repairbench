diff --git a/tmp/caab2159-7edc-45e1-89fb-c5f01791c176_buggy.java b/tmp/516e382c-6e8e-4efd-bca5-f72934244312_fixed.java
index f8caf72..8500f07 100644
--- a/tmp/caab2159-7edc-45e1-89fb-c5f01791c176_buggy.java
+++ b/tmp/516e382c-6e8e-4efd-bca5-f72934244312_fixed.java
@@ -1,65 +1,56 @@
-    /**
-     * Gets the millisecond offset to subtract from local time to get UTC time.
-     * This offset can be used to undo adding the offset obtained by getOffset.
-     *
-     * <pre>
-     * millisLocal == millisUTC   + getOffset(millisUTC)
-     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
-     * </pre>
-     *
-     * NOTE: After calculating millisLocal, some error may be introduced. At
-     * offset transitions (due to DST or other historical changes), ranges of
-     * local times may map to different UTC times.
-     * <p>
-     * This method will return an offset suitable for calculating an instant
-     * after any DST gap. For example, consider a zone with a cutover
-     * from 01:00 to 01:59:<br />
-     * Input: 00:00  Output: 00:00<br />
-     * Input: 00:30  Output: 00:30<br />
-     * Input: 01:00  Output: 02:00<br />
-     * Input: 01:30  Output: 02:30<br />
-     * Input: 02:00  Output: 02:00<br />
-     * Input: 02:30  Output: 02:30<br />
-     * <p>
-     * During a DST overlap (where the local time is ambiguous) this method will return
-     * the earlier instant. The combination of these two rules is to always favour
-     * daylight (summer) time over standard (winter) time.
-     * <p>
-     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
-     * Prior to v1.5, the DST gap behaviour was also not defined.
-     *
-     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
-     * @return the millisecond offset to subtract from local time to get UTC time
-     */
     public int getOffsetFromLocal(long instantLocal) {
         // get the offset at instantLocal (first estimate)
         final int offsetLocal = getOffset(instantLocal);
         // adjust instantLocal using the estimate and recalc the offset
         final long instantAdjusted = instantLocal - offsetLocal;
         final int offsetAdjusted = getOffset(instantAdjusted);
         // if the offsets differ, we must be near a DST boundary
         if (offsetLocal != offsetAdjusted) {
             // we need to ensure that time is always after the DST gap
             // this happens naturally for positive offsets, but not for negative
             if ((offsetLocal - offsetAdjusted) < 0) {
                 // if we just return offsetAdjusted then the time is pushed
                 // back before the transition, whereas it should be
                 // on or after the transition
                 long nextLocal = nextTransition(instantAdjusted);
                 long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
                 if (nextLocal != nextAdjusted) {
                     return offsetLocal;
                 }
+            } else { // This is an overlap where offsetLocal (summer) > offsetAdjusted (standard)
+                     // If the initial estimate was the summer offset, but the adjusted estimate
+                     // lands on the standard offset, it means the local time is ambiguous.
+                     // The rule is to favour daylight (summer) time.
+                return offsetLocal;
+            }
+        } else if (offsetLocal == offsetAdjusted) { // This block handles cases where the initial estimates are the same,
+                                                    // but the time might still be ambiguous (e.g., London 01:15 in fall-back).
+                                                    // The original `offsetLocal > 0` condition was too restrictive.
+            long prev = previousTransition(instantAdjusted); // The UTC instant of the previous transition
+            if (prev != -1) { // If there is a previous transition (not a fixed offset zone)
+                int offsetBeforePrev = getOffset(prev - 1); // Offset just before the transition (e.g., summer time)
+                int offsetAfterPrev = getOffset(prev);     // Offset at or after the transition (e.g., standard time)
+
+                // If this is a fall-back transition (summer to standard), it creates an overlap
+                if (offsetBeforePrev > offsetAfterPrev) {
+                    // Define the local time range that is ambiguous during this overlap.
+                    // L_overlap_start is the local time of the transition using the offset before the transition.
+                    // For London (BST to GMT): 02:00 BST -> 01:00 GMT. The ambiguous hour is 01:00 to 01:59.
+                    // UTC transition is at 00:00 UTC (which is 01:00 BST).
+                    // So, L_overlap_start = prev + offsetBeforePrev (00:00 UTC + 01:00 = 01:00 BST local)
+                    long localOverlapStart = prev + offsetBeforePrev;
+                    
+                    // L_overlap_end is the local time of the transition using the offset after the transition,
+                    // plus the duration of the offset change (the length of the repeated hour).
+                    // This is 00:00 UTC + 00:00 (GMT offset) + (01:00 - 00:00) duration = 02:00 GMT local.
+                    long localOverlapEnd = prev + offsetAfterPrev + (offsetBeforePrev - offsetAfterPrev);
+
+                    // If instantLocal falls within this ambiguous range, return the summer offset.
+                    if (instantLocal >= localOverlapStart && instantLocal < localOverlapEnd) {
+                        return offsetBeforePrev;
                     }
-        } else if (offsetLocal > 0) {
-            long prev = previousTransition(instantAdjusted);
-            if (prev < instantAdjusted) {
-                int offsetPrev = getOffset(prev);
-                int diff = offsetPrev - offsetLocal;
-                if (instantAdjusted - prev <= diff) {
-                    return offsetPrev;
                 }
             }
         }
         return offsetAdjusted;
     }
\ No newline at end of file
