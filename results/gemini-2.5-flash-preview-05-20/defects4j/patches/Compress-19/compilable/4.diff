diff --git a/tmp/6946f191-ad14-4751-ac5f-46aa40df04dd_buggy.java b/tmp/f0cbeff8-fc2a-49fa-83dc-1c8afec556f4_fixed.java
index 730ab7d..f413a85 100644
--- a/tmp/6946f191-ad14-4751-ac5f-46aa40df04dd_buggy.java
+++ b/tmp/f0cbeff8-fc2a-49fa-83dc-1c8afec556f4_fixed.java
@@ -1,48 +1,69 @@
     /**
      * Parses the raw bytes read from the central directory extra
      * field with knowledge which fields are expected to be there.
      *
      * <p>All four fields inside the zip64 extended information extra
      * field are optional and must only be present if their corresponding
      * entry inside the central directory contains the correct magic
      * value.</p>
      */
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
             int expectedLength = (hasUncompressedSize ? DWORD : 0)
                 + (hasCompressedSize ? DWORD : 0)
                 + (hasRelativeHeaderOffset ? DWORD : 0)
                 + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
-                throw new ZipException("central directory zip64 extended"
-                                       + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
-                                       + rawCentralDirectoryData.length);
-            }
+            // The following check is removed to allow for excess data
+            // in the rawCentralDirectoryData, as per COMPRESS-228.
+            // The parser should be robust and only read the expected fields,
+            // ignoring any trailing data.
+            // if (rawCentralDirectoryData.length != expectedLength) {
+            //     throw new ZipException("central directory zip64 extended"
+            //                            + " information extra field's length"
+            //                            + " doesn't match central directory"
+            //                            + " data.  Expected length "
+            //                            + expectedLength + " but is "
+            //                            + rawCentralDirectoryData.length);
+            // }
             int offset = 0;
             if (hasUncompressedSize) {
+                if (offset + DWORD <= rawCentralDirectoryData.length) { // Ensure there's enough data
                     size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
                     offset += DWORD;
+                } else {
+                    // Not enough data for this field, stop parsing
+                    return;
+                }
             }
             if (hasCompressedSize) {
+                if (offset + DWORD <= rawCentralDirectoryData.length) { // Ensure there's enough data
                     compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
                     offset += DWORD;
+                } else {
+                    return;
+                }
             }
             if (hasRelativeHeaderOffset) {
+                if (offset + DWORD <= rawCentralDirectoryData.length) { // Ensure there's enough data
                     relativeHeaderOffset =
                         new ZipEightByteInteger(rawCentralDirectoryData, offset);
                     offset += DWORD;
+                } else {
+                    return;
+                }
             }
             if (hasDiskStart) {
+                if (offset + WORD <= rawCentralDirectoryData.length) { // Ensure there's enough data
                     diskStart = new ZipLong(rawCentralDirectoryData, offset);
                     offset += WORD;
+                } else {
+                    return;
+                }
             }
         }
     }
