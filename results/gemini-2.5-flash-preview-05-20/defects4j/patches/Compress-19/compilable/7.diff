diff --git a/tmp/351de3a5-0c96-4782-b84c-7af7ba64bf68_buggy.java b/tmp/f533b41b-5349-4f43-ad93-361a874f2bf3_fixed.java
index 730ab7d..5004fac 100644
--- a/tmp/351de3a5-0c96-4782-b84c-7af7ba64bf68_buggy.java
+++ b/tmp/f533b41b-5349-4f43-ad93-361a874f2bf3_fixed.java
@@ -1,48 +1,56 @@
     /**
      * Parses the raw bytes read from the central directory extra
      * field with knowledge which fields are expected to be there.
      *
      * <p>All four fields inside the zip64 extended information extra
      * field are optional and must only be present if their corresponding
      * entry inside the central directory contains the correct magic
      * value.</p>
      */
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
-                + (hasCompressedSize ? DWORD : 0)
-                + (hasRelativeHeaderOffset ? DWORD : 0)
-                + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+            // Zip64 values are 8 bytes for sizes/offsets and 4 bytes for disk number.
+            // The class's WORD (2) and DWORD (4) constants are misleading here.
+            final int ZIP64_8BYTE_SIZE = 8;
+            final int ZIP64_4BYTE_SIZE = 4; // for diskStart which is a ZipLong
+
+            int expectedLength = (hasUncompressedSize ? ZIP64_8BYTE_SIZE : 0)
+                + (hasCompressedSize ? ZIP64_8BYTE_SIZE : 0)
+                + (hasRelativeHeaderOffset ? ZIP64_8BYTE_SIZE : 0)
+                + (hasDiskStart ? ZIP64_4BYTE_SIZE : 0);
+
+            // As per COMPRESS-228, tolerate excess data in the extra field.
+            // Only throw an exception if the data is *shorter* than expected.
+            if (rawCentralDirectoryData.length < expectedLength) {
                 throw new ZipException("central directory zip64 extended"
                                        + " information extra field's length"
                                        + " doesn't match central directory"
                                        + " data.  Expected length "
                                        + expectedLength + " but is "
                                        + rawCentralDirectoryData.length);
             }
             int offset = 0;
             if (hasUncompressedSize) {
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+                offset += ZIP64_8BYTE_SIZE;
             }
             if (hasCompressedSize) {
                 compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
-                offset += DWORD;
+                offset += ZIP64_8BYTE_SIZE;
             }
             if (hasRelativeHeaderOffset) {
                 relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+                offset += ZIP64_8BYTE_SIZE;
             }
             if (hasDiskStart) {
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+                offset += ZIP64_4BYTE_SIZE;
             }
         }
     }
