diff --git a/tmp/640996f3-9db5-4edb-846f-7bbf4a00b052_buggy.java b/tmp/9c03a7d1-f282-4901-9c5f-0e35c3fe0370_fixed.java
index 730ab7d..44521a4 100644
--- a/tmp/640996f3-9db5-4edb-846f-7bbf4a00b052_buggy.java
+++ b/tmp/9c03a7d1-f282-4901-9c5f-0e35c3fe0370_fixed.java
@@ -1,48 +1,54 @@
     /**
      * Parses the raw bytes read from the central directory extra
      * field with knowledge which fields are expected to be there.
      *
      * <p>All four fields inside the zip64 extended information extra
      * field are optional and must only be present if their corresponding
      * entry inside the central directory contains the correct magic
      * value.</p>
      */
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
-                + (hasCompressedSize ? DWORD : 0)
-                + (hasRelativeHeaderOffset ? DWORD : 0)
-                + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+            // Use the actual byte sizes of the Zip64 fields.
+            // ZipEightByteInteger fields are 8 bytes, ZipLong fields are 4 bytes.
+            // The original code incorrectly used DWORD (4) and WORD (2) from ZipConstants.
+            int expectedLength = (hasUncompressedSize ? ZipEightByteInteger.BYTE_SIZE : 0)
+                + (hasCompressedSize ? ZipEightByteInteger.BYTE_SIZE : 0)
+                + (hasRelativeHeaderOffset ? ZipEightByteInteger.BYTE_SIZE : 0)
+                + (hasDiskStart ? ZipLong.BYTE_SIZE : 0);
+
+            // As per COMPRESS-228, excess data in the extra field is allowed.
+            // Only throw an exception if the actual data length is shorter than expected.
+            if (rawCentralDirectoryData.length < expectedLength) {
                 throw new ZipException("central directory zip64 extended"
                                        + " information extra field's length"
                                        + " doesn't match central directory"
                                        + " data.  Expected length "
                                        + expectedLength + " but is "
                                        + rawCentralDirectoryData.length);
             }
             int offset = 0;
             if (hasUncompressedSize) {
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+                offset += ZipEightByteInteger.BYTE_SIZE;
             }
             if (hasCompressedSize) {
                 compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
-                offset += DWORD;
+                offset += ZipEightByteInteger.BYTE_SIZE;
             }
             if (hasRelativeHeaderOffset) {
                 relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+                offset += ZipEightByteInteger.BYTE_SIZE;
             }
             if (hasDiskStart) {
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+                offset += ZipLong.BYTE_SIZE;
             }
         }
     }
