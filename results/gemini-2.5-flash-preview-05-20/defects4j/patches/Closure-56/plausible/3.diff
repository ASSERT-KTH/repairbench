diff --git a/tmp/f7cf3fac-e10c-4c2b-b8d9-bc4010faaf1b_buggy.java b/tmp/e53f4b2f-ed48-4158-95bc-142e405efc49_fixed.java
index 0ef85f2..312a8eb 100644
--- a/tmp/f7cf3fac-e10c-4c2b-b8d9-bc4010faaf1b_buggy.java
+++ b/tmp/e53f4b2f-ed48-4158-95bc-142e405efc49_fixed.java
@@ -1,50 +1,61 @@
   /**
    * Gets the source line for the indicated line number.
    *
    * @param lineNumber the line number, 1 being the first line of the file.
    * @return The line indicated. Does not include the newline at the end
    *     of the file. Returns {@code null} if it does not exist,
    *     or if there was an IO exception.
    */
   public String getLine(int lineNumber) {
     String js = "";
     try {
       // NOTE(nicksantos): Right now, this is optimized for few warnings.
       // This is probably the right trade-off, but will be slow if there
       // are lots of warnings in one file.
       js = getCode();
     } catch (IOException e) {
       return null;
     }
 
     int pos = 0;
     int startLine = 1;
 
     // If we've saved a previous offset and it's for a line less than the
     // one we're searching for, then start at that point.
     if (lineNumber >= lastLine) {
       pos = lastOffset;
       startLine = lastLine;
     }
 
     for (int n = startLine; n < lineNumber; n++) {
       int nextpos = js.indexOf('\n', pos);
       if (nextpos == -1) {
+        // If we run out of newlines before reaching the target lineNumber,
+        // it means the line does not exist.
         return null;
       }
       pos = nextpos + 1;
     }
 
     // Remember this offset for the next search we do.
     lastOffset = pos;
     lastLine = lineNumber;
 
-    if (js.indexOf('\n', pos) == -1) {
-      // If next new line cannot be found, there are two cases
-      // 1. pos already reaches the end of file, then null should be returned
-      // 2. otherwise, return the contents between pos and the end of file.
-        return null;
+    int nextNewLinePos = js.indexOf('\n', pos);
+
+    if (nextNewLinePos == -1) {
+      // If the next new line cannot be found, there are two cases:
+      // 1. 'pos' is at or beyond the end of the string (e.g., requested line number
+      //    is greater than the actual number of lines).
+      // 2. 'pos' is within the string, and the rest of the string is the last line
+      //    (which does not end with a newline character).
+      if (pos >= js.length()) {
+        return null; // Case 1: Line does not exist (or is empty and beyond content)
       } else {
-      return js.substring(pos, js.indexOf('\n', pos));
+        return js.substring(pos); // Case 2: Return content from 'pos' to end of file
+      }
+    } else {
+      // A newline was found, so the line is from 'pos' up to 'nextNewLinePos'.
+      return js.substring(pos, nextNewLinePos);
     }
   }
\ No newline at end of file
