diff --git a/tmp/3cea3687-71a3-41c1-8274-858d4a1e9246_buggy.java b/tmp/83aa7ffb-2b14-45de-9f2a-910d3196fcb1_fixed.java
index 0ef85f2..b354465 100644
--- a/tmp/3cea3687-71a3-41c1-8274-858d4a1e9246_buggy.java
+++ b/tmp/83aa7ffb-2b14-45de-9f2a-910d3196fcb1_fixed.java
@@ -1,50 +1,74 @@
   /**
    * Gets the source line for the indicated line number.
    *
    * @param lineNumber the line number, 1 being the first line of the file.
    * @return The line indicated. Does not include the newline at the end
    *     of the file. Returns {@code null} if it does not exist,
    *     or if there was an IO exception.
    */
   public String getLine(int lineNumber) {
     String js = "";
     try {
       // NOTE(nicksantos): Right now, this is optimized for few warnings.
       // This is probably the right trade-off, but will be slow if there
       // are lots of warnings in one file.
       js = getCode();
     } catch (IOException e) {
       return null;
     }
 
+    // Initialize pos and startLine. These will be updated if an optimization is possible.
     int pos = 0;
     int startLine = 1;
 
-    // If we've saved a previous offset and it's for a line less than the
-    // one we're searching for, then start at that point.
-    if (lineNumber >= lastLine) {
+    // If we've saved a previous offset and it's for a line less than or equal to
+    // the one we're searching for, then start at that point.
+    // The optimization only applies if 'lastLine' has been set to a valid line number (> 0),
+    // and the requested 'lineNumber' is not before 'lastLine'.
+    if (lastLine > 0 && lineNumber >= lastLine) {
       pos = lastOffset;
       startLine = lastLine;
     }
 
+    // Advance 'pos' to the beginning of the requested line number.
+    // The loop iterates (lineNumber - startLine) times.
+    // If lineNumber is 1, startLine is 1, the loop condition (n < lineNumber) is (1 < 1) which is false,
+    // so 'pos' remains at its initial value (0 or lastOffset if optimized).
     for (int n = startLine; n < lineNumber; n++) {
       int nextpos = js.indexOf('\n', pos);
       if (nextpos == -1) {
+        // Reached end of file before finding the desired line number.
         return null;
       }
-      pos = nextpos + 1;
+      pos = nextpos + 1; // Move 'pos' past the newline character to the start of the next line
     }
 
     // Remember this offset for the next search we do.
     lastOffset = pos;
     lastLine = lineNumber;
 
-    if (js.indexOf('\n', pos) == -1) {
-      // If next new line cannot be found, there are two cases
-      // 1. pos already reaches the end of file, then null should be returned
-      // 2. otherwise, return the contents between pos and the end of file.
+    // Now, 'pos' is at the start of the target line.
+    // Find the end of the line (the first newline character after 'pos').
+    int endOfLinePos = js.indexOf('\n', pos);
+
+    if (endOfLinePos == -1) {
+      // No more newline characters found after 'pos'.
+      // This means 'pos' either points to the start of the last line of the file
+      // (which may or may not end with a newline), or 'pos' is beyond the string length.
+      if (pos >= js.length()) {
+        // If 'pos' is at or beyond the string length, the requested line does not exist.
+        // This case handles requests for lines beyond the actual file content,
+        // or if the file is empty.
         return null;
       } else {
-      return js.substring(pos, js.indexOf('\n', pos));
+        // 'pos' is within the string, and there's no newline after it.
+        // This means we are on the last line of the file, which does not end with a newline.
+        // Return the rest of the string from 'pos'.
+        return js.substring(pos);
+      }
+    } else {
+      // A newline character was found, so the line ends at 'endOfLinePos'.
+      // Return the substring from 'pos' up to (but not including) the newline.
+      return js.substring(pos, endOfLinePos);
     }
   }
\ No newline at end of file
