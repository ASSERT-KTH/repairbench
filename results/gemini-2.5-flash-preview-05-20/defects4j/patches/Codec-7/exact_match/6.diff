diff --git a/tmp/3456ed8b-33da-42af-b33a-c8d1cbbe7d6b_buggy.java b/tmp/a9adc550-1d2b-4895-a83c-962078a138d4_fixed.java
index 31c6a4b..491394c 100644
--- a/tmp/3456ed8b-33da-42af-b33a-c8d1cbbe7d6b_buggy.java
+++ b/tmp/a9adc550-1d2b-4895-a83c-962078a138d4_fixed.java
@@ -1,11 +1,18 @@
     /**
      * Encodes binary data using the base64 algorithm into 76 character blocks separated by CRLF.
      *
      * @param binaryData
      *            binary data to encode
      * @return String containing Base64 characters.
      * @since 1.4
      */    
     public static String encodeBase64String(byte[] binaryData) {
-        return StringUtils.newStringUtf8(encodeBase64(binaryData, true));
+        // The Javadoc for this method states "into 76 character blocks separated by CRLF".
+        // However, the failing tests (e.g., testRfc4648Section10Encode and testByteToStringVariations)
+        // expect un-chunked Base64 output (i.e., no line breaks).
+        // The `encodeBase64(binaryData, true)` call includes line breaks (`true` means chunked).
+        // To pass the tests expecting un-chunked output, the `isChunked` parameter must be `false`.
+        // This aligns `encodeBase64String` with common RFC 4648 expectations for simple string encoding
+        // and with other `encodeToString` variations in the tests that use a Base64 instance with `lineLength = 0`.
+        return StringUtils.newStringUtf8(encodeBase64(binaryData, false));
     }
\ No newline at end of file
