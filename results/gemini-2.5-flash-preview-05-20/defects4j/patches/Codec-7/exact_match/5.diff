diff --git a/tmp/1b592767-dd32-499a-bb1d-d38063255bc9_buggy.java b/tmp/cd38f6ef-04a8-4785-ba8c-9fb7be0cea51_fixed.java
index 31c6a4b..285921e 100644
--- a/tmp/1b592767-dd32-499a-bb1d-d38063255bc9_buggy.java
+++ b/tmp/cd38f6ef-04a8-4785-ba8c-9fb7be0cea51_fixed.java
@@ -1,11 +1,23 @@
     /**
      * Encodes binary data using the base64 algorithm into 76 character blocks separated by CRLF.
      *
      * @param binaryData
      *            binary data to encode
      * @return String containing Base64 characters.
      * @since 1.4
      */    
     public static String encodeBase64String(byte[] binaryData) {
-        return StringUtils.newStringUtf8(encodeBase64(binaryData, true));
+        // The original implementation called encodeBase64 with `true` for `useChunking`.
+        // This caused the output to include a CRLF line ending, even for short inputs,
+        // which conflicted with the expectations of tests like `testRfc4648Section10Encode`
+        // and `testByteToStringVariations`. These tests expect a plain, unchunked Base64 string
+        // according to RFC 4648 for basic encoding, which does not mandate line breaks.
+        //
+        // To align with the test expectations and the common interpretation of a Base64 String
+        // utility method (i.e., producing a single, unchunked string),
+        // we set `useChunking` to `false`.
+        // If chunked output is specifically desired (e.g., for MIME compliance),
+        // the `encodeBase64(byte[], boolean)` method should be called directly
+        // with `true` for the chunking parameter, and then converted to a String.
+        return StringUtils.newStringUtf8(encodeBase64(binaryData, false));
     }
\ No newline at end of file
