diff --git a/tmp/72a83ecf-f91f-431e-a837-297da279640f_buggy.java b/tmp/9eed4d67-f10a-4242-ad03-2c0770c4e79c_fixed.java
index 4e7ca9e..21998ab 100644
--- a/tmp/72a83ecf-f91f-431e-a837-297da279640f_buggy.java
+++ b/tmp/9eed4d67-f10a-4242-ad03-2c0770c4e79c_fixed.java
@@ -1,55 +1,30 @@
-    /**
-     * Handles 'G' cases
-     */
-    private int handleG(String value, 
-                        DoubleMetaphoneResult result, 
-                        int index, 
-                        boolean slavoGermanic) {
-        if (charAt(value, index + 1) == 'H') {
-            index = handleGH(value, result, index);
-        } else if (charAt(value, index + 1) == 'N') {
-            if (index == 1 && isVowel(charAt(value, 0)) && !slavoGermanic) {
-                result.append("KN", "N");
-            } else if (!contains(value, index + 2, 2, "EY") && 
-                       charAt(value, index + 1) != 'Y' && !slavoGermanic) {
-                result.append("N", "KN");
-            } else {
-                result.append("KN");
-            }
-            index = index + 2;
-        } else if (contains(value, index + 1, 2, "LI") && !slavoGermanic) {
-            result.append("KL", "L");
-            index += 2;
-        } else if (index == 0 && (charAt(value, index + 1) == 'Y' || contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {
-            //-- -ges-, -gep-, -gel-, -gie- at beginning --//
-            result.append('K', 'J');
-            index += 2;
-        } else if ((contains(value, index + 1, 2, "ER") || 
-                    charAt(value, index + 1) == 'Y') &&
-                   !contains(value, 0, 6, "DANGER", "RANGER", "MANGER") &&
-                   !contains(value, index - 1, 1, "E", "I") && 
-                   !contains(value, index - 1, 3, "RGY", "OGY")) {
-            //-- -ger-, -gy- --//
-            result.append('K', 'J');
-            index += 2;
-        } else if (contains(value, index + 1, 1, "E", "I", "Y") || 
-                   contains(value, index - 1, 4, "AGGI", "OGGI")) {
-            //-- Italian "biaggi" --//
         if ((contains(value, 0 ,4, "VAN ", "VON ") || contains(value, 0, 3, "SCH")) || contains(value, index + 1, 2, "ET")) {
             //-- obvious germanic --//
             result.append('K');
-            } else if (contains(value, index + 1, 4, "IER")) {
+        } else if (contains(value, index + 1, 4, "IER")) { // <-- Bug in this condition's length
             result.append('J');
         } else {
             result.append('J', 'K');
         }
-            index += 2;
-        } else if (charAt(value, index + 1) == 'G') {
-            index += 2;
-            result.append('K');
-        } else {
-            index++;
-            result.append('K');
-        }
-        return index;
-    }
+    ```
+3.  For "Angier":
+    *   The first `if` condition evaluates to `false`.
+    *   The `else if` condition `contains(value, index + 1, 4, "IER")` is checked.
+        *   `index + 1` is `3`.
+        *   `length` is `4`.
+        *   `value.length()` is `6`.
+        *   The `contains` helper method checks `start + length <= value.length()`. Here, `3 + 4 = 7`, which is not `<=` `6`.
+        *   Due to this bounds check, `contains("Angier", 3, 4, "IER")` returns `false`.
+4.  Since the `else if` condition is `false`, the code falls into the final `else` block: `result.append('J', 'K');`.
+5.  This call appends `J` to the primary encoding and `K` to the alternate encoding. For "Angier", this results in `ANJR` (primary) and `ANKR` (alternate).
+
+The provided test failure message is `junit.framework.ComparisonFailure: Test [19]=Angier expected:<AN[J]R> but was:<AN[K]R>`.
+This means:
+*   The current code (`but was`) produces `ANKR` for the alternate. Our trace confirms this (`J/K` mapping for `G`).
+*   The test (`expected`) wants `ANJR` for the alternate. This means `J/J` mapping for `G`.
+
+To achieve the `J/J` mapping for "Angier", the code must execute `result.append('J');`. This happens in the `else if (contains(value, index + 1, 4, "IER"))` branch.
+
+Therefore, the condition `contains(value, index + 1, 4, "IER")` must evaluate to `true` for "Angier". The substring "ier" (after `G`) has a length of 3, not 4. The `contains` method expects the `length` argument to be the actual length of the target string to check.
+
+The fix is to change the length argument from `4` to `3` in this condition:
