diff --git a/tmp/964de3eb-ea8f-4f69-b74f-3500386a6d39_buggy.java b/tmp/2b45543e-94f8-4c78-b86b-59b45b57116e_fixed.java
index b2db1d6..f8c4a2d 100644
--- a/tmp/964de3eb-ea8f-4f69-b74f-3500386a6d39_buggy.java
+++ b/tmp/2b45543e-94f8-4c78-b86b-59b45b57116e_fixed.java
@@ -1,29 +1,40 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
+        
+        // [Issue#515]: To handle multi-level mixin merging correctly,
+        // we need to process mixins from the most general (super-classes)
+        // to the most specific (sub-classes). This ensures that methods
+        // from more specific mixins correctly override those from less
+        // specific mixins when added to `mixIns` (which uses Map.put()
+        // and thus replaces entries with the same key).
+        Collections.reverse(parents); 
+        
         for (Class<?> mixin : parents) {
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
                 AnnotatedMethod am = methods.find(m);
                 /* Do we already have a method to augment (from sub-class
                  * that will mask this mixIn)? If so, add if visible
                  * without masking (no such annotation)
                  */
                 if (am != null) {
                     _addMixUnders(m, am);
                     /* Otherwise will have precedence, but must wait
                      * until we find the real method (mixIn methods are
                      * just placeholder, can't be called)
                      */
                 } else {
                     // Well, or, as per [Issue#515], multi-level merge within mixins...
+                    // The 'parents' list is now reversed, so add() will correctly
+                    // overwrite less specific mixin methods with more specific ones.
                     mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
\ No newline at end of file
