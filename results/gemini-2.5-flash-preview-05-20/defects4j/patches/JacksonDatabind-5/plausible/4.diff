diff --git a/tmp/dc749d5f-75ef-4360-bf1a-b3d3d04892c8_buggy.java b/tmp/74748d44-7258-44f3-90ff-78e66f23a13d_fixed.java
index b2db1d6..44e4aeb 100644
--- a/tmp/dc749d5f-75ef-4360-bf1a-b3d3d04892c8_buggy.java
+++ b/tmp/74748d44-7258-44f3-90ff-78e66f23a13d_fixed.java
@@ -1,29 +1,38 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
         for (Class<?> mixin : parents) {
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
                 AnnotatedMethod am = methods.find(m);
                 /* Do we already have a method to augment (from sub-class
                  * that will mask this mixIn)? If so, add if visible
                  * without masking (no such annotation)
                  */
                 if (am != null) {
                     _addMixUnders(m, am);
                     /* Otherwise will have precedence, but must wait
                      * until we find the real method (mixIn methods are
                      * just placeholder, can't be called)
                      */
                 } else {
                     // Well, or, as per [Issue#515], multi-level merge within mixins...
+                    // Check if a more specific mixin method with same signature already exists.
+                    // If so, apply annotations from current (less specific) mixin method to it.
+                    AnnotatedMethod mixInAm = mixIns.find(m);
+                    if (mixInAm != null) {
+                        _addMixUnders(m, mixInAm);
+                    } else {
+                        // No existing method in target class or more specific mixin,
+                        // so add this method from the mixin.
                         mixIns.add(_constructMethod(m));
                     }
                 }
             }
         }
+    }
\ No newline at end of file
