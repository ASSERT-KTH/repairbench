diff --git a/tmp/cb0aa444-c873-432f-a070-089f7719e8e9_buggy.java b/tmp/735551fd-f9be-4125-9b7d-85d1cfd0d6f9_fixed.java
index b2db1d6..78155b3 100644
--- a/tmp/cb0aa444-c873-432f-a070-089f7719e8e9_buggy.java
+++ b/tmp/735551fd-f9be-4125-9b7d-85d1cfd0d6f9_fixed.java
@@ -1,29 +1,46 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
+        // [databind#137] Ensure proper merging of multi-level mixins
+        // findSuperTypes will add parent classes to `parents` list.
+        // It's `ClassUtil.findSuperTypes(mixInCls, targetClass, parents);`
+        // which means `parents` will be ordered from mixInCls to targetClass/Object.
+        // Example: [PersonMixin, BaseMixin, Object] if Person.class is not parent of PersonMixin.
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
-        for (Class<?> mixin : parents) {
+
+        // So that we get "parent-most" first (until targetClass or Object),
+        // let's iterate from end to start.
+        // This ensures that annotations from more general mixins (e.g., BaseMixin) are processed first,
+        // and then potentially overridden/augmented by more specific mixins (e.g., PersonMixin).
+        for (int i = parents.size(); --i >= 0; ) {
+            Class<?> mixin = parents.get(i);
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
-                AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
+                
+                // [databind#515] Multi-level mixins: must ensure mixin method itself gets merged
+                // Check if *already* found in mixIns (from a more specific mixin already processed)
+                AnnotatedMethod am = mixIns.find(m);
                 if (am != null) {
+                    // If found, merge current mixin's annotations into existing mixin method.
+                    // This handles scenarios where a method from a super-mixin is being augmented
+                    // by a sub-mixin's version (even if the sub-mixin doesn't add new annotations).
                     _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
                 } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                    // Otherwise, construct a new AnnotatedMethod for this mixin method and add it.
                     mixIns.add(_constructMethod(m));
                 }
+                
+                // And now also apply to actual target method (if it exists).
+                // This updates the 'AnnotatedMethod' object which is already in 'methods' map
+                // (representing the target class's methods).
+                AnnotatedMethod actualMethod = methods.find(m);
+                if (actualMethod != null) {
+                    _addMixUnders(m, actualMethod);
+                }
             }
         }
     }
