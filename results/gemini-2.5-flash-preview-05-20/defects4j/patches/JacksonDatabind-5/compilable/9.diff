diff --git a/tmp/a297d8dc-79b9-4b2a-9a53-64c439871358_buggy.java b/tmp/b0e6f23a-7099-4c7c-ad7d-f8047c7d8a29_fixed.java
index b2db1d6..9557ce6 100644
--- a/tmp/a297d8dc-79b9-4b2a-9a53-64c439871358_buggy.java
+++ b/tmp/b0e6f23a-7099-4c7c-ad7d-f8047c7d8a29_fixed.java
@@ -1,29 +1,31 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
         for (Class<?> mixin : parents) {
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
                 AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
+
+                // As per [Issue#515], we need to ensure that mix-in methods
+                // for interfaces are also included, otherwise it's easy to miss annotations
+                // for concrete implementation.
+                // Previously, mixin methods were ONLY added to 'mixIns' if 'am' was null.
+                // Now, they are always added to 'mixIns', regardless of whether a matching
+                // method exists in 'methods' (targetClass).
+                mixIns.add(_constructMethod(m));
+
+                /* If we already have a method to augment (from sub-class
+                 * that will mask this mixIn, or target class itself),
+                 * apply mix-in annotations on top of it.
                  */
                 if (am != null) {
                     _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
-                } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
-                        mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
\ No newline at end of file
