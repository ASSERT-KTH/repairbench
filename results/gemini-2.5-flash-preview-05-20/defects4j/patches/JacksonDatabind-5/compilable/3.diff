diff --git a/tmp/a7f84a03-f473-497f-816c-5b72f9703495_buggy.java b/tmp/20d20107-ed2c-4f89-955b-8e230ffdba17_fixed.java
index b2db1d6..542e62a 100644
--- a/tmp/a7f84a03-f473-497f-816c-5b72f9703495_buggy.java
+++ b/tmp/20d20107-ed2c-4f89-955b-8e230ffdba17_fixed.java
@@ -1,29 +1,42 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
         List<Class<?>> parents = new ArrayList<Class<?>>();
+        
+        // Start with the specific mix-in class.
         parents.add(mixInCls);
-        ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
+        
+        // Add all its super-types (classes and interfaces) up to Object.class.
+        // ClassUtil.findSuperTypes will add elements in specific-to-general order (e.g., direct super-class, then its super-class, etc.).
+        // It does NOT include the starting `mixInCls` itself, which is why we add it manually first.
+        ClassUtil.findSuperTypes(mixInCls, Object.class, parents);
+        
+        // To ensure correct merging order (general to specific, so more specific mix-in annotations override earlier ones),
+        // reverse the list. This makes the iteration go from base classes of mix-ins to the mixInCls itself.
+        Collections.reverse(parents);
+
         for (Class<?> mixin : parents) {
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
                 AnnotatedMethod am = methods.find(m);
                 /* Do we already have a method to augment (from sub-class
                  * that will mask this mixIn)? If so, add if visible
                  * without masking (no such annotation)
                  */
                 if (am != null) {
+                    // When iterating from general to specific, _addMixUnders will first apply annotations
+                    // from super-mixins, then from sub-mixins. This allows sub-mixins to effectively
+                    // override or augment annotations applied by their super-mixins, ensuring correct precedence.
                     _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
                 } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                    // This else branch handles methods that are introduced solely by the mix-in hierarchy
+                    // and do not have a corresponding method on the targetClass.
+                    // `AnnotatedMethodMap.add` will merge/replace based on signature, so processing
+                    // from general to specific ensures the most specific mix-in's annotations prevail.
                     mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
\ No newline at end of file
