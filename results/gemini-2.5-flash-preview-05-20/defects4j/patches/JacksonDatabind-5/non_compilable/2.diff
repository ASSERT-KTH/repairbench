diff --git a/tmp/29b1c86c-759b-4698-bbb5-1a435ab9be5d_buggy.java b/tmp/d43fa9f3-e503-4fcd-bd17-fa21bd4daaa6_fixed.java
index b2db1d6..23e505a 100644
--- a/tmp/29b1c86c-759b-4698-bbb5-1a435ab9be5d_buggy.java
+++ b/tmp/d43fa9f3-e503-4fcd-bd17-fa21bd4daaa6_fixed.java
@@ -1,29 +1,44 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
         for (Class<?> mixin : parents) {
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
+                // [Issue#515]: Need to create AnnotatedMethod for mixin method itself
+                // to correctly carry annotations for overriding.
+                AnnotatedMethod candidate = _constructMethod(m);
+                if (candidate == null) { // Should not happen but for safety
+                    continue;
+                }
+
                 AnnotatedMethod am = methods.find(m);
                 /* Do we already have a method to augment (from sub-class
                  * that will mask this mixIn)? If so, add if visible
                  * without masking (no such annotation)
                  */
                 if (am != null) {
+                    // 1. Merge metadata (like access) from mixin method 'm' into existing method 'am'
+                    // This involves setting accessible flags and potentially adding some annotations
+                    // based on AnnotationIntrospector's merging rules.
                     _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
+
+                    // 2. Crucially, replace the annotation set of 'am' with 'candidate's annotations.
+                    // This ensures that annotations directly defined on the current mixin method 'm'
+                    // take precedence over any merged annotations from super-mixins or previous sources.
+                    am.setAnnotations(candidate.getAnnotations());
                 } else {
+                    // If target class does not have this method, add the mixin method as new.
+                    // Only add if not already present from a super-mixin (precedence).
                     // Well, or, as per [Issue#515], multi-level merge within mixins...
-                        mixIns.add(_constructMethod(m));
+                    if (mixIns.find(m) == null) {
+                        mixIns.add(candidate);
+                    }
                 }
             }
         }
     }
\ No newline at end of file
