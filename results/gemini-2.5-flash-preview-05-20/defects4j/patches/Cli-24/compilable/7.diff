diff --git a/tmp/7977bdda-4b31-43e4-900b-19e3f7bf6e90_buggy.java b/tmp/13549117-b75a-4b89-a700-dc6cdf1a4ca5_fixed.java
index 229b3e7..6c03410 100644
--- a/tmp/7977bdda-4b31-43e4-900b-19e3f7bf6e90_buggy.java
+++ b/tmp/13549117-b75a-4b89-a700-dc6cdf1a4ca5_fixed.java
@@ -1,55 +1,70 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
+        // Fix for CLI-162: avoid infinite loop and IllegalStateException
+        // if there's no room for text content.
+        // Ensures at least 1 character of content space (width - nextLineTabStop >= 1).
+        if (nextLineTabStop >= width - 1)
+        {
+            nextLineTabStop = 0; // If no room, effectively remove indent for wrapping purposes.
+        }
+
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
-
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            String remainingText = text.substring(pos).trim();
+            
+            // Fix: If there's no remaining text, break the loop
+            if (remainingText.isEmpty()) {
+                break;
+            }
+
+            text = padding + remainingText;
+            
+            // Fix: findWrapPos should start searching from nextLineTabStop
+            // as the text now includes the padding.
+            pos = findWrapPos(text, width, nextLineTabStop);
 
             if (pos == -1)
             {
                 sb.append(text);
 
                 return sb;
             }
             
+            // This condition handles cases where findWrapPos might return a position
+            // within the padding area (e.g., when effective content width is very small).
+            // Forces a break at the total width.
             if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
             {
                 pos = width;
             }
 
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
+        return sb; // Ensure sb is always returned at the end of the method if loop breaks
     }
