diff --git a/tmp/6b7c8cf4-908b-4db5-9fa9-0e06ad0b8106_buggy.java b/tmp/b885e165-5d5e-4327-91d7-cdb537dd13ad_fixed.java
index 229b3e7..a9f1f97 100644
--- a/tmp/6b7c8cf4-908b-4db5-9fa9-0e06ad0b8106_buggy.java
+++ b/tmp/b885e165-5d5e-4327-91d7-cdb537dd13ad_fixed.java
@@ -1,55 +1,64 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
+     * @param width The number of characters to display per line (this is the effective content width, not total line width)
+     * @param nextLineTabStop The position on the next line for the first tab (this is the absolute indent for all wrapped lines)
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
-        int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
-        }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Create the padding string once based on the absolute indent.
+        // This padding will be applied to every line of the wrapped text.
         final String padding = createPadding(nextLineTabStop);
 
+        // Trim trailing whitespace from the initial text.
+        // The original method used rtrim here, so we maintain that.
+        text = rtrim(text);
+
+        int pos; // Variable to store the calculated wrap position.
+
+        // Loop until all of the text has been processed and appended to the StringBuffer.
         while (true)
         {
-            text = padding + text.substring(pos).trim();
+            // Find the position to wrap the current 'text' segment.
+            // 'width' here represents the effective content width available for the text itself
+            // after the fixed 'padding' has been applied externally to the StringBuffer.
             pos = findWrapPos(text, width, 0);
 
-            if (pos == -1)
+            // If pos == -1, it means the remaining 'text' segment fits entirely within the 'width'
+            // without needing a wrap. If pos >= text.length(), it means 'text' is exhausted or already
+            // shorter than 'width'.
+            if (pos == -1 || pos >= text.length())
             {
-                sb.append(text);
+                // If there is any remaining text, append it with the calculated padding.
+                if (!text.isEmpty())
+                {
+                    sb.append(padding).append(text);
+                }
+                break; // All text has been rendered, exit the loop.
+            }
+
+            // Append the current line segment to the StringBuffer.
+            // Each segment is prefixed by the determined 'padding'.
+            // The segment itself is the part of 'text' from index 0 up to 'pos'.
+            sb.append(padding).append(text.substring(0, pos)).append(defaultNewLine);
+
+            // Prepare for the next iteration:
+            // Take the remaining part of the text (from 'pos' onwards) and trim any leading/trailing whitespace.
+            // This 'trim()' ensures that subsequent lines don't start with leftover spaces from the previous wrap point.
+            text = text.substring(pos).trim();
+
+            // If the remaining text becomes empty after trimming, it means all content has been processed.
+            if (text.isEmpty())
+            {
+                break; // Exit the loop.
+            }
+        }
 
         return sb;
     }
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
