diff --git a/tmp/e9f645a0-82e0-40ff-8869-003b41df60d4_buggy.java b/tmp/103aa3c6-97cb-4742-a5e3-c64b0bd8e94c_fixed.java
index 229b3e7..3868f25 100644
--- a/tmp/e9f645a0-82e0-40ff-8869-003b41df60d4_buggy.java
+++ b/tmp/103aa3c6-97cb-4742-a5e3-c64b0bd8e94c_fixed.java
@@ -1,55 +1,71 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
-        int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
-        }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
+        // This check prevents an infinite loop if the padding for subsequent lines
+        // consumes all available width, leaving no room for content.
         if (nextLineTabStop >= width)
         {
-            // stops infinite loop happening
             throw new IllegalStateException("Total width is less than the width of the argument and indent " +
                                             "- no room for the description");
         }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // First line: text is unpadded, width is the total line width.
+        // findWrapPos will try to fit as much as possible up to 'width'.
+        int pos = findWrapPos(text, width, 0);
+
+        if (pos == -1) // Entire text fits on the first line
+        {
+            sb.append(rtrim(text));
+            return sb;
+        }
+        // Append the first line, trimmed, followed by a newline
+        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+
+        // Prepare padding for subsequent lines
         final String padding = createPadding(nextLineTabStop);
+        // Calculate the effective width for content on subsequent lines.
+        // This is the total line width minus the padding.
+        final int effectiveWidth = width - nextLineTabStop;
+
+        // The unrendered portion of the text after the first line.
+        String currentTextToRender = text.substring(pos).trim();
 
         while (true)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
+            // If no more text, we're done
+            if (currentTextToRender.isEmpty())
             {
-                sb.append(text);
-
-                return sb;
+                break; 
             }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+            // Find wrap position within the current segment of text, using the effective content width.
+            // currentTextToRender is already trimmed and does not contain padding.
+            pos = findWrapPos(currentTextToRender, effectiveWidth, 0);
+
+            if (pos == -1) // Current segment fits on one line (after padding)
             {
-                pos = width;
+                // Prepend padding, then append the remaining text.
+                sb.append(padding).append(currentTextToRender);
+                return sb;
             }
             
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            // Append the padded line, trimmed, followed by a newline.
+            // rtrim is applied to the content portion only, so it won't affect the padding.
+            sb.append(padding).append(rtrim(currentTextToRender.substring(0, pos))).append(defaultNewLine);
+            
+            // Update the text to be rendered for the next iteration
+            currentTextToRender = currentTextToRender.substring(pos).trim();
         }
+        return sb; 
     }
