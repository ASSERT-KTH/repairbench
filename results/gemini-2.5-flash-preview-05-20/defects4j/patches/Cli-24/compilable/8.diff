diff --git a/tmp/0b7bb54f-e0aa-4647-93dd-2c451461d04b_buggy.java b/tmp/cf06b791-236b-4db8-b0a6-9b7e9aaef379_fixed.java
index 229b3e7..3dc2d3e 100644
--- a/tmp/0b7bb54f-e0aa-4647-93dd-2c451461d04b_buggy.java
+++ b/tmp/cf06b791-236b-4db8-b0a6-9b7e9aaef379_fixed.java
@@ -1,55 +1,68 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
+        // First line: find wrap position within the original text and width.
+        // The padding for the first line is handled by the calling method (e.g., renderDescription).
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
+        
+        // Append the first line content
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // For all subsequent lines, apply padding and re-wrap.
+        // The effective width for the actual text content on subsequent lines
+        // is 'width - nextLineTabStop'.
+        // If this value is 0 or negative, we must allow at least one character
+        // per line to prevent infinite loops or empty lines when characters
+        // are expected (as per CLI-162 test case).
         final String padding = createPadding(nextLineTabStop);
         
+        // The actual width available for text content after the indent on subsequent lines
+        // Ensure at least 1 character can be printed, even if width - nextLineTabStop is 0 or less.
+        int effectiveContentWidth = Math.max(1, width - nextLineTabStop);
+
+        // The remaining text to be processed, starting from 'pos' of the original text.
+        // Trim here to handle potential leading whitespace from the previous substring.
+        String remainingText = text.substring(pos).trim();
+
         while (true)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            if (remainingText.isEmpty()) {
+                // All text has been rendered
+                break; 
+            }
+
+            // Find wrap position in the 'remainingText' using the 'effectiveContentWidth'
+            pos = findWrapPos(remainingText, effectiveContentWidth, 0);
 
             if (pos == -1)
             {
-                sb.append(text);
+                // All remaining text fits on one line after padding.
+                sb.append(padding).append(remainingText);
+                break; // Exit the loop
+            }
             
+            // Append padding + the wrapped part of the remaining text
+            sb.append(padding).append(rtrim(remainingText.substring(0, pos))).append(defaultNewLine);
+            
+            // Update remainingText for the next iteration, trimming again
+            remainingText = remainingText.substring(pos).trim();
+        }
         return sb;
     }
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
