diff --git a/tmp/a0da73a1-8c4f-4263-90b7-a64ddc8bc38d_buggy.java b/tmp/c2c984f3-cbe3-4d37-a561-23f50b85717d_fixed.java
index 229b3e7..e84be92 100644
--- a/tmp/a0da73a1-8c4f-4263-90b7-a64ddc8bc38d_buggy.java
+++ b/tmp/c2c984f3-cbe3-4d37-a561-23f50b85717d_fixed.java
@@ -1,55 +1,70 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
+        // Calculate the effective width available for the text content on subsequent lines.
+        // This accounts for the `nextLineTabStop` (indent).
+        final int effectiveWidth = width - nextLineTabStop;
+
+        // If the effective width is zero or negative, it means there's no space
+        // for the actual description text after considering the indent.
+        // This is an unrenderable state, thus an IllegalStateException is thrown.
+        if (effectiveWidth <= 0)
         {
-            // stops infinite loop happening
             throw new IllegalStateException("Total width is less than the width of the argument and indent " +
                                             "- no room for the description");
         }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // All following lines must be padded with nextLineTabStop space characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
+            // Prepend the padding to the remaining text for subsequent lines.
             text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            
+            // Find the wrap position for the new text.
+            // The `findWrapPos` method should operate on the 'effectiveWidth'
+            // because the `text` parameter now includes the padding.
+            pos = findWrapPos(text, effectiveWidth, 0);
 
             if (pos == -1)
             {
                 sb.append(text);
 
                 return sb;
             }
             
+            // This is an existing safeguard to prevent cases where findWrapPos
+            // might suggest a wrap point inside the padding (e.g., pos == nextLineTabStop - 1)
+            // when the overall text length (including padding) is still greater than
+            // the total line width. In such cases, it forces the line to fill up
+            // to the total width.
             if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
             {
                 pos = width;
             }
 
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
