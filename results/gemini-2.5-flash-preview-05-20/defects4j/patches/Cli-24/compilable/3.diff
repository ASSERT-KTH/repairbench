diff --git a/tmp/8f365ea3-8ce2-44f1-ba8f-ed2b02669d4d_buggy.java b/tmp/16143317-e16f-4997-9722-347bf10b4c20_fixed.java
index 229b3e7..296221e 100644
--- a/tmp/8f365ea3-8ce2-44f1-ba8f-ed2b02669d4d_buggy.java
+++ b/tmp/16143317-e16f-4997-9722-347bf10b4c20_fixed.java
@@ -1,55 +1,77 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
-        int pos = findWrapPos(text, width, 0);
+        // Calculate the effective width for the content itself.
+        // 'width' is assumed to be the total screen width, and 'nextLineTabStop' is the indent.
+        int effectiveContentWidth = width - nextLineTabStop;
 
-        if (pos == -1)
+        // Ensure effectiveContentWidth is at least 1.
+        // If the indent consumes all or more than the screen width,
+        // default to 1 character width to allow single-character wrapping.
+        if (effectiveContentWidth <= 0)
+        {
+            effectiveContentWidth = 1;
+        }
+
+        // The original `if (nextLineTabStop >= width)` check for IllegalStateException is removed.
+        // This condition now indicates a valid scenario where text is wrapped into a very narrow column.
+
+        // Append padding for the first line.
+        // This is necessary to match the expected output where the description starts indented.
+        sb.append(createPadding(nextLineTabStop));
+        
+        // Find wrap position for the first segment of text
+        int pos = findWrapPos(text, effectiveContentWidth, 0);
+
+        if (pos == -1) // Text fits on the first line within effective content width
         {
             sb.append(rtrim(text));
-
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Prepare padding string for subsequent lines
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            // Update text to remaining content, trimming leading/trailing whitespace.
+            // This 'text' variable now holds only the actual content, no artificial padding.
+            text = text.substring(pos).trim();
 
-            if (pos == -1)
+            if (text.isEmpty()) // No more text to render
             {
-                sb.append(text);
-
                 return sb;
             }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+            // Append padding for the new line before its content
+            sb.append(padding);
+
+            // Find wrap position for the remaining text using the effective width.
+            // 'findWrapPos' operates on the actual content 'text'.
+            pos = findWrapPos(text, effectiveContentWidth, 0);
+
+            if (pos == -1) // Remaining text fits on a single line
             {
-                pos = width;
+                sb.append(rtrim(text));
+                return sb;
             }
             
+            // The original conditional `if ( (text.length() > width) && (pos == nextLineTabStop - 1) )`
+            // is removed as it's likely part of the bug or an outdated logic with the new interpretation of 'width'.
+            // The `effectiveContentWidth` logic should handle this correctly.
+
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
