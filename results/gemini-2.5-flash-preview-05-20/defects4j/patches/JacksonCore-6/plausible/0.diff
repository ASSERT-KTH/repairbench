diff --git a/tmp/3d7a3d4f-8a25-4c1d-a14f-a2b54c302e9a_buggy.java b/tmp/cdbcd7e0-a5ac-4085-867e-2db61d21350f_fixed.java
index c3c1a6f..f3511e2 100644
--- a/tmp/3d7a3d4f-8a25-4c1d-a14f-a2b54c302e9a_buggy.java
+++ b/tmp/cdbcd7e0-a5ac-4085-867e-2db61d21350f_fixed.java
@@ -1,22 +1,34 @@
     private final static int _parseIndex(String str) {
         final int len = str.length();
         // [core#133]: beware of super long indexes; assume we never
         // have arrays over 2 billion entries so ints are fine.
         if (len == 0 || len > 10) {
             return -1;
         }
         // [core#176]: no leading zeroes allowed
+        // First, validate all characters are digits
         for (int i = 0; i < len; ++i) {
             char c = str.charAt(i);
             if (c > '9' || c < '0') {
                 return -1;
             }
         }
+        // Then, enforce the leading zero rule:
+        // A leading zero is allowed only if the string itself is "0".
+        // For any other string with a leading zero (e.g., "00", "01"), it's invalid.
+        if (len > 1 && str.charAt(0) == '0') {
+            return -1;
+        }
+
         if (len == 10) {
+            // Check if the 10-digit number exceeds Integer.MAX_VALUE
+            // Use parseLong to avoid overflow before comparison
             long l = NumberInput.parseLong(str);
             if (l > Integer.MAX_VALUE) {
                 return -1;
             }
         }
+        // If all checks pass, parse the string into an integer.
+        // NumberInput.parseInt handles strings that fit in int.
         return NumberInput.parseInt(str);
     }
\ No newline at end of file
