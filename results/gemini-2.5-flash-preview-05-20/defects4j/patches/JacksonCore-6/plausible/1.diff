diff --git a/tmp/1bd76aec-8a75-43ce-bcb4-377b96f82b8e_buggy.java b/tmp/8656c332-6536-486c-aa2d-fe27fe1722ed_fixed.java
index c3c1a6f..25f7a41 100644
--- a/tmp/1bd76aec-8a75-43ce-bcb4-377b96f82b8e_buggy.java
+++ b/tmp/8656c332-6536-486c-aa2d-fe27fe1722ed_fixed.java
@@ -1,22 +1,32 @@
     private final static int _parseIndex(String str) {
         final int len = str.length();
         // [core#133]: beware of super long indexes; assume we never
         // have arrays over 2 billion entries so ints are fine.
         if (len == 0 || len > 10) {
             return -1;
         }
         // [core#176]: no leading zeroes allowed
         for (int i = 0; i < len; ++i) {
             char c = str.charAt(i);
             if (c > '9' || c < '0') {
                 return -1;
             }
         }
+        // [core#176]: Leading zero is disallowed unless the string is "0"
+        // (i.e. length is 1 and the digit is '0')
+        if (len > 1 && str.charAt(0) == '0') {
+            return -1;
+        }
+
+        // Handle case where number is too large to fit in signed 32-bit int
+        // This can only happen for 10-digit numbers, e.g. "2147483648" (Integer.MAX_VALUE + 1)
         if (len == 10) {
+            // Must parse as long to check for overflow against Integer.MAX_VALUE
             long l = NumberInput.parseLong(str);
             if (l > Integer.MAX_VALUE) {
                 return -1;
             }
         }
+        // At this point, the string is a valid integer representation within int range
         return NumberInput.parseInt(str);
     }
\ No newline at end of file
