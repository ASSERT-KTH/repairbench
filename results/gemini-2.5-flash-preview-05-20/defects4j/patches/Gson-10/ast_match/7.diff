diff --git a/tmp/2a2dabf7-5b73-454b-9f36-0822c98b6811_buggy.java b/tmp/089e4173-b8eb-434e-9e4b-d4201648e587_fixed.java
index 9d42346..ba57346 100644
--- a/tmp/2a2dabf7-5b73-454b-9f36-0822c98b6811_buggy.java
+++ b/tmp/089e4173-b8eb-434e-9e4b-d4201648e587_fixed.java
@@ -1,37 +1,43 @@
   private ReflectiveTypeAdapterFactory.BoundField createBoundField(
       final Gson context, final Field field, final String name,
       final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
     // special casing primitives here saves ~5% on Android...
     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
     TypeAdapter<?> mapped = null;
     if (annotation != null) {
       mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
     }
+    // This flag indicates if the adapter was provided by a @JsonAdapter annotation on the field.
     final boolean jsonAdapterPresent = mapped != null;
     if (mapped == null) mapped = context.getAdapter(fieldType);
 
     final TypeAdapter<?> typeAdapter = mapped;
     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
       @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
       @Override void write(JsonWriter writer, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
-        TypeAdapter t =
-          new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+        // When a @JsonAdapter is present on the field, the adapter it specifies
+        // should be used directly. TypeAdapterRuntimeTypeWrapper can interfere
+        // with this by potentially delegating to a different adapter based on
+        // runtime type, overriding the explicit user choice.
+        TypeAdapter t = jsonAdapterPresent
+            ? typeAdapter
+            : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
         t.write(writer, fieldValue);
       }
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = typeAdapter.read(reader);
         if (fieldValue != null || !isPrimitive) {
           field.set(value, fieldValue);
         }
       }
       @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
         if (!serialized) return false;
         Object fieldValue = field.get(value);
         return fieldValue != value; // avoid recursion for example for Throwable.cause
       }
     };
   }
\ No newline at end of file
