diff --git a/tmp/796502e6-dc1b-4911-a3b5-71138f0dc0db_buggy.java b/tmp/8677a4ef-8627-4ee2-91f2-c89f50fc99be_fixed.java
index 9d42346..1bfcfc9 100644
--- a/tmp/796502e6-dc1b-4911-a3b5-71138f0dc0db_buggy.java
+++ b/tmp/8677a4ef-8627-4ee2-91f2-c89f50fc99be_fixed.java
@@ -1,37 +1,46 @@
   private ReflectiveTypeAdapterFactory.BoundField createBoundField(
       final Gson context, final Field field, final String name,
       final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
     // special casing primitives here saves ~5% on Android...
     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
     TypeAdapter<?> mapped = null;
     if (annotation != null) {
       mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
     }
+    // This flag indicates if the JsonAdapter annotation successfully provided an adapter.
+    // This needs to be captured *before* the fallback to context.getAdapter.
     final boolean jsonAdapterPresent = mapped != null;
     if (mapped == null) mapped = context.getAdapter(fieldType);
 
     final TypeAdapter<?> typeAdapter = mapped;
     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
       @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
       @Override void write(JsonWriter writer, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
-        TypeAdapter t =
-          new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+        // If an explicit JsonAdapter is present on the field, use it directly.
+        // Otherwise, use TypeAdapterRuntimeTypeWrapper to handle potential runtime type differences
+        // for polymorphic fields (e.g., List field holding an ArrayList instance).
+        // The original bug was that TypeAdapterRuntimeTypeWrapper would be used even when
+        // @JsonAdapter was present, causing the specific adapter from the annotation to be ignored
+        // by re-delegating adapter lookup based on runtime type.
+        TypeAdapter t = jsonAdapterPresent
+            ? typeAdapter
+            : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
         t.write(writer, fieldValue);
       }
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = typeAdapter.read(reader);
         if (fieldValue != null || !isPrimitive) {
           field.set(value, fieldValue);
         }
       }
       @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
         if (!serialized) return false;
         Object fieldValue = field.get(value);
         return fieldValue != value; // avoid recursion for example for Throwable.cause
       }
     };
   }
\ No newline at end of file
