diff --git a/tmp/9b3b1448-98a3-49e0-8e42-72dbe65167d9_buggy.java b/tmp/e1673117-ab51-46e6-b45a-fb5f421010c0_fixed.java
index 9d42346..7ba56ca 100644
--- a/tmp/9b3b1448-98a3-49e0-8e42-72dbe65167d9_buggy.java
+++ b/tmp/e1673117-ab51-46e6-b45a-fb5f421010c0_fixed.java
@@ -1,37 +1,44 @@
   private ReflectiveTypeAdapterFactory.BoundField createBoundField(
       final Gson context, final Field field, final String name,
       final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
     // special casing primitives here saves ~5% on Android...
     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
     TypeAdapter<?> mapped = null;
     if (annotation != null) {
       mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
     }
+    // This flag indicates if an explicit JsonAdapter annotation was found and processed.
+    // If it was, the adapter specified by the annotation should take precedence and not
+    // be subjected to runtime type wrapping, as the annotation explicitly dictates the adapter.
     final boolean jsonAdapterPresent = mapped != null;
     if (mapped == null) mapped = context.getAdapter(fieldType);
 
     final TypeAdapter<?> typeAdapter = mapped;
     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
       @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
       @Override void write(JsonWriter writer, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
-        TypeAdapter t =
-          new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+        // If a JsonAdapter annotation was present, use its TypeAdapter directly.
+        // Otherwise, use TypeAdapterRuntimeTypeWrapper to handle polymorphic types
+        // where the runtime type might differ from the declared field type.
+        TypeAdapter t = jsonAdapterPresent
+            ? typeAdapter
+            : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
         t.write(writer, fieldValue);
       }
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = typeAdapter.read(reader);
         if (fieldValue != null || !isPrimitive) {
           field.set(value, fieldValue);
         }
       }
       @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
         if (!serialized) return false;
         Object fieldValue = field.get(value);
         return fieldValue != value; // avoid recursion for example for Throwable.cause
       }
     };
   }
\ No newline at end of file
