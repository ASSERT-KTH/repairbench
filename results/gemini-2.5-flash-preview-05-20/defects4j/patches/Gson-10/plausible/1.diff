diff --git a/tmp/17cd8097-fb21-4789-9bc4-85035fcfc3e5_buggy.java b/tmp/18061e30-40f0-4df3-b7ef-357a673f8cd1_fixed.java
index 9d42346..f933b36 100644
--- a/tmp/17cd8097-fb21-4789-9bc4-85035fcfc3e5_buggy.java
+++ b/tmp/18061e30-40f0-4df3-b7ef-357a673f8cd1_fixed.java
@@ -1,37 +1,54 @@
   private ReflectiveTypeAdapterFactory.BoundField createBoundField(
       final Gson context, final Field field, final String name,
       final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
     // special casing primitives here saves ~5% on Android...
     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
     TypeAdapter<?> mapped = null;
     if (annotation != null) {
       mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
     }
+    // This boolean tracks if an explicit @JsonAdapter annotation was found on the field.
+    // It's crucial for deciding whether to use the explicit adapter directly or
+    // to wrap it with TypeAdapterRuntimeTypeWrapper for runtime type handling.
     final boolean jsonAdapterPresent = mapped != null;
     if (mapped == null) mapped = context.getAdapter(fieldType);
 
     final TypeAdapter<?> typeAdapter = mapped;
     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
       @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
       @Override void write(JsonWriter writer, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
-        TypeAdapter t =
-          new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+        TypeAdapter t;
+        // The fix addresses a regression where @JsonAdapter on primitive fields
+        // was overridden by Gson's default adapters due to TypeAdapterRuntimeTypeWrapper.
+        // If an explicit @JsonAdapter was present, use that adapter directly.
+        // Otherwise, use TypeAdapterRuntimeTypeWrapper to handle potential
+        // runtime type differences for polymorphic fields.
+        if (jsonAdapterPresent) {
+          t = typeAdapter;
+        } else {
+          t = new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+        }
         t.write(writer, fieldValue);
       }
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = typeAdapter.read(reader);
+        // Do not set a null primitive field to null. Primitives cannot be null.
+        // This check ensures that if an adapter reads a null value for a primitive field,
+        // the field is not updated (it retains its default value).
         if (fieldValue != null || !isPrimitive) {
           field.set(value, fieldValue);
         }
       }
       @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
         if (!serialized) return false;
         Object fieldValue = field.get(value);
-        return fieldValue != value; // avoid recursion for example for Throwable.cause
+        // Avoid recursion for fields that might refer back to the parent object,
+        // e.g., Throwable.cause referring to itself or a parent in a cyclic graph.
+        return fieldValue != value;
       }
     };
   }
\ No newline at end of file
