diff --git a/tmp/a73566c6-2a3c-4040-859a-ce1182dee68c_buggy.java b/tmp/d291bfdc-5b4d-4d56-b658-820df91f73f0_fixed.java
index 9d42346..0ef4347 100644
--- a/tmp/a73566c6-2a3c-4040-859a-ce1182dee68c_buggy.java
+++ b/tmp/d291bfdc-5b4d-4d56-b658-820df91f73f0_fixed.java
@@ -1,37 +1,46 @@
   private ReflectiveTypeAdapterFactory.BoundField createBoundField(
       final Gson context, final Field field, final String name,
       final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
     // special casing primitives here saves ~5% on Android...
     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
     TypeAdapter<?> mapped = null;
     if (annotation != null) {
       mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
     }
     final boolean jsonAdapterPresent = mapped != null;
-    if (mapped == null) mapped = context.getAdapter(fieldType);
+    // Fix for https://github.com/google/gson/issues/831:
+    // Ensure that if a JsonAdapter annotation was present, its TypeAdapter is used.
+    // If the annotation specified an adapter that could not be created (leading to `mapped == null`),
+    // Gson should not silently fall back to the default adapter.
+    // This condition means: if `mapped` is null AND there was no `JsonAdapter` specified,
+    // then fall back to the default adapter. Otherwise, the custom adapter (if specified)
+    // should be used, or an error should occur (if mapped is still null but annotation was present).
+    if (mapped == null && !jsonAdapterPresent) {
+      mapped = context.getAdapter(fieldType);
+    }
 
     final TypeAdapter<?> typeAdapter = mapped;
     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
       @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
       @Override void write(JsonWriter writer, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
         TypeAdapter t =
           new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
         t.write(writer, fieldValue);
       }
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = typeAdapter.read(reader);
         if (fieldValue != null || !isPrimitive) {
           field.set(value, fieldValue);
         }
       }
       @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
         if (!serialized) return false;
         Object fieldValue = field.get(value);
         return fieldValue != value; // avoid recursion for example for Throwable.cause
       }
     };
   }
\ No newline at end of file
