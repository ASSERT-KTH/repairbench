diff --git a/tmp/fae6b786-824a-41f6-b01d-de8e289c883e_buggy.java b/tmp/97ae9739-9cbf-4617-ad56-6af14889ea88_fixed.java
index 9d42346..6384c00 100644
--- a/tmp/fae6b786-824a-41f6-b01d-de8e289c883e_buggy.java
+++ b/tmp/97ae9739-9cbf-4617-ad56-6af14889ea88_fixed.java
@@ -1,37 +1,42 @@
   private ReflectiveTypeAdapterFactory.BoundField createBoundField(
       final Gson context, final Field field, final String name,
       final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
     // special casing primitives here saves ~5% on Android...
     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
     TypeAdapter<?> mapped = null;
     if (annotation != null) {
       mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
     }
     final boolean jsonAdapterPresent = mapped != null;
     if (mapped == null) mapped = context.getAdapter(fieldType);
 
     final TypeAdapter<?> typeAdapter = mapped;
     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
       @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
       @Override void write(JsonWriter writer, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
         TypeAdapter t =
           new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
         t.write(writer, fieldValue);
       }
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = typeAdapter.read(reader);
-        if (fieldValue != null || !isPrimitive) {
+        // Fix for https://github.com/google/gson/issues/831:
+        // If a custom JsonAdapter is present, we should always attempt to set the field,
+        // even if the value is null for a primitive type. This will result in an
+        // IllegalArgumentException, which is the correct behavior as null cannot be
+        // assigned to a primitive.
+        if (fieldValue != null || !isPrimitive || jsonAdapterPresent) {
           field.set(value, fieldValue);
         }
       }
       @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
         if (!serialized) return false;
         Object fieldValue = field.get(value);
         return fieldValue != value; // avoid recursion for example for Throwable.cause
       }
     };
   }
\ No newline at end of file
