diff --git a/tmp/550d9016-9f90-441a-834a-478c7b302b4e_buggy.java b/tmp/856f664c-f403-47ee-b39e-e1f75b34ce2f_fixed.java
index 4e21866..4bcf3d3 100644
--- a/tmp/550d9016-9f90-441a-834a-478c7b302b4e_buggy.java
+++ b/tmp/856f664c-f403-47ee-b39e-e1f75b34ce2f_fixed.java
@@ -1,10 +1,30 @@
+import org.apache.commons.math3.linear.DiagonalMatrix;
+import org.apache.commons.math3.linear.EigenDecomposition;
+import org.apache.commons.math3.linear.RealMatrix;
+import org.apache.commons.math3.util.FastMath;
+
     /**
      * Computes the square-root of the weight matrix.
      *
      * @param m Symmetric, positive-definite (weight) matrix.
      * @return the square-root of the weight matrix.
      */
     private RealMatrix squareRoot(RealMatrix m) {
+        // Optimization: If the matrix is a DiagonalMatrix, compute its square root efficiently.
+        // This is crucial for large weight matrices which are often diagonal.
+        if (m instanceof DiagonalMatrix) {
+            DiagonalMatrix dm = (DiagonalMatrix) m;
+            final int dim = dm.getRowDimension();
+            double[] diagonal = new double[dim];
+            for (int i = 0; i < dim; ++i) {
+                // For a positive-definite weight matrix, diagonal elements should be positive.
+                diagonal[i] = FastMath.sqrt(dm.getEntry(i, i));
+            }
+            return new DiagonalMatrix(diagonal);
+        }
+
+        // Fallback to general EigenDecomposition for non-diagonal matrices.
+        // This path is correct for general symmetric, positive-definite matrices.
         final EigenDecomposition dec = new EigenDecomposition(m);
         return dec.getSquareRoot();
     }
\ No newline at end of file
