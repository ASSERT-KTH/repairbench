diff --git a/tmp/8f64a114-be03-42b8-8c06-8857d7db504f_buggy.java b/tmp/d89253d6-d8cf-4bbb-b9b9-e4a515746f9b_fixed.java
index 4e21866..8d8d00d 100644
--- a/tmp/8f64a114-be03-42b8-8c06-8857d7db504f_buggy.java
+++ b/tmp/d89253d6-d8cf-4bbb-b9b9-e4a515746f9b_fixed.java
@@ -1,10 +1,29 @@
     /**
      * Computes the square-root of the weight matrix.
      *
      * @param m Symmetric, positive-definite (weight) matrix.
      * @return the square-root of the weight matrix.
      */
     private RealMatrix squareRoot(RealMatrix m) {
+        // The weight matrix can be a DiagonalMatrix when constructed from observed points.
+        // For large numbers of observed points, a DiagonalMatrix can be very large
+        // (e.g., 40000x40000 in testLargeSample), but its underlying data is sparse.
+        // EigenDecomposition is very memory intensive and inefficient for large diagonal matrices,
+        // often causing OutOfMemoryError for dimensions like 40000x40000.
+        // The square root of a diagonal matrix is simply a diagonal matrix with the square roots of its diagonal elements.
+        if (m instanceof DiagonalMatrix) {
+            final DiagonalMatrix dm = (DiagonalMatrix) m;
+            final double[] diagonal = dm.getData(); // Get the underlying diagonal array
+            final double[] sqrtDiagonal = new double[diagonal.length];
+            for (int i = 0; i < diagonal.length; i++) {
+                // Weights are expected to be non-negative.
+                sqrtDiagonal[i] = FastMath.sqrt(diagonal[i]);
+            }
+            return new DiagonalMatrix(sqrtDiagonal);
+        } else {
+            // Fallback to EigenDecomposition for general (non-diagonal) matrices.
+            // This is still appropriate for smaller or non-diagonal matrices where its overhead is acceptable.
             final EigenDecomposition dec = new EigenDecomposition(m);
             return dec.getSquareRoot();
         }
+    }
\ No newline at end of file
