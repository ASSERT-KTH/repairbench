diff --git a/tmp/d74080f4-65f6-4196-882a-171145443f07_buggy.java b/tmp/a790732a-5e40-43e8-99bb-f28dcdf608ee_fixed.java
index 4e21866..4129dc1 100644
--- a/tmp/d74080f4-65f6-4196-882a-171145443f07_buggy.java
+++ b/tmp/a790732a-5e40-43e8-99bb-f28dcdf608ee_fixed.java
@@ -1,10 +1,36 @@
     /**
      * Computes the square-root of the weight matrix.
      *
      * @param m Symmetric, positive-definite (weight) matrix.
      * @return the square-root of the weight matrix.
      */
     private RealMatrix squareRoot(RealMatrix m) {
+        // The EigenDecomposition class, when used with a very large diagonal matrix,
+        // can lead to an OutOfMemoryError. This is because it constructs a full
+        // identity matrix for eigenvectors, which becomes extremely large.
+        //
+        // For a diagonal matrix, the square root is simply another diagonal matrix
+        // where each diagonal element is the square root of the corresponding
+        // original diagonal element. This can be computed much more efficiently
+        // without a full eigendecomposition.
+        if (m instanceof DiagonalMatrix) {
+            final int dim = m.getRowDimension();
+            final double[] diagonal = ((DiagonalMatrix) m).getDiagonal();
+            final double[] sqrtDiagonal = new double[dim];
+            for (int i = 0; i < dim; i++) {
+                final double value = diagonal[i];
+                // Per the Javadoc, the matrix is "positive-definite".
+                // For a diagonal matrix, this means all diagonal elements must be positive.
+                if (value < 0) {
+                    throw new IllegalArgumentException("Matrix must be positive-definite, but a diagonal element is negative: " + value);
+                }
+                sqrtDiagonal[i] = FastMath.sqrt(value);
+            }
+            return new DiagonalMatrix(sqrtDiagonal);
+        } else {
+            // Fallback to EigenDecomposition for general symmetric, positive-definite matrices
+            // that are not necessarily diagonal.
             final EigenDecomposition dec = new EigenDecomposition(m);
             return dec.getSquareRoot();
         }
+    }
\ No newline at end of file
