diff --git a/tmp/adb2735d-a65c-477a-a4ab-bd93f20089f3_buggy.java b/tmp/c489aab3-aa67-4668-b199-f0709dd2096e_fixed.java
index 670114d..082acc4 100644
--- a/tmp/adb2735d-a65c-477a-a4ab-bd93f20089f3_buggy.java
+++ b/tmp/c489aab3-aa67-4668-b199-f0709dd2096e_fixed.java
@@ -1,48 +1,79 @@
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
 
       // Record global variable and function declarations
       if (t.inGlobalScope()) {
         if (NodeUtil.isVarDeclaration(n)) {
           NameInformation ns = createNameInformation(t, n, parent);
           Preconditions.checkNotNull(ns);
           recordSet(ns.name, n);
         } else if (NodeUtil.isFunctionDeclaration(n)) {
           Node nameNode = n.getFirstChild();
           NameInformation ns = createNameInformation(t, nameNode, n);
           if (ns != null) {
             JsName nameInfo = getName(nameNode.getString(), true);
             recordSet(nameInfo.name, nameNode);
           }
         } else if (NodeUtil.isObjectLitKey(n, parent)) {
           NameInformation ns = createNameInformation(t, n, parent);
           if (ns != null) {
             recordSet(ns.name, n);
           }
         }
       }
 
       // Record assignments and call sites
       if (n.isAssign()) {
         Node nameNode = n.getFirstChild();
 
         NameInformation ns = createNameInformation(t, nameNode, n);
         if (ns != null) {
           if (ns.isPrototype) {
             recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
           } else {
             recordSet(ns.name, nameNode);
           }
         }
       } else if (n.isCall()) {
-        Node nameNode = n.getFirstChild();
+        Node nameNode = n.getFirstChild(); // The function being called (e.g., 'goog.inherits')
+
+        // Original logic: handle if the *function itself* is a class-defining entity
         NameInformation ns = createNameInformation(t, nameNode, n);
         if (ns != null && ns.onlyAffectsClassDef) {
           JsName name = getName(ns.name, false);
           if (name != null) {
           refNodes.add(new ClassDefiningFunctionNode(
               name, n, parent, parent.getParent()));
           }
         }
+
+        // NEW LOGIC: Handle class definitions made by arguments of certain calls.
+        // This is for functions like goog.inherits, goog.defineClass, etc.
+        String qualifiedName = nameNode.getQualifiedName(); // Get the full name like "goog.inherits"
+        if (qualifiedName != null) {
+          // Check if this qualified name is in the map of functions that define classes
+          // through their arguments. 'classDefiningFunctions' is a field of NameAnalyzer,
+          // mapping function names to the 0-indexed argument that represents the class being defined.
+          // For 'goog.inherits', the argument index is 0.
+          Integer classArgIndex = classDefiningFunctions.get(qualifiedName);
+          if (classArgIndex != null) {
+            // Arguments start from index 1 in the Node children list, as index 0 is the function name.
+            Node classNode = n.getChildAtIndex(classArgIndex + 1);
+            if (classNode != null) {
+              // Create NameInformation for the class node (e.g., 'ns.PageSelectionModel.ChangeEvent')
+              NameInformation classNs = createNameInformation(t, classNode, n);
+              if (classNs != null) {
+                // Get or create JsName for the class, ensuring it's marked as a class later.
+                JsName className = getName(classNs.name, true);
+                if (className != null) {
+                  // Add a ClassDefiningFunctionNode for this class, linking it to the call node.
+                  // This will eventually mark 'className' as a class.
+                  refNodes.add(new ClassDefiningFunctionNode(
+                      className, n, parent, parent.getParent()));
+                }
+              }
+            }
+          }
+        }
       }
     }
\ No newline at end of file
