diff --git a/tmp/b4607015-35aa-4f53-b491-80b7f51f65cf_buggy.java b/tmp/49b70e63-f713-45ce-b0fa-b448ddac603b_fixed.java
index 670114d..c43f156 100644
--- a/tmp/b4607015-35aa-4f53-b491-80b7f51f65cf_buggy.java
+++ b/tmp/49b70e63-f713-45ce-b0fa-b448ddac603b_fixed.java
@@ -1,48 +1,75 @@
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
 
       // Record global variable and function declarations
       if (t.inGlobalScope()) {
         if (NodeUtil.isVarDeclaration(n)) {
           NameInformation ns = createNameInformation(t, n, parent);
           Preconditions.checkNotNull(ns);
           recordSet(ns.name, n);
         } else if (NodeUtil.isFunctionDeclaration(n)) {
           Node nameNode = n.getFirstChild();
           NameInformation ns = createNameInformation(t, nameNode, n);
           if (ns != null) {
             JsName nameInfo = getName(nameNode.getString(), true);
             recordSet(nameInfo.name, nameNode);
           }
         } else if (NodeUtil.isObjectLitKey(n, parent)) {
           NameInformation ns = createNameInformation(t, n, parent);
           if (ns != null) {
             recordSet(ns.name, n);
           }
         }
       }
 
       // Record assignments and call sites
       if (n.isAssign()) {
         Node nameNode = n.getFirstChild();
 
         NameInformation ns = createNameInformation(t, nameNode, n);
         if (ns != null) {
           if (ns.isPrototype) {
             recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
           } else {
             recordSet(ns.name, nameNode);
           }
         }
       } else if (n.isCall()) {
+        // When a CALL node is encountered, we need to check if it's a special call
+        // (like goog.inherits) that implicitly defines a class.
+        CodingConvention convention = t.getCompiler().getCodingConvention();
+        Collection<Node> classesDefined = convention.getClassesDefinedByCall(n);
+
+        if (classesDefined != null && !classesDefined.isEmpty()) {
+            // If the coding convention identifies any classes defined by this call,
+            // record them as ClassDefiningFunctionNodes.
+            for (Node classDefNode : classesDefined) {
+                NameInformation nsClass = createNameInformation(t, classDefNode, n);
+                if (nsClass != null) {
+                    JsName name = getName(nsClass.name, false);
+                    if (name != null) {
+                        // The 'classDefNode' is the actual name node for the class (e.g., 'ns.PageSelectionModel.ChangeEvent').
+                        // 'n' is the CALL node (parent of classDefNode).
+                        // 'parent' is the parent of the CALL node (grandparent of classDefNode).
+                        refNodes.add(new ClassDefiningFunctionNode(
+                            name, classDefNode, n, parent));
+                    }
+                }
+            }
+        } else {
+          // Original logic: If the call target itself is marked as 'onlyAffectsClassDef',
+          // which is generally not the case for functions like 'goog.inherits'
+          // that define *other* classes. This branch might be for other specific
+          // function calls or could be a remnant.
           Node nameNode = n.getFirstChild();
           NameInformation ns = createNameInformation(t, nameNode, n);
           if (ns != null && ns.onlyAffectsClassDef) {
             JsName name = getName(ns.name, false);
             if (name != null) {
             refNodes.add(new ClassDefiningFunctionNode(
                 name, n, parent, parent.getParent()));
             }
           }
         }
       }
+    }
\ No newline at end of file
