diff --git a/tmp/91221baf-f1bd-40fe-8fa2-cea3530d73b4_buggy.java b/tmp/4a8c1a1e-b6e6-40dd-9a8c-61b5d93e406b_fixed.java
index 670114d..4f56a35 100644
--- a/tmp/91221baf-f1bd-40fe-8fa2-cea3530d73b4_buggy.java
+++ b/tmp/4a8c1a1e-b6e6-40dd-9a8c-61b5d93e406b_fixed.java
@@ -1,48 +1,63 @@
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
 
       // Record global variable and function declarations
       if (t.inGlobalScope()) {
         if (NodeUtil.isVarDeclaration(n)) {
           NameInformation ns = createNameInformation(t, n, parent);
           Preconditions.checkNotNull(ns);
           recordSet(ns.name, n);
         } else if (NodeUtil.isFunctionDeclaration(n)) {
           Node nameNode = n.getFirstChild();
           NameInformation ns = createNameInformation(t, nameNode, n);
           if (ns != null) {
             JsName nameInfo = getName(nameNode.getString(), true);
             recordSet(nameInfo.name, nameNode);
           }
         } else if (NodeUtil.isObjectLitKey(n, parent)) {
           NameInformation ns = createNameInformation(t, n, parent);
           if (ns != null) {
             recordSet(ns.name, n);
           }
         }
       }
 
       // Record assignments and call sites
       if (n.isAssign()) {
         Node nameNode = n.getFirstChild();
 
         NameInformation ns = createNameInformation(t, nameNode, n);
         if (ns != null) {
           if (ns.isPrototype) {
             recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
           } else {
             recordSet(ns.name, nameNode);
           }
         }
       } else if (n.isCall()) {
         Node nameNode = n.getFirstChild();
         NameInformation ns = createNameInformation(t, nameNode, n);
         if (ns != null && ns.onlyAffectsClassDef) {
           JsName name = getName(ns.name, false);
           if (name != null) {
           refNodes.add(new ClassDefiningFunctionNode(
               name, n, parent, parent.getParent()));
           }
+
+          // When a function call defines or modifies a class (e.g., goog.inherits(Child, Parent)),
+          // the first argument of the call (Child) is effectively being 'set' or defined.
+          // This needs to be recorded similar to an assignment.
+          Node classBeingDefinedNode = n.getSecondChild(); // This is the first argument of the call
+          if (classBeingDefinedNode != null) {
+            NameInformation classNs = createNameInformation(t, classBeingDefinedNode, n);
+            if (classNs != null) {
+              if (classNs.isPrototype) {
+                recordPrototypeSet(classNs.prototypeClass, classNs.prototypeProperty, classBeingDefinedNode);
+              } else {
+                recordSet(classNs.name, classBeingDefinedNode);
+              }
+            }
+          }
         }
       }
     }
\ No newline at end of file
