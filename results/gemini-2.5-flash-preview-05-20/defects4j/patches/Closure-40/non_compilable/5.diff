diff --git a/tmp/b85ec8dc-6afd-4303-b8d7-18ec5761efc1_buggy.java b/tmp/572b1cd6-0e4c-4e02-9ac1-0413f4348094_fixed.java
index 670114d..854eff1 100644
--- a/tmp/b85ec8dc-6afd-4303-b8d7-18ec5761efc1_buggy.java
+++ b/tmp/572b1cd6-0e4c-4e02-9ac1-0413f4348094_fixed.java
@@ -1,48 +1,75 @@
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
 
       // Record global variable and function declarations
       if (t.inGlobalScope()) {
         if (NodeUtil.isVarDeclaration(n)) {
           NameInformation ns = createNameInformation(t, n, parent);
           Preconditions.checkNotNull(ns);
           recordSet(ns.name, n);
         } else if (NodeUtil.isFunctionDeclaration(n)) {
           Node nameNode = n.getFirstChild();
           NameInformation ns = createNameInformation(t, nameNode, n);
           if (ns != null) {
             JsName nameInfo = getName(nameNode.getString(), true);
             recordSet(nameInfo.name, nameNode);
           }
         } else if (NodeUtil.isObjectLitKey(n, parent)) {
           NameInformation ns = createNameInformation(t, n, parent);
           if (ns != null) {
             recordSet(ns.name, n);
           }
         }
       }
 
       // Record assignments and call sites
       if (n.isAssign()) {
         Node nameNode = n.getFirstChild();
 
         NameInformation ns = createNameInformation(t, nameNode, n);
         if (ns != null) {
           if (ns.isPrototype) {
             recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
           } else {
             recordSet(ns.name, nameNode);
           }
         }
       } else if (n.isCall()) {
-        Node nameNode = n.getFirstChild();
-        NameInformation ns = createNameInformation(t, nameNode, n);
-        if (ns != null && ns.onlyAffectsClassDef) {
-          JsName name = getName(ns.name, false);
-          if (name != null) {
+        Node callTarget = n.getFirstChild(); // The function being called (e.g., 'goog.inherits')
+        NameInformation callTargetNs = createNameInformation(t, callTarget, n);
+
+        // Check if this is a class-defining call (e.g., goog.inherits)
+        if (callTargetNs != null && callTargetNs.onlyAffectsClassDef) {
+          Node classNode = n.getChildAtIndex(1); // The first argument, which is the class being defined/extended.
+
+          NameInformation classNs = createNameInformation(t, classNode, n);
+          if (classNs != null) {
+            // Get the JsName for the class that is supposedly being defined/extended.
+            // We use 'false' here because we are looking for an existing definition.
+            // If it doesn't exist, this call is not defining a real class.
+            JsName className = getName(classNs.name, false);
+
+            if (className != null) {
+              // If the class name actually exists (i.e., it was defined elsewhere),
+              // then this call affects its definition.
+              // Add the call node to 'removableCalls'. If 'className' later
+              // becomes unreferenced, this call node 'n' can be removed.
+              removableCalls.put(n, className);
+              // Add a ClassDefiningFunctionNode to mark 'className' as being
+              // defined/referenced by a class-defining function.
               refNodes.add(new ClassDefiningFunctionNode(
-              name, n, parent, parent.getParent()));
+                  className, n, parent, parent.getParent()));
+            } else {
+              // If the class name (the first argument) does NOT exist as a JsName
+              // (e.g., ns.PageSelectionModel.ChangeEvent in the test case, which is never defined),
+              // then this 'inherits' call is targeting a non-existent or invalid class.
+              // In this scenario, the call itself has no meaningful side effect on actual class definitions
+              // and should be considered dead code.
+              // By putting 'null' as the JsName, we signal that this call can be removed
+              // regardless of whether any JsName is actually being "defined" by it.
+              removableCalls.put(n, null);
+            }
           }
         }
       }
     }
\ No newline at end of file
