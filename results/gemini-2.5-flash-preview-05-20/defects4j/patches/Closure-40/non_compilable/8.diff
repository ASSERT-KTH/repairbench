diff --git a/tmp/0e9e5d4f-95a2-4a92-9f74-cd3f000bb8af_buggy.java b/tmp/13cd8f3b-1878-4571-a236-68b535012af5_fixed.java
index 670114d..ea976ef 100644
--- a/tmp/0e9e5d4f-95a2-4a92-9f74-cd3f000bb8af_buggy.java
+++ b/tmp/13cd8f3b-1878-4571-a236-68b535012af5_fixed.java
@@ -1,48 +1,70 @@
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
 
       // Record global variable and function declarations
       if (t.inGlobalScope()) {
         if (NodeUtil.isVarDeclaration(n)) {
           NameInformation ns = createNameInformation(t, n, parent);
           Preconditions.checkNotNull(ns);
           recordSet(ns.name, n);
         } else if (NodeUtil.isFunctionDeclaration(n)) {
           Node nameNode = n.getFirstChild();
           NameInformation ns = createNameInformation(t, nameNode, n);
           if (ns != null) {
             JsName nameInfo = getName(nameNode.getString(), true);
             recordSet(nameInfo.name, nameNode);
           }
         } else if (NodeUtil.isObjectLitKey(n, parent)) {
           NameInformation ns = createNameInformation(t, n, parent);
           if (ns != null) {
             recordSet(ns.name, n);
           }
         }
       }
 
       // Record assignments and call sites
       if (n.isAssign()) {
         Node nameNode = n.getFirstChild();
 
         NameInformation ns = createNameInformation(t, nameNode, n);
         if (ns != null) {
           if (ns.isPrototype) {
             recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
           } else {
             recordSet(ns.name, nameNode);
           }
         }
       } else if (n.isCall()) {
-        Node nameNode = n.getFirstChild();
-        NameInformation ns = createNameInformation(t, nameNode, n);
-        if (ns != null && ns.onlyAffectsClassDef) {
-          JsName name = getName(ns.name, false);
+        Node nameNode = n.getFirstChild(); // 'nameNode' is the function being called (e.g., 'goog.inherits')
+
+        // Handle class-defining calls (e.g., goog.inherits, goog.defineClass).
+        // For these calls, the first argument typically represents the class name
+        // that is being defined or modified.
+        CodingConvention convention = t.getCompiler().getCodingConvention();
+        if (convention.isClassDefiningCall(n)) {
+          Node targetClassNode = n.getSecondChild(); // The first argument of the call
+          if (targetClassNode != null) {
+            NameInformation nsTarget = createNameInformation(t, targetClassNode, n);
+            if (nsTarget != null) {
+              // Mark this name as a definition/set.
+              // This ensures that implicitly defined classes (like the child class
+              // in goog.inherits) are correctly tracked by NameAnalyzer.
+              recordSet(nsTarget.name, targetClassNode);
+            }
+          }
+        }
+
+        // Original logic: Handle calls where the function being called itself
+        // is marked as affecting a class definition (e.g., goog.addSingletonGetter).
+        // This handles cases where the function name itself (nameNode) has the
+        // 'onlyAffectsClassDef' property.
+        NameInformation nsCall = createNameInformation(t, nameNode, n);
+        if (nsCall != null && nsCall.onlyAffectsClassDef) {
+          JsName name = getName(nsCall.name, false);
           if (name != null) {
           refNodes.add(new ClassDefiningFunctionNode(
               name, n, parent, parent.getParent()));
           }
         }
       }
     }
\ No newline at end of file
