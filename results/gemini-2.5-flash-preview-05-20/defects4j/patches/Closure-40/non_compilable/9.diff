diff --git a/tmp/5ffdc2ed-b4c4-40be-bfe9-af64f9969d4d_buggy.java b/tmp/cd36c5b6-26bb-4abc-8152-b5a58a90bcc2_fixed.java
index 670114d..0dd8e4b 100644
--- a/tmp/5ffdc2ed-b4c4-40be-bfe9-af64f9969d4d_buggy.java
+++ b/tmp/cd36c5b6-26bb-4abc-8152-b5a58a90bcc2_fixed.java
@@ -1,48 +1,88 @@
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
 
       // Record global variable and function declarations
       if (t.inGlobalScope()) {
         if (NodeUtil.isVarDeclaration(n)) {
           NameInformation ns = createNameInformation(t, n, parent);
           Preconditions.checkNotNull(ns);
           recordSet(ns.name, n);
         } else if (NodeUtil.isFunctionDeclaration(n)) {
           Node nameNode = n.getFirstChild();
           NameInformation ns = createNameInformation(t, nameNode, n);
           if (ns != null) {
-            JsName nameInfo = getName(nameNode.getString(), true);
+            // Use the fully qualified name from NameInformation.
+            // The original `nameNode.getString()` might not return the full qualified name
+            // if nameNode is a GETPROP (e.g., `ns.PageSelectionModel`).
+            JsName nameInfo = getName(ns.name, true);
             recordSet(nameInfo.name, nameNode);
           }
         } else if (NodeUtil.isObjectLitKey(n, parent)) {
           NameInformation ns = createNameInformation(t, n, parent);
           if (ns != null) {
             recordSet(ns.name, n);
           }
         }
       }
 
       // Record assignments and call sites
       if (n.isAssign()) {
         Node nameNode = n.getFirstChild();
 
         NameInformation ns = createNameInformation(t, nameNode, n);
         if (ns != null) {
           if (ns.isPrototype) {
             recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
           } else {
             recordSet(ns.name, nameNode);
           }
         }
       } else if (n.isCall()) {
-        Node nameNode = n.getFirstChild();
-        NameInformation ns = createNameInformation(t, nameNode, n);
-        if (ns != null && ns.onlyAffectsClassDef) {
-          JsName name = getName(ns.name, false);
-          if (name != null) {
+        // Handle calls to functions that define or extend classes
+        // (e.g., goog.inherits, goog.defineClass, BaseClass.call(this)).
+        if (NodeUtil.isClassDefiningFunctionCall(n)) {
+          Node classDefiningNameNode = null;
+          String classNameString = null; // For goog.defineClass with string literal
+
+          Node functionName = n.getFirstChild(); // The function being called (e.g., goog.inherits)
+
+          if (functionName.isGetProp() && functionName.matchesQualifiedName("goog.inherits")) {
+            // Case: goog.inherits(SubClass, SuperClass)
+            // The class being defined/extended is SubClass (the first argument to inherits).
+            classDefiningNameNode = n.getSecondChild();
+          } else if (functionName.isGetProp() && functionName.matchesQualifiedName("goog.defineClass")) {
+            // Case: goog.defineClass('className', constructor)
+            // The class name is the first argument, which is a string literal.
+            Node firstArg = n.getSecondChild();
+            if (firstArg != null && firstArg.isString()) {
+              classNameString = firstArg.getString();
+            }
+          } else if (functionName.isGetProp() && functionName.getLastChild().getString().equals("call") &&
+                     n.getChildCount() >= 2 && n.getSecondChild().isThis()) {
+            // Case: BaseClass.call(this, ...) inside a constructor.
+            // The class being referenced is BaseClass (the target of the `call` method).
+            classDefiningNameNode = functionName.getFirstChild();
+          }
+
+          if (classDefiningNameNode != null) {
+            NameInformation ns = createNameInformation(t, classDefiningNameNode, n);
+            if (ns != null) {
+              // Ensure the JsName for the class exists and mark it as a class-defining function's effect.
+              JsName name = getName(ns.name, true);
+              refNodes.add(new ClassDefiningFunctionNode(
+                  name, n, parent, parent.getParent()));
+            }
+          } else if (classNameString != null) {
+            // For goog.defineClass where the class name is a string literal.
+            JsName name = getName(classNameString, true);
             refNodes.add(new ClassDefiningFunctionNode(
                 name, n, parent, parent.getParent()));
           }
         }
+        // The previous logic within this `else if (n.isCall())` block that used
+        // `ns.onlyAffectsClassDef` with `getName(ns.name, false)` was problematic
+        // because `ns.name` would refer to the function being called (e.g., "goog.inherits")
+        // rather than the class being defined. The explicit checks above replace that generic,
+        // incorrect handling with precise extraction of the class name.
       }
     }
\ No newline at end of file
