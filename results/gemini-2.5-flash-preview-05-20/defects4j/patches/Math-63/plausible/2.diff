diff --git a/tmp/9950ad7d-fdc1-4471-8afe-711229855d05_buggy.java b/tmp/aab7a631-3ef6-4e51-a9a4-ef7962c5db31_fixed.java
index 9033e1c..2715623 100644
--- a/tmp/9950ad7d-fdc1-4471-8afe-711229855d05_buggy.java
+++ b/tmp/aab7a631-3ef6-4e51-a9a4-ef7962c5db31_fixed.java
@@ -1,11 +1,22 @@
     /**
      * Returns true iff they are equal as defined by
      * {@link #equals(double,double,int) equals(x, y, 1)}.
      *
      * @param x first value
      * @param y second value
      * @return {@code true} if the values are equal.
      */
     public static boolean equals(double x, double y) {
-        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
+        // The original implementation `(Double.isNaN(x) && Double.isNaN(y)) || x == y`
+        // considered two NaN values to be equal.
+        // However, the test `testArrayEquals` includes an assertion:
+        // `assertFalse(MathUtils.equals(new double[] { Double.NaN }, new double[] { Double.NaN }));`
+        // This implies that when comparing array elements, `Double.NaN` should *not* be equal to `Double.NaN`.
+        // If this `equals(double, double)` method is used for element comparison in the array `equals` method,
+        // then it must return `false` for `Double.NaN, Double.NaN`.
+        // Standard IEEE 754 floating-point comparison `x == y` already handles NaN by returning `false`
+        // if either `x` or `y` is NaN (including `NaN == NaN` which is `false`).
+        // Therefore, simply relying on the `x == y` comparison aligns with the test's expectation
+        // and typical strict floating-point equality.
+        return x == y;
     }
\ No newline at end of file
