diff --git a/tmp/21bc6e1e-8346-40b9-bb7e-747b0def791d_buggy.java b/tmp/d23098e6-c36b-4e6d-856d-470d7a1e9c22_fixed.java
index 9033e1c..4dbeb7c 100644
--- a/tmp/21bc6e1e-8346-40b9-bb7e-747b0def791d_buggy.java
+++ b/tmp/d23098e6-c36b-4e6d-856d-470d7a1e9c22_fixed.java
@@ -1,11 +1,29 @@
     /**
      * Returns true iff they are equal as defined by
      * {@link #equals(double,double,int) equals(x, y, 1)}.
      *
      * @param x first value
      * @param y second value
      * @return {@code true} if the values are equal.
      */
     public static boolean equals(double x, double y) {
-        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
+        // The original implementation was:
+        // return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
+        //
+        // This implementation made equals(Double.NaN, Double.NaN) return true.
+        // However, standard IEEE 754 comparison (x == y) specifies that NaN != NaN.
+        //
+        // The Javadoc states that this method returns true if equal as defined by
+        // equals(x, y, 1). Looking at common implementations of equals(x, y, ulps)
+        // in Apache Commons Math, if either x or y is NaN, the comparison often
+        // defaults to x == y, which would result in false for (NaN, NaN).
+        //
+        // The failing test `assertFalse(MathUtils.equals(new double[] { Double.NaN }, new double[] { Double.NaN }));`
+        // implies that when `equals(double[], double[])` performs element-wise comparison,
+        // it expects `equals(NaN, NaN)` to be false.
+        //
+        // Therefore, to align with standard double comparison and the expected behavior
+        // for `testArrayEquals` and consistency with `equals(x, y, 1)`,
+        // the special handling for NaN equality should be removed.
+        return x == y;
     }
\ No newline at end of file
