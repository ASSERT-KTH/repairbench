diff --git a/tmp/b38309af-38ef-4caa-bfc2-14666acc6f3f_buggy.java b/tmp/5027b4c8-be98-44e4-b821-e39d56408978_fixed.java
index 9033e1c..2e3fa8d 100644
--- a/tmp/b38309af-38ef-4caa-bfc2-14666acc6f3f_buggy.java
+++ b/tmp/5027b4c8-be98-44e4-b821-e39d56408978_fixed.java
@@ -1,11 +1,20 @@
     /**
      * Returns true iff they are equal as defined by
      * {@link #equals(double,double,int) equals(x, y, 1)}.
      *
      * @param x first value
      * @param y second value
      * @return {@code true} if the values are equal.
      */
     public static boolean equals(double x, double y) {
-        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
+        // The original implementation was:
+        // return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
+        // This logic makes Double.NaN equal to itself.
+        // However, the Javadoc references `equals(double, double, int)` which explicitly states
+        // "NaN values are not considered to be equal to any value, not even themselves."
+        // Also, the failing test `assertFalse(MathUtils.equals(new double[] { Double.NaN }, new double[] { Double.NaN }));`
+        // implies that `equals(Double.NaN, Double.NaN)` should return `false`.
+        // The standard double comparison `x == y` already correctly handles NaN (i.e., `Double.NaN == Double.NaN` is `false`).
+        // Therefore, removing the explicit NaN check makes the function consistent with its documentation and the failing test case.
+        return x == y;
     }
\ No newline at end of file
