diff --git a/tmp/948cd334-78c3-4266-8bf4-a187cec280f6_buggy.java b/tmp/bf42dec2-167c-4171-9f68-75278d3a65ab_fixed.java
index 9033e1c..b549bf2 100644
--- a/tmp/948cd334-78c3-4266-8bf4-a187cec280f6_buggy.java
+++ b/tmp/bf42dec2-167c-4171-9f68-75278d3a65ab_fixed.java
@@ -1,11 +1,28 @@
     /**
      * Returns true iff they are equal as defined by
      * {@link #equals(double,double,int) equals(x, y, 1)}.
      *
      * @param x first value
      * @param y second value
      * @return {@code true} if the values are equal.
      */
     public static boolean equals(double x, double y) {
-        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
+        // The original implementation was:
+        // return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
+        // This made equals(Double.NaN, Double.NaN) return true.
+        //
+        // The failing test `testArrayEquals` includes an assertion:
+        // `assertFalse(MathUtils.equals(new double[] { Double.NaN }, new double[] { Double.NaN }));`
+        // This assertion implies that the `MathUtils.equals(double[], double[])` method,
+        // when comparing two arrays containing only `Double.NaN`, should return `false`.
+        //
+        // If `MathUtils.equals(double[], double[])` internally uses `MathUtils.equals(double, double)`
+        // for element-wise comparison, then for this test to pass,
+        // `MathUtils.equals(Double.NaN, Double.NaN)` must return `false`.
+        //
+        // The standard Java double comparison `x == y` correctly returns `false` for `Double.NaN == Double.NaN`.
+        // By removing the explicit `Double.isNaN(x) && Double.isNaN(y)` check, the method reverts
+        // to the standard IEEE 754 behavior where NaN is not equal to itself, which aligns with
+        // the expectation of the `testArrayEquals` method.
+        return x == y;
     }
\ No newline at end of file
