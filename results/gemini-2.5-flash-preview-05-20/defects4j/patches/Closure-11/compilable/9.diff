diff --git a/tmp/2c4c4f6e-1ccb-4bf1-8648-bbba533f420c_buggy.java b/tmp/1bcecda8-620a-43ee-9a21-06f95f331c34_fixed.java
index 57c40b2..af1a819 100644
--- a/tmp/2c4c4f6e-1ccb-4bf1-8648-bbba533f420c_buggy.java
+++ b/tmp/1bcecda8-620a-43ee-9a21-06f95f331c34_fixed.java
@@ -1,27 +1,41 @@
   /**
    * Visits a GETPROP node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    * @param parent The parent of <code>n</code>
    */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
+    // Determine if this GETPROP node is on the left-hand side of an assignment.
+    boolean isLvalue = parent.isAssign() && parent.getFirstChild() == n;
+
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
+    }
+
+    // Always check for null/undefined object. This addresses testGetprop4.
+    // If expectNotNullOrUndefined returns false, it means an error was reported
+    // (e.g., trying to access properties on null), and we don't need to proceed
+    // with checking if the property itself exists.
+    if (validator.expectNotNullOrUndefined(t, n, childType,
         "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+      // If the object (childType) is not null or undefined, proceed to
+      // check the property access.
+      // We only check if the property is defined if it's not an L-value,
+      // as new properties can be created on the left-hand side of an assignment.
+      // This addresses testIssue810 by ensuring checkPropertyAccess runs for RHS.
+      if (!isLvalue) {
         checkPropertyAccess(childType, property.getString(), t, n);
       }
+    }
     ensureTyped(t, n);
   }
\ No newline at end of file
