diff --git a/tmp/42a989d6-baf1-4418-acc3-17ed10baf81d_buggy.java b/tmp/1431cb1d-0848-45b3-b2af-887af9a29e26_fixed.java
index 57c40b2..0de17d9 100644
--- a/tmp/42a989d6-baf1-4418-acc3-17ed10baf81d_buggy.java
+++ b/tmp/1431cb1d-0848-45b3-b2af-887af9a29e26_fixed.java
@@ -1,27 +1,44 @@
   /**
    * Visits a GETPROP node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    * @param parent The parent of <code>n</code>
    */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
+    // First, always check if the object itself is null or undefined.
+    // If it is, report an error and return early as no properties can be accessed.
+    if (!validator.expectNotNullOrUndefined(t, n, childType,
+        "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+      ensureTyped(t, n); // Ensure the node is typed even if an error occurred.
+      return;
+    }
+
+    // If the object is a dictionary, report an illegal property access.
+    // This check should happen after the null/undefined check.
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
-        "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+    }
+
+    // Check if the property exists on the object type. This check is necessary
+    // for both reading properties (e.g., `var x = obj.prop;`) and writing properties
+    // (e.g., `obj.prop = value;`).
+    // The previous code's `else if (n.getJSType() != null && parent.isAssign()) { return; }`
+    // was problematic as it prematurely exited, preventing necessary property existence checks
+    // in assignment contexts (e.g., `testIssue810`).
+    // By removing that conditional return, we ensure `checkPropertyAccess` is always called
+    // if the object itself is valid (not null/undefined).
     checkPropertyAccess(childType, property.getString(), t, n);
-    }
+
+    // Ensure the node (the GETPROP node itself) has a type.
     ensureTyped(t, n);
   }
\ No newline at end of file
