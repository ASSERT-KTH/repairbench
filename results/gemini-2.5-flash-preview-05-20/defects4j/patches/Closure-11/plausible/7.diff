diff --git a/tmp/1d0bc093-4f67-4424-b047-3ee74483a0ff_buggy.java b/tmp/95abaab5-727e-4aae-9938-e2ed75c707b2_fixed.java
index 57c40b2..e3774eb 100644
--- a/tmp/1d0bc093-4f67-4424-b047-3ee74483a0ff_buggy.java
+++ b/tmp/95abaab5-727e-4aae-9938-e2ed75c707b2_fixed.java
@@ -1,27 +1,51 @@
   /**
    * Visits a GETPROP node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    * @param parent The parent of <code>n</code>
    */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
+    // 1. Check for null or undefined base object.
+    // This is the most critical check for runtime errors.
+    // If the base object is null/undefined, expectNotNullOrUndefined reports a warning
+    // and returns false. In this case, further property checks are not applicable.
+    if (!validator.expectNotNullOrUndefined(t, n, childType,
+        "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+      // If it returns false, it means childType was null or undefined,
+      // and a warning was already reported. No further property checks needed.
+      ensureTyped(t, n); // Ensure the node has a type, even if it's an error type.
+      return;
+    }
+
+    // From here, childType is guaranteed to be non-null and non-undefined.
+
+    // 2. Check for illegal property access using dot notation on dictionary types.
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
-        "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+    } else {
+      // 3. Perform property existence/type checking, unless it's on the LHS of an assignment.
+      // If 'n' is on the LHS of an assignment, `visitAssign` handles the property checks
+      // including property creation. We should not duplicate/interfere here.
+      boolean isLhsOfAssignment = parent.isAssign() && parent.getFirstChild() == n;
+
+      if (!isLhsOfAssignment) {
+        // If n is on the RHS of an assignment (e.g. `obj.unknownProp` in `a = obj.unknownProp`)
+        // or not part of an assignment at all (e.g. `obj.knownProp;` as a statement),
+        // then we must check property access validity.
         checkPropertyAccess(childType, property.getString(), t, n);
       }
+    }
+
+    // Always ensure the node has a JSType assigned to it.
     ensureTyped(t, n);
   }
\ No newline at end of file
