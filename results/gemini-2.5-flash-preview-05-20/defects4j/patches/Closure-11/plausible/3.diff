diff --git a/tmp/b3518be6-aaed-40d1-ae8d-abf2bff4cc31_buggy.java b/tmp/6f95deed-089a-4e35-bece-fe1c02dfa07f_fixed.java
index 57c40b2..fa50f74 100644
--- a/tmp/b3518be6-aaed-40d1-ae8d-abf2bff4cc31_buggy.java
+++ b/tmp/6f95deed-089a-4e35-bece-fe1c02dfa07f_fixed.java
@@ -1,27 +1,32 @@
   /**
    * Visits a GETPROP node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    * @param parent The parent of <code>n</code>
    */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
     } else if (validator.expectNotNullOrUndefined(t, n, childType,
         "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+      // If the base object type is not null/undefined, then we proceed to check property access.
+      // However, if this GETPROP node is on the left-hand side of an assignment,
+      // the TypeCheck.visitAssign method is responsible for handling new property definitions.
+      // In that case, we should not issue a "property never defined" warning here.
+      boolean isLhsOfAssignment = parent.isAssign() && parent.getFirstChild() == n;
+      if (!isLhsOfAssignment) {
         checkPropertyAccess(childType, property.getString(), t, n);
       }
+    }
     ensureTyped(t, n);
   }
\ No newline at end of file
