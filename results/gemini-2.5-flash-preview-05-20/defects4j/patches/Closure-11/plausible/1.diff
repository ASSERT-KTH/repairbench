diff --git a/tmp/1a522d30-f562-443a-81b9-f19333ba6e3b_buggy.java b/tmp/6ce6a854-c18a-45ca-b92c-d1046a4f2006_fixed.java
index 57c40b2..cffe877 100644
--- a/tmp/1a522d30-f562-443a-81b9-f19333ba6e3b_buggy.java
+++ b/tmp/6ce6a854-c18a-45ca-b92c-d1046a4f2006_fixed.java
@@ -1,27 +1,42 @@
   /**
    * Visits a GETPROP node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    * @param parent The parent of <code>n</code>
    */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
+    // First, check if the object being accessed is null or undefined.
+    // validator.expectNotNullOrUndefined returns true if the type is NOT null/undefined,
+    // and reports an error otherwise. If it reports an error, we should stop
+    // further property access checks for this node.
+    if (!validator.expectNotNullOrUndefined(t, n, childType,
+        "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+      ensureTyped(t, n); // Ensure the node has a type even if there's an error.
+      return;
+    }
+
+    // Now, childType is guaranteed to be non-null and non-undefined.
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
-        "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+    } else {
+      // The previous 'else if (n.getJSType() != null && parent.isAssign()) { return; }'
+      // block was removed. This block was preventing `checkPropertyAccess` from running
+      // in assignment contexts, which could lead to missed warnings (e.g., assigning
+      // to properties of `null` or undefined properties).
+      // `checkPropertyAccess` is designed to handle property existence and
+      // assignability, and should generally always be run when the object
+      // itself is valid (not null/undefined or a dictionary).
       checkPropertyAccess(childType, property.getString(), t, n);
     }
     ensureTyped(t, n);
   }
\ No newline at end of file
