diff --git a/tmp/5cc420bb-6e31-4204-bcaa-cf0459447d07_buggy.java b/tmp/5ca543fb-3f3c-403a-ab1a-544dd71763b9_fixed.java
index 57c40b2..c8e3406 100644
--- a/tmp/5cc420bb-6e31-4204-bcaa-cf0459447d07_buggy.java
+++ b/tmp/5ca543fb-3f3c-403a-ab1a-544dd71763b9_fixed.java
@@ -1,27 +1,48 @@
   /**
    * Visits a GETPROP node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    * @param parent The parent of <code>n</code>
    */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
+    // Rule 1: Cannot access properties on dictionaries using '.'
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
-        "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+      // Continue to ensureTyped, but skip further checks on this property access.
+    } else {
+      // Rule 2: Cannot access properties on null or undefined base objects.
+      // This check must always happen if the object is not a dictionary.
+      // The previous logic suppressed this check if n.getJSType() was already known
+      // and it was an assignment, which was incorrect.
+      boolean propertyAccessOnValidObject = validator.expectNotNullOrUndefined(
+          t, n, childType, "No properties on this expression", getNativeType(OBJECT_TYPE));
+
+      // Rule 3: Check if the property itself is defined on the object's type.
+      // This check should only happen if:
+      // a) The base object was valid (or assumed valid by expectNotNullOrUndefined).
+      // b) This GETPROP node is NOT the left-hand side of an assignment.
+      //    If it's the LHS of an assignment (e.g., `obj.prop = value;`),
+      //    we are potentially defining or assigning to the property, so we
+      //    don't want to report "property never defined".
+      //    If it's the RHS (e.g., `value = obj.prop;`) or not an assignment,
+      //    we DO want to check for undefined properties.
+      boolean isLhsOfAssignment = (parent.isAssign() && parent.getFirstChild() == n);
+
+      if (propertyAccessOnValidObject && !isLhsOfAssignment) {
         checkPropertyAccess(childType, property.getString(), t, n);
       }
+    }
+    
+    // Always ensure the GETPROP node itself gets a type.
     ensureTyped(t, n);
   }
\ No newline at end of file
