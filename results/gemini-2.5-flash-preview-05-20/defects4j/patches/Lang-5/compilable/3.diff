diff --git a/tmp/6b5fbbac-6cdf-437e-bd55-1334e9e7565a_buggy.java b/tmp/46aae643-bf1c-424f-a183-b6704bf222d3_fixed.java
index f843d29..bdcaa7f 100644
--- a/tmp/6b5fbbac-6cdf-437e-bd55-1334e9e7565a_buggy.java
+++ b/tmp/46aae643-bf1c-424f-a183-b6704bf222d3_fixed.java
@@ -1,68 +1,103 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("_GB")        = new Locale("", "GB", "")
+     *   LocaleUtils.toLocale("_GB_xxx")    = new Locale("", "GB", "xxx")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
-        if (len < 2) {
+
+        // Find the positions of underscores
+        final int underscore1 = str.indexOf('_');
+        final int underscore2 = str.indexOf('_', underscore1 + 1);
+
+        // Case 1: No underscores (e.g., "en")
+        if (underscore1 == -1) {
+            // Must be exactly two lowercase characters for a language code
+            if (len != 2 || !Character.isLowerCase(str.charAt(0)) || !Character.isLowerCase(str.charAt(1))) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-        final char ch0 = str.charAt(0);
-            final char ch1 = str.charAt(1);
-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (len == 2) {
             return new Locale(str);
         }
-            if (len < 5) {
+
+        // Case 2: One underscore (e.g., "en_GB" or "_GB")
+        if (underscore2 == -1) {
+            if (underscore1 == 0) { // Pattern: _CC (empty language, country)
+                // Country must be 2 uppercase characters
+                if (len != 3 || !Character.isUpperCase(str.charAt(1)) || !Character.isUpperCase(str.charAt(2))) {
                     throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
-            if (str.charAt(2) != '_') {
+                return new Locale("", str.substring(1, 3));
+            } else { // Pattern: LL_CC (language, country)
+                // Language must be 2 lowercase characters, country must be 2 uppercase characters
+                if (len != 5 || !Character.isLowerCase(str.charAt(0)) || !Character.isLowerCase(str.charAt(1)) ||
+                        !Character.isUpperCase(str.charAt(3)) || !Character.isUpperCase(str.charAt(4))) {
                     throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
-            final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
-            }
-            final char ch4 = str.charAt(4);
-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (len == 5) {
                 return new Locale(str.substring(0, 2), str.substring(3, 5));
             }
-            if (len < 7) {
+        }
+
+        // Case 3: Two underscores (e.g., "en_GB_xxx" or "_GB_xxx")
+        // This indicates a language, country, and variant.
+        
+        final String language = str.substring(0, underscore1);
+        final String country = str.substring(underscore1 + 1, underscore2);
+        final String variant = str.substring(underscore2 + 1);
+
+        if (language.length() == 0) { // Pattern: _CC_VVV (empty language, country, variant)
+            // Country must be 2 uppercase characters
+            if (country.length() != 2 || !Character.isUpperCase(country.charAt(0)) || !Character.isUpperCase(country.charAt(1))) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // Variant cannot be empty
+            if (variant.isEmpty()) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            return new Locale("", country, variant);
+
+        } else if (language.length() == 2) { // Pattern: LL_CC_VVV (language, country, variant)
+            // Language must be 2 lowercase characters
+            if (!Character.isLowerCase(language.charAt(0)) || !Character.isLowerCase(language.charAt(1))) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // Country must be 2 uppercase characters
+            if (country.length() != 2 || !Character.isUpperCase(country.charAt(0)) || !Character.isUpperCase(country.charAt(1))) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // Variant cannot be empty
+            if (variant.isEmpty()) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (str.charAt(5) != '_') {
+            return new Locale(language, country, variant);
+
+        } else { // Invalid format (e.g., language code is not 2 chars, or other unexpected structure)
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
     }
\ No newline at end of file
