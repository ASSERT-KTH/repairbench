diff --git a/tmp/b4b21994-5ffa-4d71-996d-4092b3d27b39_buggy.java b/tmp/447dbdce-e118-4462-81fb-26661fe97711_fixed.java
index f843d29..7c43027 100644
--- a/tmp/b4b21994-5ffa-4d71-996d-4092b3d27b39_buggy.java
+++ b/tmp/447dbdce-e118-4462-81fb-26661fe97711_fixed.java
@@ -1,68 +1,106 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("_GB")        = new Locale("", "GB", "")
+     *   LocaleUtils.toLocale("_GB_P")      = new Locale("", "GB", "P")
+     *   LocaleUtils.toLocale("_GB_POSIX")  = new Locale("", "GB", "POSIX")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
+
         if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         final char ch0 = str.charAt(0);
+
+        if (ch0 == '_') {
+            // Handles cases like "_GB", "_GB_P", where language is empty.
+            // Expected format: "_CC" or "_CC_VV"
+            if (len < 3) { // e.g., "_G"
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
             final char ch1 = str.charAt(1);
+            final char ch2 = str.charAt(2);
+            // Country code must be two uppercase letters
+            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (len == 3) { // e.g., "_GB"
+                return new Locale("", str.substring(1, 3));
+            }
+            // len > 3, must be "_CC_VV"
+            if (str.charAt(3) != '_') { // e.g., "_GBX"
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (len == 4) { // e.g., "_GB_"
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // len > 4 and str.charAt(3) == '_'
+            return new Locale("", str.substring(1, 3), str.substring(4));
+
+        } else {
+            // Original logic for "ll", "ll_CC", "ll_CC_VV"
+            final char ch1 = str.charAt(1);
+            // Language code must be two lowercase letters
             if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 2) {
+            if (len == 2) { // "ll"
                 return new Locale(str);
             }
-            if (len < 5) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
+            // len > 2, must have an underscore for "ll_..."
             if (str.charAt(2) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
+
+            // len > 2 and str.charAt(2) == '_'
+            // Check for "ll_CC" or "ll_CC_VV"
+            if (len < 5) { // "ll_C" or "ll_" (too short for country code)
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
             final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
-            }
             final char ch4 = str.charAt(4);
+            // Country code must be two uppercase letters
             if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 5) {
+
+            if (len == 5) { // "ll_CC"
                 return new Locale(str.substring(0, 2), str.substring(3, 5));
             }
-            if (len < 7) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (str.charAt(5) != '_') {
+
+            // len > 5, must be "ll_CC_VV"
+            if (str.charAt(5) != '_') { // "ll_CCX" (variant not prefixed by underscore)
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
+            // Variant present
             return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
         }
+    }
\ No newline at end of file
