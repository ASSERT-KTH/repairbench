diff --git a/tmp/1965c702-3021-4f44-9768-7689a9b920d4_buggy.java b/tmp/d4befde6-889c-4dbb-b4a8-670353eaf38b_fixed.java
index f843d29..bce4fcc 100644
--- a/tmp/1965c702-3021-4f44-9768-7689a9b920d4_buggy.java
+++ b/tmp/d4befde6-889c-4dbb-b4a8-670353eaf38b_fixed.java
@@ -1,68 +1,108 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("_GB")        = new Locale("", "GB")
+     *   LocaleUtils.toLocale("_GB_P")      = new Locale("", "GB", "P")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
-        if (len < 2) {
+
+        // Check for minimum length
+        if (len < 2) { // e.g. "", "a", "_"
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         final char ch0 = str.charAt(0);
+
+        // Handle variants starting with an underscore, e.g., "_GB", "_GB_POSIX"
+        if (ch0 == '_') {
+            if (len < 3) { // e.g., "_G" (too short for country)
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            final char ch1 = str.charAt(1);
+            final char ch2 = str.charAt(2);
+            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) { // e.g., "_Gb", "_gB", "_1B", "_G1"
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (len == 3) { // e.g., "_GB"
+                return new Locale("", str.substring(1, 3));
+            }
+            // If len > 3, it must be "_CC_VVV"
+            if (len < 5) { // e.g., "_GB_", "_GB_X" (too short for variant if '_' is present)
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (str.charAt(3) != '_') { // e.g., "_GBAP" (must have underscore after country)
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // At this point, format is "_CC_VVV" and len >= 5
+            return new Locale("", str.substring(1, 3), str.substring(4));
+
+        } else { // Assume it starts with a language code, e.g., "en", "en_GB", "en_GB_xxx", "en__xxx"
             final char ch1 = str.charAt(1);
-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
+            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) { // e.g., "EN", "eN"
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 2) {
+            if (len == 2) { // e.g., "en"
                 return new Locale(str);
             }
-            if (len < 5) {
+            // At this point, len > 2, and "ll" is valid. Next must be '_'
+            if (str.charAt(2) != '_') { // e.g., "enX"
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (str.charAt(2) != '_') {
+            // At this point, len > 2 and format is "ll_"
+            if (len < 5) { // e.g., "en_", "en_G" (too short for country or empty country)
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
             final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
+            if (ch3 == '_') { // Empty country, e.g., "en__xxx"
+                if (len < 6) { // e.g., "en__" (too short for variant)
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
                 return new Locale(str.substring(0, 2), "", str.substring(4));
             }
+
+            // Must be "ll_CC" or "ll_CC_VVV"
             final char ch4 = str.charAt(4);
-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
+            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) { // e.g., "en_gb", "en_gB", "en_Gb"
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 5) {
+            if (len == 5) { // e.g., "en_GB"
                 return new Locale(str.substring(0, 2), str.substring(3, 5));
             }
-            if (len < 7) {
+            // At this point, len > 5 and format is "ll_CC", must be "ll_CC_VVV"
+            if (len < 7) { // e.g., "en_GB_", "en_GB_X" (too short for variant)
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (str.charAt(5) != '_') {
+            if (str.charAt(5) != '_') { // e.g., "en_GBX"
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
+            // At this point, format is "ll_CC_VVV"
             return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
         }
+    }
\ No newline at end of file
