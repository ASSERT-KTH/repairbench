diff --git a/tmp/65a54542-d2b1-4d5c-81be-f93e039290fb_buggy.java b/tmp/7ffd2321-7ebc-4ab8-9b0b-7c7f18f0c781_fixed.java
index f843d29..905bfe6 100644
--- a/tmp/65a54542-d2b1-4d5c-81be-f93e039290fb_buggy.java
+++ b/tmp/7ffd2321-7ebc-4ab8-9b0b-7c7f18f0c781_fixed.java
@@ -1,68 +1,114 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("_GB")        = new Locale("", "GB")
+     *   LocaleUtils.toLocale("_GB_xxx")    = new Locale("", "GB", "xxx")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
+
         if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         final char ch0 = str.charAt(0);
+
+        if (ch0 == '_') { // Handle _Country_Variant cases, e.g., "_GB", "_GB_POSIX"
+            if (len < 3) { // "_G" is too short for a valid _Country format
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            final char ch1 = str.charAt(1);
+            final char ch2 = str.charAt(2);
+            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // Format is "_CC"
+            if (len == 3) {
+                return new Locale("", str.substring(1, 3));
+            }
+            // Format is "_CC_V"
+            if (str.charAt(3) != '_') { // Expecting "_CC_Something", if not "_CC_V" throw error
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (len < 5) { // "_CC_" is too short for a variant
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            return new Locale("", str.substring(1, 3), str.substring(4));
+        }
+
+        // Standard language_country_variant logic
         final char ch1 = str.charAt(1);
         if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+        // Format is "ll"
         if (len == 2) {
             return new Locale(str);
         }
-            if (len < 5) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
+
+        // Format is "ll_..."
         if (str.charAt(2) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
+
+        // Check for "ll__Variant" case (e.g., "en__GB")
+        if (len > 3 && str.charAt(3) == '_') {
+            // Language: str.substring(0, 2)
+            // Country: ""
+            // Variant: str.substring(4)
+            // This handles "en__" leading to new Locale("en", "", "")
             return new Locale(str.substring(0, 2), "", str.substring(4));
         }
+
+        // Format is "ll_CC" or "ll_CC_Variant"
+        // At this point, str.charAt(3) and str.charAt(4) should be uppercase for country code.
+        if (len < 5) { // "en_G" or "en_" are too short for a valid "ll_CC" format
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        final char ch3 = str.charAt(3);
         final char ch4 = str.charAt(4);
         if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Format is "ll_CC"
         if (len == 5) {
             return new Locale(str.substring(0, 2), str.substring(3, 5));
         }
-            if (len < 7) {
+
+        // Format is "ll_CC_Variant"
+        if (str.charAt(5) != '_') { // Expecting "ll_CC_V", so 5th char must be '_'
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (str.charAt(5) != '_') {
+        if (len < 7) { // "en_GB_" is too short for a variant
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
     }
\ No newline at end of file
