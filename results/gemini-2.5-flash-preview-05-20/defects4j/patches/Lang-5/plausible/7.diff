diff --git a/tmp/f128a1c6-e2a3-4cee-a74a-f9d2fc2d4f8c_buggy.java b/tmp/3ddb8160-c667-4f7e-9f55-d295f9bf44e1_fixed.java
index f843d29..c874ad0 100644
--- a/tmp/f128a1c6-e2a3-4cee-a74a-f9d2fc2d4f8c_buggy.java
+++ b/tmp/3ddb8160-c667-4f7e-9f55-d295f9bf44e1_fixed.java
@@ -1,68 +1,75 @@
-    /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
-     *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
-     * @throws IllegalArgumentException if the string is an invalid format
-     */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
-        if (len < 2) {
+
+        // LANG-865: Support for empty language code like "_GB" or "_GB_POSIX"
+        if (len >= 1 && str.charAt(0) == '_') {
+            if (len < 3) { // e.g. "_G" (len 2) or "_" (len 1)
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            final char ch1 = str.charAt(1);
+            final char ch2 = str.charAt(2);
+            // Country code must be uppercase letters
+            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) { // e.g. "_Gb", "_gB", "_1B", "_G1"
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (len == 3) { // e.g. "_GB"
+                return new Locale("", str.substring(1, 3));
+            }
+            // Must have underscore after country for variant
+            if (str.charAt(3) != '_') { // e.g. "_GBX" (country followed by non-underscore)
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // Variant part must be present (not empty after second underscore)
+            if (len < 5) { // e.g. "_GB_" (len 4)
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            return new Locale("", str.substring(1, 3), str.substring(4)); // e.g. "_GB_P", "_GB_POSIX"
+        }
+
+        // Original logic for language code present, e.g. "en", "en_GB", "en_GB_xxx"
+        if (len < 2) { // e.g. "a" (len 1)
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         final char ch0 = str.charAt(0);
         final char ch1 = str.charAt(1);
-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
+        if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) { // e.g. "EN", "aB" (for len=2)
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (len == 2) {
+        if (len == 2) { // e.g. "en"
             return new Locale(str);
         }
-            if (len < 5) {
+        // At this point, len > 2, and starts with "ll". It must be "ll_..."
+        // Minimum length for "ll_CC" or "ll__V" is 5.
+        if (len < 5) { // e.g. "en_G" (len 4)
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (str.charAt(2) != '_') {
+        if (str.charAt(2) != '_') { // e.g. "enGB" (len 4)
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
-            }
         final char ch4 = str.charAt(4);
-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
+
+        if (ch3 == '_') { // e.g. "en__GB" (country code is empty, variant "GB")
+            // This is "ll__V". Variant needs to be present (substring(4) won't be empty due to len >= 5 check above)
+            return new Locale(str.substring(0, 2), "", str.substring(4));
+        }
+
+        if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) { // e.g. "en_Gb" (country code not uppercase)
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (len == 5) {
+        if (len == 5) { // e.g. "en_GB"
             return new Locale(str.substring(0, 2), str.substring(3, 5));
         }
-            if (len < 7) {
+        // At this point, len > 5. Must be "ll_CC_..."
+        // Minimum length for "ll_CC_V" is 7. Variant must be non-empty.
+        if (len < 7) { // e.g. "en_GB_" (len 6) - variant is empty, which is not allowed by this check
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (str.charAt(5) != '_') {
+        if (str.charAt(5) != '_') { // e.g. "en_GBX" (country followed by non-underscore)
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6)); // e.g. "en_GB_xxx"
     }
\ No newline at end of file
