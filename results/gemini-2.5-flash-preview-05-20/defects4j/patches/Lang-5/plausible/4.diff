diff --git a/tmp/ea82fdf0-b971-476d-aea2-3f62bda32992_buggy.java b/tmp/7218dc70-f016-4471-8283-bb9aaa0d516c_fixed.java
index f843d29..9b832a7 100644
--- a/tmp/ea82fdf0-b971-476d-aea2-3f62bda32992_buggy.java
+++ b/tmp/7218dc70-f016-4471-8283-bb9aaa0d516c_fixed.java
@@ -1,68 +1,118 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("_GB")        = new Locale("", "GB")
+     *   LocaleUtils.toLocale("_GB_xxx")    = new Locale("", "GB", "xxx")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
+
+        // Check for general minimum length.
+        // A locale must have at least 2 characters (e.g., "en")
+        // or 3 characters if starting with underscore (e.g., "_GB").
         if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         final char ch0 = str.charAt(0);
+
+        // Case 1: Starts with an underscore, e.g., "_GB" or "_GB_xxx"
+        if (ch0 == '_') {
+            if (len < 3) { // "_G" is too short
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            final char ch1 = str.charAt(1);
+            final char ch2 = str.charAt(2);
+            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {
+                // "_Gb", "_gB", "_1B", "_G1" are invalid
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (len == 3) { // "_CC" format
+                return new Locale("", str.substring(1, 3));
+            }
+            // Must be "_CC_VVV" format
+            if (str.charAt(3) != '_') { // "_GBX" (missing underscore) or "_GBAP"
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (len < 5) { // "_GB_" is too short, must have variant character
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // Variant can be any character string (after "_CC_")
+            return new Locale("", str.substring(1, 3), str.substring(4));
+        }
+
+        // Case 2: Starts with a language code, e.g., "en", "en_GB", "en__xxx"
         final char ch1 = str.charAt(1);
         if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
+            // "EN", "eN", "12", "A", etc. are invalid
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (len == 2) {
+
+        if (len == 2) { // "ll" format
             return new Locale(str);
         }
-            if (len < 5) {
+
+        // For formats longer than "ll", they must use underscores as separators.
+        // Minimum length for "ll_CC" or "ll__VVV" is 5.
+        if (len < 5) { // "en_", "en_G" are too short
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (str.charAt(2) != '_') {
+        if (str.charAt(2) != '_') { // "enGB" (missing underscore)
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
+        if (ch3 == '_') { // "ll__VVV" format (language and variant, no country)
+            // Example: "en__US"
+            // Variant must be present, so "en__" (len 4) should already be caught by len < 5.
+            // So, substring(4) will have at least one char.
             return new Locale(str.substring(0, 2), "", str.substring(4));
         }
+
+        // Must be "ll_CC" or "ll_CC_VVV" format
         final char ch4 = str.charAt(4);
         if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
+            // "en_gB", "en_12" are invalid country codes
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (len == 5) {
+
+        if (len == 5) { // "ll_CC" format
             return new Locale(str.substring(0, 2), str.substring(3, 5));
         }
-            if (len < 7) {
+
+        // Must be "ll_CC_VVV" format
+        if (str.charAt(5) != '_') { // "en_GBX" (missing underscore)
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (str.charAt(5) != '_') {
+        if (len < 7) { // "en_GB_" is too short, must have variant character
              throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+        // Variant can be any character string (after "ll_CC_")
         return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
     }
\ No newline at end of file
