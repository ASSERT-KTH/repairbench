diff --git a/tmp/7c7eef5a-c136-4b26-9028-f5bab1d9faac_buggy.java b/tmp/45349d9b-17fc-4aa4-8d14-eeb61873d2e1_fixed.java
index f843d29..2721c61 100644
--- a/tmp/7c7eef5a-c136-4b26-9028-f5bab1d9faac_buggy.java
+++ b/tmp/45349d9b-17fc-4aa4-8d14-eeb61873d2e1_fixed.java
@@ -1,68 +1,121 @@
+import java.util.Locale;
+
+public class LocaleUtils {
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("_GB")        = new Locale("", "GB")
+     *   LocaleUtils.toLocale("_GB_P")      = new Locale("", "GB", "P")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
+
+        // Check for empty string or too short string
         if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Case: Starts with underscore, meaning no language code, only country or country_variant
+        if (str.charAt(0) == '_') {
+            // Must be at least "_CC" (length 3)
+            if (len < 3) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            final char ch1 = str.charAt(1);
+            final char ch2 = str.charAt(2);
+            // Country code must be two uppercase letters
+            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // If it's exactly "_CC"
+            if (len == 3) {
+                return new Locale("", str.substring(1, 3));
+            }
+            // If it's longer than "_CC", it must be "_CC_VARIANT"
+            // So, it must be at least "_CC_X" (length 5)
+            if (len < 5) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // The 4th character must be an underscore for a variant
+            if (str.charAt(3) != '_') {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // All checks passed, create Locale("", "CC", "VARIANT")
+            return new Locale("", str.substring(1, 3), str.substring(4));
+        }
+
+        // Case: Starts with two lowercase letters (language code)
         final char ch0 = str.charAt(0);
         final char ch1 = str.charAt(1);
         if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // If it's just "LL"
         if (len == 2) {
             return new Locale(str);
         }
+
+        // If longer than "LL", it must be "LL_CC" or "LL_CC_VARIANT"
+        // So, it must be at least "LL_C" (length 4) or "LL_CC" (length 5)
+        // Per spec, "LL_C" is invalid, must be "LL_CC", so min length 5 for country code
         if (len < 5) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+        // The 3rd character must be an underscore
         if (str.charAt(2) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
-            }
         final char ch4 = str.charAt(4);
+        // Country code must be two uppercase letters
         if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // If it's exactly "LL_CC"
         if (len == 5) {
             return new Locale(str.substring(0, 2), str.substring(3, 5));
         }
+
+        // If longer than "LL_CC", it must be "LL_CC_VARIANT"
+        // So, it must be at least "LL_CC_X" (length 7)
         if (len < 7) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+        // The 6th character must be an underscore for a variant
         if (str.charAt(5) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // All checks passed, create Locale("LL", "CC", "VARIANT")
         return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
     }
+}
\ No newline at end of file
