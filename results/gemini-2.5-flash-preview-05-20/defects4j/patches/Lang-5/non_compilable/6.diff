diff --git a/tmp/e2342544-eaaf-474f-b0e3-7dce85ceb841_buggy.java b/tmp/9c1655db-96db-4bf0-bf01-a00cd7e3ad29_fixed.java
index f843d29..bf74c2a 100644
--- a/tmp/e2342544-eaaf-474f-b0e3-7dce85ceb841_buggy.java
+++ b/tmp/9c1655db-96db-4bf0-bf01-a00cd7e3ad29_fixed.java
@@ -1,68 +1,141 @@
+import java.util.Locale;
+
+public class LocaleUtils {
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("_GB")        = new Locale("", "GB")
+     *   LocaleUtils.toLocale("_GB_P")      = new Locale("", "GB", "P")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
-        if (len < 2) {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
-        }
-        final char ch0 = str.charAt(0);
-            final char ch1 = str.charAt(1);
-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
+
+        // Check for basic length constraints
+        if (len < 2) { // Handles "", "a", "A", "_" etc.
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Handle language only (e.g., "en")
         if (len == 2) {
+            final char ch0 = str.charAt(0);
+            final char ch1 = str.charAt(1);
+            if (Character.isLowerCase(ch0) && Character.isLowerCase(ch1)) {
                 return new Locale(str);
+            } else {
+                // Catches "EN", "eN", "E", "_G" (len 2)
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+        }
+
+        // Handle cases starting with underscore (e.g., "_GB", "_GB_P")
+        // This implies an empty language code.
+        if (str.charAt(0) == '_') {
+            // Must be at least "_CC" (length 3)
+            // Strings like "_G" (len 2) are already caught by the len == 2 block above.
+            if (len < 3) {
+                 // This specific condition is technically unreachable if len==2 is handled,
+                 // but defensively it ensures len >= 3 for this path.
+                 throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+
+            final char ch1 = str.charAt(1);
+            final char ch2 = str.charAt(2);
+            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {
+                // Catches "_Gb", "_gB", "_1B", "_G1"
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+
+            if (len == 3) { // Format: "_CC"
+                return new Locale("", str.substring(1, 3));
+            }
+
+            // If len > 3, it must be "_CC_V" format
+            if (str.charAt(3) != '_') { // Must have underscore after country
+                // Catches "_GBX" where X is not '_' (e.g., "_GBAP")
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (len < 5) { // Format: "_CC_" (length 4) - variant missing
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // Format: "_CC_V" (length >= 5)
+            return new Locale("", str.substring(1, 3), str.substring(4));
+        }
+
+        // Handle standard formats: "ll_CC", "ll_CC_V", "ll__V"
+        // At this point, len >= 3 and str does not start with '_'.
+        // Minimum valid length for these is "ll_CC" (5 chars).
+        if (len < 5) { // Catches "en_", "en_G" (len 3, 4) etc.
+            throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (len < 5) {
+
+        final char ch0 = str.charAt(0);
+        final char ch1 = str.charAt(1);
+        // Language code must be lowercase
+        if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Must have underscore after language
         if (str.charAt(2) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
+        if (ch3 == '_') { // Format: "ll__V" (country empty)
+            // Variant starts from index 4
+            // For "en__", len=4, already caught by len < 5 check
+            // For "en__U", len=5, str.substring(4) = "U"
             return new Locale(str.substring(0, 2), "", str.substring(4));
         }
+
+        // Must be "ll_CC" or "ll_CC_V"
         final char ch4 = str.charAt(4);
+        // Country code must be uppercase
         if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (len == 5) {
+
+        if (len == 5) { // Format: "ll_CC"
             return new Locale(str.substring(0, 2), str.substring(3, 5));
         }
-            if (len < 7) {
+
+        // Must be "ll_CC_V"
+        // Min length for "ll_CC_V" is 7 (2+1+2+1+1)
+        if (len < 7) { // Catches "ll_CC_" (len 6) or "ll_CCV" (len 6)
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+        // Must have underscore after country
         if (str.charAt(5) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Format: "ll_CC_V"
         return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
     }
+}
\ No newline at end of file
