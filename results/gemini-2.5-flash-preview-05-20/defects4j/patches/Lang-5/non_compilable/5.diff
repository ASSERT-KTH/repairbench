diff --git a/tmp/1a5c7620-518e-44bb-a796-838e290445e4_buggy.java b/tmp/2e9b949d-eed6-479b-a784-cf7c4f3e9e39_fixed.java
index f843d29..eba0e5c 100644
--- a/tmp/1a5c7620-518e-44bb-a796-838e290445e4_buggy.java
+++ b/tmp/2e9b949d-eed6-479b-a784-cf7c4f3e9e39_fixed.java
@@ -1,68 +1,109 @@
+import java.util.Locale;
+
+public class LocaleUtils {
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("_GB")        = new Locale("", "GB")
+     *   LocaleUtils.toLocale("_GB_P")      = new Locale("", "GB", "P")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
-     * The language code must be lowercase.
+     * The language code must be lowercase (or empty for _COUNTRY format).
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
+
+        // LANG-865. Supports the format "_COUNTRY" or "_COUNTRY_VARIANT"
+        if (len >= 1 && str.charAt(0) == '_') {
+            if (len < 3) { // Minimum length for _COUNTRY (e.g., "_GB") is 3
+                throw new IllegalArgumentException("Invalid locale format: " + str); // e.g., "_G", "_"
+            }
+            final char ch1 = str.charAt(1);
+            final char ch2 = str.charAt(2);
+            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {
+                throw new IllegalArgumentException("Invalid locale format: " + str); // e.g., "_Gb", "_gB", "_1B", "_G1"
+            }
+            if (len == 3) { // Only "_CC" format, e.g., "_GB"
+                return new Locale("", str.substring(1, 3));
+            }
+            // Length is greater than 3, so expecting "_CC_VARIANT"
+            if (str.charAt(3) != '_') { // e.g., "_GBAP"
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // Length is 4 ("_CC_"). This is invalid as variant must be present.
+            if (len < 5) { // e.g., "_GB_"
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // Format "_CC_VARIANT", variant starts at index 4
+            return new Locale("", str.substring(1, 3), str.substring(4));
+
+        } else { // Original logic for language_country_variant (e.g., "en", "en_GB", "en_GB_xxx")
             if (len < 2) {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
+                throw new IllegalArgumentException("Invalid locale format: " + str); // e.g., "a"
             }
             final char ch0 = str.charAt(0);
             final char ch1 = str.charAt(1);
             if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+                throw new IllegalArgumentException("Invalid locale format: " + str); // e.g., "EN", "En"
             }
-            if (len == 2) {
+            if (len == 2) { // "en"
                 return new Locale(str);
             }
-            if (len < 5) {
+            // At this point, len > 2. Expecting "ll_..."
+            // Minimum length for "ll_CC" is 5.
+            // For "ll_C" (len=4), it should be invalid.
+            if (len < 5) { // e.g., "en_", "en_G"
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
             if (str.charAt(2) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+                throw new IllegalArgumentException("Invalid locale format: " + str); // e.g., "enGB"
             }
             final char ch3 = str.charAt(3);
+            // This handles "ll__variant" case (e.g., "en__variant")
             if (ch3 == '_') {
                 return new Locale(str.substring(0, 2), "", str.substring(4));
             }
+            // This handles "ll_CC" or "ll_CC_variant"
             final char ch4 = str.charAt(4);
             if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+                throw new IllegalArgumentException("Invalid locale format: " + str); // e.g., "en_gb", "en_gB"
             }
-            if (len == 5) {
+            if (len == 5) { // "en_GB"
                 return new Locale(str.substring(0, 2), str.substring(3, 5));
             }
-            if (len < 7) {
+            // At this point, len > 5. Expecting "ll_CC_variant"
+            // Minimum length for "ll_CC_V" is 7.
+            if (len < 7) { // e.g., "en_GB_"
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
             if (str.charAt(5) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+                throw new IllegalArgumentException("Invalid locale format: " + str); // e.g., "en_GBX"
             }
+            // Format "ll_CC_variant"
             return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
         }
+    }
+}
\ No newline at end of file
