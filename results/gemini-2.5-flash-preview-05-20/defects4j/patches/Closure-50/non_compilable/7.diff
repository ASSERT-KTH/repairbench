diff --git a/tmp/4c95fe6c-94f4-4307-9477-548f62411c65_buggy.java b/tmp/b005a155-0a8d-4762-9f35-37583139b323_fixed.java
index d8b0158..fbb6fe3 100644
--- a/tmp/4c95fe6c-94f4-4307-9477-548f62411c65_buggy.java
+++ b/tmp/b005a155-0a8d-4762-9f35-37583139b323_fixed.java
@@ -1,113 +1,139 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   private Node tryFoldArrayJoin(Node n) {
     Node callTarget = n.getFirstChild();
 
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
       return n;
     }
 
-    Node right = callTarget.getNext();
+    Node right = callTarget.getNext(); // This is the separator argument
+    // Ensure that only one argument is provided for the join method.
+    // If there are more arguments, it's not a standard join and we don't fold.
+    if (right != null && right.getNext() != null) {
+      return n;
+    }
+
     if (right != null) {
       if (!NodeUtil.isImmutableValue(right)) {
         return n;
       }
     }
 
-    Node arrayNode = callTarget.getFirstChild();
-    Node functionName = arrayNode.getNext();
+    Node arrayNode = callTarget.getFirstChild(); // This is the ARRAYLIT
+    Node functionName = callTarget.getSecondChild(); // This is the STRING "join"
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return n;
     }
 
     // "," is the default, it doesn't need to be explicit
-
     String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = null;
+    // foldedSize will accumulate the sum of costs of the elements in arrayFoldedChildren
     int foldedSize = 0;
     Node prev = null;
     Node elem = arrayNode.getFirstChild();
     // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
         if (sb == null) {
           sb = new StringBuilder();
         } else {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getArrayElementStringValue(elem));
-      } else {
+      } else { // elem is not foldable
         if (sb != null) {
           Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
+          // + 2 for the quotes (for string literal cost).
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(
               Node.newString(sb.toString()).copyInformationFrom(prev));
           sb = null;
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       prev = elem;
       elem = elem.getNext();
     }
 
     if (sb != null) {
       Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
+      // + 2 for the quotes (for string literal cost).
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(
           Node.newString(sb.toString()).copyInformationFrom(prev));
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
+    // Removed: foldedSize += arrayFoldedChildren.size() - 1; // This line was problematic
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         n.getParent().replaceChild(n, emptyStringNode);
         reportCodeChange();
         return emptyStringNode;
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return n;
-        }
-        arrayNode.detachChildren();
+        int actualFoldedSize;
         if (foldedStringNode.getType() != Token.STRING) {
           // If the Node is not a string literal, ensure that
           // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString("").copyInformationFrom(n),
               foldedStringNode);
+          actualFoldedSize = InlineCostEstimator.getCost(replacement);
           foldedStringNode = replacement;
+        } else {
+          actualFoldedSize = InlineCostEstimator.getCost(foldedStringNode);
         }
+
+        if (actualFoldedSize >= originalSize) { // Changed condition to >=
+          return n;
+        }
+        arrayNode.detachChildren();
         n.getParent().replaceChild(n, foldedStringNode);
         reportCodeChange();
         return foldedStringNode;
       default:
-        // No folding could actually be performed.
+        // No folding could actually be performed if arrayFoldedChildren has the same number of elements
+        // as the original array (meaning no adjacent strings were merged).
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
           return n;
         }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
-        if (foldedSize > originalSize) {
+
+        // Calculate the actual cost of the new array literal and the .join() call
+        int actualFoldedSize = 2; // For the '[]' of the array literal
+        actualFoldedSize += foldedSize; // 'foldedSize' now holds sum of element costs
+        if (arrayFoldedChildren.size() > 1) { // Add cost for commas between elements
+            actualFoldedSize += (arrayFoldedChildren.size() - 1) * 2;
+        }
+
+        // Add cost for .join() call overhead
+        actualFoldedSize += InlineCostEstimator.getCost(functionName); // cost of "join" literal
+        actualFoldedSize += 1; // cost of GETPROP operation
+        
+        // Add cost for separator argument if not default
+        if (right != null) {
+            actualFoldedSize += InlineCostEstimator.getCost(right);
+        }
+        actualFoldedSize += 1; // cost of CALL operation
+
+        if (actualFoldedSize >= originalSize) { // Changed condition to >=
           return n;
         }
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
         reportCodeChange();
         break;
     }
 
     return n;
   }
\ No newline at end of file
