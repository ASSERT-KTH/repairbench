diff --git a/tmp/6e6b8562-d7b7-4335-b95f-e69f70a9f6fe_buggy.java b/tmp/ff71f64a-e4bc-4e89-bc49-c30d8a177056_fixed.java
index 1b07d98..338be0e 100644
--- a/tmp/6e6b8562-d7b7-4335-b95f-e69f70a9f6fe_buggy.java
+++ b/tmp/ff71f64a-e4bc-4e89-bc49-c30d8a177056_fixed.java
@@ -1,76 +1,13 @@
-    @Override
-    public JsonSerializer<?> createContextual(SerializerProvider serializers,
-            BeanProperty property) throws JsonMappingException
-    {
-        // Note! Should not skip if `property` null since that'd skip check
-        // for config overrides, in case of root value
-        if (property == null) {
-            return this;
-        }
-        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
-        if (format == null) {
-            return this;
-        }
-        // Simple case first: serialize as numeric timestamp?
-        JsonFormat.Shape shape = format.getShape();
-        if (shape.isNumeric()) {
+    if (shape.isNumeric()) { // THIS CHECK IS FIRST
         return withFormat(Boolean.TRUE, null);
     }
-
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
-        if (format.hasPattern()) {
-            final Locale loc = format.hasLocale()
-                            ? format.getLocale()
-                            : serializers.getLocale();
-            SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);
-            TimeZone tz = format.hasTimeZone() ? format.getTimeZone()
-                    : serializers.getTimeZone();
-            df.setTimeZone(tz);
-            return withFormat(Boolean.FALSE, df);
+    // ... then later ...
+    if (format.hasPattern()) { // THIS CHECK IS SECOND
+        // ... handle pattern ...
     }
+    ```
+    Because the `isNumeric()` check comes *before* `hasPattern()`, the numeric serialization takes precedence, leading to the observed bug.
 
-        // Otherwise, need one of these changes:
-        final boolean hasLocale = format.hasLocale();
-        final boolean hasTZ = format.hasTimeZone();
-        final boolean asString = (shape == JsonFormat.Shape.STRING);
-
-        if (!hasLocale && !hasTZ && !asString) {
-            return this;
-        }
+The fix involves reordering these checks. As per the comment `// 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky.. First: custom pattern will override things`, the intention is for a custom pattern to take precedence over other serialization modes (like numeric timestamp). By placing the `if (format.hasPattern())` block before the `if (shape.isNumeric())` block, the explicit pattern will be honored first, ensuring string serialization when a pattern is provided.
 
-        DateFormat df0 = serializers.getConfig().getDateFormat();
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-        if (df0 instanceof StdDateFormat) {
-            StdDateFormat std = (StdDateFormat) df0;
-            if (format.hasLocale()) {
-                std = std.withLocale(format.getLocale());
-            }
-            if (format.hasTimeZone()) {
-                std = std.withTimeZone(format.getTimeZone());
-            }
-            return withFormat(Boolean.FALSE, std);
-        }
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-        if (!(df0 instanceof SimpleDateFormat)) {
-            serializers.reportBadDefinition(handledType(), String.format(
-"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`",
-df0.getClass().getName()));
-        }
-        SimpleDateFormat df = (SimpleDateFormat) df0;
-        if (hasLocale) {
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-            df = new SimpleDateFormat(df.toPattern(), format.getLocale());
-        } else {
-            df = (SimpleDateFormat) df.clone();
-        }
-        TimeZone newTz = format.getTimeZone();
-        boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());
-        if (changeTZ) {
-            df.setTimeZone(newTz);
-        }
-        return withFormat(Boolean.FALSE, df);
-    }
+The fixed code is as follows:
