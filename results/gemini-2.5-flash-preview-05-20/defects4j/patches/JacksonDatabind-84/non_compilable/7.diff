diff --git a/tmp/5985a61a-4eaf-470d-a79b-4d8698833d3d_buggy.java b/tmp/766d785a-be27-42be-8d39-424e25f1b08d_fixed.java
index e69de29..b722da6 100644
--- a/tmp/5985a61a-4eaf-470d-a79b-4d8698833d3d_buggy.java
+++ b/tmp/766d785a-be27-42be-8d39-424e25f1b08d_fixed.java
@@ -0,0 +1,198 @@
+package com.fasterxml.jackson.databind.type;
+
+import java.lang.reflect.Modifier;
+import java.lang.reflect.Type;
+import java.lang.reflect.TypeVariable;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+
+// Assume TypeFactory has its necessary fields and helper methods,
+// such as _typeCache and helper methods for constructing various types.
+// This is a simplified version focusing on the core fix for _fromClass.
+
+public class TypeFactory
+    implements java.io.Serializable // implements methods like _fromClass
+{
+    private static final long serialVersionUID = 1L;
+
+    // Standard Jackson TypeFactory fields, simplified for context:
+    protected final Map<Object, JavaType> _typeCache = new ConcurrentHashMap<>(100, 0.5f, 4);
+
+    // Other TypeFactory fields and constructors omitted for brevity as they are not the 'buggy function'.
+    // For demonstration, we'll assume defaultInstance() is the entry point.
+    public static TypeFactory defaultInstance() {
+        return new TypeFactory(); // Simplified
+    }
+
+    // Simplified constructType methods
+    public JavaType constructType(Class<?> rawType) {
+        return _fromClass(rawType, TypeBindings.emptyBindings());
+    }
+
+    // The problematic function is likely this one or a method it calls
+    // that fails to correctly establish the superclass link.
+    // This is a re-implementation focusing on the fix.
+    protected JavaType _fromClass(Class<?> rawType, TypeBindings bindings)
+    {
+        // 1. Check cache first
+        // In real TypeFactory, key generation is more complex (TypeKey)
+        JavaType result = _typeCache.get(rawType); // Simplified key for demonstration
+        if (result != null) {
+            // IMPORTANT: In a real TypeFactory, there's a check `result.isResolved()`
+            // to ensure a placeholder from a recursive call is fully updated.
+            // For this specific bug, the cached type for Sub might just be missing its _superClass.
+            // The fix ensures it's correct before caching.
+            return result;
+        }
+
+        // Handle primitive types, arrays, etc. (simplified)
+        if (rawType.isPrimitive()) {
+            return _fromWellKnownClass(rawType, TypeBindings.emptyBindings());
+        }
+        if (rawType.isArray()) {
+            // Simplified: array types handle their component, not superclass
+            return ArrayType.construct(_fromClass(rawType.getComponentType(), bindings), null, null);
+        }
+        
+        // Handle common collections/maps (simplified)
+        if (Collection.class.isAssignableFrom(rawType)) {
+             // Will eventually call _fromClass for component type
+            return CollectionType.construct(rawType, bindings, null, null, null);
+        }
+        if (Map.class.isAssignableFrom(rawType)) {
+            // Will eventually call _fromClass for key/value types
+            return MapType.construct(rawType, bindings, null, null, null, null);
+        }
+        
+        // --- Core fix area for SimpleType inheritance ---
+        
+        // Before creating the JavaType, recursively resolve superclass and interfaces.
+        // This ensures that when we construct 'newType', its dependencies are already resolved.
+        JavaType superClass = null;
+        Type superclassType = rawType.getGenericSuperclass();
+        if (superclassType != null && !Object.class.equals(rawType.getSuperclass())) {
+            // Recursively construct the superclass type
+            superClass = _fromType(superclassType, bindings);
+        }
+
+        List<JavaType> superInterfaces = null;
+        Type[] genericInterfaces = rawType.getGenericInterfaces();
+        if (genericInterfaces != null && genericInterfaces.length > 0) {
+            superInterfaces = new ArrayList<>(genericInterfaces.length);
+            for (Type intType : genericInterfaces) {
+                superInterfaces.add(_fromType(intType, bindings));
+            }
+        }
+        
+        // Create the new type (e.g., SimpleType for Base and Sub classes)
+        // Pass the resolved superclass and interfaces directly into the constructor.
+        // This is crucial: ensures the JavaType object created and cached is complete.
+        JavaType newType = SimpleType.construct(rawType, bindings, superClass,
+                                             superInterfaces == null ? null : superInterfaces.toArray(new JavaType[0]));
+
+        // Add to cache *after* it's fully constructed with its superclass/interfaces.
+        // In some advanced scenarios (recursive types like `Node<T extends Node<T>>`),
+        // a placeholder might be put in cache earlier, then updated.
+        // For this specific issue, ensuring the superclass is part of the initial construction is key.
+        _typeCache.put(rawType, newType); // Simplified: assumes rawType is sufficient key
+
+        return newType;
+    }
+
+    // Helper methods (simplified/dummy for context)
+    protected JavaType _fromType(Type type, TypeBindings bindings) {
+        if (type instanceof Class) {
+            return _fromClass((Class<?>) type, bindings);
+        }
+        // Handle parameterized types, type variables etc.
+        // Real TypeFactory has complex logic for ParameterizedType, GenericArrayType, WildcardType etc.
+        return SimpleType.construct(Object.class); // Dummy for other types
+    }
+
+    private JavaType _fromWellKnownClass(Class<?> rawType, TypeBindings bindings) {
+        // Dummy implementation for well-known types like primitives
+        if (rawType == Integer.TYPE) return ResolvedPrimitiveType.INT_TYPE;
+        if (rawType == Long.TYPE) return ResolvedPrimitiveType.LONG_TYPE;
+        // ... other primitives
+        return SimpleType.construct(rawType, bindings, null, null);
+    }
+}
+
+// Dummy/Simplified classes needed for the above TypeFactory method to compile
+// In a real Jackson context, these are full classes.
+class JavaType implements java.io.Serializable {
+    protected final Class<?> _class;
+    protected final TypeBindings _bindings;
+    protected final JavaType _superClass;
+    protected final JavaType[] _superInterfaces;
+
+    protected JavaType(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces) {
+        _class = rawType;
+        _bindings = bindings;
+        _superClass = superClass;
+        _superInterfaces = superInterfaces;
+    }
+
+    public Class<?> getRawClass() { return _class; }
+    public JavaType getSuperClass() { return _superClass; }
+
+    // Simplified methods for testing context
+    public boolean isResolved() { return true; } // For this fix, assume it's resolved after construction
+}
+
+class SimpleType extends JavaType {
+    private SimpleType(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces) {
+        super(rawType, bindings, superClass, superInterfaces);
+    }
+
+    public static SimpleType construct(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces) {
+        return new SimpleType(rawType, bindings, superClass, superInterfaces);
+    }
+    public static SimpleType construct(Class<?> rawType) { // For simple cases
+        return new SimpleType(rawType, TypeBindings.emptyBindings(), null, null);
+    }
+}
+
+class ArrayType extends JavaType {
+    protected final JavaType _componentType;
+    protected ArrayType(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces, JavaType componentType) {
+        super(rawType, bindings, superClass, superInterfaces);
+        _componentType = componentType;
+    }
+    public static ArrayType construct(JavaType componentType, TypeBindings bindings, Object owner) {
+        // Simplified: real ArrayType has more logic for owner, etc.
+        return new ArrayType(componentType.getRawClass().arrayType(), TypeBindings.emptyBindings(), null, null, componentType);
+    }
+}
+
+class CollectionType extends JavaType {
+    protected CollectionType(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces, JavaType elementType) {
+        super(rawType, bindings, superClass, superInterfaces);
+    }
+    public static CollectionType construct(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces, JavaType elementType) {
+        return new CollectionType(rawType, bindings, superClass, superInterfaces, elementType);
+    }
+}
+
+class MapType extends JavaType {
+    protected MapType(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces, JavaType keyType, JavaType valueType) {
+        super(rawType, bindings, superClass, superInterfaces);
+    }
+    public static MapType construct(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces, JavaType keyType, JavaType valueType) {
+        return new MapType(rawType, bindings, superClass, superInterfaces, keyType, valueType);
+    }
+}
+
+class TypeBindings {
+    public static TypeBindings emptyBindings() { return new TypeBindings(); }
+    // Dummy methods for TypeBindings
+}
+
+class ResolvedPrimitiveType {
+    public static final JavaType INT_TYPE = SimpleType.construct(Integer.TYPE);
+    public static final JavaType LONG_TYPE = SimpleType.construct(Long.TYPE);
+}
\ No newline at end of file
