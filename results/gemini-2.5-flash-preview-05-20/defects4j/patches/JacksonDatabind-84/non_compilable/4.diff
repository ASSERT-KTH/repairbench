diff --git a/tmp/b66c04ed-3117-4839-8b86-90e3b4fdcc9c_buggy.java b/tmp/2b7c07a3-ea73-45e0-9f1d-73d0b636f1fe_fixed.java
index e69de29..4e550f6 100644
--- a/tmp/b66c04ed-3117-4839-8b86-90e3b4fdcc9c_buggy.java
+++ b/tmp/2b7c07a3-ea73-45e0-9f1d-73d0b636f1fe_fixed.java
@@ -0,0 +1,97 @@
+package com.fasterxml.jackson.databind.type;
+
+import java.lang.reflect.Type;
+import java.util.concurrent.ConcurrentHashMap;
+
+import com.fasterxml.jackson.databind.JavaType;
+
+// This is a minimal representation of the TypeFactory class to demonstrate the fix.
+// The actual TypeFactory is much larger and resides in com.fasterxml.jackson.databind.type.TypeFactory.
+
+// NOTE: This response provides the corrected `_remove` method within the conceptual `TypeFactory` context.
+// In a real scenario, this method would be part of the actual `com.fasterxml.jackson.databind.type.TypeFactory` class.
+public class TypeFactory {
+
+    // These are simplified placeholder fields for TypeFactory's internal state
+    // In actual Jackson, these are more complex, but the fix targets `_remove` logic.
+    protected ThreadLocal<JavaType> _currentType = new ThreadLocal<>();
+    protected ConcurrentHashMap<Object, JavaType> _typeCache;
+
+    // Placeholder for ResolvedRecursiveType, assuming it's an inner class or similar in TypeFactory
+    static class ResolvedRecursiveType extends JavaType {
+        private static final long serialVersionUID = 1L;
+        protected JavaType _superClass; // simplified
+        protected Class<?> _rawClass; // simplified
+
+        public ResolvedRecursiveType(Class<?> rawType, TypeBindings bindings) {
+            super(rawType, bindings);
+            this._rawClass = rawType;
+        }
+
+        @Override
+        public boolean isResolved() { return false; } // Simplified
+        @Override
+        public JavaType getSuperClass() { return _superClass; } // Simplified
+        @Override
+        public String toString() { return "[recursive type]"; } // Simplified
+        @Override
+        protected String buildCanonicalName() { return "[recursive type]"; } // Simplified
+        @Override
+        public boolean isContainerType() { return false; } // Simplified
+        @Override
+        public JavaType withTypeHandler(Object h) { return this; } // Simplified
+        @Override
+        public JavaType withContentTypeHandler(Object h) { return this; } // Simplified
+        @Override
+        public JavaType withValueHandler(Object h) { return this; } // Simplified
+        @Override
+        public JavaType withStaticType() { return this; } // Simplified
+        @Override
+        public JavaType refine(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces) { return null; } // Simplified
+    }
+
+    // This is the buggy function that needs to be fixed.
+    // It's part of the TypeFactory class, responsible for managing recursive type resolution.
+    protected void _remove(ResolvedRecursiveType selfRef, JavaType actual) {
+        JavaType current = _currentType.get();
+        if (current == selfRef) { // this is expected case
+            // Issue #2968: Previously, this line would incorrectly set the ThreadLocal
+            // to the superclass, which was not the correct stack-like pop operation.
+            // This could leave an incorrect context for subsequent type resolutions.
+            _currentType.remove(); // FIX: Properly remove the current type from ThreadLocal
+        } else if (current != null) {
+            // [databind#2968]: if not same instance, but `actual` is same type,
+            // also valid (and if `current` has same type then remove `current`).
+            // Otherwise it indicates some other issue and we should not mess
+            // with state.
+            if (actual.getRawClass() == current.getRawClass()) {
+                _currentType.remove(); // FIX: Also remove in this case
+            }
+        }
+        // [databind#1388] Also need to replace the 'selfRef' type in the
+        // global cache.
+        if (_typeCache != null) { // Added null check for robustness
+            _typeCache.replace(selfRef, actual);
+        }
+    }
+
+    // Other TypeFactory methods would be here, but are omitted as they are not directly part of the fix.
+    // For demonstration, here's a minimal JavaType and TypeBindings skeleton
+    public static abstract class JavaType extends com.fasterxml.jackson.core.type.ResolvedType implements java.io.Serializable {
+        private static final long serialVersionUID = 1L;
+        protected final Class<?> _class;
+        protected final TypeBindings _bindings;
+
+        protected JavaType(Class<?> raw, TypeBindings bindings) {
+            _class = raw;
+            _bindings = bindings;
+        }
+        public Class<?> getRawClass() { return _class; }
+        public TypeBindings getBindings() { return _bindings; }
+        public JavaType withTypeBindings(TypeBindings bindings) { return this; } // Simplified
+    }
+    public static class TypeBindings {
+        public static TypeBindings emptyBindings() { return new TypeBindings(); }
+        public TypeBindings withUnbound(Class<?> rawType) { return this; }
+    }
+}
\ No newline at end of file
