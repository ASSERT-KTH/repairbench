diff --git a/tmp/beace7a1-0e12-4e8d-ac41-d6a56aef6755_buggy.java b/tmp/aff2397f-88ed-41cb-9887-97e6296ddaa4_fixed.java
index bf9bb88..c83a05d 100644
--- a/tmp/beace7a1-0e12-4e8d-ac41-d6a56aef6755_buggy.java
+++ b/tmp/aff2397f-88ed-41cb-9887-97e6296ddaa4_fixed.java
@@ -1,108 +1,136 @@
   /**
    * Computes the follow() node of a given node and its parent. There is a side
    * effect when calling this function. If this function computed an edge that
    * exists a FINALLY, it'll attempt to connect the fromNode to the outer
    * FINALLY according to the finallyMap.
    *
    * @param fromNode The original source node since {@code node} is changed
    *        during recursion.
    * @param node The node that follow() should compute.
    */
   private static Node computeFollowNode(
       Node fromNode, Node node, ControlFlowAnalysis cfa) {
     /*
      * This is the case where:
      *
      * 1. Parent is null implies that we are transferring control to the end of
      * the script.
      *
      * 2. Parent is a function implies that we are transferring control back to
      * the caller of the function.
      *
      * 3. If the node is a return statement, we should also transfer control
      * back to the caller of the function.
      *
      * 4. If the node is root then we have reached the end of what we have been
      * asked to traverse.
      *
      * In all cases we should transfer control to a "symbolic return" node.
      * This will make life easier for DFAs.
      */
     Node parent = node.getParent();
     if (parent == null || parent.isFunction() ||
         (cfa != null && node == cfa.root)) {
       return null;
     }
 
     // If we are just before a IF/WHILE/DO/FOR:
     switch (parent.getType()) {
       // The follow() of any of the path from IF would be what follows IF.
       case Token.IF:
         return computeFollowNode(fromNode, parent, cfa);
       case Token.CASE:
       case Token.DEFAULT_CASE:
         // After the body of a CASE, the control goes to the body of the next
         // case, without having to go to the case condition.
         if (parent.getNext() != null) {
           if (parent.getNext().isCase()) {
             return parent.getNext().getFirstChild().getNext();
           } else if (parent.getNext().isDefaultCase()) {
             return parent.getNext().getFirstChild();
           } else {
             Preconditions.checkState(false, "Not reachable");
           }
         } else {
           return computeFollowNode(fromNode, parent, cfa);
         }
         break;
       case Token.FOR:
         if (NodeUtil.isForIn(parent)) {
           return parent;
         } else {
           return parent.getFirstChild().getNext().getNext();
         }
       case Token.WHILE:
       case Token.DO:
         return parent;
       case Token.TRY:
         // If we are coming out of the TRY block...
         if (parent.getFirstChild() == node) {
           if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
             return computeFallThrough(parent.getLastChild());
           } else { // and have no FINALLY.
             return computeFollowNode(fromNode, parent, cfa);
           }
         // CATCH block.
         } else if (NodeUtil.getCatchBlock(parent) == node){
           if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
             return computeFallThrough(node.getNext());
           } else {
             return computeFollowNode(fromNode, parent, cfa);
           }
         // If we are coming out of the FINALLY block...
-        } else if (parent.getLastChild() == node){
+        } else if (parent.getLastChild() == node){ // 'node' is the FINALLY block
           if (cfa != null) {
+            // For abrupt completions (BREAK/CONTINUE), check for outer finally blocks.
+            // Control should flow to the next enclosing finally block if one exists.
+            if (NodeUtil.isBreak(fromNode) || NodeUtil.isContinue(fromNode)) {
+                Node currentAncestor = parent;
+                while (currentAncestor != null) {
+                    currentAncestor = currentAncestor.getParent(); // Move up to the next parent
+                    if (NodeUtil.isTryFinally(currentAncestor)) {
+                        // Found an outer TRY-FINALLY. Control goes to its FINALLY block.
+                        // This handles nested finally blocks for breaks/continues.
+                        return computeFallThrough(currentAncestor.getLastChild());
+                    }
+                }
+            }
+
+            // If we didn't find an outer finally for break/continue, or if fromNode
+            // is RETURN/THROW/normal fall-through, then create edges to the ultimate
+            // destination(s) as determined by the finallyMap.
+            // The finallyMap stores the ultimate targets after the try-catch-finally block.
+            // For example, for 'return', it would be 'null'. For normal flow, the next statement.
             for (Node finallyNode : cfa.finallyMap.get(parent)) {
+                // This ensures edges are created from the original source ('fromNode')
+                // to its correct ultimate destination after all finally blocks are processed.
+                // This is crucial for 'return' and 'throw' statements.
                 cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
             }
+
+            // After creating the necessary edges, the 'computeFollowNode' function
+            // should not attempt to find a single "fall-through" node here,
+            // especially if multiple paths might be handled by the edges.
+            // Instead, it should return 'null', indicating that the control flow
+            // is now entirely managed by the explicitly created edges.
+            return null;
           }
-          return computeFollowNode(fromNode, parent, cfa);
         }
     }
 
     // Now that we are done with the special cases follow should be its
     // immediate sibling, unless its sibling is a function
     Node nextSibling = node.getNext();
 
     // Skip function declarations because control doesn't get pass into it.
     while (nextSibling != null && nextSibling.isFunction()) {
       nextSibling = nextSibling.getNext();
     }
 
     if (nextSibling != null) {
       return computeFallThrough(nextSibling);
     } else {
       // If there are no more siblings, control is transferred up the AST.
       return computeFollowNode(fromNode, parent, cfa);
     }
   }
\ No newline at end of file
