diff --git a/tmp/830fed9a-4b2d-4775-b800-9a8d8250b8e7_buggy.java b/tmp/1d5e8e88-d7a7-4d4e-9cd3-c47f4779feb5_fixed.java
index bf9bb88..59830ed 100644
--- a/tmp/830fed9a-4b2d-4775-b800-9a8d8250b8e7_buggy.java
+++ b/tmp/1d5e8e88-d7a7-4d4e-9cd3-c47f4779feb5_fixed.java
@@ -1,108 +1,128 @@
   /**
    * Computes the follow() node of a given node and its parent. There is a side
    * effect when calling this function. If this function computed an edge that
    * exists a FINALLY, it'll attempt to connect the fromNode to the outer
    * FINALLY according to the finallyMap.
    *
    * @param fromNode The original source node since {@code node} is changed
    *        during recursion.
    * @param node The node that follow() should compute.
    */
   private static Node computeFollowNode(
       Node fromNode, Node node, ControlFlowAnalysis cfa) {
     /*
      * This is the case where:
      *
      * 1. Parent is null implies that we are transferring control to the end of
      * the script.
      *
      * 2. Parent is a function implies that we are transferring control back to
      * the caller of the function.
      *
      * 3. If the node is a return statement, we should also transfer control
      * back to the caller of the function.
      *
      * 4. If the node is root then we have reached the end of what we have been
      * asked to traverse.
      *
      * In all cases we should transfer control to a "symbolic return" node.
      * This will make life easier for DFAs.
      */
     Node parent = node.getParent();
     if (parent == null || parent.isFunction() ||
         (cfa != null && node == cfa.root)) {
       return null;
     }
 
     // If we are just before a IF/WHILE/DO/FOR:
     switch (parent.getType()) {
       // The follow() of any of the path from IF would be what follows IF.
       case Token.IF:
         return computeFollowNode(fromNode, parent, cfa);
       case Token.CASE:
       case Token.DEFAULT_CASE:
         // After the body of a CASE, the control goes to the body of the next
         // case, without having to go to the case condition.
         if (parent.getNext() != null) {
           if (parent.getNext().isCase()) {
             return parent.getNext().getFirstChild().getNext();
           } else if (parent.getNext().isDefaultCase()) {
             return parent.getNext().getFirstChild();
           } else {
             Preconditions.checkState(false, "Not reachable");
           }
         } else {
           return computeFollowNode(fromNode, parent, cfa);
         }
         break;
       case Token.FOR:
         if (NodeUtil.isForIn(parent)) {
           return parent;
         } else {
           return parent.getFirstChild().getNext().getNext();
         }
       case Token.WHILE:
       case Token.DO:
         return parent;
       case Token.TRY:
         // If we are coming out of the TRY block...
         if (parent.getFirstChild() == node) {
           if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
             return computeFallThrough(parent.getLastChild());
           } else { // and have no FINALLY.
             return computeFollowNode(fromNode, parent, cfa);
           }
         // CATCH block.
         } else if (NodeUtil.getCatchBlock(parent) == node){
           if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
             return computeFallThrough(node.getNext());
           } else {
             return computeFollowNode(fromNode, parent, cfa);
           }
         // If we are coming out of the FINALLY block...
-        } else if (parent.getLastChild() == node){
+        } else if (parent.getLastChild() == node){ // 'node' is the FINALLY block (e.g., SCRIPT_OR_BLOCK type)
           if (cfa != null) {
-            for (Node finallyNode : cfa.finallyMap.get(parent)) {
-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
+            // Get the list of nodes that exited the TRY/CATCH block exceptionally
+            // and were rerouted through this finally block.
+            Collection<Node> originalFromNodes = cfa.finallyMap.get(parent);
+            if (originalFromNodes != null) {
+              for (Node originalFromNode : originalFromNodes) {
+                // For each original exiting statement (return, break, throw):
+                // Compute its ultimate follow node, as if the finally block was not present.
+                // This means using the originalFromNode as the 'fromNode'
+                // and the parent (TRY node) as the 'node' whose follow we are computing.
+                Node ultimateFollow = computeFollowNode(originalFromNode, parent, cfa);
+                // Create an edge from the original exiting statement to the
+                // ultimate follow node of the entire TRY block.
+                // This is where the exceptional control flow effectively resumes.
+                // If ultimateFollow is null, it means it goes to the symbolic return node.
+                cfa.createEdge(originalFromNode, Branch.UNCOND, ultimateFollow);
               }
+              // After processing all exceptional exits, clear the map for this TRY block.
+              // This prevents re-processing or incorrect connections for future traversals.
+              cfa.finallyMap.remove(parent);
             }
+          }
+          // For the current execution path (normal fall-through from finally block),
+          // continue to compute the follow of the TRY block.
+          // The 'fromNode' here is the actual node that just finished in the finally block.
           return computeFollowNode(fromNode, parent, cfa);
         }
     }
 
     // Now that we are done with the special cases follow should be its
     // immediate sibling, unless its sibling is a function
     Node nextSibling = node.getNext();
 
     // Skip function declarations because control doesn't get pass into it.
     while (nextSibling != null && nextSibling.isFunction()) {
       nextSibling = nextSibling.getNext();
     }
 
     if (nextSibling != null) {
       return computeFallThrough(nextSibling);
     } else {
       // If there are no more siblings, control is transferred up the AST.
       return computeFollowNode(fromNode, parent, cfa);
     }
   }
\ No newline at end of file
