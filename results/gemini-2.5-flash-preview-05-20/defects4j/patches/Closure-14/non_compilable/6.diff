diff --git a/tmp/0cf1d1ac-6b14-4785-8e4c-998263ef1e8c_buggy.java b/tmp/8762c3ad-3871-4818-8afd-b6371731047f_fixed.java
index bf9bb88..6aa6de7 100644
--- a/tmp/0cf1d1ac-6b14-4785-8e4c-998263ef1e8c_buggy.java
+++ b/tmp/8762c3ad-3871-4818-8afd-b6371731047f_fixed.java
@@ -1,108 +1,136 @@
   /**
    * Computes the follow() node of a given node and its parent. There is a side
    * effect when calling this function. If this function computed an edge that
    * exists a FINALLY, it'll attempt to connect the fromNode to the outer
    * FINALLY according to the finallyMap.
    *
    * @param fromNode The original source node since {@code node} is changed
    *        during recursion.
    * @param node The node that follow() should compute.
    */
   private static Node computeFollowNode(
       Node fromNode, Node node, ControlFlowAnalysis cfa) {
+    Node parent = node.getParent();
+
+    // The original source node `fromNode` is used to detect if it's a special
+    // control flow node (return, break, continue) that needs to route through
+    // a finally block before reaching its ultimate destination.
+    // This condition needs to be checked early in the recursion.
+    // If 'node' is a descendant of a 'TRY' node (i.e., 'parent' is the 'TRY' node),
+    // and 'fromNode' is a special exit, we must go to the finally block.
+    if (parent != null && parent.isTry()) {
+      if (NodeUtil.hasFinally(parent) &&
+          (NodeUtil.isContinue(fromNode) || NodeUtil.isBreak(fromNode) || NodeUtil.isReturn(fromNode))) {
+          // If fromNode initiated a jump, and it is within a try block with a finally,
+          // then the next node in the control flow for fromNode is the finally block.
+          return computeFallThrough(parent.getLastChild());
+      }
+    }
+
     /*
      * This is the case where:
      *
      * 1. Parent is null implies that we are transferring control to the end of
      * the script.
      *
      * 2. Parent is a function implies that we are transferring control back to
      * the caller of the function.
      *
      * 3. If the node is a return statement, we should also transfer control
      * back to the caller of the function.
      *
      * 4. If the node is root then we have reached the end of what we have been
      * asked to traverse.
      *
      * In all cases we should transfer control to a "symbolic return" node.
      * This will make life easier for DFAs.
      */
-    Node parent = node.getParent();
     if (parent == null || parent.isFunction() ||
         (cfa != null && node == cfa.root)) {
       return null;
     }
 
     // If we are just before a IF/WHILE/DO/FOR:
     switch (parent.getType()) {
       // The follow() of any of the path from IF would be what follows IF.
       case Token.IF:
         return computeFollowNode(fromNode, parent, cfa);
       case Token.CASE:
       case Token.DEFAULT_CASE:
         // After the body of a CASE, the control goes to the body of the next
         // case, without having to go to the case condition.
         if (parent.getNext() != null) {
           if (parent.getNext().isCase()) {
             return parent.getNext().getFirstChild().getNext();
           } else if (parent.getNext().isDefaultCase()) {
             return parent.getNext().getFirstChild();
           } else {
             Preconditions.checkState(false, "Not reachable");
           }
         } else {
           return computeFollowNode(fromNode, parent, cfa);
         }
         break;
       case Token.FOR:
         if (NodeUtil.isForIn(parent)) {
           return parent;
         } else {
           return parent.getFirstChild().getNext().getNext();
         }
       case Token.WHILE:
       case Token.DO:
         return parent;
       case Token.TRY:
         // If we are coming out of the TRY block...
-        if (parent.getFirstChild() == node) {
+        if (parent.getFirstChild() == node) { // 'node' is the TRY block itself (the first child of the TRY node)
           if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
-            return computeFallThrough(parent.getLastChild());
+            return computeFallThrough(parent.getLastChild()); // Go to the FINALLY block
           } else { // and have no FINALLY.
-            return computeFollowNode(fromNode, parent, cfa);
+            return computeFollowNode(fromNode, parent, cfa); // Go to what follows the TRY statement
           }
         // CATCH block.
-        } else if (NodeUtil.getCatchBlock(parent) == node){
+        } else if (NodeUtil.getCatchBlock(parent) == node){ // 'node' is the CATCH block
           if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
-            return computeFallThrough(node.getNext());
+            return computeFallThrough(node.getNext()); // Go to the FINALLY block (next sibling of CATCH)
           } else {
-            return computeFollowNode(fromNode, parent, cfa);
+            return computeFollowNode(fromNode, parent, cfa); // Go to what follows the TRY statement
           }
         // If we are coming out of the FINALLY block...
-        } else if (parent.getLastChild() == node){
+        } else if (parent.getLastChild() == node){ // 'node' is the FINALLY block itself
+          // The finallyMap contains the true destination after the finally block
+          // for control flow that was trapped by this finally block (e.g., fromNode).
+          // These edges are typically added by ControlFlowAnalysis.traverseFinallyBlocks.
+          // This part ensures that if fromNode is the original jumping node,
+          // it connects to its final destination *after* the finally block.
           if (cfa != null) {
-            for (Node finallyNode : cfa.finallyMap.get(parent)) {
+            // Corrected: finallyMap.get(node) where node is the FINALLY block.
+            for (Node finallyNode : cfa.finallyMap.get(node)) {
+              // 'fromNode' is the original source node (e.g., a RETURN/BREAK).
+              // If 'fromNode' is the FINALLY block itself (normal fall-through),
+              // this connects the FINALLY block to its successor.
               cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
             }
           }
+          // After handling specific exits via finallyMap, the follow of the FINALLY block
+          // is what follows the TRY statement.
           return computeFollowNode(fromNode, parent, cfa);
         }
+        break;
     }
 
     // Now that we are done with the special cases follow should be its
     // immediate sibling, unless its sibling is a function
     Node nextSibling = node.getNext();
 
     // Skip function declarations because control doesn't get pass into it.
     while (nextSibling != null && nextSibling.isFunction()) {
       nextSibling = nextSibling.getNext();
     }
 
     if (nextSibling != null) {
       return computeFallThrough(nextSibling);
     } else {
       // If there are no more siblings, control is transferred up the AST.
       return computeFollowNode(fromNode, parent, cfa);
     }
   }
\ No newline at end of file
