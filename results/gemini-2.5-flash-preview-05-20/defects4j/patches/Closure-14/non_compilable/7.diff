diff --git a/tmp/36dd7347-8e56-4e10-b206-bec481c6b40d_buggy.java b/tmp/289114ea-2aab-4e4d-98b9-3d71678368cd_fixed.java
index bf9bb88..0363fe5 100644
--- a/tmp/36dd7347-8e56-4e10-b206-bec481c6b40d_buggy.java
+++ b/tmp/289114ea-2aab-4e4d-98b9-3d71678368cd_fixed.java
@@ -1,108 +1,14 @@
-  /**
-   * Computes the follow() node of a given node and its parent. There is a side
-   * effect when calling this function. If this function computed an edge that
-   * exists a FINALLY, it'll attempt to connect the fromNode to the outer
-   * FINALLY according to the finallyMap.
-   *
-   * @param fromNode The original source node since {@code node} is changed
-   *        during recursion.
-   * @param node The node that follow() should compute.
-   */
-  private static Node computeFollowNode(
-      Node fromNode, Node node, ControlFlowAnalysis cfa) {
-    /*
-     * This is the case where:
-     *
-     * 1. Parent is null implies that we are transferring control to the end of
-     * the script.
-     *
-     * 2. Parent is a function implies that we are transferring control back to
-     * the caller of the function.
-     *
-     * 3. If the node is a return statement, we should also transfer control
-     * back to the caller of the function.
-     *
-     * 4. If the node is root then we have reached the end of what we have been
-     * asked to traverse.
-     *
-     * In all cases we should transfer control to a "symbolic return" node.
-     * This will make life easier for DFAs.
-     */
-    Node parent = node.getParent();
-    if (parent == null || parent.isFunction() ||
-        (cfa != null && node == cfa.root)) {
-      return null;
-    }
-
-    // If we are just before a IF/WHILE/DO/FOR:
-    switch (parent.getType()) {
-      // The follow() of any of the path from IF would be what follows IF.
-      case Token.IF:
-        return computeFollowNode(fromNode, parent, cfa);
-      case Token.CASE:
-      case Token.DEFAULT_CASE:
-        // After the body of a CASE, the control goes to the body of the next
-        // case, without having to go to the case condition.
-        if (parent.getNext() != null) {
-          if (parent.getNext().isCase()) {
-            return parent.getNext().getFirstChild().getNext();
-          } else if (parent.getNext().isDefaultCase()) {
-            return parent.getNext().getFirstChild();
-          } else {
-            Preconditions.checkState(false, "Not reachable");
-          }
-        } else {
-          return computeFollowNode(fromNode, parent, cfa);
-        }
-        break;
-      case Token.FOR:
-        if (NodeUtil.isForIn(parent)) {
-          return parent;
-        } else {
-          return parent.getFirstChild().getNext().getNext();
-        }
-      case Token.WHILE:
-      case Token.DO:
-        return parent;
-      case Token.TRY:
-        // If we are coming out of the TRY block...
-        if (parent.getFirstChild() == node) {
-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
-            return computeFallThrough(parent.getLastChild());
-          } else { // and have no FINALLY.
-            return computeFollowNode(fromNode, parent, cfa);
-          }
-        // CATCH block.
-        } else if (NodeUtil.getCatchBlock(parent) == node){
-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
-            return computeFallThrough(node.getNext());
-          } else {
-            return computeFollowNode(fromNode, parent, cfa);
-          }
-        // If we are coming out of the FINALLY block...
-        } else if (parent.getLastChild() == node){
+        } else if (parent.getLastChild() == node){ // node is the FINALLY block
           if (cfa != null) {
-            for (Node finallyNode : cfa.finallyMap.get(parent)) {
+            for (Node finallyNode : cfa.finallyMap.get(parent)) { // BUG: cfa.finallyMap.get(parent) returns a single Node, not a Collection.
               cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
             }
           }
           return computeFollowNode(fromNode, parent, cfa);
         }
-    }
+    ```
+    `cfa.finallyMap` is defined as `Map<Node, Node>`, so `cfa.finallyMap.get(parent)` returns a single `Node` (the intended target for `parent` if it were an abnormal exit, which is not the case for `parent` being the `TRY` node itself). Trying to iterate over a single `Node` object using a `for-each` loop will cause a `ClassCastException` or similar runtime error, effectively preventing these crucial cross-edges from being created.
 
-    // Now that we are done with the special cases follow should be its
-    // immediate sibling, unless its sibling is a function
-    Node nextSibling = node.getNext();
+    When control is exiting the `finally` block, `computeFollowNode` should check if the `fromNode` (the original abnormal exit node, like a `RETURN` or `BREAK`) was previously rerouted through this `finally` block. If `fromNode` exists in `finallyMap`, it means its ultimate destination was saved there. We should create an edge from `fromNode` to that ultimate destination and then return that destination. If `fromNode` is not in `finallyMap`, it means control flow entered the `finally` block normally or an abnormal exit occurred *within* the `finally` block itself, in which case the normal follow of the `TRY` statement should be computed.
 
-    // Skip function declarations because control doesn't get pass into it.
-    while (nextSibling != null && nextSibling.isFunction()) {
-      nextSibling = nextSibling.getNext();
-    }
-
-    if (nextSibling != null) {
-      return computeFallThrough(nextSibling);
-    } else {
-      // If there are no more siblings, control is transferred up the AST.
-      return computeFollowNode(fromNode, parent, cfa);
-    }
-  }
+Here's the fixed `computeFollowNode` function:
