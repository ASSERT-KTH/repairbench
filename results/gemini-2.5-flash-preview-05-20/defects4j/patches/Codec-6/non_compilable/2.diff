diff --git a/tmp/e3252460-dcf9-45de-a4a2-dfa602f1749a_buggy.java b/tmp/4722db2d-169c-4e1c-b327-3c099f93430c_fixed.java
index d3b3ebf..ed419fb 100644
--- a/tmp/e3252460-dcf9-45de-a4a2-dfa602f1749a_buggy.java
+++ b/tmp/4722db2d-169c-4e1c-b327-3c099f93430c_fixed.java
@@ -1,62 +1,83 @@
     /**
      * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>
      * from this InputStream.
      * 
      * @param b
      *            destination byte array
      * @param offset
      *            where to start writing the bytes
      * @param len
      *            maximum number of bytes to read
      * 
      * @return number of bytes read
      * @throws IOException
      *             if an I/O error occurs.
      * @throws NullPointerException
      *             if the byte array parameter is null
      * @throws IndexOutOfBoundsException
      *             if offset, len or buffer size are invalid
      */
     public int read(byte b[], int offset, int len) throws IOException {
         if (b == null) {
             throw new NullPointerException();
         } else if (offset < 0 || len < 0) {
             throw new IndexOutOfBoundsException();
         } else if (offset > b.length || offset + len > b.length) {
             throw new IndexOutOfBoundsException();
         } else if (len == 0) {
             return 0;
         } else {
             /*
              Rationale for while-loop on (readLen == 0):
              -----
              Base64.readResults() usually returns > 0 or EOF (-1).  In the
              rare case where it returns 0, we just keep trying.
 
              This is essentially an undocumented contract for InputStream
              implementors that want their code to work properly with
              java.io.InputStreamReader, since the latter hates it when
              InputStream.read(byte[]) returns a zero.  Unfortunately our
              readResults() call must return 0 if a large amount of the data
              being decoded was non-base64, so this while-loop enables proper
              interop with InputStreamReader for that scenario.
              -----
              This is a fix for CODEC-101
             */
-                if (!base64.hasData()) {
+            int readLen = 0; // Initialize readLen to 0
+            while (readLen == 0) { // Loop until bytes are read (readLen > 0) or EOF (-1)
+                if (!base64.hasData()) { // If the codec has no buffered data to offer
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
-                    int c = in.read(buf);
-                    // A little optimization to avoid System.arraycopy()
-                    // when possible.
-                    if (c > 0 && b.length == len) {
+                    int c = in.read(buf); // Read from the underlying stream
+
+                    if (c == -1) { // End of underlying stream
+                        base64.setEof(true); // Signal EOF to the Base64 codec
+                    } else if (c > 0) { // If bytes were read
+                        // A little optimization to avoid System.arraycopy() when possible.
+                        // This uses the user's buffer directly as the codec's output buffer if appropriate.
+                        if (b.length == len) {
                             base64.setInitialBuffer(b, offset, len);
                         }
                         if (doEncode) {
                             base64.encode(buf, 0, c);
                         } else {
                             base64.decode(buf, 0, c);
                         }
                     }
-            return base64.readResults(b, offset, len);
+                    // If c is 0, the underlying stream returned 0 bytes but not EOF.
+                    // The loop continues to try base64.readResults anyway,
+                    // or tries to read from 'in' again on the next iteration.
+                }
+
+                // Attempt to read decoded/encoded data from the base64 codec
+                readLen = base64.readResults(b, offset, len);
+
+                // If readLen is still 0, check if we've exhausted all possibilities:
+                // If EOF has been signaled to the codec AND it has no more data to process/flush,
+                // then we must return -1 as no more bytes can be read.
+                if (readLen == 0 && base64.isEof() && !base64.hasData()) {
+                    return -1;
+                }
+            }
+            return readLen; // Return the bytes read (could be > 0 or -1)
         }
     }
\ No newline at end of file
