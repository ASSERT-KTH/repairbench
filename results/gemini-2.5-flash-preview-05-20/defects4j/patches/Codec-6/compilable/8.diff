diff --git a/tmp/39bd556e-5024-49b0-b40b-04bcac7a3688_buggy.java b/tmp/ed5248cc-3f33-4100-902c-d3662692b8ac_fixed.java
index d3b3ebf..02f6c90 100644
--- a/tmp/39bd556e-5024-49b0-b40b-04bcac7a3688_buggy.java
+++ b/tmp/ed5248cc-3f33-4100-902c-d3662692b8ac_fixed.java
@@ -1,62 +1,88 @@
     /**
      * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>
      * from this InputStream.
      * 
      * @param b
      *            destination byte array
      * @param offset
      *            where to start writing the bytes
      * @param len
      *            maximum number of bytes to read
      * 
      * @return number of bytes read
      * @throws IOException
      *             if an I/O error occurs.
      * @throws NullPointerException
      *             if the byte array parameter is null
      * @throws IndexOutOfBoundsException
      *             if offset, len or buffer size are invalid
      */
     public int read(byte b[], int offset, int len) throws IOException {
         if (b == null) {
             throw new NullPointerException();
         } else if (offset < 0 || len < 0) {
             throw new IndexOutOfBoundsException();
         } else if (offset > b.length || offset + len > b.length) {
             throw new IndexOutOfBoundsException();
         } else if (len == 0) {
             return 0;
         } else {
             /*
              Rationale for while-loop on (readLen == 0):
              -----
              Base64.readResults() usually returns > 0 or EOF (-1).  In the
              rare case where it returns 0, we just keep trying.
 
              This is essentially an undocumented contract for InputStream
              implementors that want their code to work properly with
              java.io.InputStreamReader, since the latter hates it when
              InputStream.read(byte[]) returns a zero.  Unfortunately our
              readResults() call must return 0 if a large amount of the data
              being decoded was non-base64, so this while-loop enables proper
              interop with InputStreamReader for that scenario.
              -----
              This is a fix for CODEC-101
             */
-                if (!base64.hasData()) {
+            int readLen = 0;
+            // Keep trying to read until we get actual data (>0) or hit end of stream (-1)
+            while (readLen == 0) {
+                // First, try to read data that Base64 codec might have already buffered
+                readLen = base64.readResults(b, offset, len);
+
+                if (readLen > 0) {
+                    return readLen; // Successfully read some bytes
+                } else if (readLen == -1) {
+                    return -1; // End of stream from the codec
+                }
+
+                // If readLen is 0, it means base64.readResults couldn't provide data yet.
+                // We need to read more from the underlying stream to feed the codec.
                 byte[] buf = new byte[doEncode ? 4096 : 8192];
-                    int c = in.read(buf);
+                int c = in.read(buf); // Read from the wrapped InputStream
+
+                if (c == -1) {
+                    // If the underlying stream is exhausted (c == -1),
+                    // and base64.readResults already returned 0, it means
+                    // there's no more data to be decoded/encoded.
+                    return -1; // End of stream.
+                }
+
                 // A little optimization to avoid System.arraycopy()
-                    // when possible.
+                // when possible. This logic is preserved as in the original.
                 if (c > 0 && b.length == len) {
                     base64.setInitialBuffer(b, offset, len);
                 }
+
+                // Feed the data read from the underlying stream into the Base64 codec.
                 if (doEncode) {
                     base64.encode(buf, 0, c);
                 } else {
                     base64.decode(buf, 0, c);
                 }
+                // The loop will now re-evaluate and call readResults again to check for output.
             }
-            return base64.readResults(b, offset, len);
+            // This part of the code should theoretically be unreachable as the loop always
+            // returns when readLen is not 0.
+            return readLen; // Defensive return, though execution should not reach here.
         }
     }
