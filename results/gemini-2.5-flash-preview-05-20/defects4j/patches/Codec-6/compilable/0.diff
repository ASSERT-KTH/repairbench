diff --git a/tmp/c693fd60-26fb-4d30-a94a-c642ef7b033f_buggy.java b/tmp/e4c7c947-1918-446f-8be6-a7a0ed0d7412_fixed.java
index d3b3ebf..02ae66d 100644
--- a/tmp/c693fd60-26fb-4d30-a94a-c642ef7b033f_buggy.java
+++ b/tmp/e4c7c947-1918-446f-8be6-a7a0ed0d7412_fixed.java
@@ -1,62 +1,88 @@
     /**
      * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>
      * from this InputStream.
      * 
      * @param b
      *            destination byte array
      * @param offset
      *            where to start writing the bytes
      * @param len
      *            maximum number of bytes to read
      * 
      * @return number of bytes read
      * @throws IOException
      *             if an I/O error occurs.
      * @throws NullPointerException
      *             if the byte array parameter is null
      * @throws IndexOutOfBoundsException
      *             if offset, len or buffer size are invalid
      */
     public int read(byte b[], int offset, int len) throws IOException {
         if (b == null) {
             throw new NullPointerException();
         } else if (offset < 0 || len < 0) {
             throw new IndexOutOfBoundsException();
         } else if (offset > b.length || offset + len > b.length) {
             throw new IndexOutOfBoundsException();
         } else if (len == 0) {
             return 0;
         } else {
             /*
              Rationale for while-loop on (readLen == 0):
              -----
              Base64.readResults() usually returns > 0 or EOF (-1).  In the
              rare case where it returns 0, we just keep trying.
 
              This is essentially an undocumented contract for InputStream
              implementors that want their code to work properly with
              java.io.InputStreamReader, since the latter hates it when
              InputStream.read(byte[]) returns a zero.  Unfortunately our
              readResults() call must return 0 if a large amount of the data
              being decoded was non-base64, so this while-loop enables proper
              interop with InputStreamReader for that scenario.
              -----
              This is a fix for CODEC-101
             */
+            int readLen = 0;
+            // Loop until we successfully read data (>0) or reach the end of the stream (-1).
+            // This ensures InputStream.read(byte[]) never returns 0 unless len is 0.
+            while (readLen == 0) {
+                // If Base64's internal buffer has no data, we need to read from the underlying stream.
                 if (!base64.hasData()) {
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
-                    int c = in.read(buf);
-                    // A little optimization to avoid System.arraycopy()
-                    // when possible.
+                    int c = in.read(buf); // Read from the underlying InputStream
+
+                    if (c == -1) { // End of underlying stream
+                        // Attempt to read any remaining processed bytes from Base64's buffer.
+                        readLen = base64.readResults(b, offset, len);
+                        return readLen == 0 ? -1 : readLen; // If no more data, return -1; otherwise, return what was read.
+                    } else if (c == 0) {
+                        // The underlying stream returned 0 bytes. This means no new input was available
+                        // from the underlying source at this moment. We will still attempt to read from
+                        // base64.readResults to check if any data was processed previously and is now ready.
+                        // If base64.readResults also yields 0, the loop will correctly re-attempt to read from 'in'.
+                    }
+
+                    // Optimization to potentially use the user's buffer directly.
+                    // This is applicable if the user's buffer is being filled completely (offset=0, len=b.length).
                     if (c > 0 && b.length == len) {
                         base64.setInitialBuffer(b, offset, len);
                     }
+
+                    // Process the bytes read from the underlying stream (encode or decode).
                     if (doEncode) {
                         base64.encode(buf, 0, c);
                     } else {
                         base64.decode(buf, 0, c);
                     }
                 }
-            return base64.readResults(b, offset, len);
+                
+                // Try to read the results from Base64's internal buffer (which might be the user's buffer 'b').
+                readLen = base64.readResults(b, offset, len);
+
+                // If readLen is still 0, the loop continues, trying to get more data from the underlying stream
+                // or waiting for more data to be processed if the underlying stream also returned 0.
+            }
+            return readLen; // Return the number of bytes read (> 0).
         }
     }
\ No newline at end of file
