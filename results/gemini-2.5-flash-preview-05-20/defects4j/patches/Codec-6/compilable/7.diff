diff --git a/tmp/445c52e8-8b93-4a53-83c2-f26836eec91e_buggy.java b/tmp/589ff692-0353-452b-9ede-1b9d22b4febf_fixed.java
index d3b3ebf..c2d2256 100644
--- a/tmp/445c52e8-8b93-4a53-83c2-f26836eec91e_buggy.java
+++ b/tmp/589ff692-0353-452b-9ede-1b9d22b4febf_fixed.java
@@ -1,62 +1,94 @@
     /**
      * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>
      * from this InputStream.
      * 
      * @param b
      *            destination byte array
      * @param offset
      *            where to start writing the bytes
      * @param len
      *            maximum number of bytes to read
      * 
      * @return number of bytes read
      * @throws IOException
      *             if an I/O error occurs.
      * @throws NullPointerException
      *             if the byte array parameter is null
      * @throws IndexOutOfBoundsException
      *             if offset, len or buffer size are invalid
      */
     public int read(byte b[], int offset, int len) throws IOException {
         if (b == null) {
             throw new NullPointerException();
         } else if (offset < 0 || len < 0) {
             throw new IndexOutOfBoundsException();
         } else if (offset > b.length || offset + len > b.length) {
             throw new IndexOutOfBoundsException();
         } else if (len == 0) {
             return 0;
         } else {
             /*
              Rationale for while-loop on (readLen == 0):
              -----
              Base64.readResults() usually returns > 0 or EOF (-1).  In the
              rare case where it returns 0, we just keep trying.
 
              This is essentially an undocumented contract for InputStream
              implementors that want their code to work properly with
              java.io.InputStreamReader, since the latter hates it when
              InputStream.read(byte[]) returns a zero.  Unfortunately our
              readResults() call must return 0 if a large amount of the data
              being decoded was non-base64, so this while-loop enables proper
              interop with InputStreamReader for that scenario.
              -----
              This is a fix for CODEC-101
             */
-                if (!base64.hasData()) {
+            int readLen = 0;
+            while (true) {
+                // Attempt to read decoded/encoded bytes from the Base64 instance's internal buffer.
+                // This call might return 0 if there's insufficient data in the internal buffer
+                // to fulfill the 'len' request, or if the processed data yields no output.
+                readLen = base64.readResults(b, offset, len);
+
+                if (readLen > 0 || readLen == -1) {
+                    // If we successfully read some bytes (readLen > 0), or if
+                    // the Base64 instance has no more data and indicates EOF (readLen == -1),
+                    // then we are done and can return the result.
+                    return readLen;
+                }
+
+                // If readLen is 0, it means Base64 couldn't produce any output from its current
+                // internal buffer. This typically happens when the buffer is empty, or when
+                // non-Base64 characters were processed and produced no output.
+                // In such cases, we need to read more data from the underlying InputStream.
                 byte[] buf = new byte[doEncode ? 4096 : 8192];
-                    int c = in.read(buf);
-                    // A little optimization to avoid System.arraycopy()
-                    // when possible.
-                    if (c > 0 && b.length == len) {
+                int c = in.read(buf); // Read bytes from the underlying InputStream
+
+                if (c < 0) {
+                    // If the underlying InputStream signals EOF (c < 0), and our Base64 instance
+                    // already returned 0 (meaning no more data to process), then the entire
+                    // stream is at an end. Return -1 to indicate EOF.
+                    return -1;
+                }
+
+                // Optimization: If the caller is reading into the entire destination buffer
+                // (i.e., `read(byte[])` was called, or `read(byte[], 0, b.length)`),
+                // then we can potentially set 'b' as the initial buffer for Base64.
+                // This allows Base64 to write decoded/encoded data directly into 'b',
+                // avoiding an intermediate System.arraycopy().
+                if (c > 0 && offset == 0 && len == b.length) {
                     base64.setInitialBuffer(b, offset, len);
                 }
+
+                // Process the newly read bytes (encode or decode) and feed them to the Base64 instance.
+                // This will populate Base64's internal buffer, or directly write to 'b' if setInitialBuffer was effective.
                 if (doEncode) {
                     base64.encode(buf, 0, c);
                 } else {
                     base64.decode(buf, 0, c);
                 }
+                // The loop will continue, and in the next iteration, it will attempt to
+                // read results from the Base64 instance again, now with the newly processed data.
             }
-            return base64.readResults(b, offset, len);
         }
     }
\ No newline at end of file
