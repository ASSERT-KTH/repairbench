diff --git a/tmp/d338966e-cf17-4460-9fd0-2f5de345486d_buggy.java b/tmp/f668abe0-411c-4b6d-9c38-f23163d85faa_fixed.java
index d3b3ebf..96d52e3 100644
--- a/tmp/d338966e-cf17-4460-9fd0-2f5de345486d_buggy.java
+++ b/tmp/f668abe0-411c-4b6d-9c38-f23163d85faa_fixed.java
@@ -1,62 +1,111 @@
     /**
      * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>
      * from this InputStream.
      *
      * @param b
      *            destination byte array
      * @param offset
      *            where to start writing the bytes
      * @param len
      *            maximum number of bytes to read
      *
      * @return number of bytes read
      * @throws IOException
      *             if an I/O error occurs.
      * @throws NullPointerException
      *             if the byte array parameter is null
      * @throws IndexOutOfBoundsException
      *             if offset, len or buffer size are invalid
      */
     public int read(byte b[], int offset, int len) throws IOException {
         if (b == null) {
             throw new NullPointerException();
         } else if (offset < 0 || len < 0) {
             throw new IndexOutOfBoundsException();
         } else if (offset > b.length || offset + len > b.length) {
             throw new IndexOutOfBoundsException();
         } else if (len == 0) {
             return 0;
         } else {
             /*
              Rationale for while-loop on (readLen == 0):
              -----
              Base64.readResults() usually returns > 0 or EOF (-1).  In the
              rare case where it returns 0, we just keep trying.
 
              This is essentially an undocumented contract for InputStream
              implementors that want their code to work properly with
              java.io.InputStreamReader, since the latter hates it when
              InputStream.read(byte[]) returns a zero.  Unfortunately our
              readResults() call must return 0 if a large amount of the data
              being decoded was non-base64, so this while-loop enables proper
              interop with InputStreamReader for that scenario.
              -----
              This is a fix for CODEC-101
             */
-                if (!base64.hasData()) {
+
+            int bytesRead = 0;
+            boolean eof = false; // Flag to track if the underlying stream has reached EOF
+
+            // Loop until we successfully read some bytes (bytesRead > 0)
+            // or confirm that EOF is reached (bytesRead will be -1).
+            // This loop ensures that the method never returns 0 if len > 0.
+            while (bytesRead == 0) {
+                // First, attempt to read results from the Base64 codec's internal buffer.
+                // This might be data already processed or newly processed in this iteration.
+                bytesRead = base64.readResults(b, offset, len);
+
+                if (bytesRead == 0) { // If readResults returned 0, it means Base64 has no processed data to give out *at this moment*.
+                                      // We need to try to get more raw data from the underlying InputStream 'in'.
+                    if (eof) {
+                        // If underlying stream is already at EOF and base64.readResults still returns 0,
+                        // and base64.hasData() is also false, then we truly have nothing more to read.
+                        // We must ensure base64 has flushed all data, as signaling EOF to it may produce more output.
+                        // This check was handled by the base64.encode/decode(..., -1) below.
+                        // If after that, bytesRead is still 0, then we return -1.
+                        // So, this specific check is handled by the final 'if (bytesRead == 0 && eof && !base64.hasData())'
+                    }
+
+                    // If Base64 has no internal data, or readResults returned 0,
+                    // and we haven't reached EOF on the underlying stream yet, read more raw data.
+                    if (!eof) { // Only read from 'in' if not already at EOF
                         byte[] buf = new byte[doEncode ? 4096 : 8192];
                         int c = in.read(buf);
+
+                        if (c < 0) { // Underlying stream reached EOF
+                            eof = true; // Set EOF flag
+                            // Signal EOF to the Base64 codec to flush any remaining data.
+                            // Passing -1 to encode/decode signifies end of input.
+                            if (doEncode) {
+                                base64.encode(buf, 0, -1);
+                            } else {
+                                base64.decode(buf, 0, -1);
+                            }
+                        } else if (c > 0) { // Data was read from underlying stream
                             // A little optimization to avoid System.arraycopy()
-                    // when possible.
-                    if (c > 0 && b.length == len) {
+                            // when possible. This line was in the original code.
+                            if (b.length == len) {
                                 base64.setInitialBuffer(b, offset, len);
                             }
                             if (doEncode) {
                                 base64.encode(buf, 0, c);
                             } else {
                                 base64.decode(buf, 0, c);
                             }
                         }
-            return base64.readResults(b, offset, len);
+                        // If c == 0, it means the underlying stream returned 0 bytes (e.g., non-blocking read without data).
+                        // In this case, we don't feed new data to base64, and bytesRead will remain 0,
+                        // causing the loop to re-attempt `readResults` or `in.read` again.
+                    }
+                }
+
+                // Check for final EOF condition after processing new input or attempting to read results.
+                // If bytesRead is still 0 AND the underlying stream is at EOF AND Base64 has no more data,
+                // then we have truly reached the end of the stream.
+                if (bytesRead == 0 && eof && !base64.hasData()) {
+                    return -1; // Indicate EOF
+                }
+            }
+            return bytesRead; // Return the number of bytes read (must be > 0)
         }
     }
\ No newline at end of file
