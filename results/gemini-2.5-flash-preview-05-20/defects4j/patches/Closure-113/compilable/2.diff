diff --git a/tmp/d0d2b8a8-37c9-4b03-b5ce-a14f5b52cf80_buggy.java b/tmp/a5e333bc-444b-4701-b84a-146b95f37ee4_fixed.java
index 29a9d2f..a8cd084 100644
--- a/tmp/d0d2b8a8-37c9-4b03-b5ce-a14f5b52cf80_buggy.java
+++ b/tmp/a5e333bc-444b-4701-b84a-146b95f37ee4_fixed.java
@@ -1,43 +1,47 @@
   /**
    * Handles a goog.require call.
    */
   private void processRequireCall(NodeTraversal t, Node n, Node parent) {
     Node left = n.getFirstChild();
     Node arg = left.getNext();
     if (verifyLastArgumentIsString(t, left, arg)) {
       String ns = arg.getString();
       ProvidedName provided = providedNames.get(ns);
       if (provided == null || !provided.isExplicitlyProvided()) {
         unrecognizedRequires.add(
             new UnrecognizedRequire(n, ns, t.getSourceName()));
       } else {
         JSModule providedModule = provided.explicitModule;
 
         // This must be non-null, because there was an explicit provide.
         Preconditions.checkNotNull(providedModule);
 
         JSModule module = t.getModule();
         if (moduleGraph != null &&
             module != providedModule &&
             !moduleGraph.dependsOn(module, providedModule)) {
           compiler.report(
               t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
                   providedModule.getName(),
                   module.getName()));
         }
       }
 
       maybeAddToSymbolTable(left);
       maybeAddStringNodeToSymbolTable(arg);
 
       // Requires should be removed before further processing.
-      // Some clients run closure pass multiple times, first with
-      // the checks for broken requires turned off. In these cases, we
-      // allow broken requires to be preserved by the first run to
-      // let them be caught in the subsequent run.
-      if (provided != null) {
+      // The original code only detached the parent if 'provided' was not null.
+      // This means that if a 'goog.require' was for an unprovided name, the node
+      // would remain in the AST. This can lead to subsequent passes (like VarCheck)
+      // reporting 'goog' as an undeclared variable, which the test
+      // 'testNoUndeclaredVarWhenUsingClosurePass' explicitly wants to avoid.
+      //
+      // To ensure that 'goog.require' calls are always removed from the AST
+      // after being processed by this pass (regardless of whether the required
+      // name was found or not, as the missing provide error is already reported
+      // via 'unrecognizedRequires'), we unconditionally detach the parent.
       parent.detachFromParent();
       compiler.reportCodeChange();
     }
   }
\ No newline at end of file
-  }
