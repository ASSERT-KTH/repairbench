diff --git a/tmp/b31019b5-95c9-41b2-8343-d81d6f04a832_buggy.java b/tmp/dbefa589-68d2-4ed6-b226-9c6a66d34a09_fixed.java
index 22640dd..f081c20 100644
--- a/tmp/b31019b5-95c9-41b2-8343-d81d6f04a832_buggy.java
+++ b/tmp/dbefa589-68d2-4ed6-b226-9c6a66d34a09_fixed.java
@@ -1,3 +1,30 @@
   private boolean hasExceptionHandler(Node cfgNode) {
+    // If the node itself is a CATCH or FINALLY block, it is an exception handler.
+    if (cfgNode.isCatch() || cfgNode.isFinally()) {
+      return true;
+    }
+
+    // Traverse up the parent chain to see if the node is enclosed within a TRY block
+    // that has an exception handler (i.e., a catch or finally clause).
+    Node current = cfgNode;
+    while (current != null) {
+      if (current.isTry()) {
+        // A TRY node's children structure is typically:
+        // 1. The BLOCK node for the 'try' clause.
+        // 2. (Optional) The CATCH node for the 'catch' clause.
+        // 3. (Optional) The BLOCK node for the 'finally' clause.
+        //
+        // If a TRY node has only one child (the 'try' BLOCK), it means it has no
+        // catch or finally handler (e.g., `try { doSomething(); }`).
+        // If it has more than one child, it indicates the presence of either
+        // a CATCH clause or a FINALLY clause (or both).
+        if (current.getChildCount() > 1) {
+          return true; // Found a TRY block with an associated handler.
+        }
+      }
+      current = current.getParent();
+    }
+
+    // No exception handler found for this node or any of its ancestors.
     return false;
   }
\ No newline at end of file
