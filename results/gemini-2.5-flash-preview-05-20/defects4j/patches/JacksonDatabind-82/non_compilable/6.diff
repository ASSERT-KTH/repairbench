diff --git a/tmp/1da46f6f-a3e7-4ebf-ac61-0dc7928d719d_buggy.java b/tmp/2f9871f5-cb7c-4c28-962d-2ec66cf648a7_fixed.java
index ee10759..139ee19 100644
--- a/tmp/1da46f6f-a3e7-4ebf-ac61-0dc7928d719d_buggy.java
+++ b/tmp/2f9871f5-cb7c-4c28-962d-2ec66cf648a7_fixed.java
@@ -1,151 +1,209 @@
     /**
      * Method called to figure out settable properties for the
      * bean deserializer to use.
      *<p>
      * Note: designed to be overridable, and effort is made to keep interface
      * similar between versions.
      */
     protected void addBeanProps(DeserializationContext ctxt,
             BeanDescription beanDesc, BeanDeserializerBuilder builder)
         throws JsonMappingException
     {
         final boolean isConcrete = !beanDesc.getType().isAbstract();
         final SettableBeanProperty[] creatorProps = isConcrete
                 ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())
                 : null;
         final boolean hasCreatorProps = (creatorProps != null);
         
         // 01-May-2016, tatu: Which base type to use here gets tricky, since
         //   it may often make most sense to use general type for overrides,
         //   but what we have here may be more specific impl type. But for now
         //   just use it as is.
         JsonIgnoreProperties.Value ignorals = ctxt.getConfig()
                 .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),
                         beanDesc.getClassInfo());
         Set<String> ignored;
 
         if (ignorals != null) {
             boolean ignoreAny = ignorals.getIgnoreUnknown();
             builder.setIgnoreUnknownProperties(ignoreAny);
             // Or explicit/implicit definitions?
             ignored = ignorals.getIgnored();
             for (String propName : ignored) {
                 builder.addIgnorable(propName);
             }
         } else {
             ignored = Collections.emptySet();
         }
 
         // Also, do we have a fallback "any" setter?
         AnnotatedMethod anySetterMethod = beanDesc.findAnySetter();
         AnnotatedMember anySetterField = null;
         if (anySetterMethod != null) {
             builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod));
         }
         else {
         	anySetterField = beanDesc.findAnySetterField();
         	if(anySetterField != null) {
         		builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField));
         	}
         }
         // NOTE: we do NOT add @JsonIgnore'd properties into blocked ones if there's any-setter
         // Implicit ones via @JsonIgnore and equivalent?
         if (anySetterMethod == null && anySetterField == null) {
             Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames();
             if (ignored2 != null) {
                 for (String propName : ignored2) {
                     // allow ignoral of similarly named JSON property, but do not force;
                     // latter means NOT adding this to 'ignored':
                     builder.addIgnorable(propName);
                 }
             }
         }
         final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)
                 && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);
 
         // Ok: let's then filter out property definitions
         List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,
                 beanDesc, builder, beanDesc.findProperties(), ignored);
 
         // After which we can let custom code change the set
         if (_factoryConfig.hasDeserializerModifiers()) {
             for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                 propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);
             }
         }
         
         // At which point we still have all kinds of properties; not all with mutators:
         for (BeanPropertyDefinition propDef : propDefs) {
             SettableBeanProperty prop = null;
             /* 18-Oct-2013, tatu: Although constructor parameters have highest precedence,
              *   we need to do linkage (as per [databind#318]), and so need to start with
              *   other types, and only then create constructor parameter, if any.
              */
+            // Priority:
+            // 1. Explicit setter method (reported by propDef)
+            // 2. Field (reported by propDef)
+            // 3. Setterless (getter-based for collections/maps)
+            // 4. Fallback for cases like [databind#1595] where setter is logically present but not via propDef.getSetter()
+
             if (propDef.hasSetter()) {
                 JavaType propertyType = propDef.getSetter().getParameterType(0);
                 prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);
             } else if (propDef.hasField()) {
                 JavaType propertyType = propDef.getField().getType();
                 prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);
             } else if (useGettersAsSetters && propDef.hasGetter()) {
                 /* May also need to consider getters
                  * for Map/Collection properties; but with lowest precedence
                  */
                 AnnotatedMethod getter = propDef.getGetter();
                 // should only consider Collections and Maps, for now?
                 Class<?> rawPropertyType = getter.getRawType();
                 if (Collection.class.isAssignableFrom(rawPropertyType)
                         || Map.class.isAssignableFrom(rawPropertyType)) {
                     prop = constructSetterlessProperty(ctxt, beanDesc, propDef);
                 }
             }
+
+            // [databind#1595] workaround: If property was not found as writable (setter/field)
+            // but is marked as "writable" by BeanPropertyDefinition (meaning it was probably meant
+            // to have one, but was lost due to getter being ignored or similar internal issue).
+            // This is a LAST RESORT.
+            if (prop == null && propDef.isWritable() && !propDef.hasConstructorParameter()) {
+                // Try to find the setter method directly, ignoring any implicit ignoral
+                // that might have affected `propDef.getSetter()`'s internal state.
+                // This is a heuristic based on standard JavaBeans conventions.
+                AnnotatedMethod actualSetter = beanDesc.findMethod(
+                    ClassUtil.setterMethodName(propDef.getName()), // e.g., "setName"
+                    1 // assumes single parameter setter
+                );
+                // Additional checks: ensure the method is actually a setter by signature (void return, single param)
+                // and it's not explicitly @JsonIgnore'd itself.
+                if (actualSetter != null
+                        && actualSetter.getRawParameterTypes().length == 1
+                        && actualSetter.getRawReturnType() == Void.TYPE
+                        && !actualSetter.hasAnnotation(JsonIgnore.class)) // Ensure setter itself is not @JsonIgnore'd
+                {
+                    // This is a setter that was missed by `propDef.getSetter()` when `propDef` was built.
+                    // We need to create a `SettableBeanProperty` using this actual setter.
+                    // Since `constructSettableProperty` relies on `propDef.getSetter()` being non-null,
+                    // and we cannot modify `propDef` here, we must create a new `BeanPropertyDefinition`
+                    // with the correct setter. This is a common pattern for such workarounds.
+                    
+                    // Create a "fixed" BeanPropertyDefinition that includes the found setter.
+                    // Note: This relies on internal details of BeanPropertyDefinition construction,
+                    // and is a workaround for a bug that ideally should be fixed upstream in POJOPropertyBuilder.
+                    BeanPropertyDefinition fixedPropDef = BeanPropertyDefinition.construct(
+                        ctxt.getConfig(),
+                        actualSetter, // Use the actual setter as the primary mutator
+                        propDef.getName(),
+                        propDef.getMetadata(),
+                        propDef.getPrimaryType() // Or actualSetter.getParameterType(0)
+                    );
+                    // Copy other info from original propDef (getter, field, constructor param, etc.)
+                    // This is simplified; a full copy might be more complex depending on Jackson version.
+                    // For typical cases, just assigning the setter and name might be sufficient if
+                    // other properties are inferred.
+                    
+                    // The minimal necessary for `constructSettableProperty` is usually the setter/field member.
+                    // Let's ensure the 'fixed' definition has the setter:
+                    fixedPropDef.setSetter(actualSetter);
+                    // Use the original propDef's annotations and type if possible, or derive from setter
+                    JavaType propertyType = actualSetter.getParameterType(0);
+                    
+                    prop = constructSettableProperty(ctxt, beanDesc, fixedPropDef, propertyType);
+                }
+            }
+
+
             // 25-Sep-2014, tatu: No point in finding constructor parameters for abstract types
             //   (since they are never used anyway)
             if (hasCreatorProps && propDef.hasConstructorParameter()) {
                 /* If property is passed via constructor parameter, we must
                  * handle things in special way. Not sure what is the most optimal way...
                  * for now, let's just call a (new) method in builder, which does nothing.
                  */
                 // but let's call a method just to allow custom builders to be aware...
                 final String name = propDef.getName();
                 CreatorProperty cprop = null;
                 if (creatorProps != null) {
                     for (SettableBeanProperty cp : creatorProps) {
                         if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) {
                             cprop = (CreatorProperty) cp;
                             break;
                         }
                     }
                 }
                 if (cprop == null) {
                     List<String> n = new ArrayList<>();
                     for (SettableBeanProperty cp : creatorProps) {
                         n.add(cp.getName());
                     }
                     ctxt.reportBadPropertyDefinition(beanDesc, propDef,
                             "Could not find creator property with name '%s' (known Creator properties: %s)",
                             name, n);
                     continue;
                 }
                 if (prop != null) {
                     cprop.setFallbackSetter(prop);
                 }
                 prop = cprop;
                 builder.addCreatorProperty(cprop);
                 continue;
             }
 
             if (prop != null) {
                 Class<?>[] views = propDef.findViews();
                 if (views == null) {
                     // one more twist: if default inclusion disabled, need to force empty set of views
                     if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {
                         views = NO_VIEWS;
                     }
                 }
                 // one more thing before adding to builder: copy any metadata
                 prop.setViews(views);
                 builder.addProperty(prop);
             }
         }
     }
