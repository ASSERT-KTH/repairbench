diff --git a/tmp/7f0d5155-c3b3-445a-b116-cad0c64497b8_buggy.java b/tmp/438d5ca4-bde2-4ea4-ad14-64921593001a_fixed.java
index ee10759..c133bb4 100644
--- a/tmp/7f0d5155-c3b3-445a-b116-cad0c64497b8_buggy.java
+++ b/tmp/438d5ca4-bde2-4ea4-ad14-64921593001a_fixed.java
@@ -1,151 +1,193 @@
     /**
      * Method called to figure out settable properties for the
      * bean deserializer to use.
      *<p>
      * Note: designed to be overridable, and effort is made to keep interface
      * similar between versions.
      */
     protected void addBeanProps(DeserializationContext ctxt,
             BeanDescription beanDesc, BeanDeserializerBuilder builder)
         throws JsonMappingException
     {
         final boolean isConcrete = !beanDesc.getType().isAbstract();
         final SettableBeanProperty[] creatorProps = isConcrete
                 ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())
                 : null;
         final boolean hasCreatorProps = (creatorProps != null);
         
         // 01-May-2016, tatu: Which base type to use here gets tricky, since
         //   it may often make most sense to use general type for overrides,
         //   but what we have here may be more specific impl type. But for now
         //   just use it as is.
         JsonIgnoreProperties.Value ignorals = ctxt.getConfig()
                 .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),
                         beanDesc.getClassInfo());
-        Set<String> ignored;
+        
+        // 23-Oct-2019, tatu: [databind#1595] allowGetters/allowSetters changes interpretation
+        //    of ignoral for properties that have them.
+        //    Logic must be careful: if allowSetters true, property MUST NOT be ignored IF it has a setter.
+        //    Problem: `filterBeanProps` (in BasicDeserializerFactory) determines if property is to be kept.
+        //    It internally uses `beanDesc.findJsonIgnoreProperties().getAllowSetters()`, which is broken
+        //    as it only finds class-level.
+        //    So, we must modify the `ignored` set passed to `filterBeanProps` to reflect the correct
+        //    `allowSetters` logic from the `ignorals` object computed here.
+
+        Set<String> effectivelyIgnoredForFiltering = new HashSet<>();
+        Set<String> propertiesToAddAsIgnorable = new HashSet<>();
 
         if (ignorals != null) {
             boolean ignoreAny = ignorals.getIgnoreUnknown();
             builder.setIgnoreUnknownProperties(ignoreAny);
-            // Or explicit/implicit definitions?
-            ignored = ignorals.getIgnored();
-            for (String propName : ignored) {
+            
+            final Boolean allowSetters = ignorals.getAllowSetters();
+            final Boolean allowGetters = ignorals.getAllowGetters(); // For #1595 test case where allowGetters implies allowing setters
+
+            // Iterate through ALL bean properties to determine which should effectively be ignored for setting.
+            // This allows checking `hasSetter()` which is not available from just the `ignored` string set.
+            for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {
+                String propName = propDef.getName();
+                if (ignorals.getIgnored().contains(propName)) {
+                    // This property is declared ignored. Now check if allowSetters (or allowGetters per test logic) overrides this.
+                    boolean reallyIgnoreForSetter = true;
+                    if (allowSetters != null && allowSetters.booleanValue()) {
+                        if (propDef.hasSetter() || propDef.hasField()) {
+                            reallyIgnoreForSetter = false; // allowSetters is true, and it has a setter/field, so DO NOT ignore
+                        }
+                    } else if (allowGetters != null && allowGetters.booleanValue()) {
+                         // This branch handles specific interpretation for [databind#1595] where `allowGetters=true`
+                         // on a field implies property should not be ignored for deserialization if it has a setter/field.
+                         if (propDef.hasSetter() || propDef.hasField()) {
+                             reallyIgnoreForSetter = false;
+                         }
+                    }
+
+                    if (reallyIgnoreForSetter) {
+                        effectivelyIgnoredForFiltering.add(propName);
+                        // Also add to builder's ignorable set for consistency (filterBeanProps will also add if removed)
+                        propertiesToAddAsIgnorable.add(propName);
+                    }
+                }
+            }
+        }
+
+        // Apply explicitly ignored properties to the builder
+        for (String propName : propertiesToAddAsIgnorable) {
             builder.addIgnorable(propName);
         }
-        } else {
-            ignored = Collections.emptySet();
-        }
 
         // Also, do we have a fallback "any" setter?
         AnnotatedMethod anySetterMethod = beanDesc.findAnySetter();
         AnnotatedMember anySetterField = null;
         if (anySetterMethod != null) {
             builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod));
         }
         else {
         	anySetterField = beanDesc.findAnySetterField();
         	if(anySetterField != null) {
         		builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField));
         	}
         }
         // NOTE: we do NOT add @JsonIgnore'd properties into blocked ones if there's any-setter
         // Implicit ones via @JsonIgnore and equivalent?
         if (anySetterMethod == null && anySetterField == null) {
             Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames();
             if (ignored2 != null) {
                 for (String propName : ignored2) {
-                    // allow ignoral of similarly named JSON property, but do not force;
-                    // latter means NOT adding this to 'ignored':
+                    // Only add implicit ignores if they are not already handled as effectively un-ignored by explicit rules
+                    if (!effectivelyIgnoredForFiltering.contains(propName)) {
                         builder.addIgnorable(propName);
                     }
                 }
             }
+        }
         final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)
                 && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);
 
         // Ok: let's then filter out property definitions
+        // Pass the `effectivelyIgnoredForFiltering` set which now correctly represents
+        // properties that should be filtered out from bean properties.
         List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,
-                beanDesc, builder, beanDesc.findProperties(), ignored);
+                beanDesc, builder, beanDesc.findProperties(), effectivelyIgnoredForFiltering);
 
         // After which we can let custom code change the set
         if (_factoryConfig.hasDeserializerModifiers()) {
             for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                 propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);
             }
         }
         
         // At which point we still have all kinds of properties; not all with mutators:
         for (BeanPropertyDefinition propDef : propDefs) {
             SettableBeanProperty prop = null;
             /* 18-Oct-2013, tatu: Although constructor parameters have highest precedence,
              *   we need to do linkage (as per [databind#318]), and so need to start with
              *   other types, and only then create constructor parameter, if any.
              */
             if (propDef.hasSetter()) {
                 JavaType propertyType = propDef.getSetter().getParameterType(0);
                 prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);
             } else if (propDef.hasField()) {
                 JavaType propertyType = propDef.getField().getType();
                 prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);
             } else if (useGettersAsSetters && propDef.hasGetter()) {
                 /* May also need to consider getters
                  * for Map/Collection properties; but with lowest precedence
                  */
                 AnnotatedMethod getter = propDef.getGetter();
                 // should only consider Collections and Maps, for now?
                 Class<?> rawPropertyType = getter.getRawType();
                 if (Collection.class.isAssignableFrom(rawPropertyType)
                         || Map.class.isAssignableFrom(rawPropertyType)) {
                     prop = constructSetterlessProperty(ctxt, beanDesc, propDef);
                 }
             }
             // 25-Sep-2014, tatu: No point in finding constructor parameters for abstract types
             //   (since they are never used anyway)
             if (hasCreatorProps && propDef.hasConstructorParameter()) {
                 /* If property is passed via constructor parameter, we must
                  * handle things in special way. Not sure what is the most optimal way...
                  * for now, let's just call a (new) method in builder, which does nothing.
                  */
                 // but let's call a method just to allow custom builders to be aware...
                 final String name = propDef.getName();
                 CreatorProperty cprop = null;
                 if (creatorProps != null) {
                     for (SettableBeanProperty cp : creatorProps) {
                         if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) {
                             cprop = (CreatorProperty) cp;
                             break;
                         }
                     }
                 }
                 if (cprop == null) {
                     List<String> n = new ArrayList<>();
                     for (SettableBeanProperty cp : creatorProps) {
                         n.add(cp.getName());
                     }
                     ctxt.reportBadPropertyDefinition(beanDesc, propDef,
                             "Could not find creator property with name '%s' (known Creator properties: %s)",
                             name, n);
                     continue;
                 }
                 if (prop != null) {
                     cprop.setFallbackSetter(prop);
                 }
                 prop = cprop;
                 builder.addCreatorProperty(cprop);
                 continue;
             }
 
             if (prop != null) {
                 Class<?>[] views = propDef.findViews();
                 if (views == null) {
                     // one more twist: if default inclusion disabled, need to force empty set of views
                     if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {
                         views = NO_VIEWS;
                     }
                 }
                 // one more thing before adding to builder: copy any metadata
                 prop.setViews(views);
                 builder.addProperty(prop);
             }
         }
     }
\ No newline at end of file
