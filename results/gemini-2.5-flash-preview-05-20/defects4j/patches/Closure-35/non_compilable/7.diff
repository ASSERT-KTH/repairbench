diff --git a/tmp/caff40f1-be33-4750-a386-4594b3956fc4_buggy.java b/tmp/7636d046-3ab8-42db-80b7-c97c416cd8a6_fixed.java
index d57736b..803ea82 100644
--- a/tmp/caff40f1-be33-4750-a386-4594b3956fc4_buggy.java
+++ b/tmp/7636d046-3ab8-42db-80b7-c97c416cd8a6_fixed.java
@@ -1,39 +1,62 @@
   /**
    * Suppos e X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
+      // Collect all potential object types from 'type' that might need property inference.
+      // This handles single object types as well as union types of objects.
+      ImmutableList<JSType> typesToInfer = null;
+      if (type.isUnionType()) {
+        typesToInfer = type.toMaybeUnionType().getAlternates();
+      } else if (type.isObjectType()) {
+        typesToInfer = ImmutableList.of(type);
+      }
+
+      if (typesToInfer != null) {
+        for (JSType currentType : typesToInfer) {
+          // Only process actual object types (after stripping null/undefined).
+          ObjectType objType = ObjectType.cast(currentType.restrictByNotNullOrUndefined());
           if (objType != null) {
             for (String prop : constraintObj.getOwnPropertyNames()) {
               JSType propType = constraintObj.getPropertyType(prop);
+              // Only infer if the property is not explicitly declared on objType.
+              // This is crucial to avoid overwriting user-declared types.
               if (!objType.isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
+                // If the property doesn't exist on the object, it should be inferred as
+                // its constraint type OR undefined, whatever is more general.
+                // For example, if constraint wants 'number|undefined' and the property
+                // doesn't exist, we infer 'number|undefined'.
                 if (!objType.hasProperty(prop)) {
                   typeToInfer =
                       getNativeType(VOID_TYPE).getLeastSupertype(propType);
                 }
+                // Define or widen the inferred property.
+                // defineInferredProperty will take the least common supertype
+                // between the existing inferred type and typeToInfer.
                 objType.defineInferredProperty(prop, typeToInfer, null);
               }
             }
           }
         }
       }
+    }
+  }
\ No newline at end of file
