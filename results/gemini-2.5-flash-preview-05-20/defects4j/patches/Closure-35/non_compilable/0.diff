diff --git a/tmp/e5e89ee4-f3c8-482b-8b83-c030c2dd2fb7_buggy.java b/tmp/5608babb-37bc-4e7c-8915-7cab88800c0c_fixed.java
index d57736b..7142fcd 100644
--- a/tmp/e5e89ee4-f3c8-482b-8b83-c030c2dd2fb7_buggy.java
+++ b/tmp/5608babb-37bc-4e7c-8915-7cab88800c0c_fixed.java
@@ -1,39 +1,64 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
-      if (objType != null) {
+      // The original code implicitly assumed 'type' was a single ObjectType.
+      // However, 'type' can be a union of object types (e.g., from an if/else branch).
+      // We need to apply the property inference to each constituent object type within the union.
+
+      JSType restrictedType = type.restrictByNotNullOrUndefined();
+
+      // Collect all relevant object types from the restrictedType.
+      // We use a Set to handle potential duplicates if the union contains redundant members.
+      Set<ObjectType> objTypesToInfer = new LinkedHashSet<>();
+      for (JSType member : restrictedType.getUnionMembers()) {
+          // We only want to infer properties on object literals or structural record types,
+          // not on instances of declared classes/interfaces or built-in objects (like Object, Function).
+          if (member.isObjectType()
+              && !member.isConstructorResolved()
+              && !member.isInterfaceResolved()
+              && !member.isBuiltinObject()) {
+              objTypesToInfer.add(member.toObjectType());
+          }
+      }
+
+      for (ObjectType objType : objTypesToInfer) {
+        // objType is now guaranteed to be an ObjectType that is eligible for inferred property modification.
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
+            // If the property is not explicitly declared on objType (e.g., in an object literal).
             JSType typeToInfer = propType;
             if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+              // If the property does not exist on objType at all (neither declared nor inferred).
+              // We infer its type to be 'propType' unioned with 'undefined'.
+              // This is crucial for cases like `f({});` where `x` expects `{prop: number|undefined}`.
+              // If `objType` is `{}` (represented by NoObjectType) and `constraint` implies `propType`,
+              // then the inferred type for the missing property should include undefined.
+              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
             }
             objType.defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
     }
   }
\ No newline at end of file
