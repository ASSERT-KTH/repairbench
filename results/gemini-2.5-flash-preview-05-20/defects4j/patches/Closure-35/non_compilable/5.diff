diff --git a/tmp/3e806d54-0a52-42a5-b0e5-82ddcc88c229_buggy.java b/tmp/4a71d2e5-1658-4854-9400-b4b5406f8740_fixed.java
index d57736b..470aa9f 100644
--- a/tmp/3e806d54-0a52-42a5-b0e5-82ddcc88c229_buggy.java
+++ b/tmp/4a71d2e5-1658-4854-9400-b4b5406f8740_fixed.java
@@ -1,39 +1,64 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
+      // The original code only handled the case where 'type' itself was
+      // a single ObjectType (or could be cast to one after null/undefined restriction).
+      // However, 'type' can be a UnionType, especially if it represents
+      // an object that could originate from different control flow paths
+      // (e.g., 'results' in testIssue669, which is a union of two different object literals).
+      // In such cases, we need to apply property inference to each object type
+      // within that union.
+
+      JSType nonNullOrUndefinedType = type.restrictByNotNullOrUndefined();
+      
+      // Iterate over all constituent types of the potentially union 'nonNullOrUndefinedType'.
+      // If 'nonNullOrUndefinedType' is not a union, getTypesUnderUnion() returns a set
+      // containing just 'nonNullOrUndefinedType' itself.
+      for (JSType individualType : nonNullOrUndefinedType.getTypesUnderUnion()) {
+        ObjectType objType = ObjectType.cast(individualType);
+        
+        // Only apply inference if the individual type is an object type.
         if (objType != null) {
           for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
+            // We only infer if the property is NOT already declared on the object.
+            // If it's declared, its type is fixed and should not be modified.
             if (!objType.isPropertyTypeDeclared(prop)) {
               JSType typeToInfer = propType;
+              // If the object does not have the property at all (i.e., it's not
+              // even inferred), we infer it as a union with VOID (undefined).
+              // This accounts for properties that might be optional or missing
+              // in some branches, but are required by the constraint.
               if (!objType.hasProperty(prop)) {
                 typeToInfer =
                     getNativeType(VOID_TYPE).getLeastSupertype(propType);
               }
+              // Define the inferred property on the object type.
+              // 'null' is passed for the property node, as this is an inferred property.
               objType.defineInferredProperty(prop, typeToInfer, null);
             }
           }
         }
       }
     }
+  }
\ No newline at end of file
