diff --git a/tmp/0732672b-3c9d-4c6e-bf49-42ab95e57c37_buggy.java b/tmp/7941f9c2-dbdc-46e5-af87-538ce305b737_fixed.java
index d57736b..0c6cbc9 100644
--- a/tmp/0732672b-3c9d-4c6e-bf49-42ab95e57c37_buggy.java
+++ b/tmp/7941f9c2-dbdc-46e5-af87-538ce305b737_fixed.java
@@ -1,39 +1,109 @@
+import com.google.common.collect.ImmutableList; // Assuming this import is available in the environment.
+
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
-      if (objType != null) {
+      // Get the relevant object types from the inferred type, handling unions.
+      // We restrict by not null or undefined early to focus on the object shapes.
+      ImmutableList<ObjectType> objTypesToInfer = getObjectTypesForPropertyInference(
+          type.restrictByNotNullOrUndefined());
+
+      if (objTypesToInfer.isEmpty()) {
+        return; // No object types to infer properties on or process
+      }
+
       for (String prop : constraintObj.getOwnPropertyNames()) {
-          JSType propType = constraintObj.getPropertyType(prop);
+        JSType propTypeFromConstraint = constraintObj.getPropertyType(prop);
+
+        // Iterate over each distinct object type found in the 'type' (in case of a union)
+        for (ObjectType objType : objTypesToInfer) {
+          // Check if the property is declared on this specific object type.
+          // This is important for union types where a property might be declared on one
+          // member but not another.
           if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
+            // The property is not explicitly declared on this particular object type.
+            // We need to infer it based on the constraint.
+            JSType typeToInfer = propTypeFromConstraint;
+            // If the property doesn't exist at all on this object type (not even inherited),
+            // it implies it's an optional property for this object shape.
             if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+              // The inferred type should include 'undefined' to reflect its optional nature.
+              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propTypeFromConstraint);
             }
+            // Define the inferred property on this specific object type.
             objType.defineInferredProperty(prop, typeToInfer, null);
+          } else {
+            // The property is already declared on this object type.
+            // Now, we must check if its current type needs to be widened
+            // to satisfy the constraint.
+            JSType currentPropType = objType.getPropertyType(prop);
+            if (!currentPropType.isSubtypeOf(propTypeFromConstraint)) {
+              // If the current property type is not a subtype of the constraint type,
+              // we need to widen it. The new type should be the least common supertype
+              // that satisfies both the existing type and the constraint type.
+              JSType widenedType = currentPropType.getLeastSupertype(propTypeFromConstraint);
+              // Only update the property if its type has actually changed (i.e., it was widened).
+              if (!widenedType.equals(currentPropType)) {
+                 objType.defineInferredProperty(prop, widenedType, null);
               }
             }
+            // If currentPropType IS already a subtype of propTypeFromConstraint,
+            // no widening is necessary, and no action is taken.
           }
         }
       }
+    }
+  }
+
+  /**
+   * Helper method to extract relevant ObjectTypes from a JSType for property inference.
+   * Handles single object types and union types of object types.
+   * It filters out non-object types after restricting by null/undefined.
+   */
+  private ImmutableList<ObjectType> getObjectTypesForPropertyInference(JSType type) {
+    if (type == null) {
+      return ImmutableList.of();
+    }
+    // If the type is a union, iterate over its members.
+    if (type.isUnionType()) {
+      ImmutableList.Builder<ObjectType> builder = ImmutableList.builder();
+      for (JSType member : type.toUnionType().getMembers()) {
+        // Recursively restrict each union member by null/undefined.
+        JSType restrictedMember = member.restrictByNotNullOrUndefined();
+        // Attempt to cast the restricted member to an ObjectType.
+        // This will add only the actual object shapes to our list.
+        ObjectType objMember = ObjectType.cast(restrictedMember);
+        if (objMember != null) {
+          builder.add(objMember);
+        }
+      }
+      return builder.build();
+    } else {
+      // If it's not a union, just try to cast the type itself to an ObjectType.
+      ObjectType objType = ObjectType.cast(type);
+      if (objType != null) {
+        return ImmutableList.of(objType);
+      }
+    }
+    return ImmutableList.of(); // Return empty list if no suitable object types are found.
+  }
\ No newline at end of file
