diff --git a/tmp/1b802fdf-9b64-4114-bb82-4f0a6559e028_buggy.java b/tmp/ca11de7a-f336-4793-8247-c236f0fa76c5_fixed.java
index d57736b..144e0e1 100644
--- a/tmp/1b802fdf-9b64-4114-bb82-4f0a6559e028_buggy.java
+++ b/tmp/ca11de7a-f336-4793-8247-c236f0fa76c5_fixed.java
@@ -1,39 +1,49 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
-          JSType propType = constraintObj.getPropertyType(prop);
+          JSType propTypeFromConstraint = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
-            }
+            // Determine the current property type in objType.
+            // If the property doesn't exist in objType, treat its current type as VOID_TYPE (undefined)
+            // for the purpose of finding the least supertype.
+            JSType currentPropType = objType.hasProperty(prop)
+                ? objType.getPropertyType(prop)
+                : getNativeType(VOID_TYPE); // Treat non-existent as undefined
+
+            // The type to infer for this property should be the least common supertype
+            // of its current type (or undefined if not present) and the constraint's property type.
+            JSType typeToInfer = currentPropType.getLeastSupertype(propTypeFromConstraint);
+
+            // Only update the inferred property if the type has actually changed (i.e., widened or added).
+            // This prevents unnecessary re-definition and potential infinite loops if types are equivalent.
+            if (!typeToInfer.equals(currentPropType)) {
               objType.defineInferredProperty(prop, typeToInfer, null);
             }
           }
         }
       }
     }
+  }
\ No newline at end of file
