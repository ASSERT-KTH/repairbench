diff --git a/tmp/64156588-0282-4593-a8b9-8253517f233b_buggy.java b/tmp/8fae2547-e482-4704-bc0b-2fa2b16cea50_fixed.java
index d57736b..28b9303 100644
--- a/tmp/64156588-0282-4593-a8b9-8253517f233b_buggy.java
+++ b/tmp/8fae2547-e482-4704-bc0b-2fa2b16cea50_fixed.java
@@ -1,39 +1,46 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
+            JSType typeToInfer;
             if (!objType.hasProperty(prop)) {
+              // If the property is completely missing from the object type (all branches of a union),
+              // infer it as optional (void|propType) to match the constraint.
               typeToInfer =
                   getNativeType(VOID_TYPE).getLeastSupertype(propType);
+            } else {
+              // If the property exists (inferred on some branches, not declared on all),
+              // widen its existing type by taking the least supertype of the current
+              // inferred type and the constraint's property type.
+              typeToInfer = objType.getPropertyType(prop).getLeastSupertype(propType);
             }
             objType.defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
     }
   }
