diff --git a/tmp/bfeda1ba-b927-4b68-b3e5-0fd2464c6d71_buggy.java b/tmp/6a21c91e-868e-4856-beac-032a8e6d555d_fixed.java
index d57736b..085412f 100644
--- a/tmp/bfeda1ba-b927-4b68-b3e5-0fd2464c6d71_buggy.java
+++ b/tmp/6a21c91e-868e-4856-beac-032a8e6d555d_fixed.java
@@ -1,39 +1,85 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
-    if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
-      if (objType != null) {
+    if (constraintObj == null || !constraintObj.isRecordType()) {
+      // The constraint is not an object literal type with properties,
+      // so there's nothing to infer from it.
+      return;
+    }
+
+    // Get the type to potentially modify, stripped of null/undefined.
+    JSType restrictedType = type.restrictByNotNullOrUndefined();
+
+    // If the type to be inferred upon is a union, we need to apply the
+    // widening logic to each object type within the union.
+    if (restrictedType.isUnionType()) {
+      // Iterate over the constituent types of the union.
+      // We assume that the `ObjectType` instances within the union are mutable
+      // and that modifying them here will reflect in the overall union type.
+      for (JSType alternate : restrictedType.toMaybeUnionType().getAlternates()) {
+        ObjectType objAlternate = ObjectType.cast(alternate);
+        if (objAlternate != null && objAlternate.isRecordType()) {
+          // Apply the property inference logic to this specific object alternate.
+          for (String prop : constraintObj.getOwnPropertyNames()) {
+            JSType propType = constraintObj.getPropertyType(prop);
+            // We only want to infer properties that are not explicitly declared.
+            // This is to avoid overwriting user-declared types.
+            if (!objAlternate.isPropertyTypeDeclared(prop)) {
+              JSType typeToInfer;
+              if (!objAlternate.hasProperty(prop)) {
+                // If the property does not exist at all on the inferred object,
+                // infer it as a union of undefined and the constraint property type.
+                // This makes the property optional (undefined) if it's not present.
+                typeToInfer =
+                    getNativeType(VOID_TYPE).getLeastSupertype(propType);
+              } else {
+                // If the property exists but is inferred (not declared),
+                // widen its current inferred type with the constraint property type.
+                // This ensures the inferred property's type is a supertype of both
+                // its current inferred type and the constraint's type.
+                typeToInfer = objAlternate.getPropertyType(prop).getLeastSupertype(propType);
+              }
+              objAlternate.defineInferredProperty(prop, typeToInfer, null);
+            }
+          }
+        }
+      }
+    } else {
+      // If the type to be inferred upon is a single object type (not a union).
+      ObjectType objType = ObjectType.cast(restrictedType);
+      if (objType != null && objType.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
+            JSType typeToInfer;
             if (!objType.hasProperty(prop)) {
               typeToInfer =
                   getNativeType(VOID_TYPE).getLeastSupertype(propType);
+            } else {
+              typeToInfer = objType.getPropertyType(prop).getLeastSupertype(propType);
             }
             objType.defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
     }
   }
