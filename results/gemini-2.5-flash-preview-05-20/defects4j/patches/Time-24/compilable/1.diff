diff --git a/tmp/c9782235-50c9-4ee7-8c99-40be59eb9b38_buggy.java b/tmp/ffc70685-3241-460b-8124-e7d579f3396b_fixed.java
index 99d6a44..851c78f 100644
--- a/tmp/c9782235-50c9-4ee7-8c99-40be59eb9b38_buggy.java
+++ b/tmp/ffc70685-3241-460b-8124-e7d579f3396b_fixed.java
@@ -1,58 +1,151 @@
     /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
+        // Fields are sorted by duration magnitude (largest first).
         sort(savedFields, count);
+
+        // This block handles cases where the first sorted field implies a default year is needed,
+        // typically when no year or weekyear is explicitly parsed.
+        // It recursively calls computeMillis after adding the default year.
         if (count > 0) {
-            // alter base year for parsing if first field is month or day
             DurationField months = DurationFieldType.months().getField(iChrono);
             DurationField days = DurationFieldType.days().getField(iChrono);
             DurationField first = savedFields[0].iField.getDurationField();
+            // This condition is true if 'first' is a field with duration between days and months (inclusive),
+            // e.g., week, day, hour, minute, second, millis.
+            // It suggests that no year or month field was the "largest" (first in sorted order).
             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
                 saveField(DateTimeFieldType.year(), iDefaultYear);
                 return computeMillis(resetFields, text);
             }
         }
 
         long millis = iMillis;
+
+        // Collect specific field types for special handling.
+        // This is crucial for handling ISO week-date ambiguities when combined with month/day.
+        SavedField yearField = null;
+        SavedField monthField = null;
+        SavedField dayField = null;
+        SavedField weekYearFld = null;
+        SavedField weekOfWeekYearFld = null;
+        SavedField dayOfWeekFld = null;
+
+        java.util.List<SavedField> simpleFields = new java.util.ArrayList<SavedField>();
+
+        for (int i = 0; i < count; i++) {
+            SavedField field = savedFields[i];
+            DateTimeFieldType type = field.iField.getType();
+            if (type == DateTimeFieldType.year()) {
+                yearField = field;
+            } else if (type == DateTimeFieldType.monthOfYear()) {
+                monthField = field;
+            } else if (type == DateTimeFieldType.dayOfMonth()) {
+                dayField = field;
+            } else if (type == DateTimeFieldType.weekyear()) {
+                weekYearFld = field;
+            } else if (type == DateTimeFieldType.weekOfWeekyear()) {
+                weekOfWeekYearFld = field;
+            } else if (type == DateTimeFieldType.dayOfWeek()) {
+                dayOfWeekFld = field;
+            } else {
+                simpleFields.add(field); // fields like hour, minute, second etc.
+            }
+        }
+        
+        // Prioritize ISO week-date fields if a weekyear (xxxx), weekOfWeekyear (ww), or dayOfWeek (e/E)
+        // was explicitly parsed. This addresses the common ambiguity when 'ww' interacts
+        // with 'MM' across year boundaries in the ISO week-date system.
+        if (weekYearFld != null || weekOfWeekYearFld != null || dayOfWeekFld != null) {
+            // Use current millis as a base, which might already contain time fields or a default year.
+            long tempMillis = millis;
+
+            // 1. Apply weekyear or calendar year first.
+            if (weekYearFld != null) {
+                tempMillis = weekYearFld.set(tempMillis, resetFields);
+            } else if (yearField != null) {
+                tempMillis = yearField.set(tempMillis, resetFields);
+            }
+            
+            // 2. Apply weekOfWeekyear. If not specified, default to week 1 if a year/weekyear is present.
+            if (weekOfWeekYearFld != null) {
+                tempMillis = weekOfWeekYearFld.set(tempMillis, resetFields);
+            } else {
+                // If weekyear or year was parsed, default week to 1 if not explicitly set.
+                if (weekYearFld != null || yearField != null) {
+                    tempMillis = iChrono.weekOfWeekyear().set(tempMillis, 1);
+                }
+            }
+
+            // 3. Apply dayOfWeek. If not specified, default to MONDAY if a year/weekyear/week is present.
+            if (dayOfWeekFld != null) {
+                tempMillis = dayOfWeekFld.set(tempMillis, resetFields);
+            } else {
+                // If weekyear/year/week are set, default day of week to MONDAY.
+                if (weekYearFld != null || yearField != null) { // This condition implicitly covers if weekOfWeekYearFld was used.
+                    tempMillis = iChrono.dayOfWeek().set(tempMillis, org.joda.time.DateTimeConstants.MONDAY);
+                }
+            }
+            
+            // 4. Apply month and day fields as adjustments to the established week-date.
+            // This order prevents month/day from incorrectly shifting the year.
+            if (monthField != null) {
+                tempMillis = monthField.set(tempMillis, resetFields);
+            }
+            if (dayField != null) {
+                tempMillis = dayField.set(tempMillis, resetFields);
+            }
+            
+            // 5. Finally, apply all other simple fields (hours, minutes, seconds, milliseconds).
+            // These fields were already sorted correctly by duration.
+            for (SavedField field : simpleFields) {
+                tempMillis = field.set(tempMillis, resetFields);
+            }
+            millis = tempMillis; // Update the final milliseconds
+        } else {
+            // If no week-related fields were explicitly parsed (i.e., not using xxxx-ww-e patterns),
+            // then apply all fields in their default sorted order (largest duration first).
             try {
                 for (int i = 0; i < count; i++) {
                     millis = savedFields[i].set(millis, resetFields);
                 }
             } catch (IllegalFieldValueException e) {
                 if (text != null) {
                     e.prependMessage("Cannot parse \"" + text + '"');
                 }
                 throw e;
             }
+        }
         
+        // Timezone offset handling (original logic)
         if (iZone == null) {
             millis -= iOffset;
         } else {
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
             if (offset != iZone.getOffset(millis)) {
                 String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
                 throw new IllegalArgumentException(message);
             }
         }
         
         return millis;
     }
\ No newline at end of file
