diff --git a/tmp/c91af077-a4f0-4a8c-9d84-c1307c4c0a49_buggy.java b/tmp/ca16d635-ca8c-400e-8bb9-e024c7a4e329_fixed.java
index 99d6a44..082cdb7 100644
--- a/tmp/c91af077-a4f0-4a8c-9d84-c1307c4c0a49_buggy.java
+++ b/tmp/ca16d635-ca8c-400e-8bb9-e024c7a4e329_fixed.java
@@ -1,58 +1,80 @@
     /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
         sort(savedFields, count);
+
+        // Check if any year-related field (year or weekyear) is present among the saved fields.
+        // If so, initialize 'millis' from epoch (0L) to avoid carrying over day-of-week/week-of-year
+        // properties from the iDefaultYear-based initial 'iMillis'. This provides a clean slate
+        // for absolute year setting.
+        boolean yearOrWeekyearPresent = false;
+        for (int i = 0; i < count; i++) {
+            DurationFieldType type = savedFields[i].iField.getDurationField().getType();
+            if (type == DurationFieldType.weekyears() || type == DurationFieldType.years()) {
+                yearOrWeekyearPresent = true;
+                break;
+            }
+        }
+
+        long millis = iMillis;
+        if (yearOrWeekyearPresent) {
+            millis = 0L; // Start from epoch (1970-01-01T00:00:00Z)
+        }
+
         if (count > 0) {
             // alter base year for parsing if first field is month or day
+            // This block handles cases where no year field is parsed, and a default year is needed.
+            // The 'yearOrWeekyearPresent' check above ensures that even if a default year is added
+            // here via saveField and recursive call, the subsequent call to computeMillis will
+            // initialize 'millis' from 0L, correctly applying the default year.
             DurationField months = DurationFieldType.months().getField(iChrono);
             DurationField days = DurationFieldType.days().getField(iChrono);
             DurationField first = savedFields[0].iField.getDurationField();
             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
                 saveField(DateTimeFieldType.year(), iDefaultYear);
                 return computeMillis(resetFields, text);
             }
         }
 
-        long millis = iMillis;
         try {
             for (int i = 0; i < count; i++) {
                 millis = savedFields[i].set(millis, resetFields);
             }
         } catch (IllegalFieldValueException e) {
             if (text != null) {
                 e.prependMessage("Cannot parse \"" + text + '"');
             }
             throw e;
         }
         
         if (iZone == null) {
             millis -= iOffset;
         } else {
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
             if (offset != iZone.getOffset(millis)) {
                 String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
                 throw new IllegalArgumentException(message);
             }
         }
         
         return millis;
     }
