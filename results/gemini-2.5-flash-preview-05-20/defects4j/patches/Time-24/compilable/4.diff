diff --git a/tmp/b549be7f-9f7a-43c2-8e58-06d36a401629_buggy.java b/tmp/734489ef-77c0-43cf-92f5-af87b837117f_fixed.java
index 99d6a44..618f881 100644
--- a/tmp/b549be7f-9f7a-43c2-8e58-06d36a401629_buggy.java
+++ b/tmp/734489ef-77c0-43cf-92f5-af87b837117f_fixed.java
@@ -1,58 +1,105 @@
     /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
-        sort(savedFields, count);
+        
+        // Joda-Time bug fix: When parsing patterns like "yyyy-MM-ww" or "xxxx-MM-ww",
+        // the interaction between 'year' (calendar year) and 'weekOfWeekyear'
+        // can lead to incorrect results. 'weekOfWeekyear' fields depend on the
+        // ISO week-year, but 'year' is a calendar year.
+        // If a week-based field (like weekOfWeekyear or dayOfWeek) is present,
+        // and a calendar 'year' was parsed, but no explicit 'weekyear' (xxxx) was parsed,
+        // then the calendar year should be interpreted as the ISO 'weekyear' for proper calculation.
+        
+        SavedField yearField = null; // Stores the SavedField object for DateTimeFieldType.year()
+        boolean hasWeekYearField = false; // True if DateTimeFieldType.weekyear() is present
+        boolean hasWeekBasedField = false; // True if DateTimeFieldType.weekOfWeekyear() or dayOfWeek() is present
+
+        for (int i = 0; i < count; i++) {
+            DateTimeFieldType fieldType = savedFields[i].iField.getType();
+            if (fieldType == DateTimeFieldType.year()) {
+                yearField = savedFields[i];
+            } else if (fieldType == DateTimeFieldType.weekyear()) {
+                hasWeekYearField = true;
+            } else if (fieldType == DateTimeFieldType.weekOfWeekyear() ||
+                       fieldType == DateTimeFieldType.dayOfWeek()) {
+                hasWeekBasedField = true;
+            }
+        }
+
+        // If a week-based field is present AND a calendar year was specified,
+        // BUT no explicit weekyear was specified (xxxx),
+        // then replace the calendar year field with a weekyear field using the same value.
+        // This forces week-based calculations to use the provided year as an ISO week-year.
+        if (hasWeekBasedField && yearField != null && !hasWeekYearField) {
+            for (int i = 0; i < count; i++) {
+                if (savedFields[i] == yearField) {
+                    // Replace the calendar year field with an ISO weekyear field
+                    savedFields[i] = new SavedField(
+                        DateTimeFieldType.weekyear().getField(iChrono),
+                        yearField.iValue
+                    );
+                    break; // Found and replaced, exit loop
+                }
+            }
+        }
+
+        sort(savedFields, count); // Re-sort the fields after potential modification, to ensure correct order
+        
         if (count > 0) {
             // alter base year for parsing if first field is month or day
+            // This block handles cases where no year/weekyear was specified in the pattern,
+            // defaulting the year. The logic above handles cases where a year IS specified.
             DurationField months = DurationFieldType.months().getField(iChrono);
             DurationField days = DurationFieldType.days().getField(iChrono);
             DurationField first = savedFields[0].iField.getDurationField();
             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
                 saveField(DateTimeFieldType.year(), iDefaultYear);
+                // Recursive call to reprocess with the default year now saved.
+                // This will re-sort and apply fields again.
                 return computeMillis(resetFields, text);
             }
         }
 
         long millis = iMillis;
         try {
             for (int i = 0; i < count; i++) {
                 millis = savedFields[i].set(millis, resetFields);
             }
         } catch (IllegalFieldValueException e) {
             if (text != null) {
                 e.prependMessage("Cannot parse \"" + text + '"');
             }
             throw e;
         }
         
         if (iZone == null) {
             millis -= iOffset;
         } else {
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
             if (offset != iZone.getOffset(millis)) {
                 String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
                 throw new IllegalArgumentException(message);
             }
         }
         
         return millis;
     }
\ No newline at end of file
