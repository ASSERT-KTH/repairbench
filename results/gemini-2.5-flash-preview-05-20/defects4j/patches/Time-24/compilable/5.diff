diff --git a/tmp/4eb13ada-f165-40a9-b8cb-c4787634a9b3_buggy.java b/tmp/65618ab9-b5ba-472e-9c42-540cb4c02ad0_fixed.java
index 99d6a44..8f7f7b7 100644
--- a/tmp/4eb13ada-f165-40a9-b8cb-c4787634a9b3_buggy.java
+++ b/tmp/65618ab9-b5ba-472e-9c42-540cb4c02ad0_fixed.java
@@ -1,58 +1,76 @@
     /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
         sort(savedFields, count);
+
+        // This block is a fix for Joda-Time issue #172, where mixing weekyear/weekOfWeekyear
+        // with monthOfYear leads to incorrect parsing results.
+        // If weekyear and monthOfYear are both present, the monthOfYear field is ignored
+        // as it conflicts with the weekyear/weekOfWeekyear system.
+        if (count > 0) {
+            if (savedFields[0].iField.getType() == DateTimeFieldType.weekyear() &&
+                count >= 2 && savedFields[1].iField.getType() == DateTimeFieldType.monthOfYear()) {
+                // Remove the month field and adjust count and savedFields array accordingly.
+                // The weekyear and weekOfWeekyear fields are sufficient to determine the date.
+                SavedField[] newSavedFields = new SavedField[count - 1];
+                System.arraycopy(savedFields, 0, newSavedFields, 0, 1); // Copy weekyear
+                System.arraycopy(savedFields, 2, newSavedFields, 1, count - 2); // Copy remaining fields after monthOfYear
+                savedFields = newSavedFields;
+                count--;
+            }
+        }
+
         if (count > 0) {
             // alter base year for parsing if first field is month or day
             DurationField months = DurationFieldType.months().getField(iChrono);
             DurationField days = DurationFieldType.days().getField(iChrono);
             DurationField first = savedFields[0].iField.getDurationField();
             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
                 saveField(DateTimeFieldType.year(), iDefaultYear);
                 return computeMillis(resetFields, text);
             }
         }
 
         long millis = iMillis;
         try {
             for (int i = 0; i < count; i++) {
                 millis = savedFields[i].set(millis, resetFields);
             }
         } catch (IllegalFieldValueException e) {
             if (text != null) {
                 e.prependMessage("Cannot parse \"" + text + '"');
             }
             throw e;
         }
         
         if (iZone == null) {
             millis -= iOffset;
         } else {
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
             if (offset != iZone.getOffset(millis)) {
                 String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
                 throw new IllegalArgumentException(message);
             }
         }
         
         return millis;
     }
\ No newline at end of file
