diff --git a/tmp/b84e6463-88e0-4a4b-87bc-f62c5b080f51_buggy.java b/tmp/ae21b7c0-5be6-4ad8-87f7-eb9c02081bf8_fixed.java
index 99d6a44..b7f6d36 100644
--- a/tmp/b84e6463-88e0-4a4b-87bc-f62c5b080f51_buggy.java
+++ b/tmp/ae21b7c0-5be6-4ad8-87f7-eb9c02081bf8_fixed.java
@@ -1,58 +1,72 @@
     /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
         sort(savedFields, count);
-        if (count > 0) {
-            // alter base year for parsing if first field is month or day
-            DurationField months = DurationFieldType.months().getField(iChrono);
-            DurationField days = DurationFieldType.days().getField(iChrono);
-            DurationField first = savedFields[0].iField.getDurationField();
-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
+
+        // Check if any year or weekyear field is already present among the saved fields.
+        boolean yearOrWeekyearPresent = false;
+        if (count > 0) { // Only check if there are fields to parse
+            for (int i = 0; i < count; i++) {
+                DateTimeFieldType fieldType = savedFields[i].iField.getType();
+                if (fieldType == DateTimeFieldType.year() ||
+                    fieldType == DateTimeFieldType.weekyear()) {
+                    yearOrWeekyearPresent = true;
+                    break;
+                }
+            }
+        }
+
+        // Apply default year if no explicit year or weekyear field was parsed,
+        // and there are other fields (like month, day, or week) that require a base year.
+        // The original condition (checking only the first sorted field's duration)
+        // was overly specific and led to issues when weekyear was present.
+        if (!yearOrWeekyearPresent && count > 0) {
+            // Save the default year and re-compute to ensure it's integrated correctly.
+            // This recursive call ensures the newly added year field is sorted and processed.
             saveField(DateTimeFieldType.year(), iDefaultYear);
             return computeMillis(resetFields, text);
         }
-        }
 
         long millis = iMillis;
         try {
             for (int i = 0; i < count; i++) {
                 millis = savedFields[i].set(millis, resetFields);
             }
         } catch (IllegalFieldValueException e) {
             if (text != null) {
                 e.prependMessage("Cannot parse \"" + text + '"');
             }
             throw e;
         }
         
         if (iZone == null) {
             millis -= iOffset;
         } else {
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
             if (offset != iZone.getOffset(millis)) {
                 String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
                 throw new IllegalArgumentException(message);
             }
         }
         
         return millis;
     }
\ No newline at end of file
