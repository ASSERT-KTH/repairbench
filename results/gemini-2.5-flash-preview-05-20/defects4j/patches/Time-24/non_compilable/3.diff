diff --git a/tmp/d74d1f7e-2c44-4d50-a739-a298321a9888_buggy.java b/tmp/47327914-0574-448b-8978-7d922351bddc_fixed.java
index 99d6a44..955b057 100644
--- a/tmp/d74d1f7e-2c44-4d50-a739-a298321a9888_buggy.java
+++ b/tmp/47327914-0574-448b-8978-7d922351bddc_fixed.java
@@ -1,58 +1,79 @@
     /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
         sort(savedFields, count);
+
+        // Check if a year (yyyy) or weekyear (xxxx) field has been explicitly provided in the pattern.
+        boolean hasYear = false;
+        boolean hasWeekyear = false;
+        for (int i = 0; i < count; i++) {
+            if (savedFields[i].iField.getFieldType() == DateTimeFieldType.year()) {
+                hasYear = true;
+            }
+            if (savedFields[i].iField.getFieldType() == DateTimeFieldType.weekyear()) {
+                hasWeekyear = true;
+            }
+        }
+
         if (count > 0) {
             // alter base year for parsing if first field is month or day
+            // This block is intended to provide a default year when the year field is
+            // not explicitly specified, but fields like month or day of month are.
+            // If 'year' or 'weekyear' has already been parsed, we should not
+            // apply the default year to avoid incorrect year calculations.
+            if (!hasYear && !hasWeekyear) { // Added condition to prevent default year when year/weekyear is present
                 DurationField months = DurationFieldType.months().getField(iChrono);
                 DurationField days = DurationFieldType.days().getField(iChrono);
                 DurationField first = savedFields[0].iField.getDurationField();
+                // Check if the first (smallest duration) field is 'day-like' or 'month-like'.
+                // (e.g., dayOfMonth, dayOfWeek, weekOfWeekyear, monthOfYear)
                 if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
                     saveField(DateTimeFieldType.year(), iDefaultYear);
                     return computeMillis(resetFields, text);
                 }
             }
+        }
 
         long millis = iMillis;
         try {
             for (int i = 0; i < count; i++) {
                 millis = savedFields[i].set(millis, resetFields);
             }
         } catch (IllegalFieldValueException e) {
             if (text != null) {
                 e.prependMessage("Cannot parse \"" + text + '"');
             }
             throw e;
         }
         
         if (iZone == null) {
             millis -= iOffset;
         } else {
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
             if (offset != iZone.getOffset(millis)) {
                 String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
                 throw new IllegalArgumentException(message);
             }
         }
         
         return millis;
     }
\ No newline at end of file
