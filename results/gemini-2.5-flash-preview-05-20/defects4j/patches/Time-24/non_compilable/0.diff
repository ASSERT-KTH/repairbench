diff --git a/tmp/75ff6b10-dc9f-4537-bd94-0776b8974558_buggy.java b/tmp/90cf92c2-e30a-493f-b0bf-15066248c704_fixed.java
index 99d6a44..a49fe38 100644
--- a/tmp/75ff6b10-dc9f-4537-bd94-0776b8974558_buggy.java
+++ b/tmp/90cf92c2-e30a-493f-b0bf-15066248c704_fixed.java
@@ -1,58 +1,81 @@
     /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
         sort(savedFields, count);
         if (count > 0) {
             // alter base year for parsing if first field is month or day
             DurationField months = DurationFieldType.months().getField(iChrono);
             DurationField days = DurationFieldType.days().getField(iChrono);
             DurationField first = savedFields[0].iField.getDurationField();
             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
                 saveField(DateTimeFieldType.year(), iDefaultYear);
                 return computeMillis(resetFields, text);
             }
         }
 
         long millis = iMillis;
+
+        // Check if weekyear, weekOfWeekyear, and monthOfYear are all present
+        boolean hasWeekYear = false;
+        boolean hasWeekOfWeekyear = false;
+        boolean hasMonthOfYear = false;
+
+        for (int i = 0; i < count; i++) {
+            DateTimeFieldType fieldType = savedFields[i].iField;
+            if (fieldType == DateTimeFieldType.weekyear()) {
+                hasWeekYear = true;
+            } else if (fieldType == DateTimeFieldType.weekOfWeekyear()) {
+                hasWeekOfWeekyear = true;
+            } else if (fieldType == DateTimeFieldType.monthOfYear()) {
+                hasMonthOfYear = true;
+            }
+        }
+        
         try {
             for (int i = 0; i < count; i++) {
+                // If weekyear and weekOfWeekyear are both present,
+                // and monthOfYear is also present, it's likely an ambiguity.
+                // Prioritize week-based fields by skipping monthOfYear in this specific case.
+                if (hasWeekYear && hasWeekOfWeekyear && savedFields[i].iField == DateTimeFieldType.monthOfYear()) {
+                    continue; 
+                }
                 millis = savedFields[i].set(millis, resetFields);
             }
         } catch (IllegalFieldValueException e) {
             if (text != null) {
                 e.prependMessage("Cannot parse \"" + text + '"');
             }
             throw e;
         }
         
         if (iZone == null) {
             millis -= iOffset;
         } else {
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
             if (offset != iZone.getOffset(millis)) {
                 String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
                 throw new IllegalArgumentException(message);
             }
         }
         
         return millis;
     }
