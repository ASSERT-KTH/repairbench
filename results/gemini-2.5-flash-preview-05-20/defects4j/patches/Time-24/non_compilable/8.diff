diff --git a/tmp/277bd31c-ec76-44f3-8671-e4d15abcce8e_buggy.java b/tmp/585f1308-746a-4f45-9295-1eeedbf104e9_fixed.java
index 99d6a44..84c7463 100644
--- a/tmp/277bd31c-ec76-44f3-8671-e4d15abcce8e_buggy.java
+++ b/tmp/585f1308-746a-4f45-9295-1eeedbf104e9_fixed.java
@@ -1,58 +1,98 @@
     /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
         sort(savedFields, count);
+
+        long initialMillis = iMillis; // This is the value from the constructor, potentially with iDefaultYear
+
+        boolean containsYearLikeField = false;
+        for (int i = 0; i < count; i++) {
+            DateTimeFieldType fieldType = savedFields[i].iField.getType();
+            if (fieldType == DateTimeFieldType.year() ||
+                fieldType == DateTimeFieldType.yearOfEra() ||
+                fieldType == DateTimeFieldType.yearOfCentury() ||
+                fieldType == DateTimeFieldType.weekyear()) {
+                containsYearLikeField = true;
+                break;
+            }
+        }
+
+        // If a year-like field (e.g., year, weekyear) was explicitly parsed,
+        // override the initial millis value which might have been set using iDefaultYear.
+        // Instead, start from a neutral year (1970) to allow the parsed year/weekyear field
+        // to properly set the year without interference from the default year.
+        // iDefaultMonth, iDefaultDay, etc. ensure that if month/day are not
+        // specified in the text, they still default to 1 as per bucket configuration.
+        if (containsYearLikeField) {
+            initialMillis = iChrono.getDateTimeMillis(
+                1970, // A neutral year (epoch year for most common chronologies)
+                iDefaultMonth, 
+                iDefaultDay,
+                iDefaultHour, 
+                iDefaultMinute,
+                iDefaultSecond,
+                iDefaultMillis
+            );
+        }
+
+        long millis = initialMillis;
+
+        // This block handles cases where no explicit year-like field was provided in the text
+        // (i.e., containsYearLikeField is false), and the first field parsed is a month or day.
+        // In such cases, the iDefaultYear must be explicitly applied.
         if (count > 0) {
-            // alter base year for parsing if first field is month or day
             DurationField months = DurationFieldType.months().getField(iChrono);
             DurationField days = DurationFieldType.days().getField(iChrono);
             DurationField first = savedFields[0].iField.getDurationField();
             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
+                // The current implementation of compareReverse makes this condition true
+                // if 'first' is a duration field between 'days' and 'months' (inclusive).
+                // If this condition is met and no year field was parsed, explicitly save
+                // the default year and recompute to ensure it's applied correctly.
                 saveField(DateTimeFieldType.year(), iDefaultYear);
                 return computeMillis(resetFields, text);
             }
         }
 
-        long millis = iMillis;
         try {
             for (int i = 0; i < count; i++) {
                 millis = savedFields[i].set(millis, resetFields);
             }
         } catch (IllegalFieldValueException e) {
             if (text != null) {
                 e.prependMessage("Cannot parse \"" + text + '"');
             }
             throw e;
         }
         
         if (iZone == null) {
             millis -= iOffset;
         } else {
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
             if (offset != iZone.getOffset(millis)) {
                 String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
                 throw new IllegalArgumentException(message);
             }
         }
         
         return millis;
     }
\ No newline at end of file
