diff --git a/tmp/8fee8e1a-e795-4b53-89aa-7f8cc9450d8c_buggy.java b/tmp/99566429-4801-4011-863a-ef589610c139_fixed.java
index 6b8185e..458c6bb 100644
--- a/tmp/8fee8e1a-e795-4b53-89aa-7f8cc9450d8c_buggy.java
+++ b/tmp/99566429-4801-4011-863a-ef589610c139_fixed.java
@@ -1,77 +1,84 @@
     // this method is ugly, and does a lot. but other breakups cause rescanning and stringbuilder generations
     static void escape(StringBuilder accum, String string, Document.OutputSettings out,
                        boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {
 
         boolean lastWasWhite = false;
         boolean reachedNonWhite = false;
         final EscapeMode escapeMode = out.escapeMode();
         final CharsetEncoder encoder = out.encoder();
         final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());
         final Map<Character, String> map = escapeMode.getMap();
         final int length = string.length();
 
         int codePoint;
         for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {
             codePoint = string.codePointAt(offset);
 
             if (normaliseWhite) {
                 if (StringUtil.isWhitespace(codePoint)) {
                     if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)
                         continue;
                     accum.append(' ');
                     lastWasWhite = true;
                     continue;
                 } else {
                     lastWasWhite = false;
                     reachedNonWhite = true;
                 }
             }
             // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):
             if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
                 final char c = (char) codePoint;
                 // html specific and required escapes:
                 switch (c) {
                     case '&':
                         accum.append("&amp;");
                         break;
-                    case 0xA0:
-                        if (escapeMode != EscapeMode.xhtml)
+                    case 0xA0: // non-breaking space
+                        if (escapeMode != EscapeMode.xhtml) {
+                            // In base or extended mode, always use &nbsp; if it's the specified entity.
+                            // The named entity &nbsp; is ASCII and will always be encodable.
                             accum.append("&nbsp;");
-                        else
+                        } else {
+                            // In xhtml mode, prefer the character if encodable, otherwise use numeric entity &#xa0;
+                            if (canEncode(coreCharset, c, encoder))
                                 accum.append(c);
+                            else
+                                accum.append("&#xa0;");
+                        }
                         break;
                     case '<':
                         if (!inAttribute)
                             accum.append("&lt;");
                         else
                             accum.append(c);
                         break;
                     case '>':
                         if (!inAttribute)
                             accum.append("&gt;");
                         else
                             accum.append(c);
                         break;
                     case '"':
                         if (inAttribute)
                             accum.append("&quot;");
                         else
                             accum.append(c);
                         break;
                     default:
                         if (canEncode(coreCharset, c, encoder))
                             accum.append(c);
                         else if (map.containsKey(c))
                             accum.append('&').append(map.get(c)).append(';');
                         else
                             accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
                 }
             } else {
                 final String c = new String(Character.toChars(codePoint));
                 if (encoder.canEncode(c)) // uses fallback encoder for simplicity
                     accum.append(c);
                 else
                     accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
             }
         }
     }
\ No newline at end of file
