diff --git a/tmp/040ebcf8-23af-42ef-addd-2d139adbf327_buggy.java b/tmp/1e56787c-fdee-4429-a578-cfd2320f7d1c_fixed.java
index b91f7de..c21fc1a 100644
--- a/tmp/040ebcf8-23af-42ef-addd-2d139adbf327_buggy.java
+++ b/tmp/1e56787c-fdee-4429-a578-cfd2320f7d1c_fixed.java
@@ -1,69 +1,85 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // To work-around some tar implementations that insert a leading NUL
+        // this method returns 0 if it detects a leading NUL since Commons Compress 1.4.
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
         // Trim all trailing NULs and spaces.
         // The ustar and POSIX tar specs require a trailing NUL or
         // space but some implementations use the extra digit for big
         // sizes/uids/gids ...
+        // The loop condition `start < end` ensures that `end - 1` is always a valid
+        // index within the `[start, original_end-1]` range being considered for trimming.
+        // The loop terminates when `end` becomes `start` (meaning all characters were trimmed)
+        // or when `buffer[end - 1]` is neither NUL nor space.
         byte trailer = buffer[end - 1];
         while (start < end && (trailer == 0 || trailer == ' ')) {
             end--;
+            // After decrementing `end`, if `end` is now equal to `start`,
+            // the loop condition `start < end` will become false, and the loop will exit.
+            // Therefore, `buffer[end - 1]` is only accessed when `end > start`, making it safe.
             trailer = buffer[end - 1];
         }
 
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
+            // An embedded NUL byte (0x00) is an invalid character within an octal number string.
+            // Trailing NULs (0x00) are handled by the trimming logic, and leading NULs (0x00)
+            // are handled by the initial check for buffer[start] == 0.
+            // Any NUL encountered here is an embedded NUL and should be treated as an error.
             if (currentByte == 0) {
-                break;
+                // The test case testParseOctalInvalid expects an IllegalArgumentException
+                // for embedded NULs (e.g., " 0\00007 ").
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, start, currentByte));
             }
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
\ No newline at end of file
