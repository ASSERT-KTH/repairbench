diff --git a/tmp/bd6bf516-9c3b-4469-a6d7-06f88d09cef3_buggy.java b/tmp/f88e641c-7236-4579-a19b-c0e23a0c2318_fixed.java
index b91f7de..04d4daa 100644
--- a/tmp/bd6bf516-9c3b-4469-a6d7-06f88d09cef3_buggy.java
+++ b/tmp/f88e641c-7236-4579-a19b-c0e23a0c2318_fixed.java
@@ -1,69 +1,78 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Handle a leading NUL as a special case, returning 0L as per documentation.
+        // This is to work around some tar implementations that insert a leading NUL.
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
         // Trim all trailing NULs and spaces.
         // The ustar and POSIX tar specs require a trailing NUL or
         // space but some implementations use the extra digit for big
         // sizes/uids/gids ...
+        // Ensure that 'end - 1' is always a valid index relative to 'start'.
+        // The loop condition 'start < end' ensures 'end' is at least 'start + 1'.
+        // So 'end - 1' is always at least 'start'.
         byte trailer = buffer[end - 1];
         while (start < end && (trailer == 0 || trailer == ' ')) {
             end--;
+            // Only update trailer if there are still characters to process.
+            // If end becomes equal to start, it means all characters were trimmed,
+            // and accessing buffer[end - 1] would be out of the logical range for current parsing.
+            if (start < end) {
                 trailer = buffer[end - 1];
             }
+        }
 
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
-            if (currentByte == 0) {
-                break;
-            }
             // CheckStyle:MagicNumber OFF
+            // NUL (0) and Space (32) bytes are less than '0' (48), so they will be caught here.
+            // This correctly throws IllegalArgumentException for embedded NULs and spaces.
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
