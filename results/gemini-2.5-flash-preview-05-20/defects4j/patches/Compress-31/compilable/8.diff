diff --git a/tmp/164561f4-4976-4ac2-8b09-b10c8736612b_buggy.java b/tmp/093e5560-05d5-4ea3-809e-21784a817a77_fixed.java
index b91f7de..bacee30 100644
--- a/tmp/164561f4-4976-4ac2-8b09-b10c8736612b_buggy.java
+++ b/tmp/093e5560-05d5-4ea3-809e-21784a817a77_fixed.java
@@ -1,69 +1,77 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Return 0 if the first byte is a NUL. This handles all-NUL fields and
+        // a specific tar implementation quirk mentioned in the Javadoc.
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
         // Trim all trailing NULs and spaces.
         // The ustar and POSIX tar specs require a trailing NUL or
         // space but some implementations use the extra digit for big
         // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
+        // Ensure that end - 1 doesn't go below start.
+        while (start < end) {
+            final byte trailer = buffer[end - 1];
+            if (trailer == 0 || trailer == ' ') {
                 end--;
-            trailer = buffer[end - 1];
+            } else {
+                break;
+            }
         }
 
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
-            if (currentByte == 0) {
-                break;
-            }
             // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+            // Valid octal digits are '0' through '7'.
+            // If we encounter a NUL byte at this point, it means it's an
+            // embedded NUL, which is an invalid character. Trailing NULs are
+            // already handled by the trimming loop above. Leading NULs are
+            // handled by the initial check.
+            if (currentByte < '0' || currentByte > '7' || currentByte == 0){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
\ No newline at end of file
