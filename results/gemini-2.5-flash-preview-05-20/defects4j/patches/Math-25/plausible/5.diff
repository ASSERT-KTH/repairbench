diff --git a/tmp/933c841c-08be-44cf-b7ef-63b8d7501b8c_buggy.java b/tmp/398ea497-6db4-4afc-8acc-967350c55f6e_fixed.java
index 940af3f..8a6e9f8 100644
--- a/tmp/933c841c-08be-44cf-b7ef-63b8d7501b8c_buggy.java
+++ b/tmp/398ea497-6db4-4afc-8acc-967350c55f6e_fixed.java
@@ -1,82 +1,99 @@
         /**
          * Estimate a first guess of the amplitude and angular frequency.
          * This method assumes that the {@link #sortObservations()} method
          * has been called previously.
          *
          * @throws ZeroException if the abscissa range is zero.
          * @throws MathIllegalStateException when the guessing procedure cannot
          * produce sensible results.
          */
         private void guessAOmega() {
             // initialize the sums for the linear model between the two integrals
             double sx2 = 0;
             double sy2 = 0;
             double sxy = 0;
             double sxz = 0;
             double syz = 0;
 
             double currentX = observations[0].getX();
             double currentY = observations[0].getY();
             double f2Integral = 0;
             double fPrime2Integral = 0;
             final double startX = currentX;
             for (int i = 1; i < observations.length; ++i) {
                 // one step forward
                 final double previousX = currentX;
                 final double previousY = currentY;
                 currentX = observations[i].getX();
                 currentY = observations[i].getY();
 
                 // update the integrals of f<sup>2</sup> and f'<sup>2</sup>
                 // considering a linear model for f (and therefore constant f')
                 final double dx = currentX - previousX;
                 final double dy = currentY - previousY;
                 final double f2StepIntegral =
                     dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
+                // Note: The method assumes sorted observations, implying dx > 0.
+                // If dx could be zero, a division by zero error or NaN would occur here.
                 final double fPrime2StepIntegral = dy * dy / dx;
 
                 final double x = currentX - startX;
                 f2Integral += f2StepIntegral;
                 fPrime2Integral += fPrime2StepIntegral;
 
                 sx2 += x * x;
                 sy2 += f2Integral * f2Integral;
                 sxy += x * f2Integral;
                 sxz += x * fPrime2Integral;
                 syz += f2Integral * fPrime2Integral;
             }
 
             // compute the amplitude and pulsation coefficients
             double c1 = sy2 * sxz - sxy * syz;
             double c2 = sxy * sxz - sx2 * syz;
             double c3 = sx2 * sy2 - sxy * sxy;
+
+            // If c1/c2 or c2/c3 would be negative, the square root would be imaginary.
+            // In such cases, we fall back to a simpler range-based estimation.
             if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
                 final int last = observations.length - 1;
                 // Range of the observations, assuming that the
                 // observations are sorted.
                 final double xRange = observations[last].getX() - observations[0].getX();
                 if (xRange == 0) {
-                    throw new ZeroException();
+                    throw new org.apache.commons.math3.exception.ZeroException();
                 }
                 omega = 2 * Math.PI / xRange;
 
                 double yMin = Double.POSITIVE_INFINITY;
                 double yMax = Double.NEGATIVE_INFINITY;
                 for (int i = 1; i < observations.length; ++i) {
                     final double y = observations[i].getY();
                     if (y < yMin) {
                         yMin = y;
                     }
                     if (y > yMax) {
                         yMax = y;
                     }
                 }
                 a = 0.5 * (yMax - yMin);
             } else {
                 // In some ill-conditioned cases (cf. MATH-844), the guesser
-                    // procedure cannot produce sensible results.
+                // procedure cannot produce sensible results even if c1/c2 and c2/c3 are non-negative.
+                // This typically happens if c1, c2, or c3 are very close to zero,
+                // leading to extremely large or undefined amplitude or angular frequency.
+                final double epsilon = 1.0e-10; // A reasonable small positive value for comparison
 
-                a = FastMath.sqrt(c1 / c2);
-                omega = FastMath.sqrt(c2 / c3);
+                if (org.apache.commons.math3.util.FastMath.abs(c1) < epsilon ||
+                    org.apache.commons.math3.util.FastMath.abs(c2) < epsilon ||
+                    org.apache.commons.math3.util.FastMath.abs(c3) < epsilon) {
+                    // Throw an exception as the guesser cannot produce sensible results.
+                    throw new org.apache.commons.math3.exception.MathIllegalStateException(
+                        new org.apache.commons.math3.exception.util.DummyLocalizable("no guess available"),
+                        observations.length); // observations.length provides context to the error message
+                }
+
+                a = org.apache.commons.math3.util.FastMath.sqrt(c1 / c2);
+                omega = org.apache.commons.math3.util.FastMath.sqrt(c2 / c3);
             }
         }
\ No newline at end of file
