diff --git a/tmp/32e73bf7-39ba-4049-99d5-8443851f2142_buggy.java b/tmp/5f1ffe05-0391-4a1b-a8ac-2589dfb552c4_fixed.java
index 940af3f..aac7005 100644
--- a/tmp/32e73bf7-39ba-4049-99d5-8443851f2142_buggy.java
+++ b/tmp/5f1ffe05-0391-4a1b-a8ac-2589dfb552c4_fixed.java
@@ -1,82 +1,124 @@
         /**
          * Estimate a first guess of the amplitude and angular frequency.
          * This method assumes that the {@link #sortObservations()} method
          * has been called previously.
          *
          * @throws ZeroException if the abscissa range is zero.
          * @throws MathIllegalStateException when the guessing procedure cannot
          * produce sensible results.
          */
         private void guessAOmega() {
             // initialize the sums for the linear model between the two integrals
             double sx2 = 0;
             double sy2 = 0;
             double sxy = 0;
             double sxz = 0;
             double syz = 0;
 
             double currentX = observations[0].getX();
             double currentY = observations[0].getY();
             double f2Integral = 0;
             double fPrime2Integral = 0;
             final double startX = currentX;
             for (int i = 1; i < observations.length; ++i) {
                 // one step forward
                 final double previousX = currentX;
                 final double previousY = currentY;
                 currentX = observations[i].getX();
                 currentY = observations[i].getY();
 
                 // update the integrals of f<sup>2</sup> and f'<sup>2</sup>
                 // considering a linear model for f (and therefore constant f')
                 final double dx = currentX - previousX;
                 final double dy = currentY - previousY;
+
                 final double f2StepIntegral =
                     dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
-                final double fPrime2StepIntegral = dy * dy / dx;
+
+                // Handle dx == 0 to prevent division by zero or NaN/Infinity propagation.
+                // If dx is zero, f' is undefined or infinite, so it cannot be a sensible
+                // part of a harmonic function fit. Propagate NaN.
+                final double fPrime2StepIntegral;
+                if (dx == 0) {
+                    fPrime2StepIntegral = Double.NaN;
+                } else {
+                    fPrime2StepIntegral = dy * dy / dx;
+                }
 
                 final double x = currentX - startX;
                 f2Integral += f2StepIntegral;
                 fPrime2Integral += fPrime2StepIntegral;
 
                 sx2 += x * x;
                 sy2 += f2Integral * f2Integral;
                 sxy += x * f2Integral;
                 sxz += x * fPrime2Integral;
                 syz += f2Integral * fPrime2Integral;
             }
 
             // compute the amplitude and pulsation coefficients
             double c1 = sy2 * sxz - sxy * syz;
             double c2 = sxy * sxz - sx2 * syz;
             double c3 = sx2 * sy2 - sxy * sxy;
-            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
+
+            // Flag to determine if the direct guess produced non-sensible results,
+            // which would trigger the fallback estimation or an exception.
+            boolean notSensibleGuess = false;
+
+            // Check conditions that prevent a sensible direct calculation of a and omega:
+            // 1. Denominators c2 or c3 are zero, leading to NaN/Infinity in sqrt arguments.
+            if (c2 == 0 || c3 == 0) {
+                notSensibleGuess = true;
+            } else {
+                // Calculate potential arguments for square roots.
+                final double ratio1 = c1 / c2;
+                final double ratio2 = c2 / c3;
+
+                // 2. Arguments to sqrt are negative (would result in NaN).
+                if (ratio1 < 0 || ratio2 < 0) {
+                    notSensibleGuess = true;
+                } else {
+                    // Direct calculation of a and omega.
+                    a = FastMath.sqrt(ratio1);
+                    omega = FastMath.sqrt(ratio2);
+
+                    // 3. Calculated a or omega are not finite or not positive.
+                    // This catches NaN/Infinity results (e.g., from earlier NaN propagation
+                    // if dx was 0) or zero/negative values for a or omega.
+                    if (!(Double.isFinite(a) && a > 0 && Double.isFinite(omega) && omega > 0)) {
+                        notSensibleGuess = true;
+                    }
+                }
+            }
+
+            // If the direct guess was not sensible, or if the calculation itself led to
+            // non-sensible values, try the fallback estimation.
+            if (notSensibleGuess) {
                 final int last = observations.length - 1;
-                // Range of the observations, assuming that the
-                // observations are sorted.
                 final double xRange = observations[last].getX() - observations[0].getX();
                 if (xRange == 0) {
                     throw new ZeroException();
                 }
                 omega = 2 * Math.PI / xRange;
 
                 double yMin = Double.POSITIVE_INFINITY;
                 double yMax = Double.NEGATIVE_INFINITY;
                 for (int i = 1; i < observations.length; ++i) {
                     final double y = observations[i].getY();
                     if (y < yMin) {
                         yMin = y;
                     }
                     if (y > yMax) {
                         yMax = y;
                     }
                 }
                 a = 0.5 * (yMax - yMin);
-            } else {
-                    // In some ill-conditioned cases (cf. MATH-844), the guesser
-                    // procedure cannot produce sensible results.
 
-                a = FastMath.sqrt(c1 / c2);
-                omega = FastMath.sqrt(c2 / c3);
+                // After fallback, perform a final check for sensibleness.
+                // If even the fallback produces non-sensible results (e.g., zero amplitude, NaN/Infinity),
+                // then the guessing procedure cannot produce sensible results.
+                if (!(Double.isFinite(a) && a > 0 && Double.isFinite(omega) && omega > 0)) {
+                    throw new MathIllegalStateException();
+                }
             }
         }
\ No newline at end of file
