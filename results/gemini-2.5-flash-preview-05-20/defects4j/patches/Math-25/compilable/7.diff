diff --git a/tmp/d7228ec9-32fd-4029-b176-002302ac4962_buggy.java b/tmp/2a73112d-a613-4c74-b5fc-671e9626ac8b_fixed.java
index 940af3f..3e9d6e7 100644
--- a/tmp/d7228ec9-32fd-4029-b176-002302ac4962_buggy.java
+++ b/tmp/2a73112d-a613-4c74-b5fc-671e9626ac8b_fixed.java
@@ -1,82 +1,82 @@
         /**
          * Estimate a first guess of the amplitude and angular frequency.
          * This method assumes that the {@link #sortObservations()} method
          * has been called previously.
          *
          * @throws ZeroException if the abscissa range is zero.
          * @throws MathIllegalStateException when the guessing procedure cannot
          * produce sensible results.
          */
         private void guessAOmega() {
             // initialize the sums for the linear model between the two integrals
             double sx2 = 0;
             double sy2 = 0;
             double sxy = 0;
             double sxz = 0;
             double syz = 0;
 
             double currentX = observations[0].getX();
             double currentY = observations[0].getY();
             double f2Integral = 0;
             double fPrime2Integral = 0;
             final double startX = currentX;
+
+            // Check for zero abscissa range early. If xRange is zero, all dx will be zero,
+            // leading to division by zero and NaN/Infinity in subsequent calculations,
+            // which should result in a more specific ZeroException.
+            final int last = observations.length - 1;
+            final double xRange = observations[last].getX() - observations[0].getX();
+            if (xRange == 0) {
+                throw new ZeroException();
+            }
+
             for (int i = 1; i < observations.length; ++i) {
                 // one step forward
                 final double previousX = currentX;
                 final double previousY = currentY;
                 currentX = observations[i].getX();
                 currentY = observations[i].getY();
 
                 // update the integrals of f<sup>2</sup> and f'<sup>2</sup>
                 // considering a linear model for f (and therefore constant f')
                 final double dx = currentX - previousX;
                 final double dy = currentY - previousY;
                 final double f2StepIntegral =
                     dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
+                // If dx is zero (but xRange is not, meaning it's an isolated vertical line segment),
+                // fPrime2StepIntegral can become Infinity or NaN, which will be caught later.
                 final double fPrime2StepIntegral = dy * dy / dx;
 
                 final double x = currentX - startX;
                 f2Integral += f2StepIntegral;
                 fPrime2Integral += fPrime2StepIntegral;
 
                 sx2 += x * x;
                 sy2 += f2Integral * f2Integral;
                 sxy += x * f2Integral;
                 sxz += x * fPrime2Integral;
                 syz += f2Integral * fPrime2Integral;
             }
 
             // compute the amplitude and pulsation coefficients
             double c1 = sy2 * sxz - sxy * syz;
             double c2 = sxy * sxz - sx2 * syz;
             double c3 = sx2 * sy2 - sxy * sxy;
-            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
-                final int last = observations.length - 1;
-                // Range of the observations, assuming that the
-                // observations are sorted.
-                final double xRange = observations[last].getX() - observations[0].getX();
-                if (xRange == 0) {
-                    throw new ZeroException();
-                }
-                omega = 2 * Math.PI / xRange;
 
-                double yMin = Double.POSITIVE_INFINITY;
-                double yMax = Double.NEGATIVE_INFINITY;
-                for (int i = 1; i < observations.length; ++i) {
-                    final double y = observations[i].getY();
-                    if (y < yMin) {
-                        yMin = y;
-                    }
-                    if (y > yMax) {
-                        yMax = y;
-                    }
-                }
-                a = 0.5 * (yMax - yMin);
-            } else {
             // In some ill-conditioned cases (cf. MATH-844), the guesser
-                    // procedure cannot produce sensible results.
+            // procedure cannot produce sensible results from the linear model.
+            // This occurs if the derived squared amplitude (c1/c2) or squared
+            // angular frequency (c2/c3) are negative (implying imaginary values),
+            // or if numerical issues like division by zero result in NaN/Infinity.
+            final double ratio1 = c1 / c2; // Represents a^2
+            final double ratio2 = c2 / c3; // Represents omega^2
 
-                a = FastMath.sqrt(c1 / c2);
-                omega = FastMath.sqrt(c2 / c3);
+            if (ratio1 < 0 || ratio2 < 0 || Double.isNaN(ratio1) || Double.isNaN(ratio2) || Double.isInfinite(ratio1) || Double.isInfinite(ratio2)) {
+                // If any of these conditions are met, the guessing procedure is not sensible.
+                throw new MathIllegalStateException();
+            } else {
+                // If the ratios are non-negative and finite, we can compute the amplitude and frequency.
+                a = FastMath.sqrt(ratio1);
+                omega = FastMath.sqrt(ratio2);
             }
         }
\ No newline at end of file
