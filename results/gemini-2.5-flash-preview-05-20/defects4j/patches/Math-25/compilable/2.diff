diff --git a/tmp/c4baadfc-11bd-4ed3-b935-df0873c18b29_buggy.java b/tmp/846898e7-028d-4551-84e7-48ed8aa79fc6_fixed.java
index 940af3f..480f8b2 100644
--- a/tmp/c4baadfc-11bd-4ed3-b935-df0873c18b29_buggy.java
+++ b/tmp/846898e7-028d-4551-84e7-48ed8aa79fc6_fixed.java
@@ -1,82 +1,81 @@
         /**
          * Estimate a first guess of the amplitude and angular frequency.
          * This method assumes that the {@link #sortObservations()} method
          * has been called previously.
          *
          * @throws ZeroException if the abscissa range is zero.
          * @throws MathIllegalStateException when the guessing procedure cannot
          * produce sensible results.
          */
         private void guessAOmega() {
+            // Check for insufficient data or zero abscissa range first.
+            // If observations.length is 0 or 1, xRange will be 0.
+            // A harmonic fit generally requires at least 3 points, but we'll stick to a minimum of 2 for range calculation.
+            if (observations.length < 2) {
+                // If there are fewer than 2 points, a range cannot be established or is zero.
+                // This covers cases where observations is empty or has only one point.
+                throw new ZeroException();
+            }
+
+            final int last = observations.length - 1;
+            final double xRange = observations[last].getX() - observations[0].getX();
+            if (xRange == 0) {
+                // If all X values are the same, the period cannot be determined.
+                // This also prevents potential division by zero (dx) if all dx are zero in the loop.
+                throw new ZeroException();
+            }
+
             // initialize the sums for the linear model between the two integrals
             double sx2 = 0;
             double sy2 = 0;
             double sxy = 0;
             double sxz = 0;
             double syz = 0;
 
             double currentX = observations[0].getX();
             double currentY = observations[0].getY();
             double f2Integral = 0;
             double fPrime2Integral = 0;
             final double startX = currentX;
             for (int i = 1; i < observations.length; ++i) {
                 // one step forward
                 final double previousX = currentX;
                 final double previousY = currentY;
                 currentX = observations[i].getX();
                 currentY = observations[i].getY();
 
                 // update the integrals of f<sup>2</sup> and f'<sup>2</sup>
                 // considering a linear model for f (and therefore constant f')
                 final double dx = currentX - previousX;
                 final double dy = currentY - previousY;
                 final double f2StepIntegral =
                     dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
                 final double fPrime2StepIntegral = dy * dy / dx;
 
                 final double x = currentX - startX;
                 f2Integral += f2StepIntegral;
                 fPrime2Integral += fPrime2StepIntegral;
 
                 sx2 += x * x;
                 sy2 += f2Integral * f2Integral;
                 sxy += x * f2Integral;
                 sxz += x * fPrime2Integral;
                 syz += f2Integral * fPrime2Integral;
             }
 
             // compute the amplitude and pulsation coefficients
             double c1 = sy2 * sxz - sxy * syz;
             double c2 = sxy * sxz - sx2 * syz;
             double c3 = sx2 * sy2 - sxy * sxy;
+
+            // In some ill-conditioned cases (cf. MATH-844), the guesser
+            // procedure cannot produce sensible results (i.e., arguments for sqrt are negative).
+            // This is the condition that should trigger a MathIllegalStateException.
             if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
-                final int last = observations.length - 1;
-                // Range of the observations, assuming that the
-                // observations are sorted.
-                final double xRange = observations[last].getX() - observations[0].getX();
-                if (xRange == 0) {
-                    throw new ZeroException();
-                }
-                omega = 2 * Math.PI / xRange;
-
-                double yMin = Double.POSITIVE_INFINITY;
-                double yMax = Double.NEGATIVE_INFINITY;
-                for (int i = 1; i < observations.length; ++i) {
-                    final double y = observations[i].getY();
-                    if (y < yMin) {
-                        yMin = y;
-                    }
-                    if (y > yMax) {
-                        yMax = y;
-                    }
-                }
-                a = 0.5 * (yMax - yMin);
+                throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS);
             } else {
-                    // In some ill-conditioned cases (cf. MATH-844), the guesser
-                    // procedure cannot produce sensible results.
-
+                // If arguments are non-negative, compute amplitude and angular frequency.
                 a = FastMath.sqrt(c1 / c2);
                 omega = FastMath.sqrt(c2 / c3);
             }
         }
\ No newline at end of file
