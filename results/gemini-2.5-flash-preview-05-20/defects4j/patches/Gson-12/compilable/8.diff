diff --git a/tmp/79e4f9a9-3568-4b7e-bf62-bea683d13ea8_buggy.java b/tmp/8d0072db-1b45-4f96-b9fc-28cfa9d72ac4_fixed.java
index 6e155da..a322961 100644
--- a/tmp/79e4f9a9-3568-4b7e-bf62-bea683d13ea8_buggy.java
+++ b/tmp/8d0072db-1b45-4f96-b9fc-28cfa9d72ac4_fixed.java
@@ -1,10 +1,50 @@
   @Override public void skipValue() throws IOException {
-    if (peek() == JsonToken.NAME) {
+    if (stackSize == 0) {
+      throw new IllegalStateException("JsonReader is closed");
+    }
+
+    JsonToken token = peek();
+
+    switch (token) {
+      case BEGIN_ARRAY:
+        beginArray(); // Consumes BEGIN_ARRAY, pushes array's iterator
+        while (hasNext()) { // Checks if array has more elements
+          skipValue(); // Recursively skips each element
+        }
+        endArray(); // Consumes END_ARRAY, pops array's iterator
+        break;
+
+      case BEGIN_OBJECT:
+        beginObject(); // Consumes BEGIN_OBJECT, pushes object's iterator
+        while (hasNext()) { // Checks if object has more entries
+          nextName(); // Consumes the name, updates pathNames, pushes value
+          skipValue(); // Recursively skips the value associated with the name
+        }
+        endObject(); // Consumes END_OBJECT, pops object's iterator
+        break;
+
+      case NAME:
+        // When peek() is NAME, it means we are at a key.
+        // nextName() consumes the key and pushes its value onto the stack.
+        // So, after nextName(), the value is at the top of the stack and needs to be skipped.
         nextName();
-      pathNames[stackSize - 2] = "null";
-    } else {
+        skipValue(); // Now skip the value that was pushed by nextName()
+        break;
+
+      case STRING:
+      case NUMBER:
+      case BOOLEAN:
+      case NULL:
+        // These are primitive values. Just pop them from the stack.
+        // The pathIndices update for the parent is handled consistently with other nextX() methods.
         popStack();
-        pathNames[stackSize - 1] = "null";
-    }
+        if (stackSize > 0) {
           pathIndices[stackSize - 1]++;
         }
+        break;
+
+      default:
+        // This case should ideally not be reached if peek() correctly covers all states.
+        throw new IllegalStateException("Expected a value or object/array, but was " + token);
+    }
+  }
\ No newline at end of file
