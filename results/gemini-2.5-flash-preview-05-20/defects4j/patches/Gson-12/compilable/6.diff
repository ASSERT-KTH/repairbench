diff --git a/tmp/ec2a3a6f-b55c-4c8f-9cc4-ad31207fcd8f_buggy.java b/tmp/b5dd9bf2-7d55-4021-a9e4-b0a0f612a67a_fixed.java
index 6e155da..30c2e98 100644
--- a/tmp/ec2a3a6f-b55c-4c8f-9cc4-ad31207fcd8f_buggy.java
+++ b/tmp/b5dd9bf2-7d55-4021-a9e4-b0a0f612a67a_fixed.java
@@ -1,10 +1,68 @@
   @Override public void skipValue() throws IOException {
+    // If the current token is NAME, we must consume the name to advance to its value.
     if (peek() == JsonToken.NAME) {
+      // nextName() consumes the NAME token and internally updates the stack
+      // so that the next peek() will return the token for the value associated with the name.
+      // It also correctly updates pathNames and pathIndices.
       nextName();
-      pathNames[stackSize - 2] = "null";
-    } else {
-      popStack();
-        pathNames[stackSize - 1] = "null";
     }
-      pathIndices[stackSize - 1]++;
+
+    // Now, the current token is the value (or BEGIN_OBJECT/BEGIN_ARRAY if we are at a container).
+    // We need to skip this value, which might be a complex nested structure.
+    // This requires a loop similar to JsonReader's skipValue to handle nested containers.
+    int count = 0; // Tracks the nesting level of unclosed arrays/objects we have entered.
+    do {
+      JsonToken token = peek();
+      switch (token) {
+        case BEGIN_ARRAY:
+        case BEGIN_OBJECT:
+          // For JsonTreeReader, `expect()` consumes the BEGIN token and replaces the
+          // container element on the stack with an iterator for its contents.
+          expect(token);
+          count++; // Increment count as we entered a new container
+          break;
+        case END_ARRAY:
+        case END_OBJECT:
+          // For JsonTreeReader, `endArray()` and `endObject()` consume the END token
+          // and call `popStack()` to move up the stack.
+          if (token == JsonToken.END_ARRAY) {
+            endArray();
+          } else { // JsonToken.END_OBJECT
+            endObject();
+          }
+          count--; // Decrement count as we exited a container
+          break;
+        case NAME:
+          // If we are inside an object (count > 0) and the next token is NAME,
+          // `nextName()` consumes the name and positions the reader at its value.
+          // The loop will then process that value.
+          nextName();
+          break;
+        case STRING:
+          nextString(); // Consumes the string value; popStack() is called if it's the last element.
+          break;
+        case NUMBER:
+          nextDouble(); // Consumes the number value; popStack() is called if it's the last element.
+          break;
+        case BOOLEAN:
+          nextBoolean(); // Consumes the boolean value; popStack() is called if it's the last element.
+          break;
+        case NULL:
+          nextNull(); // Consumes the null value; popStack() is called if it's the last element.
+          break;
+        case END_DOCUMENT:
+          // Should not happen if count is not 0, implies an unexpected end.
+          throw new IOException("Unexpected end of document");
+        default:
+          throw new AssertionError();
+      }
+    } while (count != 0); // Continue until all entered containers are closed.
+
+    // The original code contained problematic lines modifying pathNames and pathIndices directly
+    // after `popStack()` or `nextName()`. These arrays are managed by the `JsonTreeReader`'s
+    // internal methods (like `nextName()`, `popStack()`, `expect()`, `endArray()`, `endObject()`)
+    // which correctly update the path information as the reader advances.
+    // Removing these redundant and buggy lines prevents ArrayIndexOutOfBoundsException.
+    // For example, `pathNames[stackSize - 1] = "null";` would fail if `stackSize` became 0
+    // after `popStack()`.
   }
\ No newline at end of file
