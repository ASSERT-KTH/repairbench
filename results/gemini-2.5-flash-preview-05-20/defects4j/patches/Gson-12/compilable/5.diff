diff --git a/tmp/c9286ac8-2f52-41c9-af4a-702d595eefc7_buggy.java b/tmp/6ab19ad8-ac3c-4acd-b512-e363555eb341_fixed.java
index 6e155da..d2f3f06 100644
--- a/tmp/c9286ac8-2f52-41c9-af4a-702d595eefc7_buggy.java
+++ b/tmp/6ab19ad8-ac3c-4acd-b512-e363555eb341_fixed.java
@@ -1,10 +1,75 @@
   @Override public void skipValue() throws IOException {
-    if (peek() == JsonToken.NAME) {
-      nextName();
-      pathNames[stackSize - 2] = "null";
-    } else {
-      popStack();
-        pathNames[stackSize - 1] = "null";
-    }
-      pathIndices[stackSize - 1]++;
+    // Determine the type of the current token to be skipped.
+    JsonToken token = peek();
+
+    // The logic for skipping a value depends on its type:
+    // - For container types (BEGIN_ARRAY, BEGIN_OBJECT), we need to consume the container
+    //   and all its contents by recursively calling skipValue.
+    // - For NAME, we consume the name, and then the actual value associated with it.
+    // - For primitive types (STRING, NUMBER, BOOLEAN, NULL), we just consume the value itself.
+    // - END_ARRAY and END_OBJECT tokens should not be the direct target of a skipValue call,
+    //   as skipValue is typically called on actual values or names. These tokens are consumed
+    //   by `endArray()`/`endObject()` after a container has been fully processed.
+    // - END_DOCUMENT indicates no more tokens, so skipping is not possible.
+
+    switch (token) {
+      case BEGIN_ARRAY:
+        beginArray(); // Consume the opening bracket and set up array iteration
+        while (hasNext()) { // As long as there are elements in the array
+          skipValue(); // Recursively skip each element
+        }
+        endArray(); // Consume the closing bracket and clean up array iteration
+        break;
+
+      case BEGIN_OBJECT:
+        beginObject(); // Consume the opening brace and set up object entry iteration
+        while (hasNext()) { // As long as there are entries in the object
+          nextName(); // Consume the property name
+          skipValue(); // Recursively skip the value associated with the name
+        }
+        endObject(); // Consume the closing brace and clean up object iteration
+        break;
+
+      case NAME:
+        // A NAME token signifies a property name within an object.
+        // skipValue's purpose is to skip the *value* associated with this name.
+        nextName(); // Consume the name; this operation places the value onto the stack for subsequent peek/next calls.
+        // Now that the name is consumed, the "current" token is the value.
+        // Recursively call skipValue to skip this actual value.
+        skipValue();
+        break;
+
+      case STRING:
+        nextString(); // Consume the string value
+        break;
+
+      case NUMBER:
+        // For numbers, consuming it as a string is a safe way to advance past it.
+        // JsonTreeReader does not have a generic `next()` method like JsonReader.
+        nextString(); // This will work for numbers too, as it will return their string representation.
+        break;
+
+      case BOOLEAN:
+        nextBoolean(); // Consume the boolean value
+        break;
+
+      case NULL:
+        nextNull(); // Consume the null value
+        break;
+
+      case END_DOCUMENT:
+        // Attempting to skip a value when at the end of the document is an invalid operation.
+        throw new IllegalStateException("Unexpected " + token + " when skipping value" + locationString());
+
+      case END_ARRAY:
+      case END_OBJECT:
+        // These tokens should typically not be the direct target of a `skipValue` call.
+        // They are consumed by `endArray()`/`endObject()` after `while(hasNext())` loop finishes.
+        // If this case is reached, it indicates an issue with the reader's state or an incorrect call to skipValue.
+        throw new IllegalStateException("Unexpected " + token + " when skipping value" + locationString());
+
+      default:
+        // If an unexpected token is encountered, it indicates an issue with the reader's state or the JSON structure.
+        throw new AssertionError("Unknown token " + token);
+    }
   }
\ No newline at end of file
