diff --git a/tmp/e7c8a995-ee2b-4252-8ba8-3949b83eb3a9_buggy.java b/tmp/3aff2aa2-1774-4c77-80c8-5cca0672b7e2_fixed.java
index 6e155da..bead3ea 100644
--- a/tmp/e7c8a995-ee2b-4252-8ba8-3949b83eb3a9_buggy.java
+++ b/tmp/3aff2aa2-1774-4c77-80c8-5cca0672b7e2_fixed.java
@@ -1,10 +1,69 @@
   @Override public void skipValue() throws IOException {
-    if (peek() == JsonToken.NAME) {
+    // Determine the current token type.
+    // In JsonTreeReader, the peek() method itself might push state onto the stack
+    // (e.g., iterators for JsonObject/JsonArray) to prepare for reading their contents.
+    JsonToken token = peek();
+
+    // Based on the token type, consume the value appropriately.
+    switch (token) {
+      case BEGIN_ARRAY:
+        // For a JSON array, we need to consume the entire array.
+        // beginArray() processes the BEGIN_ARRAY token.
+        beginArray();
+        // Skip all elements within the array until END_ARRAY is encountered.
+        while (peek() != JsonToken.END_ARRAY) {
+          skipValue(); // Recursively skip each element
+        }
+        // endArray() processes the END_ARRAY token and pops the array's state from the stack.
+        endArray();
+        break;
+
+      case BEGIN_OBJECT:
+        // For a JSON object, we need to consume the entire object.
+        // beginObject() processes the BEGIN_OBJECT token.
+        beginObject();
+        // Skip all name-value pairs within the object until END_OBJECT is encountered.
+        while (peek() != JsonToken.END_OBJECT) {
+          // nextName() consumes the property name and sets up the stack to point to its value.
+          nextName();
+          // After consuming the name, recursively skip the associated value.
+          skipValue();
+        }
+        // endObject() processes the END_OBJECT token and pops the object's state from the stack.
+        endObject();
+        break;
+
+      case NAME:
+        // If the current token is a NAME (i.e., we are within an object and about to read a key),
+        // we first consume the name.
         nextName();
-      pathNames[stackSize - 2] = "null";
-    } else {
-      popStack();
-        pathNames[stackSize - 1] = "null";
+        // After nextName(), the value corresponding to that name is now at the top of the stack.
+        // We must then skip this value as well.
+        skipValue(); // Recursively skip the value
+        break;
+
+      // For primitive types (STRING, NUMBER, BOOLEAN, NULL),
+      // we simply call the corresponding nextX() method which consumes the value
+      // and handles stack manipulation and path updates internally, including array index bounds checks.
+      case STRING:
+        nextString();
+        break;
+      case NUMBER:
+        nextDouble(); // nextDouble() can consume any number type (int, long, double)
+        break;
+      case BOOLEAN:
+        nextBoolean();
+        break;
+      case NULL:
+        nextNull();
+        break;
+
+      // These tokens signify the end of a structure or document.
+      // If skipValue() is called when the current token is one of these, it usually indicates an error
+      // in the caller's logic or a state where there's nothing more to skip at this level.
+      case END_DOCUMENT:
+      case END_OBJECT:
+      case END_ARRAY:
+        throw new IllegalStateException("Unexpected token " + token + " when skipping.");
     }
-      pathIndices[stackSize - 1]++;
   }
