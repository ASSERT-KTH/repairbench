diff --git a/tmp/cd92d89b-833d-4816-af40-43fe4f459f5d_buggy.java b/tmp/84f82d81-0772-465e-b796-42688a970027_fixed.java
index 6e155da..5d508c5 100644
--- a/tmp/cd92d89b-833d-4816-af40-43fe4f459f5d_buggy.java
+++ b/tmp/84f82d81-0772-465e-b796-42688a970027_fixed.java
@@ -1,10 +1,56 @@
   @Override public void skipValue() throws IOException {
-    if (peek() == JsonToken.NAME) {
+    JsonToken token = peek();
+    switch (token) {
+      case NAME:
+        // Consumes the name, and pushes the corresponding value onto the stack.
+        // After nextName(), the reader is positioned at the value that needs to be skipped.
         nextName();
-      pathNames[stackSize - 2] = "null";
-    } else {
+        // Recursively skip the value that was just pushed.
+        skipValue();
+        break;
+      case BEGIN_ARRAY:
+        // Consumes the BEGIN_ARRAY token and pushes the array's iterator onto the stack.
+        beginArray();
+        // Skip all elements within the array.
+        while (hasNext()) {
+          skipValue(); // Recursively skip each element.
+        }
+        // Consumes the END_ARRAY token and pops the array's iterator from the stack.
+        endArray();
+        break;
+      case BEGIN_OBJECT:
+        // Consumes the BEGIN_OBJECT token and pushes the object's entrySet iterator onto the stack.
+        beginObject();
+        // Skip all name-value pairs within the object.
+        while (hasNext()) {
+          // Consumes the name and pushes the value onto the stack.
+          nextName();
+          // Recursively skip the value associated with the name.
+          skipValue();
+        }
+        // Consumes the END_OBJECT token and pops the object's entrySet iterator from the stack.
+        endObject();
+        break;
+      case STRING:
+      case NUMBER:
+      case BOOLEAN:
+      case NULL:
+        // For primitive values, simply pop them from the stack to consume them.
         popStack();
-        pathNames[stackSize - 1] = "null";
-    }
+        // After popping a value, if there's a parent element (an array or object),
+        // its index needs to be incremented to reflect that one of its children has been consumed.
+        // `stackSize` now refers to the parent's level, if a parent exists.
+        if (stackSize > 0) {
           pathIndices[stackSize - 1]++;
         }
+        break;
+      case END_DOCUMENT:
+        throw new IllegalStateException("Expected a value but was " + token + getPath());
+      case END_OBJECT: // Should not be peeking END_OBJECT when expecting a value
+      case END_ARRAY:  // Should not be peeking END_ARRAY when expecting a value
+        throw new IllegalStateException("Expected a value but was " + token + getPath());
+      default:
+        // This case should ideally not be reached if all JsonToken types are handled.
+        throw new AssertionError("Unknown JsonToken type: " + token);
+    }
+  }
\ No newline at end of file
