diff --git a/tmp/126cd438-719c-4cab-ba56-784a1e6d99db_buggy.java b/tmp/76617d3c-6439-4434-a48d-49f76e32672e_fixed.java
index 6e155da..70ee8a0 100644
--- a/tmp/126cd438-719c-4cab-ba56-784a1e6d99db_buggy.java
+++ b/tmp/76617d3c-6439-4434-a48d-49f76e32672e_fixed.java
@@ -1,10 +1,48 @@
   @Override public void skipValue() throws IOException {
-    if (peek() == JsonToken.NAME) {
+    int count = 0;
+    do {
+      JsonToken token = peek();
+      switch (token) {
+      case BEGIN_ARRAY:
+        beginArray();
+        count++;
+        break;
+      case BEGIN_OBJECT:
+        beginObject();
+        count++;
+        break;
+      case END_ARRAY:
+        endArray();
+        count--;
+        break;
+      case END_OBJECT:
+        endObject();
+        count--;
+        break;
+      case NAME:
         nextName();
-      pathNames[stackSize - 2] = "null";
-    } else {
-      popStack();
-        pathNames[stackSize - 1] = "null";
+        break;
+      case STRING:
+      case NUMBER:
+      case BOOLEAN:
+        // JsonTreeReader.nextString() is designed to handle primitive JsonPrimitive types
+        // (STRING, NUMBER, BOOLEAN) by calling their getAsString() method and popping them.
+        nextString();
+        break;
+      case NULL:
+        nextNull();
+        break;
+      case END_DOCUMENT:
+        // If END_DOCUMENT is reached and we are not inside any structure (count is 0),
+        // it means skipping is complete.
+        if (count == 0) {
+          return;
         }
-      pathIndices[stackSize - 1]++;
+        // Otherwise, encountering END_DOCUMENT prematurely while inside a structure is an error.
+        throw new IOException("Unexpected END_DOCUMENT token encountered while skipping value");
+      default:
+        // This case should ideally not be reached if all JsonTokens are covered.
+        throw new AssertionError("Unexpected token: " + token);
+      }
+    } while (count != 0); // Continue looping as long as we are inside an array or object
   }
\ No newline at end of file
