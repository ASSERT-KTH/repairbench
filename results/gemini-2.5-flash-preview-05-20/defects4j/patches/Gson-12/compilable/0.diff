diff --git a/tmp/8312c474-9cee-4efa-889c-5fe63e3cdd01_buggy.java b/tmp/1c849faf-1094-4c46-b96d-f1640b45616b_fixed.java
index 6e155da..ff96d8c 100644
--- a/tmp/8312c474-9cee-4efa-889c-5fe63e3cdd01_buggy.java
+++ b/tmp/1c849faf-1094-4c46-b96d-f1640b45616b_fixed.java
@@ -1,10 +1,49 @@
   @Override public void skipValue() throws IOException {
-    if (peek() == JsonToken.NAME) {
-      nextName();
-      pathNames[stackSize - 2] = "null";
-    } else {
+    JsonToken token = peek();
+    switch (token) {
+      case BEGIN_ARRAY:
+        beginArray();
+        while (peek() != JsonToken.END_ARRAY) {
+          skipValue(); // Recursively skip each element in the array
+        }
+        endArray();
+        // After processing the array's contents and its END_ARRAY token,
+        // the array element itself is still on the stack and needs to be popped.
+        popStack();
+        break;
+      case BEGIN_OBJECT:
+        beginObject();
+        while (peek() != JsonToken.END_OBJECT) {
+          nextName(); // Consumes the name (key)
+          skipValue(); // Recursively skip the value associated with the name
+        }
+        endObject();
+        // After processing the object's contents and its END_OBJECT token,
+        // the object element itself is still on the stack and needs to be popped.
         popStack();
-        pathNames[stackSize - 1] = "null";
+        break;
+      case NAME:
+        nextName(); // Consumes the name. The reader is now positioned at the value.
+        skipValue(); // Recursively skip the value associated with the name.
+        // The recursive call to skipValue() will handle popping the value from the stack.
+        break;
+      case STRING:
+      case NUMBER:
+      case BOOLEAN:
+      case NULL:
+        // These are primitive values. `nextString()` in JsonTreeReader correctly
+        // consumes them and internally calls `popStack()` to remove them from the stack.
+        nextString();
+        break;
+      case END_DOCUMENT:
+        throw new IllegalStateException("Unexpected END_DOCUMENT " + getPath());
+      case END_OBJECT:
+      case END_ARRAY:
+        // These tokens should only be encountered as delimiters within a loop (e.g.,
+        // `while (peek() != END_OBJECT)`). If `skipValue()` is called directly on them,
+        // it indicates an error in the calling logic as there's no 'value' to skip.
+        throw new IllegalStateException("Unexpected " + token + " " + getPath());
+      default:
+        throw new AssertionError();
     }
-      pathIndices[stackSize - 1]++;
   }
