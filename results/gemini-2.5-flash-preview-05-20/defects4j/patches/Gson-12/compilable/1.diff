diff --git a/tmp/174f0e88-1007-4cff-a774-9fe0f5c28439_buggy.java b/tmp/2edd9b99-5cef-4dad-97ce-f2e2ae1eb319_fixed.java
index 6e155da..0bc62ca 100644
--- a/tmp/174f0e88-1007-4cff-a774-9fe0f5c28439_buggy.java
+++ b/tmp/2edd9b99-5cef-4dad-97ce-f2e2ae1eb319_fixed.java
@@ -1,10 +1,61 @@
   @Override public void skipValue() throws IOException {
-    if (peek() == JsonToken.NAME) {
-      nextName();
+    // Save original peeked token to decide initial action
+    JsonToken initialToken = peek();
+
+    // If current token is a NAME, consume the name and then skip its value.
+    if (initialToken == JsonToken.NAME) {
+      nextName(); // Consumes the NAME token. The actual value is pushed onto the stack.
+      // The original code had pathNames[stackSize - 2] = "null"; here.
+      // This is for cleaning up the path name of the consumed key.
+      // Ensure stackSize is large enough for pathNames[stackSize - 2] to be a valid index.
+      // `stackSize - 2` means the index for the key within the parent object.
+      // If stackSize is 2 (e.g., first field of root object), then pathNames[0] is the key.
+      if (stackSize >= 2) {
         pathNames[stackSize - 2] = "null";
+      }
+      // After nextName(), the reader is positioned at the VALUE corresponding to the name.
+      // The rest of the method will now skip this VALUE.
+      initialToken = peek(); // Update the token to reflect the value's type.
+    }
+
+    // Now, `initialToken` represents the actual value to be skipped (could be primitive or container).
+    int count = 0;
+    if (initialToken == JsonToken.BEGIN_ARRAY) {
+      beginArray(); // Consumes BEGIN_ARRAY, pushes array iterator onto stack
+      count++;
+    } else if (initialToken == JsonToken.BEGIN_OBJECT) {
+      beginObject(); // Consumes BEGIN_OBJECT, pushes object entry set iterator onto stack
+      count++;
     } else {
-      popStack();
-        pathNames[stackSize - 1] = "null";
+      // It's a primitive value (STRING, NUMBER, BOOLEAN, NULL). Simply consume it.
+      popStack(); // Consumes the primitive value.
+    }
+
+    // If it was a container, iterate to skip its content.
+    while (count != 0) {
+      JsonToken currentTokenInLoop = peek();
+      if (currentTokenInLoop == JsonToken.END_ARRAY || currentTokenInLoop == JsonToken.END_OBJECT) {
+        popStack(); // Pop the iterator that represents the end of the container
+        count--;
+      } else if (currentTokenInLoop == JsonToken.NAME) {
+        nextName(); // Consume the NAME token, pushes its VALUE onto the stack.
+        // Clean up the path name for the key that was just consumed.
+        if (stackSize >= 2) {
+          pathNames[stackSize - 2] = "null";
+        }
+        // After nextName(), the VALUE is now at the top of the stack. Skip this value.
+        JsonToken valueToken = peek();
+        if (valueToken == JsonToken.BEGIN_ARRAY) {
+          beginArray();
+          count++;
+        } else if (valueToken == JsonToken.BEGIN_OBJECT) {
+          beginObject();
+          count++;
+        } else { // Primitive value
+          popStack(); // Consume the primitive value
+        }
+      } else { // Primitive value (STRING, NUMBER, BOOLEAN, NULL)
+        popStack(); // Consume the primitive value
+      }
     }
-      pathIndices[stackSize - 1]++;
   }
\ No newline at end of file
