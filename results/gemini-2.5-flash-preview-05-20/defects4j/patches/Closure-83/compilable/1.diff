diff --git a/tmp/65e254f6-5c0e-4b54-8c6a-5bd164f598ca_buggy.java b/tmp/7ed09593-a3bb-443c-b712-c70a573b01f2_fixed.java
index 072c672..d676ae5 100644
--- a/tmp/65e254f6-5c0e-4b54-8c6a-5bd164f598ca_buggy.java
+++ b/tmp/7ed09593-a3bb-443c-b712-c70a573b01f2_fixed.java
@@ -1,20 +1,33 @@
       @Override
       public int parseArguments(Parameters params) throws CmdLineException {
         String param = params.getParameter(0);
 
         if (param == null) {
+          // If no value is provided (e.g., --flag), it defaults to true.
+          // This option consumes 0 additional parameters.
           setter.addValue(true);
           return 0;
         } else {
+          // If a value is provided (e.g., --flag=value).
           String lowerParam = param.toLowerCase();
           if (TRUES.contains(lowerParam)) {
             setter.addValue(true);
           } else if (FALSES.contains(lowerParam)) {
             setter.addValue(false);
           } else {
+            // If the provided value is not recognized as true or false,
+            // default to true (consistent with the no-value case).
+            // The crucial part is to ensure the parameter is consumed.
             setter.addValue(true);
-            return 0;
+            // BUG FIX: The original code returned 0 here, which means 'param'
+            // (e.g., "unknown_value" from --flag=unknown_value) was left unconsumed
+            // by this option handler. This could lead to downstream parsing errors
+            // as the command-line parser would attempt to interpret "unknown_value"
+            // as another argument or flag.
+            // By always returning 1 when 'param' is not null, we ensure that the
+            // provided value, whether valid or not, is consumed by this handler.
           }
+          // In all cases where 'param' was not null, one parameter was consumed.
           return 1;
         }
       }
\ No newline at end of file
