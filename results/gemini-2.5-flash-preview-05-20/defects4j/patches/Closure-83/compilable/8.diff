diff --git a/tmp/47bd77e6-ed71-4000-8db0-3b5d1793726e_buggy.java b/tmp/9a411038-6941-4fe3-a510-078343f7dfdf_fixed.java
index 072c672..fce0914 100644
--- a/tmp/47bd77e6-ed71-4000-8db0-3b5d1793726e_buggy.java
+++ b/tmp/9a411038-6941-4fe3-a510-078343f7dfdf_fixed.java
@@ -1,20 +1,31 @@
       @Override
       public int parseArguments(Parameters params) throws CmdLineException {
         String param = params.getParameter(0);
 
         if (param == null) {
+          // If no explicit value is provided (e.g., --flag), it defaults to true.
+          // The return value indicates how many *subsequent* arguments were consumed.
+          // However, for a self-contained flag, returning 0 might cause the parser
+          // to get stuck or re-process the same flag, especially for flags that
+          // trigger immediate actions like --version.
+          // Returning 1 here signifies that the option itself was consumed,
+          // allowing the parser to advance.
           setter.addValue(true);
-          return 0;
+          return 1; // Changed from 0 to 1 to correctly consume the flag itself.
         } else {
           String lowerParam = param.toLowerCase();
           if (TRUES.contains(lowerParam)) {
             setter.addValue(true);
           } else if (FALSES.contains(lowerParam)) {
             setter.addValue(false);
           } else {
-            setter.addValue(true);
-            return 0;
+            // Bug fix: If a parameter is provided but it's not a valid boolean string
+            // ("true" or "false"), it should throw an exception instead of defaulting
+            // to true and not consuming the invalid parameter.
+            throw new CmdLineException(
+                "Invalid boolean value for option: " + param);
           }
+          // If a value (true/false) was explicitly provided, consume that argument.
           return 1;
         }
       }
\ No newline at end of file
