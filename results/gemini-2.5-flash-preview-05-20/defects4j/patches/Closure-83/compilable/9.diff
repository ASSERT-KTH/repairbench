diff --git a/tmp/d8ef3e58-3c4f-46dc-8b09-20ea090250c7_buggy.java b/tmp/2f8a5a1e-2e4a-421a-b41b-5d5bc91b20f7_fixed.java
index 072c672..280428c 100644
--- a/tmp/d8ef3e58-3c4f-46dc-8b09-20ea090250c7_buggy.java
+++ b/tmp/2f8a5a1e-2e4a-421a-b41b-5d5bc91b20f7_fixed.java
@@ -1,20 +1,30 @@
       @Override
       public int parseArguments(Parameters params) throws CmdLineException {
         String param = params.getParameter(0);
 
         if (param == null) {
+          // This case handles a boolean flag present without an explicit value,
+          // e.g., --verbose. It defaults to true.
           setter.addValue(true);
-          return 0;
+          return 0; // Consumes 0 additional arguments.
         } else {
+          // This case handles a boolean flag with an explicit value,
+          // e.g., --verbose=true or --verbose true.
           String lowerParam = param.toLowerCase();
           if (TRUES.contains(lowerParam)) {
             setter.addValue(true);
+            return 1; // Consumes 1 additional argument (the value).
           } else if (FALSES.contains(lowerParam)) {
             setter.addValue(false);
+            return 1; // Consumes 1 additional argument (the value).
           } else {
-            setter.addValue(true);
-            return 0;
+            // The 'param' is not null, but it's not a recognized "true" or "false" string.
+            // The original code was buggy here: it set the value to true but returned 0,
+            // which means 'param' was not consumed and would be re-processed or
+            // treated as a positional argument, leading to unexpected behavior.
+            // Correct behavior for an invalid explicit value is to throw an exception.
+            throw new CmdLineException(
+                "Invalid boolean value for option. Expected one of " + TRUES + " or " + FALSES + ", but got '" + param + "'.");
           }
-          return 1;
         }
       }
\ No newline at end of file
