diff --git a/tmp/652827c5-a111-4093-9a76-af3d896df834_buggy.java b/tmp/0a1b8a78-eb21-4cb0-9fe1-41a61a99949f_fixed.java
index 072c672..4a638b1 100644
--- a/tmp/652827c5-a111-4093-9a76-af3d896df834_buggy.java
+++ b/tmp/0a1b8a78-eb21-4cb0-9fe1-41a61a99949f_fixed.java
@@ -1,20 +1,30 @@
       @Override
       public int parseArguments(Parameters params) throws CmdLineException {
         String param = params.getParameter(0);
 
         if (param == null) {
+          // If no explicit value is provided (e.g., --flag), it's treated as true,
+          // and 0 additional parameters are consumed. This behavior is correct for a simple boolean flag.
           setter.addValue(true);
           return 0;
         } else {
           String lowerParam = param.toLowerCase();
           if (TRUES.contains(lowerParam)) {
             setter.addValue(true);
+            return 1; // Consumed 1 parameter (the 'true' value)
           } else if (FALSES.contains(lowerParam)) {
             setter.addValue(false);
+            return 1; // Consumed 1 parameter (the 'false' value)
           } else {
-            setter.addValue(true);
-            return 0;
+            // Original buggy behavior: setter.addValue(true); return 0;
+            // If 'param' was provided but is not a recognized boolean string,
+            // it indicates an attempt to provide a value.
+            // The original code defaulted to 'true' but failed to consume the parameter (returning 0).
+            // The fix is to ensure the parameter is consumed by returning 1.
+            // A more strict approach would be to throw CmdLineException for invalid values,
+            // but this fix maintains the original lenient 'default to true' behavior while correcting consumption.
+            setter.addValue(true); // Maintain original behavior of defaulting to true for unknown values
+            return 1; // FIX: Correctly consume the provided parameter.
           }
-          return 1;
         }
       }
\ No newline at end of file
