diff --git a/tmp/9a55c828-215a-403f-8c66-fb324a3ad5ec_buggy.java b/tmp/e3ac03e6-56ab-440e-b1df-1c729820c250_fixed.java
index 072c672..7163df8 100644
--- a/tmp/9a55c828-215a-403f-8c66-fb324a3ad5ec_buggy.java
+++ b/tmp/e3ac03e6-56ab-440e-b1df-1c729820c250_fixed.java
@@ -1,20 +1,31 @@
       @Override
       public int parseArguments(Parameters params) throws CmdLineException {
         String param = params.getParameter(0);
 
         if (param == null) {
+          // If no explicit argument is provided for the boolean flag (e.g., just --flag),
+          // it defaults to true, and no additional parameters are consumed.
           setter.addValue(true);
           return 0;
         } else {
           String lowerParam = param.toLowerCase();
           if (TRUES.contains(lowerParam)) {
+            // If the explicit argument is a 'true' string, set to true and consume 1 parameter.
             setter.addValue(true);
+            return 1;
           } else if (FALSES.contains(lowerParam)) {
+            // If the explicit argument is a 'false' string, set to false and consume 1 parameter.
             setter.addValue(false);
-          } else {
-            setter.addValue(true);
-            return 0;
-          }
             return 1;
+          } else {
+            // BUG FIX: Original code returned 0 here, but 'param' was present.
+            // This would leave 'param' unconsumed, leading to JCommander re-parsing it
+            // and potentially causing errors or misinterpretations.
+            // An invalid explicit value should throw an exception.
+            throw new CmdLineException(
+                "Invalid value for boolean option: '" + param + "'. " +
+                "Valid values are: " + String.join(", ", TRUES) + " or " +
+                String.join(", ", FALSES) + ".");
+          }
         }
       }
\ No newline at end of file
