diff --git a/tmp/33978010-6619-4e3a-9412-6e4617064ee3_buggy.java b/tmp/ce7e5d0a-2e72-4ce9-b6f0-5077d267813f_fixed.java
index 19fe1b4..177cc07 100644
--- a/tmp/33978010-6619-4e3a-9412-6e4617064ee3_buggy.java
+++ b/tmp/ce7e5d0a-2e72-4ce9-b6f0-5077d267813f_fixed.java
@@ -1,17 +1,75 @@
     public static boolean isJSIdentifier(String s) {
       int length = s.length();
 
-      if (length == 0 ||
-          !Character.isJavaIdentifierStart(s.charAt(0))) {
+      if (length == 0) {
         return false;
       }
 
+      // First character must be an IdentifierStart
+      if (!isJSIdentifierStart(s.charAt(0))) {
+        return false;
+      }
+
+      // Subsequent characters must be IdentifierPart
       for (int i = 1; i < length; i++) {
-        if (
-            !Character.isJavaIdentifierPart(s.charAt(i))) {
+        if (!isJSIdentifierPart(s.charAt(i))) {
           return false;
         }
       }
 
       return true;
     }
+
+    /**
+     * Checks if a character is a valid ECMAScript IdentifierStart.
+     * <p>
+     * According to ECMA-262, 5.1, Section 7.6, IdentifierStart includes:
+     * UnicodeLetter, $, or _.
+     * UnicodeLetter includes characters in Unicode categories:
+     * Lu (Uppercase letter), Ll (Lowercase letter), Lt (Titlecase letter),
+     * Lm (Modifier letter), Lo (Other letter), or Nl (Letter number).
+     *
+     * @param c The character to check.
+     * @return true if the character is a valid JavaScript identifier start character.
+     */
+    private static boolean isJSIdentifierStart(char c) {
+      if (c == '$' || c == '_') {
+        return true;
+      }
+      int type = Character.getType(c);
+      return type == Character.UPPERCASE_LETTER ||
+             type == Character.LOWERCASE_LETTER ||
+             type == Character.TITLECASE_LETTER ||
+             type == Character.MODIFIER_LETTER ||
+             type == Character.OTHER_LETTER ||
+             type == Character.LETTER_NUMBER; // Nl
+    }
+
+    /**
+     * Checks if a character is a valid ECMAScript IdentifierPart.
+     * <p>
+     * According to ECMA-262, 5.1, Section 7.6, IdentifierPart includes:
+     * IdentifierStart, UnicodeCombiningMark, UnicodeDigit,
+     * UnicodeConnectorPunctuation, ZWNJ (U+200C), or ZWJ (U+200D).
+     * <p>
+     * UnicodeDigit includes characters in Unicode category Nd (Decimal digit number).
+     * UnicodeCombiningMark includes characters in Unicode categories Mn (Nonspacing mark)
+     * or Mc (Spacing combining mark).
+     * UnicodeConnectorPunctuation includes characters in Unicode category Pc (Connector punctuation).
+     *
+     * @param c The character to check.
+     * @return true if the character is a valid JavaScript identifier part character.
+     */
+    private static boolean isJSIdentifierPart(char c) {
+      if (isJSIdentifierStart(c)) {
+        return true;
+      }
+      if (c == '\u200C' || c == '\u200D') { // ZWNJ (Zero Width Non-Joiner), ZWJ (Zero Width Joiner)
+        return true;
+      }
+      int type = Character.getType(c);
+      return type == Character.DECIMAL_DIGIT_NUMBER ||     // Nd
+             type == Character.NON_SPACING_MARK ||        // Mn
+             type == Character.COMBINING_SPACING_MARK ||  // Mc
+             type == Character.CONNECTOR_PUNCTUATION;     // Pc
+    }
\ No newline at end of file
