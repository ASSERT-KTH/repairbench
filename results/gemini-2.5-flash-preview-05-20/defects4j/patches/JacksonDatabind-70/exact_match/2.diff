diff --git a/tmp/745dd68d-78cb-49f9-9449-5b26571bab73_buggy.java b/tmp/abcf4f85-08f7-4ed2-aeb2-90f073782c83_fixed.java
index 0313249..9cab8ce 100644
--- a/tmp/745dd68d-78cb-49f9-9449-5b26571bab73_buggy.java
+++ b/tmp/abcf4f85-08f7-4ed2-aeb2-90f073782c83_fixed.java
@@ -1,32 +1,34 @@
     /**
      * Specialized method for removing specified existing entry.
      * NOTE: entry MUST exist, otherwise an exception is thrown.
      */
     public void remove(SettableBeanProperty propToRm)
     {
         ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
         String key = getPropertyName(propToRm);
         boolean found = false;
 
         for (int i = 1, end = _hashArea.length; i < end; i += 2) {
             SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
             if (prop == null) {
                 continue;
             }
             if (!found) {
                 // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
                 //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
+                // The name slot is at index (i-1) for the current property 'prop'.
+                // 'key' is also normalized (lowercased) by getPropertyName if case-insensitivity is enabled.
+                found = key.equals(_hashArea[i-1]);
                 if (found) {
                     // need to leave a hole here
                     _propsInOrder[_findFromOrdered(prop)] = null;
-                    continue;
+                    continue; // Skip adding the removed property to 'props'
                 }
             }
-            props.add(prop);
+            props.add(prop); // Add all other properties to the new list
         }
         if (!found) {
             throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
         }
         init(props);
     }
