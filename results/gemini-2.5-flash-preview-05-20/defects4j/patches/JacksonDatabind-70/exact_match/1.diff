diff --git a/tmp/e66c9038-3d26-4d86-9a11-ca3cb71835b2_buggy.java b/tmp/d88f05c0-32d3-4008-a4cb-874f56915adf_fixed.java
index 0313249..4455177 100644
--- a/tmp/e66c9038-3d26-4d86-9a11-ca3cb71835b2_buggy.java
+++ b/tmp/d88f05c0-32d3-4008-a4cb-874f56915adf_fixed.java
@@ -1,32 +1,41 @@
     /**
      * Specialized method for removing specified existing entry.
      * NOTE: entry MUST exist, otherwise an exception is thrown.
      */
     public void remove(SettableBeanProperty propToRm)
     {
         ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
+        // `getPropertyName` returns the normalized (e.g., lowercased) name if case-insensitive
+        // matching is enabled.
         String key = getPropertyName(propToRm);
         boolean found = false;
 
+        // Iterate through the internal hash area, which stores (name, property) pairs.
+        // `_hashArea[i-1]` is the name string, `_hashArea[i]` is the SettableBeanProperty.
         for (int i = 1, end = _hashArea.length; i < end; i += 2) {
             SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
             if (prop == null) {
                 continue;
             }
             if (!found) {
-                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
-                //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
+                // 09-Jan-2017, tatu: Important: must check name slot (_hashArea[i-1]) and NOT property name (prop.getName()),
+                //   as only the former is lower-cased when case-insensitive mode is enabled.
+                //   The property object itself retains its original name case.
+                found = key.equals(_hashArea[i-1]); // FIX: Compare against the normalized name stored in _hashArea[i-1]
                 if (found) {
-                    // need to leave a hole here
+                    // This property is the one to be removed.
+                    // Mark its slot in _propsInOrder as null to effectively remove it from iteration order.
                     _propsInOrder[_findFromOrdered(prop)] = null;
+                    // Do not add this property to `props` list, as it's being removed.
                     continue;
                 }
             }
+            // Add all other properties to the temporary list
             props.add(prop);
         }
         if (!found) {
             throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
         }
+        // Re-initialize the map with the remaining properties.
         init(props);
     }
\ No newline at end of file
