diff --git a/tmp/6ca03816-28c7-4f5a-845c-0d3d164d2cea_buggy.java b/tmp/3ff55a41-714c-41f5-a897-4143296fd138_fixed.java
index 0313249..85bc797 100644
--- a/tmp/6ca03816-28c7-4f5a-845c-0d3d164d2cea_buggy.java
+++ b/tmp/3ff55a41-714c-41f5-a897-4143296fd138_fixed.java
@@ -1,32 +1,43 @@
     /**
      * Specialized method for removing specified existing entry.
      * NOTE: entry MUST exist, otherwise an exception is thrown.
      */
     public void remove(SettableBeanProperty propToRm)
     {
         ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
+        // `key` should be the normalized name of the property to remove,
+        // consistent with how names are stored internally in `_hashArea`.
+        // `getPropertyName` already handles case-insensitivity if `_caseInsensitive` is true.
         String key = getPropertyName(propToRm);
         boolean found = false;
 
+        // The `_hashArea` stores entries as `[key_string, prop_object, key_string, prop_object, ...]`.
+        // The loop `for (int i = 1, end = _hashArea.length; i < end; i += 2)`
+        // means `_hashArea[i]` refers to the `SettableBeanProperty` object,
+        // and `_hashArea[i-1]` refers to the corresponding String key.
         for (int i = 1, end = _hashArea.length; i < end; i += 2) {
             SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
             if (prop == null) {
                 continue;
             }
             if (!found) {
                 // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
-                //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
+                //   as only former is lower-case in case-insensitive case.
+                // The "name slot" refers to the String key stored in `_hashArea[i-1]`,
+                // which is already normalized (e.g., lower-cased) if `_caseInsensitive` is true.
+                // `key` (from `propToRm`) is also normalized by `getPropertyName`.
+                // Therefore, comparing `key` directly with `_hashArea[i-1]` ensures the correct comparison.
+                found = key.equals(_hashArea[i-1]);
                 if (found) {
                     // need to leave a hole here
                     _propsInOrder[_findFromOrdered(prop)] = null;
                     continue;
                 }
             }
             props.add(prop);
         }
         if (!found) {
             throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
         }
         init(props);
     }
\ No newline at end of file
