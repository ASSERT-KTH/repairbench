diff --git a/tmp/a7c27c6e-4a41-420a-adad-2a611ca32fad_buggy.java b/tmp/27fa3c34-bb20-4373-81bd-d21f1a375292_fixed.java
index 0313249..6b2dce8 100644
--- a/tmp/a7c27c6e-4a41-420a-adad-2a611ca32fad_buggy.java
+++ b/tmp/27fa3c34-bb20-4373-81bd-d21f1a375292_fixed.java
@@ -1,32 +1,42 @@
     /**
      * Specialized method for removing specified existing entry.
      * NOTE: entry MUST exist, otherwise an exception is thrown.
      */
     public void remove(SettableBeanProperty propToRm)
     {
         ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
+        // The 'key' is typically the canonical (e.g., lower-cased) name of the property to remove,
+        // especially when case-insensitive properties are enabled.
         String key = getPropertyName(propToRm);
         boolean found = false;
 
         for (int i = 1, end = _hashArea.length; i < end; i += 2) {
             SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
             if (prop == null) {
                 continue;
             }
             if (!found) {
                 // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
-                //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
+                //   as only former is lower-case in case-insensitive case.
+                //
+                // The original code used `key.equals(prop.getName())`. However, in case-insensitive
+                // mode, `key` (from `getPropertyName`) is often lower-cased, but `prop.getName()`
+                // (from a stored property) might retain its original casing. This mismatch causes
+                // the `equals` check to fail, leading to `NoSuchElementException`.
+                //
+                // To correctly handle case-insensitive matching, the comparison itself must be
+                // case-insensitive.
+                found = key.equalsIgnoreCase(prop.getName());
                 if (found) {
                     // need to leave a hole here
                     _propsInOrder[_findFromOrdered(prop)] = null;
                     continue;
                 }
             }
             props.add(prop);
         }
         if (!found) {
             throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
         }
         init(props);
     }
\ No newline at end of file
