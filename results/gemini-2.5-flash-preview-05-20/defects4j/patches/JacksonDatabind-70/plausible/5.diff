diff --git a/tmp/e82c0bac-f22b-419c-b79a-ac9c3f2bb131_buggy.java b/tmp/bd15a200-7357-40f0-9f29-10a93a8d91b5_fixed.java
index 0313249..49b6cb5 100644
--- a/tmp/e82c0bac-f22b-419c-b79a-ac9c3f2bb131_buggy.java
+++ b/tmp/bd15a200-7357-40f0-9f29-10a93a8d91b5_fixed.java
@@ -1,32 +1,44 @@
     /**
      * Specialized method for removing specified existing entry.
      * NOTE: entry MUST exist, otherwise an exception is thrown.
      */
     public void remove(SettableBeanProperty propToRm)
     {
         ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
-        String key = getPropertyName(propToRm);
+        String key = getPropertyName(propToRm); // 'key' is already normalized (e.g., lowercased if _caseInsensitive)
         boolean found = false;
 
         for (int i = 1, end = _hashArea.length; i < end; i += 2) {
             SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
             if (prop == null) {
                 continue;
             }
             if (!found) {
                 // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
                 //   as only former is lower-case in case-insensitive case
+                //
+                // The problem is that 'key' is normalized (e.g., lowercased) if _caseInsensitive,
+                // but 'prop.getName()' returns the original name.
+                // So, the comparison itself must also be case-insensitive if _caseInsensitive is true.
+                if (_caseInsensitive) {
+                    found = key.equals(prop.getName().toLowerCase());
+                } else {
                     found = key.equals(prop.getName());
+                }
+
                 if (found) {
                     // need to leave a hole here
                     _propsInOrder[_findFromOrdered(prop)] = null;
+                    // Important: continue the loop after finding to ensure all other properties are re-added
+                    // to the 'props' list for re-initialization.
                     continue;
                 }
             }
+            // Add all properties except the one found to the new list
             props.add(prop);
         }
         if (!found) {
             throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
         }
         init(props);
     }
