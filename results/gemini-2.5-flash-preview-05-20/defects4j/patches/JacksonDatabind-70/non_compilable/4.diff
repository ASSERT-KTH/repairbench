diff --git a/tmp/88ebeefd-4989-42ac-9431-c80aa44192d1_buggy.java b/tmp/a95a3c04-099e-4f32-aacc-d7911aecb53b_fixed.java
index 0313249..0c5272e 100644
--- a/tmp/88ebeefd-4989-42ac-9431-c80aa44192d1_buggy.java
+++ b/tmp/a95a3c04-099e-4f32-aacc-d7911aecb53b_fixed.java
@@ -1,32 +1,56 @@
     /**
      * Specialized method for removing specified existing entry.
      * NOTE: entry MUST exist, otherwise an exception is thrown.
      */
     public void remove(SettableBeanProperty propToRm)
     {
         ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
+        // getPropertyName is a helper method (likely in BasicDeserializerFactory)
+        // that returns the property name, lowercased if ACCEPT_CASE_INSENSITIVE_PROPERTIES is enabled.
         String key = getPropertyName(propToRm);
         boolean found = false;
 
+        // This class (BucketProperties) is expected to have a '_config' field
+        // which holds the DeserializationConfig, used for feature checks.
+        boolean isCaseInsensitive = _config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);
+
         for (int i = 1, end = _hashArea.length; i < end; i += 2) {
             SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
             if (prop == null) {
                 continue;
             }
             if (!found) {
                 // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
                 //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
+                // The original comment was slightly misleading in the context of this bug.
+                // `prop.getName()` returns the original case name of the property stored in the hash area.
+                // `key` (from `getPropertyName(propToRm)`) is normalized (lowercased)
+                // if the `ACCEPT_CASE_INSENSITIVE_PROPERTIES` feature is enabled.
+                // Therefore, for a correct comparison when case-insensitive matching is active,
+                // `prop.getName()` must also be normalized to lowercase before comparison with `key`.
+                String currentPropName = prop.getName();
+                if (isCaseInsensitive) {
+                    found = key.equals(currentPropName.toLowerCase());
+                } else {
+                    found = key.equals(currentPropName);
+                }
+
                 if (found) {
-                    // need to leave a hole here
+                    // Property to be removed is found.
+                    // Set its corresponding entry in the ordered array to null to "leave a hole".
                     _propsInOrder[_findFromOrdered(prop)] = null;
+                    // Continue iterating to collect other properties that are not being removed.
                     continue;
                 }
             }
+            // If the property is not the one to be removed, add it to the temporary list.
             props.add(prop);
         }
         if (!found) {
+            // If the property was not found after iterating through all entries,
+            // throw an exception as per the method contract.
             throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
         }
+        // Re-initialize the internal hash structure with the collected properties (excluding the removed one).
         init(props);
     }
\ No newline at end of file
