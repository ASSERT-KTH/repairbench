diff --git a/tmp/b7c18d4e-9096-4eec-bb05-2e64d742f10b_buggy.java b/tmp/823f6918-0645-46a7-b816-3ddf8806de43_fixed.java
index 0313249..2442a96 100644
--- a/tmp/b7c18d4e-9096-4eec-bb05-2e64d742f10b_buggy.java
+++ b/tmp/823f6918-0645-46a7-b816-3ddf8806de43_fixed.java
@@ -1,32 +1,39 @@
     /**
      * Specialized method for removing specified existing entry.
      * NOTE: entry MUST exist, otherwise an exception is thrown.
      */
     public void remove(SettableBeanProperty propToRm)
     {
         ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
-        String key = getPropertyName(propToRm);
+        // Assuming `getPropertyName` refers to the internal `_propertyName` helper method
+        // which normalizes the property name (e.g., to lowercase if case-insensitive).
+        String key = _propertyName(propToRm); // Use the internal helper for consistency
         boolean found = false;
 
         for (int i = 1, end = _hashArea.length; i < end; i += 2) {
             SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
             if (prop == null) {
                 continue;
             }
             if (!found) {
                 // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
                 //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
+                // The `key` (name slot of `propToRm`) is already normalized (e.g., lowercased
+                // if case-insensitive mapping is enabled).
+                // `prop.getName()` returns the original name of the property, which is NOT normalized.
+                // To perform a correct comparison, the name of `prop` must also be normalized
+                // using the same logic (via `_propertyName` helper).
+                found = key.equals(_propertyName(prop)); // FIX: Normalize `prop.getName()` for comparison
                 if (found) {
                     // need to leave a hole here
                     _propsInOrder[_findFromOrdered(prop)] = null;
                     continue;
                 }
             }
             props.add(prop);
         }
         if (!found) {
             throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
         }
         init(props);
     }
\ No newline at end of file
