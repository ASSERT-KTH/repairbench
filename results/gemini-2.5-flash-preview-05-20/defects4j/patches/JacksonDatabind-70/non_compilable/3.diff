diff --git a/tmp/66b11289-612c-4d15-849a-71b5d01779e6_buggy.java b/tmp/35f48533-61cf-4d31-b78b-b758ab6625aa_fixed.java
index 0313249..1a337d5 100644
--- a/tmp/66b11289-612c-4d15-849a-71b5d01779e6_buggy.java
+++ b/tmp/35f48533-61cf-4d31-b78b-b758ab6625aa_fixed.java
@@ -1,32 +1,49 @@
     /**
      * Specialized method for removing specified existing entry.
      * NOTE: entry MUST exist, otherwise an exception is thrown.
      */
     public void remove(SettableBeanProperty propToRm)
     {
         ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
+        // 'key' will be lowercased if _caseInsensitiveKeys is true (via getPropertyName)
         String key = getPropertyName(propToRm);
         boolean found = false;
 
+        // Iterate through the hash area (which contains (int hash, SettableBeanProperty prop) pairs)
+        // 'i' starts at 1 to access the SettableBeanProperty objects at indices 1, 3, 5, ...
         for (int i = 1, end = _hashArea.length; i < end; i += 2) {
             SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
             if (prop == null) {
                 continue;
             }
             if (!found) {
                 // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
-                //   as only former is lower-case in case-insensitive case
+                //   as only former is lower-case in case-insensitive case.
+                // This comment implies that prop.getName() might return the original-cased
+                // name, even if case-insensitive matching is enabled.
+                // If _caseInsensitiveKeys is true, 'key' is already lowercased.
+                // Therefore, for a correct case-insensitive comparison, prop.getName()
+                // must also be lowercased.
+                if (_caseInsensitiveKeys) {
+                    found = key.equals(prop.getName().toLowerCase());
+                } else {
                     found = key.equals(prop.getName());
+                }
+
                 if (found) {
-                    // need to leave a hole here
+                    // Found the property to remove.
+                    // Mark its entry in _propsInOrder as null to indicate removal.
                     _propsInOrder[_findFromOrdered(prop)] = null;
+                    // Do not add the removed property to the temporary list 'props'.
                     continue;
                 }
             }
+            // Add all other properties to the temporary list 'props'.
             props.add(prop);
         }
         if (!found) {
             throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
         }
+        // Re-initialize the map with the remaining properties.
         init(props);
     }
\ No newline at end of file
