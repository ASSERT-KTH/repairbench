diff --git a/tmp/efd5496a-2c92-49bf-a255-e2e66e2fabda_buggy.java b/tmp/fde9c215-0a4d-4701-810b-6e2e4ad26b74_fixed.java
index 46817a7..7d3ffc3 100644
--- a/tmp/efd5496a-2c92-49bf-a255-e2e66e2fabda_buggy.java
+++ b/tmp/fde9c215-0a4d-4701-810b-6e2e4ad26b74_fixed.java
@@ -1,16 +1,24 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+
+    // If 'this' record is a subtype of 'that' record, then 'that' is the least supertype.
+    // Example: LUB({a: N, b: S}, {a: N}) -> {a: N} (since {a: N, b: S} is subtype of {a: N})
+    if (this.isSubtype(that)) {
+      return that;
     }
+
+    // If 'that' record is a subtype of 'this' record, then 'this' is the least supertype.
+    // Example: LUB({a: N}, {a: N, b: S}) -> {a: N} (since {a: N, b: S} is subtype of {a: N})
+    if (that.isSubtype(this)) {
+      return this;
     }
-    return builder.build();
+
+    // If neither is a subtype of the other, their least supertype is generally a union type.
+    // The previous implementation tried to find a common record structure by intersecting properties
+    // with equivalent types, which was incorrect for LUB. The tests confirm that for disparate
+    // record types, a union is expected.
+    return registry.createUnionType(this, that);
   }
\ No newline at end of file
