diff --git a/tmp/c5614ed6-350b-45b2-8c1e-12f932f17cfe_buggy.java b/tmp/8cfa8fb4-a82c-4d36-9da8-dc3500c7a94d_fixed.java
index 46817a7..3031628 100644
--- a/tmp/c5614ed6-350b-45b2-8c1e-12f932f17cfe_buggy.java
+++ b/tmp/8cfa8fb4-a82c-4d36-9da8-dc3500c7a94d_fixed.java
@@ -1,16 +1,31 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
+    // If 'that' is not a record type, delegate to the superclass which typically
+    // returns a UnionType of 'this' and 'that'.
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+
+    RecordType otherRecordType = that.toMaybeRecordType();
+
+    // Case 1: If 'this' record type is a subtype of 'that' record type,
+    // then 'that' is the least supertype.
+    // Example: this={a: number, b: string}, that={a: number}.
+    // Result: {a: number} (which is 'that').
+    if (this.isSubtype(otherRecordType)) {
+      return otherRecordType;
     }
+
+    // Case 2: If 'that' record type is a subtype of 'this' record type,
+    // then 'this' is the least supertype.
+    // Example: this={a: number}, that={a: number, b: string}.
+    // Result: {a: number} (which is 'this').
+    if (otherRecordType.isSubtype(this)) {
+      return this;
     }
-    return builder.build();
+
+    // Case 3: If there is no direct subtyping relationship between the two record types,
+    // the least supertype is typically their union. This aligns with the expectations
+    // of the failing tests.
+    return registry.createUnionType(this, that);
   }
\ No newline at end of file
