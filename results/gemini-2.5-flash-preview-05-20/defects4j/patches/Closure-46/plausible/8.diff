diff --git a/tmp/b892260f-3a78-4ab9-aebb-dbcc3bdd60b5_buggy.java b/tmp/a232d9c1-3b6c-4ace-bac8-8072f6cc0ac4_fixed.java
index 46817a7..9ee05e5 100644
--- a/tmp/b892260f-3a78-4ab9-aebb-dbcc3bdd60b5_buggy.java
+++ b/tmp/a232d9c1-3b6c-4ace-bac8-8072f6cc0ac4_fixed.java
@@ -1,16 +1,12 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
-    if (!that.isRecordType()) {
+    // The superclass implementation of JSType.getLeastSupertype already
+    // handles the various relationships between record types and other types
+    // correctly, including subtyping and creating union types where appropriate.
+    // The specific logic previously implemented for RecordType was incorrect
+    // as it created a new record type representing a restrictive intersection
+    // of equivalent properties, which is not the definition of the least supertype.
+    // By delegating to the superclass, we leverage the general and correct
+    // least supertype computation for all cases involving RecordTypes.
     return super.getLeastSupertype(that);
   }
\ No newline at end of file
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
-      }
-    }
-    return builder.build();
-  }
