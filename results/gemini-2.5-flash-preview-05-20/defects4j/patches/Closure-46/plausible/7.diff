diff --git a/tmp/b65f0b6b-3376-4e2f-b063-1f867f540069_buggy.java b/tmp/6aaf9ca4-1c5b-4d5d-8c4b-7a81a5205bb4_fixed.java
index 46817a7..383a6f6 100644
--- a/tmp/b65f0b6b-3376-4e2f-b063-1f867f540069_buggy.java
+++ b/tmp/6aaf9ca4-1c5b-4d5d-8c4b-7a81a5205bb4_fixed.java
@@ -1,16 +1,14 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
-    if (!that.isRecordType()) {
+    // The original implementation attempted to find a common record type
+    // by intersecting properties and requiring property types to be equivalent.
+    // However, the provided tests indicate that when two record types
+    // are compared for their least supertype, and neither is a subtype of the other,
+    // the expected result is a UnionType of the two original record types.
+    // This behavior is already provided by the JSType.getLeastSupertype method (the superclass).
+    // The JSType.getLeastSupertype method correctly handles cases where one type is
+    // a subtype of the other (returning the supertype), and otherwise creates a UnionType.
+    // By deferring to the superclass implementation, we ensure consistency with
+    // the test expectations for record type least supertype computation.
     return super.getLeastSupertype(that);
   }
\ No newline at end of file
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
-      }
-    }
-    return builder.build();
-  }
