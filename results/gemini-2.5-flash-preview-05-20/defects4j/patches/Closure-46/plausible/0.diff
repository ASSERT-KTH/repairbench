diff --git a/tmp/feead8b5-7be1-4630-bc47-387822b90361_buggy.java b/tmp/f6816c9f-0f65-46a6-a550-521e4a11af5b_fixed.java
index 46817a7..570cc4f 100644
--- a/tmp/feead8b5-7be1-4630-bc47-387822b90361_buggy.java
+++ b/tmp/f6816c9f-0f65-46a6-a550-521e4a11af5b_fixed.java
@@ -1,16 +1,30 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
+    // If 'that' is not a RecordType, delegate to the superclass implementation.
+    // This handles cases where 'that' is e.g., ObjectType, UnknownType, NoType,
+    // or a function/union/enum type.
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+
+    // Now we know 'that' is also a RecordType.
+    RecordType otherRecordType = that.toMaybeRecordType();
+
+    // Case 1: One record is a structural subtype of the other.
+    // If 'this' is a subtype of 'otherRecordType', then 'otherRecordType' is the LST.
+    // Example: {a: number, b: string} LST {a: number} should be {a: number}
+    if (this.isSubtype(otherRecordType)) {
+      return otherRecordType;
     }
+    // If 'otherRecordType' is a subtype of 'this', then 'this' is the LST.
+    // Example: {a: number} LST {a: number, b: string} should be {a: number}
+    if (otherRecordType.isSubtype(this)) {
+      return this;
     }
-    return builder.build();
+
+    // Case 2: Neither record is a structural subtype of the other.
+    // In this scenario, the least supertype is generally their union type.
+    // This handles cases where records have partially overlapping or disjoint properties.
+    // Example: {a: number, b: string} LST {b: string, c: number} should be ({a: number, b: string}|{b: string, c: number})
+    return registry.createUnionType(this, that);
   }
\ No newline at end of file
