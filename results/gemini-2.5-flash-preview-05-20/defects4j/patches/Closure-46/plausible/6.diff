diff --git a/tmp/5d3a94a0-d9b3-43b0-a0e9-533cbd5fcb32_buggy.java b/tmp/bb5904dd-9636-4e69-9072-21803c121a01_fixed.java
index 46817a7..cff8a0b 100644
--- a/tmp/5d3a94a0-d9b3-43b0-a0e9-533cbd5fcb32_buggy.java
+++ b/tmp/bb5904dd-9636-4e69-9072-21803c121a01_fixed.java
@@ -1,16 +1,33 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
+    // If 'that' is not a record type, delegate to the superclass implementation.
+    // This handles cases where 'this' is a RecordType but 'that' is another kind of JSType.
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+
+    // At this point, both 'this' (the current RecordType) and 'that' (the input JSType)
+    // are known to be RecordTypes.
+
+    // If 'this' is a subtype of 'that', then 'that' is the least general type that is a supertype of both.
+    // Example: this = {a: number, b: string}, that = {a: number}.
+    // Here, 'this' is a subtype of 'that' (as 'that' has fewer properties or more general property types).
+    // The least supertype of {a: number, b: string} and {a: number} is {a: number}.
+    if (this.isSubtype(that)) {
+      return that;
     }
+
+    // If 'that' is a subtype of 'this', then 'this' is the least general type that is a supertype of both.
+    // Example: this = {a: number}, that = {a: number, b: string}.
+    // Here, 'that' is a subtype of 'this'.
+    // The least supertype of {a: number} and {a: number, b: string} is {a: number}.
+    if (that.isSubtype(this)) {
+      return this;
     }
-    return builder.build();
+
+    // If neither type is a subtype of the other, they do not have a direct supertype-subtype relationship.
+    // In this case, the least common supertype is typically their union.
+    // Example: this = {a: number, b: string}, that = {d: number, e: string}.
+    // The least supertype is ({a: number, b: string}|{d: number, e: string}).
+    return registry.createUnionType(this, that);
   }
\ No newline at end of file
