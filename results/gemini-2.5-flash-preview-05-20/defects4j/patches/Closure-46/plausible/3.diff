diff --git a/tmp/4ecbfbf3-df18-4d99-9037-3c44657881da_buggy.java b/tmp/8a414a83-b0fe-475d-b884-e29acb0081df_fixed.java
index 46817a7..27312ba 100644
--- a/tmp/4ecbfbf3-df18-4d99-9037-3c44657881da_buggy.java
+++ b/tmp/8a414a83-b0fe-475d-b884-e29acb0081df_fixed.java
@@ -1,16 +1,32 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+
+    // Cast to RecordType for easier access to its methods.
+    RecordType otherRecordType = that.toMaybeRecordType();
+
+    // Rule 1: If 'this' record type is a subtype of 'that' record type,
+    // then 'that' is the least supertype.
+    // Example: this = {a: number, b: string}, that = {b: string}
+    // In this case, {b: string} is the least supertype.
+    if (this.isSubtype(otherRecordType)) {
+      return otherRecordType;
     }
+
+    // Rule 2: If 'that' record type is a subtype of 'this' record type,
+    // then 'this' is the least supertype.
+    // Example: this = {b: string}, that = {a: number, b: string}
+    // In this case, {b: string} is the least supertype.
+    if (otherRecordType.isSubtype(this)) {
+      return this;
     }
-    return builder.build();
+
+    // Rule 3: If neither record type is a subtype of the other (e.g.,
+    // they are unrelated or only partially overlapping without a direct
+    // subtyping relationship), the least supertype is a union of the two.
+    // Example: {a: number, b: string} and {e: number, b: string, c: string}
+    // The least supertype is ({a: number, b: string}|{e: number, b: string, c: string}).
+    return registry.createUnionType(this, otherRecordType);
   }
\ No newline at end of file
