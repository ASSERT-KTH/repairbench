diff --git a/tmp/25c23ef7-92c4-4979-a4c7-69596a6a0995_buggy.java b/tmp/22518c47-6bcc-4da8-b083-79690eaed3ec_fixed.java
index 46817a7..e0f284a 100644
--- a/tmp/25c23ef7-92c4-4979-a4c7-69596a6a0995_buggy.java
+++ b/tmp/22518c47-6bcc-4da8-b083-79690eaed3ec_fixed.java
@@ -1,16 +1,12 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
-    if (!that.isRecordType()) {
+    // The default implementation of getLeastSupertype in JSType correctly handles
+    // the cases where 'this' is a subtype of 'that', 'that' is a subtype of 'this',
+    // or when neither is a subtype of the other (by returning a UnionType).
+    // The custom logic previously present in this method for RecordType, which attempted
+    // to find common properties with equivalent types, was effectively calculating
+    // an "intersection" or "greatest common subtype" rather than the "least supertype".
+    // The provided test cases demonstrate that the expected least supertype for
+    // non-subtyping record types is a UnionType, which is handled by the superclass.
     return super.getLeastSupertype(that);
   }
\ No newline at end of file
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
-      }
-    }
-    return builder.build();
-  }
