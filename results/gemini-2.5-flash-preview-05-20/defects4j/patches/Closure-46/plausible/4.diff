diff --git a/tmp/74975f7f-3332-4f0a-97fd-6dbc70c2a750_buggy.java b/tmp/b369d3a9-1d39-407d-9c60-ac882ef98e64_fixed.java
index 46817a7..79e1a25 100644
--- a/tmp/74975f7f-3332-4f0a-97fd-6dbc70c2a750_buggy.java
+++ b/tmp/b369d3a9-1d39-407d-9c60-ac882ef98e64_fixed.java
@@ -1,16 +1,16 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
-    if (!that.isRecordType()) {
+    // The base JSType.getLeastSupertype method already provides the correct
+    // logic for determining the least supertype:
+    // 1. If 'this' is a subtype of 'that', 'that' is the least supertype.
+    // 2. If 'that' is a subtype of 'this', 'this' is the least supertype.
+    // 3. Otherwise (if they are unrelated by subtyping), their least common
+    //    supertype is typically represented as a UnionType of the two types.
+    //
+    // The original implementation for RecordType, when 'that' was also a RecordType,
+    // incorrectly computed an intersection of properties (a form of greatest subtype)
+    // rather than the least supertype expected by the tests (which was a UnionType).
+    // By deferring to the superclass implementation, we ensure consistent and
+    // correct behavior as per the test expectations.
     return super.getLeastSupertype(that);
   }
\ No newline at end of file
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
-      }
-    }
-    return builder.build();
-  }
