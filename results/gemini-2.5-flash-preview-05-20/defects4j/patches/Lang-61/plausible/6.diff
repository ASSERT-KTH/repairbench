diff --git a/tmp/9f0c5eb5-29a8-4539-8b8c-361512facca9_buggy.java b/tmp/5119d5b1-6655-485f-9324-57accfb6563c_fixed.java
index addeb8d..1bbe17c 100644
--- a/tmp/9f0c5eb5-29a8-4539-8b8c-361512facca9_buggy.java
+++ b/tmp/5119d5b1-6655-485f-9324-57accfb6563c_fixed.java
@@ -1,38 +1,82 @@
     /**
      * Searches the string builder to find the first reference to the specified
      * string starting searching from the given index.
      * <p>
      * Note that a null input string will return -1, whereas the JDK throws an exception.
      * 
      * @param str  the string to find, null returns -1
      * @param startIndex  the index to start at, invalid index rounded to edge
      * @return the first index of the string, or -1 if not found
      */
     public int indexOf(String str, int startIndex) {
+        // Adjust startIndex to be non-negative.
         startIndex = (startIndex < 0 ? 0 : startIndex);
-        if (str == null || startIndex >= size) {
+
+        // Handle null search string.
+        if (str == null) {
             return -1;
         }
+
         int strLen = str.length();
-        if (strLen == 1) {
-            return indexOf(str.charAt(0), startIndex);
-        }
+
+        // Handle empty search string.
+        // An empty string is always found at startIndex, even if startIndex is beyond the current content size.
+        // This matches JDK String.indexOf("", x) behavior which returns x.
         if (strLen == 0) {
             return startIndex;
         }
-        if (strLen > size) {
+
+        // At this point, str is not null and strLen > 0.
+
+        // If startIndex is beyond the current actual content size, no match is possible for a non-empty string.
+        if (startIndex >= size) {
             return -1;
         }
-        char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+        
+        // Optimization for single character search.
+        // Delegates to the existing indexOf(char, int) method, which is assumed to be correct.
+        if (strLen == 1) {
+            return indexOf(str.charAt(0), startIndex);
+        }
+        
+        // Calculate the maximum possible starting index within the StrBuilder's current content
+        // where 'str' could begin.
+        // If `size - strLen` is negative, it means 'str' is longer than the StrBuilder's content,
+        // so no match is possible.
+        int limit = size - strLen;
+
+        // If the calculated limit is negative (meaning strLen > size),
+        // or if the startIndex is already beyond this limit (meaning not enough characters remaining
+        // from startIndex to form 'str'), then 'str' cannot be found.
+        if (limit < 0 || startIndex > limit) {
+             return -1;
+        }
+
+        char[] thisBuf = buffer; // Get a reference to the internal character array.
+        
+        // Outer loop: Iterate through all possible starting positions 'i' for a match.
+        // 'i' ranges from 'startIndex' up to 'limit' (inclusive).
         outer:
-        for (int i = startIndex; i < len; i++) {
+        for (int i = startIndex; i <= limit; i++) {
+            // Inner loop: Compare characters of 'str' with the corresponding characters in 'thisBuf'
+            // starting from the current 'i'.
             for (int j = 0; j < strLen; j++) {
+                // If a character mismatch is found, this 'i' is not a match.
+                // Continue to the next possible starting position 'i' (using 'outer' label).
+                // The access thisBuf[i + j] is safe because:
+                // Max value of i is 'limit' which is 'size - strLen'.
+                // Max value of j is 'strLen - 1'.
+                // So, max index accessed is (size - strLen) + (strLen - 1) = size - 1.
+                // This index is always within the bounds of the active content [0, size-1],
+                // preventing ArrayIndexOutOfBoundsException.
                 if (str.charAt(j) != thisBuf[i + j]) {
                     continue outer;
                 }
             }
+            // If the inner loop completes, it means all characters of 'str' matched.
+            // Return the current starting index 'i'.
             return i;
         }
+        // If the outer loop completes without finding any match, return -1.
         return -1;
     }
\ No newline at end of file
