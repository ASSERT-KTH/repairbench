diff --git a/tmp/8c3feed6-e090-420e-a194-123decd46779_buggy.java b/tmp/9272c337-a7a1-4727-baf2-73f546aef069_fixed.java
index addeb8d..5744495 100644
--- a/tmp/8c3feed6-e090-420e-a194-123decd46779_buggy.java
+++ b/tmp/9272c337-a7a1-4727-baf2-73f546aef069_fixed.java
@@ -1,38 +1,50 @@
     /**
      * Searches the string builder to find the first reference to the specified
      * string starting searching from the given index.
      * <p>
      * Note that a null input string will return -1, whereas the JDK throws an exception.
      * 
      * @param str  the string to find, null returns -1
      * @param startIndex  the index to start at, invalid index rounded to edge
      * @return the first index of the string, or -1 if not found
      */
     public int indexOf(String str, int startIndex) {
         startIndex = (startIndex < 0 ? 0 : startIndex);
         if (str == null || startIndex >= size) {
             return -1;
         }
         int strLen = str.length();
         if (strLen == 1) {
             return indexOf(str.charAt(0), startIndex);
         }
         if (strLen == 0) {
             return startIndex;
         }
+        // If the string to find is longer than the content, it cannot be found.
         if (strLen > size) {
             return -1;
         }
+        
         char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+        
+        // Calculate the maximum possible starting index for a match.
+        // A match starting at 'i' with length 'strLen' must end at 'i + strLen - 1'.
+        // This last character must be within the valid content indices, i.e., 'i + strLen - 1 < size'.
+        // This implies 'i + strLen <= size', or 'i <= size - strLen'.
+        // So, the loop for 'i' should go up to 'size - strLen', inclusive.
+        int lastPossibleStart = size - strLen;
+        
         outer:
-        for (int i = startIndex; i < len; i++) {
+        for (int i = startIndex; i <= lastPossibleStart; i++) {
             for (int j = 0; j < strLen; j++) {
+                // The index 'i + j' will not exceed 'lastPossibleStart + strLen - 1',
+                // which is '(size - strLen) + strLen - 1 = size - 1'.
+                // This ensures array access is always within the valid 'size' bounds.
                 if (str.charAt(j) != thisBuf[i + j]) {
                     continue outer;
                 }
             }
             return i;
         }
         return -1;
     }
