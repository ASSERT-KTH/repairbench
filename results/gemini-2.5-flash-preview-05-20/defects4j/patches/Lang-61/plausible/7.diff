diff --git a/tmp/cde071d3-d7ab-490f-9a70-1d01a96f8072_buggy.java b/tmp/80583a51-8e78-40e8-96d1-8ad82e44f821_fixed.java
index addeb8d..9d6da48 100644
--- a/tmp/cde071d3-d7ab-490f-9a70-1d01a96f8072_buggy.java
+++ b/tmp/80583a51-8e78-40e8-96d1-8ad82e44f821_fixed.java
@@ -1,38 +1,63 @@
     /**
      * Searches the string builder to find the first reference to the specified
      * string starting searching from the given index.
      * <p>
      * Note that a null input string will return -1, whereas the JDK throws an exception.
      * 
      * @param str  the string to find, null returns -1
-     * @param startIndex  the index to start at, invalid index rounded to edge
+     * @param startIndex  the index to start at, invalid index clamped to 0, 
+     *                    or to size if searching for an empty string past the end.
      * @return the first index of the string, or -1 if not found
      */
     public int indexOf(String str, int startIndex) {
+        // Clamp startIndex to 0, as negative start indices are treated as 0
         startIndex = (startIndex < 0 ? 0 : startIndex);
-        if (str == null || startIndex >= size) {
+
+        if (str == null) {
             return -1;
         }
+
         int strLen = str.length();
-        if (strLen == 1) {
-            return indexOf(str.charAt(0), startIndex);
-        }
+
+        // Handle empty string search.
+        // An empty string is always found at any valid startIndex.
+        // If startIndex is beyond the current content (size), it's found at 'size'.
         if (strLen == 0) {
-            return startIndex;
+            return (startIndex > size ? size : startIndex);
         }
+
+        // For non-empty string search:
+        // If startIndex is at or beyond the current content (size), no match is possible.
+        if (startIndex >= size) {
+            return -1;
+        }
+
+        // If the string to find is longer than the StrBuilder's current content, no match is possible.
         if (strLen > size) {
             return -1;
         }
+
+        // Optimization for single character search
+        if (strLen == 1) {
+            return indexOf(str.charAt(0), startIndex);
+        }
+        
         char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+        // The maximum possible starting index for a match.
+        // If a match starts at this index, its last character is at (size - strLen) + strLen - 1 = size - 1,
+        // which is the last valid character in the StrBuilder's content.
+        int maxSearchIndex = size - strLen;
+
         outer:
-        for (int i = startIndex; i < len; i++) {
+        // Iterate from startIndex up to and including maxSearchIndex
+        for (int i = startIndex; i <= maxSearchIndex; i++) {
+            // Check if the substring of thisBuf starting at i matches str
             for (int j = 0; j < strLen; j++) {
                 if (str.charAt(j) != thisBuf[i + j]) {
-                    continue outer;
+                    continue outer; // Mismatch, try next starting position
                 }
             }
-            return i;
+            return i; // Full match found
         }
-        return -1;
+        return -1; // No match found
     }
\ No newline at end of file
