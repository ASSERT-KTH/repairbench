diff --git a/tmp/7bfd1f00-322f-49b5-9a7a-26e6b5e36d4b_buggy.java b/tmp/672c8a8b-e9c9-400a-933b-985ca3e82d84_fixed.java
index addeb8d..9c55e74 100644
--- a/tmp/7bfd1f00-322f-49b5-9a7a-26e6b5e36d4b_buggy.java
+++ b/tmp/672c8a8b-e9c9-400a-933b-985ca3e82d84_fixed.java
@@ -1,38 +1,55 @@
     /**
      * Searches the string builder to find the first reference to the specified
      * string starting searching from the given index.
      * <p>
      * Note that a null input string will return -1, whereas the JDK throws an exception.
      * 
      * @param str  the string to find, null returns -1
      * @param startIndex  the index to start at, invalid index rounded to edge
      * @return the first index of the string, or -1 if not found
      */
     public int indexOf(String str, int startIndex) {
         startIndex = (startIndex < 0 ? 0 : startIndex);
-        if (str == null || startIndex >= size) {
+        
+        if (str == null) { // Handle null string explicitly as per Javadoc
             return -1;
         }
+
         int strLen = str.length();
-        if (strLen == 1) {
+
+        if (strLen == 1) { // Optimization for single character search
             return indexOf(str.charAt(0), startIndex);
         }
-        if (strLen == 0) {
+        
+        if (strLen == 0) { // Empty string is always found at startIndex, consistent with JDK String.indexOf
             return startIndex;
         }
+
+        // If startIndex is at or beyond the current content size, a non-empty string cannot be found.
+        if (startIndex >= size) {
+            return -1;
+        }
+        
+        // If the string to find is longer than the actual content, it cannot be found.
         if (strLen > size) {
             return -1;
         }
+
         char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+        
+        // The maximum possible starting index for a match is 'size - strLen'.
+        // If the string starts at this index, its last character will be at (size - strLen) + (strLen - 1) = size - 1,
+        // which is the last valid index within the content.
+        int searchLimit = size - strLen;
+
         outer:
-        for (int i = startIndex; i < len; i++) {
+        for (int i = startIndex; i <= searchLimit; i++) { // Loop up to searchLimit (inclusive)
             for (int j = 0; j < strLen; j++) {
                 if (str.charAt(j) != thisBuf[i + j]) {
-                    continue outer;
+                    continue outer; // Mismatch, try next starting position
                 }
             }
-            return i;
+            return i; // All characters matched, return current starting index
         }
-        return -1;
+        return -1; // No match found
     }
