diff --git a/tmp/32631d0c-e6e2-4b3f-b429-4f5a73ef7b6f_buggy.java b/tmp/67235a25-51d6-4201-a11f-bf44c52f809c_fixed.java
index addeb8d..6160cdb 100644
--- a/tmp/32631d0c-e6e2-4b3f-b429-4f5a73ef7b6f_buggy.java
+++ b/tmp/67235a25-51d6-4201-a11f-bf44c52f809c_fixed.java
@@ -1,38 +1,51 @@
     /**
      * Searches the string builder to find the first reference to the specified
      * string starting searching from the given index.
      * <p>
      * Note that a null input string will return -1, whereas the JDK throws an exception.
      * 
      * @param str  the string to find, null returns -1
      * @param startIndex  the index to start at, invalid index rounded to edge
      * @return the first index of the string, or -1 if not found
      */
     public int indexOf(String str, int startIndex) {
         startIndex = (startIndex < 0 ? 0 : startIndex);
         if (str == null || startIndex >= size) {
             return -1;
         }
         int strLen = str.length();
         if (strLen == 1) {
             return indexOf(str.charAt(0), startIndex);
         }
         if (strLen == 0) {
             return startIndex;
         }
+        // If the search string is longer than the current content size, it cannot be found.
         if (strLen > size) {
             return -1;
         }
         char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+        
+        // The original code calculated 'len' based on 'thisBuf.length' (buffer capacity),
+        // instead of 'size' (actual content length). This could lead to
+        // ArrayIndexOutOfBoundsException when 'i + j' accesses beyond 'size'.
+        // The loop limit should be based on the actual content size, 'size'.
+        // The last possible starting index for a match is 'size - strLen'.
+        // Any starting index 'i' beyond this would mean the string 'str' extends
+        // beyond the valid content of the StrBuilder.
+        int lastPossibleStart = size - strLen;
+        
         outer:
-        for (int i = startIndex; i < len; i++) {
+        // The loop should iterate from startIndex up to and including lastPossibleStart.
+        // If startIndex is already beyond lastPossibleStart, the loop won't execute,
+        // which is correct as no match can be found.
+        for (int i = startIndex; i <= lastPossibleStart; i++) {
             for (int j = 0; j < strLen; j++) {
                 if (str.charAt(j) != thisBuf[i + j]) {
                     continue outer;
                 }
             }
             return i;
         }
         return -1;
     }
\ No newline at end of file
