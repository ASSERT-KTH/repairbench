diff --git a/tmp/78fc6f29-d55b-45c6-ad3f-02e1ecd01b35_buggy.java b/tmp/66d50c78-44e8-4c23-97e3-cf7cd0e4b608_fixed.java
index addeb8d..ebe06b4 100644
--- a/tmp/78fc6f29-d55b-45c6-ad3f-02e1ecd01b35_buggy.java
+++ b/tmp/66d50c78-44e8-4c23-97e3-cf7cd0e4b608_fixed.java
@@ -1,38 +1,50 @@
     /**
      * Searches the string builder to find the first reference to the specified
      * string starting searching from the given index.
      * <p>
      * Note that a null input string will return -1, whereas the JDK throws an exception.
      * 
      * @param str  the string to find, null returns -1
      * @param startIndex  the index to start at, invalid index rounded to edge
      * @return the first index of the string, or -1 if not found
      */
     public int indexOf(String str, int startIndex) {
         startIndex = (startIndex < 0 ? 0 : startIndex);
         if (str == null || startIndex >= size) {
             return -1;
         }
         int strLen = str.length();
         if (strLen == 1) {
             return indexOf(str.charAt(0), startIndex);
         }
         if (strLen == 0) {
             return startIndex;
         }
         if (strLen > size) {
             return -1;
         }
         char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+        // The original calculation for 'len' (thisBuf.length - strLen) was based on the
+        // physical capacity of the buffer, not the logical size of the StrBuilder's content.
+        // This could lead to searching beyond the actual end of the string, accessing
+        // stale or invalid characters in the buffer, which might cause an
+        // ArrayIndexOutOfBoundsException or incorrect results, especially after operations
+        // like 'deleteFirst' that change the 'size' without necessarily resizing 'buffer'.
+        // The loop should iterate only up to the last possible starting index for a match.
+        // If a match starts at index 'i', it occupies indices from 'i' to 'i + strLen - 1'.
+        // For 'i + strLen - 1' to be within bounds of the StrBuilder's content,
+        // 'i + strLen - 1' must be less than 'size', or 'i + strLen' must be less than or equal to 'size'.
+        // This implies 'i' must be less than or equal to 'size - strLen'.
+        // So, the exclusive upper bound for 'i' in the loop is 'size - strLen + 1'.
+        int len = size - strLen + 1;
         outer:
         for (int i = startIndex; i < len; i++) {
             for (int j = 0; j < strLen; j++) {
                 if (str.charAt(j) != thisBuf[i + j]) {
                     continue outer;
                 }
             }
             return i;
         }
         return -1;
     }
\ No newline at end of file
