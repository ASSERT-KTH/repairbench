diff --git a/tmp/1caec8a3-ffd4-4131-87a6-e68285e39ace_buggy.java b/tmp/89a76240-2544-4938-b43a-195d38744da9_fixed.java
index 81a6e8b..ecdfb6d 100644
--- a/tmp/1caec8a3-ffd4-4131-87a6-e68285e39ace_buggy.java
+++ b/tmp/89a76240-2544-4938-b43a-195d38744da9_fixed.java
@@ -1,19 +1,45 @@
     /**
      * Tells if the token looks like a short option.
      *
-     * @param token
+     * @param token The token to check.
+     * @return true if the token is a short option, false otherwise.
      */
     private boolean isShortOption(String token)
     {
         // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
         if (!token.startsWith("-") || token.length() == 1)
         {
             return false;
         }
 
-        // remove leading "-" and "=value"
-        int pos = token.indexOf("=");
-        String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);
-        return options.hasShortOption(optName);
-        // check for several concatenated short options
+        // remove leading "-"
+        String optNameCandidate = token.substring(1);
+
+        // If there's an equals sign, the option name is everything before it.
+        // This handles cases like "-S=V" where "S" is the option name.
+        int pos = optNameCandidate.indexOf("=");
+        String optName;
+        if (pos == -1) {
+            optName = optNameCandidate;
+        } else {
+            optName = optNameCandidate.substring(0, pos);
+        }
+
+        // Case 1: Check if the entire extracted optName is a defined short option.
+        // This handles multi-character short options like "-Dtest" (if "Dtest" is an option).
+        if (options.hasShortOption(optName)) {
+            return true;
+        }
+
+        // Case 2: Check for concatenated short options or short options with arguments.
+        // If the *first* character of the optName is a defined short option,
+        // then this token is considered a short option. The parser will then
+        // break it down into individual short options or an option with argument.
+        // This handles cases like "-ab" (if "a" is an option) or "-Svalue" (if "S" is an option).
+        if (optName.length() > 0 && options.hasShortOption(String.valueOf(optName.charAt(0)))) {
+            return true;
+        }
+
+        // If optName is empty (e.g., for "-="), or no matching short option is found, return false.
+        return false;
     }
\ No newline at end of file
