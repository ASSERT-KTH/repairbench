diff --git a/tmp/03915132-322b-4dc5-a386-5b262efbb4a7_buggy.java b/tmp/44b9afdf-f8dd-4b9a-82fc-d9c0e17f71e0_fixed.java
index 81a6e8b..2969ef6 100644
--- a/tmp/03915132-322b-4dc5-a386-5b262efbb4a7_buggy.java
+++ b/tmp/44b9afdf-f8dd-4b9a-82fc-d9c0e17f71e0_fixed.java
@@ -1,19 +1,21 @@
     /**
      * Tells if the token looks like a short option.
      * 
      * @param token
      */
     private boolean isShortOption(String token)
     {
         // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        if (!token.startsWith("-") || token.length() == 1)
+        if (!token.startsWith("-") || token.length() == 1) // Handles "-" itself
         {
             return false;
         }
 
-        // remove leading "-" and "=value"
-        int pos = token.indexOf("=");
-        String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);
-        return options.hasShortOption(optName);
-        // check for several concatenated short options
+        // The original logic would incorrectly return false for concatenated short options
+        // like "-ab" or "-t1" if "ab" or "t1" were not explicitly defined as single options.
+        // For concatenated short options, or a short option followed by a value,
+        // we only need to check if the *first character* after the hyphen is a valid short option.
+        // The parser's subsequent logic will then handle the breakdown of the rest of the token.
+        char firstCharAfterHyphen = token.charAt(1);
+        return options.hasShortOption(String.valueOf(firstCharAfterHyphen));
     }
