diff --git a/tmp/a92f2978-0533-423c-bdf0-d6c692157ac3_buggy.java b/tmp/80daf36e-cac7-4da5-b05f-71cd1641ac05_fixed.java
index 3002587..a18dbfc 100644
--- a/tmp/a92f2978-0533-423c-bdf0-d6c692157ac3_buggy.java
+++ b/tmp/80daf36e-cac7-4da5-b05f-71cd1641ac05_fixed.java
@@ -1,10 +1,55 @@
     /**
      * Fits a Gaussian function to the observed points.
      *
      * @return the parameters of the Gaussian function that best fits the
      * observed points (in the same order as above).
      */
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+
+        // Create a wrapper for Gaussian.Parametric to handle NotStrictlyPositiveException.
+        // The optimizer may try parameters (like sigma) that are not physically valid
+        // (e.g., sigma <= 0). The original Gaussian constructor throws an exception in this case,
+        // which stops the optimization. Instead, we want the optimizer to be penalized
+        // for trying invalid parameters, allowing it to continue searching for a valid fit.
+        org.apache.commons.math.analysis.ParametricFunction robustGaussianParametric = new org.apache.commons.math.analysis.ParametricFunction() {
+            private final Gaussian.Parametric original = new Gaussian.Parametric();
+
+            @Override
+            public double value(double x, double ... p) {
+                try {
+                    // Attempt to evaluate the original Gaussian function.
+                    // p[2] is the sigma parameter.
+                    return original.value(x, p);
+                } catch (final org.apache.commons.math.exception.NotStrictlyPositiveException e) {
+                    // If sigma is not strictly positive, the Gaussian function is undefined or
+                    // physically meaningless. Instead of throwing an exception and stopping
+                    // the optimizer, return a very large value (effectively an infinite penalty).
+                    // This tells the optimizer that this region of the parameter space is undesirable,
+                    // guiding it towards valid (positive sigma) values.
+                    return Double.POSITIVE_INFINITY;
+                }
+            }
+
+            @Override
+            public double[] gradient(double x, double ... p) {
+                try {
+                    // Compute the original gradient.
+                    return original.gradient(x, p);
+                } catch (final org.apache.commons.math.exception.NotStrictlyPositiveException e) {
+                    // If the gradient cannot be computed due to non-positive sigma,
+                    // and the value() method returned Double.POSITIVE_INFINITY,
+                    // the gradient is also effectively undefined or very large.
+                    // Returning NaN for gradient components is one way to indicate this
+                    // to the optimizer. Levenberg-Marquardt optimizer can sometimes
+                    // infer numerical gradients or will be guided by the infinite objective value.
+                    // Gaussian function has 3 parameters: amplitude, mean, sigma.
+                    return new double[] { Double.NaN, Double.NaN, Double.NaN };
+                }
+            }
+        };
+
+        // Pass the robust parametric function to the underlying fit method,
+        // allowing the optimizer to converge without being interrupted by exceptions.
+        return fit(robustGaussianParametric, guess);
     }
\ No newline at end of file
