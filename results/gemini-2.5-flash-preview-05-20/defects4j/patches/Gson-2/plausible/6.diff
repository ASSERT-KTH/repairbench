diff --git a/tmp/fefc7df4-2e8d-4236-920e-c125160c3552_buggy.java b/tmp/8b44d0be-0671-401e-a980-903133a48f52_fixed.java
index 6e45f80..4a8a9a9 100644
--- a/tmp/fefc7df4-2e8d-4236-920e-c125160c3552_buggy.java
+++ b/tmp/8b44d0be-0671-401e-a980-903133a48f52_fixed.java
@@ -1,21 +1,55 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
+          return null; // This factory cannot handle the requested type.
+        }
+
+        // The requested type is a subtype of 'clazz'.
+        // We must return a TypeAdapter<T2> that wraps the provided typeAdapter (which is for T1).
+        // This wrapper needs to perform the runtime check mentioned in the Javadoc.
+        return new TypeAdapter<T2>() {
+          @Override public void write(JsonWriter out, T2 value) throws IOException {
+            // If the value is null, write a JSON null.
+            if (value == null) {
+              out.nullValue();
+              return;
+            }
+            // T2 is a subtype of T1, so it's safe to cast 'value' to T1 for writing.
+            typeAdapter.write(out, (T1) value);
+          }
+
+          @Override public T2 read(JsonReader in) throws IOException {
+            // Read the object using the original type adapter for T1.
+            T1 result = typeAdapter.read(in);
+
+            // If the JSON was null, the result will be null, which is valid.
+            if (result == null) {
               return null;
             }
-        return (TypeAdapter<T2>) typeAdapter;
 
+            // Perform the runtime check: ensure the deserialized object is an instance of the requested type (T2).
+            if (!requestedType.isInstance(result)) {
+              // The deserialized type does not match the requested subtype.
+              // This indicates a mismatch, e.g., expecting a JsonObject but getting a JsonPrimitive.
+              throw new JsonSyntaxException("Expected a " + requestedType.getName()
+                  + " but was " + result.getClass().getName());
+            }
+
+            // The deserialized object is confirmed to be an instance of T2, so the cast is safe.
+            return (T2) result;
+          }
+        };
       }
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
\ No newline at end of file
