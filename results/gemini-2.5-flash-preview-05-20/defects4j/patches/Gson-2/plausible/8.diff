diff --git a/tmp/38cc293e-df06-4f2d-90d4-c0c85fd5a080_buggy.java b/tmp/46f4b5b8-4df9-4d48-902d-110edf3f3e46_fixed.java
index 6e45f80..056055b 100644
--- a/tmp/38cc293e-df06-4f2d-90d4-c0c85fd5a080_buggy.java
+++ b/tmp/46f4b5b8-4df9-4d48-902d-110edf3f3e46_fixed.java
@@ -1,21 +1,54 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
 
+        // The original `typeAdapter` is for `T1` (the base class in the hierarchy).
+        // We need to return a `TypeAdapter` for `T2` (the specific subtype requested).
+        // This new adapter wraps the original `typeAdapter` and adds the necessary
+        // runtime type check as described in the Javadoc.
+        final TypeAdapter<T1> hierarchyAdapter = typeAdapter;
+
+        return new TypeAdapter<T2>() {
+          @Override
+          public void write(JsonWriter out, T2 value) throws IOException {
+            // T2 is either T1 or a subtype of T1 (checked by clazz.isAssignableFrom(requestedType)).
+            // Therefore, casting `value` from `T2` to `T1` is safe for writing.
+            hierarchyAdapter.write(out, (T1) value);
+          }
+
+          @Override
+          public T2 read(JsonReader in) throws IOException {
+            // Read the object using the base adapter for T1.
+            T1 result = hierarchyAdapter.read(in);
+
+            // Perform the runtime check: confirm that the deserialized `result`
+            // is an instance of the `requestedType` (T2).
+            // If `result` is null, it's generally considered valid for any type.
+            if (result == null || requestedType.isInstance(result)) {
+              // If the object is null or an instance of the requested type, it's valid.
+              // The cast to T2 is safe because we just verified it with `isInstance`.
+              return (T2) result;
+            } else {
+              // If the deserialized object's actual type does not match the requested type,
+              // throw a JsonSyntaxException, as per the test case's expectation.
+              throw new JsonSyntaxException("Expected a " + requestedType.getName()
+                  + " but was " + result.getClass().getName());
+            }
+          }
+        };
       }
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
\ No newline at end of file
