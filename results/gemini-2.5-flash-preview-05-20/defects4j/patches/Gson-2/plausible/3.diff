diff --git a/tmp/675b815e-8061-4f79-bb62-7d1a0b75f28a_buggy.java b/tmp/a4a8a9a6-0db2-4503-8455-f0262c551d29_fixed.java
index 6e45f80..8066ecf 100644
--- a/tmp/675b815e-8061-4f79-bb62-7d1a0b75f28a_buggy.java
+++ b/tmp/a4a8a9a6-0db2-4503-8455-f0262c551d29_fixed.java
@@ -1,21 +1,49 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
 
+        // The original typeAdapter (for T1) is being used for a possibly more specific type (T2).
+        // This requires creating a new TypeAdapter<T2> that wraps the original.
+        // The read method of this new adapter must ensure that the deserialized T1 instance
+        // can be safely cast to T2, throwing a JsonSyntaxException if not.
+        return new TypeAdapter<T2>() {
+          @Override
+          public T2 read(JsonReader in) throws IOException {
+            // Read the object as T1 using the provided typeAdapter
+            T1 result = typeAdapter.read(in);
+
+            // Perform a runtime check to ensure the deserialized object is an instance of T2.
+            // If the original typeAdapter returns null, we don't need to check its type.
+            if (result != null && !requestedType.isInstance(result)) {
+              // The deserialized object is not assignable to the requested type T2.
+              // For example, reading a JsonPrimitive when JsonObject was expected.
+              throw new com.google.gson.JsonSyntaxException(
+                  "Expected a " + requestedType.getName() + " but was " + result.getClass().getName());
+            }
+            // Safely cast to T2 after the runtime check.
+            return (T2) result;
+          }
+
+          @Override
+          public void write(JsonWriter out, T2 value) throws IOException {
+            // Since requestedType (T2) is assignable from clazz (T1),
+            // 'value' (which is T2) can be safely cast to T1 for writing.
+            typeAdapter.write(out, (T1) value);
+          }
+        };
       }
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
\ No newline at end of file
