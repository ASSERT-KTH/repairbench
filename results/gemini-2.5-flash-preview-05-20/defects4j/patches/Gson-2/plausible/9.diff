diff --git a/tmp/a26fa70e-4a20-4772-8b37-da816494221e_buggy.java b/tmp/c2995a70-5d9e-451d-ae1c-94c5cc100f30_fixed.java
index 6e45f80..08ef883 100644
--- a/tmp/a26fa70e-4a20-4772-8b37-da816494221e_buggy.java
+++ b/tmp/c2995a70-5d9e-451d-ae1c-94c5cc100f30_fixed.java
@@ -1,21 +1,58 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
+          return null; // Not part of this hierarchy
+        }
+
+        // If the requested type is exactly the base type of the hierarchy,
+        // use the provided adapter directly without additional checks.
+        if (requestedType == clazz) {
+          return (TypeAdapter<T2>) typeAdapter; // T2 is effectively T1 here
+        }
+
+        // For subtypes of the base type, wrap the adapter to perform a runtime
+        // check to ensure the deserialized object is an instance of the requested type.
+        final TypeAdapter<T1> hierarchyAdapter = typeAdapter;
+
+        return new TypeAdapter<T2>() {
+          @Override public T2 read(JsonReader in) throws IOException {
+            // Read using the base adapter for the hierarchy
+            T1 result = hierarchyAdapter.read(in);
+
+            // If the result is null, return null.
+            if (result == null) {
               return null;
             }
-        return (TypeAdapter<T2>) typeAdapter;
 
+            // Perform the runtime check: confirm deserialized type matches requested type.
+            // If the deserialized object is not an instance of the requested type,
+            // it means the adapter produced an incompatible object.
+            if (!requestedType.isInstance(result)) {
+              throw new JsonSyntaxException("Expected a " + requestedType.getName()
+                  + " but was " + result.getClass().getName());
+            }
+
+            // The cast is safe due to the isInstance check.
+            return (T2) result;
+          }
+
+          @Override public void write(JsonWriter out, T2 value) throws IOException {
+            // When writing, the value is of type T2 (a subtype of T1).
+            // It's safe to cast to T1 for the hierarchyAdapter to write.
+            hierarchyAdapter.write(out, (T1) value);
+          }
+        };
       }
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
\ No newline at end of file
