diff --git a/tmp/a63f6201-4a0a-487c-95f6-5fcfa2a8e552_buggy.java b/tmp/5ac59216-7889-407c-bf67-edc86946d507_fixed.java
index 6e45f80..a39b65a 100644
--- a/tmp/a63f6201-4a0a-487c-95f6-5fcfa2a8e552_buggy.java
+++ b/tmp/5ac59216-7889-407c-bf67-edc86946d507_fixed.java
@@ -1,21 +1,54 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
 
+        // The original typeAdapter is for T1.
+        // We need an adapter for T2, which is a subtype of T1.
+        // This adapter must ensure that the deserialized object is indeed an instance of T2.
+        // The original code returned (TypeAdapter<T2>) typeAdapter directly, which was unsafe
+        // because typeAdapter<T1> might deserialize to a type that is a T1 but not a T2.
+        // For example, if T1 is JsonElement and T2 is JsonObject, an adapter for JsonElement
+        // might read a JsonPrimitive, leading to a ClassCastException if expected as JsonObject.
+        final TypeAdapter<T1> chosenAdapter = typeAdapter;
+
+        return new TypeAdapter<T2>() {
+          @Override
+          public void write(JsonWriter out, T2 value) throws java.io.IOException {
+            // If T2 is a subtype of T1 (which it is, because requestedType.isAssignableFrom(clazz) is true),
+            // then 'value' (T2) can be safely cast to T1 for writing.
+            chosenAdapter.write(out, (T1) value);
+          }
+
+          @Override
+          public T2 read(com.google.gson.stream.JsonReader in) throws java.io.IOException {
+            // Read the object as T1 using the base adapter.
+            T1 result = chosenAdapter.read(in);
+
+            // If the result is not null, ensure it's an instance of the requested type T2.
+            // This is the runtime check that prevents ClassCastException.
+            if (result != null && !requestedType.isInstance(result)) {
+              // This indicates a type mismatch. Throw a JsonSyntaxException as expected by tests.
+              throw new com.google.gson.JsonSyntaxException("Expected a " + requestedType.getName() + " but was " + result.getClass().getName());
+            }
+
+            // If result is null, or if requestedType.isInstance(result) was true,
+            // then the cast from T1 to T2 is safe.
+            return (T2) result;
+          }
+        };
       }
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
\ No newline at end of file
