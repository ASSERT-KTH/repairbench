diff --git a/tmp/eeef95aa-00b7-4485-8722-2f1a792a58d5_buggy.java b/tmp/00ba851e-b86b-4fe6-9c46-e65893fb4fe6_fixed.java
index 6e45f80..56dbfde 100644
--- a/tmp/eeef95aa-00b7-4485-8722-2f1a792a58d5_buggy.java
+++ b/tmp/00ba851e-b86b-4fe6-9c46-e65893fb4fe6_fixed.java
@@ -1,21 +1,52 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
 
+        // The type hierarchy factory is for a base class 'clazz' (T1) and its adapter 'typeAdapter'.
+        // When asked to create an adapter for 'requestedType' (T2), which is a subtype of T1,
+        // we should use the 'typeAdapter' for T1, but ensure that the deserialized object
+        // is actually an instance of T2 at runtime.
+        final TypeAdapter<T1> delegate = typeAdapter; // The adapter for the base class T1
+
+        return new TypeAdapter<T2>() {
+          @Override
+          public void write(JsonWriter out, T2 value) throws IOException {
+            // It's safe to cast T2 to T1 for writing, because T2 is a subtype of T1.
+            delegate.write(out, (T1) value);
+          }
+
+          @Override
+          public T2 read(JsonReader in) throws IOException {
+            // Read the object using the delegate adapter for T1.
+            T1 result = delegate.read(in);
+
+            // Perform the runtime check: confirm that the deserialized type matches the type requested.
+            // If the result is null (e.g., from a JSON null), it's always valid.
+            // Otherwise, ensure the result is an instance of the requestedType.
+            if (result == null || requestedType.isInstance(result)) {
+              // If the type matches, cast it to T2 and return. This cast is safe
+              // because requestedType.isInstance(result) was true.
+              return (T2) result;
+            } else {
+              // The deserialized type does not match the requested type, throw a JsonSyntaxException.
+              throw new JsonSyntaxException("Expected a " + requestedType.getName()
+                  + " but was " + result.getClass().getName());
+            }
+          }
+        };
       }
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
\ No newline at end of file
