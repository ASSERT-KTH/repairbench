diff --git a/tmp/9d39f16c-37e3-4d7f-b245-a2e5e29ad173_buggy.java b/tmp/546b3664-2060-42e6-ac89-b2dfacc4ce28_fixed.java
index 6e45f80..8731e29 100644
--- a/tmp/9d39f16c-37e3-4d7f-b245-a2e5e29ad173_buggy.java
+++ b/tmp/546b3664-2060-42e6-ac89-b2dfacc4ce28_fixed.java
@@ -1,21 +1,60 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
 
+        // The factory provides a TypeAdapter<T1> (the base type for the hierarchy).
+        // However, the `create` method is asked to provide a TypeAdapter<T2> for a specific
+        // requested type T2, which is a subtype of T1 (based on the isAssignableFrom check).
+        //
+        // To fulfill the contract "We do a runtime check to confirm that the deserialized type
+        // matches the type requested", we must wrap the original typeAdapter.
+        // The wrapped adapter will:
+        // 1. Delegate writing to the original adapter (safe because T2 is a subtype of T1).
+        // 2. Delegate reading to the original adapter, but then perform a runtime check
+        //    to ensure the deserialized object is an instance of the `requestedType` (T2).
+        //    If not, it throws a JsonSyntaxException, as expected by the failing test.
+
+        final TypeAdapter<T1> hierarchyAdapter = typeAdapter;
+        return new TypeAdapter<T2>() {
+          @Override
+          public void write(JsonWriter out, T2 value) throws IOException {
+            // T2 is a subtype of T1, so casting value to T1 is safe for writing.
+            hierarchyAdapter.write(out, (T1) value);
+          }
+
+          @Override
+          public T2 read(JsonReader in) throws IOException {
+            T1 result = hierarchyAdapter.read(in);
+            if (result == null) {
+              return null;
+            }
+
+            // Perform the runtime type check: ensure the deserialized object is an instance
+            // of the requested concrete type (T2).
+            if (!requestedType.isInstance(result)) {
+              // This is the point where a JsonPrimitive read from "abc" would be checked
+              // against a requestedType of JsonObject.class, and fail.
+              throw new com.google.gson.JsonSyntaxException(
+                  "Expected a " + requestedType.getName() + " but was " + result.getClass().getName());
+            }
+
+            // If the type check passes, it's safe to cast the result to T2.
+            return (T2) result;
+          }
+        };
       }
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
\ No newline at end of file
