diff --git a/tmp/43475b29-71a6-497b-8fab-70ef743d2683_buggy.java b/tmp/acb181fb-29c4-4c47-b89e-845792907c44_fixed.java
index 6e45f80..e71e6b4 100644
--- a/tmp/43475b29-71a6-497b-8fab-70ef743d2683_buggy.java
+++ b/tmp/acb181fb-29c4-4c47-b89e-845792907c44_fixed.java
@@ -1,21 +1,51 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
 
+        // The original `typeAdapter` is for `clazz` (T1).
+        // We are asked to provide an adapter for `requestedType` (T2), which is a subtype of `clazz`.
+        // The Javadoc states: "We do a runtime check to confirm that the deserialized type matches the type requested."
+        // This implies that the returned adapter must verify that the object read from JSON is
+        // indeed an instance of `requestedType`, not just `clazz`.
+        // The original implementation directly returned the `typeAdapter` cast to `TypeAdapter<T2>`,
+        // which could lead to `ClassCastException` if the `typeAdapter` (for T1) reads a value that is
+        // not an instance of T2, but is still assignable to T1 (e.g., JsonPrimitive vs JsonObject when T1 is JsonElement).
+
+        return new TypeAdapter<T2>() {
+          @Override public void write(JsonWriter out, T2 value) throws IOException {
+            // It's safe to cast T2 to T1 because T2 is a subtype of T1 (due to clazz.isAssignableFrom(requestedType)).
+            typeAdapter.write(out, (T1) value);
+          }
+
+          @Override public T2 read(JsonReader in) throws IOException {
+            // Read the value using the base type adapter (for T1).
+            T1 result = typeAdapter.read(in);
+
+            // Perform the runtime check as per the Javadoc.
+            // If the deserialized object is null or an instance of the requested type (T2), it's valid.
+            if (result == null || requestedType.isInstance(result)) {
+              return (T2) result;
+            } else {
+              // If the deserialized type does not match the requested type, throw an exception.
+              // This handles cases like expecting a JsonObject but receiving a JsonPrimitive.
+              throw new JsonSyntaxException("Expected a " + requestedType.getName()
+                  + " but was " + result.getClass().getName());
+            }
+          }
+        };
       }
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
\ No newline at end of file
