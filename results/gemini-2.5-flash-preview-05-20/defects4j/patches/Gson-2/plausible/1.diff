diff --git a/tmp/1e1a5844-7426-4bb9-bf78-2ec63352a02d_buggy.java b/tmp/a66259e6-496f-4d75-a0fb-bb4253922225_fixed.java
index 6e45f80..3cda1ec 100644
--- a/tmp/1e1a5844-7426-4bb9-bf78-2ec63352a02d_buggy.java
+++ b/tmp/a66259e6-496f-4d75-a0fb-bb4253922225_fixed.java
@@ -1,21 +1,55 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
 
+        // T1 is assignable from T2, meaning T1 is a supertype of T2 (or T1 == T2).
+        // The delegate `typeAdapter` handles deserialization for T1.
+        // We need to return a TypeAdapter<T2> that ensures the deserialized object
+        // is indeed an instance of T2 at runtime, throwing an exception if not.
+        final TypeAdapter<T1> delegate = typeAdapter;
+
+        return new TypeAdapter<T2>() {
+          @Override
+          public void write(JsonWriter out, T2 value) throws IOException {
+            // It's safe to cast T2 to T1 because T1 is a supertype of T2.
+            delegate.write(out, (T1) value);
+          }
+
+          @Override
+          public T2 read(JsonReader in) throws IOException {
+            // Read the object as T1 using the delegate adapter.
+            T1 result = delegate.read(in);
+
+            // If the delegate adapter read a null value, we return null.
+            if (result == null) {
+              return null;
+            }
+
+            // Perform the runtime check to confirm that the deserialized type
+            // (which is a T1 instance) matches the type requested (T2).
+            // This is the core of the fix, ensuring the correct type is received.
+            if (!requestedType.isInstance(result)) {
+              throw new JsonSyntaxException("Expected a " + requestedType.getName()
+                  + " but was " + result.getClass().getName());
+            }
+
+            // If the runtime check passes, it's safe to cast the T1 instance to T2.
+            return (T2) result;
+          }
+        };
       }
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
\ No newline at end of file
