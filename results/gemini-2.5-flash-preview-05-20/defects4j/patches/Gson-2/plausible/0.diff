diff --git a/tmp/df601d41-a75c-4a91-b50e-68c24839ffce_buggy.java b/tmp/1425acdd-ece1-4b5c-8f2a-8dfeba4d5a1b_fixed.java
index 6e45f80..f4d5c8f 100644
--- a/tmp/df601d41-a75c-4a91-b50e-68c24839ffce_buggy.java
+++ b/tmp/1425acdd-ece1-4b5c-8f2a-8dfeba4d5a1b_fixed.java
@@ -1,21 +1,58 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
 
+        // The 'typeAdapter' is for the base type T1 (e.g., JsonElement).
+        // The 'requestedType' is T2, which is T1 or a subtype of T1 (e.g., JsonObject).
+        // The original code directly cast TypeAdapter<T1> to TypeAdapter<T2>,
+        // which could lead to ClassCastException if the JSON content was for a different
+        // subtype (e.g., JsonPrimitive) than the requested T2 (e.g., JsonObject).
+        // We need to ensure that the object read by the base type adapter is indeed
+        // an instance of the requested type T2.
+
+        final TypeAdapter<T1> checkedAdapter = typeAdapter; // The adapter for the base type T1
+
+        // Return a new TypeAdapter<T2> that wraps the original typeAdapter.
+        // This wrapper will perform the necessary runtime type check during deserialization.
+        return new TypeAdapter<T2>() {
+          @Override
+          public void write(JsonWriter out, T2 value) throws IOException {
+            // It's safe to cast T2 to T1 since T2 is a subtype of T1 (or T1 itself).
+            checkedAdapter.write(out, (T1) value);
+          }
+
+          @Override
+          public T2 read(JsonReader in) throws IOException {
+            // Read the JSON content using the adapter for the base type T1.
+            T1 result = checkedAdapter.read(in);
+
+            // If the result is not null and is not an instance of the requested type T2,
+            // throw a JsonSyntaxException. This handles cases like expecting JsonObject
+            // but receiving a JsonPrimitive.
+            if (result != null && !requestedType.isInstance(result)) {
+              throw new com.google.gson.JsonSyntaxException(
+                  "Expected a " + requestedType.getName() + " but was " + result.getClass().getName());
+            }
+
+            // If the type matches (or result is null), it's safe to cast T1 to T2.
+            @SuppressWarnings("unchecked") // Safe due to the isInstance check above.
+            T2 castResult = (T2) result;
+            return castResult;
+          }
+        };
       }
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
\ No newline at end of file
