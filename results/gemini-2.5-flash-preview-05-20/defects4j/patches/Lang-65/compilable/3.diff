diff --git a/tmp/dd68c7ab-d0c6-449f-9dd4-254ffe53b34a_buggy.java b/tmp/95ec37ab-22bd-44d5-b7bb-5da2363d824a_fixed.java
index cae0024..8c451b7 100644
--- a/tmp/dd68c7ab-d0c6-449f-9dd4-254ffe53b34a_buggy.java
+++ b/tmp/95ec37ab-22bd-44d5-b7bb-5da2363d824a_fixed.java
@@ -1,103 +1,126 @@
     /**
      * <p>Internal calculation method.</p>
      * 
      * @param val  the calendar
      * @param field  the field constant
      * @param round  true to round, false to truncate
      * @throws ArithmeticException if the year is over 280 million
      */
     private static void modify(Calendar val, int field, boolean round) {
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
         
 
         // ----------------- Fix for LANG-59 ---------------------- START ---------------
         // see http://issues.apache.org/jira/browse/LANG-59
         //
         // Manually truncate milliseconds, seconds and minutes, rather than using
-        // Calendar methods.
-
-
-        // truncate milliseconds
-
-        // truncate seconds
-
-        // truncate minutes
-
-        // reset time
+        // Calendar methods. This is implemented in the loop below by checking
+        // if !round and if the current field is one of the problematic time fields.
         // ----------------- Fix for LANG-59 ----------------------- END ----------------
 
         boolean roundUp = false;
         for (int i = 0; i < fields.length; i++) {
+            // currentFieldGroupPrimary is the primary Calendar field for this group (e.g., MILLISECOND, SECOND, MINUTE, etc.)
+            int currentFieldGroupPrimary = fields[i][0];
+            boolean reachedTargetField = false;
+
+            // Check if the target 'field' for modification is in this current group
             for (int j = 0; j < fields[i].length; j++) {
                 if (fields[i][j] == field) {
-                    //This is our field... we stop looping
-                    if (round && roundUp) {
+                    reachedTargetField = true;
+                    break;
+                }
+            }
+
+            if (reachedTargetField) {
+                // This is our target field. Apply rounding if applicable and then return.
+                if (round && roundUp) { // roundUp is determined by the previous (finer) field's offset
                     if (field == DateUtils.SEMI_MONTH) {
                         // This is a special case that's hard to generalize
                         // If the date is 1, we round up to 16, otherwise
                         //  we subtract 15 days and add 1 month
                         if (val.get(Calendar.DATE) == 1) {
                             val.add(Calendar.DATE, 15);
                         } else {
                             val.add(Calendar.DATE, -15);
                             val.add(Calendar.MONTH, 1);
                         }
                     } else {
-                            //We need at add one to this field since the
+                        // We need to add one to this field since the
                         //  last number causes us to round up
-                            val.add(fields[i][0], 1);
+                        val.add(currentFieldGroupPrimary, 1);
                     }
                 }
-                    return;
+                return; // Modification complete for the target field
             }
-            }
-            //We have various fields that are not easy roundings
+
+            // If we haven't reached the target field yet, it means the current field
+            // is "finer" than the target field, and thus needs to be cleared (truncated)
+            // before proceeding to coarser fields. This is where the problematic
+            // Calendar.set() calls occur for lower time fields.
+
             int offset = 0;
             boolean offsetSet = false;
-            //These are special types of fields that require different rounding rules
-            switch (field) {
+
+            // Handle special cases for SEMI_MONTH or AM_PM to calculate 'offset' and 'roundUp'
+            // for fields that affect these special rounding types.
+            switch (field) { // This switch is based on the 'target' field, not the current field being processed.
                 case DateUtils.SEMI_MONTH:
-                    if (fields[i][0] == Calendar.DATE) {
+                    if (currentFieldGroupPrimary == Calendar.DATE) {
                         // If we're going to drop the DATE field's value,
                         //  we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
+                        // We need to subtract 1 since the date has a minimum of 1
                         offset = val.get(Calendar.DATE) - 1;
                         // If we're above 15 days adjustment, that means we're in the
                         //  bottom half of the month and should stay accordingly.
                         if (offset >= 15) {
                             offset -= 15;
                         }
                         // Record whether we're in the top or bottom half of that range
                         roundUp = offset > 7;
                         offsetSet = true;
                     }
                     break;
                 case Calendar.AM_PM:
-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {
+                    if (currentFieldGroupPrimary == Calendar.HOUR_OF_DAY) {
                         // If we're going to drop the HOUR field's value,
                         //  we want to do this our own way.
                         offset = val.get(Calendar.HOUR_OF_DAY);
                         if (offset >= 12) {
                             offset -= 12;
                         }
                         roundUp = offset > 6;
                         offsetSet = true;
                     }
                     break;
             }
+
             if (!offsetSet) {
-                int min = val.getActualMinimum(fields[i][0]);
-                int max = val.getActualMaximum(fields[i][0]);
-                //Calculate the offset from the minimum allowed value
-                offset = val.get(fields[i][0]) - min;
-                //Set roundUp if this is more than half way between the minimum and maximum
+                // Calculate the offset to set the current field to its minimum
+                int min = val.getActualMinimum(currentFieldGroupPrimary);
+                int max = val.getActualMaximum(currentFieldGroupPrimary);
+                offset = val.get(currentFieldGroupPrimary) - min; // The amount to subtract to clear the field to its minimum
+                // Determine if rounding up (for the *next* coarser field) is needed based on this field's value
                 roundUp = offset > ((max - min) / 2);
             }
-            //We need to remove this field
-                val.set(fields[i][0], val.get(fields[i][0]) - offset);
+
+            // We need to remove this field (set it to its truncated value, which is min - 0 for finer fields).
+            // This is the line that needs modification for LANG-59.
+            if (!round && (currentFieldGroupPrimary == Calendar.MILLISECOND ||
+                           currentFieldGroupPrimary == Calendar.SECOND ||
+                           currentFieldGroupPrimary == Calendar.MINUTE)) {
+                // For truncation of MILLISECOND, SECOND, or MINUTE,
+                // manually manipulate milliseconds to avoid Calendar.set() issues with DST.
+                // 'offset' holds the current value of the field relative to its minimum (e.g., 4 for 4 milliseconds).
+                // Subtracting this 'offset' effectively sets the field to its minimum (0).
+                val.setTimeInMillis(val.getTimeInMillis() - offset);
+            } else {
+                // For other fields, or if rounding, use the original Calendar.set() method.
+                val.set(currentFieldGroupPrimary, val.get(currentFieldGroupPrimary) - offset);
             }
+        }
+        // If the loop completes, it means the 'field' was not found in the 'fields' array.
         throw new IllegalArgumentException("The field " + field + " is not supported");
-
     }
