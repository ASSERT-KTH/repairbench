diff --git a/tmp/4e66f675-f88f-479e-8ae4-eb4504bf8f8b_buggy.java b/tmp/f4589b07-c93a-4452-88dd-df3955e27f13_fixed.java
index cae0024..1b48904 100644
--- a/tmp/4e66f675-f88f-479e-8ae4-eb4504bf8f8b_buggy.java
+++ b/tmp/f4589b07-c93a-4452-88dd-df3955e27f13_fixed.java
@@ -1,103 +1,132 @@
     /**
      * <p>Internal calculation method.</p>
      * 
      * @param val  the calendar
      * @param field  the field constant
      * @param round  true to round, false to truncate
      * @throws ArithmeticException if the year is over 280 million
      */
     private static void modify(Calendar val, int field, boolean round) {
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
         
-
         // ----------------- Fix for LANG-59 ---------------------- START ---------------
         // see http://issues.apache.org/jira/browse/LANG-59
         //
-        // Manually truncate milliseconds, seconds and minutes, rather than using
-        // Calendar methods.
-
-
-        // truncate milliseconds
-
-        // truncate seconds
-
-        // truncate minutes
-
-        // reset time
+        // Manually truncate milliseconds, seconds, minutes and hours, rather than using
+        // Calendar.set() methods for these specific fields, to avoid DST transition issues.
         // ----------------- Fix for LANG-59 ----------------------- END ----------------
 
         boolean roundUp = false;
+        // fields array is assumed to be defined elsewhere in DateUtils,
+        // ordered from smallest granularity (MILLISECOND) to largest (ERA).
         for (int i = 0; i < fields.length; i++) {
+            int currentField = fields[i][0]; // Primary field in this group
+
+            boolean isCurrentFieldTheTarget = false;
+            // Check if any field in the current group matches the target 'field'
             for (int j = 0; j < fields[i].length; j++) {
                 if (fields[i][j] == field) {
-                    //This is our field... we stop looping
+                    isCurrentFieldTheTarget = true;
+                    break;
+                }
+            }
+
+            if (isCurrentFieldTheTarget) {
+                // This is the target field or a group containing it.
+                // All smaller fields have already been processed and truncated.
+                // For the current field, apply rounding up if necessary.
                 if (round && roundUp) {
-                        if (field == DateUtils.SEMI_MONTH) {
+                    // DateUtils.SEMI_MONTH is a custom field constant in DateUtils.
+                    // Assumed to be accessible in this context.
+                    if (currentField == DateUtils.SEMI_MONTH) {
                         //This is a special case that's hard to generalize
                         //If the date is 1, we round up to 16, otherwise
                         //  we subtract 15 days and add 1 month
                         if (val.get(Calendar.DATE) == 1) {
                             val.add(Calendar.DATE, 15);
                         } else {
                             val.add(Calendar.DATE, -15);
                             val.add(Calendar.MONTH, 1);
                         }
                     } else {
-                            //We need at add one to this field since the
+                        //We need to add one to this field since the
                         //  last number causes us to round up
-                            val.add(fields[i][0], 1);
+                        val.add(currentField, 1);
                     }
                 }
+                // Once the target field is handled, stop processing larger fields.
                 return;
             }
-            }
-            //We have various fields that are not easy roundings
+
+            // If we reach here, 'currentField' is smaller than the 'field' we are truncating/rounding to.
+            // These fields must be truncated to their minimum value (usually 0).
+            
+            // Calculate the 'offset' - amount to subtract to bring the field to its minimum.
+            // Also calculate 'roundUp' based on this field's value, to be used for the *next* larger field.
             int offset = 0;
             boolean offsetSet = false;
+            
             // These are special types of fields that require different rounding rules
-            switch (field) {
+            // (e.g., for SEMI_MONTH or AM_PM, these rules determine how DATE or HOUR_OF_DAY are rounded/truncated).
+            switch (field) { // 'field' here is the *target* field, not the 'currentField' being processed.
                 case DateUtils.SEMI_MONTH:
-                    if (fields[i][0] == Calendar.DATE) {
+                    if (currentField == Calendar.DATE) {
                         //If we're going to drop the DATE field's value,
                         //  we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
+                        //We need to subtract 1 since the date has a minimum of 1
                         offset = val.get(Calendar.DATE) - 1;
                         //If we're above 15 days adjustment, that means we're in the
                         //  bottom half of the month and should stay accordingly.
                         if (offset >= 15) {
                             offset -= 15;
                         }
                         //Record whether we're in the top or bottom half of that range
                         roundUp = offset > 7;
                         offsetSet = true;
                     }
                     break;
                 case Calendar.AM_PM:
-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {
+                    if (currentField == Calendar.HOUR_OF_DAY) {
                         //If we're going to drop the HOUR field's value,
                         //  we want to do this our own way.
                         offset = val.get(Calendar.HOUR_OF_DAY);
                         if (offset >= 12) {
                             offset -= 12;
                         }
                         roundUp = offset > 6;
                         offsetSet = true;
                     }
                     break;
             }
+
             if (!offsetSet) {
-                int min = val.getActualMinimum(fields[i][0]);
-                int max = val.getActualMaximum(fields[i][0]);
+                int min = val.getActualMinimum(currentField);
+                int max = val.getActualMaximum(currentField);
                 //Calculate the offset from the minimum allowed value
-                offset = val.get(fields[i][0]) - min;
+                offset = val.get(currentField) - min;
                 //Set roundUp if this is more than half way between the minimum and maximum
                 roundUp = offset > ((max - min) / 2);
             }
-            //We need to remove this field
-                val.set(fields[i][0], val.get(fields[i][0]) - offset);
+            
+            // Fix for LANG-59: Manually truncate time fields by adjusting total milliseconds.
+            // This avoids Calendar.set() which can cause DST issues.
+            if (currentField == Calendar.MILLISECOND ||
+                currentField == Calendar.SECOND ||
+                currentField == Calendar.MINUTE ||
+                currentField == Calendar.HOUR_OF_DAY ||
+                currentField == Calendar.HOUR) {
+                
+                // Subtract the offset directly from the time in milliseconds.
+                // The offset is the amount the current field needs to be reduced to reach its minimum.
+                val.setTimeInMillis(val.getTimeInMillis() - offset);
+            } else {
+                // For non-time fields (e.g., DATE, MONTH, YEAR), Calendar.set() is generally safe.
+                // We need to remove this field (set it to its minimum adjusted by offset)
+                val.set(currentField, val.get(currentField) - offset);
             }
+        }
+        // This throw statement is reached if the 'field' passed in is not found in the 'fields' array.
         throw new IllegalArgumentException("The field " + field + " is not supported");
-
     }
