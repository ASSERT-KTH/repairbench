diff --git a/tmp/0ae6e8c5-0dfe-4055-aab2-ad017412e7ba_buggy.java b/tmp/a7bcd078-86db-43a9-a8a7-f65579edd173_fixed.java
index cae0024..a3d86df 100644
--- a/tmp/0ae6e8c5-0dfe-4055-aab2-ad017412e7ba_buggy.java
+++ b/tmp/a7bcd078-86db-43a9-a8a7-f65579edd173_fixed.java
@@ -1,103 +1,157 @@
     /**
      * <p>Internal calculation method.</p>
      * 
      * @param val  the calendar
      * @param field  the field constant
      * @param round  true to round, false to truncate
      * @throws ArithmeticException if the year is over 280 million
      */
     private static void modify(Calendar val, int field, boolean round) {
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
         
 
         // ----------------- Fix for LANG-59 ---------------------- START ---------------
         // see http://issues.apache.org/jira/browse/LANG-59
         //
         // Manually truncate milliseconds, seconds and minutes, rather than using
-        // Calendar methods.
+        // Calendar methods, to avoid issues with Daylight Saving Time transitions.
+        // This block handles explicit truncation for time fields.
 
+        long currentMillis = val.getTimeInMillis();
 
-        // truncate milliseconds
+        // Constants are not provided in the snippet, assuming their existence in DateUtils:
+        final long MILLIS_PER_SECOND = 1000L;
+        final long MILLIS_PER_MINUTE = 60L * MILLIS_PER_SECOND;
+        final long MILLIS_PER_HOUR = 60L * MILLIS_PER_MINUTE;
 
-        // truncate seconds
 
-        // truncate minutes
+        // If we are truncating (not rounding) and the target field implies zeroing out
+        // milliseconds, seconds, or minutes, we do it directly using setTimeInMillis.
+        // This avoids Calendar.set() method's potential for DST issues.
 
-        // reset time
+        // This logic replaces the implicit truncation for these fields in the main loop
+        // when 'round' is false.
+
+        if (!round) { // Only apply this explicit truncation for truncate mode
+            if (field == Calendar.SECOND || field == Calendar.MINUTE || field == Calendar.HOUR_OF_DAY ||
+                field == Calendar.HOUR || field == Calendar.AM_PM || field == Calendar.DATE ||
+                field == Calendar.DAY_OF_MONTH || field == Calendar.DAY_OF_YEAR ||
+                field == Calendar.DAY_OF_WEEK || field == Calendar.DAY_OF_WEEK_IN_MONTH ||
+                field == Calendar.WEEK_OF_YEAR || field == Calendar.WEEK_OF_MONTH ||
+                field == Calendar.MONTH || field == Calendar.YEAR || field == Calendar.ERA) {
+                
+                currentMillis = currentMillis - (currentMillis % MILLIS_PER_SECOND); // Truncate to second
+            }
+            if (field == Calendar.MINUTE || field == Calendar.HOUR_OF_DAY ||
+                field == Calendar.HOUR || field == Calendar.AM_PM || field == Calendar.DATE ||
+                field == Calendar.DAY_OF_MONTH || field == Calendar.DAY_OF_YEAR ||
+                field == Calendar.DAY_OF_WEEK || field == Calendar.DAY_OF_WEEK_IN_MONTH ||
+                field == Calendar.WEEK_OF_YEAR || field == Calendar.WEEK_OF_MONTH ||
+                field == Calendar.MONTH || field == Calendar.YEAR || field == Calendar.ERA) {
+                
+                currentMillis = currentMillis - (currentMillis % MILLIS_PER_MINUTE); // Truncate to minute
+            }
+            if (field == Calendar.HOUR_OF_DAY ||
+                field == Calendar.HOUR || field == Calendar.AM_PM || field == Calendar.DATE ||
+                field == Calendar.DAY_OF_MONTH || field == Calendar.DAY_OF_YEAR ||
+                field == Calendar.DAY_OF_WEEK || field == Calendar.DAY_OF_WEEK_IN_MONTH ||
+                field == Calendar.WEEK_OF_YEAR || field == Calendar.WEEK_OF_MONTH ||
+                field == Calendar.MONTH || field == Calendar.YEAR || field == Calendar.ERA) {
+                
+                currentMillis = currentMillis - (currentMillis % MILLIS_PER_HOUR); // Truncate to hour
+            }
+            // Apply the initial truncation calculated
+            val.setTimeInMillis(currentMillis);
+        }
         // ----------------- Fix for LANG-59 ----------------------- END ----------------
 
-        boolean roundUp = false;
+        boolean roundUp = false; // This 'roundUp' is for the *next* higher field
         for (int i = 0; i < fields.length; i++) {
+            int currentFieldType = fields[i][0]; // The field type being processed in this iteration
+
+            // Check if any field in the current group 'fields[i]' matches the target 'field'
+            boolean isTargetFieldGroup = false;
             for (int j = 0; j < fields[i].length; j++) {
                 if (fields[i][j] == field) {
-                    //This is our field... we stop looping
-                    if (round && roundUp) {
+                    isTargetFieldGroup = true;
+                    break;
+                }
+            }
+
+            if (isTargetFieldGroup) {
+                // This is our target field group.
+                if (round && roundUp) { // 'roundUp' comes from the *previous* iteration (lower field)
                     if (field == DateUtils.SEMI_MONTH) {
                         //This is a special case that's hard to generalize
                         //If the date is 1, we round up to 16, otherwise
                         //  we subtract 15 days and add 1 month
                         if (val.get(Calendar.DATE) == 1) {
                             val.add(Calendar.DATE, 15);
                         } else {
                             val.add(Calendar.DATE, -15);
                             val.add(Calendar.MONTH, 1);
                         }
                     } else {
-                            //We need at add one to this field since the
+                        //We need to add one to this field since the
                         //  last number causes us to round up
-                            val.add(fields[i][0], 1);
+                        val.add(currentFieldType, 1); // Use currentFieldType (e.g., Calendar.MONTH for SEMI_MONTH)
                     }
                 }
-                    return;
+                return; // We stop processing at the target field or its group.
             }
-            }
-            //We have various fields that are not easy roundings
+
+            // This block is for fields *lower* than the target field, or for non-target fields
+            // that are handled by the general truncation/rounding logic.
             int offset = 0;
             boolean offsetSet = false;
             // These are special types of fields that require different rounding rules
-            switch (field) {
+            switch (field) { // This switch correctly checks the *target* field, not currentFieldType
                 case DateUtils.SEMI_MONTH:
-                    if (fields[i][0] == Calendar.DATE) {
+                    if (currentFieldType == Calendar.DATE) { // If we're processing the DATE field, and target is SEMI_MONTH
                         //If we're going to drop the DATE field's value,
                         //  we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
+                        //We need to subtract 1 since the date has a minimum of 1
                         offset = val.get(Calendar.DATE) - 1;
                         //If we're above 15 days adjustment, that means we're in the
                         //  bottom half of the month and should stay accordingly.
                         if (offset >= 15) {
                             offset -= 15;
                         }
                         //Record whether we're in the top or bottom half of that range
-                        roundUp = offset > 7;
+                        roundUp = offset > 7; // This roundUp influences the next higher field (MONTH)
                         offsetSet = true;
                     }
                     break;
                 case Calendar.AM_PM:
-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {
+                    if (currentFieldType == Calendar.HOUR_OF_DAY) { // If we're processing HOUR_OF_DAY, and target is AM_PM
                         //If we're going to drop the HOUR field's value,
                         //  we want to do this our own way.
                         offset = val.get(Calendar.HOUR_OF_DAY);
                         if (offset >= 12) {
                             offset -= 12;
                         }
-                        roundUp = offset > 6;
+                        roundUp = offset > 6; // This roundUp influences the next higher field (DATE)
                         offsetSet = true;
                     }
                     break;
             }
             if (!offsetSet) {
-                int min = val.getActualMinimum(fields[i][0]);
-                int max = val.getActualMaximum(fields[i][0]);
+                int min = val.getActualMinimum(currentFieldType);
+                int max = val.getActualMaximum(currentFieldType);
                 //Calculate the offset from the minimum allowed value
-                offset = val.get(fields[i][0]) - min;
+                offset = val.get(currentFieldType) - min;
                 //Set roundUp if this is more than half way between the minimum and maximum
-                roundUp = offset > ((max - min) / 2);
+                roundUp = offset > ((max - min) / 2); // This roundUp influences the *next* higher field
             }
-            //We need to remove this field
-                val.set(fields[i][0], val.get(fields[i][0]) - offset);
+            
+            // We need to remove this field (i.e., truncate it to its minimum value)
+            // This applies to fields lower than the target field.
+            // For time fields (MILLISECOND, SECOND, MINUTE), the explicit LANG-59 fix above
+            // already handled truncation using setTimeInMillis().
+            // For rounding, or for higher fields, the original val.set is generally acceptable.
+            val.set(currentFieldType, val.get(currentFieldType) - offset);
         }
         throw new IllegalArgumentException("The field " + field + " is not supported");
-
     }
\ No newline at end of file
