diff --git a/tmp/5f147ee9-5d1f-4cbb-a47d-5c781c6f6b8f_buggy.java b/tmp/830ee79d-8de9-4fb6-a080-257a4f5690ac_fixed.java
index cae0024..977fb97 100644
--- a/tmp/5f147ee9-5d1f-4cbb-a47d-5c781c6f6b8f_buggy.java
+++ b/tmp/830ee79d-8de9-4fb6-a080-257a4f5690ac_fixed.java
@@ -1,103 +1,182 @@
+import java.util.Calendar;
+import java.util.TimeZone;
+
+// Assuming DateUtils.fields and DateUtils.SEMI_MONTH are accessible (e.g., from an outer class or static import).
+// For the purpose of this isolated function, these are assumed to be defined elsewhere in the class.
+// private static final int[][] fields = {...}; // This would be defined in DateUtils class
+// public static final int SEMI_MONTH = 1001; // This would be defined in DateUtils class
+
+// Dummy fields and SEMI_MONTH for compilation, in a real scenario these would be from DateUtils.
+class DateUtils {
+    public static final int SEMI_MONTH = 1001;
+    // This 'fields' array must match the one in the actual DateUtils class.
+    // This is a minimal representation for demonstration.
+    // In actual DateUtils, it's:
+    private static final int[][] fields = {
+        {Calendar.MILLISECOND},
+        {Calendar.SECOND},
+        {Calendar.MINUTE},
+        {Calendar.HOUR_OF_DAY, Calendar.HOUR},
+        {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.DAY_OF_YEAR, Calendar.DAY_OF_WEEK, Calendar.DAY_OF_WEEK_IN_MONTH},
+        {Calendar.MONTH, DateUtils.SEMI_MONTH},
+        {Calendar.YEAR},
+        {Calendar.ERA}
+    };
+
     /**
      * <p>Internal calculation method.</p>
      *
      * @param val  the calendar
      * @param field  the field constant
      * @param round  true to round, false to truncate
      * @throws ArithmeticException if the year is over 280 million
      */
     private static void modify(Calendar val, int field, boolean round) {
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
 
-
         // ----------------- Fix for LANG-59 ---------------------- START ---------------
         // see http://issues.apache.org/jira/browse/LANG-59
         //
         // Manually truncate milliseconds, seconds and minutes, rather than using
         // Calendar methods.
+        if (!round) { // Only apply this specific fix for truncation
+            long currentMillis = val.getTimeInMillis();
+            long newMillis = currentMillis;
 
+            // Get current time components without affecting the Calendar instance
+            int ms = val.get(Calendar.MILLISECOND);
+            int s = val.get(Calendar.SECOND);
+            int m = val.get(Calendar.MINUTE);
+            int h = val.get(Calendar.HOUR_OF_DAY);
 
-        // truncate milliseconds
+            // Calculate the amount of milliseconds to subtract based on the target field
+            switch (field) {
+                case Calendar.MILLISECOND:
+                    // Nothing to truncate below milliseconds
+                    break;
+                case Calendar.SECOND:
+                    newMillis -= ms;
+                    break;
+                case Calendar.MINUTE:
+                    newMillis -= (ms + (s * 1000L));
+                    break;
+                case Calendar.HOUR_OF_DAY:
+                case Calendar.HOUR: // Calendar.HOUR implies truncation to 00:00:00.000 of the AM/PM hour
+                    newMillis -= (ms + (s * 1000L) + (m * 60000L));
+                    break;
+                case Calendar.DATE:
+                case Calendar.DAY_OF_MONTH:
+                case Calendar.DAY_OF_YEAR:
+                case Calendar.DAY_OF_WEEK:
+                case Calendar.DAY_OF_WEEK_IN_MONTH:
+                case Calendar.AM_PM: // AM_PM truncation means to the start of the current half-day (00:00 or 12:00)
+                case DateUtils.SEMI_MONTH: // SEMI_MONTH implies truncating to start of day (00:00:00.000)
+                case Calendar.MONTH:
+                case Calendar.YEAR:
+                case Calendar.ERA:
+                    // For these fields or coarser, reset time to 00:00:00.000
+                    newMillis -= (ms + (s * 1000L) + (m * 60000L) + (h * 3600000L));
+                    break;
+                default:
+                    // If the field is not recognized for truncation (e.g., a custom field
+                    // not handled here or an unsupported field), let the main loop handle it.
+                    // If it's truly unsupported, the IllegalArgumentException at the end will be thrown.
+                    break;
+            }
 
-        // truncate seconds
+            if (newMillis != currentMillis) { // Only set if something changed
+                val.setTimeInMillis(newMillis);
+            }
 
-        // truncate minutes
-
-        // reset time
+            // If the field was one of the time-related fields, we are done with truncation.
+            // For Date, Month, Year, etc., the time part has been zeroed, and the main loop
+            // will continue to handle the truncation of those date/month/year components.
+            if (field == Calendar.MILLISECOND ||
+                field == Calendar.SECOND ||
+                field == Calendar.MINUTE ||
+                field == Calendar.HOUR_OF_DAY ||
+                field == Calendar.HOUR ||
+                field == Calendar.AM_PM) {
+                return;
+            }
+        }
         // ----------------- Fix for LANG-59 ----------------------- END ----------------
 
         boolean roundUp = false;
         for (int i = 0; i < fields.length; i++) {
             for (int j = 0; j < fields[i].length; j++) {
                 if (fields[i][j] == field) {
                     //This is our field... we stop looping
                     if (round && roundUp) {
                         if (field == DateUtils.SEMI_MONTH) {
                             //This is a special case that's hard to generalize
                             //If the date is 1, we round up to 16, otherwise
                             //  we subtract 15 days and add 1 month
                             if (val.get(Calendar.DATE) == 1) {
                                 val.add(Calendar.DATE, 15);
                             } else {
                                 val.add(Calendar.DATE, -15);
                                 val.add(Calendar.MONTH, 1);
                             }
                         } else {
                             //We need at add one to this field since the
                             //  last number causes us to round up
                             val.add(fields[i][0], 1);
                         }
                     }
                     return;
                 }
             }
             //We have various fields that are not easy roundings
             int offset = 0;
             boolean offsetSet = false;
             //These are special types of fields that require different rounding rules
             switch (field) {
                 case DateUtils.SEMI_MONTH:
                     if (fields[i][0] == Calendar.DATE) {
                         //If we're going to drop the DATE field's value,
                         //  we want to do this our own way.
                         //We need to subtrace 1 since the date has a minimum of 1
                         offset = val.get(Calendar.DATE) - 1;
                         //If we're above 15 days adjustment, that means we're in the
                         //  bottom half of the month and should stay accordingly.
                         if (offset >= 15) {
                             offset -= 15;
                         }
                         //Record whether we're in the top or bottom half of that range
                         roundUp = offset > 7;
                         offsetSet = true;
                     }
                     break;
                 case Calendar.AM_PM:
                     if (fields[i][0] == Calendar.HOUR_OF_DAY) {
                         //If we're going to drop the HOUR field's value,
                         //  we want to do this our own way.
                         offset = val.get(Calendar.HOUR_OF_DAY);
                         if (offset >= 12) {
                             offset -= 12;
                         }
                         roundUp = offset > 6;
                         offsetSet = true;
                     }
                     break;
             }
             if (!offsetSet) {
                 int min = val.getActualMinimum(fields[i][0]);
                 int max = val.getActualMaximum(fields[i][0]);
                 //Calculate the offset from the minimum allowed value
                 offset = val.get(fields[i][0]) - min;
                 //Set roundUp if this is more than half way between the minimum and maximum
                 roundUp = offset > ((max - min) / 2);
             }
             //We need to remove this field
+            // For truncation of time fields, this was already handled by the LANG-59 fix block.
+            // For rounding, or for truncation of date/month/year fields, this logic is correct.
             val.set(fields[i][0], val.get(fields[i][0]) - offset);
         }
         throw new IllegalArgumentException("The field " + field + " is not supported");
 
     }
+}
\ No newline at end of file
