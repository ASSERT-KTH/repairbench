diff --git a/tmp/5b07e390-9d36-4006-a10d-db58614d4341_buggy.java b/tmp/8018ade6-6ee0-40b9-8213-7351feb35d26_fixed.java
index cae0024..1fe95ce 100644
--- a/tmp/5b07e390-9d36-4006-a10d-db58614d4341_buggy.java
+++ b/tmp/8018ade6-6ee0-40b9-8213-7351feb35d26_fixed.java
@@ -1,103 +1,152 @@
+import java.util.Calendar;
+import java.util.Date; // Required for val.getTime() in the comment or if using Date object.
+import java.util.TimeZone; // Required for the test context, not strictly for the function itself.
+// Assuming DateUtils.SEMI_MONTH, fields array, and other DateUtils context are available.
+
+// DateUtils.SEMI_MONTH (usually 1001 or another custom field ID)
+// DateUtils.fields (the array defining calendar field hierarchies and processing order)
+// private static final int[][] fields = {
+//         {Calendar.MILLISECOND},
+//         {Calendar.SECOND},
+//         {Calendar.MINUTE},
+//         {Calendar.HOUR_OF_DAY, Calendar.HOUR},
+//         {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.DAY_OF_YEAR, Calendar.DAY_OF_WEEK, Calendar.DAY_OF_WEEK_IN_MONTH, Calendar.WEEK_OF_YEAR, Calendar.WEEK_OF_MONTH},
+//         {Calendar.MONTH},
+//         {Calendar.YEAR}
+// };
+
+
     /**
      * <p>Internal calculation method.</p>
      * 
      * @param val  the calendar
      * @param field  the field constant
      * @param round  true to round, false to truncate
      * @throws ArithmeticException if the year is over 280 million
      */
     private static void modify(Calendar val, int field, boolean round) {
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
         
-
         // ----------------- Fix for LANG-59 ---------------------- START ---------------
         // see http://issues.apache.org/jira/browse/LANG-59
         //
         // Manually truncate milliseconds, seconds and minutes, rather than using
-        // Calendar methods.
-
-
-        // truncate milliseconds
-
-        // truncate seconds
-
-        // truncate minutes
-
-        // reset time
+        // Calendar methods which can cause issues with DST transitions.
+        // This fix is integrated into the main loop below by handling specific fields
+        // using getTimeInMillis() and setTimeInMillis().
         // ----------------- Fix for LANG-59 ----------------------- END ----------------
 
-        boolean roundUp = false;
+        boolean roundUp = false; // This 'roundUp' is calculated for the *previous* smaller field's offset, for carrying over.
         for (int i = 0; i < fields.length; i++) {
+            // Determine if the current group of fields (fields[i]) contains the target 'field'.
+            boolean foundTargetFieldInGroup = false;
             for (int j = 0; j < fields[i].length; j++) {
                 if (fields[i][j] == field) {
-                    //This is our field... we stop looping
-                    if (round && roundUp) {
-                        if (field == DateUtils.SEMI_MONTH) {
-                            //This is a special case that's hard to generalize
-                            //If the date is 1, we round up to 16, otherwise
-                            //  we subtract 15 days and add 1 month
-                            if (val.get(Calendar.DATE) == 1) {
-                                val.add(Calendar.DATE, 15);
-                            } else {
-                                val.add(Calendar.DATE, -15);
-                                val.add(Calendar.MONTH, 1);
+                    foundTargetFieldInGroup = true;
+                    break; // Found target field in this group, break inner loop
                 }
-                        } else {
-                            //We need at add one to this field since the
-                            //  last number causes us to round up
-                            val.add(fields[i][0], 1);
             }
-                    }
-                    return;
-                }
-            }
-            //We have various fields that are not easy roundings
+            
+            // Calculate offset and roundUp for the *current* field being processed (fields[i][0]).
+            // This 'roundUp' is based on the *current* field's value and will be used
+            // if we need to round up the *next higher* field (in the next iteration).
             int offset = 0;
             boolean offsetSet = false;
+            
             // These are special types of fields that require different rounding rules
+            // The switch is on 'field' (the target granularity), affecting how 'offset'
+            // and 'roundUp' are calculated for the *current* `fields[i][0]`.
             switch (field) {
                 case DateUtils.SEMI_MONTH:
                     if (fields[i][0] == Calendar.DATE) {
                         //If we're going to drop the DATE field's value,
                         //  we want to do this our own way.
                         //We need to subtrace 1 since the date has a minimum of 1
                         offset = val.get(Calendar.DATE) - 1;
                         //If we're above 15 days adjustment, that means we're in the
                         //  bottom half of the month and should stay accordingly.
                         if (offset >= 15) {
                             offset -= 15;
                         }
                         //Record whether we're in the top or bottom half of that range
                         roundUp = offset > 7;
                         offsetSet = true;
                     }
                     break;
                 case Calendar.AM_PM:
                     if (fields[i][0] == Calendar.HOUR_OF_DAY) {
                         //If we're going to drop the HOUR field's value,
                         //  we want to do this our own way.
                         offset = val.get(Calendar.HOUR_OF_DAY);
                         if (offset >= 12) {
                             offset -= 12;
                         }
                         roundUp = offset > 6;
                         offsetSet = true;
                     }
                     break;
             }
-            if (!offsetSet) {
+            
+            if (!offsetSet) { // If not a special case, use generic offset calculation
                 int min = val.getActualMinimum(fields[i][0]);
                 int max = val.getActualMaximum(fields[i][0]);
                 //Calculate the offset from the minimum allowed value
                 offset = val.get(fields[i][0]) - min;
                 //Set roundUp if this is more than half way between the minimum and maximum
                 roundUp = offset > ((max - min) / 2);
             }
-            //We need to remove this field
+
+            // Now, apply the truncation/rounding for the *current* `fields[i][0]`.
+            if (foundTargetFieldInGroup) {
+                // This is our field... we stop looping for fields[i] and potentially exit.
+                // If 'round' is true AND 'roundUp' (from the *previous* smaller field) is true,
+                // we need to round up the current field.
+                if (round && roundUp) {
+                    if (field == DateUtils.SEMI_MONTH) { // Special rounding for SEMI_MONTH
+                        //This is a special case that's hard to generalize
+                        //If the date is 1, we round up to 16, otherwise
+                        //  we subtract 15 days and add 1 month
+                        if (val.get(Calendar.DATE) == 1) {
+                            val.add(Calendar.DATE, 15);
+                        } else {
+                            val.add(Calendar.DATE, -15);
+                            val.add(Calendar.MONTH, 1);
+                        }
+                    } else {
+                        //We need at add one to this field since the
+                        //  last number causes us to round up
+                        val.add(fields[i][0], 1);
+                    }
+                }
+                return; // Exit after handling the target field
+            }
+            
+            // If we reach here, it means `field` was NOT found in the current `fields[i]` group.
+            // Therefore, we are currently processing a field that is *smaller* in granularity
+            // than the target `field`, and it needs to be truncated (set to its minimum).
+            
+            // The value `offset` is calculated above as `val.get(fields[i][0]) - min`.
+            // So, `val.set(fields[i][0], val.get(fields[i][0]) - offset)` is equivalent to `val.set(fields[i][0], min)`.
+            // For time fields, min is 0.
+            
+            // --- Fix for LANG-59: Manually truncate time fields using milliseconds ---
+            int currentFieldId = fields[i][0];
+            if (currentFieldId == Calendar.MILLISECOND) {
+                // Truncate milliseconds by setting them to 0 using millis arithmetic
+                val.setTimeInMillis((val.getTimeInMillis() / 1000L) * 1000L);
+            } else if (currentFieldId == Calendar.SECOND) {
+                // Truncate seconds (and implicitly milliseconds) by setting them to 0
+                val.setTimeInMillis((val.getTimeInMillis() / (60L * 1000L)) * (60L * 1000L));
+            } else if (currentFieldId == Calendar.MINUTE) {
+                // Truncate minutes (and implicitly seconds, milliseconds) by setting them to 0
+                val.setTimeInMillis((val.getTimeInMillis() / (60L * 60L * 1000L)) * (60L * 60L * 1000L));
+            } else {
+                // For other fields (HOUR_OF_DAY, DATE, MONTH, YEAR), use original Calendar.set()
+                // The current offset calculated is the value to subtract to set the field to its minimum.
                 val.set(fields[i][0], val.get(fields[i][0]) - offset);
             }
+        }
         throw new IllegalArgumentException("The field " + field + " is not supported");
-
     }
\ No newline at end of file
