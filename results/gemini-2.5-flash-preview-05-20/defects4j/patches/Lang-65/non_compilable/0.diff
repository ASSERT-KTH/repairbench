diff --git a/tmp/fd89d3e2-c273-40a5-9ef6-909912205ed6_buggy.java b/tmp/c7d048f1-1d27-4376-a859-e9f3b379d108_fixed.java
index cae0024..087bf0d 100644
--- a/tmp/fd89d3e2-c273-40a5-9ef6-909912205ed6_buggy.java
+++ b/tmp/c7d048f1-1d27-4376-a859-e9f3b379d108_fixed.java
@@ -1,103 +1,175 @@
+import java.util.Calendar;
+import java.util.Date; // Assuming these imports are present in the full file
+
+// Assuming DateUtils class structure like:
+// public class DateUtils {
+//     public static final int SEMI_MONTH = 1001; // Example, actual value would be in DateUtils
+//     // ... other fields and methods
+// }
+
+class DateUtils { // Renamed for context, actual class name is DateUtils
+    // Placeholder for fields array, actual content would be from DateUtils
+    private static final int[][] fields = {
+        {Calendar.MILLISECOND},
+        {Calendar.SECOND},
+        {Calendar.MINUTE},
+        {Calendar.HOUR_OF_DAY, Calendar.HOUR},
+        {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.DAY_OF_YEAR, Calendar.DAY_OF_WEEK, Calendar.DAY_OF_WEEK_IN_MONTH},
+        {Calendar.MONTH, Calendar.AM_PM},
+        {Calendar.YEAR},
+        {Calendar.ERA}
+    };
+    // Placeholder for SEMI_MONTH, actual content would be from DateUtils
+    public static final int SEMI_MONTH = 1001; // Value from DateUtils.SEMI_MONTH
+
     /**
      * <p>Internal calculation method.</p>
      * 
      * @param val  the calendar
      * @param field  the field constant
      * @param round  true to round, false to truncate
      * @throws ArithmeticException if the year is over 280 million
      */
     private static void modify(Calendar val, int field, boolean round) {
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
         
+        // Declare roundUp at the top so it can be set by the LANG-59 block
+        // and used by the general processing loop.
+        boolean roundUp = false;
 
         // ----------------- Fix for LANG-59 ---------------------- START ---------------
         // see http://issues.apache.org/jira/browse/LANG-59
         //
         // Manually truncate milliseconds, seconds and minutes, rather than using
         // Calendar methods.
+        // This ensures consistent behavior around DST transitions by using setTimeInMillis.
 
+        long time = val.getTimeInMillis(); // Current time in milliseconds since epoch
+        long currentMillisInDay = time % 86400000L; // Milliseconds from start of the day (00:00:00.000)
 
-        // truncate milliseconds
+        // 'amountToTruncate' will hold the number of milliseconds to remove from the current time
+        // to achieve the desired truncation level for time fields.
+        long amountToTruncate = 0;
 
-        // truncate seconds
+        // Determine 'amountToTruncate' and set 'roundUp' for time-related fields
+        if (field == Calendar.MILLISECOND) {
+            // No truncation needed below milliseconds
+            amountToTruncate = 0;
+        } else if (field == Calendar.SECOND) {
+            amountToTruncate = currentMillisInDay % 1000; // milliseconds
+            if (round && amountToTruncate >= 500) { // Round up if milliseconds >= 500
+                roundUp = true;
+            }
+        } else if (field == Calendar.MINUTE) {
+            amountToTruncate = currentMillisInDay % 60000; // milliseconds and seconds
+            if (round && amountToTruncate >= 30000) { // Round up if seconds >= 30
+                roundUp = true;
+            }
+        } else if (field == Calendar.HOUR || field == Calendar.HOUR_OF_DAY) {
+            amountToTruncate = currentMillisInDay % 3600000; // milliseconds, seconds, and minutes
+            if (round && amountToTruncate >= 1800000) { // Round up if minutes >= 30
+                roundUp = true;
+            }
+        } else {
+            // For higher fields (DATE, MONTH, YEAR, etc.), first truncate all time components to 00:00:00.000
+            amountToTruncate = currentMillisInDay;
+            if (round && amountToTruncate >= 43200000L) { // Round up if time is >= 12:00 (noon)
+                roundUp = true;
+            }
+        }
         
-        // truncate minutes
+        // Apply the calculated truncation directly using setTimeInMillis.
+        // This avoids Calendar's problematic internal field setting around DST boundaries.
+        if (amountToTruncate != 0) {
+            val.setTimeInMillis(time - amountToTruncate);
+        }
 
-        // reset time
         // ----------------- Fix for LANG-59 ----------------------- END ----------------
 
-        boolean roundUp = false;
+        // The 'roundUp' flag is now correctly determined for time fields (if 'round' is true).
+        // The following loop processes the remaining fields (DATE, MONTH, YEAR, etc.).
+        // If the target 'field' was a time field, the initial `setTimeInMillis` handled the truncation.
+        // When the loop iterates over smaller fields (e.g., MILLISECOND if target is SECOND),
+        // their `offset` calculation `val.get(fields[i][0]) - min` will yield 0,
+        // making `val.set(fields[i][0], val.get(fields[i][0]) - offset)` a safe no-op.
+
         for (int i = 0; i < fields.length; i++) {
             for (int j = 0; j < fields[i].length; j++) {
                 if (fields[i][j] == field) {
                     //This is our field... we stop looping
-                    if (round && roundUp) {
+                    if (round && roundUp) { // Use the roundUp flag set above.
                         if (field == DateUtils.SEMI_MONTH) {
                             //This is a special case that's hard to generalize
                             //If the date is 1, we round up to 16, otherwise
                             //  we subtract 15 days and add 1 month
                             if (val.get(Calendar.DATE) == 1) {
                                 val.add(Calendar.DATE, 15);
                             } else {
                                 val.add(Calendar.DATE, -15);
                                 val.add(Calendar.MONTH, 1);
                             }
                         } else {
                             //We need at add one to this field since the
                             //  last number causes us to round up
                             val.add(fields[i][0], 1);
                         }
                     }
-                    return;
+                    return; // Processing complete for the target field
                 }
             }
-            //We have various fields that are not easy roundings
-            int offset = 0;
+            // We have various fields that are not easy roundings.
+            // This part of the loop handles fields *smaller* than the target 'field'
+            // and sets them to their minimum values (truncation).
+            // For date fields, this logic is still relevant.
+            // For time fields, this was effectively already done by setTimeInMillis.
+            int offset = 0; // This 'offset' is local to this outer loop iteration.
             boolean offsetSet = false;
             //These are special types of fields that require different rounding rules
-            switch (field) {
+            switch (field) { // This switch operates based on the *target* field, not the current `fields[i][0]`
                 case DateUtils.SEMI_MONTH:
                     if (fields[i][0] == Calendar.DATE) {
                         //If we're going to drop the DATE field's value,
                         //  we want to do this our own way.
                         //We need to subtrace 1 since the date has a minimum of 1
                         offset = val.get(Calendar.DATE) - 1;
                         //If we're above 15 days adjustment, that means we're in the
                         //  bottom half of the month and should stay accordingly.
                         if (offset >= 15) {
                             offset -= 15;
                         }
                         //Record whether we're in the top or bottom half of that range
-                        roundUp = offset > 7;
+                        // This `roundUp` here refers to the method-level `roundUp`
+                        roundUp = offset > 7; // This determines roundUp for the DATE field based on SEMI_MONTH logic
                         offsetSet = true;
                     }
                     break;
                 case Calendar.AM_PM:
                     if (fields[i][0] == Calendar.HOUR_OF_DAY) {
                         //If we're going to drop the HOUR field's value,
                         //  we want to do this our own way.
                         offset = val.get(Calendar.HOUR_OF_DAY);
                         if (offset >= 12) {
                             offset -= 12;
                         }
-                        roundUp = offset > 6;
+                        roundUp = offset > 6; // This determines roundUp for the HOUR field based on AM_PM logic
                         offsetSet = true;
                     }
                     break;
             }
             if (!offsetSet) {
                 int min = val.getActualMinimum(fields[i][0]);
                 int max = val.getActualMaximum(fields[i][0]);
                 //Calculate the offset from the minimum allowed value
                 offset = val.get(fields[i][0]) - min;
                 //Set roundUp if this is more than half way between the minimum and maximum
-                roundUp = offset > ((max - min) / 2);
+                // This `roundUp` here refers to the method-level `roundUp`
+                roundUp = offset > ((max - min) / 2); // This determines roundUp for generic fields being truncated
             }
             //We need to remove this field
             val.set(fields[i][0], val.get(fields[i][0]) - offset);
         }
         throw new IllegalArgumentException("The field " + field + " is not supported");
-
+    }
 }
\ No newline at end of file
