diff --git a/tmp/6957eade-d482-4e1e-9249-843b277025e6_buggy.java b/tmp/fa3f87f1-eff3-4711-b5d1-a1b1d488392f_fixed.java
index f674e52..a06f15b 100644
--- a/tmp/6957eade-d482-4e1e-9249-843b277025e6_buggy.java
+++ b/tmp/fa3f87f1-eff3-4711-b5d1-a1b1d488392f_fixed.java
@@ -1,41 +1,43 @@
     /**
      * Test for the equality of two Complex objects.
      * <p>
      * If both the real and imaginary parts of two Complex numbers
      * are exactly the same, and neither is <code>Double.NaN</code>, the two
      * Complex objects are considered to be equal.</p>
      * <p>
      * All <code>NaN</code> values are considered to be equal - i.e, if either
      * (or both) real and imaginary parts of the complex number are equal
      * to <code>Double.NaN</code>, the complex number is equal to
      * <code>Complex.NaN</code>.</p>
      *
      * @param other Object to test for equality to this
      * @return true if two Complex objects are equal, false if
      *         object is null, not an instance of Complex, or
      *         not equal to this Complex instance
      *
      */
     public boolean equals(Object other) {
         boolean ret;
 
         if (this == other) {
             ret = true;
         } else if (other == null) {
             ret = false;
         } else  {
             try {
                 Complex rhs = (Complex)other;
                 if (rhs.isNaN()) {
                     ret = this.isNaN();
                 } else {
-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));
+                    // Use standard floating-point equality. This correctly treats 0.0 and -0.0 as equal.
+                    // If 'this' contains NaN, 'real == rhs.getReal()' (NaN == non-NaN) will correctly be false.
+                    ret = (real == rhs.getReal()) && (imaginary == rhs.getImaginary());
                 }
             } catch (ClassCastException ex) {
                 // ignore exception
                 ret = false;
             }
         }
 
         return ret;
     }
\ No newline at end of file
