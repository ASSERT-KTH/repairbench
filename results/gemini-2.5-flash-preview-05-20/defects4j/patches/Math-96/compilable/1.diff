diff --git a/tmp/22e7a9ad-9d39-4285-a8d8-0eba939b9c77_buggy.java b/tmp/cc983626-8304-4c34-967d-90146a200d9c_fixed.java
index f674e52..8ea5c2d 100644
--- a/tmp/22e7a9ad-9d39-4285-a8d8-0eba939b9c77_buggy.java
+++ b/tmp/cc983626-8304-4c34-967d-90146a200d9c_fixed.java
@@ -1,41 +1,57 @@
     /**
      * Test for the equality of two Complex objects.
      * <p>
      * If both the real and imaginary parts of two Complex numbers
      * are exactly the same, and neither is <code>Double.NaN</code>, the two
      * Complex objects are considered to be equal.</p>
      * <p>
      * All <code>NaN</code> values are considered to be equal - i.e, if either
      * (or both) real and imaginary parts of the complex number are equal
      * to <code>Double.NaN</code>, the complex number is equal to 
      * <code>Complex.NaN</code>.</p>
      *
      * @param other Object to test for equality to this
      * @return true if two Complex objects are equal, false if
      *         object is null, not an instance of Complex, or
      *         not equal to this Complex instance
      * 
      */
     public boolean equals(Object other) {
         boolean ret;
         
         if (this == other) { 
             ret = true;
         } else if (other == null) {
             ret = false;
         } else  {
             try {
                 Complex rhs = (Complex)other;
+                // As per the Javadoc, if either Complex number is a "NaN complex number"
+                // (i.e., its real or imaginary part is Double.NaN), then they are equal
+                // if and only if both are "NaN complex numbers".
                 if (rhs.isNaN()) {
                     ret = this.isNaN();
                 } else {
-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));
+                    // If neither 'this' nor 'rhs' are "NaN complex numbers",
+                    // then equality is determined by the exact sameness of their parts.
+                    // The original code used Double.doubleToRawLongBits for comparison.
+                    // This distinguishes between +0.0 and -0.0.
+                    // The test case `testMath221` implies that +0.0 and -0.0 should be
+                    // considered equal for the purpose of Complex equality (e.g., if a
+                    // multiplication results in -0.0 for a part where the expected
+                    // value is +0.0, they should still be considered equal).
+                    // Double.compare() treats +0.0 and -0.0 as equal, and also NaN as equal to NaN
+                    // (though NaN comparison for individual parts should ideally not be reached here
+                    // if the initial isNaN() check is correct).
+                    // Using Double.compare provides the desired numerical equality for non-NaN values.
+                    ret = (Double.compare(real, rhs.getReal()) == 0) && 
+                          (Double.compare(imaginary, rhs.getImaginary()) == 0);
                 }
             } catch (ClassCastException ex) {
                 // ignore exception
                 ret = false;
             }
         }
       
         return ret;
     }
\ No newline at end of file
